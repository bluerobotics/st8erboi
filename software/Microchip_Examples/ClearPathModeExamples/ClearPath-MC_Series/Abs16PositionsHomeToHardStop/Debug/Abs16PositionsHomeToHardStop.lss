
Abs16PositionsHomeToHardStop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020c98  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024c98  00024c98  00024c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  00024d94  00024d94  00024d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ab0  20000000  00024f1c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ab0  000259d0  00030ab0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a898e  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd49  00000000  00000000  000d9537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017e8  00000000  00000000  000e9280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007b50  00000000  00000000  000eaa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f25b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000142dd  00000000  00000000  00114134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f1917  00000000  00000000  00128411  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000745c  00000000  00000000  00219d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000234fb  00000000  00000000  00221184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 3d 93 00 00 d1 42 00 00 d1 42 00 00     ... =....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	d9 91 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 ad 90 00 00 bd 90 00 00 cd 90 00 00     .B..............
    407c:	dd 90 00 00 ed 90 00 00 fd 90 00 00 0d 91 00 00     ................
    408c:	1d 91 00 00 2d 91 00 00 3d 91 00 00 4d 91 00 00     ....-...=...M...
    409c:	5d 91 00 00 6d 91 00 00 79 91 00 00 89 91 00 00     ]...m...y.......
    40ac:	99 91 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 41 90 00 00 d1 42 00 00 4d 90 00 00     .B..A....B..M...
    4104:	59 90 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     Y....B...B...B..
    4114:	d1 42 00 00 65 90 00 00 d1 42 00 00 71 90 00 00     .B..e....B..q...
    4124:	7d 90 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     }....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 89 90 00 00 d1 42 00 00 95 90 00 00     .B.......B......
    4174:	a1 90 00 00 00 00 00 00 00 00 00 00 7d 2e 01 00     ............}...
    4184:	81 2e 01 00 85 2e 01 00 89 2e 01 00 35 90 00 00     ............5...
    4194:	2d 92 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     -....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	a9 91 00 00 d1 42 00 00 d1 42 00 00 c1 91 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ab0 	.word	0x20000ab0
    4280:	00000000 	.word	0x00000000
    4284:	00024c94 	.word	0x00024c94

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024c94 	.word	0x00024c94
    42c4:	20000ab4 	.word	0x20000ab4
    42c8:	20000aac 	.word	0x20000aac
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01a fc32 	bl	1eb40 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f001 fbbb 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    42fe:	f001 fbb3 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f001 bbab 	b.w	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001480 	.word	0x20001480

00004318 <_Z14MoveToPositionh>:
 *    int positionNum  - The position number to command (defined in MSP)
 *
 * Returns: True/False depending on whether the position was successfully
 *    commanded.
 */
bool MoveToPosition(uint8_t positionNum) {
    4318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Check if a motor fault is currently preventing motion
	// Clear fault if configured to do so 
    if (motor.StatusReg().bit.MotorInFault) {
    431c:	4d81      	ldr	r5, [pc, #516]	; (4524 <_Z14MoveToPositionh+0x20c>)
    431e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4322:	06d9      	lsls	r1, r3, #27
bool MoveToPosition(uint8_t positionNum) {
    4324:	b08b      	sub	sp, #44	; 0x2c
    if (motor.StatusReg().bit.MotorInFault) {
    4326:	f100 80de 	bmi.w	44e6 <_Z14MoveToPositionh+0x1ce>
    432a:	4c7f      	ldr	r4, [pc, #508]	; (4528 <_Z14MoveToPositionh+0x210>)
            if (!SendChar(buffer[iChar])) {
    432c:	4e7f      	ldr	r6, [pc, #508]	; (452c <_Z14MoveToPositionh+0x214>)
    432e:	4680      	mov	r8, r0
    4330:	f104 0714 	add.w	r7, r4, #20
    4334:	f814 1b01 	ldrb.w	r1, [r4], #1
    4338:	4630      	mov	r0, r6
    433a:	f001 fb95 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    433e:	b108      	cbz	r0, 4344 <_Z14MoveToPositionh+0x2c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4340:	42bc      	cmp	r4, r7
    4342:	d1f7      	bne.n	4334 <_Z14MoveToPositionh+0x1c>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[1 + 8 * sizeof(number)];
        utoa(number, strRep, radix);
    4344:	a901      	add	r1, sp, #4
    4346:	220a      	movs	r2, #10
    4348:	4640      	mov	r0, r8
    434a:	f01b ff4f 	bl	201ec <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    434e:	a801      	add	r0, sp, #4
    4350:	f01a fbf6 	bl	1eb40 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4354:	b160      	cbz	r0, 4370 <_Z14MoveToPositionh+0x58>
    4356:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    4358:	4f74      	ldr	r7, [pc, #464]	; (452c <_Z14MoveToPositionh+0x214>)
    435a:	1826      	adds	r6, r4, r0
    435c:	e001      	b.n	4362 <_Z14MoveToPositionh+0x4a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    435e:	42a6      	cmp	r6, r4
    4360:	d006      	beq.n	4370 <_Z14MoveToPositionh+0x58>
            if (!SendChar(buffer[iChar])) {
    4362:	f814 1b01 	ldrb.w	r1, [r4], #1
    4366:	4638      	mov	r0, r7
    4368:	f001 fb7e 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    436c:	2800      	cmp	r0, #0
    436e:	d1f6      	bne.n	435e <_Z14MoveToPositionh+0x46>
        return SendChar('\r') && SendChar('\n');
    4370:	210d      	movs	r1, #13
    4372:	486e      	ldr	r0, [pc, #440]	; (452c <_Z14MoveToPositionh+0x214>)
    4374:	f001 fb78 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4378:	2800      	cmp	r0, #0
    437a:	f040 80c8 	bne.w	450e <_Z14MoveToPositionh+0x1f6>
    }

    SerialPort.Send("Moving to position: ");
    SerialPort.SendLine(positionNum);

    if (positionNum < 17 && positionNum > 0) {
    437e:	f108 33ff 	add.w	r3, r8, #4294967295
    4382:	2b0f      	cmp	r3, #15
    4384:	f200 80aa 	bhi.w	44dc <_Z14MoveToPositionh+0x1c4>
        // Sends pulses on Input B based on positionNum
        for (uint8_t i = 0; i < positionNum; i++) {
            motor.MotorInBState(true);
    4388:	f8df 9198 	ldr.w	r9, [pc, #408]	; 4524 <_Z14MoveToPositionh+0x20c>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    438c:	4e68      	ldr	r6, [pc, #416]	; (4530 <_Z14MoveToPositionh+0x218>)
        for (uint8_t i = 0; i < positionNum; i++) {
    438e:	2400      	movs	r4, #0
    4390:	2700      	movs	r7, #0
            motor.MotorInBState(true);
    4392:	2101      	movs	r1, #1
    4394:	4648      	mov	r0, r9
    4396:	f000 fbaf 	bl	4af8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    439a:	4630      	mov	r0, r6
    439c:	4639      	mov	r1, r7
    439e:	f005 f9bb 	bl	9718 <Delay_cycles>
        for (uint8_t i = 0; i < positionNum; i++) {
    43a2:	3401      	adds	r4, #1
            Delay_ms(1);
            motor.MotorInBState(false);
    43a4:	2100      	movs	r1, #0
    43a6:	4648      	mov	r0, r9
    43a8:	f000 fba6 	bl	4af8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
        for (uint8_t i = 0; i < positionNum; i++) {
    43ac:	b2e4      	uxtb	r4, r4
    43ae:	4630      	mov	r0, r6
    43b0:	4639      	mov	r1, r7
    43b2:	f005 f9b1 	bl	9718 <Delay_cycles>
    43b6:	4544      	cmp	r4, r8
    43b8:	dbeb      	blt.n	4392 <_Z14MoveToPositionh+0x7a>
            Delay_ms(1);
        }

        // Triggers the command
        motor.MotorInAState(true);
    43ba:	2101      	movs	r1, #1
    43bc:	4859      	ldr	r0, [pc, #356]	; (4524 <_Z14MoveToPositionh+0x20c>)
    43be:	4c5d      	ldr	r4, [pc, #372]	; (4534 <_Z14MoveToPositionh+0x21c>)
            if (!SendChar(buffer[iChar])) {
    43c0:	4e5a      	ldr	r6, [pc, #360]	; (452c <_Z14MoveToPositionh+0x214>)
    43c2:	f000 fb7f 	bl	4ac4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    43c6:	485a      	ldr	r0, [pc, #360]	; (4530 <_Z14MoveToPositionh+0x218>)
    43c8:	2100      	movs	r1, #0
    43ca:	f005 f9a5 	bl	9718 <Delay_cycles>
        Delay_ms(1);
        motor.MotorInAState(false);
    43ce:	2100      	movs	r1, #0
    43d0:	4854      	ldr	r0, [pc, #336]	; (4524 <_Z14MoveToPositionh+0x20c>)
    43d2:	f000 fb77 	bl	4ac4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    43d6:	4858      	ldr	r0, [pc, #352]	; (4538 <_Z14MoveToPositionh+0x220>)
    43d8:	2100      	movs	r1, #0
    43da:	f104 0719 	add.w	r7, r4, #25
    43de:	f005 f99b 	bl	9718 <Delay_cycles>
    43e2:	f814 1b01 	ldrb.w	r1, [r4], #1
    43e6:	4630      	mov	r0, r6
    43e8:	f001 fb3e 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ec:	b150      	cbz	r0, 4404 <_Z14MoveToPositionh+0xec>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43ee:	42a7      	cmp	r7, r4
    43f0:	d1f7      	bne.n	43e2 <_Z14MoveToPositionh+0xca>
        return SendChar('\r') && SendChar('\n');
    43f2:	210d      	movs	r1, #13
    43f4:	484d      	ldr	r0, [pc, #308]	; (452c <_Z14MoveToPositionh+0x214>)
    43f6:	f001 fb37 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43fa:	b118      	cbz	r0, 4404 <_Z14MoveToPositionh+0xec>
    43fc:	210a      	movs	r1, #10
    43fe:	484b      	ldr	r0, [pc, #300]	; (452c <_Z14MoveToPositionh+0x214>)
    4400:	f001 fb32 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    }

    // Waits for HLFB to assert (signaling the move has successfully completed)
    Delay_ms(2);
    SerialPort.SendLine("Moving.. Waiting for HLFB");
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4404:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    4408:	2b01      	cmp	r3, #1
    440a:	d003      	beq.n	4414 <_Z14MoveToPositionh+0xfc>
			!motor.StatusReg().bit.MotorInFault) {
    440c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4410:	06da      	lsls	r2, r3, #27
    4412:	d5f7      	bpl.n	4404 <_Z14MoveToPositionh+0xec>
        continue;
    }
	// Check if a motor faulted during move
	// Clear fault if configured to do so 
    if (motor.StatusReg().bit.MotorInFault) {
    4414:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4418:	06db      	lsls	r3, r3, #27
    441a:	d417      	bmi.n	444c <_Z14MoveToPositionh+0x134>
    441c:	4c47      	ldr	r4, [pc, #284]	; (453c <_Z14MoveToPositionh+0x224>)
            if (!SendChar(buffer[iChar])) {
    441e:	4d43      	ldr	r5, [pc, #268]	; (452c <_Z14MoveToPositionh+0x214>)
    4420:	f104 0609 	add.w	r6, r4, #9
    4424:	f814 1b01 	ldrb.w	r1, [r4], #1
    4428:	4628      	mov	r0, r5
    442a:	f001 fb1d 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    442e:	b140      	cbz	r0, 4442 <_Z14MoveToPositionh+0x12a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4430:	42a6      	cmp	r6, r4
    4432:	d1f7      	bne.n	4424 <_Z14MoveToPositionh+0x10c>
        return SendChar('\r') && SendChar('\n');
    4434:	210d      	movs	r1, #13
    4436:	483d      	ldr	r0, [pc, #244]	; (452c <_Z14MoveToPositionh+0x214>)
    4438:	f001 fb16 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    443c:	4604      	mov	r4, r0
    443e:	2800      	cmp	r0, #0
    4440:	d16a      	bne.n	4518 <_Z14MoveToPositionh+0x200>
		SerialPort.SendLine("Motion may not have completed as expected. Proceed with caution.");
		SerialPort.SendLine();
		return false;
    } else {
		SerialPort.SendLine("Move Done");
		return true;
    4442:	2401      	movs	r4, #1
	}
}
    4444:	4620      	mov	r0, r4
    4446:	b00b      	add	sp, #44	; 0x2c
    4448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    444c:	4c3c      	ldr	r4, [pc, #240]	; (4540 <_Z14MoveToPositionh+0x228>)
            if (!SendChar(buffer[iChar])) {
    444e:	4d37      	ldr	r5, [pc, #220]	; (452c <_Z14MoveToPositionh+0x214>)
    4450:	f104 0615 	add.w	r6, r4, #21
    4454:	f814 1b01 	ldrb.w	r1, [r4], #1
    4458:	4628      	mov	r0, r5
    445a:	f001 fb05 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    445e:	b150      	cbz	r0, 4476 <_Z14MoveToPositionh+0x15e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4460:	42b4      	cmp	r4, r6
    4462:	d1f7      	bne.n	4454 <_Z14MoveToPositionh+0x13c>
        return SendChar('\r') && SendChar('\n');
    4464:	210d      	movs	r1, #13
    4466:	4831      	ldr	r0, [pc, #196]	; (452c <_Z14MoveToPositionh+0x214>)
    4468:	f001 fafe 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    446c:	b118      	cbz	r0, 4476 <_Z14MoveToPositionh+0x15e>
    446e:	210a      	movs	r1, #10
    4470:	482e      	ldr	r0, [pc, #184]	; (452c <_Z14MoveToPositionh+0x214>)
    4472:	f001 faf9 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4476:	4c33      	ldr	r4, [pc, #204]	; (4544 <_Z14MoveToPositionh+0x22c>)
            if (!SendChar(buffer[iChar])) {
    4478:	4d2c      	ldr	r5, [pc, #176]	; (452c <_Z14MoveToPositionh+0x214>)
    447a:	f104 0644 	add.w	r6, r4, #68	; 0x44
    447e:	f814 1b01 	ldrb.w	r1, [r4], #1
    4482:	4628      	mov	r0, r5
    4484:	f001 faf0 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4488:	b150      	cbz	r0, 44a0 <_Z14MoveToPositionh+0x188>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    448a:	42a6      	cmp	r6, r4
    448c:	d1f7      	bne.n	447e <_Z14MoveToPositionh+0x166>
        return SendChar('\r') && SendChar('\n');
    448e:	210d      	movs	r1, #13
    4490:	4826      	ldr	r0, [pc, #152]	; (452c <_Z14MoveToPositionh+0x214>)
    4492:	f001 fae9 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4496:	b118      	cbz	r0, 44a0 <_Z14MoveToPositionh+0x188>
    4498:	210a      	movs	r1, #10
    449a:	4824      	ldr	r0, [pc, #144]	; (452c <_Z14MoveToPositionh+0x214>)
    449c:	f001 fae4 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44a0:	4c29      	ldr	r4, [pc, #164]	; (4548 <_Z14MoveToPositionh+0x230>)
            if (!SendChar(buffer[iChar])) {
    44a2:	4d22      	ldr	r5, [pc, #136]	; (452c <_Z14MoveToPositionh+0x214>)
    44a4:	f104 0640 	add.w	r6, r4, #64	; 0x40
    44a8:	f814 1b01 	ldrb.w	r1, [r4], #1
    44ac:	4628      	mov	r0, r5
    44ae:	f001 fadb 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44b2:	b150      	cbz	r0, 44ca <_Z14MoveToPositionh+0x1b2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44b4:	42a6      	cmp	r6, r4
    44b6:	d1f7      	bne.n	44a8 <_Z14MoveToPositionh+0x190>
        return SendChar('\r') && SendChar('\n');
    44b8:	210d      	movs	r1, #13
    44ba:	481c      	ldr	r0, [pc, #112]	; (452c <_Z14MoveToPositionh+0x214>)
    44bc:	f001 fad4 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44c0:	b118      	cbz	r0, 44ca <_Z14MoveToPositionh+0x1b2>
    44c2:	210a      	movs	r1, #10
    44c4:	4819      	ldr	r0, [pc, #100]	; (452c <_Z14MoveToPositionh+0x214>)
    44c6:	f001 facf 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44ca:	210d      	movs	r1, #13
    44cc:	4817      	ldr	r0, [pc, #92]	; (452c <_Z14MoveToPositionh+0x214>)
    44ce:	f001 facb 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44d2:	b118      	cbz	r0, 44dc <_Z14MoveToPositionh+0x1c4>
    44d4:	210a      	movs	r1, #10
    44d6:	4815      	ldr	r0, [pc, #84]	; (452c <_Z14MoveToPositionh+0x214>)
    44d8:	f001 fac6 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
        return false;
    44dc:	2400      	movs	r4, #0
}
    44de:	4620      	mov	r0, r4
    44e0:	b00b      	add	sp, #44	; 0x2c
    44e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    44e6:	4c19      	ldr	r4, [pc, #100]	; (454c <_Z14MoveToPositionh+0x234>)
            if (!SendChar(buffer[iChar])) {
    44e8:	4d10      	ldr	r5, [pc, #64]	; (452c <_Z14MoveToPositionh+0x214>)
    44ea:	f104 0669 	add.w	r6, r4, #105	; 0x69
    44ee:	f814 1b01 	ldrb.w	r1, [r4], #1
    44f2:	4628      	mov	r0, r5
    44f4:	f001 fab8 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44f8:	2800      	cmp	r0, #0
    44fa:	d0ef      	beq.n	44dc <_Z14MoveToPositionh+0x1c4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44fc:	42a6      	cmp	r6, r4
    44fe:	d1f6      	bne.n	44ee <_Z14MoveToPositionh+0x1d6>
        return SendChar('\r') && SendChar('\n');
    4500:	210d      	movs	r1, #13
    4502:	480a      	ldr	r0, [pc, #40]	; (452c <_Z14MoveToPositionh+0x214>)
    4504:	f001 fab0 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4508:	2800      	cmp	r0, #0
    450a:	d0e7      	beq.n	44dc <_Z14MoveToPositionh+0x1c4>
    450c:	e7e2      	b.n	44d4 <_Z14MoveToPositionh+0x1bc>
    450e:	210a      	movs	r1, #10
    4510:	4806      	ldr	r0, [pc, #24]	; (452c <_Z14MoveToPositionh+0x214>)
    4512:	f001 faa9 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4516:	e732      	b.n	437e <_Z14MoveToPositionh+0x66>
    4518:	210a      	movs	r1, #10
    451a:	4804      	ldr	r0, [pc, #16]	; (452c <_Z14MoveToPositionh+0x214>)
    451c:	f001 faa4 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4520:	e7dd      	b.n	44de <_Z14MoveToPositionh+0x1c6>
    4522:	bf00      	nop
    4524:	20000b60 	.word	0x20000b60
    4528:	0002282c 	.word	0x0002282c
    452c:	20001480 	.word	0x20001480
    4530:	0001d4c0 	.word	0x0001d4c0
    4534:	00022844 	.word	0x00022844
    4538:	0003a980 	.word	0x0003a980
    453c:	00022904 	.word	0x00022904
    4540:	00022860 	.word	0x00022860
    4544:	00022878 	.word	0x00022878
    4548:	000228c0 	.word	0x000228c0
    454c:	000227c0 	.word	0x000227c0

00004550 <main>:
int main() {
    4550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    4552:	4b71      	ldr	r3, [pc, #452]	; (4718 <main+0x1c8>)
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    4554:	4c71      	ldr	r4, [pc, #452]	; (471c <main+0x1cc>)
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    4556:	6818      	ldr	r0, [r3, #0]
    4558:	2209      	movs	r2, #9
    455a:	2102      	movs	r1, #2
    455c:	f006 fb5c 	bl	ac18 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    4560:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    4564:	2b02      	cmp	r3, #2
    4566:	d008      	beq.n	457a <main+0x2a>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    4568:	496d      	ldr	r1, [pc, #436]	; (4720 <main+0x1d0>)
    456a:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
        m_hlfbMode = newMode;
    456e:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    4570:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    4572:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    4576:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    457a:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    457c:	2301      	movs	r3, #1
                m_hlfbCarrierLossStateChange_ms =
    457e:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    4582:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    motor.MotorInAState(false);
    4586:	2100      	movs	r1, #0
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4588:	4f66      	ldr	r7, [pc, #408]	; (4724 <main+0x1d4>)
    motor.MotorInAState(false);
    458a:	4864      	ldr	r0, [pc, #400]	; (471c <main+0x1cc>)
    458c:	f000 fa9a 	bl	4ac4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    motor.MotorInBState(false);
    4590:	2100      	movs	r1, #0
    4592:	4862      	ldr	r0, [pc, #392]	; (471c <main+0x1cc>)
    4594:	f000 fab0 	bl	4af8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    SerialPort.Speed(baudRate);
    4598:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    459c:	4638      	mov	r0, r7
    459e:	f001 fa4b 	bl	5a38 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    45a2:	f005 f88f 	bl	96c4 <Milliseconds>
    45a6:	4606      	mov	r6, r0
    SerialPort.PortOpen();
    45a8:	4638      	mov	r0, r7
    45aa:	f001 fa39 	bl	5a20 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    45ae:	f241 3587 	movw	r5, #4999	; 0x1387
    45b2:	4638      	mov	r0, r7
    45b4:	f001 fa2e 	bl	5a14 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    45b8:	2800      	cmp	r0, #0
    45ba:	f000 809d 	beq.w	46f8 <main+0x1a8>
    motor.EnableRequest(true);
    45be:	2101      	movs	r1, #1
    45c0:	4856      	ldr	r0, [pc, #344]	; (471c <main+0x1cc>)
    45c2:	f000 fab1 	bl	4b28 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    45c6:	4858      	ldr	r0, [pc, #352]	; (4728 <main+0x1d8>)
    45c8:	f7ff fe84 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    SerialPort.SendLine("Waiting for HLFB...");
    45cc:	4857      	ldr	r0, [pc, #348]	; (472c <main+0x1dc>)
    45ce:	f7ff fe81 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    45d2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    45d6:	2b01      	cmp	r3, #1
    45d8:	d003      	beq.n	45e2 <main+0x92>
			!motor.StatusReg().bit.MotorInFault) {
    45da:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    45de:	06da      	lsls	r2, r3, #27
    45e0:	d5f7      	bpl.n	45d2 <main+0x82>
    if (motor.StatusReg().bit.MotorInFault) {
    45e2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    45e6:	06db      	lsls	r3, r3, #27
    45e8:	f140 808d 	bpl.w	4706 <main+0x1b6>
		SerialPort.SendLine("Motor fault detected.");		
    45ec:	4850      	ldr	r0, [pc, #320]	; (4730 <main+0x1e0>)
    45ee:	f7ff fe71 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
			SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    45f2:	4850      	ldr	r0, [pc, #320]	; (4734 <main+0x1e4>)
    45f4:	f7ff fe6e 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
		SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");		
    45f8:	484f      	ldr	r0, [pc, #316]	; (4738 <main+0x1e8>)
    45fa:	f7ff fe6b 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    45fe:	210d      	movs	r1, #13
    4600:	4848      	ldr	r0, [pc, #288]	; (4724 <main+0x1d4>)
    4602:	f001 fa31 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4606:	b118      	cbz	r0, 4610 <main+0xc0>
    4608:	210a      	movs	r1, #10
    460a:	4846      	ldr	r0, [pc, #280]	; (4724 <main+0x1d4>)
    460c:	f001 fa2c 	bl	5a68 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4610:	a53f      	add	r5, pc, #252	; (adr r5, 4710 <main+0x1c0>)
    4612:	e9d5 4500 	ldrd	r4, r5, [r5]
        MoveToPosition(1);    // See below for the detailed function definition.
    4616:	2001      	movs	r0, #1
    4618:	f7ff fe7e 	bl	4318 <_Z14MoveToPositionh>
    461c:	4629      	mov	r1, r5
    461e:	4620      	mov	r0, r4
    4620:	f005 f87a 	bl	9718 <Delay_cycles>
        MoveToPosition(2);
    4624:	2002      	movs	r0, #2
    4626:	f7ff fe77 	bl	4318 <_Z14MoveToPositionh>
    462a:	4629      	mov	r1, r5
    462c:	4620      	mov	r0, r4
    462e:	f005 f873 	bl	9718 <Delay_cycles>
        MoveToPosition(3);
    4632:	2003      	movs	r0, #3
    4634:	f7ff fe70 	bl	4318 <_Z14MoveToPositionh>
    4638:	4629      	mov	r1, r5
    463a:	4620      	mov	r0, r4
    463c:	f005 f86c 	bl	9718 <Delay_cycles>
        MoveToPosition(4);
    4640:	2004      	movs	r0, #4
    4642:	f7ff fe69 	bl	4318 <_Z14MoveToPositionh>
    4646:	4629      	mov	r1, r5
    4648:	4620      	mov	r0, r4
    464a:	f005 f865 	bl	9718 <Delay_cycles>
        MoveToPosition(5);
    464e:	2005      	movs	r0, #5
    4650:	f7ff fe62 	bl	4318 <_Z14MoveToPositionh>
    4654:	4629      	mov	r1, r5
    4656:	4620      	mov	r0, r4
    4658:	f005 f85e 	bl	9718 <Delay_cycles>
        MoveToPosition(6);
    465c:	2006      	movs	r0, #6
    465e:	f7ff fe5b 	bl	4318 <_Z14MoveToPositionh>
    4662:	4629      	mov	r1, r5
    4664:	4620      	mov	r0, r4
    4666:	f005 f857 	bl	9718 <Delay_cycles>
        MoveToPosition(7);
    466a:	2007      	movs	r0, #7
    466c:	f7ff fe54 	bl	4318 <_Z14MoveToPositionh>
    4670:	4629      	mov	r1, r5
    4672:	4620      	mov	r0, r4
    4674:	f005 f850 	bl	9718 <Delay_cycles>
        MoveToPosition(8);
    4678:	2008      	movs	r0, #8
    467a:	f7ff fe4d 	bl	4318 <_Z14MoveToPositionh>
    467e:	4629      	mov	r1, r5
    4680:	4620      	mov	r0, r4
    4682:	f005 f849 	bl	9718 <Delay_cycles>
        MoveToPosition(9);
    4686:	2009      	movs	r0, #9
    4688:	f7ff fe46 	bl	4318 <_Z14MoveToPositionh>
    468c:	4629      	mov	r1, r5
    468e:	4620      	mov	r0, r4
    4690:	f005 f842 	bl	9718 <Delay_cycles>
        MoveToPosition(10);
    4694:	200a      	movs	r0, #10
    4696:	f7ff fe3f 	bl	4318 <_Z14MoveToPositionh>
    469a:	4629      	mov	r1, r5
    469c:	4620      	mov	r0, r4
    469e:	f005 f83b 	bl	9718 <Delay_cycles>
        MoveToPosition(11);
    46a2:	200b      	movs	r0, #11
    46a4:	f7ff fe38 	bl	4318 <_Z14MoveToPositionh>
    46a8:	4629      	mov	r1, r5
    46aa:	4620      	mov	r0, r4
    46ac:	f005 f834 	bl	9718 <Delay_cycles>
        MoveToPosition(12);
    46b0:	200c      	movs	r0, #12
    46b2:	f7ff fe31 	bl	4318 <_Z14MoveToPositionh>
    46b6:	4629      	mov	r1, r5
    46b8:	4620      	mov	r0, r4
    46ba:	f005 f82d 	bl	9718 <Delay_cycles>
        MoveToPosition(13);
    46be:	200d      	movs	r0, #13
    46c0:	f7ff fe2a 	bl	4318 <_Z14MoveToPositionh>
    46c4:	4629      	mov	r1, r5
    46c6:	4620      	mov	r0, r4
    46c8:	f005 f826 	bl	9718 <Delay_cycles>
        MoveToPosition(14);
    46cc:	200e      	movs	r0, #14
    46ce:	f7ff fe23 	bl	4318 <_Z14MoveToPositionh>
    46d2:	4629      	mov	r1, r5
    46d4:	4620      	mov	r0, r4
    46d6:	f005 f81f 	bl	9718 <Delay_cycles>
        MoveToPosition(15);
    46da:	200f      	movs	r0, #15
    46dc:	f7ff fe1c 	bl	4318 <_Z14MoveToPositionh>
    46e0:	4629      	mov	r1, r5
    46e2:	4620      	mov	r0, r4
    46e4:	f005 f818 	bl	9718 <Delay_cycles>
        MoveToPosition(16);
    46e8:	2010      	movs	r0, #16
    46ea:	f7ff fe15 	bl	4318 <_Z14MoveToPositionh>
    46ee:	4620      	mov	r0, r4
    46f0:	4629      	mov	r1, r5
    46f2:	f005 f811 	bl	9718 <Delay_cycles>
    46f6:	e78e      	b.n	4616 <main+0xc6>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    46f8:	f004 ffe4 	bl	96c4 <Milliseconds>
    46fc:	1b80      	subs	r0, r0, r6
    46fe:	42a8      	cmp	r0, r5
    4700:	f67f af57 	bls.w	45b2 <main+0x62>
    4704:	e75b      	b.n	45be <main+0x6e>
		SerialPort.SendLine("Motor Ready");	
    4706:	480d      	ldr	r0, [pc, #52]	; (473c <main+0x1ec>)
    4708:	f7ff fde4 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    470c:	e780      	b.n	4610 <main+0xc0>
    470e:	bf00      	nop
    4710:	07270e00 	.word	0x07270e00
    4714:	00000000 	.word	0x00000000
    4718:	20001bfc 	.word	0x20001bfc
    471c:	20000b60 	.word	0x20000b60
    4720:	c61c3c00 	.word	0xc61c3c00
    4724:	20001480 	.word	0x20001480
    4728:	00022910 	.word	0x00022910
    472c:	00022920 	.word	0x00022920
    4730:	00022860 	.word	0x00022860
    4734:	00022878 	.word	0x00022878
    4738:	00022934 	.word	0x00022934
    473c:	00022978 	.word	0x00022978

00004740 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    4740:	2000      	movs	r0, #0
    4742:	4770      	bx	lr

00004744 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4744:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4748:	4770      	bx	lr
    474a:	bf00      	nop

0000474c <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    474c:	2006      	movs	r0, #6
    474e:	4770      	bx	lr

00004750 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4750:	2001      	movs	r0, #1
    4752:	4770      	bx	lr

00004754 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    4754:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    4758:	4770      	bx	lr
    475a:	bf00      	nop

0000475c <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    475c:	7980      	ldrb	r0, [r0, #6]
    475e:	4770      	bx	lr

00004760 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    4760:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4762:	7983      	ldrb	r3, [r0, #6]
    4764:	428b      	cmp	r3, r1
    4766:	f000 80a7 	beq.w	48b8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    476a:	f1a1 0309 	sub.w	r3, r1, #9
    476e:	460d      	mov	r5, r1
    4770:	4604      	mov	r4, r0
    4772:	2b03      	cmp	r3, #3
    4774:	f200 80a2 	bhi.w	48bc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    4778:	e8df f003 	tbb	[pc, r3]
    477c:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    4780:	3030      	adds	r0, #48	; 0x30
    4782:	f006 fe79 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4786:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    4788:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    478c:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    478e:	2200      	movs	r2, #0
    4790:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    4794:	b13b      	cbz	r3, 47a6 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    4796:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    479a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    479e:	680b      	ldr	r3, [r1, #0]
    47a0:	4013      	ands	r3, r2
    47a2:	d1fc      	bne.n	479e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    47a4:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    47a6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    47aa:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    47ac:	2200      	movs	r2, #0
    47ae:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    47b2:	b13b      	cbz	r3, 47c4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    47b4:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    47b8:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    47bc:	680b      	ldr	r3, [r1, #0]
    47be:	4013      	ands	r3, r2
    47c0:	d1fc      	bne.n	47bc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    47c2:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    47c4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    47c8:	4a3d      	ldr	r2, [pc, #244]	; (48c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    47ca:	f991 3001 	ldrsb.w	r3, [r1, #1]
    47ce:	7889      	ldrb	r1, [r1, #2]
    47d0:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    47d4:	440b      	add	r3, r1
            m_mode = newMode;
    47d6:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    47d8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    47dc:	f041 0101 	orr.w	r1, r1, #1
    47e0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    47e4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    47e8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    47ec:	7889      	ldrb	r1, [r1, #2]
    47ee:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    47f2:	440b      	add	r3, r1
    47f4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    47f8:	f042 0201 	orr.w	r2, r2, #1
    47fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4800:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4802:	b662      	cpsie	i
    return true;
    4804:	2001      	movs	r0, #1
    4806:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4808:	3030      	adds	r0, #48	; 0x30
    480a:	f006 fe35 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    480e:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4810:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4814:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4816:	2200      	movs	r2, #0
    4818:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    481c:	b13b      	cbz	r3, 482e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    481e:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4822:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4826:	680b      	ldr	r3, [r1, #0]
    4828:	4013      	ands	r3, r2
    482a:	d1fc      	bne.n	4826 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    482c:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    482e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4832:	4a23      	ldr	r2, [pc, #140]	; (48c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4834:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4838:	7889      	ldrb	r1, [r1, #2]
    483a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    483e:	440b      	add	r3, r1
    4840:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4844:	f36f 0100 	bfc	r1, #0, #1
    4848:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    484c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4850:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4854:	7889      	ldrb	r1, [r1, #2]
    4856:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    485a:	440b      	add	r3, r1
    485c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4860:	f042 0201 	orr.w	r2, r2, #1
    4864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4868:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    486a:	b662      	cpsie	i
    return true;
    486c:	2001      	movs	r0, #1
    486e:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4870:	3030      	adds	r0, #48	; 0x30
    4872:	f006 fe01 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4876:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    487a:	4a11      	ldr	r2, [pc, #68]	; (48c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    487c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4880:	7889      	ldrb	r1, [r1, #2]
    4882:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4886:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4888:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    488a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    488e:	f36f 0100 	bfc	r1, #0, #1
    4892:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4896:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    489a:	f991 3001 	ldrsb.w	r3, [r1, #1]
    489e:	7889      	ldrb	r1, [r1, #2]
    48a0:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    48a4:	440b      	add	r3, r1
    return true;
    48a6:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    48a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    48ac:	f36f 0200 	bfc	r2, #0, #1
    48b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    48b4:	71a5      	strb	r5, [r4, #6]
            break;
    48b6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    48b8:	2001      	movs	r0, #1
    48ba:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    48bc:	2000      	movs	r0, #0
}
    48be:	bd38      	pop	{r3, r4, r5, pc}
    48c0:	41008000 	.word	0x41008000

000048c4 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    48c4:	7983      	ldrb	r3, [r0, #6]
    48c6:	2b0a      	cmp	r3, #10
    48c8:	d00f      	beq.n	48ea <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    48ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    48ce:	b1a3      	cbz	r3, 48fa <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    48d0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    48d4:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    48d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
    48dc:	01db      	lsls	r3, r3, #7
    48de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    48e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    48e6:	615a      	str	r2, [r3, #20]
    48e8:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    48ea:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    48ee:	079b      	lsls	r3, r3, #30
    48f0:	d5eb      	bpl.n	48ca <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    48f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    48f6:	2b00      	cmp	r3, #0
    48f8:	d0ea      	beq.n	48d0 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    48fa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    48fe:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4902:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4906:	01db      	lsls	r3, r3, #7
    4908:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    490c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4910:	619a      	str	r2, [r3, #24]
    4912:	4770      	bx	lr

00004914 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4914:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4918:	e7d4      	b.n	48c4 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    491a:	bf00      	nop

0000491c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4920:	9f08      	ldr	r7, [sp, #32]
    4922:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4926:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    492a:	4604      	mov	r4, r0
    492c:	4616      	mov	r6, r2
    492e:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4930:	463a      	mov	r2, r7
    4932:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4934:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4936:	f009 fccf 	bl	e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    493a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    493e:	f006 fd69 	bl	b414 <_ZN9ClearCore13StepGeneratorC1Ev>
    4942:	4b5c      	ldr	r3, [pc, #368]	; (4ab4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4944:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4948:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    494c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    4950:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    4954:	6322      	str	r2, [r4, #48]	; 0x30
    4956:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    495a:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    495c:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    495e:	f8df a160 	ldr.w	sl, [pc, #352]	; 4ac0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4962:	4f55      	ldr	r7, [pc, #340]	; (4ab8 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    4964:	2101      	movs	r1, #1
    4966:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    496a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    496e:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    4970:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    4974:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4978:	f04f 0e02 	mov.w	lr, #2
    497c:	2200      	movs	r2, #0
    497e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4982:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    4986:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    498a:	f04f 33ff 	mov.w	r3, #4294967295
    498e:	f04f 0e19 	mov.w	lr, #25
    4992:	f04f 0903 	mov.w	r9, #3
    4996:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    499a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    499e:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    49a2:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    49a6:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    49aa:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    49ae:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    49b2:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    49b6:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    49ba:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    49be:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    49c2:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    49c6:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    49ca:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    49ce:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    49d2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    49d6:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    49da:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    49de:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    49e2:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    49e6:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    49ea:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    49ee:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    49f2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    49f6:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    49fa:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    49fe:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    4a02:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    4a06:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    4a0a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    4a0e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    4a12:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    4a16:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    4a1a:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    4a1e:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    4a22:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    4a26:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    4a28:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    4a2c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    4a30:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4a34:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4a36:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4a38:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4a3c:	2b04      	cmp	r3, #4
    4a3e:	bf9c      	itt	ls
    4a40:	4a1e      	ldrls	r2, [pc, #120]	; (4abc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4a42:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4a44:	fbb6 f1f2 	udiv	r1, r6, r2
    4a48:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4a50:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4a52:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a56:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4a5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a5e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4a62:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4a64:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4a68:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a6c:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4a70:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4a72:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4a74:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    4a78:	2a04      	cmp	r2, #4
    4a7a:	bf9a      	itte	ls
    4a7c:	4b0f      	ldrls	r3, [pc, #60]	; (4abc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4a7e:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4a80:	2200      	movhi	r2, #0
    4a82:	fbb0 f3f2 	udiv	r3, r0, r2
    4a86:	fb02 0313 	mls	r3, r2, r3, r0
    4a8a:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4a90:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a94:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4a98:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4a9c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4aa0:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4aa2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4aa6:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4aaa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    4aae:	4620      	mov	r0, r4
    4ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ab4:	000229a8 	.word	0x000229a8
    4ab8:	0002298c 	.word	0x0002298c
    4abc:	00022984 	.word	0x00022984
    4ac0:	c61c3c00 	.word	0xc61c3c00

00004ac4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    4ac4:	7983      	ldrb	r3, [r0, #6]
    4ac6:	2b09      	cmp	r3, #9
    4ac8:	d003      	beq.n	4ad2 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    4aca:	2b0b      	cmp	r3, #11
    4acc:	d001      	beq.n	4ad2 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    4ace:	2000      	movs	r0, #0
}
    4ad0:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4ad2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4ad6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4ada:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4ade:	01db      	lsls	r3, r3, #7
    4ae0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ae4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4ae8:	b111      	cbz	r1, 4af0 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    4aea:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4aec:	615a      	str	r2, [r3, #20]
    4aee:	4770      	bx	lr
    4af0:	2001      	movs	r0, #1
    4af2:	619a      	str	r2, [r3, #24]
    4af4:	4770      	bx	lr
    4af6:	bf00      	nop

00004af8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>:
    switch (m_mode) {
    4af8:	7983      	ldrb	r3, [r0, #6]
    4afa:	2b09      	cmp	r3, #9
    4afc:	d111      	bne.n	4b22 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x2a>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4afe:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    4b02:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    4b06:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4b0a:	01db      	lsls	r3, r3, #7
    4b0c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4b14:	b111      	cbz	r1, 4b1c <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x24>
            return true;
    4b16:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4b18:	615a      	str	r2, [r3, #20]
    4b1a:	4770      	bx	lr
    4b1c:	2001      	movs	r0, #1
    4b1e:	619a      	str	r2, [r3, #24]
    4b20:	4770      	bx	lr
            return false;
    4b22:	2000      	movs	r0, #0
}
    4b24:	4770      	bx	lr
    4b26:	bf00      	nop

00004b28 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    4b28:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4b2a:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    4b2e:	b083      	sub	sp, #12
    4b30:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4b32:	2b00      	cmp	r3, #0
    4b34:	d171      	bne.n	4c1a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    4b36:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4b3a:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    4b3e:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    4b42:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4b46:	428a      	cmp	r2, r1
    4b48:	d031      	beq.n	4bae <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    4b4a:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    4b4e:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4b52:	2200      	movs	r2, #0
    4b54:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4b58:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    4b5c:	b358      	cbz	r0, 4bb6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    4b5e:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4b60:	b672      	cpsid	i
    if (wasDisabled && value) {
    4b62:	b36b      	cbz	r3, 4bc0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    4b64:	b371      	cbz	r1, 4bc4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    4b66:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4b6a:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4b6c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4b70:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4b74:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4b76:	79a3      	ldrb	r3, [r4, #6]
    4b78:	2b0a      	cmp	r3, #10
    4b7a:	d02a      	beq.n	4bd2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4b7c:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4b80:	428b      	cmp	r3, r1
    4b82:	d035      	beq.n	4bf0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    4b84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        \param[in] bitsToChange LED bit in the shift register to be set
        or cleared.
    **/
    void ShifterState(bool setFlds, Masks bitsToChange) {
        setFlds ? ShifterStateSet(bitsToChange)
        : ShifterStateClear(bitsToChange);
    4b88:	2900      	cmp	r1, #0
    4b8a:	d13b      	bne.n	4c04 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4b8c:	f3bf 8f5b 	dmb	ish
    4b90:	4a2d      	ldr	r2, [pc, #180]	; (4c48 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4b92:	43db      	mvns	r3, r3
    4b94:	e852 0f00 	ldrex	r0, [r2]
    4b98:	4018      	ands	r0, r3
    4b9a:	e842 0500 	strex	r5, r0, [r2]
    4b9e:	2d00      	cmp	r5, #0
    4ba0:	d1f8      	bne.n	4b94 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    4ba2:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4ba6:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    4baa:	b003      	add	sp, #12
    4bac:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    4bae:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    4bb2:	2a00      	cmp	r2, #0
    4bb4:	d133      	bne.n	4c1e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    4bb6:	2900      	cmp	r1, #0
    4bb8:	d0d1      	beq.n	4b5e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    4bba:	b672      	cpsid	i
    if (wasDisabled && value) {
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d1d1      	bne.n	4b64 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    4bc0:	2900      	cmp	r1, #0
    4bc2:	d1d7      	bne.n	4b74 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    4bc4:	2300      	movs	r3, #0
    4bc6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    4bca:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4bcc:	79a3      	ldrb	r3, [r4, #6]
    4bce:	2b0a      	cmp	r3, #10
    4bd0:	d1d4      	bne.n	4b7c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4bd2:	b919      	cbnz	r1, 4bdc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4bd4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    4bd8:	079a      	lsls	r2, r3, #30
    4bda:	d428      	bmi.n	4c2e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    4bdc:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    4be0:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4be2:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4be6:	bf48      	it	mi
    4be8:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4bec:	428b      	cmp	r3, r1
    4bee:	d1c9      	bne.n	4b84 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    4bf0:	2d00      	cmp	r5, #0
    4bf2:	d0d8      	beq.n	4ba6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    4bf4:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d1d4      	bne.n	4ba6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    4bfc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4c00:	2900      	cmp	r1, #0
    4c02:	d0c3      	beq.n	4b8c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4c04:	f3bf 8f5b 	dmb	ish
    4c08:	4a0f      	ldr	r2, [pc, #60]	; (4c48 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4c0a:	e852 0f00 	ldrex	r0, [r2]
    4c0e:	4318      	orrs	r0, r3
    4c10:	e842 0500 	strex	r5, r0, [r2]
    4c14:	2d00      	cmp	r5, #0
    4c16:	d0c4      	beq.n	4ba2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    4c18:	e7f7      	b.n	4c0a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4c1a:	2300      	movs	r3, #0
    4c1c:	e78f      	b.n	4b3e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    4c1e:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    4c20:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4c24:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4c28:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4c2c:	e797      	b.n	4b5e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    4c2e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    4c32:	9101      	str	r1, [sp, #4]
    4c34:	f043 0310 	orr.w	r3, r3, #16
    4c38:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    4c3c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4c40:	f006 fc1a 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    4c44:	9901      	ldr	r1, [sp, #4]
    4c46:	e7c9      	b.n	4bdc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4c48:	20001ac4 	.word	0x20001ac4

00004c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    4c4c:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    4c50:	2b00      	cmp	r3, #0
    4c52:	d04a      	beq.n	4cea <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4c54:	4a35      	ldr	r2, [pc, #212]	; (4d2c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    4c56:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4c5a:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    4c5c:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4c5e:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    4c60:	b98b      	cbnz	r3, 4c86 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    4c62:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4c66:	2b01      	cmp	r3, #1
    4c68:	d022      	beq.n	4cb0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4c6a:	2b02      	cmp	r3, #2
    4c6c:	d13b      	bne.n	4ce6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    4c6e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    4c72:	2b00      	cmp	r3, #0
    4c74:	d145      	bne.n	4d02 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4c76:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d13c      	bne.n	4cf8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4c7e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4c82:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4c86:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    4c8a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4c8e:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    4c90:	428b      	cmp	r3, r1
    4c92:	d32b      	bcc.n	4cec <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    4c94:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    4c98:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    4c9c:	3b01      	subs	r3, #1
    4c9e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4ca2:	b94b      	cbnz	r3, 4cb8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    4ca4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    4ca8:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4cac:	2b01      	cmp	r3, #1
    4cae:	d1dc      	bne.n	4c6a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    4cb0:	2302      	movs	r3, #2
    4cb2:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4cb6:	e7da      	b.n	4c6e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    4cb8:	4b1d      	ldr	r3, [pc, #116]	; (4d30 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    4cba:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    4cbe:	f3bf 8f5b 	dmb	ish
    4cc2:	e853 1f00 	ldrex	r1, [r3]
    4cc6:	4051      	eors	r1, r2
    4cc8:	e843 1e00 	strex	lr, r1, [r3]
    4ccc:	f1be 0f00 	cmp.w	lr, #0
    4cd0:	d1f7      	bne.n	4cc2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    4cd2:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    4cd6:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4cda:	2b01      	cmp	r3, #1
    4cdc:	d1c5      	bne.n	4c6a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    4cde:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d0e4      	beq.n	4cb0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    4cea:	4770      	bx	lr
    switch (m_clearFaultState) {
    4cec:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4cf0:	2b02      	cmp	r3, #2
    4cf2:	d0bc      	beq.n	4c6e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    4cf4:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4cf8:	3b01      	subs	r3, #1
    4cfa:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    4cfe:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    4d02:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    4d04:	f500 7394 	add.w	r3, r0, #296	; 0x128
    4d08:	f3bf 8f5b 	dmb	ish
    4d0c:	e853 1f00 	ldrex	r1, [r3]
    4d10:	f021 0120 	bic.w	r1, r1, #32
    4d14:	e843 1e00 	strex	lr, r1, [r3]
    4d18:	f1be 0f00 	cmp.w	lr, #0
    4d1c:	d1f6      	bne.n	4d0c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    4d1e:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4d22:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    4d26:	f85d fb04 	ldr.w	pc, [sp], #4
    4d2a:	bf00      	nop
    4d2c:	20001be4 	.word	0x20001be4
    4d30:	20001ac4 	.word	0x20001ac4

00004d34 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4d34:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    4d38:	b570      	push	{r4, r5, r6, lr}
    4d3a:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    4d3c:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4d40:	2b00      	cmp	r3, #0
    4d42:	d163      	bne.n	4e0c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    4d44:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4d48:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    4d4c:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4d50:	bb39      	cbnz	r1, 4da2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    4d52:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    4d56:	b672      	cpsid	i
    if (wasDisabled && value) {
    4d58:	b35b      	cbz	r3, 4db2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    4d5a:	b365      	cbz	r5, 4db6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    4d5c:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4d60:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4d62:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4d66:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4d6a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4d6c:	79a3      	ldrb	r3, [r4, #6]
    4d6e:	2b0a      	cmp	r3, #10
    4d70:	d028      	beq.n	4dc4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4d72:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4d76:	42ab      	cmp	r3, r5
    4d78:	d033      	beq.n	4de2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    4d7a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4d7e:	2d00      	cmp	r5, #0
    4d80:	d139      	bne.n	4df6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4d82:	f3bf 8f5b 	dmb	ish
    4d86:	4a28      	ldr	r2, [pc, #160]	; (4e28 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    4d88:	43db      	mvns	r3, r3
    4d8a:	e852 1f00 	ldrex	r1, [r2]
    4d8e:	4019      	ands	r1, r3
    4d90:	e842 1000 	strex	r0, r1, [r2]
    4d94:	2800      	cmp	r0, #0
    4d96:	d1f8      	bne.n	4d8a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    4d98:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4d9c:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    4da0:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    4da2:	2500      	movs	r5, #0
    4da4:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4da8:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    4dac:	b672      	cpsid	i
    if (wasDisabled && value) {
    4dae:	2b00      	cmp	r3, #0
    4db0:	d1d3      	bne.n	4d5a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    4db2:	2d00      	cmp	r5, #0
    4db4:	d1d9      	bne.n	4d6a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    4db6:	2300      	movs	r3, #0
    4db8:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    4dbc:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4dbe:	79a3      	ldrb	r3, [r4, #6]
    4dc0:	2b0a      	cmp	r3, #10
    4dc2:	d1d6      	bne.n	4d72 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4dc4:	b91d      	cbnz	r5, 4dce <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    4dc6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    4dca:	079a      	lsls	r2, r3, #30
    4dcc:	d420      	bmi.n	4e10 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    4dce:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    4dd2:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4dd4:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4dd8:	bf48      	it	mi
    4dda:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4dde:	42ab      	cmp	r3, r5
    4de0:	d1cb      	bne.n	4d7a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    4de2:	2e00      	cmp	r6, #0
    4de4:	d0da      	beq.n	4d9c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    4de6:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    4dea:	2b00      	cmp	r3, #0
    4dec:	d1d6      	bne.n	4d9c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    4dee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4df2:	2d00      	cmp	r5, #0
    4df4:	d0c5      	beq.n	4d82 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4df6:	f3bf 8f5b 	dmb	ish
    4dfa:	4a0b      	ldr	r2, [pc, #44]	; (4e28 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    4dfc:	e852 1f00 	ldrex	r1, [r2]
    4e00:	4319      	orrs	r1, r3
    4e02:	e842 1000 	strex	r0, r1, [r2]
    4e06:	2800      	cmp	r0, #0
    4e08:	d0c6      	beq.n	4d98 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    4e0a:	e7f7      	b.n	4dfc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4e0c:	2300      	movs	r3, #0
    4e0e:	e79d      	b.n	4d4c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    4e10:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    4e14:	f043 0310 	orr.w	r3, r3, #16
    4e18:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    4e1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4e20:	f006 fb2a 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    4e24:	e7d3      	b.n	4dce <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    4e26:	bf00      	nop
    4e28:	20001ac4 	.word	0x20001ac4
    4e2c:	00000000 	.word	0x00000000

00004e30 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    4e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    4e32:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    4e36:	b903      	cbnz	r3, 4e3a <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    4e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e3a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    4e3c:	f009 f99c 	bl	e178 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    4e40:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    4e42:	4a98      	ldr	r2, [pc, #608]	; (50a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    4e44:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    4e48:	2b0a      	cmp	r3, #10
    4e4a:	bf08      	it	eq
    4e4c:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    4e50:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    4e54:	bf08      	it	eq
    4e56:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    4e5a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    4e5e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    4e60:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    4e64:	bf18      	it	ne
    4e66:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    4e68:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    4e6a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    4e6c:	f240 80df 	bls.w	502e <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    4e70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4e74:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    4e76:	4a8c      	ldr	r2, [pc, #560]	; (50a8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    4e78:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    4e7c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    4e80:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    4e84:	1c48      	adds	r0, r1, #1
    4e86:	d012      	beq.n	4eae <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    4e88:	4888      	ldr	r0, [pc, #544]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4e8a:	f003 fdfb 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4e8e:	6803      	ldr	r3, [r0, #0]
    4e90:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    4e92:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4e94:	4798      	blx	r3
    4e96:	2809      	cmp	r0, #9
    4e98:	f000 8248 	beq.w	532c <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    4e9c:	4628      	mov	r0, r5
    4e9e:	f009 f8f1 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
    4ea2:	1c01      	adds	r1, r0, #0
    4ea4:	bf18      	it	ne
    4ea6:	2101      	movne	r1, #1
    4ea8:	4620      	mov	r0, r4
    4eaa:	f7ff fe3d 	bl	4b28 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    4eae:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    4eb2:	1c4a      	adds	r2, r1, #1
    4eb4:	d016      	beq.n	4ee4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    4eb6:	79a3      	ldrb	r3, [r4, #6]
    4eb8:	2b0a      	cmp	r3, #10
    4eba:	d039      	beq.n	4f30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    4ebc:	487b      	ldr	r0, [pc, #492]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4ebe:	f003 fde1 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4ec2:	6803      	ldr	r3, [r0, #0]
    4ec4:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    4ec6:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4ec8:	4798      	blx	r3
    4eca:	2809      	cmp	r0, #9
    4ecc:	f000 80d0 	beq.w	5070 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    4ed0:	4628      	mov	r0, r5
    4ed2:	f009 f8d7 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    4ed6:	79a3      	ldrb	r3, [r4, #6]
    4ed8:	2b09      	cmp	r3, #9
    4eda:	f000 80d3 	beq.w	5084 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    4ede:	2b0b      	cmp	r3, #11
    4ee0:	f000 80d0 	beq.w	5084 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    4ee4:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    4ee8:	1c4b      	adds	r3, r1, #1
    4eea:	d021      	beq.n	4f30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    4eec:	79a3      	ldrb	r3, [r4, #6]
    4eee:	2b0a      	cmp	r3, #10
    4ef0:	d01e      	beq.n	4f30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    4ef2:	486e      	ldr	r0, [pc, #440]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4ef4:	f003 fdc6 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4ef8:	6803      	ldr	r3, [r0, #0]
    4efa:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    4efc:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4efe:	4798      	blx	r3
    4f00:	2809      	cmp	r0, #9
    4f02:	f000 8239 	beq.w	5378 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    4f06:	4628      	mov	r0, r5
    4f08:	f009 f8bc 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    4f0c:	79a3      	ldrb	r3, [r4, #6]
    4f0e:	2b09      	cmp	r3, #9
    4f10:	d10e      	bne.n	4f30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4f12:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    4f16:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    4f1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4f1e:	01db      	lsls	r3, r3, #7
    4f20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4f24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4f28:	2800      	cmp	r0, #0
    4f2a:	f000 81d4 	beq.w	52d6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    4f2e:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    4f30:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    4f34:	1c4f      	adds	r7, r1, #1
    4f36:	d010      	beq.n	4f5a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    4f38:	485c      	ldr	r0, [pc, #368]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4f3a:	f003 fda3 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    4f3e:	6803      	ldr	r3, [r0, #0]
    4f40:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    4f42:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    4f44:	4798      	blx	r3
    4f46:	2809      	cmp	r0, #9
    4f48:	f000 817d 	beq.w	5246 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    4f4c:	682b      	ldr	r3, [r5, #0]
    4f4e:	4628      	mov	r0, r5
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    4f54:	2804      	cmp	r0, #4
    4f56:	f000 8176 	beq.w	5246 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    4f5a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    4f5e:	1c4e      	adds	r6, r1, #1
    4f60:	d015      	beq.n	4f8e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    4f62:	4852      	ldr	r0, [pc, #328]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4f64:	f003 fd8e 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    4f68:	6803      	ldr	r3, [r0, #0]
    4f6a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    4f6c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    4f6e:	4798      	blx	r3
    4f70:	2809      	cmp	r0, #9
    4f72:	f000 81e6 	beq.w	5342 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    4f76:	4628      	mov	r0, r5
    4f78:	f009 f884 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    4f7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    4f80:	fab0 f080 	clz	r0, r0
    4f84:	0940      	lsrs	r0, r0, #5
    4f86:	f360 03c3 	bfi	r3, r0, #3, #1
    4f8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    4f8e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    4f92:	1c4d      	adds	r5, r1, #1
    4f94:	d015      	beq.n	4fc2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    4f96:	4845      	ldr	r0, [pc, #276]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4f98:	f003 fd74 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    4f9c:	6803      	ldr	r3, [r0, #0]
    4f9e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    4fa0:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    4fa2:	4798      	blx	r3
    4fa4:	2809      	cmp	r0, #9
    4fa6:	f000 81d1 	beq.w	534c <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    4faa:	4628      	mov	r0, r5
    4fac:	f009 f86a 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    4fb0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    4fb4:	fab0 f080 	clz	r0, r0
    4fb8:	0940      	lsrs	r0, r0, #5
    4fba:	f360 1304 	bfi	r3, r0, #4, #1
    4fbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    4fc2:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    4fc6:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    4fca:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    4fce:	1c48      	adds	r0, r1, #1
    4fd0:	f000 8132 	beq.w	5238 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    4fd4:	4835      	ldr	r0, [pc, #212]	; (50ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    4fd6:	f003 fd55 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4fda:	6803      	ldr	r3, [r0, #0]
    4fdc:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    4fde:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    4fe0:	4798      	blx	r3
    4fe2:	2809      	cmp	r0, #9
    4fe4:	f000 81c0 	beq.w	5368 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    4fe8:	4638      	mov	r0, r7
    4fea:	f009 f84b 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
    4fee:	fab0 f780 	clz	r7, r0
    4ff2:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    4ff4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	f040 8131 	bne.w	5260 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    4ffe:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5002:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5006:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    500a:	2900      	cmp	r1, #0
    500c:	d152      	bne.n	50b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    500e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    5012:	0792      	lsls	r2, r2, #30
    5014:	d54e      	bpl.n	50b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    5016:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    501a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    501e:	2800      	cmp	r0, #0
    5020:	f000 8152 	beq.w	52c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    5024:	06d7      	lsls	r7, r2, #27
    5026:	d549      	bpl.n	50bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5028:	f046 0604 	orr.w	r6, r6, #4
    502c:	e046      	b.n	50bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    502e:	07aa      	lsls	r2, r5, #30
    5030:	f000 8161 	beq.w	52f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    5034:	2333      	movs	r3, #51	; 0x33
    5036:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5038:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    503c:	2201      	movs	r2, #1
    503e:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5042:	b29a      	uxth	r2, r3
    5044:	3200      	adds	r2, #0
    5046:	bf18      	it	ne
    5048:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    504a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    504e:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5052:	06eb      	lsls	r3, r5, #27
    5054:	f100 8158 	bmi.w	5308 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5058:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    505c:	2b00      	cmp	r3, #0
    505e:	f040 810f 	bne.w	5280 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5062:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5066:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    506a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    506e:	e707      	b.n	4e80 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5070:	4b0f      	ldr	r3, [pc, #60]	; (50b0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5072:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5076:	6818      	ldr	r0, [r3, #0]
    5078:	f00a f85a 	bl	f130 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    507c:	79a3      	ldrb	r3, [r4, #6]
    507e:	2b09      	cmp	r3, #9
    5080:	f47f af2d 	bne.w	4ede <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5084:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5088:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    508c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5090:	01db      	lsls	r3, r3, #7
    5092:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5096:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    509a:	2800      	cmp	r0, #0
    509c:	f000 8119 	beq.w	52d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    50a0:	615a      	str	r2, [r3, #20]
    50a2:	e71f      	b.n	4ee4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    50a4:	000229f0 	.word	0x000229f0
    50a8:	c61c3c00 	.word	0xc61c3c00
    50ac:	200019cc 	.word	0x200019cc
    50b0:	20001efc 	.word	0x20001efc
    50b4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    50b8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    50bc:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    50c0:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    50c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    50c8:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    50cc:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    50d0:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    50d4:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    50d8:	2b00      	cmp	r3, #0
    50da:	f000 80ab 	beq.w	5234 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    50de:	1f98      	subs	r0, r3, #6
    50e0:	bf18      	it	ne
    50e2:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    50e4:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    50e8:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    50ec:	2a00      	cmp	r2, #0
    50ee:	f000 809b 	beq.w	5228 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    50f2:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    50f6:	b111      	cbz	r1, 50fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    50f8:	07af      	lsls	r7, r5, #30
    50fa:	f140 80df 	bpl.w	52bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    50fe:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5102:	2b03      	cmp	r3, #3
    5104:	d071      	beq.n	51ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    5106:	f015 0302 	ands.w	r3, r5, #2
    510a:	f040 80ce 	bne.w	52aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    510e:	2900      	cmp	r1, #0
    5110:	d06b      	beq.n	51ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5112:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    5116:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    511a:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    511e:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    5122:	2b00      	cmp	r3, #0
    5124:	d065      	beq.n	51f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    5126:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    512a:	2b00      	cmp	r3, #0
    512c:	f340 8113 	ble.w	5356 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5130:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5134:	2201      	movs	r2, #1
            m_enableCounter--;
    5136:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5138:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    513c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5140:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    5144:	b11b      	cbz	r3, 514e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    5146:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5148:	bf48      	it	mi
    514a:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    514e:	1c32      	adds	r2, r6, #0
    5150:	bf18      	it	ne
    5152:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5154:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5158:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    515c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5160:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5164:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5168:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    516c:	f3bf 8f5b 	dmb	ish
    5170:	e852 1f00 	ldrex	r1, [r2]
    5174:	4319      	orrs	r1, r3
    5176:	e842 1000 	strex	r0, r1, [r2]
    517a:	2800      	cmp	r0, #0
    517c:	d1f8      	bne.n	5170 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    517e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5182:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5186:	f3bf 8f5b 	dmb	ish
    518a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    518e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5192:	e853 2f00 	ldrex	r2, [r3]
    5196:	432a      	orrs	r2, r5
    5198:	e843 2100 	strex	r1, r2, [r3]
    519c:	2900      	cmp	r1, #0
    519e:	d1f8      	bne.n	5192 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    51a0:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    51a4:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    51a6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    51aa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    51ae:	2b0a      	cmp	r3, #10
    51b0:	f47f ae42 	bne.w	4e38 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    51b4:	f104 0530 	add.w	r5, r4, #48	; 0x30
    51b8:	4628      	mov	r0, r5
    51ba:	f005 feb5 	bl	af28 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    51be:	4628      	mov	r0, r5
    51c0:	f006 f9d6 	bl	b570 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    51c4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    51c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    51ca:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    51cc:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    51d0:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    51d2:	4282      	cmp	r2, r0
    51d4:	f43f ae30 	beq.w	4e38 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    51d8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    51dc:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    51e0:	680b      	ldr	r3, [r1, #0]
    51e2:	4213      	tst	r3, r2
    51e4:	d1fc      	bne.n	51e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    51e6:	6028      	str	r0, [r5, #0]
    51e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    51ea:	1c03      	adds	r3, r0, #0
    51ec:	bf18      	it	ne
    51ee:	2301      	movne	r3, #1
    51f0:	e78f      	b.n	5112 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    51f2:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    51f6:	2a00      	cmp	r2, #0
    51f8:	d03a      	beq.n	5270 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    51fa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    51fe:	b933      	cbnz	r3, 520e <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    5200:	b938      	cbnz	r0, 5212 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    5202:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    5206:	2204      	movs	r2, #4
    5208:	f362 258c 	bfi	r5, r2, #10, #3
    520c:	e79a      	b.n	5144 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    520e:	2800      	cmp	r0, #0
    5210:	d063      	beq.n	52da <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    5212:	f015 0302 	ands.w	r3, r5, #2
    5216:	d1f6      	bne.n	5206 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    5218:	2203      	movs	r2, #3
    521a:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    521e:	f363 1504 	bfi	r5, r3, #4, #1
    5222:	f005 0302 	and.w	r3, r5, #2
    5226:	e78d      	b.n	5144 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5228:	f362 0500 	bfi	r5, r2, #0, #1
    522c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5230:	4613      	mov	r3, r2
    5232:	e76e      	b.n	5112 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5234:	4618      	mov	r0, r3
    5236:	e755      	b.n	50e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    5238:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    523c:	bb93      	cbnz	r3, 52a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    523e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    5242:	461f      	mov	r7, r3
    5244:	e6dd      	b.n	5002 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    5246:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    524a:	b381      	cbz	r1, 52ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    524c:	682b      	ldr	r3, [r5, #0]
    524e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5252:	695b      	ldr	r3, [r3, #20]
    5254:	b109      	cbz	r1, 525a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5256:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    525a:	4628      	mov	r0, r5
    525c:	4798      	blx	r3
    525e:	e67c      	b.n	4f5a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5260:	b307      	cbz	r7, 52a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5262:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5266:	2900      	cmp	r1, #0
    5268:	f000 80ab 	beq.w	53c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    526c:	460f      	mov	r7, r1
    526e:	e6c8      	b.n	5002 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5270:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5274:	07aa      	lsls	r2, r5, #30
    5276:	f57f af6a 	bpl.w	514e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    527a:	f046 0610 	orr.w	r6, r6, #16
    527e:	e762      	b.n	5146 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5280:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5284:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5288:	4073      	eors	r3, r6
    528a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    528c:	4291      	cmp	r1, r2
    528e:	f000 80a4 	beq.w	53da <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5292:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    5296:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    529a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    529e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    52a2:	e5ed      	b.n	4e80 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    52a4:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    52a8:	e6ab      	b.n	5002 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    52aa:	2300      	movs	r3, #0
    52ac:	e731      	b.n	5112 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    52ae:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    52b2:	682b      	ldr	r3, [r5, #0]
    52b4:	2a01      	cmp	r2, #1
    52b6:	695b      	ldr	r3, [r3, #20]
    52b8:	d1cf      	bne.n	525a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    52ba:	e7cc      	b.n	5256 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    52bc:	2801      	cmp	r0, #1
    52be:	f47f af1e 	bne.w	50fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    52c2:	f045 0501 	orr.w	r5, r5, #1
    52c6:	e71c      	b.n	5102 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    52c8:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    52ca:	bf48      	it	mi
    52cc:	f046 0602 	orrmi.w	r6, r6, #2
    52d0:	e6f4      	b.n	50bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    52d2:	619a      	str	r2, [r3, #24]
    52d4:	e606      	b.n	4ee4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    52d6:	619a      	str	r2, [r3, #24]
    52d8:	e62a      	b.n	4f30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    52da:	2302      	movs	r3, #2
    52dc:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    52e0:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    52e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    52e8:	f006 f8c6 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    52ec:	f046 0620 	orr.w	r6, r6, #32
    52f0:	f005 0302 	and.w	r3, r5, #2
    52f4:	e726      	b.n	5144 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    52f6:	f004 f9e5 	bl	96c4 <Milliseconds>
    52fa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    52fe:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5300:	2803      	cmp	r0, #3
    5302:	f63f ae97 	bhi.w	5034 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    5306:	e6a4      	b.n	5052 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5308:	f004 f9dc 	bl	96c4 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    530c:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5310:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    5314:	2b00      	cmp	r3, #0
    5316:	d03a      	beq.n	538e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    5318:	2330      	movs	r3, #48	; 0x30
    531a:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    531c:	2200      	movs	r2, #0
    531e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    5322:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    5326:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    532a:	e697      	b.n	505c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    532c:	4b54      	ldr	r3, [pc, #336]	; (5480 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    532e:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5332:	6818      	ldr	r0, [r3, #0]
    5334:	f009 fefc 	bl	f130 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    5338:	4601      	mov	r1, r0
    533a:	4620      	mov	r0, r4
    533c:	f7ff fbf4 	bl	4b28 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    5340:	e5b5      	b.n	4eae <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    5342:	682b      	ldr	r3, [r5, #0]
    5344:	4628      	mov	r0, r5
    5346:	691b      	ldr	r3, [r3, #16]
    5348:	4798      	blx	r3
    534a:	e617      	b.n	4f7c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    534c:	682b      	ldr	r3, [r5, #0]
    534e:	4628      	mov	r0, r5
    5350:	691b      	ldr	r3, [r3, #16]
    5352:	4798      	blx	r3
    5354:	e62c      	b.n	4fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    5356:	2201      	movs	r2, #1
            m_isEnabling = false;
    5358:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    535a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    535e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    5362:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    5366:	e748      	b.n	51fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5368:	683b      	ldr	r3, [r7, #0]
    536a:	4638      	mov	r0, r7
    536c:	691b      	ldr	r3, [r3, #16]
    536e:	4798      	blx	r3
    5370:	fab0 f780 	clz	r7, r0
    5374:	097f      	lsrs	r7, r7, #5
    5376:	e63d      	b.n	4ff4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5378:	4b41      	ldr	r3, [pc, #260]	; (5480 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    537a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    537e:	6818      	ldr	r0, [r3, #0]
    5380:	f009 fed6 	bl	f130 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5384:	79a3      	ldrb	r3, [r4, #6]
    5386:	2b09      	cmp	r3, #9
    5388:	f43f adc3 	beq.w	4f12 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    538c:	e5d0      	b.n	4f30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    538e:	06ad      	lsls	r5, r5, #26
    5390:	f57f ae62 	bpl.w	5058 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5394:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5398:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    539c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    53a0:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    53a4:	8bf8      	ldrh	r0, [r7, #30]
    53a6:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    53aa:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    53ae:	8bbd      	ldrh	r5, [r7, #28]
    53b0:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    53b4:	b9d0      	cbnz	r0, 53ec <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    53b6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    53ba:	2201      	movs	r2, #1
    53bc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    53c0:	e64c      	b.n	505c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    53c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    53c6:	f006 f873 	bl	b4b0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    53ca:	2301      	movs	r3, #1
    53cc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    53d0:	f046 0608 	orr.w	r6, r6, #8
    53d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    53d8:	e613      	b.n	5002 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    53da:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    53de:	2a00      	cmp	r2, #0
    53e0:	f43f ad49 	beq.w	4e76 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    53e4:	3a01      	subs	r2, #1
    53e6:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    53ea:	e549      	b.n	4e80 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    53ec:	ee07 1a90 	vmov	s15, r1
    53f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    53f4:	ee07 2a90 	vmov	s15, r2
    53f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    53fc:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    5400:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5404:	ee16 0a90 	vmov	r0, s13
    5408:	f016 fa3c 	bl	1b884 <__aeabi_f2d>
    540c:	a318      	add	r3, pc, #96	; (adr r3, 5470 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    540e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5412:	f016 f8d7 	bl	1b5c4 <__aeabi_dsub>
    5416:	a318      	add	r3, pc, #96	; (adr r3, 5478 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    5418:	e9d3 2300 	ldrd	r2, r3, [r3]
    541c:	f016 fa86 	bl	1b92c <__aeabi_dmul>
    5420:	f016 fd66 	bl	1bef0 <__aeabi_d2f>
    5424:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    5428:	b11e      	cbz	r6, 5432 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    542a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5484 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    542e:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5432:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5436:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    543a:	2b02      	cmp	r3, #2
    543c:	d004      	beq.n	5448 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    543e:	2302      	movs	r3, #2
    5440:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    5444:	2300      	movs	r3, #0
    5446:	e7b8      	b.n	53ba <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    5448:	ee17 0a90 	vmov	r0, s15
    544c:	f016 fa1a 	bl	1b884 <__aeabi_f2d>
    5450:	2200      	movs	r2, #0
    5452:	4b0d      	ldr	r3, [pc, #52]	; (5488 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    5454:	f016 f8b6 	bl	1b5c4 <__aeabi_dsub>
    5458:	4602      	mov	r2, r0
    545a:	460b      	mov	r3, r1
    545c:	f016 f8b4 	bl	1b5c8 <__adddf3>
    5460:	f016 fd46 	bl	1bef0 <__aeabi_d2f>
    5464:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5468:	e7e9      	b.n	543e <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    546a:	bf00      	nop
    546c:	f3af 8000 	nop.w
    5470:	9999999a 	.word	0x9999999a
    5474:	3fa99999 	.word	0x3fa99999
    5478:	71c71c72 	.word	0x71c71c72
    547c:	405bc71c 	.word	0x405bc71c
    5480:	20001efc 	.word	0x20001efc
    5484:	42c80000 	.word	0x42c80000
    5488:	40490000 	.word	0x40490000

0000548c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    548c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5490:	4604      	mov	r4, r0
    5492:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    5494:	4690      	mov	r8, r2
    5496:	2a00      	cmp	r2, #0
    5498:	d154      	bne.n	5544 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    549a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    549c:	1b4d      	subs	r5, r1, r5
    549e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    54a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    54a4:	2b00      	cmp	r3, #0
    54a6:	d04b      	beq.n	5540 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    54a8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    54ac:	f043 0301 	orr.w	r3, r3, #1
    54b0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    54b4:	2600      	movs	r6, #0
    54b6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    54ba:	b933      	cbnz	r3, 54ca <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    54bc:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    54c0:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    54c4:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    54c6:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    54ca:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    54ce:	1c48      	adds	r0, r1, #1
    54d0:	d016      	beq.n	5500 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    54d2:	4829      	ldr	r0, [pc, #164]	; (5578 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    54d4:	f003 fad6 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    54d8:	6803      	ldr	r3, [r0, #0]
    54da:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    54dc:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    54de:	4798      	blx	r3
    54e0:	2809      	cmp	r0, #9
    54e2:	d040      	beq.n	5566 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    54e4:	4648      	mov	r0, r9
    54e6:	f008 fdcd 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
    54ea:	fab0 f080 	clz	r0, r0
    54ee:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    54f0:	b130      	cbz	r0, 5500 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    54f2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    54f6:	f043 0308 	orr.w	r3, r3, #8
    54fa:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    54fe:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5500:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5504:	b16d      	cbz	r5, 5522 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    5506:	06d9      	lsls	r1, r3, #27
    5508:	d426      	bmi.n	5558 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    550a:	b196      	cbz	r6, 5532 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    550c:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    550e:	4642      	mov	r2, r8
    5510:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    5512:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    5516:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    551a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    551e:	f005 bc7f 	b.w	ae20 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5522:	071a      	lsls	r2, r3, #28
    5524:	d5f1      	bpl.n	550a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5526:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    552a:	f043 0302 	orr.w	r3, r3, #2
    552e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5532:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5536:	079b      	lsls	r3, r3, #30
    5538:	d406      	bmi.n	5548 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    553a:	2000      	movs	r0, #0
    553c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5540:	2601      	movs	r6, #1
    5542:	e7b8      	b.n	54b6 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    5544:	0fcd      	lsrs	r5, r1, #31
    5546:	e7ab      	b.n	54a0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5548:	f104 0030 	add.w	r0, r4, #48	; 0x30
    554c:	2100      	movs	r1, #0
    554e:	f005 ffaf 	bl	b4b0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5552:	2000      	movs	r0, #0
    5554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5558:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    555c:	f043 0304 	orr.w	r3, r3, #4
    5560:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5564:	e7e5      	b.n	5532 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    5566:	f8d9 3000 	ldr.w	r3, [r9]
    556a:	4648      	mov	r0, r9
    556c:	691b      	ldr	r3, [r3, #16]
    556e:	4798      	blx	r3
    5570:	fab0 f080 	clz	r0, r0
    5574:	0940      	lsrs	r0, r0, #5
    5576:	e7bb      	b.n	54f0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5578:	200019cc 	.word	0x200019cc

0000557c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    557c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5580:	f7ff bf84 	b.w	548c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00005584 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    5586:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    558a:	4604      	mov	r4, r0
    558c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    558e:	2b00      	cmp	r3, #0
    5590:	d04a      	beq.n	5628 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5592:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    5596:	f043 0301 	orr.w	r3, r3, #1
    559a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    559e:	2500      	movs	r5, #0
    55a0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    55a4:	b933      	cbnz	r3, 55b4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    55a6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    55aa:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    55ae:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    55b0:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    55b4:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    55b8:	1c48      	adds	r0, r1, #1
    55ba:	d016      	beq.n	55ea <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    55bc:	4826      	ldr	r0, [pc, #152]	; (5658 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    55be:	f003 fa61 	bl	8a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    55c2:	6803      	ldr	r3, [r0, #0]
    55c4:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    55c6:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    55c8:	4798      	blx	r3
    55ca:	2809      	cmp	r0, #9
    55cc:	d03c      	beq.n	5648 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    55ce:	4638      	mov	r0, r7
    55d0:	f008 fd58 	bl	e084 <_ZN9ClearCore9DigitalIn5StateEv>
    55d4:	fab0 f080 	clz	r0, r0
    55d8:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    55da:	b130      	cbz	r0, 55ea <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    55dc:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    55e0:	f043 0308 	orr.w	r3, r3, #8
    55e4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    55e8:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    55ea:	2e00      	cmp	r6, #0
    55ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    55f0:	da0c      	bge.n	560c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    55f2:	06d9      	lsls	r1, r3, #27
    55f4:	d421      	bmi.n	563a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    55f6:	b18d      	cbz	r5, 561c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    55f8:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    55fa:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    55fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    5600:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    5608:	f005 bc44 	b.w	ae94 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    560c:	071a      	lsls	r2, r3, #28
    560e:	d5f2      	bpl.n	55f6 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5610:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5614:	f043 0302 	orr.w	r3, r3, #2
    5618:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    561c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5620:	079b      	lsls	r3, r3, #30
    5622:	d403      	bmi.n	562c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    5624:	2000      	movs	r0, #0
    5626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5628:	2501      	movs	r5, #1
    562a:	e7b9      	b.n	55a0 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    562c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5630:	2100      	movs	r1, #0
    5632:	f005 ff3d 	bl	b4b0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5636:	2000      	movs	r0, #0
    5638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    563a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    563e:	f043 0304 	orr.w	r3, r3, #4
    5642:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5646:	e7e9      	b.n	561c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5648:	683b      	ldr	r3, [r7, #0]
    564a:	4638      	mov	r0, r7
    564c:	691b      	ldr	r3, [r3, #16]
    564e:	4798      	blx	r3
    5650:	fab0 f080 	clz	r0, r0
    5654:	0940      	lsrs	r0, r0, #5
    5656:	e7c0      	b.n	55da <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5658:	200019cc 	.word	0x200019cc

0000565c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    565c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5660:	f7ff bf90 	b.w	5584 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00005664 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5666:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    566a:	4dbc      	ldr	r5, [pc, #752]	; (595c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    566c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5670:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5674:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5678:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    567a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    567c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5680:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    5684:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5688:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    568c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    568e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5690:	2100      	movs	r1, #0
    5692:	f7ff fa49 	bl	4b28 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    5696:	4631      	mov	r1, r6
    5698:	4620      	mov	r0, r4
    569a:	f008 fd07 	bl	e0ac <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    569e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    56a2:	f993 2001 	ldrsb.w	r2, [r3, #1]
    56a6:	7898      	ldrb	r0, [r3, #2]
    56a8:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    56ac:	1813      	adds	r3, r2, r0
    56ae:	2700      	movs	r7, #0
    56b0:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    56b4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    56b8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    56bc:	788e      	ldrb	r6, [r1, #2]
    56be:	01db      	lsls	r3, r3, #7
    56c0:	18e9      	adds	r1, r5, r3
    56c2:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    56c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    56c8:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    56cc:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    56d0:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    56d2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    56d6:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    56d8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    56dc:	f010 0f01 	tst.w	r0, #1
    56e0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    56e4:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    56e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    56ec:	bf14      	ite	ne
    56ee:	f360 1107 	bfine	r1, r0, #4, #4
    56f2:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    56f6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    56fa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    56fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    5702:	07f0      	lsls	r0, r6, #31
    5704:	f04f 0105 	mov.w	r1, #5
    5708:	bf4c      	ite	mi
    570a:	f361 1207 	bfimi	r2, r1, #4, #4
    570e:	f361 0203 	bfipl	r2, r1, #0, #4
    5712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5716:	6823      	ldr	r3, [r4, #0]
    5718:	4a91      	ldr	r2, [pc, #580]	; (5960 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    571a:	685b      	ldr	r3, [r3, #4]
    571c:	4293      	cmp	r3, r2
    571e:	f040 8119 	bne.w	5954 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    5722:	79a3      	ldrb	r3, [r4, #6]
    5724:	2b09      	cmp	r3, #9
    5726:	d022      	beq.n	576e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5728:	f104 0030 	add.w	r0, r4, #48	; 0x30
    572c:	f005 fea4 	bl	b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5730:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5734:	4b89      	ldr	r3, [pc, #548]	; (595c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5736:	f991 2001 	ldrsb.w	r2, [r1, #1]
    573a:	7889      	ldrb	r1, [r1, #2]
    573c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5740:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5742:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5744:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5748:	f36f 0100 	bfc	r1, #0, #1
    574c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5750:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5754:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5758:	7892      	ldrb	r2, [r2, #2]
    575a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    575e:	4413      	add	r3, r2
    5760:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5764:	f36f 0200 	bfc	r2, #0, #1
    5768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    576c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    576e:	68e3      	ldr	r3, [r4, #12]
    5770:	6922      	ldr	r2, [r4, #16]
    5772:	01db      	lsls	r3, r3, #7
    5774:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5778:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    577c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5780:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5784:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5788:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    578c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5790:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5792:	bf14      	ite	ne
    5794:	f36f 1007 	bfcne	r0, #4, #4
    5798:	f365 0003 	bfieq	r0, r5, #0, #4
    579c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    57a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    57a4:	496f      	ldr	r1, [pc, #444]	; (5964 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    57a6:	f042 0201 	orr.w	r2, r2, #1
    57aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    57ae:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    57b2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    57b6:	681a      	ldr	r2, [r3, #0]
    57b8:	f36f 0241 	bfc	r2, #1, #1
    57bc:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    57be:	691a      	ldr	r2, [r3, #16]
    57c0:	0792      	lsls	r2, r2, #30
    57c2:	d4fc      	bmi.n	57be <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    57c4:	681a      	ldr	r2, [r3, #0]
    57c6:	f042 0201 	orr.w	r2, r2, #1
    57ca:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    57cc:	691a      	ldr	r2, [r3, #16]
    57ce:	f012 0201 	ands.w	r2, r2, #1
    57d2:	d1fb      	bne.n	57cc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    57d4:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    57d6:	4964      	ldr	r1, [pc, #400]	; (5968 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    57d8:	f362 1505 	bfi	r5, r2, #4, #2
    57dc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    57de:	681d      	ldr	r5, [r3, #0]
    57e0:	f362 5514 	bfi	r5, r2, #20, #1
    57e4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    57e6:	681d      	ldr	r5, [r3, #0]
    57e8:	f362 5555 	bfi	r5, r2, #21, #1
    57ec:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    57ee:	681d      	ldr	r5, [r3, #0]
    57f0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    57f4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    57f6:	681d      	ldr	r5, [r3, #0]
    57f8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    57fc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    57fe:	681d      	ldr	r5, [r3, #0]
    5800:	f362 25cb 	bfi	r5, r2, #11, #1
    5804:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5806:	681d      	ldr	r5, [r3, #0]
    5808:	f362 250a 	bfi	r5, r2, #8, #3
    580c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    580e:	681d      	ldr	r5, [r3, #0]
    5810:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5814:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    5816:	681d      	ldr	r5, [r3, #0]
    5818:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    581c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    581e:	681d      	ldr	r5, [r3, #0]
    5820:	f362 0583 	bfi	r5, r2, #2, #2
    5824:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    5826:	88dd      	ldrh	r5, [r3, #6]
    5828:	2605      	movs	r6, #5
    582a:	f366 0502 	bfi	r5, r6, #0, #3
    582e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    5830:	88dd      	ldrh	r5, [r3, #6]
    5832:	f045 0520 	orr.w	r5, r5, #32
    5836:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    5838:	88dd      	ldrh	r5, [r3, #6]
    583a:	f362 350c 	bfi	r5, r2, #12, #1
    583e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5840:	88dd      	ldrh	r5, [r3, #6]
    5842:	f362 354d 	bfi	r5, r2, #13, #1
    5846:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5848:	88dd      	ldrh	r5, [r3, #6]
    584a:	f362 2508 	bfi	r5, r2, #8, #1
    584e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5850:	88dd      	ldrh	r5, [r3, #6]
    5852:	f045 0510 	orr.w	r5, r5, #16
    5856:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5858:	780d      	ldrb	r5, [r1, #0]
    585a:	f362 0541 	bfi	r5, r2, #1, #1
    585e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5860:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5864:	688e      	ldr	r6, [r1, #8]
    5866:	78d5      	ldrb	r5, [r2, #3]
    5868:	2201      	movs	r2, #1
    586a:	40aa      	lsls	r2, r5
    586c:	4316      	orrs	r6, r2
    586e:	608e      	str	r6, [r1, #8]
    5870:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5872:	698e      	ldr	r6, [r1, #24]
    5874:	00bf      	lsls	r7, r7, #2
    5876:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    587a:	4316      	orrs	r6, r2
    587c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5880:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5882:	f005 0607 	and.w	r6, r5, #7
    5886:	f8de c01c 	ldr.w	ip, [lr, #28]
    588a:	00b7      	lsls	r7, r6, #2
    588c:	2604      	movs	r6, #4
    588e:	40be      	lsls	r6, r7
    5890:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5894:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5898:	68ce      	ldr	r6, [r1, #12]
    589a:	b292      	uxth	r2, r2
    589c:	f362 060f 	bfi	r6, r2, #0, #16
    58a0:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    58a2:	780a      	ldrb	r2, [r1, #0]
    58a4:	f042 0202 	orr.w	r2, r2, #2
    58a8:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    58aa:	684a      	ldr	r2, [r1, #4]
    58ac:	f012 0202 	ands.w	r2, r2, #2
    58b0:	d1fb      	bne.n	58aa <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    58b2:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    58b6:	492d      	ldr	r1, [pc, #180]	; (596c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    58b8:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    58bc:	463e      	mov	r6, r7
    58be:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    58c2:	f362 1c86 	bfi	ip, r2, #6, #1
    58c6:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    58ca:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    58ce:	0657      	lsls	r7, r2, #25
    58d0:	d4fb      	bmi.n	58ca <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    58d2:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    58d6:	4f25      	ldr	r7, [pc, #148]	; (596c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    58d8:	f04f 0c06 	mov.w	ip, #6
    58dc:	f36c 0203 	bfi	r2, ip, #0, #4
    58e0:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    58e4:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    58e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    58ec:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    58f0:	687a      	ldr	r2, [r7, #4]
    58f2:	f012 0f18 	tst.w	r2, #24
    58f6:	d1fb      	bne.n	58f0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    58f8:	4a1d      	ldr	r2, [pc, #116]	; (5970 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    58fa:	4e1e      	ldr	r6, [pc, #120]	; (5974 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    58fc:	3074      	adds	r0, #116	; 0x74
    58fe:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5902:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5906:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    590a:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    590e:	7991      	ldrb	r1, [r2, #6]
    5910:	f041 0102 	orr.w	r1, r1, #2
    5914:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5916:	79d1      	ldrb	r1, [r2, #7]
    5918:	07c8      	lsls	r0, r1, #31
    591a:	d4fc      	bmi.n	5916 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    591c:	3512      	adds	r5, #18
    591e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5922:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5926:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    592a:	79d1      	ldrb	r1, [r2, #7]
    592c:	0789      	lsls	r1, r1, #30
    592e:	d4fc      	bmi.n	592a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5930:	681a      	ldr	r2, [r3, #0]
    5932:	f042 0202 	orr.w	r2, r2, #2
    5936:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5938:	691a      	ldr	r2, [r3, #16]
    593a:	f012 0202 	ands.w	r2, r2, #2
    593e:	d1fb      	bne.n	5938 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5940:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5942:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5946:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    594a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    594e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    5952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5954:	2109      	movs	r1, #9
    5956:	4620      	mov	r0, r4
    5958:	4798      	blx	r3
    595a:	e708      	b.n	576e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    595c:	41008000 	.word	0x41008000
    5960:	00004761 	.word	0x00004761
    5964:	000229f0 	.word	0x000229f0
    5968:	40002800 	.word	0x40002800
    596c:	40001c00 	.word	0x40001c00
    5970:	4100e000 	.word	0x4100e000
    5974:	4100e020 	.word	0x4100e020

00005978 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5978:	f04f 30ff 	mov.w	r0, #4294967295
    597c:	4770      	bx	lr
    597e:	bf00      	nop

00005980 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    5980:	f1a1 0002 	sub.w	r0, r1, #2
    5984:	fab0 f080 	clz	r0, r0
    5988:	0940      	lsrs	r0, r0, #5
    598a:	4770      	bx	lr

0000598c <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    598c:	2002      	movs	r0, #2
    598e:	4770      	bx	lr

00005990 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    5990:	f1a1 0001 	sub.w	r0, r1, #1
    5994:	fab0 f080 	clz	r0, r0
    5998:	0940      	lsrs	r0, r0, #5
    599a:	4770      	bx	lr

0000599c <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    599c:	f1a1 0008 	sub.w	r0, r1, #8
    59a0:	fab0 f080 	clz	r0, r0
    59a4:	0940      	lsrs	r0, r0, #5
    59a6:	4770      	bx	lr

000059a8 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    59a8:	7a80      	ldrb	r0, [r0, #10]
    59aa:	4770      	bx	lr

000059ac <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    59ac:	f1a0 0004 	sub.w	r0, r0, #4
    59b0:	e7fa      	b.n	59a8 <_ZN9ClearCore9SerialUsb4ModeEv>
    59b2:	bf00      	nop

000059b4 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    59b4:	7a80      	ldrb	r0, [r0, #10]
    }
    59b6:	1a40      	subs	r0, r0, r1
    59b8:	fab0 f080 	clz	r0, r0
    59bc:	0940      	lsrs	r0, r0, #5
    59be:	4770      	bx	lr

000059c0 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    59c0:	f1a0 0004 	sub.w	r0, r0, #4
    59c4:	e7f6      	b.n	59b4 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    59c6:	bf00      	nop

000059c8 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    59c8:	2008      	movs	r0, #8
    59ca:	4770      	bx	lr

000059cc <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    59cc:	f1a0 0004 	sub.w	r0, r0, #4
    59d0:	e7fa      	b.n	59c8 <_ZN9ClearCore9SerialUsb4TypeEv>
    59d2:	bf00      	nop

000059d4 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    59d4:	2000      	movs	r0, #0
    59d6:	4770      	bx	lr

000059d8 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    59d8:	f1a0 0004 	sub.w	r0, r0, #4
    59dc:	e7fa      	b.n	59d4 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    59de:	bf00      	nop

000059e0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    59e0:	2311      	movs	r3, #17
        m_index = clearCorePin;
    59e2:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    59e4:	7283      	strb	r3, [r0, #10]
    59e6:	4770      	bx	lr

000059e8 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    59e8:	f1a0 0004 	sub.w	r0, r0, #4
    59ec:	e7f8      	b.n	59e0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    59ee:	bf00      	nop

000059f0 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    59f0:	4770      	bx	lr
    59f2:	bf00      	nop

000059f4 <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    59f4:	f1a0 0004 	sub.w	r0, r0, #4
    59f8:	e7fa      	b.n	59f0 <_ZN9ClearCore9SerialUsb7RefreshEv>
    59fa:	bf00      	nop

000059fc <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    59fc:	4b01      	ldr	r3, [pc, #4]	; (5a04 <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    59fe:	6818      	ldr	r0, [r3, #0]
    5a00:	f000 be5e 	b.w	66c0 <_ZN9ClearCore10UsbManager10FlushInputEv>
    5a04:	20000ad0 	.word	0x20000ad0

00005a08 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    5a08:	4b01      	ldr	r3, [pc, #4]	; (5a10 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    5a0a:	6818      	ldr	r0, [r3, #0]
    5a0c:	f000 be66 	b.w	66dc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    5a10:	20000ad0 	.word	0x20000ad0

00005a14 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    5a14:	4b01      	ldr	r3, [pc, #4]	; (5a1c <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    5a16:	6818      	ldr	r0, [r3, #0]
    5a18:	f000 be7a 	b.w	6710 <_ZN9ClearCore10UsbManagercvbEv>
    5a1c:	20000ad0 	.word	0x20000ad0

00005a20 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    5a20:	4b01      	ldr	r3, [pc, #4]	; (5a28 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    5a22:	6818      	ldr	r0, [r3, #0]
    5a24:	f000 be30 	b.w	6688 <_ZN9ClearCore10UsbManager8PortOpenEv>
    5a28:	20000ad0 	.word	0x20000ad0

00005a2c <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    5a2c:	4b01      	ldr	r3, [pc, #4]	; (5a34 <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    5a2e:	6818      	ldr	r0, [r3, #0]
    5a30:	f001 ba04 	b.w	6e3c <_ZN9ClearCore10UsbManager9PortCloseEv>
    5a34:	20000ad0 	.word	0x20000ad0

00005a38 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    5a38:	4b01      	ldr	r3, [pc, #4]	; (5a40 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    5a3a:	6818      	ldr	r0, [r3, #0]
    5a3c:	f000 be1c 	b.w	6678 <_ZN9ClearCore10UsbManager5SpeedEm>
    5a40:	20000ad0 	.word	0x20000ad0

00005a44 <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    5a44:	4b01      	ldr	r3, [pc, #4]	; (5a4c <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    5a46:	6818      	ldr	r0, [r3, #0]
    5a48:	f000 be18 	b.w	667c <_ZN9ClearCore10UsbManager5SpeedEv>
    5a4c:	20000ad0 	.word	0x20000ad0

00005a50 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    5a50:	4b01      	ldr	r3, [pc, #4]	; (5a58 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    5a52:	6818      	ldr	r0, [r3, #0]
    5a54:	f000 be7a 	b.w	674c <_ZN9ClearCore10UsbManager7CharGetEv>
    5a58:	20000ad0 	.word	0x20000ad0

00005a5c <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    5a5c:	4b01      	ldr	r3, [pc, #4]	; (5a64 <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    5a5e:	6818      	ldr	r0, [r3, #0]
    5a60:	f000 bfa0 	b.w	69a4 <_ZN9ClearCore10UsbManager8CharPeekEv>
    5a64:	20000ad0 	.word	0x20000ad0

00005a68 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    5a68:	4b01      	ldr	r3, [pc, #4]	; (5a70 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    5a6a:	6818      	ldr	r0, [r3, #0]
    5a6c:	f000 bfa6 	b.w	69bc <_ZN9ClearCore10UsbManager8SendCharEh>
    5a70:	20000ad0 	.word	0x20000ad0

00005a74 <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    5a74:	4b01      	ldr	r3, [pc, #4]	; (5a7c <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    5a76:	6818      	ldr	r0, [r3, #0]
    5a78:	f000 bfd4 	b.w	6a24 <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    5a7c:	20000ad0 	.word	0x20000ad0

00005a80 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    5a80:	4b01      	ldr	r3, [pc, #4]	; (5a88 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    5a82:	6818      	ldr	r0, [r3, #0]
    5a84:	f000 bfd6 	b.w	6a34 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    5a88:	20000ad0 	.word	0x20000ad0

00005a8c <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    5a8c:	6803      	ldr	r3, [r0, #0]
    5a8e:	4a04      	ldr	r2, [pc, #16]	; (5aa0 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    5a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a92:	4293      	cmp	r3, r2
    5a94:	d103      	bne.n	5a9e <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    5a96:	4b03      	ldr	r3, [pc, #12]	; (5aa4 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    5a98:	6818      	ldr	r0, [r3, #0]
    5a9a:	f000 be39 	b.w	6710 <_ZN9ClearCore10UsbManagercvbEv>
    5a9e:	4718      	bx	r3
    5aa0:	00005a15 	.word	0x00005a15
    5aa4:	20000ad0 	.word	0x20000ad0

00005aa8 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    5aa8:	f1a0 0004 	sub.w	r0, r0, #4
    5aac:	e7ee      	b.n	5a8c <_ZN9ClearCore9SerialUsb10IsWritableEv>
    5aae:	bf00      	nop

00005ab0 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5ab0:	b508      	push	{r3, lr}
        return PortIsOpen();
    5ab2:	6803      	ldr	r3, [r0, #0]
    5ab4:	4a06      	ldr	r2, [pc, #24]	; (5ad0 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    5ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ab8:	4293      	cmp	r3, r2
    5aba:	d105      	bne.n	5ac8 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    5abc:	4b05      	ldr	r3, [pc, #20]	; (5ad4 <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    5abe:	6818      	ldr	r0, [r3, #0]
    5ac0:	f000 fe26 	bl	6710 <_ZN9ClearCore10UsbManagercvbEv>
    }
    5ac4:	b200      	sxth	r0, r0
    5ac6:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    5ac8:	4798      	blx	r3
    }
    5aca:	b200      	sxth	r0, r0
    5acc:	bd08      	pop	{r3, pc}
    5ace:	bf00      	nop
    5ad0:	00005a15 	.word	0x00005a15
    5ad4:	20000ad0 	.word	0x20000ad0

00005ad8 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5ad8:	f1a0 0004 	sub.w	r0, r0, #4
    5adc:	e7e8      	b.n	5ab0 <_ZN9ClearCore9SerialUsb5StateEv>
    5ade:	bf00      	nop

00005ae0 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5ae0:	b508      	push	{r3, lr}
            PortOpen();
    5ae2:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    5ae4:	b961      	cbnz	r1, 5b00 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    5ae6:	4a0b      	ldr	r2, [pc, #44]	; (5b14 <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    5ae8:	68db      	ldr	r3, [r3, #12]
    5aea:	4293      	cmp	r3, r2
    5aec:	d105      	bne.n	5afa <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    5aee:	4b0a      	ldr	r3, [pc, #40]	; (5b18 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5af0:	6818      	ldr	r0, [r3, #0]
    5af2:	f001 f9a3 	bl	6e3c <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    5af6:	2001      	movs	r0, #1
    5af8:	bd08      	pop	{r3, pc}
            PortClose();
    5afa:	4798      	blx	r3
    }
    5afc:	2001      	movs	r0, #1
    5afe:	bd08      	pop	{r3, pc}
    5b00:	4a06      	ldr	r2, [pc, #24]	; (5b1c <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    5b02:	689b      	ldr	r3, [r3, #8]
    5b04:	4293      	cmp	r3, r2
    5b06:	d1f8      	bne.n	5afa <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    5b08:	4b03      	ldr	r3, [pc, #12]	; (5b18 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5b0a:	6818      	ldr	r0, [r3, #0]
    5b0c:	f000 fdbc 	bl	6688 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    5b10:	2001      	movs	r0, #1
    5b12:	bd08      	pop	{r3, pc}
    5b14:	00005a2d 	.word	0x00005a2d
    5b18:	20000ad0 	.word	0x20000ad0
    5b1c:	00005a21 	.word	0x00005a21

00005b20 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5b20:	f1a0 0004 	sub.w	r0, r0, #4
    5b24:	e7dc      	b.n	5ae0 <_ZN9ClearCore9SerialUsb5StateEs>
    5b26:	bf00      	nop

00005b28 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5b28:	b530      	push	{r4, r5, lr}
    5b2a:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    5b2c:	4d1a      	ldr	r5, [pc, #104]	; (5b98 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5b2e:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    5b32:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    5b36:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    5b38:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    5b3c:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    5b40:	d112      	bne.n	5b68 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    5b42:	4621      	mov	r1, r4
    5b44:	4620      	mov	r0, r4
    5b46:	f006 f8dd 	bl	bd04 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    5b4a:	4621      	mov	r1, r4
    5b4c:	2001      	movs	r0, #1
    5b4e:	f006 f8d9 	bl	bd04 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    5b52:	f006 f8cb 	bl	bcec <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    5b56:	f006 f903 	bl	bd60 <cdcdf_acm_get_line_coding>
    5b5a:	6803      	ldr	r3, [r0, #0]
    5b5c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5b60:	d012      	beq.n	5b88 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    5b62:	2000      	movs	r0, #0
    5b64:	b003      	add	sp, #12
    5b66:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    5b68:	490c      	ldr	r1, [pc, #48]	; (5b9c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    5b6a:	2000      	movs	r0, #0
    5b6c:	f006 f8ca 	bl	bd04 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    5b70:	490b      	ldr	r1, [pc, #44]	; (5ba0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    5b72:	2001      	movs	r0, #1
    5b74:	f006 f8c6 	bl	bd04 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    5b78:	6828      	ldr	r0, [r5, #0]
    5b7a:	2140      	movs	r1, #64	; 0x40
    5b7c:	3080      	adds	r0, #128	; 0x80
    5b7e:	f006 f88d 	bl	bc9c <cdcdf_acm_read>
}
    5b82:	2000      	movs	r0, #0
    5b84:	b003      	add	sp, #12
    5b86:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    5b88:	2101      	movs	r1, #1
    5b8a:	4806      	ldr	r0, [pc, #24]	; (5ba4 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    5b8c:	f003 fa36 	bl	8ffc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    5b90:	2000      	movs	r0, #0
    5b92:	b003      	add	sp, #12
    5b94:	bd30      	pop	{r4, r5, pc}
    5b96:	bf00      	nop
    5b98:	20000ad0 	.word	0x20000ad0
    5b9c:	00005ba9 	.word	0x00005ba9
    5ba0:	00005de1 	.word	0x00005de1
    5ba4:	200019cc 	.word	0x200019cc

00005ba8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    5ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bac:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    5bae:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    5bb0:	498a      	ldr	r1, [pc, #552]	; (5ddc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    5bb2:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5bb4:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    5bb8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5bbc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    5bc0:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    5bc2:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5bc4:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    5bc6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    5bca:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    5bce:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    5bd2:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    5bd4:	bf48      	it	mi
    5bd6:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    5bd8:	2c00      	cmp	r4, #0
    5bda:	f000 80d6 	beq.w	5d8a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    5bde:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    5be2:	f000 80d2 	beq.w	5d8a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    5be6:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    5bea:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5bee:	42a3      	cmp	r3, r4
    5bf0:	bf28      	it	cs
    5bf2:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    5bf4:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    5bf8:	4299      	cmp	r1, r3
    5bfa:	bf28      	it	cs
    5bfc:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    5bfe:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5c00:	2900      	cmp	r1, #0
    5c02:	f000 80e8 	beq.w	5dd6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    5c06:	1d2c      	adds	r4, r5, #4
    5c08:	4404      	add	r4, r0
    5c0a:	1d17      	adds	r7, r2, #4
    5c0c:	42be      	cmp	r6, r7
    5c0e:	bf38      	it	cc
    5c10:	42a2      	cmpcc	r2, r4
    5c12:	f0c0 80ce 	bcc.w	5db2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5c16:	290b      	cmp	r1, #11
    5c18:	f240 80cb 	bls.w	5db2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5c1c:	4254      	negs	r4, r2
    5c1e:	f014 0403 	ands.w	r4, r4, #3
    5c22:	f000 80b7 	beq.w	5d94 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    5c26:	7817      	ldrb	r7, [r2, #0]
    5c28:	5547      	strb	r7, [r0, r5]
    5c2a:	2c01      	cmp	r4, #1
    5c2c:	f106 0c01 	add.w	ip, r6, #1
    5c30:	f102 0801 	add.w	r8, r2, #1
    5c34:	f000 80b0 	beq.w	5d98 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5c38:	7857      	ldrb	r7, [r2, #1]
    5c3a:	7077      	strb	r7, [r6, #1]
    5c3c:	2c02      	cmp	r4, #2
    5c3e:	f106 0c02 	add.w	ip, r6, #2
    5c42:	f102 0802 	add.w	r8, r2, #2
    5c46:	f000 80a7 	beq.w	5d98 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5c4a:	7897      	ldrb	r7, [r2, #2]
    5c4c:	70b7      	strb	r7, [r6, #2]
    5c4e:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5c52:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5c54:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5c58:	9601      	str	r6, [sp, #4]
    5c5a:	eba1 0b04 	sub.w	fp, r1, r4
    5c5e:	f1ab 0604 	sub.w	r6, fp, #4
    5c62:	08b6      	lsrs	r6, r6, #2
    5c64:	192f      	adds	r7, r5, r4
    5c66:	3601      	adds	r6, #1
    5c68:	ea4f 0986 	mov.w	r9, r6, lsl #2
    5c6c:	4407      	add	r7, r0
    5c6e:	4414      	add	r4, r2
    5c70:	f04f 0e00 	mov.w	lr, #0
    5c74:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    5c78:	f854 ab04 	ldr.w	sl, [r4], #4
    5c7c:	f847 ab04 	str.w	sl, [r7], #4
    5c80:	4576      	cmp	r6, lr
    5c82:	d8f7      	bhi.n	5c74 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    5c84:	9c01      	ldr	r4, [sp, #4]
    5c86:	45cb      	cmp	fp, r9
    5c88:	444c      	add	r4, r9
    5c8a:	eb0c 0709 	add.w	r7, ip, r9
    5c8e:	eb08 0e09 	add.w	lr, r8, r9
    5c92:	f000 8089 	beq.w	5da8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5c96:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    5c9a:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5c9e:	1c66      	adds	r6, r4, #1
    5ca0:	42b1      	cmp	r1, r6
    5ca2:	f240 8081 	bls.w	5da8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5ca6:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5ca8:	f89e 6001 	ldrb.w	r6, [lr, #1]
    5cac:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5cae:	42a1      	cmp	r1, r4
    5cb0:	d97a      	bls.n	5da8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    5cb2:	f89e 4002 	ldrb.w	r4, [lr, #2]
    5cb6:	70bc      	strb	r4, [r7, #2]
    5cb8:	1856      	adds	r6, r2, r1
    5cba:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5cbe:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    5cc2:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    5cc4:	1a64      	subs	r4, r4, r1
        if (count) {
    5cc6:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    5cc8:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    5ccc:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    5cd0:	d064      	beq.n	5d9c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    5cd2:	1d31      	adds	r1, r6, #4
    5cd4:	1d02      	adds	r2, r0, #4
    5cd6:	4296      	cmp	r6, r2
    5cd8:	bf38      	it	cc
    5cda:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    5cdc:	4604      	mov	r4, r0
    5cde:	d371      	bcc.n	5dc4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5ce0:	2b0b      	cmp	r3, #11
    5ce2:	d96f      	bls.n	5dc4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5ce4:	4272      	negs	r2, r6
    5ce6:	f012 0203 	ands.w	r2, r2, #3
    5cea:	d05f      	beq.n	5dac <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    5cec:	7831      	ldrb	r1, [r6, #0]
    5cee:	7001      	strb	r1, [r0, #0]
    5cf0:	2a01      	cmp	r2, #1
    5cf2:	f100 0401 	add.w	r4, r0, #1
    5cf6:	f106 0e01 	add.w	lr, r6, #1
    5cfa:	d058      	beq.n	5dae <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5cfc:	7871      	ldrb	r1, [r6, #1]
    5cfe:	7041      	strb	r1, [r0, #1]
    5d00:	2a02      	cmp	r2, #2
    5d02:	f100 0402 	add.w	r4, r0, #2
    5d06:	f106 0e02 	add.w	lr, r6, #2
    5d0a:	d050      	beq.n	5dae <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5d0c:	78b1      	ldrb	r1, [r6, #2]
    5d0e:	7081      	strb	r1, [r0, #2]
    5d10:	1cc4      	adds	r4, r0, #3
    5d12:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    5d16:	2703      	movs	r7, #3
    5d18:	eba3 0c02 	sub.w	ip, r3, r2
    5d1c:	f1ac 0104 	sub.w	r1, ip, #4
    5d20:	0889      	lsrs	r1, r1, #2
    5d22:	1c4d      	adds	r5, r1, #1
    5d24:	4416      	add	r6, r2
    5d26:	ea4f 0885 	mov.w	r8, r5, lsl #2
    5d2a:	4402      	add	r2, r0
    5d2c:	2100      	movs	r1, #0
    5d2e:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    5d30:	f856 9b04 	ldr.w	r9, [r6], #4
    5d34:	f842 9b04 	str.w	r9, [r2], #4
    5d38:	428d      	cmp	r5, r1
    5d3a:	d8f8      	bhi.n	5d2e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    5d3c:	45c4      	cmp	ip, r8
    5d3e:	eb07 0208 	add.w	r2, r7, r8
    5d42:	eb04 0108 	add.w	r1, r4, r8
    5d46:	eb0e 0608 	add.w	r6, lr, r8
    5d4a:	d00d      	beq.n	5d68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    5d4c:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    5d50:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    5d54:	1c54      	adds	r4, r2, #1
    5d56:	42a3      	cmp	r3, r4
    5d58:	d906      	bls.n	5d68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    5d5a:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    5d5c:	7874      	ldrb	r4, [r6, #1]
    5d5e:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    5d60:	4293      	cmp	r3, r2
    5d62:	d901      	bls.n	5d68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    5d64:	78b2      	ldrb	r2, [r6, #2]
    5d66:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    5d68:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5d6c:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    5d70:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    5d74:	441a      	add	r2, r3
            m_readBufAvail -= count;
    5d76:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    5d78:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5d7c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    5d80:	b91c      	cbnz	r4, 5d8a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    5d82:	3080      	adds	r0, #128	; 0x80
    5d84:	2140      	movs	r1, #64	; 0x40
    5d86:	f005 ff89 	bl	bc9c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    5d8a:	b662      	cpsie	i
}
    5d8c:	2001      	movs	r0, #1
    5d8e:	b003      	add	sp, #12
    5d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    5d94:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    5d96:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5d98:	9401      	str	r4, [sp, #4]
    5d9a:	e75e      	b.n	5c5a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    5d9c:	4429      	add	r1, r5
    5d9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    5da2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    5da6:	e7eb      	b.n	5d80 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    5da8:	1856      	adds	r6, r2, r1
    5daa:	e786      	b.n	5cba <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    5dac:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    5dae:	4617      	mov	r7, r2
    5db0:	e7b2      	b.n	5d18 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    5db2:	1e74      	subs	r4, r6, #1
    5db4:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    5db6:	f812 7b01 	ldrb.w	r7, [r2], #1
    5dba:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5dbe:	42b2      	cmp	r2, r6
    5dc0:	d1f9      	bne.n	5db6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    5dc2:	e77a      	b.n	5cba <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    5dc4:	1e42      	subs	r2, r0, #1
    5dc6:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    5dc8:	f816 1b01 	ldrb.w	r1, [r6], #1
    5dcc:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    5dd0:	42b4      	cmp	r4, r6
    5dd2:	d1f9      	bne.n	5dc8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    5dd4:	e7c8      	b.n	5d68 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    5dd6:	4616      	mov	r6, r2
    5dd8:	e773      	b.n	5cc2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    5dda:	bf00      	nop
    5ddc:	20000ad0 	.word	0x20000ad0

00005de0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    5de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    5de4:	48d8      	ldr	r0, [pc, #864]	; (6148 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    5de6:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    5de8:	2900      	cmp	r1, #0
    5dea:	f040 81ab 	bne.w	6144 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    5dee:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    5df0:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    5df4:	441a      	add	r2, r3
    5df6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    5dfa:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    5dfe:	2300      	movs	r3, #0
    5e00:	f3bf 8f5b 	dmb	ish
    5e04:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    5e08:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    5e0c:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    5e0e:	f3bf 8f5b 	dmb	ish
    5e12:	f04f 0101 	mov.w	r1, #1
    5e16:	f504 7388 	add.w	r3, r4, #272	; 0x110
    5e1a:	e8d3 2f4f 	ldrexb	r2, [r3]
    5e1e:	e8c3 1f40 	strexb	r0, r1, [r3]
    5e22:	2800      	cmp	r0, #0
    5e24:	d1f9      	bne.n	5e1a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    5e26:	f3bf 8f5b 	dmb	ish
    5e2a:	f012 0fff 	tst.w	r2, #255	; 0xff
    5e2e:	f040 80dc 	bne.w	5fea <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    5e32:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    5e36:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    5e3a:	428e      	cmp	r6, r1
    5e3c:	f000 8191 	beq.w	6162 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5e40:	f104 0240 	add.w	r2, r4, #64	; 0x40
    5e44:	eb02 0706 	add.w	r7, r2, r6
    5e48:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    5e4c:	f0c0 80d1 	bcc.w	5ff2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    5e50:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    5e54:	4419      	add	r1, r3
    5e56:	2940      	cmp	r1, #64	; 0x40
    5e58:	bf28      	it	cs
    5e5a:	2140      	movcs	r1, #64	; 0x40
    5e5c:	428b      	cmp	r3, r1
    5e5e:	bf28      	it	cs
    5e60:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5e62:	2b00      	cmp	r3, #0
    5e64:	f000 81a1 	beq.w	61aa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    5e68:	f106 0540 	add.w	r5, r6, #64	; 0x40
    5e6c:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    5e70:	1960      	adds	r0, r4, r5
    5e72:	44a4      	add	ip, r4
    5e74:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    5e78:	4540      	cmp	r0, r8
    5e7a:	bf38      	it	cc
    5e7c:	45e6      	cmpcc	lr, ip
    5e7e:	f0c0 818a 	bcc.w	6196 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    5e82:	2b0b      	cmp	r3, #11
    5e84:	f240 8187 	bls.w	6196 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    5e88:	4240      	negs	r0, r0
    5e8a:	f010 0003 	ands.w	r0, r0, #3
    5e8e:	f000 8161 	beq.w	6154 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    5e92:	5d96      	ldrb	r6, [r2, r6]
    5e94:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    5e98:	2801      	cmp	r0, #1
    5e9a:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    5e9e:	f107 0801 	add.w	r8, r7, #1
    5ea2:	f000 8159 	beq.w	6158 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    5ea6:	787e      	ldrb	r6, [r7, #1]
    5ea8:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    5eac:	2802      	cmp	r0, #2
    5eae:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    5eb2:	f107 0802 	add.w	r8, r7, #2
    5eb6:	f000 814f 	beq.w	6158 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    5eba:	78be      	ldrb	r6, [r7, #2]
    5ebc:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5ec0:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5ec2:	f107 0803 	add.w	r8, r7, #3
    5ec6:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5eca:	9601      	str	r6, [sp, #4]
    5ecc:	eba3 0b00 	sub.w	fp, r3, r0
    5ed0:	f1ab 0604 	sub.w	r6, fp, #4
    5ed4:	08b6      	lsrs	r6, r6, #2
    5ed6:	4405      	add	r5, r0
    5ed8:	3601      	adds	r6, #1
    5eda:	30c0      	adds	r0, #192	; 0xc0
    5edc:	4425      	add	r5, r4
    5ede:	4420      	add	r0, r4
    5ee0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    5ee4:	2700      	movs	r7, #0
    5ee6:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    5ee8:	f855 ab04 	ldr.w	sl, [r5], #4
    5eec:	f840 ab04 	str.w	sl, [r0], #4
    5ef0:	42b7      	cmp	r7, r6
    5ef2:	d3f8      	bcc.n	5ee6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    5ef4:	9801      	ldr	r0, [sp, #4]
    5ef6:	45cb      	cmp	fp, r9
    5ef8:	4448      	add	r0, r9
    5efa:	eb0c 0509 	add.w	r5, ip, r9
    5efe:	eb08 0709 	add.w	r7, r8, r9
    5f02:	d00d      	beq.n	5f20 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    5f04:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    5f08:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f0c:	1c46      	adds	r6, r0, #1
    5f0e:	42b3      	cmp	r3, r6
    5f10:	d906      	bls.n	5f20 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    5f12:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    5f14:	787e      	ldrb	r6, [r7, #1]
    5f16:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f18:	4283      	cmp	r3, r0
    5f1a:	d901      	bls.n	5f20 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    5f1c:	78b8      	ldrb	r0, [r7, #2]
    5f1e:	70a8      	strb	r0, [r5, #2]
    5f20:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f24:	1acb      	subs	r3, r1, r3
    5f26:	f000 80fc 	beq.w	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    5f2a:	f104 0544 	add.w	r5, r4, #68	; 0x44
    5f2e:	1d06      	adds	r6, r0, #4
    5f30:	42b2      	cmp	r2, r6
    5f32:	bf38      	it	cc
    5f34:	42a8      	cmpcc	r0, r5
    5f36:	f0c0 8125 	bcc.w	6184 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    5f3a:	2b0b      	cmp	r3, #11
    5f3c:	f240 8122 	bls.w	6184 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    5f40:	4255      	negs	r5, r2
    5f42:	f015 0503 	ands.w	r5, r5, #3
    5f46:	f000 8109 	beq.w	615c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    5f4a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    5f4e:	7002      	strb	r2, [r0, #0]
    5f50:	2d01      	cmp	r5, #1
    5f52:	f100 0801 	add.w	r8, r0, #1
    5f56:	f104 0241 	add.w	r2, r4, #65	; 0x41
    5f5a:	f000 8100 	beq.w	615e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    5f5e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    5f62:	7042      	strb	r2, [r0, #1]
    5f64:	2d02      	cmp	r5, #2
    5f66:	f100 0802 	add.w	r8, r0, #2
    5f6a:	f104 0242 	add.w	r2, r4, #66	; 0x42
    5f6e:	f000 80f6 	beq.w	615e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    5f72:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    5f76:	7082      	strb	r2, [r0, #2]
    5f78:	f100 0803 	add.w	r8, r0, #3
    5f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f80:	2703      	movs	r7, #3
    5f82:	eba3 0905 	sub.w	r9, r3, r5
    5f86:	f1a9 0604 	sub.w	r6, r9, #4
    5f8a:	08b6      	lsrs	r6, r6, #2
    5f8c:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    5f90:	3601      	adds	r6, #1
    5f92:	4428      	add	r0, r5
    5f94:	44a4      	add	ip, r4
    5f96:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    5f9a:	f04f 0a00 	mov.w	sl, #0
    5f9e:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    5fa2:	f85c 5b04 	ldr.w	r5, [ip], #4
    5fa6:	f840 5b04 	str.w	r5, [r0], #4
    5faa:	4556      	cmp	r6, sl
    5fac:	d8f7      	bhi.n	5f9e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    5fae:	45d9      	cmp	r9, fp
    5fb0:	445f      	add	r7, fp
    5fb2:	eb08 000b 	add.w	r0, r8, fp
    5fb6:	eb02 050b 	add.w	r5, r2, fp
    5fba:	f000 80b2 	beq.w	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    5fbe:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    5fc2:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5fc6:	1c7a      	adds	r2, r7, #1
    5fc8:	4293      	cmp	r3, r2
    5fca:	f240 80aa 	bls.w	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    5fce:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    5fd0:	786a      	ldrb	r2, [r5, #1]
    5fd2:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5fd4:	42bb      	cmp	r3, r7
    5fd6:	f240 80a4 	bls.w	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    5fda:	78ab      	ldrb	r3, [r5, #2]
    5fdc:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    5fde:	4670      	mov	r0, lr
    5fe0:	f005 fe70 	bl	bcc4 <cdcdf_acm_write>
    5fe4:	2800      	cmp	r0, #0
    5fe6:	f040 80a2 	bne.w	612e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    5fea:	2001      	movs	r0, #1
    5fec:	b003      	add	sp, #12
    5fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    5ff2:	1b89      	subs	r1, r1, r6
    5ff4:	f106 0340 	add.w	r3, r6, #64	; 0x40
    5ff8:	f106 0044 	add.w	r0, r6, #68	; 0x44
    5ffc:	2940      	cmp	r1, #64	; 0x40
    5ffe:	eb04 0803 	add.w	r8, r4, r3
    6002:	4420      	add	r0, r4
    6004:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    6008:	bf28      	it	cs
    600a:	2140      	movcs	r1, #64	; 0x40
    600c:	45a8      	cmp	r8, r5
    600e:	bf38      	it	cc
    6010:	4586      	cmpcc	lr, r0
    6012:	f0c0 80ad 	bcc.w	6170 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    6016:	290b      	cmp	r1, #11
    6018:	f240 80aa 	bls.w	6170 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    601c:	f1c8 0800 	rsb	r8, r8, #0
    6020:	f018 0803 	ands.w	r8, r8, #3
    6024:	f000 8092 	beq.w	614c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    6028:	5d92      	ldrb	r2, [r2, r6]
    602a:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    602e:	f1b8 0f01 	cmp.w	r8, #1
    6032:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    6036:	f107 0601 	add.w	r6, r7, #1
    603a:	f000 8089 	beq.w	6150 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    603e:	787a      	ldrb	r2, [r7, #1]
    6040:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    6044:	f1b8 0f02 	cmp.w	r8, #2
    6048:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    604c:	f107 0602 	add.w	r6, r7, #2
    6050:	d07e      	beq.n	6150 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6052:	78ba      	ldrb	r2, [r7, #2]
    6054:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6058:	1cfe      	adds	r6, r7, #3
    605a:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    605e:	f04f 0903 	mov.w	r9, #3
    6062:	4443      	add	r3, r8
    6064:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6068:	58e2      	ldr	r2, [r4, r3]
    606a:	5022      	str	r2, [r4, r0]
    606c:	eba1 0808 	sub.w	r8, r1, r8
    6070:	f1a8 0204 	sub.w	r2, r8, #4
    6074:	4423      	add	r3, r4
    6076:	0892      	lsrs	r2, r2, #2
    6078:	3201      	adds	r2, #1
    607a:	4420      	add	r0, r4
    607c:	685f      	ldr	r7, [r3, #4]
    607e:	6047      	str	r7, [r0, #4]
    6080:	2a02      	cmp	r2, #2
    6082:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    6086:	d035      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6088:	689f      	ldr	r7, [r3, #8]
    608a:	6087      	str	r7, [r0, #8]
    608c:	2a03      	cmp	r2, #3
    608e:	d031      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6090:	68df      	ldr	r7, [r3, #12]
    6092:	60c7      	str	r7, [r0, #12]
    6094:	2a04      	cmp	r2, #4
    6096:	d02d      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6098:	691f      	ldr	r7, [r3, #16]
    609a:	6107      	str	r7, [r0, #16]
    609c:	2a05      	cmp	r2, #5
    609e:	d029      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60a0:	695f      	ldr	r7, [r3, #20]
    60a2:	6147      	str	r7, [r0, #20]
    60a4:	2a06      	cmp	r2, #6
    60a6:	d025      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60a8:	699f      	ldr	r7, [r3, #24]
    60aa:	6187      	str	r7, [r0, #24]
    60ac:	2a07      	cmp	r2, #7
    60ae:	d021      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60b0:	69df      	ldr	r7, [r3, #28]
    60b2:	61c7      	str	r7, [r0, #28]
    60b4:	2a08      	cmp	r2, #8
    60b6:	d01d      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60b8:	6a1f      	ldr	r7, [r3, #32]
    60ba:	6207      	str	r7, [r0, #32]
    60bc:	2a09      	cmp	r2, #9
    60be:	d019      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60c0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    60c2:	6247      	str	r7, [r0, #36]	; 0x24
    60c4:	2a0a      	cmp	r2, #10
    60c6:	d015      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60c8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    60ca:	6287      	str	r7, [r0, #40]	; 0x28
    60cc:	2a0b      	cmp	r2, #11
    60ce:	d011      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60d0:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    60d2:	62c7      	str	r7, [r0, #44]	; 0x2c
    60d4:	2a0c      	cmp	r2, #12
    60d6:	d00d      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60d8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    60da:	6307      	str	r7, [r0, #48]	; 0x30
    60dc:	2a0d      	cmp	r2, #13
    60de:	d009      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60e0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    60e2:	6347      	str	r7, [r0, #52]	; 0x34
    60e4:	2a0e      	cmp	r2, #14
    60e6:	d005      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60e8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    60ea:	6387      	str	r7, [r0, #56]	; 0x38
    60ec:	2a0f      	cmp	r2, #15
    60ee:	d001      	beq.n	60f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    60f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    60f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    60f4:	45e0      	cmp	r8, ip
    60f6:	44e1      	add	r9, ip
    60f8:	eb05 030c 	add.w	r3, r5, ip
    60fc:	eb06 000c 	add.w	r0, r6, ip
    6100:	d00f      	beq.n	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6102:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    6106:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    610a:	f109 0201 	add.w	r2, r9, #1
    610e:	4291      	cmp	r1, r2
    6110:	d907      	bls.n	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6112:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    6116:	7842      	ldrb	r2, [r0, #1]
    6118:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    611a:	4549      	cmp	r1, r9
    611c:	d901      	bls.n	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    611e:	7882      	ldrb	r2, [r0, #2]
    6120:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6122:	4670      	mov	r0, lr
    6124:	f005 fdce 	bl	bcc4 <cdcdf_acm_write>
    6128:	2800      	cmp	r0, #0
    612a:	f43f af5e 	beq.w	5fea <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    612e:	f3bf 8f5b 	dmb	ish
    6132:	2300      	movs	r3, #0
    6134:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    6138:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    613a:	f3bf 8f5b 	dmb	ish
}
    613e:	b003      	add	sp, #12
    6140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6144:	6801      	ldr	r1, [r0, #0]
    6146:	e65a      	b.n	5dfe <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    6148:	20000ad0 	.word	0x20000ad0
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    614c:	463e      	mov	r6, r7
    614e:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6150:	46c1      	mov	r9, r8
    6152:	e786      	b.n	6062 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6154:	46b8      	mov	r8, r7
    6156:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6158:	9001      	str	r0, [sp, #4]
    615a:	e6b7      	b.n	5ecc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    615c:	4680      	mov	r8, r0
    615e:	462f      	mov	r7, r5
    6160:	e70f      	b.n	5f82 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    6162:	f3bf 8f5b 	dmb	ish
    6166:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    616a:	f3bf 8f5b 	dmb	ish
    616e:	e73c      	b.n	5fea <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6170:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    6174:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    6176:	f817 2b01 	ldrb.w	r2, [r7], #1
    617a:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    617e:	4287      	cmp	r7, r0
    6180:	d1f9      	bne.n	6176 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    6182:	e7ce      	b.n	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6184:	3801      	subs	r0, #1
    6186:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6188:	f812 5b01 	ldrb.w	r5, [r2], #1
    618c:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6190:	429a      	cmp	r2, r3
    6192:	d1f9      	bne.n	6188 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    6194:	e7c5      	b.n	6122 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6196:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    619a:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    619c:	f817 5b01 	ldrb.w	r5, [r7], #1
    61a0:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    61a4:	42be      	cmp	r6, r7
    61a6:	d1f9      	bne.n	619c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    61a8:	e6ba      	b.n	5f20 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    61aa:	4670      	mov	r0, lr
    61ac:	e6ba      	b.n	5f24 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    61ae:	bf00      	nop

000061b0 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    61b0:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    61b2:	4e16      	ldr	r6, [pc, #88]	; (620c <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    61b4:	6834      	ldr	r4, [r6, #0]
    61b6:	f014 0401 	ands.w	r4, r4, #1
    61ba:	d002      	beq.n	61c2 <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    61bc:	4b14      	ldr	r3, [pc, #80]	; (6210 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    61be:	6818      	ldr	r0, [r3, #0]
    61c0:	bd70      	pop	{r4, r5, r6, pc}
    61c2:	f44f 7090 	mov.w	r0, #288	; 0x120
    61c6:	f00c ffe3 	bl	13190 <_Znwj>
    61ca:	4605      	mov	r5, r0
    m_portOpen(false) {
    61cc:	f100 0380 	add.w	r3, r0, #128	; 0x80
    61d0:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    61d4:	490f      	ldr	r1, [pc, #60]	; (6214 <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    61d6:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    61da:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    61de:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    61e2:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    61e6:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    61ea:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    61ee:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    61f2:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    61f6:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    61fa:	2003      	movs	r0, #3
    61fc:	f005 fd82 	bl	bd04 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    6200:	4a03      	ldr	r2, [pc, #12]	; (6210 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6202:	2301      	movs	r3, #1
    6204:	6015      	str	r5, [r2, #0]
    6206:	4628      	mov	r0, r5
    6208:	6033      	str	r3, [r6, #0]
}
    620a:	bd70      	pop	{r4, r5, r6, pc}
    620c:	20000acc 	.word	0x20000acc
    6210:	20000b14 	.word	0x20000b14
    6214:	00005b29 	.word	0x00005b29

00006218 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    6218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    621c:	4ac7      	ldr	r2, [pc, #796]	; (653c <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    621e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6222:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    6226:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6228:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    622c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6230:	0659      	lsls	r1, r3, #25
    6232:	d4fb      	bmi.n	622c <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    6234:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6238:	49c0      	ldr	r1, [pc, #768]	; (653c <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    623a:	2004      	movs	r0, #4
    623c:	f360 0303 	bfi	r3, r0, #0, #4
    6240:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6244:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    624c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6250:	684b      	ldr	r3, [r1, #4]
    6252:	06db      	lsls	r3, r3, #27
    6254:	d4fc      	bmi.n	6250 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    6256:	4bba      	ldr	r3, [pc, #744]	; (6540 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6258:	49ba      	ldr	r1, [pc, #744]	; (6544 <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    625a:	691a      	ldr	r2, [r3, #16]
    625c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6260:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    6262:	699a      	ldr	r2, [r3, #24]
    6264:	f042 0201 	orr.w	r2, r2, #1
    6268:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    626a:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    626e:	2203      	movs	r2, #3
    6270:	f006 f8f4 	bl	c45c <usb_find_str_desc>
    if (!serNumDescPtr) {
    6274:	4604      	mov	r4, r0
    6276:	2800      	cmp	r0, #0
    6278:	f000 819c 	beq.w	65b4 <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    627c:	4bb2      	ldr	r3, [pc, #712]	; (6548 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    627e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6280:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6284:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    6286:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6288:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    628a:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    628e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6292:	3037      	adds	r0, #55	; 0x37
    6294:	2d09      	cmp	r5, #9
    6296:	bf88      	it	hi
    6298:	4607      	movhi	r7, r0
    629a:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    629e:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    62a2:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    62a6:	3037      	adds	r0, #55	; 0x37
    62a8:	f1b8 0f09 	cmp.w	r8, #9
    62ac:	bfc8      	it	gt
    62ae:	4684      	movgt	ip, r0
    62b0:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    62b2:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    62b6:	f88d c011 	strb.w	ip, [sp, #17]
    62ba:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    62be:	3037      	adds	r0, #55	; 0x37
    62c0:	2e09      	cmp	r6, #9
    62c2:	bfc8      	it	gt
    62c4:	4684      	movgt	ip, r0
    62c6:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    62c8:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    62cc:	f88d c012 	strb.w	ip, [sp, #18]
    62d0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    62d4:	3037      	adds	r0, #55	; 0x37
    62d6:	2d09      	cmp	r5, #9
    62d8:	bfc8      	it	gt
    62da:	4684      	movgt	ip, r0
    62dc:	fa5f f08e 	uxtb.w	r0, lr
    62e0:	f88d 7010 	strb.w	r7, [sp, #16]
    62e4:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    62e8:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    62ec:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    62f0:	3037      	adds	r0, #55	; 0x37
    62f2:	f1be 0f09 	cmp.w	lr, #9
    62f6:	bfd4      	ite	le
    62f8:	46e6      	movle	lr, ip
    62fa:	4686      	movgt	lr, r0
    62fc:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    62fe:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6302:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6304:	f88d e014 	strb.w	lr, [sp, #20]
    6308:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    630c:	3030      	adds	r0, #48	; 0x30
    630e:	2f09      	cmp	r7, #9
    6310:	bfcc      	ite	gt
    6312:	4677      	movgt	r7, lr
    6314:	4607      	movle	r7, r0
    6316:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6318:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    631a:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    631e:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6322:	f100 0737 	add.w	r7, r0, #55	; 0x37
    6326:	3030      	adds	r0, #48	; 0x30
    6328:	2e09      	cmp	r6, #9
    632a:	bfcc      	ite	gt
    632c:	463e      	movgt	r6, r7
    632e:	4606      	movle	r6, r0
    6330:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    6332:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6334:	f88d 6016 	strb.w	r6, [sp, #22]
    6338:	f100 0637 	add.w	r6, r0, #55	; 0x37
    633c:	3030      	adds	r0, #48	; 0x30
    633e:	2b09      	cmp	r3, #9
    6340:	bfcc      	ite	gt
    6342:	4633      	movgt	r3, r6
    6344:	4603      	movle	r3, r0
    6346:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6348:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    634c:	f88d 3017 	strb.w	r3, [sp, #23]
    6350:	f100 0337 	add.w	r3, r0, #55	; 0x37
    6354:	3030      	adds	r0, #48	; 0x30
    6356:	2d09      	cmp	r5, #9
    6358:	bf88      	it	hi
    635a:	4618      	movhi	r0, r3
    635c:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6360:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6364:	f88d 0018 	strb.w	r0, [sp, #24]
    6368:	f103 0037 	add.w	r0, r3, #55	; 0x37
    636c:	3330      	adds	r3, #48	; 0x30
    636e:	f1bc 0f09 	cmp.w	ip, #9
    6372:	bfcc      	ite	gt
    6374:	4684      	movgt	ip, r0
    6376:	469c      	movle	ip, r3
    6378:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    637c:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6380:	f88d c019 	strb.w	ip, [sp, #25]
    6384:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6388:	3330      	adds	r3, #48	; 0x30
    638a:	f1be 0f09 	cmp.w	lr, #9
    638e:	bfd8      	it	le
    6390:	469c      	movle	ip, r3
    6392:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    6394:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6398:	f88d c01a 	strb.w	ip, [sp, #26]
    639c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    63a0:	3330      	adds	r3, #48	; 0x30
    63a2:	2f09      	cmp	r7, #9
    63a4:	bfd8      	it	le
    63a6:	469c      	movle	ip, r3
    63a8:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    63aa:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    63ae:	f88d c01b 	strb.w	ip, [sp, #27]
    63b2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    63b6:	3330      	adds	r3, #48	; 0x30
    63b8:	2e09      	cmp	r6, #9
    63ba:	bfd8      	it	le
    63bc:	469c      	movle	ip, r3
    63be:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    63c0:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    63c4:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    63c6:	f88d c01c 	strb.w	ip, [sp, #28]
    63ca:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    63ce:	3330      	adds	r3, #48	; 0x30
    63d0:	2d09      	cmp	r5, #9
    63d2:	bfcc      	ite	gt
    63d4:	4665      	movgt	r5, ip
    63d6:	461d      	movle	r5, r3
    63d8:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    63da:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    63dc:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    63e0:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    63e4:	f103 0537 	add.w	r5, r3, #55	; 0x37
    63e8:	3330      	adds	r3, #48	; 0x30
    63ea:	2809      	cmp	r0, #9
    63ec:	bfcc      	ite	gt
    63ee:	4628      	movgt	r0, r5
    63f0:	4618      	movle	r0, r3
    63f2:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    63f4:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    63f8:	f88d 001e 	strb.w	r0, [sp, #30]
    63fc:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6400:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6402:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6406:	2a09      	cmp	r2, #9
    6408:	bfcc      	ite	gt
    640a:	4602      	movgt	r2, r0
    640c:	461a      	movle	r2, r3
    640e:	fa5f f58e 	uxtb.w	r5, lr
    6412:	b2f8      	uxtb	r0, r7
    6414:	f88d 201f 	strb.w	r2, [sp, #31]
    6418:	f105 0237 	add.w	r2, r5, #55	; 0x37
    641c:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    641e:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6422:	f1be 0f09 	cmp.w	lr, #9
    6426:	bf88      	it	hi
    6428:	4615      	movhi	r5, r2
    642a:	f100 0237 	add.w	r2, r0, #55	; 0x37
    642e:	3030      	adds	r0, #48	; 0x30
    6430:	2f09      	cmp	r7, #9
    6432:	bfc8      	it	gt
    6434:	4610      	movgt	r0, r2
    6436:	b2f3      	uxtb	r3, r6
    6438:	f103 0237 	add.w	r2, r3, #55	; 0x37
    643c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6440:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6442:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6446:	2e09      	cmp	r6, #9
    6448:	bfc8      	it	gt
    644a:	4613      	movgt	r3, r2
    644c:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    644e:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6452:	f102 0837 	add.w	r8, r2, #55	; 0x37
    6456:	3230      	adds	r2, #48	; 0x30
    6458:	2809      	cmp	r0, #9
    645a:	bfd8      	it	le
    645c:	4690      	movle	r8, r2
    645e:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6462:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6466:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    646a:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    646c:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    646e:	f88d 5020 	strb.w	r5, [sp, #32]
    6472:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6476:	3230      	adds	r2, #48	; 0x30
    6478:	f1be 0f09 	cmp.w	lr, #9
    647c:	bfd8      	it	le
    647e:	4614      	movle	r4, r2
    6480:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6482:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6484:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6488:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    648c:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6490:	3230      	adds	r2, #48	; 0x30
    6492:	2f09      	cmp	r7, #9
    6494:	bfcc      	ite	gt
    6496:	4627      	movgt	r7, r4
    6498:	4617      	movle	r7, r2
    649a:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    649c:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64a0:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    64a4:	f102 0737 	add.w	r7, r2, #55	; 0x37
    64a8:	3230      	adds	r2, #48	; 0x30
    64aa:	2e09      	cmp	r6, #9
    64ac:	bfcc      	ite	gt
    64ae:	463e      	movgt	r6, r7
    64b0:	4616      	movle	r6, r2
    64b2:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    64b4:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64b6:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    64ba:	f102 0637 	add.w	r6, r2, #55	; 0x37
    64be:	3230      	adds	r2, #48	; 0x30
    64c0:	2909      	cmp	r1, #9
    64c2:	bfcc      	ite	gt
    64c4:	4631      	movgt	r1, r6
    64c6:	4611      	movle	r1, r2
    64c8:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    64ca:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64ce:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    64d2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    64d6:	3237      	adds	r2, #55	; 0x37
    64d8:	2d09      	cmp	r5, #9
    64da:	bf88      	it	hi
    64dc:	4611      	movhi	r1, r2
    64de:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    64e2:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    64ea:	f102 0130 	add.w	r1, r2, #48	; 0x30
    64ee:	3237      	adds	r2, #55	; 0x37
    64f0:	f1bc 0f09 	cmp.w	ip, #9
    64f4:	bfd4      	ite	le
    64f6:	468c      	movle	ip, r1
    64f8:	4694      	movgt	ip, r2
    64fa:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    64fe:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6502:	f102 0137 	add.w	r1, r2, #55	; 0x37
    6506:	3230      	adds	r2, #48	; 0x30
    6508:	f1be 0f09 	cmp.w	lr, #9
    650c:	bfcc      	ite	gt
    650e:	468e      	movgt	lr, r1
    6510:	4696      	movle	lr, r2
    6512:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    6514:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6518:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    651c:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    6520:	3130      	adds	r1, #48	; 0x30
    6522:	2c09      	cmp	r4, #9
    6524:	bfd8      	it	le
    6526:	468e      	movle	lr, r1
    6528:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    652a:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    652e:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    6532:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    6536:	3237      	adds	r2, #55	; 0x37
    6538:	e008      	b.n	654c <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    653a:	bf00      	nop
    653c:	40001c00 	.word	0x40001c00
    6540:	40000800 	.word	0x40000800
    6544:	200000df 	.word	0x200000df
    6548:	00022b04 	.word	0x00022b04
    654c:	2f09      	cmp	r7, #9
    654e:	bfd4      	ite	le
    6550:	4677      	movle	r7, lr
    6552:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    6554:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6558:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    655a:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    655e:	b2da      	uxtb	r2, r3
    6560:	b2e9      	uxtb	r1, r5
    6562:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    6566:	f104 0730 	add.w	r7, r4, #48	; 0x30
    656a:	3437      	adds	r4, #55	; 0x37
    656c:	2e09      	cmp	r6, #9
    656e:	bfd8      	it	le
    6570:	463c      	movle	r4, r7
    6572:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    6576:	f102 0730 	add.w	r7, r2, #48	; 0x30
    657a:	3137      	adds	r1, #55	; 0x37
    657c:	3237      	adds	r2, #55	; 0x37
    657e:	2d09      	cmp	r5, #9
    6580:	bfd8      	it	le
    6582:	4671      	movle	r1, lr
    6584:	2b09      	cmp	r3, #9
    6586:	bfd4      	ite	le
    6588:	463b      	movle	r3, r7
    658a:	4613      	movgt	r3, r2
    658c:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6590:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    6594:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6598:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    659c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    65a0:	f10d 030f 	add.w	r3, sp, #15
    65a4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    65a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    65ac:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    65b0:	428b      	cmp	r3, r1
    65b2:	d1f9      	bne.n	65a8 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    65b4:	4b2a      	ldr	r3, [pc, #168]	; (6660 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65b6:	4a2b      	ldr	r2, [pc, #172]	; (6664 <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    65b8:	4f2b      	ldr	r7, [pc, #172]	; (6668 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    65ba:	4d2c      	ldr	r5, [pc, #176]	; (666c <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    65bc:	482c      	ldr	r0, [pc, #176]	; (6670 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    65be:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    65c0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    65c4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    65c8:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    65cc:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    65d0:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    65d4:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    65d8:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    65da:	629c      	str	r4, [r3, #40]	; 0x28
    65dc:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65de:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    65e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    65e4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    65e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    65ec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    65f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    65f4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    65f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    65fc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6600:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6604:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    6608:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6610:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6612:	629c      	str	r4, [r3, #40]	; 0x28
    6614:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6616:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6618:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    661c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6620:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6624:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    662c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6630:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6634:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6638:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    663c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6644:	f005 fe52 	bl	c2ec <usbdc_init>
    cdcdf_acm_init();
    6648:	f005 fb0a 	bl	bc60 <cdcdf_acm_init>
    usbdc_start(single_desc);
    664c:	4809      	ldr	r0, [pc, #36]	; (6674 <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    664e:	f005 fe7b 	bl	c348 <usbdc_start>
    usbdc_attach();
    6652:	f005 fe91 	bl	c378 <usbdc_attach>
}
    6656:	2001      	movs	r0, #1
    6658:	b00c      	add	sp, #48	; 0x30
    665a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    665e:	bf00      	nop
    6660:	41008000 	.word	0x41008000
    6664:	e000e100 	.word	0xe000e100
    6668:	c0000100 	.word	0xc0000100
    666c:	c0000200 	.word	0xc0000200
    6670:	20000ad4 	.word	0x20000ad4
    6674:	20000000 	.word	0x20000000

00006678 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6678:	2001      	movs	r0, #1
    667a:	4770      	bx	lr

0000667c <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    667c:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    667e:	f005 fb6f 	bl	bd60 <cdcdf_acm_get_line_coding>
}
    6682:	6800      	ldr	r0, [r0, #0]
    6684:	bd08      	pop	{r3, pc}
    6686:	bf00      	nop

00006688 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6688:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    668a:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    668e:	b103      	cbz	r3, 6692 <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6690:	bd38      	pop	{r3, r4, r5, pc}
    6692:	4604      	mov	r4, r0
    m_portOpen = true;
    6694:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6696:	4618      	mov	r0, r3
    m_portOpen = true;
    6698:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    669c:	4906      	ldr	r1, [pc, #24]	; (66b8 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    669e:	f005 fb31 	bl	bd04 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    66a2:	4628      	mov	r0, r5
    66a4:	4905      	ldr	r1, [pc, #20]	; (66bc <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    66a6:	f005 fb2d 	bl	bd04 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    66aa:	f104 0080 	add.w	r0, r4, #128	; 0x80
    66ae:	2140      	movs	r1, #64	; 0x40
}
    66b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    66b4:	f005 baf2 	b.w	bc9c <cdcdf_acm_read>
    66b8:	00005ba9 	.word	0x00005ba9
    66bc:	00005de1 	.word	0x00005de1

000066c0 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    66c0:	4603      	mov	r3, r0
    m_inHead = 0;
    66c2:	2200      	movs	r2, #0
    66c4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    66c8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    66cc:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    66d0:	2140      	movs	r1, #64	; 0x40
    66d2:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    66d4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    66d8:	f005 bae0 	b.w	bc9c <cdcdf_acm_read>

000066dc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    66dc:	b538      	push	{r3, r4, r5, lr}
    66de:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    66e0:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    66e4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    66e8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    66ec:	429a      	cmp	r2, r3
    66ee:	d100      	bne.n	66f2 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    66f0:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    66f2:	f005 fb2f 	bl	bd54 <cdcdf_acm_is_enabled>
    66f6:	2800      	cmp	r0, #0
    66f8:	d0fa      	beq.n	66f0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    66fa:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    66fe:	07db      	lsls	r3, r3, #31
    6700:	d5f6      	bpl.n	66f0 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6702:	7b6b      	ldrb	r3, [r5, #13]
    6704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6708:	2b02      	cmp	r3, #2
    670a:	d0eb      	beq.n	66e4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    670c:	bd38      	pop	{r3, r4, r5, pc}
    670e:	bf00      	nop

00006710 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    6710:	b538      	push	{r3, r4, r5, lr}
    6712:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6714:	f005 fb1e 	bl	bd54 <cdcdf_acm_is_enabled>
    6718:	4604      	mov	r4, r0
    671a:	b170      	cbz	r0, 673a <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    671c:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    6720:	f014 0401 	ands.w	r4, r4, #1
    6724:	d009      	beq.n	673a <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6726:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    672a:	7b5c      	ldrb	r4, [r3, #13]
    672c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6730:	f1a4 0402 	sub.w	r4, r4, #2
    6734:	fab4 f484 	clz	r4, r4
    6738:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    673a:	4803      	ldr	r0, [pc, #12]	; (6748 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    673c:	2100      	movs	r1, #0
    673e:	f002 ffeb 	bl	9718 <Delay_cycles>
}
    6742:	4620      	mov	r0, r4
    6744:	bd38      	pop	{r3, r4, r5, pc}
    6746:	bf00      	nop
    6748:	00124f80 	.word	0x00124f80

0000674c <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    674c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6750:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6754:	4293      	cmp	r3, r2
    6756:	f000 8116 	beq.w	6986 <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    675a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    675e:	1c5a      	adds	r2, r3, #1
    6760:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6764:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6766:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    676a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    676c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    676e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6772:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6776:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    677a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    677c:	bf48      	it	mi
    677e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6780:	2d00      	cmp	r5, #0
    6782:	f000 80e3 	beq.w	694c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6786:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    678a:	f000 80df 	beq.w	694c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    678e:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6792:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6796:	42ab      	cmp	r3, r5
    6798:	bf28      	it	cs
    679a:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    679c:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    67a0:	4299      	cmp	r1, r3
    67a2:	bf28      	it	cs
    67a4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    67a6:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    67a8:	2900      	cmp	r1, #0
    67aa:	f000 80f8 	beq.w	699e <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    67ae:	1d35      	adds	r5, r6, #4
    67b0:	4405      	add	r5, r0
    67b2:	f102 0e04 	add.w	lr, r2, #4
    67b6:	4577      	cmp	r7, lr
    67b8:	bf38      	it	cc
    67ba:	42aa      	cmpcc	r2, r5
    67bc:	f0c0 80da 	bcc.w	6974 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    67c0:	290b      	cmp	r1, #11
    67c2:	f240 80d7 	bls.w	6974 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    67c6:	4255      	negs	r5, r2
    67c8:	f015 0503 	ands.w	r5, r5, #3
    67cc:	f000 80c3 	beq.w	6956 <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    67d0:	f892 e000 	ldrb.w	lr, [r2]
    67d4:	f800 e006 	strb.w	lr, [r0, r6]
    67d8:	2d01      	cmp	r5, #1
    67da:	f107 0801 	add.w	r8, r7, #1
    67de:	f102 0901 	add.w	r9, r2, #1
    67e2:	f000 80ba 	beq.w	695a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    67e6:	f892 e001 	ldrb.w	lr, [r2, #1]
    67ea:	f887 e001 	strb.w	lr, [r7, #1]
    67ee:	2d02      	cmp	r5, #2
    67f0:	f107 0802 	add.w	r8, r7, #2
    67f4:	f102 0902 	add.w	r9, r2, #2
    67f8:	f000 80af 	beq.w	695a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    67fc:	f892 e002 	ldrb.w	lr, [r2, #2]
    6800:	f887 e002 	strb.w	lr, [r7, #2]
    6804:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6808:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    680a:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    680e:	9700      	str	r7, [sp, #0]
    6810:	eba1 0b05 	sub.w	fp, r1, r5
    6814:	f1ab 0704 	sub.w	r7, fp, #4
    6818:	08bf      	lsrs	r7, r7, #2
    681a:	eb06 0e05 	add.w	lr, r6, r5
    681e:	3701      	adds	r7, #1
    6820:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    6824:	4486      	add	lr, r0
    6826:	4415      	add	r5, r2
    6828:	f04f 0c00 	mov.w	ip, #0
    682c:	9401      	str	r4, [sp, #4]
    682e:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    6832:	f855 4b04 	ldr.w	r4, [r5], #4
    6836:	f84e 4b04 	str.w	r4, [lr], #4
    683a:	4567      	cmp	r7, ip
    683c:	d8f7      	bhi.n	682e <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    683e:	9d00      	ldr	r5, [sp, #0]
    6840:	9c01      	ldr	r4, [sp, #4]
    6842:	45d3      	cmp	fp, sl
    6844:	4455      	add	r5, sl
    6846:	eb08 0e0a 	add.w	lr, r8, sl
    684a:	eb09 0c0a 	add.w	ip, r9, sl
    684e:	f000 808c 	beq.w	696a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6852:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6856:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    685a:	1c6f      	adds	r7, r5, #1
    685c:	42b9      	cmp	r1, r7
    685e:	f240 8084 	bls.w	696a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6862:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6864:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6868:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    686c:	42a9      	cmp	r1, r5
    686e:	d97c      	bls.n	696a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6870:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6874:	f88e 5002 	strb.w	r5, [lr, #2]
    6878:	1857      	adds	r7, r2, r1
    687a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    687e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6882:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6884:	1a6d      	subs	r5, r5, r1
        if (count) {
    6886:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6888:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    688c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6890:	d065      	beq.n	695e <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6892:	1d01      	adds	r1, r0, #4
    6894:	1d3a      	adds	r2, r7, #4
    6896:	4290      	cmp	r0, r2
    6898:	bf38      	it	cc
    689a:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    689c:	4605      	mov	r5, r0
    689e:	d375      	bcc.n	698c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    68a0:	2b0b      	cmp	r3, #11
    68a2:	d973      	bls.n	698c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    68a4:	4242      	negs	r2, r0
    68a6:	f012 0203 	ands.w	r2, r2, #3
    68aa:	d060      	beq.n	696e <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    68ac:	7839      	ldrb	r1, [r7, #0]
    68ae:	7001      	strb	r1, [r0, #0]
    68b0:	2a01      	cmp	r2, #1
    68b2:	f100 0501 	add.w	r5, r0, #1
    68b6:	f107 0e01 	add.w	lr, r7, #1
    68ba:	d059      	beq.n	6970 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    68bc:	7879      	ldrb	r1, [r7, #1]
    68be:	7041      	strb	r1, [r0, #1]
    68c0:	2a02      	cmp	r2, #2
    68c2:	f100 0502 	add.w	r5, r0, #2
    68c6:	f107 0e02 	add.w	lr, r7, #2
    68ca:	d051      	beq.n	6970 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    68cc:	78b9      	ldrb	r1, [r7, #2]
    68ce:	7081      	strb	r1, [r0, #2]
    68d0:	1cc5      	adds	r5, r0, #3
    68d2:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    68d6:	f04f 0803 	mov.w	r8, #3
    68da:	eba3 0c02 	sub.w	ip, r3, r2
    68de:	f1ac 0104 	sub.w	r1, ip, #4
    68e2:	0889      	lsrs	r1, r1, #2
    68e4:	1c4e      	adds	r6, r1, #1
    68e6:	4417      	add	r7, r2
    68e8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    68ec:	4402      	add	r2, r0
    68ee:	2100      	movs	r1, #0
    68f0:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    68f2:	f857 ab04 	ldr.w	sl, [r7], #4
    68f6:	f842 ab04 	str.w	sl, [r2], #4
    68fa:	428e      	cmp	r6, r1
    68fc:	d8f8      	bhi.n	68f0 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    68fe:	45cc      	cmp	ip, r9
    6900:	eb08 0209 	add.w	r2, r8, r9
    6904:	eb05 0109 	add.w	r1, r5, r9
    6908:	eb0e 0709 	add.w	r7, lr, r9
    690c:	d00d      	beq.n	692a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    690e:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6912:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6916:	1c55      	adds	r5, r2, #1
    6918:	42ab      	cmp	r3, r5
    691a:	d906      	bls.n	692a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    691c:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    691e:	787d      	ldrb	r5, [r7, #1]
    6920:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6922:	4293      	cmp	r3, r2
    6924:	d901      	bls.n	692a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6926:	78ba      	ldrb	r2, [r7, #2]
    6928:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    692a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    692e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6932:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6936:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6938:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    693a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    693e:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6942:	b91d      	cbnz	r5, 694c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6944:	3080      	adds	r0, #128	; 0x80
    6946:	2140      	movs	r1, #64	; 0x40
    6948:	f005 f9a8 	bl	bc9c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    694c:	b662      	cpsie	i
    return retVal;
    694e:	b220      	sxth	r0, r4
}
    6950:	b003      	add	sp, #12
    6952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6956:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    6958:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    695a:	9500      	str	r5, [sp, #0]
    695c:	e758      	b.n	6810 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    695e:	4431      	add	r1, r6
    6960:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6964:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6968:	e7eb      	b.n	6942 <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    696a:	1857      	adds	r7, r2, r1
    696c:	e785      	b.n	687a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    696e:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    6970:	4690      	mov	r8, r2
    6972:	e7b2      	b.n	68da <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    6974:	1e7d      	subs	r5, r7, #1
    6976:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    6978:	f812 eb01 	ldrb.w	lr, [r2], #1
    697c:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6980:	42ba      	cmp	r2, r7
    6982:	d1f9      	bne.n	6978 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    6984:	e779      	b.n	687a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    6986:	f04f 30ff 	mov.w	r0, #4294967295
    698a:	4770      	bx	lr
    698c:	1e42      	subs	r2, r0, #1
    698e:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    6990:	f817 1b01 	ldrb.w	r1, [r7], #1
    6994:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6998:	42bd      	cmp	r5, r7
    699a:	d1f9      	bne.n	6990 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    699c:	e7c5      	b.n	692a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    699e:	4617      	mov	r7, r2
    69a0:	e76f      	b.n	6882 <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    69a2:	bf00      	nop

000069a4 <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    69a4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    69a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    69ac:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    69ae:	bf1a      	itte	ne
    69b0:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    69b4:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    69b6:	f04f 30ff 	moveq.w	r0, #4294967295
}
    69ba:	4770      	bx	lr

000069bc <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    69bc:	b570      	push	{r4, r5, r6, lr}
    69be:	4604      	mov	r4, r0
    69c0:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    69c2:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    69c6:	f005 f9c5 	bl	bd54 <cdcdf_acm_is_enabled>
    69ca:	b350      	cbz	r0, 6a22 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    69cc:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    69d0:	f010 0001 	ands.w	r0, r0, #1
    69d4:	d025      	beq.n	6a22 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    69d6:	7b6b      	ldrb	r3, [r5, #13]
    69d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    69dc:	2b02      	cmp	r3, #2
    69de:	d001      	beq.n	69e4 <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    69e0:	2000      	movs	r0, #0
    69e2:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    69e4:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    69e8:	b900      	cbnz	r0, 69ec <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    69ea:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    69ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    69f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    69f4:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    69f6:	1e5a      	subs	r2, r3, #1
    69f8:	d40e      	bmi.n	6a18 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    69fa:	2a00      	cmp	r2, #0
    69fc:	d0e3      	beq.n	69c6 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    69fe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6a02:	4423      	add	r3, r4
    6a04:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    6a08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6a0c:	3301      	adds	r3, #1
    6a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a12:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    6a16:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    6a18:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    6a1c:	2a00      	cmp	r2, #0
    6a1e:	d0d2      	beq.n	69c6 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    6a20:	e7ed      	b.n	69fe <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    6a22:	bd70      	pop	{r4, r5, r6, pc}

00006a24 <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    6a24:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6a28:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    6a2c:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    6a2e:	bf48      	it	mi
    6a30:	3040      	addmi	r0, #64	; 0x40
}
    6a32:	4770      	bx	lr

00006a34 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    6a34:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6a38:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    6a3c:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6a3e:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    6a40:	bf48      	it	mi
    6a42:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    6a46:	4770      	bx	lr

00006a48 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    6a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6a4c:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    6a50:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6a52:	f04f 0101 	mov.w	r1, #1
    6a56:	f3bf 8f5b 	dmb	ish
    6a5a:	e8d3 2f4f 	ldrexb	r2, [r3]
    6a5e:	e8c3 1f44 	strexb	r4, r1, [r3]
    6a62:	2c00      	cmp	r4, #0
    6a64:	d1f9      	bne.n	6a5a <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    6a66:	f3bf 8f5b 	dmb	ish
    6a6a:	f012 0fff 	tst.w	r2, #255	; 0xff
    6a6e:	f040 80e4 	bne.w	6c3a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    6a72:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    6a76:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    6a7a:	428e      	cmp	r6, r1
    6a7c:	f000 81b6 	beq.w	6dec <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6a80:	f100 0340 	add.w	r3, r0, #64	; 0x40
    6a84:	eb03 0706 	add.w	r7, r3, r6
    6a88:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    6a8c:	f0c0 80d8 	bcc.w	6c40 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6a90:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6a94:	4411      	add	r1, r2
    6a96:	2940      	cmp	r1, #64	; 0x40
    6a98:	bf28      	it	cs
    6a9a:	2140      	movcs	r1, #64	; 0x40
    6a9c:	428a      	cmp	r2, r1
    6a9e:	bf28      	it	cs
    6aa0:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6aa2:	2a00      	cmp	r2, #0
    6aa4:	f000 81c7 	beq.w	6e36 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    6aa8:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    6aac:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6ab0:	eb00 080e 	add.w	r8, r0, lr
    6ab4:	4404      	add	r4, r0
    6ab6:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    6aba:	45e0      	cmp	r8, ip
    6abc:	bf38      	it	cc
    6abe:	42a5      	cmpcc	r5, r4
    6ac0:	f0c0 81ae 	bcc.w	6e20 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6ac4:	2a0b      	cmp	r2, #11
    6ac6:	f240 81ab 	bls.w	6e20 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6aca:	426c      	negs	r4, r5
    6acc:	f014 0403 	ands.w	r4, r4, #3
    6ad0:	f000 817f 	beq.w	6dd2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    6ad4:	5d9e      	ldrb	r6, [r3, r6]
    6ad6:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    6ada:	2c01      	cmp	r4, #1
    6adc:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    6ae0:	f107 0801 	add.w	r8, r7, #1
    6ae4:	f000 817b 	beq.w	6dde <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6ae8:	787e      	ldrb	r6, [r7, #1]
    6aea:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    6aee:	2c02      	cmp	r4, #2
    6af0:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    6af4:	f107 0802 	add.w	r8, r7, #2
    6af8:	f000 8171 	beq.w	6dde <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6afc:	78be      	ldrb	r6, [r7, #2]
    6afe:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6b02:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6b04:	f107 0803 	add.w	r8, r7, #3
    6b08:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6b0c:	9601      	str	r6, [sp, #4]
    6b0e:	eba2 0b04 	sub.w	fp, r2, r4
    6b12:	f1ab 0704 	sub.w	r7, fp, #4
    6b16:	08bf      	lsrs	r7, r7, #2
    6b18:	eb0e 0604 	add.w	r6, lr, r4
    6b1c:	3701      	adds	r7, #1
    6b1e:	34c0      	adds	r4, #192	; 0xc0
    6b20:	4406      	add	r6, r0
    6b22:	4404      	add	r4, r0
    6b24:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6b28:	f04f 0e00 	mov.w	lr, #0
    6b2c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6b30:	f856 ab04 	ldr.w	sl, [r6], #4
    6b34:	f844 ab04 	str.w	sl, [r4], #4
    6b38:	45be      	cmp	lr, r7
    6b3a:	d3f7      	bcc.n	6b2c <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    6b3c:	9c01      	ldr	r4, [sp, #4]
    6b3e:	45cb      	cmp	fp, r9
    6b40:	444c      	add	r4, r9
    6b42:	eb08 0e09 	add.w	lr, r8, r9
    6b46:	eb0c 0609 	add.w	r6, ip, r9
    6b4a:	d00f      	beq.n	6b6c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6b4c:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    6b50:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6b54:	1c67      	adds	r7, r4, #1
    6b56:	42ba      	cmp	r2, r7
    6b58:	d908      	bls.n	6b6c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6b5a:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6b5c:	f89e 7001 	ldrb.w	r7, [lr, #1]
    6b60:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6b62:	42a2      	cmp	r2, r4
    6b64:	d902      	bls.n	6b6c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    6b66:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6b6a:	70b4      	strb	r4, [r6, #2]
    6b6c:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6b6e:	1a8a      	subs	r2, r1, r2
    6b70:	f000 811a 	beq.w	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6b74:	1d26      	adds	r6, r4, #4
    6b76:	f100 0744 	add.w	r7, r0, #68	; 0x44
    6b7a:	42bc      	cmp	r4, r7
    6b7c:	bf38      	it	cc
    6b7e:	42b3      	cmpcc	r3, r6
    6b80:	f0c0 8145 	bcc.w	6e0e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6b84:	2a0b      	cmp	r2, #11
    6b86:	f240 8142 	bls.w	6e0e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6b8a:	425f      	negs	r7, r3
    6b8c:	f017 0703 	ands.w	r7, r7, #3
    6b90:	f000 8129 	beq.w	6de6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    6b94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    6b98:	7023      	strb	r3, [r4, #0]
    6b9a:	2f01      	cmp	r7, #1
    6b9c:	f104 0c01 	add.w	ip, r4, #1
    6ba0:	f100 0341 	add.w	r3, r0, #65	; 0x41
    6ba4:	f000 811d 	beq.w	6de2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6ba8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    6bac:	7063      	strb	r3, [r4, #1]
    6bae:	2f02      	cmp	r7, #2
    6bb0:	f104 0c02 	add.w	ip, r4, #2
    6bb4:	f100 0342 	add.w	r3, r0, #66	; 0x42
    6bb8:	f000 8113 	beq.w	6de2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6bbc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    6bc0:	70a3      	strb	r3, [r4, #2]
    6bc2:	f104 0c03 	add.w	ip, r4, #3
    6bc6:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6bca:	f04f 0903 	mov.w	r9, #3
    6bce:	eba2 0807 	sub.w	r8, r2, r7
    6bd2:	f1a8 0e04 	sub.w	lr, r8, #4
    6bd6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    6bda:	f107 0640 	add.w	r6, r7, #64	; 0x40
    6bde:	f10e 0e01 	add.w	lr, lr, #1
    6be2:	443c      	add	r4, r7
    6be4:	4406      	add	r6, r0
    6be6:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6bea:	2700      	movs	r7, #0
    6bec:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6bee:	f856 bb04 	ldr.w	fp, [r6], #4
    6bf2:	f844 bb04 	str.w	fp, [r4], #4
    6bf6:	45be      	cmp	lr, r7
    6bf8:	d8f8      	bhi.n	6bec <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    6bfa:	45d0      	cmp	r8, sl
    6bfc:	eb09 040a 	add.w	r4, r9, sl
    6c00:	eb03 070a 	add.w	r7, r3, sl
    6c04:	eb0c 060a 	add.w	r6, ip, sl
    6c08:	f000 80ce 	beq.w	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6c0c:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    6c10:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6c14:	1c63      	adds	r3, r4, #1
    6c16:	429a      	cmp	r2, r3
    6c18:	f240 80c6 	bls.w	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6c1c:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6c1e:	787b      	ldrb	r3, [r7, #1]
    6c20:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6c22:	42a2      	cmp	r2, r4
    6c24:	f240 80c0 	bls.w	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6c28:	78bb      	ldrb	r3, [r7, #2]
    6c2a:	70b3      	strb	r3, [r6, #2]
    6c2c:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6c2e:	4628      	mov	r0, r5
    6c30:	f005 f848 	bl	bcc4 <cdcdf_acm_write>
    6c34:	2800      	cmp	r0, #0
    6c36:	f040 80be 	bne.w	6db6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    6c3a:	b003      	add	sp, #12
    6c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    6c40:	1b89      	subs	r1, r1, r6
    6c42:	f106 0240 	add.w	r2, r6, #64	; 0x40
    6c46:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6c4a:	2940      	cmp	r1, #64	; 0x40
    6c4c:	eb00 0c02 	add.w	ip, r0, r2
    6c50:	4404      	add	r4, r0
    6c52:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    6c56:	bf28      	it	cs
    6c58:	2140      	movcs	r1, #64	; 0x40
    6c5a:	45f4      	cmp	ip, lr
    6c5c:	bf38      	it	cc
    6c5e:	42a5      	cmpcc	r5, r4
    6c60:	f0c0 80cb 	bcc.w	6dfa <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6c64:	290b      	cmp	r1, #11
    6c66:	f240 80c8 	bls.w	6dfa <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6c6a:	426c      	negs	r4, r5
    6c6c:	f014 0403 	ands.w	r4, r4, #3
    6c70:	f000 80ab 	beq.w	6dca <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    6c74:	5d9b      	ldrb	r3, [r3, r6]
    6c76:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    6c7a:	2c01      	cmp	r4, #1
    6c7c:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    6c80:	f107 0e01 	add.w	lr, r7, #1
    6c84:	f000 80a9 	beq.w	6dda <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6c88:	787b      	ldrb	r3, [r7, #1]
    6c8a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    6c8e:	2c02      	cmp	r4, #2
    6c90:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    6c94:	f107 0e02 	add.w	lr, r7, #2
    6c98:	f000 809f 	beq.w	6dda <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6c9c:	78bb      	ldrb	r3, [r7, #2]
    6c9e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    6ca2:	f107 0e03 	add.w	lr, r7, #3
    6ca6:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6caa:	f04f 0c03 	mov.w	ip, #3
    6cae:	1913      	adds	r3, r2, r4
    6cb0:	4403      	add	r3, r0
    6cb2:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6cb6:	681a      	ldr	r2, [r3, #0]
    6cb8:	f840 2008 	str.w	r2, [r0, r8]
    6cbc:	1b0f      	subs	r7, r1, r4
    6cbe:	1f3a      	subs	r2, r7, #4
    6cc0:	0892      	lsrs	r2, r2, #2
    6cc2:	eb00 0408 	add.w	r4, r0, r8
    6cc6:	3201      	adds	r2, #1
    6cc8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    6ccc:	f8c4 8004 	str.w	r8, [r4, #4]
    6cd0:	2a02      	cmp	r2, #2
    6cd2:	ea4f 0882 	mov.w	r8, r2, lsl #2
    6cd6:	d04f      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6cd8:	f8d3 9008 	ldr.w	r9, [r3, #8]
    6cdc:	f8c4 9008 	str.w	r9, [r4, #8]
    6ce0:	2a03      	cmp	r2, #3
    6ce2:	d049      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ce4:	f8d3 900c 	ldr.w	r9, [r3, #12]
    6ce8:	f8c4 900c 	str.w	r9, [r4, #12]
    6cec:	2a04      	cmp	r2, #4
    6cee:	d043      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6cf0:	f8d3 9010 	ldr.w	r9, [r3, #16]
    6cf4:	f8c4 9010 	str.w	r9, [r4, #16]
    6cf8:	2a05      	cmp	r2, #5
    6cfa:	d03d      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6cfc:	f8d3 9014 	ldr.w	r9, [r3, #20]
    6d00:	f8c4 9014 	str.w	r9, [r4, #20]
    6d04:	2a06      	cmp	r2, #6
    6d06:	d037      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d08:	f8d3 9018 	ldr.w	r9, [r3, #24]
    6d0c:	f8c4 9018 	str.w	r9, [r4, #24]
    6d10:	2a07      	cmp	r2, #7
    6d12:	d031      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d14:	f8d3 901c 	ldr.w	r9, [r3, #28]
    6d18:	f8c4 901c 	str.w	r9, [r4, #28]
    6d1c:	2a08      	cmp	r2, #8
    6d1e:	d02b      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d20:	f8d3 9020 	ldr.w	r9, [r3, #32]
    6d24:	f8c4 9020 	str.w	r9, [r4, #32]
    6d28:	2a09      	cmp	r2, #9
    6d2a:	d025      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d2c:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    6d30:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    6d34:	2a0a      	cmp	r2, #10
    6d36:	d01f      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d38:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    6d3c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    6d40:	2a0b      	cmp	r2, #11
    6d42:	d019      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d44:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    6d48:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    6d4c:	2a0c      	cmp	r2, #12
    6d4e:	d013      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d50:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    6d54:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    6d58:	2a0d      	cmp	r2, #13
    6d5a:	d00d      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d5c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    6d60:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    6d64:	2a0e      	cmp	r2, #14
    6d66:	d007      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d68:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    6d6c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    6d70:	2a0f      	cmp	r2, #15
    6d72:	d001      	beq.n	6d78 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6d76:	63e3      	str	r3, [r4, #60]	; 0x3c
    6d78:	4547      	cmp	r7, r8
    6d7a:	eb0c 0308 	add.w	r3, ip, r8
    6d7e:	eb06 0408 	add.w	r4, r6, r8
    6d82:	eb0e 0c08 	add.w	ip, lr, r8
    6d86:	d00f      	beq.n	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6d88:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    6d8c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6d90:	1c5a      	adds	r2, r3, #1
    6d92:	4291      	cmp	r1, r2
    6d94:	d908      	bls.n	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6d96:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    6d98:	f89c 2001 	ldrb.w	r2, [ip, #1]
    6d9c:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6d9e:	4299      	cmp	r1, r3
    6da0:	d902      	bls.n	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6da2:	f89c 3002 	ldrb.w	r3, [ip, #2]
    6da6:	70a3      	strb	r3, [r4, #2]
    6da8:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6daa:	4628      	mov	r0, r5
    6dac:	f004 ff8a 	bl	bcc4 <cdcdf_acm_write>
    6db0:	2800      	cmp	r0, #0
    6db2:	f43f af42 	beq.w	6c3a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    6db6:	f3bf 8f5b 	dmb	ish
    6dba:	2300      	movs	r3, #0
    6dbc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    6dc0:	f3bf 8f5b 	dmb	ish
}
    6dc4:	b003      	add	sp, #12
    6dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6dca:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6dcc:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6dce:	462e      	mov	r6, r5
    6dd0:	e76d      	b.n	6cae <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    6dd2:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dd4:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6dd6:	46ac      	mov	ip, r5
    6dd8:	e699      	b.n	6b0e <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6dda:	46a4      	mov	ip, r4
    6ddc:	e767      	b.n	6cae <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dde:	9401      	str	r4, [sp, #4]
    6de0:	e695      	b.n	6b0e <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6de2:	46b9      	mov	r9, r7
    6de4:	e6f3      	b.n	6bce <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    6de6:	46b9      	mov	r9, r7
    6de8:	46a4      	mov	ip, r4
    6dea:	e6f0      	b.n	6bce <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    6dec:	f3bf 8f5b 	dmb	ish
    6df0:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    6df4:	f3bf 8f5b 	dmb	ish
        return;
    6df8:	e71f      	b.n	6c3a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    6dfa:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    6dfe:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    6e00:	f817 2b01 	ldrb.w	r2, [r7], #1
    6e04:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6e08:	42a7      	cmp	r7, r4
    6e0a:	d1f9      	bne.n	6e00 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    6e0c:	e7cc      	b.n	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6e0e:	3c01      	subs	r4, #1
    6e10:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    6e12:	f813 6b01 	ldrb.w	r6, [r3], #1
    6e16:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e1a:	4293      	cmp	r3, r2
    6e1c:	d1f9      	bne.n	6e12 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    6e1e:	e7c3      	b.n	6da8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6e20:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    6e24:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    6e28:	f817 6b01 	ldrb.w	r6, [r7], #1
    6e2c:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e30:	45be      	cmp	lr, r7
    6e32:	d1f9      	bne.n	6e28 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    6e34:	e69a      	b.n	6b6c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6e36:	462c      	mov	r4, r5
    6e38:	e699      	b.n	6b6e <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    6e3a:	bf00      	nop

00006e3c <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    6e3c:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    6e3e:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    6e42:	b903      	cbnz	r3, 6e46 <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    6e44:	bd38      	pop	{r3, r4, r5, pc}
    6e46:	4605      	mov	r5, r0
    TxPump();
    6e48:	f7ff fdfe 	bl	6a48 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6e4c:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    6e50:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    6e54:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    6e58:	429a      	cmp	r2, r3
    6e5a:	d00b      	beq.n	6e74 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6e5c:	f004 ff7a 	bl	bd54 <cdcdf_acm_is_enabled>
    6e60:	b140      	cbz	r0, 6e74 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    6e62:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    6e66:	07db      	lsls	r3, r3, #31
    6e68:	d504      	bpl.n	6e74 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6e6a:	7b63      	ldrb	r3, [r4, #13]
    6e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6e70:	2b02      	cmp	r3, #2
    6e72:	d0ed      	beq.n	6e50 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    6e74:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    6e76:	4621      	mov	r1, r4
    m_portOpen = false;
    6e78:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    6e7c:	4620      	mov	r0, r4
    6e7e:	f004 ff41 	bl	bd04 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    6e82:	4621      	mov	r1, r4
    6e84:	2001      	movs	r0, #1
    6e86:	f004 ff3d 	bl	bd04 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    6e8a:	f004 ff2f 	bl	bcec <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    6e8e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    6e92:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    6e96:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    6e9a:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    6e9e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    6ea2:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    6ea6:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    6eaa:	bd38      	pop	{r3, r4, r5, pc}

00006eac <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    6eac:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    6eb0:	b103      	cbz	r3, 6eb4 <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    6eb2:	4770      	bx	lr
    6eb4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    6eb8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    6ebc:	429a      	cmp	r2, r3
    6ebe:	f000 80fd 	beq.w	70bc <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    6ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6ec6:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    6eca:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6ecc:	f04f 0101 	mov.w	r1, #1
    6ed0:	f3bf 8f5b 	dmb	ish
    6ed4:	e8d3 2f4f 	ldrexb	r2, [r3]
    6ed8:	e8c3 1f44 	strexb	r4, r1, [r3]
    6edc:	2c00      	cmp	r4, #0
    6ede:	d1f9      	bne.n	6ed4 <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    6ee0:	f3bf 8f5b 	dmb	ish
    6ee4:	f012 0fff 	tst.w	r2, #255	; 0xff
    6ee8:	f040 80e5 	bne.w	70b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    6eec:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    6ef0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    6ef4:	428e      	cmp	r6, r1
    6ef6:	f000 81ab 	beq.w	7250 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6efa:	f100 0340 	add.w	r3, r0, #64	; 0x40
    6efe:	eb03 0706 	add.w	r7, r3, r6
    6f02:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    6f06:	f0c0 80da 	bcc.w	70be <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6f0a:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6f0e:	4411      	add	r1, r2
    6f10:	2940      	cmp	r1, #64	; 0x40
    6f12:	bf28      	it	cs
    6f14:	2140      	movcs	r1, #64	; 0x40
    6f16:	428a      	cmp	r2, r1
    6f18:	bf28      	it	cs
    6f1a:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6f1c:	2a00      	cmp	r2, #0
    6f1e:	f000 81bc 	beq.w	729a <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    6f22:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    6f26:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6f2a:	eb00 080e 	add.w	r8, r0, lr
    6f2e:	4404      	add	r4, r0
    6f30:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    6f34:	45e0      	cmp	r8, ip
    6f36:	bf38      	it	cc
    6f38:	42a5      	cmpcc	r5, r4
    6f3a:	f0c0 81a3 	bcc.w	7284 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    6f3e:	2a0b      	cmp	r2, #11
    6f40:	f240 81a0 	bls.w	7284 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    6f44:	426c      	negs	r4, r5
    6f46:	f014 0403 	ands.w	r4, r4, #3
    6f4a:	f000 8177 	beq.w	723c <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    6f4e:	5d9e      	ldrb	r6, [r3, r6]
    6f50:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    6f54:	2c01      	cmp	r4, #1
    6f56:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    6f5a:	f107 0801 	add.w	r8, r7, #1
    6f5e:	f000 8171 	beq.w	7244 <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    6f62:	787e      	ldrb	r6, [r7, #1]
    6f64:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    6f68:	2c02      	cmp	r4, #2
    6f6a:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    6f6e:	f107 0802 	add.w	r8, r7, #2
    6f72:	f000 8165 	beq.w	7240 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    6f76:	78be      	ldrb	r6, [r7, #2]
    6f78:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6f7c:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6f7e:	f107 0803 	add.w	r8, r7, #3
    6f82:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6f86:	9601      	str	r6, [sp, #4]
    6f88:	eba2 0b04 	sub.w	fp, r2, r4
    6f8c:	f1ab 0704 	sub.w	r7, fp, #4
    6f90:	08bf      	lsrs	r7, r7, #2
    6f92:	eb0e 0604 	add.w	r6, lr, r4
    6f96:	3701      	adds	r7, #1
    6f98:	34c0      	adds	r4, #192	; 0xc0
    6f9a:	4406      	add	r6, r0
    6f9c:	4404      	add	r4, r0
    6f9e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    6fa2:	f04f 0e00 	mov.w	lr, #0
    6fa6:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6faa:	f856 ab04 	ldr.w	sl, [r6], #4
    6fae:	f844 ab04 	str.w	sl, [r4], #4
    6fb2:	45be      	cmp	lr, r7
    6fb4:	d3f7      	bcc.n	6fa6 <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    6fb6:	9c01      	ldr	r4, [sp, #4]
    6fb8:	45cb      	cmp	fp, r9
    6fba:	444c      	add	r4, r9
    6fbc:	eb0c 0609 	add.w	r6, ip, r9
    6fc0:	eb08 0e09 	add.w	lr, r8, r9
    6fc4:	d00f      	beq.n	6fe6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    6fc6:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    6fca:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6fce:	1c67      	adds	r7, r4, #1
    6fd0:	42ba      	cmp	r2, r7
    6fd2:	d908      	bls.n	6fe6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    6fd4:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6fd6:	f89e 7001 	ldrb.w	r7, [lr, #1]
    6fda:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6fdc:	42a2      	cmp	r2, r4
    6fde:	d902      	bls.n	6fe6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    6fe0:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6fe4:	70b4      	strb	r4, [r6, #2]
    6fe6:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6fe8:	1a8a      	subs	r2, r1, r2
    6fea:	d058      	beq.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    6fec:	1d26      	adds	r6, r4, #4
    6fee:	f100 0744 	add.w	r7, r0, #68	; 0x44
    6ff2:	42bc      	cmp	r4, r7
    6ff4:	bf38      	it	cc
    6ff6:	42b3      	cmpcc	r3, r6
    6ff8:	f0c0 813b 	bcc.w	7272 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    6ffc:	2a0b      	cmp	r2, #11
    6ffe:	f240 8138 	bls.w	7272 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    7002:	425f      	negs	r7, r3
    7004:	f017 0703 	ands.w	r7, r7, #3
    7008:	f000 811f 	beq.w	724a <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    700c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7010:	7023      	strb	r3, [r4, #0]
    7012:	2f01      	cmp	r7, #1
    7014:	f104 0c01 	add.w	ip, r4, #1
    7018:	f100 0341 	add.w	r3, r0, #65	; 0x41
    701c:	f000 8116 	beq.w	724c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7020:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7024:	7063      	strb	r3, [r4, #1]
    7026:	2f02      	cmp	r7, #2
    7028:	f104 0c02 	add.w	ip, r4, #2
    702c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7030:	f000 810c 	beq.w	724c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7034:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7038:	70a3      	strb	r3, [r4, #2]
    703a:	f104 0c03 	add.w	ip, r4, #3
    703e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7042:	f04f 0903 	mov.w	r9, #3
    7046:	eba2 0807 	sub.w	r8, r2, r7
    704a:	f1a8 0e04 	sub.w	lr, r8, #4
    704e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7052:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7056:	f10e 0e01 	add.w	lr, lr, #1
    705a:	443c      	add	r4, r7
    705c:	4406      	add	r6, r0
    705e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    7062:	2700      	movs	r7, #0
    7064:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7066:	f856 bb04 	ldr.w	fp, [r6], #4
    706a:	f844 bb04 	str.w	fp, [r4], #4
    706e:	45be      	cmp	lr, r7
    7070:	d8f8      	bhi.n	7064 <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    7072:	45d0      	cmp	r8, sl
    7074:	eb09 040a 	add.w	r4, r9, sl
    7078:	eb0c 060a 	add.w	r6, ip, sl
    707c:	eb03 070a 	add.w	r7, r3, sl
    7080:	d00d      	beq.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7082:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7086:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    708a:	1c63      	adds	r3, r4, #1
    708c:	429a      	cmp	r2, r3
    708e:	d906      	bls.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7090:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7092:	787b      	ldrb	r3, [r7, #1]
    7094:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7096:	42a2      	cmp	r2, r4
    7098:	d901      	bls.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    709a:	78bb      	ldrb	r3, [r7, #2]
    709c:	70b3      	strb	r3, [r6, #2]
    709e:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    70a0:	4628      	mov	r0, r5
    70a2:	f004 fe0f 	bl	bcc4 <cdcdf_acm_write>
    70a6:	b130      	cbz	r0, 70b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    70a8:	f3bf 8f5b 	dmb	ish
    70ac:	2300      	movs	r3, #0
    70ae:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    70b2:	f3bf 8f5b 	dmb	ish
}
    70b6:	b003      	add	sp, #12
    70b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70bc:	4770      	bx	lr
        count = min(count, tail - head);
    70be:	1b89      	subs	r1, r1, r6
    70c0:	f106 0240 	add.w	r2, r6, #64	; 0x40
    70c4:	f106 0444 	add.w	r4, r6, #68	; 0x44
    70c8:	2940      	cmp	r1, #64	; 0x40
    70ca:	eb00 0c02 	add.w	ip, r0, r2
    70ce:	4404      	add	r4, r0
    70d0:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    70d4:	bf28      	it	cs
    70d6:	2140      	movcs	r1, #64	; 0x40
    70d8:	45f4      	cmp	ip, lr
    70da:	bf38      	it	cc
    70dc:	42a5      	cmpcc	r5, r4
    70de:	f0c0 80be 	bcc.w	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    70e2:	290b      	cmp	r1, #11
    70e4:	f240 80bb 	bls.w	725e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    70e8:	426c      	negs	r4, r5
    70ea:	f014 0403 	ands.w	r4, r4, #3
    70ee:	f000 809e 	beq.w	722e <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    70f2:	5d9b      	ldrb	r3, [r3, r6]
    70f4:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    70f8:	2c01      	cmp	r4, #1
    70fa:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    70fe:	f107 0e01 	add.w	lr, r7, #1
    7102:	f000 8096 	beq.w	7232 <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    7106:	787b      	ldrb	r3, [r7, #1]
    7108:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    710c:	2c02      	cmp	r4, #2
    710e:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    7112:	f107 0e02 	add.w	lr, r7, #2
    7116:	f000 808e 	beq.w	7236 <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    711a:	78bb      	ldrb	r3, [r7, #2]
    711c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7120:	f107 0e03 	add.w	lr, r7, #3
    7124:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7128:	f04f 0c03 	mov.w	ip, #3
    712c:	1913      	adds	r3, r2, r4
    712e:	4403      	add	r3, r0
    7130:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7134:	681a      	ldr	r2, [r3, #0]
    7136:	f840 2008 	str.w	r2, [r0, r8]
    713a:	1b0f      	subs	r7, r1, r4
    713c:	1f3a      	subs	r2, r7, #4
    713e:	0892      	lsrs	r2, r2, #2
    7140:	eb00 0408 	add.w	r4, r0, r8
    7144:	3201      	adds	r2, #1
    7146:	f8d3 8004 	ldr.w	r8, [r3, #4]
    714a:	f8c4 8004 	str.w	r8, [r4, #4]
    714e:	2a02      	cmp	r2, #2
    7150:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7154:	d04f      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7156:	f8d3 9008 	ldr.w	r9, [r3, #8]
    715a:	f8c4 9008 	str.w	r9, [r4, #8]
    715e:	2a03      	cmp	r2, #3
    7160:	d049      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7162:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7166:	f8c4 900c 	str.w	r9, [r4, #12]
    716a:	2a04      	cmp	r2, #4
    716c:	d043      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    716e:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7172:	f8c4 9010 	str.w	r9, [r4, #16]
    7176:	2a05      	cmp	r2, #5
    7178:	d03d      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    717a:	f8d3 9014 	ldr.w	r9, [r3, #20]
    717e:	f8c4 9014 	str.w	r9, [r4, #20]
    7182:	2a06      	cmp	r2, #6
    7184:	d037      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7186:	f8d3 9018 	ldr.w	r9, [r3, #24]
    718a:	f8c4 9018 	str.w	r9, [r4, #24]
    718e:	2a07      	cmp	r2, #7
    7190:	d031      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7192:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7196:	f8c4 901c 	str.w	r9, [r4, #28]
    719a:	2a08      	cmp	r2, #8
    719c:	d02b      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    719e:	f8d3 9020 	ldr.w	r9, [r3, #32]
    71a2:	f8c4 9020 	str.w	r9, [r4, #32]
    71a6:	2a09      	cmp	r2, #9
    71a8:	d025      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71aa:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    71ae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    71b2:	2a0a      	cmp	r2, #10
    71b4:	d01f      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71b6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    71ba:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    71be:	2a0b      	cmp	r2, #11
    71c0:	d019      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71c2:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    71c6:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    71ca:	2a0c      	cmp	r2, #12
    71cc:	d013      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71ce:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    71d2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    71d6:	2a0d      	cmp	r2, #13
    71d8:	d00d      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71da:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    71de:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    71e2:	2a0e      	cmp	r2, #14
    71e4:	d007      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71e6:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    71ea:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    71ee:	2a0f      	cmp	r2, #15
    71f0:	d001      	beq.n	71f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    71f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    71f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    71f6:	4547      	cmp	r7, r8
    71f8:	eb0c 0308 	add.w	r3, ip, r8
    71fc:	eb06 0408 	add.w	r4, r6, r8
    7200:	eb0e 0c08 	add.w	ip, lr, r8
    7204:	f43f af4b 	beq.w	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7208:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    720c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7210:	1c5a      	adds	r2, r3, #1
    7212:	4291      	cmp	r1, r2
    7214:	f67f af43 	bls.w	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7218:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    721a:	f89c 2001 	ldrb.w	r2, [ip, #1]
    721e:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7220:	4299      	cmp	r1, r3
    7222:	f67f af3c 	bls.w	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7226:	f89c 3002 	ldrb.w	r3, [ip, #2]
    722a:	70a3      	strb	r3, [r4, #2]
    722c:	e737      	b.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    722e:	46be      	mov	lr, r7
    7230:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7232:	46a4      	mov	ip, r4
    7234:	e77a      	b.n	712c <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    7236:	f04f 0c02 	mov.w	ip, #2
    723a:	e777      	b.n	712c <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    723c:	46b8      	mov	r8, r7
    723e:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7240:	9401      	str	r4, [sp, #4]
    7242:	e6a1      	b.n	6f88 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    7244:	2601      	movs	r6, #1
    7246:	9601      	str	r6, [sp, #4]
    7248:	e69e      	b.n	6f88 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    724a:	46a4      	mov	ip, r4
    724c:	46b9      	mov	r9, r7
    724e:	e6fa      	b.n	7046 <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7250:	f3bf 8f5b 	dmb	ish
    7254:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7258:	f3bf 8f5b 	dmb	ish
    725c:	e72b      	b.n	70b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    725e:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7262:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7264:	f817 2b01 	ldrb.w	r2, [r7], #1
    7268:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    726c:	42a7      	cmp	r7, r4
    726e:	d1f9      	bne.n	7264 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7270:	e715      	b.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7272:	3c01      	subs	r4, #1
    7274:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7276:	f813 6b01 	ldrb.w	r6, [r3], #1
    727a:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    727e:	4293      	cmp	r3, r2
    7280:	d1f9      	bne.n	7276 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    7282:	e70c      	b.n	709e <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7284:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7288:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    728c:	f817 6b01 	ldrb.w	r6, [r7], #1
    7290:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7294:	45be      	cmp	lr, r7
    7296:	d1f9      	bne.n	728c <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7298:	e6a5      	b.n	6fe6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    729a:	462c      	mov	r4, r5
    729c:	e6a4      	b.n	6fe8 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    729e:	bf00      	nop

000072a0 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    72a0:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    72a2:	f7fe ff85 	bl	61b0 <_ZN9ClearCore10UsbManager8InstanceEv>
    72a6:	4b01      	ldr	r3, [pc, #4]	; (72ac <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    72a8:	6018      	str	r0, [r3, #0]
    72aa:	bd08      	pop	{r3, pc}
    72ac:	20000ad0 	.word	0x20000ad0

000072b0 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    72b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    72b2:	4770      	bx	lr

000072b4 <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    72b4:	7900      	ldrb	r0, [r0, #4]
    72b6:	4770      	bx	lr

000072b8 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    72b8:	2001      	movs	r0, #1
    72ba:	4770      	bx	lr

000072bc <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    72bc:	b510      	push	{r4, lr}
    72be:	4604      	mov	r4, r0
    DigitalIn() {};
    72c0:	f007 f800 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    72c4:	4620      	mov	r0, r4
    72c6:	4b0c      	ldr	r3, [pc, #48]	; (72f8 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    72c8:	f840 3b30 	str.w	r3, [r0], #48
    72cc:	f004 f8a2 	bl	b414 <_ZN9ClearCore13StepGeneratorC1Ev>
    72d0:	4a0a      	ldr	r2, [pc, #40]	; (72fc <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    72d2:	6022      	str	r2, [r4, #0]
            reg = 0;
    72d4:	2300      	movs	r3, #0
    MotorDriver() {};
    72d6:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    72d8:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    72dc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    72e0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    72e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    72e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    72ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    72f0:	6322      	str	r2, [r4, #48]	; 0x30
    72f2:	4620      	mov	r0, r4
    72f4:	bd10      	pop	{r4, pc}
    72f6:	bf00      	nop
    72f8:	00023164 	.word	0x00023164
    72fc:	000229a8 	.word	0x000229a8

00007300 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    7300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7304:	4bbf      	ldr	r3, [pc, #764]	; (7604 <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    7306:	f8df a340 	ldr.w	sl, [pc, #832]	; 7648 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    730a:	4abf      	ldr	r2, [pc, #764]	; (7608 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    730c:	49bf      	ldr	r1, [pc, #764]	; (760c <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    730e:	4dc0      	ldr	r5, [pc, #768]	; (7610 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    7310:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7312:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    7314:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7316:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    731a:	7007      	strb	r7, [r0, #0]
    731c:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    731e:	e88d 0108 	stmia.w	sp, {r3, r8}
    7322:	4620      	mov	r0, r4
    7324:	4bbb      	ldr	r3, [pc, #748]	; (7614 <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    7326:	f00a fb0f 	bl	11948 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    732a:	68a1      	ldr	r1, [r4, #8]
    732c:	6862      	ldr	r2, [r4, #4]
    732e:	7b23      	ldrb	r3, [r4, #12]
    7330:	f8ca 1008 	str.w	r1, [sl, #8]
    7334:	f8ca 2004 	str.w	r2, [sl, #4]
    7338:	6921      	ldr	r1, [r4, #16]
    733a:	6962      	ldr	r2, [r4, #20]
    733c:	f88a 300c 	strb.w	r3, [sl, #12]
    7340:	69a3      	ldr	r3, [r4, #24]
    7342:	f8ca 1010 	str.w	r1, [sl, #16]
    7346:	f8ca 2014 	str.w	r2, [sl, #20]
    734a:	69e1      	ldr	r1, [r4, #28]
    734c:	6a22      	ldr	r2, [r4, #32]
    734e:	f8ca 3018 	str.w	r3, [sl, #24]
    7352:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7354:	f8ca 101c 	str.w	r1, [sl, #28]
    7358:	f8ca 2020 	str.w	r2, [sl, #32]
    735c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7360:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    7364:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7368:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    736c:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7370:	2680      	movs	r6, #128	; 0x80
    7372:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7374:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7378:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    737c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7380:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7384:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7388:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    738c:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    7390:	a914      	add	r1, sp, #80	; 0x50
    7392:	4632      	mov	r2, r6
    7394:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    7398:	f016 fe82 	bl	1e0a0 <memcpy>
    739c:	4632      	mov	r2, r6
    739e:	a934      	add	r1, sp, #208	; 0xd0
    73a0:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    73a4:	f016 fe7c 	bl	1e0a0 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    73a8:	f8cd 8004 	str.w	r8, [sp, #4]
    73ac:	499a      	ldr	r1, [pc, #616]	; (7618 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    73ae:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    73b2:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    73b6:	9100      	str	r1, [sp, #0]
    73b8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    73bc:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    73c0:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    73c4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    73c8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    73cc:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    73d0:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    73d4:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    73d8:	4620      	mov	r0, r4
    73da:	4b90      	ldr	r3, [pc, #576]	; (761c <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    73dc:	4a90      	ldr	r2, [pc, #576]	; (7620 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    73de:	4991      	ldr	r1, [pc, #580]	; (7624 <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    73e0:	f008 fbca 	bl	fb78 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    73e4:	6863      	ldr	r3, [r4, #4]
    73e6:	606b      	str	r3, [r5, #4]
    73e8:	69a3      	ldr	r3, [r4, #24]
    73ea:	68a2      	ldr	r2, [r4, #8]
    73ec:	f894 e00c 	ldrb.w	lr, [r4, #12]
    73f0:	6920      	ldr	r0, [r4, #16]
    73f2:	61ab      	str	r3, [r5, #24]
    73f4:	69e3      	ldr	r3, [r4, #28]
    73f6:	60aa      	str	r2, [r5, #8]
    73f8:	f885 e00c 	strb.w	lr, [r5, #12]
    73fc:	6962      	ldr	r2, [r4, #20]
    73fe:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7402:	6128      	str	r0, [r5, #16]
    7404:	61eb      	str	r3, [r5, #28]
    7406:	6a20      	ldr	r0, [r4, #32]
    7408:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    740c:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    7410:	616a      	str	r2, [r5, #20]
    7412:	6228      	str	r0, [r5, #32]
    7414:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7416:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    7418:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    741c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    7420:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    7424:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7428:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    742c:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    7430:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    7434:	a914      	add	r1, sp, #80	; 0x50
    7436:	626a      	str	r2, [r5, #36]	; 0x24
    7438:	85a8      	strh	r0, [r5, #44]	; 0x2c
    743a:	4632      	mov	r2, r6
    743c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7440:	f016 fe2e 	bl	1e0a0 <memcpy>
    7444:	4632      	mov	r2, r6
    7446:	a934      	add	r1, sp, #208	; 0xd0
    7448:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    744c:	f016 fe28 	bl	1e0a0 <memcpy>
    7450:	f504 7098 	add.w	r0, r4, #304	; 0x130
    7454:	c807      	ldmia	r0, {r0, r1, r2}
    7456:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    745a:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    745e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7462:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    7466:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    746a:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    746e:	4620      	mov	r0, r4
    7470:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7478:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    747c:	f04f 0a01 	mov.w	sl, #1
    7480:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7484:	f00a f806 	bl	11494 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7488:	4b67      	ldr	r3, [pc, #412]	; (7628 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    748a:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    748c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    7490:	4d66      	ldr	r5, [pc, #408]	; (762c <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    7492:	f8cd a004 	str.w	sl, [sp, #4]
    7496:	9300      	str	r3, [sp, #0]
    7498:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    749a:	68a6      	ldr	r6, [r4, #8]
    749c:	71aa      	strb	r2, [r5, #6]
    749e:	f8a5 c004 	strh.w	ip, [r5, #4]
    74a2:	60ae      	str	r6, [r5, #8]
    74a4:	4620      	mov	r0, r4
    74a6:	4b62      	ldr	r3, [pc, #392]	; (7630 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    74a8:	4a62      	ldr	r2, [pc, #392]	; (7634 <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    74aa:	4d63      	ldr	r5, [pc, #396]	; (7638 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    74ac:	f005 ff40 	bl	d330 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    74b0:	f104 000c 	add.w	r0, r4, #12
    74b4:	c807      	ldmia	r0, {r0, r1, r2}
    74b6:	f894 e006 	ldrb.w	lr, [r4, #6]
    74ba:	68a3      	ldr	r3, [r4, #8]
    74bc:	88a6      	ldrh	r6, [r4, #4]
    74be:	f885 e006 	strb.w	lr, [r5, #6]
    74c2:	60ab      	str	r3, [r5, #8]
    74c4:	f894 e018 	ldrb.w	lr, [r4, #24]
    74c8:	69e3      	ldr	r3, [r4, #28]
    74ca:	60e8      	str	r0, [r5, #12]
    74cc:	6a20      	ldr	r0, [r4, #32]
    74ce:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    74d2:	80ae      	strh	r6, [r5, #4]
    74d4:	6129      	str	r1, [r5, #16]
    74d6:	7e66      	ldrb	r6, [r4, #25]
    74d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    74da:	616a      	str	r2, [r5, #20]
    74dc:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    74e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    74e2:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    74e6:	61eb      	str	r3, [r5, #28]
    74e8:	6228      	str	r0, [r5, #32]
    74ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    74ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    74ee:	766e      	strb	r6, [r5, #25]
    74f0:	6269      	str	r1, [r5, #36]	; 0x24
    74f2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    74f6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    74fa:	632a      	str	r2, [r5, #48]	; 0x30
    74fc:	63a8      	str	r0, [r5, #56]	; 0x38
    74fe:	636b      	str	r3, [r5, #52]	; 0x34
    7500:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7504:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7508:	6c21      	ldr	r1, [r4, #64]	; 0x40
    750a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    750e:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7512:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7514:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7518:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    751c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    751e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7520:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7524:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7528:	6429      	str	r1, [r5, #64]	; 0x40
    752a:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    752e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7530:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7534:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7538:	64aa      	str	r2, [r5, #72]	; 0x48
    753a:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    753e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7540:	64eb      	str	r3, [r5, #76]	; 0x4c
    7542:	6528      	str	r0, [r5, #80]	; 0x50
    7544:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7546:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    754a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    754e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7552:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7556:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    755a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    755e:	662a      	str	r2, [r5, #96]	; 0x60
    7560:	666b      	str	r3, [r5, #100]	; 0x64
    7562:	6569      	str	r1, [r5, #84]	; 0x54
    7564:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    7566:	4b35      	ldr	r3, [pc, #212]	; (763c <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7568:	f8cd a000 	str.w	sl, [sp]
    756c:	4620      	mov	r0, r4
    756e:	66a9      	str	r1, [r5, #104]	; 0x68
    7570:	4a33      	ldr	r2, [pc, #204]	; (7640 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    7572:	4d34      	ldr	r5, [pc, #208]	; (7644 <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    7574:	2140      	movs	r1, #64	; 0x40
    7576:	f006 fbe1 	bl	dd3c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    757a:	f894 e006 	ldrb.w	lr, [r4, #6]
    757e:	68a2      	ldr	r2, [r4, #8]
    7580:	68e3      	ldr	r3, [r4, #12]
    7582:	88a6      	ldrh	r6, [r4, #4]
    7584:	6920      	ldr	r0, [r4, #16]
    7586:	6961      	ldr	r1, [r4, #20]
    7588:	f885 e006 	strb.w	lr, [r5, #6]
    758c:	60aa      	str	r2, [r5, #8]
    758e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7592:	69e2      	ldr	r2, [r4, #28]
    7594:	60eb      	str	r3, [r5, #12]
    7596:	6a23      	ldr	r3, [r4, #32]
    7598:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    759c:	80ae      	strh	r6, [r5, #4]
    759e:	6128      	str	r0, [r5, #16]
    75a0:	7e66      	ldrb	r6, [r4, #25]
    75a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    75a4:	6169      	str	r1, [r5, #20]
    75a6:	f885 e018 	strb.w	lr, [r5, #24]
    75aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    75ac:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    75b0:	61ea      	str	r2, [r5, #28]
    75b2:	622b      	str	r3, [r5, #32]
    75b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    75b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    75b8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    75bc:	766e      	strb	r6, [r5, #25]
    75be:	6268      	str	r0, [r5, #36]	; 0x24
    75c0:	6329      	str	r1, [r5, #48]	; 0x30
    75c2:	636a      	str	r2, [r5, #52]	; 0x34
    75c4:	63ab      	str	r3, [r5, #56]	; 0x38
    75c6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    75ca:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    75ce:	f8cd a000 	str.w	sl, [sp]
    75d2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    75d6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    75da:	6c22      	ldr	r2, [r4, #64]	; 0x40
    75dc:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    75e0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    75e4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    75e8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    75ea:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    75ee:	642a      	str	r2, [r5, #64]	; 0x40
    75f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    75f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    75f4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    75f8:	652e      	str	r6, [r5, #80]	; 0x50
    75fa:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    75fe:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7600:	64a9      	str	r1, [r5, #72]	; 0x48
    7602:	e023      	b.n	764c <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    7604:	00022d1c 	.word	0x00022d1c
    7608:	00022d7c 	.word	0x00022d7c
    760c:	00022d0c 	.word	0x00022d0c
    7610:	20001884 	.word	0x20001884
    7614:	00022c3c 	.word	0x00022c3c
    7618:	00022d5c 	.word	0x00022d5c
    761c:	00022cfc 	.word	0x00022cfc
    7620:	00022c2c 	.word	0x00022c2c
    7624:	00022d4c 	.word	0x00022d4c
    7628:	00022f1c 	.word	0x00022f1c
    762c:	20001474 	.word	0x20001474
    7630:	00022edc 	.word	0x00022edc
    7634:	00022dac 	.word	0x00022dac
    7638:	200011e0 	.word	0x200011e0
    763c:	00022eec 	.word	0x00022eec
    7640:	00022e8c 	.word	0x00022e8c
    7644:	2000124c 	.word	0x2000124c
    7648:	20001740 	.word	0x20001740
    764c:	64ea      	str	r2, [r5, #76]	; 0x4c
    764e:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7652:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7656:	656e      	str	r6, [r5, #84]	; 0x54
    7658:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    765c:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7660:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7664:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7668:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    766c:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7670:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7674:	4620      	mov	r0, r4
    7676:	4db9      	ldr	r5, [pc, #740]	; (795c <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7678:	4bb9      	ldr	r3, [pc, #740]	; (7960 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    767a:	4aba      	ldr	r2, [pc, #744]	; (7964 <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    767c:	2120      	movs	r1, #32
    767e:	f006 fb5d 	bl	dd3c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7682:	f894 e006 	ldrb.w	lr, [r4, #6]
    7686:	68a2      	ldr	r2, [r4, #8]
    7688:	68e3      	ldr	r3, [r4, #12]
    768a:	88a6      	ldrh	r6, [r4, #4]
    768c:	6920      	ldr	r0, [r4, #16]
    768e:	6961      	ldr	r1, [r4, #20]
    7690:	f885 e006 	strb.w	lr, [r5, #6]
    7694:	60aa      	str	r2, [r5, #8]
    7696:	f894 e018 	ldrb.w	lr, [r4, #24]
    769a:	69e2      	ldr	r2, [r4, #28]
    769c:	60eb      	str	r3, [r5, #12]
    769e:	6a23      	ldr	r3, [r4, #32]
    76a0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    76a4:	80ae      	strh	r6, [r5, #4]
    76a6:	6128      	str	r0, [r5, #16]
    76a8:	7e66      	ldrb	r6, [r4, #25]
    76aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    76ac:	6169      	str	r1, [r5, #20]
    76ae:	f885 e018 	strb.w	lr, [r5, #24]
    76b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    76b4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    76b8:	61ea      	str	r2, [r5, #28]
    76ba:	622b      	str	r3, [r5, #32]
    76bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    76be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    76c0:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    76c4:	766e      	strb	r6, [r5, #25]
    76c6:	6268      	str	r0, [r5, #36]	; 0x24
    76c8:	6329      	str	r1, [r5, #48]	; 0x30
    76ca:	636a      	str	r2, [r5, #52]	; 0x34
    76cc:	63ab      	str	r3, [r5, #56]	; 0x38
    76ce:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    76d2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    76d6:	f8cd a000 	str.w	sl, [sp]
    76da:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    76de:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    76e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    76e4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    76e8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    76ec:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    76f0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    76f2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    76f6:	642a      	str	r2, [r5, #64]	; 0x40
    76f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    76fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    76fc:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7700:	652e      	str	r6, [r5, #80]	; 0x50
    7702:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7706:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7708:	64a9      	str	r1, [r5, #72]	; 0x48
    770a:	64ea      	str	r2, [r5, #76]	; 0x4c
    770c:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7710:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7714:	656e      	str	r6, [r5, #84]	; 0x54
    7716:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    771a:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    771e:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7722:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7726:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    772a:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    772e:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7732:	4620      	mov	r0, r4
    7734:	4d8c      	ldr	r5, [pc, #560]	; (7968 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    7736:	4b8d      	ldr	r3, [pc, #564]	; (796c <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7738:	4a8d      	ldr	r2, [pc, #564]	; (7970 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    773a:	2110      	movs	r1, #16
    773c:	f006 fafe 	bl	dd3c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7740:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7744:	68a2      	ldr	r2, [r4, #8]
    7746:	68e3      	ldr	r3, [r4, #12]
    7748:	79a6      	ldrb	r6, [r4, #6]
    774a:	6920      	ldr	r0, [r4, #16]
    774c:	6961      	ldr	r1, [r4, #20]
    774e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7752:	60aa      	str	r2, [r5, #8]
    7754:	f894 e018 	ldrb.w	lr, [r4, #24]
    7758:	69e2      	ldr	r2, [r4, #28]
    775a:	60eb      	str	r3, [r5, #12]
    775c:	6a23      	ldr	r3, [r4, #32]
    775e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7762:	71ae      	strb	r6, [r5, #6]
    7764:	6128      	str	r0, [r5, #16]
    7766:	7e66      	ldrb	r6, [r4, #25]
    7768:	6a60      	ldr	r0, [r4, #36]	; 0x24
    776a:	6169      	str	r1, [r5, #20]
    776c:	f885 e018 	strb.w	lr, [r5, #24]
    7770:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7772:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7776:	61ea      	str	r2, [r5, #28]
    7778:	622b      	str	r3, [r5, #32]
    777a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    777c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    777e:	766e      	strb	r6, [r5, #25]
    7780:	6268      	str	r0, [r5, #36]	; 0x24
    7782:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7786:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    778a:	636a      	str	r2, [r5, #52]	; 0x34
    778c:	63ab      	str	r3, [r5, #56]	; 0x38
    778e:	6329      	str	r1, [r5, #48]	; 0x30
    7790:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7794:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7798:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    779c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    779e:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    77a2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    77a6:	9703      	str	r7, [sp, #12]
    77a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    77aa:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    77ae:	642b      	str	r3, [r5, #64]	; 0x40
    77b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    77b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    77b4:	64a9      	str	r1, [r5, #72]	; 0x48
    77b6:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    77ba:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    77be:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    77c2:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    77c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    77c8:	64ea      	str	r2, [r5, #76]	; 0x4c
    77ca:	652b      	str	r3, [r5, #80]	; 0x50
    77cc:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    77d0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    77d4:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    77d8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    77dc:	6568      	str	r0, [r5, #84]	; 0x54
    77de:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    77e2:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    77e6:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    77ea:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    77ee:	f04f 0e68 	mov.w	lr, #104	; 0x68
    77f2:	4d60      	ldr	r5, [pc, #384]	; (7974 <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    77f4:	f8df c19c 	ldr.w	ip, [pc, #412]	; 7994 <_ZN9ClearCore10SysManagerC1Ev+0x694>
    77f8:	4e5f      	ldr	r6, [pc, #380]	; (7978 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    77fa:	4b60      	ldr	r3, [pc, #384]	; (797c <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    77fc:	4a60      	ldr	r2, [pc, #384]	; (7980 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    77fe:	f8cd e008 	str.w	lr, [sp, #8]
    7802:	4620      	mov	r0, r4
    7804:	2108      	movs	r1, #8
    7806:	9601      	str	r6, [sp, #4]
    7808:	f8cd c000 	str.w	ip, [sp]
    780c:	f006 fdf0 	bl	e3f0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7810:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7814:	68a2      	ldr	r2, [r4, #8]
    7816:	68e3      	ldr	r3, [r4, #12]
    7818:	79a6      	ldrb	r6, [r4, #6]
    781a:	6920      	ldr	r0, [r4, #16]
    781c:	6961      	ldr	r1, [r4, #20]
    781e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7822:	60aa      	str	r2, [r5, #8]
    7824:	f894 e018 	ldrb.w	lr, [r4, #24]
    7828:	69e2      	ldr	r2, [r4, #28]
    782a:	60eb      	str	r3, [r5, #12]
    782c:	6a23      	ldr	r3, [r4, #32]
    782e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7832:	71ae      	strb	r6, [r5, #6]
    7834:	6128      	str	r0, [r5, #16]
    7836:	7e66      	ldrb	r6, [r4, #25]
    7838:	6a60      	ldr	r0, [r4, #36]	; 0x24
    783a:	6169      	str	r1, [r5, #20]
    783c:	f885 e018 	strb.w	lr, [r5, #24]
    7840:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7842:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7846:	61ea      	str	r2, [r5, #28]
    7848:	622b      	str	r3, [r5, #32]
    784a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    784c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    784e:	766e      	strb	r6, [r5, #25]
    7850:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7854:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7858:	6329      	str	r1, [r5, #48]	; 0x30
    785a:	636a      	str	r2, [r5, #52]	; 0x34
    785c:	63ab      	str	r3, [r5, #56]	; 0x38
    785e:	6268      	str	r0, [r5, #36]	; 0x24
    7860:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7864:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7868:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    786c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    786e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7872:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7876:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7878:	6d22      	ldr	r2, [r4, #80]	; 0x50
    787a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    787e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7882:	642b      	str	r3, [r5, #64]	; 0x40
    7884:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7886:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7888:	64a8      	str	r0, [r5, #72]	; 0x48
    788a:	652a      	str	r2, [r5, #80]	; 0x50
    788c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7890:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7894:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7898:	64e9      	str	r1, [r5, #76]	; 0x4c
    789a:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    789e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    78a2:	656b      	str	r3, [r5, #84]	; 0x54
    78a4:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    78a8:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    78ac:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    78b0:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    78b4:	f04f 0c65 	mov.w	ip, #101	; 0x65
    78b8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    78bc:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    78c0:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    78c4:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    78c8:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    78cc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 7998 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    78d0:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    78d4:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    78d8:	9703      	str	r7, [sp, #12]
    78da:	f8cd c008 	str.w	ip, [sp, #8]
    78de:	6e61      	ldr	r1, [r4, #100]	; 0x64
    78e0:	4b28      	ldr	r3, [pc, #160]	; (7984 <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    78e2:	f8cd e004 	str.w	lr, [sp, #4]
    78e6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    78e8:	9300      	str	r3, [sp, #0]
    78ea:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    78ee:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    78f2:	6f66      	ldr	r6, [r4, #116]	; 0x74
    78f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    78f6:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    78fa:	6669      	str	r1, [r5, #100]	; 0x64
    78fc:	66aa      	str	r2, [r5, #104]	; 0x68
    78fe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7900:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7902:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7906:	676e      	str	r6, [r5, #116]	; 0x74
    7908:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    790c:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7910:	66eb      	str	r3, [r5, #108]	; 0x6c
    7912:	67a9      	str	r1, [r5, #120]	; 0x78
    7914:	67ea      	str	r2, [r5, #124]	; 0x7c
    7916:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    791a:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    791e:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7922:	4620      	mov	r0, r4
    7924:	4b18      	ldr	r3, [pc, #96]	; (7988 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7926:	4a19      	ldr	r2, [pc, #100]	; (798c <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7928:	4d19      	ldr	r5, [pc, #100]	; (7990 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    792a:	2104      	movs	r1, #4
    792c:	f006 fd60 	bl	e3f0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7930:	f104 000c 	add.w	r0, r4, #12
    7934:	c807      	ldmia	r0, {r0, r1, r2}
    7936:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    793a:	68a3      	ldr	r3, [r4, #8]
    793c:	79a6      	ldrb	r6, [r4, #6]
    793e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7942:	60ab      	str	r3, [r5, #8]
    7944:	f894 e018 	ldrb.w	lr, [r4, #24]
    7948:	69e3      	ldr	r3, [r4, #28]
    794a:	60e8      	str	r0, [r5, #12]
    794c:	6a20      	ldr	r0, [r4, #32]
    794e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7952:	71ae      	strb	r6, [r5, #6]
    7954:	6129      	str	r1, [r5, #16]
    7956:	7e66      	ldrb	r6, [r4, #25]
    7958:	6a61      	ldr	r1, [r4, #36]	; 0x24
    795a:	e01f      	b.n	799c <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    795c:	200012ac 	.word	0x200012ac
    7960:	00022efc 	.word	0x00022efc
    7964:	00022e9c 	.word	0x00022e9c
    7968:	2000130c 	.word	0x2000130c
    796c:	00022f0c 	.word	0x00022f0c
    7970:	00022eac 	.word	0x00022eac
    7974:	2000136c 	.word	0x2000136c
    7978:	00022e2c 	.word	0x00022e2c
    797c:	00022dcc 	.word	0x00022dcc
    7980:	00022ebc 	.word	0x00022ebc
    7984:	00022dfc 	.word	0x00022dfc
    7988:	00022ddc 	.word	0x00022ddc
    798c:	00022ecc 	.word	0x00022ecc
    7990:	200013f0 	.word	0x200013f0
    7994:	00022dec 	.word	0x00022dec
    7998:	00022e3c 	.word	0x00022e3c
    799c:	616a      	str	r2, [r5, #20]
    799e:	f885 e018 	strb.w	lr, [r5, #24]
    79a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    79a4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    79a8:	61eb      	str	r3, [r5, #28]
    79aa:	6228      	str	r0, [r5, #32]
    79ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    79ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    79b0:	766e      	strb	r6, [r5, #25]
    79b2:	6269      	str	r1, [r5, #36]	; 0x24
    79b4:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    79b8:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    79bc:	632a      	str	r2, [r5, #48]	; 0x30
    79be:	63a8      	str	r0, [r5, #56]	; 0x38
    79c0:	636b      	str	r3, [r5, #52]	; 0x34
    79c2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    79c6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    79ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
    79cc:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    79d0:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    79d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    79d6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    79da:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    79de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    79e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    79e2:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    79e6:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    79ea:	6429      	str	r1, [r5, #64]	; 0x40
    79ec:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    79f0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    79f2:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    79f6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    79fa:	64aa      	str	r2, [r5, #72]	; 0x48
    79fc:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    7a00:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    7a04:	64eb      	str	r3, [r5, #76]	; 0x4c
    7a06:	6528      	str	r0, [r5, #80]	; 0x50
    7a08:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7a0c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7a10:	6569      	str	r1, [r5, #84]	; 0x54
    7a12:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7a16:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7a1a:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7a1e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7a22:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    7a26:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    7a2a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7a2e:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7a32:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7a34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7a36:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7a38:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7a3c:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7a40:	6669      	str	r1, [r5, #100]	; 0x64
    7a42:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7a44:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7a46:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7a4a:	66ab      	str	r3, [r5, #104]	; 0x68
    7a4c:	66e8      	str	r0, [r5, #108]	; 0x6c
    7a4e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    7a50:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7a54:	676e      	str	r6, [r5, #116]	; 0x74
    7a56:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7a5a:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7a5e:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    7a60:	4abe      	ldr	r2, [pc, #760]	; (7d5c <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    7a62:	67eb      	str	r3, [r5, #124]	; 0x7c
    7a64:	4620      	mov	r0, r4
    7a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7a6a:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7a6e:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7a72:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7a76:	f006 fc2f 	bl	e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7a7a:	f104 000c 	add.w	r0, r4, #12
    7a7e:	c807      	ldmia	r0, {r0, r1, r2}
    7a80:	4db7      	ldr	r5, [pc, #732]	; (7d60 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    7a82:	68a3      	ldr	r3, [r4, #8]
    7a84:	f894 c018 	ldrb.w	ip, [r4, #24]
    7a88:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7a8c:	79a6      	ldrb	r6, [r4, #6]
    7a8e:	60ab      	str	r3, [r5, #8]
    7a90:	f885 c018 	strb.w	ip, [r5, #24]
    7a94:	69e3      	ldr	r3, [r4, #28]
    7a96:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7a9a:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7a9e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7aa2:	71ae      	strb	r6, [r5, #6]
    7aa4:	f894 e019 	ldrb.w	lr, [r4, #25]
    7aa8:	6a26      	ldr	r6, [r4, #32]
    7aaa:	60e8      	str	r0, [r5, #12]
    7aac:	6129      	str	r1, [r5, #16]
    7aae:	616a      	str	r2, [r5, #20]
    7ab0:	61eb      	str	r3, [r5, #28]
    7ab2:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    7ab8:	4aaa      	ldr	r2, [pc, #680]	; (7d64 <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    7aba:	f885 e019 	strb.w	lr, [r5, #25]
    7abe:	4620      	mov	r0, r4
    7ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7ac4:	622e      	str	r6, [r5, #32]
    7ac6:	626b      	str	r3, [r5, #36]	; 0x24
    7ac8:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7acc:	f006 fc04 	bl	e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7ad0:	f104 000c 	add.w	r0, r4, #12
    7ad4:	c807      	ldmia	r0, {r0, r1, r2}
    7ad6:	4da4      	ldr	r5, [pc, #656]	; (7d68 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    7ad8:	68a3      	ldr	r3, [r4, #8]
    7ada:	f894 c018 	ldrb.w	ip, [r4, #24]
    7ade:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ae2:	79a6      	ldrb	r6, [r4, #6]
    7ae4:	60ab      	str	r3, [r5, #8]
    7ae6:	f885 c018 	strb.w	ip, [r5, #24]
    7aea:	69e3      	ldr	r3, [r4, #28]
    7aec:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7af0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7af4:	f8a5 e004 	strh.w	lr, [r5, #4]
    7af8:	71ae      	strb	r6, [r5, #6]
    7afa:	f894 e019 	ldrb.w	lr, [r4, #25]
    7afe:	6a26      	ldr	r6, [r4, #32]
    7b00:	60e8      	str	r0, [r5, #12]
    7b02:	6129      	str	r1, [r5, #16]
    7b04:	616a      	str	r2, [r5, #20]
    7b06:	61eb      	str	r3, [r5, #28]
    7b08:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    7b0e:	4a97      	ldr	r2, [pc, #604]	; (7d6c <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    7b10:	f885 e019 	strb.w	lr, [r5, #25]
    7b14:	4620      	mov	r0, r4
    7b16:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7b1a:	622e      	str	r6, [r5, #32]
    7b1c:	626b      	str	r3, [r5, #36]	; 0x24
    7b1e:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7b22:	f006 fbd9 	bl	e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7b26:	4d92      	ldr	r5, [pc, #584]	; (7d70 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    7b28:	88a6      	ldrh	r6, [r4, #4]
    7b2a:	80ae      	strh	r6, [r5, #4]
    7b2c:	f104 000c 	add.w	r0, r4, #12
    7b30:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    7b32:	2605      	movs	r6, #5
    7b34:	f894 e006 	ldrb.w	lr, [r4, #6]
    7b38:	68a3      	ldr	r3, [r4, #8]
    7b3a:	9600      	str	r6, [sp, #0]
    7b3c:	7e26      	ldrb	r6, [r4, #24]
    7b3e:	f894 c019 	ldrb.w	ip, [r4, #25]
    7b42:	f885 e006 	strb.w	lr, [r5, #6]
    7b46:	60ab      	str	r3, [r5, #8]
    7b48:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7b4c:	69e3      	ldr	r3, [r4, #28]
    7b4e:	6129      	str	r1, [r5, #16]
    7b50:	616a      	str	r2, [r5, #20]
    7b52:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b54:	6a22      	ldr	r2, [r4, #32]
    7b56:	762e      	strb	r6, [r5, #24]
    7b58:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    7b5c:	60e8      	str	r0, [r5, #12]
    7b5e:	f885 c019 	strb.w	ip, [r5, #25]
    7b62:	61eb      	str	r3, [r5, #28]
    7b64:	622a      	str	r2, [r5, #32]
    7b66:	6269      	str	r1, [r5, #36]	; 0x24
    7b68:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7b6c:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    7b70:	4620      	mov	r0, r4
    7b72:	4d80      	ldr	r5, [pc, #512]	; (7d74 <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    7b74:	4b80      	ldr	r3, [pc, #512]	; (7d78 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    7b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7b7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7b7e:	f005 fe91 	bl	d8a4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7b82:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7b86:	68a2      	ldr	r2, [r4, #8]
    7b88:	68e3      	ldr	r3, [r4, #12]
    7b8a:	79a6      	ldrb	r6, [r4, #6]
    7b8c:	6920      	ldr	r0, [r4, #16]
    7b8e:	6961      	ldr	r1, [r4, #20]
    7b90:	f8a5 e004 	strh.w	lr, [r5, #4]
    7b94:	60aa      	str	r2, [r5, #8]
    7b96:	f894 e018 	ldrb.w	lr, [r4, #24]
    7b9a:	69e2      	ldr	r2, [r4, #28]
    7b9c:	60eb      	str	r3, [r5, #12]
    7b9e:	6a23      	ldr	r3, [r4, #32]
    7ba0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7ba4:	71ae      	strb	r6, [r5, #6]
    7ba6:	6128      	str	r0, [r5, #16]
    7ba8:	7e66      	ldrb	r6, [r4, #25]
    7baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7bac:	6169      	str	r1, [r5, #20]
    7bae:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    7bb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7bb4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7bb8:	61ea      	str	r2, [r5, #28]
    7bba:	622b      	str	r3, [r5, #32]
    7bbc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7bc2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7bc6:	766e      	strb	r6, [r5, #25]
    7bc8:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    7bca:	2604      	movs	r6, #4
    7bcc:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7bd0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7bd4:	63ab      	str	r3, [r5, #56]	; 0x38
    7bd6:	6329      	str	r1, [r5, #48]	; 0x30
    7bd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    7bda:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7bde:	4b67      	ldr	r3, [pc, #412]	; (7d7c <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    7be0:	9600      	str	r6, [sp, #0]
    7be2:	4620      	mov	r0, r4
    7be4:	63e9      	str	r1, [r5, #60]	; 0x3c
    7be6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7bee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7bf2:	f005 fe57 	bl	d8a4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7bf6:	f104 0008 	add.w	r0, r4, #8
    7bfa:	c80d      	ldmia	r0, {r0, r2, r3}
    7bfc:	4d60      	ldr	r5, [pc, #384]	; (7d80 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    7bfe:	88a1      	ldrh	r1, [r4, #4]
    7c00:	f894 e006 	ldrb.w	lr, [r4, #6]
    7c04:	80a9      	strh	r1, [r5, #4]
    7c06:	f885 e006 	strb.w	lr, [r5, #6]
    7c0a:	6961      	ldr	r1, [r4, #20]
    7c0c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7c10:	60a8      	str	r0, [r5, #8]
    7c12:	60ea      	str	r2, [r5, #12]
    7c14:	7e60      	ldrb	r0, [r4, #25]
    7c16:	69e2      	ldr	r2, [r4, #28]
    7c18:	612b      	str	r3, [r5, #16]
    7c1a:	6a23      	ldr	r3, [r4, #32]
    7c1c:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7c20:	6169      	str	r1, [r5, #20]
    7c22:	f885 e018 	strb.w	lr, [r5, #24]
    7c26:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7c28:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7c2c:	7668      	strb	r0, [r5, #25]
    7c2e:	61ea      	str	r2, [r5, #28]
    7c30:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    7c34:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7c36:	622b      	str	r3, [r5, #32]
    7c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7c3a:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    7c3e:	6269      	str	r1, [r5, #36]	; 0x24
    7c40:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7c44:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    7c48:	63ab      	str	r3, [r5, #56]	; 0x38
    7c4a:	632a      	str	r2, [r5, #48]	; 0x30
    7c4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    7c4e:	f8cd 8000 	str.w	r8, [sp]
    7c52:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7c56:	63ea      	str	r2, [r5, #60]	; 0x3c
    7c58:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7c5c:	4620      	mov	r0, r4
    7c5e:	4d49      	ldr	r5, [pc, #292]	; (7d84 <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    7c60:	4b49      	ldr	r3, [pc, #292]	; (7d88 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    7c62:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7c66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    7c6a:	f005 fe1b 	bl	d8a4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7c6e:	f894 c006 	ldrb.w	ip, [r4, #6]
    7c72:	68a2      	ldr	r2, [r4, #8]
    7c74:	68e3      	ldr	r3, [r4, #12]
    7c76:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7c7a:	6920      	ldr	r0, [r4, #16]
    7c7c:	6961      	ldr	r1, [r4, #20]
    7c7e:	f885 c006 	strb.w	ip, [r5, #6]
    7c82:	60aa      	str	r2, [r5, #8]
    7c84:	f894 c018 	ldrb.w	ip, [r4, #24]
    7c88:	69e2      	ldr	r2, [r4, #28]
    7c8a:	60eb      	str	r3, [r5, #12]
    7c8c:	6a23      	ldr	r3, [r4, #32]
    7c8e:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    7c92:	f8a5 e004 	strh.w	lr, [r5, #4]
    7c96:	6128      	str	r0, [r5, #16]
    7c98:	f894 e019 	ldrb.w	lr, [r4, #25]
    7c9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7c9e:	6169      	str	r1, [r5, #20]
    7ca0:	f885 c018 	strb.w	ip, [r5, #24]
    7ca4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7ca6:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7caa:	61ea      	str	r2, [r5, #28]
    7cac:	622b      	str	r3, [r5, #32]
    7cae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7cb4:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7cb8:	f885 e019 	strb.w	lr, [r5, #25]
    7cbc:	6268      	str	r0, [r5, #36]	; 0x24
    7cbe:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    7cc2:	6329      	str	r1, [r5, #48]	; 0x30
    7cc4:	63ab      	str	r3, [r5, #56]	; 0x38
    7cc6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7cca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    7ccc:	f8cd a000 	str.w	sl, [sp]
    7cd0:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7cd4:	63ea      	str	r2, [r5, #60]	; 0x3c
    7cd6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7cda:	4620      	mov	r0, r4
    7cdc:	4b2b      	ldr	r3, [pc, #172]	; (7d8c <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    7cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7ce2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    7ce6:	f005 fddd 	bl	d8a4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7cea:	f104 0008 	add.w	r0, r4, #8
    7cee:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    7cf0:	f8df e09c 	ldr.w	lr, [pc, #156]	; 7d90 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    7cf4:	f894 c006 	ldrb.w	ip, [r4, #6]
    7cf8:	88a5      	ldrh	r5, [r4, #4]
    7cfa:	f88e c006 	strb.w	ip, [lr, #6]
    7cfe:	f894 c019 	ldrb.w	ip, [r4, #25]
    7d02:	f894 8018 	ldrb.w	r8, [r4, #24]
    7d06:	f8ae 5004 	strh.w	r5, [lr, #4]
    7d0a:	f8ce 0008 	str.w	r0, [lr, #8]
    7d0e:	69e5      	ldr	r5, [r4, #28]
    7d10:	6a20      	ldr	r0, [r4, #32]
    7d12:	f8ce 100c 	str.w	r1, [lr, #12]
    7d16:	f8ce 2010 	str.w	r2, [lr, #16]
    7d1a:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    7d1e:	f8ce 3014 	str.w	r3, [lr, #20]
    7d22:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    7d26:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7d28:	f88e c019 	strb.w	ip, [lr, #25]
    7d2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7d2e:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7d32:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7d34:	f88e 8018 	strb.w	r8, [lr, #24]
    7d38:	f8ce 501c 	str.w	r5, [lr, #28]
    7d3c:	f8ce 0020 	str.w	r0, [lr, #32]
    7d40:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    7d44:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    7d48:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    7d4c:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    7d50:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    7d54:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    7d58:	e01c      	b.n	7d94 <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    7d5a:	bf00      	nop
    7d5c:	00022c8c 	.word	0x00022c8c
    7d60:	20001150 	.word	0x20001150
    7d64:	00022c9c 	.word	0x00022c9c
    7d68:	20001180 	.word	0x20001180
    7d6c:	00022cac 	.word	0x00022cac
    7d70:	200011b0 	.word	0x200011b0
    7d74:	20000b18 	.word	0x20000b18
    7d78:	00022cbc 	.word	0x00022cbc
    7d7c:	00022ccc 	.word	0x00022ccc
    7d80:	20001084 	.word	0x20001084
    7d84:	200010c8 	.word	0x200010c8
    7d88:	00022cdc 	.word	0x00022cdc
    7d8c:	00022cec 	.word	0x00022cec
    7d90:	2000110c 	.word	0x2000110c
    7d94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    7d96:	9702      	str	r7, [sp, #8]
    7d98:	9601      	str	r6, [sp, #4]
    7d9a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    7d9e:	4dcc      	ldr	r5, [pc, #816]	; (80d0 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    7da0:	9500      	str	r5, [sp, #0]
    7da2:	4620      	mov	r0, r4
    7da4:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    7da8:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    7dac:	4bc9      	ldr	r3, [pc, #804]	; (80d4 <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    7dae:	4aca      	ldr	r2, [pc, #808]	; (80d8 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    7db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    7db4:	f7fc fdb2 	bl	491c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    7db8:	4bc8      	ldr	r3, [pc, #800]	; (80dc <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    7dba:	79a7      	ldrb	r7, [r4, #6]
    7dbc:	68a6      	ldr	r6, [r4, #8]
    7dbe:	68e5      	ldr	r5, [r4, #12]
    7dc0:	6920      	ldr	r0, [r4, #16]
    7dc2:	6961      	ldr	r1, [r4, #20]
    7dc4:	f894 8018 	ldrb.w	r8, [r4, #24]
    7dc8:	69e2      	ldr	r2, [r4, #28]
    7dca:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7dce:	f894 c019 	ldrb.w	ip, [r4, #25]
    7dd2:	719f      	strb	r7, [r3, #6]
    7dd4:	609e      	str	r6, [r3, #8]
    7dd6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    7dd8:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    7ddc:	60dd      	str	r5, [r3, #12]
    7dde:	6118      	str	r0, [r3, #16]
    7de0:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    7de4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7de6:	6159      	str	r1, [r3, #20]
    7de8:	f883 8018 	strb.w	r8, [r3, #24]
    7dec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7dee:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    7df2:	61da      	str	r2, [r3, #28]
    7df4:	6a22      	ldr	r2, [r4, #32]
    7df6:	f8a3 e004 	strh.w	lr, [r3, #4]
    7dfa:	f883 c019 	strb.w	ip, [r3, #25]
    7dfe:	621a      	str	r2, [r3, #32]
    7e00:	625f      	str	r7, [r3, #36]	; 0x24
    7e02:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    7e06:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    7e0a:	6358      	str	r0, [r3, #52]	; 0x34
    7e0c:	6399      	str	r1, [r3, #56]	; 0x38
    7e0e:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    7e12:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    7e16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7e18:	649a      	str	r2, [r3, #72]	; 0x48
    7e1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    7e1c:	9207      	str	r2, [sp, #28]
    7e1e:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    7e22:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7e24:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    7e28:	6c61      	ldr	r1, [r4, #68]	; 0x44
    7e2a:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    7e2e:	64da      	str	r2, [r3, #76]	; 0x4c
    7e30:	9a07      	ldr	r2, [sp, #28]
    7e32:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    7e36:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    7e3a:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    7e3e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    7e42:	6459      	str	r1, [r3, #68]	; 0x44
    7e44:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7e46:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7e48:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    7e4c:	65da      	str	r2, [r3, #92]	; 0x5c
    7e4e:	6f27      	ldr	r7, [r4, #112]	; 0x70
    7e50:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7e52:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    7e56:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    7e5a:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    7e5e:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    7e62:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7e64:	6558      	str	r0, [r3, #84]	; 0x54
    7e66:	6599      	str	r1, [r3, #88]	; 0x58
    7e68:	661a      	str	r2, [r3, #96]	; 0x60
    7e6a:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    7e6e:	671f      	str	r7, [r3, #112]	; 0x70
    7e70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    7e74:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    7e78:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    7e7c:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    7e80:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7e84:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    7e88:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    7e8c:	675e      	str	r6, [r3, #116]	; 0x74
    7e8e:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    7e92:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    7e96:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    7e9a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    7e9e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    7ea2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    7ea6:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    7eaa:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    7eae:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    7eb2:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    7eb6:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    7eba:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    7ebe:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    7ec2:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    7ec6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    7eca:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    7ece:	4619      	mov	r1, r3
    7ed0:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    7ed4:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    7ed8:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    7edc:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    7ede:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    7ee2:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    7ee6:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    7eea:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    7eee:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    7ef2:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    7ef4:	983a      	ldr	r0, [sp, #232]	; 0xe8
    7ef6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    7ef8:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    7efc:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    7f00:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    7f04:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    7f08:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    7f0c:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    7f10:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    7f14:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    7f18:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    7f1c:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    7f20:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    7f24:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    7f28:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    7f2c:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    7f30:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    7f34:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    7f38:	9b42      	ldr	r3, [sp, #264]	; 0x108
    7f3a:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    7f3e:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    7f42:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    7f46:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    7f4a:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    7f4e:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    7f52:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    7f56:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    7f5a:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    7f5e:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    7f62:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    7f66:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    7f6a:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    7f6c:	9d44      	ldr	r5, [sp, #272]	; 0x110
    7f6e:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    7f72:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    7f76:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    7f7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7f7c:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    7f80:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    7f84:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    7f88:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    7f8c:	9e49      	ldr	r6, [sp, #292]	; 0x124
    7f8e:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    7f90:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    7f94:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    7f98:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    7f9a:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    7f9e:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    7fa2:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    7fa6:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    7faa:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    7fae:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    7fb2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    7fb4:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    7fb8:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    7fbc:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    7fc0:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    7fc4:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    7fc8:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    7fcc:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    7fd0:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    7fd4:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    7fd8:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    7fdc:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    7fde:	9b50      	ldr	r3, [sp, #320]	; 0x140
    7fe0:	9d51      	ldr	r5, [sp, #324]	; 0x144
    7fe2:	9852      	ldr	r0, [sp, #328]	; 0x148
    7fe4:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    7fe8:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    7fec:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    7ff0:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    7ff4:	9b54      	ldr	r3, [sp, #336]	; 0x150
    7ff6:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    7ffa:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    7ffe:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    8002:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    8006:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    800a:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    800e:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    8012:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    8016:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    801a:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    801e:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8022:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    8026:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    802a:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    802e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    8032:	4a2b      	ldr	r2, [pc, #172]	; (80e0 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    8034:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    8038:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    803c:	2401      	movs	r4, #1
    803e:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    8042:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    8046:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    804a:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    804e:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    8052:	2605      	movs	r6, #5
    8054:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8058:	9d58      	ldr	r5, [sp, #352]	; 0x160
    805a:	4f22      	ldr	r7, [pc, #136]	; (80e4 <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    805c:	9402      	str	r4, [sp, #8]
    805e:	e88d 0044 	stmia.w	sp, {r2, r6}
    8062:	a808      	add	r0, sp, #32
    8064:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8068:	4b1f      	ldr	r3, [pc, #124]	; (80e8 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    806a:	4a20      	ldr	r2, [pc, #128]	; (80ec <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    806c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8070:	f7fc fc54 	bl	491c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8074:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8078:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    807c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    807e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8082:	980d      	ldr	r0, [sp, #52]	; 0x34
    8084:	71b9      	strb	r1, [r7, #6]
    8086:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8088:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    808c:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8090:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    8094:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8098:	80ba      	strh	r2, [r7, #4]
    809a:	60bb      	str	r3, [r7, #8]
    809c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    809e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    80a0:	60fe      	str	r6, [r7, #12]
    80a2:	613d      	str	r5, [r7, #16]
    80a4:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    80a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    80aa:	6178      	str	r0, [r7, #20]
    80ac:	61f9      	str	r1, [r7, #28]
    80ae:	9816      	ldr	r0, [sp, #88]	; 0x58
    80b0:	f887 8018 	strb.w	r8, [r7, #24]
    80b4:	a919      	add	r1, sp, #100	; 0x64
    80b6:	623a      	str	r2, [r7, #32]
    80b8:	627b      	str	r3, [r7, #36]	; 0x24
    80ba:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    80be:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    80c2:	637d      	str	r5, [r7, #52]	; 0x34
    80c4:	63b8      	str	r0, [r7, #56]	; 0x38
    80c6:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    80ca:	f887 c019 	strb.w	ip, [r7, #25]
    80ce:	e00f      	b.n	80f0 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    80d0:	00022dbc 	.word	0x00022dbc
    80d4:	00022f2c 	.word	0x00022f2c
    80d8:	00022d6c 	.word	0x00022d6c
    80dc:	20000b60 	.word	0x20000b60
    80e0:	00022f5c 	.word	0x00022f5c
    80e4:	20000ca8 	.word	0x20000ca8
    80e8:	00022f3c 	.word	0x00022f3c
    80ec:	00022f4c 	.word	0x00022f4c
    80f0:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    80f4:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    80f8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    80fc:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    8100:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    8104:	c90e      	ldmia	r1, {r1, r2, r3}
    8106:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    810a:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    810e:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    8112:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    8116:	6479      	str	r1, [r7, #68]	; 0x44
    8118:	981d      	ldr	r0, [sp, #116]	; 0x74
    811a:	991e      	ldr	r1, [sp, #120]	; 0x78
    811c:	64ba      	str	r2, [r7, #72]	; 0x48
    811e:	64fb      	str	r3, [r7, #76]	; 0x4c
    8120:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8122:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8124:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    8128:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    812c:	9d24      	ldr	r5, [sp, #144]	; 0x90
    812e:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8130:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8134:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    8138:	6578      	str	r0, [r7, #84]	; 0x54
    813a:	65b9      	str	r1, [r7, #88]	; 0x58
    813c:	65fa      	str	r2, [r7, #92]	; 0x5c
    813e:	663b      	str	r3, [r7, #96]	; 0x60
    8140:	673d      	str	r5, [r7, #112]	; 0x70
    8142:	677e      	str	r6, [r7, #116]	; 0x74
    8144:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8148:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    814c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8150:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8152:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8154:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8158:	4615      	mov	r5, r2
    815a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    815c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    815e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8162:	461e      	mov	r6, r3
    8164:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8166:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    816c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8170:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8172:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8174:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8178:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    817c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    817e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8184:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8188:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    818a:	9836      	ldr	r0, [sp, #216]	; 0xd8
    818c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8190:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8194:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8196:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    819c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    81a0:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    81a4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    81a8:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    81ac:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    81b0:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    81b2:	983a      	ldr	r0, [sp, #232]	; 0xe8
    81b4:	993b      	ldr	r1, [sp, #236]	; 0xec
    81b6:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    81ba:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    81be:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    81c2:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    81c6:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    81ca:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    81ce:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    81d2:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    81d6:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    81da:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    81de:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    81e2:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    81e6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    81ea:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    81ee:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    81f2:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    81f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    81fa:	9b42      	ldr	r3, [sp, #264]	; 0x108
    81fc:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    8200:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    8204:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    8208:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    820c:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    8210:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    8214:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    8218:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    821c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8224:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8228:	9943      	ldr	r1, [sp, #268]	; 0x10c
    822a:	9d44      	ldr	r5, [sp, #272]	; 0x110
    822c:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    8230:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    8234:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    8238:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    823c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    823e:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    8242:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    8246:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    824a:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    824e:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8250:	9d49      	ldr	r5, [sp, #292]	; 0x124
    8252:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    8256:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    825a:	984a      	ldr	r0, [sp, #296]	; 0x128
    825c:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8260:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    8264:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8268:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    826c:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8270:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    8274:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8276:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    827a:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    827e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    8282:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    8286:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    828a:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    828e:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8292:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8296:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    829a:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    829c:	9b50      	ldr	r3, [sp, #320]	; 0x140
    829e:	9851      	ldr	r0, [sp, #324]	; 0x144
    82a0:	9952      	ldr	r1, [sp, #328]	; 0x148
    82a2:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    82a6:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    82aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    82ae:	9b54      	ldr	r3, [sp, #336]	; 0x150
    82b0:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    82b4:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    82b8:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    82bc:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    82c0:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    82c4:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    82c8:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    82cc:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    82d0:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    82d4:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    82d8:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    82dc:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    82e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    82e4:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    82e8:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    82ec:	4aca      	ldr	r2, [pc, #808]	; (8618 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    82ee:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    82f2:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    82f6:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    82fa:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    82fe:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    8302:	2503      	movs	r5, #3
    8304:	2602      	movs	r6, #2
    8306:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    830a:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    830e:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8312:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8316:	9958      	ldr	r1, [sp, #352]	; 0x160
    8318:	4bc0      	ldr	r3, [pc, #768]	; (861c <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    831a:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    831e:	a808      	add	r0, sp, #32
    8320:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8324:	4abe      	ldr	r2, [pc, #760]	; (8620 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    8326:	4fbf      	ldr	r7, [pc, #764]	; (8624 <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    8328:	f44f 7100 	mov.w	r1, #512	; 0x200
    832c:	f7fc faf6 	bl	491c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8330:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    8334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8338:	990d      	ldr	r1, [sp, #52]	; 0x34
    833a:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    833e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8340:	f8a7 c004 	strh.w	ip, [r7, #4]
    8344:	60ba      	str	r2, [r7, #8]
    8346:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    834a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    834c:	60fb      	str	r3, [r7, #12]
    834e:	6179      	str	r1, [r7, #20]
    8350:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8352:	9915      	ldr	r1, [sp, #84]	; 0x54
    8354:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8358:	f887 e006 	strb.w	lr, [r7, #6]
    835c:	6138      	str	r0, [r7, #16]
    835e:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    8362:	9811      	ldr	r0, [sp, #68]	; 0x44
    8364:	f887 c018 	strb.w	ip, [r7, #24]
    8368:	61fa      	str	r2, [r7, #28]
    836a:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    836e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8370:	623b      	str	r3, [r7, #32]
    8372:	6379      	str	r1, [r7, #52]	; 0x34
    8374:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8378:	f887 e019 	strb.w	lr, [r7, #25]
    837c:	a919      	add	r1, sp, #100	; 0x64
    837e:	6278      	str	r0, [r7, #36]	; 0x24
    8380:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    8384:	63ba      	str	r2, [r7, #56]	; 0x38
    8386:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    838a:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    838e:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8392:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8396:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    839a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    839e:	c90e      	ldmia	r1, {r1, r2, r3}
    83a0:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    83a4:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    83a8:	6479      	str	r1, [r7, #68]	; 0x44
    83aa:	64ba      	str	r2, [r7, #72]	; 0x48
    83ac:	991d      	ldr	r1, [sp, #116]	; 0x74
    83ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    83b0:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    83b4:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    83b8:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    83bc:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    83c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    83c2:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    83c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    83c8:	9820      	ldr	r0, [sp, #128]	; 0x80
    83ca:	6579      	str	r1, [r7, #84]	; 0x54
    83cc:	65ba      	str	r2, [r7, #88]	; 0x58
    83ce:	9924      	ldr	r1, [sp, #144]	; 0x90
    83d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    83d2:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    83d6:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    83da:	65fb      	str	r3, [r7, #92]	; 0x5c
    83dc:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    83e0:	677a      	str	r2, [r7, #116]	; 0x74
    83e2:	6638      	str	r0, [r7, #96]	; 0x60
    83e4:	6739      	str	r1, [r7, #112]	; 0x70
    83e6:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    83ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    83ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    83ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    83f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    83f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    83f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    83fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    83fe:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    8402:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    8404:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    840a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    840e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8410:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    8412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8416:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    841a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    841c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    8420:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    8426:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    842a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    842c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    842e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8432:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    8436:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    8438:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    843c:	a939      	add	r1, sp, #228	; 0xe4
    843e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    8444:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8448:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    844c:	c90e      	ldmia	r1, {r1, r2, r3}
    844e:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    8452:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    8456:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    845a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    845e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    8462:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    8466:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    846a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    846e:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    8472:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    8476:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    847a:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    847e:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    8482:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8486:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    848a:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    848e:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8492:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8496:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    849a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    849e:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    84a2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    84a4:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    84a8:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    84ac:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    84b0:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    84b4:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    84b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    84bc:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    84c0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    84c2:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    84c6:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    84ca:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    84ce:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    84d2:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    84d6:	9947      	ldr	r1, [sp, #284]	; 0x11c
    84d8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    84dc:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    84e0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    84e2:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    84e6:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    84ea:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    84ee:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    84f2:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    84f6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    84fa:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    84fe:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8500:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8502:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    8506:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    850a:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    850e:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    8512:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8516:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    8518:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    851c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8520:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8524:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8528:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    852c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8530:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    8534:	994f      	ldr	r1, [sp, #316]	; 0x13c
    8536:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8538:	9a50      	ldr	r2, [sp, #320]	; 0x140
    853a:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    853e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    8542:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    8546:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    854a:	9852      	ldr	r0, [sp, #328]	; 0x148
    854c:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8550:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    8554:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8558:	9a54      	ldr	r2, [sp, #336]	; 0x150
    855a:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    855e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    8562:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    8566:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    856a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    856e:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    8572:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    8576:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    857a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    857e:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    8582:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    8586:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    858a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    858e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    8592:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    8596:	f04f 0800 	mov.w	r8, #0
    859a:	f8df e098 	ldr.w	lr, [pc, #152]	; 8634 <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    859e:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    85a2:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    85a6:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    85aa:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    85ae:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    85b2:	9958      	ldr	r1, [sp, #352]	; 0x160
    85b4:	4b1c      	ldr	r3, [pc, #112]	; (8628 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    85b6:	9502      	str	r5, [sp, #8]
    85b8:	f8cd 8004 	str.w	r8, [sp, #4]
    85bc:	f8cd e000 	str.w	lr, [sp]
    85c0:	a808      	add	r0, sp, #32
    85c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    85c6:	4a19      	ldr	r2, [pc, #100]	; (862c <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    85c8:	4f19      	ldr	r7, [pc, #100]	; (8630 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    85ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    85ce:	f7fc f9a5 	bl	491c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    85d2:	a80a      	add	r0, sp, #40	; 0x28
    85d4:	c807      	ldmia	r0, {r0, r1, r2}
    85d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    85da:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    85de:	80bb      	strh	r3, [r7, #4]
    85e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    85e2:	f887 e006 	strb.w	lr, [r7, #6]
    85e6:	60b8      	str	r0, [r7, #8]
    85e8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    85ec:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    85f0:	60f9      	str	r1, [r7, #12]
    85f2:	613a      	str	r2, [r7, #16]
    85f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    85f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    85f8:	617b      	str	r3, [r7, #20]
    85fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    85fc:	f887 e018 	strb.w	lr, [r7, #24]
    8600:	7678      	strb	r0, [r7, #25]
    8602:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8606:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    860a:	61f9      	str	r1, [r7, #28]
    860c:	623a      	str	r2, [r7, #32]
    860e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8610:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8612:	627b      	str	r3, [r7, #36]	; 0x24
    8614:	e010      	b.n	8638 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    8616:	bf00      	nop
    8618:	00022e6c 	.word	0x00022e6c
    861c:	00022e0c 	.word	0x00022e0c
    8620:	00022e4c 	.word	0x00022e4c
    8624:	20000df0 	.word	0x20000df0
    8628:	00022e1c 	.word	0x00022e1c
    862c:	00022e5c 	.word	0x00022e5c
    8630:	20000f38 	.word	0x20000f38
    8634:	00022e7c 	.word	0x00022e7c
    8638:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    863c:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8640:	6379      	str	r1, [r7, #52]	; 0x34
    8642:	63ba      	str	r2, [r7, #56]	; 0x38
    8644:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8648:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    864c:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8650:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    8654:	9919      	ldr	r1, [sp, #100]	; 0x64
    8656:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8658:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    865c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8660:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8662:	6479      	str	r1, [r7, #68]	; 0x44
    8664:	64ba      	str	r2, [r7, #72]	; 0x48
    8666:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    866a:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    866e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    8672:	64fb      	str	r3, [r7, #76]	; 0x4c
    8674:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    867a:	991e      	ldr	r1, [sp, #120]	; 0x78
    867c:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8680:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8682:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    8686:	657b      	str	r3, [r7, #84]	; 0x54
    8688:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    868c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    868e:	65b9      	str	r1, [r7, #88]	; 0x58
    8690:	65fa      	str	r2, [r7, #92]	; 0x5c
    8692:	9924      	ldr	r1, [sp, #144]	; 0x90
    8694:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8696:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    869a:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    869e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    86a2:	6739      	str	r1, [r7, #112]	; 0x70
    86a4:	663b      	str	r3, [r7, #96]	; 0x60
    86a6:	677a      	str	r2, [r7, #116]	; 0x74
    86a8:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    86ac:	9928      	ldr	r1, [sp, #160]	; 0xa0
    86ae:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    86b2:	992c      	ldr	r1, [sp, #176]	; 0xb0
    86b4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    86b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    86ba:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    86be:	992e      	ldr	r1, [sp, #184]	; 0xb8
    86c0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    86c4:	992f      	ldr	r1, [sp, #188]	; 0xbc
    86c6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    86ca:	9930      	ldr	r1, [sp, #192]	; 0xc0
    86cc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    86d0:	9931      	ldr	r1, [sp, #196]	; 0xc4
    86d2:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    86d6:	9932      	ldr	r1, [sp, #200]	; 0xc8
    86d8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    86dc:	9933      	ldr	r1, [sp, #204]	; 0xcc
    86de:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    86e2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    86e4:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    86e8:	9935      	ldr	r1, [sp, #212]	; 0xd4
    86ea:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    86ee:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    86f2:	9936      	ldr	r1, [sp, #216]	; 0xd8
    86f4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    86f8:	9937      	ldr	r1, [sp, #220]	; 0xdc
    86fa:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    86fe:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8700:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    8704:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8708:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    870c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    870e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    8712:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8714:	993b      	ldr	r1, [sp, #236]	; 0xec
    8716:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    871a:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    871e:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    8722:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8726:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    872a:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    872e:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    8732:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    8736:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    873a:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    873e:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8742:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8746:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    874a:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    874e:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8752:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8756:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    875a:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    875e:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8762:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8766:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    876a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    876c:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8770:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8774:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8778:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    877c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8784:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8786:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    878a:	9844      	ldr	r0, [sp, #272]	; 0x110
    878c:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8790:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8794:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8798:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    879c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    87a0:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    87a4:	9847      	ldr	r0, [sp, #284]	; 0x11c
    87a6:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    87aa:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    87ae:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    87b2:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    87b6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    87b8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    87bc:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    87be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    87c2:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    87c6:	984b      	ldr	r0, [sp, #300]	; 0x12c
    87c8:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    87cc:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    87d0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    87d4:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    87d8:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    87dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    87e0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    87e2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    87e6:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    87ea:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    87ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    87f2:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    87f6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    87f8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    87fc:	9850      	ldr	r0, [sp, #320]	; 0x140
    87fe:	9951      	ldr	r1, [sp, #324]	; 0x144
    8800:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8802:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8806:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    880a:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    880e:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8812:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8816:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8818:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    881c:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    8820:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    8824:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8828:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    882c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8830:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    8834:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8838:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    883c:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8840:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8844:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8848:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    884c:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8850:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8854:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8858:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    885c:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8860:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8864:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8868:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    886c:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    886e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8a78 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8872:	9207      	str	r2, [sp, #28]
    8874:	f8df e204 	ldr.w	lr, [pc, #516]	; 8a7c <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8878:	9505      	str	r5, [sp, #20]
    887a:	4b78      	ldr	r3, [pc, #480]	; (8a5c <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    887c:	9d07      	ldr	r5, [sp, #28]
    887e:	4878      	ldr	r0, [pc, #480]	; (8a60 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8880:	f8cd e010 	str.w	lr, [sp, #16]
    8884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8888:	e88d 1004 	stmia.w	sp, {r2, ip}
    888c:	9303      	str	r3, [sp, #12]
    888e:	9002      	str	r0, [sp, #8]
    8890:	4641      	mov	r1, r8
    8892:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8896:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8a80 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    889a:	4d72      	ldr	r5, [pc, #456]	; (8a64 <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    889c:	a808      	add	r0, sp, #32
    889e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    88a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    88a6:	f008 fba7 	bl	10ff8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    88aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    88ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    88ae:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    88b2:	980c      	ldr	r0, [sp, #48]	; 0x30
    88b4:	f8c8 1008 	str.w	r1, [r8, #8]
    88b8:	f8c8 2004 	str.w	r2, [r8, #4]
    88bc:	990d      	ldr	r1, [sp, #52]	; 0x34
    88be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    88c0:	f888 300c 	strb.w	r3, [r8, #12]
    88c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88c6:	f8c8 0010 	str.w	r0, [r8, #16]
    88ca:	f8c8 1014 	str.w	r1, [r8, #20]
    88ce:	9810      	ldr	r0, [sp, #64]	; 0x40
    88d0:	9911      	ldr	r1, [sp, #68]	; 0x44
    88d2:	f8c8 2018 	str.w	r2, [r8, #24]
    88d6:	f8c8 301c 	str.w	r3, [r8, #28]
    88da:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    88de:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    88e2:	f8c8 0020 	str.w	r0, [r8, #32]
    88e6:	2780      	movs	r7, #128	; 0x80
    88e8:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    88ec:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    88f0:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    88f4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    88f8:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    88fc:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8900:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8904:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8908:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    890c:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8910:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8914:	a914      	add	r1, sp, #80	; 0x50
    8916:	463a      	mov	r2, r7
    8918:	f108 0030 	add.w	r0, r8, #48	; 0x30
    891c:	f015 fbc0 	bl	1e0a0 <memcpy>
    8920:	463a      	mov	r2, r7
    8922:	a934      	add	r1, sp, #208	; 0xd0
    8924:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8928:	f015 fbba 	bl	1e0a0 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    892c:	4b4e      	ldr	r3, [pc, #312]	; (8a68 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    892e:	9303      	str	r3, [sp, #12]
    8930:	484e      	ldr	r0, [pc, #312]	; (8a6c <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8932:	4a4f      	ldr	r2, [pc, #316]	; (8a70 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8934:	9002      	str	r0, [sp, #8]
    8936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    893a:	9201      	str	r2, [sp, #4]
    893c:	9300      	str	r3, [sp, #0]
    893e:	9854      	ldr	r0, [sp, #336]	; 0x150
    8940:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8942:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8944:	9605      	str	r6, [sp, #20]
    8946:	4621      	mov	r1, r4
    8948:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    894a:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    894e:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8952:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8956:	9858      	ldr	r0, [sp, #352]	; 0x160
    8958:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    895c:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    8960:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    8964:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    8968:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    896a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    896c:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    896e:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    8972:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    8976:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    897a:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    897e:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    8982:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    8986:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    898a:	a808      	add	r0, sp, #32
    898c:	4e39      	ldr	r6, [pc, #228]	; (8a74 <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    898e:	9604      	str	r6, [sp, #16]
    8990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8994:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8998:	f008 fb2e 	bl	10ff8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    899c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    899e:	9809      	ldr	r0, [sp, #36]	; 0x24
    89a0:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    89a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    89a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    89a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89aa:	60ac      	str	r4, [r5, #8]
    89ac:	6068      	str	r0, [r5, #4]
    89ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    89b0:	980d      	ldr	r0, [sp, #52]	; 0x34
    89b2:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    89b6:	f885 e00c 	strb.w	lr, [r5, #12]
    89ba:	612a      	str	r2, [r5, #16]
    89bc:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    89c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    89c4:	6168      	str	r0, [r5, #20]
    89c6:	61ae      	str	r6, [r5, #24]
    89c8:	9810      	ldr	r0, [sp, #64]	; 0x40
    89ca:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    89ce:	61ec      	str	r4, [r5, #28]
    89d0:	626b      	str	r3, [r5, #36]	; 0x24
    89d2:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    89d6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    89da:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    89de:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    89e2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    89e6:	a914      	add	r1, sp, #80	; 0x50
    89e8:	6228      	str	r0, [r5, #32]
    89ea:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    89ee:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    89f2:	463a      	mov	r2, r7
    89f4:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    89f8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    89fc:	f015 fb50 	bl	1e0a0 <memcpy>
    8a00:	463a      	mov	r2, r7
    8a02:	a934      	add	r1, sp, #208	; 0xd0
    8a04:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8a08:	f015 fb4a 	bl	1e0a0 <memcpy>
    8a0c:	a855      	add	r0, sp, #340	; 0x154
    8a0e:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    8a12:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8a14:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    8a18:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8a1a:	9e58      	ldr	r6, [sp, #352]	; 0x160
    8a1c:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    8a20:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    8a24:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    8a28:	995b      	ldr	r1, [sp, #364]	; 0x16c
    8a2a:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    8a2e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    8a30:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    8a34:	4648      	mov	r0, r9
    8a36:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8a3a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    8a3e:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    8a42:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    8a46:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    8a4a:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    8a4e:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    8a52:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    8a56:	b05f      	add	sp, #380	; 0x17c
    8a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a5c:	00022c5c 	.word	0x00022c5c
    8a60:	00022c4c 	.word	0x00022c4c
    8a64:	200015e8 	.word	0x200015e8
    8a68:	00022c7c 	.word	0x00022c7c
    8a6c:	00022c6c 	.word	0x00022c6c
    8a70:	00022d9c 	.word	0x00022d9c
    8a74:	00022d3c 	.word	0x00022d3c
    8a78:	00022d8c 	.word	0x00022d8c
    8a7c:	00022d2c 	.word	0x00022d2c
    8a80:	20001490 	.word	0x20001490

00008a84 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    8a84:	2914      	cmp	r1, #20
    8a86:	dc03      	bgt.n	8a90 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    8a88:	4a03      	ldr	r2, [pc, #12]	; (8a98 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    8a8a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    8a8e:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    8a90:	4b02      	ldr	r3, [pc, #8]	; (8a9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    8a92:	6818      	ldr	r0, [r3, #0]
    8a94:	f006 bea0 	b.w	f7d8 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    8a98:	00022bd8 	.word	0x00022bd8
    8a9c:	20001efc 	.word	0x20001efc

00008aa0 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    8aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8aa2:	4ab1      	ldr	r2, [pc, #708]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8aa4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8aa8:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    8aac:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8aae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8ab2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8ab6:	065e      	lsls	r6, r3, #25
    8ab8:	d4fb      	bmi.n	8ab2 <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    8aba:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8abe:	49aa      	ldr	r1, [pc, #680]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8ac0:	2001      	movs	r0, #1
    8ac2:	f360 0303 	bfi	r3, r0, #0, #4
    8ac6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8aca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8ad2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8ad6:	684b      	ldr	r3, [r1, #4]
    8ad8:	f013 0304 	ands.w	r3, r3, #4
    8adc:	d1fb      	bne.n	8ad6 <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8ade:	48a3      	ldr	r0, [pc, #652]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    8ae0:	4aa3      	ldr	r2, [pc, #652]	; (8d70 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8ae2:	6981      	ldr	r1, [r0, #24]
    8ae4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    8ae8:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    8aea:	6811      	ldr	r1, [r2, #0]
    8aec:	f363 0141 	bfi	r1, r3, #1, #1
    8af0:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    8af2:	6893      	ldr	r3, [r2, #8]
    8af4:	f013 0302 	ands.w	r3, r3, #2
    8af8:	d1fb      	bne.n	8af2 <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    8afa:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8afc:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8afe:	499a      	ldr	r1, [pc, #616]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8b00:	f040 0002 	orr.w	r0, r0, #2
    8b04:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8b06:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8b08:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8b0c:	f040 0002 	orr.w	r0, r0, #2
    8b10:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    8b12:	6453      	str	r3, [r2, #68]	; 0x44
    8b14:	6493      	str	r3, [r2, #72]	; 0x48
    8b16:	64d3      	str	r3, [r2, #76]	; 0x4c
    8b18:	6513      	str	r3, [r2, #80]	; 0x50
    8b1a:	6553      	str	r3, [r2, #84]	; 0x54
    8b1c:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    8b1e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8b20:	f040 0001 	orr.w	r0, r0, #1
    8b24:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8b26:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    8b2a:	f363 1286 	bfi	r2, r3, #6, #1
    8b2e:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    8b32:	460a      	mov	r2, r1
    8b34:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8b38:	065d      	lsls	r5, r3, #25
    8b3a:	d4fb      	bmi.n	8b34 <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    8b3c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8b40:	4989      	ldr	r1, [pc, #548]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8b42:	2001      	movs	r0, #1
    8b44:	f360 0303 	bfi	r3, r0, #0, #4
    8b48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8b4c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b54:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8b58:	684b      	ldr	r3, [r1, #4]
    8b5a:	f013 0304 	ands.w	r3, r3, #4
    8b5e:	d1fb      	bne.n	8b58 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8b60:	4882      	ldr	r0, [pc, #520]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    8b62:	4a84      	ldr	r2, [pc, #528]	; (8d74 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8b64:	6981      	ldr	r1, [r0, #24]
    8b66:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8b6a:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    8b6c:	6811      	ldr	r1, [r2, #0]
    8b6e:	f363 0141 	bfi	r1, r3, #1, #1
    8b72:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    8b74:	6893      	ldr	r3, [r2, #8]
    8b76:	f013 0302 	ands.w	r3, r3, #2
    8b7a:	d1fb      	bne.n	8b74 <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    8b7c:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8b7e:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8b80:	4979      	ldr	r1, [pc, #484]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8b82:	f040 0002 	orr.w	r0, r0, #2
    8b86:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8b88:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8b8a:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8b8e:	f040 0002 	orr.w	r0, r0, #2
    8b92:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    8b94:	6453      	str	r3, [r2, #68]	; 0x44
    8b96:	6493      	str	r3, [r2, #72]	; 0x48
    8b98:	64d3      	str	r3, [r2, #76]	; 0x4c
    8b9a:	6513      	str	r3, [r2, #80]	; 0x50
    8b9c:	6553      	str	r3, [r2, #84]	; 0x54
    8b9e:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8ba0:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    8ba4:	f363 1286 	bfi	r2, r3, #6, #1
    8ba8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    8bac:	460a      	mov	r2, r1
    8bae:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8bb2:	065c      	lsls	r4, r3, #25
    8bb4:	d4fb      	bmi.n	8bae <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    8bb6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8bba:	496b      	ldr	r1, [pc, #428]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8bbc:	2006      	movs	r0, #6
    8bbe:	f360 0303 	bfi	r3, r0, #0, #4
    8bc2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8bc6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8bce:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8bd2:	684b      	ldr	r3, [r1, #4]
    8bd4:	f013 0318 	ands.w	r3, r3, #24
    8bd8:	d1fb      	bne.n	8bd2 <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8bda:	4c64      	ldr	r4, [pc, #400]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8bdc:	4a62      	ldr	r2, [pc, #392]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8bde:	6960      	ldr	r0, [r4, #20]
    8be0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    8be4:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8be6:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    8bea:	f363 1086 	bfi	r0, r3, #6, #1
    8bee:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    8bf2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8bf6:	0658      	lsls	r0, r3, #25
    8bf8:	d4fb      	bmi.n	8bf2 <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    8bfa:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8bfe:	495a      	ldr	r1, [pc, #360]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8c00:	2006      	movs	r0, #6
    8c02:	f360 0303 	bfi	r3, r0, #0, #4
    8c06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8c0a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8c16:	684b      	ldr	r3, [r1, #4]
    8c18:	f013 0318 	ands.w	r3, r3, #24
    8c1c:	d1fb      	bne.n	8c16 <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8c1e:	4c53      	ldr	r4, [pc, #332]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8c20:	4a51      	ldr	r2, [pc, #324]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8c22:	69a0      	ldr	r0, [r4, #24]
    8c24:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    8c28:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8c2a:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    8c2e:	f363 1086 	bfi	r0, r3, #6, #1
    8c32:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    8c36:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8c3a:	0659      	lsls	r1, r3, #25
    8c3c:	d4fb      	bmi.n	8c36 <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    8c3e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8c42:	4949      	ldr	r1, [pc, #292]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8c44:	2006      	movs	r0, #6
    8c46:	f360 0303 	bfi	r3, r0, #0, #4
    8c4a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8c4e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8c56:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8c5a:	684b      	ldr	r3, [r1, #4]
    8c5c:	f013 0318 	ands.w	r3, r3, #24
    8c60:	d1fb      	bne.n	8c5a <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8c62:	4842      	ldr	r0, [pc, #264]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8c64:	4a40      	ldr	r2, [pc, #256]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8c66:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8c68:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8c6a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    8c6e:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8c70:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    8c74:	6a04      	ldr	r4, [r0, #32]
    8c76:	f044 0420 	orr.w	r4, r4, #32
    8c7a:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8c7c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    8c80:	f363 1086 	bfi	r0, r3, #6, #1
    8c84:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    8c88:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    8c8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8c90:	2b00      	cmp	r3, #0
    8c92:	d1f9      	bne.n	8c88 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    8c94:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8c98:	4834      	ldr	r0, [pc, #208]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8c9a:	4c33      	ldr	r4, [pc, #204]	; (8d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8c9c:	f363 0103 	bfi	r1, r3, #0, #4
    8ca0:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8ca4:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    8ca8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8cac:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8cb0:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8cb2:	69c1      	ldr	r1, [r0, #28]
    8cb4:	f041 0110 	orr.w	r1, r1, #16
    8cb8:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8cba:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    8cbe:	f363 1186 	bfi	r1, r3, #6, #1
    8cc2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    8cc6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8cca:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d1f9      	bne.n	8cc6 <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    8cd2:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    8cd6:	4a28      	ldr	r2, [pc, #160]	; (8d78 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8cd8:	4d24      	ldr	r5, [pc, #144]	; (8d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8cda:	f363 0103 	bfi	r1, r3, #0, #4
    8cde:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    8ce2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8cea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    8cee:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8cf0:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8cf2:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    8cf4:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8cf6:	f044 0410 	orr.w	r4, r4, #16
    8cfa:	622c      	str	r4, [r5, #32]
    8cfc:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    8d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8d04:	f04f 0e01 	mov.w	lr, #1
    8d08:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8d0a:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8d0c:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8d0e:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    8d10:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    8d12:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    8d16:	6813      	ldr	r3, [r2, #0]
    8d18:	f36f 0341 	bfc	r3, #1, #1
    8d1c:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8d1e:	6913      	ldr	r3, [r2, #16]
    8d20:	f013 0302 	ands.w	r3, r3, #2
    8d24:	d1fb      	bne.n	8d1e <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    8d26:	7910      	ldrb	r0, [r2, #4]
    8d28:	f040 0002 	orr.w	r0, r0, #2
    8d2c:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8d2e:	6810      	ldr	r0, [r2, #0]
    8d30:	f36e 0083 	bfi	r0, lr, #2, #2
    8d34:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8d36:	6810      	ldr	r0, [r2, #0]
    8d38:	f367 200a 	bfi	r0, r7, #8, #3
    8d3c:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8d3e:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8d40:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    8d42:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    8d46:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    8d4a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    8d4e:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    8d50:	6813      	ldr	r3, [r2, #0]
    8d52:	f043 0302 	orr.w	r3, r3, #2
    8d56:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8d58:	6913      	ldr	r3, [r2, #16]
    8d5a:	079b      	lsls	r3, r3, #30
    8d5c:	d4fc      	bmi.n	8d58 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    8d5e:	4561      	cmp	r1, ip
    8d60:	d1d7      	bne.n	8d12 <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    8d62:	b005      	add	sp, #20
    8d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d66:	bf00      	nop
    8d68:	40001c00 	.word	0x40001c00
    8d6c:	40000800 	.word	0x40000800
    8d70:	41016000 	.word	0x41016000
    8d74:	41018000 	.word	0x41018000
    8d78:	00022bb4 	.word	0x00022bb4

00008d7c <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8d7c:	498b      	ldr	r1, [pc, #556]	; (8fac <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    8d7e:	4a8c      	ldr	r2, [pc, #560]	; (8fb0 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8d80:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    8d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    8d8a:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    8d8e:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8d90:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    8d92:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    8d94:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    8d98:	4606      	mov	r6, r0
    InitClocks();
    8d9a:	f7ff fe81 	bl	8aa0 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    8d9e:	4b85      	ldr	r3, [pc, #532]	; (8fb4 <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    8da0:	4985      	ldr	r1, [pc, #532]	; (8fb8 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    8da2:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    8da4:	680d      	ldr	r5, [r1, #0]
    8da6:	4f85      	ldr	r7, [pc, #532]	; (8fbc <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    8da8:	f364 0241 	bfi	r2, r4, #1, #1
    8dac:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    8dae:	691a      	ldr	r2, [r3, #16]
    8db0:	21a7      	movs	r1, #167	; 0xa7
    8db2:	f361 4217 	bfi	r2, r1, #16, #8
    8db6:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    8db8:	691a      	ldr	r2, [r3, #16]
    8dba:	f368 0283 	bfi	r2, r8, #2, #2
    8dbe:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    8dc0:	691a      	ldr	r2, [r3, #16]
    8dc2:	2107      	movs	r1, #7
    8dc4:	f361 220b 	bfi	r2, r1, #8, #4
    8dc8:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    8dca:	691a      	ldr	r2, [r3, #16]
    8dcc:	f042 0202 	orr.w	r2, r2, #2
    8dd0:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    8dd2:	4628      	mov	r0, r5
    8dd4:	4641      	mov	r1, r8
    8dd6:	f008 fbc1 	bl	1155c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    8dda:	4879      	ldr	r0, [pc, #484]	; (8fc0 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    8ddc:	2100      	movs	r1, #0
    8dde:	f000 fc9b 	bl	9718 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    8de2:	4621      	mov	r1, r4
    8de4:	4628      	mov	r0, r5
    8de6:	f008 fbb9 	bl	1155c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    8dea:	4b76      	ldr	r3, [pc, #472]	; (8fc4 <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    8dec:	4a76      	ldr	r2, [pc, #472]	; (8fc8 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    8dee:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    8df2:	2102      	movs	r1, #2
    8df4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    8df8:	6810      	ldr	r0, [r2, #0]
    8dfa:	f006 fe01 	bl	fa00 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    8dfe:	f857 0f04 	ldr.w	r0, [r7, #4]!
    8e02:	6803      	ldr	r3, [r0, #0]
    8e04:	b221      	sxth	r1, r4
    8e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    8e08:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    8e0a:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    8e0c:	2c15      	cmp	r4, #21
    8e0e:	d1f6      	bne.n	8dfe <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    8e10:	f005 fe14 	bl	ea3c <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    8e14:	4b6d      	ldr	r3, [pc, #436]	; (8fcc <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    8e16:	6818      	ldr	r0, [r3, #0]
    8e18:	f001 ff74 	bl	ad04 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    8e1c:	486c      	ldr	r0, [pc, #432]	; (8fd0 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    8e1e:	f001 fac9 	bl	a3b4 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    8e22:	4b6c      	ldr	r3, [pc, #432]	; (8fd4 <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    8e24:	6818      	ldr	r0, [r3, #0]
    8e26:	f003 ff21 	bl	cc6c <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    8e2a:	4b6b      	ldr	r3, [pc, #428]	; (8fd8 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    8e2c:	6818      	ldr	r0, [r3, #0]
    8e2e:	f006 f923 	bl	f078 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    8e32:	4b6a      	ldr	r3, [pc, #424]	; (8fdc <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    8e34:	6818      	ldr	r0, [r3, #0]
    8e36:	f7fd f9ef 	bl	6218 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    8e3a:	4869      	ldr	r0, [pc, #420]	; (8fe0 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    8e3c:	f002 fd7c 	bl	b938 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    8e40:	4a68      	ldr	r2, [pc, #416]	; (8fe4 <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    8e42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    8e46:	f36f 1386 	bfc	r3, #6, #1
    8e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    8e4e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8e52:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8e56:	2900      	cmp	r1, #0
    8e58:	d1f9      	bne.n	8e4e <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    8e5a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    8e5e:	4c62      	ldr	r4, [pc, #392]	; (8fe8 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    8e60:	4f5b      	ldr	r7, [pc, #364]	; (8fd0 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8e62:	4b62      	ldr	r3, [pc, #392]	; (8fec <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    8e64:	f8df c190 	ldr.w	ip, [pc, #400]	; 8ff8 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    8e68:	f361 0003 	bfi	r0, r1, #0, #4
    8e6c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    8e70:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8e74:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8e78:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    8e7c:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    8e7e:	6961      	ldr	r1, [r4, #20]
    8e80:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    8e84:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    8e88:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    8e8c:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8e8e:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8e90:	f8c3 e000 	str.w	lr, [r3]
    8e94:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    8e98:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    8e9c:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    8ea0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    8ea4:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    8ea8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    8eac:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8eb0:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    8eb4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8eb8:	f8c3 9000 	str.w	r9, [r3]
    8ebc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8ec0:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8ec4:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    8ec8:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8eca:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8ece:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8ed2:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8ed6:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8eda:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8ede:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8ee2:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8ee6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    8eea:	6019      	str	r1, [r3, #0]
    8eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8ef0:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8ef4:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8ef6:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8efa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    8efe:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f00:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f04:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f08:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f0c:	6019      	str	r1, [r3, #0]
    8f0e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f12:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f16:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    8f1a:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f1c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f20:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    8f22:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f26:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f2a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    8f2e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    8f32:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f36:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f3a:	f44f 7880 	mov.w	r8, #256	; 0x100
    8f3e:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f40:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    8f44:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f46:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f4a:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f4e:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f52:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f54:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f58:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f5c:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f5e:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8f62:	f8c3 800c 	str.w	r8, [r3, #12]
    8f66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8f6a:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f6e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    8f72:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    8f76:	f000 fb7f 	bl	9678 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    8f7a:	b100      	cbz	r0, 8f7e <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    8f7c:	e7fe      	b.n	8f7c <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8f7e:	4b1c      	ldr	r3, [pc, #112]	; (8ff0 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    8f80:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    8f82:	4621      	mov	r1, r4
    8f84:	4628      	mov	r0, r5
    8f86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    8f8a:	f008 fad9 	bl	11540 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    8f8e:	f642 043b 	movw	r4, #10299	; 0x283b
    8f92:	f000 fb9d 	bl	96d0 <Microseconds>
    8f96:	42a0      	cmp	r0, r4
    8f98:	d9fb      	bls.n	8f92 <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    8f9a:	4b16      	ldr	r3, [pc, #88]	; (8ff4 <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    8f9c:	6818      	ldr	r0, [r3, #0]
    8f9e:	f000 fcdd 	bl	995c <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    8fa2:	2301      	movs	r3, #1
    8fa4:	7033      	strb	r3, [r6, #0]
    8fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8faa:	bf00      	nop
    8fac:	e000edf0 	.word	0xe000edf0
    8fb0:	e0001000 	.word	0xe0001000
    8fb4:	40001800 	.word	0x40001800
    8fb8:	20001f18 	.word	0x20001f18
    8fbc:	00022bd4 	.word	0x00022bd4
    8fc0:	0001d4c0 	.word	0x0001d4c0
    8fc4:	41008000 	.word	0x41008000
    8fc8:	20001f08 	.word	0x20001f08
    8fcc:	20001bfc 	.word	0x20001bfc
    8fd0:	200019d0 	.word	0x200019d0
    8fd4:	20001dfc 	.word	0x20001dfc
    8fd8:	20001efc 	.word	0x20001efc
    8fdc:	20000ad0 	.word	0x20000ad0
    8fe0:	20001ae8 	.word	0x20001ae8
    8fe4:	40001c00 	.word	0x40001c00
    8fe8:	40000800 	.word	0x40000800
    8fec:	e000e100 	.word	0xe000e100
    8ff0:	e000ed00 	.word	0xe000ed00
    8ff4:	20001bf0 	.word	0x20001bf0
    8ff8:	20001be4 	.word	0x20001be4

00008ffc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    8ffc:	b672      	cpsid	i
    8ffe:	4a09      	ldr	r2, [pc, #36]	; (9024 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    9000:	4b09      	ldr	r3, [pc, #36]	; (9028 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    9002:	2901      	cmp	r1, #1
    9004:	bf18      	it	ne
    9006:	2300      	movne	r3, #0
    9008:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    900a:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    900e:	4907      	ldr	r1, [pc, #28]	; (902c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    9010:	4b07      	ldr	r3, [pc, #28]	; (9030 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    9012:	68ca      	ldr	r2, [r1, #12]
    9014:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9018:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    901a:	60cb      	str	r3, [r1, #12]
    901c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    9020:	bf00      	nop
    9022:	e7fd      	b.n	9020 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    9024:	2002fffc 	.word	0x2002fffc
    9028:	f01669ef 	.word	0xf01669ef
    902c:	e000ed00 	.word	0xe000ed00
    9030:	05fa0004 	.word	0x05fa0004

00009034 <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    9034:	4b01      	ldr	r3, [pc, #4]	; (903c <GMAC_Handler+0x8>)
    9036:	6818      	ldr	r0, [r3, #0]
    9038:	f001 b908 	b.w	a24c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    903c:	20001bf0 	.word	0x20001bf0

00009040 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9040:	4801      	ldr	r0, [pc, #4]	; (9048 <SERCOM0_0_Handler+0x8>)
    9042:	f007 bf13 	b.w	10e6c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9046:	bf00      	nop
    9048:	200015e8 	.word	0x200015e8

0000904c <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    904c:	4801      	ldr	r0, [pc, #4]	; (9054 <SERCOM0_2_Handler+0x8>)
    904e:	f007 bf35 	b.w	10ebc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9052:	bf00      	nop
    9054:	200015e8 	.word	0x200015e8

00009058 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9058:	4801      	ldr	r0, [pc, #4]	; (9060 <SERCOM0_3_Handler+0x8>)
    905a:	f007 bf6b 	b.w	10f34 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    905e:	bf00      	nop
    9060:	200015e8 	.word	0x200015e8

00009064 <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    9064:	4801      	ldr	r0, [pc, #4]	; (906c <SERCOM2_0_Handler+0x8>)
    9066:	f007 bf01 	b.w	10e6c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    906a:	bf00      	nop
    906c:	20001740 	.word	0x20001740

00009070 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9070:	4801      	ldr	r0, [pc, #4]	; (9078 <SERCOM2_2_Handler+0x8>)
    9072:	f007 bf23 	b.w	10ebc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9076:	bf00      	nop
    9078:	20001740 	.word	0x20001740

0000907c <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    907c:	4801      	ldr	r0, [pc, #4]	; (9084 <SERCOM2_3_Handler+0x8>)
    907e:	f007 bf59 	b.w	10f34 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9082:	bf00      	nop
    9084:	20001740 	.word	0x20001740

00009088 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9088:	4801      	ldr	r0, [pc, #4]	; (9090 <SERCOM7_0_Handler+0x8>)
    908a:	f007 beef 	b.w	10e6c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    908e:	bf00      	nop
    9090:	20001490 	.word	0x20001490

00009094 <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    9094:	4801      	ldr	r0, [pc, #4]	; (909c <SERCOM7_2_Handler+0x8>)
    9096:	f007 bf11 	b.w	10ebc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    909a:	bf00      	nop
    909c:	20001490 	.word	0x20001490

000090a0 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    90a0:	4801      	ldr	r0, [pc, #4]	; (90a8 <SERCOM7_3_Handler+0x8>)
    90a2:	f007 bf47 	b.w	10f34 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    90a6:	bf00      	nop
    90a8:	20001490 	.word	0x20001490

000090ac <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    90ac:	4b02      	ldr	r3, [pc, #8]	; (90b8 <EIC_0_Handler+0xc>)
    90ae:	2100      	movs	r1, #0
    90b0:	6818      	ldr	r0, [r3, #0]
    90b2:	f006 bced 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    90b6:	bf00      	nop
    90b8:	20001f08 	.word	0x20001f08

000090bc <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    90bc:	4b02      	ldr	r3, [pc, #8]	; (90c8 <EIC_1_Handler+0xc>)
    90be:	2101      	movs	r1, #1
    90c0:	6818      	ldr	r0, [r3, #0]
    90c2:	f006 bce5 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    90c6:	bf00      	nop
    90c8:	20001f08 	.word	0x20001f08

000090cc <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    90cc:	4b02      	ldr	r3, [pc, #8]	; (90d8 <EIC_2_Handler+0xc>)
    90ce:	2102      	movs	r1, #2
    90d0:	6818      	ldr	r0, [r3, #0]
    90d2:	f006 bcdd 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    90d6:	bf00      	nop
    90d8:	20001f08 	.word	0x20001f08

000090dc <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    90dc:	4b02      	ldr	r3, [pc, #8]	; (90e8 <EIC_3_Handler+0xc>)
    90de:	2103      	movs	r1, #3
    90e0:	6818      	ldr	r0, [r3, #0]
    90e2:	f006 bcd5 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    90e6:	bf00      	nop
    90e8:	20001f08 	.word	0x20001f08

000090ec <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    90ec:	4b02      	ldr	r3, [pc, #8]	; (90f8 <EIC_4_Handler+0xc>)
    90ee:	2104      	movs	r1, #4
    90f0:	6818      	ldr	r0, [r3, #0]
    90f2:	f006 bccd 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    90f6:	bf00      	nop
    90f8:	20001f08 	.word	0x20001f08

000090fc <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    90fc:	4b02      	ldr	r3, [pc, #8]	; (9108 <EIC_5_Handler+0xc>)
    90fe:	2105      	movs	r1, #5
    9100:	6818      	ldr	r0, [r3, #0]
    9102:	f006 bcc5 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9106:	bf00      	nop
    9108:	20001f08 	.word	0x20001f08

0000910c <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    910c:	4b02      	ldr	r3, [pc, #8]	; (9118 <EIC_6_Handler+0xc>)
    910e:	2106      	movs	r1, #6
    9110:	6818      	ldr	r0, [r3, #0]
    9112:	f006 bcbd 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9116:	bf00      	nop
    9118:	20001f08 	.word	0x20001f08

0000911c <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    911c:	4b02      	ldr	r3, [pc, #8]	; (9128 <EIC_7_Handler+0xc>)
    911e:	2107      	movs	r1, #7
    9120:	6818      	ldr	r0, [r3, #0]
    9122:	f006 bcb5 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9126:	bf00      	nop
    9128:	20001f08 	.word	0x20001f08

0000912c <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    912c:	4b02      	ldr	r3, [pc, #8]	; (9138 <EIC_8_Handler+0xc>)
    912e:	2108      	movs	r1, #8
    9130:	6818      	ldr	r0, [r3, #0]
    9132:	f006 bcad 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9136:	bf00      	nop
    9138:	20001f08 	.word	0x20001f08

0000913c <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    913c:	4b02      	ldr	r3, [pc, #8]	; (9148 <EIC_9_Handler+0xc>)
    913e:	2109      	movs	r1, #9
    9140:	6818      	ldr	r0, [r3, #0]
    9142:	f006 bca5 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9146:	bf00      	nop
    9148:	20001f08 	.word	0x20001f08

0000914c <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    914c:	4b02      	ldr	r3, [pc, #8]	; (9158 <EIC_10_Handler+0xc>)
    914e:	210a      	movs	r1, #10
    9150:	6818      	ldr	r0, [r3, #0]
    9152:	f006 bc9d 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9156:	bf00      	nop
    9158:	20001f08 	.word	0x20001f08

0000915c <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    915c:	4b02      	ldr	r3, [pc, #8]	; (9168 <EIC_11_Handler+0xc>)
    915e:	210b      	movs	r1, #11
    9160:	6818      	ldr	r0, [r3, #0]
    9162:	f006 bc95 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9166:	bf00      	nop
    9168:	20001f08 	.word	0x20001f08

0000916c <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    916c:	4b01      	ldr	r3, [pc, #4]	; (9174 <EIC_12_Handler+0x8>)
    916e:	6818      	ldr	r0, [r3, #0]
    9170:	f000 beb0 	b.w	9ed4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    9174:	20001bf0 	.word	0x20001bf0

00009178 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9178:	4b02      	ldr	r3, [pc, #8]	; (9184 <EIC_13_Handler+0xc>)
    917a:	210d      	movs	r1, #13
    917c:	6818      	ldr	r0, [r3, #0]
    917e:	f006 bc87 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9182:	bf00      	nop
    9184:	20001f08 	.word	0x20001f08

00009188 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9188:	4b02      	ldr	r3, [pc, #8]	; (9194 <EIC_14_Handler+0xc>)
    918a:	210e      	movs	r1, #14
    918c:	6818      	ldr	r0, [r3, #0]
    918e:	f006 bc7f 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9192:	bf00      	nop
    9194:	20001f08 	.word	0x20001f08

00009198 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9198:	4b02      	ldr	r3, [pc, #8]	; (91a4 <EIC_15_Handler+0xc>)
    919a:	210f      	movs	r1, #15
    919c:	6818      	ldr	r0, [r3, #0]
    919e:	f006 bc77 	b.w	fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    91a2:	bf00      	nop
    91a4:	20001f08 	.word	0x20001f08

000091a8 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    91a8:	4b02      	ldr	r3, [pc, #8]	; (91b4 <TCC3_0_Handler+0xc>)
    91aa:	4a03      	ldr	r2, [pc, #12]	; (91b8 <TCC3_0_Handler+0x10>)
    91ac:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    91ae:	4803      	ldr	r0, [pc, #12]	; (91bc <TCC3_0_Handler+0x14>)
    91b0:	f005 b9ce 	b.w	e550 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    91b4:	42001000 	.word	0x42001000
    91b8:	003ffc0f 	.word	0x003ffc0f
    91bc:	200013f0 	.word	0x200013f0

000091c0 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    91c0:	4b02      	ldr	r3, [pc, #8]	; (91cc <TCC4_0_Handler+0xc>)
    91c2:	4a03      	ldr	r2, [pc, #12]	; (91d0 <TCC4_0_Handler+0x10>)
    91c4:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    91c6:	4803      	ldr	r0, [pc, #12]	; (91d4 <TCC4_0_Handler+0x14>)
    91c8:	f005 b9c2 	b.w	e550 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    91cc:	43001000 	.word	0x43001000
    91d0:	003ffc0f 	.word	0x003ffc0f
    91d4:	2000136c 	.word	0x2000136c

000091d8 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    91d8:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    91da:	4b0d      	ldr	r3, [pc, #52]	; (9210 <SysTick_Handler+0x38>)
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	b103      	cbz	r3, 91e2 <SysTick_Handler+0xa>
    91e0:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    91e2:	4b0c      	ldr	r3, [pc, #48]	; (9214 <SysTick_Handler+0x3c>)
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	2b00      	cmp	r3, #0
    91e8:	d0fa      	beq.n	91e0 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    91ea:	4b0b      	ldr	r3, [pc, #44]	; (9218 <SysTick_Handler+0x40>)
    91ec:	6818      	ldr	r0, [r3, #0]
    91ee:	f006 fa99 	bl	f724 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    91f2:	480a      	ldr	r0, [pc, #40]	; (921c <SysTick_Handler+0x44>)
    91f4:	f7fb fd2a 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    91f8:	4809      	ldr	r0, [pc, #36]	; (9220 <SysTick_Handler+0x48>)
    91fa:	f7fb fd27 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    91fe:	4809      	ldr	r0, [pc, #36]	; (9224 <SysTick_Handler+0x4c>)
    9200:	f7fb fd24 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9204:	4808      	ldr	r0, [pc, #32]	; (9228 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    9206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    920a:	f7fb bd1f 	b.w	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    920e:	bf00      	nop
    9210:	20001080 	.word	0x20001080
    9214:	200019cc 	.word	0x200019cc
    9218:	20001efc 	.word	0x20001efc
    921c:	20000b60 	.word	0x20000b60
    9220:	20000ca8 	.word	0x20000ca8
    9224:	20000df0 	.word	0x20000df0
    9228:	20000f38 	.word	0x20000f38

0000922c <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    922c:	4a30      	ldr	r2, [pc, #192]	; (92f0 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    922e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    9232:	4b30      	ldr	r3, [pc, #192]	; (92f4 <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    9234:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    9236:	4a30      	ldr	r2, [pc, #192]	; (92f8 <TCC0_0_Handler+0xcc>)
    9238:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    923a:	4630      	mov	r0, r6
    923c:	f000 f9ca 	bl	95d4 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9240:	4b2e      	ldr	r3, [pc, #184]	; (92fc <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    9242:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9338 <TCC0_0_Handler+0x10c>
    9246:	f8d3 9000 	ldr.w	r9, [r3]
    924a:	4648      	mov	r0, r9
    924c:	f005 ff88 	bl	f160 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9250:	4b2b      	ldr	r3, [pc, #172]	; (9300 <TCC0_0_Handler+0xd4>)
    9252:	6818      	ldr	r0, [r3, #0]
    9254:	f003 fec4 	bl	cfe0 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9258:	4b2a      	ldr	r3, [pc, #168]	; (9304 <TCC0_0_Handler+0xd8>)
    925a:	6818      	ldr	r0, [r3, #0]
    925c:	f008 fa14 	bl	11688 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9260:	4b29      	ldr	r3, [pc, #164]	; (9308 <TCC0_0_Handler+0xdc>)
    9262:	6818      	ldr	r0, [r3, #0]
    9264:	f7fd fe22 	bl	6eac <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9268:	4b28      	ldr	r3, [pc, #160]	; (930c <TCC0_0_Handler+0xe0>)
    926a:	681f      	ldr	r7, [r3, #0]
    926c:	4638      	mov	r0, r7
    926e:	f006 fc3d 	bl	faec <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    9272:	f898 3000 	ldrb.w	r3, [r8]
    9276:	b15b      	cbz	r3, 9290 <TCC0_0_Handler+0x64>
    9278:	4c25      	ldr	r4, [pc, #148]	; (9310 <TCC0_0_Handler+0xe4>)
    927a:	4826      	ldr	r0, [pc, #152]	; (9314 <TCC0_0_Handler+0xe8>)
    927c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9280:	e001      	b.n	9286 <TCC0_0_Handler+0x5a>
    9282:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    9286:	6803      	ldr	r3, [r0, #0]
    9288:	6a1b      	ldr	r3, [r3, #32]
    928a:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    928c:	42ac      	cmp	r4, r5
    928e:	d1f8      	bne.n	9282 <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9290:	4638      	mov	r0, r7
    9292:	f006 fc3f 	bl	fb14 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    9296:	4820      	ldr	r0, [pc, #128]	; (9318 <TCC0_0_Handler+0xec>)
    9298:	f002 fb7c 	bl	b994 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    929c:	481f      	ldr	r0, [pc, #124]	; (931c <TCC0_0_Handler+0xf0>)
    929e:	f001 f95b 	bl	a558 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    92a2:	4630      	mov	r0, r6
    92a4:	f000 f9ac 	bl	9600 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    92a8:	4a1d      	ldr	r2, [pc, #116]	; (9320 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    92aa:	491e      	ldr	r1, [pc, #120]	; (9324 <TCC0_0_Handler+0xf8>)
    tickCnt++;
    92ac:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    92ae:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    92b0:	3301      	adds	r3, #1
    92b2:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    92b4:	b111      	cbz	r1, 92bc <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    92b6:	f898 3000 	ldrb.w	r3, [r8]
    92ba:	b923      	cbnz	r3, 92c6 <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    92bc:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    92be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    92c2:	f000 b98d 	b.w	95e0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    92c6:	4648      	mov	r0, r9
    92c8:	f006 fa2c 	bl	f724 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    92cc:	4816      	ldr	r0, [pc, #88]	; (9328 <TCC0_0_Handler+0xfc>)
    92ce:	f7fb fcbd 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    92d2:	4816      	ldr	r0, [pc, #88]	; (932c <TCC0_0_Handler+0x100>)
    92d4:	f7fb fcba 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    92d8:	4815      	ldr	r0, [pc, #84]	; (9330 <TCC0_0_Handler+0x104>)
    92da:	f7fb fcb7 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    92de:	4815      	ldr	r0, [pc, #84]	; (9334 <TCC0_0_Handler+0x108>)
    92e0:	f7fb fcb4 	bl	4c4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    92e4:	4630      	mov	r0, r6
}
    92e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    92ea:	f000 b979 	b.w	95e0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    92ee:	bf00      	nop
    92f0:	20001be4 	.word	0x20001be4
    92f4:	41016000 	.word	0x41016000
    92f8:	003ffc0f 	.word	0x003ffc0f
    92fc:	20001efc 	.word	0x20001efc
    9300:	20001dfc 	.word	0x20001dfc
    9304:	20001f18 	.word	0x20001f18
    9308:	20000ad0 	.word	0x20000ad0
    930c:	20001f08 	.word	0x20001f08
    9310:	00022bd8 	.word	0x00022bd8
    9314:	200011e0 	.word	0x200011e0
    9318:	20001ae8 	.word	0x20001ae8
    931c:	200019d0 	.word	0x200019d0
    9320:	20001be0 	.word	0x20001be0
    9324:	20001080 	.word	0x20001080
    9328:	20000b60 	.word	0x20000b60
    932c:	20000ca8 	.word	0x20000ca8
    9330:	20000df0 	.word	0x20000df0
    9334:	20000f38 	.word	0x20000f38
    9338:	200019cc 	.word	0x200019cc

0000933c <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    933c:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    933e:	4813      	ldr	r0, [pc, #76]	; (938c <Reset_Handler+0x50>)
    9340:	4b13      	ldr	r3, [pc, #76]	; (9390 <Reset_Handler+0x54>)
    9342:	4298      	cmp	r0, r3
    9344:	d00b      	beq.n	935e <Reset_Handler+0x22>
    9346:	4913      	ldr	r1, [pc, #76]	; (9394 <Reset_Handler+0x58>)
    9348:	4281      	cmp	r1, r0
    934a:	d008      	beq.n	935e <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    934c:	4298      	cmp	r0, r3
    934e:	d206      	bcs.n	935e <Reset_Handler+0x22>
            *pDest = *pSrc;
    9350:	43c2      	mvns	r2, r0
    9352:	441a      	add	r2, r3
    9354:	f022 0203 	bic.w	r2, r2, #3
    9358:	3204      	adds	r2, #4
    935a:	f014 fea1 	bl	1e0a0 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    935e:	480e      	ldr	r0, [pc, #56]	; (9398 <Reset_Handler+0x5c>)
    9360:	4b0e      	ldr	r3, [pc, #56]	; (939c <Reset_Handler+0x60>)
    9362:	4298      	cmp	r0, r3
    9364:	d008      	beq.n	9378 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    9366:	d207      	bcs.n	9378 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9368:	43c2      	mvns	r2, r0
    936a:	441a      	add	r2, r3
    936c:	f022 0203 	bic.w	r2, r2, #3
    9370:	3204      	adds	r2, #4
    9372:	2100      	movs	r1, #0
    9374:	f014 ff92 	bl	1e29c <memset>
        }
    }

    SystemInit();
    9378:	f002 f93a 	bl	b5f0 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    937c:	f014 fb06 	bl	1d98c <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9380:	4807      	ldr	r0, [pc, #28]	; (93a0 <Reset_Handler+0x64>)
    9382:	f7ff fcfb 	bl	8d7c <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    9386:	f7fb f8e3 	bl	4550 <main>
    938a:	e7fe      	b.n	938a <Reset_Handler+0x4e>
    938c:	20000000 	.word	0x20000000
    9390:	20000ab0 	.word	0x20000ab0
    9394:	00024f1c 	.word	0x00024f1c
    9398:	20000ab0 	.word	0x20000ab0
    939c:	200023a0 	.word	0x200023a0
    93a0:	200019cc 	.word	0x200019cc

000093a4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    93a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    93a8:	4852      	ldr	r0, [pc, #328]	; (94f4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    93aa:	4d53      	ldr	r5, [pc, #332]	; (94f8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    93ac:	4c53      	ldr	r4, [pc, #332]	; (94fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    93ae:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 956c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    93b2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9570 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    93b6:	4f52      	ldr	r7, [pc, #328]	; (9500 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    93b8:	f002 fa94 	bl	b8e4 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    93bc:	4b51      	ldr	r3, [pc, #324]	; (9504 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    93be:	4a52      	ldr	r2, [pc, #328]	; (9508 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    93c0:	4852      	ldr	r0, [pc, #328]	; (950c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    93c2:	601a      	str	r2, [r3, #0]
    93c4:	2600      	movs	r6, #0
    93c6:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    93ca:	f000 ff61 	bl	a290 <_ZN9ClearCore13ShiftRegisterC1Ev>
    93ce:	4b50      	ldr	r3, [pc, #320]	; (9510 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    93d0:	4a50      	ldr	r2, [pc, #320]	; (9514 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    93d2:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    93d6:	4628      	mov	r0, r5
    93d8:	601a      	str	r2, [r3, #0]
    93da:	f004 ff73 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    93de:	4b4e      	ldr	r3, [pc, #312]	; (9518 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    93e0:	602b      	str	r3, [r5, #0]
    93e2:	4620      	mov	r0, r4
    93e4:	f004 ff6e 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    93e8:	4b4c      	ldr	r3, [pc, #304]	; (951c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    93ea:	6023      	str	r3, [r4, #0]
    93ec:	4648      	mov	r0, r9
    93ee:	f004 ff69 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    93f2:	4c4b      	ldr	r4, [pc, #300]	; (9520 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    93f4:	4d4b      	ldr	r5, [pc, #300]	; (9524 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    93f6:	f8c9 4000 	str.w	r4, [r9]
    93fa:	4640      	mov	r0, r8
    93fc:	f004 ff62 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    9400:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9574 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    9404:	f8c8 4000 	str.w	r4, [r8]
    9408:	4638      	mov	r0, r7
    940a:	f004 ff5b 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    940e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9578 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    9412:	603c      	str	r4, [r7, #0]
    9414:	4628      	mov	r0, r5
    9416:	f004 ff55 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    941a:	4c43      	ldr	r4, [pc, #268]	; (9528 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    941c:	4f43      	ldr	r7, [pc, #268]	; (952c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    941e:	602c      	str	r4, [r5, #0]
    9420:	4648      	mov	r0, r9
    9422:	f004 ff4f 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    9426:	4d42      	ldr	r5, [pc, #264]	; (9530 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    9428:	f8c9 4000 	str.w	r4, [r9]
    942c:	4640      	mov	r0, r8
    942e:	f004 ff49 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    9432:	4c40      	ldr	r4, [pc, #256]	; (9534 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    9434:	f8df 9144 	ldr.w	r9, [pc, #324]	; 957c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    9438:	f8c8 4000 	str.w	r4, [r8]
    943c:	4638      	mov	r0, r7
    943e:	f004 ff41 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    9442:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9580 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    9446:	603c      	str	r4, [r7, #0]
    9448:	4628      	mov	r0, r5
    944a:	f004 ff3b 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    944e:	4f3a      	ldr	r7, [pc, #232]	; (9538 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9450:	602c      	str	r4, [r5, #0]
    9452:	4648      	mov	r0, r9
    9454:	f004 ff36 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9458:	4c38      	ldr	r4, [pc, #224]	; (953c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    945a:	4d39      	ldr	r5, [pc, #228]	; (9540 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    945c:	f8c9 4000 	str.w	r4, [r9]
    9460:	4640      	mov	r0, r8
    9462:	f004 ff2f 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    9466:	4638      	mov	r0, r7
    9468:	f8c8 4000 	str.w	r4, [r8]
    946c:	f004 ff2a 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    9470:	4628      	mov	r0, r5
    9472:	603c      	str	r4, [r7, #0]
    9474:	f004 ff26 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9478:	4832      	ldr	r0, [pc, #200]	; (9544 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    947a:	602c      	str	r4, [r5, #0]
    947c:	f7fd ff1e 	bl	72bc <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9480:	4831      	ldr	r0, [pc, #196]	; (9548 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    9482:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9584 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    9486:	4d31      	ldr	r5, [pc, #196]	; (954c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9488:	4c31      	ldr	r4, [pc, #196]	; (9550 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    948a:	4f32      	ldr	r7, [pc, #200]	; (9554 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    948c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9588 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    9490:	f7fd ff14 	bl	72bc <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    9494:	4830      	ldr	r0, [pc, #192]	; (9558 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    9496:	f7fd ff11 	bl	72bc <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    949a:	4830      	ldr	r0, [pc, #192]	; (955c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    949c:	f7fd ff0e 	bl	72bc <_ZN9ClearCore11MotorDriverC1Ev>
    94a0:	4640      	mov	r0, r8
    94a2:	4b2f      	ldr	r3, [pc, #188]	; (9560 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    94a4:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    94a8:	f004 ff0c 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    94ac:	4b2d      	ldr	r3, [pc, #180]	; (9564 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    94ae:	f8c8 3000 	str.w	r3, [r8]
    94b2:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    94b6:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    94b8:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    94bc:	f8c5 9000 	str.w	r9, [r5]
    94c0:	f8c8 3004 	str.w	r3, [r8, #4]
    94c4:	f004 fefe 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    94c8:	f107 0874 	add.w	r8, r7, #116	; 0x74
    94cc:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    94d0:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    94d4:	f8c4 9000 	str.w	r9, [r4]
    94d8:	602f      	str	r7, [r5, #0]
    94da:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    94de:	f004 fef1 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    94e2:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    94e6:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    94e8:	481f      	ldr	r0, [pc, #124]	; (9568 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    94ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    94ee:	f7fd bf07 	b.w	7300 <_ZN9ClearCore10SysManagerC1Ev>
    94f2:	bf00      	nop
    94f4:	20001ae8 	.word	0x20001ae8
    94f8:	20001474 	.word	0x20001474
    94fc:	200011e0 	.word	0x200011e0
    9500:	2000130c 	.word	0x2000130c
    9504:	20001884 	.word	0x20001884
    9508:	00022b1c 	.word	0x00022b1c
    950c:	200019d0 	.word	0x200019d0
    9510:	20001740 	.word	0x20001740
    9514:	00022b6c 	.word	0x00022b6c
    9518:	0002331c 	.word	0x0002331c
    951c:	00023084 	.word	0x00023084
    9520:	000230e4 	.word	0x000230e4
    9524:	2000136c 	.word	0x2000136c
    9528:	00023194 	.word	0x00023194
    952c:	20001180 	.word	0x20001180
    9530:	200011b0 	.word	0x200011b0
    9534:	00023164 	.word	0x00023164
    9538:	200010c8 	.word	0x200010c8
    953c:	000230b4 	.word	0x000230b4
    9540:	2000110c 	.word	0x2000110c
    9544:	20000b60 	.word	0x20000b60
    9548:	20000ca8 	.word	0x20000ca8
    954c:	20001490 	.word	0x20001490
    9550:	200015e8 	.word	0x200015e8
    9554:	00023278 	.word	0x00023278
    9558:	20000df0 	.word	0x20000df0
    955c:	20000f38 	.word	0x20000f38
    9560:	00022a18 	.word	0x00022a18
    9564:	00022a68 	.word	0x00022a68
    9568:	200019cc 	.word	0x200019cc
    956c:	2000124c 	.word	0x2000124c
    9570:	200012ac 	.word	0x200012ac
    9574:	200013f0 	.word	0x200013f0
    9578:	20001150 	.word	0x20001150
    957c:	20000b18 	.word	0x20000b18
    9580:	20001084 	.word	0x20001084
    9584:	20001480 	.word	0x20001480
    9588:	00023208 	.word	0x00023208

0000958c <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    958c:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    958e:	4d0f      	ldr	r5, [pc, #60]	; (95cc <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9590:	682c      	ldr	r4, [r5, #0]
    9592:	f014 0401 	ands.w	r4, r4, #1
    9596:	d002      	beq.n	959e <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9598:	4b0d      	ldr	r3, [pc, #52]	; (95d0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    959a:	6818      	ldr	r0, [r3, #0]
    959c:	bd70      	pop	{r4, r5, r6, pc}
    959e:	2030      	movs	r0, #48	; 0x30
    95a0:	f009 fdf6 	bl	13190 <_Znwj>
    95a4:	4a0a      	ldr	r2, [pc, #40]	; (95d0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    95a6:	6004      	str	r4, [r0, #0]
    95a8:	2105      	movs	r1, #5
    95aa:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    95ae:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    95b0:	7501      	strb	r1, [r0, #20]
    95b2:	6084      	str	r4, [r0, #8]
    95b4:	60c4      	str	r4, [r0, #12]
    95b6:	6104      	str	r4, [r0, #16]
    95b8:	6184      	str	r4, [r0, #24]
    95ba:	61c4      	str	r4, [r0, #28]
    95bc:	6204      	str	r4, [r0, #32]
    95be:	6244      	str	r4, [r0, #36]	; 0x24
    95c0:	6284      	str	r4, [r0, #40]	; 0x28
    95c2:	62c4      	str	r4, [r0, #44]	; 0x2c
    95c4:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    95c6:	6010      	str	r0, [r2, #0]
    95c8:	602b      	str	r3, [r5, #0]
    return *instance;
}
    95ca:	bd70      	pop	{r4, r5, r6, pc}
    95cc:	20001bdc 	.word	0x20001bdc
    95d0:	20001be8 	.word	0x20001be8

000095d4 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    95d4:	4b01      	ldr	r3, [pc, #4]	; (95dc <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    95d6:	685b      	ldr	r3, [r3, #4]
    95d8:	6003      	str	r3, [r0, #0]
    95da:	4770      	bx	lr
    95dc:	e0001000 	.word	0xe0001000

000095e0 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    95e0:	4b06      	ldr	r3, [pc, #24]	; (95fc <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    95e2:	6801      	ldr	r1, [r0, #0]
    95e4:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    95e6:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    95e8:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    95ea:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    95ec:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    95ee:	bf38      	it	cc
    95f0:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    95f2:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    95f4:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    95f6:	bf88      	it	hi
    95f8:	6083      	strhi	r3, [r0, #8]
    95fa:	4770      	bx	lr
    95fc:	e0001000 	.word	0xe0001000

00009600 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9600:	4a1c      	ldr	r2, [pc, #112]	; (9674 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    9602:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9604:	68d3      	ldr	r3, [r2, #12]
    9606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    960a:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    960c:	7d03      	ldrb	r3, [r0, #20]
    960e:	3b01      	subs	r3, #1
    9610:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    9612:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    9614:	7503      	strb	r3, [r0, #20]
    9616:	b923      	cbnz	r3, 9622 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    9618:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    961a:	2205      	movs	r2, #5
        m_msTickCnt++;
    961c:	3301      	adds	r3, #1
    961e:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9620:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    9622:	6825      	ldr	r5, [r4, #0]
    9624:	69a3      	ldr	r3, [r4, #24]
    9626:	406b      	eors	r3, r5
    9628:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    962c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9630:	d001      	beq.n	9636 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    9632:	61a5      	str	r5, [r4, #24]
    9634:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    9636:	2d00      	cmp	r5, #0
    9638:	db08      	blt.n	964c <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    963a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    963c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    963e:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9640:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9642:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    9646:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9648:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    964a:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    964c:	69e1      	ldr	r1, [r4, #28]
    964e:	3101      	adds	r1, #1
    9650:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    9652:	2278      	movs	r2, #120	; 0x78
    9654:	2300      	movs	r3, #0
    9656:	2000      	movs	r0, #0
    9658:	f012 fdf8 	bl	1c24c <__aeabi_uldivmod>
    965c:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    965e:	b128      	cbz	r0, 966c <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9660:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    9664:	00c3      	lsls	r3, r0, #3
    9666:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9668:	62e3      	str	r3, [r4, #44]	; 0x2c
    966a:	e7e2      	b.n	9632 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    966c:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    966e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9670:	e7df      	b.n	9632 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    9672:	bf00      	nop
    9674:	e000edf0 	.word	0xe000edf0

00009678 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9678:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    967c:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    967e:	29c7      	cmp	r1, #199	; 0xc7
    9680:	4a0d      	ldr	r2, [pc, #52]	; (96b8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9682:	f103 33ff 	add.w	r3, r3, #4294967295
    9686:	bf8c      	ite	hi
    9688:	2100      	movhi	r1, #0
    968a:	2101      	movls	r1, #1
    968c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9690:	7011      	strb	r1, [r2, #0]
    9692:	d20e      	bcs.n	96b2 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9694:	4a09      	ldr	r2, [pc, #36]	; (96bc <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9696:	480a      	ldr	r0, [pc, #40]	; (96c0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9698:	b410      	push	{r4}
    969a:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    969c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    969e:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96a0:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    96a4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    96a6:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    96a8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    96aa:	6011      	str	r1, [r2, #0]
}
    96ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    96b0:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    96b2:	2001      	movs	r0, #1
    96b4:	4770      	bx	lr
    96b6:	bf00      	nop
    96b8:	20001080 	.word	0x20001080
    96bc:	e000e010 	.word	0xe000e010
    96c0:	e000ed00 	.word	0xe000ed00

000096c4 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    96c4:	4b01      	ldr	r3, [pc, #4]	; (96cc <Milliseconds+0x8>)
    96c6:	681b      	ldr	r3, [r3, #0]
    96c8:	6918      	ldr	r0, [r3, #16]
}
    96ca:	4770      	bx	lr
    96cc:	20001be4 	.word	0x20001be4

000096d0 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    96d0:	4b0e      	ldr	r3, [pc, #56]	; (970c <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    96d2:	4a0f      	ldr	r2, [pc, #60]	; (9710 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    96d4:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    96d6:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    96d8:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    96da:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    96dc:	db0a      	blt.n	96f4 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    96de:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    96e0:	490c      	ldr	r1, [pc, #48]	; (9714 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    96e2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    96e4:	4423      	add	r3, r4
    96e6:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    96ea:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    96ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    96f2:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    96f4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    96f6:	4907      	ldr	r1, [pc, #28]	; (9714 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    96f8:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    96fa:	1b1b      	subs	r3, r3, r4
    96fc:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9700:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9704:	f85d 4b04 	ldr.w	r4, [sp], #4
    9708:	4770      	bx	lr
    970a:	bf00      	nop
    970c:	e0001000 	.word	0xe0001000
    9710:	20001be4 	.word	0x20001be4
    9714:	88888889 	.word	0x88888889

00009718 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    9718:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    971a:	4e0d      	ldr	r6, [pc, #52]	; (9750 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    971c:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    9720:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    9722:	d013      	beq.n	974c <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    9724:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9726:	2500      	movs	r5, #0
    9728:	1b1c      	subs	r4, r3, r4
    972a:	428d      	cmp	r5, r1
    972c:	bf08      	it	eq
    972e:	4284      	cmpeq	r4, r0
    9730:	d20c      	bcs.n	974c <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    9732:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9734:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9736:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    973a:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    973e:	2500      	movs	r5, #0
    9740:	461c      	mov	r4, r3
    9742:	428d      	cmp	r5, r1
    9744:	bf08      	it	eq
    9746:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9748:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    974a:	d3f2      	bcc.n	9732 <Delay_cycles+0x1a>
    }
}
    974c:	bc70      	pop	{r4, r5, r6}
    974e:	4770      	bx	lr
    9750:	e0001000 	.word	0xe0001000

00009754 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9754:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9756:	f7ff ff19 	bl	958c <_ZN9ClearCore9SysTiming8InstanceEv>
    975a:	4b01      	ldr	r3, [pc, #4]	; (9760 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    975c:	6018      	str	r0, [r3, #0]
    975e:	bd08      	pop	{r3, pc}
    9760:	20001be4 	.word	0x20001be4

00009764 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9766:	4e37      	ldr	r6, [pc, #220]	; (9844 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9768:	6835      	ldr	r5, [r6, #0]
    976a:	f015 0501 	ands.w	r5, r5, #1
    976e:	d002      	beq.n	9776 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9770:	4b35      	ldr	r3, [pc, #212]	; (9848 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9772:	6818      	ldr	r0, [r3, #0]
    9774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9776:	f641 10c4 	movw	r0, #6596	; 0x19c4
    977a:	f009 fd09 	bl	13190 <_Znwj>
    977e:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9780:	2711      	movs	r7, #17
    9782:	2312      	movs	r3, #18
    9784:	6067      	str	r7, [r4, #4]
    9786:	60e3      	str	r3, [r4, #12]
    9788:	2213      	movs	r2, #19
    978a:	210d      	movs	r1, #13
    978c:	2714      	movs	r7, #20
    978e:	230b      	movs	r3, #11
    9790:	6162      	str	r2, [r4, #20]
    9792:	61e1      	str	r1, [r4, #28]
    9794:	6367      	str	r7, [r4, #52]	; 0x34
    9796:	6463      	str	r3, [r4, #68]	; 0x44
    9798:	270c      	movs	r7, #12
    979a:	2302      	movs	r3, #2
    979c:	200f      	movs	r0, #15
    979e:	220e      	movs	r2, #14
    97a0:	211c      	movs	r1, #28
    97a2:	6323      	str	r3, [r4, #48]	; 0x30
    97a4:	63a3      	str	r3, [r4, #56]	; 0x38
    97a6:	6423      	str	r3, [r4, #64]	; 0x40
    97a8:	6523      	str	r3, [r4, #80]	; 0x50
    97aa:	62e0      	str	r0, [r4, #44]	; 0x2c
    97ac:	64e2      	str	r2, [r4, #76]	; 0x4c
    97ae:	6561      	str	r1, [r4, #84]	; 0x54
    97b0:	6267      	str	r7, [r4, #36]	; 0x24
    97b2:	4629      	mov	r1, r5
    97b4:	63e7      	str	r7, [r4, #60]	; 0x3c
    97b6:	65a7      	str	r7, [r4, #88]	; 0x58
    97b8:	6025      	str	r5, [r4, #0]
    97ba:	60a5      	str	r5, [r4, #8]
    97bc:	6125      	str	r5, [r4, #16]
    97be:	61a5      	str	r5, [r4, #24]
    97c0:	6225      	str	r5, [r4, #32]
    97c2:	62a5      	str	r5, [r4, #40]	; 0x28
    97c4:	64a5      	str	r5, [r4, #72]	; 0x48
    97c6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    97ca:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    97ce:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    97d2:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    97d6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    97da:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    97de:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    97e2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    97e6:	f504 7094 	add.w	r0, r4, #296	; 0x128
    97ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
    97ee:	f014 fd55 	bl	1e29c <memset>
    97f2:	4629      	mov	r1, r5
    97f4:	f604 1028 	addw	r0, r4, #2344	; 0x928
    97f8:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    97fc:	f014 fd4e 	bl	1e29c <memset>
    9800:	f641 176c 	movw	r7, #6508	; 0x196c
    9804:	f641 1168 	movw	r1, #6504	; 0x1968
    9808:	19e3      	adds	r3, r4, r7
    980a:	f641 126a 	movw	r2, #6506	; 0x196a
    980e:	20c8      	movs	r0, #200	; 0xc8
    9810:	5260      	strh	r0, [r4, r1]
    9812:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9816:	2108      	movs	r1, #8
    9818:	54a1      	strb	r1, [r4, r2]
    981a:	3004      	adds	r0, #4
    981c:	51e5      	str	r5, [r4, r7]
    981e:	4629      	mov	r1, r5
    9820:	605d      	str	r5, [r3, #4]
    9822:	609d      	str	r5, [r3, #8]
    9824:	60dd      	str	r5, [r3, #12]
    9826:	611d      	str	r5, [r3, #16]
    9828:	615d      	str	r5, [r3, #20]
    982a:	223c      	movs	r2, #60	; 0x3c
    982c:	f014 fd36 	bl	1e29c <memset>
    static EthernetManager *instance = new EthernetManager();
    9830:	4905      	ldr	r1, [pc, #20]	; (9848 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9832:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    9836:	2301      	movs	r3, #1
    9838:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    983a:	6015      	str	r5, [r2, #0]
    983c:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    983e:	6033      	str	r3, [r6, #0]
}
    9840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9842:	bf00      	nop
    9844:	20001bec 	.word	0x20001bec
    9848:	20001bf4 	.word	0x20001bf4

0000984c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    984c:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    984e:	4b3e      	ldr	r3, [pc, #248]	; (9948 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9850:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9854:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9858:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    985c:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    985e:	493b      	ldr	r1, [pc, #236]	; (994c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9860:	f042 0210 	orr.w	r2, r2, #16
    9864:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9866:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9868:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    986a:	6893      	ldr	r3, [r2, #8]
    986c:	0759      	lsls	r1, r3, #29
    986e:	d5fc      	bpl.n	986a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9870:	6813      	ldr	r3, [r2, #0]
    9872:	f36f 1304 	bfc	r3, #4, #1
    9876:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9878:	6b53      	ldr	r3, [r2, #52]	; 0x34
    987a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    987e:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9880:	428b      	cmp	r3, r1
    9882:	d05d      	beq.n	9940 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9884:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9886:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9888:	4c31      	ldr	r4, [pc, #196]	; (9950 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    988a:	492f      	ldr	r1, [pc, #188]	; (9948 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    988c:	f043 0310 	orr.w	r3, r3, #16
    9890:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9892:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9894:	688b      	ldr	r3, [r1, #8]
    9896:	075a      	lsls	r2, r3, #29
    9898:	d5fc      	bpl.n	9894 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    989a:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    989c:	4c2b      	ldr	r4, [pc, #172]	; (994c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    989e:	4a2a      	ldr	r2, [pc, #168]	; (9948 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    98a0:	f36f 1304 	bfc	r3, #4, #1
    98a4:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    98a6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    98a8:	680b      	ldr	r3, [r1, #0]
    98aa:	f043 0310 	orr.w	r3, r3, #16
    98ae:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    98b0:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    98b2:	6893      	ldr	r3, [r2, #8]
    98b4:	075b      	lsls	r3, r3, #29
    98b6:	d5fc      	bpl.n	98b2 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    98b8:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    98ba:	4c26      	ldr	r4, [pc, #152]	; (9954 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    98bc:	4922      	ldr	r1, [pc, #136]	; (9948 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    98be:	f36f 1304 	bfc	r3, #4, #1
    98c2:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    98c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    98c6:	6813      	ldr	r3, [r2, #0]
    98c8:	f043 0310 	orr.w	r3, r3, #16
    98cc:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    98ce:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    98d0:	688b      	ldr	r3, [r1, #8]
    98d2:	075c      	lsls	r4, r3, #29
    98d4:	d5fc      	bpl.n	98d0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    98d6:	680b      	ldr	r3, [r1, #0]
    98d8:	f36f 1304 	bfc	r3, #4, #1
    98dc:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    98de:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    98e0:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    98e2:	b12b      	cbz	r3, 98f0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    98e4:	2301      	movs	r3, #1
    98e6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    98ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    98ee:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    98f0:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    98f2:	4c19      	ldr	r4, [pc, #100]	; (9958 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    98f4:	4a14      	ldr	r2, [pc, #80]	; (9948 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    98f6:	f043 0310 	orr.w	r3, r3, #16
    98fa:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    98fc:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    98fe:	6893      	ldr	r3, [r2, #8]
    9900:	0759      	lsls	r1, r3, #29
    9902:	d5fc      	bpl.n	98fe <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9904:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9906:	4c13      	ldr	r4, [pc, #76]	; (9954 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9908:	490f      	ldr	r1, [pc, #60]	; (9948 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    990a:	f36f 1304 	bfc	r3, #4, #1
    990e:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9910:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9912:	6813      	ldr	r3, [r2, #0]
    9914:	f043 0310 	orr.w	r3, r3, #16
    9918:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    991a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    991c:	688b      	ldr	r3, [r1, #8]
    991e:	075b      	lsls	r3, r3, #29
    9920:	d5fc      	bpl.n	991c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9922:	680b      	ldr	r3, [r1, #0]
    9924:	f36f 1304 	bfc	r3, #4, #1
    9928:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    992a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    992c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9930:	2b07      	cmp	r3, #7
    9932:	d1d7      	bne.n	98e4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9934:	2300      	movs	r3, #0
    9936:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    993a:	f85d 4b04 	ldr.w	r4, [sp], #4
    993e:	4770      	bx	lr
        m_phyInitFailed = true;
    9940:	2301      	movs	r3, #1
    9942:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9946:	4770      	bx	lr
    9948:	42000800 	.word	0x42000800
    994c:	60020000 	.word	0x60020000
    9950:	50028000 	.word	0x50028000
    9954:	606e0000 	.word	0x606e0000
    9958:	506e0700 	.word	0x506e0700

0000995c <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    995c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9960:	4be2      	ldr	r3, [pc, #904]	; (9cec <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    9962:	681a      	ldr	r2, [r3, #0]
    9964:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    9966:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9968:	d503      	bpl.n	9972 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    996a:	681a      	ldr	r2, [r3, #0]
    996c:	0750      	lsls	r0, r2, #29
    996e:	f100 82a2 	bmi.w	9eb6 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    9972:	4ade      	ldr	r2, [pc, #888]	; (9cec <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9974:	48de      	ldr	r0, [pc, #888]	; (9cf0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    9976:	6813      	ldr	r3, [r2, #0]
    9978:	f043 0310 	orr.w	r3, r3, #16
    997c:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    997e:	6853      	ldr	r3, [r2, #4]
    9980:	f043 0301 	orr.w	r3, r3, #1
    9984:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    9986:	6853      	ldr	r3, [r2, #4]
    9988:	f043 0302 	orr.w	r3, r3, #2
    998c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    998e:	6853      	ldr	r3, [r2, #4]
    9990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9994:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    9996:	6853      	ldr	r3, [r2, #4]
    9998:	2104      	movs	r1, #4
    999a:	f361 4394 	bfi	r3, r1, #18, #3
    999e:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    99a0:	68d3      	ldr	r3, [r2, #12]
    99a2:	f36f 0300 	bfc	r3, #0, #1
    99a6:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    99a8:	6913      	ldr	r3, [r2, #16]
    99aa:	f361 0304 	bfi	r3, r1, #0, #5
    99ae:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    99b0:	6913      	ldr	r3, [r2, #16]
    99b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    99b6:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    99b8:	6913      	ldr	r3, [r2, #16]
    99ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    99be:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    99c0:	6915      	ldr	r5, [r2, #16]
    99c2:	2302      	movs	r3, #2
    99c4:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    99c8:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    99cc:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    99ce:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    99d0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    99d4:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    99d8:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    99dc:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    99e0:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    99e4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    99e8:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    99ec:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    99f0:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    99f4:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    99f8:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    99fc:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    9a00:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9a04:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9a08:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    9a0c:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    9a10:	66e3      	str	r3, [r4, #108]	; 0x6c
    9a12:	6763      	str	r3, [r4, #116]	; 0x74
    9a14:	67e3      	str	r3, [r4, #124]	; 0x7c
    9a16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    9a1a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9a1e:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    9a22:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9a26:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9a2a:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    9a2e:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    9a32:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    9a36:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    9a3a:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    9a3e:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    9a42:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    9a46:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    9a4a:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    9a4e:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    9a52:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    9a56:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    9a5a:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    9a5e:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    9a62:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    9a66:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9a6a:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    9a6e:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    9a72:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9a76:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    9a7a:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    9a7e:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9a80:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    9a84:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    9a88:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    9a8c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9a90:	3610      	adds	r6, #16
    9a92:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    9a94:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9a98:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    9a9c:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    9aa0:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9aa2:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    9aa6:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9aaa:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    9aae:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9ab0:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    9ab2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    9ab6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    9aba:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    9abe:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    9ac2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    9ac6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    9aca:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    9ace:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    9ad2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    9ad6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    9ada:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    9ade:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    9ae2:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9ae6:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9aea:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9aee:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    9af0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9af4:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    9af8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    9afc:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    9b00:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    9b04:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    9b08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    9b0c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9b10:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    9b14:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    9b18:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    9b1c:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    9b20:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    9b24:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    9b28:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    9b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9b30:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9b34:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9b38:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9b3c:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9b40:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9b44:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    9b48:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    9b4c:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    9b50:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    9b54:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    9b58:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9b5c:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    9b60:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9b64:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9b66:	6196      	str	r6, [r2, #24]
    9b68:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9b6c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9b70:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    9b72:	6823      	ldr	r3, [r4, #0]
    9b74:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    9b76:	01db      	lsls	r3, r3, #7
    9b78:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9b7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9b80:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    9b82:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    9b86:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    9b8a:	f042 0201 	orr.w	r2, r2, #1
    9b8e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9b92:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9b96:	f011 0f01 	tst.w	r1, #1
    9b9a:	f04f 010b 	mov.w	r1, #11
    9b9e:	bf14      	ite	ne
    9ba0:	f361 1207 	bfine	r2, r1, #4, #4
    9ba4:	f361 0203 	bfieq	r2, r1, #0, #4
    9ba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    9bac:	68a3      	ldr	r3, [r4, #8]
    9bae:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    9bb0:	01db      	lsls	r3, r3, #7
    9bb2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9bb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9bba:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9bbc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9bc0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9bc4:	f041 0101 	orr.w	r1, r1, #1
    9bc8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9bcc:	f012 0f01 	tst.w	r2, #1
    9bd0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9bd4:	f04f 010b 	mov.w	r1, #11
    9bd8:	bf14      	ite	ne
    9bda:	f361 1207 	bfine	r2, r1, #4, #4
    9bde:	f361 0203 	bfieq	r2, r1, #0, #4
    9be2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    9be6:	6923      	ldr	r3, [r4, #16]
    9be8:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    9bea:	01db      	lsls	r3, r3, #7
    9bec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9bf0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9bf4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9bf6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9bfa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9bfe:	f041 0101 	orr.w	r1, r1, #1
    9c02:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9c06:	f012 0f01 	tst.w	r2, #1
    9c0a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9c0e:	f04f 010b 	mov.w	r1, #11
    9c12:	bf14      	ite	ne
    9c14:	f361 1207 	bfine	r2, r1, #4, #4
    9c18:	f361 0203 	bfieq	r2, r1, #0, #4
    9c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    9c20:	69a3      	ldr	r3, [r4, #24]
    9c22:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    9c24:	01db      	lsls	r3, r3, #7
    9c26:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9c2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9c2e:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9c30:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9c34:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9c38:	f041 0101 	orr.w	r1, r1, #1
    9c3c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9c40:	f012 0f01 	tst.w	r2, #1
    9c44:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9c48:	f04f 010b 	mov.w	r1, #11
    9c4c:	bf14      	ite	ne
    9c4e:	f361 1207 	bfine	r2, r1, #4, #4
    9c52:	f361 0203 	bfieq	r2, r1, #0, #4
    9c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    9c5a:	6a23      	ldr	r3, [r4, #32]
    9c5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    9c5e:	01db      	lsls	r3, r3, #7
    9c60:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9c64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9c68:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9c6a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9c6e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9c72:	f041 0101 	orr.w	r1, r1, #1
    9c76:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9c7a:	f012 0f01 	tst.w	r2, #1
    9c7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9c82:	f04f 010b 	mov.w	r1, #11
    9c86:	bf14      	ite	ne
    9c88:	f361 1207 	bfine	r2, r1, #4, #4
    9c8c:	f361 0203 	bfieq	r2, r1, #0, #4
    9c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    9c94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    9c98:	01db      	lsls	r3, r3, #7
    9c9a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9c9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9ca2:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ca4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ca8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9cac:	f041 0101 	orr.w	r1, r1, #1
    9cb0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9cb4:	f012 0f01 	tst.w	r2, #1
    9cb8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9cbc:	f04f 010b 	mov.w	r1, #11
    9cc0:	bf14      	ite	ne
    9cc2:	f361 1207 	bfine	r2, r1, #4, #4
    9cc6:	f361 0203 	bfieq	r2, r1, #0, #4
    9cca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    9cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9cd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    9cd2:	01db      	lsls	r3, r3, #7
    9cd4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9cd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9cdc:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9cde:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ce2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9ce6:	f041 0101 	orr.w	r1, r1, #1
    9cea:	e003      	b.n	9cf4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    9cec:	42000800 	.word	0x42000800
    9cf0:	e000e100 	.word	0xe000e100
    9cf4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9cf8:	f012 0f01 	tst.w	r2, #1
    9cfc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9d00:	f04f 010b 	mov.w	r1, #11
    9d04:	bf14      	ite	ne
    9d06:	f361 1207 	bfine	r2, r1, #4, #4
    9d0a:	f361 0203 	bfieq	r2, r1, #0, #4
    9d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    9d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9d14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    9d16:	01db      	lsls	r3, r3, #7
    9d18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9d20:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d22:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9d26:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9d2a:	f041 0101 	orr.w	r1, r1, #1
    9d2e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d32:	f012 0f01 	tst.w	r2, #1
    9d36:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9d3a:	f04f 010b 	mov.w	r1, #11
    9d3e:	bf14      	ite	ne
    9d40:	f361 1207 	bfine	r2, r1, #4, #4
    9d44:	f361 0203 	bfieq	r2, r1, #0, #4
    9d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    9d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9d4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    9d50:	01db      	lsls	r3, r3, #7
    9d52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9d5a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d5c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9d60:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9d64:	f041 0101 	orr.w	r1, r1, #1
    9d68:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d6c:	f012 0f01 	tst.w	r2, #1
    9d70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9d74:	f04f 010b 	mov.w	r1, #11
    9d78:	bf14      	ite	ne
    9d7a:	f361 1207 	bfine	r2, r1, #4, #4
    9d7e:	f361 0203 	bfieq	r2, r1, #0, #4
    9d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    9d86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9d88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    9d8a:	01db      	lsls	r3, r3, #7
    9d8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9d90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9d94:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9d96:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9d9a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9d9e:	f041 0101 	orr.w	r1, r1, #1
    9da2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9da6:	f012 0f01 	tst.w	r2, #1
    9daa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9dae:	f04f 010b 	mov.w	r1, #11
    9db2:	bf14      	ite	ne
    9db4:	f361 1207 	bfine	r2, r1, #4, #4
    9db8:	f361 0203 	bfieq	r2, r1, #0, #4
    9dbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    9dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9dc2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    9dc4:	01db      	lsls	r3, r3, #7
    9dc6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    9dca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    9dce:	1850      	adds	r0, r2, r1
    9dd0:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9dd2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    9dd6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9dda:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9dde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9de2:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9de6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9dea:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    9dec:	bf14      	ite	ne
    9dee:	f36f 1007 	bfcne	r0, #4, #4
    9df2:	f367 0003 	bfieq	r0, r7, #0, #4
    9df6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9dfa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    9dfe:	4932      	ldr	r1, [pc, #200]	; (9ec8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    9e00:	4a32      	ldr	r2, [pc, #200]	; (9ecc <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    9e02:	f040 0001 	orr.w	r0, r0, #1
    9e06:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    9e0a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    9e0e:	f040 0002 	orr.w	r0, r0, #2
    9e12:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    9e16:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    9e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9e1c:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    9e1e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    9e20:	f043 0302 	orr.w	r3, r3, #2
    9e24:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    9e26:	7813      	ldrb	r3, [r2, #0]
    9e28:	f36f 0341 	bfc	r3, #1, #1
    9e2c:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    9e2e:	6853      	ldr	r3, [r2, #4]
    9e30:	0799      	lsls	r1, r3, #30
    9e32:	d4fc      	bmi.n	9e2e <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    9e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    9e36:	4925      	ldr	r1, [pc, #148]	; (9ecc <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    9e38:	08c3      	lsrs	r3, r0, #3
    9e3a:	009b      	lsls	r3, r3, #2
    9e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    9e40:	2701      	movs	r7, #1
    9e42:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    9e46:	4087      	lsls	r7, r0
    9e48:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    9e4a:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    9e4e:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    9e50:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    9e52:	f04f 0e0f 	mov.w	lr, #15
    9e56:	fa0e fe00 	lsl.w	lr, lr, r0
    9e5a:	ea27 070e 	bic.w	r7, r7, lr
    9e5e:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    9e60:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    9e64:	2705      	movs	r7, #5
    9e66:	fa07 f000 	lsl.w	r0, r7, r0
    9e6a:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    9e6e:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    9e70:	7813      	ldrb	r3, [r2, #0]
    9e72:	f043 0302 	orr.w	r3, r3, #2
    9e76:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    9e78:	684b      	ldr	r3, [r1, #4]
    9e7a:	079b      	lsls	r3, r3, #30
    9e7c:	d4fc      	bmi.n	9e78 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    9e7e:	4620      	mov	r0, r4
    9e80:	f7ff fce4 	bl	984c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    9e84:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    9e88:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    9e8c:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9e90:	4b0f      	ldr	r3, [pc, #60]	; (9ed0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    9e92:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    9e94:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    9e98:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    9e9a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    9e9e:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9ea2:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    9ea6:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9ea8:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    9eaa:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9eac:	6818      	ldr	r0, [r3, #0]
}
    9eae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9eb2:	f007 bd8f 	b.w	119d4 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    9eb6:	681a      	ldr	r2, [r3, #0]
    9eb8:	f36f 02c3 	bfc	r2, #3, #1
    9ebc:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    9ebe:	681a      	ldr	r2, [r3, #0]
    9ec0:	f36f 0282 	bfc	r2, #2, #1
    9ec4:	601a      	str	r2, [r3, #0]
    9ec6:	e554      	b.n	9972 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    9ec8:	42000800 	.word	0x42000800
    9ecc:	40002800 	.word	0x40002800
    9ed0:	20001f24 	.word	0x20001f24

00009ed4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    9ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    9ed8:	6d85      	ldr	r5, [r0, #88]	; 0x58
    9eda:	4ca1      	ldr	r4, [pc, #644]	; (a160 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    9edc:	4ba1      	ldr	r3, [pc, #644]	; (a164 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ede:	49a2      	ldr	r1, [pc, #648]	; (a168 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    9ee0:	2201      	movs	r2, #1
    9ee2:	40aa      	lsls	r2, r5
    9ee4:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    9ee6:	681a      	ldr	r2, [r3, #0]
    9ee8:	f042 0210 	orr.w	r2, r2, #16
    9eec:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9eee:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ef0:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ef2:	6893      	ldr	r3, [r2, #8]
    9ef4:	075d      	lsls	r5, r3, #29
    9ef6:	d5fc      	bpl.n	9ef2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    9ef8:	6813      	ldr	r3, [r2, #0]
    9efa:	f36f 1304 	bfc	r3, #4, #1
    9efe:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9f00:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    9f02:	07cc      	lsls	r4, r1, #31
    9f04:	d415      	bmi.n	9f32 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    9f06:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    9f08:	bf44      	itt	mi
    9f0a:	2300      	movmi	r3, #0
    9f0c:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    9f10:	078c      	lsls	r4, r1, #30
    9f12:	d401      	bmi.n	9f18 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    9f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f18:	4b92      	ldr	r3, [pc, #584]	; (a164 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    9f1a:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    9f1c:	2101      	movs	r1, #1
    9f1e:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f22:	0711      	lsls	r1, r2, #28
    9f24:	d5f6      	bpl.n	9f14 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    9f26:	681a      	ldr	r2, [r3, #0]
    9f28:	0752      	lsls	r2, r2, #29
    9f2a:	f100 8121 	bmi.w	a170 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    9f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    9f32:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f34:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    9f36:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f38:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    9f3a:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    9f3e:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9f42:	d56d      	bpl.n	a020 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    9f44:	6813      	ldr	r3, [r2, #0]
    9f46:	075f      	lsls	r7, r3, #29
    9f48:	d56a      	bpl.n	a020 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    9f4a:	6813      	ldr	r3, [r2, #0]
    9f4c:	f36f 03c3 	bfc	r3, #3, #1
    9f50:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    9f52:	6813      	ldr	r3, [r2, #0]
    9f54:	f36f 0382 	bfc	r3, #2, #1
    9f58:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    9f5a:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    9f5e:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    9f62:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    9f66:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    9f6a:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    9f6e:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    9f72:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    9f76:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    9f7a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9f7e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9f82:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9f86:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9f92:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    9f96:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    9f9a:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    9f9e:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    9fa2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    9fa6:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    9faa:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    9fae:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    9fb2:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    9fb6:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    9fba:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    9fbe:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    9fc2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9fce:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9fd2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9fd6:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9fda:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9fde:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9fe2:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    9fe6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    9fea:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    9fee:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    9ff2:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    9ff6:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    9ffa:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    9ffe:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a002:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a006:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a00a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a012:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a014:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a018:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a01c:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a020:	4b50      	ldr	r3, [pc, #320]	; (a164 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a022:	4d52      	ldr	r5, [pc, #328]	; (a16c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a024:	681a      	ldr	r2, [r3, #0]
    a026:	f042 0210 	orr.w	r2, r2, #16
    a02a:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a02c:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a02e:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a030:	6893      	ldr	r3, [r2, #8]
    a032:	075e      	lsls	r6, r3, #29
    a034:	d5fc      	bpl.n	a030 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a036:	6813      	ldr	r3, [r2, #0]
    a038:	f36f 1304 	bfc	r3, #4, #1
    a03c:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a03e:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a040:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a042:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a044:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a048:	f366 0500 	bfi	r5, r6, #0, #1
    a04c:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a04e:	6855      	ldr	r5, [r2, #4]
    a050:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a054:	f363 0541 	bfi	r5, r3, #1, #1
    a058:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a05a:	6813      	ldr	r3, [r2, #0]
    a05c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a060:	b96b      	cbnz	r3, a07e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a062:	429c      	cmp	r4, r3
    a064:	f43f af4f 	beq.w	9f06 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a068:	b16c      	cbz	r4, a086 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a06a:	4b3e      	ldr	r3, [pc, #248]	; (a164 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a06c:	681a      	ldr	r2, [r3, #0]
    a06e:	f042 0208 	orr.w	r2, r2, #8
    a072:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a074:	681a      	ldr	r2, [r3, #0]
    a076:	f042 0204 	orr.w	r2, r2, #4
    a07a:	601a      	str	r2, [r3, #0]
    a07c:	e743      	b.n	9f06 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a07e:	6813      	ldr	r3, [r2, #0]
    a080:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a084:	e7ed      	b.n	a062 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a086:	4b37      	ldr	r3, [pc, #220]	; (a164 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a088:	681a      	ldr	r2, [r3, #0]
    a08a:	f364 02c3 	bfi	r2, r4, #3, #1
    a08e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a090:	681a      	ldr	r2, [r3, #0]
    a092:	f364 0282 	bfi	r2, r4, #2, #1
    a096:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a098:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a09c:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a0a0:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a0a4:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a0a8:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a0ac:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a0b0:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a0b4:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a0b8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a0bc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a0c0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a0c4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a0c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a0d0:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a0d4:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a0d8:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a0dc:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a0e0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a0e4:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a0e8:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a0ec:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a0f0:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a0f4:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a0f8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a0fc:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a108:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a10c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a110:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a114:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a118:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a11c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a120:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a124:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a128:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a12c:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a130:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a134:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a138:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a13c:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a140:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a144:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a148:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a14c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a154:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a158:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a15c:	e6d3      	b.n	9f06 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a15e:	bf00      	nop
    a160:	40002800 	.word	0x40002800
    a164:	42000800 	.word	0x42000800
    a168:	606e0000 	.word	0x606e0000
    a16c:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a170:	681a      	ldr	r2, [r3, #0]
    a172:	f36f 02c3 	bfc	r2, #3, #1
    a176:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a178:	681a      	ldr	r2, [r3, #0]
    a17a:	f36f 0282 	bfc	r2, #2, #1
    a17e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a180:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a184:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a188:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a18c:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a190:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a194:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a198:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a19c:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a1a0:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a1a4:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a1a8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1ac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1b8:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a1bc:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a1c0:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a1c4:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a1c8:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a1cc:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a1d0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a1d4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a1d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1e4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1e8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1ec:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1f0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1f4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1f8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1fc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a200:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a204:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a208:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a20c:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a210:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a214:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a218:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a21c:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a220:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a224:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a228:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a22c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a238:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a23a:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a23e:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a242:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a24a:	bf00      	nop

0000a24c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a24c:	4b0b      	ldr	r3, [pc, #44]	; (a27c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a24e:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a250:	695a      	ldr	r2, [r3, #20]
    a252:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a254:	6a1a      	ldr	r2, [r3, #32]
    a256:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a25a:	9a00      	ldr	r2, [sp, #0]
    a25c:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a25e:	bf44      	itt	mi
    a260:	9a00      	ldrmi	r2, [sp, #0]
    a262:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a264:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a266:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a268:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a26a:	bf44      	itt	mi
    a26c:	2301      	movmi	r3, #1
    a26e:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a272:	4b02      	ldr	r3, [pc, #8]	; (a27c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a274:	621a      	str	r2, [r3, #32]
}
    a276:	b002      	add	sp, #8
    a278:	4770      	bx	lr
    a27a:	bf00      	nop
    a27c:	42000800 	.word	0x42000800

0000a280 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a280:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a282:	f7ff fa6f 	bl	9764 <_ZN9ClearCore15EthernetManager8InstanceEv>
    a286:	4b01      	ldr	r3, [pc, #4]	; (a28c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a288:	6018      	str	r0, [r3, #0]
    a28a:	bd08      	pop	{r3, pc}
    a28c:	20001bf0 	.word	0x20001bf0

0000a290 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a292:	4f46      	ldr	r7, [pc, #280]	; (a3ac <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a294:	f8df e118 	ldr.w	lr, [pc, #280]	; a3b0 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a298:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a29a:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a29c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a29e:	4625      	mov	r5, r4
    a2a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a2a2:	e896 0003 	ldmia.w	r6, {r0, r1}
    a2a6:	f107 0618 	add.w	r6, r7, #24
    a2aa:	e885 0003 	stmia.w	r5, {r0, r1}
    a2ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a2b0:	f104 0518 	add.w	r5, r4, #24
    a2b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a2b6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a2ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a2be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a2c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a2c4:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a2c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a2cc:	2608      	movs	r6, #8
    a2ce:	257f      	movs	r5, #127	; 0x7f
    a2d0:	23c8      	movs	r3, #200	; 0xc8
    a2d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a2d6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a2da:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a2de:	2500      	movs	r5, #0
    a2e0:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a2e4:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a2e6:	21fe      	movs	r1, #254	; 0xfe
    a2e8:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a2ec:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a2f0:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a2f4:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a2f6:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a2f8:	4629      	mov	r1, r5
    a2fa:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a2fc:	6563      	str	r3, [r4, #84]	; 0x54
    a2fe:	65a5      	str	r5, [r4, #88]	; 0x58
    a300:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a302:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a306:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a30a:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a30c:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a310:	67a5      	str	r5, [r4, #120]	; 0x78
    a312:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a316:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a318:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a31a:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a31e:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a322:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a326:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a32a:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a32e:	2240      	movs	r2, #64	; 0x40
    a330:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a334:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a338:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a33c:	f013 ffae 	bl	1e29c <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a340:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a344:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a348:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a34c:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a350:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a354:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    a358:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    a35c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    a360:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    a364:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a368:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    a36c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    a370:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    a374:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    a378:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    a37c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    a380:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    a384:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    a388:	4620      	mov	r0, r4
    m_lastOutput(0) {
    a38a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    a38e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    a392:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a396:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    a39a:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    a39e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a3a2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a3a6:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3ac:	00022f6c 	.word	0x00022f6c
    a3b0:	0fe080fc 	.word	0x0fe080fc

0000a3b4 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    a3b4:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    a3b6:	4a64      	ldr	r2, [pc, #400]	; (a548 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a3b8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a3bc:	f36f 1386 	bfc	r3, #6, #1
    a3c0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a3c4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a3c8:	065d      	lsls	r5, r3, #25
    a3ca:	d4fb      	bmi.n	a3c4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    a3cc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a3d0:	495d      	ldr	r1, [pc, #372]	; (a548 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a3d2:	2405      	movs	r4, #5
    a3d4:	f364 0303 	bfi	r3, r4, #0, #4
    a3d8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a3dc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a3e4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a3e8:	684b      	ldr	r3, [r1, #4]
    a3ea:	f013 0314 	ands.w	r3, r3, #20
    a3ee:	d1fb      	bne.n	a3e8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a3f0:	4d56      	ldr	r5, [pc, #344]	; (a54c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a3f2:	4957      	ldr	r1, [pc, #348]	; (a550 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a3f4:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a3f6:	4a57      	ldr	r2, [pc, #348]	; (a554 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a3f8:	f044 0404 	orr.w	r4, r4, #4
    a3fc:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a3fe:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    a402:	2402      	movs	r4, #2
    a404:	f364 1507 	bfi	r5, r4, #4, #4
    a408:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    a40c:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    a410:	f045 0501 	orr.w	r5, r5, #1
    a414:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    a418:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a41c:	f364 1507 	bfi	r5, r4, #4, #4
    a420:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    a424:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    a428:	f045 0501 	orr.w	r5, r5, #1
    a42c:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    a430:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a434:	f364 0503 	bfi	r5, r4, #0, #4
    a438:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a43c:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a440:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a442:	f045 0501 	orr.w	r5, r5, #1
    a446:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    a44a:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a44e:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    a452:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    a456:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a45a:	6811      	ldr	r1, [r2, #0]
    a45c:	f363 0141 	bfi	r1, r3, #1, #1
    a460:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a462:	69d3      	ldr	r3, [r2, #28]
    a464:	f013 0302 	ands.w	r3, r3, #2
    a468:	d1fb      	bne.n	a462 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a46a:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a46c:	4939      	ldr	r1, [pc, #228]	; (a554 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a46e:	f044 040c 	orr.w	r4, r4, #12
    a472:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    a474:	6814      	ldr	r4, [r2, #0]
    a476:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    a47a:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    a47e:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    a480:	6854      	ldr	r4, [r2, #4]
    a482:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    a486:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    a488:	6894      	ldr	r4, [r2, #8]
    a48a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    a48e:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    a490:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    a492:	6813      	ldr	r3, [r2, #0]
    a494:	f043 0302 	orr.w	r3, r3, #2
    a498:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a49a:	69cb      	ldr	r3, [r1, #28]
    a49c:	079c      	lsls	r4, r3, #30
    a49e:	d4fc      	bmi.n	a49a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a4a0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a4a4:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    a4a8:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a4ac:	4a29      	ldr	r2, [pc, #164]	; (a554 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    a4ae:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a4b0:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a4b2:	7e13      	ldrb	r3, [r2, #24]
    a4b4:	0799      	lsls	r1, r3, #30
    a4b6:	d5fc      	bpl.n	a4b2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a4b8:	4b25      	ldr	r3, [pc, #148]	; (a550 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a4ba:	4a26      	ldr	r2, [pc, #152]	; (a554 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a4bc:	2104      	movs	r1, #4
    a4be:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a4c2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a4c6:	7e13      	ldrb	r3, [r2, #24]
    a4c8:	075b      	lsls	r3, r3, #29
    a4ca:	d5fc      	bpl.n	a4c6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a4cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    a4ce:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a4d2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    a4d6:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a4da:	4063      	eors	r3, r4
    a4dc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a4e0:	bb7a      	cbnz	r2, a542 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a4e2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a4e6:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    a4ea:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a4ee:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    a4f2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    a4f6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    a4fa:	4059      	eors	r1, r3
    a4fc:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a4fe:	404b      	eors	r3, r1
    a500:	ea83 0105 	eor.w	r1, r3, r5
    a504:	4031      	ands	r1, r6
    a506:	4059      	eors	r1, r3
    a508:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    a50c:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    a510:	404a      	eors	r2, r1
    a512:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a514:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    a516:	b135      	cbz	r5, a526 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    a518:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a51c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a520:	b10a      	cbz	r2, a526 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    a522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    a526:	4d0b      	ldr	r5, [pc, #44]	; (a554 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a528:	4909      	ldr	r1, [pc, #36]	; (a550 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    a52a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a52e:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a530:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    a532:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    a534:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a536:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    a53a:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    a53c:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    a540:	4770      	bx	lr
        output = m_altOutput;
    a542:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    a546:	e7ee      	b.n	a526 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    a548:	40001c00 	.word	0x40001c00
    a54c:	40000800 	.word	0x40000800
    a550:	41008000 	.word	0x41008000
    a554:	43000800 	.word	0x43000800

0000a558 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    a558:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    a55c:	2b00      	cmp	r3, #0
    a55e:	d078      	beq.n	a652 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    a560:	6d83      	ldr	r3, [r0, #88]	; 0x58
    a562:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    a564:	b4f0      	push	{r4, r5, r6, r7}
    a566:	6582      	str	r2, [r0, #88]	; 0x58
    a568:	b90b      	cbnz	r3, a56e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    a56a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    a56c:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    a56e:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    a570:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    a574:	428a      	cmp	r2, r1
    a576:	bf34      	ite	cc
    a578:	220c      	movcc	r2, #12
    a57a:	2208      	movcs	r2, #8
    a57c:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    a57e:	3301      	adds	r3, #1
    a580:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    a582:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    a584:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    a588:	2b3e      	cmp	r3, #62	; 0x3e
    a58a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    a58e:	d961      	bls.n	a654 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    a590:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    a594:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    a598:	2400      	movs	r4, #0
    a59a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    a59e:	2b00      	cmp	r3, #0
    a5a0:	f000 817a 	beq.w	a898 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    a5a4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    a5a8:	3101      	adds	r1, #1
    a5aa:	b2c9      	uxtb	r1, r1
    a5ac:	4299      	cmp	r1, r3
    a5ae:	460a      	mov	r2, r1
    a5b0:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    a5b4:	f2c0 817e 	blt.w	a8b4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    a5b8:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    a5bc:	4623      	mov	r3, r4
    a5be:	e04c      	b.n	a65a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    a5c0:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    a5c2:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    a5c4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a5c8:	49b1      	ldr	r1, [pc, #708]	; (a890 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    a5ca:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a5ce:	7e0b      	ldrb	r3, [r1, #24]
    a5d0:	079c      	lsls	r4, r3, #30
    a5d2:	d5fc      	bpl.n	a5ce <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a5d4:	4baf      	ldr	r3, [pc, #700]	; (a894 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a5d6:	49ae      	ldr	r1, [pc, #696]	; (a890 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a5d8:	2404      	movs	r4, #4
    a5da:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a5de:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a5e2:	7e0b      	ldrb	r3, [r1, #24]
    a5e4:	075b      	lsls	r3, r3, #29
    a5e6:	d5fc      	bpl.n	a5e2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a5e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a5ea:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    a5ee:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a5f2:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    a5f6:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a5fa:	4073      	eors	r3, r6
    a5fc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a600:	2900      	cmp	r1, #0
    a602:	f040 80d4 	bne.w	a7ae <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a606:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a60a:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a60e:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    a612:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    a616:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a61a:	405a      	eors	r2, r3
    a61c:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a61e:	4053      	eors	r3, r2
    a620:	ea83 0204 	eor.w	r2, r3, r4
    a624:	402a      	ands	r2, r5
    a626:	405a      	eors	r2, r3
    a628:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    a62c:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    a630:	4051      	eors	r1, r2
    a632:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a634:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    a636:	b134      	cbz	r4, a646 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    a638:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a63c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a640:	b10a      	cbz	r2, a646 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    a642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    a646:	4a92      	ldr	r2, [pc, #584]	; (a890 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    a648:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a64c:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    a64e:	6293      	str	r3, [r2, #40]	; 0x28
}
    a650:	bcf0      	pop	{r4, r5, r6, r7}
    a652:	4770      	bx	lr
    a654:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a658:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    a65a:	4293      	cmp	r3, r2
    a65c:	bfb4      	ite	lt
    a65e:	230c      	movlt	r3, #12
    a660:	2308      	movge	r3, #8
    a662:	4403      	add	r3, r0
            if (!m_activeMask) {
    a664:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    a668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    a66a:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    a66e:	2900      	cmp	r1, #0
    a670:	d0a6      	beq.n	a5c0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    a672:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    a676:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    a678:	3301      	adds	r3, #1
    a67a:	b2db      	uxtb	r3, r3
    a67c:	2b3f      	cmp	r3, #63	; 0x3f
    a67e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    a682:	f200 8097 	bhi.w	a7b4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    a686:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    a68a:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    a68c:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    a68e:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    a690:	d004      	beq.n	a69c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    a692:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    a696:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a698:	bfb8      	it	lt
    a69a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a69c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    a6a0:	420a      	tst	r2, r1
    a6a2:	d004      	beq.n	a6ae <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    a6a4:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    a6a8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a6aa:	bfb8      	it	lt
    a6ac:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a6ae:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    a6b2:	420a      	tst	r2, r1
    a6b4:	d004      	beq.n	a6c0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    a6b6:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    a6ba:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a6bc:	bfb8      	it	lt
    a6be:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a6c0:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    a6c4:	420a      	tst	r2, r1
    a6c6:	d004      	beq.n	a6d2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    a6c8:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    a6cc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a6ce:	bfb8      	it	lt
    a6d0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a6d2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    a6d6:	420a      	tst	r2, r1
    a6d8:	d004      	beq.n	a6e4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    a6da:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    a6de:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a6e0:	bfb8      	it	lt
    a6e2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a6e4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    a6e8:	420a      	tst	r2, r1
    a6ea:	d004      	beq.n	a6f6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    a6ec:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    a6f0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a6f2:	bfb8      	it	lt
    a6f4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a6f6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    a6fa:	420a      	tst	r2, r1
    a6fc:	d004      	beq.n	a708 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    a6fe:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    a702:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a704:	bfb8      	it	lt
    a706:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a708:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    a70c:	420a      	tst	r2, r1
    a70e:	d004      	beq.n	a71a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    a710:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    a714:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a716:	bfb8      	it	lt
    a718:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a71a:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    a71e:	420a      	tst	r2, r1
    a720:	d004      	beq.n	a72c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    a722:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    a726:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a728:	bfb8      	it	lt
    a72a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a72c:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    a730:	420a      	tst	r2, r1
    a732:	d004      	beq.n	a73e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    a734:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    a738:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a73a:	bfb8      	it	lt
    a73c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a73e:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    a742:	420a      	tst	r2, r1
    a744:	d004      	beq.n	a750 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    a746:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    a74a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a74c:	bfb8      	it	lt
    a74e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a750:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    a754:	420a      	tst	r2, r1
    a756:	d004      	beq.n	a762 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    a758:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    a75c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a75e:	bfb8      	it	lt
    a760:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a762:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    a766:	420a      	tst	r2, r1
    a768:	d004      	beq.n	a774 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    a76a:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    a76e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a770:	bfb8      	it	lt
    a772:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a774:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    a778:	420a      	tst	r2, r1
    a77a:	d004      	beq.n	a786 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    a77c:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    a780:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a782:	bfb8      	it	lt
    a784:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a786:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    a78a:	420a      	tst	r2, r1
    a78c:	d004      	beq.n	a798 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    a78e:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    a792:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a794:	bfb8      	it	lt
    a796:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a798:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    a79c:	4211      	tst	r1, r2
    a79e:	d004      	beq.n	a7aa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    a7a0:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    a7a4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a7a6:	bfb8      	it	lt
    a7a8:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    a7aa:	6782      	str	r2, [r0, #120]	; 0x78
    a7ac:	e70c      	b.n	a5c8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    a7ae:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    a7b2:	e748      	b.n	a646 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    a7b4:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    a7b6:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    a7ba:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    a7be:	d004      	beq.n	a7ca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    a7c0:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a7c4:	2a00      	cmp	r2, #0
    a7c6:	f040 80cb 	bne.w	a960 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    a7ca:	078b      	lsls	r3, r1, #30
    a7cc:	d504      	bpl.n	a7d8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    a7ce:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	f040 80be 	bne.w	a954 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    a7d8:	074f      	lsls	r7, r1, #29
    a7da:	d504      	bpl.n	a7e6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    a7dc:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	f040 80b1 	bne.w	a948 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    a7e6:	070e      	lsls	r6, r1, #28
    a7e8:	d504      	bpl.n	a7f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    a7ea:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	f040 80a4 	bne.w	a93c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    a7f4:	06cd      	lsls	r5, r1, #27
    a7f6:	d504      	bpl.n	a802 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    a7f8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	f040 8097 	bne.w	a930 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    a802:	068c      	lsls	r4, r1, #26
    a804:	d504      	bpl.n	a810 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    a806:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    a80a:	2b00      	cmp	r3, #0
    a80c:	f040 808a 	bne.w	a924 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    a810:	064b      	lsls	r3, r1, #25
    a812:	d503      	bpl.n	a81c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    a814:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    a818:	2b00      	cmp	r3, #0
    a81a:	d17d      	bne.n	a918 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    a81c:	060f      	lsls	r7, r1, #24
    a81e:	d503      	bpl.n	a828 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    a820:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    a824:	2b00      	cmp	r3, #0
    a826:	d171      	bne.n	a90c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    a828:	05ce      	lsls	r6, r1, #23
    a82a:	d503      	bpl.n	a834 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    a82c:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    a830:	2b00      	cmp	r3, #0
    a832:	d165      	bne.n	a900 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    a834:	058d      	lsls	r5, r1, #22
    a836:	d503      	bpl.n	a840 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    a838:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    a83c:	2b00      	cmp	r3, #0
    a83e:	d159      	bne.n	a8f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    a840:	054c      	lsls	r4, r1, #21
    a842:	d503      	bpl.n	a84c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    a844:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    a848:	2b00      	cmp	r3, #0
    a84a:	d14d      	bne.n	a8e8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    a84c:	050b      	lsls	r3, r1, #20
    a84e:	d503      	bpl.n	a858 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    a850:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    a854:	2b00      	cmp	r3, #0
    a856:	d141      	bne.n	a8dc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    a858:	04cf      	lsls	r7, r1, #19
    a85a:	d503      	bpl.n	a864 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    a85c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    a860:	2b00      	cmp	r3, #0
    a862:	d135      	bne.n	a8d0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    a864:	048e      	lsls	r6, r1, #18
    a866:	d502      	bpl.n	a86e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    a868:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    a86c:	bb53      	cbnz	r3, a8c4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    a86e:	044d      	lsls	r5, r1, #17
    a870:	d502      	bpl.n	a878 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    a872:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    a876:	b9fb      	cbnz	r3, a8b8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    a878:	0bcb      	lsrs	r3, r1, #15
    a87a:	d096      	beq.n	a7aa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    a87c:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    a880:	2b00      	cmp	r3, #0
    a882:	d092      	beq.n	a7aa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    a884:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    a888:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    a88c:	430a      	orrs	r2, r1
    a88e:	e78c      	b.n	a7aa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    a890:	43000800 	.word	0x43000800
    a894:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    a898:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    a89c:	3901      	subs	r1, #1
    a89e:	b2c9      	uxtb	r1, r1
    a8a0:	42a1      	cmp	r1, r4
    a8a2:	460a      	mov	r2, r1
    a8a4:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    a8a8:	f73f aed7 	bgt.w	a65a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    a8ac:	2101      	movs	r1, #1
    a8ae:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    a8b2:	e6d2      	b.n	a65a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    a8b4:	4623      	mov	r3, r4
    a8b6:	e6d0      	b.n	a65a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    a8b8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    a8bc:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    a8c0:	4322      	orrs	r2, r4
    a8c2:	e7d9      	b.n	a878 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    a8c4:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    a8c8:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    a8cc:	4322      	orrs	r2, r4
    a8ce:	e7ce      	b.n	a86e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    a8d0:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    a8d4:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    a8d8:	4322      	orrs	r2, r4
    a8da:	e7c3      	b.n	a864 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    a8dc:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    a8e0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    a8e4:	4322      	orrs	r2, r4
    a8e6:	e7b7      	b.n	a858 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    a8e8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    a8ec:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    a8f0:	4322      	orrs	r2, r4
    a8f2:	e7ab      	b.n	a84c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    a8f4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    a8f8:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    a8fc:	4322      	orrs	r2, r4
    a8fe:	e79f      	b.n	a840 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    a900:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    a904:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    a908:	4322      	orrs	r2, r4
    a90a:	e793      	b.n	a834 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    a90c:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    a910:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    a914:	4322      	orrs	r2, r4
    a916:	e787      	b.n	a828 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    a918:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    a91c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    a920:	4322      	orrs	r2, r4
    a922:	e77b      	b.n	a81c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    a924:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    a928:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    a92c:	4322      	orrs	r2, r4
    a92e:	e76f      	b.n	a810 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    a930:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    a934:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    a938:	4322      	orrs	r2, r4
    a93a:	e762      	b.n	a802 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    a93c:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    a940:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    a944:	4322      	orrs	r2, r4
    a946:	e755      	b.n	a7f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    a948:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    a94c:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    a950:	4322      	orrs	r2, r4
    a952:	e748      	b.n	a7e6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    a954:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    a958:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    a95c:	4322      	orrs	r2, r4
    a95e:	e73b      	b.n	a7d8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    a960:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    a964:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    a968:	e72f      	b.n	a7ca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    a96a:	bf00      	nop

0000a96c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    a970:	2301      	movs	r3, #1
    a972:	f100 0834 	add.w	r8, r0, #52	; 0x34
    a976:	4e4d      	ldr	r6, [pc, #308]	; (aaac <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    a978:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    a97c:	b083      	sub	sp, #12
    a97e:	4681      	mov	r9, r0
    m_useAltOutput = true;
    a980:	4645      	mov	r5, r8
    a982:	f100 0444 	add.w	r4, r0, #68	; 0x44
    a986:	2200      	movs	r2, #0
    a988:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    a98a:	f855 3b04 	ldr.w	r3, [r5], #4
    a98e:	4313      	orrs	r3, r2
    a990:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    a994:	4630      	mov	r0, r6
    a996:	4639      	mov	r1, r7
    a998:	f7fe febe 	bl	9718 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    a99c:	42a5      	cmp	r5, r4
    a99e:	d002      	beq.n	a9a6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    a9a0:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    a9a4:	e7f1      	b.n	a98a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    a9a6:	f109 0318 	add.w	r3, r9, #24
    a9aa:	4e40      	ldr	r6, [pc, #256]	; (aaac <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    a9ac:	9301      	str	r3, [sp, #4]
    a9ae:	469b      	mov	fp, r3
    a9b0:	f04f 0a00 	mov.w	sl, #0
    a9b4:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    a9b6:	f1ba 0f06 	cmp.w	sl, #6
    a9ba:	4630      	mov	r0, r6
    a9bc:	4639      	mov	r1, r7
    a9be:	f10a 0a01 	add.w	sl, sl, #1
    a9c2:	d148      	bne.n	aa56 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    a9c4:	f8db 2000 	ldr.w	r2, [fp]
    a9c8:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    a9cc:	4837      	ldr	r0, [pc, #220]	; (aaac <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    a9ce:	4313      	orrs	r3, r2
    a9d0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    a9d4:	2100      	movs	r1, #0
    a9d6:	f7fe fe9f 	bl	9718 <Delay_cycles>
    a9da:	4835      	ldr	r0, [pc, #212]	; (aab0 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    a9dc:	4e33      	ldr	r6, [pc, #204]	; (aaac <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    a9de:	2100      	movs	r1, #0
    a9e0:	f7fe fe9a 	bl	9718 <Delay_cycles>
    a9e4:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    a9e6:	f858 2b04 	ldr.w	r2, [r8], #4
    a9ea:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    a9ee:	ea23 0302 	bic.w	r3, r3, r2
    a9f2:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    a9f6:	4630      	mov	r0, r6
    a9f8:	4639      	mov	r1, r7
    a9fa:	f7fe fe8d 	bl	9718 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    a9fe:	4545      	cmp	r5, r8
    aa00:	d1f1      	bne.n	a9e6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    aa02:	f3bf 8f5b 	dmb	ish
    aa06:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    aa0a:	e853 2f00 	ldrex	r2, [r3]
    aa0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    aa12:	e843 2100 	strex	r1, r2, [r3]
    aa16:	2900      	cmp	r1, #0
    aa18:	d1f7      	bne.n	aa0a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    aa1a:	f3bf 8f5b 	dmb	ish
    aa1e:	4e23      	ldr	r6, [pc, #140]	; (aaac <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    aa20:	2500      	movs	r5, #0
    aa22:	2700      	movs	r7, #0
    aa24:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    aa26:	2d06      	cmp	r5, #6
    aa28:	461a      	mov	r2, r3
    aa2a:	4630      	mov	r0, r6
    aa2c:	4639      	mov	r1, r7
    aa2e:	f105 0501 	add.w	r5, r5, #1
    aa32:	d122      	bne.n	aa7a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    aa34:	681a      	ldr	r2, [r3, #0]
    aa36:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    aa3a:	481c      	ldr	r0, [pc, #112]	; (aaac <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    aa3c:	ea23 0302 	bic.w	r3, r3, r2
    aa40:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    aa44:	2100      	movs	r1, #0
    aa46:	f7fe fe67 	bl	9718 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    aa4a:	2300      	movs	r3, #0
    aa4c:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    aa50:	b003      	add	sp, #12
    aa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    aa56:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    aa5a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    aa5e:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    aa62:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    aa64:	4313      	orrs	r3, r2
    aa66:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    aa6a:	f7fe fe55 	bl	9718 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    aa6e:	f1ba 0f07 	cmp.w	sl, #7
    aa72:	f10b 0b04 	add.w	fp, fp, #4
    aa76:	d19e      	bne.n	a9b6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    aa78:	e7af      	b.n	a9da <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    aa7a:	f853 3c18 	ldr.w	r3, [r3, #-24]
    aa7e:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    aa82:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    aa84:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    aa88:	ea23 0302 	bic.w	r3, r3, r2
    aa8c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    aa90:	9b01      	ldr	r3, [sp, #4]
    aa92:	3304      	adds	r3, #4
    aa94:	9301      	str	r3, [sp, #4]
    aa96:	f7fe fe3f 	bl	9718 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    aa9a:	2d07      	cmp	r5, #7
    aa9c:	d1c2      	bne.n	aa24 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    aa9e:	2300      	movs	r3, #0
    aaa0:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    aaa4:	b003      	add	sp, #12
    aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaaa:	bf00      	nop
    aaac:	002dc6c0 	.word	0x002dc6c0
    aab0:	005b8d80 	.word	0x005b8d80

0000aab4 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    aab6:	4d0e      	ldr	r5, [pc, #56]	; (aaf0 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    aab8:	682b      	ldr	r3, [r5, #0]
    aaba:	f013 0401 	ands.w	r4, r3, #1
    aabe:	d002      	beq.n	aac6 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    aac0:	4b0c      	ldr	r3, [pc, #48]	; (aaf4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    aac2:	6818      	ldr	r0, [r3, #0]
    aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aac6:	2010      	movs	r0, #16
    aac8:	f008 fb62 	bl	13190 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    aacc:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    aace:	4909      	ldr	r1, [pc, #36]	; (aaf4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    aad0:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aad2:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    aad4:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    aad6:	2617      	movs	r6, #23
      m_initialized(false) {
    aad8:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    aada:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    aadc:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    aade:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    aae0:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    aae2:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    aae4:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    aae6:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aae8:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aaea:	7342      	strb	r2, [r0, #13]
}
    aaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aaee:	bf00      	nop
    aaf0:	20001bf8 	.word	0x20001bf8
    aaf4:	20001c00 	.word	0x20001c00

0000aaf8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    aaf8:	7843      	ldrb	r3, [r0, #1]
    aafa:	428b      	cmp	r3, r1
    aafc:	d06d      	beq.n	abda <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    aafe:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    ab04:	d071      	beq.n	abea <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    ab06:	d363      	bcc.n	abd0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    ab08:	2902      	cmp	r1, #2
    ab0a:	d16b      	bne.n	abe4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    ab0c:	4e39      	ldr	r6, [pc, #228]	; (abf4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    ab0e:	f240 188f 	movw	r8, #399	; 0x18f
    ab12:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    ab16:	4a38      	ldr	r2, [pc, #224]	; (abf8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    ab18:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    ab1a:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    ab1c:	4b37      	ldr	r3, [pc, #220]	; (abfc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    ab1e:	f36f 0441 	bfc	r4, #1, #1
    ab22:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    ab24:	681c      	ldr	r4, [r3, #0]
    ab26:	f36f 0441 	bfc	r4, #1, #1
    ab2a:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    ab2c:	6893      	ldr	r3, [r2, #8]
    ab2e:	079c      	lsls	r4, r3, #30
    ab30:	d4fc      	bmi.n	ab2c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    ab32:	4d32      	ldr	r5, [pc, #200]	; (abfc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    ab34:	68ac      	ldr	r4, [r5, #8]
    ab36:	f014 0402 	ands.w	r4, r4, #2
    ab3a:	d1fb      	bne.n	ab34 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    ab3c:	4631      	mov	r1, r6
    ab3e:	7800      	ldrb	r0, [r0, #0]
    ab40:	4e2f      	ldr	r6, [pc, #188]	; (ac00 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    ab42:	f000 fead 	bl	b8a0 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    ab46:	492f      	ldr	r1, [pc, #188]	; (ac04 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    ab48:	4a2f      	ldr	r2, [pc, #188]	; (ac08 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    ab4a:	4b2b      	ldr	r3, [pc, #172]	; (abf8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    ab4c:	482f      	ldr	r0, [pc, #188]	; (ac0c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    ab4e:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    ab50:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    ab52:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ab54:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ab56:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ab58:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ab5a:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ab5c:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ab5e:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ab60:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ab62:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    ab64:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    ab68:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    ab6a:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    ab6c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    ab70:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    ab72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    ab76:	3018      	adds	r0, #24
    ab78:	3104      	adds	r1, #4
    ab7a:	3204      	adds	r2, #4
    ab7c:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ab7e:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ab80:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ab82:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ab84:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ab86:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ab88:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ab8a:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    ab8c:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    ab90:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    ab94:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    ab98:	f856 0b04 	ldr.w	r0, [r6], #4
    ab9c:	4639      	mov	r1, r7
    ab9e:	3030      	adds	r0, #48	; 0x30
    aba0:	f000 fcb2 	bl	b508 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    aba4:	42b4      	cmp	r4, r6
    aba6:	d1f7      	bne.n	ab98 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    aba8:	4a13      	ldr	r2, [pc, #76]	; (abf8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    abaa:	4914      	ldr	r1, [pc, #80]	; (abfc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    abac:	6813      	ldr	r3, [r2, #0]
    abae:	f043 0302 	orr.w	r3, r3, #2
    abb2:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    abb4:	680b      	ldr	r3, [r1, #0]
    abb6:	f043 0302 	orr.w	r3, r3, #2
    abba:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    abbc:	6893      	ldr	r3, [r2, #8]
    abbe:	0799      	lsls	r1, r3, #30
    abc0:	d4fc      	bmi.n	abbc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    abc2:	4a0e      	ldr	r2, [pc, #56]	; (abfc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    abc4:	6893      	ldr	r3, [r2, #8]
    abc6:	079b      	lsls	r3, r3, #30
    abc8:	d4fc      	bmi.n	abc4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    abca:	2001      	movs	r0, #1
    abcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    abd0:	f04f 0813 	mov.w	r8, #19
    abd4:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    abd6:	4e0e      	ldr	r6, [pc, #56]	; (ac10 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    abd8:	e79d      	b.n	ab16 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    abda:	7b83      	ldrb	r3, [r0, #14]
    abdc:	2b00      	cmp	r3, #0
    abde:	d08e      	beq.n	aafe <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    abe0:	2000      	movs	r0, #0
    abe2:	4770      	bx	lr
        return false;
    abe4:	2000      	movs	r0, #0
    abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    abea:	f04f 0863 	mov.w	r8, #99	; 0x63
    abee:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    abf0:	4e08      	ldr	r6, [pc, #32]	; (ac14 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    abf2:	e790      	b.n	ab16 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    abf4:	001e8480 	.word	0x001e8480
    abf8:	41016000 	.word	0x41016000
    abfc:	41018000 	.word	0x41018000
    ac00:	00022bc8 	.word	0x00022bc8
    ac04:	41016004 	.word	0x41016004
    ac08:	41016008 	.word	0x41016008
    ac0c:	4101600c 	.word	0x4101600c
    ac10:	000186a0 	.word	0x000186a0
    ac14:	0007a120 	.word	0x0007a120

0000ac18 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    ac18:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    ac1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac1e:	4606      	mov	r6, r0
    ac20:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    ac22:	d036      	beq.n	ac92 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    ac24:	460c      	mov	r4, r1
    ac26:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    ac2a:	2f03      	cmp	r7, #3
    ac2c:	d907      	bls.n	ac3e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    ac2e:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    ac30:	7b38      	ldrb	r0, [r7, #12]
    ac32:	1b40      	subs	r0, r0, r5
    ac34:	fab0 f080 	clz	r0, r0
    ac38:	0940      	lsrs	r0, r0, #5
    ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ac3e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ad00 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ac42:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    ac46:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ac48:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    ac4c:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ac4e:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    ac50:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ac54:	685b      	ldr	r3, [r3, #4]
    ac56:	4629      	mov	r1, r5
    ac58:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    ac5a:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    ac5e:	6803      	ldr	r3, [r0, #0]
    ac60:	4629      	mov	r1, r5
    ac62:	685b      	ldr	r3, [r3, #4]
    ac64:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    ac66:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    ac6a:	f997 2002 	ldrsb.w	r2, [r7, #2]
    ac6e:	684b      	ldr	r3, [r1, #4]
    ac70:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    ac74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ac78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    ac7c:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    ac7e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ac82:	bf0c      	ite	eq
    ac84:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    ac88:	f36f 0200 	bfcne	r2, #0, #1
    ac8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ac90:	e7ce      	b.n	ac30 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    ac92:	f1a2 0709 	sub.w	r7, r2, #9
    ac96:	2f03      	cmp	r7, #3
    ac98:	d907      	bls.n	acaa <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    ac9a:	7b33      	ldrb	r3, [r6, #12]
    ac9c:	42ab      	cmp	r3, r5
    ac9e:	d002      	beq.n	aca6 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    aca0:	2000      	movs	r0, #0
}
    aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aca6:	2401      	movs	r4, #1
    aca8:	e7bf      	b.n	ac2a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    acaa:	f8df 9054 	ldr.w	r9, [pc, #84]	; ad00 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    acae:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    acb0:	f8d9 0000 	ldr.w	r0, [r9]
    acb4:	6803      	ldr	r3, [r0, #0]
    acb6:	4611      	mov	r1, r2
    acb8:	685b      	ldr	r3, [r3, #4]
    acba:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    acbc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    acc0:	6803      	ldr	r3, [r0, #0]
    acc2:	4629      	mov	r1, r5
    acc4:	685b      	ldr	r3, [r3, #4]
    acc6:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    acc8:	f996 2002 	ldrsb.w	r2, [r6, #2]
    accc:	6873      	ldr	r3, [r6, #4]
    acce:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    acd2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    acd6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    acda:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    acdc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    ace0:	d004      	beq.n	acec <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    ace2:	f36f 0200 	bfc	r2, #0, #1
    ace6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    acea:	e7d6      	b.n	ac9a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    acec:	f042 0201 	orr.w	r2, r2, #1
    acf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    acf4:	7b33      	ldrb	r3, [r6, #12]
    acf6:	2b0a      	cmp	r3, #10
    acf8:	d1d2      	bne.n	aca0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    acfa:	2401      	movs	r4, #1
    acfc:	e7a1      	b.n	ac42 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    acfe:	bf00      	nop
    ad00:	00022bc8 	.word	0x00022bc8

0000ad04 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    ad04:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ad06:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    ad08:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ad0a:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ad0c:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    ad0e:	2101      	movs	r1, #1
    ad10:	f7ff fef2 	bl	aaf8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ad14:	f995 2002 	ldrsb.w	r2, [r5, #2]
    ad18:	6868      	ldr	r0, [r5, #4]
    ad1a:	01d2      	lsls	r2, r2, #7
    ad1c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ad20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ad24:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ad26:	2101      	movs	r1, #1
    ad28:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ad2a:	2600      	movs	r6, #0
    ad2c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ad30:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    ad32:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    ad36:	f010 0f01 	tst.w	r0, #1
    ad3a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    ad3e:	f04f 040c 	mov.w	r4, #12
    ad42:	bf0c      	ite	eq
    ad44:	f364 0003 	bfieq	r0, r4, #0, #4
    ad48:	f364 1007 	bfine	r0, r4, #4, #4
    ad4c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    ad50:	4b2d      	ldr	r3, [pc, #180]	; (ae08 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    ad52:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ad54:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    ad56:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ad58:	f995 2003 	ldrsb.w	r2, [r5, #3]
    ad5c:	68a9      	ldr	r1, [r5, #8]
    ad5e:	01d2      	lsls	r2, r2, #7
    ad60:	4413      	add	r3, r2
    ad62:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ad64:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    ad66:	2600      	movs	r6, #0
    ad68:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    ad6c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    ad6e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    ad72:	f011 0f01 	tst.w	r1, #1
    ad76:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    ad7a:	4e24      	ldr	r6, [pc, #144]	; (ae0c <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    ad7c:	f04f 040c 	mov.w	r4, #12
    ad80:	bf14      	ite	ne
    ad82:	f364 1107 	bfine	r1, r4, #4, #4
    ad86:	f364 0103 	bfieq	r1, r4, #0, #4
    ad8a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    ad8e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ad92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ad96:	2400      	movs	r4, #0
    ad98:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    ad9a:	f856 0b04 	ldr.w	r0, [r6], #4
    ad9e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    ada2:	6802      	ldr	r2, [r0, #0]
    ada4:	442b      	add	r3, r5
    ada6:	6852      	ldr	r2, [r2, #4]
    ada8:	7b19      	ldrb	r1, [r3, #12]
    adaa:	3401      	adds	r4, #1
    adac:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    adae:	2c04      	cmp	r4, #4
    adb0:	d1f3      	bne.n	ad9a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    adb2:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    adb4:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    adb8:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    adba:	686b      	ldr	r3, [r5, #4]
    adbc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    adc0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    adc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    adc8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    adcc:	bf14      	ite	ne
    adce:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    add2:	f042 0201 	orreq.w	r2, r2, #1
    add6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    adda:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    addc:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    ade0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    ade2:	68ab      	ldr	r3, [r5, #8]
    ade4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    ade8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    adec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    adf0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    adf4:	bf0c      	ite	eq
    adf6:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    adfa:	f36f 0200 	bfcne	r2, #0, #1
    adfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    ae02:	2301      	movs	r3, #1
    ae04:	73ab      	strb	r3, [r5, #14]
    ae06:	bd70      	pop	{r4, r5, r6, pc}
    ae08:	41008000 	.word	0x41008000
    ae0c:	00022bc8 	.word	0x00022bc8

0000ae10 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    ae10:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    ae12:	f7ff fe4f 	bl	aab4 <_ZN9ClearCore12MotorManager8InstanceEv>
    ae16:	4b01      	ldr	r3, [pc, #4]	; (ae1c <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    ae18:	6018      	str	r0, [r3, #0]
    ae1a:	bd08      	pop	{r3, pc}
    ae1c:	20001bfc 	.word	0x20001bfc

0000ae20 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae22:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    ae24:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    ae26:	f890 3020 	ldrb.w	r3, [r0, #32]
    ae2a:	b113      	cbz	r3, ae32 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    ae2c:	2300      	movs	r3, #0
    ae2e:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    ae30:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    ae32:	b362      	cbz	r2, ae8e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    ae34:	69a0      	ldr	r0, [r4, #24]
    ae36:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    ae38:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    ae3a:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    ae3c:	bb2b      	cbnz	r3, ae8a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    ae3e:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    ae40:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    ae44:	f647 76ff 	movw	r6, #32767	; 0x7fff
    ae48:	2700      	movs	r7, #0
    ae4a:	4032      	ands	r2, r6
    ae4c:	403b      	ands	r3, r7
    m_stepsSent = 0;
    ae4e:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    ae50:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    ae52:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    ae56:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    ae58:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    ae5c:	f010 fd00 	bl	1b860 <__aeabi_i2d>
    ae60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    ae64:	4619      	mov	r1, r3
    ae66:	f010 fffb 	bl	1be60 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    ae6a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ae6c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    ae6e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ae70:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    ae72:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    ae76:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    ae78:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    ae7a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ae7c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    ae7e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ae80:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    ae82:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    ae84:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    ae86:	4618      	mov	r0, r3
    ae88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    ae8a:	4240      	negs	r0, r0
    ae8c:	e7d7      	b.n	ae3e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    ae8e:	6960      	ldr	r0, [r4, #20]
    ae90:	1a08      	subs	r0, r1, r0
            break;
    ae92:	e7d5      	b.n	ae40 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000ae94 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae96:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    ae98:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    ae9a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    ae9c:	0fca      	lsrs	r2, r1, #31
    ae9e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    aea2:	f884 3020 	strb.w	r3, [r4, #32]
    aea6:	4608      	mov	r0, r1
    aea8:	f010 fcda 	bl	1b860 <__aeabi_i2d>
    aeac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    aeb0:	4619      	mov	r1, r3
    aeb2:	f010 ffd5 	bl	1be60 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    aeb6:	17c3      	asrs	r3, r0, #31
    aeb8:	03d9      	lsls	r1, r3, #15
    aeba:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    aebe:	f241 3288 	movw	r2, #5000	; 0x1388
    aec2:	2300      	movs	r3, #0
    aec4:	03c0      	lsls	r0, r0, #15
    aec6:	f011 f971 	bl	1c1ac <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    aeca:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    aecc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    aed0:	03de      	lsls	r6, r3, #15
    aed2:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    aed4:	42b2      	cmp	r2, r6
    aed6:	f04f 0300 	mov.w	r3, #0
    aeda:	eb73 0507 	sbcs.w	r5, r3, r7
    aede:	bfbc      	itt	lt
    aee0:	4616      	movlt	r6, r2
    aee2:	461f      	movlt	r7, r3
    aee4:	4286      	cmp	r6, r0
    aee6:	460b      	mov	r3, r1
    aee8:	4602      	mov	r2, r0
    aeea:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    aeee:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    aef2:	bfb8      	it	lt
    aef4:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    aef6:	2700      	movs	r7, #0
    aef8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    aefc:	4030      	ands	r0, r6
    aefe:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    af00:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    af02:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    af04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    af06:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    af08:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    af0a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    af0e:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    af10:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    af14:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    af16:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    af18:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    af1a:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    af1c:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    af1e:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    af20:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    af22:	b662      	cpsie	i
}
    af24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af26:	bf00      	nop

0000af28 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    af2c:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    af2e:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    af32:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    af34:	b085      	sub	sp, #20
    af36:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    af38:	d038      	beq.n	afac <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    af3a:	2b07      	cmp	r3, #7
    af3c:	f200 80da 	bhi.w	b0f4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    af40:	e8df f013 	tbh	[pc, r3, lsl #1]
    af44:	00d8002f 	.word	0x00d8002f
    af48:	00be01d7 	.word	0x00be01d7
    af4c:	025f0086 	.word	0x025f0086
    af50:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    af54:	7b41      	ldrb	r1, [r0, #13]
    af56:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    af5a:	428b      	cmp	r3, r1
    af5c:	f000 822d 	beq.w	b3ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    af60:	6980      	ldr	r0, [r0, #24]
    af62:	69e3      	ldr	r3, [r4, #28]
    af64:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    af66:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    af6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    af6e:	2300      	movs	r3, #0
    af70:	4016      	ands	r6, r2
    af72:	401f      	ands	r7, r3
    af74:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    af78:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    af7c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    af7e:	2300      	movs	r3, #0
    af80:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    af82:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    af86:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    af88:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    af8c:	0bf2      	lsrs	r2, r6, #15
    af8e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    af92:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    af94:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    af96:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    af98:	6962      	ldr	r2, [r4, #20]
    af9a:	b101      	cbz	r1, af9e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    af9c:	425b      	negs	r3, r3
    af9e:	4413      	add	r3, r2
    afa0:	6163      	str	r3, [r4, #20]
}
    afa2:	b005      	add	sp, #20
    afa4:	ecbd 8b02 	vpop	{d8}
    afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    afac:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    afae:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    afb2:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    afb6:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    afba:	1457      	asrs	r7, r2, #17
    afbc:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    afbe:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    afc2:	2900      	cmp	r1, #0
    afc4:	d163      	bne.n	b08e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    afc6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    afc8:	2d00      	cmp	r5, #0
    afca:	f000 8117 	beq.w	b1fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    afce:	7b41      	ldrb	r1, [r0, #13]
    afd0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    afd4:	9100      	str	r1, [sp, #0]
    afd6:	4291      	cmp	r1, r2
    afd8:	f000 81f8 	beq.w	b3cc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    afdc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    afe0:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    afe2:	2305      	movs	r3, #5
    afe4:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    afe6:	6520      	str	r0, [r4, #80]	; 0x50
    afe8:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    afea:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    afee:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    aff2:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    aff4:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    aff8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    affc:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    affe:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b002:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b004:	f300 80ab 	bgt.w	b15e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b008:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b00a:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b00e:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b012:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b014:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b018:	4629      	mov	r1, r5
    b01a:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b01c:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b020:	f011 f914 	bl	1c24c <__aeabi_uldivmod>
    b024:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b026:	fba0 bc05 	umull	fp, ip, r0, r5
    b02a:	fb00 cc03 	mla	ip, r0, r3, ip
    b02e:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b032:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b034:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b038:	eb47 0709 	adc.w	r7, r7, r9
    b03c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b040:	2900      	cmp	r1, #0
    b042:	f000 816e 	beq.w	b322 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b046:	2307      	movs	r3, #7
    b048:	7323      	strb	r3, [r4, #12]
    b04a:	9900      	ldr	r1, [sp, #0]
    b04c:	69e3      	ldr	r3, [r4, #28]
    b04e:	e79d      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b050:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b052:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b054:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b058:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b05c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b060:	1952      	adds	r2, r2, r5
    b062:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b066:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b068:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b06c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b070:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b072:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b076:	da54      	bge.n	b122 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b078:	2900      	cmp	r1, #0
    b07a:	dd52      	ble.n	b122 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b07c:	2a01      	cmp	r2, #1
    b07e:	f173 0100 	sbcs.w	r1, r3, #0
    b082:	db4e      	blt.n	b122 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b084:	461f      	mov	r7, r3
    b086:	4616      	mov	r6, r2
    b088:	69e3      	ldr	r3, [r4, #28]
    b08a:	7b61      	ldrb	r1, [r4, #13]
    b08c:	e77e      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b08e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b090:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b092:	2b00      	cmp	r3, #0
    b094:	f000 80a1 	beq.w	b1da <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b098:	2d00      	cmp	r5, #0
    b09a:	f040 8130 	bne.w	b2fe <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b09e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b0a2:	6820      	ldr	r0, [r4, #0]
    b0a4:	6523      	str	r3, [r4, #80]	; 0x50
    b0a6:	2100      	movs	r1, #0
    b0a8:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b0aa:	7362      	strb	r2, [r4, #13]
    b0ac:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b0b0:	4620      	mov	r0, r4
    b0b2:	4798      	blx	r3
    b0b4:	7b63      	ldrb	r3, [r4, #13]
    b0b6:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b0ba:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b0bc:	9300      	str	r3, [sp, #0]
    b0be:	e094      	b.n	b1ea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b0c0:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b0c4:	7b43      	ldrb	r3, [r0, #13]
    b0c6:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b0ca:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b0cc:	4652      	mov	r2, sl
    b0ce:	eb16 060a 	adds.w	r6, r6, sl
    b0d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b0d6:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b0da:	415f      	adcs	r7, r3
    b0dc:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b0e0:	2900      	cmp	r1, #0
    b0e2:	d03f      	beq.n	b164 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b0e4:	f1ba 0f00 	cmp.w	sl, #0
    b0e8:	d139      	bne.n	b15e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b0ea:	2306      	movs	r3, #6
    b0ec:	7323      	strb	r3, [r4, #12]
    b0ee:	9900      	ldr	r1, [sp, #0]
    b0f0:	69e3      	ldr	r3, [r4, #28]
    b0f2:	e74b      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b0f4:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b0f6:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b0f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b0fc:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b100:	2000      	movs	r0, #0
    b102:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b104:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b106:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b108:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b10a:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b10c:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b10e:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b110:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b114:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b118:	b005      	add	sp, #20
    b11a:	ecbd 8b02 	vpop	{d8}
    b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b122:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b124:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b126:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b128:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b12a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b12e:	7322      	strb	r2, [r4, #12]
    b130:	69e3      	ldr	r3, [r4, #28]
    b132:	7b61      	ldrb	r1, [r4, #13]
    b134:	e72a      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b136:	2302      	movs	r3, #2
    b138:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b13a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b13e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b140:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b144:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b146:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b148:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b14c:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b14e:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b150:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b154:	f280 80a2 	bge.w	b29c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b158:	2d00      	cmp	r5, #0
    b15a:	f340 809f 	ble.w	b29c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b15e:	9900      	ldr	r1, [sp, #0]
    b160:	69e3      	ldr	r3, [r4, #28]
    b162:	e713      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b164:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b168:	4286      	cmp	r6, r0
    b16a:	eb77 0501 	sbcs.w	r5, r7, r1
    b16e:	da03      	bge.n	b178 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b170:	2e01      	cmp	r6, #1
    b172:	f177 0500 	sbcs.w	r5, r7, #0
    b176:	daf2      	bge.n	b15e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b178:	2500      	movs	r5, #0
    b17a:	1a31      	subs	r1, r6, r0
    b17c:	4628      	mov	r0, r5
    b17e:	f011 f865 	bl	1c24c <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b182:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b184:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b188:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b18a:	fb00 9e03 	mla	lr, r0, r3, r9
    b18e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b190:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b194:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b198:	fb0e 330c 	mla	r3, lr, ip, r3
    b19c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b19e:	1a32      	subs	r2, r6, r0
    b1a0:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b1a4:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b1a8:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b1aa:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b1ae:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b1b2:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b1b4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b1b8:	f280 80a9 	bge.w	b30e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b1bc:	42a8      	cmp	r0, r5
    b1be:	f340 80a6 	ble.w	b30e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b1c2:	2a01      	cmp	r2, #1
    b1c4:	f173 0100 	sbcs.w	r1, r3, #0
    b1c8:	f2c0 80a1 	blt.w	b30e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b1cc:	2004      	movs	r0, #4
    b1ce:	461f      	mov	r7, r3
    b1d0:	9900      	ldr	r1, [sp, #0]
    b1d2:	7320      	strb	r0, [r4, #12]
    b1d4:	4616      	mov	r6, r2
    b1d6:	69e3      	ldr	r3, [r4, #28]
    b1d8:	e6d8      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b1da:	7b42      	ldrb	r2, [r0, #13]
    b1dc:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b1de:	4619      	mov	r1, r3
    b1e0:	2000      	movs	r0, #0
    b1e2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b1e6:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b1e8:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b1ea:	4555      	cmp	r5, sl
    b1ec:	f000 80db 	beq.w	b3a6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b1f0:	dda1      	ble.n	b136 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b1f2:	2305      	movs	r3, #5
    b1f4:	7323      	strb	r3, [r4, #12]
    b1f6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b1fa:	e6f6      	b.n	afea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b1fc:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b200:	4611      	mov	r1, r2
    b202:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b204:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b208:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b20a:	4613      	mov	r3, r2
    b20c:	429f      	cmp	r7, r3
    b20e:	bf08      	it	eq
    b210:	428e      	cmpeq	r6, r1
    b212:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b216:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b21a:	d00e      	beq.n	b23a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b21c:	6803      	ldr	r3, [r0, #0]
    b21e:	689b      	ldr	r3, [r3, #8]
    b220:	4798      	blx	r3
    b222:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b226:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b228:	2b00      	cmp	r3, #0
    b22a:	f040 80ca 	bne.w	b3c2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b22e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b232:	e9cd 2300 	strd	r2, r3, [sp]
    b236:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b23a:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b23e:	0fcb      	lsrs	r3, r1, #31
    b240:	18c0      	adds	r0, r0, r3
    b242:	464e      	mov	r6, r9
    b244:	f141 0100 	adc.w	r1, r1, #0
    b248:	17f7      	asrs	r7, r6, #31
    b24a:	1049      	asrs	r1, r1, #1
    b24c:	ea4f 0030 	mov.w	r0, r0, rrx
    b250:	464a      	mov	r2, r9
    b252:	463b      	mov	r3, r7
    b254:	f010 ffaa 	bl	1c1ac <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b258:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b260:	464a      	mov	r2, r9
    b262:	463b      	mov	r3, r7
    b264:	fb8a 010a 	smull	r0, r1, sl, sl
    b268:	f010 ffa0 	bl	1c1ac <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b26c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b270:	1a82      	subs	r2, r0, r2
    b272:	eb61 0303 	sbc.w	r3, r1, r3
    b276:	4610      	mov	r0, r2
    b278:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b27a:	e9dd 2300 	ldrd	r2, r3, [sp]
    b27e:	4282      	cmp	r2, r0
    b280:	418b      	sbcs	r3, r1
    b282:	db63      	blt.n	b34c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b284:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b288:	4555      	cmp	r5, sl
    b28a:	f340 8091 	ble.w	b3b0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b28e:	2305      	movs	r3, #5
    b290:	7323      	strb	r3, [r4, #12]
    b292:	7b63      	ldrb	r3, [r4, #13]
    b294:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b298:	9300      	str	r3, [sp, #0]
    b29a:	e6a6      	b.n	afea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b29c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b29e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b2a2:	4691      	mov	r9, r2
    b2a4:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b2a6:	461a      	mov	r2, r3
    b2a8:	4629      	mov	r1, r5
    b2aa:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b2ac:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b2b0:	2000      	movs	r0, #0
    b2b2:	f010 ffcb 	bl	1c24c <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b2b6:	4602      	mov	r2, r0
    b2b8:	fba2 0105 	umull	r0, r1, r2, r5
    b2bc:	2300      	movs	r3, #0
    b2be:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b2c2:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b2c6:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b2c8:	4642      	mov	r2, r8
    b2ca:	464b      	mov	r3, r9
    b2cc:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b2d0:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b2d4:	f010 ffba 	bl	1c24c <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b2d8:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b2dc:	0849      	lsrs	r1, r1, #1
    b2de:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b2e2:	1a12      	subs	r2, r2, r0
    b2e4:	eb63 0301 	sbc.w	r3, r3, r1
    b2e8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b2ec:	2303      	movs	r3, #3
    b2ee:	7323      	strb	r3, [r4, #12]
    b2f0:	e6ec      	b.n	b0cc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b2f2:	7b43      	ldrb	r3, [r0, #13]
    b2f4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b2f6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b2fa:	9300      	str	r3, [sp, #0]
    b2fc:	e71d      	b.n	b13a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b2fe:	7b40      	ldrb	r0, [r0, #13]
    b300:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b304:	9000      	str	r0, [sp, #0]
    b306:	4290      	cmp	r0, r2
    b308:	f47f af6a 	bne.w	b1e0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b30c:	e6c9      	b.n	b0a2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b30e:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b310:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b312:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b314:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b316:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b31a:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b31c:	7322      	strb	r2, [r4, #12]
    b31e:	69e3      	ldr	r3, [r4, #28]
    b320:	e634      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b326:	fb8a 010a 	smull	r0, r1, sl, sl
    b32a:	f010 ff8f 	bl	1c24c <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b32e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b332:	0849      	lsrs	r1, r1, #1
    b334:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b338:	1a12      	subs	r2, r2, r0
    b33a:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b33e:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b340:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b344:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b346:	7320      	strb	r0, [r4, #12]
    b348:	69e3      	ldr	r3, [r4, #28]
    b34a:	e61f      	b.n	af8c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b34c:	69a6      	ldr	r6, [r4, #24]
    b34e:	17f1      	asrs	r1, r6, #31
    b350:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b356:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b358:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b35a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    b35e:	4159      	adcs	r1, r3
    b360:	460b      	mov	r3, r1
    b362:	fb00 f107 	mul.w	r1, r0, r7
    b366:	fb09 1303 	mla	r3, r9, r3, r1
    b36a:	fba0 0109 	umull	r0, r1, r0, r9
    b36e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    b370:	f010 fede 	bl	1c130 <__aeabi_l2f>
    b374:	ee00 0a10 	vmov	s0, r0
    b378:	eeb5 0a40 	vcmp.f32	s0, #0.0
    b37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b380:	eeb1 8ac0 	vsqrt.f32	s16, s0
    b384:	d439      	bmi.n	b3fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    b386:	ee18 0a10 	vmov	r0, s16
    b38a:	f010 ff77 	bl	1c27c <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    b38e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b392:	4282      	cmp	r2, r0
    b394:	f04f 0300 	mov.w	r3, #0
    b398:	eb73 0601 	sbcs.w	r6, r3, r1
    b39c:	bfb8      	it	lt
    b39e:	4610      	movlt	r0, r2
    b3a0:	6520      	str	r0, [r4, #80]	; 0x50
    b3a2:	4682      	mov	sl, r0
    b3a4:	e770      	b.n	b288 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    b3a6:	2303      	movs	r3, #3
    b3a8:	7323      	strb	r3, [r4, #12]
    b3aa:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b3ae:	e68d      	b.n	b0cc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    b3b0:	2302      	movs	r3, #2
    b3b2:	7323      	strb	r3, [r4, #12]
    b3b4:	7b63      	ldrb	r3, [r4, #13]
    b3b6:	9300      	str	r3, [sp, #0]
    b3b8:	e6bf      	b.n	b13a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    b3ba:	69c0      	ldr	r0, [r0, #28]
    b3bc:	69a3      	ldr	r3, [r4, #24]
    b3be:	1ac0      	subs	r0, r0, r3
    b3c0:	e5d1      	b.n	af66 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    b3c2:	7b63      	ldrb	r3, [r4, #13]
    b3c4:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b3c8:	9300      	str	r3, [sp, #0]
    b3ca:	e609      	b.n	afe0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    b3cc:	464a      	mov	r2, r9
    b3ce:	17d3      	asrs	r3, r2, #31
    b3d0:	fb85 0105 	smull	r0, r1, r5, r5
    b3d4:	f010 feea 	bl	1c1ac <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b3d8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    b3dc:	1049      	asrs	r1, r1, #1
    b3de:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b3e2:	1ab6      	subs	r6, r6, r2
    b3e4:	eb67 0703 	sbc.w	r7, r7, r3
    b3e8:	4286      	cmp	r6, r0
    b3ea:	eb77 0301 	sbcs.w	r3, r7, r1
    b3ee:	bfb4      	ite	lt
    b3f0:	2301      	movlt	r3, #1
    b3f2:	2300      	movge	r3, #0
    b3f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b3f8:	e716      	b.n	b228 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    b3fa:	f00f fc6d 	bl	1acd8 <sqrtf>
    b3fe:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b400:	e7c1      	b.n	b386 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    b402:	7b43      	ldrb	r3, [r0, #13]
    b404:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b406:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b40a:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    b40e:	9300      	str	r3, [sp, #0]
    b410:	e5eb      	b.n	afea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    b412:	bf00      	nop

0000b414 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    b414:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    b416:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    b418:	4916      	ldr	r1, [pc, #88]	; (b474 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    b41a:	6001      	str	r1, [r0, #0]
    b41c:	2200      	movs	r2, #0
    b41e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    b422:	2501      	movs	r5, #1
    b424:	2102      	movs	r1, #2
    b426:	2600      	movs	r6, #0
    b428:	2700      	movs	r7, #0
    b42a:	f362 1486 	bfi	r4, r2, #6, #1
    b42e:	7404      	strb	r4, [r0, #16]
    b430:	6042      	str	r2, [r0, #4]
    b432:	6082      	str	r2, [r0, #8]
    b434:	7302      	strb	r2, [r0, #12]
    b436:	7342      	strb	r2, [r0, #13]
    b438:	6142      	str	r2, [r0, #20]
    b43a:	6182      	str	r2, [r0, #24]
    b43c:	61c2      	str	r2, [r0, #28]
    b43e:	f880 2020 	strb.w	r2, [r0, #32]
    b442:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    b446:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    b44a:	6282      	str	r2, [r0, #40]	; 0x28
    b44c:	6402      	str	r2, [r0, #64]	; 0x40
    b44e:	6442      	str	r2, [r0, #68]	; 0x44
    b450:	6502      	str	r2, [r0, #80]	; 0x50
    b452:	6642      	str	r2, [r0, #100]	; 0x64
    b454:	7385      	strb	r5, [r0, #14]
    b456:	6245      	str	r5, [r0, #36]	; 0x24
    b458:	6605      	str	r5, [r0, #96]	; 0x60
    b45a:	62c1      	str	r1, [r0, #44]	; 0x2c
    b45c:	6301      	str	r1, [r0, #48]	; 0x30
    b45e:	6681      	str	r1, [r0, #104]	; 0x68
    b460:	66c1      	str	r1, [r0, #108]	; 0x6c
    b462:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    b466:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    b46a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    b46e:	bcf0      	pop	{r4, r5, r6, r7}
    b470:	4770      	bx	lr
    b472:	bf00      	nop
    b474:	00022fb8 	.word	0x00022fb8

0000b478 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    b478:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b47a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b47c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b47e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b480:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b482:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b484:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b486:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b488:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b48a:	2700      	movs	r7, #0
    b48c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b490:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b492:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b494:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b496:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b498:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b49a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b49c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b4a0:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b4a2:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b4a4:	b662      	cpsie	i
}
    b4a6:	bcd0      	pop	{r4, r6, r7}
    b4a8:	4770      	bx	lr
    b4aa:	bf00      	nop
    b4ac:	0000      	movs	r0, r0
	...

0000b4b0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    b4b0:	b510      	push	{r4, lr}
    b4b2:	4604      	mov	r4, r0
    if (decelMax != 0) {
    b4b4:	b191      	cbz	r1, b4dc <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    b4b6:	a312      	add	r3, pc, #72	; (adr r3, b500 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b4bc:	03c8      	lsls	r0, r1, #15
    b4be:	0c49      	lsrs	r1, r1, #17
    b4c0:	f010 fe74 	bl	1c1ac <__aeabi_ldivmod>
    b4c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b4c6:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    b4c8:	f020 0201 	bic.w	r2, r0, #1
    b4cc:	bfb8      	it	lt
    b4ce:	2302      	movlt	r3, #2
    b4d0:	4293      	cmp	r3, r2
    b4d2:	4618      	mov	r0, r3
    b4d4:	bfb8      	it	lt
    b4d6:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    b4d8:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b4da:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    b4dc:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b4de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b4e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    b4e2:	4293      	cmp	r3, r2
    b4e4:	bfb8      	it	lt
    b4e6:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b4e8:	2100      	movs	r1, #0
    m_velocityMove = true;
    b4ea:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b4ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b4ee:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    b4f0:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    b4f4:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b4f6:	b662      	cpsie	i
    b4f8:	bd10      	pop	{r4, pc}
    b4fa:	bf00      	nop
    b4fc:	f3af 8000 	nop.w
    b500:	017d7840 	.word	0x017d7840
    b504:	00000000 	.word	0x00000000

0000b508 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    b508:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b50a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b50c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b50e:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b510:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b512:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b514:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b516:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b518:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b51a:	2700      	movs	r7, #0
    b51c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b520:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b522:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b524:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b526:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b528:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b52a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b52c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b530:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b532:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b534:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    b536:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b53a:	03ca      	lsls	r2, r1, #15
    b53c:	0c4b      	lsrs	r3, r1, #17
    b53e:	4294      	cmp	r4, r2
    b540:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    b544:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    b546:	eb75 0103 	sbcs.w	r1, r5, r3
    b54a:	bfbc      	itt	lt
    b54c:	4622      	movlt	r2, r4
    b54e:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    b550:	2a01      	cmp	r2, #1
    b552:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b556:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    b558:	bfbc      	itt	lt
    b55a:	2201      	movlt	r2, #1
    b55c:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b55e:	17e5      	asrs	r5, r4, #31
    b560:	4294      	cmp	r4, r2
    b562:	eb75 0103 	sbcs.w	r1, r5, r3
    b566:	bfb8      	it	lt
    b568:	4622      	movlt	r2, r4
    b56a:	6602      	str	r2, [r0, #96]	; 0x60
}
    b56c:	bcf0      	pop	{r4, r5, r6, r7}
    b56e:	4770      	bx	lr

0000b570 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    b570:	6843      	ldr	r3, [r0, #4]
    b572:	b363      	cbz	r3, b5ce <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b574:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b576:	f013 0218 	ands.w	r2, r3, #24
    b57a:	d12a      	bne.n	b5d2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    b57c:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b57e:	7c02      	ldrb	r2, [r0, #16]
    b580:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    b584:	b2d2      	uxtb	r2, r2
    b586:	4613      	mov	r3, r2
    b588:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    b58c:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b590:	b2db      	uxtb	r3, r3
    b592:	461a      	mov	r2, r3
    b594:	f3c3 1300 	ubfx	r3, r3, #4, #1
    b598:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    b59c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b59e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    b5a0:	075a      	lsls	r2, r3, #29
    b5a2:	d514      	bpl.n	b5ce <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    b5a4:	7b42      	ldrb	r2, [r0, #13]
    b5a6:	b9e2      	cbnz	r2, b5e2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    b5a8:	0719      	lsls	r1, r3, #28
    b5aa:	d510      	bpl.n	b5ce <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    b5ac:	f043 0301 	orr.w	r3, r3, #1
    b5b0:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    b5b2:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b5b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b5b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    b5b8:	4293      	cmp	r3, r2
    b5ba:	bfb8      	it	lt
    b5bc:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b5be:	2100      	movs	r1, #0
    m_velocityMove = true;
    b5c0:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b5c2:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b5c4:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    b5c6:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    b5ca:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b5cc:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    b5ce:	2000      	movs	r0, #0
    b5d0:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b5d2:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    b5d6:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b5da:	1ad3      	subs	r3, r2, r3
    b5dc:	bf18      	it	ne
    b5de:	2301      	movne	r3, #1
    b5e0:	e7cd      	b.n	b57e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    b5e2:	06da      	lsls	r2, r3, #27
    b5e4:	d5f3      	bpl.n	b5ce <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    b5e6:	f043 0302 	orr.w	r3, r3, #2
    b5ea:	7403      	strb	r3, [r0, #16]
    b5ec:	e7e1      	b.n	b5b2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    b5ee:	bf00      	nop

0000b5f0 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    b5f0:	4ba1      	ldr	r3, [pc, #644]	; (b878 <SystemInit+0x288>)
    b5f2:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    b5f6:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    b5f8:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    b5fa:	691a      	ldr	r2, [r3, #16]
    b5fc:	0792      	lsls	r2, r2, #30
    b5fe:	d5fc      	bpl.n	b5fa <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b600:	4a9e      	ldr	r2, [pc, #632]	; (b87c <SystemInit+0x28c>)
    b602:	4b9f      	ldr	r3, [pc, #636]	; (b880 <SystemInit+0x290>)
    b604:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    b606:	6853      	ldr	r3, [r2, #4]
    b608:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    b60c:	d1fb      	bne.n	b606 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    b60e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    b612:	499a      	ldr	r1, [pc, #616]	; (b87c <SystemInit+0x28c>)
    b614:	f363 1086 	bfi	r0, r3, #6, #1
    b618:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    b61c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b620:	065b      	lsls	r3, r3, #25
    b622:	d4fb      	bmi.n	b61c <SystemInit+0x2c>
    b624:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b628:	4a94      	ldr	r2, [pc, #592]	; (b87c <SystemInit+0x28c>)
    b62a:	2005      	movs	r0, #5
    b62c:	f360 0303 	bfi	r3, r0, #0, #4
    b630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b634:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b63c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b640:	6853      	ldr	r3, [r2, #4]
    b642:	f013 0f14 	tst.w	r3, #20
    b646:	d1fb      	bne.n	b640 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b648:	4b8b      	ldr	r3, [pc, #556]	; (b878 <SystemInit+0x288>)
    b64a:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b64c:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b64e:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b650:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b652:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b654:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b656:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b65a:	6913      	ldr	r3, [r2, #16]
    b65c:	01df      	lsls	r7, r3, #7
    b65e:	d4fc      	bmi.n	b65a <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    b660:	4a86      	ldr	r2, [pc, #536]	; (b87c <SystemInit+0x28c>)
    b662:	f44f 7384 	mov.w	r3, #264	; 0x108
    b666:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    b668:	6853      	ldr	r3, [r2, #4]
    b66a:	f013 0304 	ands.w	r3, r3, #4
    b66e:	d1fb      	bne.n	b668 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b670:	4884      	ldr	r0, [pc, #528]	; (b884 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b672:	4982      	ldr	r1, [pc, #520]	; (b87c <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b674:	2401      	movs	r4, #1
    b676:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b678:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    b67c:	f363 1086 	bfi	r0, r3, #6, #1
    b680:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    b684:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b688:	065e      	lsls	r6, r3, #25
    b68a:	d4fb      	bmi.n	b684 <SystemInit+0x94>
    b68c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b690:	4a7a      	ldr	r2, [pc, #488]	; (b87c <SystemInit+0x28c>)
    b692:	2005      	movs	r0, #5
    b694:	f360 0303 	bfi	r3, r0, #0, #4
    b698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b69c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b6a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b6a8:	6853      	ldr	r3, [r2, #4]
    b6aa:	f013 0314 	ands.w	r3, r3, #20
    b6ae:	d1fb      	bne.n	b6a8 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b6b0:	4871      	ldr	r0, [pc, #452]	; (b878 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    b6b2:	4972      	ldr	r1, [pc, #456]	; (b87c <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b6b4:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    b6b6:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    b6b8:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b6ba:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    b6bc:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    b6be:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    b6c2:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    b6c6:	f363 1086 	bfi	r0, r3, #6, #1
    b6ca:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    b6ce:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    b6d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	d1f9      	bne.n	b6ce <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    b6da:	4c67      	ldr	r4, [pc, #412]	; (b878 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    b6dc:	486a      	ldr	r0, [pc, #424]	; (b888 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    b6de:	4a67      	ldr	r2, [pc, #412]	; (b87c <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    b6e0:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    b6e2:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    b6e4:	6853      	ldr	r3, [r2, #4]
    b6e6:	065d      	lsls	r5, r3, #25
    b6e8:	d4fc      	bmi.n	b6e4 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b6ea:	4b66      	ldr	r3, [pc, #408]	; (b884 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b6ec:	4967      	ldr	r1, [pc, #412]	; (b88c <SystemInit+0x29c>)
    b6ee:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b6f0:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b6f2:	4e67      	ldr	r6, [pc, #412]	; (b890 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    b6f4:	4d67      	ldr	r5, [pc, #412]	; (b894 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    b6f6:	4c68      	ldr	r4, [pc, #416]	; (b898 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    b6f8:	4960      	ldr	r1, [pc, #384]	; (b87c <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b6fa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    b6fe:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    b700:	6998      	ldr	r0, [r3, #24]
    b702:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b706:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    b708:	6958      	ldr	r0, [r3, #20]
    b70a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b70e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    b710:	6998      	ldr	r0, [r3, #24]
    b712:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    b716:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    b718:	6998      	ldr	r0, [r3, #24]
    b71a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    b71e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    b720:	69d8      	ldr	r0, [r3, #28]
    b722:	f040 0020 	orr.w	r0, r0, #32
    b726:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    b728:	6918      	ldr	r0, [r3, #16]
    b72a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b72e:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    b730:	69d8      	ldr	r0, [r3, #28]
    b732:	f040 0004 	orr.w	r0, r0, #4
    b736:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    b738:	6a18      	ldr	r0, [r3, #32]
    b73a:	f040 0001 	orr.w	r0, r0, #1
    b73e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    b740:	6a18      	ldr	r0, [r3, #32]
    b742:	f040 0008 	orr.w	r0, r0, #8
    b746:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    b748:	6a18      	ldr	r0, [r3, #32]
    b74a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b74e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    b750:	69d8      	ldr	r0, [r3, #28]
    b752:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b756:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    b758:	6958      	ldr	r0, [r3, #20]
    b75a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b75e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    b760:	6a18      	ldr	r0, [r3, #32]
    b762:	f040 0020 	orr.w	r0, r0, #32
    b766:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b768:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    b76a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b76e:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    b770:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    b774:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    b776:	684b      	ldr	r3, [r1, #4]
    b778:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    b77c:	d1fb      	bne.n	b776 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    b77e:	4a47      	ldr	r2, [pc, #284]	; (b89c <SystemInit+0x2ac>)
    b780:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    b782:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    b786:	4a3d      	ldr	r2, [pc, #244]	; (b87c <SystemInit+0x28c>)
    b788:	f363 1086 	bfi	r0, r3, #6, #1
    b78c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    b790:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b794:	065c      	lsls	r4, r3, #25
    b796:	d4fb      	bmi.n	b790 <SystemInit+0x1a0>
    b798:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b79c:	4937      	ldr	r1, [pc, #220]	; (b87c <SystemInit+0x28c>)
    b79e:	2006      	movs	r0, #6
    b7a0:	f360 0303 	bfi	r3, r0, #0, #4
    b7a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    b7a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    b7b4:	684b      	ldr	r3, [r1, #4]
    b7b6:	f013 0318 	ands.w	r3, r3, #24
    b7ba:	d1fb      	bne.n	b7b4 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    b7bc:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    b7c0:	4a2e      	ldr	r2, [pc, #184]	; (b87c <SystemInit+0x28c>)
    b7c2:	f363 1086 	bfi	r0, r3, #6, #1
    b7c6:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    b7ca:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    b7ce:	0658      	lsls	r0, r3, #25
    b7d0:	d4fb      	bmi.n	b7ca <SystemInit+0x1da>
    b7d2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    b7d6:	4929      	ldr	r1, [pc, #164]	; (b87c <SystemInit+0x28c>)
    b7d8:	2006      	movs	r0, #6
    b7da:	f360 0303 	bfi	r3, r0, #0, #4
    b7de:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    b7e2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    b7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b7ea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    b7ee:	684b      	ldr	r3, [r1, #4]
    b7f0:	f013 0318 	ands.w	r3, r3, #24
    b7f4:	d1fb      	bne.n	b7ee <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    b7f6:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    b7fa:	4a20      	ldr	r2, [pc, #128]	; (b87c <SystemInit+0x28c>)
    b7fc:	f363 1086 	bfi	r0, r3, #6, #1
    b800:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    b804:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b808:	0659      	lsls	r1, r3, #25
    b80a:	d4fb      	bmi.n	b804 <SystemInit+0x214>
    b80c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b810:	491a      	ldr	r1, [pc, #104]	; (b87c <SystemInit+0x28c>)
    b812:	2006      	movs	r0, #6
    b814:	f360 0303 	bfi	r3, r0, #0, #4
    b818:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    b81c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b824:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    b828:	684b      	ldr	r3, [r1, #4]
    b82a:	f013 0318 	ands.w	r3, r3, #24
    b82e:	d1fb      	bne.n	b828 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    b830:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    b834:	4a11      	ldr	r2, [pc, #68]	; (b87c <SystemInit+0x28c>)
    b836:	f363 1086 	bfi	r0, r3, #6, #1
    b83a:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    b83e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    b842:	065b      	lsls	r3, r3, #25
    b844:	d4fb      	bmi.n	b83e <SystemInit+0x24e>
    b846:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    b84a:	490c      	ldr	r1, [pc, #48]	; (b87c <SystemInit+0x28c>)
    b84c:	2006      	movs	r0, #6
    b84e:	f360 0303 	bfi	r3, r0, #0, #4
    b852:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    b856:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    b85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b85e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    b862:	684b      	ldr	r3, [r1, #4]
    b864:	f013 0f18 	tst.w	r3, #24
    b868:	d1fb      	bne.n	b862 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    b86a:	4a04      	ldr	r2, [pc, #16]	; (b87c <SystemInit+0x28c>)
    b86c:	6853      	ldr	r3, [r2, #4]
    b86e:	2b00      	cmp	r3, #0
    b870:	d1fc      	bne.n	b86c <SystemInit+0x27c>
        continue;
    }
    return;
}
    b872:	bcf0      	pop	{r4, r5, r6, r7}
    b874:	4770      	bx	lr
    b876:	bf00      	nop
    b878:	40001000 	.word	0x40001000
    b87c:	40001c00 	.word	0x40001c00
    b880:	00190301 	.word	0x00190301
    b884:	40000800 	.word	0x40000800
    b888:	00020107 	.word	0x00020107
    b88c:	00320b01 	.word	0x00320b01
    b890:	41006000 	.word	0x41006000
    b894:	e000ed00 	.word	0xe000ed00
    b898:	003a0108 	.word	0x003a0108
    b89c:	000c0108 	.word	0x000c0108

0000b8a0 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    b8a0:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    b8a2:	4a0e      	ldr	r2, [pc, #56]	; (b8dc <GClkFreqUpdate+0x3c>)
    b8a4:	f100 0408 	add.w	r4, r0, #8
    b8a8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    b8ac:	f003 030f 	and.w	r3, r3, #15
    b8b0:	2b01      	cmp	r3, #1
    b8b2:	d001      	beq.n	b8b8 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    b8b4:	bc70      	pop	{r4, r5, r6}
    b8b6:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    b8b8:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    b8bc:	4d08      	ldr	r5, [pc, #32]	; (b8e0 <GClkFreqUpdate+0x40>)
    b8be:	fbb5 f1f1 	udiv	r1, r5, r1
    b8c2:	b289      	uxth	r1, r1
    b8c4:	f361 461f 	bfi	r6, r1, #16, #16
    b8c8:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    b8cc:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    b8ce:	6851      	ldr	r1, [r2, #4]
    b8d0:	f3c1 018b 	ubfx	r1, r1, #2, #12
    b8d4:	4219      	tst	r1, r3
    b8d6:	d1fa      	bne.n	b8ce <GClkFreqUpdate+0x2e>
}
    b8d8:	bc70      	pop	{r4, r5, r6}
    b8da:	4770      	bx	lr
    b8dc:	40001c00 	.word	0x40001c00
    b8e0:	017d7840 	.word	0x017d7840

0000b8e4 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    b8e4:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    b8e6:	4911      	ldr	r1, [pc, #68]	; (b92c <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    b8e8:	4b11      	ldr	r3, [pc, #68]	; (b930 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    b8ea:	4a12      	ldr	r2, [pc, #72]	; (b934 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    b8ec:	6001      	str	r1, [r0, #0]
    b8ee:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    b8f0:	4604      	mov	r4, r0
      m_stepsLast(0) {
    b8f2:	6042      	str	r2, [r0, #4]
    b8f4:	6083      	str	r3, [r0, #8]
    b8f6:	60c5      	str	r5, [r0, #12]
    b8f8:	6105      	str	r5, [r0, #16]
    b8fa:	6145      	str	r5, [r0, #20]
    b8fc:	8305      	strh	r5, [r0, #24]
    b8fe:	4629      	mov	r1, r5
    b900:	22c8      	movs	r2, #200	; 0xc8
    b902:	301c      	adds	r0, #28
    b904:	f012 fcca 	bl	1e29c <memset>
    b908:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    b90c:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    b910:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    b914:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    b918:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    b91c:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    b920:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    b924:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    b928:	4620      	mov	r0, r4
    b92a:	bd38      	pop	{r3, r4, r5, pc}
    b92c:	00022fc4 	.word	0x00022fc4
    b930:	00022fe4 	.word	0x00022fe4
    b934:	00022fd4 	.word	0x00022fd4

0000b938 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    b938:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    b93a:	4a12      	ldr	r2, [pc, #72]	; (b984 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    b93c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    b940:	f36f 1386 	bfc	r3, #6, #1
    b944:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    b948:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    b94c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b950:	2b00      	cmp	r3, #0
    b952:	d1f9      	bne.n	b948 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    b954:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    b958:	490b      	ldr	r1, [pc, #44]	; (b988 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    b95a:	4c0c      	ldr	r4, [pc, #48]	; (b98c <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    b95c:	4d0c      	ldr	r5, [pc, #48]	; (b990 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    b95e:	f363 0003 	bfi	r0, r3, #0, #4
    b962:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    b966:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    b96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b96e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    b972:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    b974:	69cb      	ldr	r3, [r1, #28]
    b976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b97a:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    b97c:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    b97e:	bc30      	pop	{r4, r5}
    b980:	4770      	bx	lr
    b982:	bf00      	nop
    b984:	40001c00 	.word	0x40001c00
    b988:	40000800 	.word	0x40000800
    b98c:	42001c00 	.word	0x42001c00
    b990:	07030000 	.word	0x07030000

0000b994 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    b996:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    b99a:	2b00      	cmp	r3, #0
    b99c:	d038      	beq.n	ba10 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    b99e:	4a29      	ldr	r2, [pc, #164]	; (ba44 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    b9a0:	2360      	movs	r3, #96	; 0x60
    b9a2:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    b9a4:	6913      	ldr	r3, [r2, #16]
    b9a6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    b9aa:	d1fb      	bne.n	b9a4 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    b9ac:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    b9ae:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    b9b0:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    b9b4:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    b9b8:	1aaa      	subs	r2, r5, r2
    b9ba:	b212      	sxth	r2, r2
    b9bc:	4604      	mov	r4, r0
    b9be:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    b9c2:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    b9c4:	bb29      	cbnz	r1, ba12 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    b9c6:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    b9c8:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    b9cc:	f3bf 8f5b 	dmb	ish
    b9d0:	e853 6f00 	ldrex	r6, [r3]
    b9d4:	4416      	add	r6, r2
    b9d6:	e843 6100 	strex	r1, r6, [r3]
    b9da:	2900      	cmp	r1, #0
    b9dc:	d1f8      	bne.n	b9d0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    b9de:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    b9e2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    b9e6:	4d18      	ldr	r5, [pc, #96]	; (ba48 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    b9e8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    b9ec:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    b9ee:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    b9f0:	fb85 2503 	smull	r2, r5, r5, r3
    b9f4:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    b9f6:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    b9f8:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    b9fc:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    b9fe:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    ba00:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    ba04:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    ba08:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    ba0a:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    ba0c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    ba10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    ba12:	68c6      	ldr	r6, [r0, #12]
    ba14:	f3bf 8f5b 	dmb	ish
    ba18:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    ba1c:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    ba20:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    ba22:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    ba26:	4432      	add	r2, r6
    ba28:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    ba2a:	4808      	ldr	r0, [pc, #32]	; (ba4c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    ba2c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    ba30:	f991 1003 	ldrsb.w	r1, [r1, #3]
    ba34:	6800      	ldr	r0, [r0, #0]
    ba36:	2201      	movs	r2, #1
    ba38:	f003 ffee 	bl	fa18 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    ba3c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    ba40:	e7c1      	b.n	b9c6 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    ba42:	bf00      	nop
    ba44:	42001c00 	.word	0x42001c00
    ba48:	51eb851f 	.word	0x51eb851f
    ba4c:	20001f08 	.word	0x20001f08

0000ba50 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ba50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ba52:	780d      	ldrb	r5, [r1, #0]
    ba54:	f3c5 1441 	ubfx	r4, r5, #5, #2
    ba58:	2c01      	cmp	r4, #1
{
    ba5a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ba5c:	d152      	bne.n	bb04 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ba5e:	4e30      	ldr	r6, [pc, #192]	; (bb20 <cdcdf_acm_req+0xd0>)
    ba60:	888c      	ldrh	r4, [r1, #4]
    ba62:	7833      	ldrb	r3, [r6, #0]
    ba64:	42a3      	cmp	r3, r4
    ba66:	d002      	beq.n	ba6e <cdcdf_acm_req+0x1e>
    ba68:	7873      	ldrb	r3, [r6, #1]
    ba6a:	42a3      	cmp	r3, r4
    ba6c:	d14a      	bne.n	bb04 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ba6e:	062b      	lsls	r3, r5, #24
    ba70:	4617      	mov	r7, r2
    ba72:	4606      	mov	r6, r0
    ba74:	460c      	mov	r4, r1
    ba76:	d438      	bmi.n	baea <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    ba78:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ba7a:	f000 fc7f 	bl	c37c <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    ba7e:	7863      	ldrb	r3, [r4, #1]
    ba80:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ba82:	4601      	mov	r1, r0
	switch (req->bRequest) {
    ba84:	d00f      	beq.n	baa6 <cdcdf_acm_req+0x56>
    ba86:	2b22      	cmp	r3, #34	; 0x22
    ba88:	d128      	bne.n	badc <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    ba8a:	2300      	movs	r3, #0
    ba8c:	461a      	mov	r2, r3
    ba8e:	4619      	mov	r1, r3
    ba90:	4618      	mov	r0, r3
    ba92:	f000 fc07 	bl	c2a4 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    ba96:	4b23      	ldr	r3, [pc, #140]	; (bb24 <cdcdf_acm_req+0xd4>)
    ba98:	681b      	ldr	r3, [r3, #0]
    ba9a:	b31b      	cbz	r3, bae4 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    ba9c:	8860      	ldrh	r0, [r4, #2]
    ba9e:	4798      	blx	r3
		return ERR_NONE;
    baa0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    baa2:	b003      	add	sp, #12
    baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    baa6:	2d07      	cmp	r5, #7
    baa8:	d136      	bne.n	bb18 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    baaa:	b37f      	cbz	r7, bb0c <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    baac:	4b1e      	ldr	r3, [pc, #120]	; (bb28 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    baae:	6800      	ldr	r0, [r0, #0]
    bab0:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bab2:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bab4:	888a      	ldrh	r2, [r1, #4]
    bab6:	7989      	ldrb	r1, [r1, #6]
    bab8:	f88d 1006 	strb.w	r1, [sp, #6]
    babc:	466c      	mov	r4, sp
    babe:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bac2:	b113      	cbz	r3, baca <cdcdf_acm_req+0x7a>
    bac4:	4668      	mov	r0, sp
    bac6:	4798      	blx	r3
    bac8:	b160      	cbz	r0, bae4 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    baca:	e894 0003 	ldmia.w	r4, {r0, r1}
    bace:	4b17      	ldr	r3, [pc, #92]	; (bb2c <cdcdf_acm_req+0xdc>)
    bad0:	0c0a      	lsrs	r2, r1, #16
    bad2:	6018      	str	r0, [r3, #0]
    bad4:	8099      	strh	r1, [r3, #4]
    bad6:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    bad8:	2000      	movs	r0, #0
    bada:	e001      	b.n	bae0 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    badc:	f06f 000c 	mvn.w	r0, #12
}
    bae0:	b003      	add	sp, #12
    bae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    bae4:	2000      	movs	r0, #0
}
    bae6:	b003      	add	sp, #12
    bae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    baea:	2a01      	cmp	r2, #1
    baec:	d0fa      	beq.n	bae4 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    baee:	784b      	ldrb	r3, [r1, #1]
    baf0:	2b21      	cmp	r3, #33	; 0x21
    baf2:	d1f3      	bne.n	badc <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    baf4:	88ca      	ldrh	r2, [r1, #6]
    baf6:	2a07      	cmp	r2, #7
    baf8:	d10e      	bne.n	bb18 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bafa:	2300      	movs	r3, #0
    bafc:	490b      	ldr	r1, [pc, #44]	; (bb2c <cdcdf_acm_req+0xdc>)
    bafe:	f000 fbd1 	bl	c2a4 <usbdc_xfer>
    bb02:	e7ed      	b.n	bae0 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    bb04:	f06f 0009 	mvn.w	r0, #9
}
    bb08:	b003      	add	sp, #12
    bb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bb0c:	463b      	mov	r3, r7
    bb0e:	462a      	mov	r2, r5
    bb10:	4630      	mov	r0, r6
    bb12:	f000 fbc7 	bl	c2a4 <usbdc_xfer>
    bb16:	e7e3      	b.n	bae0 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    bb18:	f04f 30ff 	mov.w	r0, #4294967295
    bb1c:	e7e0      	b.n	bae0 <cdcdf_acm_req+0x90>
    bb1e:	bf00      	nop
    bb20:	20001c10 	.word	0x20001c10
    bb24:	20001c18 	.word	0x20001c18
    bb28:	20001c1c 	.word	0x20001c1c
    bb2c:	20001c20 	.word	0x20001c20

0000bb30 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    bb30:	2901      	cmp	r1, #1
{
    bb32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bb36:	4616      	mov	r6, r2
	switch (ctrl) {
    bb38:	d008      	beq.n	bb4c <cdcdf_acm_ctrl+0x1c>
    bb3a:	d314      	bcc.n	bb66 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    bb3c:	2902      	cmp	r1, #2
    bb3e:	bf0c      	ite	eq
    bb40:	f06f 001a 	mvneq.w	r0, #26
    bb44:	f06f 000c 	mvnne.w	r0, #12
    bb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bb4c:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    bb4e:	2a00      	cmp	r2, #0
    bb50:	d047      	beq.n	bbe2 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bb52:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bb54:	795b      	ldrb	r3, [r3, #5]
    bb56:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    bb5a:	2b02      	cmp	r3, #2
    bb5c:	d041      	beq.n	bbe2 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    bb5e:	f06f 0009 	mvn.w	r0, #9
    bb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    bb66:	6813      	ldr	r3, [r2, #0]
    bb68:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d0f7      	beq.n	bb5e <cdcdf_acm_ctrl+0x2e>
    bb6e:	f107 38ff 	add.w	r8, r7, #4294967295
    bb72:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bb76:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    bb78:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bb7a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    bb7e:	2a02      	cmp	r2, #2
    bb80:	d1ed      	bne.n	bb5e <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bb82:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    bb86:	4291      	cmp	r1, r2
    bb88:	d061      	beq.n	bc4e <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bb8a:	2aff      	cmp	r2, #255	; 0xff
    bb8c:	d15b      	bne.n	bc46 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bb8e:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bb92:	4618      	mov	r0, r3
    bb94:	6871      	ldr	r1, [r6, #4]
    bb96:	2205      	movs	r2, #5
    bb98:	f000 fc00 	bl	c39c <usb_find_desc>
		while (NULL != ep) {
    bb9c:	4604      	mov	r4, r0
    bb9e:	b980      	cbnz	r0, bbc2 <cdcdf_acm_ctrl+0x92>
    bba0:	e041      	b.n	bc26 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bba2:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bba4:	bf4c      	ite	mi
    bba6:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bbaa:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bbac:	4628      	mov	r0, r5
    bbae:	f000 feaf 	bl	c910 <usb_d_ep_enable>
			desc->sod = ep;
    bbb2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    bbb4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bbb6:	6871      	ldr	r1, [r6, #4]
    bbb8:	4420      	add	r0, r4
    bbba:	f000 fc09 	bl	c3d0 <usb_find_ep_desc>
		while (NULL != ep) {
    bbbe:	4604      	mov	r4, r0
    bbc0:	b388      	cbz	r0, bc26 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    bbc2:	7963      	ldrb	r3, [r4, #5]
    bbc4:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    bbc6:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bbc8:	78e1      	ldrb	r1, [r4, #3]
    bbca:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    bbce:	b292      	uxth	r2, r2
    bbd0:	4628      	mov	r0, r5
    bbd2:	f000 fe4b 	bl	c86c <usb_d_ep_init>
    bbd6:	2800      	cmp	r0, #0
    bbd8:	d0e3      	beq.n	bba2 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    bbda:	f06f 0013 	mvn.w	r0, #19
}
    bbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    bbe2:	7823      	ldrb	r3, [r4, #0]
    bbe4:	2bff      	cmp	r3, #255	; 0xff
    bbe6:	d007      	beq.n	bbf8 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    bbe8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    bbea:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bbec:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bbee:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    bbf0:	d002      	beq.n	bbf8 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bbf2:	f000 fe71 	bl	c8d8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    bbf6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    bbf8:	7863      	ldrb	r3, [r4, #1]
    bbfa:	2bff      	cmp	r3, #255	; 0xff
    bbfc:	d007      	beq.n	bc0e <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    bbfe:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    bc00:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bc02:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bc04:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    bc06:	d002      	beq.n	bc0e <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bc08:	f000 fe66 	bl	c8d8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    bc0c:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    bc0e:	7920      	ldrb	r0, [r4, #4]
    bc10:	28ff      	cmp	r0, #255	; 0xff
    bc12:	d003      	beq.n	bc1c <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    bc14:	f000 fe60 	bl	c8d8 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    bc18:	23ff      	movs	r3, #255	; 0xff
    bc1a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    bc1c:	4b0f      	ldr	r3, [pc, #60]	; (bc5c <cdcdf_acm_ctrl+0x12c>)
    bc1e:	2000      	movs	r0, #0
    bc20:	7158      	strb	r0, [r3, #5]
    bc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bc26:	6833      	ldr	r3, [r6, #0]
    bc28:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    bc2a:	7818      	ldrb	r0, [r3, #0]
    bc2c:	2204      	movs	r2, #4
    bc2e:	4418      	add	r0, r3
    bc30:	f000 fbb4 	bl	c39c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    bc34:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bc36:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    bc38:	d10d      	bne.n	bc56 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    bc3a:	4b08      	ldr	r3, [pc, #32]	; (bc5c <cdcdf_acm_ctrl+0x12c>)
    bc3c:	2201      	movs	r2, #1
    bc3e:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bc40:	2000      	movs	r0, #0
    bc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    bc46:	f06f 001b 	mvn.w	r0, #27
    bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    bc4e:	f06f 0011 	mvn.w	r0, #17
    bc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    bc56:	2b00      	cmp	r3, #0
    bc58:	d18d      	bne.n	bb76 <cdcdf_acm_ctrl+0x46>
    bc5a:	e780      	b.n	bb5e <cdcdf_acm_ctrl+0x2e>
    bc5c:	20001c10 	.word	0x20001c10

0000bc60 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bc60:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    bc62:	f000 fb91 	bl	c388 <usbdc_get_state>
    bc66:	2801      	cmp	r0, #1
    bc68:	d80d      	bhi.n	bc86 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bc6a:	4b08      	ldr	r3, [pc, #32]	; (bc8c <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bc6c:	4a08      	ldr	r2, [pc, #32]	; (bc90 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bc6e:	4909      	ldr	r1, [pc, #36]	; (bc94 <cdcdf_acm_init+0x34>)
    bc70:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    bc72:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bc74:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    bc76:	f000 fb61 	bl	c33c <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bc7a:	4907      	ldr	r1, [pc, #28]	; (bc98 <cdcdf_acm_init+0x38>)
    bc7c:	2001      	movs	r0, #1
    bc7e:	f000 fb1f 	bl	c2c0 <usbdc_register_handler>
	return ERR_NONE;
    bc82:	2000      	movs	r0, #0
    bc84:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bc86:	f06f 0010 	mvn.w	r0, #16
}
    bc8a:	bd08      	pop	{r3, pc}
    bc8c:	20001c04 	.word	0x20001c04
    bc90:	20001c10 	.word	0x20001c10
    bc94:	0000bb31 	.word	0x0000bb31
    bc98:	200000e4 	.word	0x200000e4

0000bc9c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    bc9c:	4b08      	ldr	r3, [pc, #32]	; (bcc0 <cdcdf_acm_read+0x24>)
{
    bc9e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    bca0:	795c      	ldrb	r4, [r3, #5]
    bca2:	b13c      	cbz	r4, bcb4 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bca4:	460a      	mov	r2, r1
}
    bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bcaa:	4601      	mov	r1, r0
    bcac:	7918      	ldrb	r0, [r3, #4]
    bcae:	2300      	movs	r3, #0
    bcb0:	f000 baf8 	b.w	c2a4 <usbdc_xfer>
}
    bcb4:	f06f 0010 	mvn.w	r0, #16
    bcb8:	f85d 4b04 	ldr.w	r4, [sp], #4
    bcbc:	4770      	bx	lr
    bcbe:	bf00      	nop
    bcc0:	20001c10 	.word	0x20001c10

0000bcc4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    bcc4:	4b08      	ldr	r3, [pc, #32]	; (bce8 <cdcdf_acm_write+0x24>)
{
    bcc6:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    bcc8:	795c      	ldrb	r4, [r3, #5]
    bcca:	b13c      	cbz	r4, bcdc <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bccc:	460a      	mov	r2, r1
}
    bcce:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bcd2:	4601      	mov	r1, r0
    bcd4:	78d8      	ldrb	r0, [r3, #3]
    bcd6:	2301      	movs	r3, #1
    bcd8:	f000 bae4 	b.w	c2a4 <usbdc_xfer>
}
    bcdc:	f06f 0010 	mvn.w	r0, #16
    bce0:	f85d 4b04 	ldr.w	r4, [sp], #4
    bce4:	4770      	bx	lr
    bce6:	bf00      	nop
    bce8:	20001c10 	.word	0x20001c10

0000bcec <cdcdf_acm_stop_xfer>:
{
    bcec:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bcee:	4c04      	ldr	r4, [pc, #16]	; (bd00 <cdcdf_acm_stop_xfer+0x14>)
    bcf0:	78e0      	ldrb	r0, [r4, #3]
    bcf2:	f000 fecb 	bl	ca8c <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bcf6:	7920      	ldrb	r0, [r4, #4]
}
    bcf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bcfc:	f000 bec6 	b.w	ca8c <usb_d_ep_abort>
    bd00:	20001c10 	.word	0x20001c10

0000bd04 <cdcdf_acm_register_callback>:
{
    bd04:	b508      	push	{r3, lr}
	switch (cb_type) {
    bd06:	2803      	cmp	r0, #3
    bd08:	d81b      	bhi.n	bd42 <cdcdf_acm_register_callback+0x3e>
    bd0a:	e8df f000 	tbb	[pc, r0]
    bd0e:	0a12      	.short	0x0a12
    bd10:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bd12:	4b0d      	ldr	r3, [pc, #52]	; (bd48 <cdcdf_acm_register_callback+0x44>)
    bd14:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    bd16:	2000      	movs	r0, #0
		break;
    bd18:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bd1a:	4b0c      	ldr	r3, [pc, #48]	; (bd4c <cdcdf_acm_register_callback+0x48>)
    bd1c:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    bd1e:	2000      	movs	r0, #0
		break;
    bd20:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bd22:	4b0b      	ldr	r3, [pc, #44]	; (bd50 <cdcdf_acm_register_callback+0x4c>)
    bd24:	460a      	mov	r2, r1
    bd26:	78d8      	ldrb	r0, [r3, #3]
    bd28:	2102      	movs	r1, #2
    bd2a:	f000 ff05 	bl	cb38 <usb_d_ep_register_callback>
	return ERR_NONE;
    bd2e:	2000      	movs	r0, #0
		break;
    bd30:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bd32:	4b07      	ldr	r3, [pc, #28]	; (bd50 <cdcdf_acm_register_callback+0x4c>)
    bd34:	460a      	mov	r2, r1
    bd36:	7918      	ldrb	r0, [r3, #4]
    bd38:	2102      	movs	r1, #2
    bd3a:	f000 fefd 	bl	cb38 <usb_d_ep_register_callback>
	return ERR_NONE;
    bd3e:	2000      	movs	r0, #0
		break;
    bd40:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    bd42:	f06f 000c 	mvn.w	r0, #12
}
    bd46:	bd08      	pop	{r3, pc}
    bd48:	20001c18 	.word	0x20001c18
    bd4c:	20001c1c 	.word	0x20001c1c
    bd50:	20001c10 	.word	0x20001c10

0000bd54 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    bd54:	4b01      	ldr	r3, [pc, #4]	; (bd5c <cdcdf_acm_is_enabled+0x8>)
}
    bd56:	7958      	ldrb	r0, [r3, #5]
    bd58:	4770      	bx	lr
    bd5a:	bf00      	nop
    bd5c:	20001c10 	.word	0x20001c10

0000bd60 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    bd60:	4800      	ldr	r0, [pc, #0]	; (bd64 <cdcdf_acm_get_line_coding+0x4>)
    bd62:	4770      	bx	lr
    bd64:	20001c20 	.word	0x20001c20

0000bd68 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bd68:	4b05      	ldr	r3, [pc, #20]	; (bd80 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bd6a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bd6c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    bd6e:	b12c      	cbz	r4, bd7c <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    bd70:	6863      	ldr	r3, [r4, #4]
    bd72:	b103      	cbz	r3, bd76 <usbd_sof_cb+0xe>
			sof->cb();
    bd74:	4798      	blx	r3
		sof = sof->next;
    bd76:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    bd78:	2c00      	cmp	r4, #0
    bd7a:	d1f9      	bne.n	bd70 <usbd_sof_cb+0x8>
    bd7c:	bd10      	pop	{r4, pc}
    bd7e:	bf00      	nop
    bd80:	20001c28 	.word	0x20001c28

0000bd84 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    bd84:	b538      	push	{r3, r4, r5, lr}
    bd86:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    bd88:	b189      	cbz	r1, bdae <usbdc_cb_ctl_done+0x2a>
    bd8a:	2901      	cmp	r1, #1
    bd8c:	d10d      	bne.n	bdaa <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bd8e:	4b23      	ldr	r3, [pc, #140]	; (be1c <usbdc_cb_ctl_done+0x98>)
    bd90:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    bd92:	b154      	cbz	r4, bdaa <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    bd94:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    bd96:	2201      	movs	r2, #1
    bd98:	4629      	mov	r1, r5
    bd9a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    bd9c:	b113      	cbz	r3, bda4 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    bd9e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    bda0:	300a      	adds	r0, #10
    bda2:	d102      	bne.n	bdaa <usbdc_cb_ctl_done+0x26>
		h = h->next;
    bda4:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    bda6:	2c00      	cmp	r4, #0
    bda8:	d1f4      	bne.n	bd94 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    bdaa:	2000      	movs	r0, #0
    bdac:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    bdae:	7813      	ldrb	r3, [r2, #0]
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d1fa      	bne.n	bdaa <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    bdb4:	7853      	ldrb	r3, [r2, #1]
    bdb6:	2b05      	cmp	r3, #5
    bdb8:	d014      	beq.n	bde4 <usbdc_cb_ctl_done+0x60>
    bdba:	2b09      	cmp	r3, #9
    bdbc:	d1f5      	bne.n	bdaa <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    bdbe:	8852      	ldrh	r2, [r2, #2]
    bdc0:	4b16      	ldr	r3, [pc, #88]	; (be1c <usbdc_cb_ctl_done+0x98>)
    bdc2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bdc4:	bb3a      	cbnz	r2, be16 <usbdc_cb_ctl_done+0x92>
    bdc6:	2503      	movs	r5, #3
    bdc8:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bdca:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bdcc:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    bdce:	2c00      	cmp	r4, #0
    bdd0:	d0eb      	beq.n	bdaa <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    bdd2:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    bdd4:	4629      	mov	r1, r5
    bdd6:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    bdd8:	b103      	cbz	r3, bddc <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    bdda:	4798      	blx	r3
		cg = cg->next;
    bddc:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    bdde:	2c00      	cmp	r4, #0
    bde0:	d1f7      	bne.n	bdd2 <usbdc_cb_ctl_done+0x4e>
    bde2:	e7e2      	b.n	bdaa <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    bde4:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    bde6:	b2c0      	uxtb	r0, r0
    bde8:	f000 fcf0 	bl	c7cc <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bdec:	886b      	ldrh	r3, [r5, #2]
    bdee:	b97b      	cbnz	r3, be10 <usbdc_cb_ctl_done+0x8c>
    bdf0:	2502      	movs	r5, #2
    bdf2:	462a      	mov	r2, r5
    bdf4:	4b09      	ldr	r3, [pc, #36]	; (be1c <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    bdf6:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bdf8:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    bdfa:	2c00      	cmp	r4, #0
    bdfc:	d0d5      	beq.n	bdaa <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    bdfe:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    be00:	4629      	mov	r1, r5
    be02:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    be04:	b103      	cbz	r3, be08 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    be06:	4798      	blx	r3
		cg = cg->next;
    be08:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    be0a:	2c00      	cmp	r4, #0
    be0c:	d1f7      	bne.n	bdfe <usbdc_cb_ctl_done+0x7a>
    be0e:	e7cc      	b.n	bdaa <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    be10:	2503      	movs	r5, #3
    be12:	462a      	mov	r2, r5
    be14:	e7ee      	b.n	bdf4 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    be16:	2504      	movs	r5, #4
    be18:	462a      	mov	r2, r5
    be1a:	e7d6      	b.n	bdca <usbdc_cb_ctl_done+0x46>
    be1c:	20001c28 	.word	0x20001c28

0000be20 <usbdc_cb_ctl_req>:
{
    be20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    be24:	4fb6      	ldr	r7, [pc, #728]	; (c100 <usbdc_cb_ctl_req+0x2e0>)
    be26:	68bc      	ldr	r4, [r7, #8]
{
    be28:	b086      	sub	sp, #24
    be2a:	4606      	mov	r6, r0
    be2c:	460d      	mov	r5, r1
	while (h != NULL) {
    be2e:	b15c      	cbz	r4, be48 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    be30:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    be32:	2200      	movs	r2, #0
    be34:	4629      	mov	r1, r5
    be36:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    be38:	b11b      	cbz	r3, be42 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    be3a:	4798      	blx	r3
			if (0 == rc) {
    be3c:	b170      	cbz	r0, be5c <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    be3e:	300a      	adds	r0, #10
    be40:	d108      	bne.n	be54 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    be42:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    be44:	2c00      	cmp	r4, #0
    be46:	d1f3      	bne.n	be30 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    be48:	782b      	ldrb	r3, [r5, #0]
    be4a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    be4e:	d025      	beq.n	be9c <usbdc_cb_ctl_req+0x7c>
    be50:	2a80      	cmp	r2, #128	; 0x80
    be52:	d007      	beq.n	be64 <usbdc_cb_ctl_req+0x44>
		return false;
    be54:	2000      	movs	r0, #0
}
    be56:	b006      	add	sp, #24
    be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    be5c:	2001      	movs	r0, #1
}
    be5e:	b006      	add	sp, #24
    be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    be64:	786a      	ldrb	r2, [r5, #1]
    be66:	2a0a      	cmp	r2, #10
    be68:	d8f4      	bhi.n	be54 <usbdc_cb_ctl_req+0x34>
    be6a:	a101      	add	r1, pc, #4	; (adr r1, be70 <usbdc_cb_ctl_req+0x50>)
    be6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    be70:	0000bf8f 	.word	0x0000bf8f
    be74:	0000be55 	.word	0x0000be55
    be78:	0000be55 	.word	0x0000be55
    be7c:	0000be55 	.word	0x0000be55
    be80:	0000be55 	.word	0x0000be55
    be84:	0000be55 	.word	0x0000be55
    be88:	0000bf43 	.word	0x0000bf43
    be8c:	0000be55 	.word	0x0000be55
    be90:	0000bf21 	.word	0x0000bf21
    be94:	0000be55 	.word	0x0000be55
    be98:	0000bed9 	.word	0x0000bed9
	switch (req->bRequest) {
    be9c:	786a      	ldrb	r2, [r5, #1]
    be9e:	3a01      	subs	r2, #1
    bea0:	2a0a      	cmp	r2, #10
    bea2:	d8d7      	bhi.n	be54 <usbdc_cb_ctl_req+0x34>
    bea4:	a101      	add	r1, pc, #4	; (adr r1, beac <usbdc_cb_ctl_req+0x8c>)
    bea6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    beaa:	bf00      	nop
    beac:	0000c0a7 	.word	0x0000c0a7
    beb0:	0000be55 	.word	0x0000be55
    beb4:	0000c077 	.word	0x0000c077
    beb8:	0000be55 	.word	0x0000be55
    bebc:	0000c059 	.word	0x0000c059
    bec0:	0000be55 	.word	0x0000be55
    bec4:	0000be55 	.word	0x0000be55
    bec8:	0000be55 	.word	0x0000be55
    becc:	0000c033 	.word	0x0000c033
    bed0:	0000be55 	.word	0x0000be55
    bed4:	0000bfd7 	.word	0x0000bfd7
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    bed8:	7f7b      	ldrb	r3, [r7, #29]
    beda:	88aa      	ldrh	r2, [r5, #4]
    bedc:	4113      	asrs	r3, r2
    bede:	f013 0301 	ands.w	r3, r3, #1
    bee2:	f000 818e 	beq.w	c202 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bee6:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    bee8:	b91c      	cbnz	r4, bef2 <usbdc_cb_ctl_req+0xd2>
    beea:	e7b3      	b.n	be54 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    beec:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    beee:	2c00      	cmp	r4, #0
    bef0:	d0b0      	beq.n	be54 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bef2:	6863      	ldr	r3, [r4, #4]
    bef4:	462a      	mov	r2, r5
    bef6:	2102      	movs	r1, #2
    bef8:	4620      	mov	r0, r4
    befa:	4798      	blx	r3
    befc:	2800      	cmp	r0, #0
    befe:	dbf5      	blt.n	beec <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bf00:	697b      	ldr	r3, [r7, #20]
    bf02:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bf04:	697b      	ldr	r3, [r7, #20]
    bf06:	9303      	str	r3, [sp, #12]
    bf08:	2401      	movs	r4, #1
    bf0a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    bf0c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bf0e:	9404      	str	r4, [sp, #16]
    bf10:	f88d 3014 	strb.w	r3, [sp, #20]
    bf14:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    bf18:	f000 fd24 	bl	c964 <usb_d_ep_transfer>
			return true;
    bf1c:	4620      	mov	r0, r4
    bf1e:	e79a      	b.n	be56 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bf20:	697b      	ldr	r3, [r7, #20]
    bf22:	7efa      	ldrb	r2, [r7, #27]
    bf24:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bf26:	697b      	ldr	r3, [r7, #20]
    bf28:	9303      	str	r3, [sp, #12]
    bf2a:	2401      	movs	r4, #1
    bf2c:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    bf2e:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bf30:	f88d 6014 	strb.w	r6, [sp, #20]
    bf34:	9404      	str	r4, [sp, #16]
    bf36:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    bf3a:	f000 fd13 	bl	c964 <usb_d_ep_transfer>
		return true;
    bf3e:	4620      	mov	r0, r4
    bf40:	e789      	b.n	be56 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    bf42:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    bf44:	0a1a      	lsrs	r2, r3, #8
    bf46:	2a02      	cmp	r2, #2
    bf48:	f000 810a 	beq.w	c160 <usbdc_cb_ctl_req+0x340>
    bf4c:	2a03      	cmp	r2, #3
    bf4e:	f000 80f0 	beq.w	c132 <usbdc_cb_ctl_req+0x312>
    bf52:	2a01      	cmp	r2, #1
    bf54:	f47f af7e 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    bf58:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    bf5a:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    bf5c:	e893 0003 	ldmia.w	r3, {r0, r1}
    bf60:	2c12      	cmp	r4, #18
    bf62:	bf28      	it	cs
    bf64:	2412      	movcs	r4, #18
    bf66:	f000 fa19 	bl	c39c <usb_find_desc>
	if (!dev_desc) {
    bf6a:	4603      	mov	r3, r0
    bf6c:	2800      	cmp	r0, #0
    bf6e:	f43f af71 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    bf72:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    bf74:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bf76:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bf78:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bf7a:	f88d 6014 	strb.w	r6, [sp, #20]
    bf7e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    bf82:	f000 fcef 	bl	c964 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bf86:	fab0 f080 	clz	r0, r0
    bf8a:	0940      	lsrs	r0, r0, #5
    bf8c:	e763      	b.n	be56 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bf8e:	f003 011f 	and.w	r1, r3, #31
    bf92:	2901      	cmp	r1, #1
    bf94:	f240 8091 	bls.w	c0ba <usbdc_cb_ctl_req+0x29a>
    bf98:	2902      	cmp	r1, #2
    bf9a:	f47f af5b 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    bf9e:	88a8      	ldrh	r0, [r5, #4]
    bfa0:	b2c0      	uxtb	r0, r0
    bfa2:	f000 fd91 	bl	cac8 <usb_d_ep_halt>
		if (st < 0) {
    bfa6:	1e03      	subs	r3, r0, #0
    bfa8:	f6ff af54 	blt.w	be54 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    bfac:	f003 0301 	and.w	r3, r3, #1
    bfb0:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    bfb2:	697b      	ldr	r3, [r7, #20]
    bfb4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    bfb8:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bfba:	697b      	ldr	r3, [r7, #20]
    bfbc:	9303      	str	r3, [sp, #12]
    bfbe:	2202      	movs	r2, #2
    bfc0:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    bfc2:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    bfc4:	f88d 6014 	strb.w	r6, [sp, #20]
    bfc8:	9204      	str	r2, [sp, #16]
    bfca:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    bfce:	f000 fcc9 	bl	c964 <usb_d_ep_transfer>
	return true;
    bfd2:	2001      	movs	r0, #1
    bfd4:	e73f      	b.n	be56 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bfd6:	683b      	ldr	r3, [r7, #0]
    bfd8:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    bfda:	886c      	ldrh	r4, [r5, #2]
    bfdc:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bfde:	e893 0003 	ldmia.w	r3, {r0, r1}
    bfe2:	f000 fa0f 	bl	c404 <usb_find_cfg_desc>
	if (NULL == ifc) {
    bfe6:	2800      	cmp	r0, #0
    bfe8:	f43f af34 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    bfec:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    bfee:	78c1      	ldrb	r1, [r0, #3]
    bff0:	7883      	ldrb	r3, [r0, #2]
    bff2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bff6:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bffa:	4619      	mov	r1, r3
    bffc:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bffe:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c000:	f000 f9cc 	bl	c39c <usb_find_desc>
    c004:	2800      	cmp	r0, #0
    c006:	f43f af25 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c00a:	7883      	ldrb	r3, [r0, #2]
    c00c:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c00e:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c012:	d103      	bne.n	c01c <usbdc_cb_ctl_req+0x1fc>
    c014:	78c3      	ldrb	r3, [r0, #3]
    c016:	42a3      	cmp	r3, r4
    c018:	f000 80c9 	beq.w	c1ae <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c01c:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c01e:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c020:	7818      	ldrb	r0, [r3, #0]
    c022:	4403      	add	r3, r0
    c024:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c026:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c028:	f000 f9b8 	bl	c39c <usb_find_desc>
		if (NULL == ifc) {
    c02c:	2800      	cmp	r0, #0
    c02e:	d1ec      	bne.n	c00a <usbdc_cb_ctl_req+0x1ea>
    c030:	e710      	b.n	be54 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c032:	886a      	ldrh	r2, [r5, #2]
    c034:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c036:	2a00      	cmp	r2, #0
    c038:	d142      	bne.n	c0c0 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c03a:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c03c:	b13c      	cbz	r4, c04e <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c03e:	6863      	ldr	r3, [r4, #4]
    c040:	4620      	mov	r0, r4
    c042:	2200      	movs	r2, #0
    c044:	2101      	movs	r1, #1
    c046:	4798      	blx	r3
		func = func->next;
    c048:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c04a:	2c00      	cmp	r4, #0
    c04c:	d1f7      	bne.n	c03e <usbdc_cb_ctl_req+0x21e>
    c04e:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c050:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c052:	2300      	movs	r3, #0
    c054:	2201      	movs	r2, #1
    c056:	e002      	b.n	c05e <usbdc_cb_ctl_req+0x23e>
    c058:	2300      	movs	r3, #0
    c05a:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c05c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c05e:	f88d 6014 	strb.w	r6, [sp, #20]
    c062:	9303      	str	r3, [sp, #12]
    c064:	9304      	str	r3, [sp, #16]
    c066:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c06a:	f000 fc7b 	bl	c964 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c06e:	fab0 f080 	clz	r0, r0
    c072:	0940      	lsrs	r0, r0, #5
    c074:	e6ef      	b.n	be56 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c076:	2b02      	cmp	r3, #2
    c078:	f47f aeec 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c07c:	88ef      	ldrh	r7, [r5, #6]
    c07e:	2f00      	cmp	r7, #0
    c080:	f47f aee8 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c084:	88a8      	ldrh	r0, [r5, #4]
    c086:	2101      	movs	r1, #1
    c088:	b2c0      	uxtb	r0, r0
    c08a:	f000 fd1d 	bl	cac8 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c08e:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c090:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c092:	9703      	str	r7, [sp, #12]
    c094:	9704      	str	r7, [sp, #16]
    c096:	f88d 6014 	strb.w	r6, [sp, #20]
    c09a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c09e:	f000 fc61 	bl	c964 <usb_d_ep_transfer>
		return true;
    c0a2:	4620      	mov	r0, r4
    c0a4:	e6d7      	b.n	be56 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c0a6:	2b02      	cmp	r3, #2
    c0a8:	f47f aed4 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c0ac:	88ef      	ldrh	r7, [r5, #6]
    c0ae:	2f00      	cmp	r7, #0
    c0b0:	f47f aed0 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c0b4:	88a8      	ldrh	r0, [r5, #4]
    c0b6:	4639      	mov	r1, r7
    c0b8:	e7e6      	b.n	c088 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c0ba:	2300      	movs	r3, #0
    c0bc:	9301      	str	r3, [sp, #4]
    c0be:	e778      	b.n	bfb2 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c0c0:	683b      	ldr	r3, [r7, #0]
    c0c2:	e893 0003 	ldmia.w	r3, {r0, r1}
    c0c6:	f000 f99d 	bl	c404 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c0ca:	2800      	cmp	r0, #0
    c0cc:	f43f aec2 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c0d0:	78c1      	ldrb	r1, [r0, #3]
    c0d2:	7882      	ldrb	r2, [r0, #2]
    c0d4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c0d8:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c0dc:	4619      	mov	r1, r3
    c0de:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c0e0:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c0e2:	f000 f95b 	bl	c39c <usb_find_desc>
    c0e6:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c0e8:	2800      	cmp	r0, #0
    c0ea:	d0b0      	beq.n	c04e <usbdc_cb_ctl_req+0x22e>
    c0ec:	24ff      	movs	r4, #255	; 0xff
    c0ee:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c0f0:	f890 8002 	ldrb.w	r8, [r0, #2]
    c0f4:	45a0      	cmp	r8, r4
    c0f6:	d010      	beq.n	c11a <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c0f8:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c0fa:	b92c      	cbnz	r4, c108 <usbdc_cb_ctl_req+0x2e8>
    c0fc:	e092      	b.n	c224 <usbdc_cb_ctl_req+0x404>
    c0fe:	bf00      	nop
    c100:	20001c28 	.word	0x20001c28
					func = func->next;
    c104:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c106:	b134      	cbz	r4, c116 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c108:	6863      	ldr	r3, [r4, #4]
    c10a:	462a      	mov	r2, r5
    c10c:	2100      	movs	r1, #0
    c10e:	4620      	mov	r0, r4
    c110:	4798      	blx	r3
    c112:	2800      	cmp	r0, #0
    c114:	d1f6      	bne.n	c104 <usbdc_cb_ctl_req+0x2e4>
    c116:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c118:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c11a:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c11c:	9904      	ldr	r1, [sp, #16]
    c11e:	4403      	add	r3, r0
    c120:	4618      	mov	r0, r3
    c122:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c124:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c126:	f000 f939 	bl	c39c <usb_find_desc>
    c12a:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c12c:	2800      	cmp	r0, #0
    c12e:	d1df      	bne.n	c0f0 <usbdc_cb_ctl_req+0x2d0>
    c130:	e78e      	b.n	c050 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c132:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c134:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c136:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c138:	e892 0003 	ldmia.w	r2, {r0, r1}
    c13c:	b2da      	uxtb	r2, r3
    c13e:	f000 f98d 	bl	c45c <usb_find_str_desc>
	if (NULL == str_desc) {
    c142:	4603      	mov	r3, r0
    c144:	2800      	cmp	r0, #0
    c146:	f43f ae85 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c14a:	7801      	ldrb	r1, [r0, #0]
    c14c:	428c      	cmp	r4, r1
    c14e:	f67f af10 	bls.w	bf72 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c152:	3d01      	subs	r5, #1
    c154:	4225      	tst	r5, r4
    c156:	bf0c      	ite	eq
    c158:	2201      	moveq	r2, #1
    c15a:	2200      	movne	r2, #0
    c15c:	460c      	mov	r4, r1
    c15e:	e709      	b.n	bf74 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c160:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c162:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c164:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c166:	3301      	adds	r3, #1
    c168:	e892 0003 	ldmia.w	r2, {r0, r1}
    c16c:	b2da      	uxtb	r2, r3
    c16e:	f000 f949 	bl	c404 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c172:	4602      	mov	r2, r0
    c174:	2800      	cmp	r0, #0
    c176:	f43f ae6d 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c17a:	78c1      	ldrb	r1, [r0, #3]
    c17c:	7883      	ldrb	r3, [r0, #2]
    c17e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c182:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c184:	429c      	cmp	r4, r3
    c186:	d94b      	bls.n	c220 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c188:	3d01      	subs	r5, #1
    c18a:	4225      	tst	r5, r4
    c18c:	bf0c      	ite	eq
    c18e:	2101      	moveq	r1, #1
    c190:	2100      	movne	r1, #0
    c192:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c194:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c196:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c198:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c19a:	f88d 6014 	strb.w	r6, [sp, #20]
    c19e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c1a2:	f000 fbdf 	bl	c964 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c1a6:	fab0 f080 	clz	r0, r0
    c1aa:	0940      	lsrs	r0, r0, #5
    c1ac:	e653      	b.n	be56 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c1ae:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c1b0:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c1b2:	b926      	cbnz	r6, c1be <usbdc_cb_ctl_req+0x39e>
    c1b4:	e64e      	b.n	be54 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c1b6:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c1b8:	2e00      	cmp	r6, #0
    c1ba:	f43f ae4b 	beq.w	be54 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c1be:	6873      	ldr	r3, [r6, #4]
    c1c0:	aa01      	add	r2, sp, #4
    c1c2:	2101      	movs	r1, #1
    c1c4:	4630      	mov	r0, r6
    c1c6:	4798      	blx	r3
    c1c8:	2800      	cmp	r0, #0
    c1ca:	d1f4      	bne.n	c1b6 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c1cc:	4601      	mov	r1, r0
    c1ce:	aa01      	add	r2, sp, #4
    c1d0:	6873      	ldr	r3, [r6, #4]
    c1d2:	4630      	mov	r0, r6
    c1d4:	4798      	blx	r3
    c1d6:	2800      	cmp	r0, #0
    c1d8:	f47f ae3c 	bne.w	be54 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c1dc:	b12c      	cbz	r4, c1ea <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c1de:	7f7b      	ldrb	r3, [r7, #29]
    c1e0:	2201      	movs	r2, #1
    c1e2:	fa02 f505 	lsl.w	r5, r2, r5
    c1e6:	432b      	orrs	r3, r5
    c1e8:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c1ea:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c1ec:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c1ee:	9303      	str	r3, [sp, #12]
    c1f0:	9304      	str	r3, [sp, #16]
    c1f2:	f88d 3014 	strb.w	r3, [sp, #20]
    c1f6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c1fa:	f000 fbb3 	bl	c964 <usb_d_ep_transfer>
			return true;
    c1fe:	2001      	movs	r0, #1
    c200:	e629      	b.n	be56 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c202:	697a      	ldr	r2, [r7, #20]
    c204:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c206:	697a      	ldr	r2, [r7, #20]
    c208:	9203      	str	r2, [sp, #12]
    c20a:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c20c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c20e:	f88d 3014 	strb.w	r3, [sp, #20]
    c212:	f88d 3015 	strb.w	r3, [sp, #21]
    c216:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c218:	f000 fba4 	bl	c964 <usb_d_ep_transfer>
		return true;
    c21c:	4620      	mov	r0, r4
    c21e:	e61a      	b.n	be56 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c220:	2100      	movs	r1, #0
    c222:	e7b7      	b.n	c194 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c224:	4644      	mov	r4, r8
    c226:	e778      	b.n	c11a <usbdc_cb_ctl_req+0x2fa>

0000c228 <usbd_event_cb>:
{
    c228:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c22a:	b338      	cbz	r0, c27c <usbd_event_cb+0x54>
    c22c:	2801      	cmp	r0, #1
    c22e:	d124      	bne.n	c27a <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c230:	4d19      	ldr	r5, [pc, #100]	; (c298 <usbd_event_cb+0x70>)
    c232:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c234:	b13c      	cbz	r4, c246 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c236:	6863      	ldr	r3, [r4, #4]
    c238:	4620      	mov	r0, r4
    c23a:	2200      	movs	r2, #0
    c23c:	2101      	movs	r1, #1
    c23e:	4798      	blx	r3
		func = func->next;
    c240:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c242:	2c00      	cmp	r4, #0
    c244:	d1f7      	bne.n	c236 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c246:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c248:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c24a:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c24c:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c24e:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c250:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c252:	f000 fb41 	bl	c8d8 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c256:	7f28      	ldrb	r0, [r5, #28]
    c258:	f000 faba 	bl	c7d0 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c25c:	4621      	mov	r1, r4
    c25e:	4620      	mov	r0, r4
    c260:	4a0e      	ldr	r2, [pc, #56]	; (c29c <usbd_event_cb+0x74>)
    c262:	f000 fc69 	bl	cb38 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c266:	4620      	mov	r0, r4
    c268:	4631      	mov	r1, r6
    c26a:	4a0d      	ldr	r2, [pc, #52]	; (c2a0 <usbd_event_cb+0x78>)
    c26c:	f000 fc64 	bl	cb38 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c270:	4620      	mov	r0, r4
}
    c272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c276:	f000 bb4b 	b.w	c910 <usb_d_ep_enable>
    c27a:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c27c:	4b06      	ldr	r3, [pc, #24]	; (c298 <usbd_event_cb+0x70>)
    c27e:	68dc      	ldr	r4, [r3, #12]
    c280:	460d      	mov	r5, r1
	while (cg != NULL) {
    c282:	b144      	cbz	r4, c296 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c284:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c286:	4629      	mov	r1, r5
    c288:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c28a:	b103      	cbz	r3, c28e <usbd_event_cb+0x66>
			cg->cb(change, value);
    c28c:	4798      	blx	r3
		cg = cg->next;
    c28e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c290:	2c00      	cmp	r4, #0
    c292:	d1f7      	bne.n	c284 <usbd_event_cb+0x5c>
    c294:	bd70      	pop	{r4, r5, r6, pc}
    c296:	bd70      	pop	{r4, r5, r6, pc}
    c298:	20001c28 	.word	0x20001c28
    c29c:	0000be21 	.word	0x0000be21
    c2a0:	0000bd85 	.word	0x0000bd85

0000c2a4 <usbdc_xfer>:
{
    c2a4:	b500      	push	{lr}
    c2a6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2a8:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c2ac:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2ae:	9101      	str	r1, [sp, #4]
    c2b0:	9202      	str	r2, [sp, #8]
    c2b2:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c2b6:	f000 fb55 	bl	c964 <usb_d_ep_transfer>
}
    c2ba:	b005      	add	sp, #20
    c2bc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2c0 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c2c0:	2801      	cmp	r0, #1
    c2c2:	d009      	beq.n	c2d8 <usbdc_register_handler+0x18>
    c2c4:	d305      	bcc.n	c2d2 <usbdc_register_handler+0x12>
    c2c6:	2802      	cmp	r0, #2
    c2c8:	d102      	bne.n	c2d0 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c2ca:	4805      	ldr	r0, [pc, #20]	; (c2e0 <usbdc_register_handler+0x20>)
    c2cc:	f000 bc66 	b.w	cb9c <list_insert_at_end>
    c2d0:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c2d2:	4804      	ldr	r0, [pc, #16]	; (c2e4 <usbdc_register_handler+0x24>)
    c2d4:	f000 bc62 	b.w	cb9c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c2d8:	4803      	ldr	r0, [pc, #12]	; (c2e8 <usbdc_register_handler+0x28>)
    c2da:	f000 bc5f 	b.w	cb9c <list_insert_at_end>
    c2de:	bf00      	nop
    c2e0:	20001c34 	.word	0x20001c34
    c2e4:	20001c2c 	.word	0x20001c2c
    c2e8:	20001c30 	.word	0x20001c30

0000c2ec <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c2ec:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c2ee:	4605      	mov	r5, r0
    c2f0:	3000      	adds	r0, #0
    c2f2:	bf18      	it	ne
    c2f4:	2001      	movne	r0, #1
    c2f6:	f240 3255 	movw	r2, #853	; 0x355
    c2fa:	490c      	ldr	r1, [pc, #48]	; (c32c <usbdc_init+0x40>)
    c2fc:	f000 fc4a 	bl	cb94 <assert>

	int32_t rc;

	rc = usb_d_init();
    c300:	f000 f9dc 	bl	c6bc <usb_d_init>
	if (rc < 0) {
    c304:	2800      	cmp	r0, #0
    c306:	db0f      	blt.n	c328 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c308:	4c09      	ldr	r4, [pc, #36]	; (c330 <usbdc_init+0x44>)
    c30a:	2220      	movs	r2, #32
    c30c:	2100      	movs	r1, #0
    c30e:	4620      	mov	r0, r4
    c310:	f011 ffc4 	bl	1e29c <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c314:	4907      	ldr	r1, [pc, #28]	; (c334 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c316:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c318:	2000      	movs	r0, #0
    c31a:	f000 fa51 	bl	c7c0 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c31e:	2001      	movs	r0, #1
    c320:	4905      	ldr	r1, [pc, #20]	; (c338 <usbdc_init+0x4c>)
    c322:	f000 fa4d 	bl	c7c0 <usb_d_register_callback>

	return 0;
    c326:	2000      	movs	r0, #0
}
    c328:	bd38      	pop	{r3, r4, r5, pc}
    c32a:	bf00      	nop
    c32c:	00022ff4 	.word	0x00022ff4
    c330:	20001c28 	.word	0x20001c28
    c334:	0000bd69 	.word	0x0000bd69
    c338:	0000c229 	.word	0x0000c229

0000c33c <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c33c:	4601      	mov	r1, r0
    c33e:	4801      	ldr	r0, [pc, #4]	; (c344 <usbdc_register_function+0x8>)
    c340:	f000 bc2c 	b.w	cb9c <list_insert_at_end>
    c344:	20001c38 	.word	0x20001c38

0000c348 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c348:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c34a:	4b0a      	ldr	r3, [pc, #40]	; (c374 <usbdc_start+0x2c>)
    c34c:	7e9c      	ldrb	r4, [r3, #26]
    c34e:	b954      	cbnz	r4, c366 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c350:	b160      	cbz	r0, c36c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c352:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c354:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c356:	79d2      	ldrb	r2, [r2, #7]
    c358:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c35a:	2201      	movs	r2, #1
    c35c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c35e:	f000 fa31 	bl	c7c4 <usb_d_enable>
	return ERR_NONE;
    c362:	4620      	mov	r0, r4
    c364:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    c366:	f06f 0003 	mvn.w	r0, #3
    c36a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    c36c:	f06f 0008 	mvn.w	r0, #8
}
    c370:	bd10      	pop	{r4, pc}
    c372:	bf00      	nop
    c374:	20001c28 	.word	0x20001c28

0000c378 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    c378:	f000 ba26 	b.w	c7c8 <usb_d_attach>

0000c37c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    c37c:	4b01      	ldr	r3, [pc, #4]	; (c384 <usbdc_get_ctrl_buffer+0x8>)
}
    c37e:	6958      	ldr	r0, [r3, #20]
    c380:	4770      	bx	lr
    c382:	bf00      	nop
    c384:	20001c28 	.word	0x20001c28

0000c388 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c388:	4b03      	ldr	r3, [pc, #12]	; (c398 <usbdc_get_state+0x10>)
    c38a:	7e98      	ldrb	r0, [r3, #26]
    c38c:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    c390:	bf18      	it	ne
    c392:	2010      	movne	r0, #16
    c394:	4770      	bx	lr
    c396:	bf00      	nop
    c398:	20001c28 	.word	0x20001c28

0000c39c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c39c:	4288      	cmp	r0, r1
    c39e:	d214      	bcs.n	c3ca <usb_find_desc+0x2e>
    c3a0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c3a2:	2b01      	cmp	r3, #1
    c3a4:	d911      	bls.n	c3ca <usb_find_desc+0x2e>
{
    c3a6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c3a8:	7844      	ldrb	r4, [r0, #1]
    c3aa:	4294      	cmp	r4, r2
    c3ac:	d106      	bne.n	c3bc <usb_find_desc+0x20>
    c3ae:	e009      	b.n	c3c4 <usb_find_desc+0x28>
    c3b0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c3b2:	2b01      	cmp	r3, #1
    c3b4:	d905      	bls.n	c3c2 <usb_find_desc+0x26>
	return desc[1];
    c3b6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c3b8:	4294      	cmp	r4, r2
    c3ba:	d003      	beq.n	c3c4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c3bc:	4418      	add	r0, r3
	while (desc < eof) {
    c3be:	4281      	cmp	r1, r0
    c3c0:	d8f6      	bhi.n	c3b0 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c3c2:	2000      	movs	r0, #0
}
    c3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    c3c8:	4770      	bx	lr
	return NULL;
    c3ca:	2000      	movs	r0, #0
    c3cc:	4770      	bx	lr
    c3ce:	bf00      	nop

0000c3d0 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c3d0:	4288      	cmp	r0, r1
    c3d2:	d213      	bcs.n	c3fc <usb_find_ep_desc+0x2c>
    c3d4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c3d6:	2b01      	cmp	r3, #1
    c3d8:	d910      	bls.n	c3fc <usb_find_ep_desc+0x2c>
	return desc[1];
    c3da:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c3dc:	2a04      	cmp	r2, #4
    c3de:	d00d      	beq.n	c3fc <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c3e0:	2a05      	cmp	r2, #5
    c3e2:	d108      	bne.n	c3f6 <usb_find_ep_desc+0x26>
    c3e4:	e00c      	b.n	c400 <usb_find_ep_desc+0x30>
    c3e6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c3e8:	2b01      	cmp	r3, #1
    c3ea:	d907      	bls.n	c3fc <usb_find_ep_desc+0x2c>
    c3ec:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c3ee:	2a04      	cmp	r2, #4
    c3f0:	d004      	beq.n	c3fc <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c3f2:	2a05      	cmp	r2, #5
    c3f4:	d003      	beq.n	c3fe <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    c3f6:	4418      	add	r0, r3
	while (desc < eof) {
    c3f8:	4281      	cmp	r1, r0
    c3fa:	d8f4      	bhi.n	c3e6 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c3fc:	2000      	movs	r0, #0
}
    c3fe:	4770      	bx	lr
    c400:	4770      	bx	lr
    c402:	bf00      	nop

0000c404 <usb_find_cfg_desc>:
	while (desc < eof) {
    c404:	4288      	cmp	r0, r1
    c406:	d226      	bcs.n	c456 <usb_find_cfg_desc+0x52>
    c408:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c40a:	2b01      	cmp	r3, #1
    c40c:	d923      	bls.n	c456 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c40e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c410:	7844      	ldrb	r4, [r0, #1]
    c412:	2c02      	cmp	r4, #2
    c414:	d106      	bne.n	c424 <usb_find_cfg_desc+0x20>
    c416:	e012      	b.n	c43e <usb_find_cfg_desc+0x3a>
    c418:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c41a:	2b01      	cmp	r3, #1
    c41c:	d905      	bls.n	c42a <usb_find_cfg_desc+0x26>
	return desc[1];
    c41e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c420:	2c02      	cmp	r4, #2
    c422:	d00c      	beq.n	c43e <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    c424:	4418      	add	r0, r3
	while (desc < eof) {
    c426:	4281      	cmp	r1, r0
    c428:	d8f6      	bhi.n	c418 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    c42a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    c42c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c430:	4770      	bx	lr
		_desc_len_check();
    c432:	7803      	ldrb	r3, [r0, #0]
    c434:	2b01      	cmp	r3, #1
    c436:	d9f8      	bls.n	c42a <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    c438:	7843      	ldrb	r3, [r0, #1]
    c43a:	2b02      	cmp	r3, #2
    c43c:	d1f5      	bne.n	c42a <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    c43e:	7943      	ldrb	r3, [r0, #5]
    c440:	4293      	cmp	r3, r2
    c442:	d0f3      	beq.n	c42c <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    c444:	78c4      	ldrb	r4, [r0, #3]
    c446:	7883      	ldrb	r3, [r0, #2]
    c448:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c44c:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    c450:	4281      	cmp	r1, r0
    c452:	d8ee      	bhi.n	c432 <usb_find_cfg_desc+0x2e>
    c454:	e7e9      	b.n	c42a <usb_find_cfg_desc+0x26>
		return NULL;
    c456:	2000      	movs	r0, #0
    c458:	4770      	bx	lr
    c45a:	bf00      	nop

0000c45c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c45c:	4288      	cmp	r0, r1
    c45e:	d216      	bcs.n	c48e <usb_find_str_desc+0x32>
{
    c460:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    c462:	2500      	movs	r5, #0
    c464:	e005      	b.n	c472 <usb_find_str_desc+0x16>
	return desc[1];
    c466:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c468:	2c03      	cmp	r4, #3
    c46a:	d008      	beq.n	c47e <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    c46c:	4418      	add	r0, r3
	while (desc < eof) {
    c46e:	4281      	cmp	r1, r0
    c470:	d902      	bls.n	c478 <usb_find_str_desc+0x1c>
    c472:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c474:	2b01      	cmp	r3, #1
    c476:	d8f6      	bhi.n	c466 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    c478:	2000      	movs	r0, #0
}
    c47a:	bc30      	pop	{r4, r5}
    c47c:	4770      	bx	lr
			if (i == str_index) {
    c47e:	4295      	cmp	r5, r2
    c480:	d0fb      	beq.n	c47a <usb_find_str_desc+0x1e>
    c482:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    c484:	4281      	cmp	r1, r0
    c486:	f105 0501 	add.w	r5, r5, #1
    c48a:	d8f2      	bhi.n	c472 <usb_find_str_desc+0x16>
    c48c:	e7f4      	b.n	c478 <usb_find_str_desc+0x1c>
	return NULL;
    c48e:	2000      	movs	r0, #0
    c490:	4770      	bx	lr
    c492:	bf00      	nop

0000c494 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    c494:	2000      	movs	r0, #0
    c496:	4770      	bx	lr

0000c498 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    c498:	b5f0      	push	{r4, r5, r6, r7, lr}
    c49a:	4f0f      	ldr	r7, [pc, #60]	; (c4d8 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c49c:	f000 0e0f 	and.w	lr, r0, #15
    c4a0:	463a      	mov	r2, r7
{
    c4a2:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c4a4:	7854      	ldrb	r4, [r2, #1]
    c4a6:	42a0      	cmp	r0, r4
    c4a8:	461e      	mov	r6, r3
    c4aa:	f103 0301 	add.w	r3, r3, #1
    c4ae:	d008      	beq.n	c4c2 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c4b0:	7815      	ldrb	r5, [r2, #0]
    c4b2:	3220      	adds	r2, #32
    c4b4:	b90d      	cbnz	r5, c4ba <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c4b6:	4574      	cmp	r4, lr
    c4b8:	d003      	beq.n	c4c2 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c4ba:	2b0d      	cmp	r3, #13
    c4bc:	d1f2      	bne.n	c4a4 <usb_d_cb_trans_more+0xc>
    c4be:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    c4c2:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    c4c6:	78b3      	ldrb	r3, [r6, #2]
    c4c8:	2b03      	cmp	r3, #3
    c4ca:	d001      	beq.n	c4d0 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    c4cc:	2000      	movs	r0, #0
    c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    c4d0:	69b3      	ldr	r3, [r6, #24]
}
    c4d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    c4d6:	4718      	bx	r3
    c4d8:	20001c48 	.word	0x20001c48

0000c4dc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    c4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c4e0:	f8df 9130 	ldr.w	r9, [pc, #304]	; c614 <_usb_d_cb_trans_done+0x138>
    c4e4:	4607      	mov	r7, r0
    c4e6:	4688      	mov	r8, r1
    c4e8:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c4ea:	f000 010f 	and.w	r1, r0, #15
{
    c4ee:	2300      	movs	r3, #0
    c4f0:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c4f2:	7844      	ldrb	r4, [r0, #1]
    c4f4:	42a7      	cmp	r7, r4
    c4f6:	461e      	mov	r6, r3
    c4f8:	f103 0301 	add.w	r3, r3, #1
    c4fc:	d008      	beq.n	c510 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c4fe:	7805      	ldrb	r5, [r0, #0]
    c500:	3020      	adds	r0, #32
    c502:	b90d      	cbnz	r5, c508 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c504:	428c      	cmp	r4, r1
    c506:	d003      	beq.n	c510 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c508:	2b0d      	cmp	r3, #13
    c50a:	d1f2      	bne.n	c4f2 <_usb_d_cb_trans_done+0x16>
    c50c:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    c510:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    c512:	f1b8 0f00 	cmp.w	r8, #0
    c516:	d110      	bne.n	c53a <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    c518:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c51c:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    c520:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c524:	b32b      	cbz	r3, c572 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c526:	2301      	movs	r3, #1
    c528:	4641      	mov	r1, r8
    c52a:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    c52c:	444e      	add	r6, r9
    c52e:	4638      	mov	r0, r7
    c530:	69f3      	ldr	r3, [r6, #28]
    c532:	4798      	blx	r3
}
    c534:	b007      	add	sp, #28
    c536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    c53a:	f1b8 0f01 	cmp.w	r8, #1
    c53e:	d00b      	beq.n	c558 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    c540:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c544:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    c548:	d025      	beq.n	c596 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    c54a:	f1b8 0f03 	cmp.w	r8, #3
    c54e:	d01d      	beq.n	c58c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    c550:	2106      	movs	r1, #6
    c552:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    c554:	70d9      	strb	r1, [r3, #3]
    c556:	e7e9      	b.n	c52c <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    c558:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c55c:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    c560:	f04f 0802 	mov.w	r8, #2
    c564:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c568:	b1e9      	cbz	r1, c5a6 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    c56a:	2305      	movs	r3, #5
    c56c:	4641      	mov	r1, r8
    c56e:	70a3      	strb	r3, [r4, #2]
    c570:	e7dc      	b.n	c52c <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    c572:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c574:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    c576:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c578:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    c57c:	d01f      	beq.n	c5be <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    c57e:	69e3      	ldr	r3, [r4, #28]
    c580:	7860      	ldrb	r0, [r4, #1]
    c582:	4641      	mov	r1, r8
    c584:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c586:	2302      	movs	r3, #2
    c588:	70a3      	strb	r3, [r4, #2]
    c58a:	e7d3      	b.n	c534 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c58c:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    c58e:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c590:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    c592:	70d9      	strb	r1, [r3, #3]
    c594:	e7ca      	b.n	c52c <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c596:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c59a:	2104      	movs	r1, #4
    c59c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c59e:	b158      	cbz	r0, c5b8 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c5a0:	2001      	movs	r0, #1
    c5a2:	7098      	strb	r0, [r3, #2]
    c5a4:	e7c2      	b.n	c52c <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c5a6:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c5a8:	f884 8002 	strb.w	r8, [r4, #2]
    c5ac:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c5ae:	f006 fa5b 	bl	12a68 <_usb_d_dev_ep_stall>
    c5b2:	78e1      	ldrb	r1, [r4, #3]
    c5b4:	9a01      	ldr	r2, [sp, #4]
    c5b6:	e7b9      	b.n	c52c <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c5b8:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    c5bc:	e7ba      	b.n	c534 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c5be:	69e3      	ldr	r3, [r4, #28]
    c5c0:	7860      	ldrb	r0, [r4, #1]
    c5c2:	f994 500c 	ldrsb.w	r5, [r4, #12]
    c5c6:	2101      	movs	r1, #1
    c5c8:	4798      	blx	r3
		if (err) {
    c5ca:	b160      	cbz	r0, c5e6 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c5cc:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c5ce:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    c5d0:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c5d2:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c5d4:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    c5d6:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c5d8:	bfa8      	it	ge
    c5da:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    c5de:	2101      	movs	r1, #1
    c5e0:	f006 fa42 	bl	12a68 <_usb_d_dev_ep_stall>
    c5e4:	e7a6      	b.n	c534 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    c5e6:	2304      	movs	r3, #4
    c5e8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    c5ea:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    c5ec:	f8cd 800c 	str.w	r8, [sp, #12]
    c5f0:	2d00      	cmp	r5, #0
    c5f2:	bfac      	ite	ge
    c5f4:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    c5f8:	f003 030f 	andlt.w	r3, r3, #15
    c5fc:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    c5fe:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    c600:	f8cd 8010 	str.w	r8, [sp, #16]
    c604:	f88d 3014 	strb.w	r3, [sp, #20]
    c608:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    c60c:	f006 fae8 	bl	12be0 <_usb_d_dev_ep_trans>
    c610:	e790      	b.n	c534 <_usb_d_cb_trans_done+0x58>
    c612:	bf00      	nop
    c614:	20001c48 	.word	0x20001c48

0000c618 <usb_d_cb_trans_setup>:
{
    c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c61c:	4f26      	ldr	r7, [pc, #152]	; (c6b8 <usb_d_cb_trans_setup+0xa0>)
    c61e:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c620:	f000 060f 	and.w	r6, r0, #15
    c624:	463a      	mov	r2, r7
{
    c626:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c628:	7851      	ldrb	r1, [r2, #1]
    c62a:	428c      	cmp	r4, r1
    c62c:	461d      	mov	r5, r3
    c62e:	f103 0301 	add.w	r3, r3, #1
    c632:	d032      	beq.n	c69a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c634:	7810      	ldrb	r0, [r2, #0]
    c636:	3220      	adds	r2, #32
    c638:	b908      	cbnz	r0, c63e <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c63a:	42b1      	cmp	r1, r6
    c63c:	d02d      	beq.n	c69a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c63e:	2b0d      	cmp	r3, #13
    c640:	d1f2      	bne.n	c628 <usb_d_cb_trans_setup+0x10>
    c642:	f06f 0613 	mvn.w	r6, #19
    c646:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    c64a:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    c64c:	4631      	mov	r1, r6
    c64e:	4620      	mov	r0, r4
    c650:	f006 fa9c 	bl	12b8c <_usb_d_dev_ep_read_req>
	if (n != 8) {
    c654:	b2c0      	uxtb	r0, r0
    c656:	2808      	cmp	r0, #8
    c658:	d00a      	beq.n	c670 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c65a:	2101      	movs	r1, #1
    c65c:	4620      	mov	r0, r4
    c65e:	f006 fa03 	bl	12a68 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c662:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    c666:	2101      	movs	r1, #1
}
    c668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c66c:	f006 b9fc 	b.w	12a68 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c670:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c674:	2100      	movs	r1, #0
    c676:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c678:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c67c:	f006 f9f4 	bl	12a68 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c680:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c682:	2100      	movs	r1, #0
    c684:	4640      	mov	r0, r8
    c686:	f006 f9ef 	bl	12a68 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    c68a:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c68c:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    c68e:	696b      	ldr	r3, [r5, #20]
    c690:	4620      	mov	r0, r4
    c692:	4798      	blx	r3
    c694:	b120      	cbz	r0, c6a0 <usb_d_cb_trans_setup+0x88>
    c696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c69a:	016e      	lsls	r6, r5, #5
    c69c:	360c      	adds	r6, #12
    c69e:	e7d4      	b.n	c64a <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c6a0:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c6a2:	4639      	mov	r1, r7
    c6a4:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c6a6:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c6a8:	f006 f9de 	bl	12a68 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c6ac:	4639      	mov	r1, r7
    c6ae:	4640      	mov	r0, r8
}
    c6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c6b4:	f006 b9d8 	b.w	12a68 <_usb_d_dev_ep_stall>
    c6b8:	20001c48 	.word	0x20001c48

0000c6bc <usb_d_init>:

int32_t usb_d_init(void)
{
    c6bc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    c6be:	f005 fecf 	bl	12460 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    c6c2:	2800      	cmp	r0, #0
    c6c4:	db70      	blt.n	c7a8 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    c6c6:	4c39      	ldr	r4, [pc, #228]	; (c7ac <usb_d_init+0xf0>)
    c6c8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    c6cc:	2100      	movs	r1, #0
    c6ce:	4620      	mov	r0, r4
    c6d0:	f011 fde4 	bl	1e29c <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c6d4:	4b36      	ldr	r3, [pc, #216]	; (c7b0 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c6d6:	4937      	ldr	r1, [pc, #220]	; (c7b4 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c6d8:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    c6da:	22ff      	movs	r2, #255	; 0xff
    c6dc:	7062      	strb	r2, [r4, #1]
    c6de:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    c6e2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    c6e6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    c6ea:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    c6ee:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    c6f2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    c6f6:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c6fa:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c6fc:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c6fe:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c700:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c702:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c704:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c706:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c708:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c70a:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c70c:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c70e:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c710:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c712:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c716:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c71a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c71e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c722:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c726:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c72a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c72e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c732:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c736:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c73a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c73e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    c742:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    c746:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    c74a:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    c74e:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    c752:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c756:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c75a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c75e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c762:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c766:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c76a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c76e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c772:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c776:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c77a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c77e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c782:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c786:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c78a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c78e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c792:	f006 fb5d 	bl	12e50 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    c796:	4908      	ldr	r1, [pc, #32]	; (c7b8 <usb_d_init+0xfc>)
    c798:	2001      	movs	r0, #1
    c79a:	f006 fb59 	bl	12e50 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    c79e:	2002      	movs	r0, #2
    c7a0:	4906      	ldr	r1, [pc, #24]	; (c7bc <usb_d_init+0x100>)
    c7a2:	f006 fb55 	bl	12e50 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    c7a6:	2000      	movs	r0, #0
}
    c7a8:	bd10      	pop	{r4, pc}
    c7aa:	bf00      	nop
    c7ac:	20001c48 	.word	0x20001c48
    c7b0:	0000c495 	.word	0x0000c495
    c7b4:	0000c619 	.word	0x0000c619
    c7b8:	0000c499 	.word	0x0000c499
    c7bc:	0000c4dd 	.word	0x0000c4dd

0000c7c0 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    c7c0:	f006 bb34 	b.w	12e2c <_usb_d_dev_register_callback>

0000c7c4 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    c7c4:	f005 beec 	b.w	125a0 <_usb_d_dev_enable>

0000c7c8 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    c7c8:	f005 bf1a 	b.w	12600 <_usb_d_dev_attach>

0000c7cc <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    c7cc:	f005 bf22 	b.w	12614 <_usb_d_dev_set_address>

0000c7d0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    c7d0:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c7d2:	4e25      	ldr	r6, [pc, #148]	; (c868 <usb_d_ep0_init+0x98>)
    c7d4:	7873      	ldrb	r3, [r6, #1]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d043      	beq.n	c862 <usb_d_ep0_init+0x92>
    c7da:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    c7de:	2b00      	cmp	r3, #0
    c7e0:	d03f      	beq.n	c862 <usb_d_ep0_init+0x92>
    c7e2:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	d03b      	beq.n	c862 <usb_d_ep0_init+0x92>
    c7ea:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    c7ee:	b3c3      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c7f0:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    c7f4:	b3ab      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c7f6:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    c7fa:	b393      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c7fc:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    c800:	b37b      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c802:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    c806:	b363      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c808:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    c80c:	b34b      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c80e:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    c812:	b333      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c814:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    c818:	b31b      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c81a:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    c81e:	b303      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c820:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    c824:	b1eb      	cbz	r3, c862 <usb_d_ep0_init+0x92>
    c826:	4633      	mov	r3, r6
    c828:	2400      	movs	r4, #0
    c82a:	7859      	ldrb	r1, [r3, #1]
    c82c:	29ff      	cmp	r1, #255	; 0xff
    c82e:	d00a      	beq.n	c846 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c830:	781d      	ldrb	r5, [r3, #0]
    c832:	3320      	adds	r3, #32
    c834:	b90d      	cbnz	r5, c83a <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c836:	290f      	cmp	r1, #15
    c838:	d005      	beq.n	c846 <usb_d_ep0_init+0x76>
    c83a:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c83c:	2c0d      	cmp	r4, #13
    c83e:	d1f4      	bne.n	c82a <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    c840:	f06f 0014 	mvn.w	r0, #20
    c844:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    c846:	2100      	movs	r1, #0
    c848:	4602      	mov	r2, r0
    c84a:	4608      	mov	r0, r1
    c84c:	f005 fee8 	bl	12620 <_usb_d_dev_ep_init>
	if (rc < 0) {
    c850:	2800      	cmp	r0, #0
    c852:	db05      	blt.n	c860 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    c854:	0164      	lsls	r4, r4, #5
    c856:	1933      	adds	r3, r6, r4
    c858:	2000      	movs	r0, #0
    c85a:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    c85c:	5530      	strb	r0, [r6, r4]
    c85e:	bd70      	pop	{r4, r5, r6, pc}
}
    c860:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    c862:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    c866:	bd70      	pop	{r4, r5, r6, pc}
    c868:	20001c48 	.word	0x20001c48

0000c86c <usb_d_ep_init>:
{
    c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c86e:	4c19      	ldr	r4, [pc, #100]	; (c8d4 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c870:	f000 0c0f 	and.w	ip, r0, #15
    c874:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    c878:	4627      	mov	r7, r4
    c87a:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c87c:	785d      	ldrb	r5, [r3, #1]
    c87e:	42a8      	cmp	r0, r5
    c880:	d024      	beq.n	c8cc <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c882:	781e      	ldrb	r6, [r3, #0]
    c884:	3320      	adds	r3, #32
    c886:	b90e      	cbnz	r6, c88c <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c888:	4565      	cmp	r5, ip
    c88a:	d01f      	beq.n	c8cc <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c88c:	459e      	cmp	lr, r3
    c88e:	d1f5      	bne.n	c87c <usb_d_ep_init+0x10>
    c890:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c892:	7863      	ldrb	r3, [r4, #1]
    c894:	2bff      	cmp	r3, #255	; 0xff
    c896:	d00a      	beq.n	c8ae <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c898:	7826      	ldrb	r6, [r4, #0]
    c89a:	3420      	adds	r4, #32
    c89c:	b90e      	cbnz	r6, c8a2 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c89e:	2b0f      	cmp	r3, #15
    c8a0:	d005      	beq.n	c8ae <usb_d_ep_init+0x42>
    c8a2:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c8a4:	2d0d      	cmp	r5, #13
    c8a6:	d1f4      	bne.n	c892 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    c8a8:	f06f 0014 	mvn.w	r0, #20
    c8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8ae:	460e      	mov	r6, r1
    c8b0:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    c8b2:	f005 feb5 	bl	12620 <_usb_d_dev_ep_init>
	if (rc < 0) {
    c8b6:	2800      	cmp	r0, #0
    c8b8:	db07      	blt.n	c8ca <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    c8ba:	016d      	lsls	r5, r5, #5
    c8bc:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    c8be:	f006 0603 	and.w	r6, r6, #3
    c8c2:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    c8c4:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    c8c6:	2000      	movs	r0, #0
    c8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    c8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    c8cc:	f06f 0013 	mvn.w	r0, #19
    c8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8d2:	bf00      	nop
    c8d4:	20001c48 	.word	0x20001c48

0000c8d8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    c8d8:	b570      	push	{r4, r5, r6, lr}
    c8da:	4e0c      	ldr	r6, [pc, #48]	; (c90c <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c8dc:	f000 050f 	and.w	r5, r0, #15
    c8e0:	4633      	mov	r3, r6
{
    c8e2:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c8e4:	785a      	ldrb	r2, [r3, #1]
    c8e6:	4290      	cmp	r0, r2
    c8e8:	d008      	beq.n	c8fc <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c8ea:	7819      	ldrb	r1, [r3, #0]
    c8ec:	3320      	adds	r3, #32
    c8ee:	b909      	cbnz	r1, c8f4 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c8f0:	42aa      	cmp	r2, r5
    c8f2:	d003      	beq.n	c8fc <usb_d_ep_deinit+0x24>
    c8f4:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c8f6:	2c0d      	cmp	r4, #13
    c8f8:	d1f4      	bne.n	c8e4 <usb_d_ep_deinit+0xc>
    c8fa:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    c8fc:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    c900:	f005 ff00 	bl	12704 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    c904:	23ff      	movs	r3, #255	; 0xff
    c906:	7063      	strb	r3, [r4, #1]
    c908:	bd70      	pop	{r4, r5, r6, pc}
    c90a:	bf00      	nop
    c90c:	20001c48 	.word	0x20001c48

0000c910 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    c910:	b570      	push	{r4, r5, r6, lr}
    c912:	4d13      	ldr	r5, [pc, #76]	; (c960 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c914:	f000 060f 	and.w	r6, r0, #15
    c918:	462b      	mov	r3, r5
{
    c91a:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c91c:	7859      	ldrb	r1, [r3, #1]
    c91e:	4288      	cmp	r0, r1
    c920:	d00a      	beq.n	c938 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c922:	781c      	ldrb	r4, [r3, #0]
    c924:	3320      	adds	r3, #32
    c926:	b90c      	cbnz	r4, c92c <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c928:	42b1      	cmp	r1, r6
    c92a:	d015      	beq.n	c958 <usb_d_ep_enable+0x48>
    c92c:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c92e:	2a0d      	cmp	r2, #13
    c930:	d1f4      	bne.n	c91c <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    c932:	f06f 0011 	mvn.w	r0, #17
    c936:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    c938:	0152      	lsls	r2, r2, #5
    c93a:	5cab      	ldrb	r3, [r5, r2]
    c93c:	2b00      	cmp	r3, #0
    c93e:	bf14      	ite	ne
    c940:	2301      	movne	r3, #1
    c942:	2302      	moveq	r3, #2
    c944:	4415      	add	r5, r2
    c946:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    c948:	f005 ff6e 	bl	12828 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    c94c:	2800      	cmp	r0, #0
    c94e:	db00      	blt.n	c952 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    c950:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    c952:	2300      	movs	r3, #0
    c954:	70ab      	strb	r3, [r5, #2]
    c956:	bd70      	pop	{r4, r5, r6, pc}
    c958:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    c95a:	2302      	movs	r3, #2
    c95c:	e7f2      	b.n	c944 <usb_d_ep_enable+0x34>
    c95e:	bf00      	nop
    c960:	20001c48 	.word	0x20001c48

0000c964 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c968:	f8df 811c 	ldr.w	r8, [pc, #284]	; ca88 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    c96c:	7a05      	ldrb	r5, [r0, #8]
{
    c96e:	b087      	sub	sp, #28
    c970:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c972:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    c976:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c978:	7859      	ldrb	r1, [r3, #1]
    c97a:	428d      	cmp	r5, r1
    c97c:	d00c      	beq.n	c998 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c97e:	781c      	ldrb	r4, [r3, #0]
    c980:	3320      	adds	r3, #32
    c982:	b90c      	cbnz	r4, c988 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c984:	42b9      	cmp	r1, r7
    c986:	d007      	beq.n	c998 <usb_d_ep_transfer+0x34>
    c988:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c98a:	2a0d      	cmp	r2, #13
    c98c:	d1f4      	bne.n	c978 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    c98e:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    c992:	b007      	add	sp, #28
    c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    c998:	0154      	lsls	r4, r2, #5
    c99a:	4606      	mov	r6, r0
    c99c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    c9a0:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    c9a2:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    c9a6:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    c9aa:	f006 fa6f 	bl	12e8c <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    c9ae:	f89b 3002 	ldrb.w	r3, [fp, #2]
    c9b2:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    c9b6:	f89d 7007 	ldrb.w	r7, [sp, #7]
    c9ba:	b2ff      	uxtb	r7, r7
    c9bc:	2f01      	cmp	r7, #1
    c9be:	d011      	beq.n	c9e4 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    c9c0:	a802      	add	r0, sp, #8
    c9c2:	f006 fa6b 	bl	12e9c <atomic_leave_critical>
		switch (state) {
    c9c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9ca:	b2db      	uxtb	r3, r3
    c9cc:	2b05      	cmp	r3, #5
    c9ce:	d040      	beq.n	ca52 <usb_d_ep_transfer+0xee>
    c9d0:	2b06      	cmp	r3, #6
    c9d2:	d022      	beq.n	ca1a <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	bf0c      	ite	eq
    c9d8:	f06f 0012 	mvneq.w	r0, #18
    c9dc:	2001      	movne	r0, #1
}
    c9de:	b007      	add	sp, #28
    c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    c9e4:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    c9e6:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    c9e8:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    c9ec:	f006 fa56 	bl	12e9c <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c9f0:	f818 2004 	ldrb.w	r2, [r8, r4]
    c9f4:	b9b2      	cbnz	r2, ca24 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    c9f6:	f89b 1013 	ldrb.w	r1, [fp, #19]
    c9fa:	f89b 3012 	ldrb.w	r3, [fp, #18]
    c9fe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    ca02:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    ca04:	bb4b      	cbnz	r3, ca5a <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    ca06:	2204      	movs	r2, #4
    ca08:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    ca0c:	9304      	str	r3, [sp, #16]
    ca0e:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ca10:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    ca12:	9203      	str	r2, [sp, #12]
    ca14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ca18:	e011      	b.n	ca3e <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    ca1a:	f06f 000f 	mvn.w	r0, #15
}
    ca1e:	b007      	add	sp, #28
    ca20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ca24:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    ca28:	6833      	ldr	r3, [r6, #0]
    ca2a:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ca2c:	bf18      	it	ne
    ca2e:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    ca30:	062a      	lsls	r2, r5, #24
    ca32:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ca36:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    ca38:	d4ec      	bmi.n	ca14 <usb_d_ep_transfer+0xb0>
    ca3a:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    ca3e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    ca40:	f88d 3014 	strb.w	r3, [sp, #20]
    ca44:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    ca48:	f006 f8ca 	bl	12be0 <_usb_d_dev_ep_trans>
}
    ca4c:	b007      	add	sp, #28
    ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    ca52:	2002      	movs	r0, #2
}
    ca54:	b007      	add	sp, #28
    ca56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    ca5a:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    ca5e:	4599      	cmp	r9, r3
    ca60:	464f      	mov	r7, r9
    ca62:	bf28      	it	cs
    ca64:	461f      	movcs	r7, r3
    ca66:	2900      	cmp	r1, #0
    ca68:	db05      	blt.n	ca76 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    ca6a:	6833      	ldr	r3, [r6, #0]
    ca6c:	9704      	str	r7, [sp, #16]
    ca6e:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ca70:	4617      	mov	r7, r2
    ca72:	7a33      	ldrb	r3, [r6, #8]
    ca74:	e7e1      	b.n	ca3a <usb_d_ep_transfer+0xd6>
    ca76:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    ca78:	6832      	ldr	r2, [r6, #0]
    ca7a:	9704      	str	r7, [sp, #16]
    ca7c:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ca7e:	bf94      	ite	ls
    ca80:	2700      	movls	r7, #0
    ca82:	2701      	movhi	r7, #1
    ca84:	7a33      	ldrb	r3, [r6, #8]
    ca86:	e7c5      	b.n	ca14 <usb_d_ep_transfer+0xb0>
    ca88:	20001c48 	.word	0x20001c48

0000ca8c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    ca8c:	b570      	push	{r4, r5, r6, lr}
    ca8e:	4e0d      	ldr	r6, [pc, #52]	; (cac4 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca90:	f000 050f 	and.w	r5, r0, #15
    ca94:	4633      	mov	r3, r6
{
    ca96:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ca98:	785a      	ldrb	r2, [r3, #1]
    ca9a:	4290      	cmp	r0, r2
    ca9c:	d008      	beq.n	cab0 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ca9e:	7819      	ldrb	r1, [r3, #0]
    caa0:	3320      	adds	r3, #32
    caa2:	b909      	cbnz	r1, caa8 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    caa4:	42aa      	cmp	r2, r5
    caa6:	d003      	beq.n	cab0 <usb_d_ep_abort+0x24>
    caa8:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    caaa:	2c0d      	cmp	r4, #13
    caac:	d1f4      	bne.n	ca98 <usb_d_ep_abort+0xc>
    caae:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cab0:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    cab4:	f006 f962 	bl	12d7c <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cab8:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    caba:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cabc:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cabe:	70e3      	strb	r3, [r4, #3]
    cac0:	bd70      	pop	{r4, r5, r6, pc}
    cac2:	bf00      	nop
    cac4:	20001c48 	.word	0x20001c48

0000cac8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    cac8:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    caca:	460c      	mov	r4, r1
    cacc:	b131      	cbz	r1, cadc <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    cace:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cad0:	bf18      	it	ne
    cad2:	2102      	movne	r1, #2
	}
}
    cad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cad8:	f005 bfc6 	b.w	12a68 <_usb_d_dev_ep_stall>
    cadc:	4e15      	ldr	r6, [pc, #84]	; (cb34 <usb_d_ep_halt+0x6c>)
    cade:	4605      	mov	r5, r0
    cae0:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cae2:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cae6:	785a      	ldrb	r2, [r3, #1]
    cae8:	4295      	cmp	r5, r2
    caea:	d00a      	beq.n	cb02 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    caec:	7819      	ldrb	r1, [r3, #0]
    caee:	3320      	adds	r3, #32
    caf0:	b909      	cbnz	r1, caf6 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    caf2:	4282      	cmp	r2, r0
    caf4:	d005      	beq.n	cb02 <usb_d_ep_halt+0x3a>
    caf6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    caf8:	2c0d      	cmp	r4, #13
    cafa:	d1f4      	bne.n	cae6 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    cafc:	f06f 0011 	mvn.w	r0, #17
    cb00:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    cb02:	2102      	movs	r1, #2
    cb04:	4628      	mov	r0, r5
    cb06:	f005 ffaf 	bl	12a68 <_usb_d_dev_ep_stall>
    cb0a:	b900      	cbnz	r0, cb0e <usb_d_ep_halt+0x46>
}
    cb0c:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cb0e:	2100      	movs	r1, #0
    cb10:	4628      	mov	r0, r5
    cb12:	f005 ffa9 	bl	12a68 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    cb16:	2800      	cmp	r0, #0
    cb18:	dbf8      	blt.n	cb0c <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cb1a:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    cb1e:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cb20:	2301      	movs	r3, #1
    cb22:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    cb24:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    cb26:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    cb28:	69e3      	ldr	r3, [r4, #28]
    cb2a:	2200      	movs	r2, #0
    cb2c:	4798      	blx	r3
	return ERR_NONE;
    cb2e:	2000      	movs	r0, #0
    cb30:	bd70      	pop	{r4, r5, r6, pc}
    cb32:	bf00      	nop
    cb34:	20001c48 	.word	0x20001c48

0000cb38 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    cb38:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb3a:	f8df e054 	ldr.w	lr, [pc, #84]	; cb90 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb3e:	f000 070f 	and.w	r7, r0, #15
    cb42:	4673      	mov	r3, lr
{
    cb44:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb46:	785d      	ldrb	r5, [r3, #1]
    cb48:	42a8      	cmp	r0, r5
    cb4a:	d008      	beq.n	cb5e <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb4c:	781e      	ldrb	r6, [r3, #0]
    cb4e:	3320      	adds	r3, #32
    cb50:	b90e      	cbnz	r6, cb56 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb52:	42bd      	cmp	r5, r7
    cb54:	d003      	beq.n	cb5e <usb_d_ep_register_callback+0x26>
    cb56:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb58:	2c0d      	cmp	r4, #13
    cb5a:	d1f4      	bne.n	cb46 <usb_d_ep_register_callback+0xe>
    cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    cb5e:	4b0b      	ldr	r3, [pc, #44]	; (cb8c <usb_d_ep_register_callback+0x54>)
    cb60:	2a00      	cmp	r2, #0
    cb62:	bf08      	it	eq
    cb64:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    cb66:	2901      	cmp	r1, #1
    cb68:	d003      	beq.n	cb72 <usb_d_ep_register_callback+0x3a>
    cb6a:	d30a      	bcc.n	cb82 <usb_d_ep_register_callback+0x4a>
    cb6c:	2902      	cmp	r1, #2
    cb6e:	d004      	beq.n	cb7a <usb_d_ep_register_callback+0x42>
    cb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    cb72:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cb76:	61a2      	str	r2, [r4, #24]
		break;
    cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    cb7a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cb7e:	61e2      	str	r2, [r4, #28]
    cb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    cb82:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cb86:	6162      	str	r2, [r4, #20]
		break;
    cb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb8a:	bf00      	nop
    cb8c:	0000c495 	.word	0x0000c495
    cb90:	20001c48 	.word	0x20001c48

0000cb94 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    cb94:	b900      	cbnz	r0, cb98 <assert+0x4>
		__asm("BKPT #0");
    cb96:	be00      	bkpt	0x0000
    cb98:	4770      	bx	lr
    cb9a:	bf00      	nop

0000cb9c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    cb9c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    cb9e:	6804      	ldr	r4, [r0, #0]
{
    cba0:	4606      	mov	r6, r0
    cba2:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    cba4:	b144      	cbz	r4, cbb8 <list_insert_at_end+0x1c>
		if (it == element) {
    cba6:	428c      	cmp	r4, r1
    cba8:	d015      	beq.n	cbd6 <list_insert_at_end+0x3a>
    cbaa:	4623      	mov	r3, r4
    cbac:	e001      	b.n	cbb2 <list_insert_at_end+0x16>
    cbae:	429d      	cmp	r5, r3
    cbb0:	d011      	beq.n	cbd6 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    cbb2:	681b      	ldr	r3, [r3, #0]
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	d1fa      	bne.n	cbae <list_insert_at_end+0x12>
    cbb8:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    cbba:	224f      	movs	r2, #79	; 0x4f
    cbbc:	4908      	ldr	r1, [pc, #32]	; (cbe0 <list_insert_at_end+0x44>)
    cbbe:	f7ff ffe9 	bl	cb94 <assert>

	if (!list->head) {
    cbc2:	6833      	ldr	r3, [r6, #0]
    cbc4:	b90b      	cbnz	r3, cbca <list_insert_at_end+0x2e>
    cbc6:	e008      	b.n	cbda <list_insert_at_end+0x3e>
    cbc8:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    cbca:	6823      	ldr	r3, [r4, #0]
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d1fb      	bne.n	cbc8 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    cbd0:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    cbd2:	602b      	str	r3, [r5, #0]
    cbd4:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    cbd6:	2000      	movs	r0, #0
    cbd8:	e7ef      	b.n	cbba <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    cbda:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    cbdc:	602b      	str	r3, [r5, #0]
		return;
    cbde:	bd70      	pop	{r4, r5, r6, pc}
    cbe0:	0002300c 	.word	0x0002300c

0000cbe4 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    cbe6:	4d1f      	ldr	r5, [pc, #124]	; (cc64 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    cbe8:	682c      	ldr	r4, [r5, #0]
    cbea:	f014 0401 	ands.w	r4, r4, #1
    cbee:	d002      	beq.n	cbf6 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    cbf0:	4b1d      	ldr	r3, [pc, #116]	; (cc68 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    cbf2:	6818      	ldr	r0, [r3, #0]
    cbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cbf6:	2074      	movs	r0, #116	; 0x74
    cbf8:	f006 faca 	bl	13190 <_Znwj>
    cbfc:	4e1a      	ldr	r6, [pc, #104]	; (cc68 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    cbfe:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    cc00:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    cc02:	210c      	movs	r1, #12
    cc04:	f04f 30ff 	mov.w	r0, #4294967295
    cc08:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    cc0a:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    cc0c:	605c      	str	r4, [r3, #4]
    cc0e:	6658      	str	r0, [r3, #100]	; 0x64
    cc10:	609c      	str	r4, [r3, #8]
    cc12:	6698      	str	r0, [r3, #104]	; 0x68
    cc14:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    cc16:	841c      	strh	r4, [r3, #32]
    cc18:	611c      	str	r4, [r3, #16]
    cc1a:	625c      	str	r4, [r3, #36]	; 0x24
    cc1c:	615c      	str	r4, [r3, #20]
    cc1e:	851c      	strh	r4, [r3, #40]	; 0x28
    cc20:	619c      	str	r4, [r3, #24]
    cc22:	62dc      	str	r4, [r3, #44]	; 0x2c
    cc24:	61dc      	str	r4, [r3, #28]
    cc26:	861c      	strh	r4, [r3, #48]	; 0x30
    cc28:	635c      	str	r4, [r3, #52]	; 0x34
    cc2a:	871c      	strh	r4, [r3, #56]	; 0x38
    cc2c:	63dc      	str	r4, [r3, #60]	; 0x3c
    cc2e:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    cc32:	645c      	str	r4, [r3, #68]	; 0x44
    cc34:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    cc38:	64dc      	str	r4, [r3, #76]	; 0x4c
    cc3a:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    cc3e:	655c      	str	r4, [r3, #84]	; 0x54
    cc40:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    cc44:	65dc      	str	r4, [r3, #92]	; 0x5c
    cc46:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    cc4a:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    cc4e:	671c      	str	r4, [r3, #112]	; 0x70
    cc50:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    cc54:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    cc58:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    cc5c:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    cc5e:	6033      	str	r3, [r6, #0]
    cc60:	602a      	str	r2, [r5, #0]
}
    cc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc64:	20001de8 	.word	0x20001de8
    cc68:	20001e20 	.word	0x20001e20

0000cc6c <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    cc6e:	4bbd      	ldr	r3, [pc, #756]	; (cf64 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    cc70:	4605      	mov	r5, r0
    };
    cc72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    cc74:	b085      	sub	sp, #20
    };
    cc76:	ac04      	add	r4, sp, #16
    cc78:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    cc7c:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cc7e:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    cc80:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    cc84:	2303      	movs	r3, #3
    cc86:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    cc8a:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    cc8e:	f245 03c3 	movw	r3, #20675	; 0x50c3
    cc92:	842b      	strh	r3, [r5, #32]
    cc94:	852b      	strh	r3, [r5, #40]	; 0x28
    cc96:	862b      	strh	r3, [r5, #48]	; 0x30
    cc98:	872b      	strh	r3, [r5, #56]	; 0x38
    cc9a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    cc9e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    cca2:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    cca6:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    ccaa:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    ccae:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    ccb0:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    ccb4:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    ccb8:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    ccbc:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    ccbe:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    ccc0:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    ccc2:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    ccc4:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    ccc6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    ccca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ccce:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    ccd2:	07cf      	lsls	r7, r1, #31
    ccd4:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    ccd8:	f04f 0401 	mov.w	r4, #1
    ccdc:	bf54      	ite	pl
    ccde:	f364 0003 	bfipl	r0, r4, #0, #4
    cce2:	f364 1007 	bfimi	r0, r4, #4, #4
    cce6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    ccea:	4a9f      	ldr	r2, [pc, #636]	; (cf68 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    ccec:	4413      	add	r3, r2
    ccee:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    ccf0:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    ccf2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ccf6:	f041 0101 	orr.w	r1, r1, #1
    ccfa:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    ccfe:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cd00:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cd02:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd06:	01db      	lsls	r3, r3, #7
    cd08:	441a      	add	r2, r3
    cd0a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cd0e:	07ce      	lsls	r6, r1, #31
    cd10:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cd14:	bf54      	ite	pl
    cd16:	f364 0003 	bfipl	r0, r4, #0, #4
    cd1a:	f364 1007 	bfimi	r0, r4, #4, #4
    cd1e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd22:	4a91      	ldr	r2, [pc, #580]	; (cf68 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cd24:	4413      	add	r3, r2
    cd26:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd28:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd2a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    cd2e:	f041 0101 	orr.w	r1, r1, #1
    cd32:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cd36:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cd38:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cd3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd3e:	01db      	lsls	r3, r3, #7
    cd40:	441a      	add	r2, r3
    cd42:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cd46:	07cf      	lsls	r7, r1, #31
    cd48:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cd4c:	bf54      	ite	pl
    cd4e:	f364 0003 	bfipl	r0, r4, #0, #4
    cd52:	f364 1007 	bfimi	r0, r4, #4, #4
    cd56:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd5a:	4a83      	ldr	r2, [pc, #524]	; (cf68 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cd5c:	4413      	add	r3, r2
    cd5e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd60:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd62:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    cd66:	f041 0101 	orr.w	r1, r1, #1
    cd6a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cd6e:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cd70:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cd72:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd76:	01db      	lsls	r3, r3, #7
    cd78:	441a      	add	r2, r3
    cd7a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd82:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cd86:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    cd8c:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cd8e:	bf4c      	ite	mi
    cd90:	f364 1007 	bfimi	r0, r4, #4, #4
    cd94:	f364 0003 	bfipl	r0, r4, #0, #4
    cd98:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cd9c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    cda0:	4a72      	ldr	r2, [pc, #456]	; (cf6c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cda2:	f041 0101 	orr.w	r1, r1, #1
    cda6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    cdaa:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cdae:	f36f 1386 	bfc	r3, #6, #1
    cdb2:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    cdb6:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cdba:	065f      	lsls	r7, r3, #25
    cdbc:	d4fb      	bmi.n	cdb6 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    cdbe:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cdc2:	496a      	ldr	r1, [pc, #424]	; (cf6c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    cdc4:	2004      	movs	r0, #4
    cdc6:	f360 0303 	bfi	r3, r0, #0, #4
    cdca:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    cdce:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    cdd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cdd6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    cdda:	684b      	ldr	r3, [r1, #4]
    cddc:	06de      	lsls	r6, r3, #27
    cdde:	d4fc      	bmi.n	cdda <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    cde0:	4963      	ldr	r1, [pc, #396]	; (cf70 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    cde2:	4a64      	ldr	r2, [pc, #400]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    cde4:	6a0b      	ldr	r3, [r1, #32]
    cde6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cdea:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    cdec:	8813      	ldrh	r3, [r2, #0]
    cdee:	f043 0301 	orr.w	r3, r3, #1
    cdf2:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    cdf4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    cdf6:	f013 0301 	ands.w	r3, r3, #1
    cdfa:	d1fb      	bne.n	cdf4 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    cdfc:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    ce00:	290a      	cmp	r1, #10
    ce02:	f000 80e7 	beq.w	cfd4 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    ce06:	290c      	cmp	r1, #12
    ce08:	f000 80df 	beq.w	cfca <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    ce0c:	2908      	cmp	r1, #8
    ce0e:	f000 80d5 	beq.w	cfbc <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    ce12:	4b58      	ldr	r3, [pc, #352]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ce14:	881a      	ldrh	r2, [r3, #0]
    ce16:	2101      	movs	r1, #1
    ce18:	f361 220a 	bfi	r2, r1, #8, #3
    ce1c:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    ce1e:	889a      	ldrh	r2, [r3, #4]
    ce20:	b292      	uxth	r2, r2
    ce22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    ce26:	f042 0204 	orr.w	r2, r2, #4
    ce2a:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    ce2c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    ce2e:	f014 0404 	ands.w	r4, r4, #4
    ce32:	d1fb      	bne.n	ce2c <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    ce34:	4620      	mov	r0, r4
    ce36:	f001 fe33 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    ce3a:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    ce3c:	4620      	mov	r0, r4
    ce3e:	f001 fe39 	bl	eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    ce42:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    ce44:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    ce46:	f023 0302 	bic.w	r3, r3, #2
    ce4a:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    ce4c:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    ce4e:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    ce50:	6833      	ldr	r3, [r6, #0]
    ce52:	2b01      	cmp	r3, #1
    ce54:	d0fc      	beq.n	ce50 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    ce56:	4b48      	ldr	r3, [pc, #288]	; (cf78 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    ce58:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    ce5a:	4948      	ldr	r1, [pc, #288]	; (cf7c <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    ce5c:	4f48      	ldr	r7, [pc, #288]	; (cf80 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    ce5e:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    ce62:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    ce64:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    ce66:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    ce68:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    ce6a:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    ce6c:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    ce6e:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    ce70:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    ce72:	f001 fe15 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    ce76:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    ce78:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    ce7a:	f023 0302 	bic.w	r3, r3, #2
    ce7e:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    ce80:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    ce82:	6803      	ldr	r3, [r0, #0]
    ce84:	2b01      	cmp	r3, #1
    ce86:	d0fc      	beq.n	ce82 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    ce88:	4b3e      	ldr	r3, [pc, #248]	; (cf84 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    ce8a:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    ce8c:	2001      	movs	r0, #1
    ce8e:	f001 fe11 	bl	eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    ce92:	2300      	movs	r3, #0
    ce94:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    ce96:	4a37      	ldr	r2, [pc, #220]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    ce98:	4e3b      	ldr	r6, [pc, #236]	; (cf88 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    ce9a:	493c      	ldr	r1, [pc, #240]	; (cf8c <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    ce9c:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    ce9e:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    cea2:	2408      	movs	r4, #8
    cea4:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    cea6:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    cea8:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    ceaa:	6b93      	ldr	r3, [r2, #56]	; 0x38
    ceac:	f043 0301 	orr.w	r3, r3, #1
    ceb0:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    ceb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ceb4:	075c      	lsls	r4, r3, #29
    ceb6:	d4fc      	bmi.n	ceb2 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    ceb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    ceba:	492e      	ldr	r1, [pc, #184]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    cebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cec0:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    cec2:	7a13      	ldrb	r3, [r2, #8]
    cec4:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    cec8:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    ceca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    cecc:	06d8      	lsls	r0, r3, #27
    cece:	d4fc      	bmi.n	ceca <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    ced0:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    ced2:	4c28      	ldr	r4, [pc, #160]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    ced4:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    ced6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ced8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    cedc:	d1fb      	bne.n	ced6 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    cede:	78e3      	ldrb	r3, [r4, #3]
    cee0:	f043 0301 	orr.w	r3, r3, #1
    cee4:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    cee6:	f001 fddb 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    ceea:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    ceec:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    ceee:	6813      	ldr	r3, [r2, #0]
    cef0:	f043 0302 	orr.w	r3, r3, #2
    cef4:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    cef6:	f001 fdd3 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    cefa:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    cefc:	4a1d      	ldr	r2, [pc, #116]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    cefe:	f043 0302 	orr.w	r3, r3, #2
    cf02:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    cf04:	88a3      	ldrh	r3, [r4, #4]
    cf06:	f3c3 030e 	ubfx	r3, r3, #0, #15
    cf0a:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    cf0c:	8823      	ldrh	r3, [r4, #0]
    cf0e:	f043 0302 	orr.w	r3, r3, #2
    cf12:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    cf14:	6b13      	ldr	r3, [r2, #48]	; 0x30
    cf16:	0799      	lsls	r1, r3, #30
    cf18:	d4fc      	bmi.n	cf14 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    cf1a:	2000      	movs	r0, #0
    cf1c:	f001 fdc0 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    cf20:	6803      	ldr	r3, [r0, #0]
    cf22:	079a      	lsls	r2, r3, #30
    cf24:	d4f9      	bmi.n	cf1a <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    cf26:	2001      	movs	r0, #1
    cf28:	f001 fdba 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    cf2c:	6803      	ldr	r3, [r0, #0]
    cf2e:	079b      	lsls	r3, r3, #30
    cf30:	d4f9      	bmi.n	cf26 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    cf32:	4a10      	ldr	r2, [pc, #64]	; (cf74 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    cf34:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    cf38:	f013 0301 	ands.w	r3, r3, #1
    cf3c:	d1fa      	bne.n	cf34 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    cf3e:	4e14      	ldr	r6, [pc, #80]	; (cf90 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    cf40:	4c14      	ldr	r4, [pc, #80]	; (cf94 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    cf42:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    cf44:	f242 51ff 	movw	r1, #9727	; 0x25ff
    cf48:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    cf4c:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    cf4e:	8029      	strh	r1, [r5, #0]
    cf50:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    cf52:	8229      	strh	r1, [r5, #16]
    cf54:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    cf56:	806b      	strh	r3, [r5, #2]
    cf58:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    cf5a:	826b      	strh	r3, [r5, #18]
    cf5c:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    cf5e:	80aa      	strh	r2, [r5, #4]
    cf60:	e01a      	b.n	cf98 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    cf62:	bf00      	nop
    cf64:	0002302c 	.word	0x0002302c
    cf68:	41008000 	.word	0x41008000
    cf6c:	40001c00 	.word	0x40001c00
    cf70:	40000800 	.word	0x40000800
    cf74:	43002000 	.word	0x43002000
    cf78:	00204600 	.word	0x00204600
    cf7c:	20001dfc 	.word	0x20001dfc
    cf80:	43002040 	.word	0x43002040
    cf84:	00204700 	.word	0x00204700
    cf88:	20001e20 	.word	0x20001e20
    cf8c:	43002034 	.word	0x43002034
    cf90:	25ff0000 	.word	0x25ff0000
    cf94:	60f80000 	.word	0x60f80000
    cf98:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    cf9a:	82aa      	strh	r2, [r5, #20]
    cf9c:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    cf9e:	80eb      	strh	r3, [r5, #6]
    cfa0:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    cfa2:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    cfa4:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    cfa8:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    cfaa:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    cfac:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    cfae:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    cfb0:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    cfb2:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    cfb4:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    cfb6:	83eb      	strh	r3, [r5, #30]
}
    cfb8:	b005      	add	sp, #20
    cfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    cfbc:	88d3      	ldrh	r3, [r2, #6]
    cfbe:	f043 0318 	orr.w	r3, r3, #24
    cfc2:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    cfc4:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    cfc8:	e723      	b.n	ce12 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    cfca:	88d0      	ldrh	r0, [r2, #6]
    cfcc:	f363 00c4 	bfi	r0, r3, #3, #2
    cfd0:	80d0      	strh	r0, [r2, #6]
    cfd2:	e7f7      	b.n	cfc4 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    cfd4:	88d3      	ldrh	r3, [r2, #6]
    cfd6:	2002      	movs	r0, #2
    cfd8:	f360 03c4 	bfi	r3, r0, #3, #2
    cfdc:	80d3      	strh	r3, [r2, #6]
    cfde:	e7f1      	b.n	cfc4 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000cfe0 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    cfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    cfe4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    cfe8:	2b00      	cmp	r3, #0
    cfea:	f000 80ab 	beq.w	d144 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    cfee:	4b89      	ldr	r3, [pc, #548]	; (d214 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    cff0:	4604      	mov	r4, r0
    cff2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    cff6:	f010 0001 	ands.w	r0, r0, #1
    cffa:	f000 80a5 	beq.w	d148 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    cffe:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d000:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d004:	3301      	adds	r3, #1
    d006:	4293      	cmp	r3, r2
    d008:	6723      	str	r3, [r4, #112]	; 0x70
    d00a:	d302      	bcc.n	d012 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d00c:	2301      	movs	r3, #1
    d00e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d012:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d014:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d016:	8821      	ldrh	r1, [r4, #0]
    d018:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d01a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d01c:	fb83 6706 	smull	r6, r7, r3, r6
    d020:	0bf2      	lsrs	r2, r6, #15
    d022:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d026:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d028:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d02c:	fb01 f103 	mul.w	r1, r1, r3
    d030:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d034:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d036:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d038:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d03a:	6262      	str	r2, [r4, #36]	; 0x24
    d03c:	fb80 8905 	smull	r8, r9, r0, r5
    d040:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d044:	b2b2      	uxth	r2, r6
    d046:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d04a:	fb02 f000 	mul.w	r0, r2, r0
    d04e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d052:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d056:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d058:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d05a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d05c:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d05e:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d060:	88a0      	ldrh	r0, [r4, #4]
    d062:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d064:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d068:	fb81 2302 	smull	r2, r3, r1, r2
    d06c:	0bd2      	lsrs	r2, r2, #15
    d06e:	b280      	uxth	r0, r0
    d070:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d074:	fb00 f101 	mul.w	r1, r0, r1
    d078:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d07c:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d082:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d084:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d086:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d088:	88e1      	ldrh	r1, [r4, #6]
    d08a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d08e:	fb86 8903 	smull	r8, r9, r6, r3
    d092:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d096:	b289      	uxth	r1, r1
    d098:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d09c:	fb01 f606 	mul.w	r6, r1, r6
    d0a0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d0a4:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d0a8:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d0aa:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d0ac:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d0ae:	8923      	ldrh	r3, [r4, #8]
    d0b0:	63e1      	str	r1, [r4, #60]	; 0x3c
    d0b2:	fb85 6706 	smull	r6, r7, r5, r6
    d0b6:	0bf2      	lsrs	r2, r6, #15
    d0b8:	b29b      	uxth	r3, r3
    d0ba:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d0be:	fb03 f505 	mul.w	r5, r3, r5
    d0c2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d0c6:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d0ca:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d0cc:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d0ce:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d0d0:	8961      	ldrh	r1, [r4, #10]
    d0d2:	6462      	str	r2, [r4, #68]	; 0x44
    d0d4:	fb80 6706 	smull	r6, r7, r0, r6
    d0d8:	0bf3      	lsrs	r3, r6, #15
    d0da:	b28a      	uxth	r2, r1
    d0dc:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d0e0:	fb02 f000 	mul.w	r0, r2, r0
    d0e4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d0e8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d0ec:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d0ee:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d0f0:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d0f2:	89a0      	ldrh	r0, [r4, #12]
    d0f4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d0f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d0fa:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d0fe:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d100:	fb83 8902 	smull	r8, r9, r3, r2
    d104:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d108:	b280      	uxth	r0, r0
    d10a:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d10e:	fb00 f303 	mul.w	r3, r0, r3
    d112:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d116:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d11a:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d11c:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d11e:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d122:	89e0      	ldrh	r0, [r4, #14]
    d124:	6562      	str	r2, [r4, #84]	; 0x54
    d126:	0bf3      	lsrs	r3, r6, #15
    d128:	b282      	uxth	r2, r0
    d12a:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d12e:	fb02 f101 	mul.w	r1, r2, r1
    d132:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d136:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d13a:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d13c:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d13e:	83e2      	strh	r2, [r4, #30]
    d140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d148:	f001 fcaa 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d14c:	6803      	ldr	r3, [r0, #0]
    d14e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d152:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d154:	2e00      	cmp	r6, #0
    d156:	f47f af52 	bne.w	cffe <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d15a:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d15c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d160:	2501      	movs	r5, #1
    d162:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d220 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d166:	4f2c      	ldr	r7, [pc, #176]	; (d218 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d168:	e00f      	b.n	d18a <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d16a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d16e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d172:	b29b      	uxth	r3, r3
    d174:	f1c2 010f 	rsb	r1, r2, #15
    d178:	408b      	lsls	r3, r1
    d17a:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d17c:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d17e:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d182:	462e      	mov	r6, r5
    d184:	dc0c      	bgt.n	d1a0 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d186:	3501      	adds	r5, #1
    d188:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d18a:	2d01      	cmp	r5, #1
    d18c:	d1ed      	bne.n	d16a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d18e:	f04f 31ff 	mov.w	r1, #4294967295
    d192:	6838      	ldr	r0, [r7, #0]
    d194:	f004 f9c8 	bl	11528 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d198:	0703      	lsls	r3, r0, #28
    d19a:	d5e6      	bpl.n	d16a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d19c:	462e      	mov	r6, r5
    d19e:	e7f2      	b.n	d186 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d1a0:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d1a4:	429a      	cmp	r2, r3
    d1a6:	d005      	beq.n	d1b4 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d1a8:	2b0a      	cmp	r3, #10
    d1aa:	d02c      	beq.n	d206 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d1ac:	2b0c      	cmp	r3, #12
    d1ae:	d024      	beq.n	d1fa <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d1b0:	2b08      	cmp	r3, #8
    d1b2:	d01a      	beq.n	d1ea <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d1b4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d1b6:	4b19      	ldr	r3, [pc, #100]	; (d21c <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d1b8:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d1ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d1be:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d1c0:	2000      	movs	r0, #0
    d1c2:	f001 fc6d 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d1c6:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d1c8:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d1ca:	6813      	ldr	r3, [r2, #0]
    d1cc:	f043 0302 	orr.w	r3, r3, #2
    d1d0:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d1d2:	f001 fc65 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d1d6:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d1d8:	4a0e      	ldr	r2, [pc, #56]	; (d214 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d1da:	f043 0302 	orr.w	r3, r3, #2
    d1de:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d1e0:	8893      	ldrh	r3, [r2, #4]
    d1e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d1e6:	8093      	strh	r3, [r2, #4]
    d1e8:	e713      	b.n	d012 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d1ea:	490a      	ldr	r1, [pc, #40]	; (d214 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d1ec:	88ca      	ldrh	r2, [r1, #6]
    d1ee:	f042 0218 	orr.w	r2, r2, #24
    d1f2:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d1f4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d1f8:	e7dc      	b.n	d1b4 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d1fa:	4a06      	ldr	r2, [pc, #24]	; (d214 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d1fc:	88d1      	ldrh	r1, [r2, #6]
    d1fe:	f36f 01c4 	bfc	r1, #3, #2
    d202:	80d1      	strh	r1, [r2, #6]
    d204:	e7f6      	b.n	d1f4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d206:	4a03      	ldr	r2, [pc, #12]	; (d214 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d208:	88d1      	ldrh	r1, [r2, #6]
    d20a:	2002      	movs	r0, #2
    d20c:	f360 01c4 	bfi	r1, r0, #3, #2
    d210:	80d1      	strh	r1, [r2, #6]
    d212:	e7ef      	b.n	d1f4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d214:	43002000 	.word	0x43002000
    d218:	20001f18 	.word	0x20001f18
    d21c:	200019d0 	.word	0x200019d0
    d220:	20001dec 	.word	0x20001dec

0000d224 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d224:	2907      	cmp	r1, #7
    d226:	dc33      	bgt.n	d290 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d228:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d22a:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d22c:	b083      	sub	sp, #12
    d22e:	4605      	mov	r5, r0
    switch (theUnits) {
    d230:	d033      	beq.n	d29a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d232:	d336      	bcc.n	d2a2 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d234:	2b02      	cmp	r3, #2
    d236:	d12d      	bne.n	d294 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d238:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d23a:	1d0c      	adds	r4, r1, #4
    d23c:	f00e fb10 	bl	1b860 <__aeabi_i2d>
    d240:	460b      	mov	r3, r1
    d242:	4602      	mov	r2, r0
    d244:	491a      	ldr	r1, [pc, #104]	; (d2b0 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d246:	2000      	movs	r0, #0
    d248:	f00e fc9a 	bl	1bb80 <__aeabi_ddiv>
    d24c:	f00e fe50 	bl	1bef0 <__aeabi_d2f>
    d250:	ed9f 0a18 	vldr	s0, [pc, #96]	; d2b4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d254:	ee00 0a90 	vmov	s1, r0
    d258:	f00d fbaa 	bl	1a9b0 <powf>
    d25c:	eddf 6a16 	vldr	s13, [pc, #88]	; d2b8 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d260:	ed9f 7a16 	vldr	s14, [pc, #88]	; d2bc <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d264:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d268:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d26c:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d26e:	eef4 7ac7 	vcmpe.f32	s15, s14
    d272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d276:	bf49      	itett	mi
    d278:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d27c:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d280:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d284:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d288:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d28c:	b003      	add	sp, #12
    d28e:	bd30      	pop	{r4, r5, pc}
        return false;
    d290:	2000      	movs	r0, #0
    d292:	4770      	bx	lr
            return false;
    d294:	2000      	movs	r0, #0
}
    d296:	b003      	add	sp, #12
    d298:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d29a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d29e:	b290      	uxth	r0, r2
    d2a0:	e7cb      	b.n	d23a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d2a2:	3104      	adds	r1, #4
            return true;
    d2a4:	2001      	movs	r0, #1
        m_tc = newTc;
    d2a6:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d2aa:	b003      	add	sp, #12
    d2ac:	bd30      	pop	{r4, r5, pc}
    d2ae:	bf00      	nop
    d2b0:	3ff00000 	.word	0x3ff00000
    d2b4:	3c23d70a 	.word	0x3c23d70a
    d2b8:	47000000 	.word	0x47000000
    d2bc:	46fffe00 	.word	0x46fffe00

0000d2c0 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d2c2:	f7ff fc8f 	bl	cbe4 <_ZN9ClearCore10AdcManager8InstanceEv>
    d2c6:	4a0f      	ldr	r2, [pc, #60]	; (d304 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d2c8:	4b0f      	ldr	r3, [pc, #60]	; (d308 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d2ca:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d2cc:	2104      	movs	r1, #4
    d2ce:	2205      	movs	r2, #5
    d2d0:	2706      	movs	r7, #6
    d2d2:	2607      	movs	r6, #7
    d2d4:	2508      	movs	r5, #8
    d2d6:	2409      	movs	r4, #9
    d2d8:	200a      	movs	r0, #10
    d2da:	8019      	strh	r1, [r3, #0]
    d2dc:	809a      	strh	r2, [r3, #4]
    d2de:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d2e2:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d2e4:	811f      	strh	r7, [r3, #8]
    d2e6:	819e      	strh	r6, [r3, #12]
    d2e8:	821d      	strh	r5, [r3, #16]
    d2ea:	829c      	strh	r4, [r3, #20]
    d2ec:	8318      	strh	r0, [r3, #24]
    d2ee:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d2f0:	805a      	strh	r2, [r3, #2]
    d2f2:	80da      	strh	r2, [r3, #6]
    d2f4:	815a      	strh	r2, [r3, #10]
    d2f6:	81da      	strh	r2, [r3, #14]
    d2f8:	825a      	strh	r2, [r3, #18]
    d2fa:	82da      	strh	r2, [r3, #22]
    d2fc:	835a      	strh	r2, [r3, #26]
    d2fe:	83da      	strh	r2, [r3, #30]
    d300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d302:	bf00      	nop
    d304:	20001dfc 	.word	0x20001dfc
    d308:	20001e00 	.word	0x20001e00

0000d30c <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d30c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d310:	4770      	bx	lr
    d312:	bf00      	nop

0000d314 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d314:	7980      	ldrb	r0, [r0, #6]
    d316:	4770      	bx	lr

0000d318 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d318:	2004      	movs	r0, #4
    d31a:	4770      	bx	lr

0000d31c <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d31c:	7980      	ldrb	r0, [r0, #6]
    d31e:	1ec3      	subs	r3, r0, #3
    d320:	2b01      	cmp	r3, #1
    d322:	bf83      	ittte	hi
    d324:	3806      	subhi	r0, #6
    d326:	fab0 f080 	clzhi	r0, r0
    d32a:	0940      	lsrhi	r0, r0, #5
    d32c:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d32e:	4770      	bx	lr

0000d330 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d330:	b530      	push	{r4, r5, lr}
    d332:	b083      	sub	sp, #12
    d334:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d338:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d33a:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d33c:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d33e:	f000 fcfd 	bl	dd3c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d342:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d346:	4a05      	ldr	r2, [pc, #20]	; (d35c <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d348:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d34a:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d34c:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d34e:	4b04      	ldr	r3, [pc, #16]	; (d360 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d350:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d352:	4620      	mov	r0, r4
    d354:	66a3      	str	r3, [r4, #104]	; 0x68
    d356:	b003      	add	sp, #12
    d358:	bd30      	pop	{r4, r5, pc}
    d35a:	bf00      	nop
    d35c:	00023084 	.word	0x00023084
    d360:	06a40000 	.word	0x06a40000

0000d364 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    d364:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d366:	4a3a      	ldr	r2, [pc, #232]	; (d450 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d368:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d36c:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    d370:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d372:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d376:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d37a:	065d      	lsls	r5, r3, #25
    d37c:	d4fb      	bmi.n	d376 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    d37e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d382:	4933      	ldr	r1, [pc, #204]	; (d450 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d384:	2004      	movs	r0, #4
    d386:	f360 0303 	bfi	r3, r0, #0, #4
    d38a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d38e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d396:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d39a:	684b      	ldr	r3, [r1, #4]
    d39c:	06d8      	lsls	r0, r3, #27
    d39e:	d4fc      	bmi.n	d39a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d3a0:	4a2c      	ldr	r2, [pc, #176]	; (d454 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    d3a2:	492d      	ldr	r1, [pc, #180]	; (d458 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d3a4:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    d3a6:	4b2d      	ldr	r3, [pc, #180]	; (d45c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d3a8:	2507      	movs	r5, #7
    d3aa:	f365 4013 	bfi	r0, r5, #16, #4
    d3ae:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    d3b0:	6a0a      	ldr	r2, [r1, #32]
    d3b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d3b6:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    d3b8:	781a      	ldrb	r2, [r3, #0]
    d3ba:	f042 0201 	orr.w	r2, r2, #1
    d3be:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    d3c0:	689a      	ldr	r2, [r3, #8]
    d3c2:	07d2      	lsls	r2, r2, #31
    d3c4:	d4fc      	bmi.n	d3c0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    d3c6:	785a      	ldrb	r2, [r3, #1]
    d3c8:	f042 0201 	orr.w	r2, r2, #1
    d3cc:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    d3ce:	785a      	ldrb	r2, [r3, #1]
    d3d0:	f042 0206 	orr.w	r2, r2, #6
    d3d4:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    d3d6:	899a      	ldrh	r2, [r3, #12]
    d3d8:	f042 0202 	orr.w	r2, r2, #2
    d3dc:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    d3de:	899a      	ldrh	r2, [r3, #12]
    d3e0:	2105      	movs	r1, #5
    d3e2:	f361 220b 	bfi	r2, r1, #8, #4
    d3e6:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    d3e8:	899a      	ldrh	r2, [r3, #12]
    d3ea:	2102      	movs	r1, #2
    d3ec:	f361 0283 	bfi	r2, r1, #2, #2
    d3f0:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    d3f2:	8a1b      	ldrh	r3, [r3, #16]
    d3f4:	b29b      	uxth	r3, r3
    d3f6:	bb23      	cbnz	r3, d442 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d3f8:	4b19      	ldr	r3, [pc, #100]	; (d460 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    d3fa:	681d      	ldr	r5, [r3, #0]
    d3fc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    d400:	4628      	mov	r0, r5
    d402:	f004 fadd 	bl	119c0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d406:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d40a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d40e:	4628      	mov	r0, r5
    d410:	f004 fad6 	bl	119c0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    d414:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d418:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    d41a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d41e:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    d422:	461a      	mov	r2, r3
    d424:	db03      	blt.n	d42e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    d426:	2300      	movs	r3, #0
    d428:	461a      	mov	r2, r3
    d42a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    d42e:	4410      	add	r0, r2
    d430:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d434:	db04      	blt.n	d440 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    d436:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    d43a:	3304      	adds	r3, #4
    d43c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    d440:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d442:	4a06      	ldr	r2, [pc, #24]	; (d45c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    d444:	6893      	ldr	r3, [r2, #8]
    d446:	f013 0304 	ands.w	r3, r3, #4
    d44a:	d1fb      	bne.n	d444 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    d44c:	8213      	strh	r3, [r2, #16]
    d44e:	e7d3      	b.n	d3f8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    d450:	40001c00 	.word	0x40001c00
    d454:	40001800 	.word	0x40001800
    d458:	40000800 	.word	0x40000800
    d45c:	43002400 	.word	0x43002400
    d460:	20001f24 	.word	0x20001f24

0000d464 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    d464:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    d466:	4a2e      	ldr	r2, [pc, #184]	; (d520 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    d468:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d46c:	8a13      	ldrh	r3, [r2, #16]
    d46e:	b29b      	uxth	r3, r3
    d470:	4299      	cmp	r1, r3
    d472:	d003      	beq.n	d47c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d474:	6893      	ldr	r3, [r2, #8]
    d476:	075d      	lsls	r5, r3, #29
    d478:	d4fc      	bmi.n	d474 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    d47a:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d47c:	68c3      	ldr	r3, [r0, #12]
    d47e:	4929      	ldr	r1, [pc, #164]	; (d524 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    d480:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d482:	4a27      	ldr	r2, [pc, #156]	; (d520 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d484:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d488:	4423      	add	r3, r4
    d48a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    d48e:	f044 0401 	orr.w	r4, r4, #1
    d492:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d496:	6e03      	ldr	r3, [r0, #96]	; 0x60
    d498:	6e44      	ldr	r4, [r0, #100]	; 0x64
    d49a:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d49e:	4423      	add	r3, r4
    d4a0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d4a4:	f041 0101 	orr.w	r1, r1, #1
    d4a8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d4ac:	6893      	ldr	r3, [r2, #8]
    d4ae:	079c      	lsls	r4, r3, #30
    d4b0:	d4fc      	bmi.n	d4ac <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    d4b2:	7813      	ldrb	r3, [r2, #0]
    d4b4:	0799      	lsls	r1, r3, #30
    d4b6:	d407      	bmi.n	d4c8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    d4b8:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d4ba:	4919      	ldr	r1, [pc, #100]	; (d520 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    d4bc:	f043 0302 	orr.w	r3, r3, #2
    d4c0:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d4c2:	688b      	ldr	r3, [r1, #8]
    d4c4:	079a      	lsls	r2, r3, #30
    d4c6:	d4fc      	bmi.n	d4c2 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    d4c8:	4a15      	ldr	r2, [pc, #84]	; (d520 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    d4ca:	79d3      	ldrb	r3, [r2, #7]
    d4cc:	079b      	lsls	r3, r3, #30
    d4ce:	d0fc      	beq.n	d4ca <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    d4d0:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d4d2:	4b15      	ldr	r3, [pc, #84]	; (d528 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    d4d4:	f002 010f 	and.w	r1, r2, #15
    d4d8:	185a      	adds	r2, r3, r1
    d4da:	2400      	movs	r4, #0
    d4dc:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d4e0:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d4e2:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    d4e6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d4ea:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d4ec:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d4f0:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    d4f2:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d4f4:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    d4f6:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d4fa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d4fe:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d502:	33f4      	adds	r3, #244	; 0xf4
    d504:	f3bf 8f5b 	dmb	ish
    d508:	e853 2f00 	ldrex	r2, [r3]
    d50c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d510:	e843 2100 	strex	r1, r2, [r3]
    d514:	2900      	cmp	r1, #0
    d516:	d1f7      	bne.n	d508 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    d518:	f3bf 8f5b 	dmb	ish
}
    d51c:	bc70      	pop	{r4, r5, r6}
    d51e:	4770      	bx	lr
    d520:	43002400 	.word	0x43002400
    d524:	41008000 	.word	0x41008000
    d528:	200019d0 	.word	0x200019d0

0000d52c <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    d52c:	7983      	ldrb	r3, [r0, #6]
    d52e:	2b06      	cmp	r3, #6
    d530:	d805      	bhi.n	d53e <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    d532:	2201      	movs	r2, #1
    d534:	fa02 f303 	lsl.w	r3, r2, r3
    d538:	f013 0f54 	tst.w	r3, #84	; 0x54
    d53c:	d100      	bne.n	d540 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    d53e:	4770      	bx	lr
            DigitalInOut::Refresh();
    d540:	f000 bc32 	b.w	dda8 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000d544 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    d546:	7983      	ldrb	r3, [r0, #6]
    d548:	428b      	cmp	r3, r1
    d54a:	d06e      	beq.n	d62a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    d54c:	1e8a      	subs	r2, r1, #2
    d54e:	460c      	mov	r4, r1
    d550:	4605      	mov	r5, r0
    d552:	2a04      	cmp	r2, #4
    d554:	d80d      	bhi.n	d572 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    d556:	e8df f002 	tbb	[pc, r2]
    d55a:	0311      	.short	0x0311
    d55c:	0c11      	.short	0x0c11
    d55e:	11          	.byte	0x11
    d55f:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    d560:	2102      	movs	r1, #2
    d562:	f000 fad9 	bl	db18 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    d566:	4628      	mov	r0, r5
    d568:	f7ff ff7c 	bl	d464 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    d56c:	2303      	movs	r3, #3
    d56e:	71ab      	strb	r3, [r5, #6]
            break;
    d570:	4623      	mov	r3, r4
    return (m_mode == newMode);
    d572:	1ae0      	subs	r0, r4, r3
    d574:	fab0 f080 	clz	r0, r0
    d578:	0940      	lsrs	r0, r0, #5
    d57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d57c:	4b2c      	ldr	r3, [pc, #176]	; (d630 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    d57e:	f3bf 8f5b 	dmb	ish
    d582:	e853 2f00 	ldrex	r2, [r3]
    d586:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    d58a:	e843 2100 	strex	r1, r2, [r3]
    d58e:	2900      	cmp	r1, #0
    d590:	d1f7      	bne.n	d582 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    d592:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    d596:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d598:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d59c:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d59e:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d5a0:	4924      	ldr	r1, [pc, #144]	; (d634 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d5a2:	3bf4      	subs	r3, #244	; 0xf4
    d5a4:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d5a8:	f04f 0e01 	mov.w	lr, #1
    d5ac:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d5b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d5b4:	ea27 070e 	bic.w	r7, r7, lr
    d5b8:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    d5bc:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d5be:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d5c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    d5c6:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    d5ca:	4438      	add	r0, r7
    d5cc:	ea22 0606 	bic.w	r6, r2, r6
    d5d0:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    d5d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d5d8:	4a17      	ldr	r2, [pc, #92]	; (d638 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d5da:	f36f 0300 	bfc	r3, #0, #1
    d5de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d5e2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    d5e4:	6e68      	ldr	r0, [r5, #100]	; 0x64
    d5e6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d5ea:	4403      	add	r3, r0
    d5ec:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d5f0:	f36f 0100 	bfc	r1, #0, #1
    d5f4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d5f8:	6893      	ldr	r3, [r2, #8]
    d5fa:	f013 0302 	ands.w	r3, r3, #2
    d5fe:	d1fb      	bne.n	d5f8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    d600:	7811      	ldrb	r1, [r2, #0]
    d602:	0789      	lsls	r1, r1, #30
    d604:	d507      	bpl.n	d616 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    d606:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d608:	490b      	ldr	r1, [pc, #44]	; (d638 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    d60a:	f363 0041 	bfi	r0, r3, #1, #1
    d60e:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d610:	688b      	ldr	r3, [r1, #8]
    d612:	079b      	lsls	r3, r3, #30
    d614:	d4fc      	bmi.n	d610 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    d616:	4621      	mov	r1, r4
    d618:	4628      	mov	r0, r5
    d61a:	f000 fa7d 	bl	db18 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    d61e:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    d620:	1ae0      	subs	r0, r4, r3
    d622:	fab0 f080 	clz	r0, r0
    d626:	0940      	lsrs	r0, r0, #5
    d628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    d62a:	2001      	movs	r0, #1
}
    d62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d62e:	bf00      	nop
    d630:	20001ac4 	.word	0x20001ac4
    d634:	41008000 	.word	0x41008000
    d638:	43002400 	.word	0x43002400

0000d63c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    d63c:	7983      	ldrb	r3, [r0, #6]
    d63e:	2b06      	cmp	r3, #6
    d640:	d805      	bhi.n	d64e <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    d642:	2201      	movs	r2, #1
    d644:	fa02 f303 	lsl.w	r3, r2, r3
    d648:	f013 0f54 	tst.w	r3, #84	; 0x54
    d64c:	d101      	bne.n	d652 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    d64e:	2000      	movs	r0, #0
    d650:	4770      	bx	lr
            state = DigitalInOut::State();
    d652:	f000 bcaf 	b.w	dfb4 <_ZN9ClearCore12DigitalInOut5StateEv>
    d656:	bf00      	nop

0000d658 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    d658:	7983      	ldrb	r3, [r0, #6]
    d65a:	3b02      	subs	r3, #2
    d65c:	2b04      	cmp	r3, #4
    d65e:	d83c      	bhi.n	d6da <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    d660:	e8df f003 	tbb	[pc, r3]
    d664:	3b390339 	.word	0x3b390339
    d668:	39          	.byte	0x39
    d669:	00          	.byte	0x00
            newState = max(newState, 0);
    d66a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    d66e:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    d670:	b289      	uxth	r1, r1
    d672:	f240 74ff 	movw	r4, #2047	; 0x7ff
    d676:	42a1      	cmp	r1, r4
    d678:	bf28      	it	cs
    d67a:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    d67c:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d67e:	4d19      	ldr	r5, [pc, #100]	; (d6e4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    d680:	4e19      	ldr	r6, [pc, #100]	; (d6e8 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    d682:	4a1a      	ldr	r2, [pc, #104]	; (d6ec <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d684:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    d688:	fb85 e503 	smull	lr, r5, r5, r3
    d68c:	f007 070f 	and.w	r7, r7, #15
    d690:	441d      	add	r5, r3
    d692:	443e      	add	r6, r7
    d694:	17db      	asrs	r3, r3, #31
    d696:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    d69a:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d69e:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    d6a2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d6a6:	4812      	ldr	r0, [pc, #72]	; (d6f0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d6a8:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    d6ac:	fba2 5201 	umull	r5, r2, r2, r1
    d6b0:	1a89      	subs	r1, r1, r2
    d6b2:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    d6b6:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    d6ba:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    d6bc:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    d6be:	42a1      	cmp	r1, r4
    d6c0:	bf28      	it	cs
    d6c2:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    d6c4:	b29b      	uxth	r3, r3
    d6c6:	4299      	cmp	r1, r3
    d6c8:	d009      	beq.n	d6de <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d6ca:	6883      	ldr	r3, [r0, #8]
    d6cc:	075b      	lsls	r3, r3, #29
    d6ce:	d4fc      	bmi.n	d6ca <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    d6d0:	8201      	strh	r1, [r0, #16]
            success = true;
    d6d2:	2001      	movs	r0, #1
    d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    d6d6:	f000 b9c3 	b.w	da60 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    d6da:	2000      	movs	r0, #0
    d6dc:	4770      	bx	lr
            success = true;
    d6de:	2001      	movs	r0, #1
}
    d6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6e2:	bf00      	nop
    d6e4:	80100201 	.word	0x80100201
    d6e8:	200019d0 	.word	0x200019d0
    d6ec:	00200401 	.word	0x00200401
    d6f0:	43002400 	.word	0x43002400

0000d6f4 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    d6f4:	b538      	push	{r3, r4, r5, lr}
    d6f6:	4604      	mov	r4, r0
    d6f8:	460d      	mov	r5, r1
    DacInitialize();
    d6fa:	f7ff fe33 	bl	d364 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    d6fe:	4620      	mov	r0, r4
    d700:	4629      	mov	r1, r5
    d702:	f000 fc77 	bl	dff4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    d706:	6920      	ldr	r0, [r4, #16]
    d708:	07c2      	lsls	r2, r0, #31
    d70a:	d521      	bpl.n	d750 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    d70c:	68e1      	ldr	r1, [r4, #12]
    d70e:	01c9      	lsls	r1, r1, #7
    d710:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    d714:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d718:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    d71c:	2101      	movs	r1, #1
    d71e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d722:	f361 1307 	bfi	r3, r1, #4, #4
    d726:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    d72a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d72c:	07cb      	lsls	r3, r1, #31
    d72e:	d421      	bmi.n	d774 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    d730:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d732:	01db      	lsls	r3, r3, #7
    d734:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d738:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d73c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    d740:	2101      	movs	r1, #1
    d742:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d746:	f361 0203 	bfi	r2, r1, #0, #4
    d74a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    d74e:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    d750:	68e2      	ldr	r2, [r4, #12]
    d752:	01d2      	lsls	r2, r2, #7
    d754:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    d758:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d75c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    d760:	2101      	movs	r1, #1
    d762:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d766:	f361 0203 	bfi	r2, r1, #0, #4
    d76a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    d76e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d770:	07cb      	lsls	r3, r1, #31
    d772:	d5dd      	bpl.n	d730 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    d774:	6e22      	ldr	r2, [r4, #96]	; 0x60
    d776:	01d2      	lsls	r2, r2, #7
    d778:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    d77c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d780:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d784:	2101      	movs	r1, #1
    d786:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d78a:	f361 1307 	bfi	r3, r1, #4, #4
    d78e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    d792:	bd38      	pop	{r3, r4, r5, pc}

0000d794 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    d794:	2000      	movs	r0, #0
    d796:	4770      	bx	lr

0000d798 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d798:	7980      	ldrb	r0, [r0, #6]
    d79a:	4770      	bx	lr

0000d79c <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    d79c:	2003      	movs	r0, #3
    d79e:	4770      	bx	lr

0000d7a0 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    d7a0:	2000      	movs	r0, #0
    d7a2:	4770      	bx	lr

0000d7a4 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    d7a4:	2000      	movs	r0, #0
    d7a6:	4770      	bx	lr

0000d7a8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    d7aa:	7983      	ldrb	r3, [r0, #6]
    d7ac:	428b      	cmp	r3, r1
    d7ae:	d072      	beq.n	d896 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    d7b0:	2901      	cmp	r1, #1
    d7b2:	460c      	mov	r4, r1
    d7b4:	4605      	mov	r5, r0
    d7b6:	d03c      	beq.n	d832 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    d7b8:	2902      	cmp	r1, #2
    d7ba:	d135      	bne.n	d828 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d7bc:	4e37      	ldr	r6, [pc, #220]	; (d89c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    d7be:	6b03      	ldr	r3, [r0, #48]	; 0x30
    d7c0:	f3bf 8f5b 	dmb	ish
    d7c4:	e856 2f00 	ldrex	r2, [r6]
    d7c8:	431a      	orrs	r2, r3
    d7ca:	e846 2100 	strex	r1, r2, [r6]
    d7ce:	2900      	cmp	r1, #0
    d7d0:	d1f8      	bne.n	d7c4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    d7d2:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    d7d6:	3ef4      	subs	r6, #244	; 0xf4
    d7d8:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    d7dc:	b143      	cbz	r3, d7f0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    d7de:	4b30      	ldr	r3, [pc, #192]	; (d8a0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    d7e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d7e2:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    d7e4:	6e53      	ldr	r3, [r2, #100]	; 0x64
    d7e6:	420b      	tst	r3, r1
    d7e8:	d0fc      	beq.n	d7e4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    d7ea:	4628      	mov	r0, r5
    d7ec:	f000 fda6 	bl	e33c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    d7f0:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d7f2:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d7f6:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    d7f8:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d7fc:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d800:	2001      	movs	r0, #1
    d802:	4098      	lsls	r0, r3
    d804:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d808:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d80c:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    d810:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    d812:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    d816:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d818:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d81c:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    d820:	4603      	mov	r3, r0
            m_mode = newMode;
    d822:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    d824:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    d828:	1ae0      	subs	r0, r4, r3
    d82a:	fab0 f080 	clz	r0, r0
    d82e:	0940      	lsrs	r0, r0, #5
    d830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d832:	6b03      	ldr	r3, [r0, #48]	; 0x30
    d834:	4e19      	ldr	r6, [pc, #100]	; (d89c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    d836:	f3bf 8f5b 	dmb	ish
    d83a:	43db      	mvns	r3, r3
    d83c:	e856 2f00 	ldrex	r2, [r6]
    d840:	401a      	ands	r2, r3
    d842:	e846 2100 	strex	r1, r2, [r6]
    d846:	2900      	cmp	r1, #0
    d848:	d1f8      	bne.n	d83c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    d84a:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    d84e:	3ef4      	subs	r6, #244	; 0xf4
    d850:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    d854:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    d856:	b11b      	cbz	r3, d860 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    d858:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    d85c:	2b00      	cmp	r3, #0
    d85e:	d0fb      	beq.n	d858 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    d860:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d862:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d866:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    d868:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d86c:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d86e:	f003 030f 	and.w	r3, r3, #15
    d872:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d876:	fa00 f303 	lsl.w	r3, r0, r3
    d87a:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    d87c:	4603      	mov	r3, r0
    return (m_mode == newMode);
    d87e:	1ae0      	subs	r0, r4, r3
    d880:	4329      	orrs	r1, r5
    d882:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d886:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    d88a:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d88e:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    d892:	0940      	lsrs	r0, r0, #5
    d894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    d896:	2001      	movs	r0, #1
}
    d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d89a:	bf00      	nop
    d89c:	20001ac4 	.word	0x20001ac4
    d8a0:	20001dfc 	.word	0x20001dfc

0000d8a4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    d8a4:	b570      	push	{r4, r5, r6, lr}
    d8a6:	4604      	mov	r4, r0
    d8a8:	4616      	mov	r6, r2
      m_analogValid(false) {}
    d8aa:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    d8ac:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    d8b0:	f000 fd12 	bl	e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    d8b4:	2300      	movs	r3, #0
    d8b6:	4a05      	ldr	r2, [pc, #20]	; (d8cc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    d8b8:	6326      	str	r6, [r4, #48]	; 0x30
    d8ba:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    d8be:	6022      	str	r2, [r4, #0]
    d8c0:	63a3      	str	r3, [r4, #56]	; 0x38
    d8c2:	63e3      	str	r3, [r4, #60]	; 0x3c
    d8c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    d8c8:	4620      	mov	r0, r4
    d8ca:	bd70      	pop	{r4, r5, r6, pc}
    d8cc:	000230b4 	.word	0x000230b4

0000d8d0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    d8d0:	7982      	ldrb	r2, [r0, #6]
    d8d2:	2a01      	cmp	r2, #1
    d8d4:	d004      	beq.n	d8e0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    d8d6:	2a02      	cmp	r2, #2
    d8d8:	d101      	bne.n	d8de <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    d8da:	f000 bc4d 	b.w	e178 <_ZN9ClearCore9DigitalIn7RefreshEv>
    d8de:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    d8e0:	4a17      	ldr	r2, [pc, #92]	; (d940 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    d8e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    d8e4:	6812      	ldr	r2, [r2, #0]
    d8e6:	4603      	mov	r3, r0
    d8e8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    d8ea:	4208      	tst	r0, r1
    d8ec:	d126      	bne.n	d93c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    d8ee:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    d8f2:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    d8f4:	b991      	cbnz	r1, d91c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    d8f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    d8f8:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    d8fc:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    d8fe:	2c07      	cmp	r4, #7
    d900:	b280      	uxth	r0, r0
    d902:	dc07      	bgt.n	d914 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    d904:	0400      	lsls	r0, r0, #16
    d906:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    d90a:	3408      	adds	r4, #8
        return (m_z >> 16);
    d90c:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    d90e:	6270      	str	r0, [r6, #36]	; 0x24
    d910:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    d914:	2201      	movs	r2, #1
    d916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    d91a:	e000      	b.n	d91e <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    d91c:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    d91e:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    d920:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d922:	4908      	ldr	r1, [pc, #32]	; (d944 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    d924:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    d928:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    d92c:	b2d8      	uxtb	r0, r3
    d92e:	440a      	add	r2, r1
    d930:	2802      	cmp	r0, #2
    d932:	bfd8      	it	le
    d934:	2300      	movle	r3, #0
    d936:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    d93a:	bc70      	pop	{r4, r5, r6}
    d93c:	4770      	bx	lr
    d93e:	bf00      	nop
    d940:	20001dfc 	.word	0x20001dfc
    d944:	200019d0 	.word	0x200019d0

0000d948 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    d948:	4b29      	ldr	r3, [pc, #164]	; (d9f0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    d94a:	b570      	push	{r4, r5, r6, lr}
    d94c:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    d94e:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    d950:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    d952:	4628      	mov	r0, r5
    d954:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    d958:	2301      	movs	r3, #1
    d95a:	2202      	movs	r2, #2
    d95c:	f7ff fc62 	bl	d224 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    d960:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d964:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    d966:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    d96a:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    d96c:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    d96e:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    d970:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    d972:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    d974:	4620      	mov	r0, r4
    d976:	f000 fb99 	bl	e0ac <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    d97a:	6823      	ldr	r3, [r4, #0]
    d97c:	4a1d      	ldr	r2, [pc, #116]	; (d9f4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    d97e:	685b      	ldr	r3, [r3, #4]
    d980:	4293      	cmp	r3, r2
    d982:	d130      	bne.n	d9e6 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    d984:	79a3      	ldrb	r3, [r4, #6]
    d986:	2b01      	cmp	r3, #1
    d988:	d02c      	beq.n	d9e4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d98a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d98c:	4a1a      	ldr	r2, [pc, #104]	; (d9f8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    d98e:	f3bf 8f5b 	dmb	ish
    d992:	43db      	mvns	r3, r3
    d994:	e852 1f00 	ldrex	r1, [r2]
    d998:	4019      	ands	r1, r3
    d99a:	e842 1000 	strex	r0, r1, [r2]
    d99e:	2800      	cmp	r0, #0
    d9a0:	d1f8      	bne.n	d994 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    d9a2:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    d9a6:	3af4      	subs	r2, #244	; 0xf4
    d9a8:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    d9ac:	2101      	movs	r1, #1
    d9ae:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    d9b0:	b11b      	cbz	r3, d9ba <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    d9b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d0fb      	beq.n	d9b2 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    d9ba:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d9bc:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d9c0:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    d9c2:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9c6:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d9ca:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9cc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d9d0:	408b      	lsls	r3, r1
    d9d2:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    d9d4:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9d6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d9da:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    d9de:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    d9e2:	bd70      	pop	{r4, r5, r6, pc}
    d9e4:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    d9e6:	4620      	mov	r0, r4
    d9e8:	2101      	movs	r1, #1
}
    d9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    d9ee:	4718      	bx	r3
    d9f0:	20001dfc 	.word	0x20001dfc
    d9f4:	0000d7a9 	.word	0x0000d7a9
    d9f8:	20001ac4 	.word	0x20001ac4

0000d9fc <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    d9fc:	7982      	ldrb	r2, [r0, #6]
    d9fe:	2a01      	cmp	r2, #1
    da00:	d005      	beq.n	da0e <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    da02:	2a02      	cmp	r2, #2
    da04:	d101      	bne.n	da0a <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    da06:	f000 bb3d 	b.w	e084 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    da0a:	2000      	movs	r0, #0
    da0c:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    da0e:	4b0b      	ldr	r3, [pc, #44]	; (da3c <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    da10:	b510      	push	{r4, lr}
    da12:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    da14:	6818      	ldr	r0, [r3, #0]
    da16:	f003 fd8d 	bl	11534 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    da1a:	b958      	cbnz	r0, da34 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    da1c:	4b08      	ldr	r3, [pc, #32]	; (da40 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    da1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    da20:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    da22:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    da24:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    da28:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    da2a:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    da2e:	4118      	asrs	r0, r3
    da30:	b200      	sxth	r0, r0
    da32:	bd10      	pop	{r4, pc}
                state = -1;
    da34:	f04f 30ff 	mov.w	r0, #4294967295
}
    da38:	bd10      	pop	{r4, pc}
    da3a:	bf00      	nop
    da3c:	20001f18 	.word	0x20001f18
    da40:	20001dfc 	.word	0x20001dfc

0000da44 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    da44:	7980      	ldrb	r0, [r0, #6]
    da46:	4770      	bx	lr

0000da48 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    da48:	2001      	movs	r0, #1
    da4a:	4770      	bx	lr

0000da4c <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    da4c:	7980      	ldrb	r0, [r0, #6]
    da4e:	2804      	cmp	r0, #4
    da50:	bf1d      	ittte	ne
    da52:	3806      	subne	r0, #6
    da54:	fab0 f080 	clzne	r0, r0
    da58:	0940      	lsrne	r0, r0, #5
    da5a:	2001      	moveq	r0, #1
    }
    da5c:	4770      	bx	lr
    da5e:	bf00      	nop

0000da60 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    da60:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    da62:	2300      	movs	r3, #0
    switch (m_mode) {
    da64:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    da66:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    da6a:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    da6e:	d02a      	beq.n	dac6 <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    da70:	2a06      	cmp	r2, #6
    da72:	d126      	bne.n	dac2 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    da74:	b28b      	uxth	r3, r1
    da76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    da7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    da7e:	bf28      	it	cs
    da80:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    da82:	b470      	push	{r4, r5, r6}
    da84:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    da86:	2b00      	cmp	r3, #0
    da88:	d040      	beq.n	db0c <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    da8a:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    da8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    da8e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    da92:	18d6      	adds	r6, r2, r3
    da94:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    da98:	42ac      	cmp	r4, r5
    da9a:	d008      	beq.n	daae <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    da9c:	2b00      	cmp	r3, #0
    da9e:	bf0c      	ite	eq
    daa0:	2440      	moveq	r4, #64	; 0x40
    daa2:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    daa4:	6913      	ldr	r3, [r2, #16]
    daa6:	4223      	tst	r3, r4
    daa8:	d1fc      	bne.n	daa4 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    daaa:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    daae:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dab0:	4b18      	ldr	r3, [pc, #96]	; (db14 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    dab2:	f002 020f 	and.w	r2, r2, #15
    dab6:	4413      	add	r3, r2
    dab8:	2001      	movs	r0, #1
    daba:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    dabe:	bc70      	pop	{r4, r5, r6}
    dac0:	4770      	bx	lr
    bool success = false;
    dac2:	4618      	mov	r0, r3
    dac4:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    dac6:	1c0b      	adds	r3, r1, #0
    dac8:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    dacc:	bf18      	it	ne
    dace:	2301      	movne	r3, #1
    dad0:	429a      	cmp	r2, r3
    dad2:	d004      	beq.n	dade <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dad4:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    dad6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dada:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    dade:	b121      	cbz	r1, daea <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    dae0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    dae4:	fab1 f181 	clz	r1, r1
    dae8:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    daea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    daee:	6b82      	ldr	r2, [r0, #56]	; 0x38
    daf0:	428b      	cmp	r3, r1
    daf2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    daf4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    daf8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dafc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    db00:	f04f 0001 	mov.w	r0, #1
    db04:	bf14      	ite	ne
    db06:	619a      	strne	r2, [r3, #24]
    db08:	615a      	streq	r2, [r3, #20]
    db0a:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    db0c:	43cd      	mvns	r5, r1
    db0e:	b2ed      	uxtb	r5, r5
    db10:	e7bc      	b.n	da8c <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    db12:	bf00      	nop
    db14:	200019d0 	.word	0x200019d0

0000db18 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    db18:	7983      	ldrb	r3, [r0, #6]
    db1a:	428b      	cmp	r3, r1
    db1c:	f000 80cb 	beq.w	dcb6 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    db20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    db24:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    db26:	b082      	sub	sp, #8
    db28:	4604      	mov	r4, r0
    db2a:	460d      	mov	r5, r1
    switch (newMode) {
    db2c:	f000 8087 	beq.w	dc3e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    db30:	2906      	cmp	r1, #6
    db32:	d008      	beq.n	db46 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    db34:	2902      	cmp	r1, #2
    db36:	d033      	beq.n	dba0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    db38:	1ae8      	subs	r0, r5, r3
    db3a:	fab0 f080 	clz	r0, r0
    db3e:	0940      	lsrs	r0, r0, #5
}
    db40:	b002      	add	sp, #8
    db42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    db46:	6803      	ldr	r3, [r0, #0]
    db48:	4a79      	ldr	r2, [pc, #484]	; (dd30 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    db4a:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    db4c:	71a1      	strb	r1, [r4, #6]
    db4e:	4293      	cmp	r3, r2
    db50:	f040 80b3 	bne.w	dcba <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    db54:	6c01      	ldr	r1, [r0, #64]	; 0x40
    db56:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    db5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    db5e:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    db60:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    db62:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    db66:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    db6a:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    db6e:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    db70:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    db74:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    db76:	429a      	cmp	r2, r3
    db78:	d008      	beq.n	db8c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    db7a:	2e00      	cmp	r6, #0
    db7c:	bf0c      	ite	eq
    db7e:	2640      	moveq	r6, #64	; 0x40
    db80:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    db82:	690a      	ldr	r2, [r1, #16]
    db84:	4232      	tst	r2, r6
    db86:	d1fc      	bne.n	db82 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    db88:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    db8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    db90:	4e68      	ldr	r6, [pc, #416]	; (dd34 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    db92:	f001 020f 	and.w	r2, r1, #15
    db96:	18b3      	adds	r3, r6, r2
    db98:	2000      	movs	r0, #0
    db9a:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    db9e:	e093      	b.n	dcc8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    dba0:	2300      	movs	r3, #0
    dba2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    dba6:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    dba8:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    dbac:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    dbb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dbb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    dbb4:	01db      	lsls	r3, r3, #7
    dbb6:	2a00      	cmp	r2, #0
    dbb8:	d177      	bne.n	dcaa <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    dbba:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    dbbe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dbc2:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dbc4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dbc8:	4e5a      	ldr	r6, [pc, #360]	; (dd34 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dbca:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dbcc:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dbd0:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dbd4:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dbd8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dbdc:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dbe0:	f04f 0e01 	mov.w	lr, #1
    dbe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dbe8:	443b      	add	r3, r7
    dbea:	fa0e f702 	lsl.w	r7, lr, r2
    dbee:	ea28 0707 	bic.w	r7, r8, r7
    dbf2:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dbf6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    dbfa:	ea6f 070c 	mvn.w	r7, ip
    dbfe:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc00:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dc04:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    dc08:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dc0c:	f36f 0200 	bfc	r2, #0, #1
    dc10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    dc14:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    dc18:	2b00      	cmp	r3, #0
    dc1a:	f000 8086 	beq.w	dd2a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    dc1e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dc22:	4845      	ldr	r0, [pc, #276]	; (dd38 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    dc24:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    dc28:	2200      	movs	r2, #0
    dc2a:	401f      	ands	r7, r3
    dc2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dc30:	6800      	ldr	r0, [r0, #0]
    dc32:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    dc36:	f003 fe71 	bl	1191c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    dc3a:	79a3      	ldrb	r3, [r4, #6]
    dc3c:	e77c      	b.n	db38 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dc3e:	220c      	movs	r2, #12
            State(m_outState);
    dc40:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dc42:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    dc46:	2600      	movs	r6, #0
            m_mode = newMode;
    dc48:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    dc4a:	695b      	ldr	r3, [r3, #20]
    dc4c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    dc50:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    dc54:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    dc56:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc58:	4936      	ldr	r1, [pc, #216]	; (dd34 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dc5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    dc5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dc5e:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc62:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dc66:	f04f 0e01 	mov.w	lr, #1
    dc6a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    dc6e:	fa0e f002 	lsl.w	r0, lr, r2
    dc72:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dc76:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dc7a:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dc7e:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc82:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dc86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dc8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    dc8e:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc92:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dc96:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    dc9a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dc9e:	f366 0200 	bfi	r2, r6, #0, #1
    dca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    dca6:	79a3      	ldrb	r3, [r4, #6]
            break;
    dca8:	e746      	b.n	db38 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    dcaa:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    dcae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dcb2:	6191      	str	r1, [r2, #24]
    dcb4:	e786      	b.n	dbc4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    dcb6:	2001      	movs	r0, #1
    dcb8:	4770      	bx	lr
            State(0);
    dcba:	2100      	movs	r1, #0
    dcbc:	4798      	blx	r3
    dcbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    dcc2:	4e1c      	ldr	r6, [pc, #112]	; (dd34 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    dcc4:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    dcc8:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    dccc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    dcce:	9301      	str	r3, [sp, #4]
    dcd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dcd2:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcd4:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    dcd8:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    dcdc:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    dce0:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dce2:	fa0c fe02 	lsl.w	lr, ip, r2
    dce6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dcea:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    dcee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcf2:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    dcf6:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcf8:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dcfc:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    dd00:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    dd04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dd08:	ea42 020c 	orr.w	r2, r2, ip
    dd0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    dd10:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    dd14:	2b00      	cmp	r3, #0
    dd16:	d090      	beq.n	dc3a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    dd18:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dd1c:	4806      	ldr	r0, [pc, #24]	; (dd38 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    dd1e:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    dd22:	2200      	movs	r2, #0
    dd24:	ea23 0707 	bic.w	r7, r3, r7
    dd28:	e780      	b.n	dc2c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    dd2a:	2302      	movs	r3, #2
    dd2c:	e704      	b.n	db38 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    dd2e:	bf00      	nop
    dd30:	0000da61 	.word	0x0000da61
    dd34:	200019d0 	.word	0x200019d0
    dd38:	20001f18 	.word	0x20001f18

0000dd3c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    dd3c:	b570      	push	{r4, r5, r6, lr}
    dd3e:	461d      	mov	r5, r3
    dd40:	4604      	mov	r4, r0
    dd42:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    dd46:	f000 fac7 	bl	e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    dd4a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    dd4e:	4a14      	ldr	r2, [pc, #80]	; (dda0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    dd50:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    dd52:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    dd54:	78aa      	ldrb	r2, [r5, #2]
    dd56:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    dd58:	2301      	movs	r3, #1
    dd5a:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    dd5c:	2200      	movs	r2, #0
    dd5e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    dd62:	63a3      	str	r3, [r4, #56]	; 0x38
    dd64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    dd68:	7aeb      	ldrb	r3, [r5, #11]
    dd6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dd6e:	230c      	movs	r3, #12
    dd70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    dd74:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    dd78:	64a2      	str	r2, [r4, #72]	; 0x48
    dd7a:	64e2      	str	r2, [r4, #76]	; 0x4c
    dd7c:	6522      	str	r2, [r4, #80]	; 0x50
    dd7e:	6562      	str	r2, [r4, #84]	; 0x54
    dd80:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    dd84:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    dd88:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    dd8c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    dd90:	7aaa      	ldrb	r2, [r5, #10]
    dd92:	4b04      	ldr	r3, [pc, #16]	; (dda4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    dd98:	6423      	str	r3, [r4, #64]	; 0x40
}
    dd9a:	4620      	mov	r0, r4
    dd9c:	bd70      	pop	{r4, r5, r6, pc}
    dd9e:	bf00      	nop
    dda0:	000230e4 	.word	0x000230e4
    dda4:	0002310c 	.word	0x0002310c

0000dda8 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddaa:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    ddac:	f000 f9e4 	bl	e178 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    ddb0:	79a3      	ldrb	r3, [r4, #6]
    ddb2:	2b04      	cmp	r3, #4
    ddb4:	d12d      	bne.n	de12 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    ddb6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    ddba:	bb5b      	cbnz	r3, de14 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    ddbc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    ddc0:	2b00      	cmp	r3, #0
    ddc2:	f040 809d 	bne.w	df00 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    ddc6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ddca:	220c      	movs	r2, #12
    ddcc:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    ddd0:	b19b      	cbz	r3, ddfa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ddd2:	4d75      	ldr	r5, [pc, #468]	; (dfa8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    ddd4:	68a7      	ldr	r7, [r4, #8]
    ddd6:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ddda:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    ddde:	4873      	ldr	r0, [pc, #460]	; (dfac <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    dde0:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    dde2:	2601      	movs	r6, #1
    dde4:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    dde8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ddec:	fa06 f101 	lsl.w	r1, r6, r1
    ddf0:	6800      	ldr	r0, [r0, #0]
    ddf2:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    ddf6:	f003 fd91 	bl	1191c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    ddfa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    ddfe:	b143      	cbz	r3, de12 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    de00:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    de04:	b303      	cbz	r3, de48 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    de06:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    de0a:	429a      	cmp	r2, r3
    de0c:	db1c      	blt.n	de48 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    de0e:	4293      	cmp	r3, r2
    de10:	d070      	beq.n	def4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    de12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    de14:	3b01      	subs	r3, #1
    de16:	b29b      	uxth	r3, r3
    de18:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    de1c:	2b00      	cmp	r3, #0
    de1e:	d1ec      	bne.n	ddfa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    de20:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    de24:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    de28:	429a      	cmp	r2, r3
    de2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    de2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    de2e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    de32:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    de36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    de3a:	bf14      	ite	ne
    de3c:	619a      	strne	r2, [r3, #24]
    de3e:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de40:	230c      	movs	r3, #12
    de42:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    de46:	e7d8      	b.n	ddfa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    de48:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    de4c:	bb5b      	cbnz	r3, dea6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    de4e:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    de52:	2b00      	cmp	r3, #0
    de54:	d14e      	bne.n	def4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    de56:	4a56      	ldr	r2, [pc, #344]	; (dfb0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    de58:	6d20      	ldr	r0, [r4, #80]	; 0x50
    de5a:	6813      	ldr	r3, [r2, #0]
    de5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    de5e:	1a1b      	subs	r3, r3, r0
    de60:	428b      	cmp	r3, r1
    de62:	d3d6      	bcc.n	de12 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    de64:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    de68:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    de6c:	6812      	ldr	r2, [r2, #0]
    de6e:	6522      	str	r2, [r4, #80]	; 0x50
    de70:	fab3 f383 	clz	r3, r3
    de74:	095b      	lsrs	r3, r3, #5
    de76:	428b      	cmp	r3, r1
    de78:	6b23      	ldr	r3, [r4, #48]	; 0x30
    de7a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    de7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    de82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de86:	f04f 020c 	mov.w	r2, #12
    de8a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    de8e:	f04f 0001 	mov.w	r0, #1
    de92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    de94:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    de98:	bf14      	ite	ne
    de9a:	619a      	strne	r2, [r3, #24]
    de9c:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    de9e:	2301      	movs	r3, #1
    dea0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    dea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    dea6:	4a42      	ldr	r2, [pc, #264]	; (dfb0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    dea8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    deaa:	6813      	ldr	r3, [r2, #0]
    deac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    deae:	1a1b      	subs	r3, r3, r0
    deb0:	428b      	cmp	r3, r1
    deb2:	d3ae      	bcc.n	de12 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    deb4:	6812      	ldr	r2, [r2, #0]
    deb6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    deba:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    debc:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    debe:	220c      	movs	r2, #12
                        m_pulseValue = false;
    dec0:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dec4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    dec8:	2b00      	cmp	r3, #0
    deca:	d15b      	bne.n	df84 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    decc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ded0:	01db      	lsls	r3, r3, #7
    ded2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ded6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    deda:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    dedc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    dee0:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    dee4:	3301      	adds	r3, #1
                        m_outState = false;
    dee6:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    dee8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    deec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    def0:	2a00      	cmp	r2, #0
    def2:	d08e      	beq.n	de12 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    def4:	2300      	movs	r3, #0
    def6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    defa:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    defe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    df00:	4620      	mov	r0, r4
    df02:	f000 fa0d 	bl	e320 <_ZN9ClearCore9DigitalIn7StateRTEv>
    df06:	2800      	cmp	r0, #0
    df08:	f47f af5d 	bne.w	ddc6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    df0c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    df10:	2b00      	cmp	r3, #0
    df12:	f43f af72 	beq.w	ddfa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    df16:	3b01      	subs	r3, #1
    df18:	b2db      	uxtb	r3, r3
    df1a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    df1e:	2b00      	cmp	r3, #0
    df20:	f47f af6b 	bne.w	ddfa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    df24:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    df28:	b9e6      	cbnz	r6, df64 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    df2a:	4a1f      	ldr	r2, [pc, #124]	; (dfa8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    df2c:	491f      	ldr	r1, [pc, #124]	; (dfac <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    df2e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    df32:	68a3      	ldr	r3, [r4, #8]
    df34:	680f      	ldr	r7, [r1, #0]
    df36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    df3a:	2501      	movs	r5, #1
    df3c:	4303      	orrs	r3, r0
    df3e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    df42:	fa05 f101 	lsl.w	r1, r5, r1
    df46:	4638      	mov	r0, r7
    df48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    df4c:	462a      	mov	r2, r5
    df4e:	f003 fce5 	bl	1191c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    df52:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    df56:	fa05 f202 	lsl.w	r2, r5, r2
    df5a:	4638      	mov	r0, r7
    df5c:	4631      	mov	r1, r6
    df5e:	b2d2      	uxtb	r2, r2
    df60:	f003 fb30 	bl	115c4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    df64:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    df68:	b9ab      	cbnz	r3, df96 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    df6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    df6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df6e:	01db      	lsls	r3, r3, #7
    df70:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    df74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    df78:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    df7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    df7e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    df82:	e73a      	b.n	ddfa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    df84:	6b23      	ldr	r3, [r4, #48]	; 0x30
    df86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df88:	01db      	lsls	r3, r3, #7
    df8a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    df8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    df92:	619a      	str	r2, [r3, #24]
    df94:	e7a2      	b.n	dedc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    df96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    df98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df9a:	01db      	lsls	r3, r3, #7
    df9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dfa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dfa4:	619a      	str	r2, [r3, #24]
    dfa6:	e7e8      	b.n	df7a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    dfa8:	200019d0 	.word	0x200019d0
    dfac:	20001f18 	.word	0x20001f18
    dfb0:	20001be0 	.word	0x20001be0

0000dfb4 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    dfb4:	7983      	ldrb	r3, [r0, #6]
    dfb6:	2b04      	cmp	r3, #4
    dfb8:	d014      	beq.n	dfe4 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    dfba:	2b06      	cmp	r3, #6
    dfbc:	d005      	beq.n	dfca <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    dfbe:	2b02      	cmp	r3, #2
    dfc0:	d001      	beq.n	dfc6 <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    dfc2:	2000      	movs	r0, #0
    dfc4:	4770      	bx	lr
            state = DigitalIn::State();
    dfc6:	f000 b85d 	b.w	e084 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    dfca:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dfcc:	b173      	cbz	r3, dfec <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    dfce:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    dfd2:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    dfd6:	4413      	add	r3, r2
    dfd8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    dfdc:	b929      	cbnz	r1, dfea <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    dfde:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    dfe2:	4770      	bx	lr
            state = m_outState;
    dfe4:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    dfe8:	4770      	bx	lr
    dfea:	4770      	bx	lr
    int16_t state = -1;
    dfec:	f04f 30ff 	mov.w	r0, #4294967295
}
    dff0:	4770      	bx	lr
    dff2:	bf00      	nop

0000dff4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    dff4:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    dff6:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    dff8:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    dffa:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    dffc:	4604      	mov	r4, r0
    m_outState = false;
    dffe:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e002:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e006:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e00a:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e00e:	d41a      	bmi.n	e046 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e010:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e012:	01d2      	lsls	r2, r2, #7
    e014:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e018:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e01c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e020:	2004      	movs	r0, #4
    e022:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e026:	f360 0203 	bfi	r2, r0, #0, #4
    e02a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e02e:	4620      	mov	r0, r4
    e030:	f000 f83c 	bl	e0ac <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e034:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e036:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e038:	01db      	lsls	r3, r3, #7
    e03a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e03e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e042:	609a      	str	r2, [r3, #8]
    e044:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e046:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e048:	01c0      	lsls	r0, r0, #7
    e04a:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e04e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e052:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e056:	2004      	movs	r0, #4
    e058:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e05c:	f360 1307 	bfi	r3, r0, #4, #4
    e060:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e064:	e7e3      	b.n	e02e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e066:	bf00      	nop

0000e068 <_ZN9ClearCore9Connector4ModeEv>:
    }
    e068:	7980      	ldrb	r0, [r0, #6]
    e06a:	4770      	bx	lr

0000e06c <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    e06c:	7980      	ldrb	r0, [r0, #6]
    e06e:	4770      	bx	lr

0000e070 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    e070:	2902      	cmp	r1, #2
            m_mode = newMode;
    e072:	bf06      	itte	eq
    e074:	7181      	strbeq	r1, [r0, #6]
            return true;
    e076:	2001      	moveq	r0, #1
            return false;
    e078:	2000      	movne	r0, #0
    }
    e07a:	4770      	bx	lr

0000e07c <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    e07c:	2000      	movs	r0, #0
    e07e:	4770      	bx	lr

0000e080 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    e080:	2000      	movs	r0, #0
    e082:	4770      	bx	lr

0000e084 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    e084:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e086:	b113      	cbz	r3, e08e <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    e088:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    e08c:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e08e:	4b06      	ldr	r3, [pc, #24]	; (e0a8 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    e090:	68c1      	ldr	r1, [r0, #12]
    e092:	681a      	ldr	r2, [r3, #0]
    e094:	6943      	ldr	r3, [r0, #20]
    e096:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e09a:	6812      	ldr	r2, [r2, #0]
    e09c:	421a      	tst	r2, r3
    e09e:	bf0c      	ite	eq
    e0a0:	2001      	moveq	r0, #1
    e0a2:	2000      	movne	r0, #0
    e0a4:	4770      	bx	lr
    e0a6:	bf00      	nop
    e0a8:	20001f08 	.word	0x20001f08

0000e0ac <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    e0ac:	4b2e      	ldr	r3, [pc, #184]	; (e168 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    e0ae:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    e0b0:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e0b4:	68c3      	ldr	r3, [r0, #12]
    e0b6:	6904      	ldr	r4, [r0, #16]
    e0b8:	01da      	lsls	r2, r3, #7
    e0ba:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    e0be:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e0c0:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    e0c4:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    e0c8:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    e0ca:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e0ce:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    e0d2:	d034      	beq.n	e13e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    e0d4:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    e0d8:	f366 1707 	bfi	r7, r6, #4, #4
    e0dc:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e0e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e0e4:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e0e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e0ea:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e0ec:	2d00      	cmp	r5, #0
    e0ee:	d134      	bne.n	e15a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    e0f0:	2402      	movs	r4, #2
    e0f2:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e0f6:	4a1d      	ldr	r2, [pc, #116]	; (e16c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e0f8:	6884      	ldr	r4, [r0, #8]
    e0fa:	6812      	ldr	r2, [r2, #0]
    e0fc:	4e1c      	ldr	r6, [pc, #112]	; (e170 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    e0fe:	3306      	adds	r3, #6
    e100:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e102:	f1a3 050c 	sub.w	r5, r3, #12
    e106:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e108:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e10a:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e10c:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e10e:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e110:	6242      	str	r2, [r0, #36]	; 0x24
    e112:	43e4      	mvns	r4, r4
    e114:	f3bf 8f5b 	dmb	ish
    e118:	e856 3f00 	ldrex	r3, [r6]
    e11c:	4023      	ands	r3, r4
    e11e:	e846 3200 	strex	r2, r3, [r6]
    e122:	2a00      	cmp	r2, #0
    e124:	d1f8      	bne.n	e118 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    e126:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    e12a:	6803      	ldr	r3, [r0, #0]
    e12c:	4a11      	ldr	r2, [pc, #68]	; (e174 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    e12e:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    e130:	8081      	strh	r1, [r0, #4]
    e132:	4293      	cmp	r3, r2
    e134:	d115      	bne.n	e162 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    e136:	2302      	movs	r3, #2
    e138:	7183      	strb	r3, [r0, #6]
}
    e13a:	bcf0      	pop	{r4, r5, r6, r7}
    e13c:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e13e:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    e142:	f367 0603 	bfi	r6, r7, #0, #4
    e146:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e14a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e14e:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e150:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e154:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e156:	2d00      	cmp	r5, #0
    e158:	d0ca      	beq.n	e0f0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e15a:	2403      	movs	r4, #3
    e15c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    e160:	e7c9      	b.n	e0f6 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    e162:	2102      	movs	r1, #2
}
    e164:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    e166:	4718      	bx	r3
    e168:	00010003 	.word	0x00010003
    e16c:	20001f08 	.word	0x20001f08
    e170:	20001ac4 	.word	0x20001ac4
    e174:	0000e071 	.word	0x0000e071

0000e178 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    e178:	69c2      	ldr	r2, [r0, #28]
    e17a:	6943      	ldr	r3, [r0, #20]
    e17c:	6812      	ldr	r2, [r2, #0]
    e17e:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    e180:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    e182:	d005      	beq.n	e190 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    e184:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    e186:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    e188:	2a00      	cmp	r2, #0
    e18a:	d039      	beq.n	e200 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    e18c:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    e190:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e192:	2a00      	cmp	r2, #0
    e194:	d0fa      	beq.n	e18c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    e196:	3a01      	subs	r2, #1
    e198:	b292      	uxth	r2, r2
    e19a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e19c:	2a00      	cmp	r2, #0
    e19e:	d1f5      	bne.n	e18c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e1a0:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e1a2:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e1a4:	6809      	ldr	r1, [r1, #0]
    e1a6:	400b      	ands	r3, r1
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	bf0c      	ite	eq
    e1ac:	2301      	moveq	r3, #1
    e1ae:	2300      	movne	r3, #0
    e1b0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e1b4:	d053      	beq.n	e25e <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e1b6:	f3bf 8f5b 	dmb	ish
    e1ba:	4b41      	ldr	r3, [pc, #260]	; (e2c0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e1bc:	43d2      	mvns	r2, r2
    e1be:	e853 1f00 	ldrex	r1, [r3]
    e1c2:	4011      	ands	r1, r2
    e1c4:	e843 1e00 	strex	lr, r1, [r3]
    e1c8:	f1be 0f00 	cmp.w	lr, #0
    e1cc:	d1f7      	bne.n	e1be <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    e1ce:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    e1d2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e1d6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e1da:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e1dc:	2b00      	cmp	r3, #0
    e1de:	d14a      	bne.n	e276 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e1e0:	f3bf 8f5b 	dmb	ish
    e1e4:	2301      	movs	r3, #1
    e1e6:	408b      	lsls	r3, r1
    e1e8:	43db      	mvns	r3, r3
    e1ea:	e852 1f00 	ldrex	r1, [r2]
    e1ee:	4019      	ands	r1, r3
    e1f0:	e842 1000 	strex	r0, r1, [r2]
    e1f4:	2800      	cmp	r0, #0
    e1f6:	d1f8      	bne.n	e1ea <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    e1f8:	f3bf 8f5b 	dmb	ish
}
    e1fc:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e200:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e202:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e204:	6809      	ldr	r1, [r1, #0]
    e206:	400b      	ands	r3, r1
    e208:	2b00      	cmp	r3, #0
    e20a:	bf0c      	ite	eq
    e20c:	2301      	moveq	r3, #1
    e20e:	2300      	movne	r3, #0
    e210:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e214:	d047      	beq.n	e2a6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e216:	f3bf 8f5b 	dmb	ish
    e21a:	4b29      	ldr	r3, [pc, #164]	; (e2c0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e21c:	43d2      	mvns	r2, r2
    e21e:	e853 1f00 	ldrex	r1, [r3]
    e222:	4011      	ands	r1, r2
    e224:	e843 1e00 	strex	lr, r1, [r3]
    e228:	f1be 0f00 	cmp.w	lr, #0
    e22c:	d1f7      	bne.n	e21e <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    e22e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e232:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e236:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e23a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e23c:	bb3b      	cbnz	r3, e28e <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e23e:	f3bf 8f5b 	dmb	ish
    e242:	2301      	movs	r3, #1
    e244:	408b      	lsls	r3, r1
    e246:	43db      	mvns	r3, r3
    e248:	e852 1f00 	ldrex	r1, [r2]
    e24c:	4019      	ands	r1, r3
    e24e:	e842 1000 	strex	r0, r1, [r2]
    e252:	2800      	cmp	r0, #0
    e254:	d1f8      	bne.n	e248 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    e256:	f3bf 8f5b 	dmb	ish
}
    e25a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e25e:	4b18      	ldr	r3, [pc, #96]	; (e2c0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e260:	f3bf 8f5b 	dmb	ish
    e264:	e853 1f00 	ldrex	r1, [r3]
    e268:	4311      	orrs	r1, r2
    e26a:	e843 1e00 	strex	lr, r1, [r3]
    e26e:	f1be 0f00 	cmp.w	lr, #0
    e272:	d0ac      	beq.n	e1ce <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    e274:	e7f6      	b.n	e264 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e276:	2301      	movs	r3, #1
    e278:	408b      	lsls	r3, r1
    e27a:	f3bf 8f5b 	dmb	ish
    e27e:	e852 1f00 	ldrex	r1, [r2]
    e282:	4319      	orrs	r1, r3
    e284:	e842 1000 	strex	r0, r1, [r2]
    e288:	2800      	cmp	r0, #0
    e28a:	d0e4      	beq.n	e256 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e28c:	e7f7      	b.n	e27e <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    e28e:	2301      	movs	r3, #1
    e290:	408b      	lsls	r3, r1
    e292:	f3bf 8f5b 	dmb	ish
    e296:	e852 1f00 	ldrex	r1, [r2]
    e29a:	4319      	orrs	r1, r3
    e29c:	e842 1000 	strex	r0, r1, [r2]
    e2a0:	2800      	cmp	r0, #0
    e2a2:	d0d8      	beq.n	e256 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e2a4:	e7f7      	b.n	e296 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    e2a6:	4b06      	ldr	r3, [pc, #24]	; (e2c0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e2a8:	f3bf 8f5b 	dmb	ish
    e2ac:	e853 1f00 	ldrex	r1, [r3]
    e2b0:	4311      	orrs	r1, r2
    e2b2:	e843 1e00 	strex	lr, r1, [r3]
    e2b6:	f1be 0f00 	cmp.w	lr, #0
    e2ba:	d0b8      	beq.n	e22e <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    e2bc:	e7f6      	b.n	e2ac <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    e2be:	bf00      	nop
    e2c0:	20001ac4 	.word	0x20001ac4

0000e2c4 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    e2c4:	4a03      	ldr	r2, [pc, #12]	; (e2d4 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    e2c6:	6002      	str	r2, [r0, #0]
    e2c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e2cc:	2200      	movs	r2, #0
    e2ce:	8081      	strh	r1, [r0, #4]
    e2d0:	7182      	strb	r2, [r0, #6]
    e2d2:	4770      	bx	lr
    e2d4:	00023134 	.word	0x00023134

0000e2d8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    e2d8:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    e2da:	f992 4001 	ldrsb.w	r4, [r2, #1]
    e2de:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    e2e0:	4d0d      	ldr	r5, [pc, #52]	; (e318 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    e2e2:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    e2e4:	2400      	movs	r4, #0
    e2e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e2ea:	8086      	strh	r6, [r0, #4]
    e2ec:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    e2ee:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    e2f0:	7895      	ldrb	r5, [r2, #2]
    e2f2:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    e2f4:	2101      	movs	r1, #1
    e2f6:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    e2f8:	6141      	str	r1, [r0, #20]
    e2fa:	78d1      	ldrb	r1, [r2, #3]
    e2fc:	7601      	strb	r1, [r0, #24]
    e2fe:	7911      	ldrb	r1, [r2, #4]
    e300:	4a06      	ldr	r2, [pc, #24]	; (e31c <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    e302:	61c4      	str	r4, [r0, #28]
    e304:	6204      	str	r4, [r0, #32]
    e306:	6244      	str	r4, [r0, #36]	; 0x24
    e308:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    e30c:	7641      	strb	r1, [r0, #25]
    e30e:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    e312:	bc70      	pop	{r4, r5, r6}
    e314:	4770      	bx	lr
    e316:	bf00      	nop
    e318:	00023164 	.word	0x00023164
    e31c:	00010003 	.word	0x00010003

0000e320 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e320:	4b05      	ldr	r3, [pc, #20]	; (e338 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    e322:	68c1      	ldr	r1, [r0, #12]
    e324:	681a      	ldr	r2, [r3, #0]
    e326:	6943      	ldr	r3, [r0, #20]
    e328:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e32c:	6812      	ldr	r2, [r2, #0]
    e32e:	421a      	tst	r2, r3
}
    e330:	bf0c      	ite	eq
    e332:	2001      	moveq	r0, #1
    e334:	2000      	movne	r0, #0
    e336:	4770      	bx	lr
    e338:	20001f08 	.word	0x20001f08

0000e33c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e33c:	6a03      	ldr	r3, [r0, #32]
    e33e:	6941      	ldr	r1, [r0, #20]
    e340:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e342:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e344:	400b      	ands	r3, r1
    e346:	2b00      	cmp	r3, #0
    e348:	bf0c      	ite	eq
    e34a:	2301      	moveq	r3, #1
    e34c:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    e34e:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e350:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e354:	d023      	beq.n	e39e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e356:	f3bf 8f5b 	dmb	ish
    e35a:	4b1e      	ldr	r3, [pc, #120]	; (e3d4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e35c:	43d2      	mvns	r2, r2
    e35e:	e853 1f00 	ldrex	r1, [r3]
    e362:	4011      	ands	r1, r2
    e364:	e843 1e00 	strex	lr, r1, [r3]
    e368:	f1be 0f00 	cmp.w	lr, #0
    e36c:	d1f7      	bne.n	e35e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    e36e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e372:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e376:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e37a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e37c:	b9db      	cbnz	r3, e3b6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e37e:	f3bf 8f5b 	dmb	ish
    e382:	2301      	movs	r3, #1
    e384:	408b      	lsls	r3, r1
    e386:	43db      	mvns	r3, r3
    e388:	e852 1f00 	ldrex	r1, [r2]
    e38c:	4019      	ands	r1, r3
    e38e:	e842 1000 	strex	r0, r1, [r2]
    e392:	2800      	cmp	r0, #0
    e394:	d1f8      	bne.n	e388 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    e396:	f3bf 8f5b 	dmb	ish
    e39a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e39e:	4b0d      	ldr	r3, [pc, #52]	; (e3d4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e3a0:	f3bf 8f5b 	dmb	ish
    e3a4:	e853 1f00 	ldrex	r1, [r3]
    e3a8:	4311      	orrs	r1, r2
    e3aa:	e843 1e00 	strex	lr, r1, [r3]
    e3ae:	f1be 0f00 	cmp.w	lr, #0
    e3b2:	d0dc      	beq.n	e36e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    e3b4:	e7f6      	b.n	e3a4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e3b6:	2301      	movs	r3, #1
    e3b8:	408b      	lsls	r3, r1
    e3ba:	f3bf 8f5b 	dmb	ish
    e3be:	e852 1f00 	ldrex	r1, [r2]
    e3c2:	4319      	orrs	r1, r3
    e3c4:	e842 1000 	strex	r0, r1, [r2]
    e3c8:	2800      	cmp	r0, #0
    e3ca:	d1f8      	bne.n	e3be <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e3cc:	f3bf 8f5b 	dmb	ish
    e3d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3d4:	20001ac4 	.word	0x20001ac4

0000e3d8 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e3d8:	7980      	ldrb	r0, [r0, #6]
    e3da:	4770      	bx	lr

0000e3dc <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e3dc:	2005      	movs	r0, #5
    e3de:	4770      	bx	lr

0000e3e0 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e3e0:	7980      	ldrb	r0, [r0, #6]
    e3e2:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e3e4:	2804      	cmp	r0, #4
    e3e6:	bf8c      	ite	hi
    e3e8:	2000      	movhi	r0, #0
    e3ea:	2001      	movls	r0, #1
    e3ec:	4770      	bx	lr
    e3ee:	bf00      	nop

0000e3f0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3f2:	b083      	sub	sp, #12
    e3f4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e3f8:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e3fa:	4604      	mov	r4, r0
    e3fc:	9d08      	ldr	r5, [sp, #32]
    e3fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e400:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e404:	f7ff fc9a 	bl	dd3c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e408:	2300      	movs	r3, #0
    e40a:	490f      	ldr	r1, [pc, #60]	; (e448 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e40c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e410:	f640 42cc 	movw	r2, #3276	; 0xccc
    e414:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e418:	6663      	str	r3, [r4, #100]	; 0x64
    e41a:	66a3      	str	r3, [r4, #104]	; 0x68
    e41c:	66e3      	str	r3, [r4, #108]	; 0x6c
    e41e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e422:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e426:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e42a:	6765      	str	r5, [r4, #116]	; 0x74
    e42c:	67a6      	str	r6, [r4, #120]	; 0x78
    e42e:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e432:	6021      	str	r1, [r4, #0]
    e434:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e438:	7b2a      	ldrb	r2, [r5, #12]
    e43a:	4b04      	ldr	r3, [pc, #16]	; (e44c <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e440:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e442:	4620      	mov	r0, r4
    e444:	b003      	add	sp, #12
    e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e448:	00023194 	.word	0x00023194
    e44c:	000231bc 	.word	0x000231bc

0000e450 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e450:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e452:	6803      	ldr	r3, [r0, #0]
    e454:	4a12      	ldr	r2, [pc, #72]	; (e4a0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e456:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e458:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e45c:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e45e:	b082      	sub	sp, #8
    e460:	4604      	mov	r4, r0
    e462:	d115      	bne.n	e490 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e464:	7980      	ldrb	r0, [r0, #6]
    e466:	2808      	cmp	r0, #8
    e468:	d805      	bhi.n	e476 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e46a:	2301      	movs	r3, #1
    e46c:	fa03 f000 	lsl.w	r0, r3, r0
    e470:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e474:	d101      	bne.n	e47a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e476:	b002      	add	sp, #8
    e478:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e47a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e47c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e47e:	01db      	lsls	r3, r3, #7
    e480:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e484:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e488:	b131      	cbz	r1, e498 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e48a:	615a      	str	r2, [r3, #20]
}
    e48c:	b002      	add	sp, #8
    e48e:	bd10      	pop	{r4, pc}
    e490:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e492:	4798      	blx	r3
    e494:	9901      	ldr	r1, [sp, #4]
    e496:	e7e6      	b.n	e466 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e498:	619a      	str	r2, [r3, #24]
}
    e49a:	b002      	add	sp, #8
    e49c:	bd10      	pop	{r4, pc}
    e49e:	bf00      	nop
    e4a0:	0000e3d9 	.word	0x0000e3d9

0000e4a4 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e4a4:	7982      	ldrb	r2, [r0, #6]
    e4a6:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e4a8:	4601      	mov	r1, r0
    e4aa:	d808      	bhi.n	e4be <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e4ac:	2301      	movs	r3, #1
    e4ae:	4093      	lsls	r3, r2
    e4b0:	f013 0f54 	tst.w	r3, #84	; 0x54
    e4b4:	d112      	bne.n	e4dc <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e4b6:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e4ba:	d102      	bne.n	e4c2 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e4bc:	4770      	bx	lr
            state = 0;
    e4be:	2000      	movs	r0, #0
}
    e4c0:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e4c2:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e4c4:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e4c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e4ca:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e4ce:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e4d2:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e4d6:	f340 004f 	sbfx	r0, r0, #1, #16
    e4da:	4770      	bx	lr
            state = DigitalInOut::State();
    e4dc:	f7ff bd6a 	b.w	dfb4 <_ZN9ClearCore12DigitalInOut5StateEv>

0000e4e0 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e4e0:	b510      	push	{r4, lr}
    switch (m_mode) {
    e4e2:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e4e4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e4e6:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e4e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e4ea:	2b05      	cmp	r3, #5
    e4ec:	d82a      	bhi.n	e544 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e4ee:	e8df f003 	tbb	[pc, r3]
    e4f2:	2925      	.short	0x2925
    e4f4:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    e4f8:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e4fa:	4b13      	ldr	r3, [pc, #76]	; (e548 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    e4fc:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    e500:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e504:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e506:	bf1b      	ittet	ne
    e508:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    e50c:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    e510:	20ff      	moveq	r0, #255	; 0xff
    e512:	11c0      	asrne	r0, r0, #7
    e514:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e518:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e51c:	4b0b      	ldr	r3, [pc, #44]	; (e54c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    e51e:	fb01 f102 	mul.w	r1, r1, r2
    e522:	fb83 0301 	smull	r0, r3, r3, r1
    e526:	440b      	add	r3, r1
    e528:	139b      	asrs	r3, r3, #14
    e52a:	17c9      	asrs	r1, r1, #31
    e52c:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e52e:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e530:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e532:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e534:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e536:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    e538:	2001      	movs	r0, #1
            break;
    e53a:	bd10      	pop	{r4, pc}
}
    e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    e540:	f7ff ba8e 	b.w	da60 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e544:	2000      	movs	r0, #0
}
    e546:	bd10      	pop	{r4, pc}
    e548:	200019d0 	.word	0x200019d0
    e54c:	80010003 	.word	0x80010003

0000e550 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e550:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    e554:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e558:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    e55c:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e55e:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e560:	b302      	cbz	r2, e5a4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e562:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    e566:	2a04      	cmp	r2, #4
    e568:	d01c      	beq.n	e5a4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e56a:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    e56c:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    e570:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    e572:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    e576:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    e578:	f004 fdee 	bl	13158 <arm_sin_q15>
    e57c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e580:	4b41      	ldr	r3, [pc, #260]	; (e688 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e582:	fb11 f100 	smulbb	r1, r1, r0
    e586:	429d      	cmp	r5, r3
    e588:	f341 31cf 	sbfx	r1, r1, #15, #16
    e58c:	d177      	bne.n	e67e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    e58e:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e590:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    e592:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e594:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    e596:	2b05      	cmp	r3, #5
    e598:	d81e      	bhi.n	e5d8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e59a:	e8df f003 	tbb	[pc, r3]
    e59e:	1d6b      	.short	0x1d6b
    e5a0:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e5a4:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e5a6:	2a07      	cmp	r2, #7
    e5a8:	d017      	beq.n	e5da <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e5aa:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e5ac:	4c36      	ldr	r4, [pc, #216]	; (e688 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e5ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e5b0:	f043 0301 	orr.w	r3, r3, #1
    e5b4:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e5b6:	6803      	ldr	r3, [r0, #0]
    e5b8:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e5ba:	2500      	movs	r5, #0
    e5bc:	42a3      	cmp	r3, r4
    e5be:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    e5c2:	d132      	bne.n	e62a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e5c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    e5c6:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e5c8:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    e5ca:	2a04      	cmp	r2, #4
    e5cc:	d804      	bhi.n	e5d8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e5ce:	e8df f002 	tbb	[pc, r2]
    e5d2:	0327      	.short	0x0327
    e5d4:	1b27      	.short	0x1b27
    e5d6:	27          	.byte	0x27
    e5d7:	00          	.byte	0x00
    e5d8:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e5da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    e5de:	4293      	cmp	r3, r2
    e5e0:	ddc3      	ble.n	e56a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e5e2:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e5e4:	4a28      	ldr	r2, [pc, #160]	; (e688 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e5e6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e5e8:	f043 0301 	orr.w	r3, r3, #1
    e5ec:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e5ee:	6803      	ldr	r3, [r0, #0]
    e5f0:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e5f2:	2400      	movs	r4, #0
    e5f4:	4293      	cmp	r3, r2
    e5f6:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    e5fa:	d116      	bne.n	e62a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e5fe:	085b      	lsrs	r3, r3, #1
    e600:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e602:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e604:	674b      	str	r3, [r1, #116]	; 0x74
    e606:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    e608:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e60a:	4a20      	ldr	r2, [pc, #128]	; (e68c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e60c:	f000 000f 	and.w	r0, r0, #15
    e610:	4402      	add	r2, r0
    e612:	b29b      	uxth	r3, r3
    e614:	2000      	movs	r0, #0
    e616:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e61a:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e61c:	674b      	str	r3, [r1, #116]	; 0x74
    e61e:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e620:	2100      	movs	r1, #0
}
    e622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e626:	f7ff ba1b 	b.w	da60 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    e62a:	2100      	movs	r1, #0
}
    e62c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    e630:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    e632:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e634:	4b15      	ldr	r3, [pc, #84]	; (e68c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e636:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    e63a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e63e:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e640:	bf1b      	ittet	ne
    e642:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    e646:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    e64a:	24ff      	moveq	r4, #255	; 0xff
    e64c:	11e4      	asrne	r4, r4, #7
    e64e:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e652:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e656:	4b0e      	ldr	r3, [pc, #56]	; (e690 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    e658:	fb01 f102 	mul.w	r1, r1, r2
    e65c:	fb83 4301 	smull	r4, r3, r3, r1
    e660:	440b      	add	r3, r1
    e662:	139b      	asrs	r3, r3, #14
    e664:	17c9      	asrs	r1, r1, #31
    e666:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e668:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e66a:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e66c:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e66e:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e670:	6741      	str	r1, [r0, #116]	; 0x74
    e672:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e674:	4620      	mov	r0, r4
}
    e676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e67a:	f7ff b9f1 	b.w	da60 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    e67e:	4620      	mov	r0, r4
    e680:	462b      	mov	r3, r5
}
    e682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    e686:	4718      	bx	r3
    e688:	0000e4e1 	.word	0x0000e4e1
    e68c:	200019d0 	.word	0x200019d0
    e690:	80010003 	.word	0x80010003

0000e694 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    e694:	7983      	ldrb	r3, [r0, #6]
    e696:	3b02      	subs	r3, #2
    e698:	2b05      	cmp	r3, #5
    e69a:	d804      	bhi.n	e6a6 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    e69c:	e8df f003 	tbb	[pc, r3]
    e6a0:	03040304 	.word	0x03040304
    e6a4:	0604      	.short	0x0604
    e6a6:	4770      	bx	lr
            DigitalInOut::Refresh();
    e6a8:	f7ff bb7e 	b.w	dda8 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    e6ac:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    e6b0:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    e6b2:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    e6b4:	d02c      	beq.n	e710 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    e6b6:	2b04      	cmp	r3, #4
    e6b8:	d003      	beq.n	e6c2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    e6ba:	2b02      	cmp	r3, #2
    e6bc:	d04c      	beq.n	e758 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    e6be:	bcf0      	pop	{r4, r5, r6, r7}
    e6c0:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    e6c2:	4937      	ldr	r1, [pc, #220]	; (e7a0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e6c4:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e6c6:	680b      	ldr	r3, [r1, #0]
    e6c8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    e6ca:	1b1b      	subs	r3, r3, r4
    e6cc:	4293      	cmp	r3, r2
    e6ce:	d9f6      	bls.n	e6be <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    e6d0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    e6d2:	2303      	movs	r3, #3
    e6d4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    e6d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e6da:	4b32      	ldr	r3, [pc, #200]	; (e7a4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    e6dc:	f042 0201 	orr.w	r2, r2, #1
    e6e0:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    e6e2:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    e6e4:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e6e6:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e6e8:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e6ec:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    e6f0:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e6f2:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e6f6:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e6f8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e6fc:	408a      	lsls	r2, r1
    e6fe:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    e700:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e702:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e706:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e70a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    e70e:	e7d6      	b.n	e6be <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    e710:	4923      	ldr	r1, [pc, #140]	; (e7a0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e712:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e714:	680b      	ldr	r3, [r1, #0]
    e716:	6e82      	ldr	r2, [r0, #104]	; 0x68
    e718:	1b1b      	subs	r3, r3, r4
    e71a:	4293      	cmp	r3, r2
    e71c:	d9cf      	bls.n	e6be <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e71e:	4a21      	ldr	r2, [pc, #132]	; (e7a4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    e720:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    e722:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e724:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e726:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    e72a:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    e72e:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e730:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e734:	2101      	movs	r1, #1
    e736:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e738:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e73c:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    e740:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    e742:	ea24 0406 	bic.w	r4, r4, r6
    e746:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e74a:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e74e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e752:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    e756:	e7b2      	b.n	e6be <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    e758:	4b11      	ldr	r3, [pc, #68]	; (e7a0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e75a:	6e41      	ldr	r1, [r0, #100]	; 0x64
    e75c:	681b      	ldr	r3, [r3, #0]
    e75e:	6e82      	ldr	r2, [r0, #104]	; 0x68
    e760:	1a5b      	subs	r3, r3, r1
    e762:	4293      	cmp	r3, r2
    e764:	d9ab      	bls.n	e6be <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e766:	4a0f      	ldr	r2, [pc, #60]	; (e7a4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    e768:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e76a:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e76c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e770:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e774:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e778:	2501      	movs	r5, #1
    e77a:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e77c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e780:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    e784:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    e788:	2500      	movs	r5, #0
    e78a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    e78e:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e792:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e796:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e79a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    e79e:	e78e      	b.n	e6be <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    e7a0:	20001be0 	.word	0x20001be0
    e7a4:	200019d0 	.word	0x200019d0

0000e7a8 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    e7a8:	b570      	push	{r4, r5, r6, lr}
    e7aa:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    e7ac:	f7ff fc22 	bl	dff4 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    e7b0:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    e7b2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    e7b4:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    e7b8:	6813      	ldr	r3, [r2, #0]
    e7ba:	f043 0301 	orr.w	r3, r3, #1
    e7be:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    e7c0:	6893      	ldr	r3, [r2, #8]
    e7c2:	f013 0301 	ands.w	r3, r3, #1
    e7c6:	d1fb      	bne.n	e7c0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    e7c8:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    e7ca:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    e7cc:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    e7ce:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    e7d0:	4b24      	ldr	r3, [pc, #144]	; (e864 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    e7d2:	4e25      	ldr	r6, [pc, #148]	; (e868 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    e7d4:	4825      	ldr	r0, [pc, #148]	; (e86c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    e7d6:	f045 0502 	orr.w	r5, r5, #2
    e7da:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    e7dc:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    e7de:	f045 0505 	orr.w	r5, r5, #5
    e7e2:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    e7e4:	6a55      	ldr	r5, [r2, #36]	; 0x24
    e7e6:	430d      	orrs	r5, r1
    e7e8:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    e7ea:	681b      	ldr	r3, [r3, #0]
    e7ec:	fba6 5303 	umull	r5, r3, r6, r3
    e7f0:	0bdb      	lsrs	r3, r3, #15
    e7f2:	3b01      	subs	r3, #1
    e7f4:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    e7f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
    e7f8:	6453      	str	r3, [r2, #68]	; 0x44
    e7fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
    e7fc:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    e7fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
    e800:	f993 2001 	ldrsb.w	r2, [r3, #1]
    e804:	789d      	ldrb	r5, [r3, #2]
    e806:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    e80a:	fa01 f605 	lsl.w	r6, r1, r5
    e80e:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    e810:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    e812:	f994 3001 	ldrsb.w	r3, [r4, #1]
    e816:	78a4      	ldrb	r4, [r4, #2]
    e818:	01db      	lsls	r3, r3, #7
    e81a:	4418      	add	r0, r3
    e81c:	40a1      	lsls	r1, r4
    e81e:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    e820:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e822:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    e826:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e828:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    e82c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e830:	2005      	movs	r0, #5
    e832:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    e834:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e838:	bf4c      	ite	mi
    e83a:	f360 1107 	bfimi	r1, r0, #4, #4
    e83e:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    e842:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    e846:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    e84a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e84e:	2105      	movs	r1, #5
    e850:	07e0      	lsls	r0, r4, #31
    e852:	bf4c      	ite	mi
    e854:	f361 1207 	bfimi	r2, r1, #4, #4
    e858:	f361 0203 	bfipl	r2, r1, #0, #4
    e85c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    e860:	bd70      	pop	{r4, r5, r6, pc}
    e862:	bf00      	nop
    e864:	200000e0 	.word	0x200000e0
    e868:	be37c63b 	.word	0xbe37c63b
    e86c:	41008000 	.word	0x41008000

0000e870 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    e870:	7982      	ldrb	r2, [r0, #6]
    e872:	428a      	cmp	r2, r1
    e874:	d07a      	beq.n	e96c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    e876:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e87a:	460d      	mov	r5, r1
    e87c:	d867      	bhi.n	e94e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    e87e:	2201      	movs	r2, #1
    e880:	fa02 f301 	lsl.w	r3, r2, r1
    e884:	f013 0f54 	tst.w	r3, #84	; 0x54
    e888:	4604      	mov	r4, r0
    e88a:	d171      	bne.n	e970 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    e88c:	f413 7f90 	tst.w	r3, #288	; 0x120
    e890:	d05f      	beq.n	e952 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    e892:	7901      	ldrb	r1, [r0, #4]
    e894:	4a5d      	ldr	r2, [pc, #372]	; (ea0c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    e896:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    e89a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    e89e:	2b00      	cmp	r3, #0
    e8a0:	f040 809e 	bne.w	e9e0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    e8a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    e8a8:	01db      	lsls	r3, r3, #7
    e8aa:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    e8ae:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    e8b2:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e8b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e8b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e8ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e8be:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8c0:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    e8c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    e8c8:	f36f 0000 	bfc	r0, #0, #1
    e8cc:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    e8d0:	68a3      	ldr	r3, [r4, #8]
    e8d2:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8d6:	2d05      	cmp	r5, #5
    e8d8:	f000 808b 	beq.w	e9f2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    e8dc:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    e8e0:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8e4:	2701      	movs	r7, #1
    e8e6:	fa07 f101 	lsl.w	r1, r7, r1
    e8ea:	ea20 0101 	bic.w	r1, r0, r1
    e8ee:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    e8f2:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    e8f6:	6f61      	ldr	r1, [r4, #116]	; 0x74
    e8f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    e8fc:	f991 3001 	ldrsb.w	r3, [r1, #1]
    e900:	4a43      	ldr	r2, [pc, #268]	; (ea10 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    e902:	7889      	ldrb	r1, [r1, #2]
    e904:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    e908:	440b      	add	r3, r1
    e90a:	2101      	movs	r1, #1
    e90c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    e910:	4308      	orrs	r0, r1
    e912:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    e916:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    e918:	f990 3001 	ldrsb.w	r3, [r0, #1]
    e91c:	7880      	ldrb	r0, [r0, #2]
    e91e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    e922:	4403      	add	r3, r0
    e924:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e928:	430a      	orrs	r2, r1
    e92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    e92e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    e930:	6813      	ldr	r3, [r2, #0]
    e932:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e936:	428b      	cmp	r3, r1
    e938:	d006      	beq.n	e948 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    e93a:	6813      	ldr	r3, [r2, #0]
    e93c:	f361 0341 	bfi	r3, r1, #1, #1
    e940:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    e942:	6893      	ldr	r3, [r2, #8]
    e944:	079b      	lsls	r3, r3, #30
    e946:	d4fc      	bmi.n	e942 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    e948:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    e94a:	2001      	movs	r0, #1
    e94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    e94e:	2000      	movs	r0, #0
    e950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e952:	061a      	lsls	r2, r3, #24
    e954:	d5fb      	bpl.n	e94e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    e956:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e958:	4a2c      	ldr	r2, [pc, #176]	; (ea0c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    e95a:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    e95e:	f001 010f 	and.w	r1, r1, #15
    e962:	1850      	adds	r0, r2, r1
    e964:	11db      	asrs	r3, r3, #7
    e966:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    e96a:	e796      	b.n	e89a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    e96c:	2001      	movs	r0, #1
    e96e:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e970:	4f26      	ldr	r7, [pc, #152]	; (ea0c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    e972:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e974:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e978:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    e97c:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e980:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e984:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e986:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e98a:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e98e:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e992:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e996:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e99a:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    e99e:	f7ff f8bb 	bl	db18 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    e9a2:	2800      	cmp	r0, #0
    e9a4:	d0d3      	beq.n	e94e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    e9a6:	6f61      	ldr	r1, [r4, #116]	; 0x74
    e9a8:	4b19      	ldr	r3, [pc, #100]	; (ea10 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    e9aa:	f991 2001 	ldrsb.w	r2, [r1, #1]
    e9ae:	7889      	ldrb	r1, [r1, #2]
    e9b0:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    e9b4:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    e9b6:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    e9b8:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    e9bc:	f36f 0000 	bfc	r0, #0, #1
    e9c0:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    e9c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    e9c6:	f992 0001 	ldrsb.w	r0, [r2, #1]
    e9ca:	7892      	ldrb	r2, [r2, #2]
    e9cc:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e9d0:	4413      	add	r3, r2
    e9d2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e9d6:	f36f 0200 	bfc	r2, #0, #1
    e9da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e9de:	e7a6      	b.n	e92e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    e9e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e9e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    e9e4:	01db      	lsls	r3, r3, #7
    e9e6:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    e9ea:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    e9ee:	6146      	str	r6, [r0, #20]
    e9f0:	e760      	b.n	e8b4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e9f2:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e9f6:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e9fa:	2601      	movs	r6, #1
    e9fc:	fa06 f101 	lsl.w	r1, r6, r1
    ea00:	4339      	orrs	r1, r7
    ea02:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ea06:	4303      	orrs	r3, r0
    ea08:	e775      	b.n	e8f6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ea0a:	bf00      	nop
    ea0c:	200019d0 	.word	0x200019d0
    ea10:	41008000 	.word	0x41008000

0000ea14 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ea14:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ea16:	4c07      	ldr	r4, [pc, #28]	; (ea34 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ea18:	6823      	ldr	r3, [r4, #0]
    ea1a:	07db      	lsls	r3, r3, #31
    ea1c:	d502      	bpl.n	ea24 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ea1e:	4b06      	ldr	r3, [pc, #24]	; (ea38 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ea20:	6818      	ldr	r0, [r3, #0]
    ea22:	bd10      	pop	{r4, pc}
    ea24:	2001      	movs	r0, #1
    ea26:	f004 fbb3 	bl	13190 <_Znwj>
    ea2a:	4a03      	ldr	r2, [pc, #12]	; (ea38 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ea2c:	2301      	movs	r3, #1
    ea2e:	6010      	str	r0, [r2, #0]
    ea30:	6023      	str	r3, [r4, #0]
    return *instance;
}
    ea32:	bd10      	pop	{r4, pc}
    ea34:	20001e24 	.word	0x20001e24
    ea38:	20001ef4 	.word	0x20001ef4

0000ea3c <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    ea3c:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ea3e:	4a13      	ldr	r2, [pc, #76]	; (ea8c <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ea40:	4913      	ldr	r1, [pc, #76]	; (ea90 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ea42:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ea44:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ea46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ea4a:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ea4c:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ea4e:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ea50:	8813      	ldrh	r3, [r2, #0]
    ea52:	b29b      	uxth	r3, r3
    ea54:	2b01      	cmp	r3, #1
    ea56:	d0fb      	beq.n	ea50 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ea58:	4b0e      	ldr	r3, [pc, #56]	; (ea94 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ea5a:	4d0f      	ldr	r5, [pc, #60]	; (ea98 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ea5c:	4c0f      	ldr	r4, [pc, #60]	; (ea9c <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    ea5e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ea62:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ea64:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ea68:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ea6c:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ea70:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ea72:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ea74:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    ea76:	7b51      	ldrb	r1, [r2, #13]
    ea78:	f041 0101 	orr.w	r1, r1, #1
    ea7c:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ea7e:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    ea80:	6913      	ldr	r3, [r2, #16]
    ea82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    ea86:	6113      	str	r3, [r2, #16]
}
    ea88:	bc70      	pop	{r4, r5, r6}
    ea8a:	4770      	bx	lr
    ea8c:	40000800 	.word	0x40000800
    ea90:	4100a000 	.word	0x4100a000
    ea94:	e000e100 	.word	0xe000e100
    ea98:	20001e30 	.word	0x20001e30
    ea9c:	20001e90 	.word	0x20001e90

0000eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    eaa0:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    eaa2:	bfda      	itte	le
    eaa4:	4b02      	ldrle	r3, [pc, #8]	; (eab0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    eaa6:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    eaaa:	2000      	movgt	r0, #0
}
    eaac:	4770      	bx	lr
    eaae:	bf00      	nop
    eab0:	4100a040 	.word	0x4100a040

0000eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    eab4:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    eab6:	bfda      	itte	le
    eab8:	4b02      	ldrle	r3, [pc, #8]	; (eac4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    eaba:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    eabe:	2000      	movgt	r0, #0
}
    eac0:	4770      	bx	lr
    eac2:	bf00      	nop
    eac4:	20001e30 	.word	0x20001e30

0000eac8 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    eac8:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    eaca:	f7ff ffa3 	bl	ea14 <_ZN9ClearCore10DmaManager8InstanceEv>
    eace:	4b01      	ldr	r3, [pc, #4]	; (ead4 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    ead0:	6018      	str	r0, [r3, #0]
    ead2:	bd08      	pop	{r3, pc}
    ead4:	20001ef0 	.word	0x20001ef0

0000ead8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    ead8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eadc:	4604      	mov	r4, r0
    eade:	4267      	negs	r7, r4
    eae0:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    eae4:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    eae8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    eaec:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    eaf0:	4608      	mov	r0, r1
    eaf2:	ea4f 0999 	mov.w	r9, r9, lsr #2
    eaf6:	2101      	movs	r1, #1
    eaf8:	f002 f86e 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    eafc:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    eb00:	2600      	movs	r6, #0
    bool sendData = true;
    eb02:	2201      	movs	r2, #1
    eb04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    eb08:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    eb0c:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    eb10:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    eb12:	4690      	mov	r8, r2
    eb14:	2b02      	cmp	r3, #2
    eb16:	f000 821b 	beq.w	ef50 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    eb1a:	2d03      	cmp	r5, #3
    eb1c:	f300 8159 	bgt.w	edd2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    eb20:	b1a3      	cbz	r3, eb4c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    eb22:	2b01      	cmp	r3, #1
    eb24:	d1fc      	bne.n	eb20 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    eb26:	b1da      	cbz	r2, eb60 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    eb28:	2e00      	cmp	r6, #0
    eb2a:	f040 808d 	bne.w	ec48 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    eb2e:	6026      	str	r6, [r4, #0]
    eb30:	6066      	str	r6, [r4, #4]
    eb32:	60a6      	str	r6, [r4, #8]
    eb34:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    eb36:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    eb38:	f104 0212 	add.w	r2, r4, #18
    eb3c:	4621      	mov	r1, r4
    eb3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    eb40:	f002 f8f4 	bl	10d2c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    eb44:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    eb48:	2200      	movs	r2, #0
    eb4a:	e7e3      	b.n	eb14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    eb4c:	2a00      	cmp	r2, #0
    eb4e:	d053      	beq.n	ebf8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    eb50:	f04f 33ff 	mov.w	r3, #4294967295
    eb54:	6023      	str	r3, [r4, #0]
    eb56:	6063      	str	r3, [r4, #4]
    eb58:	60a3      	str	r3, [r4, #8]
    eb5a:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    eb5c:	2310      	movs	r3, #16
    eb5e:	e7eb      	b.n	eb38 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    eb60:	2e00      	cmp	r6, #0
    eb62:	f040 80a2 	bne.w	ecaa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    eb66:	7ca2      	ldrb	r2, [r4, #18]
    eb68:	2aff      	cmp	r2, #255	; 0xff
    eb6a:	f040 8128 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb6e:	7ce2      	ldrb	r2, [r4, #19]
    eb70:	2aff      	cmp	r2, #255	; 0xff
    eb72:	f040 8124 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb76:	7d22      	ldrb	r2, [r4, #20]
    eb78:	2aff      	cmp	r2, #255	; 0xff
    eb7a:	f040 8120 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb7e:	7d62      	ldrb	r2, [r4, #21]
    eb80:	2aff      	cmp	r2, #255	; 0xff
    eb82:	f040 811c 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb86:	7da2      	ldrb	r2, [r4, #22]
    eb88:	2aff      	cmp	r2, #255	; 0xff
    eb8a:	f040 8118 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb8e:	7de2      	ldrb	r2, [r4, #23]
    eb90:	2aff      	cmp	r2, #255	; 0xff
    eb92:	f040 8114 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb96:	7e22      	ldrb	r2, [r4, #24]
    eb98:	2aff      	cmp	r2, #255	; 0xff
    eb9a:	f040 8110 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eb9e:	7e62      	ldrb	r2, [r4, #25]
    eba0:	2aff      	cmp	r2, #255	; 0xff
    eba2:	f040 810c 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eba6:	7ea2      	ldrb	r2, [r4, #26]
    eba8:	2aff      	cmp	r2, #255	; 0xff
    ebaa:	f040 8108 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebae:	7ee2      	ldrb	r2, [r4, #27]
    ebb0:	2aff      	cmp	r2, #255	; 0xff
    ebb2:	f040 8104 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebb6:	7f22      	ldrb	r2, [r4, #28]
    ebb8:	2aff      	cmp	r2, #255	; 0xff
    ebba:	f040 8100 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebbe:	7f62      	ldrb	r2, [r4, #29]
    ebc0:	2aff      	cmp	r2, #255	; 0xff
    ebc2:	f040 80fc 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebc6:	7fa2      	ldrb	r2, [r4, #30]
    ebc8:	2aff      	cmp	r2, #255	; 0xff
    ebca:	f040 80f8 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebce:	7fe2      	ldrb	r2, [r4, #31]
    ebd0:	2aff      	cmp	r2, #255	; 0xff
    ebd2:	f040 80f4 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebd6:	f894 2020 	ldrb.w	r2, [r4, #32]
    ebda:	2aff      	cmp	r2, #255	; 0xff
    ebdc:	f040 80ef 	bne.w	edbe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ebe0:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    ebe4:	3eff      	subs	r6, #255	; 0xff
    ebe6:	bf18      	it	ne
    ebe8:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    ebea:	3501      	adds	r5, #1
    ebec:	b2ed      	uxtb	r5, r5
    ebee:	2d03      	cmp	r5, #3
    ebf0:	f04f 0201 	mov.w	r2, #1
    ebf4:	dd94      	ble.n	eb20 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    ebf6:	e0ec      	b.n	edd2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    ebf8:	7ca2      	ldrb	r2, [r4, #18]
    ebfa:	bb02      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ebfc:	7ce2      	ldrb	r2, [r4, #19]
    ebfe:	b9f2      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec00:	7d22      	ldrb	r2, [r4, #20]
    ec02:	b9e2      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec04:	7d62      	ldrb	r2, [r4, #21]
    ec06:	b9d2      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec08:	7da2      	ldrb	r2, [r4, #22]
    ec0a:	b9c2      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec0c:	7de2      	ldrb	r2, [r4, #23]
    ec0e:	b9b2      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec10:	7e22      	ldrb	r2, [r4, #24]
    ec12:	b9a2      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec14:	7e62      	ldrb	r2, [r4, #25]
    ec16:	b992      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec18:	7ea2      	ldrb	r2, [r4, #26]
    ec1a:	b982      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec1c:	7ee2      	ldrb	r2, [r4, #27]
    ec1e:	b972      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec20:	7f22      	ldrb	r2, [r4, #28]
    ec22:	b962      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec24:	7f62      	ldrb	r2, [r4, #29]
    ec26:	b952      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec28:	7fa2      	ldrb	r2, [r4, #30]
    ec2a:	b942      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec2c:	7fe2      	ldrb	r2, [r4, #31]
    ec2e:	b932      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec30:	f894 2020 	ldrb.w	r2, [r4, #32]
    ec34:	b91a      	cbnz	r2, ec3e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ec36:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    ec3a:	2a00      	cmp	r2, #0
    ec3c:	d0d5      	beq.n	ebea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    ec3e:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    ec42:	2501      	movs	r5, #1
                        flush0Success = false;
    ec44:	2600      	movs	r6, #0
    ec46:	e772      	b.n	eb2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    ec48:	2f00      	cmp	r7, #0
    ec4a:	f000 80ba 	beq.w	edc2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    ec4e:	23aa      	movs	r3, #170	; 0xaa
    ec50:	2f01      	cmp	r7, #1
    ec52:	7023      	strb	r3, [r4, #0]
    ec54:	f104 0101 	add.w	r1, r4, #1
    ec58:	f000 80db 	beq.w	ee12 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    ec5c:	2f02      	cmp	r7, #2
    ec5e:	7063      	strb	r3, [r4, #1]
    ec60:	f104 0102 	add.w	r1, r4, #2
    ec64:	f000 80d3 	beq.w	ee0e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    ec68:	70a3      	strb	r3, [r4, #2]
    ec6a:	1ce1      	adds	r1, r4, #3
    ec6c:	220e      	movs	r2, #14
    ec6e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    ec72:	51e3      	str	r3, [r4, r7]
    ec74:	19e3      	adds	r3, r4, r7
    ec76:	3304      	adds	r3, #4
    ec78:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    ec7c:	f1b9 0f03 	cmp.w	r9, #3
    ec80:	6018      	str	r0, [r3, #0]
    ec82:	6058      	str	r0, [r3, #4]
    ec84:	d000      	beq.n	ec88 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    ec86:	6098      	str	r0, [r3, #8]
    ec88:	45d3      	cmp	fp, sl
    ec8a:	eba2 020a 	sub.w	r2, r2, sl
    ec8e:	eb01 000a 	add.w	r0, r1, sl
    ec92:	d008      	beq.n	eca6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    ec94:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    ec96:	2a01      	cmp	r2, #1
            *buf++ = val;
    ec98:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    ec9c:	d003      	beq.n	eca6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    ec9e:	2a02      	cmp	r2, #2
            *buf++ = val;
    eca0:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    eca2:	d000      	beq.n	eca6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    eca4:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    eca6:	2311      	movs	r3, #17
    eca8:	e746      	b.n	eb38 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    ecaa:	7ca1      	ldrb	r1, [r4, #18]
    ecac:	29aa      	cmp	r1, #170	; 0xaa
    ecae:	f000 80aa 	beq.w	ee06 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    ecb2:	7ce2      	ldrb	r2, [r4, #19]
    ecb4:	2aaa      	cmp	r2, #170	; 0xaa
    ecb6:	d040      	beq.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ecb8:	7d23      	ldrb	r3, [r4, #20]
    ecba:	2baa      	cmp	r3, #170	; 0xaa
    ecbc:	f000 80a5 	beq.w	ee0a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    ecc0:	7d63      	ldrb	r3, [r4, #21]
    ecc2:	2baa      	cmp	r3, #170	; 0xaa
    ecc4:	f000 80a7 	beq.w	ee16 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    ecc8:	7da3      	ldrb	r3, [r4, #22]
    ecca:	2baa      	cmp	r3, #170	; 0xaa
    eccc:	f000 8118 	beq.w	ef00 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    ecd0:	7de3      	ldrb	r3, [r4, #23]
    ecd2:	2baa      	cmp	r3, #170	; 0xaa
    ecd4:	f000 80a1 	beq.w	ee1a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    ecd8:	7e23      	ldrb	r3, [r4, #24]
    ecda:	2baa      	cmp	r3, #170	; 0xaa
    ecdc:	f000 8112 	beq.w	ef04 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    ece0:	7e63      	ldrb	r3, [r4, #25]
    ece2:	2baa      	cmp	r3, #170	; 0xaa
    ece4:	f000 8110 	beq.w	ef08 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    ece8:	7ea3      	ldrb	r3, [r4, #26]
    ecea:	2baa      	cmp	r3, #170	; 0xaa
    ecec:	f000 810e 	beq.w	ef0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    ecf0:	7ee3      	ldrb	r3, [r4, #27]
    ecf2:	2baa      	cmp	r3, #170	; 0xaa
    ecf4:	f000 8102 	beq.w	eefc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    ecf8:	7f23      	ldrb	r3, [r4, #28]
    ecfa:	2baa      	cmp	r3, #170	; 0xaa
    ecfc:	f000 8108 	beq.w	ef10 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    ed00:	7f63      	ldrb	r3, [r4, #29]
    ed02:	2baa      	cmp	r3, #170	; 0xaa
    ed04:	f000 811c 	beq.w	ef40 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    ed08:	7fa3      	ldrb	r3, [r4, #30]
    ed0a:	2baa      	cmp	r3, #170	; 0xaa
    ed0c:	f000 811a 	beq.w	ef44 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    ed10:	7fe3      	ldrb	r3, [r4, #31]
    ed12:	2baa      	cmp	r3, #170	; 0xaa
    ed14:	f000 8118 	beq.w	ef48 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    ed18:	f894 3020 	ldrb.w	r3, [r4, #32]
    ed1c:	2baa      	cmp	r3, #170	; 0xaa
    ed1e:	f000 8115 	beq.w	ef4c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    ed22:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ed26:	2baa      	cmp	r3, #170	; 0xaa
    ed28:	f000 8108 	beq.w	ef3c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    ed2c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    ed30:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    ed32:	bf08      	it	eq
    ed34:	2310      	moveq	r3, #16
                        if (!foundAA &&
    ed36:	f040 80ed 	bne.w	ef14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    ed3a:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    ed3c:	2502      	movs	r5, #2
    ed3e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    ed42:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    ed44:	74e2      	strb	r2, [r4, #19]
    ed46:	7522      	strb	r2, [r4, #20]
    ed48:	7562      	strb	r2, [r4, #21]
    ed4a:	75a2      	strb	r2, [r4, #22]
    ed4c:	75e2      	strb	r2, [r4, #23]
    ed4e:	7622      	strb	r2, [r4, #24]
    ed50:	7662      	strb	r2, [r4, #25]
    ed52:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    ed54:	76e2      	strb	r2, [r4, #27]
    ed56:	7722      	strb	r2, [r4, #28]
    ed58:	7762      	strb	r2, [r4, #29]
    ed5a:	77a2      	strb	r2, [r4, #30]
    ed5c:	77e2      	strb	r2, [r4, #31]
    ed5e:	f884 2020 	strb.w	r2, [r4, #32]
    ed62:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    ed66:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    ed6a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    ed6e:	105b      	asrs	r3, r3, #1
    ed70:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    ed72:	2701      	movs	r7, #1
    ed74:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    ed76:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    ed7a:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    ed7e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    ed82:	3a01      	subs	r2, #1
    ed84:	4610      	mov	r0, r2
    ed86:	17d1      	asrs	r1, r2, #31
    ed88:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    ed8a:	42ba      	cmp	r2, r7
    ed8c:	bfc8      	it	gt
    ed8e:	fa42 f707 	asrgt.w	r7, r2, r7
    ed92:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    ed96:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    ed9a:	2b00      	cmp	r3, #0
    ed9c:	d13f      	bne.n	ee1e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    ed9e:	4b6d      	ldr	r3, [pc, #436]	; (ef54 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    eda0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eda4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    eda8:	43c9      	mvns	r1, r1
    edaa:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    edac:	4a6a      	ldr	r2, [pc, #424]	; (ef58 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    edae:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    edb2:	6813      	ldr	r3, [r2, #0]
    edb4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    edb8:	4628      	mov	r0, r5
    edba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    edbe:	2601      	movs	r6, #1
    edc0:	e713      	b.n	ebea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    edc2:	4623      	mov	r3, r4
    edc4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    edc8:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    edcc:	4621      	mov	r1, r4
    edce:	2211      	movs	r2, #17
    edd0:	e752      	b.n	ec78 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    edd2:	4a62      	ldr	r2, [pc, #392]	; (ef5c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    edd4:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    edd6:	2301      	movs	r3, #1
    edd8:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    eddc:	2208      	movs	r2, #8
    edde:	2102      	movs	r1, #2
    ede0:	f002 fbf0 	bl	115c4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    ede4:	4a5b      	ldr	r2, [pc, #364]	; (ef54 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    ede6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    edea:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    edee:	495a      	ldr	r1, [pc, #360]	; (ef58 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    edf0:	ea23 0300 	bic.w	r3, r3, r0
    edf4:	6809      	ldr	r1, [r1, #0]
    edf6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    edfa:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    edfc:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    ee00:	4628      	mov	r0, r5
    ee02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    ee06:	4613      	mov	r3, r2
    ee08:	e797      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    ee0a:	2302      	movs	r3, #2
    ee0c:	e795      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ee0e:	220f      	movs	r2, #15
    ee10:	e72d      	b.n	ec6e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    ee12:	2210      	movs	r2, #16
    ee14:	e72b      	b.n	ec6e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    ee16:	2303      	movs	r3, #3
    ee18:	e78f      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ee1a:	2305      	movs	r3, #5
    ee1c:	e78d      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    ee1e:	f1c3 0108 	rsb	r1, r3, #8
    ee22:	00ce      	lsls	r6, r1, #3
    ee24:	f04f 30ff 	mov.w	r0, #4294967295
    ee28:	f1c6 0220 	rsb	r2, r6, #32
    ee2c:	fa00 f202 	lsl.w	r2, r0, r2
    ee30:	fa20 fe06 	lsr.w	lr, r0, r6
    ee34:	f1a6 0720 	sub.w	r7, r6, #32
    ee38:	fa20 f707 	lsr.w	r7, r0, r7
    ee3c:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    ee40:	4622      	mov	r2, r4
    ee42:	ea4e 0e07 	orr.w	lr, lr, r7
    ee46:	40f0      	lsrs	r0, r6
    ee48:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    ee4a:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    ee4e:	65e0      	str	r0, [r4, #92]	; 0x5c
    ee50:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    ee54:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    ee56:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    ee58:	f104 0812 	add.w	r8, r4, #18
    ee5c:	7056      	strb	r6, [r2, #1]
    ee5e:	7096      	strb	r6, [r2, #2]
    ee60:	70d6      	strb	r6, [r2, #3]
    ee62:	7116      	strb	r6, [r2, #4]
    ee64:	7156      	strb	r6, [r2, #5]
    ee66:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    ee68:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    ee6c:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    ee6e:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    ee72:	4442      	add	r2, r8
    ee74:	3301      	adds	r3, #1
    ee76:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    ee78:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    ee7c:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    ee7e:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    ee80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ee82:	f001 ff53 	bl	10d2c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    ee86:	4631      	mov	r1, r6
    ee88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ee8a:	f001 fea5 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    ee8e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    ee92:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ee96:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    ee98:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    ee9a:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ee9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ee9e:	f001 fe9b 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    eea2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    eea6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    eea8:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    eeac:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    eeb0:	2701      	movs	r7, #1
    eeb2:	4442      	add	r2, r8
    eeb4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    eeb8:	4421      	add	r1, r4
    eeba:	f001 ff37 	bl	10d2c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    eebe:	4631      	mov	r1, r6
    eec0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    eec2:	f001 fe89 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    eec6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eeca:	4b22      	ldr	r3, [pc, #136]	; (ef54 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    eecc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    eed0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    eed4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    eed8:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    eedc:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eee0:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    eee4:	f04f 0800 	mov.w	r8, #0
    eee8:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    eeec:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    eef0:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    eef4:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eef6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    eefa:	e757      	b.n	edac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    eefc:	2309      	movs	r3, #9
    eefe:	e71c      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef00:	2304      	movs	r3, #4
    ef02:	e71a      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef04:	2306      	movs	r3, #6
    ef06:	e718      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef08:	2307      	movs	r3, #7
    ef0a:	e716      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef0c:	2308      	movs	r3, #8
    ef0e:	e714      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef10:	230a      	movs	r3, #10
    ef12:	e712      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    ef14:	2300      	movs	r3, #0
    ef16:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    ef1a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    ef1e:	4a0f      	ldr	r2, [pc, #60]	; (ef5c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    ef20:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    ef22:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    ef24:	f04f 0000 	mov.w	r0, #0
    ef28:	f04f 0100 	mov.w	r1, #0
    ef2c:	bfcc      	ite	gt
    ef2e:	105b      	asrgt	r3, r3, #1
    ef30:	2301      	movle	r3, #1
    ef32:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    ef36:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    ef3a:	e74b      	b.n	edd4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    ef3c:	230f      	movs	r3, #15
    ef3e:	e6fc      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef40:	230b      	movs	r3, #11
    ef42:	e6fa      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef44:	230c      	movs	r3, #12
    ef46:	e6f8      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef48:	230d      	movs	r3, #13
    ef4a:	e6f6      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef4c:	230e      	movs	r3, #14
    ef4e:	e6f4      	b.n	ed3a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    ef50:	2300      	movs	r3, #0
    ef52:	e70c      	b.n	ed6e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    ef54:	200019d0 	.word	0x200019d0
    ef58:	20001be0 	.word	0x20001be0
    ef5c:	20001f18 	.word	0x20001f18

0000ef60 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    ef60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    ef64:	4f42      	ldr	r7, [pc, #264]	; (f070 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    ef66:	683c      	ldr	r4, [r7, #0]
    ef68:	f014 0401 	ands.w	r4, r4, #1
    ef6c:	d003      	beq.n	ef76 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    ef6e:	4b41      	ldr	r3, [pc, #260]	; (f074 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    ef70:	6818      	ldr	r0, [r3, #0]
    ef72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef76:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    ef7a:	f004 f909 	bl	13190 <_Znwj>
            buf64.writeMarker = 0;
    ef7e:	4603      	mov	r3, r0
    ef80:	4606      	mov	r6, r0
    ef82:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    ef86:	f04f 38ff 	mov.w	r8, #4294967295
    ef8a:	f04f 39ff 	mov.w	r9, #4294967295
    ef8e:	2200      	movs	r2, #0
            buf64.inputs = 0;
    ef90:	7074      	strb	r4, [r6, #1]
    ef92:	705c      	strb	r4, [r3, #1]
    ef94:	709c      	strb	r4, [r3, #2]
    ef96:	70dc      	strb	r4, [r3, #3]
    ef98:	711c      	strb	r4, [r3, #4]
    ef9a:	715c      	strb	r4, [r3, #5]
    ef9c:	719c      	strb	r4, [r3, #6]
    ef9e:	71dc      	strb	r4, [r3, #7]
    efa0:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    efa2:	7274      	strb	r4, [r6, #9]
    efa4:	72b4      	strb	r4, [r6, #10]
    efa6:	72f4      	strb	r4, [r6, #11]
    efa8:	7334      	strb	r4, [r6, #12]
    efaa:	7374      	strb	r4, [r6, #13]
    efac:	73b4      	strb	r4, [r6, #14]
    efae:	73f4      	strb	r4, [r6, #15]
    efb0:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    efb2:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    efb4:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    efb6:	74f4      	strb	r4, [r6, #19]
    efb8:	7534      	strb	r4, [r6, #20]
    efba:	7574      	strb	r4, [r6, #21]
    efbc:	75b4      	strb	r4, [r6, #22]
    efbe:	75f4      	strb	r4, [r6, #23]
    efc0:	7634      	strb	r4, [r6, #24]
    efc2:	7674      	strb	r4, [r6, #25]
    efc4:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    efc6:	76f4      	strb	r4, [r6, #27]
    efc8:	7734      	strb	r4, [r6, #28]
    efca:	7774      	strb	r4, [r6, #29]
    efcc:	77b4      	strb	r4, [r6, #30]
    efce:	77f4      	strb	r4, [r6, #31]
    efd0:	f886 4020 	strb.w	r4, [r6, #32]
    efd4:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    efd8:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    efdc:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    efe0:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    efe4:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    efe8:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    efec:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    eff0:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    eff4:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    eff8:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    effc:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f000:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f004:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f008:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f00c:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f010:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f014:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f018:	2301      	movs	r3, #1
    f01a:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f01e:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f022:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f026:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f02a:	62b4      	str	r4, [r6, #40]	; 0x28
    f02c:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f030:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f034:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f038:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f03c:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f040:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f044:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f048:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f04c:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f050:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f054:	4620      	mov	r0, r4
    f056:	3428      	adds	r4, #40	; 0x28
    f058:	f000 fc8a 	bl	f970 <_ZN9ClearCore7CcioPinC1Ev>
    f05c:	42ac      	cmp	r4, r5
    f05e:	d1f9      	bne.n	f054 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f060:	4a04      	ldr	r2, [pc, #16]	; (f074 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f062:	2301      	movs	r3, #1
    f064:	6016      	str	r6, [r2, #0]
    f066:	4630      	mov	r0, r6
    f068:	603b      	str	r3, [r7, #0]
}
    f06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f06e:	bf00      	nop
    f070:	20001ef8 	.word	0x20001ef8
    f074:	20001f00 	.word	0x20001f00

0000f078 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f078:	b570      	push	{r4, r5, r6, lr}
    f07a:	4606      	mov	r6, r0
    f07c:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f080:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f082:	682b      	ldr	r3, [r5, #0]
    f084:	b221      	sxth	r1, r4
    f086:	3401      	adds	r4, #1
    f088:	4628      	mov	r0, r5
    f08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f08c:	b2a4      	uxth	r4, r4
    f08e:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f090:	2c80      	cmp	r4, #128	; 0x80
    f092:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f096:	d1f4      	bne.n	f082 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f098:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f09c:	2b02      	cmp	r3, #2
    f09e:	d00b      	beq.n	f0b8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f0a0:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f0a4:	2b00      	cmp	r3, #0
    f0a6:	d13c      	bne.n	f122 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f0a8:	4a20      	ldr	r2, [pc, #128]	; (f12c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f0aa:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f0ac:	6812      	ldr	r2, [r2, #0]
    f0ae:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f0b2:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f0b4:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f0b8:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f0ba:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f0bc:	2200      	movs	r2, #0
    f0be:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f0c0:	f04f 34ff 	mov.w	r4, #4294967295
    f0c4:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f0c8:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f0cc:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f0d0:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f0d4:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f0d8:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f0dc:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f0e0:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f0e4:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f0e8:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f0ec:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f0f0:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f0f4:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f0f8:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f0fc:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f100:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f104:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f108:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f10c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f110:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f114:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f118:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f11c:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f120:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f122:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f126:	2b00      	cmp	r3, #0
    f128:	d1be      	bne.n	f0a8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f12a:	e7c5      	b.n	f0b8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f12c:	20001be0 	.word	0x20001be0

0000f130 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f130:	3940      	subs	r1, #64	; 0x40
    f132:	b28b      	uxth	r3, r1
    f134:	2b3f      	cmp	r3, #63	; 0x3f
    f136:	d80f      	bhi.n	f158 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f138:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f13a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f13c:	b2c9      	uxtb	r1, r1
    f13e:	f1c1 0320 	rsb	r3, r1, #32
    f142:	fa02 f303 	lsl.w	r3, r2, r3
    f146:	40c8      	lsrs	r0, r1
    f148:	3920      	subs	r1, #32
    f14a:	4318      	orrs	r0, r3
    f14c:	fa22 f101 	lsr.w	r1, r2, r1
    f150:	4308      	orrs	r0, r1
}
    f152:	f000 0001 	and.w	r0, r0, #1
    f156:	4770      	bx	lr
    f158:	2000      	movs	r0, #0
    f15a:	f000 0001 	and.w	r0, r0, #1
    f15e:	4770      	bx	lr

0000f160 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f160:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f162:	2900      	cmp	r1, #0
    f164:	f000 8084 	beq.w	f270 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f168:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f16c:	2b00      	cmp	r3, #0
    f16e:	d07f      	beq.n	f270 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f170:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f174:	2a00      	cmp	r2, #0
    f176:	d17b      	bne.n	f270 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f17c:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f180:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f184:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f186:	f000 80a3 	beq.w	f2d0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f18a:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f18e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f192:	2400      	movs	r4, #0
    f194:	2500      	movs	r5, #0
    f196:	4690      	mov	r8, r2
    f198:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f19c:	4696      	mov	lr, r2
    f19e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f1a2:	e9cd 4500 	strd	r4, r5, [sp]
    f1a6:	2201      	movs	r2, #1
    f1a8:	2300      	movs	r3, #0
    f1aa:	4626      	mov	r6, r4
    f1ac:	462f      	mov	r7, r5
    f1ae:	9106      	str	r1, [sp, #24]
    f1b0:	e037      	b.n	f222 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f1b2:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f1b6:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f1ba:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f1be:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f1c2:	f108 0501 	add.w	r5, r8, #1
    f1c6:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f1c8:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f1ca:	ea46 0602 	orr.w	r6, r6, r2
    f1ce:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f1d2:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f1d6:	db06      	blt.n	f1e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f1d8:	b12c      	cbz	r4, f1e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f1da:	e9dd 4500 	ldrd	r4, r5, [sp]
    f1de:	4314      	orrs	r4, r2
    f1e0:	431d      	orrs	r5, r3
    f1e2:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f1e6:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f1ea:	ea04 0802 	and.w	r8, r4, r2
    f1ee:	ea05 0903 	and.w	r9, r5, r3
    f1f2:	ea58 0109 	orrs.w	r1, r8, r9
    f1f6:	d00b      	beq.n	f210 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f1f8:	ea24 0402 	bic.w	r4, r4, r2
    f1fc:	ea25 0503 	bic.w	r5, r5, r3
    f200:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f204:	e9dd 4500 	ldrd	r4, r5, [sp]
    f208:	4314      	orrs	r4, r2
    f20a:	431d      	orrs	r5, r3
    f20c:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f210:	f10e 0e01 	add.w	lr, lr, #1
    f214:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f218:	1892      	adds	r2, r2, r2
    f21a:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f21c:	45e6      	cmp	lr, ip
    f21e:	46f0      	mov	r8, lr
    f220:	da27      	bge.n	f272 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f222:	ea0a 0402 	and.w	r4, sl, r2
    f226:	ea0b 0503 	and.w	r5, fp, r3
    f22a:	ea54 0105 	orrs.w	r1, r4, r5
    f22e:	d0ef      	beq.n	f210 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f230:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f234:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f238:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f23c:	3c01      	subs	r4, #1
    f23e:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f242:	2c00      	cmp	r4, #0
    f244:	d1e4      	bne.n	f210 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f246:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f24a:	4014      	ands	r4, r2
    f24c:	401d      	ands	r5, r3
    f24e:	432c      	orrs	r4, r5
    f250:	d1af      	bne.n	f1b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f252:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f256:	ea04 0802 	and.w	r8, r4, r2
    f25a:	ea05 0903 	and.w	r9, r5, r3
    f25e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f262:	ea58 0409 	orrs.w	r4, r8, r9
    f266:	f000 8115 	beq.w	f494 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f26a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f26e:	e7c3      	b.n	f1f8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f270:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f272:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f276:	9906      	ldr	r1, [sp, #24]
    f278:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f27c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f280:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f284:	4642      	mov	r2, r8
    f286:	464b      	mov	r3, r9
    f288:	4322      	orrs	r2, r4
    f28a:	432b      	orrs	r3, r5
    f28c:	4614      	mov	r4, r2
    f28e:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f290:	4642      	mov	r2, r8
    f292:	464b      	mov	r3, r9
    f294:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f298:	43f6      	mvns	r6, r6
    f29a:	43ff      	mvns	r7, r7
    f29c:	ea48 0802 	orr.w	r8, r8, r2
    f2a0:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f2a4:	ea04 0206 	and.w	r2, r4, r6
    f2a8:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f2ac:	e9dd 4500 	ldrd	r4, r5, [sp]
    f2b0:	ea2a 0404 	bic.w	r4, sl, r4
    f2b4:	ea2b 0505 	bic.w	r5, fp, r5
    f2b8:	46a2      	mov	sl, r4
    f2ba:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f2bc:	ea08 0406 	and.w	r4, r8, r6
    f2c0:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f2c4:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f2c8:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f2cc:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f2d0:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f2d4:	3d01      	subs	r5, #1
    f2d6:	b2ed      	uxtb	r5, r5
    f2d8:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f2dc:	b115      	cbz	r5, f2e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f2de:	b011      	add	sp, #68	; 0x44
    f2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2e4:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f2e6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f2ea:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f2ee:	4608      	mov	r0, r1
    f2f0:	f001 fd9e 	bl	10e30 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f2f4:	4629      	mov	r1, r5
    f2f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f2f8:	f001 fc6e 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f2fc:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f300:	f10c 0309 	add.w	r3, ip, #9
    f304:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f306:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f30a:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f30c:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f30e:	2acc      	cmp	r2, #204	; 0xcc
    f310:	f000 814e 	beq.w	f5b0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f314:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f318:	1c5a      	adds	r2, r3, #1
    f31a:	b292      	uxth	r2, r2
    f31c:	3b04      	subs	r3, #4
    f31e:	4616      	mov	r6, r2
    f320:	920b      	str	r2, [sp, #44]	; 0x2c
    f322:	b29b      	uxth	r3, r3
    f324:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f328:	4293      	cmp	r3, r2
    f32a:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f32e:	f240 81c6 	bls.w	f6be <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f332:	2200      	movs	r2, #0
    f334:	2300      	movs	r3, #0
    f336:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f33a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f33e:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f342:	ea22 0000 	bic.w	r0, r2, r0
    f346:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f34a:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f34e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f352:	4610      	mov	r0, r2
    f354:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f356:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f35a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f35e:	f1bc 0f00 	cmp.w	ip, #0
    f362:	f000 81d3 	beq.w	f70c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f366:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f36a:	2200      	movs	r2, #0
    f36c:	2000      	movs	r0, #0
    f36e:	2100      	movs	r1, #0
    f370:	4613      	mov	r3, r2
    f372:	e9cd 0100 	strd	r0, r1, [sp]
    f376:	f04f 0801 	mov.w	r8, #1
    f37a:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f37e:	f04f 0a0c 	mov.w	sl, #12
    f382:	e038      	b.n	f3f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f384:	0099      	lsls	r1, r3, #2
    f386:	18c8      	adds	r0, r1, r3
    f388:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f38c:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f390:	f10b 3bff 	add.w	fp, fp, #4294967295
    f394:	fa1f fb8b 	uxth.w	fp, fp
    f398:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f39c:	f1bb 0f00 	cmp.w	fp, #0
    f3a0:	d107      	bne.n	f3b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f3a2:	ea26 0608 	bic.w	r6, r6, r8
    f3a6:	ea27 0709 	bic.w	r7, r7, r9
    f3aa:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f3ae:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f3b2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f3b6:	ea06 0608 	and.w	r6, r6, r8
    f3ba:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f3be:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f3c0:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f3c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f3c8:	d04e      	beq.n	f468 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f3ca:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f3ce:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f3d2:	b93b      	cbnz	r3, f3e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f3d4:	e9dd 0100 	ldrd	r0, r1, [sp]
    f3d8:	ea40 0008 	orr.w	r0, r0, r8
    f3dc:	ea41 0109 	orr.w	r1, r1, r9
    f3e0:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f3e4:	3201      	adds	r2, #1
    f3e6:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f3e8:	eb18 0808 	adds.w	r8, r8, r8
    f3ec:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f3f0:	4596      	cmp	lr, r2
    f3f2:	4613      	mov	r3, r2
    f3f4:	dd59      	ble.n	f4aa <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f3f6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f3fa:	4606      	mov	r6, r0
    f3fc:	460f      	mov	r7, r1
    f3fe:	ea00 0008 	and.w	r0, r0, r8
    f402:	ea01 0109 	and.w	r1, r1, r9
    f406:	4301      	orrs	r1, r0
    f408:	d1bc      	bne.n	f384 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f40a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f40e:	ea00 0008 	and.w	r0, r0, r8
    f412:	ea01 0109 	and.w	r1, r1, r9
    f416:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f418:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f41c:	eb01 0003 	add.w	r0, r1, r3
    f420:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f424:	d02b      	beq.n	f47e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f426:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f42a:	f1bb 0f00 	cmp.w	fp, #0
    f42e:	d0c0      	beq.n	f3b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f430:	f10b 3bff 	add.w	fp, fp, #4294967295
    f434:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f438:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f43c:	f1bb 0f00 	cmp.w	fp, #0
    f440:	d1b7      	bne.n	f3b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f442:	ea46 0608 	orr.w	r6, r6, r8
    f446:	ea47 0709 	orr.w	r7, r7, r9
    f44a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f44e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f452:	ea46 0608 	orr.w	r6, r6, r8
    f456:	ea47 0709 	orr.w	r7, r7, r9
    f45a:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f45e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f462:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f466:	e7a4      	b.n	f3b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f468:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f46c:	2800      	cmp	r0, #0
    f46e:	d0b9      	beq.n	f3e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f470:	3801      	subs	r0, #1
    f472:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f474:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f478:	2800      	cmp	r0, #0
    f47a:	d0ab      	beq.n	f3d4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f47c:	e7b2      	b.n	f3e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f47e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f482:	ea26 0608 	bic.w	r6, r6, r8
    f486:	ea27 0709 	bic.w	r7, r7, r9
    f48a:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f48e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f492:	e78e      	b.n	f3b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f494:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f498:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f49c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f4a0:	4314      	orrs	r4, r2
    f4a2:	431d      	orrs	r5, r3
    f4a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f4a8:	e6b2      	b.n	f210 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f4ae:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f4b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f4b6:	ea80 000a 	eor.w	r0, r0, sl
    f4ba:	ea81 010b 	eor.w	r1, r1, fp
    f4be:	4002      	ands	r2, r0
    f4c0:	400b      	ands	r3, r1
    f4c2:	ea82 080a 	eor.w	r8, r2, sl
    f4c6:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f4ca:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f4ce:	ea28 000a 	bic.w	r0, r8, sl
    f4d2:	ea29 010b 	bic.w	r1, r9, fp
    f4d6:	ea40 0602 	orr.w	r6, r0, r2
    f4da:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f4de:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f4e2:	e9cd 8900 	strd	r8, r9, [sp]
    f4e6:	ea2a 0808 	bic.w	r8, sl, r8
    f4ea:	ea2b 0909 	bic.w	r9, fp, r9
    f4ee:	ea43 0109 	orr.w	r1, r3, r9
    f4f2:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f4f6:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    f4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f4fc:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f500:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f504:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    f508:	2b00      	cmp	r3, #0
    f50a:	f000 8083 	beq.w	f614 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    f50e:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f512:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    f516:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f51a:	ea03 0907 	and.w	r9, r3, r7
    f51e:	ea29 0101 	bic.w	r1, r9, r1
    f522:	ea02 0806 	and.w	r8, r2, r6
    f526:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f528:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f52c:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f52e:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f532:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f534:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f536:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f53a:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f53e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f542:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f544:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f546:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f54a:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f54e:	fa01 f505 	lsl.w	r5, r1, r5
    f552:	fa20 f203 	lsr.w	r2, r0, r3
    f556:	432a      	orrs	r2, r5
    f558:	f1a3 0520 	sub.w	r5, r3, #32
    f55c:	fa21 f505 	lsr.w	r5, r1, r5
    f560:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    f562:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f566:	f8d4 500d 	ldr.w	r5, [r4, #13]
    f56a:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    f56e:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f572:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f576:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    f578:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f57c:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    f57e:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f582:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f584:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f588:	2101      	movs	r1, #1
    f58a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f58c:	f001 fb24 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f590:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f594:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f596:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f598:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f59c:	2501      	movs	r5, #1
    f59e:	321b      	adds	r2, #27
    f5a0:	4421      	add	r1, r4
    f5a2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    f5a6:	b011      	add	sp, #68	; 0x44
    f5a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f5ac:	f001 bbee 	b.w	10d8c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f5b0:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    f5b4:	f8d4 701f 	ldr.w	r7, [r4, #31]
    f5b8:	f8d4 601b 	ldr.w	r6, [r4, #27]
    f5bc:	42bb      	cmp	r3, r7
    f5be:	bf08      	it	eq
    f5c0:	42b2      	cmpeq	r2, r6
    f5c2:	f47f aea7 	bne.w	f314 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f5c6:	f8d4 2013 	ldr.w	r2, [r4, #19]
    f5ca:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    f5ce:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f5d2:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    f5d6:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f5d8:	ea6f 0903 	mvn.w	r9, r3
    f5dc:	ea6f 0802 	mvn.w	r8, r2
    f5e0:	f1c6 0720 	rsb	r7, r6, #32
    f5e4:	fa28 f306 	lsr.w	r3, r8, r6
    f5e8:	fa09 f707 	lsl.w	r7, r9, r7
    f5ec:	f1a6 0220 	sub.w	r2, r6, #32
    f5f0:	fa29 f202 	lsr.w	r2, r9, r2
    f5f4:	433b      	orrs	r3, r7
    f5f6:	4313      	orrs	r3, r2
    f5f8:	9308      	str	r3, [sp, #32]
    f5fa:	fa29 f306 	lsr.w	r3, r9, r6
    f5fe:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    f600:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f604:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    f608:	4042      	eors	r2, r0
    f60a:	404b      	eors	r3, r1
    f60c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f610:	950b      	str	r5, [sp, #44]	; 0x2c
    f612:	e694      	b.n	f33e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f614:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    f618:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    f61c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f620:	4016      	ands	r6, r2
    f622:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    f624:	ea40 0206 	orr.w	r2, r0, r6
    f628:	ea41 0307 	orr.w	r3, r1, r7
    f62c:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    f630:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    f634:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f636:	46b0      	mov	r8, r6
    f638:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    f63a:	bf08      	it	eq
    f63c:	42b2      	cmpeq	r2, r6
    f63e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    f642:	f43f af64 	beq.w	f50e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    f646:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    f64a:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    f64e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    f652:	d053      	beq.n	f6fc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    f654:	f8df e0c8 	ldr.w	lr, [pc, #200]	; f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    f658:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f65c:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    f660:	433e      	orrs	r6, r7
    f662:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    f666:	ea29 0701 	bic.w	r7, r9, r1
    f66a:	ea28 0600 	bic.w	r6, r8, r0
    f66e:	ea56 0307 	orrs.w	r3, r6, r7
    f672:	f43f af4c 	beq.w	f50e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    f676:	ea48 0200 	orr.w	r2, r8, r0
    f67a:	ea49 0301 	orr.w	r3, r9, r1
    f67e:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f682:	f1bc 0f00 	cmp.w	ip, #0
    f686:	f43f af42 	beq.w	f50e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    f68a:	4e24      	ldr	r6, [pc, #144]	; (f71c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f68c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f68e:	2701      	movs	r7, #1
    f690:	e005      	b.n	f69e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f692:	3501      	adds	r5, #1
    f694:	b2ed      	uxtb	r5, r5
    f696:	4565      	cmp	r5, ip
    f698:	462a      	mov	r2, r5
    f69a:	f6bf af38 	bge.w	f50e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    f69e:	ab10      	add	r3, sp, #64	; 0x40
    f6a0:	442b      	add	r3, r5
    f6a2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d0f3      	beq.n	f692 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f6aa:	fa07 f202 	lsl.w	r2, r7, r2
    f6ae:	b2d2      	uxtb	r2, r2
    f6b0:	2103      	movs	r1, #3
    f6b2:	6830      	ldr	r0, [r6, #0]
    f6b4:	f001 ff86 	bl	115c4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f6b8:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f6bc:	e7e9      	b.n	f692 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    f6be:	2101      	movs	r1, #1
    f6c0:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f6c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f6c6:	f001 fa87 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    f6ca:	4914      	ldr	r1, [pc, #80]	; (f71c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    f6cc:	2300      	movs	r3, #0
    f6ce:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f6d0:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    f6d2:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f6d6:	2102      	movs	r1, #2
    f6d8:	2208      	movs	r2, #8
    f6da:	f001 ff73 	bl	115c4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f6de:	4b10      	ldr	r3, [pc, #64]	; (f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    f6e0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    f6e4:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f6e8:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f6ec:	43d2      	mvns	r2, r2
    f6ee:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    f6f0:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f6f2:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f6f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    f6fa:	e5f0      	b.n	f2de <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    f6fc:	4a08      	ldr	r2, [pc, #32]	; (f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f6fe:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    f702:	ea23 0307 	bic.w	r3, r3, r7
    f706:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    f70a:	e700      	b.n	f50e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f70c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    f710:	2200      	movs	r2, #0
    f712:	2300      	movs	r3, #0
    f714:	e9cd 2300 	strd	r2, r3, [sp]
    f718:	e6c9      	b.n	f4ae <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    f71a:	bf00      	nop
    f71c:	20001f18 	.word	0x20001f18
    f720:	200019d0 	.word	0x200019d0

0000f724 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f724:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f726:	b1c1      	cbz	r1, f75a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    f728:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f72c:	b1aa      	cbz	r2, f75a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    f72e:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    f732:	b192      	cbz	r2, f75a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f734:	4a09      	ldr	r2, [pc, #36]	; (f75c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    f736:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f738:	6812      	ldr	r2, [r2, #0]
    f73a:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f73e:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f742:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f744:	42a2      	cmp	r2, r4
    f746:	d907      	bls.n	f758 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    f748:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f74a:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    f74e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    f752:	bc30      	pop	{r4, r5}
    f754:	f7ff b9c0 	b.w	ead8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    f758:	bc30      	pop	{r4, r5}
    f75a:	4770      	bx	lr
    f75c:	20001be0 	.word	0x20001be0

0000f760 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    f760:	4a0e      	ldr	r2, [pc, #56]	; (f79c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    f762:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    f764:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    f768:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    f76c:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    f770:	43f3      	mvns	r3, r6
    f772:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    f774:	2700      	movs	r7, #0
    f776:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    f77a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    f77e:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f782:	bf15      	itete	ne
    f784:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f788:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f78c:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f78e:	400b      	andeq	r3, r1
    f790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    f794:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    f796:	f7ff bc6f 	b.w	f078 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    f79a:	bf00      	nop
    f79c:	200019d0 	.word	0x200019d0

0000f7a0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f7a0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f7a4:	2b02      	cmp	r3, #2
    f7a6:	d005      	beq.n	f7b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    f7a8:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    f7ac:	b12b      	cbz	r3, f7ba <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    f7ae:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    f7b2:	b913      	cbnz	r3, f7ba <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    f7b4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    f7b8:	4770      	bx	lr
    m_serPort = comInstance;
    f7ba:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    f7bc:	b109      	cbz	r1, f7c2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    f7be:	f7ff b98b 	b.w	ead8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    f7c2:	4b04      	ldr	r3, [pc, #16]	; (f7d4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f7c4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    f7c8:	681b      	ldr	r3, [r3, #0]
    f7ca:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    f7ce:	4608      	mov	r0, r1
    f7d0:	4770      	bx	lr
    f7d2:	bf00      	nop
    f7d4:	20001be0 	.word	0x20001be0

0000f7d8 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    f7d8:	3940      	subs	r1, #64	; 0x40
    f7da:	b28b      	uxth	r3, r1
    f7dc:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    f7de:	bf9d      	ittte	ls
    f7e0:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    f7e4:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    f7e8:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    f7ea:	2000      	movhi	r0, #0
    }
}
    f7ec:	4770      	bx	lr
    f7ee:	bf00      	nop

0000f7f0 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    f7f0:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    f7f2:	f7ff fbb5 	bl	ef60 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    f7f6:	4b01      	ldr	r3, [pc, #4]	; (f7fc <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    f7f8:	6018      	str	r0, [r3, #0]
    f7fa:	bd08      	pop	{r3, pc}
    f7fc:	20001efc 	.word	0x20001efc

0000f800 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    f800:	7980      	ldrb	r0, [r0, #6]
    f802:	4770      	bx	lr

0000f804 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    f804:	2009      	movs	r0, #9
    f806:	4770      	bx	lr

0000f808 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    f808:	7980      	ldrb	r0, [r0, #6]
    }
    f80a:	f1a0 0004 	sub.w	r0, r0, #4
    f80e:	fab0 f080 	clz	r0, r0
    f812:	0940      	lsrs	r0, r0, #5
    f814:	4770      	bx	lr
    f816:	bf00      	nop

0000f818 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    f818:	4770      	bx	lr
    f81a:	bf00      	nop

0000f81c <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    f81c:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    f81e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    f822:	2201      	movs	r2, #1
    f824:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    f828:	f1c5 0420 	rsb	r4, r5, #32
    f82c:	fa22 f404 	lsr.w	r4, r2, r4
    f830:	fa02 f303 	lsl.w	r3, r2, r3
    f834:	4323      	orrs	r3, r4
    f836:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    f838:	2602      	movs	r6, #2
    m_filterLength = 3;
    f83a:	4d07      	ldr	r5, [pc, #28]	; (f858 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    f83c:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    f83e:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    f840:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    f842:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    f844:	6105      	str	r5, [r0, #16]
    f846:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    f848:	6082      	str	r2, [r0, #8]
    f84a:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    f84c:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    f84e:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    f850:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    f852:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    f854:	bc70      	pop	{r4, r5, r6}
    f856:	4770      	bx	lr
    f858:	00010003 	.word	0x00010003

0000f85c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    f85c:	7983      	ldrb	r3, [r0, #6]
    f85e:	428b      	cmp	r3, r1
    f860:	d02f      	beq.n	f8c2 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    f862:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    f864:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    f868:	d014      	beq.n	f894 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    f86a:	2904      	cmp	r1, #4
    f86c:	d10b      	bne.n	f886 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    f86e:	4b16      	ldr	r3, [pc, #88]	; (f8c8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    f870:	681e      	ldr	r6, [r3, #0]
    f872:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    f876:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    f87a:	432b      	orrs	r3, r5
    f87c:	4322      	orrs	r2, r4
    f87e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    f882:	460b      	mov	r3, r1
            m_mode = newMode;
    f884:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    f886:	1ac8      	subs	r0, r1, r3
    f888:	fab0 f080 	clz	r0, r0
    f88c:	0940      	lsrs	r0, r0, #5
}
    f88e:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    f892:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    f894:	4b0c      	ldr	r3, [pc, #48]	; (f8c8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    f896:	681e      	ldr	r6, [r3, #0]
    f898:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    f89c:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    f8a0:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    f8a4:	43d2      	mvns	r2, r2
    f8a6:	43db      	mvns	r3, r3
    f8a8:	4014      	ands	r4, r2
    f8aa:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    f8ac:	ea02 0208 	and.w	r2, r2, r8
    f8b0:	ea03 0309 	and.w	r3, r3, r9
    f8b4:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    f8b8:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    f8bc:	460b      	mov	r3, r1
            m_mode = newMode;
    f8be:	7181      	strb	r1, [r0, #6]
            break;
    f8c0:	e7e1      	b.n	f886 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    f8c2:	2001      	movs	r0, #1
    f8c4:	4770      	bx	lr
    f8c6:	bf00      	nop
    f8c8:	20001efc 	.word	0x20001efc

0000f8cc <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    f8cc:	7983      	ldrb	r3, [r0, #6]
    f8ce:	2b02      	cmp	r3, #2
    f8d0:	d010      	beq.n	f8f4 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    f8d2:	2b04      	cmp	r3, #4
    f8d4:	d10c      	bne.n	f8f0 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    f8d6:	4b0b      	ldr	r3, [pc, #44]	; (f904 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    f8d8:	681b      	ldr	r3, [r3, #0]
    f8da:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    f8de:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    f8e2:	4002      	ands	r2, r0
    f8e4:	400b      	ands	r3, r1
    f8e6:	4313      	orrs	r3, r2
    f8e8:	bf14      	ite	ne
    f8ea:	2001      	movne	r0, #1
    f8ec:	2000      	moveq	r0, #0
            break;
    f8ee:	4770      	bx	lr
    switch (m_mode) {
    f8f0:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    f8f2:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    f8f4:	4b03      	ldr	r3, [pc, #12]	; (f904 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    f8f6:	681b      	ldr	r3, [r3, #0]
    f8f8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    f8fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    f900:	e7ef      	b.n	f8e2 <_ZN9ClearCore7CcioPin5StateEv+0x16>
    f902:	bf00      	nop
    f904:	20001efc 	.word	0x20001efc

0000f908 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    f908:	4b06      	ldr	r3, [pc, #24]	; (f924 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    f90a:	681b      	ldr	r3, [r3, #0]
    f90c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    f910:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    f914:	4002      	ands	r2, r0
    f916:	400b      	ands	r3, r1
    f918:	4313      	orrs	r3, r2
}
    f91a:	bf14      	ite	ne
    f91c:	2001      	movne	r0, #1
    f91e:	2000      	moveq	r0, #0
    f920:	4770      	bx	lr
    f922:	bf00      	nop
    f924:	20001efc 	.word	0x20001efc

0000f928 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    f928:	7983      	ldrb	r3, [r0, #6]
    f92a:	2b04      	cmp	r3, #4
    f92c:	d11c      	bne.n	f968 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    f92e:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    f930:	4b0e      	ldr	r3, [pc, #56]	; (f96c <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    f932:	b969      	cbnz	r1, f950 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    f934:	6819      	ldr	r1, [r3, #0]
    f936:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    f93a:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    f93e:	ea24 0202 	bic.w	r2, r4, r2
    f942:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    f946:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    f948:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    f94c:	bc30      	pop	{r4, r5}
    f94e:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    f950:	6819      	ldr	r1, [r3, #0]
    f952:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    f956:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    f95a:	4322      	orrs	r2, r4
    f95c:	432b      	orrs	r3, r5
    f95e:	2001      	movs	r0, #1
    f960:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    f964:	bc30      	pop	{r4, r5}
    f966:	4770      	bx	lr
    bool success = false;
    f968:	2000      	movs	r0, #0
    f96a:	4770      	bx	lr
    f96c:	20001efc 	.word	0x20001efc

0000f970 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    f970:	b5d0      	push	{r4, r6, r7, lr}
    f972:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    f974:	f7fe fca6 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
    f978:	4b08      	ldr	r3, [pc, #32]	; (f99c <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    f97a:	4909      	ldr	r1, [pc, #36]	; (f9a0 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    f97c:	6023      	str	r3, [r4, #0]
    f97e:	2600      	movs	r6, #0
    f980:	2300      	movs	r3, #0
    f982:	2700      	movs	r7, #0
    f984:	220c      	movs	r2, #12
    f986:	e9c4 6702 	strd	r6, r7, [r4, #8]
    f98a:	6121      	str	r1, [r4, #16]
    f98c:	6162      	str	r2, [r4, #20]
    f98e:	61a3      	str	r3, [r4, #24]
    f990:	61e3      	str	r3, [r4, #28]
    f992:	6223      	str	r3, [r4, #32]
    f994:	6263      	str	r3, [r4, #36]	; 0x24
    f996:	4620      	mov	r0, r4
    f998:	bdd0      	pop	{r4, r6, r7, pc}
    f99a:	bf00      	nop
    f99c:	000231d8 	.word	0x000231d8
    f9a0:	00010003 	.word	0x00010003

0000f9a4 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    f9a6:	4e14      	ldr	r6, [pc, #80]	; (f9f8 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    f9a8:	6834      	ldr	r4, [r6, #0]
    f9aa:	f014 0401 	ands.w	r4, r4, #1
    f9ae:	d002      	beq.n	f9b6 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    f9b0:	4b12      	ldr	r3, [pc, #72]	; (f9fc <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    f9b2:	6818      	ldr	r0, [r3, #0]
    f9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9b6:	2080      	movs	r0, #128	; 0x80
    f9b8:	f003 fbea 	bl	13190 <_Znwj>
    f9bc:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    f9be:	2701      	movs	r7, #1
    f9c0:	2240      	movs	r2, #64	; 0x40
    f9c2:	602c      	str	r4, [r5, #0]
    f9c4:	606c      	str	r4, [r5, #4]
    f9c6:	60ac      	str	r4, [r5, #8]
    f9c8:	60ec      	str	r4, [r5, #12]
    f9ca:	612c      	str	r4, [r5, #16]
    f9cc:	616c      	str	r4, [r5, #20]
    f9ce:	4621      	mov	r1, r4
    f9d0:	61ac      	str	r4, [r5, #24]
    f9d2:	61ec      	str	r4, [r5, #28]
    f9d4:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    f9d6:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    f9d8:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    f9da:	62ec      	str	r4, [r5, #44]	; 0x2c
    f9dc:	632c      	str	r4, [r5, #48]	; 0x30
    f9de:	636c      	str	r4, [r5, #52]	; 0x34
    f9e0:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    f9e4:	303c      	adds	r0, #60	; 0x3c
    f9e6:	f00e fc59 	bl	1e29c <memset>
    static InputManager *instance = new InputManager();
    f9ea:	4b04      	ldr	r3, [pc, #16]	; (f9fc <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    f9ec:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    f9f0:	6037      	str	r7, [r6, #0]
    f9f2:	601d      	str	r5, [r3, #0]
    f9f4:	4628      	mov	r0, r5
}
    f9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9f8:	20001f04 	.word	0x20001f04
    f9fc:	20001f0c 	.word	0x20001f0c

0000fa00 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    fa00:	4902      	ldr	r1, [pc, #8]	; (fa0c <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    fa02:	4a03      	ldr	r2, [pc, #12]	; (fa10 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    fa04:	4b03      	ldr	r3, [pc, #12]	; (fa14 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    fa06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    fa0a:	4770      	bx	lr
    fa0c:	41008020 	.word	0x41008020
    fa10:	410080a0 	.word	0x410080a0
    fa14:	41008120 	.word	0x41008120

0000fa18 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    fa18:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    fa1a:	b2cc      	uxtb	r4, r1
    fa1c:	2c0f      	cmp	r4, #15
    fa1e:	d82e      	bhi.n	fa7e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    fa20:	b1b2      	cbz	r2, fa50 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    fa22:	bb6b      	cbnz	r3, fa80 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    fa24:	2301      	movs	r3, #1
    fa26:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    fa2a:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fa2e:	f3bf 8f5b 	dmb	ish
    fa32:	e853 2f00 	ldrex	r2, [r3]
    fa36:	430a      	orrs	r2, r1
    fa38:	e843 2400 	strex	r4, r2, [r3]
    fa3c:	2c00      	cmp	r4, #0
    fa3e:	d1f8      	bne.n	fa32 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    fa40:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fa44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fa48:	b1cb      	cbz	r3, fa7e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    fa4a:	4b10      	ldr	r3, [pc, #64]	; (fa8c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fa4c:	6119      	str	r1, [r3, #16]
    fa4e:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    fa50:	2301      	movs	r3, #1
    fa52:	fa03 f101 	lsl.w	r1, r3, r1
    fa56:	43ca      	mvns	r2, r1
    fa58:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fa5c:	f3bf 8f5b 	dmb	ish
    fa60:	e853 4f00 	ldrex	r4, [r3]
    fa64:	4014      	ands	r4, r2
    fa66:	e843 4e00 	strex	lr, r4, [r3]
    fa6a:	f1be 0f00 	cmp.w	lr, #0
    fa6e:	d1f7      	bne.n	fa60 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    fa70:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fa74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fa78:	b10b      	cbz	r3, fa7e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    fa7a:	4b04      	ldr	r3, [pc, #16]	; (fa8c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fa7c:	60d9      	str	r1, [r3, #12]
    fa7e:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    fa80:	2201      	movs	r2, #1
    fa82:	4b02      	ldr	r3, [pc, #8]	; (fa8c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fa84:	fa02 f101 	lsl.w	r1, r2, r1
    fa88:	6159      	str	r1, [r3, #20]
    fa8a:	e7ce      	b.n	fa2a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    fa8c:	40002800 	.word	0x40002800

0000fa90 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    fa90:	290f      	cmp	r1, #15
    fa92:	dc14      	bgt.n	fabe <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    fa94:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    fa98:	40cb      	lsrs	r3, r1
    fa9a:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fa9e:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    faa2:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    faa4:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    faa8:	d10a      	bne.n	fac0 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    faaa:	4a0f      	ldr	r2, [pc, #60]	; (fae8 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    faac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    fab0:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fab2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    fab4:	b113      	cbz	r3, fabc <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    fab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    faba:	4718      	bx	r3
    fabc:	bd10      	pop	{r4, pc}
    fabe:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fac0:	43dc      	mvns	r4, r3
    fac2:	f100 0234 	add.w	r2, r0, #52	; 0x34
    fac6:	f3bf 8f5b 	dmb	ish
    faca:	e852 ef00 	ldrex	lr, [r2]
    face:	ea0e 0e04 	and.w	lr, lr, r4
    fad2:	e842 ec00 	strex	ip, lr, [r2]
    fad6:	f1bc 0f00 	cmp.w	ip, #0
    fada:	d1f6      	bne.n	faca <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    fadc:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    fae0:	4a01      	ldr	r2, [pc, #4]	; (fae8 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    fae2:	60d3      	str	r3, [r2, #12]
    fae4:	e7e1      	b.n	faaa <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    fae6:	bf00      	nop
    fae8:	40002800 	.word	0x40002800

0000faec <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    faec:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    faee:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    faf0:	681b      	ldr	r3, [r3, #0]
    faf2:	60c3      	str	r3, [r0, #12]
    faf4:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    faf6:	404b      	eors	r3, r1
    faf8:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fafa:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fafc:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fafe:	6881      	ldr	r1, [r0, #8]
    fb00:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fb02:	4053      	eors	r3, r2
    fb04:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fb06:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fb08:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fb0a:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fb0c:	4053      	eors	r3, r2
    fb0e:	6203      	str	r3, [r0, #32]
    fb10:	4770      	bx	lr
    fb12:	bf00      	nop

0000fb14 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    fb14:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    fb16:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fb18:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fb1a:	f3bf 8f5b 	dmb	ish
    fb1e:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    fb22:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fb26:	e852 1f00 	ldrex	r1, [r2]
    fb2a:	4319      	orrs	r1, r3
    fb2c:	e842 1e00 	strex	lr, r1, [r2]
    fb30:	f1be 0f00 	cmp.w	lr, #0
    fb34:	d1f7      	bne.n	fb26 <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    fb36:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    fb3a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fb3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fb3e:	f3bf 8f5b 	dmb	ish
    fb42:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    fb46:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fb4a:	e852 1f00 	ldrex	r1, [r2]
    fb4e:	4319      	orrs	r1, r3
    fb50:	e842 1e00 	strex	lr, r1, [r2]
    fb54:	f1be 0f00 	cmp.w	lr, #0
    fb58:	d1f7      	bne.n	fb4a <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    fb5a:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    fb5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fb60:	6283      	str	r3, [r0, #40]	; 0x28
    fb62:	f85d fb04 	ldr.w	pc, [sp], #4
    fb66:	bf00      	nop

0000fb68 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    fb68:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    fb6a:	f7ff ff1b 	bl	f9a4 <_ZN9ClearCore12InputManager8InstanceEv>
    fb6e:	4b01      	ldr	r3, [pc, #4]	; (fb74 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    fb70:	6018      	str	r0, [r3, #0]
    fb72:	bd08      	pop	{r3, pc}
    fb74:	20001f08 	.word	0x20001f08

0000fb78 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fb78:	b530      	push	{r4, r5, lr}
    fb7a:	b083      	sub	sp, #12
    fb7c:	9d06      	ldr	r5, [sp, #24]
    fb7e:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
    fb82:	9500      	str	r5, [sp, #0]
    fb84:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fb86:	4604      	mov	r4, r0
      m_errorCode(0) {
    fb88:	2500      	movs	r5, #0
    fb8a:	f000 ffbb 	bl	10b04 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
    fb8e:	4b09      	ldr	r3, [pc, #36]	; (fbb4 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
    fb90:	6023      	str	r3, [r4, #0]
    fb92:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
    fb96:	4620      	mov	r0, r4
    fb98:	2101      	movs	r1, #1
    fb9a:	f001 f811 	bl	10bc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
    fb9e:	462a      	mov	r2, r5
    fba0:	4629      	mov	r1, r5
    fba2:	4620      	mov	r0, r4
    fba4:	f001 f852 	bl	10c4c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
    fba8:	4620      	mov	r0, r4
    fbaa:	f000 ff9f 	bl	10aec <_ZN9ClearCore10SerialBase8PortOpenEv>
}
    fbae:	4620      	mov	r0, r4
    fbb0:	b003      	add	sp, #12
    fbb2:	bd30      	pop	{r4, r5, pc}
    fbb4:	00022b1c 	.word	0x00022b1c

0000fbb8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
    fbb8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fbbc:	4770      	bx	lr
    fbbe:	bf00      	nop

0000fbc0 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
    fbc0:	2300      	movs	r3, #0
    m_outTail = 0;
    fbc2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
    fbc6:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
    fbca:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    fbce:	4770      	bx	lr

0000fbd0 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fbd0:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
    fbd2:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fbd4:	2104      	movs	r1, #4
    m_inTail = 0;
    fbd6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
    fbda:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
    fbdc:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fbe0:	7591      	strb	r1, [r2, #22]
    fbe2:	4770      	bx	lr

0000fbe4 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
    fbe4:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    fbe8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    fbec:	4291      	cmp	r1, r2
    fbee:	d012      	beq.n	fc16 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
    fbf0:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
    fbf2:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
    fbf6:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fbfa:	6904      	ldr	r4, [r0, #16]
    fbfc:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
    fbfe:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
    fc00:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fc02:	2504      	movs	r5, #4
    fc04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
    fc08:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
    fc0c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fc10:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
    fc12:	bc30      	pop	{r4, r5}
    fc14:	4770      	bx	lr
        return SerialBase::EOB;
    fc16:	f04f 30ff 	mov.w	r0, #4294967295
    fc1a:	4770      	bx	lr

0000fc1c <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
    fc1c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    fc20:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    fc24:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
    fc26:	bf1d      	ittte	ne
    fc28:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
    fc2c:	3318      	addne	r3, #24
    fc2e:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
    fc32:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
    fc36:	4770      	bx	lr

0000fc38 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
    fc38:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    fc3c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
    fc40:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
    fc42:	bf48      	it	mi
    fc44:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
    fc46:	4770      	bx	lr

0000fc48 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
    fc48:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    fc4c:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    fc50:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
    fc52:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
    fc54:	bf48      	it	mi
    fc56:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
    fc58:	4770      	bx	lr
    fc5a:	bf00      	nop

0000fc5c <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
    fc5c:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
    fc5e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fc62:	b1b8      	cbz	r0, fc94 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
    fc64:	79d3      	ldrb	r3, [r2, #7]
    fc66:	2b01      	cmp	r3, #1
    fc68:	d015      	beq.n	fc96 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
    fc6a:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
    fc6c:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    fc70:	3401      	adds	r4, #1
    fc72:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
    fc76:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    fc7a:	429c      	cmp	r4, r3
    fc7c:	d0fb      	beq.n	fc76 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
    fc7e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fc82:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
    fc84:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fc86:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
    fc88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
    fc8c:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fc90:	75ae      	strb	r6, [r5, #22]
}
    fc92:	bc70      	pop	{r4, r5, r6}
    fc94:	4770      	bx	lr
        return false;
    fc96:	2000      	movs	r0, #0
    fc98:	4770      	bx	lr
    fc9a:	bf00      	nop

0000fc9c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
    fc9c:	79c3      	ldrb	r3, [r0, #7]
    fc9e:	b113      	cbz	r3, fca6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
    fca0:	2b01      	cmp	r3, #1
    fca2:	d00e      	beq.n	fcc2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
    fca4:	4770      	bx	lr
        while (m_outHead != m_outTail) {
    fca6:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
    fcaa:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    fcae:	429a      	cmp	r2, r3
    fcb0:	d1f9      	bne.n	fca6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
    fcb2:	6902      	ldr	r2, [r0, #16]
    fcb4:	7e13      	ldrb	r3, [r2, #24]
    fcb6:	07d8      	lsls	r0, r3, #31
    fcb8:	d4f4      	bmi.n	fca4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
    fcba:	7e13      	ldrb	r3, [r2, #24]
    fcbc:	0799      	lsls	r1, r3, #30
    fcbe:	d5fc      	bpl.n	fcba <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
    fcc0:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    fcc2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    fcc6:	2b07      	cmp	r3, #7
    fcc8:	d0ec      	beq.n	fca4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
    fcca:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    fcce:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
    fcd0:	b510      	push	{r4, lr}
    fcd2:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    fcd4:	d005      	beq.n	fce2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
    fcd6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    fcda:	b113      	cbz	r3, fce2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    fcdc:	79e3      	ldrb	r3, [r4, #7]
    fcde:	2b01      	cmp	r3, #1
    fce0:	d000      	beq.n	fce4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
    fce2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    fce4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    fce8:	f7fe feda 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    fcec:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    fcee:	079b      	lsls	r3, r3, #30
    fcf0:	d4f1      	bmi.n	fcd6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
    fcf2:	e7f6      	b.n	fce2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

0000fcf4 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fcf8:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
    fcfa:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fcfc:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fcfe:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fd00:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fd04:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fd06:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    fd0a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    fd0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fd12:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fd14:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    fd18:	f36f 0100 	bfc	r1, #0, #1
    fd1c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fd20:	6813      	ldr	r3, [r2, #0]
    fd22:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fd24:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fd26:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fd2a:	d503      	bpl.n	fd34 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    fd2c:	6813      	ldr	r3, [r2, #0]
    fd2e:	f36f 0341 	bfc	r3, #1, #1
    fd32:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    fd34:	69d3      	ldr	r3, [r2, #28]
    fd36:	f013 0302 	ands.w	r3, r3, #2
    fd3a:	d1fb      	bne.n	fd34 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
    fd3c:	6822      	ldr	r2, [r4, #0]
    fd3e:	483a      	ldr	r0, [pc, #232]	; (fe28 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
    fd40:	6811      	ldr	r1, [r2, #0]
    fd42:	4281      	cmp	r1, r0
    fd44:	d165      	bne.n	fe12 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
    fd46:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    fd4a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    fd4e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    fd52:	6853      	ldr	r3, [r2, #4]
    fd54:	4a35      	ldr	r2, [pc, #212]	; (fe2c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    fd56:	4293      	cmp	r3, r2
    fd58:	d162      	bne.n	fe20 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd5a:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
    fd5c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd5e:	2204      	movs	r2, #4
    m_inTail = 0;
    fd60:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
    fd64:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
    fd66:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd6a:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
    fd6c:	79e0      	ldrb	r0, [r4, #7]
    fd6e:	2801      	cmp	r0, #1
    fd70:	d124      	bne.n	fdbc <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
    fd72:	4b2f      	ldr	r3, [pc, #188]	; (fe30 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
    fd74:	443b      	add	r3, r7
    fd76:	fbb3 f3f7 	udiv	r3, r3, r7
    fd7a:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
    fd7c:	2bff      	cmp	r3, #255	; 0xff
    fd7e:	bf92      	itee	ls
    fd80:	b2db      	uxtbls	r3, r3
    fd82:	23ff      	movhi	r3, #255	; 0xff
                success = false;
    fd84:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
    fd86:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
    fd88:	b1b6      	cbz	r6, fdb8 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
    fd8a:	682b      	ldr	r3, [r5, #0]
    fd8c:	f043 0302 	orr.w	r3, r3, #2
    fd90:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    fd92:	69eb      	ldr	r3, [r5, #28]
    fd94:	079b      	lsls	r3, r3, #30
    fd96:	d4fc      	bmi.n	fd92 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fd98:	6a22      	ldr	r2, [r4, #32]
    fd9a:	f992 1001 	ldrsb.w	r1, [r2, #1]
    fd9e:	7893      	ldrb	r3, [r2, #2]
    fda0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    fda4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    fda8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    fdac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    fdb0:	f042 0201 	orr.w	r2, r2, #1
    fdb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
    fdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
    fdbc:	4638      	mov	r0, r7
    fdbe:	f00b fd3f 	bl	1b840 <__aeabi_ui2d>
    fdc2:	2200      	movs	r2, #0
    fdc4:	4b1b      	ldr	r3, [pc, #108]	; (fe34 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
    fdc6:	f00b fdb1 	bl	1b92c <__aeabi_dmul>
    fdca:	4b1b      	ldr	r3, [pc, #108]	; (fe38 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
    fdcc:	4680      	mov	r8, r0
    fdce:	6818      	ldr	r0, [r3, #0]
    fdd0:	4689      	mov	r9, r1
    fdd2:	f00b fd35 	bl	1b840 <__aeabi_ui2d>
    fdd6:	4602      	mov	r2, r0
    fdd8:	460b      	mov	r3, r1
    fdda:	4640      	mov	r0, r8
    fddc:	4649      	mov	r1, r9
    fdde:	f00b fecf 	bl	1bb80 <__aeabi_ddiv>
    fde2:	4602      	mov	r2, r0
    fde4:	460b      	mov	r3, r1
    fde6:	2000      	movs	r0, #0
    fde8:	4914      	ldr	r1, [pc, #80]	; (fe3c <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
    fdea:	f00b fbeb 	bl	1b5c4 <__aeabi_dsub>
    fdee:	2200      	movs	r2, #0
    fdf0:	4b13      	ldr	r3, [pc, #76]	; (fe40 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
    fdf2:	f00b fd9b 	bl	1b92c <__aeabi_dmul>
    fdf6:	f00c f87b 	bl	1bef0 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
    fdfa:	f00b fd43 	bl	1b884 <__aeabi_f2d>
    fdfe:	2200      	movs	r2, #0
    fe00:	4b10      	ldr	r3, [pc, #64]	; (fe44 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
    fe02:	f00b fbe1 	bl	1b5c8 <__adddf3>
    fe06:	f00c f853 	bl	1beb0 <__aeabi_d2uiz>
    fe0a:	b280      	uxth	r0, r0
    fe0c:	81a8      	strh	r0, [r5, #12]
    bool success = true;
    fe0e:	2001      	movs	r0, #1
            break;
    fe10:	e7ba      	b.n	fd88 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
    fe12:	4620      	mov	r0, r4
    fe14:	4788      	blx	r1
    fe16:	6822      	ldr	r2, [r4, #0]
    FlushInput();
    fe18:	6853      	ldr	r3, [r2, #4]
    fe1a:	4a04      	ldr	r2, [pc, #16]	; (fe2c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    fe1c:	4293      	cmp	r3, r2
    fe1e:	d09c      	beq.n	fd5a <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
    fe20:	4620      	mov	r0, r4
    fe22:	4798      	blx	r3
    fe24:	6925      	ldr	r5, [r4, #16]
    fe26:	e7a1      	b.n	fd6c <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
    fe28:	0000fbc1 	.word	0x0000fbc1
    fe2c:	0000fbd1 	.word	0x0000fbd1
    fe30:	004c4b3f 	.word	0x004c4b3f
    fe34:	40300000 	.word	0x40300000
    fe38:	200000e0 	.word	0x200000e0
    fe3c:	3ff00000 	.word	0x3ff00000
    fe40:	40f00000 	.word	0x40f00000
    fe44:	3fe00000 	.word	0x3fe00000

0000fe48 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
    fe48:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    fe4c:	b903      	cbnz	r3, fe50 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
    fe4e:	4770      	bx	lr
void SerialBase::PortClose() {
    fe50:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
    fe52:	6805      	ldr	r5, [r0, #0]
    fe54:	4a3e      	ldr	r2, [pc, #248]	; (ff50 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
    fe56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    fe58:	4293      	cmp	r3, r2
    fe5a:	4604      	mov	r4, r0
    fe5c:	d157      	bne.n	ff0e <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
    fe5e:	79c3      	ldrb	r3, [r0, #7]
    fe60:	2b00      	cmp	r3, #0
    fe62:	d03f      	beq.n	fee4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
    fe64:	2b01      	cmp	r3, #1
    fe66:	d056      	beq.n	ff16 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
    fe68:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
    fe6a:	69a0      	ldr	r0, [r4, #24]
    fe6c:	4939      	ldr	r1, [pc, #228]	; (ff54 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
    fe6e:	f990 3001 	ldrsb.w	r3, [r0, #1]
    fe72:	7886      	ldrb	r6, [r0, #2]
    fe74:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    fe78:	2001      	movs	r0, #1
    fe7a:	40b0      	lsls	r0, r6
    fe7c:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fe7e:	6a20      	ldr	r0, [r4, #32]
    fe80:	f990 3001 	ldrsb.w	r3, [r0, #1]
    fe84:	7880      	ldrb	r0, [r0, #2]
    fe86:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    fe8a:	4403      	add	r3, r0
    fe8c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    fe90:	f36f 0100 	bfc	r1, #0, #1
    fe94:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fe98:	6813      	ldr	r3, [r2, #0]
    fe9a:	079b      	lsls	r3, r3, #30
    fe9c:	d503      	bpl.n	fea6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    fe9e:	6813      	ldr	r3, [r2, #0]
    fea0:	f36f 0341 	bfc	r3, #1, #1
    fea4:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    fea6:	69d3      	ldr	r3, [r2, #28]
    fea8:	f013 0302 	ands.w	r3, r3, #2
    feac:	d1fb      	bne.n	fea6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
    feae:	682a      	ldr	r2, [r5, #0]
    feb0:	4929      	ldr	r1, [pc, #164]	; (ff58 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
    feb2:	428a      	cmp	r2, r1
    feb4:	d124      	bne.n	ff00 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
    feb6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    feba:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    febe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    fec2:	686b      	ldr	r3, [r5, #4]
    fec4:	4a25      	ldr	r2, [pc, #148]	; (ff5c <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
    fec6:	4293      	cmp	r3, r2
    fec8:	d11e      	bne.n	ff08 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    feca:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
    fecc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fece:	2104      	movs	r1, #4
    m_inTail = 0;
    fed0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
    fed4:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
    fed6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    feda:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
    fedc:	2300      	movs	r3, #0
    fede:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    fee2:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
    fee4:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    fee8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    feec:	429a      	cmp	r2, r3
    feee:	d1f9      	bne.n	fee4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
    fef0:	6922      	ldr	r2, [r4, #16]
    fef2:	7e13      	ldrb	r3, [r2, #24]
    fef4:	07d8      	lsls	r0, r3, #31
    fef6:	d4b8      	bmi.n	fe6a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
    fef8:	7e13      	ldrb	r3, [r2, #24]
    fefa:	0799      	lsls	r1, r3, #30
    fefc:	d5fc      	bpl.n	fef8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
    fefe:	e7b4      	b.n	fe6a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
    ff00:	4620      	mov	r0, r4
    ff02:	4790      	blx	r2
    ff04:	6825      	ldr	r5, [r4, #0]
    ff06:	e7dc      	b.n	fec2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
    ff08:	4620      	mov	r0, r4
    ff0a:	4798      	blx	r3
    ff0c:	e7e6      	b.n	fedc <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
    ff0e:	4798      	blx	r3
    ff10:	6922      	ldr	r2, [r4, #16]
    ff12:	6825      	ldr	r5, [r4, #0]
    ff14:	e7a9      	b.n	fe6a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    ff16:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    ff1a:	2807      	cmp	r0, #7
    ff1c:	d0a4      	beq.n	fe68 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
    ff1e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    ff22:	2b07      	cmp	r3, #7
    ff24:	d0a0      	beq.n	fe68 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    ff26:	f7fe fdbb 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    ff2a:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    ff2c:	079a      	lsls	r2, r3, #30
    ff2e:	d5ef      	bpl.n	ff10 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
    ff30:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    ff34:	2b00      	cmp	r3, #0
    ff36:	d0eb      	beq.n	ff10 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
    ff38:	79e3      	ldrb	r3, [r4, #7]
    ff3a:	2b01      	cmp	r3, #1
    ff3c:	d1e8      	bne.n	ff10 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
    ff3e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    ff42:	f7fe fdad 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    ff46:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    ff48:	079a      	lsls	r2, r3, #30
    ff4a:	d4f1      	bmi.n	ff30 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
    ff4c:	e7e0      	b.n	ff10 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
    ff4e:	bf00      	nop
    ff50:	0000fc9d 	.word	0x0000fc9d
    ff54:	41008000 	.word	0x41008000
    ff58:	0000fbc1 	.word	0x0000fbc1
    ff5c:	0000fbd1 	.word	0x0000fbd1

0000ff60 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
    ff60:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
    ff62:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
    ff64:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
    ff66:	2b01      	cmp	r3, #1
    ff68:	d101      	bne.n	ff6e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
    ff6a:	2000      	movs	r0, #0
    ff6c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff6e:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ff70:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff72:	f991 4001 	ldrsb.w	r4, [r1, #1]
    ff76:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ff78:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff7a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
    ff7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ff82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ff86:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff8a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ff8e:	f36f 0100 	bfc	r1, #0, #1
    ff92:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    ff96:	6813      	ldr	r3, [r2, #0]
    ff98:	0799      	lsls	r1, r3, #30
    ff9a:	d503      	bpl.n	ffa4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    ff9c:	6813      	ldr	r3, [r2, #0]
    ff9e:	f36f 0341 	bfc	r3, #1, #1
    ffa2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    ffa4:	69d3      	ldr	r3, [r2, #28]
    ffa6:	f013 0302 	ands.w	r3, r3, #2
    ffaa:	d1fb      	bne.n	ffa4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
    ffac:	6802      	ldr	r2, [r0, #0]
    ffae:	4604      	mov	r4, r0
    ffb0:	6811      	ldr	r1, [r2, #0]
    ffb2:	4825      	ldr	r0, [pc, #148]	; (10048 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
    ffb4:	4281      	cmp	r1, r0
    ffb6:	d142      	bne.n	1003e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
    ffb8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    ffbc:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    ffc0:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    ffc4:	6853      	ldr	r3, [r2, #4]
    ffc6:	4a21      	ldr	r2, [pc, #132]	; (1004c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
    ffc8:	4293      	cmp	r3, r2
    ffca:	d134      	bne.n	10036 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ffcc:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
    ffce:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ffd0:	2104      	movs	r1, #4
    m_inTail = 0;
    ffd2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
    ffd6:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
    ffd8:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ffdc:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
    ffde:	7923      	ldrb	r3, [r4, #4]
    ffe0:	2b02      	cmp	r3, #2
    ffe2:	d023      	beq.n	1002c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
    ffe4:	6811      	ldr	r1, [r2, #0]
    ffe6:	2001      	movs	r0, #1
    ffe8:	f360 611b 	bfi	r1, r0, #24, #4
    ffec:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
    ffee:	6851      	ldr	r1, [r2, #4]
    fff0:	f363 314d 	bfi	r1, r3, #13, #1
    fff4:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
    fff6:	b1bd      	cbz	r5, 10028 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
    fff8:	6813      	ldr	r3, [r2, #0]
    fffa:	f043 0302 	orr.w	r3, r3, #2
    fffe:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10000:	69d3      	ldr	r3, [r2, #28]
   10002:	079b      	lsls	r3, r3, #30
   10004:	d4fc      	bmi.n	10000 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10006:	6a22      	ldr	r2, [r4, #32]
   10008:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1000c:	7893      	ldrb	r3, [r2, #2]
   1000e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10012:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10016:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1001a:	2001      	movs	r0, #1
   1001c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10020:	4302      	orrs	r2, r0
   10022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10026:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10028:	2001      	movs	r0, #1
}
   1002a:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   1002c:	6813      	ldr	r3, [r2, #0]
   1002e:	f36f 631b 	bfc	r3, #24, #4
   10032:	6013      	str	r3, [r2, #0]
   10034:	e7df      	b.n	fff6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   10036:	4620      	mov	r0, r4
   10038:	4798      	blx	r3
   1003a:	6922      	ldr	r2, [r4, #16]
   1003c:	e7cf      	b.n	ffde <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   1003e:	4620      	mov	r0, r4
   10040:	4788      	blx	r1
   10042:	6822      	ldr	r2, [r4, #0]
   10044:	e7be      	b.n	ffc4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   10046:	bf00      	nop
   10048:	0000fbc1 	.word	0x0000fbc1
   1004c:	0000fbd1 	.word	0x0000fbd1

00010050 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   10050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   10052:	1f4b      	subs	r3, r1, #5
   10054:	2b04      	cmp	r3, #4
   10056:	d85d      	bhi.n	10114 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10058:	79c3      	ldrb	r3, [r0, #7]
   1005a:	2b01      	cmp	r3, #1
   1005c:	d056      	beq.n	1010c <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1005e:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10060:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10062:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10066:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10068:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1006a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1006e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10072:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10076:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10078:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   1007c:	f36f 0400 	bfc	r4, #0, #1
   10080:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10084:	6813      	ldr	r3, [r2, #0]
   10086:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10088:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1008c:	d503      	bpl.n	10096 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1008e:	6813      	ldr	r3, [r2, #0]
   10090:	f36f 0341 	bfc	r3, #1, #1
   10094:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10096:	69d3      	ldr	r3, [r2, #28]
   10098:	f013 0302 	ands.w	r3, r3, #2
   1009c:	d1fb      	bne.n	10096 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   1009e:	6802      	ldr	r2, [r0, #0]
   100a0:	460f      	mov	r7, r1
   100a2:	6816      	ldr	r6, [r2, #0]
   100a4:	4921      	ldr	r1, [pc, #132]	; (1012c <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   100a6:	428e      	cmp	r6, r1
   100a8:	4604      	mov	r4, r0
   100aa:	d13b      	bne.n	10124 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   100ac:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   100b0:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   100b4:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   100b8:	6853      	ldr	r3, [r2, #4]
   100ba:	4a1d      	ldr	r2, [pc, #116]	; (10130 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   100bc:	4293      	cmp	r3, r2
   100be:	d12d      	bne.n	1011c <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100c0:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   100c2:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100c4:	2104      	movs	r1, #4
    m_inTail = 0;
   100c6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   100ca:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   100cc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100d0:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   100d2:	6853      	ldr	r3, [r2, #4]
   100d4:	f367 0302 	bfi	r3, r7, #0, #3
   100d8:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   100da:	b1ed      	cbz	r5, 10118 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   100dc:	6813      	ldr	r3, [r2, #0]
   100de:	f043 0302 	orr.w	r3, r3, #2
   100e2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   100e4:	69d3      	ldr	r3, [r2, #28]
   100e6:	079b      	lsls	r3, r3, #30
   100e8:	d4fc      	bmi.n	100e4 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100ea:	6a22      	ldr	r2, [r4, #32]
   100ec:	f992 1001 	ldrsb.w	r1, [r2, #1]
   100f0:	7893      	ldrb	r3, [r2, #2]
   100f2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   100f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   100fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   100fe:	2001      	movs	r0, #1
   10100:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10104:	4302      	orrs	r2, r0
   10106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1010a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   1010c:	f1a1 0308 	sub.w	r3, r1, #8
   10110:	2b01      	cmp	r3, #1
   10112:	d9a4      	bls.n	1005e <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   10114:	2000      	movs	r0, #0
   10116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10118:	2001      	movs	r0, #1
}
   1011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   1011c:	4620      	mov	r0, r4
   1011e:	4798      	blx	r3
   10120:	6922      	ldr	r2, [r4, #16]
   10122:	e7d6      	b.n	100d2 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   10124:	47b0      	blx	r6
   10126:	6822      	ldr	r2, [r4, #0]
   10128:	e7c6      	b.n	100b8 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   1012a:	bf00      	nop
   1012c:	0000fbc1 	.word	0x0000fbc1
   10130:	0000fbd1 	.word	0x0000fbd1

00010134 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   10134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   10136:	1e4c      	subs	r4, r1, #1
   10138:	b2e4      	uxtb	r4, r4
   1013a:	2c01      	cmp	r4, #1
   1013c:	d901      	bls.n	10142 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   1013e:	2000      	movs	r0, #0
}
   10140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   10142:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   10144:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   10146:	b10d      	cbz	r5, 1014c <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   10148:	2001      	movs	r0, #1
   1014a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1014c:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1014e:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10150:	f991 7001 	ldrsb.w	r7, [r1, #1]
   10154:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10156:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10158:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   1015c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10160:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10164:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10168:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1016c:	f365 0100 	bfi	r1, r5, #0, #1
   10170:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10174:	6813      	ldr	r3, [r2, #0]
   10176:	0799      	lsls	r1, r3, #30
   10178:	d503      	bpl.n	10182 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1017a:	6813      	ldr	r3, [r2, #0]
   1017c:	f365 0341 	bfi	r3, r5, #1, #1
   10180:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10182:	69d3      	ldr	r3, [r2, #28]
   10184:	f013 0302 	ands.w	r3, r3, #2
   10188:	d1fb      	bne.n	10182 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   1018a:	6802      	ldr	r2, [r0, #0]
   1018c:	4605      	mov	r5, r0
   1018e:	6811      	ldr	r1, [r2, #0]
   10190:	481d      	ldr	r0, [pc, #116]	; (10208 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10192:	4281      	cmp	r1, r0
   10194:	d130      	bne.n	101f8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10196:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1019a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   1019e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   101a2:	6853      	ldr	r3, [r2, #4]
   101a4:	4a19      	ldr	r2, [pc, #100]	; (1020c <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   101a6:	4293      	cmp	r3, r2
   101a8:	d12a      	bne.n	10200 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101aa:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   101ac:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101ae:	2104      	movs	r1, #4
    m_inTail = 0;
   101b0:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   101b4:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   101b6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101ba:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   101bc:	6853      	ldr	r3, [r2, #4]
   101be:	f364 1386 	bfi	r3, r4, #6, #1
   101c2:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   101c4:	2e00      	cmp	r6, #0
   101c6:	d0bf      	beq.n	10148 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   101c8:	6813      	ldr	r3, [r2, #0]
   101ca:	f043 0302 	orr.w	r3, r3, #2
   101ce:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   101d0:	69d3      	ldr	r3, [r2, #28]
   101d2:	079b      	lsls	r3, r3, #30
   101d4:	d4fc      	bmi.n	101d0 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101d6:	6a2a      	ldr	r2, [r5, #32]
   101d8:	f992 1001 	ldrsb.w	r1, [r2, #1]
   101dc:	7893      	ldrb	r3, [r2, #2]
   101de:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   101e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   101e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   101ea:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   101f0:	4302      	orrs	r2, r0
   101f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   101f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   101f8:	4628      	mov	r0, r5
   101fa:	4788      	blx	r1
   101fc:	682a      	ldr	r2, [r5, #0]
   101fe:	e7d0      	b.n	101a2 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10200:	4628      	mov	r0, r5
   10202:	4798      	blx	r3
   10204:	692a      	ldr	r2, [r5, #16]
   10206:	e7d9      	b.n	101bc <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10208:	0000fbc1 	.word	0x0000fbc1
   1020c:	0000fbd1 	.word	0x0000fbd1

00010210 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   10214:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   10216:	682b      	ldr	r3, [r5, #0]
   10218:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   1021c:	b089      	sub	sp, #36	; 0x24
   1021e:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10220:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   10222:	69eb      	ldr	r3, [r5, #28]
   10224:	f013 0301 	ands.w	r3, r3, #1
   10228:	d1fb      	bne.n	10222 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   1022a:	6822      	ldr	r2, [r4, #0]
   1022c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10304 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10230:	6811      	ldr	r1, [r2, #0]
   10232:	4541      	cmp	r1, r8
   10234:	d153      	bne.n	102de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   10236:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1023a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1023e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10242:	6853      	ldr	r3, [r2, #4]
   10244:	4a28      	ldr	r2, [pc, #160]	; (102e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   10246:	4293      	cmp	r3, r2
   10248:	d122      	bne.n	10290 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   1024a:	2200      	movs	r2, #0
    m_inTail = 0;
   1024c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10250:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10252:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10254:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10258:	4a24      	ldr	r2, [pc, #144]	; (102ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1025a:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   1025c:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1025e:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10260:	d01c      	beq.n	1029c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10262:	4a23      	ldr	r2, [pc, #140]	; (102f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10264:	4293      	cmp	r3, r2
   10266:	f000 8310 	beq.w	1088a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   1026a:	4a22      	ldr	r2, [pc, #136]	; (102f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   1026c:	4293      	cmp	r3, r2
   1026e:	f000 8341 	beq.w	108f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10272:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10276:	f000 839a 	beq.w	109ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   1027a:	4a1f      	ldr	r2, [pc, #124]	; (102f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   1027c:	4293      	cmp	r3, r2
   1027e:	d043      	beq.n	10308 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10280:	4a1e      	ldr	r2, [pc, #120]	; (102fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10282:	4293      	cmp	r3, r2
   10284:	f000 8372 	beq.w	1096c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10288:	2000      	movs	r0, #0
}
   1028a:	b009      	add	sp, #36	; 0x24
   1028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   10290:	4620      	mov	r0, r4
   10292:	4798      	blx	r3
   10294:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   10296:	4a15      	ldr	r2, [pc, #84]	; (102ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   10298:	4293      	cmp	r3, r2
   1029a:	d1e2      	bne.n	10262 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1029c:	2203      	movs	r2, #3
   1029e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   102a2:	4a17      	ldr	r2, [pc, #92]	; (10300 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   102a4:	9207      	str	r2, [sp, #28]
   102a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   102aa:	9206      	str	r2, [sp, #24]
   102ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   102b0:	9202      	str	r2, [sp, #8]
   102b2:	2231      	movs	r2, #49	; 0x31
   102b4:	9205      	str	r2, [sp, #20]
   102b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   102ba:	9201      	str	r2, [sp, #4]
   102bc:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   102be:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   102c0:	2601      	movs	r6, #1
   102c2:	f04f 092e 	mov.w	r9, #46	; 0x2e
   102c6:	9204      	str	r2, [sp, #16]
   102c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   102cc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   102d0:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   102d2:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   102d6:	f04f 0a07 	mov.w	sl, #7
   102da:	9200      	str	r2, [sp, #0]
   102dc:	e02f      	b.n	1033e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   102de:	4620      	mov	r0, r4
   102e0:	4788      	blx	r1
   102e2:	6822      	ldr	r2, [r4, #0]
   102e4:	e7ad      	b.n	10242 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   102e6:	bf00      	nop
   102e8:	0000fbd1 	.word	0x0000fbd1
   102ec:	40003000 	.word	0x40003000
   102f0:	41012000 	.word	0x41012000
   102f4:	41014000 	.word	0x41014000
   102f8:	43000400 	.word	0x43000400
   102fc:	43000c00 	.word	0x43000c00
   10300:	00200500 	.word	0x00200500
   10304:	0000fbc1 	.word	0x0000fbc1
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10308:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1030c:	9207      	str	r2, [sp, #28]
   1030e:	9206      	str	r2, [sp, #24]
   10310:	2220      	movs	r2, #32
   10312:	9202      	str	r2, [sp, #8]
   10314:	2245      	movs	r2, #69	; 0x45
   10316:	9205      	str	r2, [sp, #20]
   10318:	2210      	movs	r2, #16
   1031a:	9201      	str	r2, [sp, #4]
   1031c:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1031e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10320:	2602      	movs	r6, #2
   10322:	f04f 0942 	mov.w	r9, #66	; 0x42
   10326:	9204      	str	r2, [sp, #16]
   10328:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1032a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1032e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10332:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   10334:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10338:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1033c:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   1033e:	6a21      	ldr	r1, [r4, #32]
   10340:	f991 2001 	ldrsb.w	r2, [r1, #1]
   10344:	f891 b002 	ldrb.w	fp, [r1, #2]
   10348:	01d2      	lsls	r2, r2, #7
   1034a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   1034e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10352:	f04f 0e01 	mov.w	lr, #1
   10356:	fa0e fc0b 	lsl.w	ip, lr, fp
   1035a:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   1035e:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10362:	f894 c007 	ldrb.w	ip, [r4, #7]
   10366:	45f4      	cmp	ip, lr
   10368:	f040 819d 	bne.w	106a6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1036c:	4dc4      	ldr	r5, [pc, #784]	; (10680 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   1036e:	4ac5      	ldr	r2, [pc, #788]	; (10684 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10370:	f107 0e20 	add.w	lr, r7, #32
   10374:	3620      	adds	r6, #32
   10376:	9f00      	ldr	r7, [sp, #0]
   10378:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   1037c:	9f01      	ldr	r7, [sp, #4]
   1037e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10382:	9f02      	ldr	r7, [sp, #8]
   10384:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10388:	f10a 0e20 	add.w	lr, sl, #32
   1038c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10390:	f36f 1586 	bfc	r5, #6, #1
   10394:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10398:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1039c:	066d      	lsls	r5, r5, #25
   1039e:	d4fb      	bmi.n	10398 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   103a0:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   103a4:	4eb7      	ldr	r6, [pc, #732]	; (10684 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   103a6:	f04f 0c07 	mov.w	ip, #7
   103aa:	f36c 0503 	bfi	r5, ip, #0, #4
   103ae:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   103b2:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   103b6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   103ba:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   103be:	6875      	ldr	r5, [r6, #4]
   103c0:	f015 051c 	ands.w	r5, r5, #28
   103c4:	d1fb      	bne.n	103be <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   103c6:	681a      	ldr	r2, [r3, #0]
   103c8:	2603      	movs	r6, #3
   103ca:	f366 0284 	bfi	r2, r6, #2, #3
   103ce:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   103d0:	681a      	ldr	r2, [r3, #0]
   103d2:	7a26      	ldrb	r6, [r4, #8]
   103d4:	f366 725d 	bfi	r2, r6, #29, #1
   103d8:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   103da:	681a      	ldr	r2, [r3, #0]
   103dc:	7a66      	ldrb	r6, [r4, #9]
   103de:	f366 721c 	bfi	r2, r6, #28, #1
   103e2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   103e4:	681a      	ldr	r2, [r3, #0]
   103e6:	f365 621b 	bfi	r2, r5, #24, #4
   103ea:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   103ec:	6962      	ldr	r2, [r4, #20]
   103ee:	681e      	ldr	r6, [r3, #0]
   103f0:	7a52      	ldrb	r2, [r2, #9]
   103f2:	f362 5615 	bfi	r6, r2, #20, #2
   103f6:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   103f8:	7a49      	ldrb	r1, [r1, #9]
   103fa:	681a      	ldr	r2, [r3, #0]
   103fc:	2900      	cmp	r1, #0
   103fe:	bf0c      	ite	eq
   10400:	2100      	moveq	r1, #0
   10402:	2102      	movne	r1, #2
   10404:	f361 4211 	bfi	r2, r1, #16, #2
   10408:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   1040a:	685a      	ldr	r2, [r3, #4]
   1040c:	79a1      	ldrb	r1, [r4, #6]
   1040e:	f361 0202 	bfi	r2, r1, #0, #3
   10412:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   10414:	681a      	ldr	r2, [r3, #0]
   10416:	f365 729e 	bfi	r2, r5, #30, #1
   1041a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   1041c:	681a      	ldr	r2, [r3, #0]
   1041e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   10422:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   10424:	685a      	ldr	r2, [r3, #4]
   10426:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1042a:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   1042c:	685a      	ldr	r2, [r3, #4]
   1042e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   10432:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10434:	69a3      	ldr	r3, [r4, #24]
   10436:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   1043a:	789a      	ldrb	r2, [r3, #2]
   1043c:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10440:	01db      	lsls	r3, r3, #7
   10442:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10446:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1044a:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   1044e:	07d7      	lsls	r7, r2, #31
   10450:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   10454:	bf4c      	ite	mi
   10456:	f366 1507 	bfimi	r5, r6, #4, #4
   1045a:	f366 0503 	bfipl	r5, r6, #0, #4
   1045e:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10462:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10464:	2901      	cmp	r1, #1
   10466:	f240 822f 	bls.w	108c8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   1046a:	2902      	cmp	r1, #2
   1046c:	d10a      	bne.n	10484 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1046e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10472:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10476:	4413      	add	r3, r2
   10478:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1047c:	f042 0201 	orr.w	r2, r2, #1
   10480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10484:	2807      	cmp	r0, #7
   10486:	d031      	beq.n	104ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10488:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1048c:	2b07      	cmp	r3, #7
   1048e:	d02d      	beq.n	104ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10490:	f7fe fb06 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10494:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10496:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10498:	f023 0302 	bic.w	r3, r3, #2
   1049c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1049e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   104a0:	6803      	ldr	r3, [r0, #0]
   104a2:	2b01      	cmp	r3, #1
   104a4:	d0fc      	beq.n	104a0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   104a6:	9b06      	ldr	r3, [sp, #24]
   104a8:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   104aa:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   104ae:	f7fe fb01 	bl	eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   104b2:	2300      	movs	r3, #0
   104b4:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   104b6:	6923      	ldr	r3, [r4, #16]
   104b8:	3328      	adds	r3, #40	; 0x28
   104ba:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   104bc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   104c0:	f7fe faee 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   104c4:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   104c6:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   104c8:	f023 0302 	bic.w	r3, r3, #2
   104cc:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   104ce:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   104d0:	6803      	ldr	r3, [r0, #0]
   104d2:	2b01      	cmp	r3, #1
   104d4:	d0fc      	beq.n	104d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   104d6:	9b07      	ldr	r3, [sp, #28]
   104d8:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   104da:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   104de:	f7fe fae9 	bl	eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   104e2:	2300      	movs	r3, #0
   104e4:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   104e6:	6923      	ldr	r3, [r4, #16]
   104e8:	3328      	adds	r3, #40	; 0x28
   104ea:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   104ec:	6820      	ldr	r0, [r4, #0]
   104ee:	4a66      	ldr	r2, [pc, #408]	; (10688 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   104f0:	6903      	ldr	r3, [r0, #16]
   104f2:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   104f6:	4293      	cmp	r3, r2
   104f8:	f040 81bd 	bne.w	10876 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   104fc:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   104fe:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10500:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10504:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10506:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10508:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   1050c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10510:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10514:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10518:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1051c:	f36f 0100 	bfc	r1, #0, #1
   10520:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10524:	6813      	ldr	r3, [r2, #0]
   10526:	0799      	lsls	r1, r3, #30
   10528:	d503      	bpl.n	10532 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1052a:	6813      	ldr	r3, [r2, #0]
   1052c:	f36f 0341 	bfc	r3, #1, #1
   10530:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10532:	69d3      	ldr	r3, [r2, #28]
   10534:	f013 0302 	ands.w	r3, r3, #2
   10538:	d1fb      	bne.n	10532 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   1053a:	6802      	ldr	r2, [r0, #0]
   1053c:	4542      	cmp	r2, r8
   1053e:	f040 8211 	bne.w	10964 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10542:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10546:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1054a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1054e:	6843      	ldr	r3, [r0, #4]
   10550:	4a4e      	ldr	r2, [pc, #312]	; (1068c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10552:	4293      	cmp	r3, r2
   10554:	f040 8202 	bne.w	1095c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10558:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   1055a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1055c:	2204      	movs	r2, #4
    m_inTail = 0;
   1055e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10562:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10564:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10568:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1056a:	79e3      	ldrb	r3, [r4, #7]
   1056c:	2b01      	cmp	r3, #1
   1056e:	f040 8150 	bne.w	10812 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10572:	4b47      	ldr	r3, [pc, #284]	; (10690 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10574:	444b      	add	r3, r9
   10576:	fbb3 f3f9 	udiv	r3, r3, r9
   1057a:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   1057c:	2bff      	cmp	r3, #255	; 0xff
   1057e:	bf28      	it	cs
   10580:	23ff      	movcs	r3, #255	; 0xff
   10582:	b2db      	uxtb	r3, r3
   10584:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10586:	2e00      	cmp	r6, #0
   10588:	f000 816f 	beq.w	1086a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1058c:	682b      	ldr	r3, [r5, #0]
   1058e:	f043 0302 	orr.w	r3, r3, #2
   10592:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10594:	69eb      	ldr	r3, [r5, #28]
   10596:	079b      	lsls	r3, r3, #30
   10598:	d4fc      	bmi.n	10594 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1059a:	6a22      	ldr	r2, [r4, #32]
   1059c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   105a0:	7890      	ldrb	r0, [r2, #2]
   105a2:	01db      	lsls	r3, r3, #7
   105a4:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   105a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   105ac:	4402      	add	r2, r0
   105ae:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   105b2:	f041 0101 	orr.w	r1, r1, #1
   105b6:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   105ba:	69a6      	ldr	r6, [r4, #24]
   105bc:	4a35      	ldr	r2, [pc, #212]	; (10694 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   105be:	f996 1001 	ldrsb.w	r1, [r6, #1]
   105c2:	78b7      	ldrb	r7, [r6, #2]
   105c4:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   105c8:	2601      	movs	r6, #1
   105ca:	40be      	lsls	r6, r7
   105cc:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   105ce:	6961      	ldr	r1, [r4, #20]
   105d0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   105d4:	f891 c002 	ldrb.w	ip, [r1, #2]
   105d8:	f991 e001 	ldrsb.w	lr, [r1, #1]
   105dc:	f01c 0f01 	tst.w	ip, #1
   105e0:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   105e4:	f000 8108 	beq.w	107f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   105e8:	4472      	add	r2, lr
   105ea:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   105ee:	f006 060f 	and.w	r6, r6, #15
   105f2:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   105f6:	f366 1107 	bfi	r1, r6, #4, #4
   105fa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   105fe:	4925      	ldr	r1, [pc, #148]	; (10694 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10600:	eb01 020e 	add.w	r2, r1, lr
   10604:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10608:	2701      	movs	r7, #1
   1060a:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1060e:	f04f 0803 	mov.w	r8, #3
   10612:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10616:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10618:	69e2      	ldr	r2, [r4, #28]
   1061a:	7894      	ldrb	r4, [r2, #2]
   1061c:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10620:	01d2      	lsls	r2, r2, #7
   10622:	4411      	add	r1, r2
   10624:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10628:	f014 0f01 	tst.w	r4, #1
   1062c:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10630:	bf14      	ite	ne
   10632:	f366 1707 	bfine	r7, r6, #4, #4
   10636:	f366 0703 	bfieq	r7, r6, #0, #4
   1063a:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   1063e:	4915      	ldr	r1, [pc, #84]	; (10694 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10640:	440a      	add	r2, r1
   10642:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10644:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10646:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10648:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   1064c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10650:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10654:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10658:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1065a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1065e:	bf4c      	ite	mi
   10660:	f366 1207 	bfimi	r2, r6, #4, #4
   10664:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10668:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1066a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1066e:	2201      	movs	r2, #1
   10670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10674:	682b      	ldr	r3, [r5, #0]
   10676:	f043 0302 	orr.w	r3, r3, #2
   1067a:	602b      	str	r3, [r5, #0]
   1067c:	e00c      	b.n	10698 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   1067e:	bf00      	nop
   10680:	e000e100 	.word	0xe000e100
   10684:	40001c00 	.word	0x40001c00
   10688:	0000fcf5 	.word	0x0000fcf5
   1068c:	0000fbd1 	.word	0x0000fbd1
   10690:	004c4b3f 	.word	0x004c4b3f
   10694:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10698:	69eb      	ldr	r3, [r5, #28]
   1069a:	079b      	lsls	r3, r3, #30
   1069c:	d4fc      	bmi.n	10698 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   1069e:	2001      	movs	r0, #1
}
   106a0:	b009      	add	sp, #36	; 0x24
   106a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   106a6:	6829      	ldr	r1, [r5, #0]
   106a8:	f36e 0184 	bfi	r1, lr, #2, #3
   106ac:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   106ae:	6829      	ldr	r1, [r5, #0]
   106b0:	f36f 314f 	bfc	r1, #13, #3
   106b4:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   106b6:	6829      	ldr	r1, [r5, #0]
   106b8:	f36f 711c 	bfc	r1, #28, #1
   106bc:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   106be:	6829      	ldr	r1, [r5, #0]
   106c0:	f36e 5115 	bfi	r1, lr, #20, #2
   106c4:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   106c6:	f1bc 0f00 	cmp.w	ip, #0
   106ca:	d104      	bne.n	106d6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   106cc:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   106d0:	2900      	cmp	r1, #0
   106d2:	f040 81af 	bne.w	10a34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   106d6:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   106d8:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   106da:	f362 0302 	bfi	r3, r2, #0, #3
   106de:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   106e0:	682b      	ldr	r3, [r5, #0]
   106e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   106e6:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   106e8:	7923      	ldrb	r3, [r4, #4]
   106ea:	2b02      	cmp	r3, #2
   106ec:	f000 817c 	beq.w	109e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   106f0:	682a      	ldr	r2, [r5, #0]
   106f2:	2101      	movs	r1, #1
   106f4:	f361 621b 	bfi	r2, r1, #24, #4
   106f8:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   106fa:	686a      	ldr	r2, [r5, #4]
   106fc:	f363 324d 	bfi	r2, r3, #13, #1
   10700:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10702:	7963      	ldrb	r3, [r4, #5]
   10704:	686a      	ldr	r2, [r5, #4]
   10706:	3b01      	subs	r3, #1
   10708:	f363 1286 	bfi	r2, r3, #6, #1
   1070c:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   1070e:	686b      	ldr	r3, [r5, #4]
   10710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10714:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10716:	686b      	ldr	r3, [r5, #4]
   10718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1071c:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   1071e:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10720:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10722:	f36f 2349 	bfc	r3, #9, #1
   10726:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10728:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   1072a:	69eb      	ldr	r3, [r5, #28]
   1072c:	075b      	lsls	r3, r3, #29
   1072e:	d4fc      	bmi.n	1072a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10730:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10734:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10736:	4bb7      	ldr	r3, [pc, #732]	; (10a14 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10738:	9a04      	ldr	r2, [sp, #16]
   1073a:	441a      	add	r2, r3
   1073c:	4610      	mov	r0, r2
   1073e:	9a05      	ldr	r2, [sp, #20]
   10740:	eb03 0109 	add.w	r1, r3, r9
   10744:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10746:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10748:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1074a:	9f00      	ldr	r7, [sp, #0]
   1074c:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10750:	2220      	movs	r2, #32
   10752:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10756:	9901      	ldr	r1, [sp, #4]
   10758:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1075c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10760:	9a02      	ldr	r2, [sp, #8]
   10762:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10766:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   1076a:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   1076e:	69a3      	ldr	r3, [r4, #24]
   10770:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10774:	789a      	ldrb	r2, [r3, #2]
   10776:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1077a:	01db      	lsls	r3, r3, #7
   1077c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10780:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10784:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10788:	07d6      	lsls	r6, r2, #31
   1078a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   1078e:	bf4c      	ite	mi
   10790:	f365 1007 	bfimi	r0, r5, #4, #4
   10794:	f365 0003 	bfipl	r0, r5, #0, #4
   10798:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   1079c:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   1079e:	2901      	cmp	r1, #1
   107a0:	f240 80c7 	bls.w	10932 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   107a4:	2902      	cmp	r1, #2
   107a6:	d10a      	bne.n	107be <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   107a8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   107ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   107b0:	4413      	add	r3, r2
   107b2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   107b6:	f042 0201 	orr.w	r2, r2, #1
   107ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   107be:	f10a 0e20 	add.w	lr, sl, #32
   107c2:	4a95      	ldr	r2, [pc, #596]	; (10a18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   107c4:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   107c8:	f36f 1386 	bfc	r3, #6, #1
   107cc:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   107d0:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   107d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   107d8:	2b00      	cmp	r3, #0
   107da:	d1f9      	bne.n	107d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   107dc:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   107e0:	f363 0103 	bfi	r1, r3, #0, #4
   107e4:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   107e8:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   107ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   107f0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   107f4:	6853      	ldr	r3, [r2, #4]
   107f6:	e679      	b.n	104ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   107f8:	eb02 010e 	add.w	r1, r2, lr
   107fc:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10800:	f006 060f 	and.w	r6, r6, #15
   10804:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10808:	f366 0203 	bfi	r2, r6, #0, #4
   1080c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10810:	e6f5      	b.n	105fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10812:	4648      	mov	r0, r9
   10814:	f00b f814 	bl	1b840 <__aeabi_ui2d>
   10818:	2200      	movs	r2, #0
   1081a:	4b80      	ldr	r3, [pc, #512]	; (10a1c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   1081c:	f00b f886 	bl	1b92c <__aeabi_dmul>
   10820:	4b7f      	ldr	r3, [pc, #508]	; (10a20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10822:	4680      	mov	r8, r0
   10824:	6818      	ldr	r0, [r3, #0]
   10826:	4689      	mov	r9, r1
   10828:	f00b f80a 	bl	1b840 <__aeabi_ui2d>
   1082c:	4602      	mov	r2, r0
   1082e:	460b      	mov	r3, r1
   10830:	4640      	mov	r0, r8
   10832:	4649      	mov	r1, r9
   10834:	f00b f9a4 	bl	1bb80 <__aeabi_ddiv>
   10838:	4602      	mov	r2, r0
   1083a:	460b      	mov	r3, r1
   1083c:	2000      	movs	r0, #0
   1083e:	4979      	ldr	r1, [pc, #484]	; (10a24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10840:	f00a fec0 	bl	1b5c4 <__aeabi_dsub>
   10844:	2200      	movs	r2, #0
   10846:	4b78      	ldr	r3, [pc, #480]	; (10a28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10848:	f00b f870 	bl	1b92c <__aeabi_dmul>
   1084c:	f00b fb50 	bl	1bef0 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10850:	f00b f818 	bl	1b884 <__aeabi_f2d>
   10854:	2200      	movs	r2, #0
   10856:	4b75      	ldr	r3, [pc, #468]	; (10a2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10858:	f00a feb6 	bl	1b5c8 <__adddf3>
   1085c:	f00b fb28 	bl	1beb0 <__aeabi_d2uiz>
   10860:	b280      	uxth	r0, r0
   10862:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10864:	2e00      	cmp	r6, #0
   10866:	f47f ae91 	bne.w	1058c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   1086a:	6a22      	ldr	r2, [r4, #32]
   1086c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10870:	7890      	ldrb	r0, [r2, #2]
   10872:	01db      	lsls	r3, r3, #7
   10874:	e6a1      	b.n	105ba <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10876:	4649      	mov	r1, r9
   10878:	4620      	mov	r0, r4
   1087a:	4798      	blx	r3
   1087c:	6a22      	ldr	r2, [r4, #32]
   1087e:	6925      	ldr	r5, [r4, #16]
   10880:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10884:	7890      	ldrb	r0, [r2, #2]
   10886:	01db      	lsls	r3, r3, #7
   10888:	e697      	b.n	105ba <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1088a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1088e:	9207      	str	r2, [sp, #28]
   10890:	9206      	str	r2, [sp, #24]
   10892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10896:	9202      	str	r2, [sp, #8]
   10898:	2239      	movs	r2, #57	; 0x39
   1089a:	9205      	str	r2, [sp, #20]
   1089c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   108a0:	9201      	str	r2, [sp, #4]
   108a2:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   108a4:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108a6:	2601      	movs	r6, #1
   108a8:	f04f 0936 	mov.w	r9, #54	; 0x36
   108ac:	9204      	str	r2, [sp, #16]
   108ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   108b2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108b6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   108ba:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   108bc:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108c0:	f04f 0a17 	mov.w	sl, #23
   108c4:	9200      	str	r2, [sp, #0]
   108c6:	e53a      	b.n	1033e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   108c8:	2900      	cmp	r1, #0
   108ca:	f040 8092 	bne.w	109f2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   108ce:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   108d2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   108d6:	2501      	movs	r5, #1
   108d8:	4095      	lsls	r5, r2
   108da:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   108dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   108e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   108e4:	4413      	add	r3, r2
   108e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   108ea:	f36f 0200 	bfc	r2, #0, #1
   108ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   108f2:	e5c7      	b.n	10484 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   108f8:	9207      	str	r2, [sp, #28]
   108fa:	9206      	str	r2, [sp, #24]
   108fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10900:	9202      	str	r2, [sp, #8]
   10902:	223d      	movs	r2, #61	; 0x3d
   10904:	9205      	str	r2, [sp, #20]
   10906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1090a:	9201      	str	r2, [sp, #4]
   1090c:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1090e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10910:	2601      	movs	r6, #1
   10912:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10916:	9204      	str	r2, [sp, #16]
   10918:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1091c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10920:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10924:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10926:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1092a:	f04f 0a18 	mov.w	sl, #24
   1092e:	9200      	str	r2, [sp, #0]
   10930:	e505      	b.n	1033e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10932:	2900      	cmp	r1, #0
   10934:	d165      	bne.n	10a02 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10936:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   1093a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1093e:	2001      	movs	r0, #1
   10940:	4090      	lsls	r0, r2
   10942:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10944:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10948:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1094c:	4413      	add	r3, r2
   1094e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10952:	f36f 0200 	bfc	r2, #0, #1
   10956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1095a:	e730      	b.n	107be <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   1095c:	4620      	mov	r0, r4
   1095e:	4798      	blx	r3
   10960:	6925      	ldr	r5, [r4, #16]
   10962:	e602      	b.n	1056a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10964:	4620      	mov	r0, r4
   10966:	4790      	blx	r2
   10968:	6820      	ldr	r0, [r4, #0]
   1096a:	e5f0      	b.n	1054e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   1096c:	2205      	movs	r2, #5
   1096e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10976:	9202      	str	r2, [sp, #8]
   10978:	224d      	movs	r2, #77	; 0x4d
   1097a:	492d      	ldr	r1, [pc, #180]	; (10a30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   1097c:	9205      	str	r2, [sp, #20]
   1097e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10982:	9201      	str	r2, [sp, #4]
   10984:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10986:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10988:	2602      	movs	r6, #2
   1098a:	f04f 094a 	mov.w	r9, #74	; 0x4a
   1098e:	9107      	str	r1, [sp, #28]
   10990:	9204      	str	r2, [sp, #16]
   10992:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10996:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1099a:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   1099c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   109a0:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   109a2:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   109a6:	f04f 0a25 	mov.w	sl, #37	; 0x25
   109aa:	9200      	str	r2, [sp, #0]
   109ac:	e4c7      	b.n	1033e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   109ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   109b2:	9207      	str	r2, [sp, #28]
   109b4:	9206      	str	r2, [sp, #24]
   109b6:	2241      	movs	r2, #65	; 0x41
   109b8:	9205      	str	r2, [sp, #20]
   109ba:	2240      	movs	r2, #64	; 0x40
   109bc:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   109be:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   109c0:	2102      	movs	r1, #2
   109c2:	f04f 093e 	mov.w	r9, #62	; 0x3e
   109c6:	9204      	str	r2, [sp, #16]
   109c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   109cc:	4637      	mov	r7, r6
   109ce:	9601      	str	r6, [sp, #4]
   109d0:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   109d2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   109d6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   109da:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   109dc:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   109e0:	f04f 0a22 	mov.w	sl, #34	; 0x22
   109e4:	9200      	str	r2, [sp, #0]
   109e6:	e4aa      	b.n	1033e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   109e8:	682b      	ldr	r3, [r5, #0]
   109ea:	f36f 631b 	bfc	r3, #24, #4
   109ee:	602b      	str	r3, [r5, #0]
   109f0:	e687      	b.n	10702 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   109f2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   109f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   109fa:	2501      	movs	r5, #1
   109fc:	4095      	lsls	r5, r2
   109fe:	614d      	str	r5, [r1, #20]
   10a00:	e76c      	b.n	108dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10a02:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10a06:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10a0a:	2001      	movs	r0, #1
   10a0c:	4090      	lsls	r0, r2
   10a0e:	6148      	str	r0, [r1, #20]
   10a10:	e798      	b.n	10944 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10a12:	bf00      	nop
   10a14:	e000e100 	.word	0xe000e100
   10a18:	40001c00 	.word	0x40001c00
   10a1c:	40300000 	.word	0x40300000
   10a20:	200000e0 	.word	0x200000e0
   10a24:	3ff00000 	.word	0x3ff00000
   10a28:	40f00000 	.word	0x40f00000
   10a2c:	3fe00000 	.word	0x3fe00000
   10a30:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a34:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a36:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a38:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10a3c:	f36c 0100 	bfi	r1, ip, #0, #1
   10a40:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10a44:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a46:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10a4a:	0790      	lsls	r0, r2, #30
   10a4c:	d503      	bpl.n	10a56 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10a4e:	681a      	ldr	r2, [r3, #0]
   10a50:	f36c 0241 	bfi	r2, ip, #1, #1
   10a54:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10a56:	69da      	ldr	r2, [r3, #28]
   10a58:	f012 0202 	ands.w	r2, r2, #2
   10a5c:	d1fb      	bne.n	10a56 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10a5e:	6821      	ldr	r1, [r4, #0]
   10a60:	680b      	ldr	r3, [r1, #0]
   10a62:	4543      	cmp	r3, r8
   10a64:	d13b      	bne.n	10ade <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10a66:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10a6a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10a6e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10a72:	684b      	ldr	r3, [r1, #4]
   10a74:	4a1c      	ldr	r2, [pc, #112]	; (10ae8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10a76:	4293      	cmp	r3, r2
   10a78:	d12d      	bne.n	10ad6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a7a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10a7c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a7e:	2104      	movs	r1, #4
    m_inTail = 0;
   10a80:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10a84:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10a86:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a8a:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10a8c:	7b21      	ldrb	r1, [r4, #12]
   10a8e:	6813      	ldr	r3, [r2, #0]
   10a90:	2900      	cmp	r1, #0
   10a92:	bf0c      	ite	eq
   10a94:	2100      	moveq	r1, #0
   10a96:	2102      	movne	r1, #2
   10a98:	f361 4311 	bfi	r3, r1, #16, #2
   10a9c:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10a9e:	f1bb 0f00 	cmp.w	fp, #0
   10aa2:	f43f ae18 	beq.w	106d6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10aa6:	6813      	ldr	r3, [r2, #0]
   10aa8:	f043 0302 	orr.w	r3, r3, #2
   10aac:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10aae:	69d3      	ldr	r3, [r2, #28]
   10ab0:	0799      	lsls	r1, r3, #30
   10ab2:	d4fc      	bmi.n	10aae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ab4:	6a23      	ldr	r3, [r4, #32]
   10ab6:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10aba:	789b      	ldrb	r3, [r3, #2]
   10abc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10ac0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ac4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10ac8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10acc:	f042 0201 	orr.w	r2, r2, #1
   10ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10ad4:	e5ff      	b.n	106d6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10ad6:	4620      	mov	r0, r4
   10ad8:	4798      	blx	r3
   10ada:	6922      	ldr	r2, [r4, #16]
   10adc:	e7d6      	b.n	10a8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10ade:	4620      	mov	r0, r4
   10ae0:	4798      	blx	r3
   10ae2:	6821      	ldr	r1, [r4, #0]
   10ae4:	e7c5      	b.n	10a72 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10ae6:	bf00      	nop
   10ae8:	0000fbd1 	.word	0x0000fbd1

00010aec <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10aec:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   10af0:	b92a      	cbnz	r2, 10afe <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   10af2:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   10af4:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   10af6:	428a      	cmp	r2, r1
        m_portOpen = true;
   10af8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   10afc:	d900      	bls.n	10b00 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   10afe:	4770      	bx	lr
   10b00:	f7ff bb86 	b.w	10210 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00010b04 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b06:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   10b08:	4f20      	ldr	r7, [pc, #128]	; (10b8c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   10b0a:	6182      	str	r2, [r0, #24]
   10b0c:	61c3      	str	r3, [r0, #28]
   10b0e:	4d20      	ldr	r5, [pc, #128]	; (10b90 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   10b10:	60a7      	str	r7, [r4, #8]
   10b12:	9f06      	ldr	r7, [sp, #24]
   10b14:	f8df c080 	ldr.w	ip, [pc, #128]	; 10b98 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10b18:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   10b1c:	6065      	str	r5, [r4, #4]
   10b1e:	2307      	movs	r3, #7
   10b20:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10b22:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   10b24:	6227      	str	r7, [r4, #32]
   10b26:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   10b2a:	2780      	movs	r7, #128	; 0x80
   10b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b30:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   10b34:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   10b38:	f8c4 c000 	str.w	ip, [r4]
   10b3c:	6261      	str	r1, [r4, #36]	; 0x24
   10b3e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   10b42:	85a2      	strh	r2, [r4, #44]	; 0x2c
   10b44:	4629      	mov	r1, r5
   10b46:	463a      	mov	r2, r7
   10b48:	6166      	str	r6, [r4, #20]
   10b4a:	7325      	strb	r5, [r4, #12]
   10b4c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   10b50:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   10b54:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10b58:	f00d fba0 	bl	1e29c <memset>
   10b5c:	463a      	mov	r2, r7
   10b5e:	4629      	mov	r1, r5
   10b60:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10b64:	f00d fb9a 	bl	1e29c <memset>
   10b68:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   10b6c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10b70:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10b74:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   10b78:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   10b7c:	7a32      	ldrb	r2, [r6, #8]
   10b7e:	4b05      	ldr	r3, [pc, #20]	; (10b94 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   10b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10b84:	6123      	str	r3, [r4, #16]
}
   10b86:	4620      	mov	r0, r4
   10b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b8a:	bf00      	nop
   10b8c:	02000100 	.word	0x02000100
   10b90:	00080102 	.word	0x00080102
   10b94:	00023250 	.word	0x00023250
   10b98:	00023208 	.word	0x00023208

00010b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   10b9e:	4907      	ldr	r1, [pc, #28]	; (10bbc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10ba0:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   10ba4:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   10ba6:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10ba8:	fbb2 f2f3 	udiv	r2, r2, r3
   10bac:	2a02      	cmp	r2, #2
   10bae:	bf38      	it	cc
   10bb0:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   10bb2:	680b      	ldr	r3, [r1, #0]
   10bb4:	1a1b      	subs	r3, r3, r0
   10bb6:	429a      	cmp	r2, r3
   10bb8:	d8fb      	bhi.n	10bb2 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   10bba:	4770      	bx	lr
   10bbc:	20001be0 	.word	0x20001be0

00010bc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   10bc0:	2901      	cmp	r1, #1
   10bc2:	d901      	bls.n	10bc8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   10bc4:	2000      	movs	r0, #0
   10bc6:	4770      	bx	lr
    if (!m_portOpen) {
   10bc8:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   10bcc:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   10bce:	b10a      	cbz	r2, 10bd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   10bd0:	f7ff bb1e 	b.w	10210 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   10bd4:	2001      	movs	r0, #1
}
   10bd6:	4770      	bx	lr

00010bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   10bd8:	2901      	cmp	r1, #1
    m_ssMode = mode;
   10bda:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   10bdc:	d914      	bls.n	10c08 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   10bde:	2902      	cmp	r1, #2
   10be0:	d110      	bne.n	10c04 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10be2:	6982      	ldr	r2, [r0, #24]
   10be4:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10be8:	7893      	ldrb	r3, [r2, #2]
   10bea:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10bee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10bf2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   10bf6:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10bf8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10bfc:	4302      	orrs	r2, r0
   10bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10c02:	4770      	bx	lr
            success = false;
   10c04:	2000      	movs	r0, #0
}
   10c06:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10c08:	6982      	ldr	r2, [r0, #24]
   10c0a:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10c0e:	7892      	ldrb	r2, [r2, #2]
   10c10:	01db      	lsls	r3, r3, #7
   10c12:	b199      	cbz	r1, 10c3c <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   10c14:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c18:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c1c:	2001      	movs	r0, #1
   10c1e:	4090      	lsls	r0, r2
   10c20:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10c22:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10c26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10c2a:	4413      	add	r3, r2
   10c2c:	2001      	movs	r0, #1
   10c2e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10c32:	f36f 0200 	bfc	r2, #0, #1
   10c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10c3a:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10c3c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c40:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c44:	2001      	movs	r0, #1
   10c46:	4090      	lsls	r0, r2
   10c48:	6188      	str	r0, [r1, #24]
   10c4a:	e7ea      	b.n	10c22 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00010c4c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   10c4c:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   10c4e:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   10c50:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   10c52:	2b01      	cmp	r3, #1
    m_phase = phase;
   10c54:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   10c56:	d000      	beq.n	10c5a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   10c58:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c5a:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10c5c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c5e:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10c62:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10c64:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c66:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10c6a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10c6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10c72:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c76:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10c7a:	f36f 0100 	bfc	r1, #0, #1
   10c7e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10c82:	6813      	ldr	r3, [r2, #0]
   10c84:	0799      	lsls	r1, r3, #30
   10c86:	d503      	bpl.n	10c90 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10c88:	6813      	ldr	r3, [r2, #0]
   10c8a:	f36f 0341 	bfc	r3, #1, #1
   10c8e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c90:	69d3      	ldr	r3, [r2, #28]
   10c92:	f013 0302 	ands.w	r3, r3, #2
   10c96:	d1fb      	bne.n	10c90 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   10c98:	6802      	ldr	r2, [r0, #0]
   10c9a:	4604      	mov	r4, r0
   10c9c:	6811      	ldr	r1, [r2, #0]
   10c9e:	4821      	ldr	r0, [pc, #132]	; (10d24 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   10ca0:	4281      	cmp	r1, r0
   10ca2:	d136      	bne.n	10d12 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   10ca4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10ca8:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10cac:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10cb0:	6853      	ldr	r3, [r2, #4]
   10cb2:	4a1d      	ldr	r2, [pc, #116]	; (10d28 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   10cb4:	4293      	cmp	r3, r2
   10cb6:	d130      	bne.n	10d1a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10cb8:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10cba:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10cbc:	2104      	movs	r1, #4
    m_inTail = 0;
   10cbe:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10cc2:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10cc4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10cc8:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10cca:	7a21      	ldrb	r1, [r4, #8]
   10ccc:	681a      	ldr	r2, [r3, #0]
   10cce:	f361 725d 	bfi	r2, r1, #29, #1
   10cd2:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10cd4:	7a61      	ldrb	r1, [r4, #9]
   10cd6:	681a      	ldr	r2, [r3, #0]
   10cd8:	f361 721c 	bfi	r2, r1, #28, #1
   10cdc:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   10cde:	2d00      	cmp	r5, #0
   10ce0:	d0ba      	beq.n	10c58 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10ce2:	681a      	ldr	r2, [r3, #0]
   10ce4:	f042 0202 	orr.w	r2, r2, #2
   10ce8:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10cea:	69da      	ldr	r2, [r3, #28]
   10cec:	0792      	lsls	r2, r2, #30
   10cee:	d4fc      	bmi.n	10cea <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10cf0:	6a22      	ldr	r2, [r4, #32]
   10cf2:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10cf6:	7893      	ldrb	r3, [r2, #2]
   10cf8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10cfc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d08:	f042 0201 	orr.w	r2, r2, #1
   10d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10d10:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   10d12:	4620      	mov	r0, r4
   10d14:	4788      	blx	r1
   10d16:	6822      	ldr	r2, [r4, #0]
   10d18:	e7ca      	b.n	10cb0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   10d1a:	4620      	mov	r0, r4
   10d1c:	4798      	blx	r3
   10d1e:	6923      	ldr	r3, [r4, #16]
   10d20:	e7d3      	b.n	10cca <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   10d22:	bf00      	nop
   10d24:	0000fbc1 	.word	0x0000fbc1
   10d28:	0000fbd1 	.word	0x0000fbd1

00010d2c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10d2c:	b470      	push	{r4, r5, r6}
   10d2e:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   10d30:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10d34:	b120      	cbz	r0, 10d40 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   10d36:	79e0      	ldrb	r0, [r4, #7]
   10d38:	2801      	cmp	r0, #1
        return 0;
   10d3a:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   10d3e:	d001      	beq.n	10d44 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   10d40:	bc70      	pop	{r4, r5, r6}
   10d42:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   10d44:	2b00      	cmp	r3, #0
   10d46:	ddfb      	ble.n	10d40 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   10d48:	6925      	ldr	r5, [r4, #16]
   10d4a:	b1b9      	cbz	r1, 10d7c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   10d4c:	1c4e      	adds	r6, r1, #1
   10d4e:	7809      	ldrb	r1, [r1, #0]
   10d50:	62a9      	str	r1, [r5, #40]	; 0x28
   10d52:	e003      	b.n	10d5c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   10d54:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10d58:	2900      	cmp	r1, #0
   10d5a:	d0f1      	beq.n	10d40 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10d5c:	7e29      	ldrb	r1, [r5, #24]
   10d5e:	0749      	lsls	r1, r1, #29
   10d60:	d5f8      	bpl.n	10d54 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   10d62:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10d64:	0789      	lsls	r1, r1, #30
   10d66:	d5f5      	bpl.n	10d54 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   10d68:	b152      	cbz	r2, 10d80 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   10d6a:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10d6c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10d6e:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   10d70:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10d72:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   10d76:	d007      	beq.n	10d88 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   10d78:	4631      	mov	r1, r6
   10d7a:	e7e5      	b.n	10d48 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   10d7c:	460e      	mov	r6, r1
   10d7e:	e7e7      	b.n	10d50 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   10d80:	3001      	adds	r0, #1
   10d82:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   10d84:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   10d86:	d1f7      	bne.n	10d78 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   10d88:	4618      	mov	r0, r3
   10d8a:	e7d9      	b.n	10d40 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

00010d8c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   10d90:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   10d94:	b12d      	cbz	r5, 10da2 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   10d96:	f890 8007 	ldrb.w	r8, [r0, #7]
   10d9a:	f1b8 0f01 	cmp.w	r8, #1
   10d9e:	d003      	beq.n	10da8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   10da0:	2500      	movs	r5, #0
}
   10da2:	4628      	mov	r0, r5
   10da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10da8:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   10dac:	f1be 0f07 	cmp.w	lr, #7
   10db0:	d0f6      	beq.n	10da0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   10db2:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   10db6:	2c07      	cmp	r4, #7
   10db8:	d0f2      	beq.n	10da0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   10dba:	4616      	mov	r6, r2
   10dbc:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10dbe:	4670      	mov	r0, lr
   10dc0:	461f      	mov	r7, r3
   10dc2:	4689      	mov	r9, r1
   10dc4:	f7fd fe76 	bl	eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   10dc8:	b336      	cbz	r6, 10e18 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   10dca:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   10dcc:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   10dd0:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   10dd2:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   10dd4:	b2be      	uxth	r6, r7
   10dd6:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   10dd8:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10ddc:	f7fd fe60 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10de0:	6803      	ldr	r3, [r0, #0]
   10de2:	f043 0302 	orr.w	r3, r3, #2
   10de6:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10de8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10dec:	f7fd fe62 	bl	eab4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   10df0:	f1b9 0f00 	cmp.w	r9, #0
   10df4:	d015      	beq.n	10e22 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   10df6:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   10df8:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   10dfc:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   10dfe:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   10e00:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   10e02:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10e06:	f7fd fe4b 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10e0a:	6803      	ldr	r3, [r0, #0]
   10e0c:	f043 0302 	orr.w	r3, r3, #2
   10e10:	6003      	str	r3, [r0, #0]
}
   10e12:	4628      	mov	r0, r5
   10e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   10e18:	4b04      	ldr	r3, [pc, #16]	; (10e2c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   10e1a:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   10e1c:	f8a0 8000 	strh.w	r8, [r0]
   10e20:	e7d8      	b.n	10dd4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   10e22:	4b02      	ldr	r3, [pc, #8]	; (10e2c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   10e24:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   10e26:	2301      	movs	r3, #1
   10e28:	8003      	strh	r3, [r0, #0]
   10e2a:	e7e9      	b.n	10e00 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   10e2c:	20001f10 	.word	0x20001f10

00010e30 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10e30:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10e34:	2b07      	cmp	r3, #7
   10e36:	d016      	beq.n	10e66 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   10e38:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   10e3c:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   10e3e:	b510      	push	{r4, lr}
   10e40:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10e42:	d005      	beq.n	10e50 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   10e44:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10e48:	b113      	cbz	r3, 10e50 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   10e4a:	79e3      	ldrb	r3, [r4, #7]
   10e4c:	2b01      	cmp	r3, #1
   10e4e:	d001      	beq.n	10e54 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   10e50:	2001      	movs	r0, #1
   10e52:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10e54:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10e58:	f7fd fe22 	bl	eaa0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10e5c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10e5e:	079b      	lsls	r3, r3, #30
   10e60:	d4f0      	bmi.n	10e44 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   10e62:	2001      	movs	r0, #1
   10e64:	bd10      	pop	{r4, pc}
   10e66:	2001      	movs	r0, #1
   10e68:	4770      	bx	lr
   10e6a:	bf00      	nop

00010e6c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   10e6c:	79c3      	ldrb	r3, [r0, #7]
   10e6e:	2b01      	cmp	r3, #1
   10e70:	d022      	beq.n	10eb8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   10e72:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10e76:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   10e7a:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   10e7c:	429a      	cmp	r2, r3
   10e7e:	d019      	beq.n	10eb4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   10e80:	7e0b      	ldrb	r3, [r1, #24]
   10e82:	07da      	lsls	r2, r3, #31
   10e84:	d403      	bmi.n	10e8e <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   10e86:	e018      	b.n	10eba <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   10e88:	7e0b      	ldrb	r3, [r1, #24]
   10e8a:	07db      	lsls	r3, r3, #31
   10e8c:	d514      	bpl.n	10eb8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   10e8e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   10e92:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10e96:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   10e98:	3301      	adds	r3, #1
   10e9a:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   10e9e:	628a      	str	r2, [r1, #40]	; 0x28
   10ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   10ea4:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   10ea8:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10eac:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10eb0:	429a      	cmp	r2, r3
   10eb2:	d1e9      	bne.n	10e88 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   10eb4:	2301      	movs	r3, #1
   10eb6:	750b      	strb	r3, [r1, #20]
   10eb8:	4770      	bx	lr
   10eba:	4770      	bx	lr

00010ebc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   10ebc:	79c3      	ldrb	r3, [r0, #7]
   10ebe:	2b01      	cmp	r3, #1
   10ec0:	d100      	bne.n	10ec4 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   10ec2:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   10ec4:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   10ec6:	6901      	ldr	r1, [r0, #16]
   10ec8:	f891 3020 	ldrb.w	r3, [r1, #32]
   10ecc:	b303      	cbz	r3, 10f10 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   10ece:	2300      	movs	r3, #0
   10ed0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   10ed4:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   10ed8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   10edc:	f103 0218 	add.w	r2, r3, #24
   10ee0:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   10ee4:	3301      	adds	r3, #1
   10ee6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   10eea:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   10eee:	7e0b      	ldrb	r3, [r1, #24]
   10ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10ef4:	760b      	strb	r3, [r1, #24]
   10ef6:	e00b      	b.n	10f10 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   10ef8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   10efc:	429a      	cmp	r2, r3
   10efe:	d00f      	beq.n	10f20 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   10f00:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   10f04:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   10f06:	3218      	adds	r2, #24
   10f08:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   10f0c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   10f10:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   10f14:	7e0a      	ldrb	r2, [r1, #24]
   10f16:	3301      	adds	r3, #1
   10f18:	0752      	lsls	r2, r2, #29
   10f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10f1e:	d4eb      	bmi.n	10ef8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   10f20:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   10f24:	429a      	cmp	r2, r3
   10f26:	d002      	beq.n	10f2e <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   10f28:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f2c:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   10f2e:	2304      	movs	r3, #4
   10f30:	750b      	strb	r3, [r1, #20]
}
   10f32:	e7f9      	b.n	10f28 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

00010f34 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   10f34:	79c3      	ldrb	r3, [r0, #7]
   10f36:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   10f38:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   10f3a:	d022      	beq.n	10f82 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   10f3c:	7e1a      	ldrb	r2, [r3, #24]
   10f3e:	09d2      	lsrs	r2, r2, #7
   10f40:	d01e      	beq.n	10f80 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   10f42:	2280      	movs	r2, #128	; 0x80
   10f44:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   10f46:	8b5a      	ldrh	r2, [r3, #26]
   10f48:	0792      	lsls	r2, r2, #30
   10f4a:	d509      	bpl.n	10f60 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   10f4c:	8b5a      	ldrh	r2, [r3, #26]
   10f4e:	f042 0202 	orr.w	r2, r2, #2
   10f52:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   10f54:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   10f58:	f042 0201 	orr.w	r2, r2, #1
   10f5c:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   10f60:	8b5a      	ldrh	r2, [r3, #26]
   10f62:	07d1      	lsls	r1, r2, #31
   10f64:	d410      	bmi.n	10f88 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   10f66:	8b5a      	ldrh	r2, [r3, #26]
   10f68:	0752      	lsls	r2, r2, #29
   10f6a:	d509      	bpl.n	10f80 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   10f6c:	8b5a      	ldrh	r2, [r3, #26]
   10f6e:	f042 0204 	orr.w	r2, r2, #4
   10f72:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   10f74:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   10f78:	f043 0304 	orr.w	r3, r3, #4
   10f7c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   10f80:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   10f82:	2280      	movs	r2, #128	; 0x80
   10f84:	761a      	strb	r2, [r3, #24]
            break;
   10f86:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   10f88:	8b5a      	ldrh	r2, [r3, #26]
   10f8a:	f042 0201 	orr.w	r2, r2, #1
   10f8e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   10f90:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   10f94:	f042 0202 	orr.w	r2, r2, #2
   10f98:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   10f9c:	e7e3      	b.n	10f66 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   10f9e:	bf00      	nop

00010fa0 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   10fa0:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   10fa4:	4770      	bx	lr
   10fa6:	bf00      	nop

00010fa8 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   10fa8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   10fac:	e7f8      	b.n	10fa0 <_ZN9ClearCore12SerialDriver4ModeEv>
   10fae:	bf00      	nop

00010fb0 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   10fb0:	2007      	movs	r0, #7
   10fb2:	4770      	bx	lr

00010fb4 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   10fb4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   10fb8:	e7fa      	b.n	10fb0 <_ZN9ClearCore12SerialDriver4TypeEv>
   10fba:	bf00      	nop

00010fbc <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   10fbc:	6803      	ldr	r3, [r0, #0]
   10fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10fc0:	4718      	bx	r3
   10fc2:	bf00      	nop

00010fc4 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   10fc4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   10fc8:	e7f8      	b.n	10fbc <_ZN9ClearCore12SerialDriver10IsWritableEv>
   10fca:	bf00      	nop

00010fcc <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   10fcc:	b508      	push	{r3, lr}
        return PortIsOpen();
   10fce:	6803      	ldr	r3, [r0, #0]
   10fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10fd2:	4798      	blx	r3
    }
   10fd4:	b200      	sxth	r0, r0
   10fd6:	bd08      	pop	{r3, pc}

00010fd8 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   10fd8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   10fdc:	e7f6      	b.n	10fcc <_ZN9ClearCore12SerialDriver5StateEv>
   10fde:	bf00      	nop

00010fe0 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   10fe0:	2000      	movs	r0, #0
   10fe2:	4770      	bx	lr

00010fe4 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   10fe4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   10fe8:	e7fa      	b.n	10fe0 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   10fea:	bf00      	nop

00010fec <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   10fec:	4770      	bx	lr
   10fee:	bf00      	nop

00010ff0 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   10ff0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   10ff4:	e7fa      	b.n	10fec <_ZN9ClearCore12SerialDriver7RefreshEv>
   10ff6:	bf00      	nop

00010ff8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   10ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ffc:	b082      	sub	sp, #8
   10ffe:	4688      	mov	r8, r1
   11000:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11002:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   11006:	9500      	str	r5, [sp, #0]
   11008:	9401      	str	r4, [sp, #4]
   1100a:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   1100c:	4604      	mov	r4, r0
   1100e:	4617      	mov	r7, r2
   11010:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   11012:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   11014:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   11016:	f7ff fd75 	bl	10b04 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1101a:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   1101e:	f7fd f951 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
   11022:	4b09      	ldr	r3, [pc, #36]	; (11048 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   11024:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11028:	f103 0208 	add.w	r2, r3, #8
   1102c:	4620      	mov	r0, r4
   1102e:	337c      	adds	r3, #124	; 0x7c
   11030:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   11034:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11038:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   1103c:	6022      	str	r2, [r4, #0]
   1103e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   11042:	b002      	add	sp, #8
   11044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11048:	00023270 	.word	0x00023270

0001104c <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   1104c:	b538      	push	{r3, r4, r5, lr}
   1104e:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11050:	f7fe fe50 	bl	fcf4 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11054:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11058:	4605      	mov	r5, r0
        if (m_portOpen) {
   1105a:	b113      	cbz	r3, 11062 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   1105c:	4620      	mov	r0, r4
   1105e:	f7ff fd9d 	bl	10b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11062:	4628      	mov	r0, r5
   11064:	bd38      	pop	{r3, r4, r5, pc}
   11066:	bf00      	nop

00011068 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11068:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   1106a:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1106e:	428b      	cmp	r3, r1
   11070:	d00d      	beq.n	1108e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11072:	2b10      	cmp	r3, #16
   11074:	460d      	mov	r5, r1
   11076:	4604      	mov	r4, r0
   11078:	f000 808c 	beq.w	11194 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   1107c:	f1a5 030d 	sub.w	r3, r5, #13
   11080:	2b03      	cmp	r3, #3
   11082:	f200 808c 	bhi.w	1119e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11086:	e8df f003 	tbb	[pc, r3]
   1108a:	3169      	.short	0x3169
   1108c:	4f06      	.short	0x4f06
        return true;
   1108e:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   11090:	4628      	mov	r0, r5
   11092:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11094:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11096:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1109a:	4b42      	ldr	r3, [pc, #264]	; (111a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1109c:	f3bf 8f5b 	dmb	ish
   110a0:	43d2      	mvns	r2, r2
   110a2:	e853 1f00 	ldrex	r1, [r3]
   110a6:	4011      	ands	r1, r2
   110a8:	e843 1000 	strex	r0, r1, [r3]
   110ac:	2800      	cmp	r0, #0
   110ae:	d1f8      	bne.n	110a2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   110b0:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   110b4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   110b8:	f3bf 8f5b 	dmb	ish
   110bc:	e853 1f00 	ldrex	r1, [r3]
   110c0:	4311      	orrs	r1, r2
   110c2:	e843 1000 	strex	r0, r1, [r3]
   110c6:	2800      	cmp	r0, #0
   110c8:	d1f8      	bne.n	110bc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   110ca:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   110ce:	2101      	movs	r1, #1
    m_mode = newMode;
   110d0:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   110d4:	4620      	mov	r0, r4
   110d6:	f7ff fd73 	bl	10bc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   110da:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   110de:	2d00      	cmp	r5, #0
   110e0:	d0d5      	beq.n	1108e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   110e2:	4620      	mov	r0, r4
   110e4:	f7ff fd5a 	bl	10b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   110e8:	4628      	mov	r0, r5
   110ea:	bd38      	pop	{r3, r4, r5, pc}
   110ec:	4b2d      	ldr	r3, [pc, #180]	; (111a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   110ee:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   110f2:	f3bf 8f5b 	dmb	ish
   110f6:	e853 1f00 	ldrex	r1, [r3]
   110fa:	4311      	orrs	r1, r2
   110fc:	e843 1000 	strex	r0, r1, [r3]
   11100:	2800      	cmp	r0, #0
   11102:	d1f8      	bne.n	110f6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   11104:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11108:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1110c:	f3bf 8f5b 	dmb	ish
   11110:	43d2      	mvns	r2, r2
   11112:	e853 1f00 	ldrex	r1, [r3]
   11116:	4011      	ands	r1, r2
   11118:	e843 1000 	strex	r0, r1, [r3]
   1111c:	2800      	cmp	r0, #0
   1111e:	d1f8      	bne.n	11112 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   11120:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   11124:	2100      	movs	r1, #0
   11126:	e7d3      	b.n	110d0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11128:	2201      	movs	r2, #1
   1112a:	2100      	movs	r1, #0
   1112c:	4620      	mov	r0, r4
   1112e:	f7ff fd8d 	bl	10c4c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   11132:	2101      	movs	r1, #1
   11134:	4620      	mov	r0, r4
   11136:	f7ff fd4f 	bl	10bd8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   1113a:	6823      	ldr	r3, [r4, #0]
   1113c:	4a1a      	ldr	r2, [pc, #104]	; (111a8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   1113e:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11140:	491a      	ldr	r1, [pc, #104]	; (111ac <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   11142:	4293      	cmp	r3, r2
   11144:	4620      	mov	r0, r4
   11146:	d1a5      	bne.n	11094 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   11148:	f7fe fdd4 	bl	fcf4 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   1114c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11150:	2b00      	cmp	r3, #0
   11152:	d0a0      	beq.n	11096 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   11154:	4620      	mov	r0, r4
   11156:	f7ff fd21 	bl	10b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   1115a:	e79c      	b.n	11096 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   1115c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11160:	4b10      	ldr	r3, [pc, #64]	; (111a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11162:	f3bf 8f5b 	dmb	ish
   11166:	43d2      	mvns	r2, r2
   11168:	e853 1f00 	ldrex	r1, [r3]
   1116c:	4011      	ands	r1, r2
   1116e:	e843 1000 	strex	r0, r1, [r3]
   11172:	2800      	cmp	r0, #0
   11174:	d1f8      	bne.n	11168 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11176:	f3bf 8f5b 	dmb	ish
   1117a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1117e:	f3bf 8f5b 	dmb	ish
   11182:	43d2      	mvns	r2, r2
   11184:	e853 1f00 	ldrex	r1, [r3]
   11188:	4011      	ands	r1, r2
   1118a:	e843 1000 	strex	r0, r1, [r3]
   1118e:	2800      	cmp	r0, #0
   11190:	d0c6      	beq.n	11120 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11192:	e7f7      	b.n	11184 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11194:	4b06      	ldr	r3, [pc, #24]	; (111b0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11196:	6818      	ldr	r0, [r3, #0]
   11198:	f7fe fae2 	bl	f760 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1119c:	e76e      	b.n	1107c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   1119e:	2500      	movs	r5, #0
   111a0:	e776      	b.n	11090 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   111a2:	bf00      	nop
   111a4:	20001ac4 	.word	0x20001ac4
   111a8:	0001104d 	.word	0x0001104d
   111ac:	0007a120 	.word	0x0007a120
   111b0:	20001efc 	.word	0x20001efc

000111b4 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   111b4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   111b8:	f7ff bf56 	b.w	11068 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

000111bc <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   111bc:	b510      	push	{r4, lr}
   111be:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   111c0:	f7fe fcfa 	bl	fbb8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   111c4:	b100      	cbz	r0, 111c8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   111c6:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   111c8:	4620      	mov	r0, r4
   111ca:	f7ff fc8f 	bl	10aec <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   111ce:	4620      	mov	r0, r4
   111d0:	f7ff fce4 	bl	10b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   111d4:	4b0c      	ldr	r3, [pc, #48]	; (11208 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   111d6:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   111da:	f3bf 8f5b 	dmb	ish
   111de:	e853 1f00 	ldrex	r1, [r3]
   111e2:	4311      	orrs	r1, r2
   111e4:	e843 1000 	strex	r0, r1, [r3]
   111e8:	2800      	cmp	r0, #0
   111ea:	d1f8      	bne.n	111de <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   111ec:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   111f0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   111f4:	2b10      	cmp	r3, #16
   111f6:	d1e6      	bne.n	111c6 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   111f8:	4b04      	ldr	r3, [pc, #16]	; (1120c <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   111fa:	4621      	mov	r1, r4
   111fc:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   111fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   11202:	f7fe bacd 	b.w	f7a0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11206:	bf00      	nop
   11208:	20001ac4 	.word	0x20001ac4
   1120c:	20001efc 	.word	0x20001efc

00011210 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11210:	b510      	push	{r4, lr}
   11212:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   11214:	f7fe fcd0 	bl	fbb8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11218:	b1a8      	cbz	r0, 11246 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   1121a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1121e:	2b10      	cmp	r3, #16
   11220:	d012      	beq.n	11248 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   11222:	4620      	mov	r0, r4
   11224:	f7fe fe10 	bl	fe48 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11228:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1122c:	4a09      	ldr	r2, [pc, #36]	; (11254 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   1122e:	f3bf 8f5b 	dmb	ish
   11232:	43db      	mvns	r3, r3
   11234:	e852 1f00 	ldrex	r1, [r2]
   11238:	4019      	ands	r1, r3
   1123a:	e842 1000 	strex	r0, r1, [r2]
   1123e:	2800      	cmp	r0, #0
   11240:	d1f8      	bne.n	11234 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   11242:	f3bf 8f5b 	dmb	ish
   11246:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   11248:	4b03      	ldr	r3, [pc, #12]	; (11258 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   1124a:	6818      	ldr	r0, [r3, #0]
   1124c:	f7fe fa88 	bl	f760 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11250:	e7e7      	b.n	11222 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   11252:	bf00      	nop
   11254:	20001ac4 	.word	0x20001ac4
   11258:	20001efc 	.word	0x20001efc

0001125c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   1125c:	6803      	ldr	r3, [r0, #0]
   1125e:	4a37      	ldr	r2, [pc, #220]	; (1133c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11260:	68db      	ldr	r3, [r3, #12]
   11262:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11264:	b510      	push	{r4, lr}
   11266:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11268:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   1126c:	d150      	bne.n	11310 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   1126e:	f7fe fca3 	bl	fbb8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11272:	b1a8      	cbz	r0, 112a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11274:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11278:	2b10      	cmp	r3, #16
   1127a:	d059      	beq.n	11330 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   1127c:	4620      	mov	r0, r4
   1127e:	f7fe fde3 	bl	fe48 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11282:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11286:	4a2e      	ldr	r2, [pc, #184]	; (11340 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11288:	f3bf 8f5b 	dmb	ish
   1128c:	43db      	mvns	r3, r3
   1128e:	e852 1f00 	ldrex	r1, [r2]
   11292:	4019      	ands	r1, r3
   11294:	e842 1000 	strex	r0, r1, [r2]
   11298:	2800      	cmp	r0, #0
   1129a:	d1f8      	bne.n	1128e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   1129c:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   112a0:	6823      	ldr	r3, [r4, #0]
   112a2:	4a28      	ldr	r2, [pc, #160]	; (11344 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   112a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   112a6:	4293      	cmp	r3, r2
   112a8:	d138      	bne.n	1131c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   112aa:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   112ae:	2b0d      	cmp	r3, #13
   112b0:	d028      	beq.n	11304 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   112b2:	2b10      	cmp	r3, #16
   112b4:	d037      	beq.n	11326 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   112b6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   112ba:	4b21      	ldr	r3, [pc, #132]	; (11340 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   112bc:	f3bf 8f5b 	dmb	ish
   112c0:	43d2      	mvns	r2, r2
   112c2:	e853 1f00 	ldrex	r1, [r3]
   112c6:	4011      	ands	r1, r2
   112c8:	e843 1000 	strex	r0, r1, [r3]
   112cc:	2800      	cmp	r0, #0
   112ce:	d1f8      	bne.n	112c2 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   112d0:	f3bf 8f5b 	dmb	ish
   112d4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   112d8:	f3bf 8f5b 	dmb	ish
   112dc:	43d2      	mvns	r2, r2
   112de:	e853 1f00 	ldrex	r1, [r3]
   112e2:	4011      	ands	r1, r2
   112e4:	e843 1000 	strex	r0, r1, [r3]
   112e8:	2800      	cmp	r0, #0
   112ea:	d1f8      	bne.n	112de <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   112ec:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   112f0:	230d      	movs	r3, #13
   112f2:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   112f6:	4620      	mov	r0, r4
   112f8:	2100      	movs	r1, #0
   112fa:	f7ff fc61 	bl	10bc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   112fe:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11302:	b903      	cbnz	r3, 11306 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   11304:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   11306:	4620      	mov	r0, r4
}
   11308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   1130c:	f7ff bc46 	b.w	10b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   11310:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   11312:	6823      	ldr	r3, [r4, #0]
   11314:	4a0b      	ldr	r2, [pc, #44]	; (11344 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11318:	4293      	cmp	r3, r2
   1131a:	d0c6      	beq.n	112aa <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   1131c:	4620      	mov	r0, r4
   1131e:	210d      	movs	r1, #13
}
   11320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   11324:	4718      	bx	r3
        CcioMgr.LinkClose();
   11326:	4b08      	ldr	r3, [pc, #32]	; (11348 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11328:	6818      	ldr	r0, [r3, #0]
   1132a:	f7fe fa19 	bl	f760 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1132e:	e7c2      	b.n	112b6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   11330:	4b05      	ldr	r3, [pc, #20]	; (11348 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11332:	6818      	ldr	r0, [r3, #0]
   11334:	f7fe fa14 	bl	f760 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11338:	e7a0      	b.n	1127c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   1133a:	bf00      	nop
   1133c:	00011211 	.word	0x00011211
   11340:	20001ac4 	.word	0x20001ac4
   11344:	00011069 	.word	0x00011069
   11348:	20001efc 	.word	0x20001efc

0001134c <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   1134c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11350:	f7ff bf84 	b.w	1125c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

00011354 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11354:	b510      	push	{r4, lr}
            PortOpen();
   11356:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   11358:	4604      	mov	r4, r0
        if (newState) {
   1135a:	bb09      	cbnz	r1, 113a0 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   1135c:	4a26      	ldr	r2, [pc, #152]	; (113f8 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   1135e:	68db      	ldr	r3, [r3, #12]
   11360:	4293      	cmp	r3, r2
   11362:	d11a      	bne.n	1139a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11364:	f7fe fc28 	bl	fbb8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11368:	b1a8      	cbz	r0, 11396 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   1136a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1136e:	2b10      	cmp	r3, #16
   11370:	d03c      	beq.n	113ec <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11372:	4620      	mov	r0, r4
   11374:	f7fe fd68 	bl	fe48 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11378:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1137c:	4a1f      	ldr	r2, [pc, #124]	; (113fc <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1137e:	f3bf 8f5b 	dmb	ish
   11382:	43db      	mvns	r3, r3
   11384:	e852 1f00 	ldrex	r1, [r2]
   11388:	4019      	ands	r1, r3
   1138a:	e842 1000 	strex	r0, r1, [r2]
   1138e:	2800      	cmp	r0, #0
   11390:	d1f8      	bne.n	11384 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   11392:	f3bf 8f5b 	dmb	ish
    }
   11396:	2001      	movs	r0, #1
   11398:	bd10      	pop	{r4, pc}
            PortClose();
   1139a:	4798      	blx	r3
    }
   1139c:	2001      	movs	r0, #1
   1139e:	bd10      	pop	{r4, pc}
   113a0:	4a17      	ldr	r2, [pc, #92]	; (11400 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   113a2:	689b      	ldr	r3, [r3, #8]
   113a4:	4293      	cmp	r3, r2
   113a6:	d1f8      	bne.n	1139a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   113a8:	f7fe fc06 	bl	fbb8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   113ac:	2800      	cmp	r0, #0
   113ae:	d1f2      	bne.n	11396 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   113b0:	4620      	mov	r0, r4
   113b2:	f7ff fb9b 	bl	10aec <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   113b6:	4620      	mov	r0, r4
   113b8:	f7ff fbf0 	bl	10b9c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   113bc:	4b0f      	ldr	r3, [pc, #60]	; (113fc <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   113be:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   113c2:	f3bf 8f5b 	dmb	ish
   113c6:	e853 1f00 	ldrex	r1, [r3]
   113ca:	4311      	orrs	r1, r2
   113cc:	e843 1000 	strex	r0, r1, [r3]
   113d0:	2800      	cmp	r0, #0
   113d2:	d1f8      	bne.n	113c6 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   113d4:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   113d8:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   113dc:	2b10      	cmp	r3, #16
   113de:	d1da      	bne.n	11396 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   113e0:	4b08      	ldr	r3, [pc, #32]	; (11404 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   113e2:	4621      	mov	r1, r4
   113e4:	6818      	ldr	r0, [r3, #0]
   113e6:	f7fe f9db 	bl	f7a0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   113ea:	e7d4      	b.n	11396 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   113ec:	4b05      	ldr	r3, [pc, #20]	; (11404 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   113ee:	6818      	ldr	r0, [r3, #0]
   113f0:	f7fe f9b6 	bl	f760 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   113f4:	e7bd      	b.n	11372 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   113f6:	bf00      	nop
   113f8:	00011211 	.word	0x00011211
   113fc:	20001ac4 	.word	0x20001ac4
   11400:	000111bd 	.word	0x000111bd
   11404:	20001efc 	.word	0x20001efc

00011408 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11408:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1140c:	e7a2      	b.n	11354 <_ZN9ClearCore12SerialDriver5StateEs>
   1140e:	bf00      	nop

00011410 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11410:	7980      	ldrb	r0, [r0, #6]
   11412:	4770      	bx	lr

00011414 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   11414:	f1a1 0004 	sub.w	r0, r1, #4
   11418:	fab0 f080 	clz	r0, r0
   1141c:	0940      	lsrs	r0, r0, #5
   1141e:	4770      	bx	lr

00011420 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11420:	2002      	movs	r0, #2
   11422:	4770      	bx	lr

00011424 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   11424:	2001      	movs	r0, #1
   11426:	4770      	bx	lr

00011428 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11428:	2000      	movs	r0, #0
   1142a:	4770      	bx	lr

0001142c <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   1142c:	4770      	bx	lr
   1142e:	bf00      	nop

00011430 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11430:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   11432:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   11434:	7183      	strb	r3, [r0, #6]
   11436:	4770      	bx	lr

00011438 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11438:	4b04      	ldr	r3, [pc, #16]	; (1144c <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   1143a:	681a      	ldr	r2, [r3, #0]
   1143c:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11440:	6883      	ldr	r3, [r0, #8]
   11442:	421a      	tst	r2, r3
}
   11444:	bf14      	ite	ne
   11446:	2001      	movne	r0, #1
   11448:	2000      	moveq	r0, #0
   1144a:	4770      	bx	lr
   1144c:	20001ac4 	.word	0x20001ac4

00011450 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   11450:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   11452:	b971      	cbnz	r1, 11472 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11454:	f3bf 8f5b 	dmb	ish
   11458:	4a0d      	ldr	r2, [pc, #52]	; (11490 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   1145a:	43db      	mvns	r3, r3
   1145c:	e852 1f00 	ldrex	r1, [r2]
   11460:	4019      	ands	r1, r3
   11462:	e842 1000 	strex	r0, r1, [r2]
   11466:	2800      	cmp	r0, #0
   11468:	d1f8      	bne.n	1145c <_ZN9ClearCore9LedDriver5StateEs+0xc>
   1146a:	f3bf 8f5b 	dmb	ish
    return true;
}
   1146e:	2001      	movs	r0, #1
   11470:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11472:	4a07      	ldr	r2, [pc, #28]	; (11490 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11474:	f3bf 8f5b 	dmb	ish
   11478:	e852 1f00 	ldrex	r1, [r2]
   1147c:	4319      	orrs	r1, r3
   1147e:	e842 1000 	strex	r0, r1, [r2]
   11482:	2800      	cmp	r0, #0
   11484:	d1f8      	bne.n	11478 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11486:	f3bf 8f5b 	dmb	ish
   1148a:	2001      	movs	r0, #1
   1148c:	4770      	bx	lr
   1148e:	bf00      	nop
   11490:	20001ac4 	.word	0x20001ac4

00011494 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11494:	b538      	push	{r3, r4, r5, lr}
   11496:	4604      	mov	r4, r0
   11498:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   1149a:	f7fc ff13 	bl	e2c4 <_ZN9ClearCore9ConnectorC1Ev>
   1149e:	4b02      	ldr	r3, [pc, #8]	; (114a8 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   114a0:	60a5      	str	r5, [r4, #8]
   114a2:	6023      	str	r3, [r4, #0]
   114a4:	4620      	mov	r0, r4
   114a6:	bd38      	pop	{r3, r4, r5, pc}
   114a8:	0002331c 	.word	0x0002331c

000114ac <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   114ae:	4d19      	ldr	r5, [pc, #100]	; (11514 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   114b0:	682c      	ldr	r4, [r5, #0]
   114b2:	f014 0401 	ands.w	r4, r4, #1
   114b6:	d002      	beq.n	114be <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   114b8:	4b17      	ldr	r3, [pc, #92]	; (11518 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   114ba:	6818      	ldr	r0, [r3, #0]
   114bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114be:	2044      	movs	r0, #68	; 0x44
   114c0:	f001 fe66 	bl	13190 <_Znwj>
   114c4:	4a14      	ldr	r2, [pc, #80]	; (11518 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   114c6:	4f15      	ldr	r7, [pc, #84]	; (1151c <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   114c8:	4e15      	ldr	r6, [pc, #84]	; (11520 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   114ca:	4916      	ldr	r1, [pc, #88]	; (11524 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   114cc:	6004      	str	r4, [r0, #0]
   114ce:	2301      	movs	r3, #1
   114d0:	6044      	str	r4, [r0, #4]
   114d2:	6084      	str	r4, [r0, #8]
   114d4:	60c4      	str	r4, [r0, #12]
   114d6:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   114d8:	6144      	str	r4, [r0, #20]
   114da:	6184      	str	r4, [r0, #24]
   114dc:	61c4      	str	r4, [r0, #28]
   114de:	6244      	str	r4, [r0, #36]	; 0x24
   114e0:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   114e4:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   114e8:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   114ec:	6204      	str	r4, [r0, #32]
   114ee:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   114f2:	8584      	strh	r4, [r0, #44]	; 0x2c
   114f4:	85c4      	strh	r4, [r0, #46]	; 0x2e
   114f6:	8604      	strh	r4, [r0, #48]	; 0x30
   114f8:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   114fc:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11500:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   11504:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11508:	6347      	str	r7, [r0, #52]	; 0x34
   1150a:	6386      	str	r6, [r0, #56]	; 0x38
   1150c:	63c1      	str	r1, [r0, #60]	; 0x3c
   1150e:	6010      	str	r0, [r2, #0]
   11510:	602b      	str	r3, [r5, #0]
    return *instance;
}
   11512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11514:	20001f14 	.word	0x20001f14
   11518:	20001f1c 	.word	0x20001f1c
   1151c:	09c400fa 	.word	0x09c400fa
   11520:	2cec1388 	.word	0x2cec1388
   11524:	09c41388 	.word	0x09c41388

00011528 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11528:	6840      	ldr	r0, [r0, #4]
   1152a:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   1152e:	4008      	ands	r0, r1
   11530:	4770      	bx	lr
   11532:	bf00      	nop

00011534 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11534:	6840      	ldr	r0, [r0, #4]
   11536:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   1153a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1153e:	4770      	bx	lr

00011540 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11540:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   11542:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   11544:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   11546:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   1154a:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   1154c:	4802      	ldr	r0, [pc, #8]	; (11558 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   1154e:	f7f9 fa0d 	bl	a96c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   11552:	2001      	movs	r0, #1
   11554:	bd08      	pop	{r3, pc}
   11556:	bf00      	nop
   11558:	200019d0 	.word	0x200019d0

0001155c <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   1155c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   11560:	b951      	cbnz	r1, 11578 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   11562:	4b17      	ldr	r3, [pc, #92]	; (115c0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   11564:	2204      	movs	r2, #4
   11566:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   1156a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   1156e:	f042 0201 	orr.w	r2, r2, #1
   11572:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   11576:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   11578:	1d03      	adds	r3, r0, #4
   1157a:	f3bf 8f5b 	dmb	ish
   1157e:	e853 2f00 	ldrex	r2, [r3]
   11582:	f042 0208 	orr.w	r2, r2, #8
   11586:	e843 2100 	strex	r1, r2, [r3]
   1158a:	2900      	cmp	r1, #0
   1158c:	d1f7      	bne.n	1157e <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   1158e:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   11592:	f3bf 8f5b 	dmb	ish
   11596:	300c      	adds	r0, #12
   11598:	e850 3f00 	ldrex	r3, [r0]
   1159c:	f043 0308 	orr.w	r3, r3, #8
   115a0:	e840 3200 	strex	r2, r3, [r0]
   115a4:	2a00      	cmp	r2, #0
   115a6:	d1f7      	bne.n	11598 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   115a8:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   115ac:	4b04      	ldr	r3, [pc, #16]	; (115c0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   115ae:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   115b0:	2102      	movs	r1, #2
   115b2:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   115b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   115ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   115be:	4770      	bx	lr
   115c0:	41008000 	.word	0x41008000

000115c4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   115c4:	4401      	add	r1, r0
   115c6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   115ca:	431a      	orrs	r2, r3
   115cc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   115d0:	4770      	bx	lr
   115d2:	bf00      	nop

000115d4 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   115d4:	b2cb      	uxtb	r3, r1
   115d6:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   115d8:	b510      	push	{r4, lr}
   115da:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   115dc:	d505      	bpl.n	115ea <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   115de:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   115e2:	f042 0202 	orr.w	r2, r2, #2
   115e6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   115ea:	0798      	lsls	r0, r3, #30
   115ec:	d505      	bpl.n	115fa <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   115ee:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   115f2:	f042 0201 	orr.w	r2, r2, #1
   115f6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   115fa:	075a      	lsls	r2, r3, #29
   115fc:	d505      	bpl.n	1160a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   115fe:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11602:	f042 0201 	orr.w	r2, r2, #1
   11606:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   1160a:	06d8      	lsls	r0, r3, #27
   1160c:	d505      	bpl.n	1161a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   1160e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11612:	f042 0204 	orr.w	r2, r2, #4
   11616:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   1161a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1161e:	06ca      	lsls	r2, r1, #27
   11620:	d505      	bpl.n	1162e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   11622:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11626:	f042 0202 	orr.w	r2, r2, #2
   1162a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   1162e:	4a14      	ldr	r2, [pc, #80]	; (11680 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11630:	6812      	ldr	r2, [r2, #0]
   11632:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   11636:	b112      	cbz	r2, 1163e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11638:	f011 0f0c 	tst.w	r1, #12
   1163c:	d118      	bne.n	11670 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   1163e:	061b      	lsls	r3, r3, #24
   11640:	d505      	bpl.n	1164e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   11642:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   11646:	f043 0308 	orr.w	r3, r3, #8
   1164a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   1164e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11652:	f001 fc29 	bl	12ea8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   11656:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   1165a:	4a0a      	ldr	r2, [pc, #40]	; (11684 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   1165c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   11660:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   11664:	3300      	adds	r3, #0
   11666:	bf18      	it	ne
   11668:	2301      	movne	r3, #1
   1166a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   1166e:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   11670:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11674:	f042 0204 	orr.w	r2, r2, #4
   11678:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   1167c:	e7df      	b.n	1163e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   1167e:	bf00      	nop
   11680:	20001bf0 	.word	0x20001bf0
   11684:	200019d0 	.word	0x200019d0

00011688 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   11688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1168c:	b082      	sub	sp, #8
            reg = 0;
   1168e:	2300      	movs	r3, #0
   11690:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11692:	4b98      	ldr	r3, [pc, #608]	; (118f4 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   11694:	6844      	ldr	r4, [r0, #4]
   11696:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1169a:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   1169c:	4f96      	ldr	r7, [pc, #600]	; (118f8 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1169e:	8a13      	ldrh	r3, [r2, #16]
   116a0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11918 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   116a4:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   116a6:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   116a8:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   116aa:	b29b      	uxth	r3, r3
    return (currentStatus &&
   116ac:	bf4c      	ite	mi
   116ae:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   116b2:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   116b6:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   116b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   116bc:	4e8f      	ldr	r6, [pc, #572]	; (118fc <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   116be:	bfd4      	ite	le
   116c0:	2300      	movle	r3, #0
   116c2:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   116c4:	f363 0000 	bfi	r0, r3, #0, #1
   116c8:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   116cc:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   116ce:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   116d0:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   116d2:	b29b      	uxth	r3, r3
    return (currentStatus &&
   116d4:	bf4c      	ite	mi
   116d6:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   116da:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   116de:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   116e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   116e4:	bfcc      	ite	gt
   116e6:	2300      	movgt	r3, #0
   116e8:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   116ea:	f363 0041 	bfi	r0, r3, #1, #1
   116ee:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   116f2:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   116f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   116f8:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   116fa:	b29b      	uxth	r3, r3
    return (currentStatus &&
   116fc:	bf4c      	ite	mi
   116fe:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11702:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   11706:	428b      	cmp	r3, r1
   11708:	bfcc      	ite	gt
   1170a:	2300      	movgt	r3, #0
   1170c:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   1170e:	f363 1004 	bfi	r0, r3, #4, #1
   11712:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1171a:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   1171e:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   11722:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11726:	4976      	ldr	r1, [pc, #472]	; (11900 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11728:	4f76      	ldr	r7, [pc, #472]	; (11904 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1172a:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   1172c:	43db      	mvns	r3, r3
   1172e:	b2c0      	uxtb	r0, r0
   11730:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11734:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11738:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   1173a:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1173e:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   11742:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11746:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1174a:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1174e:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   11752:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11754:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   11758:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1175c:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11760:	bf18      	it	ne
   11762:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11764:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11768:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   1176c:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11770:	f083 0301 	eor.w	r3, r3, #1
   11774:	f363 0241 	bfi	r2, r3, #1, #1
   11778:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1177c:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   1177e:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11782:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11786:	b2d2      	uxtb	r2, r2
   11788:	f361 0282 	bfi	r2, r1, #2, #1
   1178c:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11790:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11794:	4a5c      	ldr	r2, [pc, #368]	; (11908 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11796:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   1179a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1179e:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   117a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   117a6:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   117a8:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   117ac:	4857      	ldr	r0, [pc, #348]	; (1190c <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   117ae:	f88d 1004 	strb.w	r1, [sp, #4]
   117b2:	bf18      	it	ne
   117b4:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   117b6:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   117ba:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   117be:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   117c0:	4e53      	ldr	r6, [pc, #332]	; (11910 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   117c2:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   117c6:	f362 1345 	bfi	r3, r2, #5, #1
   117ca:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   117ce:	4628      	mov	r0, r5
   117d0:	9901      	ldr	r1, [sp, #4]
   117d2:	f7ff feff 	bl	115d4 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   117d6:	6830      	ldr	r0, [r6, #0]
   117d8:	6803      	ldr	r3, [r0, #0]
   117da:	681b      	ldr	r3, [r3, #0]
   117dc:	4543      	cmp	r3, r8
   117de:	f040 8084 	bne.w	118ea <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   117e2:	7980      	ldrb	r0, [r0, #6]
   117e4:	2804      	cmp	r0, #4
   117e6:	d00c      	beq.n	11802 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   117e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   117ec:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   117f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   117f4:	bf14      	ite	ne
   117f6:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   117fa:	f023 0308 	biceq.w	r3, r3, #8
   117fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11802:	6870      	ldr	r0, [r6, #4]
   11804:	6803      	ldr	r3, [r0, #0]
   11806:	681b      	ldr	r3, [r3, #0]
   11808:	4543      	cmp	r3, r8
   1180a:	d170      	bne.n	118ee <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   1180c:	7980      	ldrb	r0, [r0, #6]
   1180e:	2804      	cmp	r0, #4
   11810:	d00c      	beq.n	1182c <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11812:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11816:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   1181a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1181e:	bf14      	ite	ne
   11820:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11824:	f023 0304 	biceq.w	r3, r3, #4
   11828:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   1182c:	9a01      	ldr	r2, [sp, #4]
   1182e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11832:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11834:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11836:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   1183a:	f105 0210 	add.w	r2, r5, #16
   1183e:	f3bf 8f5b 	dmb	ish
   11842:	e852 1f00 	ldrex	r1, [r2]
   11846:	4319      	orrs	r1, r3
   11848:	e842 1000 	strex	r0, r1, [r2]
   1184c:	2800      	cmp	r0, #0
   1184e:	d1f8      	bne.n	11842 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11850:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11854:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11856:	f3bf 8f5b 	dmb	ish
   1185a:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   1185e:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11862:	e853 2f00 	ldrex	r2, [r3]
   11866:	4322      	orrs	r2, r4
   11868:	e843 2100 	strex	r1, r2, [r3]
   1186c:	2900      	cmp	r1, #0
   1186e:	d1f8      	bne.n	11862 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11870:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11874:	f105 0308 	add.w	r3, r5, #8
   11878:	9a01      	ldr	r2, [sp, #4]
   1187a:	f3bf 8f5b 	dmb	ish
   1187e:	e853 1f00 	ldrex	r1, [r3]
   11882:	4311      	orrs	r1, r2
   11884:	e843 1000 	strex	r0, r1, [r3]
   11888:	2800      	cmp	r0, #0
   1188a:	d1f8      	bne.n	1187e <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   1188c:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11890:	9b01      	ldr	r3, [sp, #4]
   11892:	f3bf 8f5b 	dmb	ish
   11896:	e855 2f00 	ldrex	r2, [r5]
   1189a:	431a      	orrs	r2, r3
   1189c:	e845 2100 	strex	r1, r2, [r5]
   118a0:	2900      	cmp	r1, #0
   118a2:	d1f8      	bne.n	11896 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   118a4:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   118a8:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   118aa:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   118ae:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   118b2:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   118b6:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   118b8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   118bc:	d012      	beq.n	118e4 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   118be:	4c15      	ldr	r4, [pc, #84]	; (11914 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   118c0:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   118c4:	f854 0b04 	ldr.w	r0, [r4], #4
   118c8:	f7f3 fa34 	bl	4d34 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   118cc:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   118ce:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   118d2:	d1f7      	bne.n	118c4 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   118d4:	6830      	ldr	r0, [r6, #0]
   118d6:	f7fc fdbb 	bl	e450 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   118da:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   118de:	6870      	ldr	r0, [r6, #4]
   118e0:	f7fc fdb6 	bl	e450 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   118e4:	b002      	add	sp, #8
   118e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   118ea:	4798      	blx	r3
   118ec:	e77a      	b.n	117e4 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   118ee:	4798      	blx	r3
   118f0:	e78d      	b.n	1180e <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   118f2:	bf00      	nop
   118f4:	20001dfc 	.word	0x20001dfc
   118f8:	41008000 	.word	0x41008000
   118fc:	20001bf0 	.word	0x20001bf0
   11900:	20001efc 	.word	0x20001efc
   11904:	200019d0 	.word	0x200019d0
   11908:	20001884 	.word	0x20001884
   1190c:	20001f24 	.word	0x20001f24
   11910:	00022bc0 	.word	0x00022bc0
   11914:	00022bc8 	.word	0x00022bc8
   11918:	0000e3d9 	.word	0x0000e3d9

0001191c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   1191c:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   1191e:	b94a      	cbnz	r2, 11934 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11920:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11924:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11926:	6983      	ldr	r3, [r0, #24]
   11928:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   1192a:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   1192c:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   1192e:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11930:	6181      	str	r1, [r0, #24]
   11932:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11934:	4319      	orrs	r1, r3
   11936:	e7f5      	b.n	11924 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011938 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11938:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   1193a:	f7ff fdb7 	bl	114ac <_ZN9ClearCore13StatusManager8InstanceEv>
   1193e:	4b01      	ldr	r3, [pc, #4]	; (11944 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11940:	6018      	str	r0, [r3, #0]
   11942:	bd08      	pop	{r3, pc}
   11944:	20001f18 	.word	0x20001f18

00011948 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11948:	b530      	push	{r4, r5, lr}
   1194a:	b083      	sub	sp, #12
   1194c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11950:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11952:	9401      	str	r4, [sp, #4]
   11954:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11956:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11958:	f7ff f8d4 	bl	10b04 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1195c:	4b04      	ldr	r3, [pc, #16]	; (11970 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   1195e:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11960:	4620      	mov	r0, r4
   11962:	2100      	movs	r1, #0
   11964:	f7ff f92c 	bl	10bc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11968:	4620      	mov	r0, r4
   1196a:	b003      	add	sp, #12
   1196c:	bd30      	pop	{r4, r5, pc}
   1196e:	bf00      	nop
   11970:	00022b6c 	.word	0x00022b6c

00011974 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11974:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11976:	4d0f      	ldr	r5, [pc, #60]	; (119b4 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11978:	682b      	ldr	r3, [r5, #0]
   1197a:	f013 0401 	ands.w	r4, r3, #1
   1197e:	d002      	beq.n	11986 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11980:	4b0d      	ldr	r3, [pc, #52]	; (119b8 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11982:	6818      	ldr	r0, [r3, #0]
   11984:	bd38      	pop	{r3, r4, r5, pc}
   11986:	f44f 7002 	mov.w	r0, #520	; 0x208
   1198a:	f001 fc01 	bl	13190 <_Znwj>
   1198e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11990:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11994:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11998:	4908      	ldr	r1, [pc, #32]	; (119bc <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   1199a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   1199e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   119a2:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   119a6:	f00c fb7b 	bl	1e0a0 <memcpy>
    static NvmManager *instance = new NvmManager();
   119aa:	4903      	ldr	r1, [pc, #12]	; (119b8 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   119ac:	2201      	movs	r2, #1
   119ae:	6008      	str	r0, [r1, #0]
   119b0:	602a      	str	r2, [r5, #0]
}
   119b2:	bd38      	pop	{r3, r4, r5, pc}
   119b4:	20001f20 	.word	0x20001f20
   119b8:	20001f28 	.word	0x20001f28
   119bc:	00804000 	.word	0x00804000

000119c0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   119c0:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   119c4:	bf9a      	itte	ls
   119c6:	1840      	addls	r0, r0, r1
   119c8:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   119cc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   119d0:	4770      	bx	lr
   119d2:	bf00      	nop

000119d4 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   119d4:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   119d6:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   119da:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   119de:	2400      	movs	r4, #0
   119e0:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   119e4:	1c6b      	adds	r3, r5, #1
   119e6:	bf08      	it	eq
   119e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   119ec:	d005      	beq.n	119fa <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   119ee:	0c2e      	lsrs	r6, r5, #16
   119f0:	4627      	mov	r7, r4
   119f2:	ea56 0007 	orrs.w	r0, r6, r7
   119f6:	462b      	mov	r3, r5
   119f8:	d002      	beq.n	11a00 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   119fa:	4a07      	ldr	r2, [pc, #28]	; (11a18 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   119fc:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11a00:	0a1e      	lsrs	r6, r3, #8
   11a02:	0e15      	lsrs	r5, r2, #24
   11a04:	0c14      	lsrs	r4, r2, #16
   11a06:	0a10      	lsrs	r0, r2, #8
   11a08:	700e      	strb	r6, [r1, #0]
   11a0a:	708d      	strb	r5, [r1, #2]
   11a0c:	70cc      	strb	r4, [r1, #3]
   11a0e:	704b      	strb	r3, [r1, #1]
   11a10:	714a      	strb	r2, [r1, #5]
   11a12:	7108      	strb	r0, [r1, #4]
    }
}
   11a14:	bcf0      	pop	{r4, r5, r6, r7}
   11a16:	4770      	bx	lr
   11a18:	10b00000 	.word	0x10b00000

00011a1c <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11a1c:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11a1e:	f7ff ffa9 	bl	11974 <_ZN9ClearCore10NvmManager8InstanceEv>
   11a22:	4b01      	ldr	r3, [pc, #4]	; (11a28 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11a24:	6018      	str	r0, [r3, #0]
   11a26:	bd08      	pop	{r3, pc}
   11a28:	20001f24 	.word	0x20001f24

00011a2c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11a2c:	2000      	movs	r0, #0
   11a2e:	4770      	bx	lr

00011a30 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a34:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11a36:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11a38:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11a3a:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11a3e:	2900      	cmp	r1, #0
   11a40:	d04f      	beq.n	11ae2 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11a42:	4b55      	ldr	r3, [pc, #340]	; (11b98 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11a44:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11a48:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11a4c:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11a50:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11a52:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11a54:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11a58:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11a5a:	f000 8095 	beq.w	11b88 <_usb_d_dev_in_next+0x158>
   11a5e:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11a62:	f895 c013 	ldrb.w	ip, [r5, #19]
   11a66:	401a      	ands	r2, r3
   11a68:	b292      	uxth	r2, r2
   11a6a:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11a6e:	0163      	lsls	r3, r4, #5
   11a70:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11a74:	2602      	movs	r6, #2
   11a76:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11a7a:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11a7c:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11a7e:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11a80:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11a82:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11a84:	d235      	bcs.n	11af2 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11a86:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11a88:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11a8c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11a8e:	d05e      	beq.n	11b4e <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11a90:	682b      	ldr	r3, [r5, #0]
   11a92:	68e8      	ldr	r0, [r5, #12]
   11a94:	4576      	cmp	r6, lr
   11a96:	bf28      	it	cs
   11a98:	4676      	movcs	r6, lr
   11a9a:	4419      	add	r1, r3
   11a9c:	4632      	mov	r2, r6
   11a9e:	f00c faff 	bl	1e0a0 <memcpy>
	bank->ADDR.reg          = addr;
   11aa2:	4b3d      	ldr	r3, [pc, #244]	; (11b98 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11aa4:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11aa6:	0162      	lsls	r2, r4, #5
   11aa8:	1899      	adds	r1, r3, r2
   11aaa:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11aac:	4413      	add	r3, r2
   11aae:	6959      	ldr	r1, [r3, #20]
   11ab0:	f366 010d 	bfi	r1, r6, #0, #14
   11ab4:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11ab6:	6959      	ldr	r1, [r3, #20]
   11ab8:	f36f 319b 	bfc	r1, #14, #14
   11abc:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11abe:	b947      	cbnz	r7, 11ad2 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11ac0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11ac4:	f1b8 0f01 	cmp.w	r8, #1
   11ac8:	bf14      	ite	ne
   11aca:	224a      	movne	r2, #74	; 0x4a
   11acc:	224e      	moveq	r2, #78	; 0x4e
   11ace:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11ad2:	0164      	lsls	r4, r4, #5
   11ad4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11ad8:	2380      	movs	r3, #128	; 0x80
   11ada:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ae2:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ae6:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11aea:	f00c 0807 	and.w	r8, ip, #7
   11aee:	460a      	mov	r2, r1
   11af0:	e7c3      	b.n	11a7a <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11af2:	f01c 0f10 	tst.w	ip, #16
   11af6:	d11a      	bne.n	11b2e <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11af8:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11afa:	f1b8 0f01 	cmp.w	r8, #1
   11afe:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11b02:	bf0c      	ite	eq
   11b04:	234b      	moveq	r3, #75	; 0x4b
   11b06:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11b08:	4596      	cmp	lr, r2
   11b0a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11b0e:	d02c      	beq.n	11b6a <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11b10:	28ff      	cmp	r0, #255	; 0xff
   11b12:	d028      	beq.n	11b66 <_usb_d_dev_in_next+0x136>
   11b14:	7ceb      	ldrb	r3, [r5, #19]
   11b16:	065a      	lsls	r2, r3, #25
   11b18:	d525      	bpl.n	11b66 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11b1a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11b1e:	491f      	ldr	r1, [pc, #124]	; (11b9c <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11b20:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11b22:	68aa      	ldr	r2, [r5, #8]
   11b24:	690b      	ldr	r3, [r1, #16]
}
   11b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11b2a:	2100      	movs	r1, #0
   11b2c:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11b2e:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11b30:	4b1b      	ldr	r3, [pc, #108]	; (11ba0 <_usb_d_dev_in_next+0x170>)
   11b32:	0162      	lsls	r2, r4, #5
   11b34:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11b36:	f36f 1104 	bfc	r1, #4, #1
   11b3a:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11b3c:	6859      	ldr	r1, [r3, #4]
   11b3e:	f36f 010d 	bfc	r1, #0, #14
   11b42:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11b44:	6859      	ldr	r1, [r3, #4]
   11b46:	f36f 319b 	bfc	r1, #14, #14
   11b4a:	6059      	str	r1, [r3, #4]
   11b4c:	e7b7      	b.n	11abe <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11b4e:	4b12      	ldr	r3, [pc, #72]	; (11b98 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11b50:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11b52:	0162      	lsls	r2, r4, #5
   11b54:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11b56:	4401      	add	r1, r0
   11b58:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11b5c:	bf28      	it	cs
   11b5e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11b62:	6129      	str	r1, [r5, #16]
   11b64:	e7a2      	b.n	11aac <_usb_d_dev_in_next+0x7c>
   11b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11b6a:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11b6c:	4a0b      	ldr	r2, [pc, #44]	; (11b9c <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11b6e:	f36f 1386 	bfc	r3, #6, #1
   11b72:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11b74:	68d3      	ldr	r3, [r2, #12]
   11b76:	4798      	blx	r3
   11b78:	2800      	cmp	r0, #0
   11b7a:	d1f4      	bne.n	11b66 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11b7c:	7ceb      	ldrb	r3, [r5, #19]
   11b7e:	7ca8      	ldrb	r0, [r5, #18]
   11b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11b84:	74eb      	strb	r3, [r5, #19]
   11b86:	e7c3      	b.n	11b10 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11b88:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11b8c:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11b90:	f00c 0807 	and.w	r8, ip, #7
   11b94:	e76b      	b.n	11a6e <_usb_d_dev_in_next+0x3e>
   11b96:	bf00      	nop
   11b98:	2000221c 	.word	0x2000221c
   11b9c:	20001fec 	.word	0x20001fec
   11ba0:	2000222c 	.word	0x2000222c

00011ba4 <_usb_d_dev_out_next>:
{
   11ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11ba8:	7c85      	ldrb	r5, [r0, #18]
{
   11baa:	b083      	sub	sp, #12
   11bac:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11bae:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11bb0:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11bb4:	2900      	cmp	r1, #0
   11bb6:	f000 8085 	beq.w	11cc4 <_usb_d_dev_out_next+0x120>
   11bba:	4b76      	ldr	r3, [pc, #472]	; (11d94 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11bbc:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11bbe:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11bc2:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11bc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11bc8:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11bca:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11bcc:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11bce:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11bd2:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11bd6:	f000 80d7 	beq.w	11d88 <_usb_d_dev_out_next+0x1e4>
   11bda:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11bdc:	7cc2      	ldrb	r2, [r0, #19]
   11bde:	b2b6      	uxth	r6, r6
   11be0:	ea09 0306 	and.w	r3, r9, r6
   11be4:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11be8:	0169      	lsls	r1, r5, #5
   11bea:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11bee:	2001      	movs	r0, #1
   11bf0:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11bf4:	0691      	lsls	r1, r2, #26
   11bf6:	d512      	bpl.n	11c1e <_usb_d_dev_out_next+0x7a>
   11bf8:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11bfc:	f1be 0f00 	cmp.w	lr, #0
   11c00:	d048      	beq.n	11c94 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11c02:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11c04:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11c06:	ebae 0200 	sub.w	r2, lr, r0
   11c0a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11c0c:	429a      	cmp	r2, r3
   11c0e:	bf28      	it	cs
   11c10:	461a      	movcs	r2, r3
   11c12:	6823      	ldr	r3, [r4, #0]
   11c14:	68e1      	ldr	r1, [r4, #12]
   11c16:	4418      	add	r0, r3
   11c18:	f00c fa42 	bl	1e0a0 <memcpy>
   11c1c:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11c1e:	6862      	ldr	r2, [r4, #4]
   11c20:	2a00      	cmp	r2, #0
   11c22:	d036      	beq.n	11c92 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11c24:	2f00      	cmp	r7, #0
   11c26:	d15b      	bne.n	11ce0 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11c28:	68a3      	ldr	r3, [r4, #8]
   11c2a:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11c2c:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11c2e:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11c30:	d960      	bls.n	11cf4 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11c32:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11c34:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11c36:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11c38:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11c3a:	f140 808b 	bpl.w	11d54 <_usb_d_dev_out_next+0x1b0>
   11c3e:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11c40:	4954      	ldr	r1, [pc, #336]	; (11d94 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11c42:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11c44:	f841 3008 	str.w	r3, [r1, r8]
   11c48:	42b2      	cmp	r2, r6
   11c4a:	bf28      	it	cs
   11c4c:	4632      	movcs	r2, r6
   11c4e:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11c52:	eb01 0308 	add.w	r3, r1, r8
   11c56:	6858      	ldr	r0, [r3, #4]
   11c58:	f362 309b 	bfi	r0, r2, #14, #14
   11c5c:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11c5e:	685a      	ldr	r2, [r3, #4]
   11c60:	f36f 020d 	bfc	r2, #0, #14
   11c64:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11c66:	b95f      	cbnz	r7, 11c80 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11c68:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11c6c:	bf08      	it	eq
   11c6e:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11c70:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11c74:	bf0a      	itet	eq
   11c76:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11c78:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11c7a:	768f      	strbeq	r7, [r1, #26]
   11c7c:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11c80:	016d      	lsls	r5, r5, #5
   11c82:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11c86:	2340      	movs	r3, #64	; 0x40
   11c88:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11c8c:	b003      	add	sp, #12
   11c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c92:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11c94:	06d6      	lsls	r6, r2, #27
   11c96:	d54b      	bpl.n	11d30 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11c98:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11c9a:	493e      	ldr	r1, [pc, #248]	; (11d94 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11c9c:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11c9e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11ca2:	f043 0320 	orr.w	r3, r3, #32
   11ca6:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11ca8:	f841 2008 	str.w	r2, [r1, r8]
   11cac:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11cb0:	8a20      	ldrh	r0, [r4, #16]
   11cb2:	685a      	ldr	r2, [r3, #4]
   11cb4:	f360 329b 	bfi	r2, r0, #14, #14
   11cb8:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11cba:	685a      	ldr	r2, [r3, #4]
   11cbc:	f36f 020d 	bfc	r2, #0, #14
   11cc0:	605a      	str	r2, [r3, #4]
   11cc2:	e7d0      	b.n	11c66 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11cc4:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11cc6:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11cc8:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11ccc:	429e      	cmp	r6, r3
   11cce:	d137      	bne.n	11d40 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11cd0:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11cd2:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   11cd6:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11cd8:	46b9      	mov	r9, r7
   11cda:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11cde:	e789      	b.n	11bf4 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   11ce0:	8a21      	ldrh	r1, [r4, #16]
   11ce2:	4299      	cmp	r1, r3
   11ce4:	d9a0      	bls.n	11c28 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   11ce6:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11ce8:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   11cea:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   11cee:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   11cf0:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11cf2:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   11cf4:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11cf8:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   11cfc:	bf0c      	ite	eq
   11cfe:	232d      	moveq	r3, #45	; 0x2d
   11d00:	2325      	movne	r3, #37	; 0x25
   11d02:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   11d06:	b915      	cbnz	r5, 11d0e <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   11d08:	4b22      	ldr	r3, [pc, #136]	; (11d94 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11d0a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   11d0c:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11d0e:	7ca0      	ldrb	r0, [r4, #18]
   11d10:	28ff      	cmp	r0, #255	; 0xff
   11d12:	d0bb      	beq.n	11c8c <_usb_d_dev_out_next+0xe8>
   11d14:	7ce3      	ldrb	r3, [r4, #19]
   11d16:	065a      	lsls	r2, r3, #25
   11d18:	d5b8      	bpl.n	11c8c <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   11d1a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11d1e:	491e      	ldr	r1, [pc, #120]	; (11d98 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   11d20:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11d22:	690b      	ldr	r3, [r1, #16]
   11d24:	68a2      	ldr	r2, [r4, #8]
   11d26:	2100      	movs	r1, #0
}
   11d28:	b003      	add	sp, #12
   11d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11d2e:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   11d30:	b117      	cbz	r7, 11d38 <_usb_d_dev_out_next+0x194>
   11d32:	8a22      	ldrh	r2, [r4, #16]
   11d34:	429a      	cmp	r2, r3
   11d36:	d8d6      	bhi.n	11ce6 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   11d38:	68a3      	ldr	r3, [r4, #8]
   11d3a:	4453      	add	r3, sl
   11d3c:	60a3      	str	r3, [r4, #8]
   11d3e:	e7d9      	b.n	11cf4 <_usb_d_dev_out_next+0x150>
   11d40:	3e01      	subs	r6, #1
   11d42:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11d44:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d48:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11d4a:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11d4c:	4689      	mov	r9, r1
   11d4e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11d52:	e74f      	b.n	11bf4 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   11d54:	8a20      	ldrh	r0, [r4, #16]
   11d56:	4282      	cmp	r2, r0
   11d58:	d905      	bls.n	11d66 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   11d5a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11d5e:	d90e      	bls.n	11d7e <_usb_d_dev_out_next+0x1da>
   11d60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11d64:	e005      	b.n	11d72 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   11d66:	bf3c      	itt	cc
   11d68:	f041 0120 	orrcc.w	r1, r1, #32
   11d6c:	74e1      	strbcc	r1, [r4, #19]
   11d6e:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11d72:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   11d74:	4907      	ldr	r1, [pc, #28]	; (11d94 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11d76:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   11d78:	f841 3008 	str.w	r3, [r1, r8]
   11d7c:	e769      	b.n	11c52 <_usb_d_dev_out_next+0xae>
   11d7e:	ea22 0206 	bic.w	r2, r2, r6
   11d82:	f3c2 020d 	ubfx	r2, r2, #0, #14
   11d86:	e7f4      	b.n	11d72 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11d88:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   11d8a:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11d8e:	f002 0b07 	and.w	fp, r2, #7
   11d92:	e729      	b.n	11be8 <_usb_d_dev_out_next+0x44>
   11d94:	2000221c 	.word	0x2000221c
   11d98:	20001fec 	.word	0x20001fec

00011d9c <_usb_d_dev_handler>:
{
   11d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11da0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   11da4:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11da6:	8c16      	ldrh	r6, [r2, #32]
   11da8:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   11daa:	2e00      	cmp	r6, #0
   11dac:	f000 812c 	beq.w	12008 <_usb_d_dev_handler+0x26c>
   11db0:	4dc4      	ldr	r5, [pc, #784]	; (120c4 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   11db2:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   11db4:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   11db6:	7ca8      	ldrb	r0, [r5, #18]
   11db8:	28ff      	cmp	r0, #255	; 0xff
   11dba:	d030      	beq.n	11e1e <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   11dbc:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   11dc0:	fa07 f203 	lsl.w	r2, r7, r3
   11dc4:	4232      	tst	r2, r6
   11dc6:	d02a      	beq.n	11e1e <_usb_d_dev_handler+0x82>
   11dc8:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   11dcc:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11dd0:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   11dd2:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11dd6:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   11dda:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11ddc:	46c1      	mov	r9, r8
	if (flags) {
   11dde:	d01e      	beq.n	11e1e <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   11de0:	49b9      	ldr	r1, [pc, #740]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11de2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   11de6:	eb0a 0c04 	add.w	ip, sl, r4
   11dea:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   11dee:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   11df2:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   11df6:	2901      	cmp	r1, #1
   11df8:	f000 80f4 	beq.w	11fe4 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   11dfc:	f01b 0f80 	tst.w	fp, #128	; 0x80
   11e00:	d115      	bne.n	11e2e <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   11e02:	f013 0120 	ands.w	r1, r3, #32
   11e06:	d15a      	bne.n	11ebe <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11e08:	f013 0f04 	tst.w	r3, #4
   11e0c:	f040 8098 	bne.w	11f40 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   11e10:	07d9      	lsls	r1, r3, #31
   11e12:	f100 80e2 	bmi.w	11fda <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11e16:	f00b 0107 	and.w	r1, fp, #7
   11e1a:	2901      	cmp	r1, #1
   11e1c:	d058      	beq.n	11ed0 <_usb_d_dev_handler+0x134>
   11e1e:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   11e20:	2c1b      	cmp	r4, #27
   11e22:	f105 0514 	add.w	r5, r5, #20
   11e26:	d1c6      	bne.n	11db6 <_usb_d_dev_handler+0x1a>
}
   11e28:	b001      	add	sp, #4
   11e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   11e2e:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   11e32:	f040 8143 	bne.w	120bc <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11e36:	f013 0f08 	tst.w	r3, #8
   11e3a:	f040 8189 	bne.w	12150 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11e3e:	0799      	lsls	r1, r3, #30
   11e40:	f100 8137 	bmi.w	120b2 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11e44:	f00b 0107 	and.w	r1, fp, #7
   11e48:	2901      	cmp	r1, #1
   11e4a:	d1e8      	bne.n	11e1e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11e4c:	0759      	lsls	r1, r3, #29
   11e4e:	f100 8241 	bmi.w	122d4 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11e52:	06db      	lsls	r3, r3, #27
   11e54:	d5e3      	bpl.n	11e1e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   11e56:	f01b 0f40 	tst.w	fp, #64	; 0x40
   11e5a:	d011      	beq.n	11e80 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   11e5c:	499a      	ldr	r1, [pc, #616]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11e5e:	eb0a 0304 	add.w	r3, sl, r4
   11e62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11e66:	f04f 0e80 	mov.w	lr, #128	; 0x80
   11e6a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   11e6e:	f36f 1186 	bfc	r1, #6, #1
   11e72:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11e76:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11e78:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11e7c:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   11e80:	4b91      	ldr	r3, [pc, #580]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11e82:	eb0a 0104 	add.w	r1, sl, r4
   11e86:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   11e8a:	4b90      	ldr	r3, [pc, #576]	; (120cc <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   11e8c:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11e90:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   11e94:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11e98:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   11e9c:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11ea0:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11ea4:	216f      	movs	r1, #111	; 0x6f
   11ea6:	f88e c00a 	strb.w	ip, [lr, #10]
   11eaa:	f88e c01a 	strb.w	ip, [lr, #26]
   11eae:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11eb2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   11eb6:	4b84      	ldr	r3, [pc, #528]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11eb8:	689b      	ldr	r3, [r3, #8]
   11eba:	4798      	blx	r3
   11ebc:	e7af      	b.n	11e1e <_usb_d_dev_handler+0x82>
   11ebe:	68aa      	ldr	r2, [r5, #8]
   11ec0:	2320      	movs	r3, #32
   11ec2:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   11ec6:	4b80      	ldr	r3, [pc, #512]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11ec8:	2101      	movs	r1, #1
   11eca:	691b      	ldr	r3, [r3, #16]
   11ecc:	4798      	blx	r3
   11ece:	e7a6      	b.n	11e1e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11ed0:	0719      	lsls	r1, r3, #28
   11ed2:	f100 80fd 	bmi.w	120d0 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11ed6:	06db      	lsls	r3, r3, #27
   11ed8:	d5a1      	bpl.n	11e1e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   11eda:	f01b 0f40 	tst.w	fp, #64	; 0x40
   11ede:	d011      	beq.n	11f04 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   11ee0:	4979      	ldr	r1, [pc, #484]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11ee2:	eb0a 0304 	add.w	r3, sl, r4
   11ee6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11eea:	f04f 0e80 	mov.w	lr, #128	; 0x80
   11eee:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   11ef2:	f36f 1186 	bfc	r1, #6, #1
   11ef6:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11efa:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11efc:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11f00:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   11f04:	4b70      	ldr	r3, [pc, #448]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11f06:	eb0a 0104 	add.w	r1, sl, r4
   11f0a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   11f0e:	4b6f      	ldr	r3, [pc, #444]	; (120cc <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   11f10:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11f14:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   11f18:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f1c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   11f20:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f24:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   11f26:	2100      	movs	r1, #0
   11f28:	f88e 100a 	strb.w	r1, [lr, #10]
   11f2c:	f88e 101a 	strb.w	r1, [lr, #26]
   11f30:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f34:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   11f38:	4b63      	ldr	r3, [pc, #396]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11f3a:	689b      	ldr	r3, [r3, #8]
   11f3c:	4798      	blx	r3
   11f3e:	e76e      	b.n	11e1e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   11f40:	4b62      	ldr	r3, [pc, #392]	; (120cc <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   11f42:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   11f46:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   11f48:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   11f4c:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   11f50:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   11f54:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   11f56:	d07c      	beq.n	12052 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   11f58:	f013 0302 	ands.w	r3, r3, #2
   11f5c:	d032      	beq.n	11fc4 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   11f5e:	f89e 100a 	ldrb.w	r1, [lr, #10]
   11f62:	f36f 0141 	bfc	r1, #1, #1
   11f66:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f6a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   11f6e:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f72:	2204      	movs	r2, #4
   11f74:	2901      	cmp	r1, #1
   11f76:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f7a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   11f7e:	f47f af4e 	bne.w	11e1e <_usb_d_dev_handler+0x82>
   11f82:	f01b 0f40 	tst.w	fp, #64	; 0x40
   11f86:	f43f af4a 	beq.w	11e1e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   11f8a:	494f      	ldr	r1, [pc, #316]	; (120c8 <_usb_d_dev_handler+0x32c>)
   11f8c:	eb0a 0204 	add.w	r2, sl, r4
   11f90:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   11f94:	3220      	adds	r2, #32
   11f96:	79d1      	ldrb	r1, [r2, #7]
   11f98:	09c9      	lsrs	r1, r1, #7
   11f9a:	f43f af40 	beq.w	11e1e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f9e:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fa0:	f04f 0e80 	mov.w	lr, #128	; 0x80
   11fa4:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11fa8:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11fac:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   11fb0:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11fb2:	4b45      	ldr	r3, [pc, #276]	; (120c8 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   11fb4:	f36f 1186 	bfc	r1, #6, #1
   11fb8:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11fba:	691b      	ldr	r3, [r3, #16]
   11fbc:	68aa      	ldr	r2, [r5, #8]
   11fbe:	2100      	movs	r1, #0
   11fc0:	4798      	blx	r3
   11fc2:	e72c      	b.n	11e1e <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   11fc4:	4941      	ldr	r1, [pc, #260]	; (120cc <_usb_d_dev_handler+0x330>)
   11fc6:	1888      	adds	r0, r1, r2
   11fc8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11fcc:	2104      	movs	r1, #4
   11fce:	7283      	strb	r3, [r0, #10]
   11fd0:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11fd4:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   11fd8:	e721      	b.n	11e1e <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   11fda:	2101      	movs	r1, #1
   11fdc:	4628      	mov	r0, r5
   11fde:	f7ff fde1 	bl	11ba4 <_usb_d_dev_out_next>
   11fe2:	e71c      	b.n	11e1e <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11fe4:	f013 0f10 	tst.w	r3, #16
   11fe8:	f040 80e0 	bne.w	121ac <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   11fec:	065a      	lsls	r2, r3, #25
   11fee:	f100 80e7 	bmi.w	121c0 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   11ff2:	069b      	lsls	r3, r3, #26
   11ff4:	f57f af13 	bpl.w	11e1e <_usb_d_dev_handler+0x82>
   11ff8:	2320      	movs	r3, #32
   11ffa:	68aa      	ldr	r2, [r5, #8]
   11ffc:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12000:	4b31      	ldr	r3, [pc, #196]	; (120c8 <_usb_d_dev_handler+0x32c>)
   12002:	691b      	ldr	r3, [r3, #16]
   12004:	4798      	blx	r3
   12006:	e70a      	b.n	11e1e <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12008:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   1200a:	8b13      	ldrh	r3, [r2, #24]
   1200c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   1200e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12010:	f013 0004 	ands.w	r0, r3, #4
   12014:	f040 80dc 	bne.w	121d0 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12018:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   1201c:	f040 80e0 	bne.w	121e0 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12020:	0618      	lsls	r0, r3, #24
   12022:	f100 8140 	bmi.w	122a6 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   12026:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   1202a:	f040 8191 	bne.w	12350 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   1202e:	f013 0108 	ands.w	r1, r3, #8
   12032:	f040 819e 	bne.w	12372 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   12036:	07db      	lsls	r3, r3, #31
   12038:	f57f aeba 	bpl.w	11db0 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   1203c:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12040:	4821      	ldr	r0, [pc, #132]	; (120c8 <_usb_d_dev_handler+0x32c>)
   12042:	8393      	strh	r3, [r2, #28]
   12044:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12046:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12048:	2570      	movs	r5, #112	; 0x70
   1204a:	2004      	movs	r0, #4
   1204c:	8315      	strh	r5, [r2, #24]
   1204e:	4623      	mov	r3, r4
   12050:	e0de      	b.n	12210 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12052:	f013 0f01 	tst.w	r3, #1
   12056:	f43f af7f 	beq.w	11f58 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1205a:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1205e:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12062:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12066:	f04f 0104 	mov.w	r1, #4
   1206a:	f88e 300a 	strb.w	r3, [lr, #10]
   1206e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12072:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12076:	f43f aed2 	beq.w	11e1e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1207a:	4b13      	ldr	r3, [pc, #76]	; (120c8 <_usb_d_dev_handler+0x32c>)
   1207c:	eb0a 0104 	add.w	r1, sl, r4
   12080:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12084:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12088:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1208c:	2240      	movs	r2, #64	; 0x40
   1208e:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12092:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12096:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   1209a:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1209e:	4b0a      	ldr	r3, [pc, #40]	; (120c8 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   120a0:	f36f 1286 	bfc	r2, #6, #1
   120a4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120a8:	691b      	ldr	r3, [r3, #16]
   120aa:	68aa      	ldr	r2, [r5, #8]
   120ac:	2104      	movs	r1, #4
   120ae:	4798      	blx	r3
   120b0:	e6b5      	b.n	11e1e <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   120b2:	2101      	movs	r1, #1
   120b4:	4628      	mov	r0, r5
   120b6:	f7ff fcbb 	bl	11a30 <_usb_d_dev_in_next>
   120ba:	e6b0      	b.n	11e1e <_usb_d_dev_handler+0x82>
   120bc:	68aa      	ldr	r2, [r5, #8]
   120be:	2340      	movs	r3, #64	; 0x40
   120c0:	e6ff      	b.n	11ec2 <_usb_d_dev_handler+0x126>
   120c2:	bf00      	nop
   120c4:	20002000 	.word	0x20002000
   120c8:	20001fec 	.word	0x20001fec
   120cc:	2000221c 	.word	0x2000221c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   120d0:	4bc3      	ldr	r3, [pc, #780]	; (123e0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   120d2:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   120d6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   120d8:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   120dc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   120e0:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   120e2:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   120e4:	f000 8098 	beq.w	12218 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   120e8:	f013 0302 	ands.w	r3, r3, #2
   120ec:	d053      	beq.n	12196 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   120ee:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120f2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   120f6:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120fa:	2208      	movs	r2, #8
   120fc:	f88e 101a 	strb.w	r1, [lr, #26]
   12100:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12104:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12108:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1210c:	f43f ae87 	beq.w	11e1e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12110:	4ab4      	ldr	r2, [pc, #720]	; (123e4 <_usb_d_dev_handler+0x648>)
   12112:	eb0a 0e04 	add.w	lr, sl, r4
   12116:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   1211a:	f10e 0e20 	add.w	lr, lr, #32
   1211e:	f89e 1007 	ldrb.w	r1, [lr, #7]
   12122:	09c9      	lsrs	r1, r1, #7
   12124:	f47f ae7b 	bne.w	11e1e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12128:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1212a:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1212e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12132:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12136:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1213a:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1213e:	4ba9      	ldr	r3, [pc, #676]	; (123e4 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12140:	f361 1286 	bfi	r2, r1, #6, #1
   12144:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12148:	691b      	ldr	r3, [r3, #16]
   1214a:	68aa      	ldr	r2, [r5, #8]
   1214c:	4798      	blx	r3
   1214e:	e666      	b.n	11e1e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12150:	4ba3      	ldr	r3, [pc, #652]	; (123e0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12152:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12156:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12158:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1215c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12160:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12164:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12166:	d07a      	beq.n	1225e <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12168:	f013 0302 	ands.w	r3, r3, #2
   1216c:	d013      	beq.n	12196 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1216e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12172:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12176:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1217a:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1217e:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12182:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12184:	f88e 101a 	strb.w	r1, [lr, #26]
   12188:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1218c:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12190:	f47f ae45 	bne.w	11e1e <_usb_d_dev_handler+0x82>
   12194:	e7b8      	b.n	12108 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   12196:	4992      	ldr	r1, [pc, #584]	; (123e0 <_usb_d_dev_handler+0x644>)
   12198:	1888      	adds	r0, r1, r2
   1219a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1219e:	2108      	movs	r1, #8
   121a0:	7683      	strb	r3, [r0, #26]
   121a2:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121a6:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   121aa:	e638      	b.n	11e1e <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   121ac:	f00b 0307 	and.w	r3, fp, #7
   121b0:	2b01      	cmp	r3, #1
   121b2:	d07e      	beq.n	122b2 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121b4:	2310      	movs	r3, #16
   121b6:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   121ba:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   121be:	e62e      	b.n	11e1e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121c0:	2340      	movs	r3, #64	; 0x40
   121c2:	68aa      	ldr	r2, [r5, #8]
   121c4:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   121c8:	4b86      	ldr	r3, [pc, #536]	; (123e4 <_usb_d_dev_handler+0x648>)
   121ca:	691b      	ldr	r3, [r3, #16]
   121cc:	4798      	blx	r3
   121ce:	e626      	b.n	11e1e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   121d0:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   121d2:	4b84      	ldr	r3, [pc, #528]	; (123e4 <_usb_d_dev_handler+0x648>)
   121d4:	8391      	strh	r1, [r2, #28]
   121d6:	681b      	ldr	r3, [r3, #0]
}
   121d8:	b001      	add	sp, #4
   121da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   121de:	4718      	bx	r3
   121e0:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   121e4:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   121e6:	4b7e      	ldr	r3, [pc, #504]	; (123e0 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   121e8:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   121ea:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   121ec:	8314      	strh	r4, [r2, #24]
   121ee:	891a      	ldrh	r2, [r3, #8]
   121f0:	f002 020f 	and.w	r2, r2, #15
   121f4:	2a03      	cmp	r2, #3
   121f6:	f000 8128 	beq.w	1244a <_usb_d_dev_handler+0x6ae>
   121fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   121fc:	f002 020f 	and.w	r2, r2, #15
   12200:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   12202:	bf18      	it	ne
   12204:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12206:	f000 811f 	beq.w	12448 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   1220a:	4b76      	ldr	r3, [pc, #472]	; (123e4 <_usb_d_dev_handler+0x648>)
   1220c:	685b      	ldr	r3, [r3, #4]
   1220e:	2003      	movs	r0, #3
}
   12210:	b001      	add	sp, #4
   12212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12216:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12218:	07d9      	lsls	r1, r3, #31
   1221a:	f57f af65 	bpl.w	120e8 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1221e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12222:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12226:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1222a:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1222c:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12230:	f88e 101a 	strb.w	r1, [lr, #26]
   12234:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12238:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1223c:	f43f adef 	beq.w	11e1e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12240:	4a68      	ldr	r2, [pc, #416]	; (123e4 <_usb_d_dev_handler+0x648>)
   12242:	eb0a 0104 	add.w	r1, sl, r4
   12246:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1224a:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1224e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12250:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12254:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12258:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1225c:	e71d      	b.n	1209a <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1225e:	f013 0f01 	tst.w	r3, #1
   12262:	d081      	beq.n	12168 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12264:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12268:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1226c:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12270:	f04f 0108 	mov.w	r1, #8
   12274:	f88e 301a 	strb.w	r3, [lr, #26]
   12278:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1227c:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12280:	f43f adcd 	beq.w	11e1e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12284:	4b57      	ldr	r3, [pc, #348]	; (123e4 <_usb_d_dev_handler+0x648>)
   12286:	eb0a 0104 	add.w	r1, sl, r4
   1228a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1228e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12292:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12296:	2280      	movs	r2, #128	; 0x80
   12298:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1229c:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122a0:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   122a4:	e6f9      	b.n	1209a <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   122a6:	4b4f      	ldr	r3, [pc, #316]	; (123e4 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   122a8:	2080      	movs	r0, #128	; 0x80
   122aa:	685b      	ldr	r3, [r3, #4]
   122ac:	8390      	strh	r0, [r2, #28]
   122ae:	2005      	movs	r0, #5
   122b0:	e7ae      	b.n	12210 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   122b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   122b6:	f43f ade3 	beq.w	11e80 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   122ba:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   122be:	f36f 1386 	bfc	r3, #6, #1
   122c2:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   122c6:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   122c8:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   122ca:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   122ce:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   122d2:	e5d5      	b.n	11e80 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   122d4:	4b42      	ldr	r3, [pc, #264]	; (123e0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   122d6:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   122da:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122dc:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   122e0:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122e4:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   122e6:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122e8:	f000 8080 	beq.w	123ec <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   122ec:	f013 0302 	ands.w	r3, r3, #2
   122f0:	f43f ae68 	beq.w	11fc4 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122f4:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122f8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   122fc:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12300:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12302:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12306:	f88e 100a 	strb.w	r1, [lr, #10]
   1230a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1230e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12312:	f43f ad84 	beq.w	11e1e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12316:	4a33      	ldr	r2, [pc, #204]	; (123e4 <_usb_d_dev_handler+0x648>)
   12318:	eb0a 0104 	add.w	r1, sl, r4
   1231c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12320:	3120      	adds	r1, #32
   12322:	79ca      	ldrb	r2, [r1, #7]
   12324:	09d2      	lsrs	r2, r2, #7
   12326:	f43f ad7a 	beq.w	11e1e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1232a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1232c:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12330:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12334:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12338:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1233c:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1233e:	4b29      	ldr	r3, [pc, #164]	; (123e4 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12340:	f36f 1286 	bfc	r2, #6, #1
   12344:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12346:	691b      	ldr	r3, [r3, #16]
   12348:	68aa      	ldr	r2, [r5, #8]
   1234a:	2100      	movs	r1, #0
   1234c:	4798      	blx	r3
   1234e:	e566      	b.n	11e1e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12350:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12352:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   12356:	4924      	ldr	r1, [pc, #144]	; (123e8 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12358:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1235a:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1235c:	8310      	strh	r0, [r2, #24]
   1235e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12360:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   12364:	2b03      	cmp	r3, #3
   12366:	d1fa      	bne.n	1235e <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12368:	4b1e      	ldr	r3, [pc, #120]	; (123e4 <_usb_d_dev_handler+0x648>)
   1236a:	2100      	movs	r1, #0
   1236c:	685b      	ldr	r3, [r3, #4]
   1236e:	2002      	movs	r0, #2
   12370:	e74e      	b.n	12210 <_usb_d_dev_handler+0x474>
   12372:	4e1c      	ldr	r6, [pc, #112]	; (123e4 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12374:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12378:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1237a:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1237c:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12380:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   12382:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12384:	8291      	strh	r1, [r2, #20]
   12386:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12388:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   1238a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1238e:	e007      	b.n	123a0 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   12390:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12392:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12396:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   1239a:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1239e:	d016      	beq.n	123ce <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123a0:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   123a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   123a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   123ac:	28ff      	cmp	r0, #255	; 0xff
   123ae:	f103 0320 	add.w	r3, r3, #32
   123b2:	f104 0401 	add.w	r4, r4, #1
   123b6:	d0eb      	beq.n	12390 <_usb_d_dev_handler+0x5f4>
   123b8:	79da      	ldrb	r2, [r3, #7]
   123ba:	0651      	lsls	r1, r2, #25
   123bc:	d5e8      	bpl.n	12390 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   123be:	f36f 1286 	bfc	r2, #6, #1
   123c2:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123c4:	69ea      	ldr	r2, [r5, #28]
   123c6:	6933      	ldr	r3, [r6, #16]
   123c8:	2103      	movs	r1, #3
   123ca:	4798      	blx	r3
   123cc:	e7e0      	b.n	12390 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   123ce:	2100      	movs	r1, #0
   123d0:	2260      	movs	r2, #96	; 0x60
   123d2:	4803      	ldr	r0, [pc, #12]	; (123e0 <_usb_d_dev_handler+0x644>)
   123d4:	f00b ff62 	bl	1e29c <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   123d8:	6873      	ldr	r3, [r6, #4]
   123da:	2100      	movs	r1, #0
   123dc:	2001      	movs	r0, #1
   123de:	e717      	b.n	12210 <_usb_d_dev_handler+0x474>
   123e0:	2000221c 	.word	0x2000221c
   123e4:	20001fec 	.word	0x20001fec
   123e8:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123ec:	07d9      	lsls	r1, r3, #31
   123ee:	f57f af7d 	bpl.w	122ec <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123f2:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123f6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   123fa:	460a      	mov	r2, r1
   123fc:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12400:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12402:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12406:	f88e 200a 	strb.w	r2, [lr, #10]
   1240a:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1240e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12412:	f43f ad04 	beq.w	11e1e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12416:	4a11      	ldr	r2, [pc, #68]	; (1245c <_usb_d_dev_handler+0x6c0>)
   12418:	eb0a 0e04 	add.w	lr, sl, r4
   1241c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12420:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12424:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12426:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1242a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1242e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12432:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12436:	4b09      	ldr	r3, [pc, #36]	; (1245c <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12438:	f36f 1286 	bfc	r2, #6, #1
   1243c:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12440:	691b      	ldr	r3, [r3, #16]
   12442:	68aa      	ldr	r2, [r5, #8]
   12444:	4798      	blx	r3
   12446:	e4ea      	b.n	11e1e <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   12448:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   1244a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   1244e:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12450:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   12452:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12454:	f3c1 110a 	ubfx	r1, r1, #4, #11
   12458:	e6d7      	b.n	1220a <_usb_d_dev_handler+0x46e>
   1245a:	bf00      	nop
   1245c:	20001fec 	.word	0x20001fec

00012460 <_usb_d_dev_init>:
{
   12460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   12464:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12468:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   1246a:	07db      	lsls	r3, r3, #31
   1246c:	d551      	bpl.n	12512 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1246e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   12472:	789c      	ldrb	r4, [r3, #2]
   12474:	f014 0401 	ands.w	r4, r4, #1
   12478:	d1fb      	bne.n	12472 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   1247a:	4b45      	ldr	r3, [pc, #276]	; (12590 <_usb_d_dev_init+0x130>)
   1247c:	4a45      	ldr	r2, [pc, #276]	; (12594 <_usb_d_dev_init+0x134>)
   1247e:	601a      	str	r2, [r3, #0]
   12480:	461e      	mov	r6, r3
   12482:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   12484:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   12486:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12488:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   1248a:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   1248c:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   1248e:	27ff      	movs	r7, #255	; 0xff
   12490:	e007      	b.n	124a2 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   12492:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12494:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12498:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   1249c:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   124a0:	d01d      	beq.n	124de <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124a2:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   124a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   124aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   124ae:	28ff      	cmp	r0, #255	; 0xff
   124b0:	f103 0320 	add.w	r3, r3, #32
   124b4:	f104 0401 	add.w	r4, r4, #1
   124b8:	d0eb      	beq.n	12492 <_usb_d_dev_init+0x32>
   124ba:	79da      	ldrb	r2, [r3, #7]
   124bc:	0651      	lsls	r1, r2, #25
   124be:	d5e8      	bpl.n	12492 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   124c0:	f36f 1286 	bfc	r2, #6, #1
   124c4:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124c6:	69ea      	ldr	r2, [r5, #28]
   124c8:	6933      	ldr	r3, [r6, #16]
   124ca:	2103      	movs	r1, #3
   124cc:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   124ce:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   124d0:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   124d4:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   124d8:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   124dc:	d1e1      	bne.n	124a2 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   124de:	2260      	movs	r2, #96	; 0x60
   124e0:	2100      	movs	r1, #0
   124e2:	482d      	ldr	r0, [pc, #180]	; (12598 <_usb_d_dev_init+0x138>)
   124e4:	f00b feda 	bl	1e29c <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   124e8:	4b2c      	ldr	r3, [pc, #176]	; (1259c <_usb_d_dev_init+0x13c>)
   124ea:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   124ec:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   124f0:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   124f4:	f013 031f 	ands.w	r3, r3, #31
   124f8:	d027      	beq.n	1254a <_usb_d_dev_init+0xea>
   124fa:	2b1f      	cmp	r3, #31
   124fc:	d025      	beq.n	1254a <_usb_d_dev_init+0xea>
   124fe:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12500:	b338      	cbz	r0, 12552 <_usb_d_dev_init+0xf2>
   12502:	281f      	cmp	r0, #31
   12504:	d025      	beq.n	12552 <_usb_d_dev_init+0xf2>
   12506:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12508:	b332      	cbz	r2, 12558 <_usb_d_dev_init+0xf8>
   1250a:	2a07      	cmp	r2, #7
   1250c:	d024      	beq.n	12558 <_usb_d_dev_init+0xf8>
   1250e:	0311      	lsls	r1, r2, #12
   12510:	e024      	b.n	1255c <_usb_d_dev_init+0xfc>
   12512:	7893      	ldrb	r3, [r2, #2]
   12514:	079f      	lsls	r7, r3, #30
   12516:	d1fc      	bne.n	12512 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12518:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   1251a:	079e      	lsls	r6, r3, #30
   1251c:	d50d      	bpl.n	1253a <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   1251e:	7813      	ldrb	r3, [r2, #0]
   12520:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12524:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12526:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1252a:	7893      	ldrb	r3, [r2, #2]
   1252c:	079d      	lsls	r5, r3, #30
   1252e:	d1fc      	bne.n	1252a <_usb_d_dev_init+0xca>
   12530:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12534:	7893      	ldrb	r3, [r2, #2]
   12536:	079c      	lsls	r4, r3, #30
   12538:	d4fc      	bmi.n	12534 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1253a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1253e:	2301      	movs	r3, #1
   12540:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12542:	7893      	ldrb	r3, [r2, #2]
   12544:	0798      	lsls	r0, r3, #30
   12546:	d1fc      	bne.n	12542 <_usb_d_dev_init+0xe2>
   12548:	e791      	b.n	1246e <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   1254a:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   1254e:	2800      	cmp	r0, #0
   12550:	d1d7      	bne.n	12502 <_usb_d_dev_init+0xa2>
   12552:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   12554:	2a00      	cmp	r2, #0
   12556:	d1d8      	bne.n	1250a <_usb_d_dev_init+0xaa>
   12558:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   1255c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12560:	4303      	orrs	r3, r0
   12562:	430b      	orrs	r3, r1
   12564:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   12566:	78d3      	ldrb	r3, [r2, #3]
   12568:	f043 0303 	orr.w	r3, r3, #3
   1256c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   1256e:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12570:	2104      	movs	r1, #4
   12572:	f043 030c 	orr.w	r3, r3, #12
   12576:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12578:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1257a:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1257c:	7898      	ldrb	r0, [r3, #2]
   1257e:	f010 0003 	ands.w	r0, r0, #3
   12582:	d1fb      	bne.n	1257c <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   12584:	4a04      	ldr	r2, [pc, #16]	; (12598 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   12586:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12588:	2201      	movs	r2, #1
   1258a:	811a      	strh	r2, [r3, #8]
}
   1258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12590:	20001fec 	.word	0x20001fec
   12594:	00011a2d 	.word	0x00011a2d
   12598:	2000221c 	.word	0x2000221c
   1259c:	00800084 	.word	0x00800084

000125a0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   125a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   125a4:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   125a6:	079b      	lsls	r3, r3, #30
   125a8:	d124      	bne.n	125f4 <_usb_d_dev_enable+0x54>
{
   125aa:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   125ac:	7893      	ldrb	r3, [r2, #2]
   125ae:	0798      	lsls	r0, r3, #30
   125b0:	d1fc      	bne.n	125ac <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   125b2:	7813      	ldrb	r3, [r2, #0]
   125b4:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   125b6:	0799      	lsls	r1, r3, #30
   125b8:	d407      	bmi.n	125ca <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   125ba:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   125be:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   125c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   125c4:	7893      	ldrb	r3, [r2, #2]
   125c6:	079b      	lsls	r3, r3, #30
   125c8:	d1fc      	bne.n	125c4 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   125ca:	4b0c      	ldr	r3, [pc, #48]	; (125fc <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125cc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   125d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   125d4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   125d8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   125dc:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   125e0:	f240 218d 	movw	r1, #653	; 0x28d
   125e4:	6098      	str	r0, [r3, #8]
   125e6:	609e      	str	r6, [r3, #8]
   125e8:	609d      	str	r5, [r3, #8]
   125ea:	609c      	str	r4, [r3, #8]
   125ec:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   125ee:	2000      	movs	r0, #0
}
   125f0:	bc70      	pop	{r4, r5, r6}
   125f2:	4770      	bx	lr
		return -USB_ERR_DENIED;
   125f4:	f06f 0010 	mvn.w	r0, #16
   125f8:	4770      	bx	lr
   125fa:	bf00      	nop
   125fc:	e000e100 	.word	0xe000e100

00012600 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12600:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12604:	8913      	ldrh	r3, [r2, #8]
   12606:	f023 0301 	bic.w	r3, r3, #1
   1260a:	041b      	lsls	r3, r3, #16
   1260c:	0c1b      	lsrs	r3, r3, #16
   1260e:	8113      	strh	r3, [r2, #8]
   12610:	4770      	bx	lr
   12612:	bf00      	nop

00012614 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   12614:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12618:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1261c:	7298      	strb	r0, [r3, #10]
   1261e:	4770      	bx	lr

00012620 <_usb_d_dev_ep_init>:
{
   12620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12624:	f010 050f 	ands.w	r5, r0, #15
   12628:	fa4f fc80 	sxtb.w	ip, r0
   1262c:	d02a      	beq.n	12684 <_usb_d_dev_ep_init+0x64>
   1262e:	f1bc 0f00 	cmp.w	ip, #0
   12632:	bfb4      	ite	lt
   12634:	1cab      	addlt	r3, r5, #2
   12636:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12638:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   1263a:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   1263e:	d859      	bhi.n	126f4 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12640:	009c      	lsls	r4, r3, #2
   12642:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 126fc <_usb_d_dev_ep_init+0xdc>
   12646:	18e6      	adds	r6, r4, r3
   12648:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   1264c:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12650:	2eff      	cmp	r6, #255	; 0xff
   12652:	d14b      	bne.n	126ec <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   12654:	b1d1      	cbz	r1, 1268c <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12656:	f1bc 0f00 	cmp.w	ip, #0
   1265a:	db3a      	blt.n	126d2 <_usb_d_dev_ep_init+0xb2>
   1265c:	006f      	lsls	r7, r5, #1
   1265e:	197e      	adds	r6, r7, r5
   12660:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12700 <_usb_d_dev_ep_init+0xe0>
   12664:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12668:	bb4e      	cbnz	r6, 126be <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   1266a:	4423      	add	r3, r4
   1266c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12670:	3101      	adds	r1, #1
   12672:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   12676:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   1267a:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   1267c:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   1267e:	2000      	movs	r0, #0
   12680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12684:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12688:	462b      	mov	r3, r5
   1268a:	e7d9      	b.n	12640 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1268c:	b125      	cbz	r5, 12698 <_usb_d_dev_ep_init+0x78>
   1268e:	f1bc 0f00 	cmp.w	ip, #0
   12692:	db01      	blt.n	12698 <_usb_d_dev_ep_init+0x78>
   12694:	1cae      	adds	r6, r5, #2
   12696:	e000      	b.n	1269a <_usb_d_dev_ep_init+0x7a>
   12698:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   1269a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1269e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   126a2:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   126a6:	2eff      	cmp	r6, #255	; 0xff
   126a8:	d120      	bne.n	126ec <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   126aa:	006f      	lsls	r7, r5, #1
   126ac:	197e      	adds	r6, r7, r5
   126ae:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12700 <_usb_d_dev_ep_init+0xe0>
   126b2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   126b6:	b146      	cbz	r6, 126ca <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   126b8:	f1bc 0f00 	cmp.w	ip, #0
   126bc:	db0c      	blt.n	126d8 <_usb_d_dev_ep_init+0xb8>
   126be:	443d      	add	r5, r7
   126c0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   126c4:	892d      	ldrh	r5, [r5, #8]
   126c6:	4295      	cmp	r5, r2
   126c8:	dacf      	bge.n	1266a <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   126ca:	f06f 0012 	mvn.w	r0, #18
   126ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   126d2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12700 <_usb_d_dev_ep_init+0xe0>
   126d6:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   126d8:	442f      	add	r7, r5
   126da:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   126de:	687d      	ldr	r5, [r7, #4]
   126e0:	b115      	cbz	r5, 126e8 <_usb_d_dev_ep_init+0xc8>
   126e2:	897e      	ldrh	r6, [r7, #10]
   126e4:	4296      	cmp	r6, r2
   126e6:	dbf0      	blt.n	126ca <_usb_d_dev_ep_init+0xaa>
   126e8:	462e      	mov	r6, r5
   126ea:	e7be      	b.n	1266a <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   126ec:	f06f 0013 	mvn.w	r0, #19
   126f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   126f4:	f06f 0011 	mvn.w	r0, #17
   126f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   126fc:	20001fec 	.word	0x20001fec
   12700:	00023344 	.word	0x00023344

00012704 <_usb_d_dev_ep_deinit>:
{
   12704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12708:	f010 070f 	ands.w	r7, r0, #15
{
   1270c:	b082      	sub	sp, #8
   1270e:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12712:	d009      	beq.n	12728 <_usb_d_dev_ep_deinit+0x24>
   12714:	f1b9 0f00 	cmp.w	r9, #0
   12718:	bfb4      	ite	lt
   1271a:	1cbe      	addlt	r6, r7, #2
   1271c:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1271e:	2f02      	cmp	r7, #2
   12720:	d903      	bls.n	1272a <_usb_d_dev_ep_deinit+0x26>
}
   12722:	b002      	add	sp, #8
   12724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12728:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1272a:	ea4f 0886 	mov.w	r8, r6, lsl #2
   1272e:	4d3d      	ldr	r5, [pc, #244]	; (12824 <_usb_d_dev_ep_deinit+0x120>)
   12730:	eb08 0306 	add.w	r3, r8, r6
   12734:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12738:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   1273c:	29ff      	cmp	r1, #255	; 0xff
   1273e:	d0f0      	beq.n	12722 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12740:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12744:	224a      	movs	r2, #74	; 0x4a
   12746:	4604      	mov	r4, r0
   12748:	f88d 2005 	strb.w	r2, [sp, #5]
   1274c:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1274e:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12750:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12754:	d41b      	bmi.n	1278e <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12756:	f003 0307 	and.w	r3, r3, #7
   1275a:	2b01      	cmp	r3, #1
   1275c:	d050      	beq.n	12800 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   1275e:	f1b9 0f00 	cmp.w	r9, #0
   12762:	db54      	blt.n	1280e <_usb_d_dev_ep_deinit+0x10a>
   12764:	0160      	lsls	r0, r4, #5
   12766:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   1276a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   1276e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12772:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12776:	4446      	add	r6, r8
   12778:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   1277c:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   1277e:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12780:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12784:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12788:	b002      	add	sp, #8
   1278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1278e:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12792:	f103 0208 	add.w	r2, r3, #8
   12796:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12798:	f1b9 0f00 	cmp.w	r9, #0
   1279c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   127a0:	bfb5      	itete	lt
   127a2:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   127a6:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127aa:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   127ae:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   127b2:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127b6:	0150      	lsls	r0, r2, #5
   127b8:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127bc:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127be:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127c2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   127c6:	eb08 0306 	add.w	r3, r8, r6
   127ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   127ce:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127d2:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127d6:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   127da:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   127de:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   127e0:	f103 0a20 	add.w	sl, r3, #32
   127e4:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   127e8:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   127ea:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   127ee:	4608      	mov	r0, r1
   127f0:	2103      	movs	r1, #3
   127f2:	4798      	blx	r3
   127f4:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   127f8:	f003 0307 	and.w	r3, r3, #7
   127fc:	2b01      	cmp	r3, #1
   127fe:	d1ae      	bne.n	1275e <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12800:	0160      	lsls	r0, r4, #5
   12802:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12806:	2300      	movs	r3, #0
   12808:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   1280c:	e7b3      	b.n	12776 <_usb_d_dev_ep_deinit+0x72>
   1280e:	017f      	lsls	r7, r7, #5
   12810:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12814:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12818:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   1281c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12820:	e7a9      	b.n	12776 <_usb_d_dev_ep_deinit+0x72>
   12822:	bf00      	nop
   12824:	20001fec 	.word	0x20001fec

00012828 <_usb_d_dev_ep_enable>:
{
   12828:	b5f0      	push	{r4, r5, r6, r7, lr}
   1282a:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1282c:	f010 000f 	ands.w	r0, r0, #15
   12830:	d045      	beq.n	128be <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12832:	0142      	lsls	r2, r0, #5
   12834:	2e00      	cmp	r6, #0
   12836:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   1283a:	bfb4      	ite	lt
   1283c:	1c83      	addlt	r3, r0, #2
   1283e:	4603      	movge	r3, r0
   12840:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12844:	4a84      	ldr	r2, [pc, #528]	; (12a58 <_usb_d_dev_ep_enable+0x230>)
   12846:	1c59      	adds	r1, r3, #1
   12848:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1284c:	2802      	cmp	r0, #2
   1284e:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12850:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12854:	f200 809f 	bhi.w	12996 <_usb_d_dev_ep_enable+0x16e>
   12858:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1285c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12860:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12864:	2aff      	cmp	r2, #255	; 0xff
   12866:	f000 8096 	beq.w	12996 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   1286a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   1286e:	4d7b      	ldr	r5, [pc, #492]	; (12a5c <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12870:	f002 0e07 	and.w	lr, r2, #7
   12874:	0140      	lsls	r0, r0, #5
   12876:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   1287a:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   1287e:	d028      	beq.n	128d2 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12880:	2e00      	cmp	r6, #0
   12882:	db65      	blt.n	12950 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12884:	0761      	lsls	r1, r4, #29
   12886:	f040 80a4 	bne.w	129d2 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   1288a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1288c:	4b74      	ldr	r3, [pc, #464]	; (12a60 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   1288e:	f002 0207 	and.w	r2, r2, #7
   12892:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12896:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12898:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   1289c:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   128a0:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   128a4:	d97a      	bls.n	1299c <_usb_d_dev_ep_enable+0x174>
   128a6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   128aa:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   128ac:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   128ae:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   128b0:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   128b2:	607a      	str	r2, [r7, #4]
   128b4:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   128b8:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   128ba:	4608      	mov	r0, r1
   128bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   128be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   128c2:	4968      	ldr	r1, [pc, #416]	; (12a64 <_usb_d_dev_ep_enable+0x23c>)
   128c4:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   128c8:	f1a1 0214 	sub.w	r2, r1, #20
   128cc:	b2e4      	uxtb	r4, r4
   128ce:	4603      	mov	r3, r0
   128d0:	e7c2      	b.n	12858 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   128d2:	f014 0f77 	tst.w	r4, #119	; 0x77
   128d6:	d17c      	bne.n	129d2 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   128d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   128da:	4a61      	ldr	r2, [pc, #388]	; (12a60 <_usb_d_dev_ep_enable+0x238>)
   128dc:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   128e0:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   128e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   128e6:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   128ea:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   128ee:	d94c      	bls.n	1298a <_usb_d_dev_ep_enable+0x162>
   128f0:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   128f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   128f8:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   128fa:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   128fc:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12900:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12902:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12904:	617b      	str	r3, [r7, #20]
   12906:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1290a:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1290e:	7c8a      	ldrb	r2, [r1, #18]
   12910:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12912:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12916:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   1291a:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   1291c:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   1291e:	2000      	movs	r0, #0
   12920:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12922:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12924:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12926:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   1292a:	6873      	ldr	r3, [r6, #4]
   1292c:	f367 339b 	bfi	r3, r7, #14, #14
   12930:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12932:	6872      	ldr	r2, [r6, #4]
   12934:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12938:	f360 020d 	bfi	r2, r0, #0, #14
   1293c:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   1293e:	2510      	movs	r5, #16
   12940:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12942:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12946:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   1294a:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   1294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12950:	f014 0f70 	tst.w	r4, #112	; 0x70
   12954:	d13d      	bne.n	129d2 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12958:	0112      	lsls	r2, r2, #4
   1295a:	f002 0270 	and.w	r2, r2, #112	; 0x70
   1295e:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12962:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12968:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   1296c:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12970:	d91a      	bls.n	129a8 <_usb_d_dev_ep_enable+0x180>
   12972:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12976:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12978:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1297a:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   1297c:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   1297e:	617a      	str	r2, [r7, #20]
   12980:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12984:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12986:	4608      	mov	r0, r1
   12988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   1298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1298e:	d923      	bls.n	129d8 <_usb_d_dev_ep_enable+0x1b0>
   12990:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12994:	e7ae      	b.n	128f4 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12996:	f06f 0011 	mvn.w	r0, #17
   1299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   1299c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   129a0:	d908      	bls.n	129b4 <_usb_d_dev_ep_enable+0x18c>
   129a2:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   129a6:	e780      	b.n	128aa <_usb_d_dev_ep_enable+0x82>
   129a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   129ac:	d907      	bls.n	129be <_usb_d_dev_ep_enable+0x196>
   129ae:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   129b2:	e7e0      	b.n	12976 <_usb_d_dev_ep_enable+0x14e>
   129b4:	2980      	cmp	r1, #128	; 0x80
   129b6:	d907      	bls.n	129c8 <_usb_d_dev_ep_enable+0x1a0>
   129b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   129bc:	e775      	b.n	128aa <_usb_d_dev_ep_enable+0x82>
   129be:	2b80      	cmp	r3, #128	; 0x80
   129c0:	d914      	bls.n	129ec <_usb_d_dev_ep_enable+0x1c4>
   129c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   129c6:	e7d6      	b.n	12976 <_usb_d_dev_ep_enable+0x14e>
   129c8:	2940      	cmp	r1, #64	; 0x40
   129ca:	d914      	bls.n	129f6 <_usb_d_dev_ep_enable+0x1ce>
   129cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   129d0:	e76b      	b.n	128aa <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   129d2:	f06f 0013 	mvn.w	r0, #19
   129d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   129d8:	2b80      	cmp	r3, #128	; 0x80
   129da:	d902      	bls.n	129e2 <_usb_d_dev_ep_enable+0x1ba>
   129dc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   129e0:	e788      	b.n	128f4 <_usb_d_dev_ep_enable+0xcc>
   129e2:	2b40      	cmp	r3, #64	; 0x40
   129e4:	d90c      	bls.n	12a00 <_usb_d_dev_ep_enable+0x1d8>
   129e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   129ea:	e783      	b.n	128f4 <_usb_d_dev_ep_enable+0xcc>
   129ec:	2b40      	cmp	r3, #64	; 0x40
   129ee:	d90c      	bls.n	12a0a <_usb_d_dev_ep_enable+0x1e2>
   129f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   129f4:	e7bf      	b.n	12976 <_usb_d_dev_ep_enable+0x14e>
   129f6:	2920      	cmp	r1, #32
   129f8:	d90c      	bls.n	12a14 <_usb_d_dev_ep_enable+0x1ec>
   129fa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   129fe:	e754      	b.n	128aa <_usb_d_dev_ep_enable+0x82>
   12a00:	2b20      	cmp	r3, #32
   12a02:	d90c      	bls.n	12a1e <_usb_d_dev_ep_enable+0x1f6>
   12a04:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12a08:	e774      	b.n	128f4 <_usb_d_dev_ep_enable+0xcc>
   12a0a:	2b20      	cmp	r3, #32
   12a0c:	d90c      	bls.n	12a28 <_usb_d_dev_ep_enable+0x200>
   12a0e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12a12:	e7b0      	b.n	12976 <_usb_d_dev_ep_enable+0x14e>
   12a14:	2910      	cmp	r1, #16
   12a16:	d90c      	bls.n	12a32 <_usb_d_dev_ep_enable+0x20a>
   12a18:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12a1c:	e745      	b.n	128aa <_usb_d_dev_ep_enable+0x82>
   12a1e:	2b10      	cmp	r3, #16
   12a20:	d90d      	bls.n	12a3e <_usb_d_dev_ep_enable+0x216>
   12a22:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12a26:	e765      	b.n	128f4 <_usb_d_dev_ep_enable+0xcc>
   12a28:	2b10      	cmp	r3, #16
   12a2a:	d90e      	bls.n	12a4a <_usb_d_dev_ep_enable+0x222>
   12a2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12a30:	e7a1      	b.n	12976 <_usb_d_dev_ep_enable+0x14e>
   12a32:	2908      	cmp	r1, #8
   12a34:	bf94      	ite	ls
   12a36:	2100      	movls	r1, #0
   12a38:	2101      	movhi	r1, #1
   12a3a:	0709      	lsls	r1, r1, #28
   12a3c:	e735      	b.n	128aa <_usb_d_dev_ep_enable+0x82>
   12a3e:	2b08      	cmp	r3, #8
   12a40:	bf94      	ite	ls
   12a42:	2400      	movls	r4, #0
   12a44:	2401      	movhi	r4, #1
   12a46:	0724      	lsls	r4, r4, #28
   12a48:	e754      	b.n	128f4 <_usb_d_dev_ep_enable+0xcc>
   12a4a:	2b08      	cmp	r3, #8
   12a4c:	bf94      	ite	ls
   12a4e:	2300      	movls	r3, #0
   12a50:	2301      	movhi	r3, #1
   12a52:	071a      	lsls	r2, r3, #28
   12a54:	e78f      	b.n	12976 <_usb_d_dev_ep_enable+0x14e>
   12a56:	bf00      	nop
   12a58:	20001fec 	.word	0x20001fec
   12a5c:	2000221c 	.word	0x2000221c
   12a60:	0fffc000 	.word	0x0fffc000
   12a64:	20002000 	.word	0x20002000

00012a68 <_usb_d_dev_ep_stall>:
{
   12a68:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a6a:	f010 000f 	ands.w	r0, r0, #15
{
   12a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12a70:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a74:	d01e      	beq.n	12ab4 <_usb_d_dev_ep_stall+0x4c>
   12a76:	2b00      	cmp	r3, #0
   12a78:	bfb4      	ite	lt
   12a7a:	1c83      	addlt	r3, r0, #2
   12a7c:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12a7e:	1c5c      	adds	r4, r3, #1
   12a80:	4a40      	ldr	r2, [pc, #256]	; (12b84 <_usb_d_dev_ep_stall+0x11c>)
   12a82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12a86:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12a88:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12a8c:	d86d      	bhi.n	12b6a <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12a8e:	2901      	cmp	r1, #1
   12a90:	d014      	beq.n	12abc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12a92:	b389      	cbz	r1, 12af8 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12a94:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12a96:	f003 030f 	and.w	r3, r3, #15
   12a9a:	015b      	lsls	r3, r3, #5
   12a9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12aa0:	2210      	movs	r2, #16
   12aa2:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12aa6:	fa02 f305 	lsl.w	r3, r2, r5
   12aaa:	420b      	tst	r3, r1
   12aac:	bf14      	ite	ne
   12aae:	2001      	movne	r0, #1
   12ab0:	2000      	moveq	r0, #0
   12ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12ab4:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12ab6:	4a34      	ldr	r2, [pc, #208]	; (12b88 <_usb_d_dev_ep_stall+0x120>)
   12ab8:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12aba:	d1ea      	bne.n	12a92 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12abc:	4931      	ldr	r1, [pc, #196]	; (12b84 <_usb_d_dev_ep_stall+0x11c>)
   12abe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12ac2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12ac6:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ac8:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12acc:	f002 020f 	and.w	r2, r2, #15
   12ad0:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12ad2:	2320      	movs	r3, #32
   12ad4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12ad8:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12ada:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12adc:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12ade:	b2db      	uxtb	r3, r3
   12ae0:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12ae4:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12ae8:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12aec:	f043 0308 	orr.w	r3, r3, #8
   12af0:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12af4:	2000      	movs	r0, #0
   12af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12af8:	009e      	lsls	r6, r3, #2
   12afa:	4c22      	ldr	r4, [pc, #136]	; (12b84 <_usb_d_dev_ep_stall+0x11c>)
   12afc:	18f2      	adds	r2, r6, r3
   12afe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12b02:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12b04:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12b08:	f002 020f 	and.w	r2, r2, #15
   12b0c:	0151      	lsls	r1, r2, #5
   12b0e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12b12:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12b14:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12b18:	4207      	tst	r7, r0
   12b1a:	d01b      	beq.n	12b54 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b1c:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12b1e:	2720      	movs	r7, #32
   12b20:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12b24:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12b26:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12b28:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b2c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b30:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12b34:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12b38:	423a      	tst	r2, r7
   12b3a:	d10d      	bne.n	12b58 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12b3c:	4433      	add	r3, r6
   12b3e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12b42:	3420      	adds	r4, #32
   12b44:	79e3      	ldrb	r3, [r4, #7]
   12b46:	f003 0207 	and.w	r2, r3, #7
   12b4a:	2a01      	cmp	r2, #1
   12b4c:	d010      	beq.n	12b70 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12b4e:	f36f 03c3 	bfc	r3, #3, #1
   12b52:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12b54:	2000      	movs	r0, #0
   12b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12b58:	2201      	movs	r2, #1
   12b5a:	fa02 f505 	lsl.w	r5, r2, r5
   12b5e:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12b60:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b64:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12b68:	e7e8      	b.n	12b3c <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12b6a:	f06f 0011 	mvn.w	r0, #17
}
   12b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12b70:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12b74:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12b78:	d1ec      	bne.n	12b54 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12b7a:	f360 03c3 	bfi	r3, r0, #3, #1
   12b7e:	71e3      	strb	r3, [r4, #7]
   12b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b82:	bf00      	nop
   12b84:	20001fec 	.word	0x20001fec
   12b88:	20002000 	.word	0x20002000

00012b8c <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12b8c:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12b8e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12b92:	4a12      	ldr	r2, [pc, #72]	; (12bdc <_usb_d_dev_ep_read_req+0x50>)
   12b94:	0143      	lsls	r3, r0, #5
   12b96:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12b98:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12b9a:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12b9c:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12b9e:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12ba2:	d818      	bhi.n	12bd6 <_usb_d_dev_ep_read_req+0x4a>
   12ba4:	b1b9      	cbz	r1, 12bd6 <_usb_d_dev_ep_read_req+0x4a>
   12ba6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12baa:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12bae:	2a11      	cmp	r2, #17
   12bb0:	d10e      	bne.n	12bd0 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12bb2:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12bb6:	f012 0010 	ands.w	r0, r2, #16
   12bba:	d007      	beq.n	12bcc <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12bbc:	686a      	ldr	r2, [r5, #4]
   12bbe:	682e      	ldr	r6, [r5, #0]
   12bc0:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12bc2:	2210      	movs	r2, #16
   12bc4:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12bc6:	4620      	mov	r0, r4
   12bc8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12bcc:	bc70      	pop	{r4, r5, r6}
   12bce:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12bd0:	f06f 0012 	mvn.w	r0, #18
   12bd4:	e7fa      	b.n	12bcc <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12bd6:	f06f 0011 	mvn.w	r0, #17
   12bda:	e7f7      	b.n	12bcc <_usb_d_dev_ep_read_req+0x40>
   12bdc:	2000221c 	.word	0x2000221c

00012be0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12be4:	7a03      	ldrb	r3, [r0, #8]
   12be6:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12bea:	f013 030f 	ands.w	r3, r3, #15
{
   12bee:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12bf0:	d03a      	beq.n	12c68 <_usb_d_dev_ep_trans+0x88>
   12bf2:	f1b9 0f00 	cmp.w	r9, #0
   12bf6:	bfb4      	ite	lt
   12bf8:	1c9d      	addlt	r5, r3, #2
   12bfa:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12bfc:	4e5d      	ldr	r6, [pc, #372]	; (12d74 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12bfe:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12c02:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12c06:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12c0a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12c0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12c10:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12c14:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12c16:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12c1a:	d050      	beq.n	12cbe <_usb_d_dev_ep_trans+0xde>
   12c1c:	1e57      	subs	r7, r2, #1
   12c1e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12c20:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12c22:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12c24:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12c28:	f200 8091 	bhi.w	12d4e <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12c2c:	6803      	ldr	r3, [r0, #0]
   12c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12c32:	d223      	bcs.n	12c7c <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12c34:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12c38:	eb0b 0305 	add.w	r3, fp, r5
   12c3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12c40:	6a1b      	ldr	r3, [r3, #32]
   12c42:	2b00      	cmp	r3, #0
   12c44:	f000 8092 	beq.w	12d6c <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12c48:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12c4c:	eb0b 0405 	add.w	r4, fp, r5
   12c50:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12c54:	f104 0220 	add.w	r2, r4, #32
   12c58:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12c5c:	071b      	lsls	r3, r3, #28
   12c5e:	d530      	bpl.n	12cc2 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12c60:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12c62:	b007      	add	sp, #28
   12c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12c68:	4e42      	ldr	r6, [pc, #264]	; (12d74 <_usb_d_dev_ep_trans+0x194>)
   12c6a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12c6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12c70:	428a      	cmp	r2, r1
   12c72:	d01d      	beq.n	12cb0 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12c74:	f106 0814 	add.w	r8, r6, #20
   12c78:	461d      	mov	r5, r3
   12c7a:	e7cf      	b.n	12c1c <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12c7c:	4c3e      	ldr	r4, [pc, #248]	; (12d78 <_usb_d_dev_ep_trans+0x198>)
   12c7e:	eb03 0e01 	add.w	lr, r3, r1
   12c82:	45a6      	cmp	lr, r4
   12c84:	d8d6      	bhi.n	12c34 <_usb_d_dev_ep_trans+0x54>
   12c86:	f013 0303 	ands.w	r3, r3, #3
   12c8a:	d1d3      	bne.n	12c34 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12c8c:	f1b9 0f00 	cmp.w	r9, #0
   12c90:	db60      	blt.n	12d54 <_usb_d_dev_ep_trans+0x174>
   12c92:	428a      	cmp	r2, r1
   12c94:	d8ce      	bhi.n	12c34 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12c96:	2f00      	cmp	r7, #0
   12c98:	d060      	beq.n	12d5c <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12c9a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12c9e:	eb0b 0205 	add.w	r2, fp, r5
   12ca2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12ca6:	6a12      	ldr	r2, [r2, #32]
   12ca8:	2a00      	cmp	r2, #0
   12caa:	d050      	beq.n	12d4e <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12cac:	469a      	mov	sl, r3
   12cae:	e7cd      	b.n	12c4c <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12cb0:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12cb2:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12cb4:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   12cb8:	f106 0814 	add.w	r8, r6, #20
   12cbc:	e7b6      	b.n	12c2c <_usb_d_dev_ep_trans+0x4c>
   12cbe:	4617      	mov	r7, r2
   12cc0:	e7ae      	b.n	12c20 <_usb_d_dev_ep_trans+0x40>
   12cc2:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   12cc4:	a805      	add	r0, sp, #20
   12cc6:	9202      	str	r2, [sp, #8]
   12cc8:	f000 f8e0 	bl	12e8c <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12ccc:	9a02      	ldr	r2, [sp, #8]
   12cce:	9b01      	ldr	r3, [sp, #4]
   12cd0:	79d0      	ldrb	r0, [r2, #7]
   12cd2:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   12cd6:	d131      	bne.n	12d3c <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   12cd8:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   12cdc:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   12ce0:	a805      	add	r0, sp, #20
   12ce2:	9303      	str	r3, [sp, #12]
   12ce4:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   12ce6:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   12ce8:	f000 f8d8 	bl	12e9c <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   12cec:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   12cee:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   12cf0:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   12cf2:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   12cf6:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   12cf8:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   12cfc:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   12d00:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   12d04:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   12d06:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   12d08:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   12d0a:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   12d0e:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12d10:	7a5b      	ldrb	r3, [r3, #9]
   12d12:	b9c3      	cbnz	r3, 12d46 <_usb_d_dev_ep_trans+0x166>
   12d14:	461f      	mov	r7, r3
   12d16:	445d      	add	r5, fp
   12d18:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   12d1c:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12d20:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   12d24:	f367 1304 	bfi	r3, r7, #4, #1
   12d28:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   12d2c:	4640      	mov	r0, r8
   12d2e:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   12d32:	db17      	blt.n	12d64 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   12d34:	f7fe ff36 	bl	11ba4 <_usb_d_dev_out_next>
	return ERR_NONE;
   12d38:	2000      	movs	r0, #0
   12d3a:	e792      	b.n	12c62 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   12d3c:	a805      	add	r0, sp, #20
   12d3e:	f000 f8ad 	bl	12e9c <atomic_leave_critical>
		return USB_BUSY;
   12d42:	2001      	movs	r0, #1
   12d44:	e78d      	b.n	12c62 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12d46:	fab7 f787 	clz	r7, r7
   12d4a:	097f      	lsrs	r7, r7, #5
   12d4c:	e7e3      	b.n	12d16 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   12d4e:	f06f 0011 	mvn.w	r0, #17
   12d52:	e786      	b.n	12c62 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   12d54:	469a      	mov	sl, r3
   12d56:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12d5a:	e777      	b.n	12c4c <_usb_d_dev_ep_trans+0x6c>
   12d5c:	46ba      	mov	sl, r7
   12d5e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12d62:	e773      	b.n	12c4c <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   12d64:	f7fe fe64 	bl	11a30 <_usb_d_dev_in_next>
	return ERR_NONE;
   12d68:	2000      	movs	r0, #0
   12d6a:	e77a      	b.n	12c62 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   12d6c:	f06f 0012 	mvn.w	r0, #18
   12d70:	e777      	b.n	12c62 <_usb_d_dev_ep_trans+0x82>
   12d72:	bf00      	nop
   12d74:	20001fec 	.word	0x20001fec
   12d78:	20031fff 	.word	0x20031fff

00012d7c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   12d7c:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12d7e:	f010 000f 	ands.w	r0, r0, #15
   12d82:	d117      	bne.n	12db4 <_usb_d_dev_ep_abort+0x38>
{
   12d84:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d86:	0081      	lsls	r1, r0, #2
   12d88:	4d27      	ldr	r5, [pc, #156]	; (12e28 <_usb_d_dev_ep_abort+0xac>)
   12d8a:	180a      	adds	r2, r1, r0
   12d8c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   12d90:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d92:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12d96:	2625      	movs	r6, #37	; 0x25
   12d98:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12d9c:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12d9e:	f04f 064a 	mov.w	r6, #74	; 0x4a
   12da2:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12da6:	d003      	beq.n	12db0 <_usb_d_dev_ep_abort+0x34>
   12da8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   12dac:	0652      	lsls	r2, r2, #25
   12dae:	d408      	bmi.n	12dc2 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   12db0:	b003      	add	sp, #12
   12db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12db4:	2b00      	cmp	r3, #0
   12db6:	bfb4      	ite	lt
   12db8:	1c82      	addlt	r2, r0, #2
   12dba:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   12dbc:	2802      	cmp	r0, #2
   12dbe:	d931      	bls.n	12e24 <_usb_d_dev_ep_abort+0xa8>
   12dc0:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12dc2:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12dc6:	f102 0608 	add.w	r6, r2, #8
   12dca:	0177      	lsls	r7, r6, #5
	if (dir) {
   12dcc:	2b00      	cmp	r3, #0
   12dce:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   12dd2:	bfb5      	itete	lt
   12dd4:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12dd8:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ddc:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12de0:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   12de4:	af02      	add	r7, sp, #8
   12de6:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12dea:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12dec:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   12dee:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12df0:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12df4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12df8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12dfc:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e00:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e02:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12e06:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12e0a:	692d      	ldr	r5, [r5, #16]
   12e0c:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   12e0e:	f36f 1686 	bfc	r6, #6, #1
   12e12:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12e16:	4620      	mov	r0, r4
   12e18:	2102      	movs	r1, #2
   12e1a:	462b      	mov	r3, r5
}
   12e1c:	b003      	add	sp, #12
   12e1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12e22:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   12e24:	4610      	mov	r0, r2
   12e26:	e7ad      	b.n	12d84 <_usb_d_dev_ep_abort+0x8>
   12e28:	20001fec 	.word	0x20001fec

00012e2c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12e2c:	4b06      	ldr	r3, [pc, #24]	; (12e48 <_usb_d_dev_register_callback+0x1c>)
   12e2e:	2900      	cmp	r1, #0
   12e30:	bf08      	it	eq
   12e32:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   12e34:	2801      	cmp	r0, #1
   12e36:	d003      	beq.n	12e40 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   12e38:	b908      	cbnz	r0, 12e3e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   12e3a:	4b04      	ldr	r3, [pc, #16]	; (12e4c <_usb_d_dev_register_callback+0x20>)
   12e3c:	6019      	str	r1, [r3, #0]
   12e3e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   12e40:	4b02      	ldr	r3, [pc, #8]	; (12e4c <_usb_d_dev_register_callback+0x20>)
   12e42:	6059      	str	r1, [r3, #4]
   12e44:	4770      	bx	lr
   12e46:	bf00      	nop
   12e48:	00011a2d 	.word	0x00011a2d
   12e4c:	20001fec 	.word	0x20001fec

00012e50 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12e50:	4b08      	ldr	r3, [pc, #32]	; (12e74 <_usb_d_dev_register_ep_callback+0x24>)
   12e52:	2900      	cmp	r1, #0
   12e54:	bf08      	it	eq
   12e56:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   12e58:	b130      	cbz	r0, 12e68 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   12e5a:	2801      	cmp	r0, #1
   12e5c:	d007      	beq.n	12e6e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   12e5e:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   12e60:	bf04      	itt	eq
   12e62:	4b05      	ldreq	r3, [pc, #20]	; (12e78 <_usb_d_dev_register_ep_callback+0x28>)
   12e64:	6119      	streq	r1, [r3, #16]
   12e66:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   12e68:	4b03      	ldr	r3, [pc, #12]	; (12e78 <_usb_d_dev_register_ep_callback+0x28>)
   12e6a:	6099      	str	r1, [r3, #8]
   12e6c:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   12e6e:	4b02      	ldr	r3, [pc, #8]	; (12e78 <_usb_d_dev_register_ep_callback+0x28>)
   12e70:	60d9      	str	r1, [r3, #12]
   12e72:	4770      	bx	lr
   12e74:	00011a2d 	.word	0x00011a2d
   12e78:	20001fec 	.word	0x20001fec

00012e7c <USB_0_Handler>:
   12e7c:	f7fe bf8e 	b.w	11d9c <_usb_d_dev_handler>

00012e80 <USB_1_Handler>:
   12e80:	f7fe bf8c 	b.w	11d9c <_usb_d_dev_handler>

00012e84 <USB_2_Handler>:
   12e84:	f7fe bf8a 	b.w	11d9c <_usb_d_dev_handler>

00012e88 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   12e88:	f7fe bf88 	b.w	11d9c <_usb_d_dev_handler>

00012e8c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12e8c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   12e90:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   12e92:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   12e94:	f3bf 8f5f 	dmb	sy
   12e98:	4770      	bx	lr
   12e9a:	bf00      	nop

00012e9c <atomic_leave_critical>:
   12e9c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   12ea0:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   12ea2:	f383 8810 	msr	PRIMASK, r3
   12ea6:	4770      	bx	lr

00012ea8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   12ea8:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   12eaa:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   12eac:	2b08      	cmp	r3, #8
   12eae:	d810      	bhi.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   12eb0:	e8df f003 	tbb	[pc, r3]
   12eb4:	604d3b25 	.word	0x604d3b25
   12eb8:	05a18a74 	.word	0x05a18a74
   12ebc:	11          	.byte	0x11
   12ebd:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   12ebe:	8903      	ldrh	r3, [r0, #8]
   12ec0:	3b01      	subs	r3, #1
   12ec2:	b29b      	uxth	r3, r3
   12ec4:	8103      	strh	r3, [r0, #8]
   12ec6:	b923      	cbnz	r3, 12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   12ec8:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   12eca:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   12ecc:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   12ece:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   12ed0:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   12ed2:	bc30      	pop	{r4, r5}
   12ed4:	4770      	bx	lr
            if (--m_timer) {
   12ed6:	8903      	ldrh	r3, [r0, #8]
   12ed8:	3b01      	subs	r3, #1
   12eda:	b29b      	uxth	r3, r3
   12edc:	8103      	strh	r3, [r0, #8]
   12ede:	2b00      	cmp	r3, #0
   12ee0:	d1f7      	bne.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   12ee2:	8981      	ldrh	r1, [r0, #12]
   12ee4:	3901      	subs	r1, #1
   12ee6:	b289      	uxth	r1, r1
   12ee8:	8181      	strh	r1, [r0, #12]
   12eea:	2900      	cmp	r1, #0
   12eec:	f000 80b3 	beq.w	13056 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   12ef0:	8a43      	ldrh	r3, [r0, #18]
   12ef2:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   12ef4:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   12ef6:	2307      	movs	r3, #7
                m_ledOn = true;
   12ef8:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   12efa:	7143      	strb	r3, [r0, #5]
                break;
   12efc:	e7e9      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   12efe:	7801      	ldrb	r1, [r0, #0]
   12f00:	2900      	cmp	r1, #0
   12f02:	f040 8089 	bne.w	13018 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   12f06:	7841      	ldrb	r1, [r0, #1]
   12f08:	2900      	cmp	r1, #0
   12f0a:	f040 80cb 	bne.w	130a4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   12f0e:	7883      	ldrb	r3, [r0, #2]
   12f10:	2b00      	cmp	r3, #0
   12f12:	f040 811a 	bne.w	1314a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   12f16:	78c3      	ldrb	r3, [r0, #3]
   12f18:	2b00      	cmp	r3, #0
   12f1a:	f040 8118 	bne.w	1314e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   12f1e:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   12f20:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   12f22:	2b00      	cmp	r3, #0
   12f24:	d0d5      	beq.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   12f26:	5d41      	ldrb	r1, [r0, r5]
   12f28:	e077      	b.n	1301a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   12f2a:	8903      	ldrh	r3, [r0, #8]
   12f2c:	3b01      	subs	r3, #1
   12f2e:	b29b      	uxth	r3, r3
   12f30:	8103      	strh	r3, [r0, #8]
   12f32:	2b00      	cmp	r3, #0
   12f34:	d1cd      	bne.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   12f36:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   12f38:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   12f3a:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   12f3c:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   12f3e:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   12f40:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   12f42:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   12f46:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   12f48:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   12f4a:	8143      	strh	r3, [r0, #10]
            break;
   12f4c:	e7c1      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   12f4e:	8903      	ldrh	r3, [r0, #8]
   12f50:	3b01      	subs	r3, #1
   12f52:	b29b      	uxth	r3, r3
   12f54:	8103      	strh	r3, [r0, #8]
   12f56:	2b00      	cmp	r3, #0
   12f58:	d1bb      	bne.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   12f5a:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   12f5c:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   12f5e:	3b01      	subs	r3, #1
   12f60:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   12f62:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   12f66:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   12f68:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   12f6a:	2b00      	cmp	r3, #0
   12f6c:	d06d      	beq.n	1304a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   12f6e:	8a03      	ldrh	r3, [r0, #16]
   12f70:	8103      	strh	r3, [r0, #8]
                break;
   12f72:	e7ae      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   12f74:	8903      	ldrh	r3, [r0, #8]
   12f76:	3b01      	subs	r3, #1
   12f78:	b29b      	uxth	r3, r3
   12f7a:	8103      	strh	r3, [r0, #8]
   12f7c:	2b00      	cmp	r3, #0
   12f7e:	d1a8      	bne.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   12f80:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   12f82:	8a01      	ldrh	r1, [r0, #16]
   12f84:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   12f86:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   12f88:	3201      	adds	r2, #1
            m_ledOn = true;
   12f8a:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   12f8c:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   12f8e:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   12f92:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   12f94:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   12f96:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   12f98:	8143      	strh	r3, [r0, #10]
            break;
   12f9a:	e79a      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   12f9c:	8903      	ldrh	r3, [r0, #8]
   12f9e:	3b01      	subs	r3, #1
   12fa0:	b29b      	uxth	r3, r3
   12fa2:	8103      	strh	r3, [r0, #8]
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	d194      	bne.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   12fa8:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   12faa:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   12fac:	3b01      	subs	r3, #1
   12fae:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   12fb0:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   12fb4:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   12fb6:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   12fb8:	2b00      	cmp	r3, #0
   12fba:	d1d8      	bne.n	12f6e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   12fbc:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   12fbe:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   12fc0:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   12fc2:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   12fc4:	7143      	strb	r3, [r0, #5]
            break;
   12fc6:	e784      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   12fc8:	8903      	ldrh	r3, [r0, #8]
   12fca:	3b01      	subs	r3, #1
   12fcc:	b29b      	uxth	r3, r3
   12fce:	8103      	strh	r3, [r0, #8]
   12fd0:	2b00      	cmp	r3, #0
   12fd2:	f47f af7e 	bne.w	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   12fd6:	8983      	ldrh	r3, [r0, #12]
   12fd8:	3b01      	subs	r3, #1
   12fda:	b29b      	uxth	r3, r3
   12fdc:	8183      	strh	r3, [r0, #12]
   12fde:	b373      	cbz	r3, 1303e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   12fe0:	8a02      	ldrh	r2, [r0, #16]
   12fe2:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   12fe4:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   12fe6:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   12fe8:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   12fea:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   12fee:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   12ff0:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   12ff2:	8143      	strh	r3, [r0, #10]
                break;
   12ff4:	e76d      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   12ff6:	8903      	ldrh	r3, [r0, #8]
   12ff8:	3b01      	subs	r3, #1
   12ffa:	b29b      	uxth	r3, r3
   12ffc:	8103      	strh	r3, [r0, #8]
   12ffe:	2b00      	cmp	r3, #0
   13000:	f47f af67 	bne.w	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   13004:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   13006:	8a42      	ldrh	r2, [r0, #18]
   13008:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   1300a:	3301      	adds	r3, #1
            m_ledOn = true;
   1300c:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   1300e:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   13010:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   13012:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   13014:	7142      	strb	r2, [r0, #5]
            break;
   13016:	e75c      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   13018:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   1301a:	f011 0301 	ands.w	r3, r1, #1
   1301e:	d149      	bne.n	130b4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   13020:	3301      	adds	r3, #1
   13022:	b2db      	uxtb	r3, r3
   13024:	fa41 f203 	asr.w	r2, r1, r3
   13028:	07d4      	lsls	r4, r2, #31
   1302a:	d5f9      	bpl.n	13020 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   1302c:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   1302e:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   13030:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   13032:	2201      	movs	r2, #1
    m_currentCode = code;
   13034:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   13036:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   13038:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   1303a:	7142      	strb	r2, [r0, #5]
            break;
   1303c:	e749      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   1303e:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   13040:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   13042:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   13044:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   13046:	7143      	strb	r3, [r0, #5]
            break;
   13048:	e743      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   1304a:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   1304c:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   1304e:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   13050:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   13052:	7143      	strb	r3, [r0, #5]
            break;
   13054:	e73d      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   13056:	7983      	ldrb	r3, [r0, #6]
   13058:	79c2      	ldrb	r2, [r0, #7]
   1305a:	3301      	adds	r3, #1
   1305c:	b2db      	uxtb	r3, r3
    if (code > 7) {
   1305e:	2b07      	cmp	r3, #7
        group++;
   13060:	bf85      	ittet	hi
   13062:	3201      	addhi	r2, #1
   13064:	b2d2      	uxtbhi	r2, r2
   13066:	4619      	movls	r1, r3
        code = 0;
   13068:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   1306a:	2a04      	cmp	r2, #4
   1306c:	4615      	mov	r5, r2
   1306e:	dd1b      	ble.n	130a8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13070:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13072:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13074:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13078:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   1307a:	d01d      	beq.n	130b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   1307c:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   1307e:	07e9      	lsls	r1, r5, #31
   13080:	d452      	bmi.n	13128 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13082:	2501      	movs	r5, #1
   13084:	3301      	adds	r3, #1
   13086:	b2db      	uxtb	r3, r3
   13088:	fa44 f103 	asr.w	r1, r4, r3
   1308c:	07c9      	lsls	r1, r1, #31
   1308e:	d5f9      	bpl.n	13084 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   13090:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13092:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   13094:	2d00      	cmp	r5, #0
   13096:	d149      	bne.n	1312c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   13098:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   1309a:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   1309c:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   1309e:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   130a0:	7143      	strb	r3, [r0, #5]
}
   130a2:	e716      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   130a4:	2501      	movs	r5, #1
   130a6:	e7b8      	b.n	1301a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   130a8:	5c84      	ldrb	r4, [r0, r2]
   130aa:	fa54 f101 	asrs.w	r1, r4, r1
   130ae:	d029      	beq.n	13104 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   130b0:	7bc5      	ldrb	r5, [r0, #15]
   130b2:	e7eb      	b.n	1308c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   130b4:	2300      	movs	r3, #0
   130b6:	e7b9      	b.n	1302c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   130b8:	7843      	ldrb	r3, [r0, #1]
   130ba:	bb83      	cbnz	r3, 1311e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   130bc:	2102      	movs	r1, #2
   130be:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   130c0:	5cc3      	ldrb	r3, [r0, r3]
   130c2:	2b00      	cmp	r3, #0
   130c4:	d145      	bne.n	13152 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   130c6:	1c4a      	adds	r2, r1, #1
   130c8:	b2d2      	uxtb	r2, r2
   130ca:	2a05      	cmp	r2, #5
   130cc:	d00d      	beq.n	130ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   130ce:	5c83      	ldrb	r3, [r0, r2]
   130d0:	bb2b      	cbnz	r3, 1311e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   130d2:	1c8a      	adds	r2, r1, #2
   130d4:	b2d2      	uxtb	r2, r2
   130d6:	2a05      	cmp	r2, #5
   130d8:	d007      	beq.n	130ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   130da:	5c83      	ldrb	r3, [r0, r2]
   130dc:	b9fb      	cbnz	r3, 1311e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   130de:	1ccb      	adds	r3, r1, #3
   130e0:	b2db      	uxtb	r3, r3
   130e2:	2b05      	cmp	r3, #5
   130e4:	d001      	beq.n	130ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   130e6:	5cc3      	ldrb	r3, [r0, r3]
   130e8:	b9c3      	cbnz	r3, 1311c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   130ea:	7802      	ldrb	r2, [r0, #0]
   130ec:	b112      	cbz	r2, 130f4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   130ee:	e024      	b.n	1313a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   130f0:	5c83      	ldrb	r3, [r0, r2]
   130f2:	bb23      	cbnz	r3, 1313e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   130f4:	3201      	adds	r2, #1
   130f6:	b2d2      	uxtb	r2, r2
   130f8:	42aa      	cmp	r2, r5
   130fa:	ddf9      	ble.n	130f0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   130fc:	2300      	movs	r3, #0
   130fe:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   13100:	7143      	strb	r3, [r0, #5]
   13102:	e6e6      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13104:	3201      	adds	r2, #1
   13106:	b2d2      	uxtb	r2, r2
   13108:	2a04      	cmp	r2, #4
   1310a:	d8ee      	bhi.n	130ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1310c:	5c83      	ldrb	r3, [r0, r2]
   1310e:	b933      	cbnz	r3, 1311e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13110:	1ca9      	adds	r1, r5, #2
   13112:	b2c9      	uxtb	r1, r1
   13114:	2905      	cmp	r1, #5
   13116:	460b      	mov	r3, r1
   13118:	d1d2      	bne.n	130c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   1311a:	e7e6      	b.n	130ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1311c:	2204      	movs	r2, #4
   1311e:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13120:	461c      	mov	r4, r3
   13122:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   13124:	2300      	movs	r3, #0
   13126:	e7b1      	b.n	1308c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   13128:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   1312a:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   1312c:	8a83      	ldrh	r3, [r0, #20]
   1312e:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   13130:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   13132:	2301      	movs	r3, #1
                m_ledOn = false;
   13134:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   13136:	7143      	strb	r3, [r0, #5]
   13138:	e6cb      	b.n	12ed2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   1313a:	4613      	mov	r3, r2
   1313c:	2200      	movs	r2, #0
   1313e:	461d      	mov	r5, r3
            m_patternWrap = true;
   13140:	2301      	movs	r3, #1
   13142:	73c3      	strb	r3, [r0, #15]
   13144:	462c      	mov	r4, r5
        code = 0;
   13146:	2300      	movs	r3, #0
   13148:	e799      	b.n	1307e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   1314a:	2502      	movs	r5, #2
   1314c:	e6eb      	b.n	12f26 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1314e:	2503      	movs	r5, #3
   13150:	e6e9      	b.n	12f26 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   13152:	460a      	mov	r2, r1
   13154:	e7e3      	b.n	1311e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   13156:	bf00      	nop

00013158 <arm_sin_q15>:
   13158:	0982      	lsrs	r2, r0, #6
   1315a:	490c      	ldr	r1, [pc, #48]	; (1318c <arm_sin_q15+0x34>)
   1315c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13160:	0240      	lsls	r0, r0, #9
   13162:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   13166:	b410      	push	{r4}
   13168:	3201      	adds	r2, #1
   1316a:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   1316e:	fb03 f304 	mul.w	r3, r3, r4
   13172:	0c1b      	lsrs	r3, r3, #16
   13174:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13178:	f85d 4b04 	ldr.w	r4, [sp], #4
   1317c:	041b      	lsls	r3, r3, #16
   1317e:	fb10 3002 	smlabb	r0, r0, r2, r3
   13182:	f340 30cf 	sbfx	r0, r0, #15, #16
   13186:	f020 0001 	bic.w	r0, r0, #1
   1318a:	4770      	bx	lr
   1318c:	00023368 	.word	0x00023368

00013190 <_Znwj>:
   13190:	b510      	push	{r4, lr}
   13192:	2800      	cmp	r0, #0
   13194:	bf14      	ite	ne
   13196:	4604      	movne	r4, r0
   13198:	2401      	moveq	r4, #1
   1319a:	4620      	mov	r0, r4
   1319c:	f00a fc26 	bl	1d9ec <malloc>
   131a0:	b100      	cbz	r0, 131a4 <_Znwj+0x14>
   131a2:	bd10      	pop	{r4, pc}
   131a4:	f000 f9c8 	bl	13538 <_ZSt15get_new_handlerv>
   131a8:	b108      	cbz	r0, 131ae <_Znwj+0x1e>
   131aa:	4780      	blx	r0
   131ac:	e7f5      	b.n	1319a <_Znwj+0xa>
   131ae:	2004      	movs	r0, #4
   131b0:	f000 f8a2 	bl	132f8 <__cxa_allocate_exception>
   131b4:	4b02      	ldr	r3, [pc, #8]	; (131c0 <_Znwj+0x30>)
   131b6:	6003      	str	r3, [r0, #0]
   131b8:	4a02      	ldr	r2, [pc, #8]	; (131c4 <_Znwj+0x34>)
   131ba:	4903      	ldr	r1, [pc, #12]	; (131c8 <_Znwj+0x38>)
   131bc:	f000 f946 	bl	1344c <__cxa_throw>
   131c0:	000237bc 	.word	0x000237bc
   131c4:	000131e9 	.word	0x000131e9
   131c8:	00023798 	.word	0x00023798

000131cc <__cxa_pure_virtual>:
   131cc:	b508      	push	{r3, lr}
   131ce:	221b      	movs	r2, #27
   131d0:	4902      	ldr	r1, [pc, #8]	; (131dc <__cxa_pure_virtual+0x10>)
   131d2:	2002      	movs	r0, #2
   131d4:	f00c ffbe 	bl	20154 <write>
   131d8:	f000 f8ee 	bl	133b8 <_ZSt9terminatev>
   131dc:	0002376c 	.word	0x0002376c

000131e0 <_ZNKSt9bad_alloc4whatEv>:
   131e0:	4800      	ldr	r0, [pc, #0]	; (131e4 <_ZNKSt9bad_alloc4whatEv+0x4>)
   131e2:	4770      	bx	lr
   131e4:	00023788 	.word	0x00023788

000131e8 <_ZNSt9bad_allocD1Ev>:
   131e8:	b510      	push	{r4, lr}
   131ea:	4b03      	ldr	r3, [pc, #12]	; (131f8 <_ZNSt9bad_allocD1Ev+0x10>)
   131ec:	6003      	str	r3, [r0, #0]
   131ee:	4604      	mov	r4, r0
   131f0:	f000 f8be 	bl	13370 <_ZNSt9exceptionD1Ev>
   131f4:	4620      	mov	r0, r4
   131f6:	bd10      	pop	{r4, pc}
   131f8:	000237bc 	.word	0x000237bc

000131fc <_ZNSt9bad_allocD0Ev>:
   131fc:	b510      	push	{r4, lr}
   131fe:	4b05      	ldr	r3, [pc, #20]	; (13214 <_ZNSt9bad_allocD0Ev+0x18>)
   13200:	6003      	str	r3, [r0, #0]
   13202:	4604      	mov	r4, r0
   13204:	f000 f8b4 	bl	13370 <_ZNSt9exceptionD1Ev>
   13208:	4620      	mov	r0, r4
   1320a:	2104      	movs	r1, #4
   1320c:	f000 f804 	bl	13218 <_ZdlPvj>
   13210:	4620      	mov	r0, r4
   13212:	bd10      	pop	{r4, pc}
   13214:	000237bc 	.word	0x000237bc

00013218 <_ZdlPvj>:
   13218:	f000 bac0 	b.w	1379c <_ZdlPv>

0001321c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   1321c:	b4f0      	push	{r4, r5, r6, r7}
   1321e:	4c1b      	ldr	r4, [pc, #108]	; (1328c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13220:	f850 7c08 	ldr.w	r7, [r0, #-8]
   13224:	6861      	ldr	r1, [r4, #4]
   13226:	f1a0 0608 	sub.w	r6, r0, #8
   1322a:	b1c9      	cbz	r1, 13260 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   1322c:	19f5      	adds	r5, r6, r7
   1322e:	42a9      	cmp	r1, r5
   13230:	d01b      	beq.n	1326a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   13232:	684a      	ldr	r2, [r1, #4]
   13234:	b32a      	cbz	r2, 13282 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13236:	4295      	cmp	r5, r2
   13238:	d303      	bcc.n	13242 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   1323a:	e022      	b.n	13282 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1323c:	429d      	cmp	r5, r3
   1323e:	d205      	bcs.n	1324c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13240:	461a      	mov	r2, r3
   13242:	6853      	ldr	r3, [r2, #4]
   13244:	1d0c      	adds	r4, r1, #4
   13246:	4611      	mov	r1, r2
   13248:	2b00      	cmp	r3, #0
   1324a:	d1f7      	bne.n	1323c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   1324c:	6811      	ldr	r1, [r2, #0]
   1324e:	1855      	adds	r5, r2, r1
   13250:	42ae      	cmp	r6, r5
   13252:	d013      	beq.n	1327c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   13254:	f840 3c04 	str.w	r3, [r0, #-4]
   13258:	6823      	ldr	r3, [r4, #0]
   1325a:	605e      	str	r6, [r3, #4]
   1325c:	bcf0      	pop	{r4, r5, r6, r7}
   1325e:	4770      	bx	lr
   13260:	f840 1c04 	str.w	r1, [r0, #-4]
   13264:	6066      	str	r6, [r4, #4]
   13266:	bcf0      	pop	{r4, r5, r6, r7}
   13268:	4770      	bx	lr
   1326a:	680b      	ldr	r3, [r1, #0]
   1326c:	684a      	ldr	r2, [r1, #4]
   1326e:	f840 2c04 	str.w	r2, [r0, #-4]
   13272:	441f      	add	r7, r3
   13274:	f840 7c08 	str.w	r7, [r0, #-8]
   13278:	6066      	str	r6, [r4, #4]
   1327a:	e7ef      	b.n	1325c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1327c:	440f      	add	r7, r1
   1327e:	6017      	str	r7, [r2, #0]
   13280:	e7ec      	b.n	1325c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13282:	4613      	mov	r3, r2
   13284:	3404      	adds	r4, #4
   13286:	460a      	mov	r2, r1
   13288:	e7e0      	b.n	1324c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1328a:	bf00      	nop
   1328c:	2000227c 	.word	0x2000227c

00013290 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   13290:	b430      	push	{r4, r5}
   13292:	4c18      	ldr	r4, [pc, #96]	; (132f4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   13294:	f100 0108 	add.w	r1, r0, #8
   13298:	6863      	ldr	r3, [r4, #4]
   1329a:	2908      	cmp	r1, #8
   1329c:	bf38      	it	cc
   1329e:	2108      	movcc	r1, #8
   132a0:	b313      	cbz	r3, 132e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   132a2:	3107      	adds	r1, #7
   132a4:	681a      	ldr	r2, [r3, #0]
   132a6:	f021 0107 	bic.w	r1, r1, #7
   132aa:	4291      	cmp	r1, r2
   132ac:	d804      	bhi.n	132b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   132ae:	e01d      	b.n	132ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   132b0:	6802      	ldr	r2, [r0, #0]
   132b2:	4291      	cmp	r1, r2
   132b4:	d905      	bls.n	132c2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   132b6:	4603      	mov	r3, r0
   132b8:	6858      	ldr	r0, [r3, #4]
   132ba:	2800      	cmp	r0, #0
   132bc:	d1f8      	bne.n	132b0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   132be:	bc30      	pop	{r4, r5}
   132c0:	4770      	bx	lr
   132c2:	3304      	adds	r3, #4
   132c4:	1a52      	subs	r2, r2, r1
   132c6:	2a07      	cmp	r2, #7
   132c8:	d90a      	bls.n	132e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   132ca:	1845      	adds	r5, r0, r1
   132cc:	6844      	ldr	r4, [r0, #4]
   132ce:	606c      	str	r4, [r5, #4]
   132d0:	681c      	ldr	r4, [r3, #0]
   132d2:	5042      	str	r2, [r0, r1]
   132d4:	6021      	str	r1, [r4, #0]
   132d6:	601d      	str	r5, [r3, #0]
   132d8:	f104 0008 	add.w	r0, r4, #8
   132dc:	bc30      	pop	{r4, r5}
   132de:	4770      	bx	lr
   132e0:	6842      	ldr	r2, [r0, #4]
   132e2:	601a      	str	r2, [r3, #0]
   132e4:	4604      	mov	r4, r0
   132e6:	e7f7      	b.n	132d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   132e8:	4618      	mov	r0, r3
   132ea:	e7e8      	b.n	132be <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   132ec:	4618      	mov	r0, r3
   132ee:	1d23      	adds	r3, r4, #4
   132f0:	e7e8      	b.n	132c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   132f2:	bf00      	nop
   132f4:	2000227c 	.word	0x2000227c

000132f8 <__cxa_allocate_exception>:
   132f8:	b538      	push	{r3, r4, r5, lr}
   132fa:	f100 0580 	add.w	r5, r0, #128	; 0x80
   132fe:	4628      	mov	r0, r5
   13300:	f00a fb74 	bl	1d9ec <malloc>
   13304:	4604      	mov	r4, r0
   13306:	b138      	cbz	r0, 13318 <__cxa_allocate_exception+0x20>
   13308:	2280      	movs	r2, #128	; 0x80
   1330a:	2100      	movs	r1, #0
   1330c:	4620      	mov	r0, r4
   1330e:	f00a ffc5 	bl	1e29c <memset>
   13312:	f104 0080 	add.w	r0, r4, #128	; 0x80
   13316:	bd38      	pop	{r3, r4, r5, pc}
   13318:	4628      	mov	r0, r5
   1331a:	f7ff ffb9 	bl	13290 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   1331e:	4604      	mov	r4, r0
   13320:	2800      	cmp	r0, #0
   13322:	d1f1      	bne.n	13308 <__cxa_allocate_exception+0x10>
   13324:	f000 f848 	bl	133b8 <_ZSt9terminatev>

00013328 <__cxa_free_exception>:
   13328:	4a06      	ldr	r2, [pc, #24]	; (13344 <__cxa_free_exception+0x1c>)
   1332a:	6893      	ldr	r3, [r2, #8]
   1332c:	3880      	subs	r0, #128	; 0x80
   1332e:	4298      	cmp	r0, r3
   13330:	d905      	bls.n	1333e <__cxa_free_exception+0x16>
   13332:	68d2      	ldr	r2, [r2, #12]
   13334:	4413      	add	r3, r2
   13336:	4298      	cmp	r0, r3
   13338:	d201      	bcs.n	1333e <__cxa_free_exception+0x16>
   1333a:	f7ff bf6f 	b.w	1321c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   1333e:	f00a bb5d 	b.w	1d9fc <free>
   13342:	bf00      	nop
   13344:	2000227c 	.word	0x2000227c

00013348 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13348:	b538      	push	{r3, r4, r5, lr}
   1334a:	4c08      	ldr	r4, [pc, #32]	; (1336c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   1334c:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   13350:	4628      	mov	r0, r5
   13352:	60e5      	str	r5, [r4, #12]
   13354:	f00a fb4a 	bl	1d9ec <malloc>
   13358:	60a0      	str	r0, [r4, #8]
   1335a:	b120      	cbz	r0, 13366 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   1335c:	2300      	movs	r3, #0
   1335e:	6060      	str	r0, [r4, #4]
   13360:	6005      	str	r5, [r0, #0]
   13362:	6043      	str	r3, [r0, #4]
   13364:	bd38      	pop	{r3, r4, r5, pc}
   13366:	60e0      	str	r0, [r4, #12]
   13368:	6060      	str	r0, [r4, #4]
   1336a:	bd38      	pop	{r3, r4, r5, pc}
   1336c:	2000227c 	.word	0x2000227c

00013370 <_ZNSt9exceptionD1Ev>:
   13370:	4770      	bx	lr
   13372:	bf00      	nop

00013374 <_ZNSt13bad_exceptionD1Ev>:
   13374:	4770      	bx	lr
   13376:	bf00      	nop

00013378 <_ZGTtNKSt13bad_exception4whatEv>:
   13378:	4800      	ldr	r0, [pc, #0]	; (1337c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1337a:	4770      	bx	lr
   1337c:	000237c8 	.word	0x000237c8

00013380 <_ZNSt13bad_exceptionD0Ev>:
   13380:	b510      	push	{r4, lr}
   13382:	2104      	movs	r1, #4
   13384:	4604      	mov	r4, r0
   13386:	f7ff ff47 	bl	13218 <_ZdlPvj>
   1338a:	4620      	mov	r0, r4
   1338c:	bd10      	pop	{r4, pc}
   1338e:	bf00      	nop

00013390 <_ZN10__cxxabiv111__terminateEPFvvE>:
   13390:	b508      	push	{r3, lr}
   13392:	4780      	blx	r0
   13394:	f00a f896 	bl	1d4c4 <abort>
   13398:	f000 fb6c 	bl	13a74 <__cxa_begin_catch>
   1339c:	f00a f892 	bl	1d4c4 <abort>
   133a0:	460d      	mov	r5, r1
   133a2:	4604      	mov	r4, r0
   133a4:	f000 fba4 	bl	13af0 <__cxa_end_catch>
   133a8:	3501      	adds	r5, #1
   133aa:	d001      	beq.n	133b0 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   133ac:	f000 f9f8 	bl	137a0 <__cxa_end_cleanup>
   133b0:	4620      	mov	r0, r4
   133b2:	f000 faef 	bl	13994 <__cxa_call_unexpected>
   133b6:	bf00      	nop

000133b8 <_ZSt9terminatev>:
   133b8:	b508      	push	{r3, lr}
   133ba:	4b03      	ldr	r3, [pc, #12]	; (133c8 <_ZSt9terminatev+0x10>)
   133bc:	6818      	ldr	r0, [r3, #0]
   133be:	f3bf 8f5b 	dmb	ish
   133c2:	f7ff ffe5 	bl	13390 <_ZN10__cxxabiv111__terminateEPFvvE>
   133c6:	bf00      	nop
   133c8:	200000f0 	.word	0x200000f0

000133cc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   133cc:	b508      	push	{r3, lr}
   133ce:	4780      	blx	r0
   133d0:	f7ff fff2 	bl	133b8 <_ZSt9terminatev>

000133d4 <_ZSt10unexpectedv>:
   133d4:	b508      	push	{r3, lr}
   133d6:	4b03      	ldr	r3, [pc, #12]	; (133e4 <_ZSt10unexpectedv+0x10>)
   133d8:	6818      	ldr	r0, [r3, #0]
   133da:	f3bf 8f5b 	dmb	ish
   133de:	f7ff fff5 	bl	133cc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   133e2:	bf00      	nop
   133e4:	200000ec 	.word	0x200000ec

000133e8 <_ZSt13get_terminatev>:
   133e8:	4b02      	ldr	r3, [pc, #8]	; (133f4 <_ZSt13get_terminatev+0xc>)
   133ea:	6818      	ldr	r0, [r3, #0]
   133ec:	f3bf 8f5b 	dmb	ish
   133f0:	4770      	bx	lr
   133f2:	bf00      	nop
   133f4:	200000f0 	.word	0x200000f0

000133f8 <_ZSt14get_unexpectedv>:
   133f8:	4b02      	ldr	r3, [pc, #8]	; (13404 <_ZSt14get_unexpectedv+0xc>)
   133fa:	6818      	ldr	r0, [r3, #0]
   133fc:	f3bf 8f5b 	dmb	ish
   13400:	4770      	bx	lr
   13402:	bf00      	nop
   13404:	200000ec 	.word	0x200000ec

00013408 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   13408:	2801      	cmp	r0, #1
   1340a:	b510      	push	{r4, lr}
   1340c:	d81a      	bhi.n	13444 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   1340e:	f3bf 8f5b 	dmb	ish
   13412:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   13416:	e853 2f00 	ldrex	r2, [r3]
   1341a:	3a01      	subs	r2, #1
   1341c:	e843 2000 	strex	r0, r2, [r3]
   13420:	2800      	cmp	r0, #0
   13422:	d1f8      	bne.n	13416 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   13424:	f3bf 8f5b 	dmb	ish
   13428:	b95a      	cbnz	r2, 13442 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   1342a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1342e:	f101 0458 	add.w	r4, r1, #88	; 0x58
   13432:	b10b      	cbz	r3, 13438 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   13434:	4620      	mov	r0, r4
   13436:	4798      	blx	r3
   13438:	4620      	mov	r0, r4
   1343a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1343e:	f7ff bf73 	b.w	13328 <__cxa_free_exception>
   13442:	bd10      	pop	{r4, pc}
   13444:	f851 0c14 	ldr.w	r0, [r1, #-20]
   13448:	f7ff ffa2 	bl	13390 <_ZN10__cxxabiv111__terminateEPFvvE>

0001344c <__cxa_throw>:
   1344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1344e:	4604      	mov	r4, r0
   13450:	460f      	mov	r7, r1
   13452:	4616      	mov	r6, r2
   13454:	f000 fb96 	bl	13b84 <__cxa_get_globals>
   13458:	6843      	ldr	r3, [r0, #4]
   1345a:	2501      	movs	r5, #1
   1345c:	442b      	add	r3, r5
   1345e:	6043      	str	r3, [r0, #4]
   13460:	f844 7c78 	str.w	r7, [r4, #-120]
   13464:	f844 6c74 	str.w	r6, [r4, #-116]
   13468:	f844 5c80 	str.w	r5, [r4, #-128]
   1346c:	f7ff ffc4 	bl	133f8 <_ZSt14get_unexpectedv>
   13470:	f844 0c70 	str.w	r0, [r4, #-112]
   13474:	f7ff ffb8 	bl	133e8 <_ZSt13get_terminatev>
   13478:	2347      	movs	r3, #71	; 0x47
   1347a:	2243      	movs	r2, #67	; 0x43
   1347c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   13480:	4910      	ldr	r1, [pc, #64]	; (134c4 <__cxa_throw+0x78>)
   13482:	f804 3c58 	strb.w	r3, [r4, #-88]
   13486:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   1348a:	232b      	movs	r3, #43	; 0x2b
   1348c:	2755      	movs	r7, #85	; 0x55
   1348e:	2600      	movs	r6, #0
   13490:	f844 0c6c 	str.w	r0, [r4, #-108]
   13494:	f804 ec57 	strb.w	lr, [r4, #-87]
   13498:	f844 1c50 	str.w	r1, [r4, #-80]
   1349c:	f804 2c55 	strb.w	r2, [r4, #-85]
   134a0:	f804 2c54 	strb.w	r2, [r4, #-84]
   134a4:	f804 3c53 	strb.w	r3, [r4, #-83]
   134a8:	f804 3c52 	strb.w	r3, [r4, #-82]
   134ac:	f804 7c56 	strb.w	r7, [r4, #-86]
   134b0:	f804 6c51 	strb.w	r6, [r4, #-81]
   134b4:	4628      	mov	r0, r5
   134b6:	f009 fde9 	bl	1d08c <_Unwind_RaiseException>
   134ba:	4628      	mov	r0, r5
   134bc:	f000 fada 	bl	13a74 <__cxa_begin_catch>
   134c0:	f7ff ff7a 	bl	133b8 <_ZSt9terminatev>
   134c4:	00013409 	.word	0x00013409

000134c8 <__cxa_rethrow>:
   134c8:	b510      	push	{r4, lr}
   134ca:	f000 fb5b 	bl	13b84 <__cxa_get_globals>
   134ce:	6842      	ldr	r2, [r0, #4]
   134d0:	6804      	ldr	r4, [r0, #0]
   134d2:	3201      	adds	r2, #1
   134d4:	6042      	str	r2, [r0, #4]
   134d6:	b164      	cbz	r4, 134f2 <__cxa_rethrow+0x2a>
   134d8:	f894 2020 	ldrb.w	r2, [r4, #32]
   134dc:	2a47      	cmp	r2, #71	; 0x47
   134de:	d00a      	beq.n	134f6 <__cxa_rethrow+0x2e>
   134e0:	2200      	movs	r2, #0
   134e2:	6002      	str	r2, [r0, #0]
   134e4:	3420      	adds	r4, #32
   134e6:	4620      	mov	r0, r4
   134e8:	f009 fdf4 	bl	1d0d4 <_Unwind_Resume_or_Rethrow>
   134ec:	4620      	mov	r0, r4
   134ee:	f000 fac1 	bl	13a74 <__cxa_begin_catch>
   134f2:	f7ff ff61 	bl	133b8 <_ZSt9terminatev>
   134f6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   134fa:	2a4e      	cmp	r2, #78	; 0x4e
   134fc:	d1f0      	bne.n	134e0 <__cxa_rethrow+0x18>
   134fe:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   13502:	2a55      	cmp	r2, #85	; 0x55
   13504:	d1ec      	bne.n	134e0 <__cxa_rethrow+0x18>
   13506:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1350a:	2a43      	cmp	r2, #67	; 0x43
   1350c:	d1e8      	bne.n	134e0 <__cxa_rethrow+0x18>
   1350e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   13512:	2a43      	cmp	r2, #67	; 0x43
   13514:	d1e4      	bne.n	134e0 <__cxa_rethrow+0x18>
   13516:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1351a:	2a2b      	cmp	r2, #43	; 0x2b
   1351c:	d1e0      	bne.n	134e0 <__cxa_rethrow+0x18>
   1351e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   13522:	2a2b      	cmp	r2, #43	; 0x2b
   13524:	d1dc      	bne.n	134e0 <__cxa_rethrow+0x18>
   13526:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   1352a:	2a01      	cmp	r2, #1
   1352c:	d8d8      	bhi.n	134e0 <__cxa_rethrow+0x18>
   1352e:	6962      	ldr	r2, [r4, #20]
   13530:	4252      	negs	r2, r2
   13532:	6162      	str	r2, [r4, #20]
   13534:	e7d6      	b.n	134e4 <__cxa_rethrow+0x1c>
   13536:	bf00      	nop

00013538 <_ZSt15get_new_handlerv>:
   13538:	4b02      	ldr	r3, [pc, #8]	; (13544 <_ZSt15get_new_handlerv+0xc>)
   1353a:	6818      	ldr	r0, [r3, #0]
   1353c:	f3bf 8f5b 	dmb	ish
   13540:	4770      	bx	lr
   13542:	bf00      	nop
   13544:	2000228c 	.word	0x2000228c

00013548 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   13548:	b510      	push	{r4, lr}
   1354a:	4b03      	ldr	r3, [pc, #12]	; (13558 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1354c:	6003      	str	r3, [r0, #0]
   1354e:	4604      	mov	r4, r0
   13550:	f000 f8ca 	bl	136e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13554:	4620      	mov	r0, r4
   13556:	bd10      	pop	{r4, pc}
   13558:	000238b8 	.word	0x000238b8

0001355c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1355c:	b510      	push	{r4, lr}
   1355e:	4b05      	ldr	r3, [pc, #20]	; (13574 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   13560:	6003      	str	r3, [r0, #0]
   13562:	4604      	mov	r4, r0
   13564:	f000 f8c0 	bl	136e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13568:	4620      	mov	r0, r4
   1356a:	210c      	movs	r1, #12
   1356c:	f7ff fe54 	bl	13218 <_ZdlPvj>
   13570:	4620      	mov	r0, r4
   13572:	bd10      	pop	{r4, pc}
   13574:	000238b8 	.word	0x000238b8

00013578 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13578:	b570      	push	{r4, r5, r6, lr}
   1357a:	b082      	sub	sp, #8
   1357c:	460d      	mov	r5, r1
   1357e:	9c06      	ldr	r4, [sp, #24]
   13580:	4294      	cmp	r4, r2
   13582:	4606      	mov	r6, r0
   13584:	d009      	beq.n	1359a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   13586:	68b0      	ldr	r0, [r6, #8]
   13588:	6806      	ldr	r6, [r0, #0]
   1358a:	9406      	str	r4, [sp, #24]
   1358c:	6a34      	ldr	r4, [r6, #32]
   1358e:	4629      	mov	r1, r5
   13590:	46a4      	mov	ip, r4
   13592:	b002      	add	sp, #8
   13594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13598:	4760      	bx	ip
   1359a:	4619      	mov	r1, r3
   1359c:	9201      	str	r2, [sp, #4]
   1359e:	9300      	str	r3, [sp, #0]
   135a0:	f000 f86a 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   135a4:	9b00      	ldr	r3, [sp, #0]
   135a6:	9a01      	ldr	r2, [sp, #4]
   135a8:	2800      	cmp	r0, #0
   135aa:	d0ec      	beq.n	13586 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   135ac:	2006      	movs	r0, #6
   135ae:	b002      	add	sp, #8
   135b0:	bd70      	pop	{r4, r5, r6, pc}
   135b2:	bf00      	nop

000135b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   135b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b8:	b081      	sub	sp, #4
   135ba:	460e      	mov	r6, r1
   135bc:	4619      	mov	r1, r3
   135be:	461f      	mov	r7, r3
   135c0:	4691      	mov	r9, r2
   135c2:	4683      	mov	fp, r0
   135c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   135c6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   135ca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   135ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   135d0:	f000 f852 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   135d4:	b170      	cbz	r0, 135f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   135d6:	2e00      	cmp	r6, #0
   135d8:	602c      	str	r4, [r5, #0]
   135da:	f885 9004 	strb.w	r9, [r5, #4]
   135de:	db1f      	blt.n	13620 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   135e0:	4434      	add	r4, r6
   135e2:	45a0      	cmp	r8, r4
   135e4:	bf0c      	ite	eq
   135e6:	2406      	moveq	r4, #6
   135e8:	2401      	movne	r4, #1
   135ea:	71ac      	strb	r4, [r5, #6]
   135ec:	2000      	movs	r0, #0
   135ee:	b001      	add	sp, #4
   135f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f4:	4544      	cmp	r4, r8
   135f6:	d018      	beq.n	1362a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   135f8:	f8db 0008 	ldr.w	r0, [fp, #8]
   135fc:	f8d0 e000 	ldr.w	lr, [r0]
   13600:	950d      	str	r5, [sp, #52]	; 0x34
   13602:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   13606:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   1360a:	940a      	str	r4, [sp, #40]	; 0x28
   1360c:	f8de 401c 	ldr.w	r4, [lr, #28]
   13610:	463b      	mov	r3, r7
   13612:	464a      	mov	r2, r9
   13614:	4631      	mov	r1, r6
   13616:	46a4      	mov	ip, r4
   13618:	b001      	add	sp, #4
   1361a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1361e:	4760      	bx	ip
   13620:	3602      	adds	r6, #2
   13622:	d1e3      	bne.n	135ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13624:	2301      	movs	r3, #1
   13626:	71ab      	strb	r3, [r5, #6]
   13628:	e7e0      	b.n	135ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1362a:	4651      	mov	r1, sl
   1362c:	4658      	mov	r0, fp
   1362e:	f000 f823 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   13632:	2800      	cmp	r0, #0
   13634:	d0e0      	beq.n	135f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   13636:	2000      	movs	r0, #0
   13638:	f885 9005 	strb.w	r9, [r5, #5]
   1363c:	b001      	add	sp, #4
   1363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13642:	bf00      	nop

00013644 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   13644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13648:	4607      	mov	r7, r0
   1364a:	460c      	mov	r4, r1
   1364c:	4615      	mov	r5, r2
   1364e:	461e      	mov	r6, r3
   13650:	f000 f862 	bl	13718 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   13654:	b108      	cbz	r0, 1365a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   13656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1365a:	68b8      	ldr	r0, [r7, #8]
   1365c:	6807      	ldr	r7, [r0, #0]
   1365e:	4621      	mov	r1, r4
   13660:	69bc      	ldr	r4, [r7, #24]
   13662:	4633      	mov	r3, r6
   13664:	462a      	mov	r2, r5
   13666:	46a4      	mov	ip, r4
   13668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1366c:	4760      	bx	ip
   1366e:	bf00      	nop

00013670 <_ZNSt9type_infoD1Ev>:
   13670:	4770      	bx	lr
   13672:	bf00      	nop

00013674 <_ZNKSt9type_info14__is_pointer_pEv>:
   13674:	2000      	movs	r0, #0
   13676:	4770      	bx	lr

00013678 <_ZNKSt9type_infoeqERKS_>:
   13678:	4281      	cmp	r1, r0
   1367a:	d011      	beq.n	136a0 <_ZNKSt9type_infoeqERKS_+0x28>
   1367c:	b508      	push	{r3, lr}
   1367e:	6840      	ldr	r0, [r0, #4]
   13680:	7803      	ldrb	r3, [r0, #0]
   13682:	2b2a      	cmp	r3, #42	; 0x2a
   13684:	d00a      	beq.n	1369c <_ZNKSt9type_infoeqERKS_+0x24>
   13686:	6849      	ldr	r1, [r1, #4]
   13688:	780b      	ldrb	r3, [r1, #0]
   1368a:	2b2a      	cmp	r3, #42	; 0x2a
   1368c:	bf08      	it	eq
   1368e:	3101      	addeq	r1, #1
   13690:	f00b f8da 	bl	1e848 <strcmp>
   13694:	fab0 f080 	clz	r0, r0
   13698:	0940      	lsrs	r0, r0, #5
   1369a:	bd08      	pop	{r3, pc}
   1369c:	2000      	movs	r0, #0
   1369e:	bd08      	pop	{r3, pc}
   136a0:	2001      	movs	r0, #1
   136a2:	4770      	bx	lr

000136a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   136a4:	b570      	push	{r4, r5, r6, lr}
   136a6:	6803      	ldr	r3, [r0, #0]
   136a8:	b084      	sub	sp, #16
   136aa:	2400      	movs	r4, #0
   136ac:	699e      	ldr	r6, [r3, #24]
   136ae:	9400      	str	r4, [sp, #0]
   136b0:	2310      	movs	r3, #16
   136b2:	4615      	mov	r5, r2
   136b4:	9302      	str	r3, [sp, #8]
   136b6:	6812      	ldr	r2, [r2, #0]
   136b8:	f88d 4004 	strb.w	r4, [sp, #4]
   136bc:	466b      	mov	r3, sp
   136be:	9403      	str	r4, [sp, #12]
   136c0:	47b0      	blx	r6
   136c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   136c6:	f003 0306 	and.w	r3, r3, #6
   136ca:	2b06      	cmp	r3, #6
   136cc:	bf03      	ittte	eq
   136ce:	9b00      	ldreq	r3, [sp, #0]
   136d0:	602b      	streq	r3, [r5, #0]
   136d2:	2001      	moveq	r0, #1
   136d4:	4620      	movne	r0, r4
   136d6:	b004      	add	sp, #16
   136d8:	bd70      	pop	{r4, r5, r6, pc}
   136da:	bf00      	nop

000136dc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   136dc:	9800      	ldr	r0, [sp, #0]
   136de:	4290      	cmp	r0, r2
   136e0:	bf0c      	ite	eq
   136e2:	2006      	moveq	r0, #6
   136e4:	2001      	movne	r0, #1
   136e6:	4770      	bx	lr

000136e8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   136e8:	b510      	push	{r4, lr}
   136ea:	4b03      	ldr	r3, [pc, #12]	; (136f8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   136ec:	6003      	str	r3, [r0, #0]
   136ee:	4604      	mov	r4, r0
   136f0:	f7ff ffbe 	bl	13670 <_ZNSt9type_infoD1Ev>
   136f4:	4620      	mov	r0, r4
   136f6:	bd10      	pop	{r4, pc}
   136f8:	0002392c 	.word	0x0002392c

000136fc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   136fc:	b510      	push	{r4, lr}
   136fe:	4b05      	ldr	r3, [pc, #20]	; (13714 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13700:	6003      	str	r3, [r0, #0]
   13702:	4604      	mov	r4, r0
   13704:	f7ff ffb4 	bl	13670 <_ZNSt9type_infoD1Ev>
   13708:	4620      	mov	r0, r4
   1370a:	2108      	movs	r1, #8
   1370c:	f7ff fd84 	bl	13218 <_ZdlPvj>
   13710:	4620      	mov	r0, r4
   13712:	bd10      	pop	{r4, pc}
   13714:	0002392c 	.word	0x0002392c

00013718 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13718:	b538      	push	{r3, r4, r5, lr}
   1371a:	4615      	mov	r5, r2
   1371c:	461c      	mov	r4, r3
   1371e:	f7ff ffab 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   13722:	b120      	cbz	r0, 1372e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   13724:	2208      	movs	r2, #8
   13726:	2306      	movs	r3, #6
   13728:	6025      	str	r5, [r4, #0]
   1372a:	60e2      	str	r2, [r4, #12]
   1372c:	7123      	strb	r3, [r4, #4]
   1372e:	bd38      	pop	{r3, r4, r5, pc}

00013730 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13734:	4617      	mov	r7, r2
   13736:	461c      	mov	r4, r3
   13738:	4606      	mov	r6, r0
   1373a:	460d      	mov	r5, r1
   1373c:	f7ff ff9c 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   13740:	b908      	cbnz	r0, 13746 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   13742:	2c03      	cmp	r4, #3
   13744:	d901      	bls.n	1374a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   13746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1374a:	682b      	ldr	r3, [r5, #0]
   1374c:	463a      	mov	r2, r7
   1374e:	4631      	mov	r1, r6
   13750:	4628      	mov	r0, r5
   13752:	695b      	ldr	r3, [r3, #20]
   13754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13758:	4718      	bx	r3
   1375a:	bf00      	nop

0001375c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1375c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1375e:	b083      	sub	sp, #12
   13760:	4617      	mov	r7, r2
   13762:	9d08      	ldr	r5, [sp, #32]
   13764:	990a      	ldr	r1, [sp, #40]	; 0x28
   13766:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13768:	428d      	cmp	r5, r1
   1376a:	4606      	mov	r6, r0
   1376c:	d00b      	beq.n	13786 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   1376e:	4619      	mov	r1, r3
   13770:	4630      	mov	r0, r6
   13772:	f7ff ff81 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   13776:	b118      	cbz	r0, 13780 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13778:	2301      	movs	r3, #1
   1377a:	6025      	str	r5, [r4, #0]
   1377c:	7127      	strb	r7, [r4, #4]
   1377e:	71a3      	strb	r3, [r4, #6]
   13780:	2000      	movs	r0, #0
   13782:	b003      	add	sp, #12
   13784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13786:	9909      	ldr	r1, [sp, #36]	; 0x24
   13788:	9301      	str	r3, [sp, #4]
   1378a:	f7ff ff75 	bl	13678 <_ZNKSt9type_infoeqERKS_>
   1378e:	b118      	cbz	r0, 13798 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13790:	2000      	movs	r0, #0
   13792:	7167      	strb	r7, [r4, #5]
   13794:	b003      	add	sp, #12
   13796:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13798:	9b01      	ldr	r3, [sp, #4]
   1379a:	e7e8      	b.n	1376e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0001379c <_ZdlPv>:
   1379c:	f00a b92e 	b.w	1d9fc <free>

000137a0 <__cxa_end_cleanup>:
   137a0:	b41e      	push	{r1, r2, r3, r4}
   137a2:	f000 f891 	bl	138c8 <__gnu_end_cleanup>
   137a6:	bc1e      	pop	{r1, r2, r3, r4}
   137a8:	f009 fc82 	bl	1d0b0 <_Unwind_Resume>

000137ac <__cxa_type_match>:
   137ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   137ae:	7802      	ldrb	r2, [r0, #0]
   137b0:	2a47      	cmp	r2, #71	; 0x47
   137b2:	b083      	sub	sp, #12
   137b4:	460d      	mov	r5, r1
   137b6:	461f      	mov	r7, r3
   137b8:	d01e      	beq.n	137f8 <__cxa_type_match+0x4c>
   137ba:	2300      	movs	r3, #0
   137bc:	4c27      	ldr	r4, [pc, #156]	; (1385c <__cxa_type_match+0xb0>)
   137be:	9301      	str	r3, [sp, #4]
   137c0:	6823      	ldr	r3, [r4, #0]
   137c2:	4620      	mov	r0, r4
   137c4:	689b      	ldr	r3, [r3, #8]
   137c6:	4798      	blx	r3
   137c8:	b180      	cbz	r0, 137ec <__cxa_type_match+0x40>
   137ca:	9b01      	ldr	r3, [sp, #4]
   137cc:	681b      	ldr	r3, [r3, #0]
   137ce:	9301      	str	r3, [sp, #4]
   137d0:	2602      	movs	r6, #2
   137d2:	682b      	ldr	r3, [r5, #0]
   137d4:	4621      	mov	r1, r4
   137d6:	4628      	mov	r0, r5
   137d8:	691c      	ldr	r4, [r3, #16]
   137da:	aa01      	add	r2, sp, #4
   137dc:	2301      	movs	r3, #1
   137de:	47a0      	blx	r4
   137e0:	b130      	cbz	r0, 137f0 <__cxa_type_match+0x44>
   137e2:	9b01      	ldr	r3, [sp, #4]
   137e4:	603b      	str	r3, [r7, #0]
   137e6:	4630      	mov	r0, r6
   137e8:	b003      	add	sp, #12
   137ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137ec:	2601      	movs	r6, #1
   137ee:	e7f0      	b.n	137d2 <__cxa_type_match+0x26>
   137f0:	4606      	mov	r6, r0
   137f2:	4630      	mov	r0, r6
   137f4:	b003      	add	sp, #12
   137f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137f8:	7843      	ldrb	r3, [r0, #1]
   137fa:	2b4e      	cmp	r3, #78	; 0x4e
   137fc:	d1dd      	bne.n	137ba <__cxa_type_match+0xe>
   137fe:	7883      	ldrb	r3, [r0, #2]
   13800:	2b55      	cmp	r3, #85	; 0x55
   13802:	d1da      	bne.n	137ba <__cxa_type_match+0xe>
   13804:	78c3      	ldrb	r3, [r0, #3]
   13806:	2b43      	cmp	r3, #67	; 0x43
   13808:	d019      	beq.n	1383e <__cxa_type_match+0x92>
   1380a:	78c3      	ldrb	r3, [r0, #3]
   1380c:	2b43      	cmp	r3, #67	; 0x43
   1380e:	d1d4      	bne.n	137ba <__cxa_type_match+0xe>
   13810:	7903      	ldrb	r3, [r0, #4]
   13812:	2b43      	cmp	r3, #67	; 0x43
   13814:	d1d1      	bne.n	137ba <__cxa_type_match+0xe>
   13816:	7943      	ldrb	r3, [r0, #5]
   13818:	2b2b      	cmp	r3, #43	; 0x2b
   1381a:	d1ce      	bne.n	137ba <__cxa_type_match+0xe>
   1381c:	7983      	ldrb	r3, [r0, #6]
   1381e:	2b2b      	cmp	r3, #43	; 0x2b
   13820:	d1cb      	bne.n	137ba <__cxa_type_match+0xe>
   13822:	79c3      	ldrb	r3, [r0, #7]
   13824:	2b01      	cmp	r3, #1
   13826:	d8c8      	bhi.n	137ba <__cxa_type_match+0xe>
   13828:	d004      	beq.n	13834 <__cxa_type_match+0x88>
   1382a:	f850 4c20 	ldr.w	r4, [r0, #-32]
   1382e:	3058      	adds	r0, #88	; 0x58
   13830:	9001      	str	r0, [sp, #4]
   13832:	e7c5      	b.n	137c0 <__cxa_type_match+0x14>
   13834:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13838:	f850 4c78 	ldr.w	r4, [r0, #-120]
   1383c:	e7f8      	b.n	13830 <__cxa_type_match+0x84>
   1383e:	7903      	ldrb	r3, [r0, #4]
   13840:	2b46      	cmp	r3, #70	; 0x46
   13842:	d1e2      	bne.n	1380a <__cxa_type_match+0x5e>
   13844:	7943      	ldrb	r3, [r0, #5]
   13846:	2b4f      	cmp	r3, #79	; 0x4f
   13848:	d1df      	bne.n	1380a <__cxa_type_match+0x5e>
   1384a:	7983      	ldrb	r3, [r0, #6]
   1384c:	2b52      	cmp	r3, #82	; 0x52
   1384e:	d1dc      	bne.n	1380a <__cxa_type_match+0x5e>
   13850:	79c3      	ldrb	r3, [r0, #7]
   13852:	2b00      	cmp	r3, #0
   13854:	d1d9      	bne.n	1380a <__cxa_type_match+0x5e>
   13856:	9301      	str	r3, [sp, #4]
   13858:	4c01      	ldr	r4, [pc, #4]	; (13860 <__cxa_type_match+0xb4>)
   1385a:	e7b1      	b.n	137c0 <__cxa_type_match+0x14>
   1385c:	000237e4 	.word	0x000237e4
   13860:	000237dc 	.word	0x000237dc

00013864 <__cxa_begin_cleanup>:
   13864:	b510      	push	{r4, lr}
   13866:	4604      	mov	r4, r0
   13868:	f000 f98c 	bl	13b84 <__cxa_get_globals>
   1386c:	7823      	ldrb	r3, [r4, #0]
   1386e:	2b47      	cmp	r3, #71	; 0x47
   13870:	f1a4 0220 	sub.w	r2, r4, #32
   13874:	d004      	beq.n	13880 <__cxa_begin_cleanup+0x1c>
   13876:	6883      	ldr	r3, [r0, #8]
   13878:	bb23      	cbnz	r3, 138c4 <__cxa_begin_cleanup+0x60>
   1387a:	6082      	str	r2, [r0, #8]
   1387c:	2001      	movs	r0, #1
   1387e:	bd10      	pop	{r4, pc}
   13880:	7863      	ldrb	r3, [r4, #1]
   13882:	2b4e      	cmp	r3, #78	; 0x4e
   13884:	d1f7      	bne.n	13876 <__cxa_begin_cleanup+0x12>
   13886:	78a3      	ldrb	r3, [r4, #2]
   13888:	2b55      	cmp	r3, #85	; 0x55
   1388a:	d1f4      	bne.n	13876 <__cxa_begin_cleanup+0x12>
   1388c:	78e3      	ldrb	r3, [r4, #3]
   1388e:	2b43      	cmp	r3, #67	; 0x43
   13890:	d1f1      	bne.n	13876 <__cxa_begin_cleanup+0x12>
   13892:	7923      	ldrb	r3, [r4, #4]
   13894:	2b43      	cmp	r3, #67	; 0x43
   13896:	d1ee      	bne.n	13876 <__cxa_begin_cleanup+0x12>
   13898:	7963      	ldrb	r3, [r4, #5]
   1389a:	2b2b      	cmp	r3, #43	; 0x2b
   1389c:	d1eb      	bne.n	13876 <__cxa_begin_cleanup+0x12>
   1389e:	79a3      	ldrb	r3, [r4, #6]
   138a0:	2b2b      	cmp	r3, #43	; 0x2b
   138a2:	d1e8      	bne.n	13876 <__cxa_begin_cleanup+0x12>
   138a4:	79e3      	ldrb	r3, [r4, #7]
   138a6:	2b01      	cmp	r3, #1
   138a8:	d8e5      	bhi.n	13876 <__cxa_begin_cleanup+0x12>
   138aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   138ae:	3301      	adds	r3, #1
   138b0:	2b01      	cmp	r3, #1
   138b2:	f844 3c04 	str.w	r3, [r4, #-4]
   138b6:	d1e1      	bne.n	1387c <__cxa_begin_cleanup+0x18>
   138b8:	6883      	ldr	r3, [r0, #8]
   138ba:	f844 3c08 	str.w	r3, [r4, #-8]
   138be:	6082      	str	r2, [r0, #8]
   138c0:	2001      	movs	r0, #1
   138c2:	bd10      	pop	{r4, pc}
   138c4:	f7ff fd78 	bl	133b8 <_ZSt9terminatev>

000138c8 <__gnu_end_cleanup>:
   138c8:	b508      	push	{r3, lr}
   138ca:	f000 f95b 	bl	13b84 <__cxa_get_globals>
   138ce:	6883      	ldr	r3, [r0, #8]
   138d0:	b383      	cbz	r3, 13934 <__gnu_end_cleanup+0x6c>
   138d2:	f893 2020 	ldrb.w	r2, [r3, #32]
   138d6:	2a47      	cmp	r2, #71	; 0x47
   138d8:	d004      	beq.n	138e4 <__gnu_end_cleanup+0x1c>
   138da:	2200      	movs	r2, #0
   138dc:	6082      	str	r2, [r0, #8]
   138de:	f103 0020 	add.w	r0, r3, #32
   138e2:	bd08      	pop	{r3, pc}
   138e4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   138e8:	2a4e      	cmp	r2, #78	; 0x4e
   138ea:	d1f6      	bne.n	138da <__gnu_end_cleanup+0x12>
   138ec:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   138f0:	2a55      	cmp	r2, #85	; 0x55
   138f2:	d1f2      	bne.n	138da <__gnu_end_cleanup+0x12>
   138f4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   138f8:	2a43      	cmp	r2, #67	; 0x43
   138fa:	d1ee      	bne.n	138da <__gnu_end_cleanup+0x12>
   138fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13900:	2a43      	cmp	r2, #67	; 0x43
   13902:	d1ea      	bne.n	138da <__gnu_end_cleanup+0x12>
   13904:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13908:	2a2b      	cmp	r2, #43	; 0x2b
   1390a:	d1e6      	bne.n	138da <__gnu_end_cleanup+0x12>
   1390c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13910:	2a2b      	cmp	r2, #43	; 0x2b
   13912:	d1e2      	bne.n	138da <__gnu_end_cleanup+0x12>
   13914:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13918:	2a01      	cmp	r2, #1
   1391a:	d8de      	bhi.n	138da <__gnu_end_cleanup+0x12>
   1391c:	69da      	ldr	r2, [r3, #28]
   1391e:	3a01      	subs	r2, #1
   13920:	61da      	str	r2, [r3, #28]
   13922:	2a00      	cmp	r2, #0
   13924:	d1db      	bne.n	138de <__gnu_end_cleanup+0x16>
   13926:	699a      	ldr	r2, [r3, #24]
   13928:	6082      	str	r2, [r0, #8]
   1392a:	2200      	movs	r2, #0
   1392c:	619a      	str	r2, [r3, #24]
   1392e:	f103 0020 	add.w	r0, r3, #32
   13932:	bd08      	pop	{r3, pc}
   13934:	f7ff fd40 	bl	133b8 <_ZSt9terminatev>

00013938 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13938:	7803      	ldrb	r3, [r0, #0]
   1393a:	2b47      	cmp	r3, #71	; 0x47
   1393c:	d001      	beq.n	13942 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   1393e:	2000      	movs	r0, #0
   13940:	4770      	bx	lr
   13942:	7843      	ldrb	r3, [r0, #1]
   13944:	2b4e      	cmp	r3, #78	; 0x4e
   13946:	d1fa      	bne.n	1393e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13948:	7883      	ldrb	r3, [r0, #2]
   1394a:	2b55      	cmp	r3, #85	; 0x55
   1394c:	d1f7      	bne.n	1393e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1394e:	78c3      	ldrb	r3, [r0, #3]
   13950:	2b43      	cmp	r3, #67	; 0x43
   13952:	d1f4      	bne.n	1393e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13954:	7903      	ldrb	r3, [r0, #4]
   13956:	2b43      	cmp	r3, #67	; 0x43
   13958:	d1f1      	bne.n	1393e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1395a:	7943      	ldrb	r3, [r0, #5]
   1395c:	2b2b      	cmp	r3, #43	; 0x2b
   1395e:	d1ee      	bne.n	1393e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13960:	7983      	ldrb	r3, [r0, #6]
   13962:	2b2b      	cmp	r3, #43	; 0x2b
   13964:	d1eb      	bne.n	1393e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13966:	79c0      	ldrb	r0, [r0, #7]
   13968:	2801      	cmp	r0, #1
   1396a:	bf8c      	ite	hi
   1396c:	2000      	movhi	r0, #0
   1396e:	2001      	movls	r0, #1
   13970:	4770      	bx	lr
   13972:	bf00      	nop

00013974 <__cxa_call_terminate>:
   13974:	b510      	push	{r4, lr}
   13976:	b130      	cbz	r0, 13986 <__cxa_call_terminate+0x12>
   13978:	4604      	mov	r4, r0
   1397a:	f000 f87b 	bl	13a74 <__cxa_begin_catch>
   1397e:	4620      	mov	r0, r4
   13980:	f7ff ffda 	bl	13938 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13984:	b908      	cbnz	r0, 1398a <__cxa_call_terminate+0x16>
   13986:	f7ff fd17 	bl	133b8 <_ZSt9terminatev>
   1398a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1398e:	f7ff fcff 	bl	13390 <_ZN10__cxxabiv111__terminateEPFvvE>
   13992:	bf00      	nop

00013994 <__cxa_call_unexpected>:
   13994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13998:	b085      	sub	sp, #20
   1399a:	4602      	mov	r2, r0
   1399c:	f7ff ffcc 	bl	13938 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   139a0:	b160      	cbz	r0, 139bc <__cxa_call_unexpected+0x28>
   139a2:	f852 8c18 	ldr.w	r8, [r2, #-24]
   139a6:	f852 5c14 	ldr.w	r5, [r2, #-20]
   139aa:	6a96      	ldr	r6, [r2, #40]	; 0x28
   139ac:	6b17      	ldr	r7, [r2, #48]	; 0x30
   139ae:	6b54      	ldr	r4, [r2, #52]	; 0x34
   139b0:	4610      	mov	r0, r2
   139b2:	f000 f85f 	bl	13a74 <__cxa_begin_catch>
   139b6:	4640      	mov	r0, r8
   139b8:	f7ff fd08 	bl	133cc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   139bc:	4610      	mov	r0, r2
   139be:	f000 f859 	bl	13a74 <__cxa_begin_catch>
   139c2:	f7ff fd07 	bl	133d4 <_ZSt10unexpectedv>
   139c6:	f000 f855 	bl	13a74 <__cxa_begin_catch>
   139ca:	f7ff fcf5 	bl	133b8 <_ZSt9terminatev>
   139ce:	f000 f851 	bl	13a74 <__cxa_begin_catch>
   139d2:	f000 f8d3 	bl	13b7c <__cxa_get_globals_fast>
   139d6:	6803      	ldr	r3, [r0, #0]
   139d8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   139dc:	2a01      	cmp	r2, #1
   139de:	d036      	beq.n	13a4e <__cxa_call_unexpected+0xba>
   139e0:	f103 0278 	add.w	r2, r3, #120	; 0x78
   139e4:	f10d 0a10 	add.w	sl, sp, #16
   139e8:	f04f 0800 	mov.w	r8, #0
   139ec:	3320      	adds	r3, #32
   139ee:	f84a 2d08 	str.w	r2, [sl, #-8]!
   139f2:	f027 0b03 	bic.w	fp, r7, #3
   139f6:	9301      	str	r3, [sp, #4]
   139f8:	46c1      	mov	r9, r8
   139fa:	45b1      	cmp	r9, r6
   139fc:	da1b      	bge.n	13a36 <__cxa_call_unexpected+0xa2>
   139fe:	6827      	ldr	r7, [r4, #0]
   13a00:	b107      	cbz	r7, 13a04 <__cxa_call_unexpected+0x70>
   13a02:	4427      	add	r7, r4
   13a04:	4653      	mov	r3, sl
   13a06:	2200      	movs	r2, #0
   13a08:	4639      	mov	r1, r7
   13a0a:	9801      	ldr	r0, [sp, #4]
   13a0c:	f7ff fece 	bl	137ac <__cxa_type_match>
   13a10:	bb10      	cbnz	r0, 13a58 <__cxa_call_unexpected+0xc4>
   13a12:	683b      	ldr	r3, [r7, #0]
   13a14:	4914      	ldr	r1, [pc, #80]	; (13a68 <__cxa_call_unexpected+0xd4>)
   13a16:	691b      	ldr	r3, [r3, #16]
   13a18:	9300      	str	r3, [sp, #0]
   13a1a:	aa04      	add	r2, sp, #16
   13a1c:	2301      	movs	r3, #1
   13a1e:	f842 0d04 	str.w	r0, [r2, #-4]!
   13a22:	4638      	mov	r0, r7
   13a24:	9f00      	ldr	r7, [sp, #0]
   13a26:	47b8      	blx	r7
   13a28:	2800      	cmp	r0, #0
   13a2a:	bf18      	it	ne
   13a2c:	4680      	movne	r8, r0
   13a2e:	f109 0901 	add.w	r9, r9, #1
   13a32:	445c      	add	r4, fp
   13a34:	e7e1      	b.n	139fa <__cxa_call_unexpected+0x66>
   13a36:	f1b8 0f00 	cmp.w	r8, #0
   13a3a:	d00a      	beq.n	13a52 <__cxa_call_unexpected+0xbe>
   13a3c:	2004      	movs	r0, #4
   13a3e:	f7ff fc5b 	bl	132f8 <__cxa_allocate_exception>
   13a42:	4b0a      	ldr	r3, [pc, #40]	; (13a6c <__cxa_call_unexpected+0xd8>)
   13a44:	6003      	str	r3, [r0, #0]
   13a46:	4a0a      	ldr	r2, [pc, #40]	; (13a70 <__cxa_call_unexpected+0xdc>)
   13a48:	4907      	ldr	r1, [pc, #28]	; (13a68 <__cxa_call_unexpected+0xd4>)
   13a4a:	f7ff fcff 	bl	1344c <__cxa_throw>
   13a4e:	681a      	ldr	r2, [r3, #0]
   13a50:	e7c8      	b.n	139e4 <__cxa_call_unexpected+0x50>
   13a52:	4628      	mov	r0, r5
   13a54:	f7ff fc9c 	bl	13390 <_ZN10__cxxabiv111__terminateEPFvvE>
   13a58:	f7ff fd36 	bl	134c8 <__cxa_rethrow>
   13a5c:	f000 f848 	bl	13af0 <__cxa_end_catch>
   13a60:	f000 f846 	bl	13af0 <__cxa_end_catch>
   13a64:	f7ff fe9c 	bl	137a0 <__cxa_end_cleanup>
   13a68:	000237ec 	.word	0x000237ec
   13a6c:	00023870 	.word	0x00023870
   13a70:	00013375 	.word	0x00013375

00013a74 <__cxa_begin_catch>:
   13a74:	b538      	push	{r3, r4, r5, lr}
   13a76:	4604      	mov	r4, r0
   13a78:	f000 f884 	bl	13b84 <__cxa_get_globals>
   13a7c:	7822      	ldrb	r2, [r4, #0]
   13a7e:	6803      	ldr	r3, [r0, #0]
   13a80:	2a47      	cmp	r2, #71	; 0x47
   13a82:	f1a4 0120 	sub.w	r1, r4, #32
   13a86:	d004      	beq.n	13a92 <__cxa_begin_catch+0x1e>
   13a88:	bb83      	cbnz	r3, 13aec <__cxa_begin_catch+0x78>
   13a8a:	461c      	mov	r4, r3
   13a8c:	6001      	str	r1, [r0, #0]
   13a8e:	4620      	mov	r0, r4
   13a90:	bd38      	pop	{r3, r4, r5, pc}
   13a92:	7862      	ldrb	r2, [r4, #1]
   13a94:	2a4e      	cmp	r2, #78	; 0x4e
   13a96:	d1f7      	bne.n	13a88 <__cxa_begin_catch+0x14>
   13a98:	78a2      	ldrb	r2, [r4, #2]
   13a9a:	2a55      	cmp	r2, #85	; 0x55
   13a9c:	d1f4      	bne.n	13a88 <__cxa_begin_catch+0x14>
   13a9e:	78e2      	ldrb	r2, [r4, #3]
   13aa0:	2a43      	cmp	r2, #67	; 0x43
   13aa2:	d1f1      	bne.n	13a88 <__cxa_begin_catch+0x14>
   13aa4:	7922      	ldrb	r2, [r4, #4]
   13aa6:	2a43      	cmp	r2, #67	; 0x43
   13aa8:	d1ee      	bne.n	13a88 <__cxa_begin_catch+0x14>
   13aaa:	7962      	ldrb	r2, [r4, #5]
   13aac:	2a2b      	cmp	r2, #43	; 0x2b
   13aae:	d1eb      	bne.n	13a88 <__cxa_begin_catch+0x14>
   13ab0:	79a2      	ldrb	r2, [r4, #6]
   13ab2:	2a2b      	cmp	r2, #43	; 0x2b
   13ab4:	d1e8      	bne.n	13a88 <__cxa_begin_catch+0x14>
   13ab6:	79e2      	ldrb	r2, [r4, #7]
   13ab8:	2a01      	cmp	r2, #1
   13aba:	d8e5      	bhi.n	13a88 <__cxa_begin_catch+0x14>
   13abc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13ac0:	2a00      	cmp	r2, #0
   13ac2:	db10      	blt.n	13ae6 <__cxa_begin_catch+0x72>
   13ac4:	3201      	adds	r2, #1
   13ac6:	6845      	ldr	r5, [r0, #4]
   13ac8:	f844 2c0c 	str.w	r2, [r4, #-12]
   13acc:	3d01      	subs	r5, #1
   13ace:	6045      	str	r5, [r0, #4]
   13ad0:	428b      	cmp	r3, r1
   13ad2:	bf1c      	itt	ne
   13ad4:	f844 3c10 	strne.w	r3, [r4, #-16]
   13ad8:	6001      	strne	r1, [r0, #0]
   13ada:	4620      	mov	r0, r4
   13adc:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13ade:	f008 ff39 	bl	1c954 <_Unwind_Complete>
   13ae2:	4620      	mov	r0, r4
   13ae4:	bd38      	pop	{r3, r4, r5, pc}
   13ae6:	f1c2 0201 	rsb	r2, r2, #1
   13aea:	e7ec      	b.n	13ac6 <__cxa_begin_catch+0x52>
   13aec:	f7ff fc64 	bl	133b8 <_ZSt9terminatev>

00013af0 <__cxa_end_catch>:
   13af0:	b508      	push	{r3, lr}
   13af2:	f000 f843 	bl	13b7c <__cxa_get_globals_fast>
   13af6:	4602      	mov	r2, r0
   13af8:	6800      	ldr	r0, [r0, #0]
   13afa:	2800      	cmp	r0, #0
   13afc:	d03d      	beq.n	13b7a <__cxa_end_catch+0x8a>
   13afe:	f890 3020 	ldrb.w	r3, [r0, #32]
   13b02:	2b47      	cmp	r3, #71	; 0x47
   13b04:	d006      	beq.n	13b14 <__cxa_end_catch+0x24>
   13b06:	2300      	movs	r3, #0
   13b08:	6013      	str	r3, [r2, #0]
   13b0a:	3020      	adds	r0, #32
   13b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13b10:	f008 bf22 	b.w	1c958 <_Unwind_DeleteException>
   13b14:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13b18:	2b4e      	cmp	r3, #78	; 0x4e
   13b1a:	d1f4      	bne.n	13b06 <__cxa_end_catch+0x16>
   13b1c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13b20:	2b55      	cmp	r3, #85	; 0x55
   13b22:	d1f0      	bne.n	13b06 <__cxa_end_catch+0x16>
   13b24:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13b28:	2b43      	cmp	r3, #67	; 0x43
   13b2a:	d1ec      	bne.n	13b06 <__cxa_end_catch+0x16>
   13b2c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13b30:	2b43      	cmp	r3, #67	; 0x43
   13b32:	d1e8      	bne.n	13b06 <__cxa_end_catch+0x16>
   13b34:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13b38:	2b2b      	cmp	r3, #43	; 0x2b
   13b3a:	d1e4      	bne.n	13b06 <__cxa_end_catch+0x16>
   13b3c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13b40:	2b2b      	cmp	r3, #43	; 0x2b
   13b42:	d1e0      	bne.n	13b06 <__cxa_end_catch+0x16>
   13b44:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13b48:	2b01      	cmp	r3, #1
   13b4a:	d8dc      	bhi.n	13b06 <__cxa_end_catch+0x16>
   13b4c:	6943      	ldr	r3, [r0, #20]
   13b4e:	2b00      	cmp	r3, #0
   13b50:	db05      	blt.n	13b5e <__cxa_end_catch+0x6e>
   13b52:	3b01      	subs	r3, #1
   13b54:	d008      	beq.n	13b68 <__cxa_end_catch+0x78>
   13b56:	1c5a      	adds	r2, r3, #1
   13b58:	d00d      	beq.n	13b76 <__cxa_end_catch+0x86>
   13b5a:	6143      	str	r3, [r0, #20]
   13b5c:	bd08      	pop	{r3, pc}
   13b5e:	3301      	adds	r3, #1
   13b60:	d1fb      	bne.n	13b5a <__cxa_end_catch+0x6a>
   13b62:	6901      	ldr	r1, [r0, #16]
   13b64:	6011      	str	r1, [r2, #0]
   13b66:	e7f8      	b.n	13b5a <__cxa_end_catch+0x6a>
   13b68:	6903      	ldr	r3, [r0, #16]
   13b6a:	6013      	str	r3, [r2, #0]
   13b6c:	3020      	adds	r0, #32
   13b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13b72:	f008 bef1 	b.w	1c958 <_Unwind_DeleteException>
   13b76:	f7ff fc1f 	bl	133b8 <_ZSt9terminatev>
   13b7a:	bd08      	pop	{r3, pc}

00013b7c <__cxa_get_globals_fast>:
   13b7c:	4800      	ldr	r0, [pc, #0]	; (13b80 <__cxa_get_globals_fast+0x4>)
   13b7e:	4770      	bx	lr
   13b80:	20002290 	.word	0x20002290

00013b84 <__cxa_get_globals>:
   13b84:	4800      	ldr	r0, [pc, #0]	; (13b88 <__cxa_get_globals+0x4>)
   13b86:	4770      	bx	lr
   13b88:	20002290 	.word	0x20002290

00013b8c <_ZL28read_encoded_value_with_basehjPKhPj>:
   13b8c:	2850      	cmp	r0, #80	; 0x50
   13b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b90:	d054      	beq.n	13c3c <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13b92:	f000 040f 	and.w	r4, r0, #15
   13b96:	2c0c      	cmp	r4, #12
   13b98:	d84e      	bhi.n	13c38 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13b9a:	e8df f004 	tbb	[pc, r4]
   13b9e:	3907      	.short	0x3907
   13ba0:	4d170749 	.word	0x4d170749
   13ba4:	1f4d4d4d 	.word	0x1f4d4d4d
   13ba8:	071b      	.short	0x071b
   13baa:	17          	.byte	0x17
   13bab:	00          	.byte	0x00
   13bac:	4615      	mov	r5, r2
   13bae:	f855 4b04 	ldr.w	r4, [r5], #4
   13bb2:	b144      	cbz	r4, 13bc6 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13bb4:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13bb8:	2e10      	cmp	r6, #16
   13bba:	bf08      	it	eq
   13bbc:	4611      	moveq	r1, r2
   13bbe:	440c      	add	r4, r1
   13bc0:	0602      	lsls	r2, r0, #24
   13bc2:	bf48      	it	mi
   13bc4:	6824      	ldrmi	r4, [r4, #0]
   13bc6:	601c      	str	r4, [r3, #0]
   13bc8:	4628      	mov	r0, r5
   13bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bcc:	4615      	mov	r5, r2
   13bce:	f855 4b08 	ldr.w	r4, [r5], #8
   13bd2:	e7ee      	b.n	13bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13bd4:	4615      	mov	r5, r2
   13bd6:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13bda:	e7ea      	b.n	13bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13bdc:	2400      	movs	r4, #0
   13bde:	4627      	mov	r7, r4
   13be0:	4615      	mov	r5, r2
   13be2:	f815 eb01 	ldrb.w	lr, [r5], #1
   13be6:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13bea:	40be      	lsls	r6, r7
   13bec:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13bf0:	ea44 0406 	orr.w	r4, r4, r6
   13bf4:	f107 0707 	add.w	r7, r7, #7
   13bf8:	d1f3      	bne.n	13be2 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13bfa:	2f1f      	cmp	r7, #31
   13bfc:	d8d9      	bhi.n	13bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13bfe:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13c02:	d0d6      	beq.n	13bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c04:	f04f 36ff 	mov.w	r6, #4294967295
   13c08:	fa06 f707 	lsl.w	r7, r6, r7
   13c0c:	433c      	orrs	r4, r7
   13c0e:	e7d1      	b.n	13bb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13c10:	2400      	movs	r4, #0
   13c12:	4627      	mov	r7, r4
   13c14:	4615      	mov	r5, r2
   13c16:	f815 eb01 	ldrb.w	lr, [r5], #1
   13c1a:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13c1e:	40be      	lsls	r6, r7
   13c20:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13c24:	ea44 0406 	orr.w	r4, r4, r6
   13c28:	f107 0707 	add.w	r7, r7, #7
   13c2c:	d1f3      	bne.n	13c16 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13c2e:	e7c0      	b.n	13bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c30:	4615      	mov	r5, r2
   13c32:	f835 4b02 	ldrh.w	r4, [r5], #2
   13c36:	e7bc      	b.n	13bb2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c38:	f009 fc44 	bl	1d4c4 <abort>
   13c3c:	3203      	adds	r2, #3
   13c3e:	f022 0503 	bic.w	r5, r2, #3
   13c42:	f855 4b04 	ldr.w	r4, [r5], #4
   13c46:	601c      	str	r4, [r3, #0]
   13c48:	4628      	mov	r0, r5
   13c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13c4c:	28ff      	cmp	r0, #255	; 0xff
   13c4e:	d00d      	beq.n	13c6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13c50:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13c54:	2820      	cmp	r0, #32
   13c56:	d015      	beq.n	13c84 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13c58:	d90a      	bls.n	13c70 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13c5a:	2840      	cmp	r0, #64	; 0x40
   13c5c:	d00f      	beq.n	13c7e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13c5e:	2850      	cmp	r0, #80	; 0x50
   13c60:	d004      	beq.n	13c6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13c62:	2830      	cmp	r0, #48	; 0x30
   13c64:	d108      	bne.n	13c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13c66:	4608      	mov	r0, r1
   13c68:	f009 bc26 	b.w	1d4b8 <_Unwind_GetDataRelBase>
   13c6c:	2000      	movs	r0, #0
   13c6e:	4770      	bx	lr
   13c70:	2800      	cmp	r0, #0
   13c72:	d0fb      	beq.n	13c6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13c74:	2810      	cmp	r0, #16
   13c76:	d0f9      	beq.n	13c6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13c78:	b508      	push	{r3, lr}
   13c7a:	f009 fc23 	bl	1d4c4 <abort>
   13c7e:	4608      	mov	r0, r1
   13c80:	f009 bc06 	b.w	1d490 <_Unwind_GetRegionStart>
   13c84:	4608      	mov	r0, r1
   13c86:	f009 bc13 	b.w	1d4b0 <_Unwind_GetTextRelBase>
   13c8a:	bf00      	nop

00013c8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c8e:	460c      	mov	r4, r1
   13c90:	4615      	mov	r5, r2
   13c92:	4607      	mov	r7, r0
   13c94:	2800      	cmp	r0, #0
   13c96:	d044      	beq.n	13d22 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13c98:	f009 fbfa 	bl	1d490 <_Unwind_GetRegionStart>
   13c9c:	6028      	str	r0, [r5, #0]
   13c9e:	7826      	ldrb	r6, [r4, #0]
   13ca0:	2eff      	cmp	r6, #255	; 0xff
   13ca2:	f104 0401 	add.w	r4, r4, #1
   13ca6:	d032      	beq.n	13d0e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13ca8:	4639      	mov	r1, r7
   13caa:	4630      	mov	r0, r6
   13cac:	f7ff ffce 	bl	13c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13cb0:	4622      	mov	r2, r4
   13cb2:	4601      	mov	r1, r0
   13cb4:	1d2b      	adds	r3, r5, #4
   13cb6:	4630      	mov	r0, r6
   13cb8:	f7ff ff68 	bl	13b8c <_ZL28read_encoded_value_with_basehjPKhPj>
   13cbc:	4604      	mov	r4, r0
   13cbe:	1c60      	adds	r0, r4, #1
   13cc0:	7823      	ldrb	r3, [r4, #0]
   13cc2:	752b      	strb	r3, [r5, #20]
   13cc4:	2bff      	cmp	r3, #255	; 0xff
   13cc6:	d029      	beq.n	13d1c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13cc8:	2310      	movs	r3, #16
   13cca:	2400      	movs	r4, #0
   13ccc:	752b      	strb	r3, [r5, #20]
   13cce:	4622      	mov	r2, r4
   13cd0:	f810 1b01 	ldrb.w	r1, [r0], #1
   13cd4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13cd8:	4093      	lsls	r3, r2
   13cda:	0609      	lsls	r1, r1, #24
   13cdc:	ea44 0403 	orr.w	r4, r4, r3
   13ce0:	f102 0207 	add.w	r2, r2, #7
   13ce4:	d4f4      	bmi.n	13cd0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13ce6:	4404      	add	r4, r0
   13ce8:	60ec      	str	r4, [r5, #12]
   13cea:	7803      	ldrb	r3, [r0, #0]
   13cec:	756b      	strb	r3, [r5, #21]
   13cee:	2400      	movs	r4, #0
   13cf0:	3001      	adds	r0, #1
   13cf2:	4622      	mov	r2, r4
   13cf4:	f810 1b01 	ldrb.w	r1, [r0], #1
   13cf8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13cfc:	4093      	lsls	r3, r2
   13cfe:	431c      	orrs	r4, r3
   13d00:	060b      	lsls	r3, r1, #24
   13d02:	f102 0207 	add.w	r2, r2, #7
   13d06:	d4f5      	bmi.n	13cf4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13d08:	4404      	add	r4, r0
   13d0a:	612c      	str	r4, [r5, #16]
   13d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d0e:	6068      	str	r0, [r5, #4]
   13d10:	7823      	ldrb	r3, [r4, #0]
   13d12:	752b      	strb	r3, [r5, #20]
   13d14:	2bff      	cmp	r3, #255	; 0xff
   13d16:	f104 0001 	add.w	r0, r4, #1
   13d1a:	d1d5      	bne.n	13cc8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13d1c:	2300      	movs	r3, #0
   13d1e:	60eb      	str	r3, [r5, #12]
   13d20:	e7e3      	b.n	13cea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13d22:	e7bb      	b.n	13c9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013d24 <__gxx_personality_v0>:
   13d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d28:	f000 0403 	and.w	r4, r0, #3
   13d2c:	b097      	sub	sp, #92	; 0x5c
   13d2e:	2300      	movs	r3, #0
   13d30:	2c01      	cmp	r4, #1
   13d32:	4689      	mov	r9, r1
   13d34:	4617      	mov	r7, r2
   13d36:	930a      	str	r3, [sp, #40]	; 0x28
   13d38:	d01e      	beq.n	13d78 <__gxx_personality_v0+0x54>
   13d3a:	d30e      	bcc.n	13d5a <__gxx_personality_v0+0x36>
   13d3c:	2c02      	cmp	r4, #2
   13d3e:	d10a      	bne.n	13d56 <__gxx_personality_v0+0x32>
   13d40:	4639      	mov	r1, r7
   13d42:	4648      	mov	r0, r9
   13d44:	f009 fb90 	bl	1d468 <__gnu_unwind_frame>
   13d48:	2800      	cmp	r0, #0
   13d4a:	f000 80a5 	beq.w	13e98 <__gxx_personality_v0+0x174>
   13d4e:	2009      	movs	r0, #9
   13d50:	b017      	add	sp, #92	; 0x5c
   13d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d56:	f009 fbb5 	bl	1d4c4 <abort>
   13d5a:	0700      	lsls	r0, r0, #28
   13d5c:	d4f0      	bmi.n	13d40 <__gxx_personality_v0+0x1c>
   13d5e:	2301      	movs	r3, #1
   13d60:	9303      	str	r3, [sp, #12]
   13d62:	aa16      	add	r2, sp, #88	; 0x58
   13d64:	2300      	movs	r3, #0
   13d66:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13d6a:	4619      	mov	r1, r3
   13d6c:	9200      	str	r2, [sp, #0]
   13d6e:	4638      	mov	r0, r7
   13d70:	220c      	movs	r2, #12
   13d72:	f008 fe1d 	bl	1c9b0 <_Unwind_VRS_Set>
   13d76:	e00f      	b.n	13d98 <__gxx_personality_v0+0x74>
   13d78:	f010 0408 	ands.w	r4, r0, #8
   13d7c:	f000 8090 	beq.w	13ea0 <__gxx_personality_v0+0x17c>
   13d80:	aa16      	add	r2, sp, #88	; 0x58
   13d82:	f044 0402 	orr.w	r4, r4, #2
   13d86:	f842 1d2c 	str.w	r1, [r2, #-44]!
   13d8a:	4638      	mov	r0, r7
   13d8c:	9200      	str	r2, [sp, #0]
   13d8e:	4619      	mov	r1, r3
   13d90:	220c      	movs	r2, #12
   13d92:	9403      	str	r4, [sp, #12]
   13d94:	f008 fe0c 	bl	1c9b0 <_Unwind_VRS_Set>
   13d98:	4638      	mov	r0, r7
   13d9a:	f009 fb7f 	bl	1d49c <_Unwind_GetLanguageSpecificData>
   13d9e:	9005      	str	r0, [sp, #20]
   13da0:	2800      	cmp	r0, #0
   13da2:	d0cd      	beq.n	13d40 <__gxx_personality_v0+0x1c>
   13da4:	ab10      	add	r3, sp, #64	; 0x40
   13da6:	461a      	mov	r2, r3
   13da8:	9905      	ldr	r1, [sp, #20]
   13daa:	9306      	str	r3, [sp, #24]
   13dac:	4638      	mov	r0, r7
   13dae:	f7ff ff6d 	bl	13c8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   13db2:	4639      	mov	r1, r7
   13db4:	4604      	mov	r4, r0
   13db6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13dba:	f7ff ff47 	bl	13c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13dbe:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   13dc2:	2300      	movs	r3, #0
   13dc4:	9012      	str	r0, [sp, #72]	; 0x48
   13dc6:	4619      	mov	r1, r3
   13dc8:	220f      	movs	r2, #15
   13dca:	f8cd b000 	str.w	fp, [sp]
   13dce:	4638      	mov	r0, r7
   13dd0:	f008 fdc8 	bl	1c964 <_Unwind_VRS_Get>
   13dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13dd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13dd8:	f023 0301 	bic.w	r3, r3, #1
   13ddc:	42a2      	cmp	r2, r4
   13dde:	f103 36ff 	add.w	r6, r3, #4294967295
   13de2:	d975      	bls.n	13ed0 <__gxx_personality_v0+0x1ac>
   13de4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13de8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13dec:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   13df0:	2100      	movs	r1, #0
   13df2:	4628      	mov	r0, r5
   13df4:	f7ff ff2a 	bl	13c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13df8:	4622      	mov	r2, r4
   13dfa:	4653      	mov	r3, sl
   13dfc:	4601      	mov	r1, r0
   13dfe:	4628      	mov	r0, r5
   13e00:	f7ff fec4 	bl	13b8c <_ZL28read_encoded_value_with_basehjPKhPj>
   13e04:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13e08:	4605      	mov	r5, r0
   13e0a:	2100      	movs	r1, #0
   13e0c:	4620      	mov	r0, r4
   13e0e:	f7ff ff1d 	bl	13c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13e12:	462a      	mov	r2, r5
   13e14:	4643      	mov	r3, r8
   13e16:	4601      	mov	r1, r0
   13e18:	4620      	mov	r0, r4
   13e1a:	f7ff feb7 	bl	13b8c <_ZL28read_encoded_value_with_basehjPKhPj>
   13e1e:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13e22:	4605      	mov	r5, r0
   13e24:	2100      	movs	r1, #0
   13e26:	4620      	mov	r0, r4
   13e28:	f7ff ff10 	bl	13c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13e2c:	462a      	mov	r2, r5
   13e2e:	4601      	mov	r1, r0
   13e30:	465b      	mov	r3, fp
   13e32:	4620      	mov	r0, r4
   13e34:	f7ff feaa 	bl	13b8c <_ZL28read_encoded_value_with_basehjPKhPj>
   13e38:	4604      	mov	r4, r0
   13e3a:	2000      	movs	r0, #0
   13e3c:	4602      	mov	r2, r0
   13e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   13e42:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13e46:	4093      	lsls	r3, r2
   13e48:	0609      	lsls	r1, r1, #24
   13e4a:	ea40 0003 	orr.w	r0, r0, r3
   13e4e:	f102 0207 	add.w	r2, r2, #7
   13e52:	d4f4      	bmi.n	13e3e <__gxx_personality_v0+0x11a>
   13e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13e58:	4413      	add	r3, r2
   13e5a:	429e      	cmp	r6, r3
   13e5c:	d231      	bcs.n	13ec2 <__gxx_personality_v0+0x19e>
   13e5e:	9b03      	ldr	r3, [sp, #12]
   13e60:	07db      	lsls	r3, r3, #31
   13e62:	d539      	bpl.n	13ed8 <__gxx_personality_v0+0x1b4>
   13e64:	2500      	movs	r5, #0
   13e66:	9504      	str	r5, [sp, #16]
   13e68:	2300      	movs	r3, #0
   13e6a:	4619      	mov	r1, r3
   13e6c:	220d      	movs	r2, #13
   13e6e:	f8cd 8000 	str.w	r8, [sp]
   13e72:	4638      	mov	r0, r7
   13e74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13e76:	f008 fd75 	bl	1c964 <_Unwind_VRS_Get>
   13e7a:	9a05      	ldr	r2, [sp, #20]
   13e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13e7e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   13e82:	9a04      	ldr	r2, [sp, #16]
   13e84:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   13e88:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   13e8c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   13e90:	f8c9 3020 	str.w	r3, [r9, #32]
   13e94:	2006      	movs	r0, #6
   13e96:	e75b      	b.n	13d50 <__gxx_personality_v0+0x2c>
   13e98:	2008      	movs	r0, #8
   13e9a:	b017      	add	sp, #92	; 0x5c
   13e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea0:	ab10      	add	r3, sp, #64	; 0x40
   13ea2:	9300      	str	r3, [sp, #0]
   13ea4:	9306      	str	r3, [sp, #24]
   13ea6:	220d      	movs	r2, #13
   13ea8:	4623      	mov	r3, r4
   13eaa:	4621      	mov	r1, r4
   13eac:	4638      	mov	r0, r7
   13eae:	f8d9 5020 	ldr.w	r5, [r9, #32]
   13eb2:	f008 fd57 	bl	1c964 <_Unwind_VRS_Get>
   13eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13eb8:	429d      	cmp	r5, r3
   13eba:	d012      	beq.n	13ee2 <__gxx_personality_v0+0x1be>
   13ebc:	2302      	movs	r3, #2
   13ebe:	9303      	str	r3, [sp, #12]
   13ec0:	e74f      	b.n	13d62 <__gxx_personality_v0+0x3e>
   13ec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13ec4:	4413      	add	r3, r2
   13ec6:	429e      	cmp	r6, r3
   13ec8:	d359      	bcc.n	13f7e <__gxx_personality_v0+0x25a>
   13eca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13ecc:	42a3      	cmp	r3, r4
   13ece:	d88d      	bhi.n	13dec <__gxx_personality_v0+0xc8>
   13ed0:	2500      	movs	r5, #0
   13ed2:	9504      	str	r5, [sp, #16]
   13ed4:	2401      	movs	r4, #1
   13ed6:	e105      	b.n	140e4 <__gxx_personality_v0+0x3c0>
   13ed8:	9b03      	ldr	r3, [sp, #12]
   13eda:	071b      	lsls	r3, r3, #28
   13edc:	d54c      	bpl.n	13f78 <__gxx_personality_v0+0x254>
   13ede:	f7ff fa6b 	bl	133b8 <_ZSt9terminatev>
   13ee2:	aa16      	add	r2, sp, #88	; 0x58
   13ee4:	4623      	mov	r3, r4
   13ee6:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13eea:	4621      	mov	r1, r4
   13eec:	9200      	str	r2, [sp, #0]
   13eee:	4638      	mov	r0, r7
   13ef0:	220c      	movs	r2, #12
   13ef2:	f008 fd5d 	bl	1c9b0 <_Unwind_VRS_Set>
   13ef6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   13efa:	9304      	str	r3, [sp, #16]
   13efc:	2b00      	cmp	r3, #0
   13efe:	d03b      	beq.n	13f78 <__gxx_personality_v0+0x254>
   13f00:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   13f04:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   13f08:	2403      	movs	r4, #3
   13f0a:	2d00      	cmp	r5, #0
   13f0c:	f2c0 8106 	blt.w	1411c <__gxx_personality_v0+0x3f8>
   13f10:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13f14:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13f18:	a916      	add	r1, sp, #88	; 0x58
   13f1a:	2300      	movs	r3, #0
   13f1c:	f841 9d28 	str.w	r9, [r1, #-40]!
   13f20:	461a      	mov	r2, r3
   13f22:	9100      	str	r1, [sp, #0]
   13f24:	4638      	mov	r0, r7
   13f26:	4619      	mov	r1, r3
   13f28:	f008 fd42 	bl	1c9b0 <_Unwind_VRS_Set>
   13f2c:	2300      	movs	r3, #0
   13f2e:	4619      	mov	r1, r3
   13f30:	2201      	movs	r2, #1
   13f32:	f8cd a000 	str.w	sl, [sp]
   13f36:	4638      	mov	r0, r7
   13f38:	950d      	str	r5, [sp, #52]	; 0x34
   13f3a:	f008 fd39 	bl	1c9b0 <_Unwind_VRS_Set>
   13f3e:	2300      	movs	r3, #0
   13f40:	4619      	mov	r1, r3
   13f42:	220f      	movs	r2, #15
   13f44:	f8cd 8000 	str.w	r8, [sp]
   13f48:	4638      	mov	r0, r7
   13f4a:	f008 fd0b 	bl	1c964 <_Unwind_VRS_Get>
   13f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f50:	9a04      	ldr	r2, [sp, #16]
   13f52:	f8cd 8000 	str.w	r8, [sp]
   13f56:	f003 0501 	and.w	r5, r3, #1
   13f5a:	2300      	movs	r3, #0
   13f5c:	4315      	orrs	r5, r2
   13f5e:	4638      	mov	r0, r7
   13f60:	4619      	mov	r1, r3
   13f62:	220f      	movs	r2, #15
   13f64:	950e      	str	r5, [sp, #56]	; 0x38
   13f66:	f008 fd23 	bl	1c9b0 <_Unwind_VRS_Set>
   13f6a:	2c02      	cmp	r4, #2
   13f6c:	f000 8080 	beq.w	14070 <__gxx_personality_v0+0x34c>
   13f70:	2007      	movs	r0, #7
   13f72:	b017      	add	sp, #92	; 0x5c
   13f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f78:	4648      	mov	r0, r9
   13f7a:	f7ff fcfb 	bl	13974 <__cxa_call_terminate>
   13f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f80:	9304      	str	r3, [sp, #16]
   13f82:	461a      	mov	r2, r3
   13f84:	2b00      	cmp	r3, #0
   13f86:	d178      	bne.n	1407a <__gxx_personality_v0+0x356>
   13f88:	2800      	cmp	r0, #0
   13f8a:	f43f aed9 	beq.w	13d40 <__gxx_personality_v0+0x1c>
   13f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13f90:	9a04      	ldr	r2, [sp, #16]
   13f92:	3801      	subs	r0, #1
   13f94:	4403      	add	r3, r0
   13f96:	2a00      	cmp	r2, #0
   13f98:	f43f aed2 	beq.w	13d40 <__gxx_personality_v0+0x1c>
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d075      	beq.n	1408c <__gxx_personality_v0+0x368>
   13fa0:	9a03      	ldr	r2, [sp, #12]
   13fa2:	f012 0208 	ands.w	r2, r2, #8
   13fa6:	9209      	str	r2, [sp, #36]	; 0x24
   13fa8:	f000 80f6 	beq.w	14198 <__gxx_personality_v0+0x474>
   13fac:	2147      	movs	r1, #71	; 0x47
   13fae:	224e      	movs	r2, #78	; 0x4e
   13fb0:	f889 1000 	strb.w	r1, [r9]
   13fb4:	f889 2001 	strb.w	r2, [r9, #1]
   13fb8:	2155      	movs	r1, #85	; 0x55
   13fba:	2243      	movs	r2, #67	; 0x43
   13fbc:	f889 1002 	strb.w	r1, [r9, #2]
   13fc0:	f889 2003 	strb.w	r2, [r9, #3]
   13fc4:	2146      	movs	r1, #70	; 0x46
   13fc6:	224f      	movs	r2, #79	; 0x4f
   13fc8:	f889 1004 	strb.w	r1, [r9, #4]
   13fcc:	f889 2005 	strb.w	r2, [r9, #5]
   13fd0:	2152      	movs	r1, #82	; 0x52
   13fd2:	2200      	movs	r2, #0
   13fd4:	f889 1006 	strb.w	r1, [r9, #6]
   13fd8:	f889 2007 	strb.w	r2, [r9, #7]
   13fdc:	2200      	movs	r2, #0
   13fde:	9208      	str	r2, [sp, #32]
   13fe0:	9707      	str	r7, [sp, #28]
   13fe2:	2500      	movs	r5, #0
   13fe4:	4629      	mov	r1, r5
   13fe6:	e000      	b.n	13fea <__gxx_personality_v0+0x2c6>
   13fe8:	4623      	mov	r3, r4
   13fea:	461c      	mov	r4, r3
   13fec:	f814 0b01 	ldrb.w	r0, [r4], #1
   13ff0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   13ff4:	408a      	lsls	r2, r1
   13ff6:	0606      	lsls	r6, r0, #24
   13ff8:	ea45 0502 	orr.w	r5, r5, r2
   13ffc:	f101 0107 	add.w	r1, r1, #7
   14000:	d4f2      	bmi.n	13fe8 <__gxx_personality_v0+0x2c4>
   14002:	291f      	cmp	r1, #31
   14004:	d805      	bhi.n	14012 <__gxx_personality_v0+0x2ee>
   14006:	0642      	lsls	r2, r0, #25
   14008:	d503      	bpl.n	14012 <__gxx_personality_v0+0x2ee>
   1400a:	2201      	movs	r2, #1
   1400c:	408a      	lsls	r2, r1
   1400e:	4252      	negs	r2, r2
   14010:	4315      	orrs	r5, r2
   14012:	2600      	movs	r6, #0
   14014:	4631      	mov	r1, r6
   14016:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1401a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1401e:	408a      	lsls	r2, r1
   14020:	0607      	lsls	r7, r0, #24
   14022:	ea46 0602 	orr.w	r6, r6, r2
   14026:	f101 0107 	add.w	r1, r1, #7
   1402a:	d4f4      	bmi.n	14016 <__gxx_personality_v0+0x2f2>
   1402c:	291f      	cmp	r1, #31
   1402e:	d805      	bhi.n	1403c <__gxx_personality_v0+0x318>
   14030:	0640      	lsls	r0, r0, #25
   14032:	d503      	bpl.n	1403c <__gxx_personality_v0+0x318>
   14034:	2301      	movs	r3, #1
   14036:	408b      	lsls	r3, r1
   14038:	425b      	negs	r3, r3
   1403a:	431e      	orrs	r6, r3
   1403c:	2d00      	cmp	r5, #0
   1403e:	d05c      	beq.n	140fa <__gxx_personality_v0+0x3d6>
   14040:	dd5e      	ble.n	14100 <__gxx_personality_v0+0x3dc>
   14042:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14046:	28ff      	cmp	r0, #255	; 0xff
   14048:	f000 80a4 	beq.w	14194 <__gxx_personality_v0+0x470>
   1404c:	f000 0307 	and.w	r3, r0, #7
   14050:	2b04      	cmp	r3, #4
   14052:	f63f ae80 	bhi.w	13d56 <__gxx_personality_v0+0x32>
   14056:	a201      	add	r2, pc, #4	; (adr r2, 1405c <__gxx_personality_v0+0x338>)
   14058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1405c:	000140c7 	.word	0x000140c7
   14060:	00013d57 	.word	0x00013d57
   14064:	000140cd 	.word	0x000140cd
   14068:	000140c7 	.word	0x000140c7
   1406c:	000140a5 	.word	0x000140a5
   14070:	4648      	mov	r0, r9
   14072:	f7ff fbf7 	bl	13864 <__cxa_begin_cleanup>
   14076:	2007      	movs	r0, #7
   14078:	e66a      	b.n	13d50 <__gxx_personality_v0+0x2c>
   1407a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1407c:	441a      	add	r2, r3
   1407e:	9204      	str	r2, [sp, #16]
   14080:	2800      	cmp	r0, #0
   14082:	d184      	bne.n	13f8e <__gxx_personality_v0+0x26a>
   14084:	9b04      	ldr	r3, [sp, #16]
   14086:	2b00      	cmp	r3, #0
   14088:	f43f ae5a 	beq.w	13d40 <__gxx_personality_v0+0x1c>
   1408c:	9b03      	ldr	r3, [sp, #12]
   1408e:	f013 0301 	ands.w	r3, r3, #1
   14092:	f47f ae55 	bne.w	13d40 <__gxx_personality_v0+0x1c>
   14096:	9a03      	ldr	r2, [sp, #12]
   14098:	f012 0508 	ands.w	r5, r2, #8
   1409c:	f040 8097 	bne.w	141ce <__gxx_personality_v0+0x4aa>
   140a0:	2402      	movs	r4, #2
   140a2:	e739      	b.n	13f18 <__gxx_personality_v0+0x1f4>
   140a4:	00eb      	lsls	r3, r5, #3
   140a6:	425b      	negs	r3, r3
   140a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   140aa:	9912      	ldr	r1, [sp, #72]	; 0x48
   140ac:	441a      	add	r2, r3
   140ae:	4643      	mov	r3, r8
   140b0:	f7ff fd6c 	bl	13b8c <_ZL28read_encoded_value_with_basehjPKhPj>
   140b4:	990e      	ldr	r1, [sp, #56]	; 0x38
   140b6:	b199      	cbz	r1, 140e0 <__gxx_personality_v0+0x3bc>
   140b8:	f1b9 0f00 	cmp.w	r9, #0
   140bc:	d109      	bne.n	140d2 <__gxx_personality_v0+0x3ae>
   140be:	2e00      	cmp	r6, #0
   140c0:	d077      	beq.n	141b2 <__gxx_personality_v0+0x48e>
   140c2:	19a3      	adds	r3, r4, r6
   140c4:	e78d      	b.n	13fe2 <__gxx_personality_v0+0x2be>
   140c6:	00ab      	lsls	r3, r5, #2
   140c8:	425b      	negs	r3, r3
   140ca:	e7ed      	b.n	140a8 <__gxx_personality_v0+0x384>
   140cc:	006b      	lsls	r3, r5, #1
   140ce:	425b      	negs	r3, r3
   140d0:	e7ea      	b.n	140a8 <__gxx_personality_v0+0x384>
   140d2:	ab0a      	add	r3, sp, #40	; 0x28
   140d4:	2200      	movs	r2, #0
   140d6:	4648      	mov	r0, r9
   140d8:	f7ff fb68 	bl	137ac <__cxa_type_match>
   140dc:	2800      	cmp	r0, #0
   140de:	d0ee      	beq.n	140be <__gxx_personality_v0+0x39a>
   140e0:	9f07      	ldr	r7, [sp, #28]
   140e2:	2403      	movs	r4, #3
   140e4:	9b03      	ldr	r3, [sp, #12]
   140e6:	07da      	lsls	r2, r3, #31
   140e8:	d460      	bmi.n	141ac <__gxx_personality_v0+0x488>
   140ea:	9b03      	ldr	r3, [sp, #12]
   140ec:	0719      	lsls	r1, r3, #28
   140ee:	d466      	bmi.n	141be <__gxx_personality_v0+0x49a>
   140f0:	2c01      	cmp	r4, #1
   140f2:	f43f af41 	beq.w	13f78 <__gxx_personality_v0+0x254>
   140f6:	9905      	ldr	r1, [sp, #20]
   140f8:	e707      	b.n	13f0a <__gxx_personality_v0+0x1e6>
   140fa:	2301      	movs	r3, #1
   140fc:	9308      	str	r3, [sp, #32]
   140fe:	e7de      	b.n	140be <__gxx_personality_v0+0x39a>
   14100:	f1b9 0f00 	cmp.w	r9, #0
   14104:	d001      	beq.n	1410a <__gxx_personality_v0+0x3e6>
   14106:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14108:	b35b      	cbz	r3, 14162 <__gxx_personality_v0+0x43e>
   1410a:	1c6b      	adds	r3, r5, #1
   1410c:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14110:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14116:	2b00      	cmp	r3, #0
   14118:	d1d1      	bne.n	140be <__gxx_personality_v0+0x39a>
   1411a:	e7e1      	b.n	140e0 <__gxx_personality_v0+0x3bc>
   1411c:	9a06      	ldr	r2, [sp, #24]
   1411e:	4638      	mov	r0, r7
   14120:	f7ff fdb4 	bl	13c8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14124:	4639      	mov	r1, r7
   14126:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1412a:	f7ff fd8f 	bl	13c4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1412e:	00aa      	lsls	r2, r5, #2
   14130:	f082 0203 	eor.w	r2, r2, #3
   14134:	43d2      	mvns	r2, r2
   14136:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14138:	9012      	str	r0, [sp, #72]	; 0x48
   1413a:	58b3      	ldr	r3, [r6, r2]
   1413c:	4416      	add	r6, r2
   1413e:	b133      	cbz	r3, 1414e <__gxx_personality_v0+0x42a>
   14140:	4632      	mov	r2, r6
   14142:	2300      	movs	r3, #0
   14144:	f852 1f04 	ldr.w	r1, [r2, #4]!
   14148:	3301      	adds	r3, #1
   1414a:	2900      	cmp	r1, #0
   1414c:	d1fa      	bne.n	14144 <__gxx_personality_v0+0x420>
   1414e:	2204      	movs	r2, #4
   14150:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   14154:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   14158:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   1415c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14160:	e6d6      	b.n	13f10 <__gxx_personality_v0+0x1ec>
   14162:	1c6f      	adds	r7, r5, #1
   14164:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14168:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1416a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1416c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14170:	920f      	str	r2, [sp, #60]	; 0x3c
   14172:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   14176:	b921      	cbnz	r1, 14182 <__gxx_personality_v0+0x45e>
   14178:	e7b2      	b.n	140e0 <__gxx_personality_v0+0x3bc>
   1417a:	f857 1f04 	ldr.w	r1, [r7, #4]!
   1417e:	2900      	cmp	r1, #0
   14180:	d0ae      	beq.n	140e0 <__gxx_personality_v0+0x3bc>
   14182:	4439      	add	r1, r7
   14184:	465b      	mov	r3, fp
   14186:	2200      	movs	r2, #0
   14188:	4648      	mov	r0, r9
   1418a:	f7ff fb0f 	bl	137ac <__cxa_type_match>
   1418e:	2800      	cmp	r0, #0
   14190:	d0f3      	beq.n	1417a <__gxx_personality_v0+0x456>
   14192:	e794      	b.n	140be <__gxx_personality_v0+0x39a>
   14194:	2300      	movs	r3, #0
   14196:	e787      	b.n	140a8 <__gxx_personality_v0+0x384>
   14198:	f899 2007 	ldrb.w	r2, [r9, #7]
   1419c:	2a01      	cmp	r2, #1
   1419e:	bf0c      	ite	eq
   141a0:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   141a4:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   141a8:	920a      	str	r2, [sp, #40]	; 0x28
   141aa:	e717      	b.n	13fdc <__gxx_personality_v0+0x2b8>
   141ac:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   141b0:	e65a      	b.n	13e68 <__gxx_personality_v0+0x144>
   141b2:	9b08      	ldr	r3, [sp, #32]
   141b4:	9f07      	ldr	r7, [sp, #28]
   141b6:	2b00      	cmp	r3, #0
   141b8:	f47f af68 	bne.w	1408c <__gxx_personality_v0+0x368>
   141bc:	e5c0      	b.n	13d40 <__gxx_personality_v0+0x1c>
   141be:	2c01      	cmp	r4, #1
   141c0:	f43f ae8d 	beq.w	13ede <__gxx_personality_v0+0x1ba>
   141c4:	2d00      	cmp	r5, #0
   141c6:	f6bf aea3 	bge.w	13f10 <__gxx_personality_v0+0x1ec>
   141ca:	f7ff f903 	bl	133d4 <_ZSt10unexpectedv>
   141ce:	461d      	mov	r5, r3
   141d0:	2402      	movs	r4, #2
   141d2:	e6a1      	b.n	13f18 <__gxx_personality_v0+0x1f4>
   141d4:	f7ff fc4e 	bl	13a74 <__cxa_begin_catch>
   141d8:	e681      	b.n	13ede <__gxx_personality_v0+0x1ba>
   141da:	bf00      	nop

000141dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   141dc:	b570      	push	{r4, r5, r6, lr}
   141de:	4b3c      	ldr	r3, [pc, #240]	; (142d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   141e0:	781a      	ldrb	r2, [r3, #0]
   141e2:	b082      	sub	sp, #8
   141e4:	2a00      	cmp	r2, #0
   141e6:	d135      	bne.n	14254 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   141e8:	2401      	movs	r4, #1
   141ea:	701c      	strb	r4, [r3, #0]
   141ec:	f006 fbd2 	bl	1a994 <__cxa_current_exception_type>
   141f0:	2800      	cmp	r0, #0
   141f2:	d05b      	beq.n	142ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   141f4:	6844      	ldr	r4, [r0, #4]
   141f6:	4d37      	ldr	r5, [pc, #220]	; (142d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   141f8:	7823      	ldrb	r3, [r4, #0]
   141fa:	2b2a      	cmp	r3, #42	; 0x2a
   141fc:	ab02      	add	r3, sp, #8
   141fe:	f04f 32ff 	mov.w	r2, #4294967295
   14202:	bf08      	it	eq
   14204:	3401      	addeq	r4, #1
   14206:	f843 2d04 	str.w	r2, [r3, #-4]!
   1420a:	2200      	movs	r2, #0
   1420c:	4611      	mov	r1, r2
   1420e:	4620      	mov	r0, r4
   14210:	f006 fb52 	bl	1a8b8 <__cxa_demangle>
   14214:	682b      	ldr	r3, [r5, #0]
   14216:	4606      	mov	r6, r0
   14218:	68db      	ldr	r3, [r3, #12]
   1421a:	482f      	ldr	r0, [pc, #188]	; (142d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   1421c:	2230      	movs	r2, #48	; 0x30
   1421e:	2101      	movs	r1, #1
   14220:	f009 fba4 	bl	1d96c <fwrite>
   14224:	9b01      	ldr	r3, [sp, #4]
   14226:	b17b      	cbz	r3, 14248 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14228:	682b      	ldr	r3, [r5, #0]
   1422a:	4620      	mov	r0, r4
   1422c:	68d9      	ldr	r1, [r3, #12]
   1422e:	f009 f9c7 	bl	1d5c0 <fputs>
   14232:	682b      	ldr	r3, [r5, #0]
   14234:	4829      	ldr	r0, [pc, #164]	; (142dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   14236:	68db      	ldr	r3, [r3, #12]
   14238:	2202      	movs	r2, #2
   1423a:	2101      	movs	r1, #1
   1423c:	f009 fb96 	bl	1d96c <fwrite>
   14240:	9b01      	ldr	r3, [sp, #4]
   14242:	b18b      	cbz	r3, 14268 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   14244:	f7ff f940 	bl	134c8 <__cxa_rethrow>
   14248:	682b      	ldr	r3, [r5, #0]
   1424a:	4630      	mov	r0, r6
   1424c:	68d9      	ldr	r1, [r3, #12]
   1424e:	f009 f9b7 	bl	1d5c0 <fputs>
   14252:	e7ee      	b.n	14232 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   14254:	4b1f      	ldr	r3, [pc, #124]	; (142d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14256:	4822      	ldr	r0, [pc, #136]	; (142e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   14258:	681b      	ldr	r3, [r3, #0]
   1425a:	221d      	movs	r2, #29
   1425c:	68db      	ldr	r3, [r3, #12]
   1425e:	2101      	movs	r1, #1
   14260:	f009 fb84 	bl	1d96c <fwrite>
   14264:	f009 f92e 	bl	1d4c4 <abort>
   14268:	4630      	mov	r0, r6
   1426a:	f009 fbc7 	bl	1d9fc <free>
   1426e:	e7e9      	b.n	14244 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14270:	2901      	cmp	r1, #1
   14272:	460c      	mov	r4, r1
   14274:	d127      	bne.n	142c6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   14276:	f7ff fbfd 	bl	13a74 <__cxa_begin_catch>
   1427a:	6803      	ldr	r3, [r0, #0]
   1427c:	689b      	ldr	r3, [r3, #8]
   1427e:	4798      	blx	r3
   14280:	682b      	ldr	r3, [r5, #0]
   14282:	4606      	mov	r6, r0
   14284:	68db      	ldr	r3, [r3, #12]
   14286:	4817      	ldr	r0, [pc, #92]	; (142e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14288:	4621      	mov	r1, r4
   1428a:	220b      	movs	r2, #11
   1428c:	f009 fb6e 	bl	1d96c <fwrite>
   14290:	682b      	ldr	r3, [r5, #0]
   14292:	4630      	mov	r0, r6
   14294:	68d9      	ldr	r1, [r3, #12]
   14296:	f009 f993 	bl	1d5c0 <fputs>
   1429a:	682b      	ldr	r3, [r5, #0]
   1429c:	200a      	movs	r0, #10
   1429e:	68d9      	ldr	r1, [r3, #12]
   142a0:	f009 f91e 	bl	1d4e0 <fputc>
   142a4:	f7ff fc24 	bl	13af0 <__cxa_end_catch>
   142a8:	f009 f90c 	bl	1d4c4 <abort>
   142ac:	4b09      	ldr	r3, [pc, #36]	; (142d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   142ae:	480e      	ldr	r0, [pc, #56]	; (142e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   142b0:	681b      	ldr	r3, [r3, #0]
   142b2:	4621      	mov	r1, r4
   142b4:	68db      	ldr	r3, [r3, #12]
   142b6:	222d      	movs	r2, #45	; 0x2d
   142b8:	f009 fb58 	bl	1d96c <fwrite>
   142bc:	e7f4      	b.n	142a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   142be:	f7ff fc17 	bl	13af0 <__cxa_end_catch>
   142c2:	f7ff fa6d 	bl	137a0 <__cxa_end_cleanup>
   142c6:	f7ff fbd5 	bl	13a74 <__cxa_begin_catch>
   142ca:	f7ff fc11 	bl	13af0 <__cxa_end_catch>
   142ce:	e7eb      	b.n	142a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   142d0:	2000229c 	.word	0x2000229c
   142d4:	200000f8 	.word	0x200000f8
   142d8:	00023970 	.word	0x00023970
   142dc:	000239a4 	.word	0x000239a4
   142e0:	00023950 	.word	0x00023950
   142e4:	000239d8 	.word	0x000239d8
   142e8:	000239a8 	.word	0x000239a8

000142ec <d_make_comp>:
   142ec:	b470      	push	{r4, r5, r6}
   142ee:	1e4c      	subs	r4, r1, #1
   142f0:	2c4c      	cmp	r4, #76	; 0x4c
   142f2:	d82d      	bhi.n	14350 <d_make_comp+0x64>
   142f4:	e8df f004 	tbb	[pc, r4]
   142f8:	3c3c3c3c 	.word	0x3c3c3c3c
   142fc:	2c2c2c2c 	.word	0x2c2c2c2c
   14300:	273c2727 	.word	0x273c2727
   14304:	27272727 	.word	0x27272727
   14308:	27272727 	.word	0x27272727
   1430c:	2c272727 	.word	0x2c272727
   14310:	28282828 	.word	0x28282828
   14314:	28282828 	.word	0x28282828
   14318:	2727273c 	.word	0x2727273c
   1431c:	272c2727 	.word	0x272c2727
   14320:	2c3c3e28 	.word	0x2c3c3e28
   14324:	3e28283c 	.word	0x3e28283c
   14328:	27272c2c 	.word	0x27272c2c
   1432c:	3c3c3c27 	.word	0x3c3c3c27
   14330:	3c273c3c 	.word	0x3c273c3c
   14334:	2c3c273c 	.word	0x2c3c273c
   14338:	2727272c 	.word	0x2727272c
   1433c:	272c2c2c 	.word	0x272c2c2c
   14340:	283c2727 	.word	0x283c2727
   14344:	3c          	.byte	0x3c
   14345:	00          	.byte	0x00
   14346:	b11a      	cbz	r2, 14350 <d_make_comp+0x64>
   14348:	6944      	ldr	r4, [r0, #20]
   1434a:	6985      	ldr	r5, [r0, #24]
   1434c:	42ac      	cmp	r4, r5
   1434e:	db02      	blt.n	14356 <d_make_comp+0x6a>
   14350:	2000      	movs	r0, #0
   14352:	bc70      	pop	{r4, r5, r6}
   14354:	4770      	bx	lr
   14356:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1435a:	6906      	ldr	r6, [r0, #16]
   1435c:	00ad      	lsls	r5, r5, #2
   1435e:	3401      	adds	r4, #1
   14360:	6144      	str	r4, [r0, #20]
   14362:	1970      	adds	r0, r6, r5
   14364:	d0f5      	beq.n	14352 <d_make_comp+0x66>
   14366:	5571      	strb	r1, [r6, r5]
   14368:	6042      	str	r2, [r0, #4]
   1436a:	6083      	str	r3, [r0, #8]
   1436c:	bc70      	pop	{r4, r5, r6}
   1436e:	4770      	bx	lr
   14370:	2a00      	cmp	r2, #0
   14372:	d0ed      	beq.n	14350 <d_make_comp+0x64>
   14374:	2b00      	cmp	r3, #0
   14376:	d0eb      	beq.n	14350 <d_make_comp+0x64>
   14378:	6944      	ldr	r4, [r0, #20]
   1437a:	6985      	ldr	r5, [r0, #24]
   1437c:	42ac      	cmp	r4, r5
   1437e:	dae7      	bge.n	14350 <d_make_comp+0x64>
   14380:	e7e9      	b.n	14356 <d_make_comp+0x6a>
   14382:	bf00      	nop

00014384 <d_cv_qualifiers>:
   14384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14388:	68c3      	ldr	r3, [r0, #12]
   1438a:	f1b2 0a00 	subs.w	sl, r2, #0
   1438e:	4604      	mov	r4, r0
   14390:	460e      	mov	r6, r1
   14392:	781a      	ldrb	r2, [r3, #0]
   14394:	bf15      	itete	ne
   14396:	f04f 091e 	movne.w	r9, #30
   1439a:	f04f 091b 	moveq.w	r9, #27
   1439e:	f04f 081d 	movne.w	r8, #29
   143a2:	f04f 081a 	moveq.w	r8, #26
   143a6:	bf14      	ite	ne
   143a8:	271c      	movne	r7, #28
   143aa:	2719      	moveq	r7, #25
   143ac:	460d      	mov	r5, r1
   143ae:	e018      	b.n	143e2 <d_cv_qualifiers+0x5e>
   143b0:	2a56      	cmp	r2, #86	; 0x56
   143b2:	d01f      	beq.n	143f4 <d_cv_qualifiers+0x70>
   143b4:	2a4b      	cmp	r2, #75	; 0x4b
   143b6:	d024      	beq.n	14402 <d_cv_qualifiers+0x7e>
   143b8:	2a44      	cmp	r2, #68	; 0x44
   143ba:	d12d      	bne.n	14418 <d_cv_qualifiers+0x94>
   143bc:	785a      	ldrb	r2, [r3, #1]
   143be:	2a78      	cmp	r2, #120	; 0x78
   143c0:	d127      	bne.n	14412 <d_cv_qualifiers+0x8e>
   143c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   143c4:	3302      	adds	r3, #2
   143c6:	3211      	adds	r2, #17
   143c8:	60e3      	str	r3, [r4, #12]
   143ca:	6322      	str	r2, [r4, #48]	; 0x30
   143cc:	214c      	movs	r1, #76	; 0x4c
   143ce:	2300      	movs	r3, #0
   143d0:	461a      	mov	r2, r3
   143d2:	4620      	mov	r0, r4
   143d4:	f7ff ff8a 	bl	142ec <d_make_comp>
   143d8:	6028      	str	r0, [r5, #0]
   143da:	b1c8      	cbz	r0, 14410 <d_cv_qualifiers+0x8c>
   143dc:	68e3      	ldr	r3, [r4, #12]
   143de:	781a      	ldrb	r2, [r3, #0]
   143e0:	1d05      	adds	r5, r0, #4
   143e2:	2a72      	cmp	r2, #114	; 0x72
   143e4:	d1e4      	bne.n	143b0 <d_cv_qualifiers+0x2c>
   143e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   143e8:	3301      	adds	r3, #1
   143ea:	3209      	adds	r2, #9
   143ec:	60e3      	str	r3, [r4, #12]
   143ee:	6322      	str	r2, [r4, #48]	; 0x30
   143f0:	4639      	mov	r1, r7
   143f2:	e7ec      	b.n	143ce <d_cv_qualifiers+0x4a>
   143f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   143f6:	3301      	adds	r3, #1
   143f8:	3209      	adds	r2, #9
   143fa:	60e3      	str	r3, [r4, #12]
   143fc:	6322      	str	r2, [r4, #48]	; 0x30
   143fe:	4641      	mov	r1, r8
   14400:	e7e5      	b.n	143ce <d_cv_qualifiers+0x4a>
   14402:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14404:	3301      	adds	r3, #1
   14406:	3206      	adds	r2, #6
   14408:	60e3      	str	r3, [r4, #12]
   1440a:	6322      	str	r2, [r4, #48]	; 0x30
   1440c:	4649      	mov	r1, r9
   1440e:	e7de      	b.n	143ce <d_cv_qualifiers+0x4a>
   14410:	4605      	mov	r5, r0
   14412:	4628      	mov	r0, r5
   14414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14418:	f1ba 0f00 	cmp.w	sl, #0
   1441c:	d1f9      	bne.n	14412 <d_cv_qualifiers+0x8e>
   1441e:	2a46      	cmp	r2, #70	; 0x46
   14420:	d1f7      	bne.n	14412 <d_cv_qualifiers+0x8e>
   14422:	42b5      	cmp	r5, r6
   14424:	d0f5      	beq.n	14412 <d_cv_qualifiers+0x8e>
   14426:	201d      	movs	r0, #29
   14428:	211e      	movs	r1, #30
   1442a:	221c      	movs	r2, #28
   1442c:	e007      	b.n	1443e <d_cv_qualifiers+0xba>
   1442e:	2b1b      	cmp	r3, #27
   14430:	d00b      	beq.n	1444a <d_cv_qualifiers+0xc6>
   14432:	2b19      	cmp	r3, #25
   14434:	d100      	bne.n	14438 <d_cv_qualifiers+0xb4>
   14436:	7032      	strb	r2, [r6, #0]
   14438:	3604      	adds	r6, #4
   1443a:	42b5      	cmp	r5, r6
   1443c:	d0e9      	beq.n	14412 <d_cv_qualifiers+0x8e>
   1443e:	6836      	ldr	r6, [r6, #0]
   14440:	7833      	ldrb	r3, [r6, #0]
   14442:	2b1a      	cmp	r3, #26
   14444:	d1f3      	bne.n	1442e <d_cv_qualifiers+0xaa>
   14446:	7030      	strb	r0, [r6, #0]
   14448:	e7f6      	b.n	14438 <d_cv_qualifiers+0xb4>
   1444a:	7031      	strb	r1, [r6, #0]
   1444c:	e7f4      	b.n	14438 <d_cv_qualifiers+0xb4>
   1444e:	bf00      	nop

00014450 <d_ref_qualifier>:
   14450:	b410      	push	{r4}
   14452:	68c3      	ldr	r3, [r0, #12]
   14454:	781c      	ldrb	r4, [r3, #0]
   14456:	2c52      	cmp	r4, #82	; 0x52
   14458:	460a      	mov	r2, r1
   1445a:	d00f      	beq.n	1447c <d_ref_qualifier+0x2c>
   1445c:	2c4f      	cmp	r4, #79	; 0x4f
   1445e:	d003      	beq.n	14468 <d_ref_qualifier+0x18>
   14460:	4608      	mov	r0, r1
   14462:	f85d 4b04 	ldr.w	r4, [sp], #4
   14466:	4770      	bx	lr
   14468:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1446a:	3103      	adds	r1, #3
   1446c:	6301      	str	r1, [r0, #48]	; 0x30
   1446e:	2120      	movs	r1, #32
   14470:	3301      	adds	r3, #1
   14472:	60c3      	str	r3, [r0, #12]
   14474:	f85d 4b04 	ldr.w	r4, [sp], #4
   14478:	2300      	movs	r3, #0
   1447a:	e737      	b.n	142ec <d_make_comp>
   1447c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1447e:	3102      	adds	r1, #2
   14480:	6301      	str	r1, [r0, #48]	; 0x30
   14482:	211f      	movs	r1, #31
   14484:	e7f4      	b.n	14470 <d_ref_qualifier+0x20>
   14486:	bf00      	nop

00014488 <d_count_templates_scopes>:
   14488:	2a00      	cmp	r2, #0
   1448a:	d04d      	beq.n	14528 <d_count_templates_scopes+0xa0>
   1448c:	b570      	push	{r4, r5, r6, lr}
   1448e:	4605      	mov	r5, r0
   14490:	460e      	mov	r6, r1
   14492:	4614      	mov	r4, r2
   14494:	7823      	ldrb	r3, [r4, #0]
   14496:	3b01      	subs	r3, #1
   14498:	2b4c      	cmp	r3, #76	; 0x4c
   1449a:	d82b      	bhi.n	144f4 <d_count_templates_scopes+0x6c>
   1449c:	e8df f003 	tbb	[pc, r3]
   144a0:	3f363636 	.word	0x3f363636
   144a4:	27272a2a 	.word	0x27272a2a
   144a8:	36363636 	.word	0x36363636
   144ac:	36363636 	.word	0x36363636
   144b0:	36363636 	.word	0x36363636
   144b4:	2a363636 	.word	0x2a363636
   144b8:	36363636 	.word	0x36363636
   144bc:	36363636 	.word	0x36363636
   144c0:	2f2f3636 	.word	0x2f2f3636
   144c4:	362a3636 	.word	0x362a3636
   144c8:	2b363636 	.word	0x2b363636
   144cc:	36363636 	.word	0x36363636
   144d0:	3636272a 	.word	0x3636272a
   144d4:	36363636 	.word	0x36363636
   144d8:	36363636 	.word	0x36363636
   144dc:	2a363636 	.word	0x2a363636
   144e0:	2b2b362a 	.word	0x2b2b362a
   144e4:	362a2b2b 	.word	0x362a2b2b
   144e8:	36363636 	.word	0x36363636
   144ec:	36          	.byte	0x36
   144ed:	00          	.byte	0x00
   144ee:	68a4      	ldr	r4, [r4, #8]
   144f0:	2c00      	cmp	r4, #0
   144f2:	d1cf      	bne.n	14494 <d_count_templates_scopes+0xc>
   144f4:	bd70      	pop	{r4, r5, r6, pc}
   144f6:	6864      	ldr	r4, [r4, #4]
   144f8:	2c00      	cmp	r4, #0
   144fa:	d1cb      	bne.n	14494 <d_count_templates_scopes+0xc>
   144fc:	e7fa      	b.n	144f4 <d_count_templates_scopes+0x6c>
   144fe:	6862      	ldr	r2, [r4, #4]
   14500:	7813      	ldrb	r3, [r2, #0]
   14502:	2b05      	cmp	r3, #5
   14504:	d103      	bne.n	1450e <d_count_templates_scopes+0x86>
   14506:	6833      	ldr	r3, [r6, #0]
   14508:	3301      	adds	r3, #1
   1450a:	6033      	str	r3, [r6, #0]
   1450c:	6862      	ldr	r2, [r4, #4]
   1450e:	4631      	mov	r1, r6
   14510:	4628      	mov	r0, r5
   14512:	f7ff ffb9 	bl	14488 <d_count_templates_scopes>
   14516:	68a4      	ldr	r4, [r4, #8]
   14518:	2c00      	cmp	r4, #0
   1451a:	d1bb      	bne.n	14494 <d_count_templates_scopes+0xc>
   1451c:	e7ea      	b.n	144f4 <d_count_templates_scopes+0x6c>
   1451e:	682b      	ldr	r3, [r5, #0]
   14520:	3301      	adds	r3, #1
   14522:	602b      	str	r3, [r5, #0]
   14524:	6862      	ldr	r2, [r4, #4]
   14526:	e7f2      	b.n	1450e <d_count_templates_scopes+0x86>
   14528:	4770      	bx	lr
   1452a:	bf00      	nop

0001452c <d_append_buffer>:
   1452c:	b37a      	cbz	r2, 1458e <d_append_buffer+0x62>
   1452e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14532:	460d      	mov	r5, r1
   14534:	4604      	mov	r4, r0
   14536:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1453a:	18af      	adds	r7, r5, r2
   1453c:	f04f 0800 	mov.w	r8, #0
   14540:	e009      	b.n	14556 <d_append_buffer+0x2a>
   14542:	460b      	mov	r3, r1
   14544:	42bd      	cmp	r5, r7
   14546:	f101 0101 	add.w	r1, r1, #1
   1454a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1454e:	54e6      	strb	r6, [r4, r3]
   14550:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14554:	d019      	beq.n	1458a <d_append_buffer+0x5e>
   14556:	29ff      	cmp	r1, #255	; 0xff
   14558:	f815 6b01 	ldrb.w	r6, [r5], #1
   1455c:	d1f1      	bne.n	14542 <d_append_buffer+0x16>
   1455e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14562:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14566:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1456a:	4620      	mov	r0, r4
   1456c:	4798      	blx	r3
   1456e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14572:	3301      	adds	r3, #1
   14574:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14578:	2300      	movs	r3, #0
   1457a:	2101      	movs	r1, #1
   1457c:	42bd      	cmp	r5, r7
   1457e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14582:	54e6      	strb	r6, [r4, r3]
   14584:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14588:	d1e5      	bne.n	14556 <d_append_buffer+0x2a>
   1458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1458e:	4770      	bx	lr

00014590 <d_number.isra.0>:
   14590:	b470      	push	{r4, r5, r6}
   14592:	6802      	ldr	r2, [r0, #0]
   14594:	7811      	ldrb	r1, [r2, #0]
   14596:	296e      	cmp	r1, #110	; 0x6e
   14598:	d018      	beq.n	145cc <d_number.isra.0+0x3c>
   1459a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1459e:	2b09      	cmp	r3, #9
   145a0:	d81e      	bhi.n	145e0 <d_number.isra.0+0x50>
   145a2:	2600      	movs	r6, #0
   145a4:	2300      	movs	r3, #0
   145a6:	3201      	adds	r2, #1
   145a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   145ac:	6002      	str	r2, [r0, #0]
   145ae:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   145b2:	7811      	ldrb	r1, [r2, #0]
   145b4:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   145b8:	2d09      	cmp	r5, #9
   145ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   145be:	d9f2      	bls.n	145a6 <d_number.isra.0+0x16>
   145c0:	b10e      	cbz	r6, 145c6 <d_number.isra.0+0x36>
   145c2:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   145c6:	4618      	mov	r0, r3
   145c8:	bc70      	pop	{r4, r5, r6}
   145ca:	4770      	bx	lr
   145cc:	1c53      	adds	r3, r2, #1
   145ce:	6003      	str	r3, [r0, #0]
   145d0:	7851      	ldrb	r1, [r2, #1]
   145d2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   145d6:	2a09      	cmp	r2, #9
   145d8:	d802      	bhi.n	145e0 <d_number.isra.0+0x50>
   145da:	461a      	mov	r2, r3
   145dc:	2601      	movs	r6, #1
   145de:	e7e1      	b.n	145a4 <d_number.isra.0+0x14>
   145e0:	2300      	movs	r3, #0
   145e2:	e7f0      	b.n	145c6 <d_number.isra.0+0x36>

000145e4 <d_number_component>:
   145e4:	6943      	ldr	r3, [r0, #20]
   145e6:	6982      	ldr	r2, [r0, #24]
   145e8:	4293      	cmp	r3, r2
   145ea:	b510      	push	{r4, lr}
   145ec:	da0f      	bge.n	1460e <d_number_component+0x2a>
   145ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   145f2:	6901      	ldr	r1, [r0, #16]
   145f4:	0092      	lsls	r2, r2, #2
   145f6:	3301      	adds	r3, #1
   145f8:	188c      	adds	r4, r1, r2
   145fa:	6143      	str	r3, [r0, #20]
   145fc:	d005      	beq.n	1460a <d_number_component+0x26>
   145fe:	2341      	movs	r3, #65	; 0x41
   14600:	300c      	adds	r0, #12
   14602:	548b      	strb	r3, [r1, r2]
   14604:	f7ff ffc4 	bl	14590 <d_number.isra.0>
   14608:	6060      	str	r0, [r4, #4]
   1460a:	4620      	mov	r0, r4
   1460c:	bd10      	pop	{r4, pc}
   1460e:	2400      	movs	r4, #0
   14610:	4620      	mov	r0, r4
   14612:	bd10      	pop	{r4, pc}

00014614 <d_compact_number>:
   14614:	b510      	push	{r4, lr}
   14616:	68c3      	ldr	r3, [r0, #12]
   14618:	781a      	ldrb	r2, [r3, #0]
   1461a:	2a5f      	cmp	r2, #95	; 0x5f
   1461c:	4604      	mov	r4, r0
   1461e:	d00d      	beq.n	1463c <d_compact_number+0x28>
   14620:	2a6e      	cmp	r2, #110	; 0x6e
   14622:	d00f      	beq.n	14644 <d_compact_number+0x30>
   14624:	300c      	adds	r0, #12
   14626:	f7ff ffb3 	bl	14590 <d_number.isra.0>
   1462a:	3001      	adds	r0, #1
   1462c:	d40a      	bmi.n	14644 <d_compact_number+0x30>
   1462e:	68e3      	ldr	r3, [r4, #12]
   14630:	781a      	ldrb	r2, [r3, #0]
   14632:	2a5f      	cmp	r2, #95	; 0x5f
   14634:	d106      	bne.n	14644 <d_compact_number+0x30>
   14636:	3301      	adds	r3, #1
   14638:	60e3      	str	r3, [r4, #12]
   1463a:	bd10      	pop	{r4, pc}
   1463c:	3301      	adds	r3, #1
   1463e:	2000      	movs	r0, #0
   14640:	60e3      	str	r3, [r4, #12]
   14642:	bd10      	pop	{r4, pc}
   14644:	f04f 30ff 	mov.w	r0, #4294967295
   14648:	bd10      	pop	{r4, pc}
   1464a:	bf00      	nop

0001464c <d_template_param>:
   1464c:	b538      	push	{r3, r4, r5, lr}
   1464e:	68c3      	ldr	r3, [r0, #12]
   14650:	781a      	ldrb	r2, [r3, #0]
   14652:	2a54      	cmp	r2, #84	; 0x54
   14654:	d001      	beq.n	1465a <d_template_param+0xe>
   14656:	2000      	movs	r0, #0
   14658:	bd38      	pop	{r3, r4, r5, pc}
   1465a:	3301      	adds	r3, #1
   1465c:	60c3      	str	r3, [r0, #12]
   1465e:	4604      	mov	r4, r0
   14660:	f7ff ffd8 	bl	14614 <d_compact_number>
   14664:	1e05      	subs	r5, r0, #0
   14666:	dbf6      	blt.n	14656 <d_template_param+0xa>
   14668:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1466a:	6963      	ldr	r3, [r4, #20]
   1466c:	69a1      	ldr	r1, [r4, #24]
   1466e:	3201      	adds	r2, #1
   14670:	428b      	cmp	r3, r1
   14672:	62a2      	str	r2, [r4, #40]	; 0x28
   14674:	daef      	bge.n	14656 <d_template_param+0xa>
   14676:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1467a:	6921      	ldr	r1, [r4, #16]
   1467c:	0092      	lsls	r2, r2, #2
   1467e:	3301      	adds	r3, #1
   14680:	1888      	adds	r0, r1, r2
   14682:	6163      	str	r3, [r4, #20]
   14684:	d002      	beq.n	1468c <d_template_param+0x40>
   14686:	2305      	movs	r3, #5
   14688:	548b      	strb	r3, [r1, r2]
   1468a:	6045      	str	r5, [r0, #4]
   1468c:	bd38      	pop	{r3, r4, r5, pc}
   1468e:	bf00      	nop

00014690 <d_source_name>:
   14690:	b570      	push	{r4, r5, r6, lr}
   14692:	4604      	mov	r4, r0
   14694:	300c      	adds	r0, #12
   14696:	f7ff ff7b 	bl	14590 <d_number.isra.0>
   1469a:	1e06      	subs	r6, r0, #0
   1469c:	dd4d      	ble.n	1473a <d_source_name+0xaa>
   1469e:	68e5      	ldr	r5, [r4, #12]
   146a0:	6863      	ldr	r3, [r4, #4]
   146a2:	1b5b      	subs	r3, r3, r5
   146a4:	429e      	cmp	r6, r3
   146a6:	dc2b      	bgt.n	14700 <d_source_name+0x70>
   146a8:	68a2      	ldr	r2, [r4, #8]
   146aa:	19ab      	adds	r3, r5, r6
   146ac:	0752      	lsls	r2, r2, #29
   146ae:	60e3      	str	r3, [r4, #12]
   146b0:	d504      	bpl.n	146bc <d_source_name+0x2c>
   146b2:	5daa      	ldrb	r2, [r5, r6]
   146b4:	2a24      	cmp	r2, #36	; 0x24
   146b6:	bf04      	itt	eq
   146b8:	3301      	addeq	r3, #1
   146ba:	60e3      	streq	r3, [r4, #12]
   146bc:	2e09      	cmp	r6, #9
   146be:	dd0c      	ble.n	146da <d_source_name+0x4a>
   146c0:	2208      	movs	r2, #8
   146c2:	491f      	ldr	r1, [pc, #124]	; (14740 <d_source_name+0xb0>)
   146c4:	4628      	mov	r0, r5
   146c6:	f009 fcbb 	bl	1e040 <memcmp>
   146ca:	b930      	cbnz	r0, 146da <d_source_name+0x4a>
   146cc:	7a2b      	ldrb	r3, [r5, #8]
   146ce:	2b2e      	cmp	r3, #46	; 0x2e
   146d0:	d019      	beq.n	14706 <d_source_name+0x76>
   146d2:	2b5f      	cmp	r3, #95	; 0x5f
   146d4:	d017      	beq.n	14706 <d_source_name+0x76>
   146d6:	2b24      	cmp	r3, #36	; 0x24
   146d8:	d015      	beq.n	14706 <d_source_name+0x76>
   146da:	6963      	ldr	r3, [r4, #20]
   146dc:	69a2      	ldr	r2, [r4, #24]
   146de:	4293      	cmp	r3, r2
   146e0:	da0e      	bge.n	14700 <d_source_name+0x70>
   146e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   146e6:	6921      	ldr	r1, [r4, #16]
   146e8:	0092      	lsls	r2, r2, #2
   146ea:	3301      	adds	r3, #1
   146ec:	1888      	adds	r0, r1, r2
   146ee:	6163      	str	r3, [r4, #20]
   146f0:	d006      	beq.n	14700 <d_source_name+0x70>
   146f2:	b12d      	cbz	r5, 14700 <d_source_name+0x70>
   146f4:	2300      	movs	r3, #0
   146f6:	548b      	strb	r3, [r1, r2]
   146f8:	6045      	str	r5, [r0, #4]
   146fa:	6086      	str	r6, [r0, #8]
   146fc:	62e0      	str	r0, [r4, #44]	; 0x2c
   146fe:	bd70      	pop	{r4, r5, r6, pc}
   14700:	2000      	movs	r0, #0
   14702:	62e0      	str	r0, [r4, #44]	; 0x2c
   14704:	bd70      	pop	{r4, r5, r6, pc}
   14706:	7a6b      	ldrb	r3, [r5, #9]
   14708:	2b4e      	cmp	r3, #78	; 0x4e
   1470a:	d1e6      	bne.n	146da <d_source_name+0x4a>
   1470c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1470e:	6962      	ldr	r2, [r4, #20]
   14710:	69a1      	ldr	r1, [r4, #24]
   14712:	3316      	adds	r3, #22
   14714:	1b9e      	subs	r6, r3, r6
   14716:	428a      	cmp	r2, r1
   14718:	6326      	str	r6, [r4, #48]	; 0x30
   1471a:	daf1      	bge.n	14700 <d_source_name+0x70>
   1471c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14720:	6921      	ldr	r1, [r4, #16]
   14722:	009b      	lsls	r3, r3, #2
   14724:	3201      	adds	r2, #1
   14726:	18c8      	adds	r0, r1, r3
   14728:	6162      	str	r2, [r4, #20]
   1472a:	d0ea      	beq.n	14702 <d_source_name+0x72>
   1472c:	2500      	movs	r5, #0
   1472e:	54cd      	strb	r5, [r1, r3]
   14730:	4a04      	ldr	r2, [pc, #16]	; (14744 <d_source_name+0xb4>)
   14732:	6042      	str	r2, [r0, #4]
   14734:	2315      	movs	r3, #21
   14736:	6083      	str	r3, [r0, #8]
   14738:	e7e3      	b.n	14702 <d_source_name+0x72>
   1473a:	2000      	movs	r0, #0
   1473c:	bd70      	pop	{r4, r5, r6, pc}
   1473e:	bf00      	nop
   14740:	0002417c 	.word	0x0002417c
   14744:	00024188 	.word	0x00024188

00014748 <d_abi_tags>:
   14748:	b570      	push	{r4, r5, r6, lr}
   1474a:	68c3      	ldr	r3, [r0, #12]
   1474c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1474e:	781a      	ldrb	r2, [r3, #0]
   14750:	2a42      	cmp	r2, #66	; 0x42
   14752:	4604      	mov	r4, r0
   14754:	460d      	mov	r5, r1
   14756:	d10f      	bne.n	14778 <d_abi_tags+0x30>
   14758:	3301      	adds	r3, #1
   1475a:	60e3      	str	r3, [r4, #12]
   1475c:	4620      	mov	r0, r4
   1475e:	f7ff ff97 	bl	14690 <d_source_name>
   14762:	462a      	mov	r2, r5
   14764:	4603      	mov	r3, r0
   14766:	214b      	movs	r1, #75	; 0x4b
   14768:	4620      	mov	r0, r4
   1476a:	f7ff fdbf 	bl	142ec <d_make_comp>
   1476e:	68e3      	ldr	r3, [r4, #12]
   14770:	781a      	ldrb	r2, [r3, #0]
   14772:	2a42      	cmp	r2, #66	; 0x42
   14774:	4605      	mov	r5, r0
   14776:	d0ef      	beq.n	14758 <d_abi_tags+0x10>
   14778:	62e6      	str	r6, [r4, #44]	; 0x2c
   1477a:	4628      	mov	r0, r5
   1477c:	bd70      	pop	{r4, r5, r6, pc}
   1477e:	bf00      	nop

00014780 <d_substitution>:
   14780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14784:	4605      	mov	r5, r0
   14786:	68c0      	ldr	r0, [r0, #12]
   14788:	7803      	ldrb	r3, [r0, #0]
   1478a:	2b53      	cmp	r3, #83	; 0x53
   1478c:	d002      	beq.n	14794 <d_substitution+0x14>
   1478e:	2000      	movs	r0, #0
   14790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14794:	1c43      	adds	r3, r0, #1
   14796:	60eb      	str	r3, [r5, #12]
   14798:	7842      	ldrb	r2, [r0, #1]
   1479a:	b1a2      	cbz	r2, 147c6 <d_substitution+0x46>
   1479c:	1c83      	adds	r3, r0, #2
   1479e:	60eb      	str	r3, [r5, #12]
   147a0:	7842      	ldrb	r2, [r0, #1]
   147a2:	2a5f      	cmp	r2, #95	; 0x5f
   147a4:	d15a      	bne.n	1485c <d_substitution+0xdc>
   147a6:	2300      	movs	r3, #0
   147a8:	6a2a      	ldr	r2, [r5, #32]
   147aa:	4293      	cmp	r3, r2
   147ac:	d2ef      	bcs.n	1478e <d_substitution+0xe>
   147ae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   147b0:	69e9      	ldr	r1, [r5, #28]
   147b2:	3201      	adds	r2, #1
   147b4:	62aa      	str	r2, [r5, #40]	; 0x28
   147b6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   147ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   147be:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   147c2:	2b19      	cmp	r3, #25
   147c4:	d94f      	bls.n	14866 <d_substitution+0xe6>
   147c6:	68ab      	ldr	r3, [r5, #8]
   147c8:	f003 0308 	and.w	r3, r3, #8
   147cc:	2b00      	cmp	r3, #0
   147ce:	bf14      	ite	ne
   147d0:	2401      	movne	r4, #1
   147d2:	2400      	moveq	r4, #0
   147d4:	d101      	bne.n	147da <d_substitution+0x5a>
   147d6:	2900      	cmp	r1, #0
   147d8:	d169      	bne.n	148ae <d_substitution+0x12e>
   147da:	4b46      	ldr	r3, [pc, #280]	; (148f4 <d_substitution+0x174>)
   147dc:	2174      	movs	r1, #116	; 0x74
   147de:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   147e2:	e003      	b.n	147ec <d_substitution+0x6c>
   147e4:	331c      	adds	r3, #28
   147e6:	4283      	cmp	r3, r0
   147e8:	d2d1      	bcs.n	1478e <d_substitution+0xe>
   147ea:	7819      	ldrb	r1, [r3, #0]
   147ec:	428a      	cmp	r2, r1
   147ee:	d1f9      	bne.n	147e4 <d_substitution+0x64>
   147f0:	695e      	ldr	r6, [r3, #20]
   147f2:	2e00      	cmp	r6, #0
   147f4:	d07b      	beq.n	148ee <d_substitution+0x16e>
   147f6:	696a      	ldr	r2, [r5, #20]
   147f8:	69a9      	ldr	r1, [r5, #24]
   147fa:	428a      	cmp	r2, r1
   147fc:	da63      	bge.n	148c6 <d_substitution+0x146>
   147fe:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14802:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14806:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1480a:	00bf      	lsls	r7, r7, #2
   1480c:	3201      	adds	r2, #1
   1480e:	eb1e 0007 	adds.w	r0, lr, r7
   14812:	616a      	str	r2, [r5, #20]
   14814:	d006      	beq.n	14824 <d_substitution+0xa4>
   14816:	f04f 0c18 	mov.w	ip, #24
   1481a:	f80e c007 	strb.w	ip, [lr, r7]
   1481e:	6046      	str	r6, [r0, #4]
   14820:	f8c0 8008 	str.w	r8, [r0, #8]
   14824:	62e8      	str	r0, [r5, #44]	; 0x2c
   14826:	2c00      	cmp	r4, #0
   14828:	d04a      	beq.n	148c0 <d_substitution+0x140>
   1482a:	68de      	ldr	r6, [r3, #12]
   1482c:	691c      	ldr	r4, [r3, #16]
   1482e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14830:	4291      	cmp	r1, r2
   14832:	4423      	add	r3, r4
   14834:	632b      	str	r3, [r5, #48]	; 0x30
   14836:	dd41      	ble.n	148bc <d_substitution+0x13c>
   14838:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1483c:	6929      	ldr	r1, [r5, #16]
   1483e:	009b      	lsls	r3, r3, #2
   14840:	3201      	adds	r2, #1
   14842:	18c8      	adds	r0, r1, r3
   14844:	616a      	str	r2, [r5, #20]
   14846:	d003      	beq.n	14850 <d_substitution+0xd0>
   14848:	2218      	movs	r2, #24
   1484a:	54ca      	strb	r2, [r1, r3]
   1484c:	6046      	str	r6, [r0, #4]
   1484e:	6084      	str	r4, [r0, #8]
   14850:	68eb      	ldr	r3, [r5, #12]
   14852:	781b      	ldrb	r3, [r3, #0]
   14854:	2b42      	cmp	r3, #66	; 0x42
   14856:	d038      	beq.n	148ca <d_substitution+0x14a>
   14858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1485c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14860:	b2e3      	uxtb	r3, r4
   14862:	2b09      	cmp	r3, #9
   14864:	d8ab      	bhi.n	147be <d_substitution+0x3e>
   14866:	2100      	movs	r1, #0
   14868:	e00d      	b.n	14886 <d_substitution+0x106>
   1486a:	3b30      	subs	r3, #48	; 0x30
   1486c:	4299      	cmp	r1, r3
   1486e:	d88e      	bhi.n	1478e <d_substitution+0xe>
   14870:	68e9      	ldr	r1, [r5, #12]
   14872:	780a      	ldrb	r2, [r1, #0]
   14874:	1c48      	adds	r0, r1, #1
   14876:	b11a      	cbz	r2, 14880 <d_substitution+0x100>
   14878:	60e8      	str	r0, [r5, #12]
   1487a:	780a      	ldrb	r2, [r1, #0]
   1487c:	2a5f      	cmp	r2, #95	; 0x5f
   1487e:	d014      	beq.n	148aa <d_substitution+0x12a>
   14880:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14884:	4619      	mov	r1, r3
   14886:	b2e4      	uxtb	r4, r4
   14888:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1488c:	2c09      	cmp	r4, #9
   1488e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14892:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14896:	d9e8      	bls.n	1486a <d_substitution+0xea>
   14898:	2819      	cmp	r0, #25
   1489a:	f63f af78 	bhi.w	1478e <d_substitution+0xe>
   1489e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   148a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   148a6:	3b37      	subs	r3, #55	; 0x37
   148a8:	e7e0      	b.n	1486c <d_substitution+0xec>
   148aa:	3301      	adds	r3, #1
   148ac:	e77c      	b.n	147a8 <d_substitution+0x28>
   148ae:	68eb      	ldr	r3, [r5, #12]
   148b0:	781b      	ldrb	r3, [r3, #0]
   148b2:	3b43      	subs	r3, #67	; 0x43
   148b4:	2b01      	cmp	r3, #1
   148b6:	bf98      	it	ls
   148b8:	2401      	movls	r4, #1
   148ba:	e78e      	b.n	147da <d_substitution+0x5a>
   148bc:	2000      	movs	r0, #0
   148be:	e7c7      	b.n	14850 <d_substitution+0xd0>
   148c0:	685e      	ldr	r6, [r3, #4]
   148c2:	689c      	ldr	r4, [r3, #8]
   148c4:	e7b3      	b.n	1482e <d_substitution+0xae>
   148c6:	2000      	movs	r0, #0
   148c8:	e7ac      	b.n	14824 <d_substitution+0xa4>
   148ca:	4601      	mov	r1, r0
   148cc:	4628      	mov	r0, r5
   148ce:	f7ff ff3b 	bl	14748 <d_abi_tags>
   148d2:	2800      	cmp	r0, #0
   148d4:	f43f af5b 	beq.w	1478e <d_substitution+0xe>
   148d8:	6a2b      	ldr	r3, [r5, #32]
   148da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   148dc:	4293      	cmp	r3, r2
   148de:	dabb      	bge.n	14858 <d_substitution+0xd8>
   148e0:	69e9      	ldr	r1, [r5, #28]
   148e2:	1c5a      	adds	r2, r3, #1
   148e4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   148e8:	622a      	str	r2, [r5, #32]
   148ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148ee:	69a9      	ldr	r1, [r5, #24]
   148f0:	696a      	ldr	r2, [r5, #20]
   148f2:	e798      	b.n	14826 <d_substitution+0xa6>
   148f4:	000239e4 	.word	0x000239e4

000148f8 <d_call_offset>:
   148f8:	b538      	push	{r3, r4, r5, lr}
   148fa:	4604      	mov	r4, r0
   148fc:	b929      	cbnz	r1, 1490a <d_call_offset+0x12>
   148fe:	68c3      	ldr	r3, [r0, #12]
   14900:	781a      	ldrb	r2, [r3, #0]
   14902:	b132      	cbz	r2, 14912 <d_call_offset+0x1a>
   14904:	1c5a      	adds	r2, r3, #1
   14906:	60c2      	str	r2, [r0, #12]
   14908:	7819      	ldrb	r1, [r3, #0]
   1490a:	2968      	cmp	r1, #104	; 0x68
   1490c:	d019      	beq.n	14942 <d_call_offset+0x4a>
   1490e:	2976      	cmp	r1, #118	; 0x76
   14910:	d001      	beq.n	14916 <d_call_offset+0x1e>
   14912:	2000      	movs	r0, #0
   14914:	bd38      	pop	{r3, r4, r5, pc}
   14916:	f104 050c 	add.w	r5, r4, #12
   1491a:	4628      	mov	r0, r5
   1491c:	f7ff fe38 	bl	14590 <d_number.isra.0>
   14920:	68e3      	ldr	r3, [r4, #12]
   14922:	781a      	ldrb	r2, [r3, #0]
   14924:	2a5f      	cmp	r2, #95	; 0x5f
   14926:	d1f4      	bne.n	14912 <d_call_offset+0x1a>
   14928:	3301      	adds	r3, #1
   1492a:	60e3      	str	r3, [r4, #12]
   1492c:	4628      	mov	r0, r5
   1492e:	f7ff fe2f 	bl	14590 <d_number.isra.0>
   14932:	68e3      	ldr	r3, [r4, #12]
   14934:	781a      	ldrb	r2, [r3, #0]
   14936:	2a5f      	cmp	r2, #95	; 0x5f
   14938:	d1eb      	bne.n	14912 <d_call_offset+0x1a>
   1493a:	3301      	adds	r3, #1
   1493c:	60e3      	str	r3, [r4, #12]
   1493e:	2001      	movs	r0, #1
   14940:	bd38      	pop	{r3, r4, r5, pc}
   14942:	f104 000c 	add.w	r0, r4, #12
   14946:	f7ff fe23 	bl	14590 <d_number.isra.0>
   1494a:	e7f2      	b.n	14932 <d_call_offset+0x3a>

0001494c <d_lookup_template_argument.isra.6>:
   1494c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14950:	b19b      	cbz	r3, 1497a <d_lookup_template_argument.isra.6+0x2e>
   14952:	680a      	ldr	r2, [r1, #0]
   14954:	685b      	ldr	r3, [r3, #4]
   14956:	2a00      	cmp	r2, #0
   14958:	689b      	ldr	r3, [r3, #8]
   1495a:	db09      	blt.n	14970 <d_lookup_template_argument.isra.6+0x24>
   1495c:	b923      	cbnz	r3, 14968 <d_lookup_template_argument.isra.6+0x1c>
   1495e:	e007      	b.n	14970 <d_lookup_template_argument.isra.6+0x24>
   14960:	b142      	cbz	r2, 14974 <d_lookup_template_argument.isra.6+0x28>
   14962:	689b      	ldr	r3, [r3, #8]
   14964:	3a01      	subs	r2, #1
   14966:	b11b      	cbz	r3, 14970 <d_lookup_template_argument.isra.6+0x24>
   14968:	7819      	ldrb	r1, [r3, #0]
   1496a:	292f      	cmp	r1, #47	; 0x2f
   1496c:	d0f8      	beq.n	14960 <d_lookup_template_argument.isra.6+0x14>
   1496e:	2300      	movs	r3, #0
   14970:	4618      	mov	r0, r3
   14972:	4770      	bx	lr
   14974:	685b      	ldr	r3, [r3, #4]
   14976:	4618      	mov	r0, r3
   14978:	4770      	bx	lr
   1497a:	2201      	movs	r2, #1
   1497c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14980:	e7f6      	b.n	14970 <d_lookup_template_argument.isra.6+0x24>
   14982:	bf00      	nop

00014984 <d_find_pack>:
   14984:	2900      	cmp	r1, #0
   14986:	d041      	beq.n	14a0c <d_find_pack+0x88>
   14988:	b538      	push	{r3, r4, r5, lr}
   1498a:	4605      	mov	r5, r0
   1498c:	460c      	mov	r4, r1
   1498e:	7823      	ldrb	r3, [r4, #0]
   14990:	2b4b      	cmp	r3, #75	; 0x4b
   14992:	d827      	bhi.n	149e4 <d_find_pack+0x60>
   14994:	e8df f003 	tbb	[pc, r3]
   14998:	2626262e 	.word	0x2626262e
   1499c:	2b2e3026 	.word	0x2b2e3026
   149a0:	2626262b 	.word	0x2626262b
   149a4:	26262626 	.word	0x26262626
   149a8:	26262626 	.word	0x26262626
   149ac:	26262626 	.word	0x26262626
   149b0:	2626262e 	.word	0x2626262e
   149b4:	26262626 	.word	0x26262626
   149b8:	26262626 	.word	0x26262626
   149bc:	2e262626 	.word	0x2e262626
   149c0:	26262626 	.word	0x26262626
   149c4:	2626262e 	.word	0x2626262e
   149c8:	262b2e26 	.word	0x262b2e26
   149cc:	26262626 	.word	0x26262626
   149d0:	26262626 	.word	0x26262626
   149d4:	26262626 	.word	0x26262626
   149d8:	26262e2e 	.word	0x26262e2e
   149dc:	2e2e2e26 	.word	0x2e2e2e26
   149e0:	2e2e2626 	.word	0x2e2e2626
   149e4:	6861      	ldr	r1, [r4, #4]
   149e6:	4628      	mov	r0, r5
   149e8:	f7ff ffcc 	bl	14984 <d_find_pack>
   149ec:	b918      	cbnz	r0, 149f6 <d_find_pack+0x72>
   149ee:	68a4      	ldr	r4, [r4, #8]
   149f0:	2c00      	cmp	r4, #0
   149f2:	d1cc      	bne.n	1498e <d_find_pack+0xa>
   149f4:	2000      	movs	r0, #0
   149f6:	bd38      	pop	{r3, r4, r5, pc}
   149f8:	1d21      	adds	r1, r4, #4
   149fa:	4628      	mov	r0, r5
   149fc:	f7ff ffa6 	bl	1494c <d_lookup_template_argument.isra.6>
   14a00:	2800      	cmp	r0, #0
   14a02:	d0f7      	beq.n	149f4 <d_find_pack+0x70>
   14a04:	7803      	ldrb	r3, [r0, #0]
   14a06:	2b2f      	cmp	r3, #47	; 0x2f
   14a08:	d1f4      	bne.n	149f4 <d_find_pack+0x70>
   14a0a:	bd38      	pop	{r3, r4, r5, pc}
   14a0c:	2000      	movs	r0, #0
   14a0e:	4770      	bx	lr

00014a10 <d_growable_string_callback_adapter>:
   14a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a12:	4615      	mov	r5, r2
   14a14:	6852      	ldr	r2, [r2, #4]
   14a16:	68ac      	ldr	r4, [r5, #8]
   14a18:	1c4b      	adds	r3, r1, #1
   14a1a:	4413      	add	r3, r2
   14a1c:	42a3      	cmp	r3, r4
   14a1e:	b083      	sub	sp, #12
   14a20:	460e      	mov	r6, r1
   14a22:	4607      	mov	r7, r0
   14a24:	d813      	bhi.n	14a4e <d_growable_string_callback_adapter+0x3e>
   14a26:	68ec      	ldr	r4, [r5, #12]
   14a28:	b10c      	cbz	r4, 14a2e <d_growable_string_callback_adapter+0x1e>
   14a2a:	b003      	add	sp, #12
   14a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a2e:	e895 0009 	ldmia.w	r5, {r0, r3}
   14a32:	4632      	mov	r2, r6
   14a34:	4639      	mov	r1, r7
   14a36:	4418      	add	r0, r3
   14a38:	f009 fb32 	bl	1e0a0 <memcpy>
   14a3c:	682b      	ldr	r3, [r5, #0]
   14a3e:	686a      	ldr	r2, [r5, #4]
   14a40:	4433      	add	r3, r6
   14a42:	549c      	strb	r4, [r3, r2]
   14a44:	686b      	ldr	r3, [r5, #4]
   14a46:	441e      	add	r6, r3
   14a48:	606e      	str	r6, [r5, #4]
   14a4a:	b003      	add	sp, #12
   14a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a4e:	68ea      	ldr	r2, [r5, #12]
   14a50:	2a00      	cmp	r2, #0
   14a52:	d1ea      	bne.n	14a2a <d_growable_string_callback_adapter+0x1a>
   14a54:	b91c      	cbnz	r4, 14a5e <d_growable_string_callback_adapter+0x4e>
   14a56:	2b02      	cmp	r3, #2
   14a58:	f04f 0402 	mov.w	r4, #2
   14a5c:	d902      	bls.n	14a64 <d_growable_string_callback_adapter+0x54>
   14a5e:	0064      	lsls	r4, r4, #1
   14a60:	42a3      	cmp	r3, r4
   14a62:	d8fc      	bhi.n	14a5e <d_growable_string_callback_adapter+0x4e>
   14a64:	4621      	mov	r1, r4
   14a66:	6828      	ldr	r0, [r5, #0]
   14a68:	f009 fcaa 	bl	1e3c0 <realloc>
   14a6c:	b110      	cbz	r0, 14a74 <d_growable_string_callback_adapter+0x64>
   14a6e:	6028      	str	r0, [r5, #0]
   14a70:	60ac      	str	r4, [r5, #8]
   14a72:	e7d8      	b.n	14a26 <d_growable_string_callback_adapter+0x16>
   14a74:	9001      	str	r0, [sp, #4]
   14a76:	6828      	ldr	r0, [r5, #0]
   14a78:	f008 ffc0 	bl	1d9fc <free>
   14a7c:	9b01      	ldr	r3, [sp, #4]
   14a7e:	602b      	str	r3, [r5, #0]
   14a80:	2201      	movs	r2, #1
   14a82:	606b      	str	r3, [r5, #4]
   14a84:	60ab      	str	r3, [r5, #8]
   14a86:	60ea      	str	r2, [r5, #12]
   14a88:	e7cf      	b.n	14a2a <d_growable_string_callback_adapter+0x1a>
   14a8a:	bf00      	nop

00014a8c <d_append_num>:
   14a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a90:	b088      	sub	sp, #32
   14a92:	460a      	mov	r2, r1
   14a94:	4604      	mov	r4, r0
   14a96:	491b      	ldr	r1, [pc, #108]	; (14b04 <d_append_num+0x78>)
   14a98:	a801      	add	r0, sp, #4
   14a9a:	f009 fe9f 	bl	1e7dc <sprintf>
   14a9e:	a801      	add	r0, sp, #4
   14aa0:	f00a f84e 	bl	1eb40 <strlen>
   14aa4:	b350      	cbz	r0, 14afc <d_append_num+0x70>
   14aa6:	ad01      	add	r5, sp, #4
   14aa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14aac:	182f      	adds	r7, r5, r0
   14aae:	f04f 0800 	mov.w	r8, #0
   14ab2:	e009      	b.n	14ac8 <d_append_num+0x3c>
   14ab4:	460b      	mov	r3, r1
   14ab6:	42bd      	cmp	r5, r7
   14ab8:	f101 0101 	add.w	r1, r1, #1
   14abc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14ac0:	54e6      	strb	r6, [r4, r3]
   14ac2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14ac6:	d019      	beq.n	14afc <d_append_num+0x70>
   14ac8:	29ff      	cmp	r1, #255	; 0xff
   14aca:	f815 6b01 	ldrb.w	r6, [r5], #1
   14ace:	d1f1      	bne.n	14ab4 <d_append_num+0x28>
   14ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14ad4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14adc:	4620      	mov	r0, r4
   14ade:	4798      	blx	r3
   14ae0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14ae4:	3301      	adds	r3, #1
   14ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14aea:	2300      	movs	r3, #0
   14aec:	2101      	movs	r1, #1
   14aee:	42bd      	cmp	r5, r7
   14af0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14af4:	54e6      	strb	r6, [r4, r3]
   14af6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14afa:	d1e5      	bne.n	14ac8 <d_append_num+0x3c>
   14afc:	b008      	add	sp, #32
   14afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b02:	bf00      	nop
   14b04:	000241a0 	.word	0x000241a0

00014b08 <d_exprlist>:
   14b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b0c:	68c3      	ldr	r3, [r0, #12]
   14b0e:	781d      	ldrb	r5, [r3, #0]
   14b10:	b083      	sub	sp, #12
   14b12:	2200      	movs	r2, #0
   14b14:	428d      	cmp	r5, r1
   14b16:	4604      	mov	r4, r0
   14b18:	9201      	str	r2, [sp, #4]
   14b1a:	f000 81c6 	beq.w	14eaa <d_exprlist+0x3a2>
   14b1e:	4688      	mov	r8, r1
   14b20:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 14fc0 <d_exprlist+0x4b8>
   14b24:	ae01      	add	r6, sp, #4
   14b26:	e023      	b.n	14b70 <d_exprlist+0x68>
   14b28:	2a66      	cmp	r2, #102	; 0x66
   14b2a:	d04c      	beq.n	14bc6 <d_exprlist+0xbe>
   14b2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14b30:	2909      	cmp	r1, #9
   14b32:	f200 8217 	bhi.w	14f64 <d_exprlist+0x45c>
   14b36:	4620      	mov	r0, r4
   14b38:	f001 fb10 	bl	1615c <d_unqualified_name>
   14b3c:	4605      	mov	r5, r0
   14b3e:	2800      	cmp	r0, #0
   14b40:	f000 8170 	beq.w	14e24 <d_exprlist+0x31c>
   14b44:	68e3      	ldr	r3, [r4, #12]
   14b46:	781b      	ldrb	r3, [r3, #0]
   14b48:	2b49      	cmp	r3, #73	; 0x49
   14b4a:	f000 8092 	beq.w	14c72 <d_exprlist+0x16a>
   14b4e:	6367      	str	r7, [r4, #52]	; 0x34
   14b50:	462a      	mov	r2, r5
   14b52:	2300      	movs	r3, #0
   14b54:	212e      	movs	r1, #46	; 0x2e
   14b56:	4620      	mov	r0, r4
   14b58:	f7ff fbc8 	bl	142ec <d_make_comp>
   14b5c:	6030      	str	r0, [r6, #0]
   14b5e:	2800      	cmp	r0, #0
   14b60:	d05b      	beq.n	14c1a <d_exprlist+0x112>
   14b62:	68e3      	ldr	r3, [r4, #12]
   14b64:	781a      	ldrb	r2, [r3, #0]
   14b66:	4542      	cmp	r2, r8
   14b68:	f100 0608 	add.w	r6, r0, #8
   14b6c:	f000 8107 	beq.w	14d7e <d_exprlist+0x276>
   14b70:	2501      	movs	r5, #1
   14b72:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14b74:	6365      	str	r5, [r4, #52]	; 0x34
   14b76:	781a      	ldrb	r2, [r3, #0]
   14b78:	2a4c      	cmp	r2, #76	; 0x4c
   14b7a:	d047      	beq.n	14c0c <d_exprlist+0x104>
   14b7c:	2a54      	cmp	r2, #84	; 0x54
   14b7e:	d051      	beq.n	14c24 <d_exprlist+0x11c>
   14b80:	2a73      	cmp	r2, #115	; 0x73
   14b82:	d1d1      	bne.n	14b28 <d_exprlist+0x20>
   14b84:	785a      	ldrb	r2, [r3, #1]
   14b86:	2a72      	cmp	r2, #114	; 0x72
   14b88:	f000 80e2 	beq.w	14d50 <d_exprlist+0x248>
   14b8c:	2a70      	cmp	r2, #112	; 0x70
   14b8e:	f000 80fd 	beq.w	14d8c <d_exprlist+0x284>
   14b92:	4620      	mov	r0, r4
   14b94:	f001 fa22 	bl	15fdc <d_operator_name>
   14b98:	4605      	mov	r5, r0
   14b9a:	2800      	cmp	r0, #0
   14b9c:	f000 8142 	beq.w	14e24 <d_exprlist+0x31c>
   14ba0:	782b      	ldrb	r3, [r5, #0]
   14ba2:	2b31      	cmp	r3, #49	; 0x31
   14ba4:	d043      	beq.n	14c2e <d_exprlist+0x126>
   14ba6:	2b32      	cmp	r3, #50	; 0x32
   14ba8:	d05c      	beq.n	14c64 <d_exprlist+0x15c>
   14baa:	2b33      	cmp	r3, #51	; 0x33
   14bac:	d17b      	bne.n	14ca6 <d_exprlist+0x19e>
   14bae:	68e3      	ldr	r3, [r4, #12]
   14bb0:	781a      	ldrb	r2, [r3, #0]
   14bb2:	2a5f      	cmp	r2, #95	; 0x5f
   14bb4:	f040 80c1 	bne.w	14d3a <d_exprlist+0x232>
   14bb8:	3301      	adds	r3, #1
   14bba:	60e3      	str	r3, [r4, #12]
   14bbc:	2145      	movs	r1, #69	; 0x45
   14bbe:	4620      	mov	r0, r4
   14bc0:	f7ff ffa2 	bl	14b08 <d_exprlist>
   14bc4:	e0bc      	b.n	14d40 <d_exprlist+0x238>
   14bc6:	785a      	ldrb	r2, [r3, #1]
   14bc8:	2a70      	cmp	r2, #112	; 0x70
   14bca:	d1e2      	bne.n	14b92 <d_exprlist+0x8a>
   14bcc:	1c9a      	adds	r2, r3, #2
   14bce:	60e2      	str	r2, [r4, #12]
   14bd0:	789a      	ldrb	r2, [r3, #2]
   14bd2:	2a54      	cmp	r2, #84	; 0x54
   14bd4:	d069      	beq.n	14caa <d_exprlist+0x1a2>
   14bd6:	4620      	mov	r0, r4
   14bd8:	f7ff fd1c 	bl	14614 <d_compact_number>
   14bdc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14be0:	4298      	cmp	r0, r3
   14be2:	d060      	beq.n	14ca6 <d_exprlist+0x19e>
   14be4:	1c43      	adds	r3, r0, #1
   14be6:	d05e      	beq.n	14ca6 <d_exprlist+0x19e>
   14be8:	3001      	adds	r0, #1
   14bea:	6963      	ldr	r3, [r4, #20]
   14bec:	69a2      	ldr	r2, [r4, #24]
   14bee:	4293      	cmp	r3, r2
   14bf0:	da59      	bge.n	14ca6 <d_exprlist+0x19e>
   14bf2:	6922      	ldr	r2, [r4, #16]
   14bf4:	1c59      	adds	r1, r3, #1
   14bf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14bfa:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14bfe:	6161      	str	r1, [r4, #20]
   14c00:	d051      	beq.n	14ca6 <d_exprlist+0x19e>
   14c02:	2106      	movs	r1, #6
   14c04:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14c08:	6068      	str	r0, [r5, #4]
   14c0a:	e7a0      	b.n	14b4e <d_exprlist+0x46>
   14c0c:	4620      	mov	r0, r4
   14c0e:	f001 fef3 	bl	169f8 <d_expr_primary>
   14c12:	4605      	mov	r5, r0
   14c14:	6367      	str	r7, [r4, #52]	; 0x34
   14c16:	2d00      	cmp	r5, #0
   14c18:	d19a      	bne.n	14b50 <d_exprlist+0x48>
   14c1a:	2500      	movs	r5, #0
   14c1c:	4628      	mov	r0, r5
   14c1e:	b003      	add	sp, #12
   14c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c24:	4620      	mov	r0, r4
   14c26:	f7ff fd11 	bl	1464c <d_template_param>
   14c2a:	4605      	mov	r5, r0
   14c2c:	e7f2      	b.n	14c14 <d_exprlist+0x10c>
   14c2e:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c34:	f8db 2008 	ldr.w	r2, [fp, #8]
   14c38:	f8db a000 	ldr.w	sl, [fp]
   14c3c:	3a02      	subs	r2, #2
   14c3e:	4413      	add	r3, r2
   14c40:	6323      	str	r3, [r4, #48]	; 0x30
   14c42:	4650      	mov	r0, sl
   14c44:	4649      	mov	r1, r9
   14c46:	f009 fdff 	bl	1e848 <strcmp>
   14c4a:	2800      	cmp	r0, #0
   14c4c:	f000 80e6 	beq.w	14e1c <d_exprlist+0x314>
   14c50:	f8db 300c 	ldr.w	r3, [fp, #12]
   14c54:	2b03      	cmp	r3, #3
   14c56:	d826      	bhi.n	14ca6 <d_exprlist+0x19e>
   14c58:	e8df f013 	tbh	[pc, r3, lsl #1]
   14c5c:	0135002b 	.word	0x0135002b
   14c60:	00a50033 	.word	0x00a50033
   14c64:	686b      	ldr	r3, [r5, #4]
   14c66:	2b03      	cmp	r3, #3
   14c68:	d81d      	bhi.n	14ca6 <d_exprlist+0x19e>
   14c6a:	e8df f003 	tbb	[pc, r3]
   14c6e:	6622      	.short	0x6622
   14c70:	1c1c      	.short	0x1c1c
   14c72:	4620      	mov	r0, r4
   14c74:	f000 fc04 	bl	15480 <d_template_args>
   14c78:	462a      	mov	r2, r5
   14c7a:	4603      	mov	r3, r0
   14c7c:	2104      	movs	r1, #4
   14c7e:	4620      	mov	r0, r4
   14c80:	f7ff fb34 	bl	142ec <d_make_comp>
   14c84:	4605      	mov	r5, r0
   14c86:	e7c5      	b.n	14c14 <d_exprlist+0x10c>
   14c88:	2a74      	cmp	r2, #116	; 0x74
   14c8a:	d182      	bne.n	14b92 <d_exprlist+0x8a>
   14c8c:	785b      	ldrb	r3, [r3, #1]
   14c8e:	2b6c      	cmp	r3, #108	; 0x6c
   14c90:	f47f af7f 	bne.w	14b92 <d_exprlist+0x8a>
   14c94:	4620      	mov	r0, r4
   14c96:	f000 fdb9 	bl	1580c <d_type>
   14c9a:	68e3      	ldr	r3, [r4, #12]
   14c9c:	785a      	ldrb	r2, [r3, #1]
   14c9e:	4605      	mov	r5, r0
   14ca0:	2a00      	cmp	r2, #0
   14ca2:	f040 8169 	bne.w	14f78 <d_exprlist+0x470>
   14ca6:	6367      	str	r7, [r4, #52]	; 0x34
   14ca8:	e7b7      	b.n	14c1a <d_exprlist+0x112>
   14caa:	3303      	adds	r3, #3
   14cac:	60e3      	str	r3, [r4, #12]
   14cae:	2000      	movs	r0, #0
   14cb0:	e79b      	b.n	14bea <d_exprlist+0xe2>
   14cb2:	462a      	mov	r2, r5
   14cb4:	2300      	movs	r3, #0
   14cb6:	2135      	movs	r1, #53	; 0x35
   14cb8:	4620      	mov	r0, r4
   14cba:	f7ff fb17 	bl	142ec <d_make_comp>
   14cbe:	4605      	mov	r5, r0
   14cc0:	e7a8      	b.n	14c14 <d_exprlist+0x10c>
   14cc2:	f1ba 0f00 	cmp.w	sl, #0
   14cc6:	d0ee      	beq.n	14ca6 <d_exprlist+0x19e>
   14cc8:	686b      	ldr	r3, [r5, #4]
   14cca:	681b      	ldr	r3, [r3, #0]
   14ccc:	785a      	ldrb	r2, [r3, #1]
   14cce:	2a63      	cmp	r2, #99	; 0x63
   14cd0:	f000 80d2 	beq.w	14e78 <d_exprlist+0x370>
   14cd4:	f89a 3000 	ldrb.w	r3, [sl]
   14cd8:	2b66      	cmp	r3, #102	; 0x66
   14cda:	f000 80ef 	beq.w	14ebc <d_exprlist+0x3b4>
   14cde:	4620      	mov	r0, r4
   14ce0:	f000 f970 	bl	14fc4 <d_expression_1>
   14ce4:	4683      	mov	fp, r0
   14ce6:	49b1      	ldr	r1, [pc, #708]	; (14fac <d_exprlist+0x4a4>)
   14ce8:	4650      	mov	r0, sl
   14cea:	f009 fdad 	bl	1e848 <strcmp>
   14cee:	2800      	cmp	r0, #0
   14cf0:	f000 809d 	beq.w	14e2e <d_exprlist+0x326>
   14cf4:	49ae      	ldr	r1, [pc, #696]	; (14fb0 <d_exprlist+0x4a8>)
   14cf6:	4650      	mov	r0, sl
   14cf8:	f009 fda6 	bl	1e848 <strcmp>
   14cfc:	b130      	cbz	r0, 14d0c <d_exprlist+0x204>
   14cfe:	4650      	mov	r0, sl
   14d00:	49ac      	ldr	r1, [pc, #688]	; (14fb4 <d_exprlist+0x4ac>)
   14d02:	f009 fda1 	bl	1e848 <strcmp>
   14d06:	2800      	cmp	r0, #0
   14d08:	f040 8083 	bne.w	14e12 <d_exprlist+0x30a>
   14d0c:	4620      	mov	r0, r4
   14d0e:	f001 fa25 	bl	1615c <d_unqualified_name>
   14d12:	68e3      	ldr	r3, [r4, #12]
   14d14:	781b      	ldrb	r3, [r3, #0]
   14d16:	2b49      	cmp	r3, #73	; 0x49
   14d18:	4682      	mov	sl, r0
   14d1a:	f000 80e9 	beq.w	14ef0 <d_exprlist+0x3e8>
   14d1e:	4653      	mov	r3, sl
   14d20:	465a      	mov	r2, fp
   14d22:	2138      	movs	r1, #56	; 0x38
   14d24:	4620      	mov	r0, r4
   14d26:	f7ff fae1 	bl	142ec <d_make_comp>
   14d2a:	462a      	mov	r2, r5
   14d2c:	4603      	mov	r3, r0
   14d2e:	2137      	movs	r1, #55	; 0x37
   14d30:	4620      	mov	r0, r4
   14d32:	f7ff fadb 	bl	142ec <d_make_comp>
   14d36:	4605      	mov	r5, r0
   14d38:	e76c      	b.n	14c14 <d_exprlist+0x10c>
   14d3a:	4620      	mov	r0, r4
   14d3c:	f000 f942 	bl	14fc4 <d_expression_1>
   14d40:	4603      	mov	r3, r0
   14d42:	462a      	mov	r2, r5
   14d44:	2136      	movs	r1, #54	; 0x36
   14d46:	4620      	mov	r0, r4
   14d48:	f7ff fad0 	bl	142ec <d_make_comp>
   14d4c:	4605      	mov	r5, r0
   14d4e:	e761      	b.n	14c14 <d_exprlist+0x10c>
   14d50:	3302      	adds	r3, #2
   14d52:	60e3      	str	r3, [r4, #12]
   14d54:	4620      	mov	r0, r4
   14d56:	f000 fd59 	bl	1580c <d_type>
   14d5a:	4682      	mov	sl, r0
   14d5c:	4620      	mov	r0, r4
   14d5e:	f001 f9fd 	bl	1615c <d_unqualified_name>
   14d62:	68e3      	ldr	r3, [r4, #12]
   14d64:	781b      	ldrb	r3, [r3, #0]
   14d66:	2b49      	cmp	r3, #73	; 0x49
   14d68:	4683      	mov	fp, r0
   14d6a:	f000 8093 	beq.w	14e94 <d_exprlist+0x38c>
   14d6e:	4603      	mov	r3, r0
   14d70:	4629      	mov	r1, r5
   14d72:	4652      	mov	r2, sl
   14d74:	4620      	mov	r0, r4
   14d76:	f7ff fab9 	bl	142ec <d_make_comp>
   14d7a:	4605      	mov	r5, r0
   14d7c:	e74a      	b.n	14c14 <d_exprlist+0x10c>
   14d7e:	9d01      	ldr	r5, [sp, #4]
   14d80:	3301      	adds	r3, #1
   14d82:	4628      	mov	r0, r5
   14d84:	60e3      	str	r3, [r4, #12]
   14d86:	b003      	add	sp, #12
   14d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d8c:	3302      	adds	r3, #2
   14d8e:	60e3      	str	r3, [r4, #12]
   14d90:	4620      	mov	r0, r4
   14d92:	f000 f917 	bl	14fc4 <d_expression_1>
   14d96:	2300      	movs	r3, #0
   14d98:	4602      	mov	r2, r0
   14d9a:	214a      	movs	r1, #74	; 0x4a
   14d9c:	4620      	mov	r0, r4
   14d9e:	f7ff faa5 	bl	142ec <d_make_comp>
   14da2:	4605      	mov	r5, r0
   14da4:	e736      	b.n	14c14 <d_exprlist+0x10c>
   14da6:	f1ba 0f00 	cmp.w	sl, #0
   14daa:	f43f af7c 	beq.w	14ca6 <d_exprlist+0x19e>
   14dae:	4982      	ldr	r1, [pc, #520]	; (14fb8 <d_exprlist+0x4b0>)
   14db0:	4650      	mov	r0, sl
   14db2:	f009 fd49 	bl	1e848 <strcmp>
   14db6:	2800      	cmp	r0, #0
   14db8:	d03f      	beq.n	14e3a <d_exprlist+0x332>
   14dba:	f89a 3000 	ldrb.w	r3, [sl]
   14dbe:	2b66      	cmp	r3, #102	; 0x66
   14dc0:	f000 80bd 	beq.w	14f3e <d_exprlist+0x436>
   14dc4:	2b6e      	cmp	r3, #110	; 0x6e
   14dc6:	f47f af6e 	bne.w	14ca6 <d_exprlist+0x19e>
   14dca:	f89a 3001 	ldrb.w	r3, [sl, #1]
   14dce:	2b77      	cmp	r3, #119	; 0x77
   14dd0:	d002      	beq.n	14dd8 <d_exprlist+0x2d0>
   14dd2:	2b61      	cmp	r3, #97	; 0x61
   14dd4:	f47f af67 	bne.w	14ca6 <d_exprlist+0x19e>
   14dd8:	215f      	movs	r1, #95	; 0x5f
   14dda:	4620      	mov	r0, r4
   14ddc:	f7ff fe94 	bl	14b08 <d_exprlist>
   14de0:	4682      	mov	sl, r0
   14de2:	4620      	mov	r0, r4
   14de4:	f000 fd12 	bl	1580c <d_type>
   14de8:	68e3      	ldr	r3, [r4, #12]
   14dea:	781a      	ldrb	r2, [r3, #0]
   14dec:	2a45      	cmp	r2, #69	; 0x45
   14dee:	4683      	mov	fp, r0
   14df0:	f000 80a1 	beq.w	14f36 <d_exprlist+0x42e>
   14df4:	2a70      	cmp	r2, #112	; 0x70
   14df6:	f000 80a6 	beq.w	14f46 <d_exprlist+0x43e>
   14dfa:	2a69      	cmp	r2, #105	; 0x69
   14dfc:	f47f af53 	bne.w	14ca6 <d_exprlist+0x19e>
   14e00:	785b      	ldrb	r3, [r3, #1]
   14e02:	2b6c      	cmp	r3, #108	; 0x6c
   14e04:	f47f af4f 	bne.w	14ca6 <d_exprlist+0x19e>
   14e08:	4620      	mov	r0, r4
   14e0a:	f000 f8db 	bl	14fc4 <d_expression_1>
   14e0e:	4603      	mov	r3, r0
   14e10:	e01f      	b.n	14e52 <d_exprlist+0x34a>
   14e12:	4620      	mov	r0, r4
   14e14:	f000 f8d6 	bl	14fc4 <d_expression_1>
   14e18:	4682      	mov	sl, r0
   14e1a:	e780      	b.n	14d1e <d_exprlist+0x216>
   14e1c:	4620      	mov	r0, r4
   14e1e:	f000 fcf5 	bl	1580c <d_type>
   14e22:	e78d      	b.n	14d40 <d_exprlist+0x238>
   14e24:	4628      	mov	r0, r5
   14e26:	6367      	str	r7, [r4, #52]	; 0x34
   14e28:	b003      	add	sp, #12
   14e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e2e:	2145      	movs	r1, #69	; 0x45
   14e30:	4620      	mov	r0, r4
   14e32:	f7ff fe69 	bl	14b08 <d_exprlist>
   14e36:	4682      	mov	sl, r0
   14e38:	e771      	b.n	14d1e <d_exprlist+0x216>
   14e3a:	4620      	mov	r0, r4
   14e3c:	f000 f8c2 	bl	14fc4 <d_expression_1>
   14e40:	4682      	mov	sl, r0
   14e42:	4620      	mov	r0, r4
   14e44:	f000 f8be 	bl	14fc4 <d_expression_1>
   14e48:	4683      	mov	fp, r0
   14e4a:	4620      	mov	r0, r4
   14e4c:	f000 f8ba 	bl	14fc4 <d_expression_1>
   14e50:	4603      	mov	r3, r0
   14e52:	465a      	mov	r2, fp
   14e54:	213b      	movs	r1, #59	; 0x3b
   14e56:	4620      	mov	r0, r4
   14e58:	f7ff fa48 	bl	142ec <d_make_comp>
   14e5c:	4652      	mov	r2, sl
   14e5e:	4603      	mov	r3, r0
   14e60:	213a      	movs	r1, #58	; 0x3a
   14e62:	4620      	mov	r0, r4
   14e64:	f7ff fa42 	bl	142ec <d_make_comp>
   14e68:	462a      	mov	r2, r5
   14e6a:	4603      	mov	r3, r0
   14e6c:	2139      	movs	r1, #57	; 0x39
   14e6e:	4620      	mov	r0, r4
   14e70:	f7ff fa3c 	bl	142ec <d_make_comp>
   14e74:	4605      	mov	r5, r0
   14e76:	e6cd      	b.n	14c14 <d_exprlist+0x10c>
   14e78:	781b      	ldrb	r3, [r3, #0]
   14e7a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   14e7e:	2a01      	cmp	r2, #1
   14e80:	d903      	bls.n	14e8a <d_exprlist+0x382>
   14e82:	3b72      	subs	r3, #114	; 0x72
   14e84:	2b01      	cmp	r3, #1
   14e86:	f63f af25 	bhi.w	14cd4 <d_exprlist+0x1cc>
   14e8a:	4620      	mov	r0, r4
   14e8c:	f000 fcbe 	bl	1580c <d_type>
   14e90:	4683      	mov	fp, r0
   14e92:	e728      	b.n	14ce6 <d_exprlist+0x1de>
   14e94:	4620      	mov	r0, r4
   14e96:	f000 faf3 	bl	15480 <d_template_args>
   14e9a:	465a      	mov	r2, fp
   14e9c:	4603      	mov	r3, r0
   14e9e:	2104      	movs	r1, #4
   14ea0:	4620      	mov	r0, r4
   14ea2:	f7ff fa23 	bl	142ec <d_make_comp>
   14ea6:	4603      	mov	r3, r0
   14ea8:	e762      	b.n	14d70 <d_exprlist+0x268>
   14eaa:	3301      	adds	r3, #1
   14eac:	60c3      	str	r3, [r0, #12]
   14eae:	212e      	movs	r1, #46	; 0x2e
   14eb0:	4613      	mov	r3, r2
   14eb2:	b003      	add	sp, #12
   14eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb8:	f7ff ba18 	b.w	142ec <d_make_comp>
   14ebc:	4620      	mov	r0, r4
   14ebe:	f001 f88d 	bl	15fdc <d_operator_name>
   14ec2:	4683      	mov	fp, r0
   14ec4:	e70f      	b.n	14ce6 <d_exprlist+0x1de>
   14ec6:	f1ba 0f00 	cmp.w	sl, #0
   14eca:	f43f af36 	beq.w	14d3a <d_exprlist+0x232>
   14ece:	f89a 3000 	ldrb.w	r3, [sl]
   14ed2:	2b70      	cmp	r3, #112	; 0x70
   14ed4:	d017      	beq.n	14f06 <d_exprlist+0x3fe>
   14ed6:	2b6d      	cmp	r3, #109	; 0x6d
   14ed8:	d015      	beq.n	14f06 <d_exprlist+0x3fe>
   14eda:	4650      	mov	r0, sl
   14edc:	4937      	ldr	r1, [pc, #220]	; (14fbc <d_exprlist+0x4b4>)
   14ede:	f009 fcb3 	bl	1e848 <strcmp>
   14ee2:	2800      	cmp	r0, #0
   14ee4:	f47f af29 	bne.w	14d3a <d_exprlist+0x232>
   14ee8:	4620      	mov	r0, r4
   14eea:	f000 fa65 	bl	153b8 <d_template_args_1>
   14eee:	e727      	b.n	14d40 <d_exprlist+0x238>
   14ef0:	4620      	mov	r0, r4
   14ef2:	f000 fac5 	bl	15480 <d_template_args>
   14ef6:	4652      	mov	r2, sl
   14ef8:	4603      	mov	r3, r0
   14efa:	2104      	movs	r1, #4
   14efc:	4620      	mov	r0, r4
   14efe:	f7ff f9f5 	bl	142ec <d_make_comp>
   14f02:	4682      	mov	sl, r0
   14f04:	e70b      	b.n	14d1e <d_exprlist+0x216>
   14f06:	f89a 2001 	ldrb.w	r2, [sl, #1]
   14f0a:	429a      	cmp	r2, r3
   14f0c:	d1e5      	bne.n	14eda <d_exprlist+0x3d2>
   14f0e:	68e3      	ldr	r3, [r4, #12]
   14f10:	781a      	ldrb	r2, [r3, #0]
   14f12:	2a5f      	cmp	r2, #95	; 0x5f
   14f14:	d023      	beq.n	14f5e <d_exprlist+0x456>
   14f16:	4650      	mov	r0, sl
   14f18:	4928      	ldr	r1, [pc, #160]	; (14fbc <d_exprlist+0x4b4>)
   14f1a:	f009 fc95 	bl	1e848 <strcmp>
   14f1e:	2800      	cmp	r0, #0
   14f20:	d03f      	beq.n	14fa2 <d_exprlist+0x49a>
   14f22:	4620      	mov	r0, r4
   14f24:	f000 f84e 	bl	14fc4 <d_expression_1>
   14f28:	4603      	mov	r3, r0
   14f2a:	461a      	mov	r2, r3
   14f2c:	2138      	movs	r1, #56	; 0x38
   14f2e:	4620      	mov	r0, r4
   14f30:	f7ff f9dc 	bl	142ec <d_make_comp>
   14f34:	e704      	b.n	14d40 <d_exprlist+0x238>
   14f36:	3301      	adds	r3, #1
   14f38:	60e3      	str	r3, [r4, #12]
   14f3a:	2300      	movs	r3, #0
   14f3c:	e789      	b.n	14e52 <d_exprlist+0x34a>
   14f3e:	4620      	mov	r0, r4
   14f40:	f001 f84c 	bl	15fdc <d_operator_name>
   14f44:	e77c      	b.n	14e40 <d_exprlist+0x338>
   14f46:	785a      	ldrb	r2, [r3, #1]
   14f48:	2a69      	cmp	r2, #105	; 0x69
   14f4a:	f47f aeac 	bne.w	14ca6 <d_exprlist+0x19e>
   14f4e:	3302      	adds	r3, #2
   14f50:	60e3      	str	r3, [r4, #12]
   14f52:	2145      	movs	r1, #69	; 0x45
   14f54:	4620      	mov	r0, r4
   14f56:	f7ff fdd7 	bl	14b08 <d_exprlist>
   14f5a:	4603      	mov	r3, r0
   14f5c:	e779      	b.n	14e52 <d_exprlist+0x34a>
   14f5e:	3301      	adds	r3, #1
   14f60:	60e3      	str	r3, [r4, #12]
   14f62:	e7ba      	b.n	14eda <d_exprlist+0x3d2>
   14f64:	2a6f      	cmp	r2, #111	; 0x6f
   14f66:	d015      	beq.n	14f94 <d_exprlist+0x48c>
   14f68:	2a69      	cmp	r2, #105	; 0x69
   14f6a:	f47f ae8d 	bne.w	14c88 <d_exprlist+0x180>
   14f6e:	785a      	ldrb	r2, [r3, #1]
   14f70:	2a6c      	cmp	r2, #108	; 0x6c
   14f72:	f47f ae0e 	bne.w	14b92 <d_exprlist+0x8a>
   14f76:	2500      	movs	r5, #0
   14f78:	3302      	adds	r3, #2
   14f7a:	60e3      	str	r3, [r4, #12]
   14f7c:	2145      	movs	r1, #69	; 0x45
   14f7e:	4620      	mov	r0, r4
   14f80:	f7ff fdc2 	bl	14b08 <d_exprlist>
   14f84:	462a      	mov	r2, r5
   14f86:	4603      	mov	r3, r0
   14f88:	2130      	movs	r1, #48	; 0x30
   14f8a:	4620      	mov	r0, r4
   14f8c:	f7ff f9ae 	bl	142ec <d_make_comp>
   14f90:	4605      	mov	r5, r0
   14f92:	e63f      	b.n	14c14 <d_exprlist+0x10c>
   14f94:	785a      	ldrb	r2, [r3, #1]
   14f96:	2a6e      	cmp	r2, #110	; 0x6e
   14f98:	f47f adfb 	bne.w	14b92 <d_exprlist+0x8a>
   14f9c:	3302      	adds	r3, #2
   14f9e:	60e3      	str	r3, [r4, #12]
   14fa0:	e5c9      	b.n	14b36 <d_exprlist+0x2e>
   14fa2:	4620      	mov	r0, r4
   14fa4:	f000 fa08 	bl	153b8 <d_template_args_1>
   14fa8:	4603      	mov	r3, r0
   14faa:	e7be      	b.n	14f2a <d_exprlist+0x422>
   14fac:	000241a8 	.word	0x000241a8
   14fb0:	000241ac 	.word	0x000241ac
   14fb4:	000241b0 	.word	0x000241b0
   14fb8:	000241b4 	.word	0x000241b4
   14fbc:	000241a4 	.word	0x000241a4
   14fc0:	000246a8 	.word	0x000246a8

00014fc4 <d_expression_1>:
   14fc4:	68c1      	ldr	r1, [r0, #12]
   14fc6:	780b      	ldrb	r3, [r1, #0]
   14fc8:	2b4c      	cmp	r3, #76	; 0x4c
   14fca:	f000 8087 	beq.w	150dc <d_expression_1+0x118>
   14fce:	2b54      	cmp	r3, #84	; 0x54
   14fd0:	f000 8086 	beq.w	150e0 <d_expression_1+0x11c>
   14fd4:	2b73      	cmp	r3, #115	; 0x73
   14fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fda:	4604      	mov	r4, r0
   14fdc:	d037      	beq.n	1504e <d_expression_1+0x8a>
   14fde:	2b66      	cmp	r3, #102	; 0x66
   14fe0:	d012      	beq.n	15008 <d_expression_1+0x44>
   14fe2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14fe6:	2a09      	cmp	r2, #9
   14fe8:	f200 81b8 	bhi.w	1535c <d_expression_1+0x398>
   14fec:	4620      	mov	r0, r4
   14fee:	f001 f8b5 	bl	1615c <d_unqualified_name>
   14ff2:	4605      	mov	r5, r0
   14ff4:	2800      	cmp	r0, #0
   14ff6:	d06d      	beq.n	150d4 <d_expression_1+0x110>
   14ff8:	68e3      	ldr	r3, [r4, #12]
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	2b49      	cmp	r3, #73	; 0x49
   14ffe:	f000 8088 	beq.w	15112 <d_expression_1+0x14e>
   15002:	4628      	mov	r0, r5
   15004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15008:	784b      	ldrb	r3, [r1, #1]
   1500a:	2b70      	cmp	r3, #112	; 0x70
   1500c:	d039      	beq.n	15082 <d_expression_1+0xbe>
   1500e:	4620      	mov	r0, r4
   15010:	f000 ffe4 	bl	15fdc <d_operator_name>
   15014:	4605      	mov	r5, r0
   15016:	2800      	cmp	r0, #0
   15018:	d05c      	beq.n	150d4 <d_expression_1+0x110>
   1501a:	7803      	ldrb	r3, [r0, #0]
   1501c:	2b31      	cmp	r3, #49	; 0x31
   1501e:	d061      	beq.n	150e4 <d_expression_1+0x120>
   15020:	2b32      	cmp	r3, #50	; 0x32
   15022:	d025      	beq.n	15070 <d_expression_1+0xac>
   15024:	2b33      	cmp	r3, #51	; 0x33
   15026:	d155      	bne.n	150d4 <d_expression_1+0x110>
   15028:	68e3      	ldr	r3, [r4, #12]
   1502a:	781a      	ldrb	r2, [r3, #0]
   1502c:	2a5f      	cmp	r2, #95	; 0x5f
   1502e:	f040 81b4 	bne.w	1539a <d_expression_1+0x3d6>
   15032:	3301      	adds	r3, #1
   15034:	60e3      	str	r3, [r4, #12]
   15036:	2145      	movs	r1, #69	; 0x45
   15038:	4620      	mov	r0, r4
   1503a:	f7ff fd65 	bl	14b08 <d_exprlist>
   1503e:	4603      	mov	r3, r0
   15040:	462a      	mov	r2, r5
   15042:	4620      	mov	r0, r4
   15044:	2136      	movs	r1, #54	; 0x36
   15046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1504a:	f7ff b94f 	b.w	142ec <d_make_comp>
   1504e:	784b      	ldrb	r3, [r1, #1]
   15050:	2b72      	cmp	r3, #114	; 0x72
   15052:	d069      	beq.n	15128 <d_expression_1+0x164>
   15054:	2b70      	cmp	r3, #112	; 0x70
   15056:	d1da      	bne.n	1500e <d_expression_1+0x4a>
   15058:	3102      	adds	r1, #2
   1505a:	60c1      	str	r1, [r0, #12]
   1505c:	f7ff ffb2 	bl	14fc4 <d_expression_1>
   15060:	2300      	movs	r3, #0
   15062:	4602      	mov	r2, r0
   15064:	214a      	movs	r1, #74	; 0x4a
   15066:	4620      	mov	r0, r4
   15068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1506c:	f7ff b93e 	b.w	142ec <d_make_comp>
   15070:	6843      	ldr	r3, [r0, #4]
   15072:	2b03      	cmp	r3, #3
   15074:	d82e      	bhi.n	150d4 <d_expression_1+0x110>
   15076:	e8df f013 	tbh	[pc, r3, lsl #1]
   1507a:	0071      	.short	0x0071
   1507c:	002d0190 	.word	0x002d0190
   15080:	002d      	.short	0x002d
   15082:	1c8b      	adds	r3, r1, #2
   15084:	60c3      	str	r3, [r0, #12]
   15086:	788b      	ldrb	r3, [r1, #2]
   15088:	2b54      	cmp	r3, #84	; 0x54
   1508a:	d063      	beq.n	15154 <d_expression_1+0x190>
   1508c:	f7ff fac2 	bl	14614 <d_compact_number>
   15090:	43c3      	mvns	r3, r0
   15092:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   15096:	d01d      	beq.n	150d4 <d_expression_1+0x110>
   15098:	3001      	adds	r0, #1
   1509a:	6963      	ldr	r3, [r4, #20]
   1509c:	69a2      	ldr	r2, [r4, #24]
   1509e:	4293      	cmp	r3, r2
   150a0:	da18      	bge.n	150d4 <d_expression_1+0x110>
   150a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   150a6:	6921      	ldr	r1, [r4, #16]
   150a8:	0092      	lsls	r2, r2, #2
   150aa:	3301      	adds	r3, #1
   150ac:	188d      	adds	r5, r1, r2
   150ae:	6163      	str	r3, [r4, #20]
   150b0:	d0a7      	beq.n	15002 <d_expression_1+0x3e>
   150b2:	2306      	movs	r3, #6
   150b4:	548b      	strb	r3, [r1, r2]
   150b6:	6068      	str	r0, [r5, #4]
   150b8:	e7a3      	b.n	15002 <d_expression_1+0x3e>
   150ba:	2b74      	cmp	r3, #116	; 0x74
   150bc:	d1a7      	bne.n	1500e <d_expression_1+0x4a>
   150be:	784b      	ldrb	r3, [r1, #1]
   150c0:	2b6c      	cmp	r3, #108	; 0x6c
   150c2:	d1a4      	bne.n	1500e <d_expression_1+0x4a>
   150c4:	f000 fba2 	bl	1580c <d_type>
   150c8:	68e1      	ldr	r1, [r4, #12]
   150ca:	784b      	ldrb	r3, [r1, #1]
   150cc:	4605      	mov	r5, r0
   150ce:	2b00      	cmp	r3, #0
   150d0:	f040 814e 	bne.w	15370 <d_expression_1+0x3ac>
   150d4:	2500      	movs	r5, #0
   150d6:	4628      	mov	r0, r5
   150d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150dc:	f001 bc8c 	b.w	169f8 <d_expr_primary>
   150e0:	f7ff bab4 	b.w	1464c <d_template_param>
   150e4:	6847      	ldr	r7, [r0, #4]
   150e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   150e8:	68ba      	ldr	r2, [r7, #8]
   150ea:	683e      	ldr	r6, [r7, #0]
   150ec:	49ac      	ldr	r1, [pc, #688]	; (153a0 <d_expression_1+0x3dc>)
   150ee:	3a02      	subs	r2, #2
   150f0:	4413      	add	r3, r2
   150f2:	6323      	str	r3, [r4, #48]	; 0x30
   150f4:	4630      	mov	r0, r6
   150f6:	f009 fba7 	bl	1e848 <strcmp>
   150fa:	2800      	cmp	r0, #0
   150fc:	f000 80ab 	beq.w	15256 <d_expression_1+0x292>
   15100:	68ff      	ldr	r7, [r7, #12]
   15102:	2f03      	cmp	r7, #3
   15104:	d8e6      	bhi.n	150d4 <d_expression_1+0x110>
   15106:	e8df f017 	tbh	[pc, r7, lsl #1]
   1510a:	0029      	.short	0x0029
   1510c:	007100ff 	.word	0x007100ff
   15110:	0031      	.short	0x0031
   15112:	4620      	mov	r0, r4
   15114:	f000 f9b4 	bl	15480 <d_template_args>
   15118:	462a      	mov	r2, r5
   1511a:	4603      	mov	r3, r0
   1511c:	2104      	movs	r1, #4
   1511e:	4620      	mov	r0, r4
   15120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15124:	f7ff b8e2 	b.w	142ec <d_make_comp>
   15128:	3102      	adds	r1, #2
   1512a:	60c1      	str	r1, [r0, #12]
   1512c:	f000 fb6e 	bl	1580c <d_type>
   15130:	4605      	mov	r5, r0
   15132:	4620      	mov	r0, r4
   15134:	f001 f812 	bl	1615c <d_unqualified_name>
   15138:	68e3      	ldr	r3, [r4, #12]
   1513a:	781b      	ldrb	r3, [r3, #0]
   1513c:	2b49      	cmp	r3, #73	; 0x49
   1513e:	4606      	mov	r6, r0
   15140:	f000 80ae 	beq.w	152a0 <d_expression_1+0x2dc>
   15144:	4603      	mov	r3, r0
   15146:	462a      	mov	r2, r5
   15148:	4620      	mov	r0, r4
   1514a:	2101      	movs	r1, #1
   1514c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15150:	f7ff b8cc 	b.w	142ec <d_make_comp>
   15154:	3103      	adds	r1, #3
   15156:	60c1      	str	r1, [r0, #12]
   15158:	2000      	movs	r0, #0
   1515a:	e79e      	b.n	1509a <d_expression_1+0xd6>
   1515c:	462a      	mov	r2, r5
   1515e:	4620      	mov	r0, r4
   15160:	2300      	movs	r3, #0
   15162:	2135      	movs	r1, #53	; 0x35
   15164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15168:	f7ff b8c0 	b.w	142ec <d_make_comp>
   1516c:	2e00      	cmp	r6, #0
   1516e:	d0b1      	beq.n	150d4 <d_expression_1+0x110>
   15170:	498c      	ldr	r1, [pc, #560]	; (153a4 <d_expression_1+0x3e0>)
   15172:	4630      	mov	r0, r6
   15174:	f009 fb68 	bl	1e848 <strcmp>
   15178:	2800      	cmp	r0, #0
   1517a:	d071      	beq.n	15260 <d_expression_1+0x29c>
   1517c:	7833      	ldrb	r3, [r6, #0]
   1517e:	2b66      	cmp	r3, #102	; 0x66
   15180:	f000 80b2 	beq.w	152e8 <d_expression_1+0x324>
   15184:	2b6e      	cmp	r3, #110	; 0x6e
   15186:	d1a5      	bne.n	150d4 <d_expression_1+0x110>
   15188:	7873      	ldrb	r3, [r6, #1]
   1518a:	2b77      	cmp	r3, #119	; 0x77
   1518c:	d001      	beq.n	15192 <d_expression_1+0x1ce>
   1518e:	2b61      	cmp	r3, #97	; 0x61
   15190:	d1a0      	bne.n	150d4 <d_expression_1+0x110>
   15192:	215f      	movs	r1, #95	; 0x5f
   15194:	4620      	mov	r0, r4
   15196:	f7ff fcb7 	bl	14b08 <d_exprlist>
   1519a:	4606      	mov	r6, r0
   1519c:	4620      	mov	r0, r4
   1519e:	f000 fb35 	bl	1580c <d_type>
   151a2:	68e3      	ldr	r3, [r4, #12]
   151a4:	781a      	ldrb	r2, [r3, #0]
   151a6:	2a45      	cmp	r2, #69	; 0x45
   151a8:	4607      	mov	r7, r0
   151aa:	f000 8099 	beq.w	152e0 <d_expression_1+0x31c>
   151ae:	2a70      	cmp	r2, #112	; 0x70
   151b0:	f000 809e 	beq.w	152f0 <d_expression_1+0x32c>
   151b4:	2a69      	cmp	r2, #105	; 0x69
   151b6:	d18d      	bne.n	150d4 <d_expression_1+0x110>
   151b8:	785b      	ldrb	r3, [r3, #1]
   151ba:	2b6c      	cmp	r3, #108	; 0x6c
   151bc:	d18a      	bne.n	150d4 <d_expression_1+0x110>
   151be:	4620      	mov	r0, r4
   151c0:	f7ff ff00 	bl	14fc4 <d_expression_1>
   151c4:	4603      	mov	r3, r0
   151c6:	463a      	mov	r2, r7
   151c8:	213b      	movs	r1, #59	; 0x3b
   151ca:	4620      	mov	r0, r4
   151cc:	f7ff f88e 	bl	142ec <d_make_comp>
   151d0:	4632      	mov	r2, r6
   151d2:	4603      	mov	r3, r0
   151d4:	213a      	movs	r1, #58	; 0x3a
   151d6:	4620      	mov	r0, r4
   151d8:	f7ff f888 	bl	142ec <d_make_comp>
   151dc:	462a      	mov	r2, r5
   151de:	4603      	mov	r3, r0
   151e0:	2139      	movs	r1, #57	; 0x39
   151e2:	4620      	mov	r0, r4
   151e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   151e8:	f7ff b880 	b.w	142ec <d_make_comp>
   151ec:	2e00      	cmp	r6, #0
   151ee:	f43f af71 	beq.w	150d4 <d_expression_1+0x110>
   151f2:	686b      	ldr	r3, [r5, #4]
   151f4:	681b      	ldr	r3, [r3, #0]
   151f6:	785a      	ldrb	r2, [r3, #1]
   151f8:	2a63      	cmp	r2, #99	; 0x63
   151fa:	d044      	beq.n	15286 <d_expression_1+0x2c2>
   151fc:	7833      	ldrb	r3, [r6, #0]
   151fe:	2b66      	cmp	r3, #102	; 0x66
   15200:	d059      	beq.n	152b6 <d_expression_1+0x2f2>
   15202:	4620      	mov	r0, r4
   15204:	f7ff fede 	bl	14fc4 <d_expression_1>
   15208:	4607      	mov	r7, r0
   1520a:	4967      	ldr	r1, [pc, #412]	; (153a8 <d_expression_1+0x3e4>)
   1520c:	4630      	mov	r0, r6
   1520e:	f009 fb1b 	bl	1e848 <strcmp>
   15212:	b390      	cbz	r0, 1527a <d_expression_1+0x2b6>
   15214:	4965      	ldr	r1, [pc, #404]	; (153ac <d_expression_1+0x3e8>)
   15216:	4630      	mov	r0, r6
   15218:	f009 fb16 	bl	1e848 <strcmp>
   1521c:	b128      	cbz	r0, 1522a <d_expression_1+0x266>
   1521e:	4630      	mov	r0, r6
   15220:	4963      	ldr	r1, [pc, #396]	; (153b0 <d_expression_1+0x3ec>)
   15222:	f009 fb11 	bl	1e848 <strcmp>
   15226:	2800      	cmp	r0, #0
   15228:	d14a      	bne.n	152c0 <d_expression_1+0x2fc>
   1522a:	4620      	mov	r0, r4
   1522c:	f000 ff96 	bl	1615c <d_unqualified_name>
   15230:	68e3      	ldr	r3, [r4, #12]
   15232:	781b      	ldrb	r3, [r3, #0]
   15234:	2b49      	cmp	r3, #73	; 0x49
   15236:	4606      	mov	r6, r0
   15238:	d047      	beq.n	152ca <d_expression_1+0x306>
   1523a:	4633      	mov	r3, r6
   1523c:	463a      	mov	r2, r7
   1523e:	2138      	movs	r1, #56	; 0x38
   15240:	4620      	mov	r0, r4
   15242:	f7ff f853 	bl	142ec <d_make_comp>
   15246:	462a      	mov	r2, r5
   15248:	4603      	mov	r3, r0
   1524a:	2137      	movs	r1, #55	; 0x37
   1524c:	4620      	mov	r0, r4
   1524e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15252:	f7ff b84b 	b.w	142ec <d_make_comp>
   15256:	4620      	mov	r0, r4
   15258:	f000 fad8 	bl	1580c <d_type>
   1525c:	4603      	mov	r3, r0
   1525e:	e6ef      	b.n	15040 <d_expression_1+0x7c>
   15260:	4620      	mov	r0, r4
   15262:	f7ff feaf 	bl	14fc4 <d_expression_1>
   15266:	4606      	mov	r6, r0
   15268:	4620      	mov	r0, r4
   1526a:	f7ff feab 	bl	14fc4 <d_expression_1>
   1526e:	4607      	mov	r7, r0
   15270:	4620      	mov	r0, r4
   15272:	f7ff fea7 	bl	14fc4 <d_expression_1>
   15276:	4603      	mov	r3, r0
   15278:	e7a5      	b.n	151c6 <d_expression_1+0x202>
   1527a:	2145      	movs	r1, #69	; 0x45
   1527c:	4620      	mov	r0, r4
   1527e:	f7ff fc43 	bl	14b08 <d_exprlist>
   15282:	4606      	mov	r6, r0
   15284:	e7d9      	b.n	1523a <d_expression_1+0x276>
   15286:	781b      	ldrb	r3, [r3, #0]
   15288:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1528c:	2a01      	cmp	r2, #1
   1528e:	d902      	bls.n	15296 <d_expression_1+0x2d2>
   15290:	3b72      	subs	r3, #114	; 0x72
   15292:	2b01      	cmp	r3, #1
   15294:	d8b2      	bhi.n	151fc <d_expression_1+0x238>
   15296:	4620      	mov	r0, r4
   15298:	f000 fab8 	bl	1580c <d_type>
   1529c:	4607      	mov	r7, r0
   1529e:	e7b4      	b.n	1520a <d_expression_1+0x246>
   152a0:	4620      	mov	r0, r4
   152a2:	f000 f8ed 	bl	15480 <d_template_args>
   152a6:	4632      	mov	r2, r6
   152a8:	4603      	mov	r3, r0
   152aa:	2104      	movs	r1, #4
   152ac:	4620      	mov	r0, r4
   152ae:	f7ff f81d 	bl	142ec <d_make_comp>
   152b2:	4603      	mov	r3, r0
   152b4:	e747      	b.n	15146 <d_expression_1+0x182>
   152b6:	4620      	mov	r0, r4
   152b8:	f000 fe90 	bl	15fdc <d_operator_name>
   152bc:	4607      	mov	r7, r0
   152be:	e7a4      	b.n	1520a <d_expression_1+0x246>
   152c0:	4620      	mov	r0, r4
   152c2:	f7ff fe7f 	bl	14fc4 <d_expression_1>
   152c6:	4606      	mov	r6, r0
   152c8:	e7b7      	b.n	1523a <d_expression_1+0x276>
   152ca:	4620      	mov	r0, r4
   152cc:	f000 f8d8 	bl	15480 <d_template_args>
   152d0:	4632      	mov	r2, r6
   152d2:	4603      	mov	r3, r0
   152d4:	2104      	movs	r1, #4
   152d6:	4620      	mov	r0, r4
   152d8:	f7ff f808 	bl	142ec <d_make_comp>
   152dc:	4606      	mov	r6, r0
   152de:	e7ac      	b.n	1523a <d_expression_1+0x276>
   152e0:	3301      	adds	r3, #1
   152e2:	60e3      	str	r3, [r4, #12]
   152e4:	2300      	movs	r3, #0
   152e6:	e76e      	b.n	151c6 <d_expression_1+0x202>
   152e8:	4620      	mov	r0, r4
   152ea:	f000 fe77 	bl	15fdc <d_operator_name>
   152ee:	e7ba      	b.n	15266 <d_expression_1+0x2a2>
   152f0:	785a      	ldrb	r2, [r3, #1]
   152f2:	2a69      	cmp	r2, #105	; 0x69
   152f4:	f47f aeee 	bne.w	150d4 <d_expression_1+0x110>
   152f8:	3302      	adds	r3, #2
   152fa:	60e3      	str	r3, [r4, #12]
   152fc:	2145      	movs	r1, #69	; 0x45
   152fe:	4620      	mov	r0, r4
   15300:	f7ff fc02 	bl	14b08 <d_exprlist>
   15304:	4603      	mov	r3, r0
   15306:	e75e      	b.n	151c6 <d_expression_1+0x202>
   15308:	2e00      	cmp	r6, #0
   1530a:	d046      	beq.n	1539a <d_expression_1+0x3d6>
   1530c:	7833      	ldrb	r3, [r6, #0]
   1530e:	2b70      	cmp	r3, #112	; 0x70
   15310:	d015      	beq.n	1533e <d_expression_1+0x37a>
   15312:	2b6d      	cmp	r3, #109	; 0x6d
   15314:	d013      	beq.n	1533e <d_expression_1+0x37a>
   15316:	2700      	movs	r7, #0
   15318:	4630      	mov	r0, r6
   1531a:	4926      	ldr	r1, [pc, #152]	; (153b4 <d_expression_1+0x3f0>)
   1531c:	f009 fa94 	bl	1e848 <strcmp>
   15320:	b1b8      	cbz	r0, 15352 <d_expression_1+0x38e>
   15322:	4620      	mov	r0, r4
   15324:	f7ff fe4e 	bl	14fc4 <d_expression_1>
   15328:	4603      	mov	r3, r0
   1532a:	2f00      	cmp	r7, #0
   1532c:	f43f ae88 	beq.w	15040 <d_expression_1+0x7c>
   15330:	461a      	mov	r2, r3
   15332:	2138      	movs	r1, #56	; 0x38
   15334:	4620      	mov	r0, r4
   15336:	f7fe ffd9 	bl	142ec <d_make_comp>
   1533a:	4603      	mov	r3, r0
   1533c:	e680      	b.n	15040 <d_expression_1+0x7c>
   1533e:	7872      	ldrb	r2, [r6, #1]
   15340:	429a      	cmp	r2, r3
   15342:	d1e8      	bne.n	15316 <d_expression_1+0x352>
   15344:	68e3      	ldr	r3, [r4, #12]
   15346:	781a      	ldrb	r2, [r3, #0]
   15348:	2a5f      	cmp	r2, #95	; 0x5f
   1534a:	d1e5      	bne.n	15318 <d_expression_1+0x354>
   1534c:	3301      	adds	r3, #1
   1534e:	60e3      	str	r3, [r4, #12]
   15350:	e7e1      	b.n	15316 <d_expression_1+0x352>
   15352:	4620      	mov	r0, r4
   15354:	f000 f830 	bl	153b8 <d_template_args_1>
   15358:	4603      	mov	r3, r0
   1535a:	e7e6      	b.n	1532a <d_expression_1+0x366>
   1535c:	2b6f      	cmp	r3, #111	; 0x6f
   1535e:	d015      	beq.n	1538c <d_expression_1+0x3c8>
   15360:	2b69      	cmp	r3, #105	; 0x69
   15362:	f47f aeaa 	bne.w	150ba <d_expression_1+0xf6>
   15366:	784b      	ldrb	r3, [r1, #1]
   15368:	2b6c      	cmp	r3, #108	; 0x6c
   1536a:	f47f ae50 	bne.w	1500e <d_expression_1+0x4a>
   1536e:	2500      	movs	r5, #0
   15370:	3102      	adds	r1, #2
   15372:	60e1      	str	r1, [r4, #12]
   15374:	4620      	mov	r0, r4
   15376:	2145      	movs	r1, #69	; 0x45
   15378:	f7ff fbc6 	bl	14b08 <d_exprlist>
   1537c:	462a      	mov	r2, r5
   1537e:	4603      	mov	r3, r0
   15380:	2130      	movs	r1, #48	; 0x30
   15382:	4620      	mov	r0, r4
   15384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15388:	f7fe bfb0 	b.w	142ec <d_make_comp>
   1538c:	784b      	ldrb	r3, [r1, #1]
   1538e:	2b6e      	cmp	r3, #110	; 0x6e
   15390:	f47f ae3d 	bne.w	1500e <d_expression_1+0x4a>
   15394:	3102      	adds	r1, #2
   15396:	60c1      	str	r1, [r0, #12]
   15398:	e628      	b.n	14fec <d_expression_1+0x28>
   1539a:	2700      	movs	r7, #0
   1539c:	e7c1      	b.n	15322 <d_expression_1+0x35e>
   1539e:	bf00      	nop
   153a0:	000246a8 	.word	0x000246a8
   153a4:	000241b4 	.word	0x000241b4
   153a8:	000241a8 	.word	0x000241a8
   153ac:	000241ac 	.word	0x000241ac
   153b0:	000241b0 	.word	0x000241b0
   153b4:	000241a4 	.word	0x000241a4

000153b8 <d_template_args_1>:
   153b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   153bc:	68c2      	ldr	r2, [r0, #12]
   153be:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   153c2:	7813      	ldrb	r3, [r2, #0]
   153c4:	2b45      	cmp	r3, #69	; 0x45
   153c6:	b083      	sub	sp, #12
   153c8:	4604      	mov	r4, r0
   153ca:	d04e      	beq.n	1546a <d_template_args_1+0xb2>
   153cc:	ae02      	add	r6, sp, #8
   153ce:	2100      	movs	r1, #0
   153d0:	f846 1d04 	str.w	r1, [r6, #-4]!
   153d4:	2701      	movs	r7, #1
   153d6:	3b49      	subs	r3, #73	; 0x49
   153d8:	2b0f      	cmp	r3, #15
   153da:	d83e      	bhi.n	1545a <d_template_args_1+0xa2>
   153dc:	e8df f003 	tbb	[pc, r3]
   153e0:	1b3d3838 	.word	0x1b3d3838
   153e4:	3d3d3d3d 	.word	0x3d3d3d3d
   153e8:	3d3d3d3d 	.word	0x3d3d3d3d
   153ec:	083d3d3d 	.word	0x083d3d3d
   153f0:	3201      	adds	r2, #1
   153f2:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   153f6:	60e2      	str	r2, [r4, #12]
   153f8:	6367      	str	r7, [r4, #52]	; 0x34
   153fa:	4620      	mov	r0, r4
   153fc:	f7ff fde2 	bl	14fc4 <d_expression_1>
   15400:	68e3      	ldr	r3, [r4, #12]
   15402:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   15406:	781a      	ldrb	r2, [r3, #0]
   15408:	2a45      	cmp	r2, #69	; 0x45
   1540a:	4605      	mov	r5, r0
   1540c:	d02a      	beq.n	15464 <d_template_args_1+0xac>
   1540e:	2000      	movs	r0, #0
   15410:	b003      	add	sp, #12
   15412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15416:	4620      	mov	r0, r4
   15418:	f001 faee 	bl	169f8 <d_expr_primary>
   1541c:	4605      	mov	r5, r0
   1541e:	2300      	movs	r3, #0
   15420:	212f      	movs	r1, #47	; 0x2f
   15422:	462a      	mov	r2, r5
   15424:	4620      	mov	r0, r4
   15426:	2d00      	cmp	r5, #0
   15428:	d0f1      	beq.n	1540e <d_template_args_1+0x56>
   1542a:	f7fe ff5f 	bl	142ec <d_make_comp>
   1542e:	6030      	str	r0, [r6, #0]
   15430:	f100 0608 	add.w	r6, r0, #8
   15434:	2800      	cmp	r0, #0
   15436:	d0ea      	beq.n	1540e <d_template_args_1+0x56>
   15438:	68e2      	ldr	r2, [r4, #12]
   1543a:	7813      	ldrb	r3, [r2, #0]
   1543c:	2b45      	cmp	r3, #69	; 0x45
   1543e:	d1ca      	bne.n	153d6 <d_template_args_1+0x1e>
   15440:	9801      	ldr	r0, [sp, #4]
   15442:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   15446:	3201      	adds	r2, #1
   15448:	60e2      	str	r2, [r4, #12]
   1544a:	b003      	add	sp, #12
   1544c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15450:	4620      	mov	r0, r4
   15452:	f000 f815 	bl	15480 <d_template_args>
   15456:	4605      	mov	r5, r0
   15458:	e7e1      	b.n	1541e <d_template_args_1+0x66>
   1545a:	4620      	mov	r0, r4
   1545c:	f000 f9d6 	bl	1580c <d_type>
   15460:	4605      	mov	r5, r0
   15462:	e7dc      	b.n	1541e <d_template_args_1+0x66>
   15464:	3301      	adds	r3, #1
   15466:	60e3      	str	r3, [r4, #12]
   15468:	e7d9      	b.n	1541e <d_template_args_1+0x66>
   1546a:	3201      	adds	r2, #1
   1546c:	2300      	movs	r3, #0
   1546e:	60c2      	str	r2, [r0, #12]
   15470:	212f      	movs	r1, #47	; 0x2f
   15472:	461a      	mov	r2, r3
   15474:	b003      	add	sp, #12
   15476:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1547a:	f7fe bf37 	b.w	142ec <d_make_comp>
   1547e:	bf00      	nop

00015480 <d_template_args>:
   15480:	68c2      	ldr	r2, [r0, #12]
   15482:	7813      	ldrb	r3, [r2, #0]
   15484:	3b49      	subs	r3, #73	; 0x49
   15486:	2b01      	cmp	r3, #1
   15488:	d802      	bhi.n	15490 <d_template_args+0x10>
   1548a:	3201      	adds	r2, #1
   1548c:	60c2      	str	r2, [r0, #12]
   1548e:	e793      	b.n	153b8 <d_template_args_1>
   15490:	2000      	movs	r0, #0
   15492:	4770      	bx	lr

00015494 <d_name>:
   15494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15498:	68c2      	ldr	r2, [r0, #12]
   1549a:	7813      	ldrb	r3, [r2, #0]
   1549c:	3b4e      	subs	r3, #78	; 0x4e
   1549e:	b085      	sub	sp, #20
   154a0:	4605      	mov	r5, r0
   154a2:	2b0c      	cmp	r3, #12
   154a4:	d870      	bhi.n	15588 <d_name+0xf4>
   154a6:	e8df f003 	tbb	[pc, r3]
   154aa:	6f1e      	.short	0x6f1e
   154ac:	5b6f6f6f 	.word	0x5b6f6f6f
   154b0:	6f6f176f 	.word	0x6f6f176f
   154b4:	6f6f      	.short	0x6f6f
   154b6:	07          	.byte	0x07
   154b7:	00          	.byte	0x00
   154b8:	3201      	adds	r2, #1
   154ba:	2100      	movs	r1, #0
   154bc:	60c2      	str	r2, [r0, #12]
   154be:	f000 ffbd 	bl	1643c <d_encoding>
   154c2:	68eb      	ldr	r3, [r5, #12]
   154c4:	7819      	ldrb	r1, [r3, #0]
   154c6:	2945      	cmp	r1, #69	; 0x45
   154c8:	4606      	mov	r6, r0
   154ca:	f000 8099 	beq.w	15600 <d_name+0x16c>
   154ce:	2200      	movs	r2, #0
   154d0:	4610      	mov	r0, r2
   154d2:	b005      	add	sp, #20
   154d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   154d8:	f000 fe40 	bl	1615c <d_unqualified_name>
   154dc:	4602      	mov	r2, r0
   154de:	4610      	mov	r0, r2
   154e0:	b005      	add	sp, #20
   154e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   154e6:	3201      	adds	r2, #1
   154e8:	60c2      	str	r2, [r0, #12]
   154ea:	a903      	add	r1, sp, #12
   154ec:	2201      	movs	r2, #1
   154ee:	f7fe ff49 	bl	14384 <d_cv_qualifiers>
   154f2:	4681      	mov	r9, r0
   154f4:	2800      	cmp	r0, #0
   154f6:	d0ea      	beq.n	154ce <d_name+0x3a>
   154f8:	2100      	movs	r1, #0
   154fa:	4628      	mov	r0, r5
   154fc:	f7fe ffa8 	bl	14450 <d_ref_qualifier>
   15500:	68ea      	ldr	r2, [r5, #12]
   15502:	4eb4      	ldr	r6, [pc, #720]	; (157d4 <d_name+0x340>)
   15504:	7814      	ldrb	r4, [r2, #0]
   15506:	4680      	mov	r8, r0
   15508:	2700      	movs	r7, #0
   1550a:	2c00      	cmp	r4, #0
   1550c:	f000 80e8 	beq.w	156e0 <d_name+0x24c>
   15510:	2c44      	cmp	r4, #68	; 0x44
   15512:	f000 80d1 	beq.w	156b8 <d_name+0x224>
   15516:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1551a:	b2db      	uxtb	r3, r3
   1551c:	2b1c      	cmp	r3, #28
   1551e:	f240 80a8 	bls.w	15672 <d_name+0x1de>
   15522:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   15526:	2b19      	cmp	r3, #25
   15528:	f240 80a8 	bls.w	1567c <d_name+0x1e8>
   1552c:	2c55      	cmp	r4, #85	; 0x55
   1552e:	f000 80de 	beq.w	156ee <d_name+0x25a>
   15532:	2c53      	cmp	r4, #83	; 0x53
   15534:	f000 80f1 	beq.w	1571a <d_name+0x286>
   15538:	2c49      	cmp	r4, #73	; 0x49
   1553a:	f000 80da 	beq.w	156f2 <d_name+0x25e>
   1553e:	2c54      	cmp	r4, #84	; 0x54
   15540:	f000 811f 	beq.w	15782 <d_name+0x2ee>
   15544:	2c45      	cmp	r4, #69	; 0x45
   15546:	f000 814b 	beq.w	157e0 <d_name+0x34c>
   1554a:	2c4d      	cmp	r4, #77	; 0x4d
   1554c:	f040 80c8 	bne.w	156e0 <d_name+0x24c>
   15550:	2f00      	cmp	r7, #0
   15552:	f000 80c5 	beq.w	156e0 <d_name+0x24c>
   15556:	1c53      	adds	r3, r2, #1
   15558:	60eb      	str	r3, [r5, #12]
   1555a:	7854      	ldrb	r4, [r2, #1]
   1555c:	461a      	mov	r2, r3
   1555e:	e7d4      	b.n	1550a <d_name+0x76>
   15560:	7853      	ldrb	r3, [r2, #1]
   15562:	2b74      	cmp	r3, #116	; 0x74
   15564:	d031      	beq.n	155ca <d_name+0x136>
   15566:	2100      	movs	r1, #0
   15568:	f7ff f90a 	bl	14780 <d_substitution>
   1556c:	68eb      	ldr	r3, [r5, #12]
   1556e:	7819      	ldrb	r1, [r3, #0]
   15570:	2949      	cmp	r1, #73	; 0x49
   15572:	4602      	mov	r2, r0
   15574:	d1b3      	bne.n	154de <d_name+0x4a>
   15576:	3301      	adds	r3, #1
   15578:	60eb      	str	r3, [r5, #12]
   1557a:	4628      	mov	r0, r5
   1557c:	9201      	str	r2, [sp, #4]
   1557e:	f7ff ff1b 	bl	153b8 <d_template_args_1>
   15582:	9a01      	ldr	r2, [sp, #4]
   15584:	4603      	mov	r3, r0
   15586:	e017      	b.n	155b8 <d_name+0x124>
   15588:	f000 fde8 	bl	1615c <d_unqualified_name>
   1558c:	68eb      	ldr	r3, [r5, #12]
   1558e:	7819      	ldrb	r1, [r3, #0]
   15590:	2949      	cmp	r1, #73	; 0x49
   15592:	4602      	mov	r2, r0
   15594:	d1a3      	bne.n	154de <d_name+0x4a>
   15596:	2a00      	cmp	r2, #0
   15598:	d099      	beq.n	154ce <d_name+0x3a>
   1559a:	6a29      	ldr	r1, [r5, #32]
   1559c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1559e:	4281      	cmp	r1, r0
   155a0:	da95      	bge.n	154ce <d_name+0x3a>
   155a2:	69ec      	ldr	r4, [r5, #28]
   155a4:	1c48      	adds	r0, r1, #1
   155a6:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   155aa:	6228      	str	r0, [r5, #32]
   155ac:	7819      	ldrb	r1, [r3, #0]
   155ae:	3949      	subs	r1, #73	; 0x49
   155b0:	2901      	cmp	r1, #1
   155b2:	bf88      	it	hi
   155b4:	2300      	movhi	r3, #0
   155b6:	d9de      	bls.n	15576 <d_name+0xe2>
   155b8:	4628      	mov	r0, r5
   155ba:	2104      	movs	r1, #4
   155bc:	f7fe fe96 	bl	142ec <d_make_comp>
   155c0:	4602      	mov	r2, r0
   155c2:	4610      	mov	r0, r2
   155c4:	b005      	add	sp, #20
   155c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   155ca:	6943      	ldr	r3, [r0, #20]
   155cc:	6981      	ldr	r1, [r0, #24]
   155ce:	3202      	adds	r2, #2
   155d0:	428b      	cmp	r3, r1
   155d2:	60c2      	str	r2, [r0, #12]
   155d4:	f2c0 80ab 	blt.w	1572e <d_name+0x29a>
   155d8:	2400      	movs	r4, #0
   155da:	4628      	mov	r0, r5
   155dc:	f000 fdbe 	bl	1615c <d_unqualified_name>
   155e0:	4622      	mov	r2, r4
   155e2:	4603      	mov	r3, r0
   155e4:	2101      	movs	r1, #1
   155e6:	4628      	mov	r0, r5
   155e8:	f7fe fe80 	bl	142ec <d_make_comp>
   155ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
   155ee:	68eb      	ldr	r3, [r5, #12]
   155f0:	3103      	adds	r1, #3
   155f2:	6329      	str	r1, [r5, #48]	; 0x30
   155f4:	7819      	ldrb	r1, [r3, #0]
   155f6:	2949      	cmp	r1, #73	; 0x49
   155f8:	4602      	mov	r2, r0
   155fa:	f47f af70 	bne.w	154de <d_name+0x4a>
   155fe:	e7ca      	b.n	15596 <d_name+0x102>
   15600:	1c5a      	adds	r2, r3, #1
   15602:	60ea      	str	r2, [r5, #12]
   15604:	7859      	ldrb	r1, [r3, #1]
   15606:	2973      	cmp	r1, #115	; 0x73
   15608:	f000 80a3 	beq.w	15752 <d_name+0x2be>
   1560c:	2964      	cmp	r1, #100	; 0x64
   1560e:	f000 80bc 	beq.w	1578a <d_name+0x2f6>
   15612:	4628      	mov	r0, r5
   15614:	f7ff ff3e 	bl	15494 <d_name>
   15618:	4604      	mov	r4, r0
   1561a:	2800      	cmp	r0, #0
   1561c:	d072      	beq.n	15704 <d_name+0x270>
   1561e:	7803      	ldrb	r3, [r0, #0]
   15620:	2b45      	cmp	r3, #69	; 0x45
   15622:	f000 8094 	beq.w	1574e <d_name+0x2ba>
   15626:	2b47      	cmp	r3, #71	; 0x47
   15628:	f000 8091 	beq.w	1574e <d_name+0x2ba>
   1562c:	68eb      	ldr	r3, [r5, #12]
   1562e:	781a      	ldrb	r2, [r3, #0]
   15630:	2a5f      	cmp	r2, #95	; 0x5f
   15632:	f040 808c 	bne.w	1574e <d_name+0x2ba>
   15636:	f04f 37ff 	mov.w	r7, #4294967295
   1563a:	4628      	mov	r0, r5
   1563c:	3301      	adds	r3, #1
   1563e:	f840 3f0c 	str.w	r3, [r0, #12]!
   15642:	f7fe ffa5 	bl	14590 <d_number.isra.0>
   15646:	2800      	cmp	r0, #0
   15648:	f6ff af41 	blt.w	154ce <d_name+0x3a>
   1564c:	1c7b      	adds	r3, r7, #1
   1564e:	d07e      	beq.n	1574e <d_name+0x2ba>
   15650:	696b      	ldr	r3, [r5, #20]
   15652:	69aa      	ldr	r2, [r5, #24]
   15654:	4293      	cmp	r3, r2
   15656:	da55      	bge.n	15704 <d_name+0x270>
   15658:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1565c:	6929      	ldr	r1, [r5, #16]
   1565e:	3301      	adds	r3, #1
   15660:	0092      	lsls	r2, r2, #2
   15662:	616b      	str	r3, [r5, #20]
   15664:	188b      	adds	r3, r1, r2
   15666:	d04e      	beq.n	15706 <d_name+0x272>
   15668:	2046      	movs	r0, #70	; 0x46
   1566a:	5488      	strb	r0, [r1, r2]
   1566c:	609f      	str	r7, [r3, #8]
   1566e:	605c      	str	r4, [r3, #4]
   15670:	e049      	b.n	15706 <d_name+0x272>
   15672:	fa26 f303 	lsr.w	r3, r6, r3
   15676:	07d9      	lsls	r1, r3, #31
   15678:	f57f af53 	bpl.w	15522 <d_name+0x8e>
   1567c:	4628      	mov	r0, r5
   1567e:	f000 fd6d 	bl	1615c <d_unqualified_name>
   15682:	b347      	cbz	r7, 156d6 <d_name+0x242>
   15684:	2101      	movs	r1, #1
   15686:	4603      	mov	r3, r0
   15688:	463a      	mov	r2, r7
   1568a:	4628      	mov	r0, r5
   1568c:	f7fe fe2e 	bl	142ec <d_make_comp>
   15690:	4607      	mov	r7, r0
   15692:	2c53      	cmp	r4, #83	; 0x53
   15694:	d01c      	beq.n	156d0 <d_name+0x23c>
   15696:	68ea      	ldr	r2, [r5, #12]
   15698:	7814      	ldrb	r4, [r2, #0]
   1569a:	2c45      	cmp	r4, #69	; 0x45
   1569c:	f43f af3b 	beq.w	15516 <d_name+0x82>
   156a0:	b1f7      	cbz	r7, 156e0 <d_name+0x24c>
   156a2:	6a2b      	ldr	r3, [r5, #32]
   156a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   156a6:	428b      	cmp	r3, r1
   156a8:	da1a      	bge.n	156e0 <d_name+0x24c>
   156aa:	69e9      	ldr	r1, [r5, #28]
   156ac:	1c58      	adds	r0, r3, #1
   156ae:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   156b2:	6228      	str	r0, [r5, #32]
   156b4:	7814      	ldrb	r4, [r2, #0]
   156b6:	e728      	b.n	1550a <d_name+0x76>
   156b8:	7853      	ldrb	r3, [r2, #1]
   156ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   156be:	2b54      	cmp	r3, #84	; 0x54
   156c0:	4628      	mov	r0, r5
   156c2:	d00a      	beq.n	156da <d_name+0x246>
   156c4:	f000 fd4a 	bl	1615c <d_unqualified_name>
   156c8:	2f00      	cmp	r7, #0
   156ca:	d1db      	bne.n	15684 <d_name+0x1f0>
   156cc:	4607      	mov	r7, r0
   156ce:	e7e2      	b.n	15696 <d_name+0x202>
   156d0:	68ea      	ldr	r2, [r5, #12]
   156d2:	7814      	ldrb	r4, [r2, #0]
   156d4:	e719      	b.n	1550a <d_name+0x76>
   156d6:	4607      	mov	r7, r0
   156d8:	e7db      	b.n	15692 <d_name+0x1fe>
   156da:	f000 f897 	bl	1580c <d_type>
   156de:	e7f3      	b.n	156c8 <d_name+0x234>
   156e0:	2200      	movs	r2, #0
   156e2:	4610      	mov	r0, r2
   156e4:	f8c9 2000 	str.w	r2, [r9]
   156e8:	b005      	add	sp, #20
   156ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156ee:	4628      	mov	r0, r5
   156f0:	e7e8      	b.n	156c4 <d_name+0x230>
   156f2:	2f00      	cmp	r7, #0
   156f4:	d0f4      	beq.n	156e0 <d_name+0x24c>
   156f6:	3201      	adds	r2, #1
   156f8:	60ea      	str	r2, [r5, #12]
   156fa:	4628      	mov	r0, r5
   156fc:	f7ff fe5c 	bl	153b8 <d_template_args_1>
   15700:	2104      	movs	r1, #4
   15702:	e7c0      	b.n	15686 <d_name+0x1f2>
   15704:	2300      	movs	r3, #0
   15706:	4632      	mov	r2, r6
   15708:	4628      	mov	r0, r5
   1570a:	2102      	movs	r1, #2
   1570c:	f7fe fdee 	bl	142ec <d_make_comp>
   15710:	4602      	mov	r2, r0
   15712:	4610      	mov	r0, r2
   15714:	b005      	add	sp, #20
   15716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1571a:	2101      	movs	r1, #1
   1571c:	4628      	mov	r0, r5
   1571e:	f7ff f82f 	bl	14780 <d_substitution>
   15722:	2f00      	cmp	r7, #0
   15724:	d1ae      	bne.n	15684 <d_name+0x1f0>
   15726:	68ea      	ldr	r2, [r5, #12]
   15728:	4607      	mov	r7, r0
   1572a:	7814      	ldrb	r4, [r2, #0]
   1572c:	e6ed      	b.n	1550a <d_name+0x76>
   1572e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15732:	6901      	ldr	r1, [r0, #16]
   15734:	0092      	lsls	r2, r2, #2
   15736:	3301      	adds	r3, #1
   15738:	188c      	adds	r4, r1, r2
   1573a:	6143      	str	r3, [r0, #20]
   1573c:	f43f af4d 	beq.w	155da <d_name+0x146>
   15740:	2300      	movs	r3, #0
   15742:	548b      	strb	r3, [r1, r2]
   15744:	4824      	ldr	r0, [pc, #144]	; (157d8 <d_name+0x344>)
   15746:	6060      	str	r0, [r4, #4]
   15748:	2303      	movs	r3, #3
   1574a:	60a3      	str	r3, [r4, #8]
   1574c:	e745      	b.n	155da <d_name+0x146>
   1574e:	4623      	mov	r3, r4
   15750:	e7d9      	b.n	15706 <d_name+0x272>
   15752:	1c9a      	adds	r2, r3, #2
   15754:	60ea      	str	r2, [r5, #12]
   15756:	789a      	ldrb	r2, [r3, #2]
   15758:	2a5f      	cmp	r2, #95	; 0x5f
   1575a:	d032      	beq.n	157c2 <d_name+0x32e>
   1575c:	696b      	ldr	r3, [r5, #20]
   1575e:	69aa      	ldr	r2, [r5, #24]
   15760:	4293      	cmp	r3, r2
   15762:	dacf      	bge.n	15704 <d_name+0x270>
   15764:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15768:	6929      	ldr	r1, [r5, #16]
   1576a:	3301      	adds	r3, #1
   1576c:	0092      	lsls	r2, r2, #2
   1576e:	616b      	str	r3, [r5, #20]
   15770:	188b      	adds	r3, r1, r2
   15772:	d0c8      	beq.n	15706 <d_name+0x272>
   15774:	2400      	movs	r4, #0
   15776:	548c      	strb	r4, [r1, r2]
   15778:	4818      	ldr	r0, [pc, #96]	; (157dc <d_name+0x348>)
   1577a:	6058      	str	r0, [r3, #4]
   1577c:	220e      	movs	r2, #14
   1577e:	609a      	str	r2, [r3, #8]
   15780:	e7c1      	b.n	15706 <d_name+0x272>
   15782:	4628      	mov	r0, r5
   15784:	f7fe ff62 	bl	1464c <d_template_param>
   15788:	e79e      	b.n	156c8 <d_name+0x234>
   1578a:	3302      	adds	r3, #2
   1578c:	60eb      	str	r3, [r5, #12]
   1578e:	4628      	mov	r0, r5
   15790:	f7fe ff40 	bl	14614 <d_compact_number>
   15794:	1e07      	subs	r7, r0, #0
   15796:	f6ff ae9a 	blt.w	154ce <d_name+0x3a>
   1579a:	4628      	mov	r0, r5
   1579c:	f7ff fe7a 	bl	15494 <d_name>
   157a0:	4604      	mov	r4, r0
   157a2:	2800      	cmp	r0, #0
   157a4:	f43f af54 	beq.w	15650 <d_name+0x1bc>
   157a8:	7803      	ldrb	r3, [r0, #0]
   157aa:	2b45      	cmp	r3, #69	; 0x45
   157ac:	f43f af50 	beq.w	15650 <d_name+0x1bc>
   157b0:	2b47      	cmp	r3, #71	; 0x47
   157b2:	f43f af4d 	beq.w	15650 <d_name+0x1bc>
   157b6:	68eb      	ldr	r3, [r5, #12]
   157b8:	781a      	ldrb	r2, [r3, #0]
   157ba:	2a5f      	cmp	r2, #95	; 0x5f
   157bc:	f47f af48 	bne.w	15650 <d_name+0x1bc>
   157c0:	e73b      	b.n	1563a <d_name+0x1a6>
   157c2:	4628      	mov	r0, r5
   157c4:	3303      	adds	r3, #3
   157c6:	f840 3f0c 	str.w	r3, [r0, #12]!
   157ca:	f7fe fee1 	bl	14590 <d_number.isra.0>
   157ce:	2800      	cmp	r0, #0
   157d0:	dac4      	bge.n	1575c <d_name+0x2c8>
   157d2:	e67c      	b.n	154ce <d_name+0x3a>
   157d4:	100803ff 	.word	0x100803ff
   157d8:	000241c8 	.word	0x000241c8
   157dc:	000241b8 	.word	0x000241b8
   157e0:	f8c9 7000 	str.w	r7, [r9]
   157e4:	2f00      	cmp	r7, #0
   157e6:	f43f ae72 	beq.w	154ce <d_name+0x3a>
   157ea:	f1b8 0f00 	cmp.w	r8, #0
   157ee:	d004      	beq.n	157fa <d_name+0x366>
   157f0:	9b03      	ldr	r3, [sp, #12]
   157f2:	f8c8 3004 	str.w	r3, [r8, #4]
   157f6:	f8cd 800c 	str.w	r8, [sp, #12]
   157fa:	7813      	ldrb	r3, [r2, #0]
   157fc:	2b45      	cmp	r3, #69	; 0x45
   157fe:	f47f ae66 	bne.w	154ce <d_name+0x3a>
   15802:	3201      	adds	r2, #1
   15804:	60ea      	str	r2, [r5, #12]
   15806:	9a03      	ldr	r2, [sp, #12]
   15808:	e669      	b.n	154de <d_name+0x4a>
   1580a:	bf00      	nop

0001580c <d_type>:
   1580c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15810:	68c2      	ldr	r2, [r0, #12]
   15812:	7813      	ldrb	r3, [r2, #0]
   15814:	2b72      	cmp	r3, #114	; 0x72
   15816:	b083      	sub	sp, #12
   15818:	4604      	mov	r4, r0
   1581a:	d058      	beq.n	158ce <d_type+0xc2>
   1581c:	2b56      	cmp	r3, #86	; 0x56
   1581e:	d056      	beq.n	158ce <d_type+0xc2>
   15820:	2b4b      	cmp	r3, #75	; 0x4b
   15822:	d054      	beq.n	158ce <d_type+0xc2>
   15824:	2b44      	cmp	r3, #68	; 0x44
   15826:	f000 809f 	beq.w	15968 <d_type+0x15c>
   1582a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1582e:	294a      	cmp	r1, #74	; 0x4a
   15830:	f200 808a 	bhi.w	15948 <d_type+0x13c>
   15834:	e8df f011 	tbh	[pc, r1, lsl #1]
   15838:	012a012a 	.word	0x012a012a
   1583c:	012a012a 	.word	0x012a012a
   15840:	012a012a 	.word	0x012a012a
   15844:	012a012a 	.word	0x012a012a
   15848:	012a012a 	.word	0x012a012a
   1584c:	00880088 	.word	0x00880088
   15850:	00880088 	.word	0x00880088
   15854:	00880088 	.word	0x00880088
   15858:	020b0088 	.word	0x020b0088
   1585c:	01520088 	.word	0x01520088
   15860:	00880088 	.word	0x00880088
   15864:	0160014c 	.word	0x0160014c
   15868:	00880088 	.word	0x00880088
   1586c:	00880088 	.word	0x00880088
   15870:	016e0088 	.word	0x016e0088
   15874:	0186012a 	.word	0x0186012a
   15878:	008801c3 	.word	0x008801c3
   1587c:	01a20194 	.word	0x01a20194
   15880:	01f301d1 	.word	0x01f301d1
   15884:	00880088 	.word	0x00880088
   15888:	00880088 	.word	0x00880088
   1588c:	0088012a 	.word	0x0088012a
   15890:	00880088 	.word	0x00880088
   15894:	00880088 	.word	0x00880088
   15898:	010c0088 	.word	0x010c0088
   1589c:	010c010c 	.word	0x010c010c
   158a0:	010c010c 	.word	0x010c010c
   158a4:	010c010c 	.word	0x010c010c
   158a8:	010c010c 	.word	0x010c010c
   158ac:	0088010c 	.word	0x0088010c
   158b0:	010c010c 	.word	0x010c010c
   158b4:	010c010c 	.word	0x010c010c
   158b8:	00880088 	.word	0x00880088
   158bc:	010c0088 	.word	0x010c0088
   158c0:	013e010c 	.word	0x013e010c
   158c4:	010c010c 	.word	0x010c010c
   158c8:	010c010c 	.word	0x010c010c
   158cc:	010c      	.short	0x010c
   158ce:	2200      	movs	r2, #0
   158d0:	a901      	add	r1, sp, #4
   158d2:	4620      	mov	r0, r4
   158d4:	f7fe fd56 	bl	14384 <d_cv_qualifiers>
   158d8:	4605      	mov	r5, r0
   158da:	2800      	cmp	r0, #0
   158dc:	d034      	beq.n	15948 <d_type+0x13c>
   158de:	68e3      	ldr	r3, [r4, #12]
   158e0:	781b      	ldrb	r3, [r3, #0]
   158e2:	2b46      	cmp	r3, #70	; 0x46
   158e4:	4620      	mov	r0, r4
   158e6:	d034      	beq.n	15952 <d_type+0x146>
   158e8:	f7ff ff90 	bl	1580c <d_type>
   158ec:	6028      	str	r0, [r5, #0]
   158ee:	b358      	cbz	r0, 15948 <d_type+0x13c>
   158f0:	7803      	ldrb	r3, [r0, #0]
   158f2:	3b1f      	subs	r3, #31
   158f4:	2b01      	cmp	r3, #1
   158f6:	d930      	bls.n	1595a <d_type+0x14e>
   158f8:	9a01      	ldr	r2, [sp, #4]
   158fa:	b32a      	cbz	r2, 15948 <d_type+0x13c>
   158fc:	6a23      	ldr	r3, [r4, #32]
   158fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15900:	428b      	cmp	r3, r1
   15902:	da21      	bge.n	15948 <d_type+0x13c>
   15904:	69e0      	ldr	r0, [r4, #28]
   15906:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   1590a:	9d01      	ldr	r5, [sp, #4]
   1590c:	1c59      	adds	r1, r3, #1
   1590e:	4628      	mov	r0, r5
   15910:	6221      	str	r1, [r4, #32]
   15912:	b003      	add	sp, #12
   15914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15918:	2301      	movs	r3, #1
   1591a:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1591c:	6343      	str	r3, [r0, #52]	; 0x34
   1591e:	f7ff fb51 	bl	14fc4 <d_expression_1>
   15922:	6365      	str	r5, [r4, #52]	; 0x34
   15924:	4602      	mov	r2, r0
   15926:	2300      	movs	r3, #0
   15928:	2142      	movs	r1, #66	; 0x42
   1592a:	4620      	mov	r0, r4
   1592c:	f7fe fcde 	bl	142ec <d_make_comp>
   15930:	4605      	mov	r5, r0
   15932:	9001      	str	r0, [sp, #4]
   15934:	b140      	cbz	r0, 15948 <d_type+0x13c>
   15936:	68e3      	ldr	r3, [r4, #12]
   15938:	781a      	ldrb	r2, [r3, #0]
   1593a:	b12a      	cbz	r2, 15948 <d_type+0x13c>
   1593c:	1c5a      	adds	r2, r3, #1
   1593e:	60e2      	str	r2, [r4, #12]
   15940:	781b      	ldrb	r3, [r3, #0]
   15942:	2b45      	cmp	r3, #69	; 0x45
   15944:	f000 80aa 	beq.w	15a9c <d_type+0x290>
   15948:	2500      	movs	r5, #0
   1594a:	4628      	mov	r0, r5
   1594c:	b003      	add	sp, #12
   1594e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15952:	f000 fd53 	bl	163fc <d_function_type>
   15956:	6028      	str	r0, [r5, #0]
   15958:	e7c9      	b.n	158ee <d_type+0xe2>
   1595a:	9a01      	ldr	r2, [sp, #4]
   1595c:	6843      	ldr	r3, [r0, #4]
   1595e:	6042      	str	r2, [r0, #4]
   15960:	682a      	ldr	r2, [r5, #0]
   15962:	9201      	str	r2, [sp, #4]
   15964:	602b      	str	r3, [r5, #0]
   15966:	e7c7      	b.n	158f8 <d_type+0xec>
   15968:	7853      	ldrb	r3, [r2, #1]
   1596a:	2b78      	cmp	r3, #120	; 0x78
   1596c:	d0af      	beq.n	158ce <d_type+0xc2>
   1596e:	1c53      	adds	r3, r2, #1
   15970:	60c3      	str	r3, [r0, #12]
   15972:	7853      	ldrb	r3, [r2, #1]
   15974:	2b00      	cmp	r3, #0
   15976:	d0e7      	beq.n	15948 <d_type+0x13c>
   15978:	1c93      	adds	r3, r2, #2
   1597a:	60c3      	str	r3, [r0, #12]
   1597c:	7853      	ldrb	r3, [r2, #1]
   1597e:	3b46      	subs	r3, #70	; 0x46
   15980:	2b30      	cmp	r3, #48	; 0x30
   15982:	d8e1      	bhi.n	15948 <d_type+0x13c>
   15984:	a101      	add	r1, pc, #4	; (adr r1, 1598c <d_type+0x180>)
   15986:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1598a:	bf00      	nop
   1598c:	00015e77 	.word	0x00015e77
   15990:	00015949 	.word	0x00015949
   15994:	00015949 	.word	0x00015949
   15998:	00015949 	.word	0x00015949
   1599c:	00015949 	.word	0x00015949
   159a0:	00015949 	.word	0x00015949
   159a4:	00015949 	.word	0x00015949
   159a8:	00015949 	.word	0x00015949
   159ac:	00015949 	.word	0x00015949
   159b0:	00015949 	.word	0x00015949
   159b4:	00015949 	.word	0x00015949
   159b8:	00015949 	.word	0x00015949
   159bc:	00015949 	.word	0x00015949
   159c0:	00015949 	.word	0x00015949
   159c4:	00015919 	.word	0x00015919
   159c8:	00015949 	.word	0x00015949
   159cc:	00015949 	.word	0x00015949
   159d0:	00015949 	.word	0x00015949
   159d4:	00015949 	.word	0x00015949
   159d8:	00015949 	.word	0x00015949
   159dc:	00015949 	.word	0x00015949
   159e0:	00015949 	.word	0x00015949
   159e4:	00015949 	.word	0x00015949
   159e8:	00015949 	.word	0x00015949
   159ec:	00015949 	.word	0x00015949
   159f0:	00015949 	.word	0x00015949
   159f4:	00015949 	.word	0x00015949
   159f8:	00015e4b 	.word	0x00015e4b
   159fc:	00015949 	.word	0x00015949
   15a00:	00015e1f 	.word	0x00015e1f
   15a04:	00015dff 	.word	0x00015dff
   15a08:	00015dd5 	.word	0x00015dd5
   15a0c:	00015da7 	.word	0x00015da7
   15a10:	00015949 	.word	0x00015949
   15a14:	00015d79 	.word	0x00015d79
   15a18:	00015d55 	.word	0x00015d55
   15a1c:	00015949 	.word	0x00015949
   15a20:	00015949 	.word	0x00015949
   15a24:	00015949 	.word	0x00015949
   15a28:	00015949 	.word	0x00015949
   15a2c:	00015d1b 	.word	0x00015d1b
   15a30:	00015949 	.word	0x00015949
   15a34:	00015d05 	.word	0x00015d05
   15a38:	00015949 	.word	0x00015949
   15a3c:	00015949 	.word	0x00015949
   15a40:	00015cd7 	.word	0x00015cd7
   15a44:	00015919 	.word	0x00015919
   15a48:	00015949 	.word	0x00015949
   15a4c:	00015ca1 	.word	0x00015ca1
   15a50:	6960      	ldr	r0, [r4, #20]
   15a52:	69a5      	ldr	r5, [r4, #24]
   15a54:	49bc      	ldr	r1, [pc, #752]	; (15d48 <d_type+0x53c>)
   15a56:	3b61      	subs	r3, #97	; 0x61
   15a58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15a5c:	42a8      	cmp	r0, r5
   15a5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15a62:	f280 823a 	bge.w	15eda <d_type+0x6ce>
   15a66:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15a6a:	6926      	ldr	r6, [r4, #16]
   15a6c:	0089      	lsls	r1, r1, #2
   15a6e:	3001      	adds	r0, #1
   15a70:	1875      	adds	r5, r6, r1
   15a72:	6160      	str	r0, [r4, #20]
   15a74:	f000 8231 	beq.w	15eda <d_type+0x6ce>
   15a78:	2027      	movs	r0, #39	; 0x27
   15a7a:	5470      	strb	r0, [r6, r1]
   15a7c:	606b      	str	r3, [r5, #4]
   15a7e:	6859      	ldr	r1, [r3, #4]
   15a80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15a82:	3201      	adds	r2, #1
   15a84:	440b      	add	r3, r1
   15a86:	60e2      	str	r2, [r4, #12]
   15a88:	6323      	str	r3, [r4, #48]	; 0x30
   15a8a:	e75e      	b.n	1594a <d_type+0x13e>
   15a8c:	4620      	mov	r0, r4
   15a8e:	f7ff fd01 	bl	15494 <d_name>
   15a92:	4605      	mov	r5, r0
   15a94:	9001      	str	r0, [sp, #4]
   15a96:	2d00      	cmp	r5, #0
   15a98:	f43f af56 	beq.w	15948 <d_type+0x13c>
   15a9c:	6a23      	ldr	r3, [r4, #32]
   15a9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15aa0:	4293      	cmp	r3, r2
   15aa2:	f6bf af51 	bge.w	15948 <d_type+0x13c>
   15aa6:	69e1      	ldr	r1, [r4, #28]
   15aa8:	1c5a      	adds	r2, r3, #1
   15aaa:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15aae:	9d01      	ldr	r5, [sp, #4]
   15ab0:	6222      	str	r2, [r4, #32]
   15ab2:	e74a      	b.n	1594a <d_type+0x13e>
   15ab4:	3201      	adds	r2, #1
   15ab6:	60e2      	str	r2, [r4, #12]
   15ab8:	4620      	mov	r0, r4
   15aba:	f7fe fde9 	bl	14690 <d_source_name>
   15abe:	2300      	movs	r3, #0
   15ac0:	4602      	mov	r2, r0
   15ac2:	2128      	movs	r1, #40	; 0x28
   15ac4:	4620      	mov	r0, r4
   15ac6:	f7fe fc11 	bl	142ec <d_make_comp>
   15aca:	4605      	mov	r5, r0
   15acc:	9001      	str	r0, [sp, #4]
   15ace:	e7e2      	b.n	15a96 <d_type+0x28a>
   15ad0:	4620      	mov	r0, r4
   15ad2:	f000 fc93 	bl	163fc <d_function_type>
   15ad6:	4605      	mov	r5, r0
   15ad8:	9001      	str	r0, [sp, #4]
   15ada:	e7dc      	b.n	15a96 <d_type+0x28a>
   15adc:	3201      	adds	r2, #1
   15ade:	60e2      	str	r2, [r4, #12]
   15ae0:	4620      	mov	r0, r4
   15ae2:	f7ff fe93 	bl	1580c <d_type>
   15ae6:	2300      	movs	r3, #0
   15ae8:	4602      	mov	r2, r0
   15aea:	2125      	movs	r1, #37	; 0x25
   15aec:	4620      	mov	r0, r4
   15aee:	f7fe fbfd 	bl	142ec <d_make_comp>
   15af2:	4605      	mov	r5, r0
   15af4:	9001      	str	r0, [sp, #4]
   15af6:	e7ce      	b.n	15a96 <d_type+0x28a>
   15af8:	3201      	adds	r2, #1
   15afa:	60e2      	str	r2, [r4, #12]
   15afc:	4620      	mov	r0, r4
   15afe:	f7ff fe85 	bl	1580c <d_type>
   15b02:	2300      	movs	r3, #0
   15b04:	4602      	mov	r2, r0
   15b06:	2126      	movs	r1, #38	; 0x26
   15b08:	4620      	mov	r0, r4
   15b0a:	f7fe fbef 	bl	142ec <d_make_comp>
   15b0e:	4605      	mov	r5, r0
   15b10:	9001      	str	r0, [sp, #4]
   15b12:	e7c0      	b.n	15a96 <d_type+0x28a>
   15b14:	3201      	adds	r2, #1
   15b16:	60e2      	str	r2, [r4, #12]
   15b18:	4620      	mov	r0, r4
   15b1a:	f7ff fe77 	bl	1580c <d_type>
   15b1e:	4605      	mov	r5, r0
   15b20:	2800      	cmp	r0, #0
   15b22:	f000 80bb 	beq.w	15c9c <d_type+0x490>
   15b26:	4620      	mov	r0, r4
   15b28:	f7ff fe70 	bl	1580c <d_type>
   15b2c:	2800      	cmp	r0, #0
   15b2e:	f000 80b5 	beq.w	15c9c <d_type+0x490>
   15b32:	4603      	mov	r3, r0
   15b34:	462a      	mov	r2, r5
   15b36:	212b      	movs	r1, #43	; 0x2b
   15b38:	4620      	mov	r0, r4
   15b3a:	f7fe fbd7 	bl	142ec <d_make_comp>
   15b3e:	4605      	mov	r5, r0
   15b40:	9501      	str	r5, [sp, #4]
   15b42:	e7a8      	b.n	15a96 <d_type+0x28a>
   15b44:	3201      	adds	r2, #1
   15b46:	60e2      	str	r2, [r4, #12]
   15b48:	4620      	mov	r0, r4
   15b4a:	f7ff fe5f 	bl	1580c <d_type>
   15b4e:	2300      	movs	r3, #0
   15b50:	4602      	mov	r2, r0
   15b52:	2124      	movs	r1, #36	; 0x24
   15b54:	4620      	mov	r0, r4
   15b56:	f7fe fbc9 	bl	142ec <d_make_comp>
   15b5a:	4605      	mov	r5, r0
   15b5c:	9001      	str	r0, [sp, #4]
   15b5e:	e79a      	b.n	15a96 <d_type+0x28a>
   15b60:	3201      	adds	r2, #1
   15b62:	60e2      	str	r2, [r4, #12]
   15b64:	4620      	mov	r0, r4
   15b66:	f7ff fe51 	bl	1580c <d_type>
   15b6a:	2300      	movs	r3, #0
   15b6c:	4602      	mov	r2, r0
   15b6e:	2123      	movs	r1, #35	; 0x23
   15b70:	4620      	mov	r0, r4
   15b72:	f7fe fbbb 	bl	142ec <d_make_comp>
   15b76:	4605      	mov	r5, r0
   15b78:	9001      	str	r0, [sp, #4]
   15b7a:	e78c      	b.n	15a96 <d_type+0x28a>
   15b7c:	7853      	ldrb	r3, [r2, #1]
   15b7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15b82:	2a09      	cmp	r2, #9
   15b84:	d905      	bls.n	15b92 <d_type+0x386>
   15b86:	2b5f      	cmp	r3, #95	; 0x5f
   15b88:	d003      	beq.n	15b92 <d_type+0x386>
   15b8a:	3b41      	subs	r3, #65	; 0x41
   15b8c:	2b19      	cmp	r3, #25
   15b8e:	f200 81c3 	bhi.w	15f18 <d_type+0x70c>
   15b92:	2100      	movs	r1, #0
   15b94:	4620      	mov	r0, r4
   15b96:	f7fe fdf3 	bl	14780 <d_substitution>
   15b9a:	68e3      	ldr	r3, [r4, #12]
   15b9c:	9001      	str	r0, [sp, #4]
   15b9e:	781b      	ldrb	r3, [r3, #0]
   15ba0:	2b49      	cmp	r3, #73	; 0x49
   15ba2:	4605      	mov	r5, r0
   15ba4:	f47f aed1 	bne.w	1594a <d_type+0x13e>
   15ba8:	4620      	mov	r0, r4
   15baa:	f7ff fc69 	bl	15480 <d_template_args>
   15bae:	462a      	mov	r2, r5
   15bb0:	4603      	mov	r3, r0
   15bb2:	2104      	movs	r1, #4
   15bb4:	4620      	mov	r0, r4
   15bb6:	f7fe fb99 	bl	142ec <d_make_comp>
   15bba:	4605      	mov	r5, r0
   15bbc:	e7c0      	b.n	15b40 <d_type+0x334>
   15bbe:	3201      	adds	r2, #1
   15bc0:	60e2      	str	r2, [r4, #12]
   15bc2:	4620      	mov	r0, r4
   15bc4:	f7ff fe22 	bl	1580c <d_type>
   15bc8:	2300      	movs	r3, #0
   15bca:	4602      	mov	r2, r0
   15bcc:	2122      	movs	r1, #34	; 0x22
   15bce:	4620      	mov	r0, r4
   15bd0:	f7fe fb8c 	bl	142ec <d_make_comp>
   15bd4:	4605      	mov	r5, r0
   15bd6:	9001      	str	r0, [sp, #4]
   15bd8:	e75d      	b.n	15a96 <d_type+0x28a>
   15bda:	4620      	mov	r0, r4
   15bdc:	f7fe fd36 	bl	1464c <d_template_param>
   15be0:	68e6      	ldr	r6, [r4, #12]
   15be2:	9001      	str	r0, [sp, #4]
   15be4:	7833      	ldrb	r3, [r6, #0]
   15be6:	2b49      	cmp	r3, #73	; 0x49
   15be8:	4605      	mov	r5, r0
   15bea:	f47f af54 	bne.w	15a96 <d_type+0x28a>
   15bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15bf0:	2b00      	cmp	r3, #0
   15bf2:	f040 81a9 	bne.w	15f48 <d_type+0x73c>
   15bf6:	2800      	cmp	r0, #0
   15bf8:	f43f aea6 	beq.w	15948 <d_type+0x13c>
   15bfc:	6a23      	ldr	r3, [r4, #32]
   15bfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15c00:	4293      	cmp	r3, r2
   15c02:	f6bf aea1 	bge.w	15948 <d_type+0x13c>
   15c06:	69e1      	ldr	r1, [r4, #28]
   15c08:	1c5a      	adds	r2, r3, #1
   15c0a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15c0e:	6222      	str	r2, [r4, #32]
   15c10:	4620      	mov	r0, r4
   15c12:	9d01      	ldr	r5, [sp, #4]
   15c14:	f7ff fc34 	bl	15480 <d_template_args>
   15c18:	462a      	mov	r2, r5
   15c1a:	4603      	mov	r3, r0
   15c1c:	e7c9      	b.n	15bb2 <d_type+0x3a6>
   15c1e:	3201      	adds	r2, #1
   15c20:	60e2      	str	r2, [r4, #12]
   15c22:	4620      	mov	r0, r4
   15c24:	f7fe fd34 	bl	14690 <d_source_name>
   15c28:	68e3      	ldr	r3, [r4, #12]
   15c2a:	9001      	str	r0, [sp, #4]
   15c2c:	781b      	ldrb	r3, [r3, #0]
   15c2e:	2b49      	cmp	r3, #73	; 0x49
   15c30:	4605      	mov	r5, r0
   15c32:	f000 817e 	beq.w	15f32 <d_type+0x726>
   15c36:	4620      	mov	r0, r4
   15c38:	f7ff fde8 	bl	1580c <d_type>
   15c3c:	9b01      	ldr	r3, [sp, #4]
   15c3e:	4602      	mov	r2, r0
   15c40:	2121      	movs	r1, #33	; 0x21
   15c42:	4620      	mov	r0, r4
   15c44:	f7fe fb52 	bl	142ec <d_make_comp>
   15c48:	4605      	mov	r5, r0
   15c4a:	9001      	str	r0, [sp, #4]
   15c4c:	e723      	b.n	15a96 <d_type+0x28a>
   15c4e:	1c51      	adds	r1, r2, #1
   15c50:	60e1      	str	r1, [r4, #12]
   15c52:	7853      	ldrb	r3, [r2, #1]
   15c54:	2b5f      	cmp	r3, #95	; 0x5f
   15c56:	f000 8144 	beq.w	15ee2 <d_type+0x6d6>
   15c5a:	3b30      	subs	r3, #48	; 0x30
   15c5c:	2b09      	cmp	r3, #9
   15c5e:	f200 814e 	bhi.w	15efe <d_type+0x6f2>
   15c62:	460b      	mov	r3, r1
   15c64:	3301      	adds	r3, #1
   15c66:	60e3      	str	r3, [r4, #12]
   15c68:	781a      	ldrb	r2, [r3, #0]
   15c6a:	3a30      	subs	r2, #48	; 0x30
   15c6c:	2a09      	cmp	r2, #9
   15c6e:	d9f9      	bls.n	15c64 <d_type+0x458>
   15c70:	6962      	ldr	r2, [r4, #20]
   15c72:	69a0      	ldr	r0, [r4, #24]
   15c74:	4282      	cmp	r2, r0
   15c76:	da11      	bge.n	15c9c <d_type+0x490>
   15c78:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15c7c:	6926      	ldr	r6, [r4, #16]
   15c7e:	0080      	lsls	r0, r0, #2
   15c80:	3201      	adds	r2, #1
   15c82:	1835      	adds	r5, r6, r0
   15c84:	6162      	str	r2, [r4, #20]
   15c86:	d009      	beq.n	15c9c <d_type+0x490>
   15c88:	1a5a      	subs	r2, r3, r1
   15c8a:	d007      	beq.n	15c9c <d_type+0x490>
   15c8c:	2700      	movs	r7, #0
   15c8e:	5437      	strb	r7, [r6, r0]
   15c90:	6069      	str	r1, [r5, #4]
   15c92:	60aa      	str	r2, [r5, #8]
   15c94:	781a      	ldrb	r2, [r3, #0]
   15c96:	2a5f      	cmp	r2, #95	; 0x5f
   15c98:	f000 8190 	beq.w	15fbc <d_type+0x7b0>
   15c9c:	2500      	movs	r5, #0
   15c9e:	e74f      	b.n	15b40 <d_type+0x334>
   15ca0:	7893      	ldrb	r3, [r2, #2]
   15ca2:	2b5f      	cmp	r3, #95	; 0x5f
   15ca4:	f000 8180 	beq.w	15fa8 <d_type+0x79c>
   15ca8:	f7fe fc9c 	bl	145e4 <d_number_component>
   15cac:	4605      	mov	r5, r0
   15cae:	2d00      	cmp	r5, #0
   15cb0:	f43f af46 	beq.w	15b40 <d_type+0x334>
   15cb4:	68e3      	ldr	r3, [r4, #12]
   15cb6:	781a      	ldrb	r2, [r3, #0]
   15cb8:	2a5f      	cmp	r2, #95	; 0x5f
   15cba:	d1ef      	bne.n	15c9c <d_type+0x490>
   15cbc:	3301      	adds	r3, #1
   15cbe:	60e3      	str	r3, [r4, #12]
   15cc0:	4620      	mov	r0, r4
   15cc2:	f7ff fda3 	bl	1580c <d_type>
   15cc6:	462a      	mov	r2, r5
   15cc8:	4603      	mov	r3, r0
   15cca:	212d      	movs	r1, #45	; 0x2d
   15ccc:	4620      	mov	r0, r4
   15cce:	f7fe fb0d 	bl	142ec <d_make_comp>
   15cd2:	4605      	mov	r5, r0
   15cd4:	e734      	b.n	15b40 <d_type+0x334>
   15cd6:	6942      	ldr	r2, [r0, #20]
   15cd8:	6983      	ldr	r3, [r0, #24]
   15cda:	429a      	cmp	r2, r3
   15cdc:	f280 80fd 	bge.w	15eda <d_type+0x6ce>
   15ce0:	230c      	movs	r3, #12
   15ce2:	6901      	ldr	r1, [r0, #16]
   15ce4:	fb03 f302 	mul.w	r3, r3, r2
   15ce8:	18cd      	adds	r5, r1, r3
   15cea:	f102 0201 	add.w	r2, r2, #1
   15cee:	6142      	str	r2, [r0, #20]
   15cf0:	f000 80f3 	beq.w	15eda <d_type+0x6ce>
   15cf4:	4a15      	ldr	r2, [pc, #84]	; (15d4c <d_type+0x540>)
   15cf6:	2027      	movs	r0, #39	; 0x27
   15cf8:	54c8      	strb	r0, [r1, r3]
   15cfa:	606a      	str	r2, [r5, #4]
   15cfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15cfe:	3308      	adds	r3, #8
   15d00:	6323      	str	r3, [r4, #48]	; 0x30
   15d02:	e622      	b.n	1594a <d_type+0x13e>
   15d04:	f7ff fd82 	bl	1580c <d_type>
   15d08:	2300      	movs	r3, #0
   15d0a:	4602      	mov	r2, r0
   15d0c:	214a      	movs	r1, #74	; 0x4a
   15d0e:	4620      	mov	r0, r4
   15d10:	f7fe faec 	bl	142ec <d_make_comp>
   15d14:	4605      	mov	r5, r0
   15d16:	9001      	str	r0, [sp, #4]
   15d18:	e6bd      	b.n	15a96 <d_type+0x28a>
   15d1a:	6942      	ldr	r2, [r0, #20]
   15d1c:	6983      	ldr	r3, [r0, #24]
   15d1e:	429a      	cmp	r2, r3
   15d20:	f280 80db 	bge.w	15eda <d_type+0x6ce>
   15d24:	230c      	movs	r3, #12
   15d26:	6901      	ldr	r1, [r0, #16]
   15d28:	fb03 f302 	mul.w	r3, r3, r2
   15d2c:	18cd      	adds	r5, r1, r3
   15d2e:	f102 0201 	add.w	r2, r2, #1
   15d32:	6142      	str	r2, [r0, #20]
   15d34:	f000 80d1 	beq.w	15eda <d_type+0x6ce>
   15d38:	2027      	movs	r0, #39	; 0x27
   15d3a:	4a05      	ldr	r2, [pc, #20]	; (15d50 <d_type+0x544>)
   15d3c:	54c8      	strb	r0, [r1, r3]
   15d3e:	606a      	str	r2, [r5, #4]
   15d40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15d42:	3311      	adds	r3, #17
   15d44:	6323      	str	r3, [r4, #48]	; 0x30
   15d46:	e600      	b.n	1594a <d_type+0x13e>
   15d48:	00023aa8 	.word	0x00023aa8
   15d4c:	00023d00 	.word	0x00023d00
   15d50:	00023d28 	.word	0x00023d28
   15d54:	6942      	ldr	r2, [r0, #20]
   15d56:	6983      	ldr	r3, [r0, #24]
   15d58:	429a      	cmp	r2, r3
   15d5a:	f280 80be 	bge.w	15eda <d_type+0x6ce>
   15d5e:	230c      	movs	r3, #12
   15d60:	6901      	ldr	r1, [r0, #16]
   15d62:	fb03 f302 	mul.w	r3, r3, r2
   15d66:	18cd      	adds	r5, r1, r3
   15d68:	f102 0201 	add.w	r2, r2, #1
   15d6c:	6142      	str	r2, [r0, #20]
   15d6e:	f000 80b4 	beq.w	15eda <d_type+0x6ce>
   15d72:	2027      	movs	r0, #39	; 0x27
   15d74:	4a92      	ldr	r2, [pc, #584]	; (15fc0 <d_type+0x7b4>)
   15d76:	e7bf      	b.n	15cf8 <d_type+0x4ec>
   15d78:	6942      	ldr	r2, [r0, #20]
   15d7a:	6983      	ldr	r3, [r0, #24]
   15d7c:	429a      	cmp	r2, r3
   15d7e:	f280 80ac 	bge.w	15eda <d_type+0x6ce>
   15d82:	230c      	movs	r3, #12
   15d84:	6901      	ldr	r1, [r0, #16]
   15d86:	fb03 f302 	mul.w	r3, r3, r2
   15d8a:	18cd      	adds	r5, r1, r3
   15d8c:	f102 0201 	add.w	r2, r2, #1
   15d90:	6142      	str	r2, [r0, #20]
   15d92:	f000 80a2 	beq.w	15eda <d_type+0x6ce>
   15d96:	2027      	movs	r0, #39	; 0x27
   15d98:	4a8a      	ldr	r2, [pc, #552]	; (15fc4 <d_type+0x7b8>)
   15d9a:	54c8      	strb	r0, [r1, r3]
   15d9c:	606a      	str	r2, [r5, #4]
   15d9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15da0:	3304      	adds	r3, #4
   15da2:	6323      	str	r3, [r4, #48]	; 0x30
   15da4:	e5d1      	b.n	1594a <d_type+0x13e>
   15da6:	6942      	ldr	r2, [r0, #20]
   15da8:	6983      	ldr	r3, [r0, #24]
   15daa:	429a      	cmp	r2, r3
   15dac:	f280 8095 	bge.w	15eda <d_type+0x6ce>
   15db0:	230c      	movs	r3, #12
   15db2:	6901      	ldr	r1, [r0, #16]
   15db4:	fb03 f302 	mul.w	r3, r3, r2
   15db8:	18cd      	adds	r5, r1, r3
   15dba:	f102 0201 	add.w	r2, r2, #1
   15dbe:	6142      	str	r2, [r0, #20]
   15dc0:	f000 808b 	beq.w	15eda <d_type+0x6ce>
   15dc4:	4a80      	ldr	r2, [pc, #512]	; (15fc8 <d_type+0x7bc>)
   15dc6:	2027      	movs	r0, #39	; 0x27
   15dc8:	54c8      	strb	r0, [r1, r3]
   15dca:	606a      	str	r2, [r5, #4]
   15dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15dce:	3309      	adds	r3, #9
   15dd0:	6323      	str	r3, [r4, #48]	; 0x30
   15dd2:	e5ba      	b.n	1594a <d_type+0x13e>
   15dd4:	6942      	ldr	r2, [r0, #20]
   15dd6:	6983      	ldr	r3, [r0, #24]
   15dd8:	429a      	cmp	r2, r3
   15dda:	da7e      	bge.n	15eda <d_type+0x6ce>
   15ddc:	230c      	movs	r3, #12
   15dde:	6901      	ldr	r1, [r0, #16]
   15de0:	fb03 f302 	mul.w	r3, r3, r2
   15de4:	18cd      	adds	r5, r1, r3
   15de6:	f102 0201 	add.w	r2, r2, #1
   15dea:	6142      	str	r2, [r0, #20]
   15dec:	d075      	beq.n	15eda <d_type+0x6ce>
   15dee:	2027      	movs	r0, #39	; 0x27
   15df0:	4a76      	ldr	r2, [pc, #472]	; (15fcc <d_type+0x7c0>)
   15df2:	54c8      	strb	r0, [r1, r3]
   15df4:	606a      	str	r2, [r5, #4]
   15df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15df8:	330a      	adds	r3, #10
   15dfa:	6323      	str	r3, [r4, #48]	; 0x30
   15dfc:	e5a5      	b.n	1594a <d_type+0x13e>
   15dfe:	6942      	ldr	r2, [r0, #20]
   15e00:	6983      	ldr	r3, [r0, #24]
   15e02:	429a      	cmp	r2, r3
   15e04:	da69      	bge.n	15eda <d_type+0x6ce>
   15e06:	230c      	movs	r3, #12
   15e08:	6901      	ldr	r1, [r0, #16]
   15e0a:	fb03 f302 	mul.w	r3, r3, r2
   15e0e:	18cd      	adds	r5, r1, r3
   15e10:	f102 0201 	add.w	r2, r2, #1
   15e14:	6142      	str	r2, [r0, #20]
   15e16:	d060      	beq.n	15eda <d_type+0x6ce>
   15e18:	2027      	movs	r0, #39	; 0x27
   15e1a:	4a6d      	ldr	r2, [pc, #436]	; (15fd0 <d_type+0x7c4>)
   15e1c:	e7d4      	b.n	15dc8 <d_type+0x5bc>
   15e1e:	6942      	ldr	r2, [r0, #20]
   15e20:	6983      	ldr	r3, [r0, #24]
   15e22:	429a      	cmp	r2, r3
   15e24:	f6bf ad90 	bge.w	15948 <d_type+0x13c>
   15e28:	230c      	movs	r3, #12
   15e2a:	6901      	ldr	r1, [r0, #16]
   15e2c:	fb03 f302 	mul.w	r3, r3, r2
   15e30:	18cd      	adds	r5, r1, r3
   15e32:	f102 0201 	add.w	r2, r2, #1
   15e36:	6142      	str	r2, [r0, #20]
   15e38:	f43f ad87 	beq.w	1594a <d_type+0x13e>
   15e3c:	2000      	movs	r0, #0
   15e3e:	54c8      	strb	r0, [r1, r3]
   15e40:	4a64      	ldr	r2, [pc, #400]	; (15fd4 <d_type+0x7c8>)
   15e42:	606a      	str	r2, [r5, #4]
   15e44:	230e      	movs	r3, #14
   15e46:	60ab      	str	r3, [r5, #8]
   15e48:	e57f      	b.n	1594a <d_type+0x13e>
   15e4a:	6942      	ldr	r2, [r0, #20]
   15e4c:	6983      	ldr	r3, [r0, #24]
   15e4e:	429a      	cmp	r2, r3
   15e50:	f6bf ad7a 	bge.w	15948 <d_type+0x13c>
   15e54:	230c      	movs	r3, #12
   15e56:	6901      	ldr	r1, [r0, #16]
   15e58:	fb03 f302 	mul.w	r3, r3, r2
   15e5c:	18cd      	adds	r5, r1, r3
   15e5e:	f102 0201 	add.w	r2, r2, #1
   15e62:	6142      	str	r2, [r0, #20]
   15e64:	f43f ad71 	beq.w	1594a <d_type+0x13e>
   15e68:	2000      	movs	r0, #0
   15e6a:	54c8      	strb	r0, [r1, r3]
   15e6c:	4a5a      	ldr	r2, [pc, #360]	; (15fd8 <d_type+0x7cc>)
   15e6e:	606a      	str	r2, [r5, #4]
   15e70:	2304      	movs	r3, #4
   15e72:	60ab      	str	r3, [r5, #8]
   15e74:	e569      	b.n	1594a <d_type+0x13e>
   15e76:	6943      	ldr	r3, [r0, #20]
   15e78:	6981      	ldr	r1, [r0, #24]
   15e7a:	428b      	cmp	r3, r1
   15e7c:	da7a      	bge.n	15f74 <d_type+0x768>
   15e7e:	6900      	ldr	r0, [r0, #16]
   15e80:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15e84:	0089      	lsls	r1, r1, #2
   15e86:	3301      	adds	r3, #1
   15e88:	1845      	adds	r5, r0, r1
   15e8a:	262c      	movs	r6, #44	; 0x2c
   15e8c:	6163      	str	r3, [r4, #20]
   15e8e:	9501      	str	r5, [sp, #4]
   15e90:	5446      	strb	r6, [r0, r1]
   15e92:	7893      	ldrb	r3, [r2, #2]
   15e94:	3b30      	subs	r3, #48	; 0x30
   15e96:	b2db      	uxtb	r3, r3
   15e98:	2b09      	cmp	r3, #9
   15e9a:	bf94      	ite	ls
   15e9c:	2301      	movls	r3, #1
   15e9e:	2300      	movhi	r3, #0
   15ea0:	812b      	strh	r3, [r5, #8]
   15ea2:	d97b      	bls.n	15f9c <d_type+0x790>
   15ea4:	4620      	mov	r0, r4
   15ea6:	f7ff fcb1 	bl	1580c <d_type>
   15eaa:	9b01      	ldr	r3, [sp, #4]
   15eac:	6068      	str	r0, [r5, #4]
   15eae:	685b      	ldr	r3, [r3, #4]
   15eb0:	2b00      	cmp	r3, #0
   15eb2:	f43f ad49 	beq.w	15948 <d_type+0x13c>
   15eb6:	f104 000c 	add.w	r0, r4, #12
   15eba:	f7fe fb69 	bl	14590 <d_number.isra.0>
   15ebe:	68e2      	ldr	r2, [r4, #12]
   15ec0:	7813      	ldrb	r3, [r2, #0]
   15ec2:	b113      	cbz	r3, 15eca <d_type+0x6be>
   15ec4:	1c53      	adds	r3, r2, #1
   15ec6:	60e3      	str	r3, [r4, #12]
   15ec8:	7813      	ldrb	r3, [r2, #0]
   15eca:	9d01      	ldr	r5, [sp, #4]
   15ecc:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   15ed0:	fab3 f383 	clz	r3, r3
   15ed4:	095b      	lsrs	r3, r3, #5
   15ed6:	816b      	strh	r3, [r5, #10]
   15ed8:	e537      	b.n	1594a <d_type+0x13e>
   15eda:	2300      	movs	r3, #0
   15edc:	9301      	str	r3, [sp, #4]
   15ede:	685b      	ldr	r3, [r3, #4]
   15ee0:	deff      	udf	#255	; 0xff
   15ee2:	2500      	movs	r5, #0
   15ee4:	3101      	adds	r1, #1
   15ee6:	60e1      	str	r1, [r4, #12]
   15ee8:	4620      	mov	r0, r4
   15eea:	f7ff fc8f 	bl	1580c <d_type>
   15eee:	462a      	mov	r2, r5
   15ef0:	4603      	mov	r3, r0
   15ef2:	212a      	movs	r1, #42	; 0x2a
   15ef4:	4620      	mov	r0, r4
   15ef6:	f7fe f9f9 	bl	142ec <d_make_comp>
   15efa:	4605      	mov	r5, r0
   15efc:	e620      	b.n	15b40 <d_type+0x334>
   15efe:	2301      	movs	r3, #1
   15f00:	6b65      	ldr	r5, [r4, #52]	; 0x34
   15f02:	6363      	str	r3, [r4, #52]	; 0x34
   15f04:	4620      	mov	r0, r4
   15f06:	f7ff f85d 	bl	14fc4 <d_expression_1>
   15f0a:	6365      	str	r5, [r4, #52]	; 0x34
   15f0c:	4605      	mov	r5, r0
   15f0e:	2800      	cmp	r0, #0
   15f10:	f43f aec4 	beq.w	15c9c <d_type+0x490>
   15f14:	68e3      	ldr	r3, [r4, #12]
   15f16:	e6bd      	b.n	15c94 <d_type+0x488>
   15f18:	4620      	mov	r0, r4
   15f1a:	f7ff fabb 	bl	15494 <d_name>
   15f1e:	4605      	mov	r5, r0
   15f20:	9001      	str	r0, [sp, #4]
   15f22:	2800      	cmp	r0, #0
   15f24:	f43f ad10 	beq.w	15948 <d_type+0x13c>
   15f28:	7803      	ldrb	r3, [r0, #0]
   15f2a:	2b18      	cmp	r3, #24
   15f2c:	f47f adb6 	bne.w	15a9c <d_type+0x290>
   15f30:	e50b      	b.n	1594a <d_type+0x13e>
   15f32:	4620      	mov	r0, r4
   15f34:	f7ff faa4 	bl	15480 <d_template_args>
   15f38:	462a      	mov	r2, r5
   15f3a:	4603      	mov	r3, r0
   15f3c:	2104      	movs	r1, #4
   15f3e:	4620      	mov	r0, r4
   15f40:	f7fe f9d4 	bl	142ec <d_make_comp>
   15f44:	9001      	str	r0, [sp, #4]
   15f46:	e676      	b.n	15c36 <d_type+0x42a>
   15f48:	4620      	mov	r0, r4
   15f4a:	f8d4 9014 	ldr.w	r9, [r4, #20]
   15f4e:	f8d4 8020 	ldr.w	r8, [r4, #32]
   15f52:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   15f54:	6b25      	ldr	r5, [r4, #48]	; 0x30
   15f56:	f7ff fa93 	bl	15480 <d_template_args>
   15f5a:	68e2      	ldr	r2, [r4, #12]
   15f5c:	7812      	ldrb	r2, [r2, #0]
   15f5e:	2a49      	cmp	r2, #73	; 0x49
   15f60:	d00b      	beq.n	15f7a <d_type+0x76e>
   15f62:	6325      	str	r5, [r4, #48]	; 0x30
   15f64:	60e6      	str	r6, [r4, #12]
   15f66:	f8c4 9014 	str.w	r9, [r4, #20]
   15f6a:	f8c4 8020 	str.w	r8, [r4, #32]
   15f6e:	62a7      	str	r7, [r4, #40]	; 0x28
   15f70:	9d01      	ldr	r5, [sp, #4]
   15f72:	e590      	b.n	15a96 <d_type+0x28a>
   15f74:	2300      	movs	r3, #0
   15f76:	701b      	strb	r3, [r3, #0]
   15f78:	deff      	udf	#255	; 0xff
   15f7a:	9b01      	ldr	r3, [sp, #4]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	f43f ace3 	beq.w	15948 <d_type+0x13c>
   15f82:	6a22      	ldr	r2, [r4, #32]
   15f84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15f86:	428a      	cmp	r2, r1
   15f88:	f6bf acde 	bge.w	15948 <d_type+0x13c>
   15f8c:	69e5      	ldr	r5, [r4, #28]
   15f8e:	1c51      	adds	r1, r2, #1
   15f90:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   15f94:	9a01      	ldr	r2, [sp, #4]
   15f96:	6221      	str	r1, [r4, #32]
   15f98:	4603      	mov	r3, r0
   15f9a:	e60a      	b.n	15bb2 <d_type+0x3a6>
   15f9c:	f104 000c 	add.w	r0, r4, #12
   15fa0:	f7fe faf6 	bl	14590 <d_number.isra.0>
   15fa4:	9d01      	ldr	r5, [sp, #4]
   15fa6:	e77d      	b.n	15ea4 <d_type+0x698>
   15fa8:	3203      	adds	r2, #3
   15faa:	2301      	movs	r3, #1
   15fac:	6b46      	ldr	r6, [r0, #52]	; 0x34
   15fae:	60c2      	str	r2, [r0, #12]
   15fb0:	6343      	str	r3, [r0, #52]	; 0x34
   15fb2:	f7ff f807 	bl	14fc4 <d_expression_1>
   15fb6:	6366      	str	r6, [r4, #52]	; 0x34
   15fb8:	4605      	mov	r5, r0
   15fba:	e678      	b.n	15cae <d_type+0x4a2>
   15fbc:	4619      	mov	r1, r3
   15fbe:	e791      	b.n	15ee4 <d_type+0x6d8>
   15fc0:	00023d14 	.word	0x00023d14
   15fc4:	00023cec 	.word	0x00023cec
   15fc8:	00023cb0 	.word	0x00023cb0
   15fcc:	00023cd8 	.word	0x00023cd8
   15fd0:	00023cc4 	.word	0x00023cc4
   15fd4:	000241d4 	.word	0x000241d4
   15fd8:	000241cc 	.word	0x000241cc

00015fdc <d_operator_name>:
   15fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15fde:	68c3      	ldr	r3, [r0, #12]
   15fe0:	781e      	ldrb	r6, [r3, #0]
   15fe2:	4684      	mov	ip, r0
   15fe4:	b326      	cbz	r6, 16030 <d_operator_name+0x54>
   15fe6:	1c5a      	adds	r2, r3, #1
   15fe8:	60c2      	str	r2, [r0, #12]
   15fea:	785a      	ldrb	r2, [r3, #1]
   15fec:	781e      	ldrb	r6, [r3, #0]
   15fee:	2a00      	cmp	r2, #0
   15ff0:	d058      	beq.n	160a4 <d_operator_name+0xc8>
   15ff2:	1c9a      	adds	r2, r3, #2
   15ff4:	60c2      	str	r2, [r0, #12]
   15ff6:	2e76      	cmp	r6, #118	; 0x76
   15ff8:	4604      	mov	r4, r0
   15ffa:	f893 e001 	ldrb.w	lr, [r3, #1]
   15ffe:	d043      	beq.n	16088 <d_operator_name+0xac>
   16000:	2e63      	cmp	r6, #99	; 0x63
   16002:	d116      	bne.n	16032 <d_operator_name+0x56>
   16004:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   16008:	d113      	bne.n	16032 <d_operator_name+0x56>
   1600a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1600c:	6b85      	ldr	r5, [r0, #56]	; 0x38
   1600e:	fab3 f383 	clz	r3, r3
   16012:	095b      	lsrs	r3, r3, #5
   16014:	6383      	str	r3, [r0, #56]	; 0x38
   16016:	f7ff fbf9 	bl	1580c <d_type>
   1601a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1601c:	4602      	mov	r2, r0
   1601e:	2b00      	cmp	r3, #0
   16020:	d052      	beq.n	160c8 <d_operator_name+0xec>
   16022:	2300      	movs	r3, #0
   16024:	2134      	movs	r1, #52	; 0x34
   16026:	4620      	mov	r0, r4
   16028:	f7fe f960 	bl	142ec <d_make_comp>
   1602c:	63a5      	str	r5, [r4, #56]	; 0x38
   1602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16030:	46b6      	mov	lr, r6
   16032:	4c28      	ldr	r4, [pc, #160]	; (160d4 <d_operator_name+0xf8>)
   16034:	2043      	movs	r0, #67	; 0x43
   16036:	2200      	movs	r2, #0
   16038:	e004      	b.n	16044 <d_operator_name+0x68>
   1603a:	bf94      	ite	ls
   1603c:	1c5a      	addls	r2, r3, #1
   1603e:	4618      	movhi	r0, r3
   16040:	4282      	cmp	r2, r0
   16042:	d02d      	beq.n	160a0 <d_operator_name+0xc4>
   16044:	1a83      	subs	r3, r0, r2
   16046:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1604a:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1604e:	0119      	lsls	r1, r3, #4
   16050:	1867      	adds	r7, r4, r1
   16052:	5861      	ldr	r1, [r4, r1]
   16054:	780d      	ldrb	r5, [r1, #0]
   16056:	42b5      	cmp	r5, r6
   16058:	d1ef      	bne.n	1603a <d_operator_name+0x5e>
   1605a:	7849      	ldrb	r1, [r1, #1]
   1605c:	4571      	cmp	r1, lr
   1605e:	d1ec      	bne.n	1603a <d_operator_name+0x5e>
   16060:	f8dc 3014 	ldr.w	r3, [ip, #20]
   16064:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16068:	4293      	cmp	r3, r2
   1606a:	da19      	bge.n	160a0 <d_operator_name+0xc4>
   1606c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16070:	f8dc 1010 	ldr.w	r1, [ip, #16]
   16074:	0092      	lsls	r2, r2, #2
   16076:	3301      	adds	r3, #1
   16078:	1888      	adds	r0, r1, r2
   1607a:	f8cc 3014 	str.w	r3, [ip, #20]
   1607e:	d013      	beq.n	160a8 <d_operator_name+0xcc>
   16080:	2331      	movs	r3, #49	; 0x31
   16082:	548b      	strb	r3, [r1, r2]
   16084:	6047      	str	r7, [r0, #4]
   16086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16088:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   1608c:	b2eb      	uxtb	r3, r5
   1608e:	2b09      	cmp	r3, #9
   16090:	d8cf      	bhi.n	16032 <d_operator_name+0x56>
   16092:	f7fe fafd 	bl	14690 <d_source_name>
   16096:	6963      	ldr	r3, [r4, #20]
   16098:	69a2      	ldr	r2, [r4, #24]
   1609a:	4293      	cmp	r3, r2
   1609c:	4601      	mov	r1, r0
   1609e:	db04      	blt.n	160aa <d_operator_name+0xce>
   160a0:	2000      	movs	r0, #0
   160a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160a4:	4696      	mov	lr, r2
   160a6:	e7c4      	b.n	16032 <d_operator_name+0x56>
   160a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   160ae:	6926      	ldr	r6, [r4, #16]
   160b0:	0092      	lsls	r2, r2, #2
   160b2:	3301      	adds	r3, #1
   160b4:	18b0      	adds	r0, r6, r2
   160b6:	6163      	str	r3, [r4, #20]
   160b8:	d0f2      	beq.n	160a0 <d_operator_name+0xc4>
   160ba:	2900      	cmp	r1, #0
   160bc:	d0f0      	beq.n	160a0 <d_operator_name+0xc4>
   160be:	2332      	movs	r3, #50	; 0x32
   160c0:	54b3      	strb	r3, [r6, r2]
   160c2:	6045      	str	r5, [r0, #4]
   160c4:	6081      	str	r1, [r0, #8]
   160c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160c8:	2133      	movs	r1, #51	; 0x33
   160ca:	4620      	mov	r0, r4
   160cc:	f7fe f90e 	bl	142ec <d_make_comp>
   160d0:	e7ac      	b.n	1602c <d_operator_name+0x50>
   160d2:	bf00      	nop
   160d4:	00023d3c 	.word	0x00023d3c

000160d8 <d_parmlist>:
   160d8:	b530      	push	{r4, r5, lr}
   160da:	68c2      	ldr	r2, [r0, #12]
   160dc:	b083      	sub	sp, #12
   160de:	2300      	movs	r3, #0
   160e0:	9301      	str	r3, [sp, #4]
   160e2:	7813      	ldrb	r3, [r2, #0]
   160e4:	b343      	cbz	r3, 16138 <d_parmlist+0x60>
   160e6:	2b45      	cmp	r3, #69	; 0x45
   160e8:	d026      	beq.n	16138 <d_parmlist+0x60>
   160ea:	2b2e      	cmp	r3, #46	; 0x2e
   160ec:	d024      	beq.n	16138 <d_parmlist+0x60>
   160ee:	4604      	mov	r4, r0
   160f0:	ad01      	add	r5, sp, #4
   160f2:	e015      	b.n	16120 <d_parmlist+0x48>
   160f4:	2b4f      	cmp	r3, #79	; 0x4f
   160f6:	d016      	beq.n	16126 <d_parmlist+0x4e>
   160f8:	f7ff fb88 	bl	1580c <d_type>
   160fc:	2300      	movs	r3, #0
   160fe:	4602      	mov	r2, r0
   16100:	212e      	movs	r1, #46	; 0x2e
   16102:	b1c8      	cbz	r0, 16138 <d_parmlist+0x60>
   16104:	4620      	mov	r0, r4
   16106:	f7fe f8f1 	bl	142ec <d_make_comp>
   1610a:	6028      	str	r0, [r5, #0]
   1610c:	b1a0      	cbz	r0, 16138 <d_parmlist+0x60>
   1610e:	68e2      	ldr	r2, [r4, #12]
   16110:	7813      	ldrb	r3, [r2, #0]
   16112:	f100 0508 	add.w	r5, r0, #8
   16116:	b14b      	cbz	r3, 1612c <d_parmlist+0x54>
   16118:	2b45      	cmp	r3, #69	; 0x45
   1611a:	d007      	beq.n	1612c <d_parmlist+0x54>
   1611c:	2b2e      	cmp	r3, #46	; 0x2e
   1611e:	d005      	beq.n	1612c <d_parmlist+0x54>
   16120:	2b52      	cmp	r3, #82	; 0x52
   16122:	4620      	mov	r0, r4
   16124:	d1e6      	bne.n	160f4 <d_parmlist+0x1c>
   16126:	7853      	ldrb	r3, [r2, #1]
   16128:	2b45      	cmp	r3, #69	; 0x45
   1612a:	d1e5      	bne.n	160f8 <d_parmlist+0x20>
   1612c:	9801      	ldr	r0, [sp, #4]
   1612e:	b118      	cbz	r0, 16138 <d_parmlist+0x60>
   16130:	6883      	ldr	r3, [r0, #8]
   16132:	b123      	cbz	r3, 1613e <d_parmlist+0x66>
   16134:	b003      	add	sp, #12
   16136:	bd30      	pop	{r4, r5, pc}
   16138:	2000      	movs	r0, #0
   1613a:	b003      	add	sp, #12
   1613c:	bd30      	pop	{r4, r5, pc}
   1613e:	6842      	ldr	r2, [r0, #4]
   16140:	7811      	ldrb	r1, [r2, #0]
   16142:	2927      	cmp	r1, #39	; 0x27
   16144:	d1f6      	bne.n	16134 <d_parmlist+0x5c>
   16146:	6852      	ldr	r2, [r2, #4]
   16148:	7c11      	ldrb	r1, [r2, #16]
   1614a:	2909      	cmp	r1, #9
   1614c:	d1f2      	bne.n	16134 <d_parmlist+0x5c>
   1614e:	6851      	ldr	r1, [r2, #4]
   16150:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16152:	1a52      	subs	r2, r2, r1
   16154:	6322      	str	r2, [r4, #48]	; 0x30
   16156:	6043      	str	r3, [r0, #4]
   16158:	e7ec      	b.n	16134 <d_parmlist+0x5c>
   1615a:	bf00      	nop

0001615c <d_unqualified_name>:
   1615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1615e:	68c1      	ldr	r1, [r0, #12]
   16160:	780b      	ldrb	r3, [r1, #0]
   16162:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16166:	2a09      	cmp	r2, #9
   16168:	4604      	mov	r4, r0
   1616a:	d920      	bls.n	161ae <d_unqualified_name+0x52>
   1616c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16170:	2a19      	cmp	r2, #25
   16172:	d925      	bls.n	161c0 <d_unqualified_name+0x64>
   16174:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16178:	2a01      	cmp	r2, #1
   1617a:	d92c      	bls.n	161d6 <d_unqualified_name+0x7a>
   1617c:	2b4c      	cmp	r3, #76	; 0x4c
   1617e:	f000 8088 	beq.w	16292 <d_unqualified_name+0x136>
   16182:	2b55      	cmp	r3, #85	; 0x55
   16184:	d133      	bne.n	161ee <d_unqualified_name+0x92>
   16186:	784b      	ldrb	r3, [r1, #1]
   16188:	2b6c      	cmp	r3, #108	; 0x6c
   1618a:	d033      	beq.n	161f4 <d_unqualified_name+0x98>
   1618c:	2b74      	cmp	r3, #116	; 0x74
   1618e:	d12e      	bne.n	161ee <d_unqualified_name+0x92>
   16190:	1c4b      	adds	r3, r1, #1
   16192:	60c3      	str	r3, [r0, #12]
   16194:	784b      	ldrb	r3, [r1, #1]
   16196:	2b74      	cmp	r3, #116	; 0x74
   16198:	d05a      	beq.n	16250 <d_unqualified_name+0xf4>
   1619a:	2b42      	cmp	r3, #66	; 0x42
   1619c:	f04f 0500 	mov.w	r5, #0
   161a0:	d10c      	bne.n	161bc <d_unqualified_name+0x60>
   161a2:	4629      	mov	r1, r5
   161a4:	4620      	mov	r0, r4
   161a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   161aa:	f7fe bacd 	b.w	14748 <d_abi_tags>
   161ae:	f7fe fa6f 	bl	14690 <d_source_name>
   161b2:	68e3      	ldr	r3, [r4, #12]
   161b4:	781b      	ldrb	r3, [r3, #0]
   161b6:	4605      	mov	r5, r0
   161b8:	2b42      	cmp	r3, #66	; 0x42
   161ba:	d0f2      	beq.n	161a2 <d_unqualified_name+0x46>
   161bc:	4628      	mov	r0, r5
   161be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161c0:	f7ff ff0c 	bl	15fdc <d_operator_name>
   161c4:	4605      	mov	r5, r0
   161c6:	b118      	cbz	r0, 161d0 <d_unqualified_name+0x74>
   161c8:	7803      	ldrb	r3, [r0, #0]
   161ca:	2b31      	cmp	r3, #49	; 0x31
   161cc:	f000 80b2 	beq.w	16334 <d_unqualified_name+0x1d8>
   161d0:	68e3      	ldr	r3, [r4, #12]
   161d2:	781b      	ldrb	r3, [r3, #0]
   161d4:	e7f0      	b.n	161b8 <d_unqualified_name+0x5c>
   161d6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   161d8:	b125      	cbz	r5, 161e4 <d_unqualified_name+0x88>
   161da:	782a      	ldrb	r2, [r5, #0]
   161dc:	2a00      	cmp	r2, #0
   161de:	d06c      	beq.n	162ba <d_unqualified_name+0x15e>
   161e0:	2a18      	cmp	r2, #24
   161e2:	d06a      	beq.n	162ba <d_unqualified_name+0x15e>
   161e4:	2b43      	cmp	r3, #67	; 0x43
   161e6:	f000 80bf 	beq.w	16368 <d_unqualified_name+0x20c>
   161ea:	2b44      	cmp	r3, #68	; 0x44
   161ec:	d06f      	beq.n	162ce <d_unqualified_name+0x172>
   161ee:	2500      	movs	r5, #0
   161f0:	4628      	mov	r0, r5
   161f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161f4:	1c4b      	adds	r3, r1, #1
   161f6:	60c3      	str	r3, [r0, #12]
   161f8:	784b      	ldrb	r3, [r1, #1]
   161fa:	2b6c      	cmp	r3, #108	; 0x6c
   161fc:	d1cd      	bne.n	1619a <d_unqualified_name+0x3e>
   161fe:	3102      	adds	r1, #2
   16200:	60c1      	str	r1, [r0, #12]
   16202:	f7ff ff69 	bl	160d8 <d_parmlist>
   16206:	4606      	mov	r6, r0
   16208:	b1f0      	cbz	r0, 16248 <d_unqualified_name+0xec>
   1620a:	68e2      	ldr	r2, [r4, #12]
   1620c:	7813      	ldrb	r3, [r2, #0]
   1620e:	2b45      	cmp	r3, #69	; 0x45
   16210:	d1c3      	bne.n	1619a <d_unqualified_name+0x3e>
   16212:	3201      	adds	r2, #1
   16214:	60e2      	str	r2, [r4, #12]
   16216:	4620      	mov	r0, r4
   16218:	f7fe f9fc 	bl	14614 <d_compact_number>
   1621c:	2800      	cmp	r0, #0
   1621e:	db13      	blt.n	16248 <d_unqualified_name+0xec>
   16220:	6963      	ldr	r3, [r4, #20]
   16222:	69a2      	ldr	r2, [r4, #24]
   16224:	4293      	cmp	r3, r2
   16226:	da0f      	bge.n	16248 <d_unqualified_name+0xec>
   16228:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1622c:	6921      	ldr	r1, [r4, #16]
   1622e:	0092      	lsls	r2, r2, #2
   16230:	3301      	adds	r3, #1
   16232:	188d      	adds	r5, r1, r2
   16234:	6163      	str	r3, [r4, #20]
   16236:	d0cb      	beq.n	161d0 <d_unqualified_name+0x74>
   16238:	2345      	movs	r3, #69	; 0x45
   1623a:	548b      	strb	r3, [r1, r2]
   1623c:	606e      	str	r6, [r5, #4]
   1623e:	60a8      	str	r0, [r5, #8]
   16240:	6a23      	ldr	r3, [r4, #32]
   16242:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16244:	4293      	cmp	r3, r2
   16246:	db1c      	blt.n	16282 <d_unqualified_name+0x126>
   16248:	68e3      	ldr	r3, [r4, #12]
   1624a:	2500      	movs	r5, #0
   1624c:	781b      	ldrb	r3, [r3, #0]
   1624e:	e7b3      	b.n	161b8 <d_unqualified_name+0x5c>
   16250:	3102      	adds	r1, #2
   16252:	60c1      	str	r1, [r0, #12]
   16254:	f7fe f9de 	bl	14614 <d_compact_number>
   16258:	2800      	cmp	r0, #0
   1625a:	dbf5      	blt.n	16248 <d_unqualified_name+0xec>
   1625c:	6963      	ldr	r3, [r4, #20]
   1625e:	69a2      	ldr	r2, [r4, #24]
   16260:	4293      	cmp	r3, r2
   16262:	daf1      	bge.n	16248 <d_unqualified_name+0xec>
   16264:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16268:	6921      	ldr	r1, [r4, #16]
   1626a:	0092      	lsls	r2, r2, #2
   1626c:	3301      	adds	r3, #1
   1626e:	188d      	adds	r5, r1, r2
   16270:	6163      	str	r3, [r4, #20]
   16272:	d0ad      	beq.n	161d0 <d_unqualified_name+0x74>
   16274:	2347      	movs	r3, #71	; 0x47
   16276:	548b      	strb	r3, [r1, r2]
   16278:	6068      	str	r0, [r5, #4]
   1627a:	6a23      	ldr	r3, [r4, #32]
   1627c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1627e:	4293      	cmp	r3, r2
   16280:	dae2      	bge.n	16248 <d_unqualified_name+0xec>
   16282:	69e1      	ldr	r1, [r4, #28]
   16284:	68e2      	ldr	r2, [r4, #12]
   16286:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1628a:	3301      	adds	r3, #1
   1628c:	6223      	str	r3, [r4, #32]
   1628e:	7813      	ldrb	r3, [r2, #0]
   16290:	e792      	b.n	161b8 <d_unqualified_name+0x5c>
   16292:	3101      	adds	r1, #1
   16294:	60c1      	str	r1, [r0, #12]
   16296:	f7fe f9fb 	bl	14690 <d_source_name>
   1629a:	4605      	mov	r5, r0
   1629c:	2800      	cmp	r0, #0
   1629e:	d0a6      	beq.n	161ee <d_unqualified_name+0x92>
   162a0:	68e2      	ldr	r2, [r4, #12]
   162a2:	7813      	ldrb	r3, [r2, #0]
   162a4:	2b5f      	cmp	r3, #95	; 0x5f
   162a6:	d187      	bne.n	161b8 <d_unqualified_name+0x5c>
   162a8:	4620      	mov	r0, r4
   162aa:	3201      	adds	r2, #1
   162ac:	f840 2f0c 	str.w	r2, [r0, #12]!
   162b0:	f7fe f96e 	bl	14590 <d_number.isra.0>
   162b4:	2800      	cmp	r0, #0
   162b6:	da8b      	bge.n	161d0 <d_unqualified_name+0x74>
   162b8:	e799      	b.n	161ee <d_unqualified_name+0x92>
   162ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   162bc:	68aa      	ldr	r2, [r5, #8]
   162be:	4413      	add	r3, r2
   162c0:	6323      	str	r3, [r4, #48]	; 0x30
   162c2:	780b      	ldrb	r3, [r1, #0]
   162c4:	2b43      	cmp	r3, #67	; 0x43
   162c6:	d04f      	beq.n	16368 <d_unqualified_name+0x20c>
   162c8:	2b44      	cmp	r3, #68	; 0x44
   162ca:	f47f af66 	bne.w	1619a <d_unqualified_name+0x3e>
   162ce:	784b      	ldrb	r3, [r1, #1]
   162d0:	3b30      	subs	r3, #48	; 0x30
   162d2:	2b05      	cmp	r3, #5
   162d4:	d88b      	bhi.n	161ee <d_unqualified_name+0x92>
   162d6:	a201      	add	r2, pc, #4	; (adr r2, 162dc <d_unqualified_name+0x180>)
   162d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   162dc:	00016331 	.word	0x00016331
   162e0:	000162f5 	.word	0x000162f5
   162e4:	0001632d 	.word	0x0001632d
   162e8:	000161ef 	.word	0x000161ef
   162ec:	00016329 	.word	0x00016329
   162f0:	00016325 	.word	0x00016325
   162f4:	2702      	movs	r7, #2
   162f6:	6963      	ldr	r3, [r4, #20]
   162f8:	69a2      	ldr	r2, [r4, #24]
   162fa:	1c88      	adds	r0, r1, #2
   162fc:	4293      	cmp	r3, r2
   162fe:	60e0      	str	r0, [r4, #12]
   16300:	da56      	bge.n	163b0 <d_unqualified_name+0x254>
   16302:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16306:	6920      	ldr	r0, [r4, #16]
   16308:	0092      	lsls	r2, r2, #2
   1630a:	3301      	adds	r3, #1
   1630c:	1886      	adds	r6, r0, r2
   1630e:	6163      	str	r3, [r4, #20]
   16310:	d005      	beq.n	1631e <d_unqualified_name+0x1c2>
   16312:	2d00      	cmp	r5, #0
   16314:	d04f      	beq.n	163b6 <d_unqualified_name+0x25a>
   16316:	2308      	movs	r3, #8
   16318:	5483      	strb	r3, [r0, r2]
   1631a:	7137      	strb	r7, [r6, #4]
   1631c:	60b5      	str	r5, [r6, #8]
   1631e:	788b      	ldrb	r3, [r1, #2]
   16320:	4635      	mov	r5, r6
   16322:	e749      	b.n	161b8 <d_unqualified_name+0x5c>
   16324:	2705      	movs	r7, #5
   16326:	e7e6      	b.n	162f6 <d_unqualified_name+0x19a>
   16328:	2704      	movs	r7, #4
   1632a:	e7e4      	b.n	162f6 <d_unqualified_name+0x19a>
   1632c:	2703      	movs	r7, #3
   1632e:	e7e2      	b.n	162f6 <d_unqualified_name+0x19a>
   16330:	2701      	movs	r7, #1
   16332:	e7e0      	b.n	162f6 <d_unqualified_name+0x19a>
   16334:	6842      	ldr	r2, [r0, #4]
   16336:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16338:	6896      	ldr	r6, [r2, #8]
   1633a:	6810      	ldr	r0, [r2, #0]
   1633c:	491f      	ldr	r1, [pc, #124]	; (163bc <d_unqualified_name+0x260>)
   1633e:	3307      	adds	r3, #7
   16340:	4433      	add	r3, r6
   16342:	6323      	str	r3, [r4, #48]	; 0x30
   16344:	f008 fa80 	bl	1e848 <strcmp>
   16348:	2800      	cmp	r0, #0
   1634a:	f47f af41 	bne.w	161d0 <d_unqualified_name+0x74>
   1634e:	4620      	mov	r0, r4
   16350:	f7fe f99e 	bl	14690 <d_source_name>
   16354:	462a      	mov	r2, r5
   16356:	4603      	mov	r3, r0
   16358:	2136      	movs	r1, #54	; 0x36
   1635a:	4620      	mov	r0, r4
   1635c:	f7fd ffc6 	bl	142ec <d_make_comp>
   16360:	68e3      	ldr	r3, [r4, #12]
   16362:	4605      	mov	r5, r0
   16364:	781b      	ldrb	r3, [r3, #0]
   16366:	e727      	b.n	161b8 <d_unqualified_name+0x5c>
   16368:	784b      	ldrb	r3, [r1, #1]
   1636a:	3b31      	subs	r3, #49	; 0x31
   1636c:	2b04      	cmp	r3, #4
   1636e:	f63f af3e 	bhi.w	161ee <d_unqualified_name+0x92>
   16372:	e8df f003 	tbb	[pc, r3]
   16376:	0315      	.short	0x0315
   16378:	191b      	.short	0x191b
   1637a:	17          	.byte	0x17
   1637b:	00          	.byte	0x00
   1637c:	2702      	movs	r7, #2
   1637e:	6963      	ldr	r3, [r4, #20]
   16380:	69a2      	ldr	r2, [r4, #24]
   16382:	1c88      	adds	r0, r1, #2
   16384:	4293      	cmp	r3, r2
   16386:	60e0      	str	r0, [r4, #12]
   16388:	da12      	bge.n	163b0 <d_unqualified_name+0x254>
   1638a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1638e:	6920      	ldr	r0, [r4, #16]
   16390:	0092      	lsls	r2, r2, #2
   16392:	3301      	adds	r3, #1
   16394:	1886      	adds	r6, r0, r2
   16396:	6163      	str	r3, [r4, #20]
   16398:	d0c1      	beq.n	1631e <d_unqualified_name+0x1c2>
   1639a:	b165      	cbz	r5, 163b6 <d_unqualified_name+0x25a>
   1639c:	2307      	movs	r3, #7
   1639e:	e7bb      	b.n	16318 <d_unqualified_name+0x1bc>
   163a0:	2701      	movs	r7, #1
   163a2:	e7ec      	b.n	1637e <d_unqualified_name+0x222>
   163a4:	2705      	movs	r7, #5
   163a6:	e7ea      	b.n	1637e <d_unqualified_name+0x222>
   163a8:	2704      	movs	r7, #4
   163aa:	e7e8      	b.n	1637e <d_unqualified_name+0x222>
   163ac:	2703      	movs	r7, #3
   163ae:	e7e6      	b.n	1637e <d_unqualified_name+0x222>
   163b0:	788b      	ldrb	r3, [r1, #2]
   163b2:	2500      	movs	r5, #0
   163b4:	e700      	b.n	161b8 <d_unqualified_name+0x5c>
   163b6:	788b      	ldrb	r3, [r1, #2]
   163b8:	e6fe      	b.n	161b8 <d_unqualified_name+0x5c>
   163ba:	bf00      	nop
   163bc:	000241e4 	.word	0x000241e4

000163c0 <d_bare_function_type>:
   163c0:	b570      	push	{r4, r5, r6, lr}
   163c2:	68c3      	ldr	r3, [r0, #12]
   163c4:	781a      	ldrb	r2, [r3, #0]
   163c6:	2a4a      	cmp	r2, #74	; 0x4a
   163c8:	4604      	mov	r4, r0
   163ca:	d00d      	beq.n	163e8 <d_bare_function_type+0x28>
   163cc:	b971      	cbnz	r1, 163ec <d_bare_function_type+0x2c>
   163ce:	460d      	mov	r5, r1
   163d0:	4620      	mov	r0, r4
   163d2:	f7ff fe81 	bl	160d8 <d_parmlist>
   163d6:	b178      	cbz	r0, 163f8 <d_bare_function_type+0x38>
   163d8:	4603      	mov	r3, r0
   163da:	462a      	mov	r2, r5
   163dc:	4620      	mov	r0, r4
   163de:	2129      	movs	r1, #41	; 0x29
   163e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   163e4:	f7fd bf82 	b.w	142ec <d_make_comp>
   163e8:	3301      	adds	r3, #1
   163ea:	60c3      	str	r3, [r0, #12]
   163ec:	4620      	mov	r0, r4
   163ee:	f7ff fa0d 	bl	1580c <d_type>
   163f2:	4605      	mov	r5, r0
   163f4:	2800      	cmp	r0, #0
   163f6:	d1eb      	bne.n	163d0 <d_bare_function_type+0x10>
   163f8:	2000      	movs	r0, #0
   163fa:	bd70      	pop	{r4, r5, r6, pc}

000163fc <d_function_type>:
   163fc:	68c3      	ldr	r3, [r0, #12]
   163fe:	781a      	ldrb	r2, [r3, #0]
   16400:	2a46      	cmp	r2, #70	; 0x46
   16402:	d001      	beq.n	16408 <d_function_type+0xc>
   16404:	2000      	movs	r0, #0
   16406:	4770      	bx	lr
   16408:	b510      	push	{r4, lr}
   1640a:	1c5a      	adds	r2, r3, #1
   1640c:	60c2      	str	r2, [r0, #12]
   1640e:	785a      	ldrb	r2, [r3, #1]
   16410:	2a59      	cmp	r2, #89	; 0x59
   16412:	bf04      	itt	eq
   16414:	3302      	addeq	r3, #2
   16416:	60c3      	streq	r3, [r0, #12]
   16418:	2101      	movs	r1, #1
   1641a:	4604      	mov	r4, r0
   1641c:	f7ff ffd0 	bl	163c0 <d_bare_function_type>
   16420:	4601      	mov	r1, r0
   16422:	4620      	mov	r0, r4
   16424:	f7fe f814 	bl	14450 <d_ref_qualifier>
   16428:	68e3      	ldr	r3, [r4, #12]
   1642a:	781a      	ldrb	r2, [r3, #0]
   1642c:	2a45      	cmp	r2, #69	; 0x45
   1642e:	d001      	beq.n	16434 <d_function_type+0x38>
   16430:	2000      	movs	r0, #0
   16432:	bd10      	pop	{r4, pc}
   16434:	3301      	adds	r3, #1
   16436:	60e3      	str	r3, [r4, #12]
   16438:	bd10      	pop	{r4, pc}
   1643a:	bf00      	nop

0001643c <d_encoding>:
   1643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16440:	68c3      	ldr	r3, [r0, #12]
   16442:	781a      	ldrb	r2, [r3, #0]
   16444:	2a47      	cmp	r2, #71	; 0x47
   16446:	4605      	mov	r5, r0
   16448:	d01f      	beq.n	1648a <d_encoding+0x4e>
   1644a:	2a54      	cmp	r2, #84	; 0x54
   1644c:	d01d      	beq.n	1648a <d_encoding+0x4e>
   1644e:	460e      	mov	r6, r1
   16450:	f7ff f820 	bl	15494 <d_name>
   16454:	4604      	mov	r4, r0
   16456:	b310      	cbz	r0, 1649e <d_encoding+0x62>
   16458:	b32e      	cbz	r6, 164a6 <d_encoding+0x6a>
   1645a:	68ab      	ldr	r3, [r5, #8]
   1645c:	07db      	lsls	r3, r3, #31
   1645e:	d422      	bmi.n	164a6 <d_encoding+0x6a>
   16460:	7823      	ldrb	r3, [r4, #0]
   16462:	f1a3 021c 	sub.w	r2, r3, #28
   16466:	2a04      	cmp	r2, #4
   16468:	d940      	bls.n	164ec <d_encoding+0xb0>
   1646a:	2b4c      	cmp	r3, #76	; 0x4c
   1646c:	d03e      	beq.n	164ec <d_encoding+0xb0>
   1646e:	2b02      	cmp	r3, #2
   16470:	d116      	bne.n	164a0 <d_encoding+0x64>
   16472:	68a3      	ldr	r3, [r4, #8]
   16474:	781a      	ldrb	r2, [r3, #0]
   16476:	f1a2 011c 	sub.w	r1, r2, #28
   1647a:	2904      	cmp	r1, #4
   1647c:	f240 8283 	bls.w	16986 <d_encoding+0x54a>
   16480:	2a4c      	cmp	r2, #76	; 0x4c
   16482:	f000 8280 	beq.w	16986 <d_encoding+0x54a>
   16486:	60a3      	str	r3, [r4, #8]
   16488:	e00a      	b.n	164a0 <d_encoding+0x64>
   1648a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1648c:	f101 0214 	add.w	r2, r1, #20
   16490:	632a      	str	r2, [r5, #48]	; 0x30
   16492:	781a      	ldrb	r2, [r3, #0]
   16494:	2a54      	cmp	r2, #84	; 0x54
   16496:	d02b      	beq.n	164f0 <d_encoding+0xb4>
   16498:	2a47      	cmp	r2, #71	; 0x47
   1649a:	f000 809f 	beq.w	165dc <d_encoding+0x1a0>
   1649e:	2400      	movs	r4, #0
   164a0:	4620      	mov	r0, r4
   164a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   164a6:	68eb      	ldr	r3, [r5, #12]
   164a8:	781b      	ldrb	r3, [r3, #0]
   164aa:	2b00      	cmp	r3, #0
   164ac:	d0f8      	beq.n	164a0 <d_encoding+0x64>
   164ae:	2b45      	cmp	r3, #69	; 0x45
   164b0:	d0f6      	beq.n	164a0 <d_encoding+0x64>
   164b2:	4621      	mov	r1, r4
   164b4:	780a      	ldrb	r2, [r1, #0]
   164b6:	2a20      	cmp	r2, #32
   164b8:	f200 8113 	bhi.w	166e2 <d_encoding+0x2a6>
   164bc:	2a1c      	cmp	r2, #28
   164be:	f080 8112 	bcs.w	166e6 <d_encoding+0x2aa>
   164c2:	2a04      	cmp	r2, #4
   164c4:	f040 8101 	bne.w	166ca <d_encoding+0x28e>
   164c8:	684a      	ldr	r2, [r1, #4]
   164ca:	b16a      	cbz	r2, 164e8 <d_encoding+0xac>
   164cc:	7813      	ldrb	r3, [r2, #0]
   164ce:	2b08      	cmp	r3, #8
   164d0:	f103 31ff 	add.w	r1, r3, #4294967295
   164d4:	f200 80f6 	bhi.w	166c4 <d_encoding+0x288>
   164d8:	2b07      	cmp	r3, #7
   164da:	f080 80f6 	bcs.w	166ca <d_encoding+0x28e>
   164de:	2901      	cmp	r1, #1
   164e0:	d802      	bhi.n	164e8 <d_encoding+0xac>
   164e2:	6892      	ldr	r2, [r2, #8]
   164e4:	2a00      	cmp	r2, #0
   164e6:	d1f1      	bne.n	164cc <d_encoding+0x90>
   164e8:	2101      	movs	r1, #1
   164ea:	e0ef      	b.n	166cc <d_encoding+0x290>
   164ec:	6864      	ldr	r4, [r4, #4]
   164ee:	e7b7      	b.n	16460 <d_encoding+0x24>
   164f0:	1c5a      	adds	r2, r3, #1
   164f2:	60ea      	str	r2, [r5, #12]
   164f4:	785a      	ldrb	r2, [r3, #1]
   164f6:	2a00      	cmp	r2, #0
   164f8:	d0d1      	beq.n	1649e <d_encoding+0x62>
   164fa:	1c9a      	adds	r2, r3, #2
   164fc:	60ea      	str	r2, [r5, #12]
   164fe:	785b      	ldrb	r3, [r3, #1]
   16500:	3b43      	subs	r3, #67	; 0x43
   16502:	2b33      	cmp	r3, #51	; 0x33
   16504:	d8cb      	bhi.n	1649e <d_encoding+0x62>
   16506:	a201      	add	r2, pc, #4	; (adr r2, 1650c <d_encoding+0xd0>)
   16508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1650c:	00016947 	.word	0x00016947
   16510:	0001649f 	.word	0x0001649f
   16514:	0001649f 	.word	0x0001649f
   16518:	00016931 	.word	0x00016931
   1651c:	0001649f 	.word	0x0001649f
   16520:	0001691b 	.word	0x0001691b
   16524:	00016905 	.word	0x00016905
   16528:	000168ef 	.word	0x000168ef
   1652c:	0001649f 	.word	0x0001649f
   16530:	0001649f 	.word	0x0001649f
   16534:	0001649f 	.word	0x0001649f
   16538:	0001649f 	.word	0x0001649f
   1653c:	0001649f 	.word	0x0001649f
   16540:	0001649f 	.word	0x0001649f
   16544:	0001649f 	.word	0x0001649f
   16548:	0001649f 	.word	0x0001649f
   1654c:	000168d9 	.word	0x000168d9
   16550:	000168bf 	.word	0x000168bf
   16554:	0001649f 	.word	0x0001649f
   16558:	000168a5 	.word	0x000168a5
   1655c:	0001688f 	.word	0x0001688f
   16560:	0001649f 	.word	0x0001649f
   16564:	0001649f 	.word	0x0001649f
   16568:	0001649f 	.word	0x0001649f
   1656c:	0001649f 	.word	0x0001649f
   16570:	0001649f 	.word	0x0001649f
   16574:	0001649f 	.word	0x0001649f
   16578:	0001649f 	.word	0x0001649f
   1657c:	0001649f 	.word	0x0001649f
   16580:	0001649f 	.word	0x0001649f
   16584:	0001649f 	.word	0x0001649f
   16588:	0001649f 	.word	0x0001649f
   1658c:	0001685b 	.word	0x0001685b
   16590:	0001649f 	.word	0x0001649f
   16594:	0001649f 	.word	0x0001649f
   16598:	0001649f 	.word	0x0001649f
   1659c:	0001649f 	.word	0x0001649f
   165a0:	00016835 	.word	0x00016835
   165a4:	0001649f 	.word	0x0001649f
   165a8:	0001649f 	.word	0x0001649f
   165ac:	0001649f 	.word	0x0001649f
   165b0:	0001649f 	.word	0x0001649f
   165b4:	0001649f 	.word	0x0001649f
   165b8:	0001649f 	.word	0x0001649f
   165bc:	0001649f 	.word	0x0001649f
   165c0:	0001649f 	.word	0x0001649f
   165c4:	0001649f 	.word	0x0001649f
   165c8:	0001649f 	.word	0x0001649f
   165cc:	0001649f 	.word	0x0001649f
   165d0:	0001649f 	.word	0x0001649f
   165d4:	0001649f 	.word	0x0001649f
   165d8:	0001680f 	.word	0x0001680f
   165dc:	1c5a      	adds	r2, r3, #1
   165de:	60ea      	str	r2, [r5, #12]
   165e0:	785a      	ldrb	r2, [r3, #1]
   165e2:	2a00      	cmp	r2, #0
   165e4:	f43f af5b 	beq.w	1649e <d_encoding+0x62>
   165e8:	1c9a      	adds	r2, r3, #2
   165ea:	60ea      	str	r2, [r5, #12]
   165ec:	785a      	ldrb	r2, [r3, #1]
   165ee:	3a41      	subs	r2, #65	; 0x41
   165f0:	2a31      	cmp	r2, #49	; 0x31
   165f2:	f63f af54 	bhi.w	1649e <d_encoding+0x62>
   165f6:	a101      	add	r1, pc, #4	; (adr r1, 165fc <d_encoding+0x1c0>)
   165f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   165fc:	000166f1 	.word	0x000166f1
   16600:	0001649f 	.word	0x0001649f
   16604:	0001649f 	.word	0x0001649f
   16608:	0001649f 	.word	0x0001649f
   1660c:	0001649f 	.word	0x0001649f
   16610:	0001649f 	.word	0x0001649f
   16614:	0001649f 	.word	0x0001649f
   16618:	0001649f 	.word	0x0001649f
   1661c:	0001649f 	.word	0x0001649f
   16620:	0001649f 	.word	0x0001649f
   16624:	0001649f 	.word	0x0001649f
   16628:	0001649f 	.word	0x0001649f
   1662c:	0001649f 	.word	0x0001649f
   16630:	0001649f 	.word	0x0001649f
   16634:	0001649f 	.word	0x0001649f
   16638:	0001649f 	.word	0x0001649f
   1663c:	0001649f 	.word	0x0001649f
   16640:	000167f1 	.word	0x000167f1
   16644:	0001649f 	.word	0x0001649f
   16648:	000167c5 	.word	0x000167c5
   1664c:	0001649f 	.word	0x0001649f
   16650:	000167af 	.word	0x000167af
   16654:	0001649f 	.word	0x0001649f
   16658:	0001649f 	.word	0x0001649f
   1665c:	0001649f 	.word	0x0001649f
   16660:	0001649f 	.word	0x0001649f
   16664:	0001649f 	.word	0x0001649f
   16668:	0001649f 	.word	0x0001649f
   1666c:	0001649f 	.word	0x0001649f
   16670:	0001649f 	.word	0x0001649f
   16674:	0001649f 	.word	0x0001649f
   16678:	0001649f 	.word	0x0001649f
   1667c:	0001649f 	.word	0x0001649f
   16680:	0001649f 	.word	0x0001649f
   16684:	0001649f 	.word	0x0001649f
   16688:	0001649f 	.word	0x0001649f
   1668c:	0001649f 	.word	0x0001649f
   16690:	0001649f 	.word	0x0001649f
   16694:	0001649f 	.word	0x0001649f
   16698:	0001649f 	.word	0x0001649f
   1669c:	0001649f 	.word	0x0001649f
   166a0:	0001649f 	.word	0x0001649f
   166a4:	0001649f 	.word	0x0001649f
   166a8:	0001649f 	.word	0x0001649f
   166ac:	0001649f 	.word	0x0001649f
   166b0:	0001649f 	.word	0x0001649f
   166b4:	0001649f 	.word	0x0001649f
   166b8:	0001649f 	.word	0x0001649f
   166bc:	0001649f 	.word	0x0001649f
   166c0:	00016709 	.word	0x00016709
   166c4:	2b34      	cmp	r3, #52	; 0x34
   166c6:	f47f af0f 	bne.w	164e8 <d_encoding+0xac>
   166ca:	2100      	movs	r1, #0
   166cc:	4628      	mov	r0, r5
   166ce:	f7ff fe77 	bl	163c0 <d_bare_function_type>
   166d2:	4622      	mov	r2, r4
   166d4:	4603      	mov	r3, r0
   166d6:	2103      	movs	r1, #3
   166d8:	4628      	mov	r0, r5
   166da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166de:	f7fd be05 	b.w	142ec <d_make_comp>
   166e2:	2a4c      	cmp	r2, #76	; 0x4c
   166e4:	d1f1      	bne.n	166ca <d_encoding+0x28e>
   166e6:	6849      	ldr	r1, [r1, #4]
   166e8:	2900      	cmp	r1, #0
   166ea:	f47f aee3 	bne.w	164b4 <d_encoding+0x78>
   166ee:	e7ed      	b.n	166cc <d_encoding+0x290>
   166f0:	2100      	movs	r1, #0
   166f2:	4628      	mov	r0, r5
   166f4:	f7ff fea2 	bl	1643c <d_encoding>
   166f8:	2300      	movs	r3, #0
   166fa:	4602      	mov	r2, r0
   166fc:	2117      	movs	r1, #23
   166fe:	4628      	mov	r0, r5
   16700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16704:	f7fd bdf2 	b.w	142ec <d_make_comp>
   16708:	f105 000c 	add.w	r0, r5, #12
   1670c:	f7fd ff40 	bl	14590 <d_number.isra.0>
   16710:	2801      	cmp	r0, #1
   16712:	f77f aec4 	ble.w	1649e <d_encoding+0x62>
   16716:	68eb      	ldr	r3, [r5, #12]
   16718:	781a      	ldrb	r2, [r3, #0]
   1671a:	2a00      	cmp	r2, #0
   1671c:	f43f aebf 	beq.w	1649e <d_encoding+0x62>
   16720:	1c5f      	adds	r7, r3, #1
   16722:	60ef      	str	r7, [r5, #12]
   16724:	781b      	ldrb	r3, [r3, #0]
   16726:	2b5f      	cmp	r3, #95	; 0x5f
   16728:	f47f aeb9 	bne.w	1649e <d_encoding+0x62>
   1672c:	2200      	movs	r2, #0
   1672e:	1e46      	subs	r6, r0, #1
   16730:	4690      	mov	r8, r2
   16732:	f04f 0940 	mov.w	r9, #64	; 0x40
   16736:	783b      	ldrb	r3, [r7, #0]
   16738:	2b00      	cmp	r3, #0
   1673a:	f43f aeb0 	beq.w	1649e <d_encoding+0x62>
   1673e:	2b24      	cmp	r3, #36	; 0x24
   16740:	f000 8128 	beq.w	16994 <d_encoding+0x558>
   16744:	463c      	mov	r4, r7
   16746:	2100      	movs	r1, #0
   16748:	e004      	b.n	16754 <d_encoding+0x318>
   1674a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1674e:	b123      	cbz	r3, 1675a <d_encoding+0x31e>
   16750:	2b24      	cmp	r3, #36	; 0x24
   16752:	d002      	beq.n	1675a <d_encoding+0x31e>
   16754:	3101      	adds	r1, #1
   16756:	42b1      	cmp	r1, r6
   16758:	dbf7      	blt.n	1674a <d_encoding+0x30e>
   1675a:	696c      	ldr	r4, [r5, #20]
   1675c:	69a8      	ldr	r0, [r5, #24]
   1675e:	4284      	cmp	r4, r0
   16760:	f280 8113 	bge.w	1698a <d_encoding+0x54e>
   16764:	6928      	ldr	r0, [r5, #16]
   16766:	1c63      	adds	r3, r4, #1
   16768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1676c:	616b      	str	r3, [r5, #20]
   1676e:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   16772:	f000 810a 	beq.w	1698a <d_encoding+0x54e>
   16776:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   1677a:	605f      	str	r7, [r3, #4]
   1677c:	6099      	str	r1, [r3, #8]
   1677e:	68ef      	ldr	r7, [r5, #12]
   16780:	440f      	add	r7, r1
   16782:	1a76      	subs	r6, r6, r1
   16784:	60ef      	str	r7, [r5, #12]
   16786:	2a00      	cmp	r2, #0
   16788:	f000 8121 	beq.w	169ce <d_encoding+0x592>
   1678c:	213f      	movs	r1, #63	; 0x3f
   1678e:	4628      	mov	r0, r5
   16790:	f7fd fdac 	bl	142ec <d_make_comp>
   16794:	4602      	mov	r2, r0
   16796:	2800      	cmp	r0, #0
   16798:	f43f ae81 	beq.w	1649e <d_encoding+0x62>
   1679c:	2e00      	cmp	r6, #0
   1679e:	dcca      	bgt.n	16736 <d_encoding+0x2fa>
   167a0:	4628      	mov	r0, r5
   167a2:	2300      	movs	r3, #0
   167a4:	213e      	movs	r1, #62	; 0x3e
   167a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167aa:	f7fd bd9f 	b.w	142ec <d_make_comp>
   167ae:	4628      	mov	r0, r5
   167b0:	f7fe fe70 	bl	15494 <d_name>
   167b4:	2300      	movs	r3, #0
   167b6:	4602      	mov	r2, r0
   167b8:	2113      	movs	r1, #19
   167ba:	4628      	mov	r0, r5
   167bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167c0:	f7fd bd94 	b.w	142ec <d_make_comp>
   167c4:	789a      	ldrb	r2, [r3, #2]
   167c6:	2100      	movs	r1, #0
   167c8:	4628      	mov	r0, r5
   167ca:	2a00      	cmp	r2, #0
   167cc:	f000 8101 	beq.w	169d2 <d_encoding+0x596>
   167d0:	1cda      	adds	r2, r3, #3
   167d2:	60ea      	str	r2, [r5, #12]
   167d4:	789b      	ldrb	r3, [r3, #2]
   167d6:	2b6e      	cmp	r3, #110	; 0x6e
   167d8:	f040 80fb 	bne.w	169d2 <d_encoding+0x596>
   167dc:	f7ff fe2e 	bl	1643c <d_encoding>
   167e0:	2300      	movs	r3, #0
   167e2:	4602      	mov	r2, r0
   167e4:	2149      	movs	r1, #73	; 0x49
   167e6:	4628      	mov	r0, r5
   167e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167ec:	f7fd bd7e 	b.w	142ec <d_make_comp>
   167f0:	4628      	mov	r0, r5
   167f2:	f7fe fe4f 	bl	15494 <d_name>
   167f6:	4604      	mov	r4, r0
   167f8:	4628      	mov	r0, r5
   167fa:	f7fd fef3 	bl	145e4 <d_number_component>
   167fe:	4622      	mov	r2, r4
   16800:	4603      	mov	r3, r0
   16802:	2116      	movs	r1, #22
   16804:	4628      	mov	r0, r5
   16806:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1680a:	f7fd bd6f 	b.w	142ec <d_make_comp>
   1680e:	2176      	movs	r1, #118	; 0x76
   16810:	4628      	mov	r0, r5
   16812:	f7fe f871 	bl	148f8 <d_call_offset>
   16816:	2800      	cmp	r0, #0
   16818:	f43f ae41 	beq.w	1649e <d_encoding+0x62>
   1681c:	2100      	movs	r1, #0
   1681e:	4628      	mov	r0, r5
   16820:	f7ff fe0c 	bl	1643c <d_encoding>
   16824:	2300      	movs	r3, #0
   16826:	4602      	mov	r2, r0
   16828:	2110      	movs	r1, #16
   1682a:	4628      	mov	r0, r5
   1682c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16830:	f7fd bd5c 	b.w	142ec <d_make_comp>
   16834:	2168      	movs	r1, #104	; 0x68
   16836:	4628      	mov	r0, r5
   16838:	f7fe f85e 	bl	148f8 <d_call_offset>
   1683c:	2800      	cmp	r0, #0
   1683e:	f43f ae2e 	beq.w	1649e <d_encoding+0x62>
   16842:	2100      	movs	r1, #0
   16844:	4628      	mov	r0, r5
   16846:	f7ff fdf9 	bl	1643c <d_encoding>
   1684a:	2300      	movs	r3, #0
   1684c:	4602      	mov	r2, r0
   1684e:	210f      	movs	r1, #15
   16850:	4628      	mov	r0, r5
   16852:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16856:	f7fd bd49 	b.w	142ec <d_make_comp>
   1685a:	2100      	movs	r1, #0
   1685c:	4628      	mov	r0, r5
   1685e:	f7fe f84b 	bl	148f8 <d_call_offset>
   16862:	2800      	cmp	r0, #0
   16864:	f43f ae1b 	beq.w	1649e <d_encoding+0x62>
   16868:	2100      	movs	r1, #0
   1686a:	4628      	mov	r0, r5
   1686c:	f7fe f844 	bl	148f8 <d_call_offset>
   16870:	2800      	cmp	r0, #0
   16872:	f43f ae14 	beq.w	1649e <d_encoding+0x62>
   16876:	2100      	movs	r1, #0
   16878:	4628      	mov	r0, r5
   1687a:	f7ff fddf 	bl	1643c <d_encoding>
   1687e:	2300      	movs	r3, #0
   16880:	4602      	mov	r2, r0
   16882:	2111      	movs	r1, #17
   16884:	4628      	mov	r0, r5
   16886:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1688a:	f7fd bd2f 	b.w	142ec <d_make_comp>
   1688e:	4628      	mov	r0, r5
   16890:	f7fe fe00 	bl	15494 <d_name>
   16894:	2300      	movs	r3, #0
   16896:	4602      	mov	r2, r0
   16898:	2115      	movs	r1, #21
   1689a:	4628      	mov	r0, r5
   1689c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168a0:	f7fd bd24 	b.w	142ec <d_make_comp>
   168a4:	310f      	adds	r1, #15
   168a6:	6329      	str	r1, [r5, #48]	; 0x30
   168a8:	4628      	mov	r0, r5
   168aa:	f7fe ffaf 	bl	1580c <d_type>
   168ae:	2300      	movs	r3, #0
   168b0:	4602      	mov	r2, r0
   168b2:	2109      	movs	r1, #9
   168b4:	4628      	mov	r0, r5
   168b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168ba:	f7fd bd17 	b.w	142ec <d_make_comp>
   168be:	310a      	adds	r1, #10
   168c0:	6329      	str	r1, [r5, #48]	; 0x30
   168c2:	4628      	mov	r0, r5
   168c4:	f7fe ffa2 	bl	1580c <d_type>
   168c8:	2300      	movs	r3, #0
   168ca:	4602      	mov	r2, r0
   168cc:	210a      	movs	r1, #10
   168ce:	4628      	mov	r0, r5
   168d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168d4:	f7fd bd0a 	b.w	142ec <d_make_comp>
   168d8:	4628      	mov	r0, r5
   168da:	f7fe ff97 	bl	1580c <d_type>
   168de:	2300      	movs	r3, #0
   168e0:	4602      	mov	r2, r0
   168e2:	210d      	movs	r1, #13
   168e4:	4628      	mov	r0, r5
   168e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168ea:	f7fd bcff 	b.w	142ec <d_make_comp>
   168ee:	4628      	mov	r0, r5
   168f0:	f7fe ff8c 	bl	1580c <d_type>
   168f4:	2300      	movs	r3, #0
   168f6:	4602      	mov	r2, r0
   168f8:	2112      	movs	r1, #18
   168fa:	4628      	mov	r0, r5
   168fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16900:	f7fd bcf4 	b.w	142ec <d_make_comp>
   16904:	4628      	mov	r0, r5
   16906:	f7fe ff81 	bl	1580c <d_type>
   1690a:	2300      	movs	r3, #0
   1690c:	4602      	mov	r2, r0
   1690e:	210c      	movs	r1, #12
   16910:	4628      	mov	r0, r5
   16912:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16916:	f7fd bce9 	b.w	142ec <d_make_comp>
   1691a:	4628      	mov	r0, r5
   1691c:	f7fe fdba 	bl	15494 <d_name>
   16920:	2300      	movs	r3, #0
   16922:	4602      	mov	r2, r0
   16924:	2114      	movs	r1, #20
   16926:	4628      	mov	r0, r5
   16928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1692c:	f7fd bcde 	b.w	142ec <d_make_comp>
   16930:	4628      	mov	r0, r5
   16932:	f7fe ff6b 	bl	1580c <d_type>
   16936:	2300      	movs	r3, #0
   16938:	4602      	mov	r2, r0
   1693a:	210e      	movs	r1, #14
   1693c:	4628      	mov	r0, r5
   1693e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16942:	f7fd bcd3 	b.w	142ec <d_make_comp>
   16946:	4628      	mov	r0, r5
   16948:	f7fe ff60 	bl	1580c <d_type>
   1694c:	4604      	mov	r4, r0
   1694e:	f105 000c 	add.w	r0, r5, #12
   16952:	f7fd fe1d 	bl	14590 <d_number.isra.0>
   16956:	2800      	cmp	r0, #0
   16958:	f6ff ada1 	blt.w	1649e <d_encoding+0x62>
   1695c:	68eb      	ldr	r3, [r5, #12]
   1695e:	781a      	ldrb	r2, [r3, #0]
   16960:	2a5f      	cmp	r2, #95	; 0x5f
   16962:	f47f ad9c 	bne.w	1649e <d_encoding+0x62>
   16966:	3301      	adds	r3, #1
   16968:	60eb      	str	r3, [r5, #12]
   1696a:	4628      	mov	r0, r5
   1696c:	f7fe ff4e 	bl	1580c <d_type>
   16970:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16972:	1d59      	adds	r1, r3, #5
   16974:	6329      	str	r1, [r5, #48]	; 0x30
   16976:	4602      	mov	r2, r0
   16978:	4623      	mov	r3, r4
   1697a:	4628      	mov	r0, r5
   1697c:	210b      	movs	r1, #11
   1697e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16982:	f7fd bcb3 	b.w	142ec <d_make_comp>
   16986:	685b      	ldr	r3, [r3, #4]
   16988:	e574      	b.n	16474 <d_encoding+0x38>
   1698a:	68eb      	ldr	r3, [r5, #12]
   1698c:	440b      	add	r3, r1
   1698e:	60eb      	str	r3, [r5, #12]
   16990:	2400      	movs	r4, #0
   16992:	e585      	b.n	164a0 <d_encoding+0x64>
   16994:	787b      	ldrb	r3, [r7, #1]
   16996:	2b53      	cmp	r3, #83	; 0x53
   16998:	d027      	beq.n	169ea <d_encoding+0x5ae>
   1699a:	2b5f      	cmp	r3, #95	; 0x5f
   1699c:	d023      	beq.n	169e6 <d_encoding+0x5aa>
   1699e:	2b24      	cmp	r3, #36	; 0x24
   169a0:	f47f ad7d 	bne.w	1649e <d_encoding+0x62>
   169a4:	4618      	mov	r0, r3
   169a6:	6969      	ldr	r1, [r5, #20]
   169a8:	69ab      	ldr	r3, [r5, #24]
   169aa:	4299      	cmp	r1, r3
   169ac:	da1f      	bge.n	169ee <d_encoding+0x5b2>
   169ae:	692c      	ldr	r4, [r5, #16]
   169b0:	1c4f      	adds	r7, r1, #1
   169b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   169b6:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   169ba:	616f      	str	r7, [r5, #20]
   169bc:	d017      	beq.n	169ee <d_encoding+0x5b2>
   169be:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   169c2:	6058      	str	r0, [r3, #4]
   169c4:	68ef      	ldr	r7, [r5, #12]
   169c6:	3702      	adds	r7, #2
   169c8:	3e02      	subs	r6, #2
   169ca:	60ef      	str	r7, [r5, #12]
   169cc:	e6db      	b.n	16786 <d_encoding+0x34a>
   169ce:	461a      	mov	r2, r3
   169d0:	e6e4      	b.n	1679c <d_encoding+0x360>
   169d2:	f7ff fd33 	bl	1643c <d_encoding>
   169d6:	2300      	movs	r3, #0
   169d8:	4602      	mov	r2, r0
   169da:	2148      	movs	r1, #72	; 0x48
   169dc:	4628      	mov	r0, r5
   169de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169e2:	f7fd bc83 	b.w	142ec <d_make_comp>
   169e6:	202e      	movs	r0, #46	; 0x2e
   169e8:	e7dd      	b.n	169a6 <d_encoding+0x56a>
   169ea:	202f      	movs	r0, #47	; 0x2f
   169ec:	e7db      	b.n	169a6 <d_encoding+0x56a>
   169ee:	68eb      	ldr	r3, [r5, #12]
   169f0:	3302      	adds	r3, #2
   169f2:	60eb      	str	r3, [r5, #12]
   169f4:	2400      	movs	r4, #0
   169f6:	e553      	b.n	164a0 <d_encoding+0x64>

000169f8 <d_expr_primary>:
   169f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169fa:	68c2      	ldr	r2, [r0, #12]
   169fc:	7813      	ldrb	r3, [r2, #0]
   169fe:	2b4c      	cmp	r3, #76	; 0x4c
   16a00:	d001      	beq.n	16a06 <d_expr_primary+0xe>
   16a02:	2000      	movs	r0, #0
   16a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a06:	1c53      	adds	r3, r2, #1
   16a08:	60c3      	str	r3, [r0, #12]
   16a0a:	7851      	ldrb	r1, [r2, #1]
   16a0c:	295f      	cmp	r1, #95	; 0x5f
   16a0e:	4605      	mov	r5, r0
   16a10:	d03a      	beq.n	16a88 <d_expr_primary+0x90>
   16a12:	295a      	cmp	r1, #90	; 0x5a
   16a14:	d03f      	beq.n	16a96 <d_expr_primary+0x9e>
   16a16:	f7fe fef9 	bl	1580c <d_type>
   16a1a:	2800      	cmp	r0, #0
   16a1c:	d0f1      	beq.n	16a02 <d_expr_primary+0xa>
   16a1e:	7803      	ldrb	r3, [r0, #0]
   16a20:	2b27      	cmp	r3, #39	; 0x27
   16a22:	d046      	beq.n	16ab2 <d_expr_primary+0xba>
   16a24:	68ee      	ldr	r6, [r5, #12]
   16a26:	7833      	ldrb	r3, [r6, #0]
   16a28:	2b6e      	cmp	r3, #110	; 0x6e
   16a2a:	d04b      	beq.n	16ac4 <d_expr_primary+0xcc>
   16a2c:	213c      	movs	r1, #60	; 0x3c
   16a2e:	2b45      	cmp	r3, #69	; 0x45
   16a30:	d04e      	beq.n	16ad0 <d_expr_primary+0xd8>
   16a32:	2b00      	cmp	r3, #0
   16a34:	d0e5      	beq.n	16a02 <d_expr_primary+0xa>
   16a36:	4633      	mov	r3, r6
   16a38:	e001      	b.n	16a3e <d_expr_primary+0x46>
   16a3a:	2c00      	cmp	r4, #0
   16a3c:	d0e1      	beq.n	16a02 <d_expr_primary+0xa>
   16a3e:	3301      	adds	r3, #1
   16a40:	60eb      	str	r3, [r5, #12]
   16a42:	781c      	ldrb	r4, [r3, #0]
   16a44:	2c45      	cmp	r4, #69	; 0x45
   16a46:	d1f8      	bne.n	16a3a <d_expr_primary+0x42>
   16a48:	1b9c      	subs	r4, r3, r6
   16a4a:	696b      	ldr	r3, [r5, #20]
   16a4c:	69aa      	ldr	r2, [r5, #24]
   16a4e:	4293      	cmp	r3, r2
   16a50:	da2d      	bge.n	16aae <d_expr_primary+0xb6>
   16a52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16a56:	692f      	ldr	r7, [r5, #16]
   16a58:	3301      	adds	r3, #1
   16a5a:	0092      	lsls	r2, r2, #2
   16a5c:	616b      	str	r3, [r5, #20]
   16a5e:	18bb      	adds	r3, r7, r2
   16a60:	d025      	beq.n	16aae <d_expr_primary+0xb6>
   16a62:	b326      	cbz	r6, 16aae <d_expr_primary+0xb6>
   16a64:	b31c      	cbz	r4, 16aae <d_expr_primary+0xb6>
   16a66:	f04f 0e00 	mov.w	lr, #0
   16a6a:	f807 e002 	strb.w	lr, [r7, r2]
   16a6e:	605e      	str	r6, [r3, #4]
   16a70:	609c      	str	r4, [r3, #8]
   16a72:	4602      	mov	r2, r0
   16a74:	4628      	mov	r0, r5
   16a76:	f7fd fc39 	bl	142ec <d_make_comp>
   16a7a:	68eb      	ldr	r3, [r5, #12]
   16a7c:	781a      	ldrb	r2, [r3, #0]
   16a7e:	2a45      	cmp	r2, #69	; 0x45
   16a80:	d1bf      	bne.n	16a02 <d_expr_primary+0xa>
   16a82:	3301      	adds	r3, #1
   16a84:	60eb      	str	r3, [r5, #12]
   16a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a88:	1c93      	adds	r3, r2, #2
   16a8a:	60c3      	str	r3, [r0, #12]
   16a8c:	7892      	ldrb	r2, [r2, #2]
   16a8e:	2a5a      	cmp	r2, #90	; 0x5a
   16a90:	bf18      	it	ne
   16a92:	2000      	movne	r0, #0
   16a94:	d107      	bne.n	16aa6 <d_expr_primary+0xae>
   16a96:	3301      	adds	r3, #1
   16a98:	60eb      	str	r3, [r5, #12]
   16a9a:	2100      	movs	r1, #0
   16a9c:	4628      	mov	r0, r5
   16a9e:	f7ff fccd 	bl	1643c <d_encoding>
   16aa2:	68eb      	ldr	r3, [r5, #12]
   16aa4:	781a      	ldrb	r2, [r3, #0]
   16aa6:	2a45      	cmp	r2, #69	; 0x45
   16aa8:	d0eb      	beq.n	16a82 <d_expr_primary+0x8a>
   16aaa:	2000      	movs	r0, #0
   16aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16aae:	2300      	movs	r3, #0
   16ab0:	e7df      	b.n	16a72 <d_expr_primary+0x7a>
   16ab2:	6843      	ldr	r3, [r0, #4]
   16ab4:	7c1a      	ldrb	r2, [r3, #16]
   16ab6:	2a00      	cmp	r2, #0
   16ab8:	d0b4      	beq.n	16a24 <d_expr_primary+0x2c>
   16aba:	685a      	ldr	r2, [r3, #4]
   16abc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16abe:	1a9b      	subs	r3, r3, r2
   16ac0:	632b      	str	r3, [r5, #48]	; 0x30
   16ac2:	e7af      	b.n	16a24 <d_expr_primary+0x2c>
   16ac4:	1c72      	adds	r2, r6, #1
   16ac6:	60ea      	str	r2, [r5, #12]
   16ac8:	7873      	ldrb	r3, [r6, #1]
   16aca:	213d      	movs	r1, #61	; 0x3d
   16acc:	4616      	mov	r6, r2
   16ace:	e7ae      	b.n	16a2e <d_expr_primary+0x36>
   16ad0:	2400      	movs	r4, #0
   16ad2:	e7ba      	b.n	16a4a <d_expr_primary+0x52>

00016ad4 <d_print_comp_inner>:
   16ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad8:	4604      	mov	r4, r0
   16ada:	b095      	sub	sp, #84	; 0x54
   16adc:	2a00      	cmp	r2, #0
   16ade:	f000 80db 	beq.w	16c98 <d_print_comp_inner+0x1c4>
   16ae2:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16ae6:	2f00      	cmp	r7, #0
   16ae8:	f040 80c2 	bne.w	16c70 <d_print_comp_inner+0x19c>
   16aec:	7813      	ldrb	r3, [r2, #0]
   16aee:	4688      	mov	r8, r1
   16af0:	4615      	mov	r5, r2
   16af2:	2b4d      	cmp	r3, #77	; 0x4d
   16af4:	f201 81e6 	bhi.w	17ec4 <d_print_comp_inner+0x13f0>
   16af8:	e8df f013 	tbh	[pc, r3, lsl #1]
   16afc:	043c045a 	.word	0x043c045a
   16b00:	03a4043c 	.word	0x03a4043c
   16b04:	048904a5 	.word	0x048904a5
   16b08:	038e04ea 	.word	0x038e04ea
   16b0c:	0330037c 	.word	0x0330037c
   16b10:	030a0356 	.word	0x030a0356
   16b14:	029802e4 	.word	0x029802e4
   16b18:	027202be 	.word	0x027202be
   16b1c:	01f0024c 	.word	0x01f0024c
   16b20:	01ca0226 	.word	0x01ca0226
   16b24:	015801a4 	.word	0x015801a4
   16b28:	0132017e 	.word	0x0132017e
   16b2c:	00f2010b 	.word	0x00f2010b
   16b30:	00f200f2 	.word	0x00f200f2
   16b34:	00d400d4 	.word	0x00d400d4
   16b38:	00d400d4 	.word	0x00d400d4
   16b3c:	00d400d4 	.word	0x00d400d4
   16b40:	06d500d4 	.word	0x06d500d4
   16b44:	00d406d5 	.word	0x00d406d5
   16b48:	06a900d4 	.word	0x06a900d4
   16b4c:	069306fc 	.word	0x069306fc
   16b50:	0701071d 	.word	0x0701071d
   16b54:	07010788 	.word	0x07010788
   16b58:	057b057b 	.word	0x057b057b
   16b5c:	06060630 	.word	0x06060630
   16b60:	09e405e0 	.word	0x09e405e0
   16b64:	068e05ad 	.word	0x068e05ad
   16b68:	004e0654 	.word	0x004e0654
   16b6c:	094c0485 	.word	0x094c0485
   16b70:	08df08df 	.word	0x08df08df
   16b74:	08ae08ae 	.word	0x08ae08ae
   16b78:	05480888 	.word	0x05480888
   16b7c:	08e4053a 	.word	0x08e4053a
   16b80:	09be0514 	.word	0x09be0514
   16b84:	09980914 	.word	0x09980914
   16b88:	07cb09e4 	.word	0x07cb09e4
   16b8c:	07f10862 	.word	0x07f10862
   16b90:	04130817 	.word	0x04130817
   16b94:	055200d4 	.word	0x055200d4
   16b98:	68ab      	ldr	r3, [r5, #8]
   16b9a:	781b      	ldrb	r3, [r3, #0]
   16b9c:	2b38      	cmp	r3, #56	; 0x38
   16b9e:	d17b      	bne.n	16c98 <d_print_comp_inner+0x1c4>
   16ba0:	686a      	ldr	r2, [r5, #4]
   16ba2:	6853      	ldr	r3, [r2, #4]
   16ba4:	681b      	ldr	r3, [r3, #0]
   16ba6:	7859      	ldrb	r1, [r3, #1]
   16ba8:	2963      	cmp	r1, #99	; 0x63
   16baa:	f002 814a 	beq.w	18e42 <d_print_comp_inner+0x236e>
   16bae:	f105 0308 	add.w	r3, r5, #8
   16bb2:	4641      	mov	r1, r8
   16bb4:	4620      	mov	r0, r4
   16bb6:	f003 fbbb 	bl	1a330 <d_maybe_print_fold_expression.isra.15>
   16bba:	4606      	mov	r6, r0
   16bbc:	2800      	cmp	r0, #0
   16bbe:	d157      	bne.n	16c70 <d_print_comp_inner+0x19c>
   16bc0:	686b      	ldr	r3, [r5, #4]
   16bc2:	781a      	ldrb	r2, [r3, #0]
   16bc4:	2a31      	cmp	r2, #49	; 0x31
   16bc6:	f002 836b 	beq.w	192a0 <d_print_comp_inner+0x27cc>
   16bca:	685b      	ldr	r3, [r3, #4]
   16bcc:	49c7      	ldr	r1, [pc, #796]	; (16eec <d_print_comp_inner+0x418>)
   16bce:	6818      	ldr	r0, [r3, #0]
   16bd0:	f007 fe3a 	bl	1e848 <strcmp>
   16bd4:	68ab      	ldr	r3, [r5, #8]
   16bd6:	b920      	cbnz	r0, 16be2 <d_print_comp_inner+0x10e>
   16bd8:	685a      	ldr	r2, [r3, #4]
   16bda:	7811      	ldrb	r1, [r2, #0]
   16bdc:	2903      	cmp	r1, #3
   16bde:	f002 83a5 	beq.w	1932c <d_print_comp_inner+0x2858>
   16be2:	685a      	ldr	r2, [r3, #4]
   16be4:	4641      	mov	r1, r8
   16be6:	4620      	mov	r0, r4
   16be8:	f003 fb3e 	bl	1a268 <d_print_subexpr>
   16bec:	686f      	ldr	r7, [r5, #4]
   16bee:	49c0      	ldr	r1, [pc, #768]	; (16ef0 <d_print_comp_inner+0x41c>)
   16bf0:	687b      	ldr	r3, [r7, #4]
   16bf2:	f8d3 9000 	ldr.w	r9, [r3]
   16bf6:	4648      	mov	r0, r9
   16bf8:	f007 fe26 	bl	1e848 <strcmp>
   16bfc:	4606      	mov	r6, r0
   16bfe:	2800      	cmp	r0, #0
   16c00:	f042 826f 	bne.w	190e2 <d_print_comp_inner+0x260e>
   16c04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16c08:	29ff      	cmp	r1, #255	; 0xff
   16c0a:	f002 844a 	beq.w	194a2 <d_print_comp_inner+0x29ce>
   16c0e:	1c4a      	adds	r2, r1, #1
   16c10:	235b      	movs	r3, #91	; 0x5b
   16c12:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16c16:	5463      	strb	r3, [r4, r1]
   16c18:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16c1c:	68ab      	ldr	r3, [r5, #8]
   16c1e:	4641      	mov	r1, r8
   16c20:	689a      	ldr	r2, [r3, #8]
   16c22:	4620      	mov	r0, r4
   16c24:	f002 fcfa 	bl	1961c <d_print_comp>
   16c28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16c2c:	29ff      	cmp	r1, #255	; 0xff
   16c2e:	f002 8425 	beq.w	1947c <d_print_comp_inner+0x29a8>
   16c32:	235d      	movs	r3, #93	; 0x5d
   16c34:	1c4a      	adds	r2, r1, #1
   16c36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16c3a:	5463      	strb	r3, [r4, r1]
   16c3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16c40:	686b      	ldr	r3, [r5, #4]
   16c42:	781a      	ldrb	r2, [r3, #0]
   16c44:	2a31      	cmp	r2, #49	; 0x31
   16c46:	d113      	bne.n	16c70 <d_print_comp_inner+0x19c>
   16c48:	685b      	ldr	r3, [r3, #4]
   16c4a:	689a      	ldr	r2, [r3, #8]
   16c4c:	2a01      	cmp	r2, #1
   16c4e:	d10f      	bne.n	16c70 <d_print_comp_inner+0x19c>
   16c50:	685b      	ldr	r3, [r3, #4]
   16c52:	781b      	ldrb	r3, [r3, #0]
   16c54:	2b3e      	cmp	r3, #62	; 0x3e
   16c56:	d10b      	bne.n	16c70 <d_print_comp_inner+0x19c>
   16c58:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16c5c:	29ff      	cmp	r1, #255	; 0xff
   16c5e:	f002 8482 	beq.w	19566 <d_print_comp_inner+0x2a92>
   16c62:	2329      	movs	r3, #41	; 0x29
   16c64:	1c4a      	adds	r2, r1, #1
   16c66:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16c6a:	5463      	strb	r3, [r4, r1]
   16c6c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16c70:	b015      	add	sp, #84	; 0x54
   16c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c76:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16c7a:	2b00      	cmp	r3, #0
   16c7c:	f2c1 84a4 	blt.w	185c8 <d_print_comp_inner+0x1af4>
   16c80:	2b00      	cmp	r3, #0
   16c82:	f002 8432 	beq.w	194ea <d_print_comp_inner+0x2a16>
   16c86:	6880      	ldr	r0, [r0, #8]
   16c88:	3b01      	subs	r3, #1
   16c8a:	b110      	cbz	r0, 16c92 <d_print_comp_inner+0x1be>
   16c8c:	7802      	ldrb	r2, [r0, #0]
   16c8e:	2a2f      	cmp	r2, #47	; 0x2f
   16c90:	d0f6      	beq.n	16c80 <d_print_comp_inner+0x1ac>
   16c92:	b10f      	cbz	r7, 16c98 <d_print_comp_inner+0x1c4>
   16c94:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16c98:	2301      	movs	r3, #1
   16c9a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16c9e:	b015      	add	sp, #84	; 0x54
   16ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ca4:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16ca8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16cac:	9505      	str	r5, [sp, #20]
   16cae:	ab14      	add	r3, sp, #80	; 0x50
   16cb0:	2100      	movs	r1, #0
   16cb2:	f843 cd40 	str.w	ip, [r3, #-64]!
   16cb6:	9106      	str	r1, [sp, #24]
   16cb8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16cbc:	9207      	str	r2, [sp, #28]
   16cbe:	686a      	ldr	r2, [r5, #4]
   16cc0:	4641      	mov	r1, r8
   16cc2:	4620      	mov	r0, r4
   16cc4:	f002 fcaa 	bl	1961c <d_print_comp>
   16cc8:	9b06      	ldr	r3, [sp, #24]
   16cca:	2b00      	cmp	r3, #0
   16ccc:	f001 8389 	beq.w	183e2 <d_print_comp_inner+0x190e>
   16cd0:	9b04      	ldr	r3, [sp, #16]
   16cd2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16cd6:	2f00      	cmp	r7, #0
   16cd8:	d0ca      	beq.n	16c70 <d_print_comp_inner+0x19c>
   16cda:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16cde:	e7c7      	b.n	16c70 <d_print_comp_inner+0x19c>
   16ce0:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16ce4:	f1bc 0f00 	cmp.w	ip, #0
   16ce8:	d0de      	beq.n	16ca8 <d_print_comp_inner+0x1d4>
   16cea:	4662      	mov	r2, ip
   16cec:	e005      	b.n	16cfa <d_print_comp_inner+0x226>
   16cee:	428b      	cmp	r3, r1
   16cf0:	f001 86b8 	beq.w	18a64 <d_print_comp_inner+0x1f90>
   16cf4:	6812      	ldr	r2, [r2, #0]
   16cf6:	2a00      	cmp	r2, #0
   16cf8:	d0d6      	beq.n	16ca8 <d_print_comp_inner+0x1d4>
   16cfa:	6890      	ldr	r0, [r2, #8]
   16cfc:	2800      	cmp	r0, #0
   16cfe:	d1f9      	bne.n	16cf4 <d_print_comp_inner+0x220>
   16d00:	6851      	ldr	r1, [r2, #4]
   16d02:	7809      	ldrb	r1, [r1, #0]
   16d04:	f1a1 0e19 	sub.w	lr, r1, #25
   16d08:	f1be 0f02 	cmp.w	lr, #2
   16d0c:	d9ef      	bls.n	16cee <d_print_comp_inner+0x21a>
   16d0e:	4607      	mov	r7, r0
   16d10:	e7ca      	b.n	16ca8 <d_print_comp_inner+0x1d4>
   16d12:	68af      	ldr	r7, [r5, #8]
   16d14:	686d      	ldr	r5, [r5, #4]
   16d16:	2f00      	cmp	r7, #0
   16d18:	d0aa      	beq.n	16c70 <d_print_comp_inner+0x19c>
   16d1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16d1e:	442f      	add	r7, r5
   16d20:	f04f 0800 	mov.w	r8, #0
   16d24:	e008      	b.n	16d38 <d_print_comp_inner+0x264>
   16d26:	460b      	mov	r3, r1
   16d28:	3101      	adds	r1, #1
   16d2a:	42bd      	cmp	r5, r7
   16d2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16d30:	54e6      	strb	r6, [r4, r3]
   16d32:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16d36:	d09b      	beq.n	16c70 <d_print_comp_inner+0x19c>
   16d38:	29ff      	cmp	r1, #255	; 0xff
   16d3a:	f815 6b01 	ldrb.w	r6, [r5], #1
   16d3e:	d1f2      	bne.n	16d26 <d_print_comp_inner+0x252>
   16d40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16d44:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16d48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16d4c:	4620      	mov	r0, r4
   16d4e:	4798      	blx	r3
   16d50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16d54:	3301      	adds	r3, #1
   16d56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16d5a:	2101      	movs	r1, #1
   16d5c:	2300      	movs	r3, #0
   16d5e:	e7e4      	b.n	16d2a <d_print_comp_inner+0x256>
   16d60:	4e64      	ldr	r6, [pc, #400]	; (16ef4 <d_print_comp_inner+0x420>)
   16d62:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16d66:	f106 0a11 	add.w	sl, r6, #17
   16d6a:	f04f 0900 	mov.w	r9, #0
   16d6e:	e009      	b.n	16d84 <d_print_comp_inner+0x2b0>
   16d70:	460b      	mov	r3, r1
   16d72:	3101      	adds	r1, #1
   16d74:	4556      	cmp	r6, sl
   16d76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16d7a:	54e7      	strb	r7, [r4, r3]
   16d7c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16d80:	f001 8296 	beq.w	182b0 <d_print_comp_inner+0x17dc>
   16d84:	29ff      	cmp	r1, #255	; 0xff
   16d86:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16d8a:	d1f1      	bne.n	16d70 <d_print_comp_inner+0x29c>
   16d8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16d90:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16d94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16d98:	4620      	mov	r0, r4
   16d9a:	4798      	blx	r3
   16d9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16da0:	3301      	adds	r3, #1
   16da2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16da6:	2101      	movs	r1, #1
   16da8:	2300      	movs	r3, #0
   16daa:	e7e3      	b.n	16d74 <d_print_comp_inner+0x2a0>
   16dac:	4e52      	ldr	r6, [pc, #328]	; (16ef8 <d_print_comp_inner+0x424>)
   16dae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16db2:	f106 0a19 	add.w	sl, r6, #25
   16db6:	f04f 0900 	mov.w	r9, #0
   16dba:	e009      	b.n	16dd0 <d_print_comp_inner+0x2fc>
   16dbc:	460b      	mov	r3, r1
   16dbe:	3101      	adds	r1, #1
   16dc0:	4556      	cmp	r6, sl
   16dc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16dc6:	54e7      	strb	r7, [r4, r3]
   16dc8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16dcc:	f001 82a8 	beq.w	18320 <d_print_comp_inner+0x184c>
   16dd0:	29ff      	cmp	r1, #255	; 0xff
   16dd2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16dd6:	d1f1      	bne.n	16dbc <d_print_comp_inner+0x2e8>
   16dd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ddc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16de0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16de4:	4620      	mov	r0, r4
   16de6:	4798      	blx	r3
   16de8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16dec:	3301      	adds	r3, #1
   16dee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16df2:	2101      	movs	r1, #1
   16df4:	2300      	movs	r3, #0
   16df6:	e7e3      	b.n	16dc0 <d_print_comp_inner+0x2ec>
   16df8:	4e40      	ldr	r6, [pc, #256]	; (16efc <d_print_comp_inner+0x428>)
   16dfa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16dfe:	f106 0a15 	add.w	sl, r6, #21
   16e02:	f04f 0900 	mov.w	r9, #0
   16e06:	e009      	b.n	16e1c <d_print_comp_inner+0x348>
   16e08:	460b      	mov	r3, r1
   16e0a:	3101      	adds	r1, #1
   16e0c:	4556      	cmp	r6, sl
   16e0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e12:	54e7      	strb	r7, [r4, r3]
   16e14:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16e18:	f001 8251 	beq.w	182be <d_print_comp_inner+0x17ea>
   16e1c:	29ff      	cmp	r1, #255	; 0xff
   16e1e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16e22:	d1f1      	bne.n	16e08 <d_print_comp_inner+0x334>
   16e24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16e28:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e30:	4620      	mov	r0, r4
   16e32:	4798      	blx	r3
   16e34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16e38:	3301      	adds	r3, #1
   16e3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16e3e:	2101      	movs	r1, #1
   16e40:	2300      	movs	r3, #0
   16e42:	e7e3      	b.n	16e0c <d_print_comp_inner+0x338>
   16e44:	4e2e      	ldr	r6, [pc, #184]	; (16f00 <d_print_comp_inner+0x42c>)
   16e46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e4a:	f106 0a16 	add.w	sl, r6, #22
   16e4e:	f04f 0900 	mov.w	r9, #0
   16e52:	e009      	b.n	16e68 <d_print_comp_inner+0x394>
   16e54:	460b      	mov	r3, r1
   16e56:	3101      	adds	r1, #1
   16e58:	4556      	cmp	r6, sl
   16e5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e5e:	54e7      	strb	r7, [r4, r3]
   16e60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16e64:	f001 8263 	beq.w	1832e <d_print_comp_inner+0x185a>
   16e68:	29ff      	cmp	r1, #255	; 0xff
   16e6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16e6e:	d1f1      	bne.n	16e54 <d_print_comp_inner+0x380>
   16e70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16e74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e7c:	4620      	mov	r0, r4
   16e7e:	4798      	blx	r3
   16e80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16e84:	3301      	adds	r3, #1
   16e86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16e8a:	2101      	movs	r1, #1
   16e8c:	2300      	movs	r3, #0
   16e8e:	e7e3      	b.n	16e58 <d_print_comp_inner+0x384>
   16e90:	4e1c      	ldr	r6, [pc, #112]	; (16f04 <d_print_comp_inner+0x430>)
   16e92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e96:	f106 0a13 	add.w	sl, r6, #19
   16e9a:	f04f 0900 	mov.w	r9, #0
   16e9e:	e009      	b.n	16eb4 <d_print_comp_inner+0x3e0>
   16ea0:	460b      	mov	r3, r1
   16ea2:	3101      	adds	r1, #1
   16ea4:	45b2      	cmp	sl, r6
   16ea6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16eaa:	54e7      	strb	r7, [r4, r3]
   16eac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16eb0:	f001 8077 	beq.w	17fa2 <d_print_comp_inner+0x14ce>
   16eb4:	29ff      	cmp	r1, #255	; 0xff
   16eb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16eba:	d1f1      	bne.n	16ea0 <d_print_comp_inner+0x3cc>
   16ebc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ec0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16ec4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16ec8:	4620      	mov	r0, r4
   16eca:	4798      	blx	r3
   16ecc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ed0:	3301      	adds	r3, #1
   16ed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16ed6:	2101      	movs	r1, #1
   16ed8:	2300      	movs	r3, #0
   16eda:	e7e3      	b.n	16ea4 <d_print_comp_inner+0x3d0>
   16edc:	4e0a      	ldr	r6, [pc, #40]	; (16f08 <d_print_comp_inner+0x434>)
   16ede:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16ee2:	f106 0a1a 	add.w	sl, r6, #26
   16ee6:	f04f 0900 	mov.w	r9, #0
   16eea:	e019      	b.n	16f20 <d_print_comp_inner+0x44c>
   16eec:	000241a8 	.word	0x000241a8
   16ef0:	000243a4 	.word	0x000243a4
   16ef4:	00024333 	.word	0x00024333
   16ef8:	000242ff 	.word	0x000242ff
   16efc:	0002431b 	.word	0x0002431b
   16f00:	000242e7 	.word	0x000242e7
   16f04:	000242d3 	.word	0x000242d3
   16f08:	000242a7 	.word	0x000242a7
   16f0c:	460b      	mov	r3, r1
   16f0e:	3101      	adds	r1, #1
   16f10:	4556      	cmp	r6, sl
   16f12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f16:	54e7      	strb	r7, [r4, r3]
   16f18:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f1c:	f001 804f 	beq.w	17fbe <d_print_comp_inner+0x14ea>
   16f20:	29ff      	cmp	r1, #255	; 0xff
   16f22:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f26:	d1f1      	bne.n	16f0c <d_print_comp_inner+0x438>
   16f28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f2c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f34:	4620      	mov	r0, r4
   16f36:	4798      	blx	r3
   16f38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f3c:	3301      	adds	r3, #1
   16f3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f42:	2101      	movs	r1, #1
   16f44:	2300      	movs	r3, #0
   16f46:	e7e3      	b.n	16f10 <d_print_comp_inner+0x43c>
   16f48:	4eb5      	ldr	r6, [pc, #724]	; (17220 <d_print_comp_inner+0x74c>)
   16f4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f4e:	f106 0a0f 	add.w	sl, r6, #15
   16f52:	f04f 0900 	mov.w	r9, #0
   16f56:	e009      	b.n	16f6c <d_print_comp_inner+0x498>
   16f58:	460b      	mov	r3, r1
   16f5a:	3101      	adds	r1, #1
   16f5c:	4556      	cmp	r6, sl
   16f5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f62:	54e7      	strb	r7, [r4, r3]
   16f64:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f68:	f001 8022 	beq.w	17fb0 <d_print_comp_inner+0x14dc>
   16f6c:	29ff      	cmp	r1, #255	; 0xff
   16f6e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f72:	d1f1      	bne.n	16f58 <d_print_comp_inner+0x484>
   16f74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f80:	4620      	mov	r0, r4
   16f82:	4798      	blx	r3
   16f84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f88:	3301      	adds	r3, #1
   16f8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f8e:	2101      	movs	r1, #1
   16f90:	2300      	movs	r3, #0
   16f92:	e7e3      	b.n	16f5c <d_print_comp_inner+0x488>
   16f94:	4ea3      	ldr	r6, [pc, #652]	; (17224 <d_print_comp_inner+0x750>)
   16f96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f9a:	f106 0a11 	add.w	sl, r6, #17
   16f9e:	f04f 0900 	mov.w	r9, #0
   16fa2:	e009      	b.n	16fb8 <d_print_comp_inner+0x4e4>
   16fa4:	460b      	mov	r3, r1
   16fa6:	3101      	adds	r1, #1
   16fa8:	4556      	cmp	r6, sl
   16faa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fae:	54e7      	strb	r7, [r4, r3]
   16fb0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16fb4:	f001 800a 	beq.w	17fcc <d_print_comp_inner+0x14f8>
   16fb8:	29ff      	cmp	r1, #255	; 0xff
   16fba:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16fbe:	d1f1      	bne.n	16fa4 <d_print_comp_inner+0x4d0>
   16fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fc4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fcc:	4620      	mov	r0, r4
   16fce:	4798      	blx	r3
   16fd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16fd4:	3301      	adds	r3, #1
   16fd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16fda:	2101      	movs	r1, #1
   16fdc:	2300      	movs	r3, #0
   16fde:	e7e3      	b.n	16fa8 <d_print_comp_inner+0x4d4>
   16fe0:	4e91      	ldr	r6, [pc, #580]	; (17228 <d_print_comp_inner+0x754>)
   16fe2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16fe6:	f106 0a15 	add.w	sl, r6, #21
   16fea:	f04f 0900 	mov.w	r9, #0
   16fee:	e009      	b.n	17004 <d_print_comp_inner+0x530>
   16ff0:	460b      	mov	r3, r1
   16ff2:	3101      	adds	r1, #1
   16ff4:	4556      	cmp	r6, sl
   16ff6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16ffa:	54e7      	strb	r7, [r4, r3]
   16ffc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17000:	f000 87b3 	beq.w	17f6a <d_print_comp_inner+0x1496>
   17004:	29ff      	cmp	r1, #255	; 0xff
   17006:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1700a:	d1f1      	bne.n	16ff0 <d_print_comp_inner+0x51c>
   1700c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17014:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17018:	4620      	mov	r0, r4
   1701a:	4798      	blx	r3
   1701c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17020:	3301      	adds	r3, #1
   17022:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17026:	2101      	movs	r1, #1
   17028:	2300      	movs	r3, #0
   1702a:	e7e3      	b.n	16ff4 <d_print_comp_inner+0x520>
   1702c:	4e7f      	ldr	r6, [pc, #508]	; (1722c <d_print_comp_inner+0x758>)
   1702e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17032:	f106 0a12 	add.w	sl, r6, #18
   17036:	f04f 0900 	mov.w	r9, #0
   1703a:	e009      	b.n	17050 <d_print_comp_inner+0x57c>
   1703c:	460b      	mov	r3, r1
   1703e:	3101      	adds	r1, #1
   17040:	45b2      	cmp	sl, r6
   17042:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17046:	54e7      	strb	r7, [r4, r3]
   17048:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1704c:	f000 879b 	beq.w	17f86 <d_print_comp_inner+0x14b2>
   17050:	29ff      	cmp	r1, #255	; 0xff
   17052:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17056:	d1f1      	bne.n	1703c <d_print_comp_inner+0x568>
   17058:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1705c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17064:	4620      	mov	r0, r4
   17066:	4798      	blx	r3
   17068:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1706c:	3301      	adds	r3, #1
   1706e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17072:	2101      	movs	r1, #1
   17074:	2300      	movs	r3, #0
   17076:	e7e3      	b.n	17040 <d_print_comp_inner+0x56c>
   17078:	4e6d      	ldr	r6, [pc, #436]	; (17230 <d_print_comp_inner+0x75c>)
   1707a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1707e:	f106 0a10 	add.w	sl, r6, #16
   17082:	f04f 0900 	mov.w	r9, #0
   17086:	e009      	b.n	1709c <d_print_comp_inner+0x5c8>
   17088:	460b      	mov	r3, r1
   1708a:	3101      	adds	r1, #1
   1708c:	4556      	cmp	r6, sl
   1708e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17092:	54e7      	strb	r7, [r4, r3]
   17094:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17098:	f000 876e 	beq.w	17f78 <d_print_comp_inner+0x14a4>
   1709c:	29ff      	cmp	r1, #255	; 0xff
   1709e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170a2:	d1f1      	bne.n	17088 <d_print_comp_inner+0x5b4>
   170a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170b0:	4620      	mov	r0, r4
   170b2:	4798      	blx	r3
   170b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170b8:	3301      	adds	r3, #1
   170ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170be:	2101      	movs	r1, #1
   170c0:	2300      	movs	r3, #0
   170c2:	e7e3      	b.n	1708c <d_print_comp_inner+0x5b8>
   170c4:	4e5b      	ldr	r6, [pc, #364]	; (17234 <d_print_comp_inner+0x760>)
   170c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170ca:	f106 0a0d 	add.w	sl, r6, #13
   170ce:	f04f 0900 	mov.w	r9, #0
   170d2:	e009      	b.n	170e8 <d_print_comp_inner+0x614>
   170d4:	460b      	mov	r3, r1
   170d6:	3101      	adds	r1, #1
   170d8:	4556      	cmp	r6, sl
   170da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170de:	54e7      	strb	r7, [r4, r3]
   170e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170e4:	f000 8756 	beq.w	17f94 <d_print_comp_inner+0x14c0>
   170e8:	29ff      	cmp	r1, #255	; 0xff
   170ea:	f816 7b01 	ldrb.w	r7, [r6], #1
   170ee:	d1f1      	bne.n	170d4 <d_print_comp_inner+0x600>
   170f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170fc:	4620      	mov	r0, r4
   170fe:	4798      	blx	r3
   17100:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17104:	3301      	adds	r3, #1
   17106:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1710a:	2101      	movs	r1, #1
   1710c:	2300      	movs	r3, #0
   1710e:	e7e3      	b.n	170d8 <d_print_comp_inner+0x604>
   17110:	4e49      	ldr	r6, [pc, #292]	; (17238 <d_print_comp_inner+0x764>)
   17112:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17116:	f106 0a18 	add.w	sl, r6, #24
   1711a:	f04f 0900 	mov.w	r9, #0
   1711e:	e009      	b.n	17134 <d_print_comp_inner+0x660>
   17120:	460b      	mov	r3, r1
   17122:	3101      	adds	r1, #1
   17124:	45b2      	cmp	sl, r6
   17126:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1712a:	54e7      	strb	r7, [r4, r3]
   1712c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17130:	f000 86e3 	beq.w	17efa <d_print_comp_inner+0x1426>
   17134:	29ff      	cmp	r1, #255	; 0xff
   17136:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1713a:	d1f1      	bne.n	17120 <d_print_comp_inner+0x64c>
   1713c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17140:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17148:	4620      	mov	r0, r4
   1714a:	4798      	blx	r3
   1714c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17150:	3301      	adds	r3, #1
   17152:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17156:	2101      	movs	r1, #1
   17158:	2300      	movs	r3, #0
   1715a:	e7e3      	b.n	17124 <d_print_comp_inner+0x650>
   1715c:	4e37      	ldr	r6, [pc, #220]	; (1723c <d_print_comp_inner+0x768>)
   1715e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17162:	f106 0a0b 	add.w	sl, r6, #11
   17166:	f04f 0900 	mov.w	r9, #0
   1716a:	e009      	b.n	17180 <d_print_comp_inner+0x6ac>
   1716c:	460b      	mov	r3, r1
   1716e:	3101      	adds	r1, #1
   17170:	45b2      	cmp	sl, r6
   17172:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17176:	54e7      	strb	r7, [r4, r3]
   17178:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1717c:	f000 87ca 	beq.w	18114 <d_print_comp_inner+0x1640>
   17180:	29ff      	cmp	r1, #255	; 0xff
   17182:	f816 7b01 	ldrb.w	r7, [r6], #1
   17186:	d1f1      	bne.n	1716c <d_print_comp_inner+0x698>
   17188:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1718c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17190:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17194:	4620      	mov	r0, r4
   17196:	4798      	blx	r3
   17198:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1719c:	3301      	adds	r3, #1
   1719e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171a2:	2101      	movs	r1, #1
   171a4:	2300      	movs	r3, #0
   171a6:	e7e3      	b.n	17170 <d_print_comp_inner+0x69c>
   171a8:	4e25      	ldr	r6, [pc, #148]	; (17240 <d_print_comp_inner+0x76c>)
   171aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171ae:	f106 0a08 	add.w	sl, r6, #8
   171b2:	f04f 0900 	mov.w	r9, #0
   171b6:	e009      	b.n	171cc <d_print_comp_inner+0x6f8>
   171b8:	460b      	mov	r3, r1
   171ba:	3101      	adds	r1, #1
   171bc:	45b2      	cmp	sl, r6
   171be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171c2:	54e7      	strb	r7, [r4, r3]
   171c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171c8:	f000 86c8 	beq.w	17f5c <d_print_comp_inner+0x1488>
   171cc:	29ff      	cmp	r1, #255	; 0xff
   171ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171d2:	d1f1      	bne.n	171b8 <d_print_comp_inner+0x6e4>
   171d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171e0:	4620      	mov	r0, r4
   171e2:	4798      	blx	r3
   171e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171e8:	3301      	adds	r3, #1
   171ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171ee:	2101      	movs	r1, #1
   171f0:	2300      	movs	r3, #0
   171f2:	e7e3      	b.n	171bc <d_print_comp_inner+0x6e8>
   171f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171f8:	29ff      	cmp	r1, #255	; 0xff
   171fa:	f001 847c 	beq.w	18af6 <d_print_comp_inner+0x2022>
   171fe:	1c4a      	adds	r2, r1, #1
   17200:	237e      	movs	r3, #126	; 0x7e
   17202:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17206:	5463      	strb	r3, [r4, r1]
   17208:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1720c:	4641      	mov	r1, r8
   1720e:	68aa      	ldr	r2, [r5, #8]
   17210:	4620      	mov	r0, r4
   17212:	f002 fa03 	bl	1961c <d_print_comp>
   17216:	e52b      	b.n	16c70 <d_print_comp_inner+0x19c>
   17218:	68aa      	ldr	r2, [r5, #8]
   1721a:	f002 f9ff 	bl	1961c <d_print_comp>
   1721e:	e527      	b.n	16c70 <d_print_comp_inner+0x19c>
   17220:	000242c3 	.word	0x000242c3
   17224:	00024293 	.word	0x00024293
   17228:	0002428f 	.word	0x0002428f
   1722c:	00024267 	.word	0x00024267
   17230:	0002427b 	.word	0x0002427b
   17234:	00024258 	.word	0x00024258
   17238:	00024233 	.word	0x00024233
   1723c:	0002421c 	.word	0x0002421c
   17240:	00024227 	.word	0x00024227
   17244:	2200      	movs	r2, #0
   17246:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1724a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1724e:	686e      	ldr	r6, [r5, #4]
   17250:	9300      	str	r3, [sp, #0]
   17252:	2e00      	cmp	r6, #0
   17254:	f000 864c 	beq.w	17ef0 <d_print_comp_inner+0x141c>
   17258:	f10d 0910 	add.w	r9, sp, #16
   1725c:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17260:	4617      	mov	r7, r2
   17262:	4696      	mov	lr, r2
   17264:	464b      	mov	r3, r9
   17266:	7831      	ldrb	r1, [r6, #0]
   17268:	601a      	str	r2, [r3, #0]
   1726a:	f1a1 021c 	sub.w	r2, r1, #28
   1726e:	2a04      	cmp	r2, #4
   17270:	605e      	str	r6, [r3, #4]
   17272:	f8c3 e008 	str.w	lr, [r3, #8]
   17276:	f8c3 c00c 	str.w	ip, [r3, #12]
   1727a:	f107 0701 	add.w	r7, r7, #1
   1727e:	4618      	mov	r0, r3
   17280:	461a      	mov	r2, r3
   17282:	f240 862a 	bls.w	17eda <d_print_comp_inner+0x1406>
   17286:	294c      	cmp	r1, #76	; 0x4c
   17288:	f000 8627 	beq.w	17eda <d_print_comp_inner+0x1406>
   1728c:	2904      	cmp	r1, #4
   1728e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17292:	f001 87bb 	beq.w	1920c <d_print_comp_inner+0x2738>
   17296:	2902      	cmp	r1, #2
   17298:	d11a      	bne.n	172d0 <d_print_comp_inner+0x7fc>
   1729a:	f8d6 b008 	ldr.w	fp, [r6, #8]
   1729e:	f89b 3000 	ldrb.w	r3, [fp]
   172a2:	2b46      	cmp	r3, #70	; 0x46
   172a4:	f002 8035 	beq.w	19312 <d_print_comp_inner+0x283e>
   172a8:	462b      	mov	r3, r5
   172aa:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   172ae:	9601      	str	r6, [sp, #4]
   172b0:	465d      	mov	r5, fp
   172b2:	4676      	mov	r6, lr
   172b4:	46a2      	mov	sl, r4
   172b6:	469b      	mov	fp, r3
   172b8:	782b      	ldrb	r3, [r5, #0]
   172ba:	f1a3 021c 	sub.w	r2, r3, #28
   172be:	2a04      	cmp	r2, #4
   172c0:	f241 805d 	bls.w	1837e <d_print_comp_inner+0x18aa>
   172c4:	2b4c      	cmp	r3, #76	; 0x4c
   172c6:	f001 805a 	beq.w	1837e <d_print_comp_inner+0x18aa>
   172ca:	9e01      	ldr	r6, [sp, #4]
   172cc:	4654      	mov	r4, sl
   172ce:	465d      	mov	r5, fp
   172d0:	68aa      	ldr	r2, [r5, #8]
   172d2:	4641      	mov	r1, r8
   172d4:	4620      	mov	r0, r4
   172d6:	f002 f9a1 	bl	1961c <d_print_comp>
   172da:	7833      	ldrb	r3, [r6, #0]
   172dc:	2b04      	cmp	r3, #4
   172de:	f002 8020 	beq.w	19322 <d_print_comp_inner+0x284e>
   172e2:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   172e6:	2620      	movs	r6, #32
   172e8:	f859 5c08 	ldr.w	r5, [r9, #-8]
   172ec:	3f01      	subs	r7, #1
   172ee:	b985      	cbnz	r5, 17312 <d_print_comp_inner+0x83e>
   172f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   172f4:	29ff      	cmp	r1, #255	; 0xff
   172f6:	f002 8043 	beq.w	19380 <d_print_comp_inner+0x28ac>
   172fa:	1c4b      	adds	r3, r1, #1
   172fc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17300:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17304:	5466      	strb	r6, [r4, r1]
   17306:	4620      	mov	r0, r4
   17308:	4641      	mov	r1, r8
   1730a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1730e:	f002 f995 	bl	1963c <d_print_mod>
   17312:	f1a9 0910 	sub.w	r9, r9, #16
   17316:	2f00      	cmp	r7, #0
   17318:	d1e6      	bne.n	172e8 <d_print_comp_inner+0x814>
   1731a:	9b00      	ldr	r3, [sp, #0]
   1731c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17320:	e4a6      	b.n	16c70 <d_print_comp_inner+0x19c>
   17322:	4ed1      	ldr	r6, [pc, #836]	; (17668 <d_print_comp_inner+0xb94>)
   17324:	686a      	ldr	r2, [r5, #4]
   17326:	f002 f979 	bl	1961c <d_print_comp>
   1732a:	f106 0a05 	add.w	sl, r6, #5
   1732e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17332:	f04f 0900 	mov.w	r9, #0
   17336:	e009      	b.n	1734c <d_print_comp_inner+0x878>
   17338:	460b      	mov	r3, r1
   1733a:	3101      	adds	r1, #1
   1733c:	45b2      	cmp	sl, r6
   1733e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17342:	54e7      	strb	r7, [r4, r3]
   17344:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17348:	f000 86d1 	beq.w	180ee <d_print_comp_inner+0x161a>
   1734c:	29ff      	cmp	r1, #255	; 0xff
   1734e:	f816 7b01 	ldrb.w	r7, [r6], #1
   17352:	d1f1      	bne.n	17338 <d_print_comp_inner+0x864>
   17354:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17358:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1735c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17360:	4620      	mov	r0, r4
   17362:	4798      	blx	r3
   17364:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17368:	3301      	adds	r3, #1
   1736a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1736e:	2101      	movs	r1, #1
   17370:	2300      	movs	r3, #0
   17372:	e7e3      	b.n	1733c <d_print_comp_inner+0x868>
   17374:	686a      	ldr	r2, [r5, #4]
   17376:	f002 f951 	bl	1961c <d_print_comp>
   1737a:	f018 0904 	ands.w	r9, r8, #4
   1737e:	f001 82aa 	beq.w	188d6 <d_print_comp_inner+0x1e02>
   17382:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17386:	29ff      	cmp	r1, #255	; 0xff
   17388:	f001 859a 	beq.w	18ec0 <d_print_comp_inner+0x23ec>
   1738c:	1c4a      	adds	r2, r1, #1
   1738e:	232e      	movs	r3, #46	; 0x2e
   17390:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17394:	5463      	strb	r3, [r4, r1]
   17396:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1739a:	68ad      	ldr	r5, [r5, #8]
   1739c:	782b      	ldrb	r3, [r5, #0]
   1739e:	2b46      	cmp	r3, #70	; 0x46
   173a0:	f001 83cc 	beq.w	18b3c <d_print_comp_inner+0x2068>
   173a4:	462a      	mov	r2, r5
   173a6:	4641      	mov	r1, r8
   173a8:	4620      	mov	r0, r4
   173aa:	f002 f937 	bl	1961c <d_print_comp>
   173ae:	e45f      	b.n	16c70 <d_print_comp_inner+0x19c>
   173b0:	f011 0804 	ands.w	r8, r1, #4
   173b4:	f041 808b 	bne.w	184ce <d_print_comp_inner+0x19fa>
   173b8:	68af      	ldr	r7, [r5, #8]
   173ba:	686d      	ldr	r5, [r5, #4]
   173bc:	2f00      	cmp	r7, #0
   173be:	f43f ac57 	beq.w	16c70 <d_print_comp_inner+0x19c>
   173c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173c6:	442f      	add	r7, r5
   173c8:	e009      	b.n	173de <d_print_comp_inner+0x90a>
   173ca:	460b      	mov	r3, r1
   173cc:	3101      	adds	r1, #1
   173ce:	42bd      	cmp	r5, r7
   173d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173d4:	54e6      	strb	r6, [r4, r3]
   173d6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   173da:	f43f ac49 	beq.w	16c70 <d_print_comp_inner+0x19c>
   173de:	29ff      	cmp	r1, #255	; 0xff
   173e0:	f815 6b01 	ldrb.w	r6, [r5], #1
   173e4:	d1f1      	bne.n	173ca <d_print_comp_inner+0x8f6>
   173e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   173ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173f2:	4620      	mov	r0, r4
   173f4:	4798      	blx	r3
   173f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173fa:	3301      	adds	r3, #1
   173fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17400:	2101      	movs	r1, #1
   17402:	2300      	movs	r3, #0
   17404:	e7e3      	b.n	173ce <d_print_comp_inner+0x8fa>
   17406:	2301      	movs	r3, #1
   17408:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1740c:	e430      	b.n	16c70 <d_print_comp_inner+0x19c>
   1740e:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   17412:	2b00      	cmp	r3, #0
   17414:	f041 8106 	bne.w	18624 <d_print_comp_inner+0x1b50>
   17418:	1d29      	adds	r1, r5, #4
   1741a:	f7fd fa97 	bl	1494c <d_lookup_template_argument.isra.6>
   1741e:	2800      	cmp	r0, #0
   17420:	f43f ac3a 	beq.w	16c98 <d_print_comp_inner+0x1c4>
   17424:	7803      	ldrb	r3, [r0, #0]
   17426:	2b2f      	cmp	r3, #47	; 0x2f
   17428:	f001 83fc 	beq.w	18c24 <d_print_comp_inner+0x2150>
   1742c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   17430:	682b      	ldr	r3, [r5, #0]
   17432:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17436:	4602      	mov	r2, r0
   17438:	4641      	mov	r1, r8
   1743a:	4620      	mov	r0, r4
   1743c:	f002 f8ee 	bl	1961c <d_print_comp>
   17440:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   17444:	e414      	b.n	16c70 <d_print_comp_inner+0x19c>
   17446:	2300      	movs	r3, #0
   17448:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1744c:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   17450:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17454:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   17458:	f011 0f04 	tst.w	r1, #4
   1745c:	686e      	ldr	r6, [r5, #4]
   1745e:	d005      	beq.n	1746c <d_print_comp_inner+0x998>
   17460:	7833      	ldrb	r3, [r6, #0]
   17462:	b91b      	cbnz	r3, 1746c <d_print_comp_inner+0x998>
   17464:	68b2      	ldr	r2, [r6, #8]
   17466:	2a06      	cmp	r2, #6
   17468:	f001 853c 	beq.w	18ee4 <d_print_comp_inner+0x2410>
   1746c:	4632      	mov	r2, r6
   1746e:	4641      	mov	r1, r8
   17470:	4620      	mov	r0, r4
   17472:	f002 f8d3 	bl	1961c <d_print_comp>
   17476:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1747a:	2b3c      	cmp	r3, #60	; 0x3c
   1747c:	f001 8274 	beq.w	18968 <d_print_comp_inner+0x1e94>
   17480:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17484:	2bff      	cmp	r3, #255	; 0xff
   17486:	f001 8489 	beq.w	18d9c <d_print_comp_inner+0x22c8>
   1748a:	1c59      	adds	r1, r3, #1
   1748c:	223c      	movs	r2, #60	; 0x3c
   1748e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17492:	54e2      	strb	r2, [r4, r3]
   17494:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17498:	4641      	mov	r1, r8
   1749a:	68aa      	ldr	r2, [r5, #8]
   1749c:	4620      	mov	r0, r4
   1749e:	f002 f8bd 	bl	1961c <d_print_comp>
   174a2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   174a6:	2b3e      	cmp	r3, #62	; 0x3e
   174a8:	f001 8239 	beq.w	1891e <d_print_comp_inner+0x1e4a>
   174ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   174b0:	2bff      	cmp	r3, #255	; 0xff
   174b2:	f001 8460 	beq.w	18d76 <d_print_comp_inner+0x22a2>
   174b6:	1c59      	adds	r1, r3, #1
   174b8:	223e      	movs	r2, #62	; 0x3e
   174ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174be:	54e2      	strb	r2, [r4, r3]
   174c0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   174c4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   174c8:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   174cc:	f7ff bbd0 	b.w	16c70 <d_print_comp_inner+0x19c>
   174d0:	686f      	ldr	r7, [r5, #4]
   174d2:	2f00      	cmp	r7, #0
   174d4:	f001 8082 	beq.w	185dc <d_print_comp_inner+0x1b08>
   174d8:	4d64      	ldr	r5, [pc, #400]	; (1766c <d_print_comp_inner+0xb98>)
   174da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   174de:	f105 0906 	add.w	r9, r5, #6
   174e2:	f04f 0800 	mov.w	r8, #0
   174e6:	e009      	b.n	174fc <d_print_comp_inner+0xa28>
   174e8:	460b      	mov	r3, r1
   174ea:	3101      	adds	r1, #1
   174ec:	45a9      	cmp	r9, r5
   174ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174f2:	54e6      	strb	r6, [r4, r3]
   174f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   174f8:	f000 8782 	beq.w	18400 <d_print_comp_inner+0x192c>
   174fc:	29ff      	cmp	r1, #255	; 0xff
   174fe:	f815 6b01 	ldrb.w	r6, [r5], #1
   17502:	d1f1      	bne.n	174e8 <d_print_comp_inner+0xa14>
   17504:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17508:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1750c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17510:	4620      	mov	r0, r4
   17512:	4798      	blx	r3
   17514:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17518:	3301      	adds	r3, #1
   1751a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1751e:	2101      	movs	r1, #1
   17520:	2300      	movs	r3, #0
   17522:	e7e3      	b.n	174ec <d_print_comp_inner+0xa18>
   17524:	4e52      	ldr	r6, [pc, #328]	; (17670 <d_print_comp_inner+0xb9c>)
   17526:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1752a:	f106 0a0a 	add.w	sl, r6, #10
   1752e:	f04f 0900 	mov.w	r9, #0
   17532:	e009      	b.n	17548 <d_print_comp_inner+0xa74>
   17534:	460b      	mov	r3, r1
   17536:	3101      	adds	r1, #1
   17538:	4556      	cmp	r6, sl
   1753a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1753e:	54e7      	strb	r7, [r4, r3]
   17540:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17544:	f000 8701 	beq.w	1834a <d_print_comp_inner+0x1876>
   17548:	29ff      	cmp	r1, #255	; 0xff
   1754a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1754e:	d1f1      	bne.n	17534 <d_print_comp_inner+0xa60>
   17550:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17554:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17558:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1755c:	4620      	mov	r0, r4
   1755e:	4798      	blx	r3
   17560:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17564:	3301      	adds	r3, #1
   17566:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1756a:	2101      	movs	r1, #1
   1756c:	2300      	movs	r3, #0
   1756e:	e7e3      	b.n	17538 <d_print_comp_inner+0xa64>
   17570:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17574:	792d      	ldrb	r5, [r5, #4]
   17576:	29ff      	cmp	r1, #255	; 0xff
   17578:	f001 82ab 	beq.w	18ad2 <d_print_comp_inner+0x1ffe>
   1757c:	1c4b      	adds	r3, r1, #1
   1757e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17582:	5465      	strb	r5, [r4, r1]
   17584:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17588:	f7ff bb72 	b.w	16c70 <d_print_comp_inner+0x19c>
   1758c:	686a      	ldr	r2, [r5, #4]
   1758e:	f002 f845 	bl	1961c <d_print_comp>
   17592:	68aa      	ldr	r2, [r5, #8]
   17594:	4641      	mov	r1, r8
   17596:	4620      	mov	r0, r4
   17598:	f002 f840 	bl	1961c <d_print_comp>
   1759c:	f7ff bb68 	b.w	16c70 <d_print_comp_inner+0x19c>
   175a0:	4e34      	ldr	r6, [pc, #208]	; (17674 <d_print_comp_inner+0xba0>)
   175a2:	686a      	ldr	r2, [r5, #4]
   175a4:	f002 f83a 	bl	1961c <d_print_comp>
   175a8:	f106 0a08 	add.w	sl, r6, #8
   175ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   175b0:	f04f 0900 	mov.w	r9, #0
   175b4:	e009      	b.n	175ca <d_print_comp_inner+0xaf6>
   175b6:	460b      	mov	r3, r1
   175b8:	3101      	adds	r1, #1
   175ba:	4556      	cmp	r6, sl
   175bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175c0:	54e7      	strb	r7, [r4, r3]
   175c2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175c6:	f000 8508 	beq.w	17fda <d_print_comp_inner+0x1506>
   175ca:	29ff      	cmp	r1, #255	; 0xff
   175cc:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   175d0:	d1f1      	bne.n	175b6 <d_print_comp_inner+0xae2>
   175d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   175da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175de:	4620      	mov	r0, r4
   175e0:	4798      	blx	r3
   175e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175e6:	3301      	adds	r3, #1
   175e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   175ec:	2101      	movs	r1, #1
   175ee:	2300      	movs	r3, #0
   175f0:	e7e3      	b.n	175ba <d_print_comp_inner+0xae6>
   175f2:	686a      	ldr	r2, [r5, #4]
   175f4:	b10a      	cbz	r2, 175fa <d_print_comp_inner+0xb26>
   175f6:	f002 f811 	bl	1961c <d_print_comp>
   175fa:	68ab      	ldr	r3, [r5, #8]
   175fc:	2b00      	cmp	r3, #0
   175fe:	f43f ab37 	beq.w	16c70 <d_print_comp_inner+0x19c>
   17602:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   17606:	2efd      	cmp	r6, #253	; 0xfd
   17608:	f201 81bc 	bhi.w	18984 <d_print_comp_inner+0x1eb0>
   1760c:	4f1a      	ldr	r7, [pc, #104]	; (17678 <d_print_comp_inner+0xba4>)
   1760e:	f04f 0a00 	mov.w	sl, #0
   17612:	f107 0b02 	add.w	fp, r7, #2
   17616:	4631      	mov	r1, r6
   17618:	e009      	b.n	1762e <d_print_comp_inner+0xb5a>
   1761a:	460b      	mov	r3, r1
   1761c:	3101      	adds	r1, #1
   1761e:	455f      	cmp	r7, fp
   17620:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17624:	54e6      	strb	r6, [r4, r3]
   17626:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1762a:	f000 86c1 	beq.w	183b0 <d_print_comp_inner+0x18dc>
   1762e:	29ff      	cmp	r1, #255	; 0xff
   17630:	f817 6b01 	ldrb.w	r6, [r7], #1
   17634:	d1f1      	bne.n	1761a <d_print_comp_inner+0xb46>
   17636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1763a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   1763e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17642:	4620      	mov	r0, r4
   17644:	4798      	blx	r3
   17646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1764a:	3301      	adds	r3, #1
   1764c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17650:	2101      	movs	r1, #1
   17652:	2300      	movs	r3, #0
   17654:	e7e3      	b.n	1761e <d_print_comp_inner+0xb4a>
   17656:	4e09      	ldr	r6, [pc, #36]	; (1767c <d_print_comp_inner+0xba8>)
   17658:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1765c:	f106 0a09 	add.w	sl, r6, #9
   17660:	f04f 0900 	mov.w	r9, #0
   17664:	e016      	b.n	17694 <d_print_comp_inner+0xbc0>
   17666:	bf00      	nop
   17668:	000241e8 	.word	0x000241e8
   1766c:	000243f4 	.word	0x000243f4
   17670:	000243e0 	.word	0x000243e0
   17674:	0002445b 	.word	0x0002445b
   17678:	0002437c 	.word	0x0002437c
   1767c:	0002438b 	.word	0x0002438b
   17680:	460b      	mov	r3, r1
   17682:	3101      	adds	r1, #1
   17684:	4556      	cmp	r6, sl
   17686:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1768a:	54e7      	strb	r7, [r4, r3]
   1768c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17690:	f000 8594 	beq.w	181bc <d_print_comp_inner+0x16e8>
   17694:	29ff      	cmp	r1, #255	; 0xff
   17696:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1769a:	d1f1      	bne.n	17680 <d_print_comp_inner+0xbac>
   1769c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176a8:	4620      	mov	r0, r4
   176aa:	4798      	blx	r3
   176ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176b0:	3301      	adds	r3, #1
   176b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176b6:	2101      	movs	r1, #1
   176b8:	2300      	movs	r3, #0
   176ba:	e7e3      	b.n	17684 <d_print_comp_inner+0xbb0>
   176bc:	4ed1      	ldr	r6, [pc, #836]	; (17a04 <d_print_comp_inner+0xf30>)
   176be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   176c2:	f106 0a09 	add.w	sl, r6, #9
   176c6:	f04f 0900 	mov.w	r9, #0
   176ca:	e009      	b.n	176e0 <d_print_comp_inner+0xc0c>
   176cc:	460b      	mov	r3, r1
   176ce:	3101      	adds	r1, #1
   176d0:	4556      	cmp	r6, sl
   176d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176d6:	54e7      	strb	r7, [r4, r3]
   176d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   176dc:	f000 8597 	beq.w	1820e <d_print_comp_inner+0x173a>
   176e0:	29ff      	cmp	r1, #255	; 0xff
   176e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   176e6:	d1f1      	bne.n	176cc <d_print_comp_inner+0xbf8>
   176e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176f4:	4620      	mov	r0, r4
   176f6:	4798      	blx	r3
   176f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176fc:	3301      	adds	r3, #1
   176fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17702:	2101      	movs	r1, #1
   17704:	2300      	movs	r3, #0
   17706:	e7e3      	b.n	176d0 <d_print_comp_inner+0xbfc>
   17708:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1770c:	4dbe      	ldr	r5, [pc, #760]	; (17a08 <d_print_comp_inner+0xf34>)
   1770e:	f8da 7008 	ldr.w	r7, [sl, #8]
   17712:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17716:	f105 0808 	add.w	r8, r5, #8
   1771a:	f04f 0900 	mov.w	r9, #0
   1771e:	e009      	b.n	17734 <d_print_comp_inner+0xc60>
   17720:	460b      	mov	r3, r1
   17722:	3101      	adds	r1, #1
   17724:	45a8      	cmp	r8, r5
   17726:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1772a:	54e6      	strb	r6, [r4, r3]
   1772c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17730:	f000 8506 	beq.w	18140 <d_print_comp_inner+0x166c>
   17734:	29ff      	cmp	r1, #255	; 0xff
   17736:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1773a:	d1f1      	bne.n	17720 <d_print_comp_inner+0xc4c>
   1773c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17740:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17744:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17748:	4620      	mov	r0, r4
   1774a:	4798      	blx	r3
   1774c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17750:	3301      	adds	r3, #1
   17752:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17756:	2101      	movs	r1, #1
   17758:	2300      	movs	r3, #0
   1775a:	e7e3      	b.n	17724 <d_print_comp_inner+0xc50>
   1775c:	686a      	ldr	r2, [r5, #4]
   1775e:	68ae      	ldr	r6, [r5, #8]
   17760:	b10a      	cbz	r2, 17766 <d_print_comp_inner+0xc92>
   17762:	f001 ff5b 	bl	1961c <d_print_comp>
   17766:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1776a:	2bff      	cmp	r3, #255	; 0xff
   1776c:	f001 82b1 	beq.w	18cd2 <d_print_comp_inner+0x21fe>
   17770:	1c5a      	adds	r2, r3, #1
   17772:	257b      	movs	r5, #123	; 0x7b
   17774:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17778:	4641      	mov	r1, r8
   1777a:	54e5      	strb	r5, [r4, r3]
   1777c:	4632      	mov	r2, r6
   1777e:	4620      	mov	r0, r4
   17780:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17784:	f001 ff4a 	bl	1961c <d_print_comp>
   17788:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1778c:	29ff      	cmp	r1, #255	; 0xff
   1778e:	f001 81e7 	beq.w	18b60 <d_print_comp_inner+0x208c>
   17792:	1c4a      	adds	r2, r1, #1
   17794:	237d      	movs	r3, #125	; 0x7d
   17796:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1779a:	5463      	strb	r3, [r4, r1]
   1779c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   177a0:	f7ff ba66 	b.w	16c70 <d_print_comp_inner+0x19c>
   177a4:	f8d5 9004 	ldr.w	r9, [r5, #4]
   177a8:	68ae      	ldr	r6, [r5, #8]
   177aa:	f899 3000 	ldrb.w	r3, [r9]
   177ae:	2b31      	cmp	r3, #49	; 0x31
   177b0:	f000 87cb 	beq.w	1874a <d_print_comp_inner+0x1c76>
   177b4:	2b33      	cmp	r3, #51	; 0x33
   177b6:	f041 86d3 	bne.w	19560 <d_print_comp_inner+0x2a8c>
   177ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   177be:	29ff      	cmp	r1, #255	; 0xff
   177c0:	f001 84c3 	beq.w	1914a <d_print_comp_inner+0x2676>
   177c4:	1c4a      	adds	r2, r1, #1
   177c6:	2328      	movs	r3, #40	; 0x28
   177c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   177cc:	5463      	strb	r3, [r4, r1]
   177ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   177d2:	a904      	add	r1, sp, #16
   177d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   177d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   177dc:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   177e0:	4620      	mov	r0, r4
   177e2:	4641      	mov	r1, r8
   177e4:	9305      	str	r3, [sp, #20]
   177e6:	9204      	str	r2, [sp, #16]
   177e8:	f7ff f974 	bl	16ad4 <d_print_comp_inner>
   177ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   177f0:	9b05      	ldr	r3, [sp, #20]
   177f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   177f6:	29ff      	cmp	r1, #255	; 0xff
   177f8:	f001 8496 	beq.w	19128 <d_print_comp_inner+0x2654>
   177fc:	2329      	movs	r3, #41	; 0x29
   177fe:	1c4a      	adds	r2, r1, #1
   17800:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17804:	5463      	strb	r3, [r4, r1]
   17806:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1780a:	4632      	mov	r2, r6
   1780c:	4641      	mov	r1, r8
   1780e:	4620      	mov	r0, r4
   17810:	f002 fd2a 	bl	1a268 <d_print_subexpr>
   17814:	f7ff ba2c 	b.w	16c70 <d_print_comp_inner+0x19c>
   17818:	686a      	ldr	r2, [r5, #4]
   1781a:	f002 fce7 	bl	1a1ec <d_print_expr_op>
   1781e:	f7ff ba27 	b.w	16c70 <d_print_comp_inner+0x19c>
   17822:	f011 0f20 	tst.w	r1, #32
   17826:	f040 8753 	bne.w	186d0 <d_print_comp_inner+0x1bfc>
   1782a:	686a      	ldr	r2, [r5, #4]
   1782c:	b11a      	cbz	r2, 17836 <d_print_comp_inner+0xd62>
   1782e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17832:	f001 81d0 	beq.w	18bd6 <d_print_comp_inner+0x2102>
   17836:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   1783a:	f105 0208 	add.w	r2, r5, #8
   1783e:	4641      	mov	r1, r8
   17840:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17844:	4620      	mov	r0, r4
   17846:	f002 fbdd 	bl	1a004 <d_print_function_type.isra.11>
   1784a:	f7ff ba11 	b.w	16c70 <d_print_comp_inner+0x19c>
   1784e:	f011 0804 	ands.w	r8, r1, #4
   17852:	686b      	ldr	r3, [r5, #4]
   17854:	f040 8612 	bne.w	1847c <d_print_comp_inner+0x19a8>
   17858:	e893 00a0 	ldmia.w	r3, {r5, r7}
   1785c:	2f00      	cmp	r7, #0
   1785e:	f43f aa07 	beq.w	16c70 <d_print_comp_inner+0x19c>
   17862:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17866:	442f      	add	r7, r5
   17868:	e009      	b.n	1787e <d_print_comp_inner+0xdaa>
   1786a:	460b      	mov	r3, r1
   1786c:	3101      	adds	r1, #1
   1786e:	42bd      	cmp	r5, r7
   17870:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17874:	54e6      	strb	r6, [r4, r3]
   17876:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1787a:	f43f a9f9 	beq.w	16c70 <d_print_comp_inner+0x19c>
   1787e:	29ff      	cmp	r1, #255	; 0xff
   17880:	f815 6b01 	ldrb.w	r6, [r5], #1
   17884:	d1f1      	bne.n	1786a <d_print_comp_inner+0xd96>
   17886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1788a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1788e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17892:	4620      	mov	r0, r4
   17894:	4798      	blx	r3
   17896:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1789a:	3301      	adds	r3, #1
   1789c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178a0:	2101      	movs	r1, #1
   178a2:	2300      	movs	r3, #0
   178a4:	e7e3      	b.n	1786e <d_print_comp_inner+0xd9a>
   178a6:	6869      	ldr	r1, [r5, #4]
   178a8:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   178ac:	780b      	ldrb	r3, [r1, #0]
   178ae:	2f00      	cmp	r7, #0
   178b0:	f040 85e1 	bne.w	18476 <d_print_comp_inner+0x19a2>
   178b4:	2b05      	cmp	r3, #5
   178b6:	f001 81c7 	beq.w	18c48 <d_print_comp_inner+0x2174>
   178ba:	2b23      	cmp	r3, #35	; 0x23
   178bc:	f000 8689 	beq.w	185d2 <d_print_comp_inner+0x1afe>
   178c0:	782a      	ldrb	r2, [r5, #0]
   178c2:	429a      	cmp	r2, r3
   178c4:	f000 8685 	beq.w	185d2 <d_print_comp_inner+0x1afe>
   178c8:	2b24      	cmp	r3, #36	; 0x24
   178ca:	f47f a9eb 	bne.w	16ca4 <d_print_comp_inner+0x1d0>
   178ce:	a814      	add	r0, sp, #80	; 0x50
   178d0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   178d4:	684a      	ldr	r2, [r1, #4]
   178d6:	f840 3d40 	str.w	r3, [r0, #-64]!
   178da:	2100      	movs	r1, #0
   178dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   178e0:	9505      	str	r5, [sp, #20]
   178e2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   178e6:	9106      	str	r1, [sp, #24]
   178e8:	9307      	str	r3, [sp, #28]
   178ea:	2a00      	cmp	r2, #0
   178ec:	f47f a9e8 	bne.w	16cc0 <d_print_comp_inner+0x1ec>
   178f0:	f7ff b9e5 	b.w	16cbe <d_print_comp_inner+0x1ea>
   178f4:	686a      	ldr	r2, [r5, #4]
   178f6:	f001 fe91 	bl	1961c <d_print_comp>
   178fa:	f7ff b9b9 	b.w	16c70 <d_print_comp_inner+0x19c>
   178fe:	ab14      	add	r3, sp, #80	; 0x50
   17900:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17904:	f843 2d40 	str.w	r2, [r3, #-64]!
   17908:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1790c:	68aa      	ldr	r2, [r5, #8]
   1790e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17912:	9307      	str	r3, [sp, #28]
   17914:	2600      	movs	r6, #0
   17916:	9505      	str	r5, [sp, #20]
   17918:	9606      	str	r6, [sp, #24]
   1791a:	f001 fe7f 	bl	1961c <d_print_comp>
   1791e:	9b06      	ldr	r3, [sp, #24]
   17920:	b923      	cbnz	r3, 1792c <d_print_comp_inner+0xe58>
   17922:	462a      	mov	r2, r5
   17924:	4641      	mov	r1, r8
   17926:	4620      	mov	r0, r4
   17928:	f001 fe88 	bl	1963c <d_print_mod>
   1792c:	9b04      	ldr	r3, [sp, #16]
   1792e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17932:	f7ff b99d 	b.w	16c70 <d_print_comp_inner+0x19c>
   17936:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   1793a:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   1793e:	f849 bd40 	str.w	fp, [r9, #-64]!
   17942:	2200      	movs	r2, #0
   17944:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17948:	f8cd b000 	str.w	fp, [sp]
   1794c:	4659      	mov	r1, fp
   1794e:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17952:	9505      	str	r5, [sp, #20]
   17954:	9206      	str	r2, [sp, #24]
   17956:	9307      	str	r3, [sp, #28]
   17958:	2900      	cmp	r1, #0
   1795a:	f001 83a0 	beq.w	1909e <d_print_comp_inner+0x25ca>
   1795e:	684b      	ldr	r3, [r1, #4]
   17960:	781b      	ldrb	r3, [r3, #0]
   17962:	3b19      	subs	r3, #25
   17964:	2b02      	cmp	r3, #2
   17966:	f201 839a 	bhi.w	1909e <d_print_comp_inner+0x25ca>
   1796a:	46ac      	mov	ip, r5
   1796c:	2701      	movs	r7, #1
   1796e:	460e      	mov	r6, r1
   17970:	464d      	mov	r5, r9
   17972:	e004      	b.n	1797e <d_print_comp_inner+0xeaa>
   17974:	6873      	ldr	r3, [r6, #4]
   17976:	781b      	ldrb	r3, [r3, #0]
   17978:	3b19      	subs	r3, #25
   1797a:	2b02      	cmp	r3, #2
   1797c:	d81b      	bhi.n	179b6 <d_print_comp_inner+0xee2>
   1797e:	68b3      	ldr	r3, [r6, #8]
   17980:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17984:	aa14      	add	r2, sp, #80	; 0x50
   17986:	eb02 0b0e 	add.w	fp, r2, lr
   1798a:	b98b      	cbnz	r3, 179b0 <d_print_comp_inner+0xedc>
   1798c:	2f03      	cmp	r7, #3
   1798e:	f201 80f9 	bhi.w	18b84 <d_print_comp_inner+0x20b0>
   17992:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17996:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   1799a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1799e:	f84b 5c40 	str.w	r5, [fp, #-64]
   179a2:	2301      	movs	r3, #1
   179a4:	eb09 050e 	add.w	r5, r9, lr
   179a8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   179ac:	3701      	adds	r7, #1
   179ae:	60b3      	str	r3, [r6, #8]
   179b0:	6836      	ldr	r6, [r6, #0]
   179b2:	2e00      	cmp	r6, #0
   179b4:	d1de      	bne.n	17974 <d_print_comp_inner+0xea0>
   179b6:	f8dc 2008 	ldr.w	r2, [ip, #8]
   179ba:	4641      	mov	r1, r8
   179bc:	4620      	mov	r0, r4
   179be:	4665      	mov	r5, ip
   179c0:	f001 fe2c 	bl	1961c <d_print_comp>
   179c4:	9b06      	ldr	r3, [sp, #24]
   179c6:	9a00      	ldr	r2, [sp, #0]
   179c8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   179cc:	2b00      	cmp	r3, #0
   179ce:	f47f a94f 	bne.w	16c70 <d_print_comp_inner+0x19c>
   179d2:	2f01      	cmp	r7, #1
   179d4:	d00c      	beq.n	179f0 <d_print_comp_inner+0xf1c>
   179d6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   179da:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   179de:	3f01      	subs	r7, #1
   179e0:	4641      	mov	r1, r8
   179e2:	4620      	mov	r0, r4
   179e4:	f001 fe2a 	bl	1963c <d_print_mod>
   179e8:	2f01      	cmp	r7, #1
   179ea:	f1a9 0910 	sub.w	r9, r9, #16
   179ee:	d1f4      	bne.n	179da <d_print_comp_inner+0xf06>
   179f0:	1d2a      	adds	r2, r5, #4
   179f2:	4641      	mov	r1, r8
   179f4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   179f8:	4620      	mov	r0, r4
   179fa:	f002 fa27 	bl	19e4c <d_print_array_type.isra.10>
   179fe:	f7ff b937 	b.w	16c70 <d_print_comp_inner+0x19c>
   17a02:	bf00      	nop
   17a04:	0002438b 	.word	0x0002438b
   17a08:	0002437f 	.word	0x0002437f
   17a0c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17a10:	2b00      	cmp	r3, #0
   17a12:	f040 8674 	bne.w	186fe <d_print_comp_inner+0x1c2a>
   17a16:	686a      	ldr	r2, [r5, #4]
   17a18:	4bd5      	ldr	r3, [pc, #852]	; (17d70 <d_print_comp_inner+0x129c>)
   17a1a:	6851      	ldr	r1, [r2, #4]
   17a1c:	4299      	cmp	r1, r3
   17a1e:	f000 866a 	beq.w	186f6 <d_print_comp_inner+0x1c22>
   17a22:	4641      	mov	r1, r8
   17a24:	4620      	mov	r0, r4
   17a26:	f001 fdf9 	bl	1961c <d_print_comp>
   17a2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17a2e:	2bff      	cmp	r3, #255	; 0xff
   17a30:	f001 82b2 	beq.w	18f98 <d_print_comp_inner+0x24c4>
   17a34:	1c59      	adds	r1, r3, #1
   17a36:	2220      	movs	r2, #32
   17a38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a3c:	54e2      	strb	r2, [r4, r3]
   17a3e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17a42:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17a46:	2b00      	cmp	r3, #0
   17a48:	f000 8595 	beq.w	18576 <d_print_comp_inner+0x1aa2>
   17a4c:	4dc9      	ldr	r5, [pc, #804]	; (17d74 <d_print_comp_inner+0x12a0>)
   17a4e:	f04f 0800 	mov.w	r8, #0
   17a52:	1daf      	adds	r7, r5, #6
   17a54:	e009      	b.n	17a6a <d_print_comp_inner+0xf96>
   17a56:	460b      	mov	r3, r1
   17a58:	3101      	adds	r1, #1
   17a5a:	42bd      	cmp	r5, r7
   17a5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a60:	54e6      	strb	r6, [r4, r3]
   17a62:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17a66:	f43f a903 	beq.w	16c70 <d_print_comp_inner+0x19c>
   17a6a:	29ff      	cmp	r1, #255	; 0xff
   17a6c:	f815 6b01 	ldrb.w	r6, [r5], #1
   17a70:	d1f1      	bne.n	17a56 <d_print_comp_inner+0xf82>
   17a72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a76:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17a7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a7e:	4620      	mov	r0, r4
   17a80:	4798      	blx	r3
   17a82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a86:	3301      	adds	r3, #1
   17a88:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a8c:	2101      	movs	r1, #1
   17a8e:	2300      	movs	r3, #0
   17a90:	e7e3      	b.n	17a5a <d_print_comp_inner+0xf86>
   17a92:	4eb9      	ldr	r6, [pc, #740]	; (17d78 <d_print_comp_inner+0x12a4>)
   17a94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a98:	f106 090e 	add.w	r9, r6, #14
   17a9c:	f04f 0800 	mov.w	r8, #0
   17aa0:	e009      	b.n	17ab6 <d_print_comp_inner+0xfe2>
   17aa2:	460b      	mov	r3, r1
   17aa4:	3101      	adds	r1, #1
   17aa6:	45b1      	cmp	r9, r6
   17aa8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17aac:	54e7      	strb	r7, [r4, r3]
   17aae:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ab2:	f000 83b3 	beq.w	1821c <d_print_comp_inner+0x1748>
   17ab6:	29ff      	cmp	r1, #255	; 0xff
   17ab8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17abc:	d1f1      	bne.n	17aa2 <d_print_comp_inner+0xfce>
   17abe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ac2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17ac6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17aca:	4620      	mov	r0, r4
   17acc:	4798      	blx	r3
   17ace:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ad2:	3301      	adds	r3, #1
   17ad4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ad8:	2101      	movs	r1, #1
   17ada:	2300      	movs	r3, #0
   17adc:	e7e3      	b.n	17aa6 <d_print_comp_inner+0xfd2>
   17ade:	4ea7      	ldr	r6, [pc, #668]	; (17d7c <d_print_comp_inner+0x12a8>)
   17ae0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ae4:	f106 0a1a 	add.w	sl, r6, #26
   17ae8:	f04f 0900 	mov.w	r9, #0
   17aec:	e009      	b.n	17b02 <d_print_comp_inner+0x102e>
   17aee:	460b      	mov	r3, r1
   17af0:	3101      	adds	r1, #1
   17af2:	4556      	cmp	r6, sl
   17af4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17af8:	54e7      	strb	r7, [r4, r3]
   17afa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17afe:	f000 82ef 	beq.w	180e0 <d_print_comp_inner+0x160c>
   17b02:	29ff      	cmp	r1, #255	; 0xff
   17b04:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17b08:	d1f1      	bne.n	17aee <d_print_comp_inner+0x101a>
   17b0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b0e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b16:	4620      	mov	r0, r4
   17b18:	4798      	blx	r3
   17b1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b1e:	3301      	adds	r3, #1
   17b20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b24:	2101      	movs	r1, #1
   17b26:	2300      	movs	r3, #0
   17b28:	e7e3      	b.n	17af2 <d_print_comp_inner+0x101e>
   17b2a:	6869      	ldr	r1, [r5, #4]
   17b2c:	f7fc ff2a 	bl	14984 <d_find_pack>
   17b30:	f04f 0900 	mov.w	r9, #0
   17b34:	2800      	cmp	r0, #0
   17b36:	f001 835d 	beq.w	191f4 <d_print_comp_inner+0x2720>
   17b3a:	7803      	ldrb	r3, [r0, #0]
   17b3c:	2b2f      	cmp	r3, #47	; 0x2f
   17b3e:	f040 8457 	bne.w	183f0 <d_print_comp_inner+0x191c>
   17b42:	6843      	ldr	r3, [r0, #4]
   17b44:	2b00      	cmp	r3, #0
   17b46:	f000 8453 	beq.w	183f0 <d_print_comp_inner+0x191c>
   17b4a:	6880      	ldr	r0, [r0, #8]
   17b4c:	f109 0901 	add.w	r9, r9, #1
   17b50:	2800      	cmp	r0, #0
   17b52:	d1f2      	bne.n	17b3a <d_print_comp_inner+0x1066>
   17b54:	686b      	ldr	r3, [r5, #4]
   17b56:	9300      	str	r3, [sp, #0]
   17b58:	f109 33ff 	add.w	r3, r9, #4294967295
   17b5c:	9301      	str	r3, [sp, #4]
   17b5e:	f04f 0a00 	mov.w	sl, #0
   17b62:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17b66:	9a00      	ldr	r2, [sp, #0]
   17b68:	4641      	mov	r1, r8
   17b6a:	4620      	mov	r0, r4
   17b6c:	f001 fd56 	bl	1961c <d_print_comp>
   17b70:	9b01      	ldr	r3, [sp, #4]
   17b72:	42bb      	cmp	r3, r7
   17b74:	f340 81ab 	ble.w	17ece <d_print_comp_inner+0x13fa>
   17b78:	4d81      	ldr	r5, [pc, #516]	; (17d80 <d_print_comp_inner+0x12ac>)
   17b7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17b7e:	f105 0b02 	add.w	fp, r5, #2
   17b82:	e009      	b.n	17b98 <d_print_comp_inner+0x10c4>
   17b84:	460b      	mov	r3, r1
   17b86:	3101      	adds	r1, #1
   17b88:	45ab      	cmp	fp, r5
   17b8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b8e:	54e6      	strb	r6, [r4, r3]
   17b90:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17b94:	f000 819b 	beq.w	17ece <d_print_comp_inner+0x13fa>
   17b98:	29ff      	cmp	r1, #255	; 0xff
   17b9a:	f815 6b01 	ldrb.w	r6, [r5], #1
   17b9e:	d1f1      	bne.n	17b84 <d_print_comp_inner+0x10b0>
   17ba0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ba4:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17ba8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bac:	4620      	mov	r0, r4
   17bae:	4798      	blx	r3
   17bb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bb4:	3301      	adds	r3, #1
   17bb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bba:	2101      	movs	r1, #1
   17bbc:	2300      	movs	r3, #0
   17bbe:	e7e3      	b.n	17b88 <d_print_comp_inner+0x10b4>
   17bc0:	4e70      	ldr	r6, [pc, #448]	; (17d84 <d_print_comp_inner+0x12b0>)
   17bc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17bc6:	f106 0a16 	add.w	sl, r6, #22
   17bca:	f04f 0900 	mov.w	r9, #0
   17bce:	e009      	b.n	17be4 <d_print_comp_inner+0x1110>
   17bd0:	460b      	mov	r3, r1
   17bd2:	3101      	adds	r1, #1
   17bd4:	45b2      	cmp	sl, r6
   17bd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17bda:	54e7      	strb	r7, [r4, r3]
   17bdc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17be0:	f000 835f 	beq.w	182a2 <d_print_comp_inner+0x17ce>
   17be4:	29ff      	cmp	r1, #255	; 0xff
   17be6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17bea:	d1f1      	bne.n	17bd0 <d_print_comp_inner+0x10fc>
   17bec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bf0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17bf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bf8:	4620      	mov	r0, r4
   17bfa:	4798      	blx	r3
   17bfc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c00:	3301      	adds	r3, #1
   17c02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c06:	2101      	movs	r1, #1
   17c08:	2300      	movs	r3, #0
   17c0a:	e7e3      	b.n	17bd4 <d_print_comp_inner+0x1100>
   17c0c:	4e5e      	ldr	r6, [pc, #376]	; (17d88 <d_print_comp_inner+0x12b4>)
   17c0e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c12:	f106 0a0e 	add.w	sl, r6, #14
   17c16:	f04f 0900 	mov.w	r9, #0
   17c1a:	e009      	b.n	17c30 <d_print_comp_inner+0x115c>
   17c1c:	460b      	mov	r3, r1
   17c1e:	3101      	adds	r1, #1
   17c20:	4556      	cmp	r6, sl
   17c22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c26:	54e7      	strb	r7, [r4, r3]
   17c28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c2c:	f000 83a0 	beq.w	18370 <d_print_comp_inner+0x189c>
   17c30:	29ff      	cmp	r1, #255	; 0xff
   17c32:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c36:	d1f1      	bne.n	17c1c <d_print_comp_inner+0x1148>
   17c38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c3c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c44:	4620      	mov	r0, r4
   17c46:	4798      	blx	r3
   17c48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c4c:	3301      	adds	r3, #1
   17c4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c52:	2101      	movs	r1, #1
   17c54:	2300      	movs	r3, #0
   17c56:	e7e3      	b.n	17c20 <d_print_comp_inner+0x114c>
   17c58:	686a      	ldr	r2, [r5, #4]
   17c5a:	7811      	ldrb	r1, [r2, #0]
   17c5c:	2927      	cmp	r1, #39	; 0x27
   17c5e:	f000 8615 	beq.w	1888c <d_print_comp_inner+0x1db8>
   17c62:	2600      	movs	r6, #0
   17c64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17c68:	29ff      	cmp	r1, #255	; 0xff
   17c6a:	f001 80c5 	beq.w	18df8 <d_print_comp_inner+0x2324>
   17c6e:	2328      	movs	r3, #40	; 0x28
   17c70:	1c4a      	adds	r2, r1, #1
   17c72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17c76:	5463      	strb	r3, [r4, r1]
   17c78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17c7c:	686a      	ldr	r2, [r5, #4]
   17c7e:	4641      	mov	r1, r8
   17c80:	4620      	mov	r0, r4
   17c82:	f001 fccb 	bl	1961c <d_print_comp>
   17c86:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17c8a:	2bff      	cmp	r3, #255	; 0xff
   17c8c:	f001 8099 	beq.w	18dc2 <d_print_comp_inner+0x22ee>
   17c90:	1c59      	adds	r1, r3, #1
   17c92:	2229      	movs	r2, #41	; 0x29
   17c94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c98:	54e2      	strb	r2, [r4, r3]
   17c9a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17c9e:	782b      	ldrb	r3, [r5, #0]
   17ca0:	2b3d      	cmp	r3, #61	; 0x3d
   17ca2:	f000 86e6 	beq.w	18a72 <d_print_comp_inner+0x1f9e>
   17ca6:	2e08      	cmp	r6, #8
   17ca8:	f000 867f 	beq.w	189aa <d_print_comp_inner+0x1ed6>
   17cac:	68aa      	ldr	r2, [r5, #8]
   17cae:	4641      	mov	r1, r8
   17cb0:	4620      	mov	r0, r4
   17cb2:	f001 fcb3 	bl	1961c <d_print_comp>
   17cb6:	f7fe bfdb 	b.w	16c70 <d_print_comp_inner+0x19c>
   17cba:	2301      	movs	r3, #1
   17cbc:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17cc0:	f7fe bfd6 	b.w	16c70 <d_print_comp_inner+0x19c>
   17cc4:	686a      	ldr	r2, [r5, #4]
   17cc6:	4931      	ldr	r1, [pc, #196]	; (17d8c <d_print_comp_inner+0x12b8>)
   17cc8:	a804      	add	r0, sp, #16
   17cca:	f006 fd87 	bl	1e7dc <sprintf>
   17cce:	a804      	add	r0, sp, #16
   17cd0:	f006 ff36 	bl	1eb40 <strlen>
   17cd4:	2800      	cmp	r0, #0
   17cd6:	f43e afcb 	beq.w	16c70 <d_print_comp_inner+0x19c>
   17cda:	ad04      	add	r5, sp, #16
   17cdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17ce0:	182f      	adds	r7, r5, r0
   17ce2:	f04f 0800 	mov.w	r8, #0
   17ce6:	e009      	b.n	17cfc <d_print_comp_inner+0x1228>
   17ce8:	460b      	mov	r3, r1
   17cea:	3101      	adds	r1, #1
   17cec:	42bd      	cmp	r5, r7
   17cee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cf2:	54e6      	strb	r6, [r4, r3]
   17cf4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17cf8:	f43e afba 	beq.w	16c70 <d_print_comp_inner+0x19c>
   17cfc:	29ff      	cmp	r1, #255	; 0xff
   17cfe:	f815 6b01 	ldrb.w	r6, [r5], #1
   17d02:	d1f1      	bne.n	17ce8 <d_print_comp_inner+0x1214>
   17d04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d08:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17d0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d10:	4620      	mov	r0, r4
   17d12:	4798      	blx	r3
   17d14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d18:	3301      	adds	r3, #1
   17d1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d1e:	2101      	movs	r1, #1
   17d20:	2300      	movs	r3, #0
   17d22:	e7e3      	b.n	17cec <d_print_comp_inner+0x1218>
   17d24:	4e1a      	ldr	r6, [pc, #104]	; (17d90 <d_print_comp_inner+0x12bc>)
   17d26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d2a:	f106 0a1c 	add.w	sl, r6, #28
   17d2e:	f04f 0900 	mov.w	r9, #0
   17d32:	e009      	b.n	17d48 <d_print_comp_inner+0x1274>
   17d34:	460b      	mov	r3, r1
   17d36:	3101      	adds	r1, #1
   17d38:	4556      	cmp	r6, sl
   17d3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d3e:	54e7      	strb	r7, [r4, r3]
   17d40:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d44:	f000 82fa 	beq.w	1833c <d_print_comp_inner+0x1868>
   17d48:	29ff      	cmp	r1, #255	; 0xff
   17d4a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d4e:	d1f1      	bne.n	17d34 <d_print_comp_inner+0x1260>
   17d50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d54:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17d58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d5c:	4620      	mov	r0, r4
   17d5e:	4798      	blx	r3
   17d60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d64:	3301      	adds	r3, #1
   17d66:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d6a:	2101      	movs	r1, #1
   17d6c:	2300      	movs	r3, #0
   17d6e:	e7e3      	b.n	17d38 <d_print_comp_inner+0x1264>
   17d70:	00023b48 	.word	0x00023b48
   17d74:	0002436c 	.word	0x0002436c
   17d78:	0002444b 	.word	0x0002444b
   17d7c:	00024347 	.word	0x00024347
   17d80:	0002437c 	.word	0x0002437c
   17d84:	0002434b 	.word	0x0002434b
   17d88:	000243cf 	.word	0x000243cf
   17d8c:	000241a0 	.word	0x000241a0
   17d90:	0002441b 	.word	0x0002441b
   17d94:	68ab      	ldr	r3, [r5, #8]
   17d96:	781a      	ldrb	r2, [r3, #0]
   17d98:	2a3a      	cmp	r2, #58	; 0x3a
   17d9a:	f47e af7d 	bne.w	16c98 <d_print_comp_inner+0x1c4>
   17d9e:	689b      	ldr	r3, [r3, #8]
   17da0:	781b      	ldrb	r3, [r3, #0]
   17da2:	2b3b      	cmp	r3, #59	; 0x3b
   17da4:	f47e af78 	bne.w	16c98 <d_print_comp_inner+0x1c4>
   17da8:	f105 0308 	add.w	r3, r5, #8
   17dac:	686a      	ldr	r2, [r5, #4]
   17dae:	f002 fabf 	bl	1a330 <d_maybe_print_fold_expression.isra.15>
   17db2:	4606      	mov	r6, r0
   17db4:	2800      	cmp	r0, #0
   17db6:	f47e af5b 	bne.w	16c70 <d_print_comp_inner+0x19c>
   17dba:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17dbe:	68aa      	ldr	r2, [r5, #8]
   17dc0:	f8da 1004 	ldr.w	r1, [sl, #4]
   17dc4:	6893      	ldr	r3, [r2, #8]
   17dc6:	6808      	ldr	r0, [r1, #0]
   17dc8:	49d6      	ldr	r1, [pc, #856]	; (18124 <d_print_comp_inner+0x1650>)
   17dca:	f8d2 9004 	ldr.w	r9, [r2, #4]
   17dce:	685f      	ldr	r7, [r3, #4]
   17dd0:	689d      	ldr	r5, [r3, #8]
   17dd2:	f006 fd39 	bl	1e848 <strcmp>
   17dd6:	2800      	cmp	r0, #0
   17dd8:	f001 82e2 	beq.w	193a0 <d_print_comp_inner+0x28cc>
   17ddc:	2204      	movs	r2, #4
   17dde:	49d2      	ldr	r1, [pc, #840]	; (18128 <d_print_comp_inner+0x1654>)
   17de0:	4620      	mov	r0, r4
   17de2:	f7fc fba3 	bl	1452c <d_append_buffer>
   17de6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17dea:	b183      	cbz	r3, 17e0e <d_print_comp_inner+0x133a>
   17dec:	4641      	mov	r1, r8
   17dee:	464a      	mov	r2, r9
   17df0:	4620      	mov	r0, r4
   17df2:	f002 fa39 	bl	1a268 <d_print_subexpr>
   17df6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17dfa:	29ff      	cmp	r1, #255	; 0xff
   17dfc:	f001 83ec 	beq.w	195d8 <d_print_comp_inner+0x2b04>
   17e00:	2320      	movs	r3, #32
   17e02:	1c4a      	adds	r2, r1, #1
   17e04:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17e08:	5463      	strb	r3, [r4, r1]
   17e0a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17e0e:	463a      	mov	r2, r7
   17e10:	4641      	mov	r1, r8
   17e12:	4620      	mov	r0, r4
   17e14:	f001 fc02 	bl	1961c <d_print_comp>
   17e18:	2d00      	cmp	r5, #0
   17e1a:	f43e af29 	beq.w	16c70 <d_print_comp_inner+0x19c>
   17e1e:	462a      	mov	r2, r5
   17e20:	4641      	mov	r1, r8
   17e22:	4620      	mov	r0, r4
   17e24:	f002 fa20 	bl	1a268 <d_print_subexpr>
   17e28:	f7fe bf22 	b.w	16c70 <d_print_comp_inner+0x19c>
   17e2c:	4ebf      	ldr	r6, [pc, #764]	; (1812c <d_print_comp_inner+0x1658>)
   17e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e32:	f106 0a08 	add.w	sl, r6, #8
   17e36:	f04f 0900 	mov.w	r9, #0
   17e3a:	e009      	b.n	17e50 <d_print_comp_inner+0x137c>
   17e3c:	460b      	mov	r3, r1
   17e3e:	3101      	adds	r1, #1
   17e40:	4556      	cmp	r6, sl
   17e42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e46:	54e7      	strb	r7, [r4, r3]
   17e48:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e4c:	f000 80d8 	beq.w	18000 <d_print_comp_inner+0x152c>
   17e50:	29ff      	cmp	r1, #255	; 0xff
   17e52:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e56:	d1f1      	bne.n	17e3c <d_print_comp_inner+0x1368>
   17e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e64:	4620      	mov	r0, r4
   17e66:	4798      	blx	r3
   17e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e6c:	3301      	adds	r3, #1
   17e6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e72:	2101      	movs	r1, #1
   17e74:	2300      	movs	r3, #0
   17e76:	e7e3      	b.n	17e40 <d_print_comp_inner+0x136c>
   17e78:	4ead      	ldr	r6, [pc, #692]	; (18130 <d_print_comp_inner+0x165c>)
   17e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e7e:	f106 0a1d 	add.w	sl, r6, #29
   17e82:	f04f 0900 	mov.w	r9, #0
   17e86:	e009      	b.n	17e9c <d_print_comp_inner+0x13c8>
   17e88:	460b      	mov	r3, r1
   17e8a:	3101      	adds	r1, #1
   17e8c:	45b2      	cmp	sl, r6
   17e8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e92:	54e7      	strb	r7, [r4, r3]
   17e94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e98:	f000 81fc 	beq.w	18294 <d_print_comp_inner+0x17c0>
   17e9c:	29ff      	cmp	r1, #255	; 0xff
   17e9e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17ea2:	d1f1      	bne.n	17e88 <d_print_comp_inner+0x13b4>
   17ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ea8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17eac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17eb0:	4620      	mov	r0, r4
   17eb2:	4798      	blx	r3
   17eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17eb8:	3301      	adds	r3, #1
   17eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ebe:	2101      	movs	r1, #1
   17ec0:	2300      	movs	r3, #0
   17ec2:	e7e3      	b.n	17e8c <d_print_comp_inner+0x13b8>
   17ec4:	2301      	movs	r3, #1
   17ec6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17eca:	f7fe bed1 	b.w	16c70 <d_print_comp_inner+0x19c>
   17ece:	3701      	adds	r7, #1
   17ed0:	454f      	cmp	r7, r9
   17ed2:	f47f ae46 	bne.w	17b62 <d_print_comp_inner+0x108e>
   17ed6:	f7fe becb 	b.w	16c70 <d_print_comp_inner+0x19c>
   17eda:	6876      	ldr	r6, [r6, #4]
   17edc:	2e00      	cmp	r6, #0
   17ede:	f001 806e 	beq.w	18fbe <d_print_comp_inner+0x24ea>
   17ee2:	2f04      	cmp	r7, #4
   17ee4:	f103 0310 	add.w	r3, r3, #16
   17ee8:	f47f a9bd 	bne.w	17266 <d_print_comp_inner+0x792>
   17eec:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17ef0:	2301      	movs	r3, #1
   17ef2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   17ef6:	f7fe bebb 	b.w	16c70 <d_print_comp_inner+0x19c>
   17efa:	4e8e      	ldr	r6, [pc, #568]	; (18134 <d_print_comp_inner+0x1660>)
   17efc:	686a      	ldr	r2, [r5, #4]
   17efe:	4641      	mov	r1, r8
   17f00:	4620      	mov	r0, r4
   17f02:	f001 fb8b 	bl	1961c <d_print_comp>
   17f06:	f106 0a04 	add.w	sl, r6, #4
   17f0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f0e:	f04f 0900 	mov.w	r9, #0
   17f12:	e008      	b.n	17f26 <d_print_comp_inner+0x1452>
   17f14:	460b      	mov	r3, r1
   17f16:	3101      	adds	r1, #1
   17f18:	45b2      	cmp	sl, r6
   17f1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f1e:	54e7      	strb	r7, [r4, r3]
   17f20:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f24:	d013      	beq.n	17f4e <d_print_comp_inner+0x147a>
   17f26:	29ff      	cmp	r1, #255	; 0xff
   17f28:	f816 7b01 	ldrb.w	r7, [r6], #1
   17f2c:	d1f2      	bne.n	17f14 <d_print_comp_inner+0x1440>
   17f2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f32:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f3a:	4620      	mov	r0, r4
   17f3c:	4798      	blx	r3
   17f3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f42:	3301      	adds	r3, #1
   17f44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f48:	2101      	movs	r1, #1
   17f4a:	2300      	movs	r3, #0
   17f4c:	e7e4      	b.n	17f18 <d_print_comp_inner+0x1444>
   17f4e:	68aa      	ldr	r2, [r5, #8]
   17f50:	4641      	mov	r1, r8
   17f52:	4620      	mov	r0, r4
   17f54:	f001 fb62 	bl	1961c <d_print_comp>
   17f58:	f7fe be8a 	b.w	16c70 <d_print_comp_inner+0x19c>
   17f5c:	686a      	ldr	r2, [r5, #4]
   17f5e:	4641      	mov	r1, r8
   17f60:	4620      	mov	r0, r4
   17f62:	f001 fb5b 	bl	1961c <d_print_comp>
   17f66:	f7fe be83 	b.w	16c70 <d_print_comp_inner+0x19c>
   17f6a:	686a      	ldr	r2, [r5, #4]
   17f6c:	4641      	mov	r1, r8
   17f6e:	4620      	mov	r0, r4
   17f70:	f001 fb54 	bl	1961c <d_print_comp>
   17f74:	f7fe be7c 	b.w	16c70 <d_print_comp_inner+0x19c>
   17f78:	686a      	ldr	r2, [r5, #4]
   17f7a:	4641      	mov	r1, r8
   17f7c:	4620      	mov	r0, r4
   17f7e:	f001 fb4d 	bl	1961c <d_print_comp>
   17f82:	f7fe be75 	b.w	16c70 <d_print_comp_inner+0x19c>
   17f86:	686a      	ldr	r2, [r5, #4]
   17f88:	4641      	mov	r1, r8
   17f8a:	4620      	mov	r0, r4
   17f8c:	f001 fb46 	bl	1961c <d_print_comp>
   17f90:	f7fe be6e 	b.w	16c70 <d_print_comp_inner+0x19c>
   17f94:	686a      	ldr	r2, [r5, #4]
   17f96:	4641      	mov	r1, r8
   17f98:	4620      	mov	r0, r4
   17f9a:	f001 fb3f 	bl	1961c <d_print_comp>
   17f9e:	f7fe be67 	b.w	16c70 <d_print_comp_inner+0x19c>
   17fa2:	686a      	ldr	r2, [r5, #4]
   17fa4:	4641      	mov	r1, r8
   17fa6:	4620      	mov	r0, r4
   17fa8:	f001 fb38 	bl	1961c <d_print_comp>
   17fac:	f7fe be60 	b.w	16c70 <d_print_comp_inner+0x19c>
   17fb0:	686a      	ldr	r2, [r5, #4]
   17fb2:	4641      	mov	r1, r8
   17fb4:	4620      	mov	r0, r4
   17fb6:	f001 fb31 	bl	1961c <d_print_comp>
   17fba:	f7fe be59 	b.w	16c70 <d_print_comp_inner+0x19c>
   17fbe:	686a      	ldr	r2, [r5, #4]
   17fc0:	4641      	mov	r1, r8
   17fc2:	4620      	mov	r0, r4
   17fc4:	f001 fb2a 	bl	1961c <d_print_comp>
   17fc8:	f7fe be52 	b.w	16c70 <d_print_comp_inner+0x19c>
   17fcc:	686a      	ldr	r2, [r5, #4]
   17fce:	4641      	mov	r1, r8
   17fd0:	4620      	mov	r0, r4
   17fd2:	f001 fb23 	bl	1961c <d_print_comp>
   17fd6:	f7fe be4b 	b.w	16c70 <d_print_comp_inner+0x19c>
   17fda:	4641      	mov	r1, r8
   17fdc:	68aa      	ldr	r2, [r5, #8]
   17fde:	4620      	mov	r0, r4
   17fe0:	f001 fb1c 	bl	1961c <d_print_comp>
   17fe4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17fe8:	29ff      	cmp	r1, #255	; 0xff
   17fea:	f000 8560 	beq.w	18aae <d_print_comp_inner+0x1fda>
   17fee:	1c4a      	adds	r2, r1, #1
   17ff0:	235d      	movs	r3, #93	; 0x5d
   17ff2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17ff6:	5463      	strb	r3, [r4, r1]
   17ff8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17ffc:	f7fe be38 	b.w	16c70 <d_print_comp_inner+0x19c>
   18000:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18004:	4e4c      	ldr	r6, [pc, #304]	; (18138 <d_print_comp_inner+0x1664>)
   18006:	3301      	adds	r3, #1
   18008:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1800c:	4641      	mov	r1, r8
   1800e:	686a      	ldr	r2, [r5, #4]
   18010:	4620      	mov	r0, r4
   18012:	f001 fb03 	bl	1961c <d_print_comp>
   18016:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1801a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1801e:	3b01      	subs	r3, #1
   18020:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18024:	f106 0902 	add.w	r9, r6, #2
   18028:	f04f 0800 	mov.w	r8, #0
   1802c:	e008      	b.n	18040 <d_print_comp_inner+0x156c>
   1802e:	460b      	mov	r3, r1
   18030:	3101      	adds	r1, #1
   18032:	454e      	cmp	r6, r9
   18034:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18038:	54e7      	strb	r7, [r4, r3]
   1803a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1803e:	d013      	beq.n	18068 <d_print_comp_inner+0x1594>
   18040:	29ff      	cmp	r1, #255	; 0xff
   18042:	f816 7b01 	ldrb.w	r7, [r6], #1
   18046:	d1f2      	bne.n	1802e <d_print_comp_inner+0x155a>
   18048:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1804c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18050:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18054:	4620      	mov	r0, r4
   18056:	4798      	blx	r3
   18058:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1805c:	3301      	adds	r3, #1
   1805e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18062:	2101      	movs	r1, #1
   18064:	2300      	movs	r3, #0
   18066:	e7e4      	b.n	18032 <d_print_comp_inner+0x155e>
   18068:	68aa      	ldr	r2, [r5, #8]
   1806a:	4934      	ldr	r1, [pc, #208]	; (1813c <d_print_comp_inner+0x1668>)
   1806c:	3201      	adds	r2, #1
   1806e:	a804      	add	r0, sp, #16
   18070:	f006 fbb4 	bl	1e7dc <sprintf>
   18074:	a804      	add	r0, sp, #16
   18076:	f006 fd63 	bl	1eb40 <strlen>
   1807a:	b318      	cbz	r0, 180c4 <d_print_comp_inner+0x15f0>
   1807c:	ad04      	add	r5, sp, #16
   1807e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18082:	182f      	adds	r7, r5, r0
   18084:	f04f 0800 	mov.w	r8, #0
   18088:	e008      	b.n	1809c <d_print_comp_inner+0x15c8>
   1808a:	460b      	mov	r3, r1
   1808c:	3101      	adds	r1, #1
   1808e:	42af      	cmp	r7, r5
   18090:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18094:	54e6      	strb	r6, [r4, r3]
   18096:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1809a:	d015      	beq.n	180c8 <d_print_comp_inner+0x15f4>
   1809c:	29ff      	cmp	r1, #255	; 0xff
   1809e:	f815 6b01 	ldrb.w	r6, [r5], #1
   180a2:	d1f2      	bne.n	1808a <d_print_comp_inner+0x15b6>
   180a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   180ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180b0:	4620      	mov	r0, r4
   180b2:	4798      	blx	r3
   180b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180b8:	3301      	adds	r3, #1
   180ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180be:	2101      	movs	r1, #1
   180c0:	2300      	movs	r3, #0
   180c2:	e7e4      	b.n	1808e <d_print_comp_inner+0x15ba>
   180c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180c8:	29ff      	cmp	r1, #255	; 0xff
   180ca:	f000 8560 	beq.w	18b8e <d_print_comp_inner+0x20ba>
   180ce:	1c4a      	adds	r2, r1, #1
   180d0:	237d      	movs	r3, #125	; 0x7d
   180d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   180d6:	5463      	strb	r3, [r4, r1]
   180d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   180dc:	f7fe bdc8 	b.w	16c70 <d_print_comp_inner+0x19c>
   180e0:	686a      	ldr	r2, [r5, #4]
   180e2:	4641      	mov	r1, r8
   180e4:	4620      	mov	r0, r4
   180e6:	f001 fa99 	bl	1961c <d_print_comp>
   180ea:	f7fe bdc1 	b.w	16c70 <d_print_comp_inner+0x19c>
   180ee:	4641      	mov	r1, r8
   180f0:	68aa      	ldr	r2, [r5, #8]
   180f2:	4620      	mov	r0, r4
   180f4:	f001 fa92 	bl	1961c <d_print_comp>
   180f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180fc:	29ff      	cmp	r1, #255	; 0xff
   180fe:	f000 850b 	beq.w	18b18 <d_print_comp_inner+0x2044>
   18102:	1c4a      	adds	r2, r1, #1
   18104:	235d      	movs	r3, #93	; 0x5d
   18106:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1810a:	5463      	strb	r3, [r4, r1]
   1810c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18110:	f7fe bdae 	b.w	16c70 <d_print_comp_inner+0x19c>
   18114:	686a      	ldr	r2, [r5, #4]
   18116:	4641      	mov	r1, r8
   18118:	4620      	mov	r0, r4
   1811a:	f001 fa7f 	bl	1961c <d_print_comp>
   1811e:	f7fe bda7 	b.w	16c70 <d_print_comp_inner+0x19c>
   18122:	bf00      	nop
   18124:	000241b4 	.word	0x000241b4
   18128:	000243ac 	.word	0x000243ac
   1812c:	0002443b 	.word	0x0002443b
   18130:	000243fb 	.word	0x000243fb
   18134:	00024250 	.word	0x00024250
   18138:	00024448 	.word	0x00024448
   1813c:	000241a0 	.word	0x000241a0
   18140:	f8da 5004 	ldr.w	r5, [sl, #4]
   18144:	782b      	ldrb	r3, [r5, #0]
   18146:	3b61      	subs	r3, #97	; 0x61
   18148:	2b19      	cmp	r3, #25
   1814a:	d809      	bhi.n	18160 <d_print_comp_inner+0x168c>
   1814c:	29ff      	cmp	r1, #255	; 0xff
   1814e:	f000 8793 	beq.w	19078 <d_print_comp_inner+0x25a4>
   18152:	2320      	movs	r3, #32
   18154:	1c4a      	adds	r2, r1, #1
   18156:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1815a:	5463      	strb	r3, [r4, r1]
   1815c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18160:	19eb      	adds	r3, r5, r7
   18162:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18166:	2b20      	cmp	r3, #32
   18168:	bf08      	it	eq
   1816a:	f107 37ff 	addeq.w	r7, r7, #4294967295
   1816e:	2f00      	cmp	r7, #0
   18170:	f43e ad7e 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18174:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18178:	442f      	add	r7, r5
   1817a:	f04f 0800 	mov.w	r8, #0
   1817e:	e009      	b.n	18194 <d_print_comp_inner+0x16c0>
   18180:	460b      	mov	r3, r1
   18182:	3101      	adds	r1, #1
   18184:	42af      	cmp	r7, r5
   18186:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1818a:	54e6      	strb	r6, [r4, r3]
   1818c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18190:	f43e ad6e 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18194:	29ff      	cmp	r1, #255	; 0xff
   18196:	f815 6b01 	ldrb.w	r6, [r5], #1
   1819a:	d1f1      	bne.n	18180 <d_print_comp_inner+0x16ac>
   1819c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   181a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   181a8:	4620      	mov	r0, r4
   181aa:	4798      	blx	r3
   181ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   181b0:	3301      	adds	r3, #1
   181b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   181b6:	2101      	movs	r1, #1
   181b8:	2300      	movs	r3, #0
   181ba:	e7e3      	b.n	18184 <d_print_comp_inner+0x16b0>
   181bc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   181c0:	b13a      	cbz	r2, 181d2 <d_print_comp_inner+0x16fe>
   181c2:	ab14      	add	r3, sp, #80	; 0x50
   181c4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   181c8:	f843 1d48 	str.w	r1, [r3, #-72]!
   181cc:	9203      	str	r2, [sp, #12]
   181ce:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   181d2:	686b      	ldr	r3, [r5, #4]
   181d4:	781a      	ldrb	r2, [r3, #0]
   181d6:	2a04      	cmp	r2, #4
   181d8:	f000 830e 	beq.w	187f8 <d_print_comp_inner+0x1d24>
   181dc:	a804      	add	r0, sp, #16
   181de:	461a      	mov	r2, r3
   181e0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   181e4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   181e8:	4641      	mov	r1, r8
   181ea:	4620      	mov	r0, r4
   181ec:	9304      	str	r3, [sp, #16]
   181ee:	9505      	str	r5, [sp, #20]
   181f0:	f7fe fc70 	bl	16ad4 <d_print_comp_inner>
   181f4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   181f8:	9a05      	ldr	r2, [sp, #20]
   181fa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   181fe:	2b00      	cmp	r3, #0
   18200:	f43e ad36 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18204:	9b02      	ldr	r3, [sp, #8]
   18206:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1820a:	f7fe bd31 	b.w	16c70 <d_print_comp_inner+0x19c>
   1820e:	68aa      	ldr	r2, [r5, #8]
   18210:	4641      	mov	r1, r8
   18212:	4620      	mov	r0, r4
   18214:	f001 fa02 	bl	1961c <d_print_comp>
   18218:	f7fe bd2a 	b.w	16c70 <d_print_comp_inner+0x19c>
   1821c:	686a      	ldr	r2, [r5, #4]
   1821e:	49d8      	ldr	r1, [pc, #864]	; (18580 <d_print_comp_inner+0x1aac>)
   18220:	3201      	adds	r2, #1
   18222:	a804      	add	r0, sp, #16
   18224:	f006 fada 	bl	1e7dc <sprintf>
   18228:	a804      	add	r0, sp, #16
   1822a:	f006 fc89 	bl	1eb40 <strlen>
   1822e:	b318      	cbz	r0, 18278 <d_print_comp_inner+0x17a4>
   18230:	ad04      	add	r5, sp, #16
   18232:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18236:	182f      	adds	r7, r5, r0
   18238:	f04f 0800 	mov.w	r8, #0
   1823c:	e008      	b.n	18250 <d_print_comp_inner+0x177c>
   1823e:	460b      	mov	r3, r1
   18240:	3101      	adds	r1, #1
   18242:	42bd      	cmp	r5, r7
   18244:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18248:	54e6      	strb	r6, [r4, r3]
   1824a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1824e:	d015      	beq.n	1827c <d_print_comp_inner+0x17a8>
   18250:	29ff      	cmp	r1, #255	; 0xff
   18252:	f815 6b01 	ldrb.w	r6, [r5], #1
   18256:	d1f2      	bne.n	1823e <d_print_comp_inner+0x176a>
   18258:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1825c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18260:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18264:	4620      	mov	r0, r4
   18266:	4798      	blx	r3
   18268:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1826c:	3301      	adds	r3, #1
   1826e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18272:	2101      	movs	r1, #1
   18274:	2300      	movs	r3, #0
   18276:	e7e4      	b.n	18242 <d_print_comp_inner+0x176e>
   18278:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1827c:	29ff      	cmp	r1, #255	; 0xff
   1827e:	f000 8404 	beq.w	18a8a <d_print_comp_inner+0x1fb6>
   18282:	1c4a      	adds	r2, r1, #1
   18284:	237d      	movs	r3, #125	; 0x7d
   18286:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1828a:	5463      	strb	r3, [r4, r1]
   1828c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18290:	f7fe bcee 	b.w	16c70 <d_print_comp_inner+0x19c>
   18294:	686a      	ldr	r2, [r5, #4]
   18296:	4641      	mov	r1, r8
   18298:	4620      	mov	r0, r4
   1829a:	f001 f9bf 	bl	1961c <d_print_comp>
   1829e:	f7fe bce7 	b.w	16c70 <d_print_comp_inner+0x19c>
   182a2:	686a      	ldr	r2, [r5, #4]
   182a4:	4641      	mov	r1, r8
   182a6:	4620      	mov	r0, r4
   182a8:	f001 f9b8 	bl	1961c <d_print_comp>
   182ac:	f7fe bce0 	b.w	16c70 <d_print_comp_inner+0x19c>
   182b0:	686a      	ldr	r2, [r5, #4]
   182b2:	4641      	mov	r1, r8
   182b4:	4620      	mov	r0, r4
   182b6:	f001 f9b1 	bl	1961c <d_print_comp>
   182ba:	f7fe bcd9 	b.w	16c70 <d_print_comp_inner+0x19c>
   182be:	4eb1      	ldr	r6, [pc, #708]	; (18584 <d_print_comp_inner+0x1ab0>)
   182c0:	68aa      	ldr	r2, [r5, #8]
   182c2:	4641      	mov	r1, r8
   182c4:	4620      	mov	r0, r4
   182c6:	f001 f9a9 	bl	1961c <d_print_comp>
   182ca:	f106 0a05 	add.w	sl, r6, #5
   182ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   182d2:	f04f 0900 	mov.w	r9, #0
   182d6:	e008      	b.n	182ea <d_print_comp_inner+0x1816>
   182d8:	460b      	mov	r3, r1
   182da:	3101      	adds	r1, #1
   182dc:	4556      	cmp	r6, sl
   182de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182e2:	54e7      	strb	r7, [r4, r3]
   182e4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   182e8:	d013      	beq.n	18312 <d_print_comp_inner+0x183e>
   182ea:	29ff      	cmp	r1, #255	; 0xff
   182ec:	f816 7b01 	ldrb.w	r7, [r6], #1
   182f0:	d1f2      	bne.n	182d8 <d_print_comp_inner+0x1804>
   182f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182f6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   182fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182fe:	4620      	mov	r0, r4
   18300:	4798      	blx	r3
   18302:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18306:	3301      	adds	r3, #1
   18308:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1830c:	2101      	movs	r1, #1
   1830e:	2300      	movs	r3, #0
   18310:	e7e4      	b.n	182dc <d_print_comp_inner+0x1808>
   18312:	686a      	ldr	r2, [r5, #4]
   18314:	4641      	mov	r1, r8
   18316:	4620      	mov	r0, r4
   18318:	f001 f980 	bl	1961c <d_print_comp>
   1831c:	f7fe bca8 	b.w	16c70 <d_print_comp_inner+0x19c>
   18320:	686a      	ldr	r2, [r5, #4]
   18322:	4641      	mov	r1, r8
   18324:	4620      	mov	r0, r4
   18326:	f001 f979 	bl	1961c <d_print_comp>
   1832a:	f7fe bca1 	b.w	16c70 <d_print_comp_inner+0x19c>
   1832e:	686a      	ldr	r2, [r5, #4]
   18330:	4641      	mov	r1, r8
   18332:	4620      	mov	r0, r4
   18334:	f001 f972 	bl	1961c <d_print_comp>
   18338:	f7fe bc9a 	b.w	16c70 <d_print_comp_inner+0x19c>
   1833c:	686a      	ldr	r2, [r5, #4]
   1833e:	4641      	mov	r1, r8
   18340:	4620      	mov	r0, r4
   18342:	f001 f96b 	bl	1961c <d_print_comp>
   18346:	f7fe bc93 	b.w	16c70 <d_print_comp_inner+0x19c>
   1834a:	4641      	mov	r1, r8
   1834c:	686a      	ldr	r2, [r5, #4]
   1834e:	4620      	mov	r0, r4
   18350:	f001 f964 	bl	1961c <d_print_comp>
   18354:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18358:	29ff      	cmp	r1, #255	; 0xff
   1835a:	f000 842a 	beq.w	18bb2 <d_print_comp_inner+0x20de>
   1835e:	1c4a      	adds	r2, r1, #1
   18360:	2329      	movs	r3, #41	; 0x29
   18362:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18366:	5463      	strb	r3, [r4, r1]
   18368:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1836c:	f7fe bc80 	b.w	16c70 <d_print_comp_inner+0x19c>
   18370:	686a      	ldr	r2, [r5, #4]
   18372:	4641      	mov	r1, r8
   18374:	4620      	mov	r0, r4
   18376:	f001 f951 	bl	1961c <d_print_comp>
   1837a:	f7fe bc79 	b.w	16c70 <d_print_comp_inner+0x19c>
   1837e:	2f04      	cmp	r7, #4
   18380:	f1a6 0410 	sub.w	r4, r6, #16
   18384:	f106 0e10 	add.w	lr, r6, #16
   18388:	f000 8722 	beq.w	191d0 <d_print_comp_inner+0x26fc>
   1838c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   18390:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   18394:	2300      	movs	r3, #0
   18396:	f84e 4c10 	str.w	r4, [lr, #-16]
   1839a:	e906 1008 	stmdb	r6, {r3, ip}
   1839e:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   183a2:	f846 5c0c 	str.w	r5, [r6, #-12]
   183a6:	686d      	ldr	r5, [r5, #4]
   183a8:	3701      	adds	r7, #1
   183aa:	4676      	mov	r6, lr
   183ac:	f7fe bf84 	b.w	172b8 <d_print_comp_inner+0x7e4>
   183b0:	68aa      	ldr	r2, [r5, #8]
   183b2:	9300      	str	r3, [sp, #0]
   183b4:	460e      	mov	r6, r1
   183b6:	4620      	mov	r0, r4
   183b8:	4641      	mov	r1, r8
   183ba:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   183be:	f001 f92d 	bl	1961c <d_print_comp>
   183c2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   183c6:	9b00      	ldr	r3, [sp, #0]
   183c8:	4295      	cmp	r5, r2
   183ca:	f47e ac51 	bne.w	16c70 <d_print_comp_inner+0x19c>
   183ce:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   183d2:	42b2      	cmp	r2, r6
   183d4:	f47e ac4c 	bne.w	16c70 <d_print_comp_inner+0x19c>
   183d8:	3b01      	subs	r3, #1
   183da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   183de:	f7fe bc47 	b.w	16c70 <d_print_comp_inner+0x19c>
   183e2:	462a      	mov	r2, r5
   183e4:	4641      	mov	r1, r8
   183e6:	4620      	mov	r0, r4
   183e8:	f001 f928 	bl	1963c <d_print_mod>
   183ec:	f7fe bc70 	b.w	16cd0 <d_print_comp_inner+0x1fc>
   183f0:	686b      	ldr	r3, [r5, #4]
   183f2:	9300      	str	r3, [sp, #0]
   183f4:	f1b9 0f00 	cmp.w	r9, #0
   183f8:	f47f abae 	bne.w	17b58 <d_print_comp_inner+0x1084>
   183fc:	f7fe bc38 	b.w	16c70 <d_print_comp_inner+0x19c>
   18400:	463a      	mov	r2, r7
   18402:	a804      	add	r0, sp, #16
   18404:	495e      	ldr	r1, [pc, #376]	; (18580 <d_print_comp_inner+0x1aac>)
   18406:	f006 f9e9 	bl	1e7dc <sprintf>
   1840a:	a804      	add	r0, sp, #16
   1840c:	f006 fb98 	bl	1eb40 <strlen>
   18410:	b318      	cbz	r0, 1845a <d_print_comp_inner+0x1986>
   18412:	ad04      	add	r5, sp, #16
   18414:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18418:	182f      	adds	r7, r5, r0
   1841a:	f04f 0800 	mov.w	r8, #0
   1841e:	e008      	b.n	18432 <d_print_comp_inner+0x195e>
   18420:	460b      	mov	r3, r1
   18422:	3101      	adds	r1, #1
   18424:	42af      	cmp	r7, r5
   18426:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1842a:	54e6      	strb	r6, [r4, r3]
   1842c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18430:	d015      	beq.n	1845e <d_print_comp_inner+0x198a>
   18432:	29ff      	cmp	r1, #255	; 0xff
   18434:	f815 6b01 	ldrb.w	r6, [r5], #1
   18438:	d1f2      	bne.n	18420 <d_print_comp_inner+0x194c>
   1843a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1843e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18446:	4620      	mov	r0, r4
   18448:	4798      	blx	r3
   1844a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1844e:	3301      	adds	r3, #1
   18450:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18454:	2101      	movs	r1, #1
   18456:	2300      	movs	r3, #0
   18458:	e7e4      	b.n	18424 <d_print_comp_inner+0x1950>
   1845a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1845e:	29ff      	cmp	r1, #255	; 0xff
   18460:	f000 84dd 	beq.w	18e1e <d_print_comp_inner+0x234a>
   18464:	1c4a      	adds	r2, r1, #1
   18466:	237d      	movs	r3, #125	; 0x7d
   18468:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1846c:	5463      	strb	r3, [r4, r1]
   1846e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18472:	f7fe bbfd 	b.w	16c70 <d_print_comp_inner+0x19c>
   18476:	2700      	movs	r7, #0
   18478:	f7ff ba1f 	b.w	178ba <d_print_comp_inner+0xde6>
   1847c:	68df      	ldr	r7, [r3, #12]
   1847e:	689d      	ldr	r5, [r3, #8]
   18480:	2f00      	cmp	r7, #0
   18482:	f43e abf5 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18486:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1848a:	442f      	add	r7, r5
   1848c:	f04f 0800 	mov.w	r8, #0
   18490:	e009      	b.n	184a6 <d_print_comp_inner+0x19d2>
   18492:	460b      	mov	r3, r1
   18494:	3101      	adds	r1, #1
   18496:	42bd      	cmp	r5, r7
   18498:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1849c:	54e6      	strb	r6, [r4, r3]
   1849e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184a2:	f43e abe5 	beq.w	16c70 <d_print_comp_inner+0x19c>
   184a6:	29ff      	cmp	r1, #255	; 0xff
   184a8:	f815 6b01 	ldrb.w	r6, [r5], #1
   184ac:	d1f1      	bne.n	18492 <d_print_comp_inner+0x19be>
   184ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   184b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184ba:	4620      	mov	r0, r4
   184bc:	4798      	blx	r3
   184be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184c2:	3301      	adds	r3, #1
   184c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184c8:	2101      	movs	r1, #1
   184ca:	2300      	movs	r3, #0
   184cc:	e7e3      	b.n	18496 <d_print_comp_inner+0x19c2>
   184ce:	686e      	ldr	r6, [r5, #4]
   184d0:	68af      	ldr	r7, [r5, #8]
   184d2:	4437      	add	r7, r6
   184d4:	42be      	cmp	r6, r7
   184d6:	f4be abcb 	bcs.w	16c70 <d_print_comp_inner+0x19c>
   184da:	f04f 0800 	mov.w	r8, #0
   184de:	e00d      	b.n	184fc <d_print_comp_inner+0x1a28>
   184e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184e4:	29ff      	cmp	r1, #255	; 0xff
   184e6:	d036      	beq.n	18556 <d_print_comp_inner+0x1a82>
   184e8:	1c4b      	adds	r3, r1, #1
   184ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   184ee:	5465      	strb	r5, [r4, r1]
   184f0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   184f4:	3601      	adds	r6, #1
   184f6:	42b7      	cmp	r7, r6
   184f8:	f67e abba 	bls.w	16c70 <d_print_comp_inner+0x19c>
   184fc:	1bbb      	subs	r3, r7, r6
   184fe:	2b03      	cmp	r3, #3
   18500:	7835      	ldrb	r5, [r6, #0]
   18502:	dded      	ble.n	184e0 <d_print_comp_inner+0x1a0c>
   18504:	2d5f      	cmp	r5, #95	; 0x5f
   18506:	d1eb      	bne.n	184e0 <d_print_comp_inner+0x1a0c>
   18508:	7873      	ldrb	r3, [r6, #1]
   1850a:	2b5f      	cmp	r3, #95	; 0x5f
   1850c:	d1e8      	bne.n	184e0 <d_print_comp_inner+0x1a0c>
   1850e:	78b3      	ldrb	r3, [r6, #2]
   18510:	2b55      	cmp	r3, #85	; 0x55
   18512:	d1e5      	bne.n	184e0 <d_print_comp_inner+0x1a0c>
   18514:	1cf3      	adds	r3, r6, #3
   18516:	429f      	cmp	r7, r3
   18518:	d9e2      	bls.n	184e0 <d_print_comp_inner+0x1a0c>
   1851a:	2000      	movs	r0, #0
   1851c:	e006      	b.n	1852c <d_print_comp_inner+0x1a58>
   1851e:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   18522:	429f      	cmp	r7, r3
   18524:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18528:	f000 85c7 	beq.w	190ba <d_print_comp_inner+0x25e6>
   1852c:	4699      	mov	r9, r3
   1852e:	f813 5b01 	ldrb.w	r5, [r3], #1
   18532:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   18536:	b2d1      	uxtb	r1, r2
   18538:	2909      	cmp	r1, #9
   1853a:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   1853e:	d9f0      	bls.n	18522 <d_print_comp_inner+0x1a4e>
   18540:	f1be 0f05 	cmp.w	lr, #5
   18544:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   18548:	d9e9      	bls.n	1851e <d_print_comp_inner+0x1a4a>
   1854a:	2a05      	cmp	r2, #5
   1854c:	f200 8743 	bhi.w	193d6 <d_print_comp_inner+0x2902>
   18550:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   18554:	e7e5      	b.n	18522 <d_print_comp_inner+0x1a4e>
   18556:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1855a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1855e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18562:	4620      	mov	r0, r4
   18564:	4798      	blx	r3
   18566:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1856a:	3301      	adds	r3, #1
   1856c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18570:	2100      	movs	r1, #0
   18572:	2301      	movs	r3, #1
   18574:	e7b9      	b.n	184ea <d_print_comp_inner+0x1a16>
   18576:	4d04      	ldr	r5, [pc, #16]	; (18588 <d_print_comp_inner+0x1ab4>)
   18578:	4698      	mov	r8, r3
   1857a:	1daf      	adds	r7, r5, #6
   1857c:	e010      	b.n	185a0 <d_print_comp_inner+0x1acc>
   1857e:	bf00      	nop
   18580:	000241a0 	.word	0x000241a0
   18584:	00024314 	.word	0x00024314
   18588:	00024374 	.word	0x00024374
   1858c:	460b      	mov	r3, r1
   1858e:	3101      	adds	r1, #1
   18590:	42bd      	cmp	r5, r7
   18592:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18596:	54e6      	strb	r6, [r4, r3]
   18598:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1859c:	f43e ab68 	beq.w	16c70 <d_print_comp_inner+0x19c>
   185a0:	29ff      	cmp	r1, #255	; 0xff
   185a2:	f815 6b01 	ldrb.w	r6, [r5], #1
   185a6:	d1f1      	bne.n	1858c <d_print_comp_inner+0x1ab8>
   185a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   185b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   185b4:	4620      	mov	r0, r4
   185b6:	4798      	blx	r3
   185b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   185bc:	3301      	adds	r3, #1
   185be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   185c2:	2101      	movs	r1, #1
   185c4:	2300      	movs	r3, #0
   185c6:	e7e3      	b.n	18590 <d_print_comp_inner+0x1abc>
   185c8:	782b      	ldrb	r3, [r5, #0]
   185ca:	2b2f      	cmp	r3, #47	; 0x2f
   185cc:	f47e ab6a 	bne.w	16ca4 <d_print_comp_inner+0x1d0>
   185d0:	4601      	mov	r1, r0
   185d2:	460d      	mov	r5, r1
   185d4:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   185d8:	f7fe bb66 	b.w	16ca8 <d_print_comp_inner+0x1d4>
   185dc:	4dd7      	ldr	r5, [pc, #860]	; (1893c <d_print_comp_inner+0x1e68>)
   185de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   185e2:	f105 0804 	add.w	r8, r5, #4
   185e6:	e009      	b.n	185fc <d_print_comp_inner+0x1b28>
   185e8:	460b      	mov	r3, r1
   185ea:	3101      	adds	r1, #1
   185ec:	45a8      	cmp	r8, r5
   185ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185f2:	54e6      	strb	r6, [r4, r3]
   185f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   185f8:	f43e ab3a 	beq.w	16c70 <d_print_comp_inner+0x19c>
   185fc:	29ff      	cmp	r1, #255	; 0xff
   185fe:	f815 6b01 	ldrb.w	r6, [r5], #1
   18602:	d1f1      	bne.n	185e8 <d_print_comp_inner+0x1b14>
   18604:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18608:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1860c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18610:	4620      	mov	r0, r4
   18612:	4798      	blx	r3
   18614:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18618:	3301      	adds	r3, #1
   1861a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1861e:	2101      	movs	r1, #1
   18620:	2300      	movs	r3, #0
   18622:	e7e3      	b.n	185ec <d_print_comp_inner+0x1b18>
   18624:	4ec6      	ldr	r6, [pc, #792]	; (18940 <d_print_comp_inner+0x1e6c>)
   18626:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1862a:	f106 0905 	add.w	r9, r6, #5
   1862e:	f04f 0800 	mov.w	r8, #0
   18632:	e008      	b.n	18646 <d_print_comp_inner+0x1b72>
   18634:	460b      	mov	r3, r1
   18636:	3101      	adds	r1, #1
   18638:	45b1      	cmp	r9, r6
   1863a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1863e:	54e7      	strb	r7, [r4, r3]
   18640:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18644:	d013      	beq.n	1866e <d_print_comp_inner+0x1b9a>
   18646:	29ff      	cmp	r1, #255	; 0xff
   18648:	f816 7b01 	ldrb.w	r7, [r6], #1
   1864c:	d1f2      	bne.n	18634 <d_print_comp_inner+0x1b60>
   1864e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18652:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18656:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1865a:	4620      	mov	r0, r4
   1865c:	4798      	blx	r3
   1865e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18662:	3301      	adds	r3, #1
   18664:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18668:	2101      	movs	r1, #1
   1866a:	2300      	movs	r3, #0
   1866c:	e7e4      	b.n	18638 <d_print_comp_inner+0x1b64>
   1866e:	686a      	ldr	r2, [r5, #4]
   18670:	49b4      	ldr	r1, [pc, #720]	; (18944 <d_print_comp_inner+0x1e70>)
   18672:	3201      	adds	r2, #1
   18674:	a804      	add	r0, sp, #16
   18676:	f006 f8b1 	bl	1e7dc <sprintf>
   1867a:	a804      	add	r0, sp, #16
   1867c:	f006 fa60 	bl	1eb40 <strlen>
   18680:	2800      	cmp	r0, #0
   18682:	f43e aaf5 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18686:	ad04      	add	r5, sp, #16
   18688:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1868c:	182f      	adds	r7, r5, r0
   1868e:	f04f 0800 	mov.w	r8, #0
   18692:	e009      	b.n	186a8 <d_print_comp_inner+0x1bd4>
   18694:	460b      	mov	r3, r1
   18696:	3101      	adds	r1, #1
   18698:	42af      	cmp	r7, r5
   1869a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1869e:	54e6      	strb	r6, [r4, r3]
   186a0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   186a4:	f43e aae4 	beq.w	16c70 <d_print_comp_inner+0x19c>
   186a8:	29ff      	cmp	r1, #255	; 0xff
   186aa:	f815 6b01 	ldrb.w	r6, [r5], #1
   186ae:	d1f1      	bne.n	18694 <d_print_comp_inner+0x1bc0>
   186b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   186b4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   186b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   186bc:	4620      	mov	r0, r4
   186be:	4798      	blx	r3
   186c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186c4:	3301      	adds	r3, #1
   186c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   186ca:	2101      	movs	r1, #1
   186cc:	2300      	movs	r3, #0
   186ce:	e7e3      	b.n	18698 <d_print_comp_inner+0x1bc4>
   186d0:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   186d4:	f105 0208 	add.w	r2, r5, #8
   186d8:	4641      	mov	r1, r8
   186da:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   186de:	f001 fc91 	bl	1a004 <d_print_function_type.isra.11>
   186e2:	686a      	ldr	r2, [r5, #4]
   186e4:	2a00      	cmp	r2, #0
   186e6:	f43e aac3 	beq.w	16c70 <d_print_comp_inner+0x19c>
   186ea:	4641      	mov	r1, r8
   186ec:	4620      	mov	r0, r4
   186ee:	f000 ff95 	bl	1961c <d_print_comp>
   186f2:	f7fe babd 	b.w	16c70 <d_print_comp_inner+0x19c>
   186f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186fa:	f7ff b9a2 	b.w	17a42 <d_print_comp_inner+0xf6e>
   186fe:	4e92      	ldr	r6, [pc, #584]	; (18948 <d_print_comp_inner+0x1e74>)
   18700:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18704:	f106 0a05 	add.w	sl, r6, #5
   18708:	f04f 0900 	mov.w	r9, #0
   1870c:	e009      	b.n	18722 <d_print_comp_inner+0x1c4e>
   1870e:	460b      	mov	r3, r1
   18710:	3101      	adds	r1, #1
   18712:	45b2      	cmp	sl, r6
   18714:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18718:	54e7      	strb	r7, [r4, r3]
   1871a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1871e:	f43f a97a 	beq.w	17a16 <d_print_comp_inner+0xf42>
   18722:	29ff      	cmp	r1, #255	; 0xff
   18724:	f816 7b01 	ldrb.w	r7, [r6], #1
   18728:	d1f1      	bne.n	1870e <d_print_comp_inner+0x1c3a>
   1872a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1872e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18732:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18736:	4620      	mov	r0, r4
   18738:	4798      	blx	r3
   1873a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1873e:	3301      	adds	r3, #1
   18740:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18744:	2101      	movs	r1, #1
   18746:	2300      	movs	r3, #0
   18748:	e7e3      	b.n	18712 <d_print_comp_inner+0x1c3e>
   1874a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1874e:	497f      	ldr	r1, [pc, #508]	; (1894c <d_print_comp_inner+0x1e78>)
   18750:	681f      	ldr	r7, [r3, #0]
   18752:	4638      	mov	r0, r7
   18754:	f006 f878 	bl	1e848 <strcmp>
   18758:	f896 a000 	ldrb.w	sl, [r6]
   1875c:	b918      	cbnz	r0, 18766 <d_print_comp_inner+0x1c92>
   1875e:	f1ba 0f03 	cmp.w	sl, #3
   18762:	f000 851b 	beq.w	1919c <d_print_comp_inner+0x26c8>
   18766:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   1876a:	f000 85fd 	beq.w	19368 <d_print_comp_inner+0x2894>
   1876e:	4978      	ldr	r1, [pc, #480]	; (18950 <d_print_comp_inner+0x1e7c>)
   18770:	4638      	mov	r0, r7
   18772:	f006 f869 	bl	1e848 <strcmp>
   18776:	4605      	mov	r5, r0
   18778:	2800      	cmp	r0, #0
   1877a:	f000 8135 	beq.w	189e8 <d_print_comp_inner+0x1f14>
   1877e:	4975      	ldr	r1, [pc, #468]	; (18954 <d_print_comp_inner+0x1e80>)
   18780:	4638      	mov	r0, r7
   18782:	f006 f861 	bl	1e848 <strcmp>
   18786:	2800      	cmp	r0, #0
   18788:	f000 82b6 	beq.w	18cf8 <d_print_comp_inner+0x2224>
   1878c:	464a      	mov	r2, r9
   1878e:	4641      	mov	r1, r8
   18790:	4620      	mov	r0, r4
   18792:	f001 fd2b 	bl	1a1ec <d_print_expr_op>
   18796:	2f00      	cmp	r7, #0
   18798:	f43f a837 	beq.w	1780a <d_print_comp_inner+0xd36>
   1879c:	496e      	ldr	r1, [pc, #440]	; (18958 <d_print_comp_inner+0x1e84>)
   1879e:	4638      	mov	r0, r7
   187a0:	f006 f852 	bl	1e848 <strcmp>
   187a4:	2800      	cmp	r0, #0
   187a6:	f000 8384 	beq.w	18eb2 <d_print_comp_inner+0x23de>
   187aa:	4638      	mov	r0, r7
   187ac:	496b      	ldr	r1, [pc, #428]	; (1895c <d_print_comp_inner+0x1e88>)
   187ae:	f006 f84b 	bl	1e848 <strcmp>
   187b2:	4605      	mov	r5, r0
   187b4:	2800      	cmp	r0, #0
   187b6:	f47f a828 	bne.w	1780a <d_print_comp_inner+0xd36>
   187ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   187be:	2bff      	cmp	r3, #255	; 0xff
   187c0:	f000 84db 	beq.w	1917a <d_print_comp_inner+0x26a6>
   187c4:	1c58      	adds	r0, r3, #1
   187c6:	2528      	movs	r5, #40	; 0x28
   187c8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   187cc:	4641      	mov	r1, r8
   187ce:	54e5      	strb	r5, [r4, r3]
   187d0:	4632      	mov	r2, r6
   187d2:	4620      	mov	r0, r4
   187d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   187d8:	f000 ff20 	bl	1961c <d_print_comp>
   187dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187e0:	29ff      	cmp	r1, #255	; 0xff
   187e2:	f000 846d 	beq.w	190c0 <d_print_comp_inner+0x25ec>
   187e6:	2329      	movs	r3, #41	; 0x29
   187e8:	1c4a      	adds	r2, r1, #1
   187ea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   187ee:	5463      	strb	r3, [r4, r1]
   187f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   187f4:	f7fe ba3c 	b.w	16c70 <d_print_comp_inner+0x19c>
   187f8:	f10d 0910 	add.w	r9, sp, #16
   187fc:	685a      	ldr	r2, [r3, #4]
   187fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18802:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18806:	4641      	mov	r1, r8
   18808:	4620      	mov	r0, r4
   1880a:	9204      	str	r2, [sp, #16]
   1880c:	9305      	str	r3, [sp, #20]
   1880e:	f7fe f961 	bl	16ad4 <d_print_comp_inner>
   18812:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18816:	9a05      	ldr	r2, [sp, #20]
   18818:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1881c:	b113      	cbz	r3, 18824 <d_print_comp_inner+0x1d50>
   1881e:	9b02      	ldr	r3, [sp, #8]
   18820:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18824:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18828:	2b3c      	cmp	r3, #60	; 0x3c
   1882a:	f000 83d9 	beq.w	18fe0 <d_print_comp_inner+0x250c>
   1882e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18832:	29ff      	cmp	r1, #255	; 0xff
   18834:	f000 8467 	beq.w	19106 <d_print_comp_inner+0x2632>
   18838:	1c4a      	adds	r2, r1, #1
   1883a:	233c      	movs	r3, #60	; 0x3c
   1883c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18840:	5463      	strb	r3, [r4, r1]
   18842:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18846:	686b      	ldr	r3, [r5, #4]
   18848:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   1884c:	689b      	ldr	r3, [r3, #8]
   1884e:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18852:	461a      	mov	r2, r3
   18854:	4641      	mov	r1, r8
   18856:	4620      	mov	r0, r4
   18858:	9304      	str	r3, [sp, #16]
   1885a:	9505      	str	r5, [sp, #20]
   1885c:	f7fe f93a 	bl	16ad4 <d_print_comp_inner>
   18860:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18864:	9a05      	ldr	r2, [sp, #20]
   18866:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1886a:	2b3e      	cmp	r3, #62	; 0x3e
   1886c:	f000 83ab 	beq.w	18fc6 <d_print_comp_inner+0x24f2>
   18870:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18874:	29ff      	cmp	r1, #255	; 0xff
   18876:	f000 849a 	beq.w	191ae <d_print_comp_inner+0x26da>
   1887a:	233e      	movs	r3, #62	; 0x3e
   1887c:	1c4a      	adds	r2, r1, #1
   1887e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18882:	5463      	strb	r3, [r4, r1]
   18884:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18888:	f7fe b9f2 	b.w	16c70 <d_print_comp_inner+0x19c>
   1888c:	6852      	ldr	r2, [r2, #4]
   1888e:	7c16      	ldrb	r6, [r2, #16]
   18890:	2e00      	cmp	r6, #0
   18892:	f43f a9e7 	beq.w	17c64 <d_print_comp_inner+0x1190>
   18896:	2e06      	cmp	r6, #6
   18898:	f240 8337 	bls.w	18f0a <d_print_comp_inner+0x2436>
   1889c:	2e07      	cmp	r6, #7
   1889e:	f47f a9e1 	bne.w	17c64 <d_print_comp_inner+0x1190>
   188a2:	68aa      	ldr	r2, [r5, #8]
   188a4:	7811      	ldrb	r1, [r2, #0]
   188a6:	2900      	cmp	r1, #0
   188a8:	f47f a9dc 	bne.w	17c64 <d_print_comp_inner+0x1190>
   188ac:	6891      	ldr	r1, [r2, #8]
   188ae:	2901      	cmp	r1, #1
   188b0:	f47f a9d8 	bne.w	17c64 <d_print_comp_inner+0x1190>
   188b4:	2b3c      	cmp	r3, #60	; 0x3c
   188b6:	f47f a9d5 	bne.w	17c64 <d_print_comp_inner+0x1190>
   188ba:	6853      	ldr	r3, [r2, #4]
   188bc:	781b      	ldrb	r3, [r3, #0]
   188be:	2b30      	cmp	r3, #48	; 0x30
   188c0:	f000 8626 	beq.w	19510 <d_print_comp_inner+0x2a3c>
   188c4:	2b31      	cmp	r3, #49	; 0x31
   188c6:	f47f a9cd 	bne.w	17c64 <d_print_comp_inner+0x1190>
   188ca:	2204      	movs	r2, #4
   188cc:	4924      	ldr	r1, [pc, #144]	; (18960 <d_print_comp_inner+0x1e8c>)
   188ce:	f7fb fe2d 	bl	1452c <d_append_buffer>
   188d2:	f7fe b9cd 	b.w	16c70 <d_print_comp_inner+0x19c>
   188d6:	4e23      	ldr	r6, [pc, #140]	; (18964 <d_print_comp_inner+0x1e90>)
   188d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   188dc:	f106 0a02 	add.w	sl, r6, #2
   188e0:	e009      	b.n	188f6 <d_print_comp_inner+0x1e22>
   188e2:	460b      	mov	r3, r1
   188e4:	3101      	adds	r1, #1
   188e6:	45b2      	cmp	sl, r6
   188e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   188ec:	54e7      	strb	r7, [r4, r3]
   188ee:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   188f2:	f43e ad52 	beq.w	1739a <d_print_comp_inner+0x8c6>
   188f6:	29ff      	cmp	r1, #255	; 0xff
   188f8:	f816 7b01 	ldrb.w	r7, [r6], #1
   188fc:	d1f1      	bne.n	188e2 <d_print_comp_inner+0x1e0e>
   188fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18902:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18906:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1890a:	4620      	mov	r0, r4
   1890c:	4798      	blx	r3
   1890e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18912:	3301      	adds	r3, #1
   18914:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18918:	2101      	movs	r1, #1
   1891a:	2300      	movs	r3, #0
   1891c:	e7e3      	b.n	188e6 <d_print_comp_inner+0x1e12>
   1891e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18922:	29ff      	cmp	r1, #255	; 0xff
   18924:	f000 84e4 	beq.w	192f0 <d_print_comp_inner+0x281c>
   18928:	2220      	movs	r2, #32
   1892a:	1c4b      	adds	r3, r1, #1
   1892c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18930:	5462      	strb	r2, [r4, r1]
   18932:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18936:	f7fe bdbb 	b.w	174b0 <d_print_comp_inner+0x9dc>
   1893a:	bf00      	nop
   1893c:	000243ec 	.word	0x000243ec
   18940:	00024214 	.word	0x00024214
   18944:	000241a0 	.word	0x000241a0
   18948:	00024364 	.word	0x00024364
   1894c:	00024398 	.word	0x00024398
   18950:	00024468 	.word	0x00024468
   18954:	000241a4 	.word	0x000241a4
   18958:	0002439c 	.word	0x0002439c
   1895c:	000246a8 	.word	0x000246a8
   18960:	000243c8 	.word	0x000243c8
   18964:	000241f0 	.word	0x000241f0
   18968:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1896c:	29ff      	cmp	r1, #255	; 0xff
   1896e:	f000 8465 	beq.w	1923c <d_print_comp_inner+0x2768>
   18972:	2220      	movs	r2, #32
   18974:	1c4b      	adds	r3, r1, #1
   18976:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1897a:	5462      	strb	r2, [r4, r1]
   1897c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18980:	f7fe bd80 	b.w	17484 <d_print_comp_inner+0x9b0>
   18984:	2700      	movs	r7, #0
   18986:	55a7      	strb	r7, [r4, r6]
   18988:	4631      	mov	r1, r6
   1898a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1898e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18992:	4620      	mov	r0, r4
   18994:	4798      	blx	r3
   18996:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1899a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1899e:	3301      	adds	r3, #1
   189a0:	463e      	mov	r6, r7
   189a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189a6:	f7fe be31 	b.w	1760c <d_print_comp_inner+0xb38>
   189aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189ae:	29ff      	cmp	r1, #255	; 0xff
   189b0:	f000 8465 	beq.w	1927e <d_print_comp_inner+0x27aa>
   189b4:	1c4a      	adds	r2, r1, #1
   189b6:	235b      	movs	r3, #91	; 0x5b
   189b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   189bc:	5463      	strb	r3, [r4, r1]
   189be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   189c2:	4641      	mov	r1, r8
   189c4:	68aa      	ldr	r2, [r5, #8]
   189c6:	4620      	mov	r0, r4
   189c8:	f000 fe28 	bl	1961c <d_print_comp>
   189cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189d0:	29ff      	cmp	r1, #255	; 0xff
   189d2:	f000 8312 	beq.w	18ffa <d_print_comp_inner+0x2526>
   189d6:	235d      	movs	r3, #93	; 0x5d
   189d8:	1c4a      	adds	r2, r1, #1
   189da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   189de:	5463      	strb	r3, [r4, r1]
   189e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   189e4:	f7fe b944 	b.w	16c70 <d_print_comp_inner+0x19c>
   189e8:	4631      	mov	r1, r6
   189ea:	4620      	mov	r0, r4
   189ec:	f7fb ffca 	bl	14984 <d_find_pack>
   189f0:	b928      	cbnz	r0, 189fe <d_print_comp_inner+0x1f2a>
   189f2:	e007      	b.n	18a04 <d_print_comp_inner+0x1f30>
   189f4:	6843      	ldr	r3, [r0, #4]
   189f6:	b12b      	cbz	r3, 18a04 <d_print_comp_inner+0x1f30>
   189f8:	6880      	ldr	r0, [r0, #8]
   189fa:	3501      	adds	r5, #1
   189fc:	b110      	cbz	r0, 18a04 <d_print_comp_inner+0x1f30>
   189fe:	7803      	ldrb	r3, [r0, #0]
   18a00:	2b2f      	cmp	r3, #47	; 0x2f
   18a02:	d0f7      	beq.n	189f4 <d_print_comp_inner+0x1f20>
   18a04:	462a      	mov	r2, r5
   18a06:	a804      	add	r0, sp, #16
   18a08:	49d4      	ldr	r1, [pc, #848]	; (18d5c <d_print_comp_inner+0x2288>)
   18a0a:	f005 fee7 	bl	1e7dc <sprintf>
   18a0e:	a804      	add	r0, sp, #16
   18a10:	f006 f896 	bl	1eb40 <strlen>
   18a14:	2800      	cmp	r0, #0
   18a16:	f43e a92b 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18a1a:	ad04      	add	r5, sp, #16
   18a1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a20:	182f      	adds	r7, r5, r0
   18a22:	f04f 0800 	mov.w	r8, #0
   18a26:	e009      	b.n	18a3c <d_print_comp_inner+0x1f68>
   18a28:	460b      	mov	r3, r1
   18a2a:	3101      	adds	r1, #1
   18a2c:	42bd      	cmp	r5, r7
   18a2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18a32:	54e6      	strb	r6, [r4, r3]
   18a34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18a38:	f43e a91a 	beq.w	16c70 <d_print_comp_inner+0x19c>
   18a3c:	29ff      	cmp	r1, #255	; 0xff
   18a3e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18a42:	d1f1      	bne.n	18a28 <d_print_comp_inner+0x1f54>
   18a44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18a4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a50:	4620      	mov	r0, r4
   18a52:	4798      	blx	r3
   18a54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a58:	3301      	adds	r3, #1
   18a5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a5e:	2101      	movs	r1, #1
   18a60:	2300      	movs	r3, #0
   18a62:	e7e3      	b.n	18a2c <d_print_comp_inner+0x1f58>
   18a64:	686a      	ldr	r2, [r5, #4]
   18a66:	4641      	mov	r1, r8
   18a68:	4620      	mov	r0, r4
   18a6a:	f000 fdd7 	bl	1961c <d_print_comp>
   18a6e:	f7fe b8ff 	b.w	16c70 <d_print_comp_inner+0x19c>
   18a72:	29ff      	cmp	r1, #255	; 0xff
   18a74:	f000 83d2 	beq.w	1921c <d_print_comp_inner+0x2748>
   18a78:	232d      	movs	r3, #45	; 0x2d
   18a7a:	1c4a      	adds	r2, r1, #1
   18a7c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a80:	5463      	strb	r3, [r4, r1]
   18a82:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a86:	f7ff b90e 	b.w	17ca6 <d_print_comp_inner+0x11d2>
   18a8a:	2500      	movs	r5, #0
   18a8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a94:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18a98:	4620      	mov	r0, r4
   18a9a:	4798      	blx	r3
   18a9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18aa0:	3301      	adds	r3, #1
   18aa2:	4629      	mov	r1, r5
   18aa4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18aa8:	2201      	movs	r2, #1
   18aaa:	f7ff bbeb 	b.w	18284 <d_print_comp_inner+0x17b0>
   18aae:	2500      	movs	r5, #0
   18ab0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ab4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ab8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18abc:	4620      	mov	r0, r4
   18abe:	4798      	blx	r3
   18ac0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ac4:	3301      	adds	r3, #1
   18ac6:	4629      	mov	r1, r5
   18ac8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18acc:	2201      	movs	r2, #1
   18ace:	f7ff ba8f 	b.w	17ff0 <d_print_comp_inner+0x151c>
   18ad2:	2600      	movs	r6, #0
   18ad4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18ad8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18adc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18ae0:	4798      	blx	r3
   18ae2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ae6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18aea:	3301      	adds	r3, #1
   18aec:	4631      	mov	r1, r6
   18aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18af2:	f7fe bd43 	b.w	1757c <d_print_comp_inner+0xaa8>
   18af6:	2600      	movs	r6, #0
   18af8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18afc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18b00:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18b04:	4798      	blx	r3
   18b06:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b0a:	3301      	adds	r3, #1
   18b0c:	4631      	mov	r1, r6
   18b0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b12:	2201      	movs	r2, #1
   18b14:	f7fe bb74 	b.w	17200 <d_print_comp_inner+0x72c>
   18b18:	2500      	movs	r5, #0
   18b1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b22:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18b26:	4620      	mov	r0, r4
   18b28:	4798      	blx	r3
   18b2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b2e:	3301      	adds	r3, #1
   18b30:	4629      	mov	r1, r5
   18b32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b36:	2201      	movs	r2, #1
   18b38:	f7ff bae4 	b.w	18104 <d_print_comp_inner+0x1630>
   18b3c:	220d      	movs	r2, #13
   18b3e:	4988      	ldr	r1, [pc, #544]	; (18d60 <d_print_comp_inner+0x228c>)
   18b40:	4620      	mov	r0, r4
   18b42:	f7fb fcf3 	bl	1452c <d_append_buffer>
   18b46:	68a9      	ldr	r1, [r5, #8]
   18b48:	4620      	mov	r0, r4
   18b4a:	3101      	adds	r1, #1
   18b4c:	f7fb ff9e 	bl	14a8c <d_append_num>
   18b50:	2203      	movs	r2, #3
   18b52:	4984      	ldr	r1, [pc, #528]	; (18d64 <d_print_comp_inner+0x2290>)
   18b54:	4620      	mov	r0, r4
   18b56:	f7fb fce9 	bl	1452c <d_append_buffer>
   18b5a:	686d      	ldr	r5, [r5, #4]
   18b5c:	f7fe bc22 	b.w	173a4 <d_print_comp_inner+0x8d0>
   18b60:	2500      	movs	r5, #0
   18b62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b6a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18b6e:	4620      	mov	r0, r4
   18b70:	4798      	blx	r3
   18b72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b76:	3301      	adds	r3, #1
   18b78:	4629      	mov	r1, r5
   18b7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b7e:	2201      	movs	r2, #1
   18b80:	f7fe be08 	b.w	17794 <d_print_comp_inner+0xcc0>
   18b84:	2301      	movs	r3, #1
   18b86:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18b8a:	f7fe b871 	b.w	16c70 <d_print_comp_inner+0x19c>
   18b8e:	2500      	movs	r5, #0
   18b90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b98:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18b9c:	4620      	mov	r0, r4
   18b9e:	4798      	blx	r3
   18ba0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ba4:	3301      	adds	r3, #1
   18ba6:	4629      	mov	r1, r5
   18ba8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bac:	2201      	movs	r2, #1
   18bae:	f7ff ba8f 	b.w	180d0 <d_print_comp_inner+0x15fc>
   18bb2:	2500      	movs	r5, #0
   18bb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bbc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18bc0:	4620      	mov	r0, r4
   18bc2:	4798      	blx	r3
   18bc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bc8:	3301      	adds	r3, #1
   18bca:	4629      	mov	r1, r5
   18bcc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bd0:	2201      	movs	r2, #1
   18bd2:	f7ff bbc5 	b.w	18360 <d_print_comp_inner+0x188c>
   18bd6:	a914      	add	r1, sp, #80	; 0x50
   18bd8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18bdc:	f841 0d40 	str.w	r0, [r1, #-64]!
   18be0:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18be4:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18be8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18bec:	4620      	mov	r0, r4
   18bee:	4641      	mov	r1, r8
   18bf0:	9306      	str	r3, [sp, #24]
   18bf2:	9607      	str	r6, [sp, #28]
   18bf4:	9505      	str	r5, [sp, #20]
   18bf6:	f000 fd11 	bl	1961c <d_print_comp>
   18bfa:	9e06      	ldr	r6, [sp, #24]
   18bfc:	9b04      	ldr	r3, [sp, #16]
   18bfe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18c02:	2e00      	cmp	r6, #0
   18c04:	f47e a834 	bne.w	16c70 <d_print_comp_inner+0x19c>
   18c08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c0c:	29ff      	cmp	r1, #255	; 0xff
   18c0e:	f000 8409 	beq.w	19424 <d_print_comp_inner+0x2950>
   18c12:	2320      	movs	r3, #32
   18c14:	1c4a      	adds	r2, r1, #1
   18c16:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18c1a:	5463      	strb	r3, [r4, r1]
   18c1c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c20:	f7fe be0b 	b.w	1783a <d_print_comp_inner+0xd66>
   18c24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18c28:	2b00      	cmp	r3, #0
   18c2a:	f6fe abff 	blt.w	1742c <d_print_comp_inner+0x958>
   18c2e:	2b00      	cmp	r3, #0
   18c30:	f000 829d 	beq.w	1916e <d_print_comp_inner+0x269a>
   18c34:	6880      	ldr	r0, [r0, #8]
   18c36:	3b01      	subs	r3, #1
   18c38:	2800      	cmp	r0, #0
   18c3a:	f43e a82d 	beq.w	16c98 <d_print_comp_inner+0x1c4>
   18c3e:	7802      	ldrb	r2, [r0, #0]
   18c40:	2a2f      	cmp	r2, #47	; 0x2f
   18c42:	d0f4      	beq.n	18c2e <d_print_comp_inner+0x215a>
   18c44:	f7fe b828 	b.w	16c98 <d_print_comp_inner+0x1c4>
   18c48:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18c4c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18c50:	f1be 0f00 	cmp.w	lr, #0
   18c54:	dd14      	ble.n	18c80 <d_print_comp_inner+0x21ac>
   18c56:	6813      	ldr	r3, [r2, #0]
   18c58:	4299      	cmp	r1, r3
   18c5a:	f000 83f5 	beq.w	19448 <d_print_comp_inner+0x2974>
   18c5e:	f102 0008 	add.w	r0, r2, #8
   18c62:	463b      	mov	r3, r7
   18c64:	46a4      	mov	ip, r4
   18c66:	e004      	b.n	18c72 <d_print_comp_inner+0x219e>
   18c68:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18c6c:	42a1      	cmp	r1, r4
   18c6e:	f000 81d4 	beq.w	1901a <d_print_comp_inner+0x2546>
   18c72:	3301      	adds	r3, #1
   18c74:	459e      	cmp	lr, r3
   18c76:	4681      	mov	r9, r0
   18c78:	f100 0008 	add.w	r0, r0, #8
   18c7c:	d1f4      	bne.n	18c68 <d_print_comp_inner+0x2194>
   18c7e:	4664      	mov	r4, ip
   18c80:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18c84:	459e      	cmp	lr, r3
   18c86:	f280 84b9 	bge.w	195fc <d_print_comp_inner+0x2b28>
   18c8a:	f10e 0301 	add.w	r3, lr, #1
   18c8e:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18c92:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18c96:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18c9a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18c9e:	3004      	adds	r0, #4
   18ca0:	468e      	mov	lr, r1
   18ca2:	2a00      	cmp	r2, #0
   18ca4:	f000 848d 	beq.w	195c2 <d_print_comp_inner+0x2aee>
   18ca8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18cac:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18cb0:	428b      	cmp	r3, r1
   18cb2:	f103 0c01 	add.w	ip, r3, #1
   18cb6:	f280 84a1 	bge.w	195fc <d_print_comp_inner+0x2b28>
   18cba:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18cbe:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18cc2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18cc6:	6851      	ldr	r1, [r2, #4]
   18cc8:	6059      	str	r1, [r3, #4]
   18cca:	6003      	str	r3, [r0, #0]
   18ccc:	6812      	ldr	r2, [r2, #0]
   18cce:	4618      	mov	r0, r3
   18cd0:	e7e7      	b.n	18ca2 <d_print_comp_inner+0x21ce>
   18cd2:	2500      	movs	r5, #0
   18cd4:	4619      	mov	r1, r3
   18cd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18cda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18cde:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ce2:	4620      	mov	r0, r4
   18ce4:	4798      	blx	r3
   18ce6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cea:	1c5a      	adds	r2, r3, #1
   18cec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18cf0:	462b      	mov	r3, r5
   18cf2:	2201      	movs	r2, #1
   18cf4:	f7fe bd3d 	b.w	17772 <d_print_comp_inner+0xc9e>
   18cf8:	2e00      	cmp	r6, #0
   18cfa:	f000 844d 	beq.w	19598 <d_print_comp_inner+0x2ac4>
   18cfe:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18d02:	f040 8488 	bne.w	19616 <d_print_comp_inner+0x2b42>
   18d06:	6873      	ldr	r3, [r6, #4]
   18d08:	b373      	cbz	r3, 18d68 <d_print_comp_inner+0x2294>
   18d0a:	4607      	mov	r7, r0
   18d0c:	e007      	b.n	18d1e <d_print_comp_inner+0x224a>
   18d0e:	3701      	adds	r7, #1
   18d10:	68b6      	ldr	r6, [r6, #8]
   18d12:	b356      	cbz	r6, 18d6a <d_print_comp_inner+0x2296>
   18d14:	7833      	ldrb	r3, [r6, #0]
   18d16:	2b2f      	cmp	r3, #47	; 0x2f
   18d18:	d127      	bne.n	18d6a <d_print_comp_inner+0x2296>
   18d1a:	6873      	ldr	r3, [r6, #4]
   18d1c:	b32b      	cbz	r3, 18d6a <d_print_comp_inner+0x2296>
   18d1e:	781a      	ldrb	r2, [r3, #0]
   18d20:	2a4a      	cmp	r2, #74	; 0x4a
   18d22:	d1f4      	bne.n	18d0e <d_print_comp_inner+0x223a>
   18d24:	6859      	ldr	r1, [r3, #4]
   18d26:	4620      	mov	r0, r4
   18d28:	f7fb fe2c 	bl	14984 <d_find_pack>
   18d2c:	b198      	cbz	r0, 18d56 <d_print_comp_inner+0x2282>
   18d2e:	7803      	ldrb	r3, [r0, #0]
   18d30:	2b2f      	cmp	r3, #47	; 0x2f
   18d32:	f040 846c 	bne.w	1960e <d_print_comp_inner+0x2b3a>
   18d36:	6843      	ldr	r3, [r0, #4]
   18d38:	2b00      	cmp	r3, #0
   18d3a:	f000 8464 	beq.w	19606 <d_print_comp_inner+0x2b32>
   18d3e:	4603      	mov	r3, r0
   18d40:	2000      	movs	r0, #0
   18d42:	e004      	b.n	18d4e <d_print_comp_inner+0x227a>
   18d44:	781a      	ldrb	r2, [r3, #0]
   18d46:	2a2f      	cmp	r2, #47	; 0x2f
   18d48:	d105      	bne.n	18d56 <d_print_comp_inner+0x2282>
   18d4a:	685a      	ldr	r2, [r3, #4]
   18d4c:	b11a      	cbz	r2, 18d56 <d_print_comp_inner+0x2282>
   18d4e:	689b      	ldr	r3, [r3, #8]
   18d50:	3001      	adds	r0, #1
   18d52:	2b00      	cmp	r3, #0
   18d54:	d1f6      	bne.n	18d44 <d_print_comp_inner+0x2270>
   18d56:	4407      	add	r7, r0
   18d58:	e7da      	b.n	18d10 <d_print_comp_inner+0x223c>
   18d5a:	bf00      	nop
   18d5c:	000241a0 	.word	0x000241a0
   18d60:	000241f4 	.word	0x000241f4
   18d64:	00024204 	.word	0x00024204
   18d68:	461f      	mov	r7, r3
   18d6a:	4639      	mov	r1, r7
   18d6c:	4620      	mov	r0, r4
   18d6e:	f7fb fe8d 	bl	14a8c <d_append_num>
   18d72:	f7fd bf7d 	b.w	16c70 <d_print_comp_inner+0x19c>
   18d76:	2500      	movs	r5, #0
   18d78:	4619      	mov	r1, r3
   18d7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d82:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d86:	4620      	mov	r0, r4
   18d88:	4798      	blx	r3
   18d8a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d8e:	1c5a      	adds	r2, r3, #1
   18d90:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18d94:	462b      	mov	r3, r5
   18d96:	2101      	movs	r1, #1
   18d98:	f7fe bb8e 	b.w	174b8 <d_print_comp_inner+0x9e4>
   18d9c:	2600      	movs	r6, #0
   18d9e:	4619      	mov	r1, r3
   18da0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18da4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18da8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18dac:	4620      	mov	r0, r4
   18dae:	4798      	blx	r3
   18db0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18db4:	1c5a      	adds	r2, r3, #1
   18db6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18dba:	4633      	mov	r3, r6
   18dbc:	2101      	movs	r1, #1
   18dbe:	f7fe bb65 	b.w	1748c <d_print_comp_inner+0x9b8>
   18dc2:	2200      	movs	r2, #0
   18dc4:	4619      	mov	r1, r3
   18dc6:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   18dca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18dce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18dd2:	4620      	mov	r0, r4
   18dd4:	4798      	blx	r3
   18dd6:	2329      	movs	r3, #41	; 0x29
   18dd8:	7023      	strb	r3, [r4, #0]
   18dda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18dde:	782a      	ldrb	r2, [r5, #0]
   18de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18de4:	2101      	movs	r1, #1
   18de6:	3301      	adds	r3, #1
   18de8:	2a3d      	cmp	r2, #61	; 0x3d
   18dea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18dee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18df2:	f47e af58 	bne.w	17ca6 <d_print_comp_inner+0x11d2>
   18df6:	e63f      	b.n	18a78 <d_print_comp_inner+0x1fa4>
   18df8:	2700      	movs	r7, #0
   18dfa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18dfe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18e02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e06:	4620      	mov	r0, r4
   18e08:	4798      	blx	r3
   18e0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e0e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18e12:	3301      	adds	r3, #1
   18e14:	4639      	mov	r1, r7
   18e16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e1a:	f7fe bf28 	b.w	17c6e <d_print_comp_inner+0x119a>
   18e1e:	2500      	movs	r5, #0
   18e20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e28:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e2c:	4620      	mov	r0, r4
   18e2e:	4798      	blx	r3
   18e30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e34:	3301      	adds	r3, #1
   18e36:	4629      	mov	r1, r5
   18e38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e3c:	2201      	movs	r2, #1
   18e3e:	f7ff bb12 	b.w	18466 <d_print_comp_inner+0x1992>
   18e42:	781b      	ldrb	r3, [r3, #0]
   18e44:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   18e48:	2901      	cmp	r1, #1
   18e4a:	d903      	bls.n	18e54 <d_print_comp_inner+0x2380>
   18e4c:	3b72      	subs	r3, #114	; 0x72
   18e4e:	2b01      	cmp	r3, #1
   18e50:	f63d aead 	bhi.w	16bae <d_print_comp_inner+0xda>
   18e54:	4641      	mov	r1, r8
   18e56:	4620      	mov	r0, r4
   18e58:	f001 f9c8 	bl	1a1ec <d_print_expr_op>
   18e5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e60:	29ff      	cmp	r1, #255	; 0xff
   18e62:	f000 8271 	beq.w	19348 <d_print_comp_inner+0x2874>
   18e66:	1c4a      	adds	r2, r1, #1
   18e68:	233c      	movs	r3, #60	; 0x3c
   18e6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e6e:	5463      	strb	r3, [r4, r1]
   18e70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e74:	68ab      	ldr	r3, [r5, #8]
   18e76:	4641      	mov	r1, r8
   18e78:	685a      	ldr	r2, [r3, #4]
   18e7a:	4620      	mov	r0, r4
   18e7c:	f000 fbce 	bl	1961c <d_print_comp>
   18e80:	2202      	movs	r2, #2
   18e82:	49d5      	ldr	r1, [pc, #852]	; (191d8 <d_print_comp_inner+0x2704>)
   18e84:	4620      	mov	r0, r4
   18e86:	f7fb fb51 	bl	1452c <d_append_buffer>
   18e8a:	68ab      	ldr	r3, [r5, #8]
   18e8c:	4641      	mov	r1, r8
   18e8e:	689a      	ldr	r2, [r3, #8]
   18e90:	4620      	mov	r0, r4
   18e92:	f000 fbc3 	bl	1961c <d_print_comp>
   18e96:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e9a:	29ff      	cmp	r1, #255	; 0xff
   18e9c:	f000 81df 	beq.w	1925e <d_print_comp_inner+0x278a>
   18ea0:	2329      	movs	r3, #41	; 0x29
   18ea2:	1c4a      	adds	r2, r1, #1
   18ea4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ea8:	5463      	strb	r3, [r4, r1]
   18eaa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18eae:	f7fd bedf 	b.w	16c70 <d_print_comp_inner+0x19c>
   18eb2:	4632      	mov	r2, r6
   18eb4:	4641      	mov	r1, r8
   18eb6:	4620      	mov	r0, r4
   18eb8:	f000 fbb0 	bl	1961c <d_print_comp>
   18ebc:	f7fd bed8 	b.w	16c70 <d_print_comp_inner+0x19c>
   18ec0:	2600      	movs	r6, #0
   18ec2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ec6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18eca:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18ece:	4620      	mov	r0, r4
   18ed0:	4798      	blx	r3
   18ed2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ed6:	3301      	adds	r3, #1
   18ed8:	4631      	mov	r1, r6
   18eda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ede:	2201      	movs	r2, #1
   18ee0:	f7fe ba55 	b.w	1738e <d_print_comp_inner+0x8ba>
   18ee4:	49bd      	ldr	r1, [pc, #756]	; (191dc <d_print_comp_inner+0x2708>)
   18ee6:	6870      	ldr	r0, [r6, #4]
   18ee8:	f005 fe98 	bl	1ec1c <strncmp>
   18eec:	2800      	cmp	r0, #0
   18eee:	f47e aabd 	bne.w	1746c <d_print_comp_inner+0x998>
   18ef2:	68aa      	ldr	r2, [r5, #8]
   18ef4:	4641      	mov	r1, r8
   18ef6:	4620      	mov	r0, r4
   18ef8:	f000 fb90 	bl	1961c <d_print_comp>
   18efc:	2202      	movs	r2, #2
   18efe:	49b8      	ldr	r1, [pc, #736]	; (191e0 <d_print_comp_inner+0x270c>)
   18f00:	4620      	mov	r0, r4
   18f02:	f7fb fb13 	bl	1452c <d_append_buffer>
   18f06:	f7fe badd 	b.w	174c4 <d_print_comp_inner+0x9f0>
   18f0a:	68aa      	ldr	r2, [r5, #8]
   18f0c:	7817      	ldrb	r7, [r2, #0]
   18f0e:	2f00      	cmp	r7, #0
   18f10:	f47e aea8 	bne.w	17c64 <d_print_comp_inner+0x1190>
   18f14:	2b3d      	cmp	r3, #61	; 0x3d
   18f16:	f000 82ef 	beq.w	194f8 <d_print_comp_inner+0x2a24>
   18f1a:	68aa      	ldr	r2, [r5, #8]
   18f1c:	4641      	mov	r1, r8
   18f1e:	4620      	mov	r0, r4
   18f20:	3e02      	subs	r6, #2
   18f22:	f000 fb7b 	bl	1961c <d_print_comp>
   18f26:	2e04      	cmp	r6, #4
   18f28:	f63d aea2 	bhi.w	16c70 <d_print_comp_inner+0x19c>
   18f2c:	e8df f006 	tbb	[pc, r6]
   18f30:	0a111826 	.word	0x0a111826
   18f34:	03          	.byte	0x03
   18f35:	00          	.byte	0x00
   18f36:	4620      	mov	r0, r4
   18f38:	2203      	movs	r2, #3
   18f3a:	49aa      	ldr	r1, [pc, #680]	; (191e4 <d_print_comp_inner+0x2710>)
   18f3c:	f7fb faf6 	bl	1452c <d_append_buffer>
   18f40:	f7fd be96 	b.w	16c70 <d_print_comp_inner+0x19c>
   18f44:	4620      	mov	r0, r4
   18f46:	2202      	movs	r2, #2
   18f48:	49a7      	ldr	r1, [pc, #668]	; (191e8 <d_print_comp_inner+0x2714>)
   18f4a:	f7fb faef 	bl	1452c <d_append_buffer>
   18f4e:	f7fd be8f 	b.w	16c70 <d_print_comp_inner+0x19c>
   18f52:	4620      	mov	r0, r4
   18f54:	2202      	movs	r2, #2
   18f56:	49a5      	ldr	r1, [pc, #660]	; (191ec <d_print_comp_inner+0x2718>)
   18f58:	f7fb fae8 	bl	1452c <d_append_buffer>
   18f5c:	f7fd be88 	b.w	16c70 <d_print_comp_inner+0x19c>
   18f60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f64:	29ff      	cmp	r1, #255	; 0xff
   18f66:	f000 831a 	beq.w	1959e <d_print_comp_inner+0x2aca>
   18f6a:	236c      	movs	r3, #108	; 0x6c
   18f6c:	1c4a      	adds	r2, r1, #1
   18f6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f72:	5463      	strb	r3, [r4, r1]
   18f74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f78:	f7fd be7a 	b.w	16c70 <d_print_comp_inner+0x19c>
   18f7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f80:	29ff      	cmp	r1, #255	; 0xff
   18f82:	f000 82db 	beq.w	1953c <d_print_comp_inner+0x2a68>
   18f86:	2375      	movs	r3, #117	; 0x75
   18f88:	1c4a      	adds	r2, r1, #1
   18f8a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f8e:	5463      	strb	r3, [r4, r1]
   18f90:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f94:	f7fd be6c 	b.w	16c70 <d_print_comp_inner+0x19c>
   18f98:	2600      	movs	r6, #0
   18f9a:	4619      	mov	r1, r3
   18f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fa0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fa4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18fa8:	4620      	mov	r0, r4
   18faa:	4798      	blx	r3
   18fac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fb0:	1c5a      	adds	r2, r3, #1
   18fb2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18fb6:	4633      	mov	r3, r6
   18fb8:	2101      	movs	r1, #1
   18fba:	f7fe bd3c 	b.w	17a36 <d_print_comp_inner+0xf62>
   18fbe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18fc2:	f7fe bf95 	b.w	17ef0 <d_print_comp_inner+0x141c>
   18fc6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18fca:	29ff      	cmp	r1, #255	; 0xff
   18fcc:	f000 8244 	beq.w	19458 <d_print_comp_inner+0x2984>
   18fd0:	2320      	movs	r3, #32
   18fd2:	1c4a      	adds	r2, r1, #1
   18fd4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18fd8:	5463      	strb	r3, [r4, r1]
   18fda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18fde:	e447      	b.n	18870 <d_print_comp_inner+0x1d9c>
   18fe0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18fe4:	29ff      	cmp	r1, #255	; 0xff
   18fe6:	f000 826e 	beq.w	194c6 <d_print_comp_inner+0x29f2>
   18fea:	2320      	movs	r3, #32
   18fec:	1c4a      	adds	r2, r1, #1
   18fee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ff2:	5463      	strb	r3, [r4, r1]
   18ff4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ff8:	e419      	b.n	1882e <d_print_comp_inner+0x1d5a>
   18ffa:	2500      	movs	r5, #0
   18ffc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19000:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19004:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19008:	4620      	mov	r0, r4
   1900a:	4798      	blx	r3
   1900c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19010:	3301      	adds	r3, #1
   19012:	4629      	mov	r1, r5
   19014:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19018:	e4dd      	b.n	189d6 <d_print_comp_inner+0x1f02>
   1901a:	4664      	mov	r4, ip
   1901c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   19020:	b1d8      	cbz	r0, 1905a <d_print_comp_inner+0x2586>
   19022:	6802      	ldr	r2, [r0, #0]
   19024:	4291      	cmp	r1, r2
   19026:	d00a      	beq.n	1903e <d_print_comp_inner+0x256a>
   19028:	4603      	mov	r3, r0
   1902a:	e004      	b.n	19036 <d_print_comp_inner+0x2562>
   1902c:	685b      	ldr	r3, [r3, #4]
   1902e:	b1a3      	cbz	r3, 1905a <d_print_comp_inner+0x2586>
   19030:	681a      	ldr	r2, [r3, #0]
   19032:	4291      	cmp	r1, r2
   19034:	d003      	beq.n	1903e <d_print_comp_inner+0x256a>
   19036:	4295      	cmp	r5, r2
   19038:	d1f8      	bne.n	1902c <d_print_comp_inner+0x2558>
   1903a:	4298      	cmp	r0, r3
   1903c:	d0f6      	beq.n	1902c <d_print_comp_inner+0x2558>
   1903e:	3104      	adds	r1, #4
   19040:	4620      	mov	r0, r4
   19042:	f7fb fc83 	bl	1494c <d_lookup_template_argument.isra.6>
   19046:	2800      	cmp	r0, #0
   19048:	f43d ae26 	beq.w	16c98 <d_print_comp_inner+0x1c4>
   1904c:	7803      	ldrb	r3, [r0, #0]
   1904e:	2b2f      	cmp	r3, #47	; 0x2f
   19050:	f43d ae11 	beq.w	16c76 <d_print_comp_inner+0x1a2>
   19054:	4601      	mov	r1, r0
   19056:	f7fe bc30 	b.w	178ba <d_print_comp_inner+0xde6>
   1905a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1905e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19062:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19066:	3104      	adds	r1, #4
   19068:	4620      	mov	r0, r4
   1906a:	f7fb fc6f 	bl	1494c <d_lookup_template_argument.isra.6>
   1906e:	2800      	cmp	r0, #0
   19070:	f43d ae10 	beq.w	16c94 <d_print_comp_inner+0x1c0>
   19074:	2701      	movs	r7, #1
   19076:	e7e9      	b.n	1904c <d_print_comp_inner+0x2578>
   19078:	2600      	movs	r6, #0
   1907a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1907e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19082:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19086:	4620      	mov	r0, r4
   19088:	4798      	blx	r3
   1908a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1908e:	f8da 5004 	ldr.w	r5, [sl, #4]
   19092:	3301      	adds	r3, #1
   19094:	4631      	mov	r1, r6
   19096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1909a:	f7ff b85a 	b.w	18152 <d_print_comp_inner+0x167e>
   1909e:	68aa      	ldr	r2, [r5, #8]
   190a0:	4641      	mov	r1, r8
   190a2:	4620      	mov	r0, r4
   190a4:	f000 faba 	bl	1961c <d_print_comp>
   190a8:	9b06      	ldr	r3, [sp, #24]
   190aa:	9a00      	ldr	r2, [sp, #0]
   190ac:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   190b0:	2b00      	cmp	r3, #0
   190b2:	f43e ac9d 	beq.w	179f0 <d_print_comp_inner+0xf1c>
   190b6:	f7fd bddb 	b.w	16c70 <d_print_comp_inner+0x19c>
   190ba:	255f      	movs	r5, #95	; 0x5f
   190bc:	f7ff ba10 	b.w	184e0 <d_print_comp_inner+0x1a0c>
   190c0:	2500      	movs	r5, #0
   190c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190ce:	4620      	mov	r0, r4
   190d0:	4798      	blx	r3
   190d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190d6:	3301      	adds	r3, #1
   190d8:	4629      	mov	r1, r5
   190da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190de:	f7ff bb82 	b.w	187e6 <d_print_comp_inner+0x1d12>
   190e2:	4648      	mov	r0, r9
   190e4:	4942      	ldr	r1, [pc, #264]	; (191f0 <d_print_comp_inner+0x271c>)
   190e6:	f005 fbaf 	bl	1e848 <strcmp>
   190ea:	b120      	cbz	r0, 190f6 <d_print_comp_inner+0x2622>
   190ec:	463a      	mov	r2, r7
   190ee:	4641      	mov	r1, r8
   190f0:	4620      	mov	r0, r4
   190f2:	f001 f87b 	bl	1a1ec <d_print_expr_op>
   190f6:	68ab      	ldr	r3, [r5, #8]
   190f8:	4641      	mov	r1, r8
   190fa:	689a      	ldr	r2, [r3, #8]
   190fc:	4620      	mov	r0, r4
   190fe:	f001 f8b3 	bl	1a268 <d_print_subexpr>
   19102:	f7fd bd9d 	b.w	16c40 <d_print_comp_inner+0x16c>
   19106:	2600      	movs	r6, #0
   19108:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1910c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19110:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19114:	4620      	mov	r0, r4
   19116:	4798      	blx	r3
   19118:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1911c:	3301      	adds	r3, #1
   1911e:	4631      	mov	r1, r6
   19120:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19124:	f7ff bb88 	b.w	18838 <d_print_comp_inner+0x1d64>
   19128:	2500      	movs	r5, #0
   1912a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1912e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19132:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19136:	4620      	mov	r0, r4
   19138:	4798      	blx	r3
   1913a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1913e:	3301      	adds	r3, #1
   19140:	4629      	mov	r1, r5
   19142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19146:	f7fe bb59 	b.w	177fc <d_print_comp_inner+0xd28>
   1914a:	2500      	movs	r5, #0
   1914c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19150:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19154:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19158:	4798      	blx	r3
   1915a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1915e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19162:	3301      	adds	r3, #1
   19164:	4629      	mov	r1, r5
   19166:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1916a:	f7fe bb2b 	b.w	177c4 <d_print_comp_inner+0xcf0>
   1916e:	6840      	ldr	r0, [r0, #4]
   19170:	2800      	cmp	r0, #0
   19172:	f43d ad91 	beq.w	16c98 <d_print_comp_inner+0x1c4>
   19176:	f7fe b959 	b.w	1742c <d_print_comp_inner+0x958>
   1917a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1917e:	4619      	mov	r1, r3
   19180:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19184:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19188:	4620      	mov	r0, r4
   1918a:	4798      	blx	r3
   1918c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19190:	1c5a      	adds	r2, r3, #1
   19192:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19196:	462b      	mov	r3, r5
   19198:	f7ff bb14 	b.w	187c4 <d_print_comp_inner+0x1cf0>
   1919c:	6873      	ldr	r3, [r6, #4]
   1919e:	781a      	ldrb	r2, [r3, #0]
   191a0:	2a01      	cmp	r2, #1
   191a2:	f000 8153 	beq.w	1944c <d_print_comp_inner+0x2978>
   191a6:	f896 a000 	ldrb.w	sl, [r6]
   191aa:	f7ff bae0 	b.w	1876e <d_print_comp_inner+0x1c9a>
   191ae:	2500      	movs	r5, #0
   191b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191b4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   191b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191bc:	4620      	mov	r0, r4
   191be:	4798      	blx	r3
   191c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191c4:	3301      	adds	r3, #1
   191c6:	4629      	mov	r1, r5
   191c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191cc:	f7ff bb55 	b.w	1887a <d_print_comp_inner+0x1da6>
   191d0:	4654      	mov	r4, sl
   191d2:	f7fe be8d 	b.w	17ef0 <d_print_comp_inner+0x141c>
   191d6:	bf00      	nop
   191d8:	000243a0 	.word	0x000243a0
   191dc:	00024208 	.word	0x00024208
   191e0:	00024210 	.word	0x00024210
   191e4:	000243bc 	.word	0x000243bc
   191e8:	000243b8 	.word	0x000243b8
   191ec:	000243b4 	.word	0x000243b4
   191f0:	000241a8 	.word	0x000241a8
   191f4:	686a      	ldr	r2, [r5, #4]
   191f6:	4641      	mov	r1, r8
   191f8:	4620      	mov	r0, r4
   191fa:	f001 f835 	bl	1a268 <d_print_subexpr>
   191fe:	4620      	mov	r0, r4
   19200:	2203      	movs	r2, #3
   19202:	49e2      	ldr	r1, [pc, #904]	; (1958c <d_print_comp_inner+0x2ab8>)
   19204:	f7fb f992 	bl	1452c <d_append_buffer>
   19208:	f7fd bd32 	b.w	16c70 <d_print_comp_inner+0x19c>
   1920c:	ab14      	add	r3, sp, #80	; 0x50
   1920e:	9603      	str	r6, [sp, #12]
   19210:	f843 cd48 	str.w	ip, [r3, #-72]!
   19214:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19218:	f7fe b85a 	b.w	172d0 <d_print_comp_inner+0x7fc>
   1921c:	2700      	movs	r7, #0
   1921e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19222:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19226:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1922a:	4620      	mov	r0, r4
   1922c:	4798      	blx	r3
   1922e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19232:	3301      	adds	r3, #1
   19234:	4639      	mov	r1, r7
   19236:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1923a:	e41d      	b.n	18a78 <d_print_comp_inner+0x1fa4>
   1923c:	2600      	movs	r6, #0
   1923e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19242:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19246:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1924a:	4620      	mov	r0, r4
   1924c:	4798      	blx	r3
   1924e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19252:	3301      	adds	r3, #1
   19254:	4631      	mov	r1, r6
   19256:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1925a:	f7ff bb8a 	b.w	18972 <d_print_comp_inner+0x1e9e>
   1925e:	2500      	movs	r5, #0
   19260:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19264:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19268:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1926c:	4620      	mov	r0, r4
   1926e:	4798      	blx	r3
   19270:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19274:	3301      	adds	r3, #1
   19276:	4629      	mov	r1, r5
   19278:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1927c:	e610      	b.n	18ea0 <d_print_comp_inner+0x23cc>
   1927e:	2600      	movs	r6, #0
   19280:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19284:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19288:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1928c:	4620      	mov	r0, r4
   1928e:	4798      	blx	r3
   19290:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19294:	3301      	adds	r3, #1
   19296:	4631      	mov	r1, r6
   19298:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1929c:	f7ff bb8a 	b.w	189b4 <d_print_comp_inner+0x1ee0>
   192a0:	685a      	ldr	r2, [r3, #4]
   192a2:	6891      	ldr	r1, [r2, #8]
   192a4:	2901      	cmp	r1, #1
   192a6:	f47d ac90 	bne.w	16bca <d_print_comp_inner+0xf6>
   192aa:	6852      	ldr	r2, [r2, #4]
   192ac:	7812      	ldrb	r2, [r2, #0]
   192ae:	2a3e      	cmp	r2, #62	; 0x3e
   192b0:	f47d ac8b 	bne.w	16bca <d_print_comp_inner+0xf6>
   192b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   192b8:	29ff      	cmp	r1, #255	; 0xff
   192ba:	d10f      	bne.n	192dc <d_print_comp_inner+0x2808>
   192bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192c0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   192c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192c8:	4620      	mov	r0, r4
   192ca:	4798      	blx	r3
   192cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192d0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   192d4:	3301      	adds	r3, #1
   192d6:	4631      	mov	r1, r6
   192d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192dc:	2328      	movs	r3, #40	; 0x28
   192de:	1c4a      	adds	r2, r1, #1
   192e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   192e4:	5463      	strb	r3, [r4, r1]
   192e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   192ea:	686b      	ldr	r3, [r5, #4]
   192ec:	f7fd bc6d 	b.w	16bca <d_print_comp_inner+0xf6>
   192f0:	2500      	movs	r5, #0
   192f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192f6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   192fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192fe:	4620      	mov	r0, r4
   19300:	4798      	blx	r3
   19302:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19306:	3301      	adds	r3, #1
   19308:	4629      	mov	r1, r5
   1930a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1930e:	f7ff bb0b 	b.w	18928 <d_print_comp_inner+0x1e54>
   19312:	f8db b004 	ldr.w	fp, [fp, #4]
   19316:	f1bb 0f00 	cmp.w	fp, #0
   1931a:	f43e ade9 	beq.w	17ef0 <d_print_comp_inner+0x141c>
   1931e:	f7fd bfc3 	b.w	172a8 <d_print_comp_inner+0x7d4>
   19322:	9b02      	ldr	r3, [sp, #8]
   19324:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19328:	f7fd bfdb 	b.w	172e2 <d_print_comp_inner+0x80e>
   1932c:	6893      	ldr	r3, [r2, #8]
   1932e:	781b      	ldrb	r3, [r3, #0]
   19330:	2b29      	cmp	r3, #41	; 0x29
   19332:	bf1c      	itt	ne
   19334:	2301      	movne	r3, #1
   19336:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1933a:	6852      	ldr	r2, [r2, #4]
   1933c:	4641      	mov	r1, r8
   1933e:	4620      	mov	r0, r4
   19340:	f000 ff92 	bl	1a268 <d_print_subexpr>
   19344:	f7fd bc52 	b.w	16bec <d_print_comp_inner+0x118>
   19348:	2600      	movs	r6, #0
   1934a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1934e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19352:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19356:	4620      	mov	r0, r4
   19358:	4798      	blx	r3
   1935a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1935e:	3301      	adds	r3, #1
   19360:	4631      	mov	r1, r6
   19362:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19366:	e57e      	b.n	18e66 <d_print_comp_inner+0x2392>
   19368:	6872      	ldr	r2, [r6, #4]
   1936a:	4641      	mov	r1, r8
   1936c:	4620      	mov	r0, r4
   1936e:	f000 ff7b 	bl	1a268 <d_print_subexpr>
   19372:	464a      	mov	r2, r9
   19374:	4641      	mov	r1, r8
   19376:	4620      	mov	r0, r4
   19378:	f000 ff38 	bl	1a1ec <d_print_expr_op>
   1937c:	f7fd bc78 	b.w	16c70 <d_print_comp_inner+0x19c>
   19380:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19384:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19388:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1938c:	4620      	mov	r0, r4
   1938e:	4798      	blx	r3
   19390:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19394:	3301      	adds	r3, #1
   19396:	4629      	mov	r1, r5
   19398:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1939c:	f7fd bfad 	b.w	172fa <d_print_comp_inner+0x826>
   193a0:	464a      	mov	r2, r9
   193a2:	4641      	mov	r1, r8
   193a4:	4620      	mov	r0, r4
   193a6:	f000 ff5f 	bl	1a268 <d_print_subexpr>
   193aa:	4652      	mov	r2, sl
   193ac:	4641      	mov	r1, r8
   193ae:	4620      	mov	r0, r4
   193b0:	f000 ff1c 	bl	1a1ec <d_print_expr_op>
   193b4:	463a      	mov	r2, r7
   193b6:	4641      	mov	r1, r8
   193b8:	4620      	mov	r0, r4
   193ba:	f000 ff55 	bl	1a268 <d_print_subexpr>
   193be:	4620      	mov	r0, r4
   193c0:	2203      	movs	r2, #3
   193c2:	4973      	ldr	r1, [pc, #460]	; (19590 <d_print_comp_inner+0x2abc>)
   193c4:	f7fb f8b2 	bl	1452c <d_append_buffer>
   193c8:	462a      	mov	r2, r5
   193ca:	4641      	mov	r1, r8
   193cc:	4620      	mov	r0, r4
   193ce:	f000 ff4b 	bl	1a268 <d_print_subexpr>
   193d2:	f7fd bc4d 	b.w	16c70 <d_print_comp_inner+0x19c>
   193d6:	454f      	cmp	r7, r9
   193d8:	f67f ae6f 	bls.w	190ba <d_print_comp_inner+0x25e6>
   193dc:	2d5f      	cmp	r5, #95	; 0x5f
   193de:	f47f ae6c 	bne.w	190ba <d_print_comp_inner+0x25e6>
   193e2:	28ff      	cmp	r0, #255	; 0xff
   193e4:	f63f a87c 	bhi.w	184e0 <d_print_comp_inner+0x1a0c>
   193e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   193ec:	29ff      	cmp	r1, #255	; 0xff
   193ee:	b2c5      	uxtb	r5, r0
   193f0:	d10f      	bne.n	19412 <d_print_comp_inner+0x293e>
   193f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   193fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193fe:	4620      	mov	r0, r4
   19400:	4798      	blx	r3
   19402:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19406:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1940a:	3301      	adds	r3, #1
   1940c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19410:	2100      	movs	r1, #0
   19412:	1c4b      	adds	r3, r1, #1
   19414:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19418:	464e      	mov	r6, r9
   1941a:	5465      	strb	r5, [r4, r1]
   1941c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19420:	f7ff b868 	b.w	184f4 <d_print_comp_inner+0x1a20>
   19424:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19428:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1942c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19430:	4620      	mov	r0, r4
   19432:	4798      	blx	r3
   19434:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19438:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1943c:	3301      	adds	r3, #1
   1943e:	4631      	mov	r1, r6
   19440:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19444:	f7ff bbe5 	b.w	18c12 <d_print_comp_inner+0x213e>
   19448:	4691      	mov	r9, r2
   1944a:	e5e7      	b.n	1901c <d_print_comp_inner+0x2548>
   1944c:	68b2      	ldr	r2, [r6, #8]
   1944e:	7812      	ldrb	r2, [r2, #0]
   19450:	2a29      	cmp	r2, #41	; 0x29
   19452:	bf08      	it	eq
   19454:	461e      	moveq	r6, r3
   19456:	e6a6      	b.n	191a6 <d_print_comp_inner+0x26d2>
   19458:	2500      	movs	r5, #0
   1945a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1945e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19462:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19466:	4620      	mov	r0, r4
   19468:	4798      	blx	r3
   1946a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1946e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19472:	3301      	adds	r3, #1
   19474:	4629      	mov	r1, r5
   19476:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1947a:	e5a9      	b.n	18fd0 <d_print_comp_inner+0x24fc>
   1947c:	2600      	movs	r6, #0
   1947e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19482:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19486:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1948a:	4620      	mov	r0, r4
   1948c:	4798      	blx	r3
   1948e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19492:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19496:	3301      	adds	r3, #1
   19498:	4631      	mov	r1, r6
   1949a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1949e:	f7fd bbc8 	b.w	16c32 <d_print_comp_inner+0x15e>
   194a2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   194a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194ae:	4620      	mov	r0, r4
   194b0:	4798      	blx	r3
   194b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194b6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   194ba:	3301      	adds	r3, #1
   194bc:	4631      	mov	r1, r6
   194be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194c2:	f7fd bba4 	b.w	16c0e <d_print_comp_inner+0x13a>
   194c6:	2600      	movs	r6, #0
   194c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194cc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   194d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194d4:	4620      	mov	r0, r4
   194d6:	4798      	blx	r3
   194d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194dc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   194e0:	3301      	adds	r3, #1
   194e2:	4631      	mov	r1, r6
   194e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194e8:	e57f      	b.n	18fea <d_print_comp_inner+0x2516>
   194ea:	6841      	ldr	r1, [r0, #4]
   194ec:	2900      	cmp	r1, #0
   194ee:	f43d abd0 	beq.w	16c92 <d_print_comp_inner+0x1be>
   194f2:	780b      	ldrb	r3, [r1, #0]
   194f4:	f7fe b9e1 	b.w	178ba <d_print_comp_inner+0xde6>
   194f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   194fc:	29ff      	cmp	r1, #255	; 0xff
   194fe:	d00d      	beq.n	1951c <d_print_comp_inner+0x2a48>
   19500:	232d      	movs	r3, #45	; 0x2d
   19502:	1c4a      	adds	r2, r1, #1
   19504:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19508:	5463      	strb	r3, [r4, r1]
   1950a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1950e:	e504      	b.n	18f1a <d_print_comp_inner+0x2446>
   19510:	2205      	movs	r2, #5
   19512:	4920      	ldr	r1, [pc, #128]	; (19594 <d_print_comp_inner+0x2ac0>)
   19514:	f7fb f80a 	bl	1452c <d_append_buffer>
   19518:	f7fd bbaa 	b.w	16c70 <d_print_comp_inner+0x19c>
   1951c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19520:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   19524:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19528:	4798      	blx	r3
   1952a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1952e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   19532:	3301      	adds	r3, #1
   19534:	4639      	mov	r1, r7
   19536:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1953a:	e7e1      	b.n	19500 <d_print_comp_inner+0x2a2c>
   1953c:	2500      	movs	r5, #0
   1953e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19542:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19546:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1954a:	4620      	mov	r0, r4
   1954c:	4798      	blx	r3
   1954e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19552:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19556:	3301      	adds	r3, #1
   19558:	4629      	mov	r1, r5
   1955a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1955e:	e512      	b.n	18f86 <d_print_comp_inner+0x24b2>
   19560:	2700      	movs	r7, #0
   19562:	f7ff b913 	b.w	1878c <d_print_comp_inner+0x1cb8>
   19566:	2500      	movs	r5, #0
   19568:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1956c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19570:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19574:	4620      	mov	r0, r4
   19576:	4798      	blx	r3
   19578:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1957c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19580:	3301      	adds	r3, #1
   19582:	4629      	mov	r1, r5
   19584:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19588:	f7fd bb6b 	b.w	16c62 <d_print_comp_inner+0x18e>
   1958c:	00022930 	.word	0x00022930
   19590:	000243a8 	.word	0x000243a8
   19594:	000243c0 	.word	0x000243c0
   19598:	4637      	mov	r7, r6
   1959a:	f7ff bbe6 	b.w	18d6a <d_print_comp_inner+0x2296>
   1959e:	2500      	movs	r5, #0
   195a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195ac:	4620      	mov	r0, r4
   195ae:	4798      	blx	r3
   195b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195b4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   195b8:	3301      	adds	r3, #1
   195ba:	4629      	mov	r1, r5
   195bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195c0:	e4d3      	b.n	18f6a <d_print_comp_inner+0x2496>
   195c2:	4671      	mov	r1, lr
   195c4:	6002      	str	r2, [r0, #0]
   195c6:	3104      	adds	r1, #4
   195c8:	4620      	mov	r0, r4
   195ca:	f7fb f9bf 	bl	1494c <d_lookup_template_argument.isra.6>
   195ce:	2800      	cmp	r0, #0
   195d0:	f47f ad3c 	bne.w	1904c <d_print_comp_inner+0x2578>
   195d4:	f7fd bb60 	b.w	16c98 <d_print_comp_inner+0x1c4>
   195d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195dc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   195e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195e4:	4620      	mov	r0, r4
   195e6:	4798      	blx	r3
   195e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195ec:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   195f0:	3301      	adds	r3, #1
   195f2:	4631      	mov	r1, r6
   195f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195f8:	f7fe bc02 	b.w	17e00 <d_print_comp_inner+0x132c>
   195fc:	2301      	movs	r3, #1
   195fe:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   19602:	f7fd bb35 	b.w	16c70 <d_print_comp_inner+0x19c>
   19606:	4618      	mov	r0, r3
   19608:	4407      	add	r7, r0
   1960a:	f7ff bb81 	b.w	18d10 <d_print_comp_inner+0x223c>
   1960e:	2000      	movs	r0, #0
   19610:	4407      	add	r7, r0
   19612:	f7ff bb7d 	b.w	18d10 <d_print_comp_inner+0x223c>
   19616:	4607      	mov	r7, r0
   19618:	f7ff bba7 	b.w	18d6a <d_print_comp_inner+0x2296>

0001961c <d_print_comp>:
   1961c:	b510      	push	{r4, lr}
   1961e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19622:	b082      	sub	sp, #8
   19624:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19628:	4604      	mov	r4, r0
   1962a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1962e:	f7fd fa51 	bl	16ad4 <d_print_comp_inner>
   19632:	9b01      	ldr	r3, [sp, #4]
   19634:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19638:	b002      	add	sp, #8
   1963a:	bd10      	pop	{r4, pc}

0001963c <d_print_mod>:
   1963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19640:	7813      	ldrb	r3, [r2, #0]
   19642:	3b03      	subs	r3, #3
   19644:	b082      	sub	sp, #8
   19646:	4615      	mov	r5, r2
   19648:	4604      	mov	r4, r0
   1964a:	4688      	mov	r8, r1
   1964c:	2b49      	cmp	r3, #73	; 0x49
   1964e:	f200 8223 	bhi.w	19a98 <d_print_mod+0x45c>
   19652:	e8df f013 	tbh	[pc, r3, lsl #1]
   19656:	01e7      	.short	0x01e7
   19658:	02210221 	.word	0x02210221
   1965c:	02210221 	.word	0x02210221
   19660:	02210221 	.word	0x02210221
   19664:	02210221 	.word	0x02210221
   19668:	02210221 	.word	0x02210221
   1966c:	02210221 	.word	0x02210221
   19670:	02210221 	.word	0x02210221
   19674:	02210221 	.word	0x02210221
   19678:	02210221 	.word	0x02210221
   1967c:	02210221 	.word	0x02210221
   19680:	01e90221 	.word	0x01e90221
   19684:	01a80182 	.word	0x01a80182
   19688:	018201e9 	.word	0x018201e9
   1968c:	01cd01a8 	.word	0x01cd01a8
   19690:	006f01da 	.word	0x006f01da
   19694:	009c008c 	.word	0x009c008c
   19698:	00cf00ab 	.word	0x00cf00ab
   1969c:	022100f4 	.word	0x022100f4
   196a0:	02210221 	.word	0x02210221
   196a4:	01190221 	.word	0x01190221
   196a8:	015c0221 	.word	0x015c0221
   196ac:	02210221 	.word	0x02210221
   196b0:	02210221 	.word	0x02210221
   196b4:	02210221 	.word	0x02210221
   196b8:	02210221 	.word	0x02210221
   196bc:	02210221 	.word	0x02210221
   196c0:	02210221 	.word	0x02210221
   196c4:	02210221 	.word	0x02210221
   196c8:	02210221 	.word	0x02210221
   196cc:	02210221 	.word	0x02210221
   196d0:	02210221 	.word	0x02210221
   196d4:	02210221 	.word	0x02210221
   196d8:	02210221 	.word	0x02210221
   196dc:	02210221 	.word	0x02210221
   196e0:	02210221 	.word	0x02210221
   196e4:	02210221 	.word	0x02210221
   196e8:	004a      	.short	0x004a
   196ea:	4dd3      	ldr	r5, [pc, #844]	; (19a38 <d_print_mod+0x3fc>)
   196ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   196f0:	f105 0711 	add.w	r7, r5, #17
   196f4:	f04f 0800 	mov.w	r8, #0
   196f8:	e008      	b.n	1970c <d_print_mod+0xd0>
   196fa:	460b      	mov	r3, r1
   196fc:	3101      	adds	r1, #1
   196fe:	42bd      	cmp	r5, r7
   19700:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19704:	54e6      	strb	r6, [r4, r3]
   19706:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1970a:	d02d      	beq.n	19768 <d_print_mod+0x12c>
   1970c:	29ff      	cmp	r1, #255	; 0xff
   1970e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19712:	d1f2      	bne.n	196fa <d_print_mod+0xbe>
   19714:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19718:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1971c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19720:	4620      	mov	r0, r4
   19722:	4798      	blx	r3
   19724:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19728:	3301      	adds	r3, #1
   1972a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1972e:	2101      	movs	r1, #1
   19730:	2300      	movs	r3, #0
   19732:	e7e4      	b.n	196fe <d_print_mod+0xc2>
   19734:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19738:	29ff      	cmp	r1, #255	; 0xff
   1973a:	f000 81f7 	beq.w	19b2c <d_print_mod+0x4f0>
   1973e:	1c4a      	adds	r2, r1, #1
   19740:	2320      	movs	r3, #32
   19742:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19746:	5463      	strb	r3, [r4, r1]
   19748:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1974c:	68aa      	ldr	r2, [r5, #8]
   1974e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19752:	9200      	str	r2, [sp, #0]
   19754:	4641      	mov	r1, r8
   19756:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1975a:	4620      	mov	r0, r4
   1975c:	9301      	str	r3, [sp, #4]
   1975e:	f7fd f9b9 	bl	16ad4 <d_print_comp_inner>
   19762:	9b01      	ldr	r3, [sp, #4]
   19764:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19768:	b002      	add	sp, #8
   1976a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1976e:	f011 0504 	ands.w	r5, r1, #4
   19772:	d1f9      	bne.n	19768 <d_print_mod+0x12c>
   19774:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19778:	2bff      	cmp	r3, #255	; 0xff
   1977a:	f000 821c 	beq.w	19bb6 <d_print_mod+0x57a>
   1977e:	222a      	movs	r2, #42	; 0x2a
   19780:	1c59      	adds	r1, r3, #1
   19782:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19786:	54e2      	strb	r2, [r4, r3]
   19788:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1978c:	e7ec      	b.n	19768 <d_print_mod+0x12c>
   1978e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19792:	29ff      	cmp	r1, #255	; 0xff
   19794:	f000 81b9 	beq.w	19b0a <d_print_mod+0x4ce>
   19798:	1c4a      	adds	r2, r1, #1
   1979a:	2326      	movs	r3, #38	; 0x26
   1979c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   197a0:	5463      	strb	r3, [r4, r1]
   197a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   197a6:	b002      	add	sp, #8
   197a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   197ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   197b0:	4da2      	ldr	r5, [pc, #648]	; (19a3c <d_print_mod+0x400>)
   197b2:	f04f 0800 	mov.w	r8, #0
   197b6:	1caf      	adds	r7, r5, #2
   197b8:	e008      	b.n	197cc <d_print_mod+0x190>
   197ba:	460b      	mov	r3, r1
   197bc:	3101      	adds	r1, #1
   197be:	42bd      	cmp	r5, r7
   197c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   197c4:	54e6      	strb	r6, [r4, r3]
   197c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   197ca:	d0cd      	beq.n	19768 <d_print_mod+0x12c>
   197cc:	29ff      	cmp	r1, #255	; 0xff
   197ce:	f815 6b01 	ldrb.w	r6, [r5], #1
   197d2:	d1f2      	bne.n	197ba <d_print_mod+0x17e>
   197d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197d8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   197dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197e0:	4620      	mov	r0, r4
   197e2:	4798      	blx	r3
   197e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197e8:	3301      	adds	r3, #1
   197ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197ee:	2101      	movs	r1, #1
   197f0:	2300      	movs	r3, #0
   197f2:	e7e4      	b.n	197be <d_print_mod+0x182>
   197f4:	4d92      	ldr	r5, [pc, #584]	; (19a40 <d_print_mod+0x404>)
   197f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   197fa:	f105 0708 	add.w	r7, r5, #8
   197fe:	f04f 0800 	mov.w	r8, #0
   19802:	e008      	b.n	19816 <d_print_mod+0x1da>
   19804:	460b      	mov	r3, r1
   19806:	3101      	adds	r1, #1
   19808:	42bd      	cmp	r5, r7
   1980a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1980e:	54e6      	strb	r6, [r4, r3]
   19810:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19814:	d0a8      	beq.n	19768 <d_print_mod+0x12c>
   19816:	29ff      	cmp	r1, #255	; 0xff
   19818:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1981c:	d1f2      	bne.n	19804 <d_print_mod+0x1c8>
   1981e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19822:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19826:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1982a:	4620      	mov	r0, r4
   1982c:	4798      	blx	r3
   1982e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19832:	3301      	adds	r3, #1
   19834:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19838:	2101      	movs	r1, #1
   1983a:	2300      	movs	r3, #0
   1983c:	e7e4      	b.n	19808 <d_print_mod+0x1cc>
   1983e:	4d81      	ldr	r5, [pc, #516]	; (19a44 <d_print_mod+0x408>)
   19840:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19844:	f105 070a 	add.w	r7, r5, #10
   19848:	f04f 0800 	mov.w	r8, #0
   1984c:	e008      	b.n	19860 <d_print_mod+0x224>
   1984e:	460b      	mov	r3, r1
   19850:	3101      	adds	r1, #1
   19852:	42bd      	cmp	r5, r7
   19854:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19858:	54e6      	strb	r6, [r4, r3]
   1985a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1985e:	d083      	beq.n	19768 <d_print_mod+0x12c>
   19860:	29ff      	cmp	r1, #255	; 0xff
   19862:	f815 6b01 	ldrb.w	r6, [r5], #1
   19866:	d1f2      	bne.n	1984e <d_print_mod+0x212>
   19868:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1986c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19870:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19874:	4620      	mov	r0, r4
   19876:	4798      	blx	r3
   19878:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1987c:	3301      	adds	r3, #1
   1987e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19882:	2101      	movs	r1, #1
   19884:	2300      	movs	r3, #0
   19886:	e7e4      	b.n	19852 <d_print_mod+0x216>
   19888:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   1988c:	2b28      	cmp	r3, #40	; 0x28
   1988e:	d00b      	beq.n	198a8 <d_print_mod+0x26c>
   19890:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19894:	2bff      	cmp	r3, #255	; 0xff
   19896:	f000 8126 	beq.w	19ae6 <d_print_mod+0x4aa>
   1989a:	2220      	movs	r2, #32
   1989c:	1c59      	adds	r1, r3, #1
   1989e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   198a2:	54e2      	strb	r2, [r4, r3]
   198a4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   198a8:	686a      	ldr	r2, [r5, #4]
   198aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   198ae:	4d66      	ldr	r5, [pc, #408]	; (19a48 <d_print_mod+0x40c>)
   198b0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   198b4:	4641      	mov	r1, r8
   198b6:	4620      	mov	r0, r4
   198b8:	9301      	str	r3, [sp, #4]
   198ba:	9200      	str	r2, [sp, #0]
   198bc:	f7fd f90a 	bl	16ad4 <d_print_comp_inner>
   198c0:	9b01      	ldr	r3, [sp, #4]
   198c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   198c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   198ca:	1cef      	adds	r7, r5, #3
   198cc:	f04f 0800 	mov.w	r8, #0
   198d0:	e009      	b.n	198e6 <d_print_mod+0x2aa>
   198d2:	460b      	mov	r3, r1
   198d4:	3101      	adds	r1, #1
   198d6:	42bd      	cmp	r5, r7
   198d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   198dc:	54e6      	strb	r6, [r4, r3]
   198de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   198e2:	f43f af41 	beq.w	19768 <d_print_mod+0x12c>
   198e6:	29ff      	cmp	r1, #255	; 0xff
   198e8:	f815 6b01 	ldrb.w	r6, [r5], #1
   198ec:	d1f1      	bne.n	198d2 <d_print_mod+0x296>
   198ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   198f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198fa:	4620      	mov	r0, r4
   198fc:	4798      	blx	r3
   198fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19902:	3301      	adds	r3, #1
   19904:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19908:	2101      	movs	r1, #1
   1990a:	2300      	movs	r3, #0
   1990c:	e7e3      	b.n	198d6 <d_print_mod+0x29a>
   1990e:	4e4f      	ldr	r6, [pc, #316]	; (19a4c <d_print_mod+0x410>)
   19910:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19914:	f106 0a0a 	add.w	sl, r6, #10
   19918:	f04f 0900 	mov.w	r9, #0
   1991c:	e009      	b.n	19932 <d_print_mod+0x2f6>
   1991e:	460b      	mov	r3, r1
   19920:	3101      	adds	r1, #1
   19922:	4556      	cmp	r6, sl
   19924:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19928:	54e7      	strb	r7, [r4, r3]
   1992a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1992e:	f000 80c0 	beq.w	19ab2 <d_print_mod+0x476>
   19932:	29ff      	cmp	r1, #255	; 0xff
   19934:	f816 7b01 	ldrb.w	r7, [r6], #1
   19938:	d1f1      	bne.n	1991e <d_print_mod+0x2e2>
   1993a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1993e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19942:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19946:	4620      	mov	r0, r4
   19948:	4798      	blx	r3
   1994a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1994e:	3301      	adds	r3, #1
   19950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19954:	2101      	movs	r1, #1
   19956:	2300      	movs	r3, #0
   19958:	e7e3      	b.n	19922 <d_print_mod+0x2e6>
   1995a:	4d3d      	ldr	r5, [pc, #244]	; (19a50 <d_print_mod+0x414>)
   1995c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19960:	f105 0709 	add.w	r7, r5, #9
   19964:	f04f 0800 	mov.w	r8, #0
   19968:	e009      	b.n	1997e <d_print_mod+0x342>
   1996a:	460b      	mov	r3, r1
   1996c:	3101      	adds	r1, #1
   1996e:	42bd      	cmp	r5, r7
   19970:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19974:	54e6      	strb	r6, [r4, r3]
   19976:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1997a:	f43f aef5 	beq.w	19768 <d_print_mod+0x12c>
   1997e:	29ff      	cmp	r1, #255	; 0xff
   19980:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19984:	d1f1      	bne.n	1996a <d_print_mod+0x32e>
   19986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1998a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1998e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19992:	4620      	mov	r0, r4
   19994:	4798      	blx	r3
   19996:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1999a:	3301      	adds	r3, #1
   1999c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199a0:	2101      	movs	r1, #1
   199a2:	2300      	movs	r3, #0
   199a4:	e7e3      	b.n	1996e <d_print_mod+0x332>
   199a6:	4d2b      	ldr	r5, [pc, #172]	; (19a54 <d_print_mod+0x418>)
   199a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199ac:	1daf      	adds	r7, r5, #6
   199ae:	f04f 0800 	mov.w	r8, #0
   199b2:	e009      	b.n	199c8 <d_print_mod+0x38c>
   199b4:	460b      	mov	r3, r1
   199b6:	3101      	adds	r1, #1
   199b8:	42bd      	cmp	r5, r7
   199ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199be:	54e6      	strb	r6, [r4, r3]
   199c0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   199c4:	f43f aed0 	beq.w	19768 <d_print_mod+0x12c>
   199c8:	29ff      	cmp	r1, #255	; 0xff
   199ca:	f815 6b01 	ldrb.w	r6, [r5], #1
   199ce:	d1f1      	bne.n	199b4 <d_print_mod+0x378>
   199d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   199d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199dc:	4620      	mov	r0, r4
   199de:	4798      	blx	r3
   199e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199e4:	3301      	adds	r3, #1
   199e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199ea:	2101      	movs	r1, #1
   199ec:	2300      	movs	r3, #0
   199ee:	e7e3      	b.n	199b8 <d_print_mod+0x37c>
   199f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   199f4:	2bff      	cmp	r3, #255	; 0xff
   199f6:	f000 80cc 	beq.w	19b92 <d_print_mod+0x556>
   199fa:	2220      	movs	r2, #32
   199fc:	1c59      	adds	r1, r3, #1
   199fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a02:	54e2      	strb	r2, [r4, r3]
   19a04:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19a08:	e6c3      	b.n	19792 <d_print_mod+0x156>
   19a0a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19a0e:	2bff      	cmp	r3, #255	; 0xff
   19a10:	f000 80ad 	beq.w	19b6e <d_print_mod+0x532>
   19a14:	2220      	movs	r2, #32
   19a16:	1c59      	adds	r1, r3, #1
   19a18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a1c:	54e2      	strb	r2, [r4, r3]
   19a1e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19a22:	e6c5      	b.n	197b0 <d_print_mod+0x174>
   19a24:	686a      	ldr	r2, [r5, #4]
   19a26:	e692      	b.n	1974e <d_print_mod+0x112>
   19a28:	4d0b      	ldr	r5, [pc, #44]	; (19a58 <d_print_mod+0x41c>)
   19a2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a2e:	f105 0709 	add.w	r7, r5, #9
   19a32:	f04f 0800 	mov.w	r8, #0
   19a36:	e01b      	b.n	19a70 <d_print_mod+0x434>
   19a38:	0002448b 	.word	0x0002448b
   19a3c:	000244a0 	.word	0x000244a0
   19a40:	000244a3 	.word	0x000244a3
   19a44:	000244b0 	.word	0x000244b0
   19a48:	000244bc 	.word	0x000244bc
   19a4c:	000244c0 	.word	0x000244c0
   19a50:	00024477 	.word	0x00024477
   19a54:	00024484 	.word	0x00024484
   19a58:	0002446b 	.word	0x0002446b
   19a5c:	460b      	mov	r3, r1
   19a5e:	3101      	adds	r1, #1
   19a60:	42af      	cmp	r7, r5
   19a62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a66:	54e6      	strb	r6, [r4, r3]
   19a68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a6c:	f43f ae7c 	beq.w	19768 <d_print_mod+0x12c>
   19a70:	29ff      	cmp	r1, #255	; 0xff
   19a72:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19a76:	d1f1      	bne.n	19a5c <d_print_mod+0x420>
   19a78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a84:	4620      	mov	r0, r4
   19a86:	4798      	blx	r3
   19a88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a8c:	3301      	adds	r3, #1
   19a8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a92:	2101      	movs	r1, #1
   19a94:	2300      	movs	r3, #0
   19a96:	e7e3      	b.n	19a60 <d_print_mod+0x424>
   19a98:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19a9c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19aa0:	462a      	mov	r2, r5
   19aa2:	9301      	str	r3, [sp, #4]
   19aa4:	9500      	str	r5, [sp, #0]
   19aa6:	f7fd f815 	bl	16ad4 <d_print_comp_inner>
   19aaa:	9b01      	ldr	r3, [sp, #4]
   19aac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19ab0:	e65a      	b.n	19768 <d_print_mod+0x12c>
   19ab2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19ab6:	686a      	ldr	r2, [r5, #4]
   19ab8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19abc:	4641      	mov	r1, r8
   19abe:	4620      	mov	r0, r4
   19ac0:	9301      	str	r3, [sp, #4]
   19ac2:	9200      	str	r2, [sp, #0]
   19ac4:	f7fd f806 	bl	16ad4 <d_print_comp_inner>
   19ac8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19acc:	9b01      	ldr	r3, [sp, #4]
   19ace:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19ad2:	29ff      	cmp	r1, #255	; 0xff
   19ad4:	d03a      	beq.n	19b4c <d_print_mod+0x510>
   19ad6:	1c4a      	adds	r2, r1, #1
   19ad8:	2329      	movs	r3, #41	; 0x29
   19ada:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19ade:	5463      	strb	r3, [r4, r1]
   19ae0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19ae4:	e640      	b.n	19768 <d_print_mod+0x12c>
   19ae6:	2600      	movs	r6, #0
   19ae8:	4619      	mov	r1, r3
   19aea:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19aee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19af2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19af6:	4798      	blx	r3
   19af8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19afc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19b00:	1c5a      	adds	r2, r3, #1
   19b02:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19b06:	4633      	mov	r3, r6
   19b08:	e6c7      	b.n	1989a <d_print_mod+0x25e>
   19b0a:	2500      	movs	r5, #0
   19b0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b14:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19b18:	4620      	mov	r0, r4
   19b1a:	4798      	blx	r3
   19b1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b20:	3301      	adds	r3, #1
   19b22:	4629      	mov	r1, r5
   19b24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b28:	2201      	movs	r2, #1
   19b2a:	e636      	b.n	1979a <d_print_mod+0x15e>
   19b2c:	2600      	movs	r6, #0
   19b2e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19b32:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19b36:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19b3a:	4798      	blx	r3
   19b3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b40:	3301      	adds	r3, #1
   19b42:	4631      	mov	r1, r6
   19b44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b48:	2201      	movs	r2, #1
   19b4a:	e5f9      	b.n	19740 <d_print_mod+0x104>
   19b4c:	2500      	movs	r5, #0
   19b4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b56:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19b5a:	4620      	mov	r0, r4
   19b5c:	4798      	blx	r3
   19b5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b62:	3301      	adds	r3, #1
   19b64:	4629      	mov	r1, r5
   19b66:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b6a:	2201      	movs	r2, #1
   19b6c:	e7b4      	b.n	19ad8 <d_print_mod+0x49c>
   19b6e:	2500      	movs	r5, #0
   19b70:	4619      	mov	r1, r3
   19b72:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19b76:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19b7a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19b7e:	4798      	blx	r3
   19b80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b84:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19b88:	1c5a      	adds	r2, r3, #1
   19b8a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19b8e:	462b      	mov	r3, r5
   19b90:	e740      	b.n	19a14 <d_print_mod+0x3d8>
   19b92:	2500      	movs	r5, #0
   19b94:	4619      	mov	r1, r3
   19b96:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19b9a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19b9e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19ba2:	4798      	blx	r3
   19ba4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ba8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19bac:	1c5a      	adds	r2, r3, #1
   19bae:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19bb2:	462b      	mov	r3, r5
   19bb4:	e721      	b.n	199fa <d_print_mod+0x3be>
   19bb6:	4619      	mov	r1, r3
   19bb8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19bbc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19bc0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19bc4:	4798      	blx	r3
   19bc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bca:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19bce:	1c5a      	adds	r2, r3, #1
   19bd0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19bd4:	462b      	mov	r3, r5
   19bd6:	e5d2      	b.n	1977e <d_print_mod+0x142>

00019bd8 <d_print_mod_list>:
   19bd8:	2a00      	cmp	r2, #0
   19bda:	f000 80a1 	beq.w	19d20 <d_print_mod_list+0x148>
   19bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be2:	461e      	mov	r6, r3
   19be4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19be8:	b089      	sub	sp, #36	; 0x24
   19bea:	4605      	mov	r5, r0
   19bec:	bb43      	cbnz	r3, 19c40 <d_print_mod_list+0x68>
   19bee:	460f      	mov	r7, r1
   19bf0:	4614      	mov	r4, r2
   19bf2:	f04f 0801 	mov.w	r8, #1
   19bf6:	e002      	b.n	19bfe <d_print_mod_list+0x26>
   19bf8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19bfc:	bb03      	cbnz	r3, 19c40 <d_print_mod_list+0x68>
   19bfe:	68a3      	ldr	r3, [r4, #8]
   19c00:	b9db      	cbnz	r3, 19c3a <d_print_mod_list+0x62>
   19c02:	6862      	ldr	r2, [r4, #4]
   19c04:	7813      	ldrb	r3, [r2, #0]
   19c06:	b92e      	cbnz	r6, 19c14 <d_print_mod_list+0x3c>
   19c08:	f1a3 011c 	sub.w	r1, r3, #28
   19c0c:	2904      	cmp	r1, #4
   19c0e:	d914      	bls.n	19c3a <d_print_mod_list+0x62>
   19c10:	2b4c      	cmp	r3, #76	; 0x4c
   19c12:	d012      	beq.n	19c3a <d_print_mod_list+0x62>
   19c14:	68e1      	ldr	r1, [r4, #12]
   19c16:	f8c4 8008 	str.w	r8, [r4, #8]
   19c1a:	2b29      	cmp	r3, #41	; 0x29
   19c1c:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19c20:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19c24:	d00f      	beq.n	19c46 <d_print_mod_list+0x6e>
   19c26:	2b2a      	cmp	r3, #42	; 0x2a
   19c28:	d018      	beq.n	19c5c <d_print_mod_list+0x84>
   19c2a:	2b02      	cmp	r3, #2
   19c2c:	d021      	beq.n	19c72 <d_print_mod_list+0x9a>
   19c2e:	4639      	mov	r1, r7
   19c30:	4628      	mov	r0, r5
   19c32:	f7ff fd03 	bl	1963c <d_print_mod>
   19c36:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19c3a:	6824      	ldr	r4, [r4, #0]
   19c3c:	2c00      	cmp	r4, #0
   19c3e:	d1db      	bne.n	19bf8 <d_print_mod_list+0x20>
   19c40:	b009      	add	sp, #36	; 0x24
   19c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c46:	6823      	ldr	r3, [r4, #0]
   19c48:	3208      	adds	r2, #8
   19c4a:	4639      	mov	r1, r7
   19c4c:	4628      	mov	r0, r5
   19c4e:	f000 f9d9 	bl	1a004 <d_print_function_type.isra.11>
   19c52:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19c56:	b009      	add	sp, #36	; 0x24
   19c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c5c:	6823      	ldr	r3, [r4, #0]
   19c5e:	3204      	adds	r2, #4
   19c60:	4639      	mov	r1, r7
   19c62:	4628      	mov	r0, r5
   19c64:	f000 f8f2 	bl	19e4c <d_print_array_type.isra.10>
   19c68:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19c6c:	b009      	add	sp, #36	; 0x24
   19c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c72:	2600      	movs	r6, #0
   19c74:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19c78:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19c7c:	6852      	ldr	r2, [r2, #4]
   19c7e:	4639      	mov	r1, r7
   19c80:	4628      	mov	r0, r5
   19c82:	f7ff fccb 	bl	1961c <d_print_comp>
   19c86:	f017 0a04 	ands.w	sl, r7, #4
   19c8a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19c8e:	d023      	beq.n	19cd8 <d_print_mod_list+0x100>
   19c90:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19c94:	29ff      	cmp	r1, #255	; 0xff
   19c96:	f000 80c1 	beq.w	19e1c <d_print_mod_list+0x244>
   19c9a:	1c4a      	adds	r2, r1, #1
   19c9c:	232e      	movs	r3, #46	; 0x2e
   19c9e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19ca2:	546b      	strb	r3, [r5, r1]
   19ca4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19ca8:	6863      	ldr	r3, [r4, #4]
   19caa:	689c      	ldr	r4, [r3, #8]
   19cac:	7823      	ldrb	r3, [r4, #0]
   19cae:	2b46      	cmp	r3, #70	; 0x46
   19cb0:	d037      	beq.n	19d22 <d_print_mod_list+0x14a>
   19cb2:	f1a3 021c 	sub.w	r2, r3, #28
   19cb6:	2a04      	cmp	r2, #4
   19cb8:	d90b      	bls.n	19cd2 <d_print_mod_list+0xfa>
   19cba:	2b4c      	cmp	r3, #76	; 0x4c
   19cbc:	d009      	beq.n	19cd2 <d_print_mod_list+0xfa>
   19cbe:	4622      	mov	r2, r4
   19cc0:	4639      	mov	r1, r7
   19cc2:	4628      	mov	r0, r5
   19cc4:	f7ff fcaa 	bl	1961c <d_print_comp>
   19cc8:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19ccc:	b009      	add	sp, #36	; 0x24
   19cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cd2:	6864      	ldr	r4, [r4, #4]
   19cd4:	7823      	ldrb	r3, [r4, #0]
   19cd6:	e7ec      	b.n	19cb2 <d_print_mod_list+0xda>
   19cd8:	4e58      	ldr	r6, [pc, #352]	; (19e3c <d_print_mod_list+0x264>)
   19cda:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19cde:	f106 0b02 	add.w	fp, r6, #2
   19ce2:	e009      	b.n	19cf8 <d_print_mod_list+0x120>
   19ce4:	460b      	mov	r3, r1
   19ce6:	3101      	adds	r1, #1
   19ce8:	455e      	cmp	r6, fp
   19cea:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19cee:	f805 8003 	strb.w	r8, [r5, r3]
   19cf2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19cf6:	d0d7      	beq.n	19ca8 <d_print_mod_list+0xd0>
   19cf8:	29ff      	cmp	r1, #255	; 0xff
   19cfa:	f816 8b01 	ldrb.w	r8, [r6], #1
   19cfe:	d1f1      	bne.n	19ce4 <d_print_mod_list+0x10c>
   19d00:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19d04:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19d08:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19d0c:	4628      	mov	r0, r5
   19d0e:	4798      	blx	r3
   19d10:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19d14:	3301      	adds	r3, #1
   19d16:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19d1a:	2101      	movs	r1, #1
   19d1c:	2300      	movs	r3, #0
   19d1e:	e7e3      	b.n	19ce8 <d_print_mod_list+0x110>
   19d20:	4770      	bx	lr
   19d22:	4e47      	ldr	r6, [pc, #284]	; (19e40 <d_print_mod_list+0x268>)
   19d24:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19d28:	f106 0a0d 	add.w	sl, r6, #13
   19d2c:	f04f 0b00 	mov.w	fp, #0
   19d30:	e009      	b.n	19d46 <d_print_mod_list+0x16e>
   19d32:	460b      	mov	r3, r1
   19d34:	3101      	adds	r1, #1
   19d36:	45b2      	cmp	sl, r6
   19d38:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19d3c:	f805 8003 	strb.w	r8, [r5, r3]
   19d40:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19d44:	d013      	beq.n	19d6e <d_print_mod_list+0x196>
   19d46:	29ff      	cmp	r1, #255	; 0xff
   19d48:	f816 8b01 	ldrb.w	r8, [r6], #1
   19d4c:	d1f1      	bne.n	19d32 <d_print_mod_list+0x15a>
   19d4e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19d52:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19d56:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19d5a:	4628      	mov	r0, r5
   19d5c:	4798      	blx	r3
   19d5e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19d62:	3301      	adds	r3, #1
   19d64:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19d68:	2101      	movs	r1, #1
   19d6a:	2300      	movs	r3, #0
   19d6c:	e7e3      	b.n	19d36 <d_print_mod_list+0x15e>
   19d6e:	68a2      	ldr	r2, [r4, #8]
   19d70:	4934      	ldr	r1, [pc, #208]	; (19e44 <d_print_mod_list+0x26c>)
   19d72:	3201      	adds	r2, #1
   19d74:	a801      	add	r0, sp, #4
   19d76:	f004 fd31 	bl	1e7dc <sprintf>
   19d7a:	a801      	add	r0, sp, #4
   19d7c:	f004 fee0 	bl	1eb40 <strlen>
   19d80:	b328      	cbz	r0, 19dce <d_print_mod_list+0x1f6>
   19d82:	ae01      	add	r6, sp, #4
   19d84:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19d88:	eb06 0a00 	add.w	sl, r6, r0
   19d8c:	f04f 0b00 	mov.w	fp, #0
   19d90:	e009      	b.n	19da6 <d_print_mod_list+0x1ce>
   19d92:	460b      	mov	r3, r1
   19d94:	3101      	adds	r1, #1
   19d96:	45b2      	cmp	sl, r6
   19d98:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19d9c:	f805 8003 	strb.w	r8, [r5, r3]
   19da0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19da4:	d015      	beq.n	19dd2 <d_print_mod_list+0x1fa>
   19da6:	29ff      	cmp	r1, #255	; 0xff
   19da8:	f816 8b01 	ldrb.w	r8, [r6], #1
   19dac:	d1f1      	bne.n	19d92 <d_print_mod_list+0x1ba>
   19dae:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19db2:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19db6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19dba:	4628      	mov	r0, r5
   19dbc:	4798      	blx	r3
   19dbe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19dc2:	3301      	adds	r3, #1
   19dc4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19dc8:	2101      	movs	r1, #1
   19dca:	2300      	movs	r3, #0
   19dcc:	e7e3      	b.n	19d96 <d_print_mod_list+0x1be>
   19dce:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19dd2:	4e1d      	ldr	r6, [pc, #116]	; (19e48 <d_print_mod_list+0x270>)
   19dd4:	f04f 0b00 	mov.w	fp, #0
   19dd8:	f106 0a03 	add.w	sl, r6, #3
   19ddc:	e00a      	b.n	19df4 <d_print_mod_list+0x21c>
   19dde:	460b      	mov	r3, r1
   19de0:	3101      	adds	r1, #1
   19de2:	45b2      	cmp	sl, r6
   19de4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19de8:	f805 8003 	strb.w	r8, [r5, r3]
   19dec:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19df0:	f43f af6f 	beq.w	19cd2 <d_print_mod_list+0xfa>
   19df4:	29ff      	cmp	r1, #255	; 0xff
   19df6:	f816 8b01 	ldrb.w	r8, [r6], #1
   19dfa:	d1f0      	bne.n	19dde <d_print_mod_list+0x206>
   19dfc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19e00:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19e04:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19e08:	4628      	mov	r0, r5
   19e0a:	4798      	blx	r3
   19e0c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19e10:	3301      	adds	r3, #1
   19e12:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19e16:	2101      	movs	r1, #1
   19e18:	2300      	movs	r3, #0
   19e1a:	e7e2      	b.n	19de2 <d_print_mod_list+0x20a>
   19e1c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19e20:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19e24:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   19e28:	4628      	mov	r0, r5
   19e2a:	4798      	blx	r3
   19e2c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19e30:	3301      	adds	r3, #1
   19e32:	4631      	mov	r1, r6
   19e34:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19e38:	2201      	movs	r2, #1
   19e3a:	e72f      	b.n	19c9c <d_print_mod_list+0xc4>
   19e3c:	000241f0 	.word	0x000241f0
   19e40:	000241f4 	.word	0x000241f4
   19e44:	000241a0 	.word	0x000241a0
   19e48:	00024204 	.word	0x00024204

00019e4c <d_print_array_type.isra.10>:
   19e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e50:	4604      	mov	r4, r0
   19e52:	460f      	mov	r7, r1
   19e54:	4690      	mov	r8, r2
   19e56:	b163      	cbz	r3, 19e72 <d_print_array_type.isra.10+0x26>
   19e58:	461e      	mov	r6, r3
   19e5a:	461a      	mov	r2, r3
   19e5c:	6893      	ldr	r3, [r2, #8]
   19e5e:	b393      	cbz	r3, 19ec6 <d_print_array_type.isra.10+0x7a>
   19e60:	6812      	ldr	r2, [r2, #0]
   19e62:	2a00      	cmp	r2, #0
   19e64:	d1fa      	bne.n	19e5c <d_print_array_type.isra.10+0x10>
   19e66:	4613      	mov	r3, r2
   19e68:	4639      	mov	r1, r7
   19e6a:	4632      	mov	r2, r6
   19e6c:	4620      	mov	r0, r4
   19e6e:	f7ff feb3 	bl	19bd8 <d_print_mod_list>
   19e72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19e76:	29ff      	cmp	r1, #255	; 0xff
   19e78:	f000 808d 	beq.w	19f96 <d_print_array_type.isra.10+0x14a>
   19e7c:	1c4b      	adds	r3, r1, #1
   19e7e:	2220      	movs	r2, #32
   19e80:	2bff      	cmp	r3, #255	; 0xff
   19e82:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19e86:	5462      	strb	r2, [r4, r1]
   19e88:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19e8c:	d068      	beq.n	19f60 <d_print_array_type.isra.10+0x114>
   19e8e:	225b      	movs	r2, #91	; 0x5b
   19e90:	1c59      	adds	r1, r3, #1
   19e92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e96:	54e2      	strb	r2, [r4, r3]
   19e98:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19e9c:	f8d8 2000 	ldr.w	r2, [r8]
   19ea0:	b12a      	cbz	r2, 19eae <d_print_array_type.isra.10+0x62>
   19ea2:	4639      	mov	r1, r7
   19ea4:	4620      	mov	r0, r4
   19ea6:	f7ff fbb9 	bl	1961c <d_print_comp>
   19eaa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19eae:	29ff      	cmp	r1, #255	; 0xff
   19eb0:	f000 8082 	beq.w	19fb8 <d_print_array_type.isra.10+0x16c>
   19eb4:	1c4a      	adds	r2, r1, #1
   19eb6:	235d      	movs	r3, #93	; 0x5d
   19eb8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19ebc:	5463      	strb	r3, [r4, r1]
   19ebe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ec6:	6852      	ldr	r2, [r2, #4]
   19ec8:	7812      	ldrb	r2, [r2, #0]
   19eca:	2a2a      	cmp	r2, #42	; 0x2a
   19ecc:	d03f      	beq.n	19f4e <d_print_array_type.isra.10+0x102>
   19ece:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a000 <d_print_array_type.isra.10+0x1b4>
   19ed2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19ed6:	461d      	mov	r5, r3
   19ed8:	f109 0b02 	add.w	fp, r9, #2
   19edc:	e00a      	b.n	19ef4 <d_print_array_type.isra.10+0xa8>
   19ede:	460b      	mov	r3, r1
   19ee0:	45cb      	cmp	fp, r9
   19ee2:	f101 0101 	add.w	r1, r1, #1
   19ee6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19eea:	f804 a003 	strb.w	sl, [r4, r3]
   19eee:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   19ef2:	d01a      	beq.n	19f2a <d_print_array_type.isra.10+0xde>
   19ef4:	29ff      	cmp	r1, #255	; 0xff
   19ef6:	f819 ab01 	ldrb.w	sl, [r9], #1
   19efa:	d1f0      	bne.n	19ede <d_print_array_type.isra.10+0x92>
   19efc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f00:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19f04:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f08:	4620      	mov	r0, r4
   19f0a:	4798      	blx	r3
   19f0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f10:	3301      	adds	r3, #1
   19f12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f16:	2300      	movs	r3, #0
   19f18:	2101      	movs	r1, #1
   19f1a:	45cb      	cmp	fp, r9
   19f1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f20:	f804 a003 	strb.w	sl, [r4, r3]
   19f24:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   19f28:	d1e4      	bne.n	19ef4 <d_print_array_type.isra.10+0xa8>
   19f2a:	2300      	movs	r3, #0
   19f2c:	4632      	mov	r2, r6
   19f2e:	4639      	mov	r1, r7
   19f30:	4620      	mov	r0, r4
   19f32:	f7ff fe51 	bl	19bd8 <d_print_mod_list>
   19f36:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19f3a:	2bff      	cmp	r3, #255	; 0xff
   19f3c:	d04d      	beq.n	19fda <d_print_array_type.isra.10+0x18e>
   19f3e:	1c59      	adds	r1, r3, #1
   19f40:	2229      	movs	r2, #41	; 0x29
   19f42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f46:	54e2      	strb	r2, [r4, r3]
   19f48:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19f4c:	e793      	b.n	19e76 <d_print_array_type.isra.10+0x2a>
   19f4e:	4632      	mov	r2, r6
   19f50:	4639      	mov	r1, r7
   19f52:	4620      	mov	r0, r4
   19f54:	f7ff fe40 	bl	19bd8 <d_print_mod_list>
   19f58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19f5c:	2bff      	cmp	r3, #255	; 0xff
   19f5e:	d196      	bne.n	19e8e <d_print_array_type.isra.10+0x42>
   19f60:	2200      	movs	r2, #0
   19f62:	4619      	mov	r1, r3
   19f64:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   19f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f70:	4620      	mov	r0, r4
   19f72:	4798      	blx	r3
   19f74:	235b      	movs	r3, #91	; 0x5b
   19f76:	7023      	strb	r3, [r4, #0]
   19f78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19f7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f80:	f8d8 2000 	ldr.w	r2, [r8]
   19f84:	3301      	adds	r3, #1
   19f86:	2101      	movs	r1, #1
   19f88:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f90:	2a00      	cmp	r2, #0
   19f92:	d186      	bne.n	19ea2 <d_print_array_type.isra.10+0x56>
   19f94:	e78e      	b.n	19eb4 <d_print_array_type.isra.10+0x68>
   19f96:	2500      	movs	r5, #0
   19f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f9c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19fa0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fa4:	4620      	mov	r0, r4
   19fa6:	4798      	blx	r3
   19fa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fac:	3301      	adds	r3, #1
   19fae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19fb2:	4629      	mov	r1, r5
   19fb4:	2301      	movs	r3, #1
   19fb6:	e762      	b.n	19e7e <d_print_array_type.isra.10+0x32>
   19fb8:	2500      	movs	r5, #0
   19fba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19fbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19fc6:	4620      	mov	r0, r4
   19fc8:	4798      	blx	r3
   19fca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fce:	3301      	adds	r3, #1
   19fd0:	4629      	mov	r1, r5
   19fd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19fd6:	2201      	movs	r2, #1
   19fd8:	e76d      	b.n	19eb6 <d_print_array_type.isra.10+0x6a>
   19fda:	2500      	movs	r5, #0
   19fdc:	4619      	mov	r1, r3
   19fde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fe2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19fe6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19fea:	4620      	mov	r0, r4
   19fec:	4798      	blx	r3
   19fee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ff2:	1c5a      	adds	r2, r3, #1
   19ff4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19ff8:	462b      	mov	r3, r5
   19ffa:	2101      	movs	r1, #1
   19ffc:	e7a0      	b.n	19f40 <d_print_array_type.isra.10+0xf4>
   19ffe:	bf00      	nop
   1a000:	000243e8 	.word	0x000243e8

0001a004 <d_print_function_type.isra.11>:
   1a004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a008:	4604      	mov	r4, r0
   1a00a:	b083      	sub	sp, #12
   1a00c:	460e      	mov	r6, r1
   1a00e:	4617      	mov	r7, r2
   1a010:	461d      	mov	r5, r3
   1a012:	b34b      	cbz	r3, 1a068 <d_print_function_type.isra.11+0x64>
   1a014:	689b      	ldr	r3, [r3, #8]
   1a016:	bb3b      	cbnz	r3, 1a068 <d_print_function_type.isra.11+0x64>
   1a018:	462a      	mov	r2, r5
   1a01a:	2001      	movs	r0, #1
   1a01c:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a1e8 <d_print_function_type.isra.11+0x1e4>
   1a020:	e006      	b.n	1a030 <d_print_function_type.isra.11+0x2c>
   1a022:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a026:	d15a      	bne.n	1a0de <d_print_function_type.isra.11+0xda>
   1a028:	6812      	ldr	r2, [r2, #0]
   1a02a:	b1ea      	cbz	r2, 1a068 <d_print_function_type.isra.11+0x64>
   1a02c:	6893      	ldr	r3, [r2, #8]
   1a02e:	b9db      	cbnz	r3, 1a068 <d_print_function_type.isra.11+0x64>
   1a030:	6853      	ldr	r3, [r2, #4]
   1a032:	781b      	ldrb	r3, [r3, #0]
   1a034:	3b19      	subs	r3, #25
   1a036:	b2db      	uxtb	r3, r3
   1a038:	2b12      	cmp	r3, #18
   1a03a:	fa00 f103 	lsl.w	r1, r0, r3
   1a03e:	d8f3      	bhi.n	1a028 <d_print_function_type.isra.11+0x24>
   1a040:	ea11 0f0e 	tst.w	r1, lr
   1a044:	d0ed      	beq.n	1a022 <d_print_function_type.isra.11+0x1e>
   1a046:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a04a:	2b20      	cmp	r3, #32
   1a04c:	d04d      	beq.n	1a0ea <d_print_function_type.isra.11+0xe6>
   1a04e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a052:	2bff      	cmp	r3, #255	; 0xff
   1a054:	f000 80b4 	beq.w	1a1c0 <d_print_function_type.isra.11+0x1bc>
   1a058:	1c59      	adds	r1, r3, #1
   1a05a:	2220      	movs	r2, #32
   1a05c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a060:	54e2      	strb	r2, [r4, r3]
   1a062:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a066:	e042      	b.n	1a0ee <d_print_function_type.isra.11+0xea>
   1a068:	2300      	movs	r3, #0
   1a06a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a06e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a072:	4631      	mov	r1, r6
   1a074:	462a      	mov	r2, r5
   1a076:	4620      	mov	r0, r4
   1a078:	f7ff fdae 	bl	19bd8 <d_print_mod_list>
   1a07c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a080:	29ff      	cmp	r1, #255	; 0xff
   1a082:	d056      	beq.n	1a132 <d_print_function_type.isra.11+0x12e>
   1a084:	1c4b      	adds	r3, r1, #1
   1a086:	2228      	movs	r2, #40	; 0x28
   1a088:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a08c:	5462      	strb	r2, [r4, r1]
   1a08e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a092:	6838      	ldr	r0, [r7, #0]
   1a094:	b178      	cbz	r0, 1a0b6 <d_print_function_type.isra.11+0xb2>
   1a096:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a09a:	9000      	str	r0, [sp, #0]
   1a09c:	4602      	mov	r2, r0
   1a09e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a0a2:	4631      	mov	r1, r6
   1a0a4:	4620      	mov	r0, r4
   1a0a6:	9301      	str	r3, [sp, #4]
   1a0a8:	f7fc fd14 	bl	16ad4 <d_print_comp_inner>
   1a0ac:	9a01      	ldr	r2, [sp, #4]
   1a0ae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a0b2:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a0b6:	2bff      	cmp	r3, #255	; 0xff
   1a0b8:	d04d      	beq.n	1a156 <d_print_function_type.isra.11+0x152>
   1a0ba:	1c5a      	adds	r2, r3, #1
   1a0bc:	2029      	movs	r0, #41	; 0x29
   1a0be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a0c2:	4631      	mov	r1, r6
   1a0c4:	54e0      	strb	r0, [r4, r3]
   1a0c6:	462a      	mov	r2, r5
   1a0c8:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a0cc:	2301      	movs	r3, #1
   1a0ce:	4620      	mov	r0, r4
   1a0d0:	f7ff fd82 	bl	19bd8 <d_print_mod_list>
   1a0d4:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a0d8:	b003      	add	sp, #12
   1a0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a0de:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a0e2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a0e6:	2a28      	cmp	r2, #40	; 0x28
   1a0e8:	d1af      	bne.n	1a04a <d_print_function_type.isra.11+0x46>
   1a0ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a0ee:	29ff      	cmp	r1, #255	; 0xff
   1a0f0:	d054      	beq.n	1a19c <d_print_function_type.isra.11+0x198>
   1a0f2:	1c4a      	adds	r2, r1, #1
   1a0f4:	2328      	movs	r3, #40	; 0x28
   1a0f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a0fa:	5463      	strb	r3, [r4, r1]
   1a0fc:	f04f 0900 	mov.w	r9, #0
   1a100:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a104:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a108:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a10c:	464b      	mov	r3, r9
   1a10e:	462a      	mov	r2, r5
   1a110:	4631      	mov	r1, r6
   1a112:	4620      	mov	r0, r4
   1a114:	f7ff fd60 	bl	19bd8 <d_print_mod_list>
   1a118:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a11c:	2bff      	cmp	r3, #255	; 0xff
   1a11e:	d02c      	beq.n	1a17a <d_print_function_type.isra.11+0x176>
   1a120:	1c59      	adds	r1, r3, #1
   1a122:	2229      	movs	r2, #41	; 0x29
   1a124:	29ff      	cmp	r1, #255	; 0xff
   1a126:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a12a:	54e2      	strb	r2, [r4, r3]
   1a12c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a130:	d1a8      	bne.n	1a084 <d_print_function_type.isra.11+0x80>
   1a132:	f04f 0900 	mov.w	r9, #0
   1a136:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a13a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a13e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a142:	4620      	mov	r0, r4
   1a144:	4798      	blx	r3
   1a146:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a14a:	3301      	adds	r3, #1
   1a14c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a150:	4649      	mov	r1, r9
   1a152:	2301      	movs	r3, #1
   1a154:	e797      	b.n	1a086 <d_print_function_type.isra.11+0x82>
   1a156:	2700      	movs	r7, #0
   1a158:	4619      	mov	r1, r3
   1a15a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a15e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a162:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a166:	4620      	mov	r0, r4
   1a168:	4798      	blx	r3
   1a16a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a16e:	1c5a      	adds	r2, r3, #1
   1a170:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a174:	463b      	mov	r3, r7
   1a176:	2201      	movs	r2, #1
   1a178:	e7a0      	b.n	1a0bc <d_print_function_type.isra.11+0xb8>
   1a17a:	4619      	mov	r1, r3
   1a17c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a184:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a188:	4620      	mov	r0, r4
   1a18a:	4798      	blx	r3
   1a18c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a190:	1c5a      	adds	r2, r3, #1
   1a192:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a196:	464b      	mov	r3, r9
   1a198:	2101      	movs	r1, #1
   1a19a:	e7c2      	b.n	1a122 <d_print_function_type.isra.11+0x11e>
   1a19c:	f04f 0800 	mov.w	r8, #0
   1a1a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a1ac:	4620      	mov	r0, r4
   1a1ae:	4798      	blx	r3
   1a1b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1b4:	3301      	adds	r3, #1
   1a1b6:	4641      	mov	r1, r8
   1a1b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1bc:	2201      	movs	r2, #1
   1a1be:	e799      	b.n	1a0f4 <d_print_function_type.isra.11+0xf0>
   1a1c0:	f04f 0800 	mov.w	r8, #0
   1a1c4:	4619      	mov	r1, r3
   1a1c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a1d2:	4620      	mov	r0, r4
   1a1d4:	4798      	blx	r3
   1a1d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1da:	1c5a      	adds	r2, r3, #1
   1a1dc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a1e0:	4643      	mov	r3, r8
   1a1e2:	2101      	movs	r1, #1
   1a1e4:	e739      	b.n	1a05a <d_print_function_type.isra.11+0x56>
   1a1e6:	bf00      	nop
   1a1e8:	00043107 	.word	0x00043107

0001a1ec <d_print_expr_op>:
   1a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1f0:	7815      	ldrb	r5, [r2, #0]
   1a1f2:	2d31      	cmp	r5, #49	; 0x31
   1a1f4:	b082      	sub	sp, #8
   1a1f6:	4613      	mov	r3, r2
   1a1f8:	4604      	mov	r4, r0
   1a1fa:	d00d      	beq.n	1a218 <d_print_expr_op+0x2c>
   1a1fc:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a200:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a204:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a208:	f7fc fc64 	bl	16ad4 <d_print_comp_inner>
   1a20c:	9b01      	ldr	r3, [sp, #4]
   1a20e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a212:	b002      	add	sp, #8
   1a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a218:	6853      	ldr	r3, [r2, #4]
   1a21a:	689f      	ldr	r7, [r3, #8]
   1a21c:	685d      	ldr	r5, [r3, #4]
   1a21e:	2f00      	cmp	r7, #0
   1a220:	d0f7      	beq.n	1a212 <d_print_expr_op+0x26>
   1a222:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a226:	442f      	add	r7, r5
   1a228:	f04f 0800 	mov.w	r8, #0
   1a22c:	e008      	b.n	1a240 <d_print_expr_op+0x54>
   1a22e:	460b      	mov	r3, r1
   1a230:	3101      	adds	r1, #1
   1a232:	42bd      	cmp	r5, r7
   1a234:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a238:	54e6      	strb	r6, [r4, r3]
   1a23a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a23e:	d0e8      	beq.n	1a212 <d_print_expr_op+0x26>
   1a240:	29ff      	cmp	r1, #255	; 0xff
   1a242:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a246:	d1f2      	bne.n	1a22e <d_print_expr_op+0x42>
   1a248:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a24c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a250:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a254:	4620      	mov	r0, r4
   1a256:	4798      	blx	r3
   1a258:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a25c:	3301      	adds	r3, #1
   1a25e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a262:	2101      	movs	r1, #1
   1a264:	2300      	movs	r3, #0
   1a266:	e7e4      	b.n	1a232 <d_print_expr_op+0x46>

0001a268 <d_print_subexpr>:
   1a268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a26a:	7813      	ldrb	r3, [r2, #0]
   1a26c:	2b01      	cmp	r3, #1
   1a26e:	b083      	sub	sp, #12
   1a270:	4615      	mov	r5, r2
   1a272:	460e      	mov	r6, r1
   1a274:	4604      	mov	r4, r0
   1a276:	d929      	bls.n	1a2cc <d_print_subexpr+0x64>
   1a278:	2b30      	cmp	r3, #48	; 0x30
   1a27a:	d027      	beq.n	1a2cc <d_print_subexpr+0x64>
   1a27c:	2b06      	cmp	r3, #6
   1a27e:	d025      	beq.n	1a2cc <d_print_subexpr+0x64>
   1a280:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a284:	29ff      	cmp	r1, #255	; 0xff
   1a286:	d031      	beq.n	1a2ec <d_print_subexpr+0x84>
   1a288:	1c4a      	adds	r2, r1, #1
   1a28a:	2328      	movs	r3, #40	; 0x28
   1a28c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a290:	5463      	strb	r3, [r4, r1]
   1a292:	462a      	mov	r2, r5
   1a294:	4631      	mov	r1, r6
   1a296:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a29a:	4620      	mov	r0, r4
   1a29c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a2a0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a2a4:	9301      	str	r3, [sp, #4]
   1a2a6:	9500      	str	r5, [sp, #0]
   1a2a8:	f7fc fc14 	bl	16ad4 <d_print_comp_inner>
   1a2ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a2b0:	9b01      	ldr	r3, [sp, #4]
   1a2b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a2b6:	29ff      	cmp	r1, #255	; 0xff
   1a2b8:	d028      	beq.n	1a30c <d_print_subexpr+0xa4>
   1a2ba:	1c4a      	adds	r2, r1, #1
   1a2bc:	2329      	movs	r3, #41	; 0x29
   1a2be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a2c2:	5463      	strb	r3, [r4, r1]
   1a2c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a2c8:	b003      	add	sp, #12
   1a2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a2cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a2d0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a2d4:	4631      	mov	r1, r6
   1a2d6:	462a      	mov	r2, r5
   1a2d8:	4620      	mov	r0, r4
   1a2da:	9301      	str	r3, [sp, #4]
   1a2dc:	9500      	str	r5, [sp, #0]
   1a2de:	f7fc fbf9 	bl	16ad4 <d_print_comp_inner>
   1a2e2:	9b01      	ldr	r3, [sp, #4]
   1a2e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a2e8:	b003      	add	sp, #12
   1a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a2ec:	2700      	movs	r7, #0
   1a2ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2f6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a2fa:	4798      	blx	r3
   1a2fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a300:	3301      	adds	r3, #1
   1a302:	4639      	mov	r1, r7
   1a304:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a308:	2201      	movs	r2, #1
   1a30a:	e7be      	b.n	1a28a <d_print_subexpr+0x22>
   1a30c:	2500      	movs	r5, #0
   1a30e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a312:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a316:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a31a:	4620      	mov	r0, r4
   1a31c:	4798      	blx	r3
   1a31e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a322:	3301      	adds	r3, #1
   1a324:	4629      	mov	r1, r5
   1a326:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a32a:	2201      	movs	r2, #1
   1a32c:	e7c6      	b.n	1a2bc <d_print_subexpr+0x54>
   1a32e:	bf00      	nop

0001a330 <d_maybe_print_fold_expression.isra.15>:
   1a330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a334:	6852      	ldr	r2, [r2, #4]
   1a336:	6812      	ldr	r2, [r2, #0]
   1a338:	7815      	ldrb	r5, [r2, #0]
   1a33a:	2d66      	cmp	r5, #102	; 0x66
   1a33c:	d002      	beq.n	1a344 <d_maybe_print_fold_expression.isra.15+0x14>
   1a33e:	2000      	movs	r0, #0
   1a340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a344:	681b      	ldr	r3, [r3, #0]
   1a346:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a34a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a34e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a352:	f899 3000 	ldrb.w	r3, [r9]
   1a356:	2b3b      	cmp	r3, #59	; 0x3b
   1a358:	f04f 33ff 	mov.w	r3, #4294967295
   1a35c:	bf04      	itt	eq
   1a35e:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a362:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a366:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a36a:	7853      	ldrb	r3, [r2, #1]
   1a36c:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a370:	bf18      	it	ne
   1a372:	2500      	movne	r5, #0
   1a374:	460e      	mov	r6, r1
   1a376:	4604      	mov	r4, r0
   1a378:	2b26      	cmp	r3, #38	; 0x26
   1a37a:	d82b      	bhi.n	1a3d4 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a37c:	e8df f003 	tbb	[pc, r3]
   1a380:	2a2a2a90 	.word	0x2a2a2a90
   1a384:	2a902a2a 	.word	0x2a902a2a
   1a388:	2a2a2a2a 	.word	0x2a2a2a2a
   1a38c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a390:	2a2a2a2a 	.word	0x2a2a2a2a
   1a394:	2a2a2a2a 	.word	0x2a2a2a2a
   1a398:	2a2a2a2a 	.word	0x2a2a2a2a
   1a39c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a3a0:	2a2a2a6a 	.word	0x2a2a2a6a
   1a3a4:	2a2a      	.short	0x2a2a
   1a3a6:	2f          	.byte	0x2f
   1a3a7:	00          	.byte	0x00
   1a3a8:	4642      	mov	r2, r8
   1a3aa:	4631      	mov	r1, r6
   1a3ac:	4620      	mov	r0, r4
   1a3ae:	f7ff ff1d 	bl	1a1ec <d_print_expr_op>
   1a3b2:	464a      	mov	r2, r9
   1a3b4:	4631      	mov	r1, r6
   1a3b6:	4620      	mov	r0, r4
   1a3b8:	f7ff ff56 	bl	1a268 <d_print_subexpr>
   1a3bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a3c0:	29ff      	cmp	r1, #255	; 0xff
   1a3c2:	f000 80b2 	beq.w	1a52a <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a3c6:	1c4a      	adds	r2, r1, #1
   1a3c8:	2329      	movs	r3, #41	; 0x29
   1a3ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a3ce:	5463      	strb	r3, [r4, r1]
   1a3d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a3d4:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a3d8:	2001      	movs	r0, #1
   1a3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a3e2:	29ff      	cmp	r1, #255	; 0xff
   1a3e4:	f000 80c5 	beq.w	1a572 <d_maybe_print_fold_expression.isra.15+0x242>
   1a3e8:	1c4a      	adds	r2, r1, #1
   1a3ea:	2328      	movs	r3, #40	; 0x28
   1a3ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a3f0:	4620      	mov	r0, r4
   1a3f2:	5463      	strb	r3, [r4, r1]
   1a3f4:	464a      	mov	r2, r9
   1a3f6:	4631      	mov	r1, r6
   1a3f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a3fc:	4d65      	ldr	r5, [pc, #404]	; (1a594 <d_maybe_print_fold_expression.isra.15+0x264>)
   1a3fe:	f7ff ff33 	bl	1a268 <d_print_subexpr>
   1a402:	4642      	mov	r2, r8
   1a404:	4631      	mov	r1, r6
   1a406:	4620      	mov	r0, r4
   1a408:	f7ff fef0 	bl	1a1ec <d_print_expr_op>
   1a40c:	f105 0904 	add.w	r9, r5, #4
   1a410:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a414:	f04f 0800 	mov.w	r8, #0
   1a418:	e008      	b.n	1a42c <d_maybe_print_fold_expression.isra.15+0xfc>
   1a41a:	460b      	mov	r3, r1
   1a41c:	3101      	adds	r1, #1
   1a41e:	45a9      	cmp	r9, r5
   1a420:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a424:	54e6      	strb	r6, [r4, r3]
   1a426:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a42a:	d0d3      	beq.n	1a3d4 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a42c:	29ff      	cmp	r1, #255	; 0xff
   1a42e:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a432:	d1f2      	bne.n	1a41a <d_maybe_print_fold_expression.isra.15+0xea>
   1a434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a438:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a43c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a440:	4620      	mov	r0, r4
   1a442:	4798      	blx	r3
   1a444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a448:	3301      	adds	r3, #1
   1a44a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a44e:	2101      	movs	r1, #1
   1a450:	2300      	movs	r3, #0
   1a452:	e7e4      	b.n	1a41e <d_maybe_print_fold_expression.isra.15+0xee>
   1a454:	4d50      	ldr	r5, [pc, #320]	; (1a598 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a456:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a45a:	f105 0b04 	add.w	fp, r5, #4
   1a45e:	e009      	b.n	1a474 <d_maybe_print_fold_expression.isra.15+0x144>
   1a460:	460b      	mov	r3, r1
   1a462:	3101      	adds	r1, #1
   1a464:	455d      	cmp	r5, fp
   1a466:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a46a:	f804 a003 	strb.w	sl, [r4, r3]
   1a46e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a472:	d099      	beq.n	1a3a8 <d_maybe_print_fold_expression.isra.15+0x78>
   1a474:	29ff      	cmp	r1, #255	; 0xff
   1a476:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a47a:	d1f1      	bne.n	1a460 <d_maybe_print_fold_expression.isra.15+0x130>
   1a47c:	f04f 0300 	mov.w	r3, #0
   1a480:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a488:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a48c:	4620      	mov	r0, r4
   1a48e:	4798      	blx	r3
   1a490:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a494:	3301      	adds	r3, #1
   1a496:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a49a:	2101      	movs	r1, #1
   1a49c:	2300      	movs	r3, #0
   1a49e:	e7e1      	b.n	1a464 <d_maybe_print_fold_expression.isra.15+0x134>
   1a4a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a4a4:	2bff      	cmp	r3, #255	; 0xff
   1a4a6:	d051      	beq.n	1a54c <d_maybe_print_fold_expression.isra.15+0x21c>
   1a4a8:	1c59      	adds	r1, r3, #1
   1a4aa:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a4ae:	464a      	mov	r2, r9
   1a4b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4b4:	4620      	mov	r0, r4
   1a4b6:	f804 e003 	strb.w	lr, [r4, r3]
   1a4ba:	4631      	mov	r1, r6
   1a4bc:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a4c0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a59c <d_maybe_print_fold_expression.isra.15+0x26c>
   1a4c4:	f7ff fed0 	bl	1a268 <d_print_subexpr>
   1a4c8:	4631      	mov	r1, r6
   1a4ca:	4642      	mov	r2, r8
   1a4cc:	4620      	mov	r0, r4
   1a4ce:	f7ff fe8d 	bl	1a1ec <d_print_expr_op>
   1a4d2:	f109 0b03 	add.w	fp, r9, #3
   1a4d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a4da:	e009      	b.n	1a4f0 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a4dc:	460b      	mov	r3, r1
   1a4de:	3101      	adds	r1, #1
   1a4e0:	45cb      	cmp	fp, r9
   1a4e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4e6:	f804 a003 	strb.w	sl, [r4, r3]
   1a4ea:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a4ee:	d015      	beq.n	1a51c <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a4f0:	29ff      	cmp	r1, #255	; 0xff
   1a4f2:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a4f6:	d1f1      	bne.n	1a4dc <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a4f8:	f04f 0300 	mov.w	r3, #0
   1a4fc:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a500:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a504:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a508:	4620      	mov	r0, r4
   1a50a:	4798      	blx	r3
   1a50c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a510:	3301      	adds	r3, #1
   1a512:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a516:	2101      	movs	r1, #1
   1a518:	2300      	movs	r3, #0
   1a51a:	e7e1      	b.n	1a4e0 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a51c:	4642      	mov	r2, r8
   1a51e:	4631      	mov	r1, r6
   1a520:	4620      	mov	r0, r4
   1a522:	f7ff fe63 	bl	1a1ec <d_print_expr_op>
   1a526:	462a      	mov	r2, r5
   1a528:	e744      	b.n	1a3b4 <d_maybe_print_fold_expression.isra.15+0x84>
   1a52a:	2500      	movs	r5, #0
   1a52c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a530:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a534:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a538:	4620      	mov	r0, r4
   1a53a:	4798      	blx	r3
   1a53c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a540:	3301      	adds	r3, #1
   1a542:	4629      	mov	r1, r5
   1a544:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a548:	2201      	movs	r2, #1
   1a54a:	e73d      	b.n	1a3c8 <d_maybe_print_fold_expression.isra.15+0x98>
   1a54c:	f04f 0a00 	mov.w	sl, #0
   1a550:	4619      	mov	r1, r3
   1a552:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a556:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a55a:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a55e:	4798      	blx	r3
   1a560:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a564:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a568:	1c5a      	adds	r2, r3, #1
   1a56a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a56e:	4653      	mov	r3, sl
   1a570:	e79a      	b.n	1a4a8 <d_maybe_print_fold_expression.isra.15+0x178>
   1a572:	2500      	movs	r5, #0
   1a574:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a578:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a57c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a580:	4798      	blx	r3
   1a582:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a586:	3301      	adds	r3, #1
   1a588:	4629      	mov	r1, r5
   1a58a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a58e:	2201      	movs	r2, #1
   1a590:	e72b      	b.n	1a3ea <d_maybe_print_fold_expression.isra.15+0xba>
   1a592:	bf00      	nop
   1a594:	000244d4 	.word	0x000244d4
   1a598:	000244cc 	.word	0x000244cc
   1a59c:	00022930 	.word	0x00022930

0001a5a0 <d_demangle_callback.constprop.17>:
   1a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a4:	b0e7      	sub	sp, #412	; 0x19c
   1a5a6:	f890 9000 	ldrb.w	r9, [r0]
   1a5aa:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a5ae:	af00      	add	r7, sp, #0
   1a5b0:	4605      	mov	r5, r0
   1a5b2:	4688      	mov	r8, r1
   1a5b4:	4616      	mov	r6, r2
   1a5b6:	f000 80f1 	beq.w	1a79c <d_demangle_callback.constprop.17+0x1fc>
   1a5ba:	2208      	movs	r2, #8
   1a5bc:	49bd      	ldr	r1, [pc, #756]	; (1a8b4 <d_demangle_callback.constprop.17+0x314>)
   1a5be:	4628      	mov	r0, r5
   1a5c0:	f004 fb2c 	bl	1ec1c <strncmp>
   1a5c4:	b948      	cbnz	r0, 1a5da <d_demangle_callback.constprop.17+0x3a>
   1a5c6:	7a2b      	ldrb	r3, [r5, #8]
   1a5c8:	2b2e      	cmp	r3, #46	; 0x2e
   1a5ca:	f000 80d6 	beq.w	1a77a <d_demangle_callback.constprop.17+0x1da>
   1a5ce:	2b5f      	cmp	r3, #95	; 0x5f
   1a5d0:	f000 80d3 	beq.w	1a77a <d_demangle_callback.constprop.17+0x1da>
   1a5d4:	2b24      	cmp	r3, #36	; 0x24
   1a5d6:	f000 80d0 	beq.w	1a77a <d_demangle_callback.constprop.17+0x1da>
   1a5da:	f04f 0a00 	mov.w	sl, #0
   1a5de:	4628      	mov	r0, r5
   1a5e0:	f004 faae 	bl	1eb40 <strlen>
   1a5e4:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a5e8:	0083      	lsls	r3, r0, #2
   1a5ea:	eb03 020b 	add.w	r2, r3, fp
   1a5ee:	0092      	lsls	r2, r2, #2
   1a5f0:	3208      	adds	r2, #8
   1a5f2:	330a      	adds	r3, #10
   1a5f4:	ebad 0d02 	sub.w	sp, sp, r2
   1a5f8:	f023 0307 	bic.w	r3, r3, #7
   1a5fc:	2400      	movs	r4, #0
   1a5fe:	466a      	mov	r2, sp
   1a600:	1829      	adds	r1, r5, r0
   1a602:	ebad 0d03 	sub.w	sp, sp, r3
   1a606:	f1ba 0f01 	cmp.w	sl, #1
   1a60a:	f04f 0311 	mov.w	r3, #17
   1a60e:	627a      	str	r2, [r7, #36]	; 0x24
   1a610:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a614:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a618:	617d      	str	r5, [r7, #20]
   1a61a:	623d      	str	r5, [r7, #32]
   1a61c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a61e:	61b9      	str	r1, [r7, #24]
   1a620:	61fb      	str	r3, [r7, #28]
   1a622:	62bc      	str	r4, [r7, #40]	; 0x28
   1a624:	637c      	str	r4, [r7, #52]	; 0x34
   1a626:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a628:	643c      	str	r4, [r7, #64]	; 0x40
   1a62a:	647c      	str	r4, [r7, #68]	; 0x44
   1a62c:	64bc      	str	r4, [r7, #72]	; 0x48
   1a62e:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a630:	f000 80bb 	beq.w	1a7aa <d_demangle_callback.constprop.17+0x20a>
   1a634:	f0c0 80cf 	bcc.w	1a7d6 <d_demangle_callback.constprop.17+0x236>
   1a638:	7aeb      	ldrb	r3, [r5, #11]
   1a63a:	f1ba 0f02 	cmp.w	sl, #2
   1a63e:	bf18      	it	ne
   1a640:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a644:	f105 0a0b 	add.w	sl, r5, #11
   1a648:	bf08      	it	eq
   1a64a:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a64e:	2b5f      	cmp	r3, #95	; 0x5f
   1a650:	f8c7 a020 	str.w	sl, [r7, #32]
   1a654:	f000 80b2 	beq.w	1a7bc <d_demangle_callback.constprop.17+0x21c>
   1a658:	4650      	mov	r0, sl
   1a65a:	607a      	str	r2, [r7, #4]
   1a65c:	f004 fa70 	bl	1eb40 <strlen>
   1a660:	f1bb 0f00 	cmp.w	fp, #0
   1a664:	687a      	ldr	r2, [r7, #4]
   1a666:	f340 80bf 	ble.w	1a7e8 <d_demangle_callback.constprop.17+0x248>
   1a66a:	2301      	movs	r3, #1
   1a66c:	62bb      	str	r3, [r7, #40]	; 0x28
   1a66e:	2800      	cmp	r0, #0
   1a670:	f000 80ba 	beq.w	1a7e8 <d_demangle_callback.constprop.17+0x248>
   1a674:	2300      	movs	r3, #0
   1a676:	f8c2 a004 	str.w	sl, [r2, #4]
   1a67a:	6090      	str	r0, [r2, #8]
   1a67c:	7013      	strb	r3, [r2, #0]
   1a67e:	4649      	mov	r1, r9
   1a680:	2300      	movs	r3, #0
   1a682:	f107 0014 	add.w	r0, r7, #20
   1a686:	f7f9 fe31 	bl	142ec <d_make_comp>
   1a68a:	6a3c      	ldr	r4, [r7, #32]
   1a68c:	4605      	mov	r5, r0
   1a68e:	4620      	mov	r0, r4
   1a690:	f004 fa56 	bl	1eb40 <strlen>
   1a694:	1823      	adds	r3, r4, r0
   1a696:	623b      	str	r3, [r7, #32]
   1a698:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a69c:	f1b9 0f00 	cmp.w	r9, #0
   1a6a0:	f040 8086 	bne.w	1a7b0 <d_demangle_callback.constprop.17+0x210>
   1a6a4:	2d00      	cmp	r5, #0
   1a6a6:	f000 8083 	beq.w	1a7b0 <d_demangle_callback.constprop.17+0x210>
   1a6aa:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a6ae:	462a      	mov	r2, r5
   1a6b0:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a6b4:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a6b8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a6bc:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a6c0:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a6c4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a6c8:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a6cc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a6d0:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a6d4:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a6d8:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a6dc:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a6e0:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a6e4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a6e8:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a6ec:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a6f0:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a6f4:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a6f8:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a6fc:	f7f9 fec4 	bl	14488 <d_count_templates_scopes>
   1a700:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a704:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a708:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a70c:	613b      	str	r3, [r7, #16]
   1a70e:	00d0      	lsls	r0, r2, #3
   1a710:	fb01 f102 	mul.w	r1, r1, r2
   1a714:	3008      	adds	r0, #8
   1a716:	46e8      	mov	r8, sp
   1a718:	00ca      	lsls	r2, r1, #3
   1a71a:	ebad 0d00 	sub.w	sp, sp, r0
   1a71e:	4668      	mov	r0, sp
   1a720:	3208      	adds	r2, #8
   1a722:	ebad 0d02 	sub.w	sp, sp, r2
   1a726:	f107 060c 	add.w	r6, r7, #12
   1a72a:	462a      	mov	r2, r5
   1a72c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a730:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a734:	4620      	mov	r0, r4
   1a736:	2111      	movs	r1, #17
   1a738:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a73c:	60fd      	str	r5, [r7, #12]
   1a73e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a742:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a746:	f7fc f9c5 	bl	16ad4 <d_print_comp_inner>
   1a74a:	693b      	ldr	r3, [r7, #16]
   1a74c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a750:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a754:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a758:	f804 9001 	strb.w	r9, [r4, r1]
   1a75c:	4620      	mov	r0, r4
   1a75e:	46c5      	mov	sp, r8
   1a760:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a764:	4798      	blx	r3
   1a766:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1a76a:	fab0 f080 	clz	r0, r0
   1a76e:	0940      	lsrs	r0, r0, #5
   1a770:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a774:	46bd      	mov	sp, r7
   1a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a77a:	7a6b      	ldrb	r3, [r5, #9]
   1a77c:	2b44      	cmp	r3, #68	; 0x44
   1a77e:	d002      	beq.n	1a786 <d_demangle_callback.constprop.17+0x1e6>
   1a780:	2b49      	cmp	r3, #73	; 0x49
   1a782:	f47f af2a 	bne.w	1a5da <d_demangle_callback.constprop.17+0x3a>
   1a786:	7aaa      	ldrb	r2, [r5, #10]
   1a788:	2a5f      	cmp	r2, #95	; 0x5f
   1a78a:	f47f af26 	bne.w	1a5da <d_demangle_callback.constprop.17+0x3a>
   1a78e:	2b49      	cmp	r3, #73	; 0x49
   1a790:	bf14      	ite	ne
   1a792:	f04f 0a03 	movne.w	sl, #3
   1a796:	f04f 0a02 	moveq.w	sl, #2
   1a79a:	e720      	b.n	1a5de <d_demangle_callback.constprop.17+0x3e>
   1a79c:	7843      	ldrb	r3, [r0, #1]
   1a79e:	2b5a      	cmp	r3, #90	; 0x5a
   1a7a0:	f47f af0b 	bne.w	1a5ba <d_demangle_callback.constprop.17+0x1a>
   1a7a4:	f04f 0a01 	mov.w	sl, #1
   1a7a8:	e719      	b.n	1a5de <d_demangle_callback.constprop.17+0x3e>
   1a7aa:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a7ae:	d01d      	beq.n	1a7ec <d_demangle_callback.constprop.17+0x24c>
   1a7b0:	2000      	movs	r0, #0
   1a7b2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a7b6:	46bd      	mov	sp, r7
   1a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7bc:	7b2b      	ldrb	r3, [r5, #12]
   1a7be:	2b5a      	cmp	r3, #90	; 0x5a
   1a7c0:	f47f af4a 	bne.w	1a658 <d_demangle_callback.constprop.17+0xb8>
   1a7c4:	350d      	adds	r5, #13
   1a7c6:	4621      	mov	r1, r4
   1a7c8:	f107 0014 	add.w	r0, r7, #20
   1a7cc:	623d      	str	r5, [r7, #32]
   1a7ce:	f7fb fe35 	bl	1643c <d_encoding>
   1a7d2:	4602      	mov	r2, r0
   1a7d4:	e753      	b.n	1a67e <d_demangle_callback.constprop.17+0xde>
   1a7d6:	f107 0014 	add.w	r0, r7, #20
   1a7da:	f7fb f817 	bl	1580c <d_type>
   1a7de:	6a3b      	ldr	r3, [r7, #32]
   1a7e0:	4605      	mov	r5, r0
   1a7e2:	f893 9000 	ldrb.w	r9, [r3]
   1a7e6:	e759      	b.n	1a69c <d_demangle_callback.constprop.17+0xfc>
   1a7e8:	2200      	movs	r2, #0
   1a7ea:	e748      	b.n	1a67e <d_demangle_callback.constprop.17+0xde>
   1a7ec:	786b      	ldrb	r3, [r5, #1]
   1a7ee:	2b5a      	cmp	r3, #90	; 0x5a
   1a7f0:	d1de      	bne.n	1a7b0 <d_demangle_callback.constprop.17+0x210>
   1a7f2:	3502      	adds	r5, #2
   1a7f4:	4651      	mov	r1, sl
   1a7f6:	f107 0014 	add.w	r0, r7, #20
   1a7fa:	623d      	str	r5, [r7, #32]
   1a7fc:	f7fb fe1e 	bl	1643c <d_encoding>
   1a800:	69fb      	ldr	r3, [r7, #28]
   1a802:	07db      	lsls	r3, r3, #31
   1a804:	4605      	mov	r5, r0
   1a806:	d551      	bpl.n	1a8ac <d_demangle_callback.constprop.17+0x30c>
   1a808:	6a38      	ldr	r0, [r7, #32]
   1a80a:	f890 9000 	ldrb.w	r9, [r0]
   1a80e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1a812:	f47f af43 	bne.w	1a69c <d_demangle_callback.constprop.17+0xfc>
   1a816:	7843      	ldrb	r3, [r0, #1]
   1a818:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1a81c:	2a19      	cmp	r2, #25
   1a81e:	d939      	bls.n	1a894 <d_demangle_callback.constprop.17+0x2f4>
   1a820:	2b5f      	cmp	r3, #95	; 0x5f
   1a822:	d037      	beq.n	1a894 <d_demangle_callback.constprop.17+0x2f4>
   1a824:	3b30      	subs	r3, #48	; 0x30
   1a826:	2b09      	cmp	r3, #9
   1a828:	d840      	bhi.n	1a8ac <d_demangle_callback.constprop.17+0x30c>
   1a82a:	7803      	ldrb	r3, [r0, #0]
   1a82c:	4602      	mov	r2, r0
   1a82e:	2b2e      	cmp	r3, #46	; 0x2e
   1a830:	d112      	bne.n	1a858 <d_demangle_callback.constprop.17+0x2b8>
   1a832:	7853      	ldrb	r3, [r2, #1]
   1a834:	3b30      	subs	r3, #48	; 0x30
   1a836:	2b09      	cmp	r3, #9
   1a838:	d80e      	bhi.n	1a858 <d_demangle_callback.constprop.17+0x2b8>
   1a83a:	7893      	ldrb	r3, [r2, #2]
   1a83c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a840:	2909      	cmp	r1, #9
   1a842:	f102 0202 	add.w	r2, r2, #2
   1a846:	d8f2      	bhi.n	1a82e <d_demangle_callback.constprop.17+0x28e>
   1a848:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1a84c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a850:	2909      	cmp	r1, #9
   1a852:	d9f9      	bls.n	1a848 <d_demangle_callback.constprop.17+0x2a8>
   1a854:	2b2e      	cmp	r3, #46	; 0x2e
   1a856:	d0ec      	beq.n	1a832 <d_demangle_callback.constprop.17+0x292>
   1a858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a85c:	623a      	str	r2, [r7, #32]
   1a85e:	4299      	cmp	r1, r3
   1a860:	da16      	bge.n	1a890 <d_demangle_callback.constprop.17+0x2f0>
   1a862:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1a866:	1c4b      	adds	r3, r1, #1
   1a868:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1a86c:	62bb      	str	r3, [r7, #40]	; 0x28
   1a86e:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1a872:	d00d      	beq.n	1a890 <d_demangle_callback.constprop.17+0x2f0>
   1a874:	1a12      	subs	r2, r2, r0
   1a876:	d00b      	beq.n	1a890 <d_demangle_callback.constprop.17+0x2f0>
   1a878:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1a87c:	6058      	str	r0, [r3, #4]
   1a87e:	609a      	str	r2, [r3, #8]
   1a880:	462a      	mov	r2, r5
   1a882:	214d      	movs	r1, #77	; 0x4d
   1a884:	f107 0014 	add.w	r0, r7, #20
   1a888:	f7f9 fd30 	bl	142ec <d_make_comp>
   1a88c:	4605      	mov	r5, r0
   1a88e:	e7bb      	b.n	1a808 <d_demangle_callback.constprop.17+0x268>
   1a890:	2300      	movs	r3, #0
   1a892:	e7f5      	b.n	1a880 <d_demangle_callback.constprop.17+0x2e0>
   1a894:	1c81      	adds	r1, r0, #2
   1a896:	460a      	mov	r2, r1
   1a898:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a89c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1a8a0:	f1be 0f19 	cmp.w	lr, #25
   1a8a4:	d9f7      	bls.n	1a896 <d_demangle_callback.constprop.17+0x2f6>
   1a8a6:	2b5f      	cmp	r3, #95	; 0x5f
   1a8a8:	d0f5      	beq.n	1a896 <d_demangle_callback.constprop.17+0x2f6>
   1a8aa:	e7c0      	b.n	1a82e <d_demangle_callback.constprop.17+0x28e>
   1a8ac:	6a3b      	ldr	r3, [r7, #32]
   1a8ae:	f893 9000 	ldrb.w	r9, [r3]
   1a8b2:	e6f3      	b.n	1a69c <d_demangle_callback.constprop.17+0xfc>
   1a8b4:	0002417c 	.word	0x0002417c

0001a8b8 <__cxa_demangle>:
   1a8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8bc:	b084      	sub	sp, #16
   1a8be:	b378      	cbz	r0, 1a920 <__cxa_demangle+0x68>
   1a8c0:	b101      	cbz	r1, 1a8c4 <__cxa_demangle+0xc>
   1a8c2:	b36a      	cbz	r2, 1a920 <__cxa_demangle+0x68>
   1a8c4:	2400      	movs	r4, #0
   1a8c6:	4616      	mov	r6, r2
   1a8c8:	460d      	mov	r5, r1
   1a8ca:	466a      	mov	r2, sp
   1a8cc:	4927      	ldr	r1, [pc, #156]	; (1a96c <__cxa_demangle+0xb4>)
   1a8ce:	9400      	str	r4, [sp, #0]
   1a8d0:	461f      	mov	r7, r3
   1a8d2:	9401      	str	r4, [sp, #4]
   1a8d4:	9402      	str	r4, [sp, #8]
   1a8d6:	9403      	str	r4, [sp, #12]
   1a8d8:	f7ff fe62 	bl	1a5a0 <d_demangle_callback.constprop.17>
   1a8dc:	2800      	cmp	r0, #0
   1a8de:	d03f      	beq.n	1a960 <__cxa_demangle+0xa8>
   1a8e0:	9b03      	ldr	r3, [sp, #12]
   1a8e2:	b1d3      	cbz	r3, 1a91a <__cxa_demangle+0x62>
   1a8e4:	f04f 0801 	mov.w	r8, #1
   1a8e8:	9c00      	ldr	r4, [sp, #0]
   1a8ea:	b35c      	cbz	r4, 1a944 <__cxa_demangle+0x8c>
   1a8ec:	b33d      	cbz	r5, 1a93e <__cxa_demangle+0x86>
   1a8ee:	4620      	mov	r0, r4
   1a8f0:	f004 f926 	bl	1eb40 <strlen>
   1a8f4:	6833      	ldr	r3, [r6, #0]
   1a8f6:	4298      	cmp	r0, r3
   1a8f8:	d21b      	bcs.n	1a932 <__cxa_demangle+0x7a>
   1a8fa:	1c42      	adds	r2, r0, #1
   1a8fc:	4621      	mov	r1, r4
   1a8fe:	4628      	mov	r0, r5
   1a900:	f003 fbce 	bl	1e0a0 <memcpy>
   1a904:	4620      	mov	r0, r4
   1a906:	f003 f879 	bl	1d9fc <free>
   1a90a:	462c      	mov	r4, r5
   1a90c:	b10f      	cbz	r7, 1a912 <__cxa_demangle+0x5a>
   1a90e:	2300      	movs	r3, #0
   1a910:	603b      	str	r3, [r7, #0]
   1a912:	4620      	mov	r0, r4
   1a914:	b004      	add	sp, #16
   1a916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a91a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1a91e:	e7e3      	b.n	1a8e8 <__cxa_demangle+0x30>
   1a920:	b113      	cbz	r3, 1a928 <__cxa_demangle+0x70>
   1a922:	f06f 0202 	mvn.w	r2, #2
   1a926:	601a      	str	r2, [r3, #0]
   1a928:	2400      	movs	r4, #0
   1a92a:	4620      	mov	r0, r4
   1a92c:	b004      	add	sp, #16
   1a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a932:	4628      	mov	r0, r5
   1a934:	f003 f862 	bl	1d9fc <free>
   1a938:	f8c6 8000 	str.w	r8, [r6]
   1a93c:	e7e6      	b.n	1a90c <__cxa_demangle+0x54>
   1a93e:	2e00      	cmp	r6, #0
   1a940:	d1fa      	bne.n	1a938 <__cxa_demangle+0x80>
   1a942:	e7e3      	b.n	1a90c <__cxa_demangle+0x54>
   1a944:	2f00      	cmp	r7, #0
   1a946:	d0ef      	beq.n	1a928 <__cxa_demangle+0x70>
   1a948:	f1b8 0f01 	cmp.w	r8, #1
   1a94c:	d004      	beq.n	1a958 <__cxa_demangle+0xa0>
   1a94e:	f06f 0301 	mvn.w	r3, #1
   1a952:	603b      	str	r3, [r7, #0]
   1a954:	2400      	movs	r4, #0
   1a956:	e7dc      	b.n	1a912 <__cxa_demangle+0x5a>
   1a958:	f04f 33ff 	mov.w	r3, #4294967295
   1a95c:	603b      	str	r3, [r7, #0]
   1a95e:	e7d8      	b.n	1a912 <__cxa_demangle+0x5a>
   1a960:	9800      	ldr	r0, [sp, #0]
   1a962:	f003 f84b 	bl	1d9fc <free>
   1a966:	2f00      	cmp	r7, #0
   1a968:	d1f1      	bne.n	1a94e <__cxa_demangle+0x96>
   1a96a:	e7dd      	b.n	1a928 <__cxa_demangle+0x70>
   1a96c:	00014a11 	.word	0x00014a11

0001a970 <__gcclibcxx_demangle_callback>:
   1a970:	b160      	cbz	r0, 1a98c <__gcclibcxx_demangle_callback+0x1c>
   1a972:	b508      	push	{r3, lr}
   1a974:	b139      	cbz	r1, 1a986 <__gcclibcxx_demangle_callback+0x16>
   1a976:	f7ff fe13 	bl	1a5a0 <d_demangle_callback.constprop.17>
   1a97a:	2800      	cmp	r0, #0
   1a97c:	bf0c      	ite	eq
   1a97e:	f06f 0001 	mvneq.w	r0, #1
   1a982:	2000      	movne	r0, #0
   1a984:	bd08      	pop	{r3, pc}
   1a986:	f06f 0002 	mvn.w	r0, #2
   1a98a:	bd08      	pop	{r3, pc}
   1a98c:	f06f 0002 	mvn.w	r0, #2
   1a990:	4770      	bx	lr
   1a992:	bf00      	nop

0001a994 <__cxa_current_exception_type>:
   1a994:	b508      	push	{r3, lr}
   1a996:	f7f9 f8f5 	bl	13b84 <__cxa_get_globals>
   1a99a:	6800      	ldr	r0, [r0, #0]
   1a99c:	b130      	cbz	r0, 1a9ac <__cxa_current_exception_type+0x18>
   1a99e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1a9a2:	2b01      	cmp	r3, #1
   1a9a4:	bf04      	itt	eq
   1a9a6:	6800      	ldreq	r0, [r0, #0]
   1a9a8:	3878      	subeq	r0, #120	; 0x78
   1a9aa:	6800      	ldr	r0, [r0, #0]
   1a9ac:	bd08      	pop	{r3, pc}
   1a9ae:	bf00      	nop

0001a9b0 <powf>:
   1a9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9b2:	ed2d 8b04 	vpush	{d8-d9}
   1a9b6:	4db3      	ldr	r5, [pc, #716]	; (1ac84 <powf+0x2d4>)
   1a9b8:	b08b      	sub	sp, #44	; 0x2c
   1a9ba:	eef0 8a40 	vmov.f32	s17, s0
   1a9be:	eeb0 8a60 	vmov.f32	s16, s1
   1a9c2:	f000 f9df 	bl	1ad84 <__ieee754_powf>
   1a9c6:	f995 4000 	ldrsb.w	r4, [r5]
   1a9ca:	1c63      	adds	r3, r4, #1
   1a9cc:	eeb0 9a40 	vmov.f32	s18, s0
   1a9d0:	d02e      	beq.n	1aa30 <powf+0x80>
   1a9d2:	eeb4 8a48 	vcmp.f32	s16, s16
   1a9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a9da:	d629      	bvs.n	1aa30 <powf+0x80>
   1a9dc:	eef4 8a68 	vcmp.f32	s17, s17
   1a9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a9e4:	f180 80a2 	bvs.w	1ab2c <powf+0x17c>
   1a9e8:	eef5 8a40 	vcmp.f32	s17, #0.0
   1a9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a9f0:	d124      	bne.n	1aa3c <powf+0x8c>
   1a9f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a9fa:	d159      	bne.n	1aab0 <powf+0x100>
   1a9fc:	2301      	movs	r3, #1
   1a9fe:	4aa2      	ldr	r2, [pc, #648]	; (1ac88 <powf+0x2d8>)
   1aa00:	9300      	str	r3, [sp, #0]
   1aa02:	ee18 0a90 	vmov	r0, s17
   1aa06:	2300      	movs	r3, #0
   1aa08:	9201      	str	r2, [sp, #4]
   1aa0a:	9308      	str	r3, [sp, #32]
   1aa0c:	f000 ff3a 	bl	1b884 <__aeabi_f2d>
   1aa10:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aa14:	ee18 0a10 	vmov	r0, s16
   1aa18:	f000 ff34 	bl	1b884 <__aeabi_f2d>
   1aa1c:	2200      	movs	r2, #0
   1aa1e:	2300      	movs	r3, #0
   1aa20:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aa24:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aa28:	2c00      	cmp	r4, #0
   1aa2a:	d067      	beq.n	1aafc <powf+0x14c>
   1aa2c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1aa30:	eeb0 0a49 	vmov.f32	s0, s18
   1aa34:	b00b      	add	sp, #44	; 0x2c
   1aa36:	ecbd 8b04 	vpop	{d8-d9}
   1aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa3c:	f000 fd3a 	bl	1b4b4 <finitef>
   1aa40:	4604      	mov	r4, r0
   1aa42:	2800      	cmp	r0, #0
   1aa44:	f000 8091 	beq.w	1ab6a <powf+0x1ba>
   1aa48:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1aa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa50:	d1ee      	bne.n	1aa30 <powf+0x80>
   1aa52:	eeb0 0a68 	vmov.f32	s0, s17
   1aa56:	f000 fd2d 	bl	1b4b4 <finitef>
   1aa5a:	2800      	cmp	r0, #0
   1aa5c:	d0e8      	beq.n	1aa30 <powf+0x80>
   1aa5e:	eeb0 0a48 	vmov.f32	s0, s16
   1aa62:	f000 fd27 	bl	1b4b4 <finitef>
   1aa66:	2800      	cmp	r0, #0
   1aa68:	d0e2      	beq.n	1aa30 <powf+0x80>
   1aa6a:	2304      	movs	r3, #4
   1aa6c:	4a86      	ldr	r2, [pc, #536]	; (1ac88 <powf+0x2d8>)
   1aa6e:	9300      	str	r3, [sp, #0]
   1aa70:	ee18 0a90 	vmov	r0, s17
   1aa74:	2300      	movs	r3, #0
   1aa76:	9308      	str	r3, [sp, #32]
   1aa78:	9201      	str	r2, [sp, #4]
   1aa7a:	f000 ff03 	bl	1b884 <__aeabi_f2d>
   1aa7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aa82:	ee18 0a10 	vmov	r0, s16
   1aa86:	f000 fefd 	bl	1b884 <__aeabi_f2d>
   1aa8a:	2600      	movs	r6, #0
   1aa8c:	2700      	movs	r7, #0
   1aa8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aa92:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1aa96:	f995 3000 	ldrsb.w	r3, [r5]
   1aa9a:	2b02      	cmp	r3, #2
   1aa9c:	d003      	beq.n	1aaa6 <powf+0xf6>
   1aa9e:	4668      	mov	r0, sp
   1aaa0:	f000 fc6c 	bl	1b37c <matherr>
   1aaa4:	bb80      	cbnz	r0, 1ab08 <powf+0x158>
   1aaa6:	f002 fd15 	bl	1d4d4 <__errno>
   1aaaa:	2322      	movs	r3, #34	; 0x22
   1aaac:	6003      	str	r3, [r0, #0]
   1aaae:	e02b      	b.n	1ab08 <powf+0x158>
   1aab0:	eeb0 0a48 	vmov.f32	s0, s16
   1aab4:	f000 fcfe 	bl	1b4b4 <finitef>
   1aab8:	2800      	cmp	r0, #0
   1aaba:	d0b9      	beq.n	1aa30 <powf+0x80>
   1aabc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1aac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aac4:	d5b4      	bpl.n	1aa30 <powf+0x80>
   1aac6:	2301      	movs	r3, #1
   1aac8:	4a6f      	ldr	r2, [pc, #444]	; (1ac88 <powf+0x2d8>)
   1aaca:	9300      	str	r3, [sp, #0]
   1aacc:	ee18 0a90 	vmov	r0, s17
   1aad0:	2300      	movs	r3, #0
   1aad2:	9308      	str	r3, [sp, #32]
   1aad4:	9201      	str	r2, [sp, #4]
   1aad6:	f000 fed5 	bl	1b884 <__aeabi_f2d>
   1aada:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aade:	ee18 0a10 	vmov	r0, s16
   1aae2:	f000 fecf 	bl	1b884 <__aeabi_f2d>
   1aae6:	f995 3000 	ldrsb.w	r3, [r5]
   1aaea:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aaee:	2b00      	cmp	r3, #0
   1aaf0:	f040 809b 	bne.w	1ac2a <powf+0x27a>
   1aaf4:	2200      	movs	r2, #0
   1aaf6:	2300      	movs	r3, #0
   1aaf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aafc:	4668      	mov	r0, sp
   1aafe:	f000 fc3d 	bl	1b37c <matherr>
   1ab02:	2800      	cmp	r0, #0
   1ab04:	f000 808c 	beq.w	1ac20 <powf+0x270>
   1ab08:	9b08      	ldr	r3, [sp, #32]
   1ab0a:	b11b      	cbz	r3, 1ab14 <powf+0x164>
   1ab0c:	f002 fce2 	bl	1d4d4 <__errno>
   1ab10:	9b08      	ldr	r3, [sp, #32]
   1ab12:	6003      	str	r3, [r0, #0]
   1ab14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ab18:	f001 f9ea 	bl	1bef0 <__aeabi_d2f>
   1ab1c:	ee09 0a10 	vmov	s18, r0
   1ab20:	eeb0 0a49 	vmov.f32	s0, s18
   1ab24:	b00b      	add	sp, #44	; 0x2c
   1ab26:	ecbd 8b04 	vpop	{d8-d9}
   1ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ab30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab34:	f47f af7c 	bne.w	1aa30 <powf+0x80>
   1ab38:	2301      	movs	r3, #1
   1ab3a:	4a53      	ldr	r2, [pc, #332]	; (1ac88 <powf+0x2d8>)
   1ab3c:	9300      	str	r3, [sp, #0]
   1ab3e:	ee18 0a90 	vmov	r0, s17
   1ab42:	2300      	movs	r3, #0
   1ab44:	9201      	str	r2, [sp, #4]
   1ab46:	9308      	str	r3, [sp, #32]
   1ab48:	f000 fe9c 	bl	1b884 <__aeabi_f2d>
   1ab4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ab50:	ee18 0a10 	vmov	r0, s16
   1ab54:	f000 fe96 	bl	1b884 <__aeabi_f2d>
   1ab58:	4b4c      	ldr	r3, [pc, #304]	; (1ac8c <powf+0x2dc>)
   1ab5a:	2200      	movs	r2, #0
   1ab5c:	2c02      	cmp	r4, #2
   1ab5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ab62:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab66:	d1c9      	bne.n	1aafc <powf+0x14c>
   1ab68:	e760      	b.n	1aa2c <powf+0x7c>
   1ab6a:	eeb0 0a68 	vmov.f32	s0, s17
   1ab6e:	f000 fca1 	bl	1b4b4 <finitef>
   1ab72:	2800      	cmp	r0, #0
   1ab74:	f43f af68 	beq.w	1aa48 <powf+0x98>
   1ab78:	eeb0 0a48 	vmov.f32	s0, s16
   1ab7c:	f000 fc9a 	bl	1b4b4 <finitef>
   1ab80:	2800      	cmp	r0, #0
   1ab82:	f43f af61 	beq.w	1aa48 <powf+0x98>
   1ab86:	eeb4 9a49 	vcmp.f32	s18, s18
   1ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab8e:	f180 8087 	bvs.w	1aca0 <powf+0x2f0>
   1ab92:	4b3d      	ldr	r3, [pc, #244]	; (1ac88 <powf+0x2d8>)
   1ab94:	9408      	str	r4, [sp, #32]
   1ab96:	2203      	movs	r2, #3
   1ab98:	ee18 0a90 	vmov	r0, s17
   1ab9c:	e88d 000c 	stmia.w	sp, {r2, r3}
   1aba0:	f000 fe70 	bl	1b884 <__aeabi_f2d>
   1aba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aba8:	ee18 0a10 	vmov	r0, s16
   1abac:	f000 fe6a 	bl	1b884 <__aeabi_f2d>
   1abb0:	f995 3000 	ldrsb.w	r3, [r5]
   1abb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abb8:	2b00      	cmp	r3, #0
   1abba:	d13d      	bne.n	1ac38 <powf+0x288>
   1abbc:	4b34      	ldr	r3, [pc, #208]	; (1ac90 <powf+0x2e0>)
   1abbe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1abc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1abc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1abce:	f57f af66 	bpl.w	1aa9e <powf+0xee>
   1abd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1abd6:	ee68 7a27 	vmul.f32	s15, s16, s15
   1abda:	ee17 0a90 	vmov	r0, s15
   1abde:	f000 fe51 	bl	1b884 <__aeabi_f2d>
   1abe2:	4606      	mov	r6, r0
   1abe4:	460f      	mov	r7, r1
   1abe6:	ec47 6b10 	vmov	d0, r6, r7
   1abea:	f000 fbc9 	bl	1b380 <rint>
   1abee:	4630      	mov	r0, r6
   1abf0:	ec53 2b10 	vmov	r2, r3, d0
   1abf4:	4639      	mov	r1, r7
   1abf6:	f001 f901 	bl	1bdfc <__aeabi_dcmpeq>
   1abfa:	2800      	cmp	r0, #0
   1abfc:	d13f      	bne.n	1ac7e <powf+0x2ce>
   1abfe:	4925      	ldr	r1, [pc, #148]	; (1ac94 <powf+0x2e4>)
   1ac00:	f995 3000 	ldrsb.w	r3, [r5]
   1ac04:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1ac08:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ac0c:	e745      	b.n	1aa9a <powf+0xea>
   1ac0e:	4610      	mov	r0, r2
   1ac10:	4619      	mov	r1, r3
   1ac12:	f000 ffb5 	bl	1bb80 <__aeabi_ddiv>
   1ac16:	2c02      	cmp	r4, #2
   1ac18:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ac1c:	f47f af6e 	bne.w	1aafc <powf+0x14c>
   1ac20:	f002 fc58 	bl	1d4d4 <__errno>
   1ac24:	2321      	movs	r3, #33	; 0x21
   1ac26:	6003      	str	r3, [r0, #0]
   1ac28:	e76e      	b.n	1ab08 <powf+0x158>
   1ac2a:	491b      	ldr	r1, [pc, #108]	; (1ac98 <powf+0x2e8>)
   1ac2c:	2000      	movs	r0, #0
   1ac2e:	2b02      	cmp	r3, #2
   1ac30:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ac34:	d0f4      	beq.n	1ac20 <powf+0x270>
   1ac36:	e761      	b.n	1aafc <powf+0x14c>
   1ac38:	4918      	ldr	r1, [pc, #96]	; (1ac9c <powf+0x2ec>)
   1ac3a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ac3e:	2000      	movs	r0, #0
   1ac40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac44:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ac48:	f57f af27 	bpl.w	1aa9a <powf+0xea>
   1ac4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ac50:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ac54:	ee17 0a90 	vmov	r0, s15
   1ac58:	f000 fe14 	bl	1b884 <__aeabi_f2d>
   1ac5c:	4606      	mov	r6, r0
   1ac5e:	460f      	mov	r7, r1
   1ac60:	ec47 6b10 	vmov	d0, r6, r7
   1ac64:	f000 fb8c 	bl	1b380 <rint>
   1ac68:	4630      	mov	r0, r6
   1ac6a:	ec53 2b10 	vmov	r2, r3, d0
   1ac6e:	4639      	mov	r1, r7
   1ac70:	f001 f8c4 	bl	1bdfc <__aeabi_dcmpeq>
   1ac74:	b918      	cbnz	r0, 1ac7e <powf+0x2ce>
   1ac76:	4b08      	ldr	r3, [pc, #32]	; (1ac98 <powf+0x2e8>)
   1ac78:	2200      	movs	r2, #0
   1ac7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ac7e:	f995 3000 	ldrsb.w	r3, [r5]
   1ac82:	e70a      	b.n	1aa9a <powf+0xea>
   1ac84:	200000f4 	.word	0x200000f4
   1ac88:	000249c8 	.word	0x000249c8
   1ac8c:	3ff00000 	.word	0x3ff00000
   1ac90:	47efffff 	.word	0x47efffff
   1ac94:	c7efffff 	.word	0xc7efffff
   1ac98:	fff00000 	.word	0xfff00000
   1ac9c:	7ff00000 	.word	0x7ff00000
   1aca0:	4b0c      	ldr	r3, [pc, #48]	; (1acd4 <powf+0x324>)
   1aca2:	9408      	str	r4, [sp, #32]
   1aca4:	2201      	movs	r2, #1
   1aca6:	ee18 0a90 	vmov	r0, s17
   1acaa:	e88d 000c 	stmia.w	sp, {r2, r3}
   1acae:	f000 fde9 	bl	1b884 <__aeabi_f2d>
   1acb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1acb6:	ee18 0a10 	vmov	r0, s16
   1acba:	f000 fde3 	bl	1b884 <__aeabi_f2d>
   1acbe:	f995 4000 	ldrsb.w	r4, [r5]
   1acc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acc6:	2200      	movs	r2, #0
   1acc8:	2300      	movs	r3, #0
   1acca:	2c00      	cmp	r4, #0
   1accc:	d19f      	bne.n	1ac0e <powf+0x25e>
   1acce:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1acd2:	e713      	b.n	1aafc <powf+0x14c>
   1acd4:	000249c8 	.word	0x000249c8

0001acd8 <sqrtf>:
   1acd8:	b510      	push	{r4, lr}
   1acda:	ed2d 8b02 	vpush	{d8}
   1acde:	b08a      	sub	sp, #40	; 0x28
   1ace0:	eeb0 8a40 	vmov.f32	s16, s0
   1ace4:	f000 fb46 	bl	1b374 <__ieee754_sqrtf>
   1ace8:	4b24      	ldr	r3, [pc, #144]	; (1ad7c <sqrtf+0xa4>)
   1acea:	f993 4000 	ldrsb.w	r4, [r3]
   1acee:	1c63      	adds	r3, r4, #1
   1acf0:	d009      	beq.n	1ad06 <sqrtf+0x2e>
   1acf2:	eeb4 8a48 	vcmp.f32	s16, s16
   1acf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1acfa:	d604      	bvs.n	1ad06 <sqrtf+0x2e>
   1acfc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad04:	d403      	bmi.n	1ad0e <sqrtf+0x36>
   1ad06:	b00a      	add	sp, #40	; 0x28
   1ad08:	ecbd 8b02 	vpop	{d8}
   1ad0c:	bd10      	pop	{r4, pc}
   1ad0e:	2301      	movs	r3, #1
   1ad10:	4a1b      	ldr	r2, [pc, #108]	; (1ad80 <sqrtf+0xa8>)
   1ad12:	9300      	str	r3, [sp, #0]
   1ad14:	ee18 0a10 	vmov	r0, s16
   1ad18:	2300      	movs	r3, #0
   1ad1a:	9201      	str	r2, [sp, #4]
   1ad1c:	9308      	str	r3, [sp, #32]
   1ad1e:	f000 fdb1 	bl	1b884 <__aeabi_f2d>
   1ad22:	2200      	movs	r2, #0
   1ad24:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad28:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad2c:	2300      	movs	r3, #0
   1ad2e:	b1bc      	cbz	r4, 1ad60 <sqrtf+0x88>
   1ad30:	4610      	mov	r0, r2
   1ad32:	4619      	mov	r1, r3
   1ad34:	f000 ff24 	bl	1bb80 <__aeabi_ddiv>
   1ad38:	2c02      	cmp	r4, #2
   1ad3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad3e:	d111      	bne.n	1ad64 <sqrtf+0x8c>
   1ad40:	f002 fbc8 	bl	1d4d4 <__errno>
   1ad44:	2321      	movs	r3, #33	; 0x21
   1ad46:	6003      	str	r3, [r0, #0]
   1ad48:	9b08      	ldr	r3, [sp, #32]
   1ad4a:	b98b      	cbnz	r3, 1ad70 <sqrtf+0x98>
   1ad4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ad50:	f001 f8ce 	bl	1bef0 <__aeabi_d2f>
   1ad54:	ee00 0a10 	vmov	s0, r0
   1ad58:	b00a      	add	sp, #40	; 0x28
   1ad5a:	ecbd 8b02 	vpop	{d8}
   1ad5e:	bd10      	pop	{r4, pc}
   1ad60:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad64:	4668      	mov	r0, sp
   1ad66:	f000 fb09 	bl	1b37c <matherr>
   1ad6a:	2800      	cmp	r0, #0
   1ad6c:	d1ec      	bne.n	1ad48 <sqrtf+0x70>
   1ad6e:	e7e7      	b.n	1ad40 <sqrtf+0x68>
   1ad70:	f002 fbb0 	bl	1d4d4 <__errno>
   1ad74:	9b08      	ldr	r3, [sp, #32]
   1ad76:	6003      	str	r3, [r0, #0]
   1ad78:	e7e8      	b.n	1ad4c <sqrtf+0x74>
   1ad7a:	bf00      	nop
   1ad7c:	200000f4 	.word	0x200000f4
   1ad80:	000249d0 	.word	0x000249d0

0001ad84 <__ieee754_powf>:
   1ad84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad88:	ed2d 8b02 	vpush	{d8}
   1ad8c:	b082      	sub	sp, #8
   1ad8e:	edcd 0a00 	vstr	s1, [sp]
   1ad92:	9c00      	ldr	r4, [sp, #0]
   1ad94:	ed8d 0a01 	vstr	s0, [sp, #4]
   1ad98:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1ad9c:	d014      	beq.n	1adc8 <__ieee754_powf+0x44>
   1ad9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1ada2:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1ada6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1adaa:	dd07      	ble.n	1adbc <__ieee754_powf+0x38>
   1adac:	4858      	ldr	r0, [pc, #352]	; (1af10 <__ieee754_powf+0x18c>)
   1adae:	b002      	add	sp, #8
   1adb0:	ecbd 8b02 	vpop	{d8}
   1adb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1adb8:	f000 bb86 	b.w	1b4c8 <nanf>
   1adbc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1adc0:	dd09      	ble.n	1add6 <__ieee754_powf+0x52>
   1adc2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1adc6:	d1f1      	bne.n	1adac <__ieee754_powf+0x28>
   1adc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1adcc:	b002      	add	sp, #8
   1adce:	ecbd 8b02 	vpop	{d8}
   1add2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1add6:	f1b8 0f00 	cmp.w	r8, #0
   1adda:	db4d      	blt.n	1ae78 <__ieee754_powf+0xf4>
   1addc:	f04f 0a00 	mov.w	sl, #0
   1ade0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1ade4:	d03f      	beq.n	1ae66 <__ieee754_powf+0xe2>
   1ade6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1adea:	d058      	beq.n	1ae9e <__ieee754_powf+0x11a>
   1adec:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1adf0:	d06e      	beq.n	1aed0 <__ieee754_powf+0x14c>
   1adf2:	9d01      	ldr	r5, [sp, #4]
   1adf4:	f8dd 9000 	ldr.w	r9, [sp]
   1adf8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1adfc:	ee00 5a10 	vmov	s0, r5
   1ae00:	d01c      	beq.n	1ae3c <__ieee754_powf+0xb8>
   1ae02:	f000 fb4f 	bl	1b4a4 <fabsf>
   1ae06:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1ae0a:	d04d      	beq.n	1aea8 <__ieee754_powf+0x124>
   1ae0c:	2f00      	cmp	r7, #0
   1ae0e:	d04b      	beq.n	1aea8 <__ieee754_powf+0x124>
   1ae10:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1ae14:	d048      	beq.n	1aea8 <__ieee754_powf+0x124>
   1ae16:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1ae1a:	3b01      	subs	r3, #1
   1ae1c:	ea5a 0203 	orrs.w	r2, sl, r3
   1ae20:	d06e      	beq.n	1af00 <__ieee754_powf+0x17c>
   1ae22:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1ae26:	dd7b      	ble.n	1af20 <__ieee754_powf+0x19c>
   1ae28:	4a3a      	ldr	r2, [pc, #232]	; (1af14 <__ieee754_powf+0x190>)
   1ae2a:	4297      	cmp	r7, r2
   1ae2c:	f300 81c8 	bgt.w	1b1c0 <__ieee754_powf+0x43c>
   1ae30:	2c00      	cmp	r4, #0
   1ae32:	f2c0 81cb 	blt.w	1b1cc <__ieee754_powf+0x448>
   1ae36:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1af18 <__ieee754_powf+0x194>
   1ae3a:	e7c7      	b.n	1adcc <__ieee754_powf+0x48>
   1ae3c:	f1b8 0f00 	cmp.w	r8, #0
   1ae40:	da4b      	bge.n	1aeda <__ieee754_powf+0x156>
   1ae42:	f000 fb2f 	bl	1b4a4 <fabsf>
   1ae46:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1ae4a:	d001      	beq.n	1ae50 <__ieee754_powf+0xcc>
   1ae4c:	2f00      	cmp	r7, #0
   1ae4e:	d1df      	bne.n	1ae10 <__ieee754_powf+0x8c>
   1ae50:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1ae54:	ea57 030a 	orrs.w	r3, r7, sl
   1ae58:	d04d      	beq.n	1aef6 <__ieee754_powf+0x172>
   1ae5a:	f1ba 0f01 	cmp.w	sl, #1
   1ae5e:	d1b5      	bne.n	1adcc <__ieee754_powf+0x48>
   1ae60:	eeb1 0a40 	vneg.f32	s0, s0
   1ae64:	e7b2      	b.n	1adcc <__ieee754_powf+0x48>
   1ae66:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1ae6a:	d0ad      	beq.n	1adc8 <__ieee754_powf+0x44>
   1ae6c:	dd29      	ble.n	1aec2 <__ieee754_powf+0x13e>
   1ae6e:	2c00      	cmp	r4, #0
   1ae70:	dbe1      	blt.n	1ae36 <__ieee754_powf+0xb2>
   1ae72:	ed9d 0a00 	vldr	s0, [sp]
   1ae76:	e7a9      	b.n	1adcc <__ieee754_powf+0x48>
   1ae78:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1ae7c:	da1e      	bge.n	1aebc <__ieee754_powf+0x138>
   1ae7e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1ae82:	db09      	blt.n	1ae98 <__ieee754_powf+0x114>
   1ae84:	15f3      	asrs	r3, r6, #23
   1ae86:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1ae8a:	fa46 f203 	asr.w	r2, r6, r3
   1ae8e:	fa02 f303 	lsl.w	r3, r2, r3
   1ae92:	429e      	cmp	r6, r3
   1ae94:	f000 818f 	beq.w	1b1b6 <__ieee754_powf+0x432>
   1ae98:	f04f 0a00 	mov.w	sl, #0
   1ae9c:	e7a3      	b.n	1ade6 <__ieee754_powf+0x62>
   1ae9e:	2c00      	cmp	r4, #0
   1aea0:	db22      	blt.n	1aee8 <__ieee754_powf+0x164>
   1aea2:	ed9d 0a01 	vldr	s0, [sp, #4]
   1aea6:	e791      	b.n	1adcc <__ieee754_powf+0x48>
   1aea8:	2c00      	cmp	r4, #0
   1aeaa:	bfbc      	itt	lt
   1aeac:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1aeb0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1aeb4:	f1b8 0f00 	cmp.w	r8, #0
   1aeb8:	da88      	bge.n	1adcc <__ieee754_powf+0x48>
   1aeba:	e7c9      	b.n	1ae50 <__ieee754_powf+0xcc>
   1aebc:	f04f 0a02 	mov.w	sl, #2
   1aec0:	e78e      	b.n	1ade0 <__ieee754_powf+0x5c>
   1aec2:	2c00      	cmp	r4, #0
   1aec4:	dab7      	bge.n	1ae36 <__ieee754_powf+0xb2>
   1aec6:	eddd 7a00 	vldr	s15, [sp]
   1aeca:	eeb1 0a67 	vneg.f32	s0, s15
   1aece:	e77d      	b.n	1adcc <__ieee754_powf+0x48>
   1aed0:	eddd 7a01 	vldr	s15, [sp, #4]
   1aed4:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1aed8:	e778      	b.n	1adcc <__ieee754_powf+0x48>
   1aeda:	b002      	add	sp, #8
   1aedc:	ecbd 8b02 	vpop	{d8}
   1aee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aee4:	f000 ba46 	b.w	1b374 <__ieee754_sqrtf>
   1aee8:	ed9d 7a01 	vldr	s14, [sp, #4]
   1aeec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1aef0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1aef4:	e76a      	b.n	1adcc <__ieee754_powf+0x48>
   1aef6:	ee70 7a40 	vsub.f32	s15, s0, s0
   1aefa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1aefe:	e765      	b.n	1adcc <__ieee754_powf+0x48>
   1af00:	ee07 5a90 	vmov	s15, r5
   1af04:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1af08:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1af0c:	e75e      	b.n	1adcc <__ieee754_powf+0x48>
   1af0e:	bf00      	nop
   1af10:	00022840 	.word	0x00022840
   1af14:	3f7ffff7 	.word	0x3f7ffff7
   1af18:	00000000 	.word	0x00000000
   1af1c:	4b800000 	.word	0x4b800000
   1af20:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1af24:	f280 815f 	bge.w	1b1e6 <__ieee754_powf+0x462>
   1af28:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1af1c <__ieee754_powf+0x198>
   1af2c:	ee60 7a27 	vmul.f32	s15, s0, s15
   1af30:	f06f 0217 	mvn.w	r2, #23
   1af34:	ee17 7a90 	vmov	r7, s15
   1af38:	48ee      	ldr	r0, [pc, #952]	; (1b2f4 <__ieee754_powf+0x570>)
   1af3a:	15f9      	asrs	r1, r7, #23
   1af3c:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1af40:	397f      	subs	r1, #127	; 0x7f
   1af42:	4287      	cmp	r7, r0
   1af44:	4411      	add	r1, r2
   1af46:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1af4a:	f340 8144 	ble.w	1b1d6 <__ieee754_powf+0x452>
   1af4e:	48ea      	ldr	r0, [pc, #936]	; (1b2f8 <__ieee754_powf+0x574>)
   1af50:	4287      	cmp	r7, r0
   1af52:	f340 8191 	ble.w	1b278 <__ieee754_powf+0x4f4>
   1af56:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b2fc <__ieee754_powf+0x578>
   1af5a:	3101      	adds	r1, #1
   1af5c:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1af60:	eef0 3a64 	vmov.f32	s7, s9
   1af64:	2500      	movs	r5, #0
   1af66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1af6a:	ee06 2a90 	vmov	s13, r2
   1af6e:	ee76 7a86 	vadd.f32	s15, s13, s12
   1af72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1af76:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1af7a:	1052      	asrs	r2, r2, #1
   1af7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1af80:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1af84:	442a      	add	r2, r5
   1af86:	48de      	ldr	r0, [pc, #888]	; (1b300 <__ieee754_powf+0x57c>)
   1af88:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1af8c:	ee07 2a90 	vmov	s15, r2
   1af90:	ee27 4a08 	vmul.f32	s8, s14, s16
   1af94:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1af98:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b304 <__ieee754_powf+0x580>
   1af9c:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b308 <__ieee754_powf+0x584>
   1afa0:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b30c <__ieee754_powf+0x588>
   1afa4:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b310 <__ieee754_powf+0x58c>
   1afa8:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b314 <__ieee754_powf+0x590>
   1afac:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b318 <__ieee754_powf+0x594>
   1afb0:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b31c <__ieee754_powf+0x598>
   1afb4:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b320 <__ieee754_powf+0x59c>
   1afb8:	ee24 6a04 	vmul.f32	s12, s8, s8
   1afbc:	ee14 2a10 	vmov	r2, s8
   1afc0:	eea6 0a28 	vfma.f32	s0, s12, s17
   1afc4:	4002      	ands	r2, r0
   1afc6:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1afca:	eeb0 5a61 	vmov.f32	s10, s3
   1afce:	ee05 2a90 	vmov	s11, r2
   1afd2:	eea6 5a00 	vfma.f32	s10, s12, s0
   1afd6:	eef1 1a65 	vneg.f32	s3, s11
   1afda:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1afde:	eef0 7a60 	vmov.f32	s15, s1
   1afe2:	eee6 7a05 	vfma.f32	s15, s12, s10
   1afe6:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1afea:	eeb0 5a41 	vmov.f32	s10, s2
   1afee:	eea6 5a27 	vfma.f32	s10, s12, s15
   1aff2:	ee67 6a08 	vmul.f32	s13, s14, s16
   1aff6:	eeb0 7a42 	vmov.f32	s14, s4
   1affa:	eea6 7a05 	vfma.f32	s14, s12, s10
   1affe:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b002:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b006:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b00a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b00e:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b012:	eeb0 7a45 	vmov.f32	s14, s10
   1b016:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b01a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b324 <__ieee754_powf+0x5a0>
   1b01e:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b022:	ee07 1a10 	vmov	s14, r1
   1b026:	ee16 2a10 	vmov	r2, s12
   1b02a:	4002      	ands	r2, r0
   1b02c:	ee06 2a10 	vmov	s12, r2
   1b030:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b038:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b03c:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b040:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b044:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b048:	eef0 6a67 	vmov.f32	s13, s15
   1b04c:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b050:	ee16 2a90 	vmov	r2, s13
   1b054:	4002      	ands	r2, r0
   1b056:	ee06 2a90 	vmov	s13, r2
   1b05a:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b05e:	ee05 2a90 	vmov	s11, r2
   1b062:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b066:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b06a:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b06e:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b072:	eef0 6a67 	vmov.f32	s13, s15
   1b076:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b07a:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b07e:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b082:	ee16 2a90 	vmov	r2, s13
   1b086:	4002      	ands	r2, r0
   1b088:	ee06 2a90 	vmov	s13, r2
   1b08c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b090:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b094:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b098:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b09c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b0a0:	f024 040f 	bic.w	r4, r4, #15
   1b0a4:	ee07 9a10 	vmov	s14, r9
   1b0a8:	ee06 4a10 	vmov	s12, r4
   1b0ac:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b0b0:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b0b4:	ee07 4a10 	vmov	s14, r4
   1b0b8:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b0bc:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b0c0:	ea5a 0303 	orrs.w	r3, sl, r3
   1b0c4:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b0c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b0cc:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b0d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b0d4:	ee16 2a90 	vmov	r2, s13
   1b0d8:	bf14      	ite	ne
   1b0da:	eeb0 8a46 	vmovne.f32	s16, s12
   1b0de:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b0e2:	2a00      	cmp	r2, #0
   1b0e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b0e8:	f340 80b3 	ble.w	1b252 <__ieee754_powf+0x4ce>
   1b0ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b0f0:	f300 8086 	bgt.w	1b200 <__ieee754_powf+0x47c>
   1b0f4:	d079      	beq.n	1b1ea <__ieee754_powf+0x466>
   1b0f6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b0fa:	f300 8088 	bgt.w	1b20e <__ieee754_powf+0x48a>
   1b0fe:	2100      	movs	r1, #0
   1b100:	4608      	mov	r0, r1
   1b102:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b106:	f023 030f 	bic.w	r3, r3, #15
   1b10a:	ee06 3a10 	vmov	s12, r3
   1b10e:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b328 <__ieee754_powf+0x5a4>
   1b112:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b32c <__ieee754_powf+0x5a8>
   1b116:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b330 <__ieee754_powf+0x5ac>
   1b11a:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b334 <__ieee754_powf+0x5b0>
   1b11e:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b338 <__ieee754_powf+0x5b4>
   1b122:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b33c <__ieee754_powf+0x5b8>
   1b126:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b340 <__ieee754_powf+0x5bc>
   1b12a:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b344 <__ieee754_powf+0x5c0>
   1b12e:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b132:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b136:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b13a:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b13e:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b142:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b146:	eef0 7a47 	vmov.f32	s15, s14
   1b14a:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b14e:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b152:	eef0 1a47 	vmov.f32	s3, s14
   1b156:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b15a:	eeb0 6a63 	vmov.f32	s12, s7
   1b15e:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b162:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b166:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b16a:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b16e:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b172:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b176:	eeb0 6a45 	vmov.f32	s12, s10
   1b17a:	eeb0 5a47 	vmov.f32	s10, s14
   1b17e:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b182:	eef0 6a45 	vmov.f32	s13, s10
   1b186:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b18a:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b18e:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b192:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b196:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b19a:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b19e:	ee10 3a10 	vmov	r3, s0
   1b1a2:	440b      	add	r3, r1
   1b1a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b1a8:	f2c0 80a0 	blt.w	1b2ec <__ieee754_powf+0x568>
   1b1ac:	ee00 3a10 	vmov	s0, r3
   1b1b0:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b1b4:	e60a      	b.n	1adcc <__ieee754_powf+0x48>
   1b1b6:	f002 0201 	and.w	r2, r2, #1
   1b1ba:	f1c2 0a02 	rsb	sl, r2, #2
   1b1be:	e612      	b.n	1ade6 <__ieee754_powf+0x62>
   1b1c0:	4a61      	ldr	r2, [pc, #388]	; (1b348 <__ieee754_powf+0x5c4>)
   1b1c2:	4297      	cmp	r7, r2
   1b1c4:	dd61      	ble.n	1b28a <__ieee754_powf+0x506>
   1b1c6:	2c00      	cmp	r4, #0
   1b1c8:	f77f ae35 	ble.w	1ae36 <__ieee754_powf+0xb2>
   1b1cc:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b34c <__ieee754_powf+0x5c8>
   1b1d0:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b1d4:	e5fa      	b.n	1adcc <__ieee754_powf+0x48>
   1b1d6:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b2fc <__ieee754_powf+0x578>
   1b1da:	2500      	movs	r5, #0
   1b1dc:	eef0 3a64 	vmov.f32	s7, s9
   1b1e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b1e4:	e6c1      	b.n	1af6a <__ieee754_powf+0x1e6>
   1b1e6:	2200      	movs	r2, #0
   1b1e8:	e6a6      	b.n	1af38 <__ieee754_powf+0x1b4>
   1b1ea:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b350 <__ieee754_powf+0x5cc>
   1b1ee:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b1f2:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b1f6:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b1fe:	dd06      	ble.n	1b20e <__ieee754_powf+0x48a>
   1b200:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b34c <__ieee754_powf+0x5c8>
   1b204:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b208:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b20c:	e5de      	b.n	1adcc <__ieee754_powf+0x48>
   1b20e:	15db      	asrs	r3, r3, #23
   1b210:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b214:	3b7e      	subs	r3, #126	; 0x7e
   1b216:	fa41 f303 	asr.w	r3, r1, r3
   1b21a:	4413      	add	r3, r2
   1b21c:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b220:	4c4c      	ldr	r4, [pc, #304]	; (1b354 <__ieee754_powf+0x5d0>)
   1b222:	397f      	subs	r1, #127	; 0x7f
   1b224:	410c      	asrs	r4, r1
   1b226:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b22a:	ea23 0304 	bic.w	r3, r3, r4
   1b22e:	ee06 3a90 	vmov	s13, r3
   1b232:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b236:	f1c1 0117 	rsb	r1, r1, #23
   1b23a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b23e:	4108      	asrs	r0, r1
   1b240:	2a00      	cmp	r2, #0
   1b242:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b246:	bfb8      	it	lt
   1b248:	4240      	neglt	r0, r0
   1b24a:	05c1      	lsls	r1, r0, #23
   1b24c:	ee16 2a90 	vmov	r2, s13
   1b250:	e757      	b.n	1b102 <__ieee754_powf+0x37e>
   1b252:	4941      	ldr	r1, [pc, #260]	; (1b358 <__ieee754_powf+0x5d4>)
   1b254:	428b      	cmp	r3, r1
   1b256:	dc08      	bgt.n	1b26a <__ieee754_powf+0x4e6>
   1b258:	f47f af4d 	bne.w	1b0f6 <__ieee754_powf+0x372>
   1b25c:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b260:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b268:	d8d1      	bhi.n	1b20e <__ieee754_powf+0x48a>
   1b26a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b35c <__ieee754_powf+0x5d8>
   1b26e:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b272:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b276:	e5a9      	b.n	1adcc <__ieee754_powf+0x48>
   1b278:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b360 <__ieee754_powf+0x5dc>
   1b27c:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b364 <__ieee754_powf+0x5e0>
   1b280:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b284:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b288:	e66f      	b.n	1af6a <__ieee754_powf+0x1e6>
   1b28a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b28e:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b292:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b310 <__ieee754_powf+0x58c>
   1b296:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b368 <__ieee754_powf+0x5e4>
   1b29a:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b36c <__ieee754_powf+0x5e8>
   1b29e:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b370 <__ieee754_powf+0x5ec>
   1b2a2:	eeb1 6a40 	vneg.f32	s12, s0
   1b2a6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b2aa:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b2ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b2b2:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b2b6:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b2ba:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b2be:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b2c2:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b2c6:	eef0 6a67 	vmov.f32	s13, s15
   1b2ca:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b2ce:	ee16 2a90 	vmov	r2, s13
   1b2d2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b2d6:	f022 020f 	bic.w	r2, r2, #15
   1b2da:	ee07 2a10 	vmov	s14, r2
   1b2de:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b2e2:	ee06 2a90 	vmov	s13, r2
   1b2e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b2ea:	e6d7      	b.n	1b09c <__ieee754_powf+0x318>
   1b2ec:	f000 f8f2 	bl	1b4d4 <scalbnf>
   1b2f0:	e75e      	b.n	1b1b0 <__ieee754_powf+0x42c>
   1b2f2:	bf00      	nop
   1b2f4:	001cc471 	.word	0x001cc471
   1b2f8:	005db3d6 	.word	0x005db3d6
   1b2fc:	00000000 	.word	0x00000000
   1b300:	fffff000 	.word	0xfffff000
   1b304:	3e53f142 	.word	0x3e53f142
   1b308:	3e6c3255 	.word	0x3e6c3255
   1b30c:	3e8ba305 	.word	0x3e8ba305
   1b310:	3eaaaaab 	.word	0x3eaaaaab
   1b314:	3edb6db7 	.word	0x3edb6db7
   1b318:	3f19999a 	.word	0x3f19999a
   1b31c:	3f76384f 	.word	0x3f76384f
   1b320:	369dc3a0 	.word	0x369dc3a0
   1b324:	3f763800 	.word	0x3f763800
   1b328:	35bfbe8c 	.word	0x35bfbe8c
   1b32c:	3f317218 	.word	0x3f317218
   1b330:	3f317200 	.word	0x3f317200
   1b334:	b5ddea0e 	.word	0xb5ddea0e
   1b338:	3331bb4c 	.word	0x3331bb4c
   1b33c:	388ab355 	.word	0x388ab355
   1b340:	bb360b61 	.word	0xbb360b61
   1b344:	3e2aaaab 	.word	0x3e2aaaab
   1b348:	3f800007 	.word	0x3f800007
   1b34c:	7149f2ca 	.word	0x7149f2ca
   1b350:	3338aa3c 	.word	0x3338aa3c
   1b354:	007fffff 	.word	0x007fffff
   1b358:	43160000 	.word	0x43160000
   1b35c:	0da24260 	.word	0x0da24260
   1b360:	3f15c000 	.word	0x3f15c000
   1b364:	35d1cfdc 	.word	0x35d1cfdc
   1b368:	3fb8aa3b 	.word	0x3fb8aa3b
   1b36c:	36eca570 	.word	0x36eca570
   1b370:	3fb8aa00 	.word	0x3fb8aa00

0001b374 <__ieee754_sqrtf>:
   1b374:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b378:	4770      	bx	lr
   1b37a:	bf00      	nop

0001b37c <matherr>:
   1b37c:	2000      	movs	r0, #0
   1b37e:	4770      	bx	lr

0001b380 <rint>:
   1b380:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b382:	ec53 2b10 	vmov	r2, r3, d0
   1b386:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b38a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b38e:	2813      	cmp	r0, #19
   1b390:	b083      	sub	sp, #12
   1b392:	4619      	mov	r1, r3
   1b394:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b398:	ee10 5a10 	vmov	r5, s0
   1b39c:	dc2f      	bgt.n	1b3fe <rint+0x7e>
   1b39e:	2800      	cmp	r0, #0
   1b3a0:	db49      	blt.n	1b436 <rint+0xb6>
   1b3a2:	4e3e      	ldr	r6, [pc, #248]	; (1b49c <rint+0x11c>)
   1b3a4:	4106      	asrs	r6, r0
   1b3a6:	ea03 0706 	and.w	r7, r3, r6
   1b3aa:	4317      	orrs	r7, r2
   1b3ac:	d02c      	beq.n	1b408 <rint+0x88>
   1b3ae:	0876      	lsrs	r6, r6, #1
   1b3b0:	4033      	ands	r3, r6
   1b3b2:	431d      	orrs	r5, r3
   1b3b4:	d00c      	beq.n	1b3d0 <rint+0x50>
   1b3b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b3ba:	2813      	cmp	r0, #19
   1b3bc:	ea21 0606 	bic.w	r6, r1, r6
   1b3c0:	fa43 f100 	asr.w	r1, r3, r0
   1b3c4:	ea41 0106 	orr.w	r1, r1, r6
   1b3c8:	bf0c      	ite	eq
   1b3ca:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b3ce:	2500      	movne	r5, #0
   1b3d0:	4833      	ldr	r0, [pc, #204]	; (1b4a0 <rint+0x120>)
   1b3d2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b3d6:	462a      	mov	r2, r5
   1b3d8:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b3dc:	4610      	mov	r0, r2
   1b3de:	462b      	mov	r3, r5
   1b3e0:	4622      	mov	r2, r4
   1b3e2:	f000 f8f1 	bl	1b5c8 <__adddf3>
   1b3e6:	e9cd 0100 	strd	r0, r1, [sp]
   1b3ea:	4622      	mov	r2, r4
   1b3ec:	462b      	mov	r3, r5
   1b3ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b3f2:	f000 f8e7 	bl	1b5c4 <__aeabi_dsub>
   1b3f6:	ec41 0b10 	vmov	d0, r0, r1
   1b3fa:	b003      	add	sp, #12
   1b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b3fe:	2833      	cmp	r0, #51	; 0x33
   1b400:	dd06      	ble.n	1b410 <rint+0x90>
   1b402:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b406:	d040      	beq.n	1b48a <rint+0x10a>
   1b408:	ec43 2b10 	vmov	d0, r2, r3
   1b40c:	b003      	add	sp, #12
   1b40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b410:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b414:	f04f 30ff 	mov.w	r0, #4294967295
   1b418:	40f0      	lsrs	r0, r6
   1b41a:	4202      	tst	r2, r0
   1b41c:	d0f4      	beq.n	1b408 <rint+0x88>
   1b41e:	0840      	lsrs	r0, r0, #1
   1b420:	4202      	tst	r2, r0
   1b422:	d0d5      	beq.n	1b3d0 <rint+0x50>
   1b424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b428:	ea25 0000 	bic.w	r0, r5, r0
   1b42c:	fa43 f606 	asr.w	r6, r3, r6
   1b430:	ea46 0500 	orr.w	r5, r6, r0
   1b434:	e7cc      	b.n	1b3d0 <rint+0x50>
   1b436:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b43a:	4310      	orrs	r0, r2
   1b43c:	d0e4      	beq.n	1b408 <rint+0x88>
   1b43e:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b442:	4310      	orrs	r0, r2
   1b444:	4247      	negs	r7, r0
   1b446:	4307      	orrs	r7, r0
   1b448:	4d15      	ldr	r5, [pc, #84]	; (1b4a0 <rint+0x120>)
   1b44a:	0c5e      	lsrs	r6, r3, #17
   1b44c:	0b3f      	lsrs	r7, r7, #12
   1b44e:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b452:	0476      	lsls	r6, r6, #17
   1b454:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b458:	ea43 0106 	orr.w	r1, r3, r6
   1b45c:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b460:	ee10 0a10 	vmov	r0, s0
   1b464:	4632      	mov	r2, r6
   1b466:	463b      	mov	r3, r7
   1b468:	f000 f8ae 	bl	1b5c8 <__adddf3>
   1b46c:	e9cd 0100 	strd	r0, r1, [sp]
   1b470:	463b      	mov	r3, r7
   1b472:	4632      	mov	r2, r6
   1b474:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b478:	f000 f8a4 	bl	1b5c4 <__aeabi_dsub>
   1b47c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b480:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b484:	ec41 0b10 	vmov	d0, r0, r1
   1b488:	e7c0      	b.n	1b40c <rint+0x8c>
   1b48a:	ee10 0a10 	vmov	r0, s0
   1b48e:	4619      	mov	r1, r3
   1b490:	f000 f89a 	bl	1b5c8 <__adddf3>
   1b494:	ec41 0b10 	vmov	d0, r0, r1
   1b498:	e7b8      	b.n	1b40c <rint+0x8c>
   1b49a:	bf00      	nop
   1b49c:	000fffff 	.word	0x000fffff
   1b4a0:	000249d8 	.word	0x000249d8

0001b4a4 <fabsf>:
   1b4a4:	ee10 3a10 	vmov	r3, s0
   1b4a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b4ac:	ee00 3a10 	vmov	s0, r3
   1b4b0:	4770      	bx	lr
   1b4b2:	bf00      	nop

0001b4b4 <finitef>:
   1b4b4:	ee10 3a10 	vmov	r3, s0
   1b4b8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b4bc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b4c0:	bfac      	ite	ge
   1b4c2:	2000      	movge	r0, #0
   1b4c4:	2001      	movlt	r0, #1
   1b4c6:	4770      	bx	lr

0001b4c8 <nanf>:
   1b4c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b4d0 <nanf+0x8>
   1b4cc:	4770      	bx	lr
   1b4ce:	bf00      	nop
   1b4d0:	7fc00000 	.word	0x7fc00000

0001b4d4 <scalbnf>:
   1b4d4:	b508      	push	{r3, lr}
   1b4d6:	ee10 3a10 	vmov	r3, s0
   1b4da:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b4de:	ed2d 8b02 	vpush	{d8}
   1b4e2:	d011      	beq.n	1b508 <scalbnf+0x34>
   1b4e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b4e8:	d211      	bcs.n	1b50e <scalbnf+0x3a>
   1b4ea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b4ee:	d313      	bcc.n	1b518 <scalbnf+0x44>
   1b4f0:	0dd2      	lsrs	r2, r2, #23
   1b4f2:	4402      	add	r2, r0
   1b4f4:	2afe      	cmp	r2, #254	; 0xfe
   1b4f6:	dc2e      	bgt.n	1b556 <scalbnf+0x82>
   1b4f8:	2a00      	cmp	r2, #0
   1b4fa:	dd1a      	ble.n	1b532 <scalbnf+0x5e>
   1b4fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b500:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b504:	ee00 3a10 	vmov	s0, r3
   1b508:	ecbd 8b02 	vpop	{d8}
   1b50c:	bd08      	pop	{r3, pc}
   1b50e:	ecbd 8b02 	vpop	{d8}
   1b512:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b516:	bd08      	pop	{r3, pc}
   1b518:	4b1d      	ldr	r3, [pc, #116]	; (1b590 <scalbnf+0xbc>)
   1b51a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b594 <scalbnf+0xc0>
   1b51e:	4298      	cmp	r0, r3
   1b520:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b524:	db22      	blt.n	1b56c <scalbnf+0x98>
   1b526:	ee10 3a10 	vmov	r3, s0
   1b52a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b52e:	3a19      	subs	r2, #25
   1b530:	e7df      	b.n	1b4f2 <scalbnf+0x1e>
   1b532:	f112 0f16 	cmn.w	r2, #22
   1b536:	da1e      	bge.n	1b576 <scalbnf+0xa2>
   1b538:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b53c:	4298      	cmp	r0, r3
   1b53e:	dc0a      	bgt.n	1b556 <scalbnf+0x82>
   1b540:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b598 <scalbnf+0xc4>
   1b544:	eef0 0a40 	vmov.f32	s1, s0
   1b548:	eeb0 0a48 	vmov.f32	s0, s16
   1b54c:	f000 f82a 	bl	1b5a4 <copysignf>
   1b550:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b554:	e7d8      	b.n	1b508 <scalbnf+0x34>
   1b556:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b59c <scalbnf+0xc8>
   1b55a:	eef0 0a40 	vmov.f32	s1, s0
   1b55e:	eeb0 0a48 	vmov.f32	s0, s16
   1b562:	f000 f81f 	bl	1b5a4 <copysignf>
   1b566:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b56a:	e7cd      	b.n	1b508 <scalbnf+0x34>
   1b56c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b598 <scalbnf+0xc4>
   1b570:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b574:	e7c8      	b.n	1b508 <scalbnf+0x34>
   1b576:	3219      	adds	r2, #25
   1b578:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b57c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b580:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b5a0 <scalbnf+0xcc>
   1b584:	ee00 3a10 	vmov	s0, r3
   1b588:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b58c:	e7bc      	b.n	1b508 <scalbnf+0x34>
   1b58e:	bf00      	nop
   1b590:	ffff3cb0 	.word	0xffff3cb0
   1b594:	4c000000 	.word	0x4c000000
   1b598:	0da24260 	.word	0x0da24260
   1b59c:	7149f2ca 	.word	0x7149f2ca
   1b5a0:	33000000 	.word	0x33000000

0001b5a4 <copysignf>:
   1b5a4:	ee10 3a10 	vmov	r3, s0
   1b5a8:	ee10 2a90 	vmov	r2, s1
   1b5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b5b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b5b4:	4313      	orrs	r3, r2
   1b5b6:	ee00 3a10 	vmov	s0, r3
   1b5ba:	4770      	bx	lr

0001b5bc <__aeabi_drsub>:
   1b5bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b5c0:	e002      	b.n	1b5c8 <__adddf3>
   1b5c2:	bf00      	nop

0001b5c4 <__aeabi_dsub>:
   1b5c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b5c8 <__adddf3>:
   1b5c8:	b530      	push	{r4, r5, lr}
   1b5ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b5ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b5d2:	ea94 0f05 	teq	r4, r5
   1b5d6:	bf08      	it	eq
   1b5d8:	ea90 0f02 	teqeq	r0, r2
   1b5dc:	bf1f      	itttt	ne
   1b5de:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b5e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b5e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b5ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b5ee:	f000 80e2 	beq.w	1b7b6 <__adddf3+0x1ee>
   1b5f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b5f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b5fa:	bfb8      	it	lt
   1b5fc:	426d      	neglt	r5, r5
   1b5fe:	dd0c      	ble.n	1b61a <__adddf3+0x52>
   1b600:	442c      	add	r4, r5
   1b602:	ea80 0202 	eor.w	r2, r0, r2
   1b606:	ea81 0303 	eor.w	r3, r1, r3
   1b60a:	ea82 0000 	eor.w	r0, r2, r0
   1b60e:	ea83 0101 	eor.w	r1, r3, r1
   1b612:	ea80 0202 	eor.w	r2, r0, r2
   1b616:	ea81 0303 	eor.w	r3, r1, r3
   1b61a:	2d36      	cmp	r5, #54	; 0x36
   1b61c:	bf88      	it	hi
   1b61e:	bd30      	pophi	{r4, r5, pc}
   1b620:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b624:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b628:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b62c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b630:	d002      	beq.n	1b638 <__adddf3+0x70>
   1b632:	4240      	negs	r0, r0
   1b634:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b638:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b63c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b640:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b644:	d002      	beq.n	1b64c <__adddf3+0x84>
   1b646:	4252      	negs	r2, r2
   1b648:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b64c:	ea94 0f05 	teq	r4, r5
   1b650:	f000 80a7 	beq.w	1b7a2 <__adddf3+0x1da>
   1b654:	f1a4 0401 	sub.w	r4, r4, #1
   1b658:	f1d5 0e20 	rsbs	lr, r5, #32
   1b65c:	db0d      	blt.n	1b67a <__adddf3+0xb2>
   1b65e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b662:	fa22 f205 	lsr.w	r2, r2, r5
   1b666:	1880      	adds	r0, r0, r2
   1b668:	f141 0100 	adc.w	r1, r1, #0
   1b66c:	fa03 f20e 	lsl.w	r2, r3, lr
   1b670:	1880      	adds	r0, r0, r2
   1b672:	fa43 f305 	asr.w	r3, r3, r5
   1b676:	4159      	adcs	r1, r3
   1b678:	e00e      	b.n	1b698 <__adddf3+0xd0>
   1b67a:	f1a5 0520 	sub.w	r5, r5, #32
   1b67e:	f10e 0e20 	add.w	lr, lr, #32
   1b682:	2a01      	cmp	r2, #1
   1b684:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b688:	bf28      	it	cs
   1b68a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b68e:	fa43 f305 	asr.w	r3, r3, r5
   1b692:	18c0      	adds	r0, r0, r3
   1b694:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b69c:	d507      	bpl.n	1b6ae <__adddf3+0xe6>
   1b69e:	f04f 0e00 	mov.w	lr, #0
   1b6a2:	f1dc 0c00 	rsbs	ip, ip, #0
   1b6a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b6aa:	eb6e 0101 	sbc.w	r1, lr, r1
   1b6ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b6b2:	d31b      	bcc.n	1b6ec <__adddf3+0x124>
   1b6b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b6b8:	d30c      	bcc.n	1b6d4 <__adddf3+0x10c>
   1b6ba:	0849      	lsrs	r1, r1, #1
   1b6bc:	ea5f 0030 	movs.w	r0, r0, rrx
   1b6c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b6c4:	f104 0401 	add.w	r4, r4, #1
   1b6c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b6cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b6d0:	f080 809a 	bcs.w	1b808 <__adddf3+0x240>
   1b6d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b6d8:	bf08      	it	eq
   1b6da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b6de:	f150 0000 	adcs.w	r0, r0, #0
   1b6e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b6e6:	ea41 0105 	orr.w	r1, r1, r5
   1b6ea:	bd30      	pop	{r4, r5, pc}
   1b6ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b6f0:	4140      	adcs	r0, r0
   1b6f2:	eb41 0101 	adc.w	r1, r1, r1
   1b6f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b6fa:	f1a4 0401 	sub.w	r4, r4, #1
   1b6fe:	d1e9      	bne.n	1b6d4 <__adddf3+0x10c>
   1b700:	f091 0f00 	teq	r1, #0
   1b704:	bf04      	itt	eq
   1b706:	4601      	moveq	r1, r0
   1b708:	2000      	moveq	r0, #0
   1b70a:	fab1 f381 	clz	r3, r1
   1b70e:	bf08      	it	eq
   1b710:	3320      	addeq	r3, #32
   1b712:	f1a3 030b 	sub.w	r3, r3, #11
   1b716:	f1b3 0220 	subs.w	r2, r3, #32
   1b71a:	da0c      	bge.n	1b736 <__adddf3+0x16e>
   1b71c:	320c      	adds	r2, #12
   1b71e:	dd08      	ble.n	1b732 <__adddf3+0x16a>
   1b720:	f102 0c14 	add.w	ip, r2, #20
   1b724:	f1c2 020c 	rsb	r2, r2, #12
   1b728:	fa01 f00c 	lsl.w	r0, r1, ip
   1b72c:	fa21 f102 	lsr.w	r1, r1, r2
   1b730:	e00c      	b.n	1b74c <__adddf3+0x184>
   1b732:	f102 0214 	add.w	r2, r2, #20
   1b736:	bfd8      	it	le
   1b738:	f1c2 0c20 	rsble	ip, r2, #32
   1b73c:	fa01 f102 	lsl.w	r1, r1, r2
   1b740:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b744:	bfdc      	itt	le
   1b746:	ea41 010c 	orrle.w	r1, r1, ip
   1b74a:	4090      	lslle	r0, r2
   1b74c:	1ae4      	subs	r4, r4, r3
   1b74e:	bfa2      	ittt	ge
   1b750:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b754:	4329      	orrge	r1, r5
   1b756:	bd30      	popge	{r4, r5, pc}
   1b758:	ea6f 0404 	mvn.w	r4, r4
   1b75c:	3c1f      	subs	r4, #31
   1b75e:	da1c      	bge.n	1b79a <__adddf3+0x1d2>
   1b760:	340c      	adds	r4, #12
   1b762:	dc0e      	bgt.n	1b782 <__adddf3+0x1ba>
   1b764:	f104 0414 	add.w	r4, r4, #20
   1b768:	f1c4 0220 	rsb	r2, r4, #32
   1b76c:	fa20 f004 	lsr.w	r0, r0, r4
   1b770:	fa01 f302 	lsl.w	r3, r1, r2
   1b774:	ea40 0003 	orr.w	r0, r0, r3
   1b778:	fa21 f304 	lsr.w	r3, r1, r4
   1b77c:	ea45 0103 	orr.w	r1, r5, r3
   1b780:	bd30      	pop	{r4, r5, pc}
   1b782:	f1c4 040c 	rsb	r4, r4, #12
   1b786:	f1c4 0220 	rsb	r2, r4, #32
   1b78a:	fa20 f002 	lsr.w	r0, r0, r2
   1b78e:	fa01 f304 	lsl.w	r3, r1, r4
   1b792:	ea40 0003 	orr.w	r0, r0, r3
   1b796:	4629      	mov	r1, r5
   1b798:	bd30      	pop	{r4, r5, pc}
   1b79a:	fa21 f004 	lsr.w	r0, r1, r4
   1b79e:	4629      	mov	r1, r5
   1b7a0:	bd30      	pop	{r4, r5, pc}
   1b7a2:	f094 0f00 	teq	r4, #0
   1b7a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b7aa:	bf06      	itte	eq
   1b7ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b7b0:	3401      	addeq	r4, #1
   1b7b2:	3d01      	subne	r5, #1
   1b7b4:	e74e      	b.n	1b654 <__adddf3+0x8c>
   1b7b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b7ba:	bf18      	it	ne
   1b7bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b7c0:	d029      	beq.n	1b816 <__adddf3+0x24e>
   1b7c2:	ea94 0f05 	teq	r4, r5
   1b7c6:	bf08      	it	eq
   1b7c8:	ea90 0f02 	teqeq	r0, r2
   1b7cc:	d005      	beq.n	1b7da <__adddf3+0x212>
   1b7ce:	ea54 0c00 	orrs.w	ip, r4, r0
   1b7d2:	bf04      	itt	eq
   1b7d4:	4619      	moveq	r1, r3
   1b7d6:	4610      	moveq	r0, r2
   1b7d8:	bd30      	pop	{r4, r5, pc}
   1b7da:	ea91 0f03 	teq	r1, r3
   1b7de:	bf1e      	ittt	ne
   1b7e0:	2100      	movne	r1, #0
   1b7e2:	2000      	movne	r0, #0
   1b7e4:	bd30      	popne	{r4, r5, pc}
   1b7e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b7ea:	d105      	bne.n	1b7f8 <__adddf3+0x230>
   1b7ec:	0040      	lsls	r0, r0, #1
   1b7ee:	4149      	adcs	r1, r1
   1b7f0:	bf28      	it	cs
   1b7f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b7f6:	bd30      	pop	{r4, r5, pc}
   1b7f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b7fc:	bf3c      	itt	cc
   1b7fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b802:	bd30      	popcc	{r4, r5, pc}
   1b804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b808:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b80c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b810:	f04f 0000 	mov.w	r0, #0
   1b814:	bd30      	pop	{r4, r5, pc}
   1b816:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b81a:	bf1a      	itte	ne
   1b81c:	4619      	movne	r1, r3
   1b81e:	4610      	movne	r0, r2
   1b820:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b824:	bf1c      	itt	ne
   1b826:	460b      	movne	r3, r1
   1b828:	4602      	movne	r2, r0
   1b82a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b82e:	bf06      	itte	eq
   1b830:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b834:	ea91 0f03 	teqeq	r1, r3
   1b838:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b83c:	bd30      	pop	{r4, r5, pc}
   1b83e:	bf00      	nop

0001b840 <__aeabi_ui2d>:
   1b840:	f090 0f00 	teq	r0, #0
   1b844:	bf04      	itt	eq
   1b846:	2100      	moveq	r1, #0
   1b848:	4770      	bxeq	lr
   1b84a:	b530      	push	{r4, r5, lr}
   1b84c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b850:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b854:	f04f 0500 	mov.w	r5, #0
   1b858:	f04f 0100 	mov.w	r1, #0
   1b85c:	e750      	b.n	1b700 <__adddf3+0x138>
   1b85e:	bf00      	nop

0001b860 <__aeabi_i2d>:
   1b860:	f090 0f00 	teq	r0, #0
   1b864:	bf04      	itt	eq
   1b866:	2100      	moveq	r1, #0
   1b868:	4770      	bxeq	lr
   1b86a:	b530      	push	{r4, r5, lr}
   1b86c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b870:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b874:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b878:	bf48      	it	mi
   1b87a:	4240      	negmi	r0, r0
   1b87c:	f04f 0100 	mov.w	r1, #0
   1b880:	e73e      	b.n	1b700 <__adddf3+0x138>
   1b882:	bf00      	nop

0001b884 <__aeabi_f2d>:
   1b884:	0042      	lsls	r2, r0, #1
   1b886:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b88a:	ea4f 0131 	mov.w	r1, r1, rrx
   1b88e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b892:	bf1f      	itttt	ne
   1b894:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b898:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b89c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b8a0:	4770      	bxne	lr
   1b8a2:	f092 0f00 	teq	r2, #0
   1b8a6:	bf14      	ite	ne
   1b8a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b8ac:	4770      	bxeq	lr
   1b8ae:	b530      	push	{r4, r5, lr}
   1b8b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b8b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b8b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b8bc:	e720      	b.n	1b700 <__adddf3+0x138>
   1b8be:	bf00      	nop

0001b8c0 <__aeabi_ul2d>:
   1b8c0:	ea50 0201 	orrs.w	r2, r0, r1
   1b8c4:	bf08      	it	eq
   1b8c6:	4770      	bxeq	lr
   1b8c8:	b530      	push	{r4, r5, lr}
   1b8ca:	f04f 0500 	mov.w	r5, #0
   1b8ce:	e00a      	b.n	1b8e6 <__aeabi_l2d+0x16>

0001b8d0 <__aeabi_l2d>:
   1b8d0:	ea50 0201 	orrs.w	r2, r0, r1
   1b8d4:	bf08      	it	eq
   1b8d6:	4770      	bxeq	lr
   1b8d8:	b530      	push	{r4, r5, lr}
   1b8da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b8de:	d502      	bpl.n	1b8e6 <__aeabi_l2d+0x16>
   1b8e0:	4240      	negs	r0, r0
   1b8e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b8e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b8ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b8ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b8f2:	f43f aedc 	beq.w	1b6ae <__adddf3+0xe6>
   1b8f6:	f04f 0203 	mov.w	r2, #3
   1b8fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b8fe:	bf18      	it	ne
   1b900:	3203      	addne	r2, #3
   1b902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b906:	bf18      	it	ne
   1b908:	3203      	addne	r2, #3
   1b90a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b90e:	f1c2 0320 	rsb	r3, r2, #32
   1b912:	fa00 fc03 	lsl.w	ip, r0, r3
   1b916:	fa20 f002 	lsr.w	r0, r0, r2
   1b91a:	fa01 fe03 	lsl.w	lr, r1, r3
   1b91e:	ea40 000e 	orr.w	r0, r0, lr
   1b922:	fa21 f102 	lsr.w	r1, r1, r2
   1b926:	4414      	add	r4, r2
   1b928:	e6c1      	b.n	1b6ae <__adddf3+0xe6>
   1b92a:	bf00      	nop

0001b92c <__aeabi_dmul>:
   1b92c:	b570      	push	{r4, r5, r6, lr}
   1b92e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b93a:	bf1d      	ittte	ne
   1b93c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b940:	ea94 0f0c 	teqne	r4, ip
   1b944:	ea95 0f0c 	teqne	r5, ip
   1b948:	f000 f8de 	bleq	1bb08 <__aeabi_dmul+0x1dc>
   1b94c:	442c      	add	r4, r5
   1b94e:	ea81 0603 	eor.w	r6, r1, r3
   1b952:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1b956:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1b95a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1b95e:	bf18      	it	ne
   1b960:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1b964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b96c:	d038      	beq.n	1b9e0 <__aeabi_dmul+0xb4>
   1b96e:	fba0 ce02 	umull	ip, lr, r0, r2
   1b972:	f04f 0500 	mov.w	r5, #0
   1b976:	fbe1 e502 	umlal	lr, r5, r1, r2
   1b97a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1b97e:	fbe0 e503 	umlal	lr, r5, r0, r3
   1b982:	f04f 0600 	mov.w	r6, #0
   1b986:	fbe1 5603 	umlal	r5, r6, r1, r3
   1b98a:	f09c 0f00 	teq	ip, #0
   1b98e:	bf18      	it	ne
   1b990:	f04e 0e01 	orrne.w	lr, lr, #1
   1b994:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1b998:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1b99c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1b9a0:	d204      	bcs.n	1b9ac <__aeabi_dmul+0x80>
   1b9a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1b9a6:	416d      	adcs	r5, r5
   1b9a8:	eb46 0606 	adc.w	r6, r6, r6
   1b9ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1b9b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1b9b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1b9b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1b9bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1b9c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b9c4:	bf88      	it	hi
   1b9c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b9ca:	d81e      	bhi.n	1ba0a <__aeabi_dmul+0xde>
   1b9cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1b9d0:	bf08      	it	eq
   1b9d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1b9d6:	f150 0000 	adcs.w	r0, r0, #0
   1b9da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b9de:	bd70      	pop	{r4, r5, r6, pc}
   1b9e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1b9e4:	ea46 0101 	orr.w	r1, r6, r1
   1b9e8:	ea40 0002 	orr.w	r0, r0, r2
   1b9ec:	ea81 0103 	eor.w	r1, r1, r3
   1b9f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1b9f4:	bfc2      	ittt	gt
   1b9f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b9fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b9fe:	bd70      	popgt	{r4, r5, r6, pc}
   1ba00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ba04:	f04f 0e00 	mov.w	lr, #0
   1ba08:	3c01      	subs	r4, #1
   1ba0a:	f300 80ab 	bgt.w	1bb64 <__aeabi_dmul+0x238>
   1ba0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1ba12:	bfde      	ittt	le
   1ba14:	2000      	movle	r0, #0
   1ba16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1ba1a:	bd70      	pople	{r4, r5, r6, pc}
   1ba1c:	f1c4 0400 	rsb	r4, r4, #0
   1ba20:	3c20      	subs	r4, #32
   1ba22:	da35      	bge.n	1ba90 <__aeabi_dmul+0x164>
   1ba24:	340c      	adds	r4, #12
   1ba26:	dc1b      	bgt.n	1ba60 <__aeabi_dmul+0x134>
   1ba28:	f104 0414 	add.w	r4, r4, #20
   1ba2c:	f1c4 0520 	rsb	r5, r4, #32
   1ba30:	fa00 f305 	lsl.w	r3, r0, r5
   1ba34:	fa20 f004 	lsr.w	r0, r0, r4
   1ba38:	fa01 f205 	lsl.w	r2, r1, r5
   1ba3c:	ea40 0002 	orr.w	r0, r0, r2
   1ba40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1ba44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ba48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ba4c:	fa21 f604 	lsr.w	r6, r1, r4
   1ba50:	eb42 0106 	adc.w	r1, r2, r6
   1ba54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ba58:	bf08      	it	eq
   1ba5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ba5e:	bd70      	pop	{r4, r5, r6, pc}
   1ba60:	f1c4 040c 	rsb	r4, r4, #12
   1ba64:	f1c4 0520 	rsb	r5, r4, #32
   1ba68:	fa00 f304 	lsl.w	r3, r0, r4
   1ba6c:	fa20 f005 	lsr.w	r0, r0, r5
   1ba70:	fa01 f204 	lsl.w	r2, r1, r4
   1ba74:	ea40 0002 	orr.w	r0, r0, r2
   1ba78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ba7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ba80:	f141 0100 	adc.w	r1, r1, #0
   1ba84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ba88:	bf08      	it	eq
   1ba8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ba8e:	bd70      	pop	{r4, r5, r6, pc}
   1ba90:	f1c4 0520 	rsb	r5, r4, #32
   1ba94:	fa00 f205 	lsl.w	r2, r0, r5
   1ba98:	ea4e 0e02 	orr.w	lr, lr, r2
   1ba9c:	fa20 f304 	lsr.w	r3, r0, r4
   1baa0:	fa01 f205 	lsl.w	r2, r1, r5
   1baa4:	ea43 0302 	orr.w	r3, r3, r2
   1baa8:	fa21 f004 	lsr.w	r0, r1, r4
   1baac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bab0:	fa21 f204 	lsr.w	r2, r1, r4
   1bab4:	ea20 0002 	bic.w	r0, r0, r2
   1bab8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1babc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bac0:	bf08      	it	eq
   1bac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bac6:	bd70      	pop	{r4, r5, r6, pc}
   1bac8:	f094 0f00 	teq	r4, #0
   1bacc:	d10f      	bne.n	1baee <__aeabi_dmul+0x1c2>
   1bace:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bad2:	0040      	lsls	r0, r0, #1
   1bad4:	eb41 0101 	adc.w	r1, r1, r1
   1bad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1badc:	bf08      	it	eq
   1bade:	3c01      	subeq	r4, #1
   1bae0:	d0f7      	beq.n	1bad2 <__aeabi_dmul+0x1a6>
   1bae2:	ea41 0106 	orr.w	r1, r1, r6
   1bae6:	f095 0f00 	teq	r5, #0
   1baea:	bf18      	it	ne
   1baec:	4770      	bxne	lr
   1baee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1baf2:	0052      	lsls	r2, r2, #1
   1baf4:	eb43 0303 	adc.w	r3, r3, r3
   1baf8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bafc:	bf08      	it	eq
   1bafe:	3d01      	subeq	r5, #1
   1bb00:	d0f7      	beq.n	1baf2 <__aeabi_dmul+0x1c6>
   1bb02:	ea43 0306 	orr.w	r3, r3, r6
   1bb06:	4770      	bx	lr
   1bb08:	ea94 0f0c 	teq	r4, ip
   1bb0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bb10:	bf18      	it	ne
   1bb12:	ea95 0f0c 	teqne	r5, ip
   1bb16:	d00c      	beq.n	1bb32 <__aeabi_dmul+0x206>
   1bb18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bb1c:	bf18      	it	ne
   1bb1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bb22:	d1d1      	bne.n	1bac8 <__aeabi_dmul+0x19c>
   1bb24:	ea81 0103 	eor.w	r1, r1, r3
   1bb28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bb2c:	f04f 0000 	mov.w	r0, #0
   1bb30:	bd70      	pop	{r4, r5, r6, pc}
   1bb32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bb36:	bf06      	itte	eq
   1bb38:	4610      	moveq	r0, r2
   1bb3a:	4619      	moveq	r1, r3
   1bb3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bb40:	d019      	beq.n	1bb76 <__aeabi_dmul+0x24a>
   1bb42:	ea94 0f0c 	teq	r4, ip
   1bb46:	d102      	bne.n	1bb4e <__aeabi_dmul+0x222>
   1bb48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bb4c:	d113      	bne.n	1bb76 <__aeabi_dmul+0x24a>
   1bb4e:	ea95 0f0c 	teq	r5, ip
   1bb52:	d105      	bne.n	1bb60 <__aeabi_dmul+0x234>
   1bb54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bb58:	bf1c      	itt	ne
   1bb5a:	4610      	movne	r0, r2
   1bb5c:	4619      	movne	r1, r3
   1bb5e:	d10a      	bne.n	1bb76 <__aeabi_dmul+0x24a>
   1bb60:	ea81 0103 	eor.w	r1, r1, r3
   1bb64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bb68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bb6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bb70:	f04f 0000 	mov.w	r0, #0
   1bb74:	bd70      	pop	{r4, r5, r6, pc}
   1bb76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bb7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bb7e:	bd70      	pop	{r4, r5, r6, pc}

0001bb80 <__aeabi_ddiv>:
   1bb80:	b570      	push	{r4, r5, r6, lr}
   1bb82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bb86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bb8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bb8e:	bf1d      	ittte	ne
   1bb90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bb94:	ea94 0f0c 	teqne	r4, ip
   1bb98:	ea95 0f0c 	teqne	r5, ip
   1bb9c:	f000 f8a7 	bleq	1bcee <__aeabi_ddiv+0x16e>
   1bba0:	eba4 0405 	sub.w	r4, r4, r5
   1bba4:	ea81 0e03 	eor.w	lr, r1, r3
   1bba8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bbac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bbb0:	f000 8088 	beq.w	1bcc4 <__aeabi_ddiv+0x144>
   1bbb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bbb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1bbbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1bbc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bbc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bbc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bbcc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bbd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1bbd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bbd8:	429d      	cmp	r5, r3
   1bbda:	bf08      	it	eq
   1bbdc:	4296      	cmpeq	r6, r2
   1bbde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1bbe2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bbe6:	d202      	bcs.n	1bbee <__aeabi_ddiv+0x6e>
   1bbe8:	085b      	lsrs	r3, r3, #1
   1bbea:	ea4f 0232 	mov.w	r2, r2, rrx
   1bbee:	1ab6      	subs	r6, r6, r2
   1bbf0:	eb65 0503 	sbc.w	r5, r5, r3
   1bbf4:	085b      	lsrs	r3, r3, #1
   1bbf6:	ea4f 0232 	mov.w	r2, r2, rrx
   1bbfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bbfe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bc02:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc06:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc0a:	bf22      	ittt	cs
   1bc0c:	1ab6      	subcs	r6, r6, r2
   1bc0e:	4675      	movcs	r5, lr
   1bc10:	ea40 000c 	orrcs.w	r0, r0, ip
   1bc14:	085b      	lsrs	r3, r3, #1
   1bc16:	ea4f 0232 	mov.w	r2, r2, rrx
   1bc1a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc22:	bf22      	ittt	cs
   1bc24:	1ab6      	subcs	r6, r6, r2
   1bc26:	4675      	movcs	r5, lr
   1bc28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bc2c:	085b      	lsrs	r3, r3, #1
   1bc2e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bc32:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc36:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc3a:	bf22      	ittt	cs
   1bc3c:	1ab6      	subcs	r6, r6, r2
   1bc3e:	4675      	movcs	r5, lr
   1bc40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bc44:	085b      	lsrs	r3, r3, #1
   1bc46:	ea4f 0232 	mov.w	r2, r2, rrx
   1bc4a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bc4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bc52:	bf22      	ittt	cs
   1bc54:	1ab6      	subcs	r6, r6, r2
   1bc56:	4675      	movcs	r5, lr
   1bc58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bc5c:	ea55 0e06 	orrs.w	lr, r5, r6
   1bc60:	d018      	beq.n	1bc94 <__aeabi_ddiv+0x114>
   1bc62:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bc66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bc6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bc6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bc72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bc76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bc7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bc7e:	d1c0      	bne.n	1bc02 <__aeabi_ddiv+0x82>
   1bc80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc84:	d10b      	bne.n	1bc9e <__aeabi_ddiv+0x11e>
   1bc86:	ea41 0100 	orr.w	r1, r1, r0
   1bc8a:	f04f 0000 	mov.w	r0, #0
   1bc8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bc92:	e7b6      	b.n	1bc02 <__aeabi_ddiv+0x82>
   1bc94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc98:	bf04      	itt	eq
   1bc9a:	4301      	orreq	r1, r0
   1bc9c:	2000      	moveq	r0, #0
   1bc9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bca2:	bf88      	it	hi
   1bca4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bca8:	f63f aeaf 	bhi.w	1ba0a <__aeabi_dmul+0xde>
   1bcac:	ebb5 0c03 	subs.w	ip, r5, r3
   1bcb0:	bf04      	itt	eq
   1bcb2:	ebb6 0c02 	subseq.w	ip, r6, r2
   1bcb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bcba:	f150 0000 	adcs.w	r0, r0, #0
   1bcbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bcc2:	bd70      	pop	{r4, r5, r6, pc}
   1bcc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1bcc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1bccc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1bcd0:	bfc2      	ittt	gt
   1bcd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bcd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bcda:	bd70      	popgt	{r4, r5, r6, pc}
   1bcdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bce0:	f04f 0e00 	mov.w	lr, #0
   1bce4:	3c01      	subs	r4, #1
   1bce6:	e690      	b.n	1ba0a <__aeabi_dmul+0xde>
   1bce8:	ea45 0e06 	orr.w	lr, r5, r6
   1bcec:	e68d      	b.n	1ba0a <__aeabi_dmul+0xde>
   1bcee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bcf2:	ea94 0f0c 	teq	r4, ip
   1bcf6:	bf08      	it	eq
   1bcf8:	ea95 0f0c 	teqeq	r5, ip
   1bcfc:	f43f af3b 	beq.w	1bb76 <__aeabi_dmul+0x24a>
   1bd00:	ea94 0f0c 	teq	r4, ip
   1bd04:	d10a      	bne.n	1bd1c <__aeabi_ddiv+0x19c>
   1bd06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bd0a:	f47f af34 	bne.w	1bb76 <__aeabi_dmul+0x24a>
   1bd0e:	ea95 0f0c 	teq	r5, ip
   1bd12:	f47f af25 	bne.w	1bb60 <__aeabi_dmul+0x234>
   1bd16:	4610      	mov	r0, r2
   1bd18:	4619      	mov	r1, r3
   1bd1a:	e72c      	b.n	1bb76 <__aeabi_dmul+0x24a>
   1bd1c:	ea95 0f0c 	teq	r5, ip
   1bd20:	d106      	bne.n	1bd30 <__aeabi_ddiv+0x1b0>
   1bd22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bd26:	f43f aefd 	beq.w	1bb24 <__aeabi_dmul+0x1f8>
   1bd2a:	4610      	mov	r0, r2
   1bd2c:	4619      	mov	r1, r3
   1bd2e:	e722      	b.n	1bb76 <__aeabi_dmul+0x24a>
   1bd30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bd34:	bf18      	it	ne
   1bd36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bd3a:	f47f aec5 	bne.w	1bac8 <__aeabi_dmul+0x19c>
   1bd3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bd42:	f47f af0d 	bne.w	1bb60 <__aeabi_dmul+0x234>
   1bd46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1bd4a:	f47f aeeb 	bne.w	1bb24 <__aeabi_dmul+0x1f8>
   1bd4e:	e712      	b.n	1bb76 <__aeabi_dmul+0x24a>

0001bd50 <__gedf2>:
   1bd50:	f04f 3cff 	mov.w	ip, #4294967295
   1bd54:	e006      	b.n	1bd64 <__cmpdf2+0x4>
   1bd56:	bf00      	nop

0001bd58 <__ledf2>:
   1bd58:	f04f 0c01 	mov.w	ip, #1
   1bd5c:	e002      	b.n	1bd64 <__cmpdf2+0x4>
   1bd5e:	bf00      	nop

0001bd60 <__cmpdf2>:
   1bd60:	f04f 0c01 	mov.w	ip, #1
   1bd64:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bd68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bd6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bd70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bd74:	bf18      	it	ne
   1bd76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1bd7a:	d01b      	beq.n	1bdb4 <__cmpdf2+0x54>
   1bd7c:	b001      	add	sp, #4
   1bd7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1bd82:	bf0c      	ite	eq
   1bd84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bd88:	ea91 0f03 	teqne	r1, r3
   1bd8c:	bf02      	ittt	eq
   1bd8e:	ea90 0f02 	teqeq	r0, r2
   1bd92:	2000      	moveq	r0, #0
   1bd94:	4770      	bxeq	lr
   1bd96:	f110 0f00 	cmn.w	r0, #0
   1bd9a:	ea91 0f03 	teq	r1, r3
   1bd9e:	bf58      	it	pl
   1bda0:	4299      	cmppl	r1, r3
   1bda2:	bf08      	it	eq
   1bda4:	4290      	cmpeq	r0, r2
   1bda6:	bf2c      	ite	cs
   1bda8:	17d8      	asrcs	r0, r3, #31
   1bdaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1bdae:	f040 0001 	orr.w	r0, r0, #1
   1bdb2:	4770      	bx	lr
   1bdb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bdb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bdbc:	d102      	bne.n	1bdc4 <__cmpdf2+0x64>
   1bdbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1bdc2:	d107      	bne.n	1bdd4 <__cmpdf2+0x74>
   1bdc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bdc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bdcc:	d1d6      	bne.n	1bd7c <__cmpdf2+0x1c>
   1bdce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1bdd2:	d0d3      	beq.n	1bd7c <__cmpdf2+0x1c>
   1bdd4:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bdd8:	4770      	bx	lr
   1bdda:	bf00      	nop

0001bddc <__aeabi_cdrcmple>:
   1bddc:	4684      	mov	ip, r0
   1bdde:	4610      	mov	r0, r2
   1bde0:	4662      	mov	r2, ip
   1bde2:	468c      	mov	ip, r1
   1bde4:	4619      	mov	r1, r3
   1bde6:	4663      	mov	r3, ip
   1bde8:	e000      	b.n	1bdec <__aeabi_cdcmpeq>
   1bdea:	bf00      	nop

0001bdec <__aeabi_cdcmpeq>:
   1bdec:	b501      	push	{r0, lr}
   1bdee:	f7ff ffb7 	bl	1bd60 <__cmpdf2>
   1bdf2:	2800      	cmp	r0, #0
   1bdf4:	bf48      	it	mi
   1bdf6:	f110 0f00 	cmnmi.w	r0, #0
   1bdfa:	bd01      	pop	{r0, pc}

0001bdfc <__aeabi_dcmpeq>:
   1bdfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be00:	f7ff fff4 	bl	1bdec <__aeabi_cdcmpeq>
   1be04:	bf0c      	ite	eq
   1be06:	2001      	moveq	r0, #1
   1be08:	2000      	movne	r0, #0
   1be0a:	f85d fb08 	ldr.w	pc, [sp], #8
   1be0e:	bf00      	nop

0001be10 <__aeabi_dcmplt>:
   1be10:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be14:	f7ff ffea 	bl	1bdec <__aeabi_cdcmpeq>
   1be18:	bf34      	ite	cc
   1be1a:	2001      	movcc	r0, #1
   1be1c:	2000      	movcs	r0, #0
   1be1e:	f85d fb08 	ldr.w	pc, [sp], #8
   1be22:	bf00      	nop

0001be24 <__aeabi_dcmple>:
   1be24:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be28:	f7ff ffe0 	bl	1bdec <__aeabi_cdcmpeq>
   1be2c:	bf94      	ite	ls
   1be2e:	2001      	movls	r0, #1
   1be30:	2000      	movhi	r0, #0
   1be32:	f85d fb08 	ldr.w	pc, [sp], #8
   1be36:	bf00      	nop

0001be38 <__aeabi_dcmpge>:
   1be38:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be3c:	f7ff ffce 	bl	1bddc <__aeabi_cdrcmple>
   1be40:	bf94      	ite	ls
   1be42:	2001      	movls	r0, #1
   1be44:	2000      	movhi	r0, #0
   1be46:	f85d fb08 	ldr.w	pc, [sp], #8
   1be4a:	bf00      	nop

0001be4c <__aeabi_dcmpgt>:
   1be4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be50:	f7ff ffc4 	bl	1bddc <__aeabi_cdrcmple>
   1be54:	bf34      	ite	cc
   1be56:	2001      	movcc	r0, #1
   1be58:	2000      	movcs	r0, #0
   1be5a:	f85d fb08 	ldr.w	pc, [sp], #8
   1be5e:	bf00      	nop

0001be60 <__aeabi_d2iz>:
   1be60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1be64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1be68:	d215      	bcs.n	1be96 <__aeabi_d2iz+0x36>
   1be6a:	d511      	bpl.n	1be90 <__aeabi_d2iz+0x30>
   1be6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1be70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1be74:	d912      	bls.n	1be9c <__aeabi_d2iz+0x3c>
   1be76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1be7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1be7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1be82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1be86:	fa23 f002 	lsr.w	r0, r3, r2
   1be8a:	bf18      	it	ne
   1be8c:	4240      	negne	r0, r0
   1be8e:	4770      	bx	lr
   1be90:	f04f 0000 	mov.w	r0, #0
   1be94:	4770      	bx	lr
   1be96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1be9a:	d105      	bne.n	1bea8 <__aeabi_d2iz+0x48>
   1be9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1bea0:	bf08      	it	eq
   1bea2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1bea6:	4770      	bx	lr
   1bea8:	f04f 0000 	mov.w	r0, #0
   1beac:	4770      	bx	lr
   1beae:	bf00      	nop

0001beb0 <__aeabi_d2uiz>:
   1beb0:	004a      	lsls	r2, r1, #1
   1beb2:	d211      	bcs.n	1bed8 <__aeabi_d2uiz+0x28>
   1beb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1beb8:	d211      	bcs.n	1bede <__aeabi_d2uiz+0x2e>
   1beba:	d50d      	bpl.n	1bed8 <__aeabi_d2uiz+0x28>
   1bebc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1bec0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1bec4:	d40e      	bmi.n	1bee4 <__aeabi_d2uiz+0x34>
   1bec6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1beca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1bece:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1bed2:	fa23 f002 	lsr.w	r0, r3, r2
   1bed6:	4770      	bx	lr
   1bed8:	f04f 0000 	mov.w	r0, #0
   1bedc:	4770      	bx	lr
   1bede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1bee2:	d102      	bne.n	1beea <__aeabi_d2uiz+0x3a>
   1bee4:	f04f 30ff 	mov.w	r0, #4294967295
   1bee8:	4770      	bx	lr
   1beea:	f04f 0000 	mov.w	r0, #0
   1beee:	4770      	bx	lr

0001bef0 <__aeabi_d2f>:
   1bef0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1bef4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1bef8:	bf24      	itt	cs
   1befa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1befe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1bf02:	d90d      	bls.n	1bf20 <__aeabi_d2f+0x30>
   1bf04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1bf08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1bf0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1bf10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1bf14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1bf18:	bf08      	it	eq
   1bf1a:	f020 0001 	biceq.w	r0, r0, #1
   1bf1e:	4770      	bx	lr
   1bf20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1bf24:	d121      	bne.n	1bf6a <__aeabi_d2f+0x7a>
   1bf26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1bf2a:	bfbc      	itt	lt
   1bf2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1bf30:	4770      	bxlt	lr
   1bf32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bf36:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1bf3a:	f1c2 0218 	rsb	r2, r2, #24
   1bf3e:	f1c2 0c20 	rsb	ip, r2, #32
   1bf42:	fa10 f30c 	lsls.w	r3, r0, ip
   1bf46:	fa20 f002 	lsr.w	r0, r0, r2
   1bf4a:	bf18      	it	ne
   1bf4c:	f040 0001 	orrne.w	r0, r0, #1
   1bf50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1bf54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1bf58:	fa03 fc0c 	lsl.w	ip, r3, ip
   1bf5c:	ea40 000c 	orr.w	r0, r0, ip
   1bf60:	fa23 f302 	lsr.w	r3, r3, r2
   1bf64:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1bf68:	e7cc      	b.n	1bf04 <__aeabi_d2f+0x14>
   1bf6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1bf6e:	d107      	bne.n	1bf80 <__aeabi_d2f+0x90>
   1bf70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1bf74:	bf1e      	ittt	ne
   1bf76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1bf7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1bf7e:	4770      	bxne	lr
   1bf80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1bf84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1bf88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bf8c:	4770      	bx	lr
   1bf8e:	bf00      	nop

0001bf90 <__aeabi_frsub>:
   1bf90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1bf94:	e002      	b.n	1bf9c <__addsf3>
   1bf96:	bf00      	nop

0001bf98 <__aeabi_fsub>:
   1bf98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001bf9c <__addsf3>:
   1bf9c:	0042      	lsls	r2, r0, #1
   1bf9e:	bf1f      	itttt	ne
   1bfa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1bfa4:	ea92 0f03 	teqne	r2, r3
   1bfa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1bfac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1bfb0:	d06a      	beq.n	1c088 <__addsf3+0xec>
   1bfb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1bfb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1bfba:	bfc1      	itttt	gt
   1bfbc:	18d2      	addgt	r2, r2, r3
   1bfbe:	4041      	eorgt	r1, r0
   1bfc0:	4048      	eorgt	r0, r1
   1bfc2:	4041      	eorgt	r1, r0
   1bfc4:	bfb8      	it	lt
   1bfc6:	425b      	neglt	r3, r3
   1bfc8:	2b19      	cmp	r3, #25
   1bfca:	bf88      	it	hi
   1bfcc:	4770      	bxhi	lr
   1bfce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1bfd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bfd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1bfda:	bf18      	it	ne
   1bfdc:	4240      	negne	r0, r0
   1bfde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bfe2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1bfe6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bfea:	bf18      	it	ne
   1bfec:	4249      	negne	r1, r1
   1bfee:	ea92 0f03 	teq	r2, r3
   1bff2:	d03f      	beq.n	1c074 <__addsf3+0xd8>
   1bff4:	f1a2 0201 	sub.w	r2, r2, #1
   1bff8:	fa41 fc03 	asr.w	ip, r1, r3
   1bffc:	eb10 000c 	adds.w	r0, r0, ip
   1c000:	f1c3 0320 	rsb	r3, r3, #32
   1c004:	fa01 f103 	lsl.w	r1, r1, r3
   1c008:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c00c:	d502      	bpl.n	1c014 <__addsf3+0x78>
   1c00e:	4249      	negs	r1, r1
   1c010:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c014:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c018:	d313      	bcc.n	1c042 <__addsf3+0xa6>
   1c01a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c01e:	d306      	bcc.n	1c02e <__addsf3+0x92>
   1c020:	0840      	lsrs	r0, r0, #1
   1c022:	ea4f 0131 	mov.w	r1, r1, rrx
   1c026:	f102 0201 	add.w	r2, r2, #1
   1c02a:	2afe      	cmp	r2, #254	; 0xfe
   1c02c:	d251      	bcs.n	1c0d2 <__addsf3+0x136>
   1c02e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c032:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c036:	bf08      	it	eq
   1c038:	f020 0001 	biceq.w	r0, r0, #1
   1c03c:	ea40 0003 	orr.w	r0, r0, r3
   1c040:	4770      	bx	lr
   1c042:	0049      	lsls	r1, r1, #1
   1c044:	eb40 0000 	adc.w	r0, r0, r0
   1c048:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c04c:	f1a2 0201 	sub.w	r2, r2, #1
   1c050:	d1ed      	bne.n	1c02e <__addsf3+0x92>
   1c052:	fab0 fc80 	clz	ip, r0
   1c056:	f1ac 0c08 	sub.w	ip, ip, #8
   1c05a:	ebb2 020c 	subs.w	r2, r2, ip
   1c05e:	fa00 f00c 	lsl.w	r0, r0, ip
   1c062:	bfaa      	itet	ge
   1c064:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c068:	4252      	neglt	r2, r2
   1c06a:	4318      	orrge	r0, r3
   1c06c:	bfbc      	itt	lt
   1c06e:	40d0      	lsrlt	r0, r2
   1c070:	4318      	orrlt	r0, r3
   1c072:	4770      	bx	lr
   1c074:	f092 0f00 	teq	r2, #0
   1c078:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c07c:	bf06      	itte	eq
   1c07e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c082:	3201      	addeq	r2, #1
   1c084:	3b01      	subne	r3, #1
   1c086:	e7b5      	b.n	1bff4 <__addsf3+0x58>
   1c088:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c08c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c090:	bf18      	it	ne
   1c092:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c096:	d021      	beq.n	1c0dc <__addsf3+0x140>
   1c098:	ea92 0f03 	teq	r2, r3
   1c09c:	d004      	beq.n	1c0a8 <__addsf3+0x10c>
   1c09e:	f092 0f00 	teq	r2, #0
   1c0a2:	bf08      	it	eq
   1c0a4:	4608      	moveq	r0, r1
   1c0a6:	4770      	bx	lr
   1c0a8:	ea90 0f01 	teq	r0, r1
   1c0ac:	bf1c      	itt	ne
   1c0ae:	2000      	movne	r0, #0
   1c0b0:	4770      	bxne	lr
   1c0b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c0b6:	d104      	bne.n	1c0c2 <__addsf3+0x126>
   1c0b8:	0040      	lsls	r0, r0, #1
   1c0ba:	bf28      	it	cs
   1c0bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c0c0:	4770      	bx	lr
   1c0c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c0c6:	bf3c      	itt	cc
   1c0c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c0cc:	4770      	bxcc	lr
   1c0ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c0d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c0d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c0da:	4770      	bx	lr
   1c0dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c0e0:	bf16      	itet	ne
   1c0e2:	4608      	movne	r0, r1
   1c0e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c0e8:	4601      	movne	r1, r0
   1c0ea:	0242      	lsls	r2, r0, #9
   1c0ec:	bf06      	itte	eq
   1c0ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c0f2:	ea90 0f01 	teqeq	r0, r1
   1c0f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c0fa:	4770      	bx	lr

0001c0fc <__aeabi_ui2f>:
   1c0fc:	f04f 0300 	mov.w	r3, #0
   1c100:	e004      	b.n	1c10c <__aeabi_i2f+0x8>
   1c102:	bf00      	nop

0001c104 <__aeabi_i2f>:
   1c104:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c108:	bf48      	it	mi
   1c10a:	4240      	negmi	r0, r0
   1c10c:	ea5f 0c00 	movs.w	ip, r0
   1c110:	bf08      	it	eq
   1c112:	4770      	bxeq	lr
   1c114:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c118:	4601      	mov	r1, r0
   1c11a:	f04f 0000 	mov.w	r0, #0
   1c11e:	e01c      	b.n	1c15a <__aeabi_l2f+0x2a>

0001c120 <__aeabi_ul2f>:
   1c120:	ea50 0201 	orrs.w	r2, r0, r1
   1c124:	bf08      	it	eq
   1c126:	4770      	bxeq	lr
   1c128:	f04f 0300 	mov.w	r3, #0
   1c12c:	e00a      	b.n	1c144 <__aeabi_l2f+0x14>
   1c12e:	bf00      	nop

0001c130 <__aeabi_l2f>:
   1c130:	ea50 0201 	orrs.w	r2, r0, r1
   1c134:	bf08      	it	eq
   1c136:	4770      	bxeq	lr
   1c138:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c13c:	d502      	bpl.n	1c144 <__aeabi_l2f+0x14>
   1c13e:	4240      	negs	r0, r0
   1c140:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c144:	ea5f 0c01 	movs.w	ip, r1
   1c148:	bf02      	ittt	eq
   1c14a:	4684      	moveq	ip, r0
   1c14c:	4601      	moveq	r1, r0
   1c14e:	2000      	moveq	r0, #0
   1c150:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c154:	bf08      	it	eq
   1c156:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c15a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c15e:	fabc f28c 	clz	r2, ip
   1c162:	3a08      	subs	r2, #8
   1c164:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c168:	db10      	blt.n	1c18c <__aeabi_l2f+0x5c>
   1c16a:	fa01 fc02 	lsl.w	ip, r1, r2
   1c16e:	4463      	add	r3, ip
   1c170:	fa00 fc02 	lsl.w	ip, r0, r2
   1c174:	f1c2 0220 	rsb	r2, r2, #32
   1c178:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c17c:	fa20 f202 	lsr.w	r2, r0, r2
   1c180:	eb43 0002 	adc.w	r0, r3, r2
   1c184:	bf08      	it	eq
   1c186:	f020 0001 	biceq.w	r0, r0, #1
   1c18a:	4770      	bx	lr
   1c18c:	f102 0220 	add.w	r2, r2, #32
   1c190:	fa01 fc02 	lsl.w	ip, r1, r2
   1c194:	f1c2 0220 	rsb	r2, r2, #32
   1c198:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c19c:	fa21 f202 	lsr.w	r2, r1, r2
   1c1a0:	eb43 0002 	adc.w	r0, r3, r2
   1c1a4:	bf08      	it	eq
   1c1a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c1aa:	4770      	bx	lr

0001c1ac <__aeabi_ldivmod>:
   1c1ac:	b97b      	cbnz	r3, 1c1ce <__aeabi_ldivmod+0x22>
   1c1ae:	b972      	cbnz	r2, 1c1ce <__aeabi_ldivmod+0x22>
   1c1b0:	2900      	cmp	r1, #0
   1c1b2:	bfbe      	ittt	lt
   1c1b4:	2000      	movlt	r0, #0
   1c1b6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c1ba:	e006      	blt.n	1c1ca <__aeabi_ldivmod+0x1e>
   1c1bc:	bf08      	it	eq
   1c1be:	2800      	cmpeq	r0, #0
   1c1c0:	bf1c      	itt	ne
   1c1c2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c1c6:	f04f 30ff 	movne.w	r0, #4294967295
   1c1ca:	f001 b979 	b.w	1d4c0 <__aeabi_idiv0>
   1c1ce:	f1ad 0c08 	sub.w	ip, sp, #8
   1c1d2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c1d6:	2900      	cmp	r1, #0
   1c1d8:	db09      	blt.n	1c1ee <__aeabi_ldivmod+0x42>
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	db1a      	blt.n	1c214 <__aeabi_ldivmod+0x68>
   1c1de:	f000 f885 	bl	1c2ec <__udivmoddi4>
   1c1e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c1e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c1ea:	b004      	add	sp, #16
   1c1ec:	4770      	bx	lr
   1c1ee:	4240      	negs	r0, r0
   1c1f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c1f4:	2b00      	cmp	r3, #0
   1c1f6:	db1b      	blt.n	1c230 <__aeabi_ldivmod+0x84>
   1c1f8:	f000 f878 	bl	1c2ec <__udivmoddi4>
   1c1fc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c204:	b004      	add	sp, #16
   1c206:	4240      	negs	r0, r0
   1c208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c20c:	4252      	negs	r2, r2
   1c20e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c212:	4770      	bx	lr
   1c214:	4252      	negs	r2, r2
   1c216:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c21a:	f000 f867 	bl	1c2ec <__udivmoddi4>
   1c21e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c226:	b004      	add	sp, #16
   1c228:	4240      	negs	r0, r0
   1c22a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c22e:	4770      	bx	lr
   1c230:	4252      	negs	r2, r2
   1c232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c236:	f000 f859 	bl	1c2ec <__udivmoddi4>
   1c23a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c242:	b004      	add	sp, #16
   1c244:	4252      	negs	r2, r2
   1c246:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c24a:	4770      	bx	lr

0001c24c <__aeabi_uldivmod>:
   1c24c:	b953      	cbnz	r3, 1c264 <__aeabi_uldivmod+0x18>
   1c24e:	b94a      	cbnz	r2, 1c264 <__aeabi_uldivmod+0x18>
   1c250:	2900      	cmp	r1, #0
   1c252:	bf08      	it	eq
   1c254:	2800      	cmpeq	r0, #0
   1c256:	bf1c      	itt	ne
   1c258:	f04f 31ff 	movne.w	r1, #4294967295
   1c25c:	f04f 30ff 	movne.w	r0, #4294967295
   1c260:	f001 b92e 	b.w	1d4c0 <__aeabi_idiv0>
   1c264:	f1ad 0c08 	sub.w	ip, sp, #8
   1c268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c26c:	f000 f83e 	bl	1c2ec <__udivmoddi4>
   1c270:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c278:	b004      	add	sp, #16
   1c27a:	4770      	bx	lr

0001c27c <__aeabi_f2lz>:
   1c27c:	ee07 0a90 	vmov	s15, r0
   1c280:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c288:	d401      	bmi.n	1c28e <__aeabi_f2lz+0x12>
   1c28a:	f000 b809 	b.w	1c2a0 <__aeabi_f2ulz>
   1c28e:	b508      	push	{r3, lr}
   1c290:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c294:	f000 f804 	bl	1c2a0 <__aeabi_f2ulz>
   1c298:	4240      	negs	r0, r0
   1c29a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c29e:	bd08      	pop	{r3, pc}

0001c2a0 <__aeabi_f2ulz>:
   1c2a0:	b5d0      	push	{r4, r6, r7, lr}
   1c2a2:	f7ff faef 	bl	1b884 <__aeabi_f2d>
   1c2a6:	2200      	movs	r2, #0
   1c2a8:	4b0e      	ldr	r3, [pc, #56]	; (1c2e4 <__aeabi_f2ulz+0x44>)
   1c2aa:	4606      	mov	r6, r0
   1c2ac:	460f      	mov	r7, r1
   1c2ae:	f7ff fb3d 	bl	1b92c <__aeabi_dmul>
   1c2b2:	f7ff fdfd 	bl	1beb0 <__aeabi_d2uiz>
   1c2b6:	4604      	mov	r4, r0
   1c2b8:	f7ff fac2 	bl	1b840 <__aeabi_ui2d>
   1c2bc:	2200      	movs	r2, #0
   1c2be:	4b0a      	ldr	r3, [pc, #40]	; (1c2e8 <__aeabi_f2ulz+0x48>)
   1c2c0:	f7ff fb34 	bl	1b92c <__aeabi_dmul>
   1c2c4:	4602      	mov	r2, r0
   1c2c6:	460b      	mov	r3, r1
   1c2c8:	4630      	mov	r0, r6
   1c2ca:	4639      	mov	r1, r7
   1c2cc:	f7ff f97a 	bl	1b5c4 <__aeabi_dsub>
   1c2d0:	f7ff fdee 	bl	1beb0 <__aeabi_d2uiz>
   1c2d4:	4623      	mov	r3, r4
   1c2d6:	2200      	movs	r2, #0
   1c2d8:	ea42 0200 	orr.w	r2, r2, r0
   1c2dc:	4610      	mov	r0, r2
   1c2de:	4619      	mov	r1, r3
   1c2e0:	bdd0      	pop	{r4, r6, r7, pc}
   1c2e2:	bf00      	nop
   1c2e4:	3df00000 	.word	0x3df00000
   1c2e8:	41f00000 	.word	0x41f00000

0001c2ec <__udivmoddi4>:
   1c2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2f0:	468c      	mov	ip, r1
   1c2f2:	460d      	mov	r5, r1
   1c2f4:	4604      	mov	r4, r0
   1c2f6:	9e08      	ldr	r6, [sp, #32]
   1c2f8:	2b00      	cmp	r3, #0
   1c2fa:	d151      	bne.n	1c3a0 <__udivmoddi4+0xb4>
   1c2fc:	428a      	cmp	r2, r1
   1c2fe:	4617      	mov	r7, r2
   1c300:	d96d      	bls.n	1c3de <__udivmoddi4+0xf2>
   1c302:	fab2 fe82 	clz	lr, r2
   1c306:	f1be 0f00 	cmp.w	lr, #0
   1c30a:	d00b      	beq.n	1c324 <__udivmoddi4+0x38>
   1c30c:	f1ce 0c20 	rsb	ip, lr, #32
   1c310:	fa01 f50e 	lsl.w	r5, r1, lr
   1c314:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c318:	fa02 f70e 	lsl.w	r7, r2, lr
   1c31c:	ea4c 0c05 	orr.w	ip, ip, r5
   1c320:	fa00 f40e 	lsl.w	r4, r0, lr
   1c324:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c328:	0c25      	lsrs	r5, r4, #16
   1c32a:	fbbc f8fa 	udiv	r8, ip, sl
   1c32e:	fa1f f987 	uxth.w	r9, r7
   1c332:	fb0a cc18 	mls	ip, sl, r8, ip
   1c336:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c33a:	fb08 f309 	mul.w	r3, r8, r9
   1c33e:	42ab      	cmp	r3, r5
   1c340:	d90a      	bls.n	1c358 <__udivmoddi4+0x6c>
   1c342:	19ed      	adds	r5, r5, r7
   1c344:	f108 32ff 	add.w	r2, r8, #4294967295
   1c348:	f080 8123 	bcs.w	1c592 <__udivmoddi4+0x2a6>
   1c34c:	42ab      	cmp	r3, r5
   1c34e:	f240 8120 	bls.w	1c592 <__udivmoddi4+0x2a6>
   1c352:	f1a8 0802 	sub.w	r8, r8, #2
   1c356:	443d      	add	r5, r7
   1c358:	1aed      	subs	r5, r5, r3
   1c35a:	b2a4      	uxth	r4, r4
   1c35c:	fbb5 f0fa 	udiv	r0, r5, sl
   1c360:	fb0a 5510 	mls	r5, sl, r0, r5
   1c364:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c368:	fb00 f909 	mul.w	r9, r0, r9
   1c36c:	45a1      	cmp	r9, r4
   1c36e:	d909      	bls.n	1c384 <__udivmoddi4+0x98>
   1c370:	19e4      	adds	r4, r4, r7
   1c372:	f100 33ff 	add.w	r3, r0, #4294967295
   1c376:	f080 810a 	bcs.w	1c58e <__udivmoddi4+0x2a2>
   1c37a:	45a1      	cmp	r9, r4
   1c37c:	f240 8107 	bls.w	1c58e <__udivmoddi4+0x2a2>
   1c380:	3802      	subs	r0, #2
   1c382:	443c      	add	r4, r7
   1c384:	eba4 0409 	sub.w	r4, r4, r9
   1c388:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c38c:	2100      	movs	r1, #0
   1c38e:	2e00      	cmp	r6, #0
   1c390:	d061      	beq.n	1c456 <__udivmoddi4+0x16a>
   1c392:	fa24 f40e 	lsr.w	r4, r4, lr
   1c396:	2300      	movs	r3, #0
   1c398:	6034      	str	r4, [r6, #0]
   1c39a:	6073      	str	r3, [r6, #4]
   1c39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3a0:	428b      	cmp	r3, r1
   1c3a2:	d907      	bls.n	1c3b4 <__udivmoddi4+0xc8>
   1c3a4:	2e00      	cmp	r6, #0
   1c3a6:	d054      	beq.n	1c452 <__udivmoddi4+0x166>
   1c3a8:	2100      	movs	r1, #0
   1c3aa:	e886 0021 	stmia.w	r6, {r0, r5}
   1c3ae:	4608      	mov	r0, r1
   1c3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3b4:	fab3 f183 	clz	r1, r3
   1c3b8:	2900      	cmp	r1, #0
   1c3ba:	f040 808e 	bne.w	1c4da <__udivmoddi4+0x1ee>
   1c3be:	42ab      	cmp	r3, r5
   1c3c0:	d302      	bcc.n	1c3c8 <__udivmoddi4+0xdc>
   1c3c2:	4282      	cmp	r2, r0
   1c3c4:	f200 80fa 	bhi.w	1c5bc <__udivmoddi4+0x2d0>
   1c3c8:	1a84      	subs	r4, r0, r2
   1c3ca:	eb65 0503 	sbc.w	r5, r5, r3
   1c3ce:	2001      	movs	r0, #1
   1c3d0:	46ac      	mov	ip, r5
   1c3d2:	2e00      	cmp	r6, #0
   1c3d4:	d03f      	beq.n	1c456 <__udivmoddi4+0x16a>
   1c3d6:	e886 1010 	stmia.w	r6, {r4, ip}
   1c3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3de:	b912      	cbnz	r2, 1c3e6 <__udivmoddi4+0xfa>
   1c3e0:	2701      	movs	r7, #1
   1c3e2:	fbb7 f7f2 	udiv	r7, r7, r2
   1c3e6:	fab7 fe87 	clz	lr, r7
   1c3ea:	f1be 0f00 	cmp.w	lr, #0
   1c3ee:	d134      	bne.n	1c45a <__udivmoddi4+0x16e>
   1c3f0:	1beb      	subs	r3, r5, r7
   1c3f2:	0c3a      	lsrs	r2, r7, #16
   1c3f4:	fa1f fc87 	uxth.w	ip, r7
   1c3f8:	2101      	movs	r1, #1
   1c3fa:	fbb3 f8f2 	udiv	r8, r3, r2
   1c3fe:	0c25      	lsrs	r5, r4, #16
   1c400:	fb02 3318 	mls	r3, r2, r8, r3
   1c404:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c408:	fb0c f308 	mul.w	r3, ip, r8
   1c40c:	42ab      	cmp	r3, r5
   1c40e:	d907      	bls.n	1c420 <__udivmoddi4+0x134>
   1c410:	19ed      	adds	r5, r5, r7
   1c412:	f108 30ff 	add.w	r0, r8, #4294967295
   1c416:	d202      	bcs.n	1c41e <__udivmoddi4+0x132>
   1c418:	42ab      	cmp	r3, r5
   1c41a:	f200 80d1 	bhi.w	1c5c0 <__udivmoddi4+0x2d4>
   1c41e:	4680      	mov	r8, r0
   1c420:	1aed      	subs	r5, r5, r3
   1c422:	b2a3      	uxth	r3, r4
   1c424:	fbb5 f0f2 	udiv	r0, r5, r2
   1c428:	fb02 5510 	mls	r5, r2, r0, r5
   1c42c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c430:	fb0c fc00 	mul.w	ip, ip, r0
   1c434:	45a4      	cmp	ip, r4
   1c436:	d907      	bls.n	1c448 <__udivmoddi4+0x15c>
   1c438:	19e4      	adds	r4, r4, r7
   1c43a:	f100 33ff 	add.w	r3, r0, #4294967295
   1c43e:	d202      	bcs.n	1c446 <__udivmoddi4+0x15a>
   1c440:	45a4      	cmp	ip, r4
   1c442:	f200 80b8 	bhi.w	1c5b6 <__udivmoddi4+0x2ca>
   1c446:	4618      	mov	r0, r3
   1c448:	eba4 040c 	sub.w	r4, r4, ip
   1c44c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c450:	e79d      	b.n	1c38e <__udivmoddi4+0xa2>
   1c452:	4631      	mov	r1, r6
   1c454:	4630      	mov	r0, r6
   1c456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c45a:	f1ce 0420 	rsb	r4, lr, #32
   1c45e:	fa05 f30e 	lsl.w	r3, r5, lr
   1c462:	fa07 f70e 	lsl.w	r7, r7, lr
   1c466:	fa20 f804 	lsr.w	r8, r0, r4
   1c46a:	0c3a      	lsrs	r2, r7, #16
   1c46c:	fa25 f404 	lsr.w	r4, r5, r4
   1c470:	ea48 0803 	orr.w	r8, r8, r3
   1c474:	fbb4 f1f2 	udiv	r1, r4, r2
   1c478:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c47c:	fb02 4411 	mls	r4, r2, r1, r4
   1c480:	fa1f fc87 	uxth.w	ip, r7
   1c484:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c488:	fb01 f30c 	mul.w	r3, r1, ip
   1c48c:	42ab      	cmp	r3, r5
   1c48e:	fa00 f40e 	lsl.w	r4, r0, lr
   1c492:	d909      	bls.n	1c4a8 <__udivmoddi4+0x1bc>
   1c494:	19ed      	adds	r5, r5, r7
   1c496:	f101 30ff 	add.w	r0, r1, #4294967295
   1c49a:	f080 808a 	bcs.w	1c5b2 <__udivmoddi4+0x2c6>
   1c49e:	42ab      	cmp	r3, r5
   1c4a0:	f240 8087 	bls.w	1c5b2 <__udivmoddi4+0x2c6>
   1c4a4:	3902      	subs	r1, #2
   1c4a6:	443d      	add	r5, r7
   1c4a8:	1aeb      	subs	r3, r5, r3
   1c4aa:	fa1f f588 	uxth.w	r5, r8
   1c4ae:	fbb3 f0f2 	udiv	r0, r3, r2
   1c4b2:	fb02 3310 	mls	r3, r2, r0, r3
   1c4b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c4ba:	fb00 f30c 	mul.w	r3, r0, ip
   1c4be:	42ab      	cmp	r3, r5
   1c4c0:	d907      	bls.n	1c4d2 <__udivmoddi4+0x1e6>
   1c4c2:	19ed      	adds	r5, r5, r7
   1c4c4:	f100 38ff 	add.w	r8, r0, #4294967295
   1c4c8:	d26f      	bcs.n	1c5aa <__udivmoddi4+0x2be>
   1c4ca:	42ab      	cmp	r3, r5
   1c4cc:	d96d      	bls.n	1c5aa <__udivmoddi4+0x2be>
   1c4ce:	3802      	subs	r0, #2
   1c4d0:	443d      	add	r5, r7
   1c4d2:	1aeb      	subs	r3, r5, r3
   1c4d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c4d8:	e78f      	b.n	1c3fa <__udivmoddi4+0x10e>
   1c4da:	f1c1 0720 	rsb	r7, r1, #32
   1c4de:	fa22 f807 	lsr.w	r8, r2, r7
   1c4e2:	408b      	lsls	r3, r1
   1c4e4:	fa05 f401 	lsl.w	r4, r5, r1
   1c4e8:	ea48 0303 	orr.w	r3, r8, r3
   1c4ec:	fa20 fe07 	lsr.w	lr, r0, r7
   1c4f0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c4f4:	40fd      	lsrs	r5, r7
   1c4f6:	ea4e 0e04 	orr.w	lr, lr, r4
   1c4fa:	fbb5 f9fc 	udiv	r9, r5, ip
   1c4fe:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c502:	fb0c 5519 	mls	r5, ip, r9, r5
   1c506:	fa1f f883 	uxth.w	r8, r3
   1c50a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c50e:	fb09 f408 	mul.w	r4, r9, r8
   1c512:	42ac      	cmp	r4, r5
   1c514:	fa02 f201 	lsl.w	r2, r2, r1
   1c518:	fa00 fa01 	lsl.w	sl, r0, r1
   1c51c:	d908      	bls.n	1c530 <__udivmoddi4+0x244>
   1c51e:	18ed      	adds	r5, r5, r3
   1c520:	f109 30ff 	add.w	r0, r9, #4294967295
   1c524:	d243      	bcs.n	1c5ae <__udivmoddi4+0x2c2>
   1c526:	42ac      	cmp	r4, r5
   1c528:	d941      	bls.n	1c5ae <__udivmoddi4+0x2c2>
   1c52a:	f1a9 0902 	sub.w	r9, r9, #2
   1c52e:	441d      	add	r5, r3
   1c530:	1b2d      	subs	r5, r5, r4
   1c532:	fa1f fe8e 	uxth.w	lr, lr
   1c536:	fbb5 f0fc 	udiv	r0, r5, ip
   1c53a:	fb0c 5510 	mls	r5, ip, r0, r5
   1c53e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c542:	fb00 f808 	mul.w	r8, r0, r8
   1c546:	45a0      	cmp	r8, r4
   1c548:	d907      	bls.n	1c55a <__udivmoddi4+0x26e>
   1c54a:	18e4      	adds	r4, r4, r3
   1c54c:	f100 35ff 	add.w	r5, r0, #4294967295
   1c550:	d229      	bcs.n	1c5a6 <__udivmoddi4+0x2ba>
   1c552:	45a0      	cmp	r8, r4
   1c554:	d927      	bls.n	1c5a6 <__udivmoddi4+0x2ba>
   1c556:	3802      	subs	r0, #2
   1c558:	441c      	add	r4, r3
   1c55a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c55e:	eba4 0408 	sub.w	r4, r4, r8
   1c562:	fba0 8902 	umull	r8, r9, r0, r2
   1c566:	454c      	cmp	r4, r9
   1c568:	46c6      	mov	lr, r8
   1c56a:	464d      	mov	r5, r9
   1c56c:	d315      	bcc.n	1c59a <__udivmoddi4+0x2ae>
   1c56e:	d012      	beq.n	1c596 <__udivmoddi4+0x2aa>
   1c570:	b156      	cbz	r6, 1c588 <__udivmoddi4+0x29c>
   1c572:	ebba 030e 	subs.w	r3, sl, lr
   1c576:	eb64 0405 	sbc.w	r4, r4, r5
   1c57a:	fa04 f707 	lsl.w	r7, r4, r7
   1c57e:	40cb      	lsrs	r3, r1
   1c580:	431f      	orrs	r7, r3
   1c582:	40cc      	lsrs	r4, r1
   1c584:	6037      	str	r7, [r6, #0]
   1c586:	6074      	str	r4, [r6, #4]
   1c588:	2100      	movs	r1, #0
   1c58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c58e:	4618      	mov	r0, r3
   1c590:	e6f8      	b.n	1c384 <__udivmoddi4+0x98>
   1c592:	4690      	mov	r8, r2
   1c594:	e6e0      	b.n	1c358 <__udivmoddi4+0x6c>
   1c596:	45c2      	cmp	sl, r8
   1c598:	d2ea      	bcs.n	1c570 <__udivmoddi4+0x284>
   1c59a:	ebb8 0e02 	subs.w	lr, r8, r2
   1c59e:	eb69 0503 	sbc.w	r5, r9, r3
   1c5a2:	3801      	subs	r0, #1
   1c5a4:	e7e4      	b.n	1c570 <__udivmoddi4+0x284>
   1c5a6:	4628      	mov	r0, r5
   1c5a8:	e7d7      	b.n	1c55a <__udivmoddi4+0x26e>
   1c5aa:	4640      	mov	r0, r8
   1c5ac:	e791      	b.n	1c4d2 <__udivmoddi4+0x1e6>
   1c5ae:	4681      	mov	r9, r0
   1c5b0:	e7be      	b.n	1c530 <__udivmoddi4+0x244>
   1c5b2:	4601      	mov	r1, r0
   1c5b4:	e778      	b.n	1c4a8 <__udivmoddi4+0x1bc>
   1c5b6:	3802      	subs	r0, #2
   1c5b8:	443c      	add	r4, r7
   1c5ba:	e745      	b.n	1c448 <__udivmoddi4+0x15c>
   1c5bc:	4608      	mov	r0, r1
   1c5be:	e708      	b.n	1c3d2 <__udivmoddi4+0xe6>
   1c5c0:	f1a8 0802 	sub.w	r8, r8, #2
   1c5c4:	443d      	add	r5, r7
   1c5c6:	e72b      	b.n	1c420 <__udivmoddi4+0x134>

0001c5c8 <selfrel_offset31>:
   1c5c8:	6803      	ldr	r3, [r0, #0]
   1c5ca:	005a      	lsls	r2, r3, #1
   1c5cc:	bf4c      	ite	mi
   1c5ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c5d2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c5d6:	4418      	add	r0, r3
   1c5d8:	4770      	bx	lr
   1c5da:	bf00      	nop

0001c5dc <search_EIT_table>:
   1c5dc:	b361      	cbz	r1, 1c638 <search_EIT_table+0x5c>
   1c5de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5e2:	f101 3aff 	add.w	sl, r1, #4294967295
   1c5e6:	4690      	mov	r8, r2
   1c5e8:	4606      	mov	r6, r0
   1c5ea:	46d1      	mov	r9, sl
   1c5ec:	2700      	movs	r7, #0
   1c5ee:	eb07 0409 	add.w	r4, r7, r9
   1c5f2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c5f6:	1064      	asrs	r4, r4, #1
   1c5f8:	00e5      	lsls	r5, r4, #3
   1c5fa:	1971      	adds	r1, r6, r5
   1c5fc:	4608      	mov	r0, r1
   1c5fe:	f7ff ffe3 	bl	1c5c8 <selfrel_offset31>
   1c602:	45a2      	cmp	sl, r4
   1c604:	4683      	mov	fp, r0
   1c606:	f105 0008 	add.w	r0, r5, #8
   1c60a:	4430      	add	r0, r6
   1c60c:	d009      	beq.n	1c622 <search_EIT_table+0x46>
   1c60e:	f7ff ffdb 	bl	1c5c8 <selfrel_offset31>
   1c612:	45c3      	cmp	fp, r8
   1c614:	f100 30ff 	add.w	r0, r0, #4294967295
   1c618:	d805      	bhi.n	1c626 <search_EIT_table+0x4a>
   1c61a:	4540      	cmp	r0, r8
   1c61c:	d209      	bcs.n	1c632 <search_EIT_table+0x56>
   1c61e:	1c67      	adds	r7, r4, #1
   1c620:	e7e5      	b.n	1c5ee <search_EIT_table+0x12>
   1c622:	45c3      	cmp	fp, r8
   1c624:	d905      	bls.n	1c632 <search_EIT_table+0x56>
   1c626:	42a7      	cmp	r7, r4
   1c628:	d002      	beq.n	1c630 <search_EIT_table+0x54>
   1c62a:	f104 39ff 	add.w	r9, r4, #4294967295
   1c62e:	e7de      	b.n	1c5ee <search_EIT_table+0x12>
   1c630:	2100      	movs	r1, #0
   1c632:	4608      	mov	r0, r1
   1c634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c638:	4608      	mov	r0, r1
   1c63a:	4770      	bx	lr

0001c63c <__gnu_unwind_get_pr_addr>:
   1c63c:	2801      	cmp	r0, #1
   1c63e:	d007      	beq.n	1c650 <__gnu_unwind_get_pr_addr+0x14>
   1c640:	2802      	cmp	r0, #2
   1c642:	d007      	beq.n	1c654 <__gnu_unwind_get_pr_addr+0x18>
   1c644:	4b04      	ldr	r3, [pc, #16]	; (1c658 <__gnu_unwind_get_pr_addr+0x1c>)
   1c646:	2800      	cmp	r0, #0
   1c648:	bf0c      	ite	eq
   1c64a:	4618      	moveq	r0, r3
   1c64c:	2000      	movne	r0, #0
   1c64e:	4770      	bx	lr
   1c650:	4802      	ldr	r0, [pc, #8]	; (1c65c <__gnu_unwind_get_pr_addr+0x20>)
   1c652:	4770      	bx	lr
   1c654:	4802      	ldr	r0, [pc, #8]	; (1c660 <__gnu_unwind_get_pr_addr+0x24>)
   1c656:	4770      	bx	lr
   1c658:	0001cd41 	.word	0x0001cd41
   1c65c:	0001cd45 	.word	0x0001cd45
   1c660:	0001cd49 	.word	0x0001cd49

0001c664 <get_eit_entry>:
   1c664:	b530      	push	{r4, r5, lr}
   1c666:	4b24      	ldr	r3, [pc, #144]	; (1c6f8 <get_eit_entry+0x94>)
   1c668:	b083      	sub	sp, #12
   1c66a:	4604      	mov	r4, r0
   1c66c:	1e8d      	subs	r5, r1, #2
   1c66e:	b37b      	cbz	r3, 1c6d0 <get_eit_entry+0x6c>
   1c670:	a901      	add	r1, sp, #4
   1c672:	4628      	mov	r0, r5
   1c674:	f3af 8000 	nop.w
   1c678:	b320      	cbz	r0, 1c6c4 <get_eit_entry+0x60>
   1c67a:	9901      	ldr	r1, [sp, #4]
   1c67c:	462a      	mov	r2, r5
   1c67e:	f7ff ffad 	bl	1c5dc <search_EIT_table>
   1c682:	4601      	mov	r1, r0
   1c684:	b1f0      	cbz	r0, 1c6c4 <get_eit_entry+0x60>
   1c686:	f7ff ff9f 	bl	1c5c8 <selfrel_offset31>
   1c68a:	684b      	ldr	r3, [r1, #4]
   1c68c:	64a0      	str	r0, [r4, #72]	; 0x48
   1c68e:	2b01      	cmp	r3, #1
   1c690:	d012      	beq.n	1c6b8 <get_eit_entry+0x54>
   1c692:	2b00      	cmp	r3, #0
   1c694:	f101 0004 	add.w	r0, r1, #4
   1c698:	db20      	blt.n	1c6dc <get_eit_entry+0x78>
   1c69a:	f7ff ff95 	bl	1c5c8 <selfrel_offset31>
   1c69e:	2300      	movs	r3, #0
   1c6a0:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c6a2:	6523      	str	r3, [r4, #80]	; 0x50
   1c6a4:	6803      	ldr	r3, [r0, #0]
   1c6a6:	2b00      	cmp	r3, #0
   1c6a8:	db1c      	blt.n	1c6e4 <get_eit_entry+0x80>
   1c6aa:	f7ff ff8d 	bl	1c5c8 <selfrel_offset31>
   1c6ae:	2300      	movs	r3, #0
   1c6b0:	6120      	str	r0, [r4, #16]
   1c6b2:	4618      	mov	r0, r3
   1c6b4:	b003      	add	sp, #12
   1c6b6:	bd30      	pop	{r4, r5, pc}
   1c6b8:	2300      	movs	r3, #0
   1c6ba:	6123      	str	r3, [r4, #16]
   1c6bc:	2305      	movs	r3, #5
   1c6be:	4618      	mov	r0, r3
   1c6c0:	b003      	add	sp, #12
   1c6c2:	bd30      	pop	{r4, r5, pc}
   1c6c4:	2300      	movs	r3, #0
   1c6c6:	6123      	str	r3, [r4, #16]
   1c6c8:	2309      	movs	r3, #9
   1c6ca:	4618      	mov	r0, r3
   1c6cc:	b003      	add	sp, #12
   1c6ce:	bd30      	pop	{r4, r5, pc}
   1c6d0:	490a      	ldr	r1, [pc, #40]	; (1c6fc <get_eit_entry+0x98>)
   1c6d2:	480b      	ldr	r0, [pc, #44]	; (1c700 <get_eit_entry+0x9c>)
   1c6d4:	1a09      	subs	r1, r1, r0
   1c6d6:	10c9      	asrs	r1, r1, #3
   1c6d8:	9101      	str	r1, [sp, #4]
   1c6da:	e7cf      	b.n	1c67c <get_eit_entry+0x18>
   1c6dc:	2301      	movs	r3, #1
   1c6de:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c6e0:	6523      	str	r3, [r4, #80]	; 0x50
   1c6e2:	e7df      	b.n	1c6a4 <get_eit_entry+0x40>
   1c6e4:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c6e8:	f7ff ffa8 	bl	1c63c <__gnu_unwind_get_pr_addr>
   1c6ec:	2800      	cmp	r0, #0
   1c6ee:	6120      	str	r0, [r4, #16]
   1c6f0:	bf14      	ite	ne
   1c6f2:	2300      	movne	r3, #0
   1c6f4:	2309      	moveq	r3, #9
   1c6f6:	e7dc      	b.n	1c6b2 <get_eit_entry+0x4e>
   1c6f8:	00000000 	.word	0x00000000
   1c6fc:	00024f1c 	.word	0x00024f1c
   1c700:	00024d94 	.word	0x00024d94

0001c704 <restore_non_core_regs>:
   1c704:	6803      	ldr	r3, [r0, #0]
   1c706:	07da      	lsls	r2, r3, #31
   1c708:	b510      	push	{r4, lr}
   1c70a:	4604      	mov	r4, r0
   1c70c:	d406      	bmi.n	1c71c <restore_non_core_regs+0x18>
   1c70e:	079b      	lsls	r3, r3, #30
   1c710:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c714:	d509      	bpl.n	1c72a <restore_non_core_regs+0x26>
   1c716:	f000 fc51 	bl	1cfbc <__gnu_Unwind_Restore_VFP_D>
   1c71a:	6823      	ldr	r3, [r4, #0]
   1c71c:	0759      	lsls	r1, r3, #29
   1c71e:	d509      	bpl.n	1c734 <restore_non_core_regs+0x30>
   1c720:	071a      	lsls	r2, r3, #28
   1c722:	d50e      	bpl.n	1c742 <restore_non_core_regs+0x3e>
   1c724:	06db      	lsls	r3, r3, #27
   1c726:	d513      	bpl.n	1c750 <restore_non_core_regs+0x4c>
   1c728:	bd10      	pop	{r4, pc}
   1c72a:	f000 fc3f 	bl	1cfac <__gnu_Unwind_Restore_VFP>
   1c72e:	6823      	ldr	r3, [r4, #0]
   1c730:	0759      	lsls	r1, r3, #29
   1c732:	d4f5      	bmi.n	1c720 <restore_non_core_regs+0x1c>
   1c734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c738:	f000 fc48 	bl	1cfcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c73c:	6823      	ldr	r3, [r4, #0]
   1c73e:	071a      	lsls	r2, r3, #28
   1c740:	d4f0      	bmi.n	1c724 <restore_non_core_regs+0x20>
   1c742:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c746:	f000 fc49 	bl	1cfdc <__gnu_Unwind_Restore_WMMXD>
   1c74a:	6823      	ldr	r3, [r4, #0]
   1c74c:	06db      	lsls	r3, r3, #27
   1c74e:	d4eb      	bmi.n	1c728 <restore_non_core_regs+0x24>
   1c750:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c758:	f000 bc84 	b.w	1d064 <__gnu_Unwind_Restore_WMMXC>

0001c75c <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c75c:	6803      	ldr	r3, [r0, #0]
   1c75e:	b103      	cbz	r3, 1c762 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1c760:	4403      	add	r3, r0
   1c762:	4618      	mov	r0, r3
   1c764:	4770      	bx	lr
   1c766:	bf00      	nop

0001c768 <__gnu_unwind_24bit.isra.1>:
   1c768:	2009      	movs	r0, #9
   1c76a:	4770      	bx	lr

0001c76c <_Unwind_DebugHook>:
   1c76c:	4770      	bx	lr
   1c76e:	bf00      	nop

0001c770 <unwind_phase2>:
   1c770:	b570      	push	{r4, r5, r6, lr}
   1c772:	4604      	mov	r4, r0
   1c774:	460d      	mov	r5, r1
   1c776:	e008      	b.n	1c78a <unwind_phase2+0x1a>
   1c778:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1c77a:	6163      	str	r3, [r4, #20]
   1c77c:	462a      	mov	r2, r5
   1c77e:	6923      	ldr	r3, [r4, #16]
   1c780:	4621      	mov	r1, r4
   1c782:	2001      	movs	r0, #1
   1c784:	4798      	blx	r3
   1c786:	2808      	cmp	r0, #8
   1c788:	d108      	bne.n	1c79c <unwind_phase2+0x2c>
   1c78a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c78c:	4620      	mov	r0, r4
   1c78e:	f7ff ff69 	bl	1c664 <get_eit_entry>
   1c792:	4606      	mov	r6, r0
   1c794:	2800      	cmp	r0, #0
   1c796:	d0ef      	beq.n	1c778 <unwind_phase2+0x8>
   1c798:	f000 fe94 	bl	1d4c4 <abort>
   1c79c:	2807      	cmp	r0, #7
   1c79e:	d1fb      	bne.n	1c798 <unwind_phase2+0x28>
   1c7a0:	4630      	mov	r0, r6
   1c7a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c7a4:	f7ff ffe2 	bl	1c76c <_Unwind_DebugHook>
   1c7a8:	1d28      	adds	r0, r5, #4
   1c7aa:	f000 fbf3 	bl	1cf94 <__restore_core_regs>
   1c7ae:	bf00      	nop

0001c7b0 <unwind_phase2_forced>:
   1c7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c7b4:	1d0c      	adds	r4, r1, #4
   1c7b6:	4605      	mov	r5, r0
   1c7b8:	4692      	mov	sl, r2
   1c7ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c7bc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1c7c0:	ae03      	add	r6, sp, #12
   1c7c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c7c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c7c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c7c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c7ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c7cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1c7d0:	ac02      	add	r4, sp, #8
   1c7d2:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1c7d6:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c7da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1c7de:	2300      	movs	r3, #0
   1c7e0:	4628      	mov	r0, r5
   1c7e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c7e4:	6023      	str	r3, [r4, #0]
   1c7e6:	f7ff ff3d 	bl	1c664 <get_eit_entry>
   1c7ea:	f1ba 0f00 	cmp.w	sl, #0
   1c7ee:	4607      	mov	r7, r0
   1c7f0:	bf14      	ite	ne
   1c7f2:	260a      	movne	r6, #10
   1c7f4:	2609      	moveq	r6, #9
   1c7f6:	b17f      	cbz	r7, 1c818 <unwind_phase2_forced+0x68>
   1c7f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c7fa:	f046 0110 	orr.w	r1, r6, #16
   1c7fe:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c802:	462a      	mov	r2, r5
   1c804:	6463      	str	r3, [r4, #68]	; 0x44
   1c806:	2001      	movs	r0, #1
   1c808:	462b      	mov	r3, r5
   1c80a:	47c0      	blx	r8
   1c80c:	bb78      	cbnz	r0, 1c86e <unwind_phase2_forced+0xbe>
   1c80e:	4638      	mov	r0, r7
   1c810:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c818:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c81a:	616b      	str	r3, [r5, #20]
   1c81c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c820:	4621      	mov	r1, r4
   1c822:	a87a      	add	r0, sp, #488	; 0x1e8
   1c824:	f001 fc3c 	bl	1e0a0 <memcpy>
   1c828:	692b      	ldr	r3, [r5, #16]
   1c82a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1c82c:	4629      	mov	r1, r5
   1c82e:	4630      	mov	r0, r6
   1c830:	4798      	blx	r3
   1c832:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1c834:	4682      	mov	sl, r0
   1c836:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c83a:	4631      	mov	r1, r6
   1c83c:	6463      	str	r3, [r4, #68]	; 0x44
   1c83e:	462a      	mov	r2, r5
   1c840:	462b      	mov	r3, r5
   1c842:	2001      	movs	r0, #1
   1c844:	47c0      	blx	r8
   1c846:	b990      	cbnz	r0, 1c86e <unwind_phase2_forced+0xbe>
   1c848:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c84c:	a97a      	add	r1, sp, #488	; 0x1e8
   1c84e:	4620      	mov	r0, r4
   1c850:	f001 fc26 	bl	1e0a0 <memcpy>
   1c854:	f1ba 0f08 	cmp.w	sl, #8
   1c858:	d106      	bne.n	1c868 <unwind_phase2_forced+0xb8>
   1c85a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c85c:	4628      	mov	r0, r5
   1c85e:	f7ff ff01 	bl	1c664 <get_eit_entry>
   1c862:	2609      	movs	r6, #9
   1c864:	4607      	mov	r7, r0
   1c866:	e7c6      	b.n	1c7f6 <unwind_phase2_forced+0x46>
   1c868:	f1ba 0f07 	cmp.w	sl, #7
   1c86c:	d005      	beq.n	1c87a <unwind_phase2_forced+0xca>
   1c86e:	2709      	movs	r7, #9
   1c870:	4638      	mov	r0, r7
   1c872:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c87a:	4638      	mov	r0, r7
   1c87c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c87e:	f7ff ff75 	bl	1c76c <_Unwind_DebugHook>
   1c882:	a803      	add	r0, sp, #12
   1c884:	f000 fb86 	bl	1cf94 <__restore_core_regs>

0001c888 <_Unwind_GetCFA>:
   1c888:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1c88a:	4770      	bx	lr

0001c88c <__gnu_Unwind_RaiseException>:
   1c88c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c88e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1c890:	640b      	str	r3, [r1, #64]	; 0x40
   1c892:	1d0e      	adds	r6, r1, #4
   1c894:	460f      	mov	r7, r1
   1c896:	4604      	mov	r4, r0
   1c898:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c89a:	b0f9      	sub	sp, #484	; 0x1e4
   1c89c:	ad01      	add	r5, sp, #4
   1c89e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c8a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c8a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c8a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c8a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c8a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1c8ac:	f04f 36ff 	mov.w	r6, #4294967295
   1c8b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c8b4:	9600      	str	r6, [sp, #0]
   1c8b6:	e006      	b.n	1c8c6 <__gnu_Unwind_RaiseException+0x3a>
   1c8b8:	6923      	ldr	r3, [r4, #16]
   1c8ba:	466a      	mov	r2, sp
   1c8bc:	4621      	mov	r1, r4
   1c8be:	4798      	blx	r3
   1c8c0:	2808      	cmp	r0, #8
   1c8c2:	4605      	mov	r5, r0
   1c8c4:	d108      	bne.n	1c8d8 <__gnu_Unwind_RaiseException+0x4c>
   1c8c6:	9910      	ldr	r1, [sp, #64]	; 0x40
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	f7ff fecb 	bl	1c664 <get_eit_entry>
   1c8ce:	2800      	cmp	r0, #0
   1c8d0:	d0f2      	beq.n	1c8b8 <__gnu_Unwind_RaiseException+0x2c>
   1c8d2:	2009      	movs	r0, #9
   1c8d4:	b079      	add	sp, #484	; 0x1e4
   1c8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c8d8:	4668      	mov	r0, sp
   1c8da:	f7ff ff13 	bl	1c704 <restore_non_core_regs>
   1c8de:	2d06      	cmp	r5, #6
   1c8e0:	d1f7      	bne.n	1c8d2 <__gnu_Unwind_RaiseException+0x46>
   1c8e2:	4639      	mov	r1, r7
   1c8e4:	4620      	mov	r0, r4
   1c8e6:	f7ff ff43 	bl	1c770 <unwind_phase2>
   1c8ea:	bf00      	nop

0001c8ec <__gnu_Unwind_ForcedUnwind>:
   1c8ec:	b430      	push	{r4, r5}
   1c8ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1c8f0:	60c1      	str	r1, [r0, #12]
   1c8f2:	6182      	str	r2, [r0, #24]
   1c8f4:	4619      	mov	r1, r3
   1c8f6:	641d      	str	r5, [r3, #64]	; 0x40
   1c8f8:	2200      	movs	r2, #0
   1c8fa:	bc30      	pop	{r4, r5}
   1c8fc:	e758      	b.n	1c7b0 <unwind_phase2_forced>
   1c8fe:	bf00      	nop

0001c900 <__gnu_Unwind_Resume>:
   1c900:	b570      	push	{r4, r5, r6, lr}
   1c902:	68c6      	ldr	r6, [r0, #12]
   1c904:	6943      	ldr	r3, [r0, #20]
   1c906:	640b      	str	r3, [r1, #64]	; 0x40
   1c908:	b126      	cbz	r6, 1c914 <__gnu_Unwind_Resume+0x14>
   1c90a:	2201      	movs	r2, #1
   1c90c:	f7ff ff50 	bl	1c7b0 <unwind_phase2_forced>
   1c910:	f000 fdd8 	bl	1d4c4 <abort>
   1c914:	6903      	ldr	r3, [r0, #16]
   1c916:	460a      	mov	r2, r1
   1c918:	4604      	mov	r4, r0
   1c91a:	460d      	mov	r5, r1
   1c91c:	4601      	mov	r1, r0
   1c91e:	2002      	movs	r0, #2
   1c920:	4798      	blx	r3
   1c922:	2807      	cmp	r0, #7
   1c924:	d007      	beq.n	1c936 <__gnu_Unwind_Resume+0x36>
   1c926:	2808      	cmp	r0, #8
   1c928:	d103      	bne.n	1c932 <__gnu_Unwind_Resume+0x32>
   1c92a:	4629      	mov	r1, r5
   1c92c:	4620      	mov	r0, r4
   1c92e:	f7ff ff1f 	bl	1c770 <unwind_phase2>
   1c932:	f000 fdc7 	bl	1d4c4 <abort>
   1c936:	4630      	mov	r0, r6
   1c938:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c93a:	f7ff ff17 	bl	1c76c <_Unwind_DebugHook>
   1c93e:	1d28      	adds	r0, r5, #4
   1c940:	f000 fb28 	bl	1cf94 <__restore_core_regs>

0001c944 <__gnu_Unwind_Resume_or_Rethrow>:
   1c944:	68c2      	ldr	r2, [r0, #12]
   1c946:	b11a      	cbz	r2, 1c950 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1c948:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1c94a:	640a      	str	r2, [r1, #64]	; 0x40
   1c94c:	2200      	movs	r2, #0
   1c94e:	e72f      	b.n	1c7b0 <unwind_phase2_forced>
   1c950:	e79c      	b.n	1c88c <__gnu_Unwind_RaiseException>
   1c952:	bf00      	nop

0001c954 <_Unwind_Complete>:
   1c954:	4770      	bx	lr
   1c956:	bf00      	nop

0001c958 <_Unwind_DeleteException>:
   1c958:	6883      	ldr	r3, [r0, #8]
   1c95a:	b113      	cbz	r3, 1c962 <_Unwind_DeleteException+0xa>
   1c95c:	4601      	mov	r1, r0
   1c95e:	2001      	movs	r0, #1
   1c960:	4718      	bx	r3
   1c962:	4770      	bx	lr

0001c964 <_Unwind_VRS_Get>:
   1c964:	b500      	push	{lr}
   1c966:	2904      	cmp	r1, #4
   1c968:	d807      	bhi.n	1c97a <_Unwind_VRS_Get+0x16>
   1c96a:	e8df f001 	tbb	[pc, r1]
   1c96e:	0903      	.short	0x0903
   1c970:	0906      	.short	0x0906
   1c972:	09          	.byte	0x09
   1c973:	00          	.byte	0x00
   1c974:	b90b      	cbnz	r3, 1c97a <_Unwind_VRS_Get+0x16>
   1c976:	2a0f      	cmp	r2, #15
   1c978:	d905      	bls.n	1c986 <_Unwind_VRS_Get+0x22>
   1c97a:	2002      	movs	r0, #2
   1c97c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c980:	2001      	movs	r0, #1
   1c982:	f85d fb04 	ldr.w	pc, [sp], #4
   1c986:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1c98a:	4618      	mov	r0, r3
   1c98c:	6853      	ldr	r3, [r2, #4]
   1c98e:	9a01      	ldr	r2, [sp, #4]
   1c990:	6013      	str	r3, [r2, #0]
   1c992:	f85d fb04 	ldr.w	pc, [sp], #4
   1c996:	bf00      	nop

0001c998 <_Unwind_GetGR>:
   1c998:	b510      	push	{r4, lr}
   1c99a:	b084      	sub	sp, #16
   1c99c:	2300      	movs	r3, #0
   1c99e:	ac03      	add	r4, sp, #12
   1c9a0:	460a      	mov	r2, r1
   1c9a2:	9400      	str	r4, [sp, #0]
   1c9a4:	4619      	mov	r1, r3
   1c9a6:	f7ff ffdd 	bl	1c964 <_Unwind_VRS_Get>
   1c9aa:	9803      	ldr	r0, [sp, #12]
   1c9ac:	b004      	add	sp, #16
   1c9ae:	bd10      	pop	{r4, pc}

0001c9b0 <_Unwind_VRS_Set>:
   1c9b0:	b500      	push	{lr}
   1c9b2:	2904      	cmp	r1, #4
   1c9b4:	d807      	bhi.n	1c9c6 <_Unwind_VRS_Set+0x16>
   1c9b6:	e8df f001 	tbb	[pc, r1]
   1c9ba:	0903      	.short	0x0903
   1c9bc:	0906      	.short	0x0906
   1c9be:	09          	.byte	0x09
   1c9bf:	00          	.byte	0x00
   1c9c0:	b90b      	cbnz	r3, 1c9c6 <_Unwind_VRS_Set+0x16>
   1c9c2:	2a0f      	cmp	r2, #15
   1c9c4:	d905      	bls.n	1c9d2 <_Unwind_VRS_Set+0x22>
   1c9c6:	2002      	movs	r0, #2
   1c9c8:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9cc:	2001      	movs	r0, #1
   1c9ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9d2:	9901      	ldr	r1, [sp, #4]
   1c9d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1c9d8:	6809      	ldr	r1, [r1, #0]
   1c9da:	6051      	str	r1, [r2, #4]
   1c9dc:	4618      	mov	r0, r3
   1c9de:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9e2:	bf00      	nop

0001c9e4 <_Unwind_SetGR>:
   1c9e4:	b510      	push	{r4, lr}
   1c9e6:	b084      	sub	sp, #16
   1c9e8:	ac04      	add	r4, sp, #16
   1c9ea:	2300      	movs	r3, #0
   1c9ec:	f844 2d04 	str.w	r2, [r4, #-4]!
   1c9f0:	460a      	mov	r2, r1
   1c9f2:	9400      	str	r4, [sp, #0]
   1c9f4:	4619      	mov	r1, r3
   1c9f6:	f7ff ffdb 	bl	1c9b0 <_Unwind_VRS_Set>
   1c9fa:	b004      	add	sp, #16
   1c9fc:	bd10      	pop	{r4, pc}
   1c9fe:	bf00      	nop

0001ca00 <__gnu_Unwind_Backtrace>:
   1ca00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca02:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ca04:	6413      	str	r3, [r2, #64]	; 0x40
   1ca06:	1d15      	adds	r5, r2, #4
   1ca08:	4607      	mov	r7, r0
   1ca0a:	460e      	mov	r6, r1
   1ca0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ca0e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1ca12:	ac17      	add	r4, sp, #92	; 0x5c
   1ca14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ca16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ca18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ca1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ca1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ca1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1ca22:	f04f 35ff 	mov.w	r5, #4294967295
   1ca26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1ca2a:	9516      	str	r5, [sp, #88]	; 0x58
   1ca2c:	e010      	b.n	1ca50 <__gnu_Unwind_Backtrace+0x50>
   1ca2e:	a816      	add	r0, sp, #88	; 0x58
   1ca30:	f7ff ffd8 	bl	1c9e4 <_Unwind_SetGR>
   1ca34:	4631      	mov	r1, r6
   1ca36:	a816      	add	r0, sp, #88	; 0x58
   1ca38:	47b8      	blx	r7
   1ca3a:	aa16      	add	r2, sp, #88	; 0x58
   1ca3c:	4669      	mov	r1, sp
   1ca3e:	b978      	cbnz	r0, 1ca60 <__gnu_Unwind_Backtrace+0x60>
   1ca40:	9b04      	ldr	r3, [sp, #16]
   1ca42:	2008      	movs	r0, #8
   1ca44:	4798      	blx	r3
   1ca46:	2805      	cmp	r0, #5
   1ca48:	4604      	mov	r4, r0
   1ca4a:	d00a      	beq.n	1ca62 <__gnu_Unwind_Backtrace+0x62>
   1ca4c:	2809      	cmp	r0, #9
   1ca4e:	d007      	beq.n	1ca60 <__gnu_Unwind_Backtrace+0x60>
   1ca50:	9926      	ldr	r1, [sp, #152]	; 0x98
   1ca52:	4668      	mov	r0, sp
   1ca54:	f7ff fe06 	bl	1c664 <get_eit_entry>
   1ca58:	466a      	mov	r2, sp
   1ca5a:	210c      	movs	r1, #12
   1ca5c:	2800      	cmp	r0, #0
   1ca5e:	d0e6      	beq.n	1ca2e <__gnu_Unwind_Backtrace+0x2e>
   1ca60:	2409      	movs	r4, #9
   1ca62:	a816      	add	r0, sp, #88	; 0x58
   1ca64:	f7ff fe4e 	bl	1c704 <restore_non_core_regs>
   1ca68:	4620      	mov	r0, r4
   1ca6a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1ca6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ca70 <__gnu_unwind_pr_common>:
   1ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca74:	460d      	mov	r5, r1
   1ca76:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1ca78:	b08b      	sub	sp, #44	; 0x2c
   1ca7a:	1d0c      	adds	r4, r1, #4
   1ca7c:	6809      	ldr	r1, [r1, #0]
   1ca7e:	9107      	str	r1, [sp, #28]
   1ca80:	4691      	mov	r9, r2
   1ca82:	9408      	str	r4, [sp, #32]
   1ca84:	f000 0b03 	and.w	fp, r0, #3
   1ca88:	461e      	mov	r6, r3
   1ca8a:	2b00      	cmp	r3, #0
   1ca8c:	d160      	bne.n	1cb50 <__gnu_unwind_pr_common+0xe0>
   1ca8e:	0209      	lsls	r1, r1, #8
   1ca90:	2303      	movs	r3, #3
   1ca92:	9107      	str	r1, [sp, #28]
   1ca94:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1ca98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ca9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ca9e:	f1bb 0f02 	cmp.w	fp, #2
   1caa2:	bf08      	it	eq
   1caa4:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1caa6:	f013 0301 	ands.w	r3, r3, #1
   1caaa:	d140      	bne.n	1cb2e <__gnu_unwind_pr_common+0xbe>
   1caac:	9301      	str	r3, [sp, #4]
   1caae:	f000 0308 	and.w	r3, r0, #8
   1cab2:	9303      	str	r3, [sp, #12]
   1cab4:	f8d4 8000 	ldr.w	r8, [r4]
   1cab8:	f1b8 0f00 	cmp.w	r8, #0
   1cabc:	d039      	beq.n	1cb32 <__gnu_unwind_pr_common+0xc2>
   1cabe:	2e02      	cmp	r6, #2
   1cac0:	d043      	beq.n	1cb4a <__gnu_unwind_pr_common+0xda>
   1cac2:	f8b4 8000 	ldrh.w	r8, [r4]
   1cac6:	8867      	ldrh	r7, [r4, #2]
   1cac8:	3404      	adds	r4, #4
   1caca:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cacc:	f027 0a01 	bic.w	sl, r7, #1
   1cad0:	210f      	movs	r1, #15
   1cad2:	4648      	mov	r0, r9
   1cad4:	449a      	add	sl, r3
   1cad6:	f7ff ff5f 	bl	1c998 <_Unwind_GetGR>
   1cada:	4582      	cmp	sl, r0
   1cadc:	d833      	bhi.n	1cb46 <__gnu_unwind_pr_common+0xd6>
   1cade:	f028 0301 	bic.w	r3, r8, #1
   1cae2:	449a      	add	sl, r3
   1cae4:	4550      	cmp	r0, sl
   1cae6:	bf2c      	ite	cs
   1cae8:	2000      	movcs	r0, #0
   1caea:	2001      	movcc	r0, #1
   1caec:	007f      	lsls	r7, r7, #1
   1caee:	f007 0702 	and.w	r7, r7, #2
   1caf2:	f008 0801 	and.w	r8, r8, #1
   1caf6:	ea47 0708 	orr.w	r7, r7, r8
   1cafa:	2f01      	cmp	r7, #1
   1cafc:	d03e      	beq.n	1cb7c <__gnu_unwind_pr_common+0x10c>
   1cafe:	d335      	bcc.n	1cb6c <__gnu_unwind_pr_common+0xfc>
   1cb00:	2f02      	cmp	r7, #2
   1cb02:	d11c      	bne.n	1cb3e <__gnu_unwind_pr_common+0xce>
   1cb04:	6823      	ldr	r3, [r4, #0]
   1cb06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1cb0a:	9202      	str	r2, [sp, #8]
   1cb0c:	f1bb 0f00 	cmp.w	fp, #0
   1cb10:	d176      	bne.n	1cc00 <__gnu_unwind_pr_common+0x190>
   1cb12:	b128      	cbz	r0, 1cb20 <__gnu_unwind_pr_common+0xb0>
   1cb14:	9903      	ldr	r1, [sp, #12]
   1cb16:	2900      	cmp	r1, #0
   1cb18:	d07e      	beq.n	1cc18 <__gnu_unwind_pr_common+0x1a8>
   1cb1a:	2a00      	cmp	r2, #0
   1cb1c:	f000 80a6 	beq.w	1cc6c <__gnu_unwind_pr_common+0x1fc>
   1cb20:	2b00      	cmp	r3, #0
   1cb22:	db77      	blt.n	1cc14 <__gnu_unwind_pr_common+0x1a4>
   1cb24:	9b02      	ldr	r3, [sp, #8]
   1cb26:	3301      	adds	r3, #1
   1cb28:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1cb2c:	e7c2      	b.n	1cab4 <__gnu_unwind_pr_common+0x44>
   1cb2e:	2300      	movs	r3, #0
   1cb30:	9301      	str	r3, [sp, #4]
   1cb32:	2e02      	cmp	r6, #2
   1cb34:	dd3e      	ble.n	1cbb4 <__gnu_unwind_pr_common+0x144>
   1cb36:	f7ff fe17 	bl	1c768 <__gnu_unwind_24bit.isra.1>
   1cb3a:	2800      	cmp	r0, #0
   1cb3c:	d040      	beq.n	1cbc0 <__gnu_unwind_pr_common+0x150>
   1cb3e:	2009      	movs	r0, #9
   1cb40:	b00b      	add	sp, #44	; 0x2c
   1cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb46:	2000      	movs	r0, #0
   1cb48:	e7d0      	b.n	1caec <__gnu_unwind_pr_common+0x7c>
   1cb4a:	6867      	ldr	r7, [r4, #4]
   1cb4c:	3408      	adds	r4, #8
   1cb4e:	e7bc      	b.n	1caca <__gnu_unwind_pr_common+0x5a>
   1cb50:	2b02      	cmp	r3, #2
   1cb52:	dca3      	bgt.n	1ca9c <__gnu_unwind_pr_common+0x2c>
   1cb54:	0c0b      	lsrs	r3, r1, #16
   1cb56:	b2da      	uxtb	r2, r3
   1cb58:	0409      	lsls	r1, r1, #16
   1cb5a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1cb5e:	2302      	movs	r3, #2
   1cb60:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1cb64:	9107      	str	r1, [sp, #28]
   1cb66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cb6a:	e797      	b.n	1ca9c <__gnu_unwind_pr_common+0x2c>
   1cb6c:	f1bb 0f00 	cmp.w	fp, #0
   1cb70:	d002      	beq.n	1cb78 <__gnu_unwind_pr_common+0x108>
   1cb72:	2800      	cmp	r0, #0
   1cb74:	f040 80bd 	bne.w	1ccf2 <__gnu_unwind_pr_common+0x282>
   1cb78:	3404      	adds	r4, #4
   1cb7a:	e79b      	b.n	1cab4 <__gnu_unwind_pr_common+0x44>
   1cb7c:	f1bb 0f00 	cmp.w	fp, #0
   1cb80:	d125      	bne.n	1cbce <__gnu_unwind_pr_common+0x15e>
   1cb82:	b1a8      	cbz	r0, 1cbb0 <__gnu_unwind_pr_common+0x140>
   1cb84:	e894 000c 	ldmia.w	r4, {r2, r3}
   1cb88:	1c99      	adds	r1, r3, #2
   1cb8a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1cb8e:	d0d6      	beq.n	1cb3e <__gnu_unwind_pr_common+0xce>
   1cb90:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1cb94:	3301      	adds	r3, #1
   1cb96:	9106      	str	r1, [sp, #24]
   1cb98:	f000 80a3 	beq.w	1cce2 <__gnu_unwind_pr_common+0x272>
   1cb9c:	1d20      	adds	r0, r4, #4
   1cb9e:	f7ff fddd 	bl	1c75c <_Unwind_decode_typeinfo_ptr.isra.0>
   1cba2:	ab06      	add	r3, sp, #24
   1cba4:	4601      	mov	r1, r0
   1cba6:	4628      	mov	r0, r5
   1cba8:	f7f6 fe00 	bl	137ac <__cxa_type_match>
   1cbac:	2800      	cmp	r0, #0
   1cbae:	d177      	bne.n	1cca0 <__gnu_unwind_pr_common+0x230>
   1cbb0:	3408      	adds	r4, #8
   1cbb2:	e77f      	b.n	1cab4 <__gnu_unwind_pr_common+0x44>
   1cbb4:	a907      	add	r1, sp, #28
   1cbb6:	4648      	mov	r0, r9
   1cbb8:	f000 faee 	bl	1d198 <__gnu_unwind_execute>
   1cbbc:	2800      	cmp	r0, #0
   1cbbe:	d1be      	bne.n	1cb3e <__gnu_unwind_pr_common+0xce>
   1cbc0:	9b01      	ldr	r3, [sp, #4]
   1cbc2:	2b00      	cmp	r3, #0
   1cbc4:	d15c      	bne.n	1cc80 <__gnu_unwind_pr_common+0x210>
   1cbc6:	2008      	movs	r0, #8
   1cbc8:	b00b      	add	sp, #44	; 0x2c
   1cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbce:	210d      	movs	r1, #13
   1cbd0:	4648      	mov	r0, r9
   1cbd2:	6a2f      	ldr	r7, [r5, #32]
   1cbd4:	f7ff fee0 	bl	1c998 <_Unwind_GetGR>
   1cbd8:	4287      	cmp	r7, r0
   1cbda:	d1e9      	bne.n	1cbb0 <__gnu_unwind_pr_common+0x140>
   1cbdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cbde:	429c      	cmp	r4, r3
   1cbe0:	d1e6      	bne.n	1cbb0 <__gnu_unwind_pr_common+0x140>
   1cbe2:	4620      	mov	r0, r4
   1cbe4:	f7ff fcf0 	bl	1c5c8 <selfrel_offset31>
   1cbe8:	210f      	movs	r1, #15
   1cbea:	4602      	mov	r2, r0
   1cbec:	4648      	mov	r0, r9
   1cbee:	f7ff fef9 	bl	1c9e4 <_Unwind_SetGR>
   1cbf2:	4648      	mov	r0, r9
   1cbf4:	462a      	mov	r2, r5
   1cbf6:	2100      	movs	r1, #0
   1cbf8:	f7ff fef4 	bl	1c9e4 <_Unwind_SetGR>
   1cbfc:	2007      	movs	r0, #7
   1cbfe:	e79f      	b.n	1cb40 <__gnu_unwind_pr_common+0xd0>
   1cc00:	210d      	movs	r1, #13
   1cc02:	4648      	mov	r0, r9
   1cc04:	6a2f      	ldr	r7, [r5, #32]
   1cc06:	f7ff fec7 	bl	1c998 <_Unwind_GetGR>
   1cc0a:	4287      	cmp	r7, r0
   1cc0c:	d058      	beq.n	1ccc0 <__gnu_unwind_pr_common+0x250>
   1cc0e:	6823      	ldr	r3, [r4, #0]
   1cc10:	2b00      	cmp	r3, #0
   1cc12:	da87      	bge.n	1cb24 <__gnu_unwind_pr_common+0xb4>
   1cc14:	3404      	adds	r4, #4
   1cc16:	e785      	b.n	1cb24 <__gnu_unwind_pr_common+0xb4>
   1cc18:	9b02      	ldr	r3, [sp, #8]
   1cc1a:	b33b      	cbz	r3, 1cc6c <__gnu_unwind_pr_common+0x1fc>
   1cc1c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cc20:	1d27      	adds	r7, r4, #4
   1cc22:	f8cd b010 	str.w	fp, [sp, #16]
   1cc26:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cc2a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cc2e:	9605      	str	r6, [sp, #20]
   1cc30:	46a3      	mov	fp, r4
   1cc32:	461c      	mov	r4, r3
   1cc34:	e002      	b.n	1cc3c <__gnu_unwind_pr_common+0x1cc>
   1cc36:	45b2      	cmp	sl, r6
   1cc38:	46b0      	mov	r8, r6
   1cc3a:	d016      	beq.n	1cc6a <__gnu_unwind_pr_common+0x1fa>
   1cc3c:	4638      	mov	r0, r7
   1cc3e:	9406      	str	r4, [sp, #24]
   1cc40:	f7ff fd8c 	bl	1c75c <_Unwind_decode_typeinfo_ptr.isra.0>
   1cc44:	ab06      	add	r3, sp, #24
   1cc46:	4601      	mov	r1, r0
   1cc48:	2200      	movs	r2, #0
   1cc4a:	4628      	mov	r0, r5
   1cc4c:	f7f6 fdae 	bl	137ac <__cxa_type_match>
   1cc50:	f108 0601 	add.w	r6, r8, #1
   1cc54:	3704      	adds	r7, #4
   1cc56:	2800      	cmp	r0, #0
   1cc58:	d0ed      	beq.n	1cc36 <__gnu_unwind_pr_common+0x1c6>
   1cc5a:	9b02      	ldr	r3, [sp, #8]
   1cc5c:	9e05      	ldr	r6, [sp, #20]
   1cc5e:	4543      	cmp	r3, r8
   1cc60:	465c      	mov	r4, fp
   1cc62:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cc66:	d1d2      	bne.n	1cc0e <__gnu_unwind_pr_common+0x19e>
   1cc68:	e000      	b.n	1cc6c <__gnu_unwind_pr_common+0x1fc>
   1cc6a:	465c      	mov	r4, fp
   1cc6c:	4648      	mov	r0, r9
   1cc6e:	210d      	movs	r1, #13
   1cc70:	f7ff fe92 	bl	1c998 <_Unwind_GetGR>
   1cc74:	9b06      	ldr	r3, [sp, #24]
   1cc76:	6228      	str	r0, [r5, #32]
   1cc78:	62ac      	str	r4, [r5, #40]	; 0x28
   1cc7a:	626b      	str	r3, [r5, #36]	; 0x24
   1cc7c:	2006      	movs	r0, #6
   1cc7e:	e75f      	b.n	1cb40 <__gnu_unwind_pr_common+0xd0>
   1cc80:	210f      	movs	r1, #15
   1cc82:	4648      	mov	r0, r9
   1cc84:	f7ff fe88 	bl	1c998 <_Unwind_GetGR>
   1cc88:	210e      	movs	r1, #14
   1cc8a:	4602      	mov	r2, r0
   1cc8c:	4648      	mov	r0, r9
   1cc8e:	f7ff fea9 	bl	1c9e4 <_Unwind_SetGR>
   1cc92:	4648      	mov	r0, r9
   1cc94:	4a29      	ldr	r2, [pc, #164]	; (1cd3c <__gnu_unwind_pr_common+0x2cc>)
   1cc96:	210f      	movs	r1, #15
   1cc98:	f7ff fea4 	bl	1c9e4 <_Unwind_SetGR>
   1cc9c:	2007      	movs	r0, #7
   1cc9e:	e74f      	b.n	1cb40 <__gnu_unwind_pr_common+0xd0>
   1cca0:	4607      	mov	r7, r0
   1cca2:	210d      	movs	r1, #13
   1cca4:	4648      	mov	r0, r9
   1cca6:	f7ff fe77 	bl	1c998 <_Unwind_GetGR>
   1ccaa:	2f02      	cmp	r7, #2
   1ccac:	6228      	str	r0, [r5, #32]
   1ccae:	d11d      	bne.n	1ccec <__gnu_unwind_pr_common+0x27c>
   1ccb0:	462b      	mov	r3, r5
   1ccb2:	9a06      	ldr	r2, [sp, #24]
   1ccb4:	f843 2f2c 	str.w	r2, [r3, #44]!
   1ccb8:	626b      	str	r3, [r5, #36]	; 0x24
   1ccba:	62ac      	str	r4, [r5, #40]	; 0x28
   1ccbc:	2006      	movs	r0, #6
   1ccbe:	e73f      	b.n	1cb40 <__gnu_unwind_pr_common+0xd0>
   1ccc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ccc2:	429c      	cmp	r4, r3
   1ccc4:	d1a3      	bne.n	1cc0e <__gnu_unwind_pr_common+0x19e>
   1ccc6:	2204      	movs	r2, #4
   1ccc8:	2700      	movs	r7, #0
   1ccca:	18a3      	adds	r3, r4, r2
   1cccc:	9902      	ldr	r1, [sp, #8]
   1ccce:	62a9      	str	r1, [r5, #40]	; 0x28
   1ccd0:	62ef      	str	r7, [r5, #44]	; 0x2c
   1ccd2:	632a      	str	r2, [r5, #48]	; 0x30
   1ccd4:	636b      	str	r3, [r5, #52]	; 0x34
   1ccd6:	6823      	ldr	r3, [r4, #0]
   1ccd8:	42bb      	cmp	r3, r7
   1ccda:	db1d      	blt.n	1cd18 <__gnu_unwind_pr_common+0x2a8>
   1ccdc:	2301      	movs	r3, #1
   1ccde:	9301      	str	r3, [sp, #4]
   1cce0:	e720      	b.n	1cb24 <__gnu_unwind_pr_common+0xb4>
   1cce2:	4648      	mov	r0, r9
   1cce4:	210d      	movs	r1, #13
   1cce6:	f7ff fe57 	bl	1c998 <_Unwind_GetGR>
   1ccea:	6228      	str	r0, [r5, #32]
   1ccec:	9b06      	ldr	r3, [sp, #24]
   1ccee:	626b      	str	r3, [r5, #36]	; 0x24
   1ccf0:	e7e3      	b.n	1ccba <__gnu_unwind_pr_common+0x24a>
   1ccf2:	4620      	mov	r0, r4
   1ccf4:	f7ff fc68 	bl	1c5c8 <selfrel_offset31>
   1ccf8:	3404      	adds	r4, #4
   1ccfa:	4606      	mov	r6, r0
   1ccfc:	63ac      	str	r4, [r5, #56]	; 0x38
   1ccfe:	4628      	mov	r0, r5
   1cd00:	f7f6 fdb0 	bl	13864 <__cxa_begin_cleanup>
   1cd04:	2800      	cmp	r0, #0
   1cd06:	f43f af1a 	beq.w	1cb3e <__gnu_unwind_pr_common+0xce>
   1cd0a:	4648      	mov	r0, r9
   1cd0c:	4632      	mov	r2, r6
   1cd0e:	210f      	movs	r1, #15
   1cd10:	f7ff fe68 	bl	1c9e4 <_Unwind_SetGR>
   1cd14:	2007      	movs	r0, #7
   1cd16:	e713      	b.n	1cb40 <__gnu_unwind_pr_common+0xd0>
   1cd18:	4608      	mov	r0, r1
   1cd1a:	3001      	adds	r0, #1
   1cd1c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1cd20:	f7ff fc52 	bl	1c5c8 <selfrel_offset31>
   1cd24:	210f      	movs	r1, #15
   1cd26:	4602      	mov	r2, r0
   1cd28:	4648      	mov	r0, r9
   1cd2a:	f7ff fe5b 	bl	1c9e4 <_Unwind_SetGR>
   1cd2e:	4648      	mov	r0, r9
   1cd30:	462a      	mov	r2, r5
   1cd32:	4639      	mov	r1, r7
   1cd34:	f7ff fe56 	bl	1c9e4 <_Unwind_SetGR>
   1cd38:	2007      	movs	r0, #7
   1cd3a:	e701      	b.n	1cb40 <__gnu_unwind_pr_common+0xd0>
   1cd3c:	00013995 	.word	0x00013995

0001cd40 <__aeabi_unwind_cpp_pr0>:
   1cd40:	2300      	movs	r3, #0
   1cd42:	e695      	b.n	1ca70 <__gnu_unwind_pr_common>

0001cd44 <__aeabi_unwind_cpp_pr1>:
   1cd44:	2301      	movs	r3, #1
   1cd46:	e693      	b.n	1ca70 <__gnu_unwind_pr_common>

0001cd48 <__aeabi_unwind_cpp_pr2>:
   1cd48:	2302      	movs	r3, #2
   1cd4a:	e691      	b.n	1ca70 <__gnu_unwind_pr_common>

0001cd4c <_Unwind_VRS_Pop>:
   1cd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd4e:	4604      	mov	r4, r0
   1cd50:	b0c5      	sub	sp, #276	; 0x114
   1cd52:	2904      	cmp	r1, #4
   1cd54:	d80d      	bhi.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1cd56:	e8df f001 	tbb	[pc, r1]
   1cd5a:	0353      	.short	0x0353
   1cd5c:	310c      	.short	0x310c
   1cd5e:	0f          	.byte	0x0f
   1cd5f:	00          	.byte	0x00
   1cd60:	2b01      	cmp	r3, #1
   1cd62:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1cd66:	b295      	uxth	r5, r2
   1cd68:	d162      	bne.n	1ce30 <_Unwind_VRS_Pop+0xe4>
   1cd6a:	1972      	adds	r2, r6, r5
   1cd6c:	2a10      	cmp	r2, #16
   1cd6e:	f240 809b 	bls.w	1cea8 <_Unwind_VRS_Pop+0x15c>
   1cd72:	2002      	movs	r0, #2
   1cd74:	b045      	add	sp, #276	; 0x114
   1cd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd78:	2b00      	cmp	r3, #0
   1cd7a:	d1fa      	bne.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1cd7c:	2a10      	cmp	r2, #16
   1cd7e:	d8f8      	bhi.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1cd80:	6823      	ldr	r3, [r4, #0]
   1cd82:	06d8      	lsls	r0, r3, #27
   1cd84:	f100 80c6 	bmi.w	1cf14 <_Unwind_VRS_Pop+0x1c8>
   1cd88:	ae22      	add	r6, sp, #136	; 0x88
   1cd8a:	4630      	mov	r0, r6
   1cd8c:	9201      	str	r2, [sp, #4]
   1cd8e:	f000 f973 	bl	1d078 <__gnu_Unwind_Save_WMMXC>
   1cd92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cd94:	9a01      	ldr	r2, [sp, #4]
   1cd96:	2300      	movs	r3, #0
   1cd98:	2501      	movs	r5, #1
   1cd9a:	fa05 f103 	lsl.w	r1, r5, r3
   1cd9e:	4211      	tst	r1, r2
   1cda0:	d003      	beq.n	1cdaa <_Unwind_VRS_Pop+0x5e>
   1cda2:	6801      	ldr	r1, [r0, #0]
   1cda4:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1cda8:	3004      	adds	r0, #4
   1cdaa:	3301      	adds	r3, #1
   1cdac:	2b04      	cmp	r3, #4
   1cdae:	d1f4      	bne.n	1cd9a <_Unwind_VRS_Pop+0x4e>
   1cdb0:	63a0      	str	r0, [r4, #56]	; 0x38
   1cdb2:	4630      	mov	r0, r6
   1cdb4:	f000 f956 	bl	1d064 <__gnu_Unwind_Restore_WMMXC>
   1cdb8:	2000      	movs	r0, #0
   1cdba:	e7db      	b.n	1cd74 <_Unwind_VRS_Pop+0x28>
   1cdbc:	2b03      	cmp	r3, #3
   1cdbe:	d1d8      	bne.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1cdc0:	0c15      	lsrs	r5, r2, #16
   1cdc2:	b297      	uxth	r7, r2
   1cdc4:	19eb      	adds	r3, r5, r7
   1cdc6:	2b10      	cmp	r3, #16
   1cdc8:	d8d3      	bhi.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1cdca:	6823      	ldr	r3, [r4, #0]
   1cdcc:	071e      	lsls	r6, r3, #28
   1cdce:	f100 80b5 	bmi.w	1cf3c <_Unwind_VRS_Pop+0x1f0>
   1cdd2:	ae22      	add	r6, sp, #136	; 0x88
   1cdd4:	4630      	mov	r0, r6
   1cdd6:	f000 f923 	bl	1d020 <__gnu_Unwind_Save_WMMXD>
   1cdda:	00ed      	lsls	r5, r5, #3
   1cddc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cdde:	b14f      	cbz	r7, 1cdf4 <_Unwind_VRS_Pop+0xa8>
   1cde0:	3d04      	subs	r5, #4
   1cde2:	1971      	adds	r1, r6, r5
   1cde4:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1cde8:	f853 2b04 	ldr.w	r2, [r3], #4
   1cdec:	f841 2f04 	str.w	r2, [r1, #4]!
   1cdf0:	4283      	cmp	r3, r0
   1cdf2:	d1f9      	bne.n	1cde8 <_Unwind_VRS_Pop+0x9c>
   1cdf4:	4630      	mov	r0, r6
   1cdf6:	63a3      	str	r3, [r4, #56]	; 0x38
   1cdf8:	f000 f8f0 	bl	1cfdc <__gnu_Unwind_Restore_WMMXD>
   1cdfc:	2000      	movs	r0, #0
   1cdfe:	e7b9      	b.n	1cd74 <_Unwind_VRS_Pop+0x28>
   1ce00:	2b00      	cmp	r3, #0
   1ce02:	d1b6      	bne.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1ce04:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1ce06:	b297      	uxth	r7, r2
   1ce08:	1d20      	adds	r0, r4, #4
   1ce0a:	2601      	movs	r6, #1
   1ce0c:	fa06 f103 	lsl.w	r1, r6, r3
   1ce10:	4239      	tst	r1, r7
   1ce12:	f103 0301 	add.w	r3, r3, #1
   1ce16:	d002      	beq.n	1ce1e <_Unwind_VRS_Pop+0xd2>
   1ce18:	6829      	ldr	r1, [r5, #0]
   1ce1a:	6001      	str	r1, [r0, #0]
   1ce1c:	3504      	adds	r5, #4
   1ce1e:	2b10      	cmp	r3, #16
   1ce20:	f100 0004 	add.w	r0, r0, #4
   1ce24:	d1f2      	bne.n	1ce0c <_Unwind_VRS_Pop+0xc0>
   1ce26:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1ce2a:	d13b      	bne.n	1cea4 <_Unwind_VRS_Pop+0x158>
   1ce2c:	63a5      	str	r5, [r4, #56]	; 0x38
   1ce2e:	e7a1      	b.n	1cd74 <_Unwind_VRS_Pop+0x28>
   1ce30:	2b05      	cmp	r3, #5
   1ce32:	d19e      	bne.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1ce34:	1977      	adds	r7, r6, r5
   1ce36:	2f20      	cmp	r7, #32
   1ce38:	d89b      	bhi.n	1cd72 <_Unwind_VRS_Pop+0x26>
   1ce3a:	2e0f      	cmp	r6, #15
   1ce3c:	d966      	bls.n	1cf0c <_Unwind_VRS_Pop+0x1c0>
   1ce3e:	462f      	mov	r7, r5
   1ce40:	2d00      	cmp	r5, #0
   1ce42:	d13a      	bne.n	1ceba <_Unwind_VRS_Pop+0x16e>
   1ce44:	462a      	mov	r2, r5
   1ce46:	2700      	movs	r7, #0
   1ce48:	2a00      	cmp	r2, #0
   1ce4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1ce4c:	dd72      	ble.n	1cf34 <_Unwind_VRS_Pop+0x1e8>
   1ce4e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1ce52:	4601      	mov	r1, r0
   1ce54:	a844      	add	r0, sp, #272	; 0x110
   1ce56:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1ce5a:	388c      	subs	r0, #140	; 0x8c
   1ce5c:	f851 5b04 	ldr.w	r5, [r1], #4
   1ce60:	f840 5f04 	str.w	r5, [r0, #4]!
   1ce64:	4291      	cmp	r1, r2
   1ce66:	d1f9      	bne.n	1ce5c <_Unwind_VRS_Pop+0x110>
   1ce68:	4608      	mov	r0, r1
   1ce6a:	b197      	cbz	r7, 1ce92 <_Unwind_VRS_Pop+0x146>
   1ce6c:	2e10      	cmp	r6, #16
   1ce6e:	4632      	mov	r2, r6
   1ce70:	a944      	add	r1, sp, #272	; 0x110
   1ce72:	bf38      	it	cc
   1ce74:	2210      	movcc	r2, #16
   1ce76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1ce7a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1ce7e:	0079      	lsls	r1, r7, #1
   1ce80:	3a04      	subs	r2, #4
   1ce82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ce86:	f850 5b04 	ldr.w	r5, [r0], #4
   1ce8a:	f842 5f04 	str.w	r5, [r2, #4]!
   1ce8e:	4288      	cmp	r0, r1
   1ce90:	d1f9      	bne.n	1ce86 <_Unwind_VRS_Pop+0x13a>
   1ce92:	2b01      	cmp	r3, #1
   1ce94:	d048      	beq.n	1cf28 <_Unwind_VRS_Pop+0x1dc>
   1ce96:	2e0f      	cmp	r6, #15
   1ce98:	63a1      	str	r1, [r4, #56]	; 0x38
   1ce9a:	d933      	bls.n	1cf04 <_Unwind_VRS_Pop+0x1b8>
   1ce9c:	b117      	cbz	r7, 1cea4 <_Unwind_VRS_Pop+0x158>
   1ce9e:	a802      	add	r0, sp, #8
   1cea0:	f000 f894 	bl	1cfcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1cea4:	2000      	movs	r0, #0
   1cea6:	e765      	b.n	1cd74 <_Unwind_VRS_Pop+0x28>
   1cea8:	2e0f      	cmp	r6, #15
   1ceaa:	f63f af62 	bhi.w	1cd72 <_Unwind_VRS_Pop+0x26>
   1ceae:	2700      	movs	r7, #0
   1ceb0:	6822      	ldr	r2, [r4, #0]
   1ceb2:	07d1      	lsls	r1, r2, #31
   1ceb4:	d417      	bmi.n	1cee6 <_Unwind_VRS_Pop+0x19a>
   1ceb6:	2f00      	cmp	r7, #0
   1ceb8:	d060      	beq.n	1cf7c <_Unwind_VRS_Pop+0x230>
   1ceba:	6822      	ldr	r2, [r4, #0]
   1cebc:	0751      	lsls	r1, r2, #29
   1cebe:	d445      	bmi.n	1cf4c <_Unwind_VRS_Pop+0x200>
   1cec0:	2b01      	cmp	r3, #1
   1cec2:	d04d      	beq.n	1cf60 <_Unwind_VRS_Pop+0x214>
   1cec4:	2e0f      	cmp	r6, #15
   1cec6:	d806      	bhi.n	1ced6 <_Unwind_VRS_Pop+0x18a>
   1cec8:	a822      	add	r0, sp, #136	; 0x88
   1ceca:	9301      	str	r3, [sp, #4]
   1cecc:	f000 f87a 	bl	1cfc4 <__gnu_Unwind_Save_VFP_D>
   1ced0:	9b01      	ldr	r3, [sp, #4]
   1ced2:	2f00      	cmp	r7, #0
   1ced4:	d0b6      	beq.n	1ce44 <_Unwind_VRS_Pop+0xf8>
   1ced6:	a802      	add	r0, sp, #8
   1ced8:	9301      	str	r3, [sp, #4]
   1ceda:	f000 f87b 	bl	1cfd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1cede:	9b01      	ldr	r3, [sp, #4]
   1cee0:	f1c6 0210 	rsb	r2, r6, #16
   1cee4:	e7b0      	b.n	1ce48 <_Unwind_VRS_Pop+0xfc>
   1cee6:	f022 0101 	bic.w	r1, r2, #1
   1ceea:	2b05      	cmp	r3, #5
   1ceec:	6021      	str	r1, [r4, #0]
   1ceee:	9301      	str	r3, [sp, #4]
   1cef0:	4620      	mov	r0, r4
   1cef2:	d03b      	beq.n	1cf6c <_Unwind_VRS_Pop+0x220>
   1cef4:	f022 0203 	bic.w	r2, r2, #3
   1cef8:	f840 2b48 	str.w	r2, [r0], #72
   1cefc:	f000 f85a 	bl	1cfb4 <__gnu_Unwind_Save_VFP>
   1cf00:	9b01      	ldr	r3, [sp, #4]
   1cf02:	e7d8      	b.n	1ceb6 <_Unwind_VRS_Pop+0x16a>
   1cf04:	a822      	add	r0, sp, #136	; 0x88
   1cf06:	f000 f859 	bl	1cfbc <__gnu_Unwind_Restore_VFP_D>
   1cf0a:	e7c7      	b.n	1ce9c <_Unwind_VRS_Pop+0x150>
   1cf0c:	2f10      	cmp	r7, #16
   1cf0e:	d9ce      	bls.n	1ceae <_Unwind_VRS_Pop+0x162>
   1cf10:	3f10      	subs	r7, #16
   1cf12:	e7cd      	b.n	1ceb0 <_Unwind_VRS_Pop+0x164>
   1cf14:	f023 0310 	bic.w	r3, r3, #16
   1cf18:	6023      	str	r3, [r4, #0]
   1cf1a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1cf1e:	9201      	str	r2, [sp, #4]
   1cf20:	f000 f8aa 	bl	1d078 <__gnu_Unwind_Save_WMMXC>
   1cf24:	9a01      	ldr	r2, [sp, #4]
   1cf26:	e72f      	b.n	1cd88 <_Unwind_VRS_Pop+0x3c>
   1cf28:	3104      	adds	r1, #4
   1cf2a:	63a1      	str	r1, [r4, #56]	; 0x38
   1cf2c:	a822      	add	r0, sp, #136	; 0x88
   1cf2e:	f000 f83d 	bl	1cfac <__gnu_Unwind_Restore_VFP>
   1cf32:	e7b7      	b.n	1cea4 <_Unwind_VRS_Pop+0x158>
   1cf34:	2f00      	cmp	r7, #0
   1cf36:	d199      	bne.n	1ce6c <_Unwind_VRS_Pop+0x120>
   1cf38:	4601      	mov	r1, r0
   1cf3a:	e7aa      	b.n	1ce92 <_Unwind_VRS_Pop+0x146>
   1cf3c:	f023 0308 	bic.w	r3, r3, #8
   1cf40:	6023      	str	r3, [r4, #0]
   1cf42:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1cf46:	f000 f86b 	bl	1d020 <__gnu_Unwind_Save_WMMXD>
   1cf4a:	e742      	b.n	1cdd2 <_Unwind_VRS_Pop+0x86>
   1cf4c:	4620      	mov	r0, r4
   1cf4e:	f022 0204 	bic.w	r2, r2, #4
   1cf52:	f840 2bd0 	str.w	r2, [r0], #208
   1cf56:	9301      	str	r3, [sp, #4]
   1cf58:	f000 f83c 	bl	1cfd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1cf5c:	9b01      	ldr	r3, [sp, #4]
   1cf5e:	e7af      	b.n	1cec0 <_Unwind_VRS_Pop+0x174>
   1cf60:	a822      	add	r0, sp, #136	; 0x88
   1cf62:	9301      	str	r3, [sp, #4]
   1cf64:	f000 f826 	bl	1cfb4 <__gnu_Unwind_Save_VFP>
   1cf68:	9b01      	ldr	r3, [sp, #4]
   1cf6a:	e7b9      	b.n	1cee0 <_Unwind_VRS_Pop+0x194>
   1cf6c:	f041 0102 	orr.w	r1, r1, #2
   1cf70:	f840 1b48 	str.w	r1, [r0], #72
   1cf74:	f000 f826 	bl	1cfc4 <__gnu_Unwind_Save_VFP_D>
   1cf78:	9b01      	ldr	r3, [sp, #4]
   1cf7a:	e79c      	b.n	1ceb6 <_Unwind_VRS_Pop+0x16a>
   1cf7c:	2b01      	cmp	r3, #1
   1cf7e:	d003      	beq.n	1cf88 <_Unwind_VRS_Pop+0x23c>
   1cf80:	2e0f      	cmp	r6, #15
   1cf82:	f63f af5f 	bhi.w	1ce44 <_Unwind_VRS_Pop+0xf8>
   1cf86:	e79f      	b.n	1cec8 <_Unwind_VRS_Pop+0x17c>
   1cf88:	a822      	add	r0, sp, #136	; 0x88
   1cf8a:	9301      	str	r3, [sp, #4]
   1cf8c:	f000 f812 	bl	1cfb4 <__gnu_Unwind_Save_VFP>
   1cf90:	9b01      	ldr	r3, [sp, #4]
   1cf92:	e757      	b.n	1ce44 <_Unwind_VRS_Pop+0xf8>

0001cf94 <__restore_core_regs>:
   1cf94:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1cf98:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1cf9c:	469c      	mov	ip, r3
   1cf9e:	46a6      	mov	lr, r4
   1cfa0:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1cfa4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1cfa8:	46e5      	mov	sp, ip
   1cfaa:	bd00      	pop	{pc}

0001cfac <__gnu_Unwind_Restore_VFP>:
   1cfac:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1cfb0:	4770      	bx	lr
   1cfb2:	bf00      	nop

0001cfb4 <__gnu_Unwind_Save_VFP>:
   1cfb4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1cfb8:	4770      	bx	lr
   1cfba:	bf00      	nop

0001cfbc <__gnu_Unwind_Restore_VFP_D>:
   1cfbc:	ec90 0b20 	vldmia	r0, {d0-d15}
   1cfc0:	4770      	bx	lr
   1cfc2:	bf00      	nop

0001cfc4 <__gnu_Unwind_Save_VFP_D>:
   1cfc4:	ec80 0b20 	vstmia	r0, {d0-d15}
   1cfc8:	4770      	bx	lr
   1cfca:	bf00      	nop

0001cfcc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1cfcc:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1cfd0:	4770      	bx	lr
   1cfd2:	bf00      	nop

0001cfd4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1cfd4:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1cfd8:	4770      	bx	lr
   1cfda:	bf00      	nop

0001cfdc <__gnu_Unwind_Restore_WMMXD>:
   1cfdc:	ecf0 0102 	ldfe	f0, [r0], #8
   1cfe0:	ecf0 1102 	ldfe	f1, [r0], #8
   1cfe4:	ecf0 2102 	ldfe	f2, [r0], #8
   1cfe8:	ecf0 3102 	ldfe	f3, [r0], #8
   1cfec:	ecf0 4102 	ldfe	f4, [r0], #8
   1cff0:	ecf0 5102 	ldfe	f5, [r0], #8
   1cff4:	ecf0 6102 	ldfe	f6, [r0], #8
   1cff8:	ecf0 7102 	ldfe	f7, [r0], #8
   1cffc:	ecf0 8102 	ldfp	f0, [r0], #8
   1d000:	ecf0 9102 	ldfp	f1, [r0], #8
   1d004:	ecf0 a102 	ldfp	f2, [r0], #8
   1d008:	ecf0 b102 	ldfp	f3, [r0], #8
   1d00c:	ecf0 c102 	ldfp	f4, [r0], #8
   1d010:	ecf0 d102 	ldfp	f5, [r0], #8
   1d014:	ecf0 e102 	ldfp	f6, [r0], #8
   1d018:	ecf0 f102 	ldfp	f7, [r0], #8
   1d01c:	4770      	bx	lr
   1d01e:	bf00      	nop

0001d020 <__gnu_Unwind_Save_WMMXD>:
   1d020:	ece0 0102 	stfe	f0, [r0], #8
   1d024:	ece0 1102 	stfe	f1, [r0], #8
   1d028:	ece0 2102 	stfe	f2, [r0], #8
   1d02c:	ece0 3102 	stfe	f3, [r0], #8
   1d030:	ece0 4102 	stfe	f4, [r0], #8
   1d034:	ece0 5102 	stfe	f5, [r0], #8
   1d038:	ece0 6102 	stfe	f6, [r0], #8
   1d03c:	ece0 7102 	stfe	f7, [r0], #8
   1d040:	ece0 8102 	stfp	f0, [r0], #8
   1d044:	ece0 9102 	stfp	f1, [r0], #8
   1d048:	ece0 a102 	stfp	f2, [r0], #8
   1d04c:	ece0 b102 	stfp	f3, [r0], #8
   1d050:	ece0 c102 	stfp	f4, [r0], #8
   1d054:	ece0 d102 	stfp	f5, [r0], #8
   1d058:	ece0 e102 	stfp	f6, [r0], #8
   1d05c:	ece0 f102 	stfp	f7, [r0], #8
   1d060:	4770      	bx	lr
   1d062:	bf00      	nop

0001d064 <__gnu_Unwind_Restore_WMMXC>:
   1d064:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d068:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d06c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d070:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d074:	4770      	bx	lr
   1d076:	bf00      	nop

0001d078 <__gnu_Unwind_Save_WMMXC>:
   1d078:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d07c:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d080:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d084:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d088:	4770      	bx	lr
   1d08a:	bf00      	nop

0001d08c <_Unwind_RaiseException>:
   1d08c:	46ec      	mov	ip, sp
   1d08e:	b500      	push	{lr}
   1d090:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d094:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d098:	f04f 0300 	mov.w	r3, #0
   1d09c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d0a0:	a901      	add	r1, sp, #4
   1d0a2:	f7ff fbf3 	bl	1c88c <__gnu_Unwind_RaiseException>
   1d0a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d0aa:	b012      	add	sp, #72	; 0x48
   1d0ac:	4770      	bx	lr
   1d0ae:	bf00      	nop

0001d0b0 <_Unwind_Resume>:
   1d0b0:	46ec      	mov	ip, sp
   1d0b2:	b500      	push	{lr}
   1d0b4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d0b8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d0bc:	f04f 0300 	mov.w	r3, #0
   1d0c0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d0c4:	a901      	add	r1, sp, #4
   1d0c6:	f7ff fc1b 	bl	1c900 <__gnu_Unwind_Resume>
   1d0ca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d0ce:	b012      	add	sp, #72	; 0x48
   1d0d0:	4770      	bx	lr
   1d0d2:	bf00      	nop

0001d0d4 <_Unwind_Resume_or_Rethrow>:
   1d0d4:	46ec      	mov	ip, sp
   1d0d6:	b500      	push	{lr}
   1d0d8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d0dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d0e0:	f04f 0300 	mov.w	r3, #0
   1d0e4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d0e8:	a901      	add	r1, sp, #4
   1d0ea:	f7ff fc2b 	bl	1c944 <__gnu_Unwind_Resume_or_Rethrow>
   1d0ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d0f2:	b012      	add	sp, #72	; 0x48
   1d0f4:	4770      	bx	lr
   1d0f6:	bf00      	nop

0001d0f8 <_Unwind_ForcedUnwind>:
   1d0f8:	46ec      	mov	ip, sp
   1d0fa:	b500      	push	{lr}
   1d0fc:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d100:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d104:	f04f 0300 	mov.w	r3, #0
   1d108:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d10c:	ab01      	add	r3, sp, #4
   1d10e:	f7ff fbed 	bl	1c8ec <__gnu_Unwind_ForcedUnwind>
   1d112:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d116:	b012      	add	sp, #72	; 0x48
   1d118:	4770      	bx	lr
   1d11a:	bf00      	nop

0001d11c <_Unwind_Backtrace>:
   1d11c:	46ec      	mov	ip, sp
   1d11e:	b500      	push	{lr}
   1d120:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d124:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d128:	f04f 0300 	mov.w	r3, #0
   1d12c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d130:	aa01      	add	r2, sp, #4
   1d132:	f7ff fc65 	bl	1ca00 <__gnu_Unwind_Backtrace>
   1d136:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d13a:	b012      	add	sp, #72	; 0x48
   1d13c:	4770      	bx	lr
   1d13e:	bf00      	nop

0001d140 <next_unwind_byte>:
   1d140:	7a02      	ldrb	r2, [r0, #8]
   1d142:	b91a      	cbnz	r2, 1d14c <next_unwind_byte+0xc>
   1d144:	7a43      	ldrb	r3, [r0, #9]
   1d146:	b943      	cbnz	r3, 1d15a <next_unwind_byte+0x1a>
   1d148:	20b0      	movs	r0, #176	; 0xb0
   1d14a:	4770      	bx	lr
   1d14c:	6803      	ldr	r3, [r0, #0]
   1d14e:	3a01      	subs	r2, #1
   1d150:	7202      	strb	r2, [r0, #8]
   1d152:	021a      	lsls	r2, r3, #8
   1d154:	6002      	str	r2, [r0, #0]
   1d156:	0e18      	lsrs	r0, r3, #24
   1d158:	4770      	bx	lr
   1d15a:	6842      	ldr	r2, [r0, #4]
   1d15c:	3b01      	subs	r3, #1
   1d15e:	b410      	push	{r4}
   1d160:	7243      	strb	r3, [r0, #9]
   1d162:	6813      	ldr	r3, [r2, #0]
   1d164:	2103      	movs	r1, #3
   1d166:	1d14      	adds	r4, r2, #4
   1d168:	7201      	strb	r1, [r0, #8]
   1d16a:	021a      	lsls	r2, r3, #8
   1d16c:	6044      	str	r4, [r0, #4]
   1d16e:	6002      	str	r2, [r0, #0]
   1d170:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d174:	0e18      	lsrs	r0, r3, #24
   1d176:	4770      	bx	lr

0001d178 <_Unwind_GetGR.constprop.0>:
   1d178:	b500      	push	{lr}
   1d17a:	b085      	sub	sp, #20
   1d17c:	aa03      	add	r2, sp, #12
   1d17e:	2300      	movs	r3, #0
   1d180:	9200      	str	r2, [sp, #0]
   1d182:	4619      	mov	r1, r3
   1d184:	220c      	movs	r2, #12
   1d186:	f7ff fbed 	bl	1c964 <_Unwind_VRS_Get>
   1d18a:	9803      	ldr	r0, [sp, #12]
   1d18c:	b005      	add	sp, #20
   1d18e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d192:	bf00      	nop

0001d194 <unwind_UCB_from_context>:
   1d194:	e7f0      	b.n	1d178 <_Unwind_GetGR.constprop.0>
   1d196:	bf00      	nop

0001d198 <__gnu_unwind_execute>:
   1d198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d19c:	4606      	mov	r6, r0
   1d19e:	b085      	sub	sp, #20
   1d1a0:	460f      	mov	r7, r1
   1d1a2:	f04f 0800 	mov.w	r8, #0
   1d1a6:	4638      	mov	r0, r7
   1d1a8:	f7ff ffca 	bl	1d140 <next_unwind_byte>
   1d1ac:	28b0      	cmp	r0, #176	; 0xb0
   1d1ae:	4604      	mov	r4, r0
   1d1b0:	d023      	beq.n	1d1fa <__gnu_unwind_execute+0x62>
   1d1b2:	0605      	lsls	r5, r0, #24
   1d1b4:	d427      	bmi.n	1d206 <__gnu_unwind_execute+0x6e>
   1d1b6:	2300      	movs	r3, #0
   1d1b8:	f10d 090c 	add.w	r9, sp, #12
   1d1bc:	4619      	mov	r1, r3
   1d1be:	0085      	lsls	r5, r0, #2
   1d1c0:	220d      	movs	r2, #13
   1d1c2:	f8cd 9000 	str.w	r9, [sp]
   1d1c6:	4630      	mov	r0, r6
   1d1c8:	f7ff fbcc 	bl	1c964 <_Unwind_VRS_Get>
   1d1cc:	b2ed      	uxtb	r5, r5
   1d1ce:	9b03      	ldr	r3, [sp, #12]
   1d1d0:	f8cd 9000 	str.w	r9, [sp]
   1d1d4:	0660      	lsls	r0, r4, #25
   1d1d6:	f105 0504 	add.w	r5, r5, #4
   1d1da:	bf4c      	ite	mi
   1d1dc:	1b5d      	submi	r5, r3, r5
   1d1de:	18ed      	addpl	r5, r5, r3
   1d1e0:	2300      	movs	r3, #0
   1d1e2:	4619      	mov	r1, r3
   1d1e4:	220d      	movs	r2, #13
   1d1e6:	4630      	mov	r0, r6
   1d1e8:	9503      	str	r5, [sp, #12]
   1d1ea:	f7ff fbe1 	bl	1c9b0 <_Unwind_VRS_Set>
   1d1ee:	4638      	mov	r0, r7
   1d1f0:	f7ff ffa6 	bl	1d140 <next_unwind_byte>
   1d1f4:	28b0      	cmp	r0, #176	; 0xb0
   1d1f6:	4604      	mov	r4, r0
   1d1f8:	d1db      	bne.n	1d1b2 <__gnu_unwind_execute+0x1a>
   1d1fa:	f1b8 0f00 	cmp.w	r8, #0
   1d1fe:	f000 8095 	beq.w	1d32c <__gnu_unwind_execute+0x194>
   1d202:	2000      	movs	r0, #0
   1d204:	e01c      	b.n	1d240 <__gnu_unwind_execute+0xa8>
   1d206:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d20a:	2b80      	cmp	r3, #128	; 0x80
   1d20c:	d05d      	beq.n	1d2ca <__gnu_unwind_execute+0x132>
   1d20e:	2b90      	cmp	r3, #144	; 0x90
   1d210:	d019      	beq.n	1d246 <__gnu_unwind_execute+0xae>
   1d212:	2ba0      	cmp	r3, #160	; 0xa0
   1d214:	d02c      	beq.n	1d270 <__gnu_unwind_execute+0xd8>
   1d216:	2bb0      	cmp	r3, #176	; 0xb0
   1d218:	d03f      	beq.n	1d29a <__gnu_unwind_execute+0x102>
   1d21a:	2bc0      	cmp	r3, #192	; 0xc0
   1d21c:	d06c      	beq.n	1d2f8 <__gnu_unwind_execute+0x160>
   1d21e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d222:	2bd0      	cmp	r3, #208	; 0xd0
   1d224:	d10b      	bne.n	1d23e <__gnu_unwind_execute+0xa6>
   1d226:	f000 0207 	and.w	r2, r0, #7
   1d22a:	3201      	adds	r2, #1
   1d22c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d230:	2305      	movs	r3, #5
   1d232:	2101      	movs	r1, #1
   1d234:	4630      	mov	r0, r6
   1d236:	f7ff fd89 	bl	1cd4c <_Unwind_VRS_Pop>
   1d23a:	2800      	cmp	r0, #0
   1d23c:	d0b3      	beq.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d23e:	2009      	movs	r0, #9
   1d240:	b005      	add	sp, #20
   1d242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d246:	f000 030d 	and.w	r3, r0, #13
   1d24a:	2b0d      	cmp	r3, #13
   1d24c:	d0f7      	beq.n	1d23e <__gnu_unwind_execute+0xa6>
   1d24e:	ad03      	add	r5, sp, #12
   1d250:	2300      	movs	r3, #0
   1d252:	f000 020f 	and.w	r2, r0, #15
   1d256:	4619      	mov	r1, r3
   1d258:	9500      	str	r5, [sp, #0]
   1d25a:	4630      	mov	r0, r6
   1d25c:	f7ff fb82 	bl	1c964 <_Unwind_VRS_Get>
   1d260:	2300      	movs	r3, #0
   1d262:	9500      	str	r5, [sp, #0]
   1d264:	4619      	mov	r1, r3
   1d266:	220d      	movs	r2, #13
   1d268:	4630      	mov	r0, r6
   1d26a:	f7ff fba1 	bl	1c9b0 <_Unwind_VRS_Set>
   1d26e:	e79a      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d270:	43c2      	mvns	r2, r0
   1d272:	f002 0307 	and.w	r3, r2, #7
   1d276:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d27a:	411a      	asrs	r2, r3
   1d27c:	0701      	lsls	r1, r0, #28
   1d27e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d282:	f04f 0300 	mov.w	r3, #0
   1d286:	bf48      	it	mi
   1d288:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d28c:	4619      	mov	r1, r3
   1d28e:	4630      	mov	r0, r6
   1d290:	f7ff fd5c 	bl	1cd4c <_Unwind_VRS_Pop>
   1d294:	2800      	cmp	r0, #0
   1d296:	d1d2      	bne.n	1d23e <__gnu_unwind_execute+0xa6>
   1d298:	e785      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d29a:	28b1      	cmp	r0, #177	; 0xb1
   1d29c:	d057      	beq.n	1d34e <__gnu_unwind_execute+0x1b6>
   1d29e:	28b2      	cmp	r0, #178	; 0xb2
   1d2a0:	d068      	beq.n	1d374 <__gnu_unwind_execute+0x1dc>
   1d2a2:	28b3      	cmp	r0, #179	; 0xb3
   1d2a4:	f000 8095 	beq.w	1d3d2 <__gnu_unwind_execute+0x23a>
   1d2a8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d2ac:	2bb4      	cmp	r3, #180	; 0xb4
   1d2ae:	d0c6      	beq.n	1d23e <__gnu_unwind_execute+0xa6>
   1d2b0:	f000 0207 	and.w	r2, r0, #7
   1d2b4:	3201      	adds	r2, #1
   1d2b6:	2301      	movs	r3, #1
   1d2b8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d2bc:	4619      	mov	r1, r3
   1d2be:	4630      	mov	r0, r6
   1d2c0:	f7ff fd44 	bl	1cd4c <_Unwind_VRS_Pop>
   1d2c4:	2800      	cmp	r0, #0
   1d2c6:	d1ba      	bne.n	1d23e <__gnu_unwind_execute+0xa6>
   1d2c8:	e76d      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d2ca:	4638      	mov	r0, r7
   1d2cc:	f7ff ff38 	bl	1d140 <next_unwind_byte>
   1d2d0:	0224      	lsls	r4, r4, #8
   1d2d2:	4304      	orrs	r4, r0
   1d2d4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d2d8:	d0b1      	beq.n	1d23e <__gnu_unwind_execute+0xa6>
   1d2da:	0124      	lsls	r4, r4, #4
   1d2dc:	2300      	movs	r3, #0
   1d2de:	b2a2      	uxth	r2, r4
   1d2e0:	4619      	mov	r1, r3
   1d2e2:	4630      	mov	r0, r6
   1d2e4:	f7ff fd32 	bl	1cd4c <_Unwind_VRS_Pop>
   1d2e8:	2800      	cmp	r0, #0
   1d2ea:	d1a8      	bne.n	1d23e <__gnu_unwind_execute+0xa6>
   1d2ec:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d2f0:	bf18      	it	ne
   1d2f2:	f04f 0801 	movne.w	r8, #1
   1d2f6:	e756      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d2f8:	28c6      	cmp	r0, #198	; 0xc6
   1d2fa:	d07d      	beq.n	1d3f8 <__gnu_unwind_execute+0x260>
   1d2fc:	28c7      	cmp	r0, #199	; 0xc7
   1d2fe:	f000 8086 	beq.w	1d40e <__gnu_unwind_execute+0x276>
   1d302:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d306:	2bc0      	cmp	r3, #192	; 0xc0
   1d308:	f000 8094 	beq.w	1d434 <__gnu_unwind_execute+0x29c>
   1d30c:	28c8      	cmp	r0, #200	; 0xc8
   1d30e:	f000 809f 	beq.w	1d450 <__gnu_unwind_execute+0x2b8>
   1d312:	28c9      	cmp	r0, #201	; 0xc9
   1d314:	d193      	bne.n	1d23e <__gnu_unwind_execute+0xa6>
   1d316:	4638      	mov	r0, r7
   1d318:	f7ff ff12 	bl	1d140 <next_unwind_byte>
   1d31c:	0302      	lsls	r2, r0, #12
   1d31e:	f000 000f 	and.w	r0, r0, #15
   1d322:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d326:	3001      	adds	r0, #1
   1d328:	4302      	orrs	r2, r0
   1d32a:	e781      	b.n	1d230 <__gnu_unwind_execute+0x98>
   1d32c:	ac03      	add	r4, sp, #12
   1d32e:	4643      	mov	r3, r8
   1d330:	220e      	movs	r2, #14
   1d332:	4641      	mov	r1, r8
   1d334:	9400      	str	r4, [sp, #0]
   1d336:	4630      	mov	r0, r6
   1d338:	f7ff fb14 	bl	1c964 <_Unwind_VRS_Get>
   1d33c:	9400      	str	r4, [sp, #0]
   1d33e:	4630      	mov	r0, r6
   1d340:	4643      	mov	r3, r8
   1d342:	220f      	movs	r2, #15
   1d344:	4641      	mov	r1, r8
   1d346:	f7ff fb33 	bl	1c9b0 <_Unwind_VRS_Set>
   1d34a:	4640      	mov	r0, r8
   1d34c:	e778      	b.n	1d240 <__gnu_unwind_execute+0xa8>
   1d34e:	4638      	mov	r0, r7
   1d350:	f7ff fef6 	bl	1d140 <next_unwind_byte>
   1d354:	2800      	cmp	r0, #0
   1d356:	f43f af72 	beq.w	1d23e <__gnu_unwind_execute+0xa6>
   1d35a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d35e:	f47f af6e 	bne.w	1d23e <__gnu_unwind_execute+0xa6>
   1d362:	4602      	mov	r2, r0
   1d364:	4619      	mov	r1, r3
   1d366:	4630      	mov	r0, r6
   1d368:	f7ff fcf0 	bl	1cd4c <_Unwind_VRS_Pop>
   1d36c:	2800      	cmp	r0, #0
   1d36e:	f47f af66 	bne.w	1d23e <__gnu_unwind_execute+0xa6>
   1d372:	e718      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d374:	2300      	movs	r3, #0
   1d376:	f10d 090c 	add.w	r9, sp, #12
   1d37a:	220d      	movs	r2, #13
   1d37c:	4619      	mov	r1, r3
   1d37e:	f8cd 9000 	str.w	r9, [sp]
   1d382:	4630      	mov	r0, r6
   1d384:	f7ff faee 	bl	1c964 <_Unwind_VRS_Get>
   1d388:	4638      	mov	r0, r7
   1d38a:	f7ff fed9 	bl	1d140 <next_unwind_byte>
   1d38e:	0602      	lsls	r2, r0, #24
   1d390:	f04f 0402 	mov.w	r4, #2
   1d394:	d50c      	bpl.n	1d3b0 <__gnu_unwind_execute+0x218>
   1d396:	9b03      	ldr	r3, [sp, #12]
   1d398:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d39c:	40a0      	lsls	r0, r4
   1d39e:	4403      	add	r3, r0
   1d3a0:	4638      	mov	r0, r7
   1d3a2:	9303      	str	r3, [sp, #12]
   1d3a4:	f7ff fecc 	bl	1d140 <next_unwind_byte>
   1d3a8:	0603      	lsls	r3, r0, #24
   1d3aa:	f104 0407 	add.w	r4, r4, #7
   1d3ae:	d4f2      	bmi.n	1d396 <__gnu_unwind_execute+0x1fe>
   1d3b0:	9b03      	ldr	r3, [sp, #12]
   1d3b2:	f8cd 9000 	str.w	r9, [sp]
   1d3b6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d3ba:	40a2      	lsls	r2, r4
   1d3bc:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d3c0:	2300      	movs	r3, #0
   1d3c2:	4414      	add	r4, r2
   1d3c4:	4619      	mov	r1, r3
   1d3c6:	220d      	movs	r2, #13
   1d3c8:	4630      	mov	r0, r6
   1d3ca:	9403      	str	r4, [sp, #12]
   1d3cc:	f7ff faf0 	bl	1c9b0 <_Unwind_VRS_Set>
   1d3d0:	e6e9      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d3d2:	4638      	mov	r0, r7
   1d3d4:	f7ff feb4 	bl	1d140 <next_unwind_byte>
   1d3d8:	0301      	lsls	r1, r0, #12
   1d3da:	f000 000f 	and.w	r0, r0, #15
   1d3de:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d3e2:	1c42      	adds	r2, r0, #1
   1d3e4:	2301      	movs	r3, #1
   1d3e6:	430a      	orrs	r2, r1
   1d3e8:	4630      	mov	r0, r6
   1d3ea:	4619      	mov	r1, r3
   1d3ec:	f7ff fcae 	bl	1cd4c <_Unwind_VRS_Pop>
   1d3f0:	2800      	cmp	r0, #0
   1d3f2:	f47f af24 	bne.w	1d23e <__gnu_unwind_execute+0xa6>
   1d3f6:	e6d6      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d3f8:	4638      	mov	r0, r7
   1d3fa:	f7ff fea1 	bl	1d140 <next_unwind_byte>
   1d3fe:	0301      	lsls	r1, r0, #12
   1d400:	f000 000f 	and.w	r0, r0, #15
   1d404:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d408:	1c42      	adds	r2, r0, #1
   1d40a:	2303      	movs	r3, #3
   1d40c:	e7eb      	b.n	1d3e6 <__gnu_unwind_execute+0x24e>
   1d40e:	4638      	mov	r0, r7
   1d410:	f7ff fe96 	bl	1d140 <next_unwind_byte>
   1d414:	2800      	cmp	r0, #0
   1d416:	f43f af12 	beq.w	1d23e <__gnu_unwind_execute+0xa6>
   1d41a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d41e:	f47f af0e 	bne.w	1d23e <__gnu_unwind_execute+0xa6>
   1d422:	4602      	mov	r2, r0
   1d424:	2104      	movs	r1, #4
   1d426:	4630      	mov	r0, r6
   1d428:	f7ff fc90 	bl	1cd4c <_Unwind_VRS_Pop>
   1d42c:	2800      	cmp	r0, #0
   1d42e:	f47f af06 	bne.w	1d23e <__gnu_unwind_execute+0xa6>
   1d432:	e6b8      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d434:	f000 020f 	and.w	r2, r0, #15
   1d438:	3201      	adds	r2, #1
   1d43a:	2303      	movs	r3, #3
   1d43c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d440:	4619      	mov	r1, r3
   1d442:	4630      	mov	r0, r6
   1d444:	f7ff fc82 	bl	1cd4c <_Unwind_VRS_Pop>
   1d448:	2800      	cmp	r0, #0
   1d44a:	f47f aef8 	bne.w	1d23e <__gnu_unwind_execute+0xa6>
   1d44e:	e6aa      	b.n	1d1a6 <__gnu_unwind_execute+0xe>
   1d450:	4638      	mov	r0, r7
   1d452:	f7ff fe75 	bl	1d140 <next_unwind_byte>
   1d456:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d45a:	f000 030f 	and.w	r3, r0, #15
   1d45e:	3210      	adds	r2, #16
   1d460:	3301      	adds	r3, #1
   1d462:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d466:	e6e3      	b.n	1d230 <__gnu_unwind_execute+0x98>

0001d468 <__gnu_unwind_frame>:
   1d468:	b510      	push	{r4, lr}
   1d46a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d46c:	b084      	sub	sp, #16
   1d46e:	685a      	ldr	r2, [r3, #4]
   1d470:	2003      	movs	r0, #3
   1d472:	f88d 000c 	strb.w	r0, [sp, #12]
   1d476:	79dc      	ldrb	r4, [r3, #7]
   1d478:	f88d 400d 	strb.w	r4, [sp, #13]
   1d47c:	0212      	lsls	r2, r2, #8
   1d47e:	3308      	adds	r3, #8
   1d480:	4608      	mov	r0, r1
   1d482:	a901      	add	r1, sp, #4
   1d484:	9201      	str	r2, [sp, #4]
   1d486:	9302      	str	r3, [sp, #8]
   1d488:	f7ff fe86 	bl	1d198 <__gnu_unwind_execute>
   1d48c:	b004      	add	sp, #16
   1d48e:	bd10      	pop	{r4, pc}

0001d490 <_Unwind_GetRegionStart>:
   1d490:	b508      	push	{r3, lr}
   1d492:	f7ff fe7f 	bl	1d194 <unwind_UCB_from_context>
   1d496:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d498:	bd08      	pop	{r3, pc}
   1d49a:	bf00      	nop

0001d49c <_Unwind_GetLanguageSpecificData>:
   1d49c:	b508      	push	{r3, lr}
   1d49e:	f7ff fe79 	bl	1d194 <unwind_UCB_from_context>
   1d4a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d4a4:	79c3      	ldrb	r3, [r0, #7]
   1d4a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d4aa:	3008      	adds	r0, #8
   1d4ac:	bd08      	pop	{r3, pc}
   1d4ae:	bf00      	nop

0001d4b0 <_Unwind_GetTextRelBase>:
   1d4b0:	b508      	push	{r3, lr}
   1d4b2:	f000 f807 	bl	1d4c4 <abort>
   1d4b6:	bf00      	nop

0001d4b8 <_Unwind_GetDataRelBase>:
   1d4b8:	b508      	push	{r3, lr}
   1d4ba:	f7ff fff9 	bl	1d4b0 <_Unwind_GetTextRelBase>
   1d4be:	bf00      	nop

0001d4c0 <__aeabi_idiv0>:
   1d4c0:	4770      	bx	lr
   1d4c2:	bf00      	nop

0001d4c4 <abort>:
   1d4c4:	b508      	push	{r3, lr}
   1d4c6:	2006      	movs	r0, #6
   1d4c8:	f001 f96a 	bl	1e7a0 <raise>
   1d4cc:	2001      	movs	r0, #1
   1d4ce:	f005 f917 	bl	22700 <_exit>
   1d4d2:	bf00      	nop

0001d4d4 <__errno>:
   1d4d4:	4b01      	ldr	r3, [pc, #4]	; (1d4dc <__errno+0x8>)
   1d4d6:	6818      	ldr	r0, [r3, #0]
   1d4d8:	4770      	bx	lr
   1d4da:	bf00      	nop
   1d4dc:	200000f8 	.word	0x200000f8

0001d4e0 <fputc>:
   1d4e0:	4b14      	ldr	r3, [pc, #80]	; (1d534 <fputc+0x54>)
   1d4e2:	b570      	push	{r4, r5, r6, lr}
   1d4e4:	681d      	ldr	r5, [r3, #0]
   1d4e6:	4606      	mov	r6, r0
   1d4e8:	460c      	mov	r4, r1
   1d4ea:	b10d      	cbz	r5, 1d4f0 <fputc+0x10>
   1d4ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d4ee:	b1c3      	cbz	r3, 1d522 <fputc+0x42>
   1d4f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d4f2:	07d8      	lsls	r0, r3, #31
   1d4f4:	d402      	bmi.n	1d4fc <fputc+0x1c>
   1d4f6:	89a3      	ldrh	r3, [r4, #12]
   1d4f8:	0599      	lsls	r1, r3, #22
   1d4fa:	d516      	bpl.n	1d52a <fputc+0x4a>
   1d4fc:	4628      	mov	r0, r5
   1d4fe:	4622      	mov	r2, r4
   1d500:	4631      	mov	r1, r6
   1d502:	f000 ff25 	bl	1e350 <_putc_r>
   1d506:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d508:	07da      	lsls	r2, r3, #31
   1d50a:	4605      	mov	r5, r0
   1d50c:	d402      	bmi.n	1d514 <fputc+0x34>
   1d50e:	89a3      	ldrh	r3, [r4, #12]
   1d510:	059b      	lsls	r3, r3, #22
   1d512:	d501      	bpl.n	1d518 <fputc+0x38>
   1d514:	4628      	mov	r0, r5
   1d516:	bd70      	pop	{r4, r5, r6, pc}
   1d518:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d51a:	f000 fa65 	bl	1d9e8 <__retarget_lock_release_recursive>
   1d51e:	4628      	mov	r0, r5
   1d520:	bd70      	pop	{r4, r5, r6, pc}
   1d522:	4628      	mov	r0, r5
   1d524:	f004 f806 	bl	21534 <__sinit>
   1d528:	e7e2      	b.n	1d4f0 <fputc+0x10>
   1d52a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d52c:	f000 fa5a 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   1d530:	e7e4      	b.n	1d4fc <fputc+0x1c>
   1d532:	bf00      	nop
   1d534:	200000f8 	.word	0x200000f8

0001d538 <_fputs_r>:
   1d538:	b530      	push	{r4, r5, lr}
   1d53a:	b087      	sub	sp, #28
   1d53c:	4605      	mov	r5, r0
   1d53e:	4608      	mov	r0, r1
   1d540:	4614      	mov	r4, r2
   1d542:	9101      	str	r1, [sp, #4]
   1d544:	f001 fafc 	bl	1eb40 <strlen>
   1d548:	aa01      	add	r2, sp, #4
   1d54a:	2301      	movs	r3, #1
   1d54c:	9005      	str	r0, [sp, #20]
   1d54e:	9002      	str	r0, [sp, #8]
   1d550:	9203      	str	r2, [sp, #12]
   1d552:	9304      	str	r3, [sp, #16]
   1d554:	b10d      	cbz	r5, 1d55a <_fputs_r+0x22>
   1d556:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d558:	b333      	cbz	r3, 1d5a8 <_fputs_r+0x70>
   1d55a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d55c:	f013 0f01 	tst.w	r3, #1
   1d560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d564:	b29a      	uxth	r2, r3
   1d566:	d101      	bne.n	1d56c <_fputs_r+0x34>
   1d568:	0590      	lsls	r0, r2, #22
   1d56a:	d521      	bpl.n	1d5b0 <_fputs_r+0x78>
   1d56c:	0491      	lsls	r1, r2, #18
   1d56e:	d406      	bmi.n	1d57e <_fputs_r+0x46>
   1d570:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d572:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d57a:	81a3      	strh	r3, [r4, #12]
   1d57c:	6662      	str	r2, [r4, #100]	; 0x64
   1d57e:	4628      	mov	r0, r5
   1d580:	aa03      	add	r2, sp, #12
   1d582:	4621      	mov	r1, r4
   1d584:	f000 f824 	bl	1d5d0 <__sfvwrite_r>
   1d588:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d58a:	07da      	lsls	r2, r3, #31
   1d58c:	4605      	mov	r5, r0
   1d58e:	d402      	bmi.n	1d596 <_fputs_r+0x5e>
   1d590:	89a3      	ldrh	r3, [r4, #12]
   1d592:	059b      	lsls	r3, r3, #22
   1d594:	d502      	bpl.n	1d59c <_fputs_r+0x64>
   1d596:	4628      	mov	r0, r5
   1d598:	b007      	add	sp, #28
   1d59a:	bd30      	pop	{r4, r5, pc}
   1d59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d59e:	f000 fa23 	bl	1d9e8 <__retarget_lock_release_recursive>
   1d5a2:	4628      	mov	r0, r5
   1d5a4:	b007      	add	sp, #28
   1d5a6:	bd30      	pop	{r4, r5, pc}
   1d5a8:	4628      	mov	r0, r5
   1d5aa:	f003 ffc3 	bl	21534 <__sinit>
   1d5ae:	e7d4      	b.n	1d55a <_fputs_r+0x22>
   1d5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d5b2:	f000 fa17 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   1d5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d5ba:	b29a      	uxth	r2, r3
   1d5bc:	e7d6      	b.n	1d56c <_fputs_r+0x34>
   1d5be:	bf00      	nop

0001d5c0 <fputs>:
   1d5c0:	4b02      	ldr	r3, [pc, #8]	; (1d5cc <fputs+0xc>)
   1d5c2:	460a      	mov	r2, r1
   1d5c4:	4601      	mov	r1, r0
   1d5c6:	6818      	ldr	r0, [r3, #0]
   1d5c8:	f7ff bfb6 	b.w	1d538 <_fputs_r>
   1d5cc:	200000f8 	.word	0x200000f8

0001d5d0 <__sfvwrite_r>:
   1d5d0:	6893      	ldr	r3, [r2, #8]
   1d5d2:	2b00      	cmp	r3, #0
   1d5d4:	d073      	beq.n	1d6be <__sfvwrite_r+0xee>
   1d5d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5da:	898b      	ldrh	r3, [r1, #12]
   1d5dc:	b083      	sub	sp, #12
   1d5de:	460c      	mov	r4, r1
   1d5e0:	0719      	lsls	r1, r3, #28
   1d5e2:	9000      	str	r0, [sp, #0]
   1d5e4:	4616      	mov	r6, r2
   1d5e6:	d526      	bpl.n	1d636 <__sfvwrite_r+0x66>
   1d5e8:	6922      	ldr	r2, [r4, #16]
   1d5ea:	b322      	cbz	r2, 1d636 <__sfvwrite_r+0x66>
   1d5ec:	f013 0002 	ands.w	r0, r3, #2
   1d5f0:	6835      	ldr	r5, [r6, #0]
   1d5f2:	d02c      	beq.n	1d64e <__sfvwrite_r+0x7e>
   1d5f4:	f04f 0900 	mov.w	r9, #0
   1d5f8:	4fb0      	ldr	r7, [pc, #704]	; (1d8bc <__sfvwrite_r+0x2ec>)
   1d5fa:	46c8      	mov	r8, r9
   1d5fc:	46b2      	mov	sl, r6
   1d5fe:	45b8      	cmp	r8, r7
   1d600:	4643      	mov	r3, r8
   1d602:	464a      	mov	r2, r9
   1d604:	bf28      	it	cs
   1d606:	463b      	movcs	r3, r7
   1d608:	9800      	ldr	r0, [sp, #0]
   1d60a:	f1b8 0f00 	cmp.w	r8, #0
   1d60e:	d050      	beq.n	1d6b2 <__sfvwrite_r+0xe2>
   1d610:	69e1      	ldr	r1, [r4, #28]
   1d612:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d614:	47b0      	blx	r6
   1d616:	2800      	cmp	r0, #0
   1d618:	dd58      	ble.n	1d6cc <__sfvwrite_r+0xfc>
   1d61a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d61e:	1a1b      	subs	r3, r3, r0
   1d620:	4481      	add	r9, r0
   1d622:	eba8 0800 	sub.w	r8, r8, r0
   1d626:	f8ca 3008 	str.w	r3, [sl, #8]
   1d62a:	2b00      	cmp	r3, #0
   1d62c:	d1e7      	bne.n	1d5fe <__sfvwrite_r+0x2e>
   1d62e:	2000      	movs	r0, #0
   1d630:	b003      	add	sp, #12
   1d632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d636:	4621      	mov	r1, r4
   1d638:	9800      	ldr	r0, [sp, #0]
   1d63a:	f002 fe55 	bl	202e8 <__swsetup_r>
   1d63e:	2800      	cmp	r0, #0
   1d640:	f040 8133 	bne.w	1d8aa <__sfvwrite_r+0x2da>
   1d644:	89a3      	ldrh	r3, [r4, #12]
   1d646:	6835      	ldr	r5, [r6, #0]
   1d648:	f013 0002 	ands.w	r0, r3, #2
   1d64c:	d1d2      	bne.n	1d5f4 <__sfvwrite_r+0x24>
   1d64e:	f013 0901 	ands.w	r9, r3, #1
   1d652:	d145      	bne.n	1d6e0 <__sfvwrite_r+0x110>
   1d654:	464f      	mov	r7, r9
   1d656:	9601      	str	r6, [sp, #4]
   1d658:	b337      	cbz	r7, 1d6a8 <__sfvwrite_r+0xd8>
   1d65a:	059a      	lsls	r2, r3, #22
   1d65c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d660:	f140 8083 	bpl.w	1d76a <__sfvwrite_r+0x19a>
   1d664:	4547      	cmp	r7, r8
   1d666:	46c3      	mov	fp, r8
   1d668:	f0c0 80ab 	bcc.w	1d7c2 <__sfvwrite_r+0x1f2>
   1d66c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d670:	f040 80ac 	bne.w	1d7cc <__sfvwrite_r+0x1fc>
   1d674:	6820      	ldr	r0, [r4, #0]
   1d676:	46ba      	mov	sl, r7
   1d678:	465a      	mov	r2, fp
   1d67a:	4649      	mov	r1, r9
   1d67c:	f000 fdaa 	bl	1e1d4 <memmove>
   1d680:	68a2      	ldr	r2, [r4, #8]
   1d682:	6823      	ldr	r3, [r4, #0]
   1d684:	eba2 0208 	sub.w	r2, r2, r8
   1d688:	445b      	add	r3, fp
   1d68a:	60a2      	str	r2, [r4, #8]
   1d68c:	6023      	str	r3, [r4, #0]
   1d68e:	9a01      	ldr	r2, [sp, #4]
   1d690:	6893      	ldr	r3, [r2, #8]
   1d692:	eba3 030a 	sub.w	r3, r3, sl
   1d696:	44d1      	add	r9, sl
   1d698:	eba7 070a 	sub.w	r7, r7, sl
   1d69c:	6093      	str	r3, [r2, #8]
   1d69e:	2b00      	cmp	r3, #0
   1d6a0:	d0c5      	beq.n	1d62e <__sfvwrite_r+0x5e>
   1d6a2:	89a3      	ldrh	r3, [r4, #12]
   1d6a4:	2f00      	cmp	r7, #0
   1d6a6:	d1d8      	bne.n	1d65a <__sfvwrite_r+0x8a>
   1d6a8:	f8d5 9000 	ldr.w	r9, [r5]
   1d6ac:	686f      	ldr	r7, [r5, #4]
   1d6ae:	3508      	adds	r5, #8
   1d6b0:	e7d2      	b.n	1d658 <__sfvwrite_r+0x88>
   1d6b2:	f8d5 9000 	ldr.w	r9, [r5]
   1d6b6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d6ba:	3508      	adds	r5, #8
   1d6bc:	e79f      	b.n	1d5fe <__sfvwrite_r+0x2e>
   1d6be:	2000      	movs	r0, #0
   1d6c0:	4770      	bx	lr
   1d6c2:	4621      	mov	r1, r4
   1d6c4:	9800      	ldr	r0, [sp, #0]
   1d6c6:	f003 fedd 	bl	21484 <_fflush_r>
   1d6ca:	b370      	cbz	r0, 1d72a <__sfvwrite_r+0x15a>
   1d6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d6d4:	f04f 30ff 	mov.w	r0, #4294967295
   1d6d8:	81a3      	strh	r3, [r4, #12]
   1d6da:	b003      	add	sp, #12
   1d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6e0:	4681      	mov	r9, r0
   1d6e2:	4633      	mov	r3, r6
   1d6e4:	464e      	mov	r6, r9
   1d6e6:	46a8      	mov	r8, r5
   1d6e8:	469a      	mov	sl, r3
   1d6ea:	464d      	mov	r5, r9
   1d6ec:	b34e      	cbz	r6, 1d742 <__sfvwrite_r+0x172>
   1d6ee:	b380      	cbz	r0, 1d752 <__sfvwrite_r+0x182>
   1d6f0:	6820      	ldr	r0, [r4, #0]
   1d6f2:	6923      	ldr	r3, [r4, #16]
   1d6f4:	6962      	ldr	r2, [r4, #20]
   1d6f6:	45b1      	cmp	r9, r6
   1d6f8:	46cb      	mov	fp, r9
   1d6fa:	bf28      	it	cs
   1d6fc:	46b3      	movcs	fp, r6
   1d6fe:	4298      	cmp	r0, r3
   1d700:	465f      	mov	r7, fp
   1d702:	d904      	bls.n	1d70e <__sfvwrite_r+0x13e>
   1d704:	68a3      	ldr	r3, [r4, #8]
   1d706:	4413      	add	r3, r2
   1d708:	459b      	cmp	fp, r3
   1d70a:	f300 80a6 	bgt.w	1d85a <__sfvwrite_r+0x28a>
   1d70e:	4593      	cmp	fp, r2
   1d710:	db4b      	blt.n	1d7aa <__sfvwrite_r+0x1da>
   1d712:	4613      	mov	r3, r2
   1d714:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d716:	69e1      	ldr	r1, [r4, #28]
   1d718:	9800      	ldr	r0, [sp, #0]
   1d71a:	462a      	mov	r2, r5
   1d71c:	47b8      	blx	r7
   1d71e:	1e07      	subs	r7, r0, #0
   1d720:	ddd4      	ble.n	1d6cc <__sfvwrite_r+0xfc>
   1d722:	ebb9 0907 	subs.w	r9, r9, r7
   1d726:	d0cc      	beq.n	1d6c2 <__sfvwrite_r+0xf2>
   1d728:	2001      	movs	r0, #1
   1d72a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d72e:	1bdb      	subs	r3, r3, r7
   1d730:	443d      	add	r5, r7
   1d732:	1bf6      	subs	r6, r6, r7
   1d734:	f8ca 3008 	str.w	r3, [sl, #8]
   1d738:	2b00      	cmp	r3, #0
   1d73a:	f43f af78 	beq.w	1d62e <__sfvwrite_r+0x5e>
   1d73e:	2e00      	cmp	r6, #0
   1d740:	d1d5      	bne.n	1d6ee <__sfvwrite_r+0x11e>
   1d742:	f108 0308 	add.w	r3, r8, #8
   1d746:	e913 0060 	ldmdb	r3, {r5, r6}
   1d74a:	4698      	mov	r8, r3
   1d74c:	3308      	adds	r3, #8
   1d74e:	2e00      	cmp	r6, #0
   1d750:	d0f9      	beq.n	1d746 <__sfvwrite_r+0x176>
   1d752:	4632      	mov	r2, r6
   1d754:	210a      	movs	r1, #10
   1d756:	4628      	mov	r0, r5
   1d758:	f000 fc22 	bl	1dfa0 <memchr>
   1d75c:	2800      	cmp	r0, #0
   1d75e:	f000 80a1 	beq.w	1d8a4 <__sfvwrite_r+0x2d4>
   1d762:	3001      	adds	r0, #1
   1d764:	eba0 0905 	sub.w	r9, r0, r5
   1d768:	e7c2      	b.n	1d6f0 <__sfvwrite_r+0x120>
   1d76a:	6820      	ldr	r0, [r4, #0]
   1d76c:	6923      	ldr	r3, [r4, #16]
   1d76e:	4298      	cmp	r0, r3
   1d770:	d802      	bhi.n	1d778 <__sfvwrite_r+0x1a8>
   1d772:	6963      	ldr	r3, [r4, #20]
   1d774:	429f      	cmp	r7, r3
   1d776:	d25d      	bcs.n	1d834 <__sfvwrite_r+0x264>
   1d778:	45b8      	cmp	r8, r7
   1d77a:	bf28      	it	cs
   1d77c:	46b8      	movcs	r8, r7
   1d77e:	4642      	mov	r2, r8
   1d780:	4649      	mov	r1, r9
   1d782:	f000 fd27 	bl	1e1d4 <memmove>
   1d786:	68a3      	ldr	r3, [r4, #8]
   1d788:	6822      	ldr	r2, [r4, #0]
   1d78a:	eba3 0308 	sub.w	r3, r3, r8
   1d78e:	4442      	add	r2, r8
   1d790:	60a3      	str	r3, [r4, #8]
   1d792:	6022      	str	r2, [r4, #0]
   1d794:	b10b      	cbz	r3, 1d79a <__sfvwrite_r+0x1ca>
   1d796:	46c2      	mov	sl, r8
   1d798:	e779      	b.n	1d68e <__sfvwrite_r+0xbe>
   1d79a:	4621      	mov	r1, r4
   1d79c:	9800      	ldr	r0, [sp, #0]
   1d79e:	f003 fe71 	bl	21484 <_fflush_r>
   1d7a2:	2800      	cmp	r0, #0
   1d7a4:	d192      	bne.n	1d6cc <__sfvwrite_r+0xfc>
   1d7a6:	46c2      	mov	sl, r8
   1d7a8:	e771      	b.n	1d68e <__sfvwrite_r+0xbe>
   1d7aa:	465a      	mov	r2, fp
   1d7ac:	4629      	mov	r1, r5
   1d7ae:	f000 fd11 	bl	1e1d4 <memmove>
   1d7b2:	68a2      	ldr	r2, [r4, #8]
   1d7b4:	6823      	ldr	r3, [r4, #0]
   1d7b6:	eba2 020b 	sub.w	r2, r2, fp
   1d7ba:	445b      	add	r3, fp
   1d7bc:	60a2      	str	r2, [r4, #8]
   1d7be:	6023      	str	r3, [r4, #0]
   1d7c0:	e7af      	b.n	1d722 <__sfvwrite_r+0x152>
   1d7c2:	6820      	ldr	r0, [r4, #0]
   1d7c4:	46b8      	mov	r8, r7
   1d7c6:	46ba      	mov	sl, r7
   1d7c8:	46bb      	mov	fp, r7
   1d7ca:	e755      	b.n	1d678 <__sfvwrite_r+0xa8>
   1d7cc:	6962      	ldr	r2, [r4, #20]
   1d7ce:	6820      	ldr	r0, [r4, #0]
   1d7d0:	6921      	ldr	r1, [r4, #16]
   1d7d2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1d7d6:	eba0 0a01 	sub.w	sl, r0, r1
   1d7da:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1d7de:	f10a 0001 	add.w	r0, sl, #1
   1d7e2:	ea4f 0868 	mov.w	r8, r8, asr #1
   1d7e6:	4438      	add	r0, r7
   1d7e8:	4540      	cmp	r0, r8
   1d7ea:	4642      	mov	r2, r8
   1d7ec:	bf84      	itt	hi
   1d7ee:	4680      	movhi	r8, r0
   1d7f0:	4642      	movhi	r2, r8
   1d7f2:	055b      	lsls	r3, r3, #21
   1d7f4:	d544      	bpl.n	1d880 <__sfvwrite_r+0x2b0>
   1d7f6:	4611      	mov	r1, r2
   1d7f8:	9800      	ldr	r0, [sp, #0]
   1d7fa:	f000 f907 	bl	1da0c <_malloc_r>
   1d7fe:	4683      	mov	fp, r0
   1d800:	2800      	cmp	r0, #0
   1d802:	d055      	beq.n	1d8b0 <__sfvwrite_r+0x2e0>
   1d804:	4652      	mov	r2, sl
   1d806:	6921      	ldr	r1, [r4, #16]
   1d808:	f000 fc4a 	bl	1e0a0 <memcpy>
   1d80c:	89a3      	ldrh	r3, [r4, #12]
   1d80e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1d812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d816:	81a3      	strh	r3, [r4, #12]
   1d818:	eb0b 000a 	add.w	r0, fp, sl
   1d81c:	eba8 030a 	sub.w	r3, r8, sl
   1d820:	f8c4 b010 	str.w	fp, [r4, #16]
   1d824:	f8c4 8014 	str.w	r8, [r4, #20]
   1d828:	6020      	str	r0, [r4, #0]
   1d82a:	60a3      	str	r3, [r4, #8]
   1d82c:	46b8      	mov	r8, r7
   1d82e:	46ba      	mov	sl, r7
   1d830:	46bb      	mov	fp, r7
   1d832:	e721      	b.n	1d678 <__sfvwrite_r+0xa8>
   1d834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d838:	42b9      	cmp	r1, r7
   1d83a:	bf28      	it	cs
   1d83c:	4639      	movcs	r1, r7
   1d83e:	464a      	mov	r2, r9
   1d840:	fb91 f1f3 	sdiv	r1, r1, r3
   1d844:	9800      	ldr	r0, [sp, #0]
   1d846:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d848:	fb03 f301 	mul.w	r3, r3, r1
   1d84c:	69e1      	ldr	r1, [r4, #28]
   1d84e:	47b0      	blx	r6
   1d850:	f1b0 0a00 	subs.w	sl, r0, #0
   1d854:	f73f af1b 	bgt.w	1d68e <__sfvwrite_r+0xbe>
   1d858:	e738      	b.n	1d6cc <__sfvwrite_r+0xfc>
   1d85a:	461a      	mov	r2, r3
   1d85c:	4629      	mov	r1, r5
   1d85e:	9301      	str	r3, [sp, #4]
   1d860:	f000 fcb8 	bl	1e1d4 <memmove>
   1d864:	6822      	ldr	r2, [r4, #0]
   1d866:	9b01      	ldr	r3, [sp, #4]
   1d868:	9800      	ldr	r0, [sp, #0]
   1d86a:	441a      	add	r2, r3
   1d86c:	6022      	str	r2, [r4, #0]
   1d86e:	4621      	mov	r1, r4
   1d870:	f003 fe08 	bl	21484 <_fflush_r>
   1d874:	9b01      	ldr	r3, [sp, #4]
   1d876:	2800      	cmp	r0, #0
   1d878:	f47f af28 	bne.w	1d6cc <__sfvwrite_r+0xfc>
   1d87c:	461f      	mov	r7, r3
   1d87e:	e750      	b.n	1d722 <__sfvwrite_r+0x152>
   1d880:	9800      	ldr	r0, [sp, #0]
   1d882:	f000 fda5 	bl	1e3d0 <_realloc_r>
   1d886:	4683      	mov	fp, r0
   1d888:	2800      	cmp	r0, #0
   1d88a:	d1c5      	bne.n	1d818 <__sfvwrite_r+0x248>
   1d88c:	9d00      	ldr	r5, [sp, #0]
   1d88e:	6921      	ldr	r1, [r4, #16]
   1d890:	4628      	mov	r0, r5
   1d892:	f003 fef1 	bl	21678 <_free_r>
   1d896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d89a:	220c      	movs	r2, #12
   1d89c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1d8a0:	602a      	str	r2, [r5, #0]
   1d8a2:	e715      	b.n	1d6d0 <__sfvwrite_r+0x100>
   1d8a4:	f106 0901 	add.w	r9, r6, #1
   1d8a8:	e722      	b.n	1d6f0 <__sfvwrite_r+0x120>
   1d8aa:	f04f 30ff 	mov.w	r0, #4294967295
   1d8ae:	e6bf      	b.n	1d630 <__sfvwrite_r+0x60>
   1d8b0:	9a00      	ldr	r2, [sp, #0]
   1d8b2:	230c      	movs	r3, #12
   1d8b4:	6013      	str	r3, [r2, #0]
   1d8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d8ba:	e709      	b.n	1d6d0 <__sfvwrite_r+0x100>
   1d8bc:	7ffffc00 	.word	0x7ffffc00

0001d8c0 <_fwrite_r>:
   1d8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8c4:	b086      	sub	sp, #24
   1d8c6:	fb02 f503 	mul.w	r5, r2, r3
   1d8ca:	4690      	mov	r8, r2
   1d8cc:	461e      	mov	r6, r3
   1d8ce:	aa01      	add	r2, sp, #4
   1d8d0:	2301      	movs	r3, #1
   1d8d2:	9101      	str	r1, [sp, #4]
   1d8d4:	9502      	str	r5, [sp, #8]
   1d8d6:	9505      	str	r5, [sp, #20]
   1d8d8:	9203      	str	r2, [sp, #12]
   1d8da:	9304      	str	r3, [sp, #16]
   1d8dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d8de:	4607      	mov	r7, r0
   1d8e0:	b110      	cbz	r0, 1d8e8 <_fwrite_r+0x28>
   1d8e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d8e4:	2b00      	cmp	r3, #0
   1d8e6:	d031      	beq.n	1d94c <_fwrite_r+0x8c>
   1d8e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d8ea:	f013 0f01 	tst.w	r3, #1
   1d8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d8f2:	b29a      	uxth	r2, r3
   1d8f4:	d101      	bne.n	1d8fa <_fwrite_r+0x3a>
   1d8f6:	0591      	lsls	r1, r2, #22
   1d8f8:	d52b      	bpl.n	1d952 <_fwrite_r+0x92>
   1d8fa:	0492      	lsls	r2, r2, #18
   1d8fc:	d406      	bmi.n	1d90c <_fwrite_r+0x4c>
   1d8fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d908:	81a3      	strh	r3, [r4, #12]
   1d90a:	6662      	str	r2, [r4, #100]	; 0x64
   1d90c:	4638      	mov	r0, r7
   1d90e:	aa03      	add	r2, sp, #12
   1d910:	4621      	mov	r1, r4
   1d912:	f7ff fe5d 	bl	1d5d0 <__sfvwrite_r>
   1d916:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d918:	b940      	cbnz	r0, 1d92c <_fwrite_r+0x6c>
   1d91a:	07d8      	lsls	r0, r3, #31
   1d91c:	d402      	bmi.n	1d924 <_fwrite_r+0x64>
   1d91e:	89a3      	ldrh	r3, [r4, #12]
   1d920:	0599      	lsls	r1, r3, #22
   1d922:	d51d      	bpl.n	1d960 <_fwrite_r+0xa0>
   1d924:	4630      	mov	r0, r6
   1d926:	b006      	add	sp, #24
   1d928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d92c:	07da      	lsls	r2, r3, #31
   1d92e:	d506      	bpl.n	1d93e <_fwrite_r+0x7e>
   1d930:	9805      	ldr	r0, [sp, #20]
   1d932:	1a2d      	subs	r5, r5, r0
   1d934:	fbb5 f0f8 	udiv	r0, r5, r8
   1d938:	b006      	add	sp, #24
   1d93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d93e:	89a3      	ldrh	r3, [r4, #12]
   1d940:	059b      	lsls	r3, r3, #22
   1d942:	d4f5      	bmi.n	1d930 <_fwrite_r+0x70>
   1d944:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d946:	f000 f84f 	bl	1d9e8 <__retarget_lock_release_recursive>
   1d94a:	e7f1      	b.n	1d930 <_fwrite_r+0x70>
   1d94c:	f003 fdf2 	bl	21534 <__sinit>
   1d950:	e7ca      	b.n	1d8e8 <_fwrite_r+0x28>
   1d952:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d954:	f000 f846 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   1d958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d95c:	b29a      	uxth	r2, r3
   1d95e:	e7cc      	b.n	1d8fa <_fwrite_r+0x3a>
   1d960:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d962:	f000 f841 	bl	1d9e8 <__retarget_lock_release_recursive>
   1d966:	4630      	mov	r0, r6
   1d968:	e7e6      	b.n	1d938 <_fwrite_r+0x78>
   1d96a:	bf00      	nop

0001d96c <fwrite>:
   1d96c:	b510      	push	{r4, lr}
   1d96e:	b082      	sub	sp, #8
   1d970:	4c05      	ldr	r4, [pc, #20]	; (1d988 <fwrite+0x1c>)
   1d972:	9300      	str	r3, [sp, #0]
   1d974:	6824      	ldr	r4, [r4, #0]
   1d976:	4613      	mov	r3, r2
   1d978:	460a      	mov	r2, r1
   1d97a:	4601      	mov	r1, r0
   1d97c:	4620      	mov	r0, r4
   1d97e:	f7ff ff9f 	bl	1d8c0 <_fwrite_r>
   1d982:	b002      	add	sp, #8
   1d984:	bd10      	pop	{r4, pc}
   1d986:	bf00      	nop
   1d988:	200000f8 	.word	0x200000f8

0001d98c <__libc_init_array>:
   1d98c:	b570      	push	{r4, r5, r6, lr}
   1d98e:	4e0f      	ldr	r6, [pc, #60]	; (1d9cc <__libc_init_array+0x40>)
   1d990:	4d0f      	ldr	r5, [pc, #60]	; (1d9d0 <__libc_init_array+0x44>)
   1d992:	1b76      	subs	r6, r6, r5
   1d994:	10b6      	asrs	r6, r6, #2
   1d996:	bf18      	it	ne
   1d998:	2400      	movne	r4, #0
   1d99a:	d005      	beq.n	1d9a8 <__libc_init_array+0x1c>
   1d99c:	3401      	adds	r4, #1
   1d99e:	f855 3b04 	ldr.w	r3, [r5], #4
   1d9a2:	4798      	blx	r3
   1d9a4:	42a6      	cmp	r6, r4
   1d9a6:	d1f9      	bne.n	1d99c <__libc_init_array+0x10>
   1d9a8:	4e0a      	ldr	r6, [pc, #40]	; (1d9d4 <__libc_init_array+0x48>)
   1d9aa:	4d0b      	ldr	r5, [pc, #44]	; (1d9d8 <__libc_init_array+0x4c>)
   1d9ac:	1b76      	subs	r6, r6, r5
   1d9ae:	f004 febb 	bl	22728 <_init>
   1d9b2:	10b6      	asrs	r6, r6, #2
   1d9b4:	bf18      	it	ne
   1d9b6:	2400      	movne	r4, #0
   1d9b8:	d006      	beq.n	1d9c8 <__libc_init_array+0x3c>
   1d9ba:	3401      	adds	r4, #1
   1d9bc:	f855 3b04 	ldr.w	r3, [r5], #4
   1d9c0:	4798      	blx	r3
   1d9c2:	42a6      	cmp	r6, r4
   1d9c4:	d1f9      	bne.n	1d9ba <__libc_init_array+0x2e>
   1d9c6:	bd70      	pop	{r4, r5, r6, pc}
   1d9c8:	bd70      	pop	{r4, r5, r6, pc}
   1d9ca:	bf00      	nop
   1d9cc:	00022740 	.word	0x00022740
   1d9d0:	00022740 	.word	0x00022740
   1d9d4:	00022778 	.word	0x00022778
   1d9d8:	00022740 	.word	0x00022740

0001d9dc <__retarget_lock_init_recursive>:
   1d9dc:	4770      	bx	lr
   1d9de:	bf00      	nop

0001d9e0 <__retarget_lock_close_recursive>:
   1d9e0:	4770      	bx	lr
   1d9e2:	bf00      	nop

0001d9e4 <__retarget_lock_acquire_recursive>:
   1d9e4:	4770      	bx	lr
   1d9e6:	bf00      	nop

0001d9e8 <__retarget_lock_release_recursive>:
   1d9e8:	4770      	bx	lr
   1d9ea:	bf00      	nop

0001d9ec <malloc>:
   1d9ec:	4b02      	ldr	r3, [pc, #8]	; (1d9f8 <malloc+0xc>)
   1d9ee:	4601      	mov	r1, r0
   1d9f0:	6818      	ldr	r0, [r3, #0]
   1d9f2:	f000 b80b 	b.w	1da0c <_malloc_r>
   1d9f6:	bf00      	nop
   1d9f8:	200000f8 	.word	0x200000f8

0001d9fc <free>:
   1d9fc:	4b02      	ldr	r3, [pc, #8]	; (1da08 <free+0xc>)
   1d9fe:	4601      	mov	r1, r0
   1da00:	6818      	ldr	r0, [r3, #0]
   1da02:	f003 be39 	b.w	21678 <_free_r>
   1da06:	bf00      	nop
   1da08:	200000f8 	.word	0x200000f8

0001da0c <_malloc_r>:
   1da0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da10:	f101 060b 	add.w	r6, r1, #11
   1da14:	2e16      	cmp	r6, #22
   1da16:	b083      	sub	sp, #12
   1da18:	4605      	mov	r5, r0
   1da1a:	f240 809e 	bls.w	1db5a <_malloc_r+0x14e>
   1da1e:	f036 0607 	bics.w	r6, r6, #7
   1da22:	f100 80bd 	bmi.w	1dba0 <_malloc_r+0x194>
   1da26:	42b1      	cmp	r1, r6
   1da28:	f200 80ba 	bhi.w	1dba0 <_malloc_r+0x194>
   1da2c:	f000 fc84 	bl	1e338 <__malloc_lock>
   1da30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1da34:	f0c0 8293 	bcc.w	1df5e <_malloc_r+0x552>
   1da38:	0a73      	lsrs	r3, r6, #9
   1da3a:	f000 80b8 	beq.w	1dbae <_malloc_r+0x1a2>
   1da3e:	2b04      	cmp	r3, #4
   1da40:	f200 8179 	bhi.w	1dd36 <_malloc_r+0x32a>
   1da44:	09b3      	lsrs	r3, r6, #6
   1da46:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1da4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1da4e:	00c3      	lsls	r3, r0, #3
   1da50:	4fbf      	ldr	r7, [pc, #764]	; (1dd50 <_malloc_r+0x344>)
   1da52:	443b      	add	r3, r7
   1da54:	f1a3 0108 	sub.w	r1, r3, #8
   1da58:	685c      	ldr	r4, [r3, #4]
   1da5a:	42a1      	cmp	r1, r4
   1da5c:	d106      	bne.n	1da6c <_malloc_r+0x60>
   1da5e:	e00c      	b.n	1da7a <_malloc_r+0x6e>
   1da60:	2a00      	cmp	r2, #0
   1da62:	f280 80aa 	bge.w	1dbba <_malloc_r+0x1ae>
   1da66:	68e4      	ldr	r4, [r4, #12]
   1da68:	42a1      	cmp	r1, r4
   1da6a:	d006      	beq.n	1da7a <_malloc_r+0x6e>
   1da6c:	6863      	ldr	r3, [r4, #4]
   1da6e:	f023 0303 	bic.w	r3, r3, #3
   1da72:	1b9a      	subs	r2, r3, r6
   1da74:	2a0f      	cmp	r2, #15
   1da76:	ddf3      	ble.n	1da60 <_malloc_r+0x54>
   1da78:	4670      	mov	r0, lr
   1da7a:	693c      	ldr	r4, [r7, #16]
   1da7c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1dd64 <_malloc_r+0x358>
   1da80:	4574      	cmp	r4, lr
   1da82:	f000 81ab 	beq.w	1dddc <_malloc_r+0x3d0>
   1da86:	6863      	ldr	r3, [r4, #4]
   1da88:	f023 0303 	bic.w	r3, r3, #3
   1da8c:	1b9a      	subs	r2, r3, r6
   1da8e:	2a0f      	cmp	r2, #15
   1da90:	f300 8190 	bgt.w	1ddb4 <_malloc_r+0x3a8>
   1da94:	2a00      	cmp	r2, #0
   1da96:	f8c7 e014 	str.w	lr, [r7, #20]
   1da9a:	f8c7 e010 	str.w	lr, [r7, #16]
   1da9e:	f280 809d 	bge.w	1dbdc <_malloc_r+0x1d0>
   1daa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1daa6:	f080 8161 	bcs.w	1dd6c <_malloc_r+0x360>
   1daaa:	08db      	lsrs	r3, r3, #3
   1daac:	f103 0c01 	add.w	ip, r3, #1
   1dab0:	1099      	asrs	r1, r3, #2
   1dab2:	687a      	ldr	r2, [r7, #4]
   1dab4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dab8:	f8c4 8008 	str.w	r8, [r4, #8]
   1dabc:	2301      	movs	r3, #1
   1dabe:	408b      	lsls	r3, r1
   1dac0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1dac4:	4313      	orrs	r3, r2
   1dac6:	3908      	subs	r1, #8
   1dac8:	60e1      	str	r1, [r4, #12]
   1daca:	607b      	str	r3, [r7, #4]
   1dacc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1dad0:	f8c8 400c 	str.w	r4, [r8, #12]
   1dad4:	1082      	asrs	r2, r0, #2
   1dad6:	2401      	movs	r4, #1
   1dad8:	4094      	lsls	r4, r2
   1dada:	429c      	cmp	r4, r3
   1dadc:	f200 808b 	bhi.w	1dbf6 <_malloc_r+0x1ea>
   1dae0:	421c      	tst	r4, r3
   1dae2:	d106      	bne.n	1daf2 <_malloc_r+0xe6>
   1dae4:	f020 0003 	bic.w	r0, r0, #3
   1dae8:	0064      	lsls	r4, r4, #1
   1daea:	421c      	tst	r4, r3
   1daec:	f100 0004 	add.w	r0, r0, #4
   1daf0:	d0fa      	beq.n	1dae8 <_malloc_r+0xdc>
   1daf2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1daf6:	46cc      	mov	ip, r9
   1daf8:	4680      	mov	r8, r0
   1dafa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1dafe:	459c      	cmp	ip, r3
   1db00:	d107      	bne.n	1db12 <_malloc_r+0x106>
   1db02:	e16d      	b.n	1dde0 <_malloc_r+0x3d4>
   1db04:	2a00      	cmp	r2, #0
   1db06:	f280 817b 	bge.w	1de00 <_malloc_r+0x3f4>
   1db0a:	68db      	ldr	r3, [r3, #12]
   1db0c:	459c      	cmp	ip, r3
   1db0e:	f000 8167 	beq.w	1dde0 <_malloc_r+0x3d4>
   1db12:	6859      	ldr	r1, [r3, #4]
   1db14:	f021 0103 	bic.w	r1, r1, #3
   1db18:	1b8a      	subs	r2, r1, r6
   1db1a:	2a0f      	cmp	r2, #15
   1db1c:	ddf2      	ble.n	1db04 <_malloc_r+0xf8>
   1db1e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1db22:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1db26:	9300      	str	r3, [sp, #0]
   1db28:	199c      	adds	r4, r3, r6
   1db2a:	4628      	mov	r0, r5
   1db2c:	f046 0601 	orr.w	r6, r6, #1
   1db30:	f042 0501 	orr.w	r5, r2, #1
   1db34:	605e      	str	r6, [r3, #4]
   1db36:	f8c8 c00c 	str.w	ip, [r8, #12]
   1db3a:	f8cc 8008 	str.w	r8, [ip, #8]
   1db3e:	617c      	str	r4, [r7, #20]
   1db40:	613c      	str	r4, [r7, #16]
   1db42:	f8c4 e00c 	str.w	lr, [r4, #12]
   1db46:	f8c4 e008 	str.w	lr, [r4, #8]
   1db4a:	6065      	str	r5, [r4, #4]
   1db4c:	505a      	str	r2, [r3, r1]
   1db4e:	f000 fbf9 	bl	1e344 <__malloc_unlock>
   1db52:	9b00      	ldr	r3, [sp, #0]
   1db54:	f103 0408 	add.w	r4, r3, #8
   1db58:	e01e      	b.n	1db98 <_malloc_r+0x18c>
   1db5a:	2910      	cmp	r1, #16
   1db5c:	d820      	bhi.n	1dba0 <_malloc_r+0x194>
   1db5e:	f000 fbeb 	bl	1e338 <__malloc_lock>
   1db62:	2610      	movs	r6, #16
   1db64:	2318      	movs	r3, #24
   1db66:	2002      	movs	r0, #2
   1db68:	4f79      	ldr	r7, [pc, #484]	; (1dd50 <_malloc_r+0x344>)
   1db6a:	443b      	add	r3, r7
   1db6c:	f1a3 0208 	sub.w	r2, r3, #8
   1db70:	685c      	ldr	r4, [r3, #4]
   1db72:	4294      	cmp	r4, r2
   1db74:	f000 813d 	beq.w	1ddf2 <_malloc_r+0x3e6>
   1db78:	6863      	ldr	r3, [r4, #4]
   1db7a:	68e1      	ldr	r1, [r4, #12]
   1db7c:	68a6      	ldr	r6, [r4, #8]
   1db7e:	f023 0303 	bic.w	r3, r3, #3
   1db82:	4423      	add	r3, r4
   1db84:	4628      	mov	r0, r5
   1db86:	685a      	ldr	r2, [r3, #4]
   1db88:	60f1      	str	r1, [r6, #12]
   1db8a:	f042 0201 	orr.w	r2, r2, #1
   1db8e:	608e      	str	r6, [r1, #8]
   1db90:	605a      	str	r2, [r3, #4]
   1db92:	f000 fbd7 	bl	1e344 <__malloc_unlock>
   1db96:	3408      	adds	r4, #8
   1db98:	4620      	mov	r0, r4
   1db9a:	b003      	add	sp, #12
   1db9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dba0:	2400      	movs	r4, #0
   1dba2:	230c      	movs	r3, #12
   1dba4:	4620      	mov	r0, r4
   1dba6:	602b      	str	r3, [r5, #0]
   1dba8:	b003      	add	sp, #12
   1dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbae:	2040      	movs	r0, #64	; 0x40
   1dbb0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dbb4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1dbb8:	e74a      	b.n	1da50 <_malloc_r+0x44>
   1dbba:	4423      	add	r3, r4
   1dbbc:	68e1      	ldr	r1, [r4, #12]
   1dbbe:	685a      	ldr	r2, [r3, #4]
   1dbc0:	68a6      	ldr	r6, [r4, #8]
   1dbc2:	f042 0201 	orr.w	r2, r2, #1
   1dbc6:	60f1      	str	r1, [r6, #12]
   1dbc8:	4628      	mov	r0, r5
   1dbca:	608e      	str	r6, [r1, #8]
   1dbcc:	605a      	str	r2, [r3, #4]
   1dbce:	f000 fbb9 	bl	1e344 <__malloc_unlock>
   1dbd2:	3408      	adds	r4, #8
   1dbd4:	4620      	mov	r0, r4
   1dbd6:	b003      	add	sp, #12
   1dbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbdc:	4423      	add	r3, r4
   1dbde:	4628      	mov	r0, r5
   1dbe0:	685a      	ldr	r2, [r3, #4]
   1dbe2:	f042 0201 	orr.w	r2, r2, #1
   1dbe6:	605a      	str	r2, [r3, #4]
   1dbe8:	f000 fbac 	bl	1e344 <__malloc_unlock>
   1dbec:	3408      	adds	r4, #8
   1dbee:	4620      	mov	r0, r4
   1dbf0:	b003      	add	sp, #12
   1dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbf6:	68bc      	ldr	r4, [r7, #8]
   1dbf8:	6863      	ldr	r3, [r4, #4]
   1dbfa:	f023 0803 	bic.w	r8, r3, #3
   1dbfe:	45b0      	cmp	r8, r6
   1dc00:	d304      	bcc.n	1dc0c <_malloc_r+0x200>
   1dc02:	eba8 0306 	sub.w	r3, r8, r6
   1dc06:	2b0f      	cmp	r3, #15
   1dc08:	f300 8085 	bgt.w	1dd16 <_malloc_r+0x30a>
   1dc0c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1dd68 <_malloc_r+0x35c>
   1dc10:	4b50      	ldr	r3, [pc, #320]	; (1dd54 <_malloc_r+0x348>)
   1dc12:	f8d9 2000 	ldr.w	r2, [r9]
   1dc16:	681b      	ldr	r3, [r3, #0]
   1dc18:	3201      	adds	r2, #1
   1dc1a:	4433      	add	r3, r6
   1dc1c:	eb04 0a08 	add.w	sl, r4, r8
   1dc20:	f000 8155 	beq.w	1dece <_malloc_r+0x4c2>
   1dc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1dc28:	330f      	adds	r3, #15
   1dc2a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1dc2e:	f02b 0b0f 	bic.w	fp, fp, #15
   1dc32:	4659      	mov	r1, fp
   1dc34:	4628      	mov	r0, r5
   1dc36:	f000 fd71 	bl	1e71c <_sbrk_r>
   1dc3a:	1c41      	adds	r1, r0, #1
   1dc3c:	4602      	mov	r2, r0
   1dc3e:	f000 80fc 	beq.w	1de3a <_malloc_r+0x42e>
   1dc42:	4582      	cmp	sl, r0
   1dc44:	f200 80f7 	bhi.w	1de36 <_malloc_r+0x42a>
   1dc48:	4b43      	ldr	r3, [pc, #268]	; (1dd58 <_malloc_r+0x34c>)
   1dc4a:	6819      	ldr	r1, [r3, #0]
   1dc4c:	4459      	add	r1, fp
   1dc4e:	6019      	str	r1, [r3, #0]
   1dc50:	f000 814d 	beq.w	1deee <_malloc_r+0x4e2>
   1dc54:	f8d9 0000 	ldr.w	r0, [r9]
   1dc58:	3001      	adds	r0, #1
   1dc5a:	bf1b      	ittet	ne
   1dc5c:	eba2 0a0a 	subne.w	sl, r2, sl
   1dc60:	4451      	addne	r1, sl
   1dc62:	f8c9 2000 	streq.w	r2, [r9]
   1dc66:	6019      	strne	r1, [r3, #0]
   1dc68:	f012 0107 	ands.w	r1, r2, #7
   1dc6c:	f000 8115 	beq.w	1de9a <_malloc_r+0x48e>
   1dc70:	f1c1 0008 	rsb	r0, r1, #8
   1dc74:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1dc78:	4402      	add	r2, r0
   1dc7a:	3108      	adds	r1, #8
   1dc7c:	eb02 090b 	add.w	r9, r2, fp
   1dc80:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1dc84:	eba1 0909 	sub.w	r9, r1, r9
   1dc88:	4649      	mov	r1, r9
   1dc8a:	4628      	mov	r0, r5
   1dc8c:	9301      	str	r3, [sp, #4]
   1dc8e:	9200      	str	r2, [sp, #0]
   1dc90:	f000 fd44 	bl	1e71c <_sbrk_r>
   1dc94:	1c43      	adds	r3, r0, #1
   1dc96:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1dc9a:	f000 8143 	beq.w	1df24 <_malloc_r+0x518>
   1dc9e:	1a80      	subs	r0, r0, r2
   1dca0:	4448      	add	r0, r9
   1dca2:	f040 0001 	orr.w	r0, r0, #1
   1dca6:	6819      	ldr	r1, [r3, #0]
   1dca8:	60ba      	str	r2, [r7, #8]
   1dcaa:	4449      	add	r1, r9
   1dcac:	42bc      	cmp	r4, r7
   1dcae:	6050      	str	r0, [r2, #4]
   1dcb0:	6019      	str	r1, [r3, #0]
   1dcb2:	d017      	beq.n	1dce4 <_malloc_r+0x2d8>
   1dcb4:	f1b8 0f0f 	cmp.w	r8, #15
   1dcb8:	f240 80fb 	bls.w	1deb2 <_malloc_r+0x4a6>
   1dcbc:	6860      	ldr	r0, [r4, #4]
   1dcbe:	f1a8 020c 	sub.w	r2, r8, #12
   1dcc2:	f022 0207 	bic.w	r2, r2, #7
   1dcc6:	eb04 0e02 	add.w	lr, r4, r2
   1dcca:	f000 0001 	and.w	r0, r0, #1
   1dcce:	f04f 0c05 	mov.w	ip, #5
   1dcd2:	4310      	orrs	r0, r2
   1dcd4:	2a0f      	cmp	r2, #15
   1dcd6:	6060      	str	r0, [r4, #4]
   1dcd8:	f8ce c004 	str.w	ip, [lr, #4]
   1dcdc:	f8ce c008 	str.w	ip, [lr, #8]
   1dce0:	f200 8117 	bhi.w	1df12 <_malloc_r+0x506>
   1dce4:	4b1d      	ldr	r3, [pc, #116]	; (1dd5c <_malloc_r+0x350>)
   1dce6:	68bc      	ldr	r4, [r7, #8]
   1dce8:	681a      	ldr	r2, [r3, #0]
   1dcea:	4291      	cmp	r1, r2
   1dcec:	bf88      	it	hi
   1dcee:	6019      	strhi	r1, [r3, #0]
   1dcf0:	4b1b      	ldr	r3, [pc, #108]	; (1dd60 <_malloc_r+0x354>)
   1dcf2:	681a      	ldr	r2, [r3, #0]
   1dcf4:	4291      	cmp	r1, r2
   1dcf6:	6862      	ldr	r2, [r4, #4]
   1dcf8:	bf88      	it	hi
   1dcfa:	6019      	strhi	r1, [r3, #0]
   1dcfc:	f022 0203 	bic.w	r2, r2, #3
   1dd00:	4296      	cmp	r6, r2
   1dd02:	eba2 0306 	sub.w	r3, r2, r6
   1dd06:	d801      	bhi.n	1dd0c <_malloc_r+0x300>
   1dd08:	2b0f      	cmp	r3, #15
   1dd0a:	dc04      	bgt.n	1dd16 <_malloc_r+0x30a>
   1dd0c:	4628      	mov	r0, r5
   1dd0e:	f000 fb19 	bl	1e344 <__malloc_unlock>
   1dd12:	2400      	movs	r4, #0
   1dd14:	e740      	b.n	1db98 <_malloc_r+0x18c>
   1dd16:	19a2      	adds	r2, r4, r6
   1dd18:	f043 0301 	orr.w	r3, r3, #1
   1dd1c:	f046 0601 	orr.w	r6, r6, #1
   1dd20:	6066      	str	r6, [r4, #4]
   1dd22:	4628      	mov	r0, r5
   1dd24:	60ba      	str	r2, [r7, #8]
   1dd26:	6053      	str	r3, [r2, #4]
   1dd28:	f000 fb0c 	bl	1e344 <__malloc_unlock>
   1dd2c:	3408      	adds	r4, #8
   1dd2e:	4620      	mov	r0, r4
   1dd30:	b003      	add	sp, #12
   1dd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd36:	2b14      	cmp	r3, #20
   1dd38:	d971      	bls.n	1de1e <_malloc_r+0x412>
   1dd3a:	2b54      	cmp	r3, #84	; 0x54
   1dd3c:	f200 80a3 	bhi.w	1de86 <_malloc_r+0x47a>
   1dd40:	0b33      	lsrs	r3, r6, #12
   1dd42:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1dd46:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1dd4a:	00c3      	lsls	r3, r0, #3
   1dd4c:	e680      	b.n	1da50 <_malloc_r+0x44>
   1dd4e:	bf00      	nop
   1dd50:	20000694 	.word	0x20000694
   1dd54:	200022d0 	.word	0x200022d0
   1dd58:	200022a0 	.word	0x200022a0
   1dd5c:	200022c8 	.word	0x200022c8
   1dd60:	200022cc 	.word	0x200022cc
   1dd64:	2000069c 	.word	0x2000069c
   1dd68:	20000a9c 	.word	0x20000a9c
   1dd6c:	0a5a      	lsrs	r2, r3, #9
   1dd6e:	2a04      	cmp	r2, #4
   1dd70:	d95b      	bls.n	1de2a <_malloc_r+0x41e>
   1dd72:	2a14      	cmp	r2, #20
   1dd74:	f200 80ae 	bhi.w	1ded4 <_malloc_r+0x4c8>
   1dd78:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1dd7c:	00c9      	lsls	r1, r1, #3
   1dd7e:	325b      	adds	r2, #91	; 0x5b
   1dd80:	eb07 0c01 	add.w	ip, r7, r1
   1dd84:	5879      	ldr	r1, [r7, r1]
   1dd86:	f1ac 0c08 	sub.w	ip, ip, #8
   1dd8a:	458c      	cmp	ip, r1
   1dd8c:	f000 8088 	beq.w	1dea0 <_malloc_r+0x494>
   1dd90:	684a      	ldr	r2, [r1, #4]
   1dd92:	f022 0203 	bic.w	r2, r2, #3
   1dd96:	4293      	cmp	r3, r2
   1dd98:	d273      	bcs.n	1de82 <_malloc_r+0x476>
   1dd9a:	6889      	ldr	r1, [r1, #8]
   1dd9c:	458c      	cmp	ip, r1
   1dd9e:	d1f7      	bne.n	1dd90 <_malloc_r+0x384>
   1dda0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1dda4:	687b      	ldr	r3, [r7, #4]
   1dda6:	60e2      	str	r2, [r4, #12]
   1dda8:	f8c4 c008 	str.w	ip, [r4, #8]
   1ddac:	6094      	str	r4, [r2, #8]
   1ddae:	f8cc 400c 	str.w	r4, [ip, #12]
   1ddb2:	e68f      	b.n	1dad4 <_malloc_r+0xc8>
   1ddb4:	19a1      	adds	r1, r4, r6
   1ddb6:	f046 0c01 	orr.w	ip, r6, #1
   1ddba:	f042 0601 	orr.w	r6, r2, #1
   1ddbe:	f8c4 c004 	str.w	ip, [r4, #4]
   1ddc2:	4628      	mov	r0, r5
   1ddc4:	6179      	str	r1, [r7, #20]
   1ddc6:	6139      	str	r1, [r7, #16]
   1ddc8:	f8c1 e00c 	str.w	lr, [r1, #12]
   1ddcc:	f8c1 e008 	str.w	lr, [r1, #8]
   1ddd0:	604e      	str	r6, [r1, #4]
   1ddd2:	50e2      	str	r2, [r4, r3]
   1ddd4:	f000 fab6 	bl	1e344 <__malloc_unlock>
   1ddd8:	3408      	adds	r4, #8
   1ddda:	e6dd      	b.n	1db98 <_malloc_r+0x18c>
   1dddc:	687b      	ldr	r3, [r7, #4]
   1ddde:	e679      	b.n	1dad4 <_malloc_r+0xc8>
   1dde0:	f108 0801 	add.w	r8, r8, #1
   1dde4:	f018 0f03 	tst.w	r8, #3
   1dde8:	f10c 0c08 	add.w	ip, ip, #8
   1ddec:	f47f ae85 	bne.w	1dafa <_malloc_r+0xee>
   1ddf0:	e02d      	b.n	1de4e <_malloc_r+0x442>
   1ddf2:	68dc      	ldr	r4, [r3, #12]
   1ddf4:	42a3      	cmp	r3, r4
   1ddf6:	bf08      	it	eq
   1ddf8:	3002      	addeq	r0, #2
   1ddfa:	f43f ae3e 	beq.w	1da7a <_malloc_r+0x6e>
   1ddfe:	e6bb      	b.n	1db78 <_malloc_r+0x16c>
   1de00:	4419      	add	r1, r3
   1de02:	461c      	mov	r4, r3
   1de04:	684a      	ldr	r2, [r1, #4]
   1de06:	68db      	ldr	r3, [r3, #12]
   1de08:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1de0c:	f042 0201 	orr.w	r2, r2, #1
   1de10:	604a      	str	r2, [r1, #4]
   1de12:	4628      	mov	r0, r5
   1de14:	60f3      	str	r3, [r6, #12]
   1de16:	609e      	str	r6, [r3, #8]
   1de18:	f000 fa94 	bl	1e344 <__malloc_unlock>
   1de1c:	e6bc      	b.n	1db98 <_malloc_r+0x18c>
   1de1e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1de22:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1de26:	00c3      	lsls	r3, r0, #3
   1de28:	e612      	b.n	1da50 <_malloc_r+0x44>
   1de2a:	099a      	lsrs	r2, r3, #6
   1de2c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1de30:	00c9      	lsls	r1, r1, #3
   1de32:	3238      	adds	r2, #56	; 0x38
   1de34:	e7a4      	b.n	1dd80 <_malloc_r+0x374>
   1de36:	42bc      	cmp	r4, r7
   1de38:	d054      	beq.n	1dee4 <_malloc_r+0x4d8>
   1de3a:	68bc      	ldr	r4, [r7, #8]
   1de3c:	6862      	ldr	r2, [r4, #4]
   1de3e:	f022 0203 	bic.w	r2, r2, #3
   1de42:	e75d      	b.n	1dd00 <_malloc_r+0x2f4>
   1de44:	f859 3908 	ldr.w	r3, [r9], #-8
   1de48:	4599      	cmp	r9, r3
   1de4a:	f040 8086 	bne.w	1df5a <_malloc_r+0x54e>
   1de4e:	f010 0f03 	tst.w	r0, #3
   1de52:	f100 30ff 	add.w	r0, r0, #4294967295
   1de56:	d1f5      	bne.n	1de44 <_malloc_r+0x438>
   1de58:	687b      	ldr	r3, [r7, #4]
   1de5a:	ea23 0304 	bic.w	r3, r3, r4
   1de5e:	607b      	str	r3, [r7, #4]
   1de60:	0064      	lsls	r4, r4, #1
   1de62:	429c      	cmp	r4, r3
   1de64:	f63f aec7 	bhi.w	1dbf6 <_malloc_r+0x1ea>
   1de68:	2c00      	cmp	r4, #0
   1de6a:	f43f aec4 	beq.w	1dbf6 <_malloc_r+0x1ea>
   1de6e:	421c      	tst	r4, r3
   1de70:	4640      	mov	r0, r8
   1de72:	f47f ae3e 	bne.w	1daf2 <_malloc_r+0xe6>
   1de76:	0064      	lsls	r4, r4, #1
   1de78:	421c      	tst	r4, r3
   1de7a:	f100 0004 	add.w	r0, r0, #4
   1de7e:	d0fa      	beq.n	1de76 <_malloc_r+0x46a>
   1de80:	e637      	b.n	1daf2 <_malloc_r+0xe6>
   1de82:	468c      	mov	ip, r1
   1de84:	e78c      	b.n	1dda0 <_malloc_r+0x394>
   1de86:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1de8a:	d815      	bhi.n	1deb8 <_malloc_r+0x4ac>
   1de8c:	0bf3      	lsrs	r3, r6, #15
   1de8e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1de92:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1de96:	00c3      	lsls	r3, r0, #3
   1de98:	e5da      	b.n	1da50 <_malloc_r+0x44>
   1de9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1de9e:	e6ed      	b.n	1dc7c <_malloc_r+0x270>
   1dea0:	687b      	ldr	r3, [r7, #4]
   1dea2:	1092      	asrs	r2, r2, #2
   1dea4:	2101      	movs	r1, #1
   1dea6:	fa01 f202 	lsl.w	r2, r1, r2
   1deaa:	4313      	orrs	r3, r2
   1deac:	607b      	str	r3, [r7, #4]
   1deae:	4662      	mov	r2, ip
   1deb0:	e779      	b.n	1dda6 <_malloc_r+0x39a>
   1deb2:	2301      	movs	r3, #1
   1deb4:	6053      	str	r3, [r2, #4]
   1deb6:	e729      	b.n	1dd0c <_malloc_r+0x300>
   1deb8:	f240 5254 	movw	r2, #1364	; 0x554
   1debc:	4293      	cmp	r3, r2
   1debe:	d822      	bhi.n	1df06 <_malloc_r+0x4fa>
   1dec0:	0cb3      	lsrs	r3, r6, #18
   1dec2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1dec6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1deca:	00c3      	lsls	r3, r0, #3
   1decc:	e5c0      	b.n	1da50 <_malloc_r+0x44>
   1dece:	f103 0b10 	add.w	fp, r3, #16
   1ded2:	e6ae      	b.n	1dc32 <_malloc_r+0x226>
   1ded4:	2a54      	cmp	r2, #84	; 0x54
   1ded6:	d829      	bhi.n	1df2c <_malloc_r+0x520>
   1ded8:	0b1a      	lsrs	r2, r3, #12
   1deda:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1dede:	00c9      	lsls	r1, r1, #3
   1dee0:	326e      	adds	r2, #110	; 0x6e
   1dee2:	e74d      	b.n	1dd80 <_malloc_r+0x374>
   1dee4:	4b20      	ldr	r3, [pc, #128]	; (1df68 <_malloc_r+0x55c>)
   1dee6:	6819      	ldr	r1, [r3, #0]
   1dee8:	4459      	add	r1, fp
   1deea:	6019      	str	r1, [r3, #0]
   1deec:	e6b2      	b.n	1dc54 <_malloc_r+0x248>
   1deee:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1def2:	2800      	cmp	r0, #0
   1def4:	f47f aeae 	bne.w	1dc54 <_malloc_r+0x248>
   1def8:	eb08 030b 	add.w	r3, r8, fp
   1defc:	68ba      	ldr	r2, [r7, #8]
   1defe:	f043 0301 	orr.w	r3, r3, #1
   1df02:	6053      	str	r3, [r2, #4]
   1df04:	e6ee      	b.n	1dce4 <_malloc_r+0x2d8>
   1df06:	207f      	movs	r0, #127	; 0x7f
   1df08:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1df0c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1df10:	e59e      	b.n	1da50 <_malloc_r+0x44>
   1df12:	f104 0108 	add.w	r1, r4, #8
   1df16:	4628      	mov	r0, r5
   1df18:	9300      	str	r3, [sp, #0]
   1df1a:	f003 fbad 	bl	21678 <_free_r>
   1df1e:	9b00      	ldr	r3, [sp, #0]
   1df20:	6819      	ldr	r1, [r3, #0]
   1df22:	e6df      	b.n	1dce4 <_malloc_r+0x2d8>
   1df24:	2001      	movs	r0, #1
   1df26:	f04f 0900 	mov.w	r9, #0
   1df2a:	e6bc      	b.n	1dca6 <_malloc_r+0x29a>
   1df2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1df30:	d805      	bhi.n	1df3e <_malloc_r+0x532>
   1df32:	0bda      	lsrs	r2, r3, #15
   1df34:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1df38:	00c9      	lsls	r1, r1, #3
   1df3a:	3277      	adds	r2, #119	; 0x77
   1df3c:	e720      	b.n	1dd80 <_malloc_r+0x374>
   1df3e:	f240 5154 	movw	r1, #1364	; 0x554
   1df42:	428a      	cmp	r2, r1
   1df44:	d805      	bhi.n	1df52 <_malloc_r+0x546>
   1df46:	0c9a      	lsrs	r2, r3, #18
   1df48:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1df4c:	00c9      	lsls	r1, r1, #3
   1df4e:	327c      	adds	r2, #124	; 0x7c
   1df50:	e716      	b.n	1dd80 <_malloc_r+0x374>
   1df52:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1df56:	227e      	movs	r2, #126	; 0x7e
   1df58:	e712      	b.n	1dd80 <_malloc_r+0x374>
   1df5a:	687b      	ldr	r3, [r7, #4]
   1df5c:	e780      	b.n	1de60 <_malloc_r+0x454>
   1df5e:	08f0      	lsrs	r0, r6, #3
   1df60:	f106 0308 	add.w	r3, r6, #8
   1df64:	e600      	b.n	1db68 <_malloc_r+0x15c>
   1df66:	bf00      	nop
   1df68:	200022a0 	.word	0x200022a0

0001df6c <__ascii_mbtowc>:
   1df6c:	b082      	sub	sp, #8
   1df6e:	b149      	cbz	r1, 1df84 <__ascii_mbtowc+0x18>
   1df70:	b15a      	cbz	r2, 1df8a <__ascii_mbtowc+0x1e>
   1df72:	b16b      	cbz	r3, 1df90 <__ascii_mbtowc+0x24>
   1df74:	7813      	ldrb	r3, [r2, #0]
   1df76:	600b      	str	r3, [r1, #0]
   1df78:	7812      	ldrb	r2, [r2, #0]
   1df7a:	1c10      	adds	r0, r2, #0
   1df7c:	bf18      	it	ne
   1df7e:	2001      	movne	r0, #1
   1df80:	b002      	add	sp, #8
   1df82:	4770      	bx	lr
   1df84:	a901      	add	r1, sp, #4
   1df86:	2a00      	cmp	r2, #0
   1df88:	d1f3      	bne.n	1df72 <__ascii_mbtowc+0x6>
   1df8a:	4610      	mov	r0, r2
   1df8c:	b002      	add	sp, #8
   1df8e:	4770      	bx	lr
   1df90:	f06f 0001 	mvn.w	r0, #1
   1df94:	e7f4      	b.n	1df80 <__ascii_mbtowc+0x14>
   1df96:	bf00      	nop
	...

0001dfa0 <memchr>:
   1dfa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1dfa4:	2a10      	cmp	r2, #16
   1dfa6:	db2b      	blt.n	1e000 <memchr+0x60>
   1dfa8:	f010 0f07 	tst.w	r0, #7
   1dfac:	d008      	beq.n	1dfc0 <memchr+0x20>
   1dfae:	f810 3b01 	ldrb.w	r3, [r0], #1
   1dfb2:	3a01      	subs	r2, #1
   1dfb4:	428b      	cmp	r3, r1
   1dfb6:	d02d      	beq.n	1e014 <memchr+0x74>
   1dfb8:	f010 0f07 	tst.w	r0, #7
   1dfbc:	b342      	cbz	r2, 1e010 <memchr+0x70>
   1dfbe:	d1f6      	bne.n	1dfae <memchr+0xe>
   1dfc0:	b4f0      	push	{r4, r5, r6, r7}
   1dfc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1dfc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1dfca:	f022 0407 	bic.w	r4, r2, #7
   1dfce:	f07f 0700 	mvns.w	r7, #0
   1dfd2:	2300      	movs	r3, #0
   1dfd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1dfd8:	3c08      	subs	r4, #8
   1dfda:	ea85 0501 	eor.w	r5, r5, r1
   1dfde:	ea86 0601 	eor.w	r6, r6, r1
   1dfe2:	fa85 f547 	uadd8	r5, r5, r7
   1dfe6:	faa3 f587 	sel	r5, r3, r7
   1dfea:	fa86 f647 	uadd8	r6, r6, r7
   1dfee:	faa5 f687 	sel	r6, r5, r7
   1dff2:	b98e      	cbnz	r6, 1e018 <memchr+0x78>
   1dff4:	d1ee      	bne.n	1dfd4 <memchr+0x34>
   1dff6:	bcf0      	pop	{r4, r5, r6, r7}
   1dff8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1dffc:	f002 0207 	and.w	r2, r2, #7
   1e000:	b132      	cbz	r2, 1e010 <memchr+0x70>
   1e002:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e006:	3a01      	subs	r2, #1
   1e008:	ea83 0301 	eor.w	r3, r3, r1
   1e00c:	b113      	cbz	r3, 1e014 <memchr+0x74>
   1e00e:	d1f8      	bne.n	1e002 <memchr+0x62>
   1e010:	2000      	movs	r0, #0
   1e012:	4770      	bx	lr
   1e014:	3801      	subs	r0, #1
   1e016:	4770      	bx	lr
   1e018:	2d00      	cmp	r5, #0
   1e01a:	bf06      	itte	eq
   1e01c:	4635      	moveq	r5, r6
   1e01e:	3803      	subeq	r0, #3
   1e020:	3807      	subne	r0, #7
   1e022:	f015 0f01 	tst.w	r5, #1
   1e026:	d107      	bne.n	1e038 <memchr+0x98>
   1e028:	3001      	adds	r0, #1
   1e02a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e02e:	bf02      	ittt	eq
   1e030:	3001      	addeq	r0, #1
   1e032:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e036:	3001      	addeq	r0, #1
   1e038:	bcf0      	pop	{r4, r5, r6, r7}
   1e03a:	3801      	subs	r0, #1
   1e03c:	4770      	bx	lr
   1e03e:	bf00      	nop

0001e040 <memcmp>:
   1e040:	2a03      	cmp	r2, #3
   1e042:	b470      	push	{r4, r5, r6}
   1e044:	d922      	bls.n	1e08c <memcmp+0x4c>
   1e046:	ea40 0301 	orr.w	r3, r0, r1
   1e04a:	079b      	lsls	r3, r3, #30
   1e04c:	d011      	beq.n	1e072 <memcmp+0x32>
   1e04e:	7803      	ldrb	r3, [r0, #0]
   1e050:	780c      	ldrb	r4, [r1, #0]
   1e052:	42a3      	cmp	r3, r4
   1e054:	d11d      	bne.n	1e092 <memcmp+0x52>
   1e056:	440a      	add	r2, r1
   1e058:	3101      	adds	r1, #1
   1e05a:	e005      	b.n	1e068 <memcmp+0x28>
   1e05c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e060:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e064:	42a3      	cmp	r3, r4
   1e066:	d114      	bne.n	1e092 <memcmp+0x52>
   1e068:	4291      	cmp	r1, r2
   1e06a:	d1f7      	bne.n	1e05c <memcmp+0x1c>
   1e06c:	2000      	movs	r0, #0
   1e06e:	bc70      	pop	{r4, r5, r6}
   1e070:	4770      	bx	lr
   1e072:	680d      	ldr	r5, [r1, #0]
   1e074:	6806      	ldr	r6, [r0, #0]
   1e076:	42ae      	cmp	r6, r5
   1e078:	460c      	mov	r4, r1
   1e07a:	4603      	mov	r3, r0
   1e07c:	f101 0104 	add.w	r1, r1, #4
   1e080:	f100 0004 	add.w	r0, r0, #4
   1e084:	d108      	bne.n	1e098 <memcmp+0x58>
   1e086:	3a04      	subs	r2, #4
   1e088:	2a03      	cmp	r2, #3
   1e08a:	d8f2      	bhi.n	1e072 <memcmp+0x32>
   1e08c:	2a00      	cmp	r2, #0
   1e08e:	d1de      	bne.n	1e04e <memcmp+0xe>
   1e090:	e7ec      	b.n	1e06c <memcmp+0x2c>
   1e092:	1b18      	subs	r0, r3, r4
   1e094:	bc70      	pop	{r4, r5, r6}
   1e096:	4770      	bx	lr
   1e098:	4621      	mov	r1, r4
   1e09a:	4618      	mov	r0, r3
   1e09c:	e7d7      	b.n	1e04e <memcmp+0xe>
   1e09e:	bf00      	nop

0001e0a0 <memcpy>:
   1e0a0:	4684      	mov	ip, r0
   1e0a2:	ea41 0300 	orr.w	r3, r1, r0
   1e0a6:	f013 0303 	ands.w	r3, r3, #3
   1e0aa:	d16d      	bne.n	1e188 <memcpy+0xe8>
   1e0ac:	3a40      	subs	r2, #64	; 0x40
   1e0ae:	d341      	bcc.n	1e134 <memcpy+0x94>
   1e0b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0b4:	f840 3b04 	str.w	r3, [r0], #4
   1e0b8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0bc:	f840 3b04 	str.w	r3, [r0], #4
   1e0c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0c4:	f840 3b04 	str.w	r3, [r0], #4
   1e0c8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0cc:	f840 3b04 	str.w	r3, [r0], #4
   1e0d0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0d4:	f840 3b04 	str.w	r3, [r0], #4
   1e0d8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0dc:	f840 3b04 	str.w	r3, [r0], #4
   1e0e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0e4:	f840 3b04 	str.w	r3, [r0], #4
   1e0e8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0ec:	f840 3b04 	str.w	r3, [r0], #4
   1e0f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0f4:	f840 3b04 	str.w	r3, [r0], #4
   1e0f8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e0fc:	f840 3b04 	str.w	r3, [r0], #4
   1e100:	f851 3b04 	ldr.w	r3, [r1], #4
   1e104:	f840 3b04 	str.w	r3, [r0], #4
   1e108:	f851 3b04 	ldr.w	r3, [r1], #4
   1e10c:	f840 3b04 	str.w	r3, [r0], #4
   1e110:	f851 3b04 	ldr.w	r3, [r1], #4
   1e114:	f840 3b04 	str.w	r3, [r0], #4
   1e118:	f851 3b04 	ldr.w	r3, [r1], #4
   1e11c:	f840 3b04 	str.w	r3, [r0], #4
   1e120:	f851 3b04 	ldr.w	r3, [r1], #4
   1e124:	f840 3b04 	str.w	r3, [r0], #4
   1e128:	f851 3b04 	ldr.w	r3, [r1], #4
   1e12c:	f840 3b04 	str.w	r3, [r0], #4
   1e130:	3a40      	subs	r2, #64	; 0x40
   1e132:	d2bd      	bcs.n	1e0b0 <memcpy+0x10>
   1e134:	3230      	adds	r2, #48	; 0x30
   1e136:	d311      	bcc.n	1e15c <memcpy+0xbc>
   1e138:	f851 3b04 	ldr.w	r3, [r1], #4
   1e13c:	f840 3b04 	str.w	r3, [r0], #4
   1e140:	f851 3b04 	ldr.w	r3, [r1], #4
   1e144:	f840 3b04 	str.w	r3, [r0], #4
   1e148:	f851 3b04 	ldr.w	r3, [r1], #4
   1e14c:	f840 3b04 	str.w	r3, [r0], #4
   1e150:	f851 3b04 	ldr.w	r3, [r1], #4
   1e154:	f840 3b04 	str.w	r3, [r0], #4
   1e158:	3a10      	subs	r2, #16
   1e15a:	d2ed      	bcs.n	1e138 <memcpy+0x98>
   1e15c:	320c      	adds	r2, #12
   1e15e:	d305      	bcc.n	1e16c <memcpy+0xcc>
   1e160:	f851 3b04 	ldr.w	r3, [r1], #4
   1e164:	f840 3b04 	str.w	r3, [r0], #4
   1e168:	3a04      	subs	r2, #4
   1e16a:	d2f9      	bcs.n	1e160 <memcpy+0xc0>
   1e16c:	3204      	adds	r2, #4
   1e16e:	d008      	beq.n	1e182 <memcpy+0xe2>
   1e170:	07d2      	lsls	r2, r2, #31
   1e172:	bf1c      	itt	ne
   1e174:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e178:	f800 3b01 	strbne.w	r3, [r0], #1
   1e17c:	d301      	bcc.n	1e182 <memcpy+0xe2>
   1e17e:	880b      	ldrh	r3, [r1, #0]
   1e180:	8003      	strh	r3, [r0, #0]
   1e182:	4660      	mov	r0, ip
   1e184:	4770      	bx	lr
   1e186:	bf00      	nop
   1e188:	2a08      	cmp	r2, #8
   1e18a:	d313      	bcc.n	1e1b4 <memcpy+0x114>
   1e18c:	078b      	lsls	r3, r1, #30
   1e18e:	d08d      	beq.n	1e0ac <memcpy+0xc>
   1e190:	f010 0303 	ands.w	r3, r0, #3
   1e194:	d08a      	beq.n	1e0ac <memcpy+0xc>
   1e196:	f1c3 0304 	rsb	r3, r3, #4
   1e19a:	1ad2      	subs	r2, r2, r3
   1e19c:	07db      	lsls	r3, r3, #31
   1e19e:	bf1c      	itt	ne
   1e1a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e1a4:	f800 3b01 	strbne.w	r3, [r0], #1
   1e1a8:	d380      	bcc.n	1e0ac <memcpy+0xc>
   1e1aa:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e1ae:	f820 3b02 	strh.w	r3, [r0], #2
   1e1b2:	e77b      	b.n	1e0ac <memcpy+0xc>
   1e1b4:	3a04      	subs	r2, #4
   1e1b6:	d3d9      	bcc.n	1e16c <memcpy+0xcc>
   1e1b8:	3a01      	subs	r2, #1
   1e1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e1be:	f800 3b01 	strb.w	r3, [r0], #1
   1e1c2:	d2f9      	bcs.n	1e1b8 <memcpy+0x118>
   1e1c4:	780b      	ldrb	r3, [r1, #0]
   1e1c6:	7003      	strb	r3, [r0, #0]
   1e1c8:	784b      	ldrb	r3, [r1, #1]
   1e1ca:	7043      	strb	r3, [r0, #1]
   1e1cc:	788b      	ldrb	r3, [r1, #2]
   1e1ce:	7083      	strb	r3, [r0, #2]
   1e1d0:	4660      	mov	r0, ip
   1e1d2:	4770      	bx	lr

0001e1d4 <memmove>:
   1e1d4:	4288      	cmp	r0, r1
   1e1d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1d8:	d90d      	bls.n	1e1f6 <memmove+0x22>
   1e1da:	188b      	adds	r3, r1, r2
   1e1dc:	4298      	cmp	r0, r3
   1e1de:	d20a      	bcs.n	1e1f6 <memmove+0x22>
   1e1e0:	1884      	adds	r4, r0, r2
   1e1e2:	2a00      	cmp	r2, #0
   1e1e4:	d051      	beq.n	1e28a <memmove+0xb6>
   1e1e6:	4622      	mov	r2, r4
   1e1e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e1ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e1f0:	4299      	cmp	r1, r3
   1e1f2:	d1f9      	bne.n	1e1e8 <memmove+0x14>
   1e1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1f6:	2a0f      	cmp	r2, #15
   1e1f8:	d948      	bls.n	1e28c <memmove+0xb8>
   1e1fa:	ea41 0300 	orr.w	r3, r1, r0
   1e1fe:	079b      	lsls	r3, r3, #30
   1e200:	d146      	bne.n	1e290 <memmove+0xbc>
   1e202:	f100 0410 	add.w	r4, r0, #16
   1e206:	f101 0310 	add.w	r3, r1, #16
   1e20a:	4615      	mov	r5, r2
   1e20c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e210:	f844 6c10 	str.w	r6, [r4, #-16]
   1e214:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e218:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e21c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e220:	f844 6c08 	str.w	r6, [r4, #-8]
   1e224:	3d10      	subs	r5, #16
   1e226:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e22a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e22e:	2d0f      	cmp	r5, #15
   1e230:	f103 0310 	add.w	r3, r3, #16
   1e234:	f104 0410 	add.w	r4, r4, #16
   1e238:	d8e8      	bhi.n	1e20c <memmove+0x38>
   1e23a:	f1a2 0310 	sub.w	r3, r2, #16
   1e23e:	f023 030f 	bic.w	r3, r3, #15
   1e242:	f002 0e0f 	and.w	lr, r2, #15
   1e246:	3310      	adds	r3, #16
   1e248:	f1be 0f03 	cmp.w	lr, #3
   1e24c:	4419      	add	r1, r3
   1e24e:	4403      	add	r3, r0
   1e250:	d921      	bls.n	1e296 <memmove+0xc2>
   1e252:	1f1e      	subs	r6, r3, #4
   1e254:	460d      	mov	r5, r1
   1e256:	4674      	mov	r4, lr
   1e258:	3c04      	subs	r4, #4
   1e25a:	f855 7b04 	ldr.w	r7, [r5], #4
   1e25e:	f846 7f04 	str.w	r7, [r6, #4]!
   1e262:	2c03      	cmp	r4, #3
   1e264:	d8f8      	bhi.n	1e258 <memmove+0x84>
   1e266:	f1ae 0404 	sub.w	r4, lr, #4
   1e26a:	f024 0403 	bic.w	r4, r4, #3
   1e26e:	3404      	adds	r4, #4
   1e270:	4421      	add	r1, r4
   1e272:	4423      	add	r3, r4
   1e274:	f002 0203 	and.w	r2, r2, #3
   1e278:	b162      	cbz	r2, 1e294 <memmove+0xc0>
   1e27a:	3b01      	subs	r3, #1
   1e27c:	440a      	add	r2, r1
   1e27e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e282:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e286:	428a      	cmp	r2, r1
   1e288:	d1f9      	bne.n	1e27e <memmove+0xaa>
   1e28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e28c:	4603      	mov	r3, r0
   1e28e:	e7f3      	b.n	1e278 <memmove+0xa4>
   1e290:	4603      	mov	r3, r0
   1e292:	e7f2      	b.n	1e27a <memmove+0xa6>
   1e294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e296:	4672      	mov	r2, lr
   1e298:	e7ee      	b.n	1e278 <memmove+0xa4>
   1e29a:	bf00      	nop

0001e29c <memset>:
   1e29c:	b470      	push	{r4, r5, r6}
   1e29e:	0786      	lsls	r6, r0, #30
   1e2a0:	d046      	beq.n	1e330 <memset+0x94>
   1e2a2:	1e54      	subs	r4, r2, #1
   1e2a4:	2a00      	cmp	r2, #0
   1e2a6:	d041      	beq.n	1e32c <memset+0x90>
   1e2a8:	b2ca      	uxtb	r2, r1
   1e2aa:	4603      	mov	r3, r0
   1e2ac:	e002      	b.n	1e2b4 <memset+0x18>
   1e2ae:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e2b2:	d33b      	bcc.n	1e32c <memset+0x90>
   1e2b4:	f803 2b01 	strb.w	r2, [r3], #1
   1e2b8:	079d      	lsls	r5, r3, #30
   1e2ba:	d1f8      	bne.n	1e2ae <memset+0x12>
   1e2bc:	2c03      	cmp	r4, #3
   1e2be:	d92e      	bls.n	1e31e <memset+0x82>
   1e2c0:	b2cd      	uxtb	r5, r1
   1e2c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e2c6:	2c0f      	cmp	r4, #15
   1e2c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e2cc:	d919      	bls.n	1e302 <memset+0x66>
   1e2ce:	f103 0210 	add.w	r2, r3, #16
   1e2d2:	4626      	mov	r6, r4
   1e2d4:	3e10      	subs	r6, #16
   1e2d6:	2e0f      	cmp	r6, #15
   1e2d8:	f842 5c10 	str.w	r5, [r2, #-16]
   1e2dc:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e2e0:	f842 5c08 	str.w	r5, [r2, #-8]
   1e2e4:	f842 5c04 	str.w	r5, [r2, #-4]
   1e2e8:	f102 0210 	add.w	r2, r2, #16
   1e2ec:	d8f2      	bhi.n	1e2d4 <memset+0x38>
   1e2ee:	f1a4 0210 	sub.w	r2, r4, #16
   1e2f2:	f022 020f 	bic.w	r2, r2, #15
   1e2f6:	f004 040f 	and.w	r4, r4, #15
   1e2fa:	3210      	adds	r2, #16
   1e2fc:	2c03      	cmp	r4, #3
   1e2fe:	4413      	add	r3, r2
   1e300:	d90d      	bls.n	1e31e <memset+0x82>
   1e302:	461e      	mov	r6, r3
   1e304:	4622      	mov	r2, r4
   1e306:	3a04      	subs	r2, #4
   1e308:	2a03      	cmp	r2, #3
   1e30a:	f846 5b04 	str.w	r5, [r6], #4
   1e30e:	d8fa      	bhi.n	1e306 <memset+0x6a>
   1e310:	1f22      	subs	r2, r4, #4
   1e312:	f022 0203 	bic.w	r2, r2, #3
   1e316:	3204      	adds	r2, #4
   1e318:	4413      	add	r3, r2
   1e31a:	f004 0403 	and.w	r4, r4, #3
   1e31e:	b12c      	cbz	r4, 1e32c <memset+0x90>
   1e320:	b2c9      	uxtb	r1, r1
   1e322:	441c      	add	r4, r3
   1e324:	f803 1b01 	strb.w	r1, [r3], #1
   1e328:	429c      	cmp	r4, r3
   1e32a:	d1fb      	bne.n	1e324 <memset+0x88>
   1e32c:	bc70      	pop	{r4, r5, r6}
   1e32e:	4770      	bx	lr
   1e330:	4614      	mov	r4, r2
   1e332:	4603      	mov	r3, r0
   1e334:	e7c2      	b.n	1e2bc <memset+0x20>
   1e336:	bf00      	nop

0001e338 <__malloc_lock>:
   1e338:	4801      	ldr	r0, [pc, #4]	; (1e340 <__malloc_lock+0x8>)
   1e33a:	f7ff bb53 	b.w	1d9e4 <__retarget_lock_acquire_recursive>
   1e33e:	bf00      	nop
   1e340:	20002388 	.word	0x20002388

0001e344 <__malloc_unlock>:
   1e344:	4801      	ldr	r0, [pc, #4]	; (1e34c <__malloc_unlock+0x8>)
   1e346:	f7ff bb4f 	b.w	1d9e8 <__retarget_lock_release_recursive>
   1e34a:	bf00      	nop
   1e34c:	20002388 	.word	0x20002388

0001e350 <_putc_r>:
   1e350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e352:	460e      	mov	r6, r1
   1e354:	4614      	mov	r4, r2
   1e356:	4607      	mov	r7, r0
   1e358:	b108      	cbz	r0, 1e35e <_putc_r+0xe>
   1e35a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e35c:	b34b      	cbz	r3, 1e3b2 <_putc_r+0x62>
   1e35e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e360:	07d8      	lsls	r0, r3, #31
   1e362:	d402      	bmi.n	1e36a <_putc_r+0x1a>
   1e364:	89a3      	ldrh	r3, [r4, #12]
   1e366:	0599      	lsls	r1, r3, #22
   1e368:	d526      	bpl.n	1e3b8 <_putc_r+0x68>
   1e36a:	68a3      	ldr	r3, [r4, #8]
   1e36c:	3b01      	subs	r3, #1
   1e36e:	2b00      	cmp	r3, #0
   1e370:	60a3      	str	r3, [r4, #8]
   1e372:	db11      	blt.n	1e398 <_putc_r+0x48>
   1e374:	b2f5      	uxtb	r5, r6
   1e376:	6823      	ldr	r3, [r4, #0]
   1e378:	1c5a      	adds	r2, r3, #1
   1e37a:	6022      	str	r2, [r4, #0]
   1e37c:	701e      	strb	r6, [r3, #0]
   1e37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e380:	07da      	lsls	r2, r3, #31
   1e382:	d402      	bmi.n	1e38a <_putc_r+0x3a>
   1e384:	89a3      	ldrh	r3, [r4, #12]
   1e386:	059b      	lsls	r3, r3, #22
   1e388:	d501      	bpl.n	1e38e <_putc_r+0x3e>
   1e38a:	4628      	mov	r0, r5
   1e38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e38e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e390:	f7ff fb2a 	bl	1d9e8 <__retarget_lock_release_recursive>
   1e394:	4628      	mov	r0, r5
   1e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e398:	69a2      	ldr	r2, [r4, #24]
   1e39a:	4293      	cmp	r3, r2
   1e39c:	db02      	blt.n	1e3a4 <_putc_r+0x54>
   1e39e:	b2f5      	uxtb	r5, r6
   1e3a0:	2d0a      	cmp	r5, #10
   1e3a2:	d1e8      	bne.n	1e376 <_putc_r+0x26>
   1e3a4:	4631      	mov	r1, r6
   1e3a6:	4638      	mov	r0, r7
   1e3a8:	4622      	mov	r2, r4
   1e3aa:	f001 ff21 	bl	201f0 <__swbuf_r>
   1e3ae:	4605      	mov	r5, r0
   1e3b0:	e7e5      	b.n	1e37e <_putc_r+0x2e>
   1e3b2:	f003 f8bf 	bl	21534 <__sinit>
   1e3b6:	e7d2      	b.n	1e35e <_putc_r+0xe>
   1e3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e3ba:	f7ff fb13 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   1e3be:	e7d4      	b.n	1e36a <_putc_r+0x1a>

0001e3c0 <realloc>:
   1e3c0:	4b02      	ldr	r3, [pc, #8]	; (1e3cc <realloc+0xc>)
   1e3c2:	460a      	mov	r2, r1
   1e3c4:	4601      	mov	r1, r0
   1e3c6:	6818      	ldr	r0, [r3, #0]
   1e3c8:	f000 b802 	b.w	1e3d0 <_realloc_r>
   1e3cc:	200000f8 	.word	0x200000f8

0001e3d0 <_realloc_r>:
   1e3d0:	2900      	cmp	r1, #0
   1e3d2:	f000 8095 	beq.w	1e500 <_realloc_r+0x130>
   1e3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3da:	460d      	mov	r5, r1
   1e3dc:	4616      	mov	r6, r2
   1e3de:	b083      	sub	sp, #12
   1e3e0:	4680      	mov	r8, r0
   1e3e2:	f106 070b 	add.w	r7, r6, #11
   1e3e6:	f7ff ffa7 	bl	1e338 <__malloc_lock>
   1e3ea:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e3ee:	2f16      	cmp	r7, #22
   1e3f0:	f02e 0403 	bic.w	r4, lr, #3
   1e3f4:	f1a5 0908 	sub.w	r9, r5, #8
   1e3f8:	d83c      	bhi.n	1e474 <_realloc_r+0xa4>
   1e3fa:	2210      	movs	r2, #16
   1e3fc:	4617      	mov	r7, r2
   1e3fe:	42be      	cmp	r6, r7
   1e400:	d83d      	bhi.n	1e47e <_realloc_r+0xae>
   1e402:	4294      	cmp	r4, r2
   1e404:	da43      	bge.n	1e48e <_realloc_r+0xbe>
   1e406:	4bc4      	ldr	r3, [pc, #784]	; (1e718 <_realloc_r+0x348>)
   1e408:	6899      	ldr	r1, [r3, #8]
   1e40a:	eb09 0004 	add.w	r0, r9, r4
   1e40e:	4288      	cmp	r0, r1
   1e410:	f000 80b4 	beq.w	1e57c <_realloc_r+0x1ac>
   1e414:	6843      	ldr	r3, [r0, #4]
   1e416:	f023 0101 	bic.w	r1, r3, #1
   1e41a:	4401      	add	r1, r0
   1e41c:	6849      	ldr	r1, [r1, #4]
   1e41e:	07c9      	lsls	r1, r1, #31
   1e420:	d54c      	bpl.n	1e4bc <_realloc_r+0xec>
   1e422:	f01e 0f01 	tst.w	lr, #1
   1e426:	f000 809b 	beq.w	1e560 <_realloc_r+0x190>
   1e42a:	4631      	mov	r1, r6
   1e42c:	4640      	mov	r0, r8
   1e42e:	f7ff faed 	bl	1da0c <_malloc_r>
   1e432:	4606      	mov	r6, r0
   1e434:	2800      	cmp	r0, #0
   1e436:	d03a      	beq.n	1e4ae <_realloc_r+0xde>
   1e438:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e43c:	f023 0301 	bic.w	r3, r3, #1
   1e440:	444b      	add	r3, r9
   1e442:	f1a0 0208 	sub.w	r2, r0, #8
   1e446:	429a      	cmp	r2, r3
   1e448:	f000 8121 	beq.w	1e68e <_realloc_r+0x2be>
   1e44c:	1f22      	subs	r2, r4, #4
   1e44e:	2a24      	cmp	r2, #36	; 0x24
   1e450:	f200 8107 	bhi.w	1e662 <_realloc_r+0x292>
   1e454:	2a13      	cmp	r2, #19
   1e456:	f200 80db 	bhi.w	1e610 <_realloc_r+0x240>
   1e45a:	4603      	mov	r3, r0
   1e45c:	462a      	mov	r2, r5
   1e45e:	6811      	ldr	r1, [r2, #0]
   1e460:	6019      	str	r1, [r3, #0]
   1e462:	6851      	ldr	r1, [r2, #4]
   1e464:	6059      	str	r1, [r3, #4]
   1e466:	6892      	ldr	r2, [r2, #8]
   1e468:	609a      	str	r2, [r3, #8]
   1e46a:	4629      	mov	r1, r5
   1e46c:	4640      	mov	r0, r8
   1e46e:	f003 f903 	bl	21678 <_free_r>
   1e472:	e01c      	b.n	1e4ae <_realloc_r+0xde>
   1e474:	f027 0707 	bic.w	r7, r7, #7
   1e478:	2f00      	cmp	r7, #0
   1e47a:	463a      	mov	r2, r7
   1e47c:	dabf      	bge.n	1e3fe <_realloc_r+0x2e>
   1e47e:	2600      	movs	r6, #0
   1e480:	230c      	movs	r3, #12
   1e482:	4630      	mov	r0, r6
   1e484:	f8c8 3000 	str.w	r3, [r8]
   1e488:	b003      	add	sp, #12
   1e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e48e:	462e      	mov	r6, r5
   1e490:	1be3      	subs	r3, r4, r7
   1e492:	2b0f      	cmp	r3, #15
   1e494:	d81e      	bhi.n	1e4d4 <_realloc_r+0x104>
   1e496:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e49a:	f003 0301 	and.w	r3, r3, #1
   1e49e:	4323      	orrs	r3, r4
   1e4a0:	444c      	add	r4, r9
   1e4a2:	f8c9 3004 	str.w	r3, [r9, #4]
   1e4a6:	6863      	ldr	r3, [r4, #4]
   1e4a8:	f043 0301 	orr.w	r3, r3, #1
   1e4ac:	6063      	str	r3, [r4, #4]
   1e4ae:	4640      	mov	r0, r8
   1e4b0:	f7ff ff48 	bl	1e344 <__malloc_unlock>
   1e4b4:	4630      	mov	r0, r6
   1e4b6:	b003      	add	sp, #12
   1e4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4bc:	f023 0303 	bic.w	r3, r3, #3
   1e4c0:	18e1      	adds	r1, r4, r3
   1e4c2:	4291      	cmp	r1, r2
   1e4c4:	db1f      	blt.n	1e506 <_realloc_r+0x136>
   1e4c6:	68c3      	ldr	r3, [r0, #12]
   1e4c8:	6882      	ldr	r2, [r0, #8]
   1e4ca:	462e      	mov	r6, r5
   1e4cc:	60d3      	str	r3, [r2, #12]
   1e4ce:	460c      	mov	r4, r1
   1e4d0:	609a      	str	r2, [r3, #8]
   1e4d2:	e7dd      	b.n	1e490 <_realloc_r+0xc0>
   1e4d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e4d8:	eb09 0107 	add.w	r1, r9, r7
   1e4dc:	f002 0201 	and.w	r2, r2, #1
   1e4e0:	444c      	add	r4, r9
   1e4e2:	f043 0301 	orr.w	r3, r3, #1
   1e4e6:	4317      	orrs	r7, r2
   1e4e8:	f8c9 7004 	str.w	r7, [r9, #4]
   1e4ec:	604b      	str	r3, [r1, #4]
   1e4ee:	6863      	ldr	r3, [r4, #4]
   1e4f0:	f043 0301 	orr.w	r3, r3, #1
   1e4f4:	3108      	adds	r1, #8
   1e4f6:	6063      	str	r3, [r4, #4]
   1e4f8:	4640      	mov	r0, r8
   1e4fa:	f003 f8bd 	bl	21678 <_free_r>
   1e4fe:	e7d6      	b.n	1e4ae <_realloc_r+0xde>
   1e500:	4611      	mov	r1, r2
   1e502:	f7ff ba83 	b.w	1da0c <_malloc_r>
   1e506:	f01e 0f01 	tst.w	lr, #1
   1e50a:	d18e      	bne.n	1e42a <_realloc_r+0x5a>
   1e50c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e510:	eba9 0a01 	sub.w	sl, r9, r1
   1e514:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e518:	f021 0103 	bic.w	r1, r1, #3
   1e51c:	440b      	add	r3, r1
   1e51e:	4423      	add	r3, r4
   1e520:	4293      	cmp	r3, r2
   1e522:	db25      	blt.n	1e570 <_realloc_r+0x1a0>
   1e524:	68c2      	ldr	r2, [r0, #12]
   1e526:	6881      	ldr	r1, [r0, #8]
   1e528:	4656      	mov	r6, sl
   1e52a:	60ca      	str	r2, [r1, #12]
   1e52c:	6091      	str	r1, [r2, #8]
   1e52e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e532:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e536:	1f22      	subs	r2, r4, #4
   1e538:	2a24      	cmp	r2, #36	; 0x24
   1e53a:	60c1      	str	r1, [r0, #12]
   1e53c:	6088      	str	r0, [r1, #8]
   1e53e:	f200 8094 	bhi.w	1e66a <_realloc_r+0x29a>
   1e542:	2a13      	cmp	r2, #19
   1e544:	d96f      	bls.n	1e626 <_realloc_r+0x256>
   1e546:	6829      	ldr	r1, [r5, #0]
   1e548:	f8ca 1008 	str.w	r1, [sl, #8]
   1e54c:	6869      	ldr	r1, [r5, #4]
   1e54e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e552:	2a1b      	cmp	r2, #27
   1e554:	f200 80a2 	bhi.w	1e69c <_realloc_r+0x2cc>
   1e558:	3508      	adds	r5, #8
   1e55a:	f10a 0210 	add.w	r2, sl, #16
   1e55e:	e063      	b.n	1e628 <_realloc_r+0x258>
   1e560:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e564:	eba9 0a03 	sub.w	sl, r9, r3
   1e568:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e56c:	f021 0103 	bic.w	r1, r1, #3
   1e570:	1863      	adds	r3, r4, r1
   1e572:	4293      	cmp	r3, r2
   1e574:	f6ff af59 	blt.w	1e42a <_realloc_r+0x5a>
   1e578:	4656      	mov	r6, sl
   1e57a:	e7d8      	b.n	1e52e <_realloc_r+0x15e>
   1e57c:	6841      	ldr	r1, [r0, #4]
   1e57e:	f021 0b03 	bic.w	fp, r1, #3
   1e582:	44a3      	add	fp, r4
   1e584:	f107 0010 	add.w	r0, r7, #16
   1e588:	4583      	cmp	fp, r0
   1e58a:	da56      	bge.n	1e63a <_realloc_r+0x26a>
   1e58c:	f01e 0f01 	tst.w	lr, #1
   1e590:	f47f af4b 	bne.w	1e42a <_realloc_r+0x5a>
   1e594:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e598:	eba9 0a01 	sub.w	sl, r9, r1
   1e59c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e5a0:	f021 0103 	bic.w	r1, r1, #3
   1e5a4:	448b      	add	fp, r1
   1e5a6:	4558      	cmp	r0, fp
   1e5a8:	dce2      	bgt.n	1e570 <_realloc_r+0x1a0>
   1e5aa:	4656      	mov	r6, sl
   1e5ac:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e5b0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e5b4:	1f22      	subs	r2, r4, #4
   1e5b6:	2a24      	cmp	r2, #36	; 0x24
   1e5b8:	60c1      	str	r1, [r0, #12]
   1e5ba:	6088      	str	r0, [r1, #8]
   1e5bc:	f200 808f 	bhi.w	1e6de <_realloc_r+0x30e>
   1e5c0:	2a13      	cmp	r2, #19
   1e5c2:	f240 808a 	bls.w	1e6da <_realloc_r+0x30a>
   1e5c6:	6829      	ldr	r1, [r5, #0]
   1e5c8:	f8ca 1008 	str.w	r1, [sl, #8]
   1e5cc:	6869      	ldr	r1, [r5, #4]
   1e5ce:	f8ca 100c 	str.w	r1, [sl, #12]
   1e5d2:	2a1b      	cmp	r2, #27
   1e5d4:	f200 808a 	bhi.w	1e6ec <_realloc_r+0x31c>
   1e5d8:	3508      	adds	r5, #8
   1e5da:	f10a 0210 	add.w	r2, sl, #16
   1e5de:	6829      	ldr	r1, [r5, #0]
   1e5e0:	6011      	str	r1, [r2, #0]
   1e5e2:	6869      	ldr	r1, [r5, #4]
   1e5e4:	6051      	str	r1, [r2, #4]
   1e5e6:	68a9      	ldr	r1, [r5, #8]
   1e5e8:	6091      	str	r1, [r2, #8]
   1e5ea:	eb0a 0107 	add.w	r1, sl, r7
   1e5ee:	ebab 0207 	sub.w	r2, fp, r7
   1e5f2:	f042 0201 	orr.w	r2, r2, #1
   1e5f6:	6099      	str	r1, [r3, #8]
   1e5f8:	604a      	str	r2, [r1, #4]
   1e5fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e5fe:	f003 0301 	and.w	r3, r3, #1
   1e602:	431f      	orrs	r7, r3
   1e604:	4640      	mov	r0, r8
   1e606:	f8ca 7004 	str.w	r7, [sl, #4]
   1e60a:	f7ff fe9b 	bl	1e344 <__malloc_unlock>
   1e60e:	e751      	b.n	1e4b4 <_realloc_r+0xe4>
   1e610:	682b      	ldr	r3, [r5, #0]
   1e612:	6003      	str	r3, [r0, #0]
   1e614:	686b      	ldr	r3, [r5, #4]
   1e616:	6043      	str	r3, [r0, #4]
   1e618:	2a1b      	cmp	r2, #27
   1e61a:	d82d      	bhi.n	1e678 <_realloc_r+0x2a8>
   1e61c:	f100 0308 	add.w	r3, r0, #8
   1e620:	f105 0208 	add.w	r2, r5, #8
   1e624:	e71b      	b.n	1e45e <_realloc_r+0x8e>
   1e626:	4632      	mov	r2, r6
   1e628:	6829      	ldr	r1, [r5, #0]
   1e62a:	6011      	str	r1, [r2, #0]
   1e62c:	6869      	ldr	r1, [r5, #4]
   1e62e:	6051      	str	r1, [r2, #4]
   1e630:	68a9      	ldr	r1, [r5, #8]
   1e632:	6091      	str	r1, [r2, #8]
   1e634:	461c      	mov	r4, r3
   1e636:	46d1      	mov	r9, sl
   1e638:	e72a      	b.n	1e490 <_realloc_r+0xc0>
   1e63a:	eb09 0107 	add.w	r1, r9, r7
   1e63e:	ebab 0b07 	sub.w	fp, fp, r7
   1e642:	f04b 0201 	orr.w	r2, fp, #1
   1e646:	6099      	str	r1, [r3, #8]
   1e648:	604a      	str	r2, [r1, #4]
   1e64a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e64e:	f003 0301 	and.w	r3, r3, #1
   1e652:	431f      	orrs	r7, r3
   1e654:	4640      	mov	r0, r8
   1e656:	f845 7c04 	str.w	r7, [r5, #-4]
   1e65a:	f7ff fe73 	bl	1e344 <__malloc_unlock>
   1e65e:	462e      	mov	r6, r5
   1e660:	e728      	b.n	1e4b4 <_realloc_r+0xe4>
   1e662:	4629      	mov	r1, r5
   1e664:	f7ff fdb6 	bl	1e1d4 <memmove>
   1e668:	e6ff      	b.n	1e46a <_realloc_r+0x9a>
   1e66a:	4629      	mov	r1, r5
   1e66c:	4630      	mov	r0, r6
   1e66e:	461c      	mov	r4, r3
   1e670:	46d1      	mov	r9, sl
   1e672:	f7ff fdaf 	bl	1e1d4 <memmove>
   1e676:	e70b      	b.n	1e490 <_realloc_r+0xc0>
   1e678:	68ab      	ldr	r3, [r5, #8]
   1e67a:	6083      	str	r3, [r0, #8]
   1e67c:	68eb      	ldr	r3, [r5, #12]
   1e67e:	60c3      	str	r3, [r0, #12]
   1e680:	2a24      	cmp	r2, #36	; 0x24
   1e682:	d017      	beq.n	1e6b4 <_realloc_r+0x2e4>
   1e684:	f100 0310 	add.w	r3, r0, #16
   1e688:	f105 0210 	add.w	r2, r5, #16
   1e68c:	e6e7      	b.n	1e45e <_realloc_r+0x8e>
   1e68e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e692:	f023 0303 	bic.w	r3, r3, #3
   1e696:	441c      	add	r4, r3
   1e698:	462e      	mov	r6, r5
   1e69a:	e6f9      	b.n	1e490 <_realloc_r+0xc0>
   1e69c:	68a9      	ldr	r1, [r5, #8]
   1e69e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e6a2:	68e9      	ldr	r1, [r5, #12]
   1e6a4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e6a8:	2a24      	cmp	r2, #36	; 0x24
   1e6aa:	d00c      	beq.n	1e6c6 <_realloc_r+0x2f6>
   1e6ac:	3510      	adds	r5, #16
   1e6ae:	f10a 0218 	add.w	r2, sl, #24
   1e6b2:	e7b9      	b.n	1e628 <_realloc_r+0x258>
   1e6b4:	692b      	ldr	r3, [r5, #16]
   1e6b6:	6103      	str	r3, [r0, #16]
   1e6b8:	696b      	ldr	r3, [r5, #20]
   1e6ba:	6143      	str	r3, [r0, #20]
   1e6bc:	f105 0218 	add.w	r2, r5, #24
   1e6c0:	f100 0318 	add.w	r3, r0, #24
   1e6c4:	e6cb      	b.n	1e45e <_realloc_r+0x8e>
   1e6c6:	692a      	ldr	r2, [r5, #16]
   1e6c8:	f8ca 2018 	str.w	r2, [sl, #24]
   1e6cc:	696a      	ldr	r2, [r5, #20]
   1e6ce:	f8ca 201c 	str.w	r2, [sl, #28]
   1e6d2:	3518      	adds	r5, #24
   1e6d4:	f10a 0220 	add.w	r2, sl, #32
   1e6d8:	e7a6      	b.n	1e628 <_realloc_r+0x258>
   1e6da:	4632      	mov	r2, r6
   1e6dc:	e77f      	b.n	1e5de <_realloc_r+0x20e>
   1e6de:	4629      	mov	r1, r5
   1e6e0:	4630      	mov	r0, r6
   1e6e2:	9301      	str	r3, [sp, #4]
   1e6e4:	f7ff fd76 	bl	1e1d4 <memmove>
   1e6e8:	9b01      	ldr	r3, [sp, #4]
   1e6ea:	e77e      	b.n	1e5ea <_realloc_r+0x21a>
   1e6ec:	68a9      	ldr	r1, [r5, #8]
   1e6ee:	f8ca 1010 	str.w	r1, [sl, #16]
   1e6f2:	68e9      	ldr	r1, [r5, #12]
   1e6f4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e6f8:	2a24      	cmp	r2, #36	; 0x24
   1e6fa:	d003      	beq.n	1e704 <_realloc_r+0x334>
   1e6fc:	3510      	adds	r5, #16
   1e6fe:	f10a 0218 	add.w	r2, sl, #24
   1e702:	e76c      	b.n	1e5de <_realloc_r+0x20e>
   1e704:	692a      	ldr	r2, [r5, #16]
   1e706:	f8ca 2018 	str.w	r2, [sl, #24]
   1e70a:	696a      	ldr	r2, [r5, #20]
   1e70c:	f8ca 201c 	str.w	r2, [sl, #28]
   1e710:	3518      	adds	r5, #24
   1e712:	f10a 0220 	add.w	r2, sl, #32
   1e716:	e762      	b.n	1e5de <_realloc_r+0x20e>
   1e718:	20000694 	.word	0x20000694

0001e71c <_sbrk_r>:
   1e71c:	b538      	push	{r3, r4, r5, lr}
   1e71e:	4c07      	ldr	r4, [pc, #28]	; (1e73c <_sbrk_r+0x20>)
   1e720:	2300      	movs	r3, #0
   1e722:	4605      	mov	r5, r0
   1e724:	4608      	mov	r0, r1
   1e726:	6023      	str	r3, [r4, #0]
   1e728:	f003 ff74 	bl	22614 <_sbrk>
   1e72c:	1c43      	adds	r3, r0, #1
   1e72e:	d000      	beq.n	1e732 <_sbrk_r+0x16>
   1e730:	bd38      	pop	{r3, r4, r5, pc}
   1e732:	6823      	ldr	r3, [r4, #0]
   1e734:	2b00      	cmp	r3, #0
   1e736:	d0fb      	beq.n	1e730 <_sbrk_r+0x14>
   1e738:	602b      	str	r3, [r5, #0]
   1e73a:	bd38      	pop	{r3, r4, r5, pc}
   1e73c:	2000239c 	.word	0x2000239c

0001e740 <_raise_r>:
   1e740:	291f      	cmp	r1, #31
   1e742:	d828      	bhi.n	1e796 <_raise_r+0x56>
   1e744:	b520      	push	{r5, lr}
   1e746:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1e74a:	b082      	sub	sp, #8
   1e74c:	4605      	mov	r5, r0
   1e74e:	b1aa      	cbz	r2, 1e77c <_raise_r+0x3c>
   1e750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e754:	b193      	cbz	r3, 1e77c <_raise_r+0x3c>
   1e756:	2b01      	cmp	r3, #1
   1e758:	d00e      	beq.n	1e778 <_raise_r+0x38>
   1e75a:	1c58      	adds	r0, r3, #1
   1e75c:	d007      	beq.n	1e76e <_raise_r+0x2e>
   1e75e:	2500      	movs	r5, #0
   1e760:	4608      	mov	r0, r1
   1e762:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e766:	4798      	blx	r3
   1e768:	4628      	mov	r0, r5
   1e76a:	b002      	add	sp, #8
   1e76c:	bd20      	pop	{r5, pc}
   1e76e:	2316      	movs	r3, #22
   1e770:	2001      	movs	r0, #1
   1e772:	602b      	str	r3, [r5, #0]
   1e774:	b002      	add	sp, #8
   1e776:	bd20      	pop	{r5, pc}
   1e778:	2000      	movs	r0, #0
   1e77a:	e7f6      	b.n	1e76a <_raise_r+0x2a>
   1e77c:	4628      	mov	r0, r5
   1e77e:	9101      	str	r1, [sp, #4]
   1e780:	f000 f82a 	bl	1e7d8 <_getpid_r>
   1e784:	9901      	ldr	r1, [sp, #4]
   1e786:	460a      	mov	r2, r1
   1e788:	4601      	mov	r1, r0
   1e78a:	4628      	mov	r0, r5
   1e78c:	b002      	add	sp, #8
   1e78e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1e792:	f000 b80d 	b.w	1e7b0 <_kill_r>
   1e796:	2316      	movs	r3, #22
   1e798:	6003      	str	r3, [r0, #0]
   1e79a:	f04f 30ff 	mov.w	r0, #4294967295
   1e79e:	4770      	bx	lr

0001e7a0 <raise>:
   1e7a0:	4b02      	ldr	r3, [pc, #8]	; (1e7ac <raise+0xc>)
   1e7a2:	4601      	mov	r1, r0
   1e7a4:	6818      	ldr	r0, [r3, #0]
   1e7a6:	f7ff bfcb 	b.w	1e740 <_raise_r>
   1e7aa:	bf00      	nop
   1e7ac:	200000f8 	.word	0x200000f8

0001e7b0 <_kill_r>:
   1e7b0:	b538      	push	{r3, r4, r5, lr}
   1e7b2:	460b      	mov	r3, r1
   1e7b4:	4c07      	ldr	r4, [pc, #28]	; (1e7d4 <_kill_r+0x24>)
   1e7b6:	4605      	mov	r5, r0
   1e7b8:	4611      	mov	r1, r2
   1e7ba:	4618      	mov	r0, r3
   1e7bc:	2300      	movs	r3, #0
   1e7be:	6023      	str	r3, [r4, #0]
   1e7c0:	f003 ffa2 	bl	22708 <_kill>
   1e7c4:	1c43      	adds	r3, r0, #1
   1e7c6:	d000      	beq.n	1e7ca <_kill_r+0x1a>
   1e7c8:	bd38      	pop	{r3, r4, r5, pc}
   1e7ca:	6823      	ldr	r3, [r4, #0]
   1e7cc:	2b00      	cmp	r3, #0
   1e7ce:	d0fb      	beq.n	1e7c8 <_kill_r+0x18>
   1e7d0:	602b      	str	r3, [r5, #0]
   1e7d2:	bd38      	pop	{r3, r4, r5, pc}
   1e7d4:	2000239c 	.word	0x2000239c

0001e7d8 <_getpid_r>:
   1e7d8:	f003 bf1a 	b.w	22610 <_getpid>

0001e7dc <sprintf>:
   1e7dc:	b40e      	push	{r1, r2, r3}
   1e7de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7e0:	b09c      	sub	sp, #112	; 0x70
   1e7e2:	ab21      	add	r3, sp, #132	; 0x84
   1e7e4:	490f      	ldr	r1, [pc, #60]	; (1e824 <sprintf+0x48>)
   1e7e6:	f853 2b04 	ldr.w	r2, [r3], #4
   1e7ea:	9301      	str	r3, [sp, #4]
   1e7ec:	4605      	mov	r5, r0
   1e7ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1e7f2:	6808      	ldr	r0, [r1, #0]
   1e7f4:	9502      	str	r5, [sp, #8]
   1e7f6:	f44f 7702 	mov.w	r7, #520	; 0x208
   1e7fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e7fe:	a902      	add	r1, sp, #8
   1e800:	9506      	str	r5, [sp, #24]
   1e802:	f8ad 7014 	strh.w	r7, [sp, #20]
   1e806:	9404      	str	r4, [sp, #16]
   1e808:	9407      	str	r4, [sp, #28]
   1e80a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e80e:	f000 fa57 	bl	1ecc0 <_svfprintf_r>
   1e812:	9b02      	ldr	r3, [sp, #8]
   1e814:	2200      	movs	r2, #0
   1e816:	701a      	strb	r2, [r3, #0]
   1e818:	b01c      	add	sp, #112	; 0x70
   1e81a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e81e:	b003      	add	sp, #12
   1e820:	4770      	bx	lr
   1e822:	bf00      	nop
   1e824:	200000f8 	.word	0x200000f8
	...
   1e840:	eba2 0003 	sub.w	r0, r2, r3
   1e844:	4770      	bx	lr
   1e846:	bf00      	nop

0001e848 <strcmp>:
   1e848:	7802      	ldrb	r2, [r0, #0]
   1e84a:	780b      	ldrb	r3, [r1, #0]
   1e84c:	2a01      	cmp	r2, #1
   1e84e:	bf28      	it	cs
   1e850:	429a      	cmpcs	r2, r3
   1e852:	d1f5      	bne.n	1e840 <sprintf+0x64>
   1e854:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1e858:	ea40 0401 	orr.w	r4, r0, r1
   1e85c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e860:	f06f 0c00 	mvn.w	ip, #0
   1e864:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1e868:	b312      	cbz	r2, 1e8b0 <strcmp+0x68>
   1e86a:	ea80 0401 	eor.w	r4, r0, r1
   1e86e:	f014 0f07 	tst.w	r4, #7
   1e872:	d16a      	bne.n	1e94a <strcmp+0x102>
   1e874:	f000 0407 	and.w	r4, r0, #7
   1e878:	f020 0007 	bic.w	r0, r0, #7
   1e87c:	f004 0503 	and.w	r5, r4, #3
   1e880:	f021 0107 	bic.w	r1, r1, #7
   1e884:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1e888:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e88c:	f014 0f04 	tst.w	r4, #4
   1e890:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e894:	fa0c f405 	lsl.w	r4, ip, r5
   1e898:	ea62 0204 	orn	r2, r2, r4
   1e89c:	ea66 0604 	orn	r6, r6, r4
   1e8a0:	d00a      	beq.n	1e8b8 <strcmp+0x70>
   1e8a2:	ea63 0304 	orn	r3, r3, r4
   1e8a6:	4662      	mov	r2, ip
   1e8a8:	ea67 0704 	orn	r7, r7, r4
   1e8ac:	4666      	mov	r6, ip
   1e8ae:	e003      	b.n	1e8b8 <strcmp+0x70>
   1e8b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e8b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e8b8:	fa82 f54c 	uadd8	r5, r2, ip
   1e8bc:	ea82 0406 	eor.w	r4, r2, r6
   1e8c0:	faa4 f48c 	sel	r4, r4, ip
   1e8c4:	bb6c      	cbnz	r4, 1e922 <strcmp+0xda>
   1e8c6:	fa83 f54c 	uadd8	r5, r3, ip
   1e8ca:	ea83 0507 	eor.w	r5, r3, r7
   1e8ce:	faa5 f58c 	sel	r5, r5, ip
   1e8d2:	b995      	cbnz	r5, 1e8fa <strcmp+0xb2>
   1e8d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1e8d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1e8dc:	fa82 f54c 	uadd8	r5, r2, ip
   1e8e0:	ea82 0406 	eor.w	r4, r2, r6
   1e8e4:	faa4 f48c 	sel	r4, r4, ip
   1e8e8:	fa83 f54c 	uadd8	r5, r3, ip
   1e8ec:	ea83 0507 	eor.w	r5, r3, r7
   1e8f0:	faa5 f58c 	sel	r5, r5, ip
   1e8f4:	4325      	orrs	r5, r4
   1e8f6:	d0db      	beq.n	1e8b0 <strcmp+0x68>
   1e8f8:	b99c      	cbnz	r4, 1e922 <strcmp+0xda>
   1e8fa:	ba2d      	rev	r5, r5
   1e8fc:	fab5 f485 	clz	r4, r5
   1e900:	f024 0407 	bic.w	r4, r4, #7
   1e904:	fa27 f104 	lsr.w	r1, r7, r4
   1e908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e90c:	fa23 f304 	lsr.w	r3, r3, r4
   1e910:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1e914:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e918:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e91c:	eba0 0001 	sub.w	r0, r0, r1
   1e920:	4770      	bx	lr
   1e922:	ba24      	rev	r4, r4
   1e924:	fab4 f484 	clz	r4, r4
   1e928:	f024 0407 	bic.w	r4, r4, #7
   1e92c:	fa26 f104 	lsr.w	r1, r6, r4
   1e930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e934:	fa22 f204 	lsr.w	r2, r2, r4
   1e938:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1e93c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e940:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e944:	eba0 0001 	sub.w	r0, r0, r1
   1e948:	4770      	bx	lr
   1e94a:	f014 0f03 	tst.w	r4, #3
   1e94e:	d13c      	bne.n	1e9ca <strcmp+0x182>
   1e950:	f010 0403 	ands.w	r4, r0, #3
   1e954:	d128      	bne.n	1e9a8 <strcmp+0x160>
   1e956:	f850 2b08 	ldr.w	r2, [r0], #8
   1e95a:	f851 3b08 	ldr.w	r3, [r1], #8
   1e95e:	fa82 f54c 	uadd8	r5, r2, ip
   1e962:	ea82 0503 	eor.w	r5, r2, r3
   1e966:	faa5 f58c 	sel	r5, r5, ip
   1e96a:	b95d      	cbnz	r5, 1e984 <strcmp+0x13c>
   1e96c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1e970:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e974:	fa82 f54c 	uadd8	r5, r2, ip
   1e978:	ea82 0503 	eor.w	r5, r2, r3
   1e97c:	faa5 f58c 	sel	r5, r5, ip
   1e980:	2d00      	cmp	r5, #0
   1e982:	d0e8      	beq.n	1e956 <strcmp+0x10e>
   1e984:	ba2d      	rev	r5, r5
   1e986:	fab5 f485 	clz	r4, r5
   1e98a:	f024 0407 	bic.w	r4, r4, #7
   1e98e:	fa23 f104 	lsr.w	r1, r3, r4
   1e992:	fa22 f204 	lsr.w	r2, r2, r4
   1e996:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1e99a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e99e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e9a2:	eba0 0001 	sub.w	r0, r0, r1
   1e9a6:	4770      	bx	lr
   1e9a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1e9ac:	f020 0003 	bic.w	r0, r0, #3
   1e9b0:	f850 2b08 	ldr.w	r2, [r0], #8
   1e9b4:	f021 0103 	bic.w	r1, r1, #3
   1e9b8:	f851 3b08 	ldr.w	r3, [r1], #8
   1e9bc:	fa0c f404 	lsl.w	r4, ip, r4
   1e9c0:	ea62 0204 	orn	r2, r2, r4
   1e9c4:	ea63 0304 	orn	r3, r3, r4
   1e9c8:	e7c9      	b.n	1e95e <strcmp+0x116>
   1e9ca:	f010 0403 	ands.w	r4, r0, #3
   1e9ce:	d01a      	beq.n	1ea06 <strcmp+0x1be>
   1e9d0:	eba1 0104 	sub.w	r1, r1, r4
   1e9d4:	f020 0003 	bic.w	r0, r0, #3
   1e9d8:	07e4      	lsls	r4, r4, #31
   1e9da:	f850 2b04 	ldr.w	r2, [r0], #4
   1e9de:	d006      	beq.n	1e9ee <strcmp+0x1a6>
   1e9e0:	d20f      	bcs.n	1ea02 <strcmp+0x1ba>
   1e9e2:	788b      	ldrb	r3, [r1, #2]
   1e9e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1e9e8:	1ae4      	subs	r4, r4, r3
   1e9ea:	d106      	bne.n	1e9fa <strcmp+0x1b2>
   1e9ec:	b12b      	cbz	r3, 1e9fa <strcmp+0x1b2>
   1e9ee:	78cb      	ldrb	r3, [r1, #3]
   1e9f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1e9f4:	1ae4      	subs	r4, r4, r3
   1e9f6:	d100      	bne.n	1e9fa <strcmp+0x1b2>
   1e9f8:	b91b      	cbnz	r3, 1ea02 <strcmp+0x1ba>
   1e9fa:	4620      	mov	r0, r4
   1e9fc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1ea00:	4770      	bx	lr
   1ea02:	f101 0104 	add.w	r1, r1, #4
   1ea06:	f850 2b04 	ldr.w	r2, [r0], #4
   1ea0a:	07cc      	lsls	r4, r1, #31
   1ea0c:	f021 0103 	bic.w	r1, r1, #3
   1ea10:	f851 3b04 	ldr.w	r3, [r1], #4
   1ea14:	d848      	bhi.n	1eaa8 <strcmp+0x260>
   1ea16:	d224      	bcs.n	1ea62 <strcmp+0x21a>
   1ea18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1ea1c:	fa82 f54c 	uadd8	r5, r2, ip
   1ea20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1ea24:	faa5 f58c 	sel	r5, r5, ip
   1ea28:	d10a      	bne.n	1ea40 <strcmp+0x1f8>
   1ea2a:	b965      	cbnz	r5, 1ea46 <strcmp+0x1fe>
   1ea2c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ea30:	ea84 0402 	eor.w	r4, r4, r2
   1ea34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1ea38:	d10e      	bne.n	1ea58 <strcmp+0x210>
   1ea3a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ea3e:	e7eb      	b.n	1ea18 <strcmp+0x1d0>
   1ea40:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1ea44:	e055      	b.n	1eaf2 <strcmp+0x2aa>
   1ea46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1ea4a:	d14d      	bne.n	1eae8 <strcmp+0x2a0>
   1ea4c:	7808      	ldrb	r0, [r1, #0]
   1ea4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ea52:	f1c0 0000 	rsb	r0, r0, #0
   1ea56:	4770      	bx	lr
   1ea58:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ea5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1ea60:	e047      	b.n	1eaf2 <strcmp+0x2aa>
   1ea62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1ea66:	fa82 f54c 	uadd8	r5, r2, ip
   1ea6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1ea6e:	faa5 f58c 	sel	r5, r5, ip
   1ea72:	d10a      	bne.n	1ea8a <strcmp+0x242>
   1ea74:	b965      	cbnz	r5, 1ea90 <strcmp+0x248>
   1ea76:	f851 3b04 	ldr.w	r3, [r1], #4
   1ea7a:	ea84 0402 	eor.w	r4, r4, r2
   1ea7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ea82:	d10c      	bne.n	1ea9e <strcmp+0x256>
   1ea84:	f850 2b04 	ldr.w	r2, [r0], #4
   1ea88:	e7eb      	b.n	1ea62 <strcmp+0x21a>
   1ea8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ea8e:	e030      	b.n	1eaf2 <strcmp+0x2aa>
   1ea90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ea94:	d128      	bne.n	1eae8 <strcmp+0x2a0>
   1ea96:	880b      	ldrh	r3, [r1, #0]
   1ea98:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ea9c:	e029      	b.n	1eaf2 <strcmp+0x2aa>
   1ea9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1eaa2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1eaa6:	e024      	b.n	1eaf2 <strcmp+0x2aa>
   1eaa8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1eaac:	fa82 f54c 	uadd8	r5, r2, ip
   1eab0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1eab4:	faa5 f58c 	sel	r5, r5, ip
   1eab8:	d10a      	bne.n	1ead0 <strcmp+0x288>
   1eaba:	b965      	cbnz	r5, 1ead6 <strcmp+0x28e>
   1eabc:	f851 3b04 	ldr.w	r3, [r1], #4
   1eac0:	ea84 0402 	eor.w	r4, r4, r2
   1eac4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1eac8:	d109      	bne.n	1eade <strcmp+0x296>
   1eaca:	f850 2b04 	ldr.w	r2, [r0], #4
   1eace:	e7eb      	b.n	1eaa8 <strcmp+0x260>
   1ead0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ead4:	e00d      	b.n	1eaf2 <strcmp+0x2aa>
   1ead6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1eada:	d105      	bne.n	1eae8 <strcmp+0x2a0>
   1eadc:	680b      	ldr	r3, [r1, #0]
   1eade:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1eae2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1eae6:	e004      	b.n	1eaf2 <strcmp+0x2aa>
   1eae8:	f04f 0000 	mov.w	r0, #0
   1eaec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eaf0:	4770      	bx	lr
   1eaf2:	ba12      	rev	r2, r2
   1eaf4:	ba1b      	rev	r3, r3
   1eaf6:	fa82 f44c 	uadd8	r4, r2, ip
   1eafa:	ea82 0403 	eor.w	r4, r2, r3
   1eafe:	faa4 f58c 	sel	r5, r4, ip
   1eb02:	fab5 f485 	clz	r4, r5
   1eb06:	fa02 f204 	lsl.w	r2, r2, r4
   1eb0a:	fa03 f304 	lsl.w	r3, r3, r4
   1eb0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1eb12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1eb1a:	4770      	bx	lr
	...

0001eb40 <strlen>:
   1eb40:	f890 f000 	pld	[r0]
   1eb44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1eb48:	f020 0107 	bic.w	r1, r0, #7
   1eb4c:	f06f 0c00 	mvn.w	ip, #0
   1eb50:	f010 0407 	ands.w	r4, r0, #7
   1eb54:	f891 f020 	pld	[r1, #32]
   1eb58:	f040 8049 	bne.w	1ebee <strlen+0xae>
   1eb5c:	f04f 0400 	mov.w	r4, #0
   1eb60:	f06f 0007 	mvn.w	r0, #7
   1eb64:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eb68:	f891 f040 	pld	[r1, #64]	; 0x40
   1eb6c:	f100 0008 	add.w	r0, r0, #8
   1eb70:	fa82 f24c 	uadd8	r2, r2, ip
   1eb74:	faa4 f28c 	sel	r2, r4, ip
   1eb78:	fa83 f34c 	uadd8	r3, r3, ip
   1eb7c:	faa2 f38c 	sel	r3, r2, ip
   1eb80:	bb4b      	cbnz	r3, 1ebd6 <strlen+0x96>
   1eb82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1eb86:	fa82 f24c 	uadd8	r2, r2, ip
   1eb8a:	f100 0008 	add.w	r0, r0, #8
   1eb8e:	faa4 f28c 	sel	r2, r4, ip
   1eb92:	fa83 f34c 	uadd8	r3, r3, ip
   1eb96:	faa2 f38c 	sel	r3, r2, ip
   1eb9a:	b9e3      	cbnz	r3, 1ebd6 <strlen+0x96>
   1eb9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1eba0:	fa82 f24c 	uadd8	r2, r2, ip
   1eba4:	f100 0008 	add.w	r0, r0, #8
   1eba8:	faa4 f28c 	sel	r2, r4, ip
   1ebac:	fa83 f34c 	uadd8	r3, r3, ip
   1ebb0:	faa2 f38c 	sel	r3, r2, ip
   1ebb4:	b97b      	cbnz	r3, 1ebd6 <strlen+0x96>
   1ebb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1ebba:	f101 0120 	add.w	r1, r1, #32
   1ebbe:	fa82 f24c 	uadd8	r2, r2, ip
   1ebc2:	f100 0008 	add.w	r0, r0, #8
   1ebc6:	faa4 f28c 	sel	r2, r4, ip
   1ebca:	fa83 f34c 	uadd8	r3, r3, ip
   1ebce:	faa2 f38c 	sel	r3, r2, ip
   1ebd2:	2b00      	cmp	r3, #0
   1ebd4:	d0c6      	beq.n	1eb64 <strlen+0x24>
   1ebd6:	2a00      	cmp	r2, #0
   1ebd8:	bf04      	itt	eq
   1ebda:	3004      	addeq	r0, #4
   1ebdc:	461a      	moveq	r2, r3
   1ebde:	ba12      	rev	r2, r2
   1ebe0:	fab2 f282 	clz	r2, r2
   1ebe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1ebe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1ebec:	4770      	bx	lr
   1ebee:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ebf2:	f004 0503 	and.w	r5, r4, #3
   1ebf6:	f1c4 0000 	rsb	r0, r4, #0
   1ebfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ebfe:	f014 0f04 	tst.w	r4, #4
   1ec02:	f891 f040 	pld	[r1, #64]	; 0x40
   1ec06:	fa0c f505 	lsl.w	r5, ip, r5
   1ec0a:	ea62 0205 	orn	r2, r2, r5
   1ec0e:	bf1c      	itt	ne
   1ec10:	ea63 0305 	ornne	r3, r3, r5
   1ec14:	4662      	movne	r2, ip
   1ec16:	f04f 0400 	mov.w	r4, #0
   1ec1a:	e7a9      	b.n	1eb70 <strlen+0x30>

0001ec1c <strncmp>:
   1ec1c:	2a00      	cmp	r2, #0
   1ec1e:	d041      	beq.n	1eca4 <strncmp+0x88>
   1ec20:	ea40 0301 	orr.w	r3, r0, r1
   1ec24:	f013 0303 	ands.w	r3, r3, #3
   1ec28:	b4f0      	push	{r4, r5, r6, r7}
   1ec2a:	d125      	bne.n	1ec78 <strncmp+0x5c>
   1ec2c:	2a03      	cmp	r2, #3
   1ec2e:	d923      	bls.n	1ec78 <strncmp+0x5c>
   1ec30:	6804      	ldr	r4, [r0, #0]
   1ec32:	680d      	ldr	r5, [r1, #0]
   1ec34:	42ac      	cmp	r4, r5
   1ec36:	d11f      	bne.n	1ec78 <strncmp+0x5c>
   1ec38:	3a04      	subs	r2, #4
   1ec3a:	d038      	beq.n	1ecae <strncmp+0x92>
   1ec3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ec40:	ea25 0404 	bic.w	r4, r5, r4
   1ec44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ec48:	d12e      	bne.n	1eca8 <strncmp+0x8c>
   1ec4a:	3004      	adds	r0, #4
   1ec4c:	3104      	adds	r1, #4
   1ec4e:	e00f      	b.n	1ec70 <strncmp+0x54>
   1ec50:	f850 3b04 	ldr.w	r3, [r0], #4
   1ec54:	680e      	ldr	r6, [r1, #0]
   1ec56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ec5a:	42b3      	cmp	r3, r6
   1ec5c:	ea24 0403 	bic.w	r4, r4, r3
   1ec60:	f101 0104 	add.w	r1, r1, #4
   1ec64:	d126      	bne.n	1ecb4 <strncmp+0x98>
   1ec66:	3a04      	subs	r2, #4
   1ec68:	d021      	beq.n	1ecae <strncmp+0x92>
   1ec6a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ec6e:	d11b      	bne.n	1eca8 <strncmp+0x8c>
   1ec70:	2a03      	cmp	r2, #3
   1ec72:	4607      	mov	r7, r0
   1ec74:	460d      	mov	r5, r1
   1ec76:	d8eb      	bhi.n	1ec50 <strncmp+0x34>
   1ec78:	7805      	ldrb	r5, [r0, #0]
   1ec7a:	780c      	ldrb	r4, [r1, #0]
   1ec7c:	42ac      	cmp	r4, r5
   1ec7e:	f102 33ff 	add.w	r3, r2, #4294967295
   1ec82:	d11a      	bne.n	1ecba <strncmp+0x9e>
   1ec84:	b183      	cbz	r3, 1eca8 <strncmp+0x8c>
   1ec86:	b914      	cbnz	r4, 1ec8e <strncmp+0x72>
   1ec88:	e00e      	b.n	1eca8 <strncmp+0x8c>
   1ec8a:	b16b      	cbz	r3, 1eca8 <strncmp+0x8c>
   1ec8c:	b17a      	cbz	r2, 1ecae <strncmp+0x92>
   1ec8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1ec92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ec96:	42a2      	cmp	r2, r4
   1ec98:	f103 33ff 	add.w	r3, r3, #4294967295
   1ec9c:	d0f5      	beq.n	1ec8a <strncmp+0x6e>
   1ec9e:	1b10      	subs	r0, r2, r4
   1eca0:	bcf0      	pop	{r4, r5, r6, r7}
   1eca2:	4770      	bx	lr
   1eca4:	4610      	mov	r0, r2
   1eca6:	4770      	bx	lr
   1eca8:	2000      	movs	r0, #0
   1ecaa:	bcf0      	pop	{r4, r5, r6, r7}
   1ecac:	4770      	bx	lr
   1ecae:	4610      	mov	r0, r2
   1ecb0:	bcf0      	pop	{r4, r5, r6, r7}
   1ecb2:	4770      	bx	lr
   1ecb4:	4629      	mov	r1, r5
   1ecb6:	4638      	mov	r0, r7
   1ecb8:	e7de      	b.n	1ec78 <strncmp+0x5c>
   1ecba:	462a      	mov	r2, r5
   1ecbc:	e7ef      	b.n	1ec9e <strncmp+0x82>
   1ecbe:	bf00      	nop

0001ecc0 <_svfprintf_r>:
   1ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecc4:	b0c1      	sub	sp, #260	; 0x104
   1ecc6:	460c      	mov	r4, r1
   1ecc8:	9107      	str	r1, [sp, #28]
   1ecca:	4692      	mov	sl, r2
   1eccc:	930b      	str	r3, [sp, #44]	; 0x2c
   1ecce:	9008      	str	r0, [sp, #32]
   1ecd0:	f002 fde2 	bl	21898 <_localeconv_r>
   1ecd4:	6803      	ldr	r3, [r0, #0]
   1ecd6:	9314      	str	r3, [sp, #80]	; 0x50
   1ecd8:	4618      	mov	r0, r3
   1ecda:	f7ff ff31 	bl	1eb40 <strlen>
   1ecde:	89a3      	ldrh	r3, [r4, #12]
   1ece0:	9013      	str	r0, [sp, #76]	; 0x4c
   1ece2:	0619      	lsls	r1, r3, #24
   1ece4:	d503      	bpl.n	1ecee <_svfprintf_r+0x2e>
   1ece6:	6923      	ldr	r3, [r4, #16]
   1ece8:	2b00      	cmp	r3, #0
   1ecea:	f001 801b 	beq.w	1fd24 <_svfprintf_r+0x1064>
   1ecee:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1ef40 <_svfprintf_r+0x280>
   1ecf2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ecf6:	2300      	movs	r3, #0
   1ecf8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1ecfc:	930f      	str	r3, [sp, #60]	; 0x3c
   1ecfe:	9325      	str	r3, [sp, #148]	; 0x94
   1ed00:	9324      	str	r3, [sp, #144]	; 0x90
   1ed02:	9312      	str	r3, [sp, #72]	; 0x48
   1ed04:	9315      	str	r3, [sp, #84]	; 0x54
   1ed06:	9305      	str	r3, [sp, #20]
   1ed08:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1ed0c:	46c8      	mov	r8, r9
   1ed0e:	f89a 3000 	ldrb.w	r3, [sl]
   1ed12:	4654      	mov	r4, sl
   1ed14:	b1e3      	cbz	r3, 1ed50 <_svfprintf_r+0x90>
   1ed16:	2b25      	cmp	r3, #37	; 0x25
   1ed18:	d102      	bne.n	1ed20 <_svfprintf_r+0x60>
   1ed1a:	e019      	b.n	1ed50 <_svfprintf_r+0x90>
   1ed1c:	2b25      	cmp	r3, #37	; 0x25
   1ed1e:	d003      	beq.n	1ed28 <_svfprintf_r+0x68>
   1ed20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ed24:	2b00      	cmp	r3, #0
   1ed26:	d1f9      	bne.n	1ed1c <_svfprintf_r+0x5c>
   1ed28:	eba4 050a 	sub.w	r5, r4, sl
   1ed2c:	b185      	cbz	r5, 1ed50 <_svfprintf_r+0x90>
   1ed2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ed30:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ed32:	f8c8 a000 	str.w	sl, [r8]
   1ed36:	3301      	adds	r3, #1
   1ed38:	442a      	add	r2, r5
   1ed3a:	2b07      	cmp	r3, #7
   1ed3c:	f8c8 5004 	str.w	r5, [r8, #4]
   1ed40:	9225      	str	r2, [sp, #148]	; 0x94
   1ed42:	9324      	str	r3, [sp, #144]	; 0x90
   1ed44:	dc7f      	bgt.n	1ee46 <_svfprintf_r+0x186>
   1ed46:	f108 0808 	add.w	r8, r8, #8
   1ed4a:	9b05      	ldr	r3, [sp, #20]
   1ed4c:	442b      	add	r3, r5
   1ed4e:	9305      	str	r3, [sp, #20]
   1ed50:	7823      	ldrb	r3, [r4, #0]
   1ed52:	2b00      	cmp	r3, #0
   1ed54:	d07f      	beq.n	1ee56 <_svfprintf_r+0x196>
   1ed56:	2300      	movs	r3, #0
   1ed58:	461a      	mov	r2, r3
   1ed5a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1ed5e:	4619      	mov	r1, r3
   1ed60:	9309      	str	r3, [sp, #36]	; 0x24
   1ed62:	469b      	mov	fp, r3
   1ed64:	f04f 30ff 	mov.w	r0, #4294967295
   1ed68:	7863      	ldrb	r3, [r4, #1]
   1ed6a:	9006      	str	r0, [sp, #24]
   1ed6c:	f104 0a01 	add.w	sl, r4, #1
   1ed70:	f10a 0a01 	add.w	sl, sl, #1
   1ed74:	f1a3 0020 	sub.w	r0, r3, #32
   1ed78:	2858      	cmp	r0, #88	; 0x58
   1ed7a:	f200 83d3 	bhi.w	1f524 <_svfprintf_r+0x864>
   1ed7e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ed82:	023f      	.short	0x023f
   1ed84:	03d103d1 	.word	0x03d103d1
   1ed88:	03d10247 	.word	0x03d10247
   1ed8c:	03d103d1 	.word	0x03d103d1
   1ed90:	03d103d1 	.word	0x03d103d1
   1ed94:	024c03d1 	.word	0x024c03d1
   1ed98:	03d1020a 	.word	0x03d1020a
   1ed9c:	0273005d 	.word	0x0273005d
   1eda0:	028e03d1 	.word	0x028e03d1
   1eda4:	03c103c1 	.word	0x03c103c1
   1eda8:	03c103c1 	.word	0x03c103c1
   1edac:	03c103c1 	.word	0x03c103c1
   1edb0:	03c103c1 	.word	0x03c103c1
   1edb4:	03d103c1 	.word	0x03d103c1
   1edb8:	03d103d1 	.word	0x03d103d1
   1edbc:	03d103d1 	.word	0x03d103d1
   1edc0:	03d103d1 	.word	0x03d103d1
   1edc4:	03d103d1 	.word	0x03d103d1
   1edc8:	033f03d1 	.word	0x033f03d1
   1edcc:	03d1035f 	.word	0x03d1035f
   1edd0:	03d1035f 	.word	0x03d1035f
   1edd4:	03d103d1 	.word	0x03d103d1
   1edd8:	03aa03d1 	.word	0x03aa03d1
   1eddc:	03d103d1 	.word	0x03d103d1
   1ede0:	03d103af 	.word	0x03d103af
   1ede4:	03d103d1 	.word	0x03d103d1
   1ede8:	03d103d1 	.word	0x03d103d1
   1edec:	03d10261 	.word	0x03d10261
   1edf0:	032603d1 	.word	0x032603d1
   1edf4:	03d103d1 	.word	0x03d103d1
   1edf8:	03d103d1 	.word	0x03d103d1
   1edfc:	03d103d1 	.word	0x03d103d1
   1ee00:	03d103d1 	.word	0x03d103d1
   1ee04:	03d103d1 	.word	0x03d103d1
   1ee08:	02e302ce 	.word	0x02e302ce
   1ee0c:	035f035f 	.word	0x035f035f
   1ee10:	0293035f 	.word	0x0293035f
   1ee14:	03d102e3 	.word	0x03d102e3
   1ee18:	029803d1 	.word	0x029803d1
   1ee1c:	02a503d1 	.word	0x02a503d1
   1ee20:	02bc01d3 	.word	0x02bc01d3
   1ee24:	03d1020f 	.word	0x03d1020f
   1ee28:	03d101e8 	.word	0x03d101e8
   1ee2c:	03d1007e 	.word	0x03d1007e
   1ee30:	021403d1 	.word	0x021403d1
   1ee34:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ee36:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee38:	4240      	negs	r0, r0
   1ee3a:	9009      	str	r0, [sp, #36]	; 0x24
   1ee3c:	f04b 0b04 	orr.w	fp, fp, #4
   1ee40:	f89a 3000 	ldrb.w	r3, [sl]
   1ee44:	e794      	b.n	1ed70 <_svfprintf_r+0xb0>
   1ee46:	aa23      	add	r2, sp, #140	; 0x8c
   1ee48:	9907      	ldr	r1, [sp, #28]
   1ee4a:	9808      	ldr	r0, [sp, #32]
   1ee4c:	f003 f8ea 	bl	22024 <__ssprint_r>
   1ee50:	b940      	cbnz	r0, 1ee64 <_svfprintf_r+0x1a4>
   1ee52:	46c8      	mov	r8, r9
   1ee54:	e779      	b.n	1ed4a <_svfprintf_r+0x8a>
   1ee56:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ee58:	b123      	cbz	r3, 1ee64 <_svfprintf_r+0x1a4>
   1ee5a:	9808      	ldr	r0, [sp, #32]
   1ee5c:	9907      	ldr	r1, [sp, #28]
   1ee5e:	aa23      	add	r2, sp, #140	; 0x8c
   1ee60:	f003 f8e0 	bl	22024 <__ssprint_r>
   1ee64:	9b07      	ldr	r3, [sp, #28]
   1ee66:	899b      	ldrh	r3, [r3, #12]
   1ee68:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ee6c:	9b05      	ldr	r3, [sp, #20]
   1ee6e:	bf18      	it	ne
   1ee70:	f04f 33ff 	movne.w	r3, #4294967295
   1ee74:	9305      	str	r3, [sp, #20]
   1ee76:	9805      	ldr	r0, [sp, #20]
   1ee78:	b041      	add	sp, #260	; 0x104
   1ee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee7e:	f01b 0f20 	tst.w	fp, #32
   1ee82:	930d      	str	r3, [sp, #52]	; 0x34
   1ee84:	f040 81e5 	bne.w	1f252 <_svfprintf_r+0x592>
   1ee88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ee8a:	f01b 0f10 	tst.w	fp, #16
   1ee8e:	4613      	mov	r3, r2
   1ee90:	f040 8588 	bne.w	1f9a4 <_svfprintf_r+0xce4>
   1ee94:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1ee98:	f000 8584 	beq.w	1f9a4 <_svfprintf_r+0xce4>
   1ee9c:	8814      	ldrh	r4, [r2, #0]
   1ee9e:	3204      	adds	r2, #4
   1eea0:	2500      	movs	r5, #0
   1eea2:	2301      	movs	r3, #1
   1eea4:	920b      	str	r2, [sp, #44]	; 0x2c
   1eea6:	2700      	movs	r7, #0
   1eea8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1eeac:	9906      	ldr	r1, [sp, #24]
   1eeae:	1c4a      	adds	r2, r1, #1
   1eeb0:	f000 826d 	beq.w	1f38e <_svfprintf_r+0x6ce>
   1eeb4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1eeb8:	9203      	str	r2, [sp, #12]
   1eeba:	ea54 0205 	orrs.w	r2, r4, r5
   1eebe:	f040 826c 	bne.w	1f39a <_svfprintf_r+0x6da>
   1eec2:	2900      	cmp	r1, #0
   1eec4:	f040 8451 	bne.w	1f76a <_svfprintf_r+0xaaa>
   1eec8:	2b00      	cmp	r3, #0
   1eeca:	f040 850b 	bne.w	1f8e4 <_svfprintf_r+0xc24>
   1eece:	f01b 0301 	ands.w	r3, fp, #1
   1eed2:	930a      	str	r3, [sp, #40]	; 0x28
   1eed4:	f000 861a 	beq.w	1fb0c <_svfprintf_r+0xe4c>
   1eed8:	ae40      	add	r6, sp, #256	; 0x100
   1eeda:	2330      	movs	r3, #48	; 0x30
   1eedc:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1eee0:	9b06      	ldr	r3, [sp, #24]
   1eee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1eee4:	4293      	cmp	r3, r2
   1eee6:	bfb8      	it	lt
   1eee8:	4613      	movlt	r3, r2
   1eeea:	9304      	str	r3, [sp, #16]
   1eeec:	2300      	movs	r3, #0
   1eeee:	930e      	str	r3, [sp, #56]	; 0x38
   1eef0:	b117      	cbz	r7, 1eef8 <_svfprintf_r+0x238>
   1eef2:	9b04      	ldr	r3, [sp, #16]
   1eef4:	3301      	adds	r3, #1
   1eef6:	9304      	str	r3, [sp, #16]
   1eef8:	9b03      	ldr	r3, [sp, #12]
   1eefa:	f013 0302 	ands.w	r3, r3, #2
   1eefe:	930c      	str	r3, [sp, #48]	; 0x30
   1ef00:	d002      	beq.n	1ef08 <_svfprintf_r+0x248>
   1ef02:	9b04      	ldr	r3, [sp, #16]
   1ef04:	3302      	adds	r3, #2
   1ef06:	9304      	str	r3, [sp, #16]
   1ef08:	9b03      	ldr	r3, [sp, #12]
   1ef0a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1ef0e:	f040 8320 	bne.w	1f552 <_svfprintf_r+0x892>
   1ef12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ef14:	9a04      	ldr	r2, [sp, #16]
   1ef16:	eba3 0b02 	sub.w	fp, r3, r2
   1ef1a:	f1bb 0f00 	cmp.w	fp, #0
   1ef1e:	f340 8318 	ble.w	1f552 <_svfprintf_r+0x892>
   1ef22:	f1bb 0f10 	cmp.w	fp, #16
   1ef26:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ef28:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1ef2a:	dd30      	ble.n	1ef8e <_svfprintf_r+0x2ce>
   1ef2c:	4643      	mov	r3, r8
   1ef2e:	4621      	mov	r1, r4
   1ef30:	46a8      	mov	r8, r5
   1ef32:	2710      	movs	r7, #16
   1ef34:	9c08      	ldr	r4, [sp, #32]
   1ef36:	9d07      	ldr	r5, [sp, #28]
   1ef38:	e00d      	b.n	1ef56 <_svfprintf_r+0x296>
   1ef3a:	bf00      	nop
   1ef3c:	f3af 8000 	nop.w
	...
   1ef48:	f1ab 0b10 	sub.w	fp, fp, #16
   1ef4c:	f1bb 0f10 	cmp.w	fp, #16
   1ef50:	f103 0308 	add.w	r3, r3, #8
   1ef54:	dd18      	ble.n	1ef88 <_svfprintf_r+0x2c8>
   1ef56:	3201      	adds	r2, #1
   1ef58:	48b7      	ldr	r0, [pc, #732]	; (1f238 <_svfprintf_r+0x578>)
   1ef5a:	9224      	str	r2, [sp, #144]	; 0x90
   1ef5c:	3110      	adds	r1, #16
   1ef5e:	2a07      	cmp	r2, #7
   1ef60:	9125      	str	r1, [sp, #148]	; 0x94
   1ef62:	e883 0081 	stmia.w	r3, {r0, r7}
   1ef66:	ddef      	ble.n	1ef48 <_svfprintf_r+0x288>
   1ef68:	aa23      	add	r2, sp, #140	; 0x8c
   1ef6a:	4629      	mov	r1, r5
   1ef6c:	4620      	mov	r0, r4
   1ef6e:	f003 f859 	bl	22024 <__ssprint_r>
   1ef72:	2800      	cmp	r0, #0
   1ef74:	f47f af76 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1ef78:	f1ab 0b10 	sub.w	fp, fp, #16
   1ef7c:	f1bb 0f10 	cmp.w	fp, #16
   1ef80:	9925      	ldr	r1, [sp, #148]	; 0x94
   1ef82:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1ef84:	464b      	mov	r3, r9
   1ef86:	dce6      	bgt.n	1ef56 <_svfprintf_r+0x296>
   1ef88:	4645      	mov	r5, r8
   1ef8a:	460c      	mov	r4, r1
   1ef8c:	4698      	mov	r8, r3
   1ef8e:	3201      	adds	r2, #1
   1ef90:	4ba9      	ldr	r3, [pc, #676]	; (1f238 <_svfprintf_r+0x578>)
   1ef92:	9224      	str	r2, [sp, #144]	; 0x90
   1ef94:	445c      	add	r4, fp
   1ef96:	2a07      	cmp	r2, #7
   1ef98:	9425      	str	r4, [sp, #148]	; 0x94
   1ef9a:	e888 0808 	stmia.w	r8, {r3, fp}
   1ef9e:	f300 84a6 	bgt.w	1f8ee <_svfprintf_r+0xc2e>
   1efa2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1efa6:	f108 0808 	add.w	r8, r8, #8
   1efaa:	b177      	cbz	r7, 1efca <_svfprintf_r+0x30a>
   1efac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1efae:	3301      	adds	r3, #1
   1efb0:	3401      	adds	r4, #1
   1efb2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1efb6:	2201      	movs	r2, #1
   1efb8:	2b07      	cmp	r3, #7
   1efba:	9425      	str	r4, [sp, #148]	; 0x94
   1efbc:	9324      	str	r3, [sp, #144]	; 0x90
   1efbe:	e888 0006 	stmia.w	r8, {r1, r2}
   1efc2:	f300 83f4 	bgt.w	1f7ae <_svfprintf_r+0xaee>
   1efc6:	f108 0808 	add.w	r8, r8, #8
   1efca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1efcc:	b16b      	cbz	r3, 1efea <_svfprintf_r+0x32a>
   1efce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1efd0:	3301      	adds	r3, #1
   1efd2:	3402      	adds	r4, #2
   1efd4:	a91c      	add	r1, sp, #112	; 0x70
   1efd6:	2202      	movs	r2, #2
   1efd8:	2b07      	cmp	r3, #7
   1efda:	9425      	str	r4, [sp, #148]	; 0x94
   1efdc:	9324      	str	r3, [sp, #144]	; 0x90
   1efde:	e888 0006 	stmia.w	r8, {r1, r2}
   1efe2:	f300 83d9 	bgt.w	1f798 <_svfprintf_r+0xad8>
   1efe6:	f108 0808 	add.w	r8, r8, #8
   1efea:	2d80      	cmp	r5, #128	; 0x80
   1efec:	f000 8322 	beq.w	1f634 <_svfprintf_r+0x974>
   1eff0:	9b06      	ldr	r3, [sp, #24]
   1eff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1eff4:	1a9f      	subs	r7, r3, r2
   1eff6:	2f00      	cmp	r7, #0
   1eff8:	dd36      	ble.n	1f068 <_svfprintf_r+0x3a8>
   1effa:	2f10      	cmp	r7, #16
   1effc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1effe:	4d8f      	ldr	r5, [pc, #572]	; (1f23c <_svfprintf_r+0x57c>)
   1f000:	dd27      	ble.n	1f052 <_svfprintf_r+0x392>
   1f002:	4642      	mov	r2, r8
   1f004:	4621      	mov	r1, r4
   1f006:	46b0      	mov	r8, r6
   1f008:	f04f 0b10 	mov.w	fp, #16
   1f00c:	462e      	mov	r6, r5
   1f00e:	9c08      	ldr	r4, [sp, #32]
   1f010:	9d07      	ldr	r5, [sp, #28]
   1f012:	e004      	b.n	1f01e <_svfprintf_r+0x35e>
   1f014:	3f10      	subs	r7, #16
   1f016:	2f10      	cmp	r7, #16
   1f018:	f102 0208 	add.w	r2, r2, #8
   1f01c:	dd15      	ble.n	1f04a <_svfprintf_r+0x38a>
   1f01e:	3301      	adds	r3, #1
   1f020:	3110      	adds	r1, #16
   1f022:	2b07      	cmp	r3, #7
   1f024:	9125      	str	r1, [sp, #148]	; 0x94
   1f026:	9324      	str	r3, [sp, #144]	; 0x90
   1f028:	e882 0840 	stmia.w	r2, {r6, fp}
   1f02c:	ddf2      	ble.n	1f014 <_svfprintf_r+0x354>
   1f02e:	aa23      	add	r2, sp, #140	; 0x8c
   1f030:	4629      	mov	r1, r5
   1f032:	4620      	mov	r0, r4
   1f034:	f002 fff6 	bl	22024 <__ssprint_r>
   1f038:	2800      	cmp	r0, #0
   1f03a:	f47f af13 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f03e:	3f10      	subs	r7, #16
   1f040:	2f10      	cmp	r7, #16
   1f042:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f044:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f046:	464a      	mov	r2, r9
   1f048:	dce9      	bgt.n	1f01e <_svfprintf_r+0x35e>
   1f04a:	4635      	mov	r5, r6
   1f04c:	460c      	mov	r4, r1
   1f04e:	4646      	mov	r6, r8
   1f050:	4690      	mov	r8, r2
   1f052:	3301      	adds	r3, #1
   1f054:	443c      	add	r4, r7
   1f056:	2b07      	cmp	r3, #7
   1f058:	9425      	str	r4, [sp, #148]	; 0x94
   1f05a:	9324      	str	r3, [sp, #144]	; 0x90
   1f05c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f060:	f300 838f 	bgt.w	1f782 <_svfprintf_r+0xac2>
   1f064:	f108 0808 	add.w	r8, r8, #8
   1f068:	9b03      	ldr	r3, [sp, #12]
   1f06a:	05df      	lsls	r7, r3, #23
   1f06c:	f100 8273 	bmi.w	1f556 <_svfprintf_r+0x896>
   1f070:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f072:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f074:	f8c8 6000 	str.w	r6, [r8]
   1f078:	3301      	adds	r3, #1
   1f07a:	440c      	add	r4, r1
   1f07c:	2b07      	cmp	r3, #7
   1f07e:	9425      	str	r4, [sp, #148]	; 0x94
   1f080:	f8c8 1004 	str.w	r1, [r8, #4]
   1f084:	9324      	str	r3, [sp, #144]	; 0x90
   1f086:	f300 835b 	bgt.w	1f740 <_svfprintf_r+0xa80>
   1f08a:	f108 0808 	add.w	r8, r8, #8
   1f08e:	9b03      	ldr	r3, [sp, #12]
   1f090:	075b      	lsls	r3, r3, #29
   1f092:	d53a      	bpl.n	1f10a <_svfprintf_r+0x44a>
   1f094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f096:	9a04      	ldr	r2, [sp, #16]
   1f098:	1a9d      	subs	r5, r3, r2
   1f09a:	2d00      	cmp	r5, #0
   1f09c:	dd35      	ble.n	1f10a <_svfprintf_r+0x44a>
   1f09e:	2d10      	cmp	r5, #16
   1f0a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f0a2:	dd20      	ble.n	1f0e6 <_svfprintf_r+0x426>
   1f0a4:	2610      	movs	r6, #16
   1f0a6:	9f08      	ldr	r7, [sp, #32]
   1f0a8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f0ac:	e004      	b.n	1f0b8 <_svfprintf_r+0x3f8>
   1f0ae:	3d10      	subs	r5, #16
   1f0b0:	2d10      	cmp	r5, #16
   1f0b2:	f108 0808 	add.w	r8, r8, #8
   1f0b6:	dd16      	ble.n	1f0e6 <_svfprintf_r+0x426>
   1f0b8:	3301      	adds	r3, #1
   1f0ba:	4a5f      	ldr	r2, [pc, #380]	; (1f238 <_svfprintf_r+0x578>)
   1f0bc:	9324      	str	r3, [sp, #144]	; 0x90
   1f0be:	3410      	adds	r4, #16
   1f0c0:	2b07      	cmp	r3, #7
   1f0c2:	9425      	str	r4, [sp, #148]	; 0x94
   1f0c4:	e888 0044 	stmia.w	r8, {r2, r6}
   1f0c8:	ddf1      	ble.n	1f0ae <_svfprintf_r+0x3ee>
   1f0ca:	aa23      	add	r2, sp, #140	; 0x8c
   1f0cc:	4659      	mov	r1, fp
   1f0ce:	4638      	mov	r0, r7
   1f0d0:	f002 ffa8 	bl	22024 <__ssprint_r>
   1f0d4:	2800      	cmp	r0, #0
   1f0d6:	f47f aec5 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f0da:	3d10      	subs	r5, #16
   1f0dc:	2d10      	cmp	r5, #16
   1f0de:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f0e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f0e2:	46c8      	mov	r8, r9
   1f0e4:	dce8      	bgt.n	1f0b8 <_svfprintf_r+0x3f8>
   1f0e6:	3301      	adds	r3, #1
   1f0e8:	4a53      	ldr	r2, [pc, #332]	; (1f238 <_svfprintf_r+0x578>)
   1f0ea:	9324      	str	r3, [sp, #144]	; 0x90
   1f0ec:	442c      	add	r4, r5
   1f0ee:	2b07      	cmp	r3, #7
   1f0f0:	9425      	str	r4, [sp, #148]	; 0x94
   1f0f2:	e888 0024 	stmia.w	r8, {r2, r5}
   1f0f6:	dd08      	ble.n	1f10a <_svfprintf_r+0x44a>
   1f0f8:	aa23      	add	r2, sp, #140	; 0x8c
   1f0fa:	9907      	ldr	r1, [sp, #28]
   1f0fc:	9808      	ldr	r0, [sp, #32]
   1f0fe:	f002 ff91 	bl	22024 <__ssprint_r>
   1f102:	2800      	cmp	r0, #0
   1f104:	f47f aeae 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f108:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f10a:	9b05      	ldr	r3, [sp, #20]
   1f10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f10e:	9904      	ldr	r1, [sp, #16]
   1f110:	428a      	cmp	r2, r1
   1f112:	bfac      	ite	ge
   1f114:	189b      	addge	r3, r3, r2
   1f116:	185b      	addlt	r3, r3, r1
   1f118:	9305      	str	r3, [sp, #20]
   1f11a:	2c00      	cmp	r4, #0
   1f11c:	f040 831b 	bne.w	1f756 <_svfprintf_r+0xa96>
   1f120:	2300      	movs	r3, #0
   1f122:	9324      	str	r3, [sp, #144]	; 0x90
   1f124:	46c8      	mov	r8, r9
   1f126:	e5f2      	b.n	1ed0e <_svfprintf_r+0x4e>
   1f128:	930d      	str	r3, [sp, #52]	; 0x34
   1f12a:	f01b 0320 	ands.w	r3, fp, #32
   1f12e:	f040 81de 	bne.w	1f4ee <_svfprintf_r+0x82e>
   1f132:	f01b 0210 	ands.w	r2, fp, #16
   1f136:	f040 842d 	bne.w	1f994 <_svfprintf_r+0xcd4>
   1f13a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f13e:	f000 8429 	beq.w	1f994 <_svfprintf_r+0xcd4>
   1f142:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f144:	4613      	mov	r3, r2
   1f146:	460a      	mov	r2, r1
   1f148:	3204      	adds	r2, #4
   1f14a:	880c      	ldrh	r4, [r1, #0]
   1f14c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f14e:	2500      	movs	r5, #0
   1f150:	e6a9      	b.n	1eea6 <_svfprintf_r+0x1e6>
   1f152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f154:	930d      	str	r3, [sp, #52]	; 0x34
   1f156:	6816      	ldr	r6, [r2, #0]
   1f158:	2400      	movs	r4, #0
   1f15a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f15e:	1d15      	adds	r5, r2, #4
   1f160:	2e00      	cmp	r6, #0
   1f162:	f000 86b5 	beq.w	1fed0 <_svfprintf_r+0x1210>
   1f166:	9a06      	ldr	r2, [sp, #24]
   1f168:	1c53      	adds	r3, r2, #1
   1f16a:	f000 8617 	beq.w	1fd9c <_svfprintf_r+0x10dc>
   1f16e:	4621      	mov	r1, r4
   1f170:	4630      	mov	r0, r6
   1f172:	f7fe ff15 	bl	1dfa0 <memchr>
   1f176:	2800      	cmp	r0, #0
   1f178:	f000 8708 	beq.w	1ff8c <_svfprintf_r+0x12cc>
   1f17c:	1b83      	subs	r3, r0, r6
   1f17e:	930a      	str	r3, [sp, #40]	; 0x28
   1f180:	9406      	str	r4, [sp, #24]
   1f182:	950b      	str	r5, [sp, #44]	; 0x2c
   1f184:	f8cd b00c 	str.w	fp, [sp, #12]
   1f188:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f18c:	9304      	str	r3, [sp, #16]
   1f18e:	940e      	str	r4, [sp, #56]	; 0x38
   1f190:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f194:	e6ac      	b.n	1eef0 <_svfprintf_r+0x230>
   1f196:	f89a 3000 	ldrb.w	r3, [sl]
   1f19a:	2201      	movs	r2, #1
   1f19c:	212b      	movs	r1, #43	; 0x2b
   1f19e:	e5e7      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f1a0:	f04b 0b20 	orr.w	fp, fp, #32
   1f1a4:	f89a 3000 	ldrb.w	r3, [sl]
   1f1a8:	e5e2      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f1aa:	930d      	str	r3, [sp, #52]	; 0x34
   1f1ac:	2a00      	cmp	r2, #0
   1f1ae:	f040 87aa 	bne.w	20106 <_svfprintf_r+0x1446>
   1f1b2:	4b23      	ldr	r3, [pc, #140]	; (1f240 <_svfprintf_r+0x580>)
   1f1b4:	9312      	str	r3, [sp, #72]	; 0x48
   1f1b6:	f01b 0f20 	tst.w	fp, #32
   1f1ba:	f040 8112 	bne.w	1f3e2 <_svfprintf_r+0x722>
   1f1be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f1c0:	f01b 0f10 	tst.w	fp, #16
   1f1c4:	4613      	mov	r3, r2
   1f1c6:	f040 83e0 	bne.w	1f98a <_svfprintf_r+0xcca>
   1f1ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f1ce:	f000 83dc 	beq.w	1f98a <_svfprintf_r+0xcca>
   1f1d2:	3304      	adds	r3, #4
   1f1d4:	8814      	ldrh	r4, [r2, #0]
   1f1d6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f1d8:	2500      	movs	r5, #0
   1f1da:	f01b 0f01 	tst.w	fp, #1
   1f1de:	f000 810d 	beq.w	1f3fc <_svfprintf_r+0x73c>
   1f1e2:	ea54 0305 	orrs.w	r3, r4, r5
   1f1e6:	f000 8109 	beq.w	1f3fc <_svfprintf_r+0x73c>
   1f1ea:	2330      	movs	r3, #48	; 0x30
   1f1ec:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f1f0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f1f4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f1f8:	f04b 0b02 	orr.w	fp, fp, #2
   1f1fc:	2302      	movs	r3, #2
   1f1fe:	e652      	b.n	1eea6 <_svfprintf_r+0x1e6>
   1f200:	f89a 3000 	ldrb.w	r3, [sl]
   1f204:	2900      	cmp	r1, #0
   1f206:	f47f adb3 	bne.w	1ed70 <_svfprintf_r+0xb0>
   1f20a:	2201      	movs	r2, #1
   1f20c:	2120      	movs	r1, #32
   1f20e:	e5af      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f210:	f04b 0b01 	orr.w	fp, fp, #1
   1f214:	f89a 3000 	ldrb.w	r3, [sl]
   1f218:	e5aa      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f21a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f21c:	6823      	ldr	r3, [r4, #0]
   1f21e:	9309      	str	r3, [sp, #36]	; 0x24
   1f220:	4618      	mov	r0, r3
   1f222:	2800      	cmp	r0, #0
   1f224:	4623      	mov	r3, r4
   1f226:	f103 0304 	add.w	r3, r3, #4
   1f22a:	f6ff ae03 	blt.w	1ee34 <_svfprintf_r+0x174>
   1f22e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f230:	f89a 3000 	ldrb.w	r3, [sl]
   1f234:	e59c      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f236:	bf00      	nop
   1f238:	00024a3c 	.word	0x00024a3c
   1f23c:	00024a4c 	.word	0x00024a4c
   1f240:	00024a1c 	.word	0x00024a1c
   1f244:	f04b 0b10 	orr.w	fp, fp, #16
   1f248:	f01b 0f20 	tst.w	fp, #32
   1f24c:	930d      	str	r3, [sp, #52]	; 0x34
   1f24e:	f43f ae1b 	beq.w	1ee88 <_svfprintf_r+0x1c8>
   1f252:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f254:	3507      	adds	r5, #7
   1f256:	f025 0307 	bic.w	r3, r5, #7
   1f25a:	f103 0208 	add.w	r2, r3, #8
   1f25e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f262:	920b      	str	r2, [sp, #44]	; 0x2c
   1f264:	2301      	movs	r3, #1
   1f266:	e61e      	b.n	1eea6 <_svfprintf_r+0x1e6>
   1f268:	f89a 3000 	ldrb.w	r3, [sl]
   1f26c:	2b2a      	cmp	r3, #42	; 0x2a
   1f26e:	f10a 0401 	add.w	r4, sl, #1
   1f272:	f000 873b 	beq.w	200ec <_svfprintf_r+0x142c>
   1f276:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f27a:	2809      	cmp	r0, #9
   1f27c:	46a2      	mov	sl, r4
   1f27e:	f200 8691 	bhi.w	1ffa4 <_svfprintf_r+0x12e4>
   1f282:	2300      	movs	r3, #0
   1f284:	461c      	mov	r4, r3
   1f286:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f28a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f28e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f292:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f296:	2809      	cmp	r0, #9
   1f298:	d9f5      	bls.n	1f286 <_svfprintf_r+0x5c6>
   1f29a:	9406      	str	r4, [sp, #24]
   1f29c:	e56a      	b.n	1ed74 <_svfprintf_r+0xb4>
   1f29e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f2a2:	f89a 3000 	ldrb.w	r3, [sl]
   1f2a6:	e563      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f2a8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f2ac:	f89a 3000 	ldrb.w	r3, [sl]
   1f2b0:	e55e      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f2b2:	f89a 3000 	ldrb.w	r3, [sl]
   1f2b6:	2b6c      	cmp	r3, #108	; 0x6c
   1f2b8:	bf03      	ittte	eq
   1f2ba:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f2be:	f04b 0b20 	orreq.w	fp, fp, #32
   1f2c2:	f10a 0a01 	addeq.w	sl, sl, #1
   1f2c6:	f04b 0b10 	orrne.w	fp, fp, #16
   1f2ca:	e551      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f2cc:	2a00      	cmp	r2, #0
   1f2ce:	f040 871e 	bne.w	2010e <_svfprintf_r+0x144e>
   1f2d2:	f01b 0f20 	tst.w	fp, #32
   1f2d6:	f040 8509 	bne.w	1fcec <_svfprintf_r+0x102c>
   1f2da:	f01b 0f10 	tst.w	fp, #16
   1f2de:	f040 84bc 	bne.w	1fc5a <_svfprintf_r+0xf9a>
   1f2e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f2e6:	f000 84b8 	beq.w	1fc5a <_svfprintf_r+0xf9a>
   1f2ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f2ec:	6813      	ldr	r3, [r2, #0]
   1f2ee:	3204      	adds	r2, #4
   1f2f0:	920b      	str	r2, [sp, #44]	; 0x2c
   1f2f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f2f6:	801a      	strh	r2, [r3, #0]
   1f2f8:	e509      	b.n	1ed0e <_svfprintf_r+0x4e>
   1f2fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f2fc:	4bb9      	ldr	r3, [pc, #740]	; (1f5e4 <_svfprintf_r+0x924>)
   1f2fe:	680c      	ldr	r4, [r1, #0]
   1f300:	9312      	str	r3, [sp, #72]	; 0x48
   1f302:	2230      	movs	r2, #48	; 0x30
   1f304:	2378      	movs	r3, #120	; 0x78
   1f306:	3104      	adds	r1, #4
   1f308:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f30c:	930d      	str	r3, [sp, #52]	; 0x34
   1f30e:	f04b 0b02 	orr.w	fp, fp, #2
   1f312:	910b      	str	r1, [sp, #44]	; 0x2c
   1f314:	2500      	movs	r5, #0
   1f316:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f31a:	2302      	movs	r3, #2
   1f31c:	e5c3      	b.n	1eea6 <_svfprintf_r+0x1e6>
   1f31e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f320:	930d      	str	r3, [sp, #52]	; 0x34
   1f322:	680a      	ldr	r2, [r1, #0]
   1f324:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f328:	2300      	movs	r3, #0
   1f32a:	460a      	mov	r2, r1
   1f32c:	461f      	mov	r7, r3
   1f32e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f332:	3204      	adds	r2, #4
   1f334:	2301      	movs	r3, #1
   1f336:	9304      	str	r3, [sp, #16]
   1f338:	f8cd b00c 	str.w	fp, [sp, #12]
   1f33c:	9706      	str	r7, [sp, #24]
   1f33e:	970e      	str	r7, [sp, #56]	; 0x38
   1f340:	920b      	str	r2, [sp, #44]	; 0x2c
   1f342:	930a      	str	r3, [sp, #40]	; 0x28
   1f344:	ae26      	add	r6, sp, #152	; 0x98
   1f346:	e5d7      	b.n	1eef8 <_svfprintf_r+0x238>
   1f348:	930d      	str	r3, [sp, #52]	; 0x34
   1f34a:	2a00      	cmp	r2, #0
   1f34c:	f040 86fe 	bne.w	2014c <_svfprintf_r+0x148c>
   1f350:	f01b 0f20 	tst.w	fp, #32
   1f354:	d15d      	bne.n	1f412 <_svfprintf_r+0x752>
   1f356:	f01b 0f10 	tst.w	fp, #16
   1f35a:	f040 8335 	bne.w	1f9c8 <_svfprintf_r+0xd08>
   1f35e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f362:	f000 8331 	beq.w	1f9c8 <_svfprintf_r+0xd08>
   1f366:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f368:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f36c:	3104      	adds	r1, #4
   1f36e:	17e5      	asrs	r5, r4, #31
   1f370:	4622      	mov	r2, r4
   1f372:	462b      	mov	r3, r5
   1f374:	910b      	str	r1, [sp, #44]	; 0x2c
   1f376:	2a00      	cmp	r2, #0
   1f378:	f173 0300 	sbcs.w	r3, r3, #0
   1f37c:	db58      	blt.n	1f430 <_svfprintf_r+0x770>
   1f37e:	9906      	ldr	r1, [sp, #24]
   1f380:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f384:	1c4a      	adds	r2, r1, #1
   1f386:	f04f 0301 	mov.w	r3, #1
   1f38a:	f47f ad93 	bne.w	1eeb4 <_svfprintf_r+0x1f4>
   1f38e:	ea54 0205 	orrs.w	r2, r4, r5
   1f392:	f000 81ec 	beq.w	1f76e <_svfprintf_r+0xaae>
   1f396:	f8cd b00c 	str.w	fp, [sp, #12]
   1f39a:	2b01      	cmp	r3, #1
   1f39c:	f000 8283 	beq.w	1f8a6 <_svfprintf_r+0xbe6>
   1f3a0:	2b02      	cmp	r3, #2
   1f3a2:	f040 8213 	bne.w	1f7cc <_svfprintf_r+0xb0c>
   1f3a6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f3a8:	464e      	mov	r6, r9
   1f3aa:	0923      	lsrs	r3, r4, #4
   1f3ac:	f004 010f 	and.w	r1, r4, #15
   1f3b0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f3b4:	092a      	lsrs	r2, r5, #4
   1f3b6:	461c      	mov	r4, r3
   1f3b8:	4615      	mov	r5, r2
   1f3ba:	5c43      	ldrb	r3, [r0, r1]
   1f3bc:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f3c0:	ea54 0305 	orrs.w	r3, r4, r5
   1f3c4:	d1f1      	bne.n	1f3aa <_svfprintf_r+0x6ea>
   1f3c6:	eba9 0306 	sub.w	r3, r9, r6
   1f3ca:	930a      	str	r3, [sp, #40]	; 0x28
   1f3cc:	e588      	b.n	1eee0 <_svfprintf_r+0x220>
   1f3ce:	930d      	str	r3, [sp, #52]	; 0x34
   1f3d0:	2a00      	cmp	r2, #0
   1f3d2:	f040 86b7 	bne.w	20144 <_svfprintf_r+0x1484>
   1f3d6:	4b84      	ldr	r3, [pc, #528]	; (1f5e8 <_svfprintf_r+0x928>)
   1f3d8:	9312      	str	r3, [sp, #72]	; 0x48
   1f3da:	f01b 0f20 	tst.w	fp, #32
   1f3de:	f43f aeee 	beq.w	1f1be <_svfprintf_r+0x4fe>
   1f3e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f3e4:	3507      	adds	r5, #7
   1f3e6:	f025 0307 	bic.w	r3, r5, #7
   1f3ea:	f103 0208 	add.w	r2, r3, #8
   1f3ee:	f01b 0f01 	tst.w	fp, #1
   1f3f2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f3f4:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f3f8:	f47f aef3 	bne.w	1f1e2 <_svfprintf_r+0x522>
   1f3fc:	2302      	movs	r3, #2
   1f3fe:	e552      	b.n	1eea6 <_svfprintf_r+0x1e6>
   1f400:	930d      	str	r3, [sp, #52]	; 0x34
   1f402:	2a00      	cmp	r2, #0
   1f404:	f040 869a 	bne.w	2013c <_svfprintf_r+0x147c>
   1f408:	f04b 0b10 	orr.w	fp, fp, #16
   1f40c:	f01b 0f20 	tst.w	fp, #32
   1f410:	d0a1      	beq.n	1f356 <_svfprintf_r+0x696>
   1f412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f414:	3507      	adds	r5, #7
   1f416:	f025 0507 	bic.w	r5, r5, #7
   1f41a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f41e:	2a00      	cmp	r2, #0
   1f420:	f105 0108 	add.w	r1, r5, #8
   1f424:	461d      	mov	r5, r3
   1f426:	f173 0300 	sbcs.w	r3, r3, #0
   1f42a:	910b      	str	r1, [sp, #44]	; 0x2c
   1f42c:	4614      	mov	r4, r2
   1f42e:	daa6      	bge.n	1f37e <_svfprintf_r+0x6be>
   1f430:	272d      	movs	r7, #45	; 0x2d
   1f432:	4264      	negs	r4, r4
   1f434:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f438:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f43c:	2301      	movs	r3, #1
   1f43e:	e535      	b.n	1eeac <_svfprintf_r+0x1ec>
   1f440:	930d      	str	r3, [sp, #52]	; 0x34
   1f442:	2a00      	cmp	r2, #0
   1f444:	f040 8676 	bne.w	20134 <_svfprintf_r+0x1474>
   1f448:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f44a:	f01b 0f08 	tst.w	fp, #8
   1f44e:	f105 0507 	add.w	r5, r5, #7
   1f452:	f000 83e8 	beq.w	1fc26 <_svfprintf_r+0xf66>
   1f456:	f025 0307 	bic.w	r3, r5, #7
   1f45a:	ed93 7b00 	vldr	d7, [r3]
   1f45e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f462:	f103 0208 	add.w	r2, r3, #8
   1f466:	920b      	str	r2, [sp, #44]	; 0x2c
   1f468:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f46c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f470:	9116      	str	r1, [sp, #88]	; 0x58
   1f472:	9317      	str	r3, [sp, #92]	; 0x5c
   1f474:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f478:	f04f 32ff 	mov.w	r2, #4294967295
   1f47c:	4620      	mov	r0, r4
   1f47e:	4629      	mov	r1, r5
   1f480:	4b5a      	ldr	r3, [pc, #360]	; (1f5ec <_svfprintf_r+0x92c>)
   1f482:	f002 ffa5 	bl	223d0 <__aeabi_dcmpun>
   1f486:	2800      	cmp	r0, #0
   1f488:	f040 834f 	bne.w	1fb2a <_svfprintf_r+0xe6a>
   1f48c:	f04f 32ff 	mov.w	r2, #4294967295
   1f490:	4b56      	ldr	r3, [pc, #344]	; (1f5ec <_svfprintf_r+0x92c>)
   1f492:	4620      	mov	r0, r4
   1f494:	4629      	mov	r1, r5
   1f496:	f7fc fcc5 	bl	1be24 <__aeabi_dcmple>
   1f49a:	2800      	cmp	r0, #0
   1f49c:	f040 8345 	bne.w	1fb2a <_svfprintf_r+0xe6a>
   1f4a0:	2200      	movs	r2, #0
   1f4a2:	2300      	movs	r3, #0
   1f4a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f4a8:	f7fc fcb2 	bl	1be10 <__aeabi_dcmplt>
   1f4ac:	2800      	cmp	r0, #0
   1f4ae:	f040 8533 	bne.w	1ff18 <_svfprintf_r+0x1258>
   1f4b2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f4b6:	4e4e      	ldr	r6, [pc, #312]	; (1f5f0 <_svfprintf_r+0x930>)
   1f4b8:	4b4e      	ldr	r3, [pc, #312]	; (1f5f4 <_svfprintf_r+0x934>)
   1f4ba:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f4be:	9003      	str	r0, [sp, #12]
   1f4c0:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f4c2:	2203      	movs	r2, #3
   1f4c4:	2100      	movs	r1, #0
   1f4c6:	9204      	str	r2, [sp, #16]
   1f4c8:	9106      	str	r1, [sp, #24]
   1f4ca:	2847      	cmp	r0, #71	; 0x47
   1f4cc:	bfd8      	it	le
   1f4ce:	461e      	movle	r6, r3
   1f4d0:	920a      	str	r2, [sp, #40]	; 0x28
   1f4d2:	910e      	str	r1, [sp, #56]	; 0x38
   1f4d4:	e50c      	b.n	1eef0 <_svfprintf_r+0x230>
   1f4d6:	f04b 0b08 	orr.w	fp, fp, #8
   1f4da:	f89a 3000 	ldrb.w	r3, [sl]
   1f4de:	e447      	b.n	1ed70 <_svfprintf_r+0xb0>
   1f4e0:	f04b 0b10 	orr.w	fp, fp, #16
   1f4e4:	930d      	str	r3, [sp, #52]	; 0x34
   1f4e6:	f01b 0320 	ands.w	r3, fp, #32
   1f4ea:	f43f ae22 	beq.w	1f132 <_svfprintf_r+0x472>
   1f4ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f4f0:	3507      	adds	r5, #7
   1f4f2:	f025 0307 	bic.w	r3, r5, #7
   1f4f6:	f103 0208 	add.w	r2, r3, #8
   1f4fa:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f4fe:	920b      	str	r2, [sp, #44]	; 0x2c
   1f500:	2300      	movs	r3, #0
   1f502:	e4d0      	b.n	1eea6 <_svfprintf_r+0x1e6>
   1f504:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f508:	2300      	movs	r3, #0
   1f50a:	461c      	mov	r4, r3
   1f50c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f510:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f514:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f518:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f51c:	2809      	cmp	r0, #9
   1f51e:	d9f5      	bls.n	1f50c <_svfprintf_r+0x84c>
   1f520:	9409      	str	r4, [sp, #36]	; 0x24
   1f522:	e427      	b.n	1ed74 <_svfprintf_r+0xb4>
   1f524:	930d      	str	r3, [sp, #52]	; 0x34
   1f526:	2a00      	cmp	r2, #0
   1f528:	f040 85f5 	bne.w	20116 <_svfprintf_r+0x1456>
   1f52c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f52e:	2a00      	cmp	r2, #0
   1f530:	f43f ac91 	beq.w	1ee56 <_svfprintf_r+0x196>
   1f534:	2300      	movs	r3, #0
   1f536:	2101      	movs	r1, #1
   1f538:	461f      	mov	r7, r3
   1f53a:	9104      	str	r1, [sp, #16]
   1f53c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f540:	f8cd b00c 	str.w	fp, [sp, #12]
   1f544:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f548:	9306      	str	r3, [sp, #24]
   1f54a:	930e      	str	r3, [sp, #56]	; 0x38
   1f54c:	910a      	str	r1, [sp, #40]	; 0x28
   1f54e:	ae26      	add	r6, sp, #152	; 0x98
   1f550:	e4d2      	b.n	1eef8 <_svfprintf_r+0x238>
   1f552:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f554:	e529      	b.n	1efaa <_svfprintf_r+0x2ea>
   1f556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f558:	2b65      	cmp	r3, #101	; 0x65
   1f55a:	f340 80a9 	ble.w	1f6b0 <_svfprintf_r+0x9f0>
   1f55e:	2200      	movs	r2, #0
   1f560:	2300      	movs	r3, #0
   1f562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f566:	f7fc fc49 	bl	1bdfc <__aeabi_dcmpeq>
   1f56a:	2800      	cmp	r0, #0
   1f56c:	f000 8152 	beq.w	1f814 <_svfprintf_r+0xb54>
   1f570:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f572:	4a21      	ldr	r2, [pc, #132]	; (1f5f8 <_svfprintf_r+0x938>)
   1f574:	f8c8 2000 	str.w	r2, [r8]
   1f578:	3301      	adds	r3, #1
   1f57a:	3401      	adds	r4, #1
   1f57c:	2201      	movs	r2, #1
   1f57e:	2b07      	cmp	r3, #7
   1f580:	9425      	str	r4, [sp, #148]	; 0x94
   1f582:	9324      	str	r3, [sp, #144]	; 0x90
   1f584:	f8c8 2004 	str.w	r2, [r8, #4]
   1f588:	f300 836f 	bgt.w	1fc6a <_svfprintf_r+0xfaa>
   1f58c:	f108 0808 	add.w	r8, r8, #8
   1f590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f594:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f596:	4293      	cmp	r3, r2
   1f598:	db03      	blt.n	1f5a2 <_svfprintf_r+0x8e2>
   1f59a:	9b03      	ldr	r3, [sp, #12]
   1f59c:	07dd      	lsls	r5, r3, #31
   1f59e:	f57f ad76 	bpl.w	1f08e <_svfprintf_r+0x3ce>
   1f5a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f5a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f5a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f5a8:	f8c8 2000 	str.w	r2, [r8]
   1f5ac:	3301      	adds	r3, #1
   1f5ae:	440c      	add	r4, r1
   1f5b0:	2b07      	cmp	r3, #7
   1f5b2:	f8c8 1004 	str.w	r1, [r8, #4]
   1f5b6:	9425      	str	r4, [sp, #148]	; 0x94
   1f5b8:	9324      	str	r3, [sp, #144]	; 0x90
   1f5ba:	f300 83a3 	bgt.w	1fd04 <_svfprintf_r+0x1044>
   1f5be:	f108 0808 	add.w	r8, r8, #8
   1f5c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f5c4:	1e5e      	subs	r6, r3, #1
   1f5c6:	2e00      	cmp	r6, #0
   1f5c8:	f77f ad61 	ble.w	1f08e <_svfprintf_r+0x3ce>
   1f5cc:	2e10      	cmp	r6, #16
   1f5ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f5d0:	4d0a      	ldr	r5, [pc, #40]	; (1f5fc <_svfprintf_r+0x93c>)
   1f5d2:	f340 81ef 	ble.w	1f9b4 <_svfprintf_r+0xcf4>
   1f5d6:	4622      	mov	r2, r4
   1f5d8:	2710      	movs	r7, #16
   1f5da:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f5de:	9c07      	ldr	r4, [sp, #28]
   1f5e0:	e014      	b.n	1f60c <_svfprintf_r+0x94c>
   1f5e2:	bf00      	nop
   1f5e4:	00024a1c 	.word	0x00024a1c
   1f5e8:	00024a08 	.word	0x00024a08
   1f5ec:	7fefffff 	.word	0x7fefffff
   1f5f0:	000249fc 	.word	0x000249fc
   1f5f4:	000249f8 	.word	0x000249f8
   1f5f8:	00024a38 	.word	0x00024a38
   1f5fc:	00024a4c 	.word	0x00024a4c
   1f600:	f108 0808 	add.w	r8, r8, #8
   1f604:	3e10      	subs	r6, #16
   1f606:	2e10      	cmp	r6, #16
   1f608:	f340 81d3 	ble.w	1f9b2 <_svfprintf_r+0xcf2>
   1f60c:	3301      	adds	r3, #1
   1f60e:	3210      	adds	r2, #16
   1f610:	2b07      	cmp	r3, #7
   1f612:	9225      	str	r2, [sp, #148]	; 0x94
   1f614:	9324      	str	r3, [sp, #144]	; 0x90
   1f616:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f61a:	ddf1      	ble.n	1f600 <_svfprintf_r+0x940>
   1f61c:	aa23      	add	r2, sp, #140	; 0x8c
   1f61e:	4621      	mov	r1, r4
   1f620:	4658      	mov	r0, fp
   1f622:	f002 fcff 	bl	22024 <__ssprint_r>
   1f626:	2800      	cmp	r0, #0
   1f628:	f47f ac1c 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f62c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f62e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f630:	46c8      	mov	r8, r9
   1f632:	e7e7      	b.n	1f604 <_svfprintf_r+0x944>
   1f634:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f636:	9a04      	ldr	r2, [sp, #16]
   1f638:	1a9f      	subs	r7, r3, r2
   1f63a:	2f00      	cmp	r7, #0
   1f63c:	f77f acd8 	ble.w	1eff0 <_svfprintf_r+0x330>
   1f640:	2f10      	cmp	r7, #16
   1f642:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f644:	4db7      	ldr	r5, [pc, #732]	; (1f924 <_svfprintf_r+0xc64>)
   1f646:	dd27      	ble.n	1f698 <_svfprintf_r+0x9d8>
   1f648:	4642      	mov	r2, r8
   1f64a:	4621      	mov	r1, r4
   1f64c:	46b0      	mov	r8, r6
   1f64e:	f04f 0b10 	mov.w	fp, #16
   1f652:	462e      	mov	r6, r5
   1f654:	9c08      	ldr	r4, [sp, #32]
   1f656:	9d07      	ldr	r5, [sp, #28]
   1f658:	e004      	b.n	1f664 <_svfprintf_r+0x9a4>
   1f65a:	3f10      	subs	r7, #16
   1f65c:	2f10      	cmp	r7, #16
   1f65e:	f102 0208 	add.w	r2, r2, #8
   1f662:	dd15      	ble.n	1f690 <_svfprintf_r+0x9d0>
   1f664:	3301      	adds	r3, #1
   1f666:	3110      	adds	r1, #16
   1f668:	2b07      	cmp	r3, #7
   1f66a:	9125      	str	r1, [sp, #148]	; 0x94
   1f66c:	9324      	str	r3, [sp, #144]	; 0x90
   1f66e:	e882 0840 	stmia.w	r2, {r6, fp}
   1f672:	ddf2      	ble.n	1f65a <_svfprintf_r+0x99a>
   1f674:	aa23      	add	r2, sp, #140	; 0x8c
   1f676:	4629      	mov	r1, r5
   1f678:	4620      	mov	r0, r4
   1f67a:	f002 fcd3 	bl	22024 <__ssprint_r>
   1f67e:	2800      	cmp	r0, #0
   1f680:	f47f abf0 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f684:	3f10      	subs	r7, #16
   1f686:	2f10      	cmp	r7, #16
   1f688:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f68a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f68c:	464a      	mov	r2, r9
   1f68e:	dce9      	bgt.n	1f664 <_svfprintf_r+0x9a4>
   1f690:	4635      	mov	r5, r6
   1f692:	460c      	mov	r4, r1
   1f694:	4646      	mov	r6, r8
   1f696:	4690      	mov	r8, r2
   1f698:	3301      	adds	r3, #1
   1f69a:	443c      	add	r4, r7
   1f69c:	2b07      	cmp	r3, #7
   1f69e:	9425      	str	r4, [sp, #148]	; 0x94
   1f6a0:	9324      	str	r3, [sp, #144]	; 0x90
   1f6a2:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f6a6:	f300 8234 	bgt.w	1fb12 <_svfprintf_r+0xe52>
   1f6aa:	f108 0808 	add.w	r8, r8, #8
   1f6ae:	e49f      	b.n	1eff0 <_svfprintf_r+0x330>
   1f6b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f6b2:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f6b4:	2b01      	cmp	r3, #1
   1f6b6:	f340 8200 	ble.w	1faba <_svfprintf_r+0xdfa>
   1f6ba:	3701      	adds	r7, #1
   1f6bc:	3401      	adds	r4, #1
   1f6be:	2301      	movs	r3, #1
   1f6c0:	2f07      	cmp	r7, #7
   1f6c2:	9425      	str	r4, [sp, #148]	; 0x94
   1f6c4:	9724      	str	r7, [sp, #144]	; 0x90
   1f6c6:	f8c8 6000 	str.w	r6, [r8]
   1f6ca:	f8c8 3004 	str.w	r3, [r8, #4]
   1f6ce:	f300 8205 	bgt.w	1fadc <_svfprintf_r+0xe1c>
   1f6d2:	f108 0808 	add.w	r8, r8, #8
   1f6d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f6d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f6da:	f8c8 3000 	str.w	r3, [r8]
   1f6de:	3701      	adds	r7, #1
   1f6e0:	4414      	add	r4, r2
   1f6e2:	2f07      	cmp	r7, #7
   1f6e4:	9425      	str	r4, [sp, #148]	; 0x94
   1f6e6:	9724      	str	r7, [sp, #144]	; 0x90
   1f6e8:	f8c8 2004 	str.w	r2, [r8, #4]
   1f6ec:	f300 8202 	bgt.w	1faf4 <_svfprintf_r+0xe34>
   1f6f0:	f108 0808 	add.w	r8, r8, #8
   1f6f4:	2300      	movs	r3, #0
   1f6f6:	2200      	movs	r2, #0
   1f6f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f6fc:	f7fc fb7e 	bl	1bdfc <__aeabi_dcmpeq>
   1f700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f702:	2800      	cmp	r0, #0
   1f704:	f040 8101 	bne.w	1f90a <_svfprintf_r+0xc4a>
   1f708:	3b01      	subs	r3, #1
   1f70a:	3701      	adds	r7, #1
   1f70c:	3601      	adds	r6, #1
   1f70e:	441c      	add	r4, r3
   1f710:	2f07      	cmp	r7, #7
   1f712:	9724      	str	r7, [sp, #144]	; 0x90
   1f714:	9425      	str	r4, [sp, #148]	; 0x94
   1f716:	f8c8 6000 	str.w	r6, [r8]
   1f71a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f71e:	f300 8128 	bgt.w	1f972 <_svfprintf_r+0xcb2>
   1f722:	f108 0808 	add.w	r8, r8, #8
   1f726:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f728:	f8c8 2004 	str.w	r2, [r8, #4]
   1f72c:	3701      	adds	r7, #1
   1f72e:	4414      	add	r4, r2
   1f730:	ab1f      	add	r3, sp, #124	; 0x7c
   1f732:	2f07      	cmp	r7, #7
   1f734:	9425      	str	r4, [sp, #148]	; 0x94
   1f736:	9724      	str	r7, [sp, #144]	; 0x90
   1f738:	f8c8 3000 	str.w	r3, [r8]
   1f73c:	f77f aca5 	ble.w	1f08a <_svfprintf_r+0x3ca>
   1f740:	aa23      	add	r2, sp, #140	; 0x8c
   1f742:	9907      	ldr	r1, [sp, #28]
   1f744:	9808      	ldr	r0, [sp, #32]
   1f746:	f002 fc6d 	bl	22024 <__ssprint_r>
   1f74a:	2800      	cmp	r0, #0
   1f74c:	f47f ab8a 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f750:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f752:	46c8      	mov	r8, r9
   1f754:	e49b      	b.n	1f08e <_svfprintf_r+0x3ce>
   1f756:	aa23      	add	r2, sp, #140	; 0x8c
   1f758:	9907      	ldr	r1, [sp, #28]
   1f75a:	9808      	ldr	r0, [sp, #32]
   1f75c:	f002 fc62 	bl	22024 <__ssprint_r>
   1f760:	2800      	cmp	r0, #0
   1f762:	f43f acdd 	beq.w	1f120 <_svfprintf_r+0x460>
   1f766:	f7ff bb7d 	b.w	1ee64 <_svfprintf_r+0x1a4>
   1f76a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f76e:	2b01      	cmp	r3, #1
   1f770:	f000 8135 	beq.w	1f9de <_svfprintf_r+0xd1e>
   1f774:	2b02      	cmp	r3, #2
   1f776:	d125      	bne.n	1f7c4 <_svfprintf_r+0xb04>
   1f778:	f8cd b00c 	str.w	fp, [sp, #12]
   1f77c:	2400      	movs	r4, #0
   1f77e:	2500      	movs	r5, #0
   1f780:	e611      	b.n	1f3a6 <_svfprintf_r+0x6e6>
   1f782:	aa23      	add	r2, sp, #140	; 0x8c
   1f784:	9907      	ldr	r1, [sp, #28]
   1f786:	9808      	ldr	r0, [sp, #32]
   1f788:	f002 fc4c 	bl	22024 <__ssprint_r>
   1f78c:	2800      	cmp	r0, #0
   1f78e:	f47f ab69 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f792:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f794:	46c8      	mov	r8, r9
   1f796:	e467      	b.n	1f068 <_svfprintf_r+0x3a8>
   1f798:	aa23      	add	r2, sp, #140	; 0x8c
   1f79a:	9907      	ldr	r1, [sp, #28]
   1f79c:	9808      	ldr	r0, [sp, #32]
   1f79e:	f002 fc41 	bl	22024 <__ssprint_r>
   1f7a2:	2800      	cmp	r0, #0
   1f7a4:	f47f ab5e 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f7a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f7aa:	46c8      	mov	r8, r9
   1f7ac:	e41d      	b.n	1efea <_svfprintf_r+0x32a>
   1f7ae:	aa23      	add	r2, sp, #140	; 0x8c
   1f7b0:	9907      	ldr	r1, [sp, #28]
   1f7b2:	9808      	ldr	r0, [sp, #32]
   1f7b4:	f002 fc36 	bl	22024 <__ssprint_r>
   1f7b8:	2800      	cmp	r0, #0
   1f7ba:	f47f ab53 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f7be:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f7c0:	46c8      	mov	r8, r9
   1f7c2:	e402      	b.n	1efca <_svfprintf_r+0x30a>
   1f7c4:	f8cd b00c 	str.w	fp, [sp, #12]
   1f7c8:	2400      	movs	r4, #0
   1f7ca:	2500      	movs	r5, #0
   1f7cc:	4649      	mov	r1, r9
   1f7ce:	e000      	b.n	1f7d2 <_svfprintf_r+0xb12>
   1f7d0:	4631      	mov	r1, r6
   1f7d2:	08e2      	lsrs	r2, r4, #3
   1f7d4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1f7d8:	08e8      	lsrs	r0, r5, #3
   1f7da:	f004 0307 	and.w	r3, r4, #7
   1f7de:	4605      	mov	r5, r0
   1f7e0:	4614      	mov	r4, r2
   1f7e2:	3330      	adds	r3, #48	; 0x30
   1f7e4:	ea54 0205 	orrs.w	r2, r4, r5
   1f7e8:	f801 3c01 	strb.w	r3, [r1, #-1]
   1f7ec:	f101 36ff 	add.w	r6, r1, #4294967295
   1f7f0:	d1ee      	bne.n	1f7d0 <_svfprintf_r+0xb10>
   1f7f2:	9a03      	ldr	r2, [sp, #12]
   1f7f4:	07d2      	lsls	r2, r2, #31
   1f7f6:	f57f ade6 	bpl.w	1f3c6 <_svfprintf_r+0x706>
   1f7fa:	2b30      	cmp	r3, #48	; 0x30
   1f7fc:	f43f ade3 	beq.w	1f3c6 <_svfprintf_r+0x706>
   1f800:	3902      	subs	r1, #2
   1f802:	2330      	movs	r3, #48	; 0x30
   1f804:	f806 3c01 	strb.w	r3, [r6, #-1]
   1f808:	eba9 0301 	sub.w	r3, r9, r1
   1f80c:	930a      	str	r3, [sp, #40]	; 0x28
   1f80e:	460e      	mov	r6, r1
   1f810:	f7ff bb66 	b.w	1eee0 <_svfprintf_r+0x220>
   1f814:	991d      	ldr	r1, [sp, #116]	; 0x74
   1f816:	2900      	cmp	r1, #0
   1f818:	f340 8231 	ble.w	1fc7e <_svfprintf_r+0xfbe>
   1f81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f81e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f820:	4293      	cmp	r3, r2
   1f822:	bfa8      	it	ge
   1f824:	4613      	movge	r3, r2
   1f826:	2b00      	cmp	r3, #0
   1f828:	461f      	mov	r7, r3
   1f82a:	dd0d      	ble.n	1f848 <_svfprintf_r+0xb88>
   1f82c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f82e:	f8c8 6000 	str.w	r6, [r8]
   1f832:	3301      	adds	r3, #1
   1f834:	443c      	add	r4, r7
   1f836:	2b07      	cmp	r3, #7
   1f838:	9425      	str	r4, [sp, #148]	; 0x94
   1f83a:	f8c8 7004 	str.w	r7, [r8, #4]
   1f83e:	9324      	str	r3, [sp, #144]	; 0x90
   1f840:	f300 8321 	bgt.w	1fe86 <_svfprintf_r+0x11c6>
   1f844:	f108 0808 	add.w	r8, r8, #8
   1f848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f84a:	2f00      	cmp	r7, #0
   1f84c:	bfa8      	it	ge
   1f84e:	1bdb      	subge	r3, r3, r7
   1f850:	2b00      	cmp	r3, #0
   1f852:	461f      	mov	r7, r3
   1f854:	f340 80d7 	ble.w	1fa06 <_svfprintf_r+0xd46>
   1f858:	2f10      	cmp	r7, #16
   1f85a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f85c:	4d31      	ldr	r5, [pc, #196]	; (1f924 <_svfprintf_r+0xc64>)
   1f85e:	f340 81f0 	ble.w	1fc42 <_svfprintf_r+0xf82>
   1f862:	4642      	mov	r2, r8
   1f864:	4621      	mov	r1, r4
   1f866:	46b0      	mov	r8, r6
   1f868:	f04f 0b10 	mov.w	fp, #16
   1f86c:	462e      	mov	r6, r5
   1f86e:	9c08      	ldr	r4, [sp, #32]
   1f870:	9d07      	ldr	r5, [sp, #28]
   1f872:	e004      	b.n	1f87e <_svfprintf_r+0xbbe>
   1f874:	3208      	adds	r2, #8
   1f876:	3f10      	subs	r7, #16
   1f878:	2f10      	cmp	r7, #16
   1f87a:	f340 81de 	ble.w	1fc3a <_svfprintf_r+0xf7a>
   1f87e:	3301      	adds	r3, #1
   1f880:	3110      	adds	r1, #16
   1f882:	2b07      	cmp	r3, #7
   1f884:	9125      	str	r1, [sp, #148]	; 0x94
   1f886:	9324      	str	r3, [sp, #144]	; 0x90
   1f888:	e882 0840 	stmia.w	r2, {r6, fp}
   1f88c:	ddf2      	ble.n	1f874 <_svfprintf_r+0xbb4>
   1f88e:	aa23      	add	r2, sp, #140	; 0x8c
   1f890:	4629      	mov	r1, r5
   1f892:	4620      	mov	r0, r4
   1f894:	f002 fbc6 	bl	22024 <__ssprint_r>
   1f898:	2800      	cmp	r0, #0
   1f89a:	f47f aae3 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f89e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f8a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f8a2:	464a      	mov	r2, r9
   1f8a4:	e7e7      	b.n	1f876 <_svfprintf_r+0xbb6>
   1f8a6:	2d00      	cmp	r5, #0
   1f8a8:	bf08      	it	eq
   1f8aa:	2c0a      	cmpeq	r4, #10
   1f8ac:	f0c0 8095 	bcc.w	1f9da <_svfprintf_r+0xd1a>
   1f8b0:	464e      	mov	r6, r9
   1f8b2:	4620      	mov	r0, r4
   1f8b4:	4629      	mov	r1, r5
   1f8b6:	220a      	movs	r2, #10
   1f8b8:	2300      	movs	r3, #0
   1f8ba:	f7fc fcc7 	bl	1c24c <__aeabi_uldivmod>
   1f8be:	3230      	adds	r2, #48	; 0x30
   1f8c0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1f8c4:	4620      	mov	r0, r4
   1f8c6:	4629      	mov	r1, r5
   1f8c8:	2300      	movs	r3, #0
   1f8ca:	220a      	movs	r2, #10
   1f8cc:	f7fc fcbe 	bl	1c24c <__aeabi_uldivmod>
   1f8d0:	4604      	mov	r4, r0
   1f8d2:	460d      	mov	r5, r1
   1f8d4:	ea54 0305 	orrs.w	r3, r4, r5
   1f8d8:	d1eb      	bne.n	1f8b2 <_svfprintf_r+0xbf2>
   1f8da:	eba9 0306 	sub.w	r3, r9, r6
   1f8de:	930a      	str	r3, [sp, #40]	; 0x28
   1f8e0:	f7ff bafe 	b.w	1eee0 <_svfprintf_r+0x220>
   1f8e4:	9b06      	ldr	r3, [sp, #24]
   1f8e6:	930a      	str	r3, [sp, #40]	; 0x28
   1f8e8:	464e      	mov	r6, r9
   1f8ea:	f7ff baf9 	b.w	1eee0 <_svfprintf_r+0x220>
   1f8ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f8f0:	9907      	ldr	r1, [sp, #28]
   1f8f2:	9808      	ldr	r0, [sp, #32]
   1f8f4:	f002 fb96 	bl	22024 <__ssprint_r>
   1f8f8:	2800      	cmp	r0, #0
   1f8fa:	f47f aab3 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f8fe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f902:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f904:	46c8      	mov	r8, r9
   1f906:	f7ff bb50 	b.w	1efaa <_svfprintf_r+0x2ea>
   1f90a:	1e5e      	subs	r6, r3, #1
   1f90c:	2e00      	cmp	r6, #0
   1f90e:	f77f af0a 	ble.w	1f726 <_svfprintf_r+0xa66>
   1f912:	2e10      	cmp	r6, #16
   1f914:	4d03      	ldr	r5, [pc, #12]	; (1f924 <_svfprintf_r+0xc64>)
   1f916:	dd23      	ble.n	1f960 <_svfprintf_r+0xca0>
   1f918:	4622      	mov	r2, r4
   1f91a:	f04f 0b10 	mov.w	fp, #16
   1f91e:	9c08      	ldr	r4, [sp, #32]
   1f920:	e007      	b.n	1f932 <_svfprintf_r+0xc72>
   1f922:	bf00      	nop
   1f924:	00024a4c 	.word	0x00024a4c
   1f928:	3e10      	subs	r6, #16
   1f92a:	2e10      	cmp	r6, #16
   1f92c:	f108 0808 	add.w	r8, r8, #8
   1f930:	dd15      	ble.n	1f95e <_svfprintf_r+0xc9e>
   1f932:	3701      	adds	r7, #1
   1f934:	3210      	adds	r2, #16
   1f936:	2f07      	cmp	r7, #7
   1f938:	9225      	str	r2, [sp, #148]	; 0x94
   1f93a:	9724      	str	r7, [sp, #144]	; 0x90
   1f93c:	e888 0820 	stmia.w	r8, {r5, fp}
   1f940:	ddf2      	ble.n	1f928 <_svfprintf_r+0xc68>
   1f942:	aa23      	add	r2, sp, #140	; 0x8c
   1f944:	9907      	ldr	r1, [sp, #28]
   1f946:	4620      	mov	r0, r4
   1f948:	f002 fb6c 	bl	22024 <__ssprint_r>
   1f94c:	2800      	cmp	r0, #0
   1f94e:	f47f aa89 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f952:	3e10      	subs	r6, #16
   1f954:	2e10      	cmp	r6, #16
   1f956:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f958:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f95a:	46c8      	mov	r8, r9
   1f95c:	dce9      	bgt.n	1f932 <_svfprintf_r+0xc72>
   1f95e:	4614      	mov	r4, r2
   1f960:	3701      	adds	r7, #1
   1f962:	4434      	add	r4, r6
   1f964:	2f07      	cmp	r7, #7
   1f966:	9425      	str	r4, [sp, #148]	; 0x94
   1f968:	9724      	str	r7, [sp, #144]	; 0x90
   1f96a:	e888 0060 	stmia.w	r8, {r5, r6}
   1f96e:	f77f aed8 	ble.w	1f722 <_svfprintf_r+0xa62>
   1f972:	aa23      	add	r2, sp, #140	; 0x8c
   1f974:	9907      	ldr	r1, [sp, #28]
   1f976:	9808      	ldr	r0, [sp, #32]
   1f978:	f002 fb54 	bl	22024 <__ssprint_r>
   1f97c:	2800      	cmp	r0, #0
   1f97e:	f47f aa71 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1f982:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f984:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f986:	46c8      	mov	r8, r9
   1f988:	e6cd      	b.n	1f726 <_svfprintf_r+0xa66>
   1f98a:	681c      	ldr	r4, [r3, #0]
   1f98c:	3304      	adds	r3, #4
   1f98e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f990:	2500      	movs	r5, #0
   1f992:	e422      	b.n	1f1da <_svfprintf_r+0x51a>
   1f994:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f996:	460a      	mov	r2, r1
   1f998:	3204      	adds	r2, #4
   1f99a:	680c      	ldr	r4, [r1, #0]
   1f99c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f99e:	2500      	movs	r5, #0
   1f9a0:	f7ff ba81 	b.w	1eea6 <_svfprintf_r+0x1e6>
   1f9a4:	3204      	adds	r2, #4
   1f9a6:	681c      	ldr	r4, [r3, #0]
   1f9a8:	920b      	str	r2, [sp, #44]	; 0x2c
   1f9aa:	2301      	movs	r3, #1
   1f9ac:	2500      	movs	r5, #0
   1f9ae:	f7ff ba7a 	b.w	1eea6 <_svfprintf_r+0x1e6>
   1f9b2:	4614      	mov	r4, r2
   1f9b4:	3301      	adds	r3, #1
   1f9b6:	4434      	add	r4, r6
   1f9b8:	2b07      	cmp	r3, #7
   1f9ba:	9425      	str	r4, [sp, #148]	; 0x94
   1f9bc:	9324      	str	r3, [sp, #144]	; 0x90
   1f9be:	e888 0060 	stmia.w	r8, {r5, r6}
   1f9c2:	f77f ab62 	ble.w	1f08a <_svfprintf_r+0x3ca>
   1f9c6:	e6bb      	b.n	1f740 <_svfprintf_r+0xa80>
   1f9c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f9ca:	6814      	ldr	r4, [r2, #0]
   1f9cc:	4613      	mov	r3, r2
   1f9ce:	3304      	adds	r3, #4
   1f9d0:	17e5      	asrs	r5, r4, #31
   1f9d2:	930b      	str	r3, [sp, #44]	; 0x2c
   1f9d4:	4622      	mov	r2, r4
   1f9d6:	462b      	mov	r3, r5
   1f9d8:	e4cd      	b.n	1f376 <_svfprintf_r+0x6b6>
   1f9da:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f9de:	f8cd b00c 	str.w	fp, [sp, #12]
   1f9e2:	ae40      	add	r6, sp, #256	; 0x100
   1f9e4:	3430      	adds	r4, #48	; 0x30
   1f9e6:	2301      	movs	r3, #1
   1f9e8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1f9ec:	930a      	str	r3, [sp, #40]	; 0x28
   1f9ee:	f7ff ba77 	b.w	1eee0 <_svfprintf_r+0x220>
   1f9f2:	aa23      	add	r2, sp, #140	; 0x8c
   1f9f4:	9907      	ldr	r1, [sp, #28]
   1f9f6:	9808      	ldr	r0, [sp, #32]
   1f9f8:	f002 fb14 	bl	22024 <__ssprint_r>
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	f47f aa31 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fa02:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa04:	46c8      	mov	r8, r9
   1fa06:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fa08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fa0a:	429a      	cmp	r2, r3
   1fa0c:	db44      	blt.n	1fa98 <_svfprintf_r+0xdd8>
   1fa0e:	9b03      	ldr	r3, [sp, #12]
   1fa10:	07d9      	lsls	r1, r3, #31
   1fa12:	d441      	bmi.n	1fa98 <_svfprintf_r+0xdd8>
   1fa14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fa16:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fa18:	1a9a      	subs	r2, r3, r2
   1fa1a:	1a1d      	subs	r5, r3, r0
   1fa1c:	4295      	cmp	r5, r2
   1fa1e:	bfa8      	it	ge
   1fa20:	4615      	movge	r5, r2
   1fa22:	2d00      	cmp	r5, #0
   1fa24:	dd0e      	ble.n	1fa44 <_svfprintf_r+0xd84>
   1fa26:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fa28:	f8c8 5004 	str.w	r5, [r8, #4]
   1fa2c:	3101      	adds	r1, #1
   1fa2e:	4406      	add	r6, r0
   1fa30:	442c      	add	r4, r5
   1fa32:	2907      	cmp	r1, #7
   1fa34:	f8c8 6000 	str.w	r6, [r8]
   1fa38:	9425      	str	r4, [sp, #148]	; 0x94
   1fa3a:	9124      	str	r1, [sp, #144]	; 0x90
   1fa3c:	f300 823a 	bgt.w	1feb4 <_svfprintf_r+0x11f4>
   1fa40:	f108 0808 	add.w	r8, r8, #8
   1fa44:	2d00      	cmp	r5, #0
   1fa46:	bfac      	ite	ge
   1fa48:	1b56      	subge	r6, r2, r5
   1fa4a:	4616      	movlt	r6, r2
   1fa4c:	2e00      	cmp	r6, #0
   1fa4e:	f77f ab1e 	ble.w	1f08e <_svfprintf_r+0x3ce>
   1fa52:	2e10      	cmp	r6, #16
   1fa54:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa56:	4db1      	ldr	r5, [pc, #708]	; (1fd1c <_svfprintf_r+0x105c>)
   1fa58:	ddac      	ble.n	1f9b4 <_svfprintf_r+0xcf4>
   1fa5a:	4622      	mov	r2, r4
   1fa5c:	2710      	movs	r7, #16
   1fa5e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fa62:	9c07      	ldr	r4, [sp, #28]
   1fa64:	e004      	b.n	1fa70 <_svfprintf_r+0xdb0>
   1fa66:	f108 0808 	add.w	r8, r8, #8
   1fa6a:	3e10      	subs	r6, #16
   1fa6c:	2e10      	cmp	r6, #16
   1fa6e:	dda0      	ble.n	1f9b2 <_svfprintf_r+0xcf2>
   1fa70:	3301      	adds	r3, #1
   1fa72:	3210      	adds	r2, #16
   1fa74:	2b07      	cmp	r3, #7
   1fa76:	9225      	str	r2, [sp, #148]	; 0x94
   1fa78:	9324      	str	r3, [sp, #144]	; 0x90
   1fa7a:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fa7e:	ddf2      	ble.n	1fa66 <_svfprintf_r+0xda6>
   1fa80:	aa23      	add	r2, sp, #140	; 0x8c
   1fa82:	4621      	mov	r1, r4
   1fa84:	4658      	mov	r0, fp
   1fa86:	f002 facd 	bl	22024 <__ssprint_r>
   1fa8a:	2800      	cmp	r0, #0
   1fa8c:	f47f a9ea 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fa90:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fa92:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa94:	46c8      	mov	r8, r9
   1fa96:	e7e8      	b.n	1fa6a <_svfprintf_r+0xdaa>
   1fa98:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fa9c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fa9e:	f8c8 1000 	str.w	r1, [r8]
   1faa2:	3301      	adds	r3, #1
   1faa4:	4404      	add	r4, r0
   1faa6:	2b07      	cmp	r3, #7
   1faa8:	9425      	str	r4, [sp, #148]	; 0x94
   1faaa:	f8c8 0004 	str.w	r0, [r8, #4]
   1faae:	9324      	str	r3, [sp, #144]	; 0x90
   1fab0:	f300 81f4 	bgt.w	1fe9c <_svfprintf_r+0x11dc>
   1fab4:	f108 0808 	add.w	r8, r8, #8
   1fab8:	e7ac      	b.n	1fa14 <_svfprintf_r+0xd54>
   1faba:	9b03      	ldr	r3, [sp, #12]
   1fabc:	07da      	lsls	r2, r3, #31
   1fabe:	f53f adfc 	bmi.w	1f6ba <_svfprintf_r+0x9fa>
   1fac2:	3701      	adds	r7, #1
   1fac4:	3401      	adds	r4, #1
   1fac6:	2301      	movs	r3, #1
   1fac8:	2f07      	cmp	r7, #7
   1faca:	9425      	str	r4, [sp, #148]	; 0x94
   1facc:	9724      	str	r7, [sp, #144]	; 0x90
   1face:	f8c8 6000 	str.w	r6, [r8]
   1fad2:	f8c8 3004 	str.w	r3, [r8, #4]
   1fad6:	f77f ae24 	ble.w	1f722 <_svfprintf_r+0xa62>
   1fada:	e74a      	b.n	1f972 <_svfprintf_r+0xcb2>
   1fadc:	aa23      	add	r2, sp, #140	; 0x8c
   1fade:	9907      	ldr	r1, [sp, #28]
   1fae0:	9808      	ldr	r0, [sp, #32]
   1fae2:	f002 fa9f 	bl	22024 <__ssprint_r>
   1fae6:	2800      	cmp	r0, #0
   1fae8:	f47f a9bc 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1faec:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1faee:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1faf0:	46c8      	mov	r8, r9
   1faf2:	e5f0      	b.n	1f6d6 <_svfprintf_r+0xa16>
   1faf4:	aa23      	add	r2, sp, #140	; 0x8c
   1faf6:	9907      	ldr	r1, [sp, #28]
   1faf8:	9808      	ldr	r0, [sp, #32]
   1fafa:	f002 fa93 	bl	22024 <__ssprint_r>
   1fafe:	2800      	cmp	r0, #0
   1fb00:	f47f a9b0 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fb04:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb06:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fb08:	46c8      	mov	r8, r9
   1fb0a:	e5f3      	b.n	1f6f4 <_svfprintf_r+0xa34>
   1fb0c:	464e      	mov	r6, r9
   1fb0e:	f7ff b9e7 	b.w	1eee0 <_svfprintf_r+0x220>
   1fb12:	aa23      	add	r2, sp, #140	; 0x8c
   1fb14:	9907      	ldr	r1, [sp, #28]
   1fb16:	9808      	ldr	r0, [sp, #32]
   1fb18:	f002 fa84 	bl	22024 <__ssprint_r>
   1fb1c:	2800      	cmp	r0, #0
   1fb1e:	f47f a9a1 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fb22:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb24:	46c8      	mov	r8, r9
   1fb26:	f7ff ba63 	b.w	1eff0 <_svfprintf_r+0x330>
   1fb2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fb2e:	4602      	mov	r2, r0
   1fb30:	460b      	mov	r3, r1
   1fb32:	f002 fc4d 	bl	223d0 <__aeabi_dcmpun>
   1fb36:	2800      	cmp	r0, #0
   1fb38:	f040 8298 	bne.w	2006c <_svfprintf_r+0x13ac>
   1fb3c:	9b06      	ldr	r3, [sp, #24]
   1fb3e:	3301      	adds	r3, #1
   1fb40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fb42:	f023 0720 	bic.w	r7, r3, #32
   1fb46:	f000 81d2 	beq.w	1feee <_svfprintf_r+0x122e>
   1fb4a:	2f47      	cmp	r7, #71	; 0x47
   1fb4c:	f000 8120 	beq.w	1fd90 <_svfprintf_r+0x10d0>
   1fb50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fb52:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fb56:	2b00      	cmp	r3, #0
   1fb58:	9203      	str	r2, [sp, #12]
   1fb5a:	f2c0 81f0 	blt.w	1ff3e <_svfprintf_r+0x127e>
   1fb5e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fb62:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fb66:	2300      	movs	r3, #0
   1fb68:	930c      	str	r3, [sp, #48]	; 0x30
   1fb6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fb6c:	2b66      	cmp	r3, #102	; 0x66
   1fb6e:	f000 81c1 	beq.w	1fef4 <_svfprintf_r+0x1234>
   1fb72:	2b46      	cmp	r3, #70	; 0x46
   1fb74:	f000 80f1 	beq.w	1fd5a <_svfprintf_r+0x109a>
   1fb78:	2f45      	cmp	r7, #69	; 0x45
   1fb7a:	bf0c      	ite	eq
   1fb7c:	9b06      	ldreq	r3, [sp, #24]
   1fb7e:	9d06      	ldrne	r5, [sp, #24]
   1fb80:	9808      	ldr	r0, [sp, #32]
   1fb82:	bf08      	it	eq
   1fb84:	1c5d      	addeq	r5, r3, #1
   1fb86:	aa21      	add	r2, sp, #132	; 0x84
   1fb88:	ab1e      	add	r3, sp, #120	; 0x78
   1fb8a:	9201      	str	r2, [sp, #4]
   1fb8c:	9300      	str	r3, [sp, #0]
   1fb8e:	462a      	mov	r2, r5
   1fb90:	ab1d      	add	r3, sp, #116	; 0x74
   1fb92:	2102      	movs	r1, #2
   1fb94:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fb98:	f000 fcae 	bl	204f8 <_dtoa_r>
   1fb9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fb9e:	2b67      	cmp	r3, #103	; 0x67
   1fba0:	4606      	mov	r6, r0
   1fba2:	f040 81d5 	bne.w	1ff50 <_svfprintf_r+0x1290>
   1fba6:	f01b 0f01 	tst.w	fp, #1
   1fbaa:	f000 824e 	beq.w	2004a <_svfprintf_r+0x138a>
   1fbae:	1974      	adds	r4, r6, r5
   1fbb0:	2200      	movs	r2, #0
   1fbb2:	2300      	movs	r3, #0
   1fbb4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fbb8:	f7fc f920 	bl	1bdfc <__aeabi_dcmpeq>
   1fbbc:	2800      	cmp	r0, #0
   1fbbe:	f040 8160 	bne.w	1fe82 <_svfprintf_r+0x11c2>
   1fbc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fbc4:	42a3      	cmp	r3, r4
   1fbc6:	d206      	bcs.n	1fbd6 <_svfprintf_r+0xf16>
   1fbc8:	2130      	movs	r1, #48	; 0x30
   1fbca:	1c5a      	adds	r2, r3, #1
   1fbcc:	9221      	str	r2, [sp, #132]	; 0x84
   1fbce:	7019      	strb	r1, [r3, #0]
   1fbd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fbd2:	429c      	cmp	r4, r3
   1fbd4:	d8f9      	bhi.n	1fbca <_svfprintf_r+0xf0a>
   1fbd6:	1b9b      	subs	r3, r3, r6
   1fbd8:	2f47      	cmp	r7, #71	; 0x47
   1fbda:	930f      	str	r3, [sp, #60]	; 0x3c
   1fbdc:	f000 80f0 	beq.w	1fdc0 <_svfprintf_r+0x1100>
   1fbe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fbe2:	2b65      	cmp	r3, #101	; 0x65
   1fbe4:	f340 81c3 	ble.w	1ff6e <_svfprintf_r+0x12ae>
   1fbe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fbea:	2b66      	cmp	r3, #102	; 0x66
   1fbec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fbee:	930e      	str	r3, [sp, #56]	; 0x38
   1fbf0:	f000 81c0 	beq.w	1ff74 <_svfprintf_r+0x12b4>
   1fbf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fbf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fbf8:	4619      	mov	r1, r3
   1fbfa:	4291      	cmp	r1, r2
   1fbfc:	f300 8191 	bgt.w	1ff22 <_svfprintf_r+0x1262>
   1fc00:	f01b 0f01 	tst.w	fp, #1
   1fc04:	f040 8223 	bne.w	2004e <_svfprintf_r+0x138e>
   1fc08:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fc0c:	9304      	str	r3, [sp, #16]
   1fc0e:	2367      	movs	r3, #103	; 0x67
   1fc10:	920a      	str	r2, [sp, #40]	; 0x28
   1fc12:	930d      	str	r3, [sp, #52]	; 0x34
   1fc14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fc16:	2b00      	cmp	r3, #0
   1fc18:	f040 80cb 	bne.w	1fdb2 <_svfprintf_r+0x10f2>
   1fc1c:	9306      	str	r3, [sp, #24]
   1fc1e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fc22:	f7ff b965 	b.w	1eef0 <_svfprintf_r+0x230>
   1fc26:	f025 0507 	bic.w	r5, r5, #7
   1fc2a:	ed95 7b00 	vldr	d7, [r5]
   1fc2e:	f105 0308 	add.w	r3, r5, #8
   1fc32:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fc36:	930b      	str	r3, [sp, #44]	; 0x2c
   1fc38:	e416      	b.n	1f468 <_svfprintf_r+0x7a8>
   1fc3a:	4635      	mov	r5, r6
   1fc3c:	460c      	mov	r4, r1
   1fc3e:	4646      	mov	r6, r8
   1fc40:	4690      	mov	r8, r2
   1fc42:	3301      	adds	r3, #1
   1fc44:	443c      	add	r4, r7
   1fc46:	2b07      	cmp	r3, #7
   1fc48:	9425      	str	r4, [sp, #148]	; 0x94
   1fc4a:	9324      	str	r3, [sp, #144]	; 0x90
   1fc4c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fc50:	f73f aecf 	bgt.w	1f9f2 <_svfprintf_r+0xd32>
   1fc54:	f108 0808 	add.w	r8, r8, #8
   1fc58:	e6d5      	b.n	1fa06 <_svfprintf_r+0xd46>
   1fc5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fc5c:	6813      	ldr	r3, [r2, #0]
   1fc5e:	3204      	adds	r2, #4
   1fc60:	920b      	str	r2, [sp, #44]	; 0x2c
   1fc62:	9a05      	ldr	r2, [sp, #20]
   1fc64:	601a      	str	r2, [r3, #0]
   1fc66:	f7ff b852 	b.w	1ed0e <_svfprintf_r+0x4e>
   1fc6a:	aa23      	add	r2, sp, #140	; 0x8c
   1fc6c:	9907      	ldr	r1, [sp, #28]
   1fc6e:	9808      	ldr	r0, [sp, #32]
   1fc70:	f002 f9d8 	bl	22024 <__ssprint_r>
   1fc74:	2800      	cmp	r0, #0
   1fc76:	f47f a8f5 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fc7a:	46c8      	mov	r8, r9
   1fc7c:	e488      	b.n	1f590 <_svfprintf_r+0x8d0>
   1fc7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc80:	4a27      	ldr	r2, [pc, #156]	; (1fd20 <_svfprintf_r+0x1060>)
   1fc82:	f8c8 2000 	str.w	r2, [r8]
   1fc86:	3301      	adds	r3, #1
   1fc88:	3401      	adds	r4, #1
   1fc8a:	2201      	movs	r2, #1
   1fc8c:	2b07      	cmp	r3, #7
   1fc8e:	9425      	str	r4, [sp, #148]	; 0x94
   1fc90:	9324      	str	r3, [sp, #144]	; 0x90
   1fc92:	f8c8 2004 	str.w	r2, [r8, #4]
   1fc96:	dc54      	bgt.n	1fd42 <_svfprintf_r+0x1082>
   1fc98:	f108 0808 	add.w	r8, r8, #8
   1fc9c:	b929      	cbnz	r1, 1fcaa <_svfprintf_r+0xfea>
   1fc9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fca0:	b91b      	cbnz	r3, 1fcaa <_svfprintf_r+0xfea>
   1fca2:	9b03      	ldr	r3, [sp, #12]
   1fca4:	07d8      	lsls	r0, r3, #31
   1fca6:	f57f a9f2 	bpl.w	1f08e <_svfprintf_r+0x3ce>
   1fcaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fcac:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fcae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fcb0:	f8c8 2000 	str.w	r2, [r8]
   1fcb4:	3301      	adds	r3, #1
   1fcb6:	4602      	mov	r2, r0
   1fcb8:	4422      	add	r2, r4
   1fcba:	2b07      	cmp	r3, #7
   1fcbc:	9225      	str	r2, [sp, #148]	; 0x94
   1fcbe:	f8c8 0004 	str.w	r0, [r8, #4]
   1fcc2:	9324      	str	r3, [sp, #144]	; 0x90
   1fcc4:	f300 8195 	bgt.w	1fff2 <_svfprintf_r+0x1332>
   1fcc8:	f108 0808 	add.w	r8, r8, #8
   1fccc:	2900      	cmp	r1, #0
   1fcce:	f2c0 816d 	blt.w	1ffac <_svfprintf_r+0x12ec>
   1fcd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1fcd4:	f8c8 6000 	str.w	r6, [r8]
   1fcd8:	3301      	adds	r3, #1
   1fcda:	188c      	adds	r4, r1, r2
   1fcdc:	2b07      	cmp	r3, #7
   1fcde:	9425      	str	r4, [sp, #148]	; 0x94
   1fce0:	9324      	str	r3, [sp, #144]	; 0x90
   1fce2:	f8c8 1004 	str.w	r1, [r8, #4]
   1fce6:	f77f a9d0 	ble.w	1f08a <_svfprintf_r+0x3ca>
   1fcea:	e529      	b.n	1f740 <_svfprintf_r+0xa80>
   1fcec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fcee:	9905      	ldr	r1, [sp, #20]
   1fcf0:	6813      	ldr	r3, [r2, #0]
   1fcf2:	17cd      	asrs	r5, r1, #31
   1fcf4:	4608      	mov	r0, r1
   1fcf6:	3204      	adds	r2, #4
   1fcf8:	4629      	mov	r1, r5
   1fcfa:	920b      	str	r2, [sp, #44]	; 0x2c
   1fcfc:	e9c3 0100 	strd	r0, r1, [r3]
   1fd00:	f7ff b805 	b.w	1ed0e <_svfprintf_r+0x4e>
   1fd04:	aa23      	add	r2, sp, #140	; 0x8c
   1fd06:	9907      	ldr	r1, [sp, #28]
   1fd08:	9808      	ldr	r0, [sp, #32]
   1fd0a:	f002 f98b 	bl	22024 <__ssprint_r>
   1fd0e:	2800      	cmp	r0, #0
   1fd10:	f47f a8a8 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fd14:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd16:	46c8      	mov	r8, r9
   1fd18:	e453      	b.n	1f5c2 <_svfprintf_r+0x902>
   1fd1a:	bf00      	nop
   1fd1c:	00024a4c 	.word	0x00024a4c
   1fd20:	00024a38 	.word	0x00024a38
   1fd24:	2140      	movs	r1, #64	; 0x40
   1fd26:	9808      	ldr	r0, [sp, #32]
   1fd28:	f7fd fe70 	bl	1da0c <_malloc_r>
   1fd2c:	9a07      	ldr	r2, [sp, #28]
   1fd2e:	6010      	str	r0, [r2, #0]
   1fd30:	6110      	str	r0, [r2, #16]
   1fd32:	2800      	cmp	r0, #0
   1fd34:	f000 81f6 	beq.w	20124 <_svfprintf_r+0x1464>
   1fd38:	9a07      	ldr	r2, [sp, #28]
   1fd3a:	2340      	movs	r3, #64	; 0x40
   1fd3c:	6153      	str	r3, [r2, #20]
   1fd3e:	f7fe bfd6 	b.w	1ecee <_svfprintf_r+0x2e>
   1fd42:	aa23      	add	r2, sp, #140	; 0x8c
   1fd44:	9907      	ldr	r1, [sp, #28]
   1fd46:	9808      	ldr	r0, [sp, #32]
   1fd48:	f002 f96c 	bl	22024 <__ssprint_r>
   1fd4c:	2800      	cmp	r0, #0
   1fd4e:	f47f a889 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fd52:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fd54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd56:	46c8      	mov	r8, r9
   1fd58:	e7a0      	b.n	1fc9c <_svfprintf_r+0xfdc>
   1fd5a:	9d06      	ldr	r5, [sp, #24]
   1fd5c:	9808      	ldr	r0, [sp, #32]
   1fd5e:	aa21      	add	r2, sp, #132	; 0x84
   1fd60:	ab1e      	add	r3, sp, #120	; 0x78
   1fd62:	9201      	str	r2, [sp, #4]
   1fd64:	9300      	str	r3, [sp, #0]
   1fd66:	462a      	mov	r2, r5
   1fd68:	ab1d      	add	r3, sp, #116	; 0x74
   1fd6a:	2103      	movs	r1, #3
   1fd6c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fd70:	f000 fbc2 	bl	204f8 <_dtoa_r>
   1fd74:	4606      	mov	r6, r0
   1fd76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd78:	2b46      	cmp	r3, #70	; 0x46
   1fd7a:	eb06 0405 	add.w	r4, r6, r5
   1fd7e:	f47f af17 	bne.w	1fbb0 <_svfprintf_r+0xef0>
   1fd82:	7833      	ldrb	r3, [r6, #0]
   1fd84:	2b30      	cmp	r3, #48	; 0x30
   1fd86:	f000 817d 	beq.w	20084 <_svfprintf_r+0x13c4>
   1fd8a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1fd8c:	442c      	add	r4, r5
   1fd8e:	e70f      	b.n	1fbb0 <_svfprintf_r+0xef0>
   1fd90:	9b06      	ldr	r3, [sp, #24]
   1fd92:	2b00      	cmp	r3, #0
   1fd94:	bf08      	it	eq
   1fd96:	2301      	moveq	r3, #1
   1fd98:	9306      	str	r3, [sp, #24]
   1fd9a:	e6d9      	b.n	1fb50 <_svfprintf_r+0xe90>
   1fd9c:	4630      	mov	r0, r6
   1fd9e:	9406      	str	r4, [sp, #24]
   1fda0:	f7fe fece 	bl	1eb40 <strlen>
   1fda4:	950b      	str	r5, [sp, #44]	; 0x2c
   1fda6:	900a      	str	r0, [sp, #40]	; 0x28
   1fda8:	f8cd b00c 	str.w	fp, [sp, #12]
   1fdac:	4603      	mov	r3, r0
   1fdae:	f7ff b9eb 	b.w	1f188 <_svfprintf_r+0x4c8>
   1fdb2:	272d      	movs	r7, #45	; 0x2d
   1fdb4:	2300      	movs	r3, #0
   1fdb6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fdba:	9306      	str	r3, [sp, #24]
   1fdbc:	f7ff b899 	b.w	1eef2 <_svfprintf_r+0x232>
   1fdc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fdc2:	930e      	str	r3, [sp, #56]	; 0x38
   1fdc4:	461a      	mov	r2, r3
   1fdc6:	3303      	adds	r3, #3
   1fdc8:	db04      	blt.n	1fdd4 <_svfprintf_r+0x1114>
   1fdca:	9b06      	ldr	r3, [sp, #24]
   1fdcc:	4619      	mov	r1, r3
   1fdce:	4291      	cmp	r1, r2
   1fdd0:	f6bf af10 	bge.w	1fbf4 <_svfprintf_r+0xf34>
   1fdd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fdd6:	3b02      	subs	r3, #2
   1fdd8:	930d      	str	r3, [sp, #52]	; 0x34
   1fdda:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1fdde:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   1fde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fde4:	3b01      	subs	r3, #1
   1fde6:	2b00      	cmp	r3, #0
   1fde8:	931d      	str	r3, [sp, #116]	; 0x74
   1fdea:	bfbd      	ittte	lt
   1fdec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1fdee:	f1c3 0301 	rsblt	r3, r3, #1
   1fdf2:	222d      	movlt	r2, #45	; 0x2d
   1fdf4:	222b      	movge	r2, #43	; 0x2b
   1fdf6:	2b09      	cmp	r3, #9
   1fdf8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   1fdfc:	f340 811d 	ble.w	2003a <_svfprintf_r+0x137a>
   1fe00:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   1fe04:	4620      	mov	r0, r4
   1fe06:	4daf      	ldr	r5, [pc, #700]	; (200c4 <_svfprintf_r+0x1404>)
   1fe08:	e000      	b.n	1fe0c <_svfprintf_r+0x114c>
   1fe0a:	4610      	mov	r0, r2
   1fe0c:	fb85 1203 	smull	r1, r2, r5, r3
   1fe10:	17d9      	asrs	r1, r3, #31
   1fe12:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1fe16:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1fe1a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1fe1e:	3230      	adds	r2, #48	; 0x30
   1fe20:	2909      	cmp	r1, #9
   1fe22:	f800 2c01 	strb.w	r2, [r0, #-1]
   1fe26:	460b      	mov	r3, r1
   1fe28:	f100 32ff 	add.w	r2, r0, #4294967295
   1fe2c:	dced      	bgt.n	1fe0a <_svfprintf_r+0x114a>
   1fe2e:	3330      	adds	r3, #48	; 0x30
   1fe30:	3802      	subs	r0, #2
   1fe32:	b2d9      	uxtb	r1, r3
   1fe34:	4284      	cmp	r4, r0
   1fe36:	f802 1c01 	strb.w	r1, [r2, #-1]
   1fe3a:	f240 8170 	bls.w	2011e <_svfprintf_r+0x145e>
   1fe3e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   1fe42:	4613      	mov	r3, r2
   1fe44:	e001      	b.n	1fe4a <_svfprintf_r+0x118a>
   1fe46:	f813 1b01 	ldrb.w	r1, [r3], #1
   1fe4a:	f800 1b01 	strb.w	r1, [r0], #1
   1fe4e:	42a3      	cmp	r3, r4
   1fe50:	d1f9      	bne.n	1fe46 <_svfprintf_r+0x1186>
   1fe52:	3301      	adds	r3, #1
   1fe54:	1a9b      	subs	r3, r3, r2
   1fe56:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   1fe5a:	4413      	add	r3, r2
   1fe5c:	aa1f      	add	r2, sp, #124	; 0x7c
   1fe5e:	1a9b      	subs	r3, r3, r2
   1fe60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fe62:	9315      	str	r3, [sp, #84]	; 0x54
   1fe64:	2a01      	cmp	r2, #1
   1fe66:	4413      	add	r3, r2
   1fe68:	930a      	str	r3, [sp, #40]	; 0x28
   1fe6a:	f340 8120 	ble.w	200ae <_svfprintf_r+0x13ee>
   1fe6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fe70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fe72:	4413      	add	r3, r2
   1fe74:	930a      	str	r3, [sp, #40]	; 0x28
   1fe76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fe7a:	9304      	str	r3, [sp, #16]
   1fe7c:	2300      	movs	r3, #0
   1fe7e:	930e      	str	r3, [sp, #56]	; 0x38
   1fe80:	e6c8      	b.n	1fc14 <_svfprintf_r+0xf54>
   1fe82:	4623      	mov	r3, r4
   1fe84:	e6a7      	b.n	1fbd6 <_svfprintf_r+0xf16>
   1fe86:	aa23      	add	r2, sp, #140	; 0x8c
   1fe88:	9907      	ldr	r1, [sp, #28]
   1fe8a:	9808      	ldr	r0, [sp, #32]
   1fe8c:	f002 f8ca 	bl	22024 <__ssprint_r>
   1fe90:	2800      	cmp	r0, #0
   1fe92:	f47e afe7 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fe96:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe98:	46c8      	mov	r8, r9
   1fe9a:	e4d5      	b.n	1f848 <_svfprintf_r+0xb88>
   1fe9c:	aa23      	add	r2, sp, #140	; 0x8c
   1fe9e:	9907      	ldr	r1, [sp, #28]
   1fea0:	9808      	ldr	r0, [sp, #32]
   1fea2:	f002 f8bf 	bl	22024 <__ssprint_r>
   1fea6:	2800      	cmp	r0, #0
   1fea8:	f47e afdc 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1feac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1feae:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1feb0:	46c8      	mov	r8, r9
   1feb2:	e5af      	b.n	1fa14 <_svfprintf_r+0xd54>
   1feb4:	aa23      	add	r2, sp, #140	; 0x8c
   1feb6:	9907      	ldr	r1, [sp, #28]
   1feb8:	9808      	ldr	r0, [sp, #32]
   1feba:	f002 f8b3 	bl	22024 <__ssprint_r>
   1febe:	2800      	cmp	r0, #0
   1fec0:	f47e afd0 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1fec4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fec8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1feca:	1a9a      	subs	r2, r3, r2
   1fecc:	46c8      	mov	r8, r9
   1fece:	e5b9      	b.n	1fa44 <_svfprintf_r+0xd84>
   1fed0:	9b06      	ldr	r3, [sp, #24]
   1fed2:	960e      	str	r6, [sp, #56]	; 0x38
   1fed4:	2b06      	cmp	r3, #6
   1fed6:	bf28      	it	cs
   1fed8:	2306      	movcs	r3, #6
   1feda:	9606      	str	r6, [sp, #24]
   1fedc:	4637      	mov	r7, r6
   1fede:	9304      	str	r3, [sp, #16]
   1fee0:	950b      	str	r5, [sp, #44]	; 0x2c
   1fee2:	f8cd b00c 	str.w	fp, [sp, #12]
   1fee6:	930a      	str	r3, [sp, #40]	; 0x28
   1fee8:	4e77      	ldr	r6, [pc, #476]	; (200c8 <_svfprintf_r+0x1408>)
   1feea:	f7ff b801 	b.w	1eef0 <_svfprintf_r+0x230>
   1feee:	2306      	movs	r3, #6
   1fef0:	9306      	str	r3, [sp, #24]
   1fef2:	e62d      	b.n	1fb50 <_svfprintf_r+0xe90>
   1fef4:	9c06      	ldr	r4, [sp, #24]
   1fef6:	9808      	ldr	r0, [sp, #32]
   1fef8:	aa21      	add	r2, sp, #132	; 0x84
   1fefa:	ab1e      	add	r3, sp, #120	; 0x78
   1fefc:	9201      	str	r2, [sp, #4]
   1fefe:	9300      	str	r3, [sp, #0]
   1ff00:	4622      	mov	r2, r4
   1ff02:	ab1d      	add	r3, sp, #116	; 0x74
   1ff04:	2103      	movs	r1, #3
   1ff06:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1ff0a:	f000 faf5 	bl	204f8 <_dtoa_r>
   1ff0e:	4623      	mov	r3, r4
   1ff10:	4606      	mov	r6, r0
   1ff12:	1904      	adds	r4, r0, r4
   1ff14:	461d      	mov	r5, r3
   1ff16:	e734      	b.n	1fd82 <_svfprintf_r+0x10c2>
   1ff18:	272d      	movs	r7, #45	; 0x2d
   1ff1a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1ff1e:	f7ff baca 	b.w	1f4b6 <_svfprintf_r+0x7f6>
   1ff22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ff24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff26:	4413      	add	r3, r2
   1ff28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ff2a:	930a      	str	r3, [sp, #40]	; 0x28
   1ff2c:	2a00      	cmp	r2, #0
   1ff2e:	f340 80b7 	ble.w	200a0 <_svfprintf_r+0x13e0>
   1ff32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ff36:	9304      	str	r3, [sp, #16]
   1ff38:	2367      	movs	r3, #103	; 0x67
   1ff3a:	930d      	str	r3, [sp, #52]	; 0x34
   1ff3c:	e66a      	b.n	1fc14 <_svfprintf_r+0xf54>
   1ff3e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1ff42:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1ff46:	9319      	str	r3, [sp, #100]	; 0x64
   1ff48:	232d      	movs	r3, #45	; 0x2d
   1ff4a:	9118      	str	r1, [sp, #96]	; 0x60
   1ff4c:	930c      	str	r3, [sp, #48]	; 0x30
   1ff4e:	e60c      	b.n	1fb6a <_svfprintf_r+0xeaa>
   1ff50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff52:	2b47      	cmp	r3, #71	; 0x47
   1ff54:	f47f ae2b 	bne.w	1fbae <_svfprintf_r+0xeee>
   1ff58:	f01b 0f01 	tst.w	fp, #1
   1ff5c:	f47f af0b 	bne.w	1fd76 <_svfprintf_r+0x10b6>
   1ff60:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ff62:	2f47      	cmp	r7, #71	; 0x47
   1ff64:	eba3 0306 	sub.w	r3, r3, r6
   1ff68:	930f      	str	r3, [sp, #60]	; 0x3c
   1ff6a:	f43f af29 	beq.w	1fdc0 <_svfprintf_r+0x1100>
   1ff6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ff70:	930e      	str	r3, [sp, #56]	; 0x38
   1ff72:	e732      	b.n	1fdda <_svfprintf_r+0x111a>
   1ff74:	2b00      	cmp	r3, #0
   1ff76:	f340 80af 	ble.w	200d8 <_svfprintf_r+0x1418>
   1ff7a:	9a06      	ldr	r2, [sp, #24]
   1ff7c:	2a00      	cmp	r2, #0
   1ff7e:	d16b      	bne.n	20058 <_svfprintf_r+0x1398>
   1ff80:	f01b 0f01 	tst.w	fp, #1
   1ff84:	d168      	bne.n	20058 <_svfprintf_r+0x1398>
   1ff86:	9304      	str	r3, [sp, #16]
   1ff88:	930a      	str	r3, [sp, #40]	; 0x28
   1ff8a:	e643      	b.n	1fc14 <_svfprintf_r+0xf54>
   1ff8c:	9b06      	ldr	r3, [sp, #24]
   1ff8e:	9304      	str	r3, [sp, #16]
   1ff90:	930a      	str	r3, [sp, #40]	; 0x28
   1ff92:	9006      	str	r0, [sp, #24]
   1ff94:	950b      	str	r5, [sp, #44]	; 0x2c
   1ff96:	f8cd b00c 	str.w	fp, [sp, #12]
   1ff9a:	900e      	str	r0, [sp, #56]	; 0x38
   1ff9c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1ffa0:	f7fe bfa6 	b.w	1eef0 <_svfprintf_r+0x230>
   1ffa4:	2000      	movs	r0, #0
   1ffa6:	9006      	str	r0, [sp, #24]
   1ffa8:	f7fe bee4 	b.w	1ed74 <_svfprintf_r+0xb4>
   1ffac:	424f      	negs	r7, r1
   1ffae:	3110      	adds	r1, #16
   1ffb0:	4d46      	ldr	r5, [pc, #280]	; (200cc <_svfprintf_r+0x140c>)
   1ffb2:	da2b      	bge.n	2000c <_svfprintf_r+0x134c>
   1ffb4:	2410      	movs	r4, #16
   1ffb6:	f8dd b020 	ldr.w	fp, [sp, #32]
   1ffba:	e004      	b.n	1ffc6 <_svfprintf_r+0x1306>
   1ffbc:	f108 0808 	add.w	r8, r8, #8
   1ffc0:	3f10      	subs	r7, #16
   1ffc2:	2f10      	cmp	r7, #16
   1ffc4:	dd22      	ble.n	2000c <_svfprintf_r+0x134c>
   1ffc6:	3301      	adds	r3, #1
   1ffc8:	3210      	adds	r2, #16
   1ffca:	2b07      	cmp	r3, #7
   1ffcc:	9225      	str	r2, [sp, #148]	; 0x94
   1ffce:	9324      	str	r3, [sp, #144]	; 0x90
   1ffd0:	f8c8 5000 	str.w	r5, [r8]
   1ffd4:	f8c8 4004 	str.w	r4, [r8, #4]
   1ffd8:	ddf0      	ble.n	1ffbc <_svfprintf_r+0x12fc>
   1ffda:	aa23      	add	r2, sp, #140	; 0x8c
   1ffdc:	9907      	ldr	r1, [sp, #28]
   1ffde:	4658      	mov	r0, fp
   1ffe0:	f002 f820 	bl	22024 <__ssprint_r>
   1ffe4:	2800      	cmp	r0, #0
   1ffe6:	f47e af3d 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   1ffea:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ffec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ffee:	46c8      	mov	r8, r9
   1fff0:	e7e6      	b.n	1ffc0 <_svfprintf_r+0x1300>
   1fff2:	aa23      	add	r2, sp, #140	; 0x8c
   1fff4:	9907      	ldr	r1, [sp, #28]
   1fff6:	9808      	ldr	r0, [sp, #32]
   1fff8:	f002 f814 	bl	22024 <__ssprint_r>
   1fffc:	2800      	cmp	r0, #0
   1fffe:	f47e af31 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   20002:	991d      	ldr	r1, [sp, #116]	; 0x74
   20004:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20006:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20008:	46c8      	mov	r8, r9
   2000a:	e65f      	b.n	1fccc <_svfprintf_r+0x100c>
   2000c:	3301      	adds	r3, #1
   2000e:	443a      	add	r2, r7
   20010:	2b07      	cmp	r3, #7
   20012:	e888 00a0 	stmia.w	r8, {r5, r7}
   20016:	9225      	str	r2, [sp, #148]	; 0x94
   20018:	9324      	str	r3, [sp, #144]	; 0x90
   2001a:	f108 0808 	add.w	r8, r8, #8
   2001e:	f77f ae58 	ble.w	1fcd2 <_svfprintf_r+0x1012>
   20022:	aa23      	add	r2, sp, #140	; 0x8c
   20024:	9907      	ldr	r1, [sp, #28]
   20026:	9808      	ldr	r0, [sp, #32]
   20028:	f001 fffc 	bl	22024 <__ssprint_r>
   2002c:	2800      	cmp	r0, #0
   2002e:	f47e af19 	bne.w	1ee64 <_svfprintf_r+0x1a4>
   20032:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20034:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20036:	46c8      	mov	r8, r9
   20038:	e64b      	b.n	1fcd2 <_svfprintf_r+0x1012>
   2003a:	3330      	adds	r3, #48	; 0x30
   2003c:	2230      	movs	r2, #48	; 0x30
   2003e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20042:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20046:	ab20      	add	r3, sp, #128	; 0x80
   20048:	e708      	b.n	1fe5c <_svfprintf_r+0x119c>
   2004a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2004c:	e5c3      	b.n	1fbd6 <_svfprintf_r+0xf16>
   2004e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20052:	4413      	add	r3, r2
   20054:	930a      	str	r3, [sp, #40]	; 0x28
   20056:	e76c      	b.n	1ff32 <_svfprintf_r+0x1272>
   20058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2005a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2005c:	4413      	add	r3, r2
   2005e:	9a06      	ldr	r2, [sp, #24]
   20060:	441a      	add	r2, r3
   20062:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20066:	920a      	str	r2, [sp, #40]	; 0x28
   20068:	9304      	str	r3, [sp, #16]
   2006a:	e5d3      	b.n	1fc14 <_svfprintf_r+0xf54>
   2006c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2006e:	4e18      	ldr	r6, [pc, #96]	; (200d0 <_svfprintf_r+0x1410>)
   20070:	2b00      	cmp	r3, #0
   20072:	bfb6      	itet	lt
   20074:	272d      	movlt	r7, #45	; 0x2d
   20076:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   2007a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   2007e:	4b15      	ldr	r3, [pc, #84]	; (200d4 <_svfprintf_r+0x1414>)
   20080:	f7ff ba1b 	b.w	1f4ba <_svfprintf_r+0x7fa>
   20084:	2200      	movs	r2, #0
   20086:	2300      	movs	r3, #0
   20088:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2008c:	f7fb feb6 	bl	1bdfc <__aeabi_dcmpeq>
   20090:	2800      	cmp	r0, #0
   20092:	f47f ae7a 	bne.w	1fd8a <_svfprintf_r+0x10ca>
   20096:	f1c5 0501 	rsb	r5, r5, #1
   2009a:	951d      	str	r5, [sp, #116]	; 0x74
   2009c:	442c      	add	r4, r5
   2009e:	e587      	b.n	1fbb0 <_svfprintf_r+0xef0>
   200a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   200a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   200a4:	f1c3 0301 	rsb	r3, r3, #1
   200a8:	441a      	add	r2, r3
   200aa:	4613      	mov	r3, r2
   200ac:	e7d2      	b.n	20054 <_svfprintf_r+0x1394>
   200ae:	f01b 0301 	ands.w	r3, fp, #1
   200b2:	930e      	str	r3, [sp, #56]	; 0x38
   200b4:	f47f aedb 	bne.w	1fe6e <_svfprintf_r+0x11ae>
   200b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   200ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   200be:	9304      	str	r3, [sp, #16]
   200c0:	e5a8      	b.n	1fc14 <_svfprintf_r+0xf54>
   200c2:	bf00      	nop
   200c4:	66666667 	.word	0x66666667
   200c8:	00024a30 	.word	0x00024a30
   200cc:	00024a4c 	.word	0x00024a4c
   200d0:	00024a04 	.word	0x00024a04
   200d4:	00024a00 	.word	0x00024a00
   200d8:	9b06      	ldr	r3, [sp, #24]
   200da:	b913      	cbnz	r3, 200e2 <_svfprintf_r+0x1422>
   200dc:	f01b 0f01 	tst.w	fp, #1
   200e0:	d002      	beq.n	200e8 <_svfprintf_r+0x1428>
   200e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   200e4:	3301      	adds	r3, #1
   200e6:	e7ba      	b.n	2005e <_svfprintf_r+0x139e>
   200e8:	2301      	movs	r3, #1
   200ea:	e74c      	b.n	1ff86 <_svfprintf_r+0x12c6>
   200ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   200ee:	f89a 3001 	ldrb.w	r3, [sl, #1]
   200f2:	6828      	ldr	r0, [r5, #0]
   200f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   200f8:	9006      	str	r0, [sp, #24]
   200fa:	4628      	mov	r0, r5
   200fc:	3004      	adds	r0, #4
   200fe:	46a2      	mov	sl, r4
   20100:	900b      	str	r0, [sp, #44]	; 0x2c
   20102:	f7fe be35 	b.w	1ed70 <_svfprintf_r+0xb0>
   20106:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2010a:	f7ff b852 	b.w	1f1b2 <_svfprintf_r+0x4f2>
   2010e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20112:	f7ff b8de 	b.w	1f2d2 <_svfprintf_r+0x612>
   20116:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2011a:	f7ff ba07 	b.w	1f52c <_svfprintf_r+0x86c>
   2011e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20122:	e69b      	b.n	1fe5c <_svfprintf_r+0x119c>
   20124:	9a08      	ldr	r2, [sp, #32]
   20126:	230c      	movs	r3, #12
   20128:	6013      	str	r3, [r2, #0]
   2012a:	f04f 33ff 	mov.w	r3, #4294967295
   2012e:	9305      	str	r3, [sp, #20]
   20130:	f7fe bea1 	b.w	1ee76 <_svfprintf_r+0x1b6>
   20134:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20138:	f7ff b986 	b.w	1f448 <_svfprintf_r+0x788>
   2013c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20140:	f7ff b962 	b.w	1f408 <_svfprintf_r+0x748>
   20144:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20148:	f7ff b945 	b.w	1f3d6 <_svfprintf_r+0x716>
   2014c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20150:	f7ff b8fe 	b.w	1f350 <_svfprintf_r+0x690>

00020154 <write>:
   20154:	b410      	push	{r4}
   20156:	4c04      	ldr	r4, [pc, #16]	; (20168 <write+0x14>)
   20158:	4613      	mov	r3, r2
   2015a:	460a      	mov	r2, r1
   2015c:	4601      	mov	r1, r0
   2015e:	6820      	ldr	r0, [r4, #0]
   20160:	f85d 4b04 	ldr.w	r4, [sp], #4
   20164:	f000 b8aa 	b.w	202bc <_write_r>
   20168:	200000f8 	.word	0x200000f8

0002016c <__utoa>:
   2016c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2016e:	f8df e078 	ldr.w	lr, [pc, #120]	; 201e8 <__utoa+0x7c>
   20172:	4616      	mov	r6, r2
   20174:	4604      	mov	r4, r0
   20176:	460f      	mov	r7, r1
   20178:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2017c:	b08b      	sub	sp, #44	; 0x2c
   2017e:	466d      	mov	r5, sp
   20180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20182:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20188:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2018c:	1eb3      	subs	r3, r6, #2
   2018e:	f845 0b04 	str.w	r0, [r5], #4
   20192:	2b22      	cmp	r3, #34	; 0x22
   20194:	7029      	strb	r1, [r5, #0]
   20196:	d822      	bhi.n	201de <__utoa+0x72>
   20198:	1e7d      	subs	r5, r7, #1
   2019a:	4628      	mov	r0, r5
   2019c:	2200      	movs	r2, #0
   2019e:	e000      	b.n	201a2 <__utoa+0x36>
   201a0:	461a      	mov	r2, r3
   201a2:	fbb4 f1f6 	udiv	r1, r4, r6
   201a6:	ab0a      	add	r3, sp, #40	; 0x28
   201a8:	fb06 4411 	mls	r4, r6, r1, r4
   201ac:	4423      	add	r3, r4
   201ae:	460c      	mov	r4, r1
   201b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   201b4:	f800 3f01 	strb.w	r3, [r0, #1]!
   201b8:	1c53      	adds	r3, r2, #1
   201ba:	2900      	cmp	r1, #0
   201bc:	d1f0      	bne.n	201a0 <__utoa+0x34>
   201be:	54f9      	strb	r1, [r7, r3]
   201c0:	18bb      	adds	r3, r7, r2
   201c2:	b14a      	cbz	r2, 201d8 <__utoa+0x6c>
   201c4:	7819      	ldrb	r1, [r3, #0]
   201c6:	7868      	ldrb	r0, [r5, #1]
   201c8:	f805 1f01 	strb.w	r1, [r5, #1]!
   201cc:	3401      	adds	r4, #1
   201ce:	1b11      	subs	r1, r2, r4
   201d0:	428c      	cmp	r4, r1
   201d2:	f803 0901 	strb.w	r0, [r3], #-1
   201d6:	dbf5      	blt.n	201c4 <__utoa+0x58>
   201d8:	4638      	mov	r0, r7
   201da:	b00b      	add	sp, #44	; 0x2c
   201dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   201de:	2000      	movs	r0, #0
   201e0:	7038      	strb	r0, [r7, #0]
   201e2:	b00b      	add	sp, #44	; 0x2c
   201e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   201e6:	bf00      	nop
   201e8:	00024a5c 	.word	0x00024a5c

000201ec <utoa>:
   201ec:	f7ff bfbe 	b.w	2016c <__utoa>

000201f0 <__swbuf_r>:
   201f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201f2:	460d      	mov	r5, r1
   201f4:	4614      	mov	r4, r2
   201f6:	4606      	mov	r6, r0
   201f8:	b110      	cbz	r0, 20200 <__swbuf_r+0x10>
   201fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   201fc:	2b00      	cmp	r3, #0
   201fe:	d04b      	beq.n	20298 <__swbuf_r+0xa8>
   20200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20204:	69a3      	ldr	r3, [r4, #24]
   20206:	60a3      	str	r3, [r4, #8]
   20208:	b291      	uxth	r1, r2
   2020a:	0708      	lsls	r0, r1, #28
   2020c:	d539      	bpl.n	20282 <__swbuf_r+0x92>
   2020e:	6923      	ldr	r3, [r4, #16]
   20210:	2b00      	cmp	r3, #0
   20212:	d036      	beq.n	20282 <__swbuf_r+0x92>
   20214:	b2ed      	uxtb	r5, r5
   20216:	0489      	lsls	r1, r1, #18
   20218:	462f      	mov	r7, r5
   2021a:	d515      	bpl.n	20248 <__swbuf_r+0x58>
   2021c:	6822      	ldr	r2, [r4, #0]
   2021e:	6961      	ldr	r1, [r4, #20]
   20220:	1ad3      	subs	r3, r2, r3
   20222:	428b      	cmp	r3, r1
   20224:	da1c      	bge.n	20260 <__swbuf_r+0x70>
   20226:	3301      	adds	r3, #1
   20228:	68a1      	ldr	r1, [r4, #8]
   2022a:	1c50      	adds	r0, r2, #1
   2022c:	3901      	subs	r1, #1
   2022e:	60a1      	str	r1, [r4, #8]
   20230:	6020      	str	r0, [r4, #0]
   20232:	7015      	strb	r5, [r2, #0]
   20234:	6962      	ldr	r2, [r4, #20]
   20236:	429a      	cmp	r2, r3
   20238:	d01a      	beq.n	20270 <__swbuf_r+0x80>
   2023a:	89a3      	ldrh	r3, [r4, #12]
   2023c:	07db      	lsls	r3, r3, #31
   2023e:	d501      	bpl.n	20244 <__swbuf_r+0x54>
   20240:	2d0a      	cmp	r5, #10
   20242:	d015      	beq.n	20270 <__swbuf_r+0x80>
   20244:	4638      	mov	r0, r7
   20246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20248:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2024a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2024e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   20252:	81a2      	strh	r2, [r4, #12]
   20254:	6822      	ldr	r2, [r4, #0]
   20256:	6661      	str	r1, [r4, #100]	; 0x64
   20258:	6961      	ldr	r1, [r4, #20]
   2025a:	1ad3      	subs	r3, r2, r3
   2025c:	428b      	cmp	r3, r1
   2025e:	dbe2      	blt.n	20226 <__swbuf_r+0x36>
   20260:	4621      	mov	r1, r4
   20262:	4630      	mov	r0, r6
   20264:	f001 f90e 	bl	21484 <_fflush_r>
   20268:	b940      	cbnz	r0, 2027c <__swbuf_r+0x8c>
   2026a:	6822      	ldr	r2, [r4, #0]
   2026c:	2301      	movs	r3, #1
   2026e:	e7db      	b.n	20228 <__swbuf_r+0x38>
   20270:	4621      	mov	r1, r4
   20272:	4630      	mov	r0, r6
   20274:	f001 f906 	bl	21484 <_fflush_r>
   20278:	2800      	cmp	r0, #0
   2027a:	d0e3      	beq.n	20244 <__swbuf_r+0x54>
   2027c:	f04f 37ff 	mov.w	r7, #4294967295
   20280:	e7e0      	b.n	20244 <__swbuf_r+0x54>
   20282:	4621      	mov	r1, r4
   20284:	4630      	mov	r0, r6
   20286:	f000 f82f 	bl	202e8 <__swsetup_r>
   2028a:	2800      	cmp	r0, #0
   2028c:	d1f6      	bne.n	2027c <__swbuf_r+0x8c>
   2028e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20292:	6923      	ldr	r3, [r4, #16]
   20294:	b291      	uxth	r1, r2
   20296:	e7bd      	b.n	20214 <__swbuf_r+0x24>
   20298:	f001 f94c 	bl	21534 <__sinit>
   2029c:	e7b0      	b.n	20200 <__swbuf_r+0x10>
   2029e:	bf00      	nop

000202a0 <__ascii_wctomb>:
   202a0:	b121      	cbz	r1, 202ac <__ascii_wctomb+0xc>
   202a2:	2aff      	cmp	r2, #255	; 0xff
   202a4:	d804      	bhi.n	202b0 <__ascii_wctomb+0x10>
   202a6:	700a      	strb	r2, [r1, #0]
   202a8:	2001      	movs	r0, #1
   202aa:	4770      	bx	lr
   202ac:	4608      	mov	r0, r1
   202ae:	4770      	bx	lr
   202b0:	238a      	movs	r3, #138	; 0x8a
   202b2:	6003      	str	r3, [r0, #0]
   202b4:	f04f 30ff 	mov.w	r0, #4294967295
   202b8:	4770      	bx	lr
   202ba:	bf00      	nop

000202bc <_write_r>:
   202bc:	b570      	push	{r4, r5, r6, lr}
   202be:	460d      	mov	r5, r1
   202c0:	4c08      	ldr	r4, [pc, #32]	; (202e4 <_write_r+0x28>)
   202c2:	4611      	mov	r1, r2
   202c4:	4606      	mov	r6, r0
   202c6:	461a      	mov	r2, r3
   202c8:	4628      	mov	r0, r5
   202ca:	2300      	movs	r3, #0
   202cc:	6023      	str	r3, [r4, #0]
   202ce:	f002 f933 	bl	22538 <_write>
   202d2:	1c43      	adds	r3, r0, #1
   202d4:	d000      	beq.n	202d8 <_write_r+0x1c>
   202d6:	bd70      	pop	{r4, r5, r6, pc}
   202d8:	6823      	ldr	r3, [r4, #0]
   202da:	2b00      	cmp	r3, #0
   202dc:	d0fb      	beq.n	202d6 <_write_r+0x1a>
   202de:	6033      	str	r3, [r6, #0]
   202e0:	bd70      	pop	{r4, r5, r6, pc}
   202e2:	bf00      	nop
   202e4:	2000239c 	.word	0x2000239c

000202e8 <__swsetup_r>:
   202e8:	b538      	push	{r3, r4, r5, lr}
   202ea:	4b30      	ldr	r3, [pc, #192]	; (203ac <__swsetup_r+0xc4>)
   202ec:	681b      	ldr	r3, [r3, #0]
   202ee:	4605      	mov	r5, r0
   202f0:	460c      	mov	r4, r1
   202f2:	b113      	cbz	r3, 202fa <__swsetup_r+0x12>
   202f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   202f6:	2a00      	cmp	r2, #0
   202f8:	d038      	beq.n	2036c <__swsetup_r+0x84>
   202fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   202fe:	b293      	uxth	r3, r2
   20300:	0718      	lsls	r0, r3, #28
   20302:	d50c      	bpl.n	2031e <__swsetup_r+0x36>
   20304:	6920      	ldr	r0, [r4, #16]
   20306:	b1a8      	cbz	r0, 20334 <__swsetup_r+0x4c>
   20308:	f013 0201 	ands.w	r2, r3, #1
   2030c:	d01e      	beq.n	2034c <__swsetup_r+0x64>
   2030e:	6963      	ldr	r3, [r4, #20]
   20310:	2200      	movs	r2, #0
   20312:	425b      	negs	r3, r3
   20314:	61a3      	str	r3, [r4, #24]
   20316:	60a2      	str	r2, [r4, #8]
   20318:	b1f0      	cbz	r0, 20358 <__swsetup_r+0x70>
   2031a:	2000      	movs	r0, #0
   2031c:	bd38      	pop	{r3, r4, r5, pc}
   2031e:	06d9      	lsls	r1, r3, #27
   20320:	d53c      	bpl.n	2039c <__swsetup_r+0xb4>
   20322:	0758      	lsls	r0, r3, #29
   20324:	d426      	bmi.n	20374 <__swsetup_r+0x8c>
   20326:	6920      	ldr	r0, [r4, #16]
   20328:	f042 0308 	orr.w	r3, r2, #8
   2032c:	81a3      	strh	r3, [r4, #12]
   2032e:	b29b      	uxth	r3, r3
   20330:	2800      	cmp	r0, #0
   20332:	d1e9      	bne.n	20308 <__swsetup_r+0x20>
   20334:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20338:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2033c:	d0e4      	beq.n	20308 <__swsetup_r+0x20>
   2033e:	4628      	mov	r0, r5
   20340:	4621      	mov	r1, r4
   20342:	f001 fae5 	bl	21910 <__smakebuf_r>
   20346:	89a3      	ldrh	r3, [r4, #12]
   20348:	6920      	ldr	r0, [r4, #16]
   2034a:	e7dd      	b.n	20308 <__swsetup_r+0x20>
   2034c:	0799      	lsls	r1, r3, #30
   2034e:	bf58      	it	pl
   20350:	6962      	ldrpl	r2, [r4, #20]
   20352:	60a2      	str	r2, [r4, #8]
   20354:	2800      	cmp	r0, #0
   20356:	d1e0      	bne.n	2031a <__swsetup_r+0x32>
   20358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2035c:	061a      	lsls	r2, r3, #24
   2035e:	d5dd      	bpl.n	2031c <__swsetup_r+0x34>
   20360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20364:	81a3      	strh	r3, [r4, #12]
   20366:	f04f 30ff 	mov.w	r0, #4294967295
   2036a:	bd38      	pop	{r3, r4, r5, pc}
   2036c:	4618      	mov	r0, r3
   2036e:	f001 f8e1 	bl	21534 <__sinit>
   20372:	e7c2      	b.n	202fa <__swsetup_r+0x12>
   20374:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20376:	b151      	cbz	r1, 2038e <__swsetup_r+0xa6>
   20378:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2037c:	4299      	cmp	r1, r3
   2037e:	d004      	beq.n	2038a <__swsetup_r+0xa2>
   20380:	4628      	mov	r0, r5
   20382:	f001 f979 	bl	21678 <_free_r>
   20386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2038a:	2300      	movs	r3, #0
   2038c:	6323      	str	r3, [r4, #48]	; 0x30
   2038e:	2300      	movs	r3, #0
   20390:	6920      	ldr	r0, [r4, #16]
   20392:	6063      	str	r3, [r4, #4]
   20394:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   20398:	6020      	str	r0, [r4, #0]
   2039a:	e7c5      	b.n	20328 <__swsetup_r+0x40>
   2039c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   203a0:	2309      	movs	r3, #9
   203a2:	602b      	str	r3, [r5, #0]
   203a4:	f04f 30ff 	mov.w	r0, #4294967295
   203a8:	81a2      	strh	r2, [r4, #12]
   203aa:	bd38      	pop	{r3, r4, r5, pc}
   203ac:	200000f8 	.word	0x200000f8

000203b0 <register_fini>:
   203b0:	4b02      	ldr	r3, [pc, #8]	; (203bc <register_fini+0xc>)
   203b2:	b113      	cbz	r3, 203ba <register_fini+0xa>
   203b4:	4802      	ldr	r0, [pc, #8]	; (203c0 <register_fini+0x10>)
   203b6:	f000 b805 	b.w	203c4 <atexit>
   203ba:	4770      	bx	lr
   203bc:	00000000 	.word	0x00000000
   203c0:	000215a5 	.word	0x000215a5

000203c4 <atexit>:
   203c4:	2300      	movs	r3, #0
   203c6:	4601      	mov	r1, r0
   203c8:	461a      	mov	r2, r3
   203ca:	4618      	mov	r0, r3
   203cc:	f001 bea8 	b.w	22120 <__register_exitproc>

000203d0 <quorem>:
   203d0:	6902      	ldr	r2, [r0, #16]
   203d2:	690b      	ldr	r3, [r1, #16]
   203d4:	4293      	cmp	r3, r2
   203d6:	f300 808d 	bgt.w	204f4 <quorem+0x124>
   203da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203de:	f103 38ff 	add.w	r8, r3, #4294967295
   203e2:	f101 0714 	add.w	r7, r1, #20
   203e6:	f100 0b14 	add.w	fp, r0, #20
   203ea:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   203ee:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   203f2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   203f6:	b083      	sub	sp, #12
   203f8:	3201      	adds	r2, #1
   203fa:	fbb3 f9f2 	udiv	r9, r3, r2
   203fe:	eb0b 0304 	add.w	r3, fp, r4
   20402:	9400      	str	r4, [sp, #0]
   20404:	eb07 0a04 	add.w	sl, r7, r4
   20408:	9301      	str	r3, [sp, #4]
   2040a:	f1b9 0f00 	cmp.w	r9, #0
   2040e:	d039      	beq.n	20484 <quorem+0xb4>
   20410:	2500      	movs	r5, #0
   20412:	462e      	mov	r6, r5
   20414:	46bc      	mov	ip, r7
   20416:	46de      	mov	lr, fp
   20418:	f85c 4b04 	ldr.w	r4, [ip], #4
   2041c:	f8de 3000 	ldr.w	r3, [lr]
   20420:	b2a2      	uxth	r2, r4
   20422:	fb09 5502 	mla	r5, r9, r2, r5
   20426:	0c22      	lsrs	r2, r4, #16
   20428:	0c2c      	lsrs	r4, r5, #16
   2042a:	fb09 4202 	mla	r2, r9, r2, r4
   2042e:	b2ad      	uxth	r5, r5
   20430:	1b75      	subs	r5, r6, r5
   20432:	b296      	uxth	r6, r2
   20434:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20438:	fa15 f383 	uxtah	r3, r5, r3
   2043c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20440:	b29b      	uxth	r3, r3
   20442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20446:	45e2      	cmp	sl, ip
   20448:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2044c:	f84e 3b04 	str.w	r3, [lr], #4
   20450:	ea4f 4626 	mov.w	r6, r6, asr #16
   20454:	d2e0      	bcs.n	20418 <quorem+0x48>
   20456:	9b00      	ldr	r3, [sp, #0]
   20458:	f85b 3003 	ldr.w	r3, [fp, r3]
   2045c:	b993      	cbnz	r3, 20484 <quorem+0xb4>
   2045e:	9c01      	ldr	r4, [sp, #4]
   20460:	1f23      	subs	r3, r4, #4
   20462:	459b      	cmp	fp, r3
   20464:	d20c      	bcs.n	20480 <quorem+0xb0>
   20466:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2046a:	b94b      	cbnz	r3, 20480 <quorem+0xb0>
   2046c:	f1a4 0308 	sub.w	r3, r4, #8
   20470:	e002      	b.n	20478 <quorem+0xa8>
   20472:	681a      	ldr	r2, [r3, #0]
   20474:	3b04      	subs	r3, #4
   20476:	b91a      	cbnz	r2, 20480 <quorem+0xb0>
   20478:	459b      	cmp	fp, r3
   2047a:	f108 38ff 	add.w	r8, r8, #4294967295
   2047e:	d3f8      	bcc.n	20472 <quorem+0xa2>
   20480:	f8c0 8010 	str.w	r8, [r0, #16]
   20484:	4604      	mov	r4, r0
   20486:	f001 fc8b 	bl	21da0 <__mcmp>
   2048a:	2800      	cmp	r0, #0
   2048c:	db2e      	blt.n	204ec <quorem+0x11c>
   2048e:	f109 0901 	add.w	r9, r9, #1
   20492:	465d      	mov	r5, fp
   20494:	2300      	movs	r3, #0
   20496:	f857 1b04 	ldr.w	r1, [r7], #4
   2049a:	6828      	ldr	r0, [r5, #0]
   2049c:	b28a      	uxth	r2, r1
   2049e:	1a9a      	subs	r2, r3, r2
   204a0:	0c0b      	lsrs	r3, r1, #16
   204a2:	fa12 f280 	uxtah	r2, r2, r0
   204a6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   204aa:	eb03 4322 	add.w	r3, r3, r2, asr #16
   204ae:	b292      	uxth	r2, r2
   204b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   204b4:	45ba      	cmp	sl, r7
   204b6:	f845 2b04 	str.w	r2, [r5], #4
   204ba:	ea4f 4323 	mov.w	r3, r3, asr #16
   204be:	d2ea      	bcs.n	20496 <quorem+0xc6>
   204c0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   204c4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   204c8:	b982      	cbnz	r2, 204ec <quorem+0x11c>
   204ca:	1f1a      	subs	r2, r3, #4
   204cc:	4593      	cmp	fp, r2
   204ce:	d20b      	bcs.n	204e8 <quorem+0x118>
   204d0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   204d4:	b942      	cbnz	r2, 204e8 <quorem+0x118>
   204d6:	3b08      	subs	r3, #8
   204d8:	e002      	b.n	204e0 <quorem+0x110>
   204da:	681a      	ldr	r2, [r3, #0]
   204dc:	3b04      	subs	r3, #4
   204de:	b91a      	cbnz	r2, 204e8 <quorem+0x118>
   204e0:	459b      	cmp	fp, r3
   204e2:	f108 38ff 	add.w	r8, r8, #4294967295
   204e6:	d3f8      	bcc.n	204da <quorem+0x10a>
   204e8:	f8c4 8010 	str.w	r8, [r4, #16]
   204ec:	4648      	mov	r0, r9
   204ee:	b003      	add	sp, #12
   204f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204f4:	2000      	movs	r0, #0
   204f6:	4770      	bx	lr

000204f8 <_dtoa_r>:
   204f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204fc:	ec57 6b10 	vmov	r6, r7, d0
   20500:	b097      	sub	sp, #92	; 0x5c
   20502:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20504:	9102      	str	r1, [sp, #8]
   20506:	4604      	mov	r4, r0
   20508:	4693      	mov	fp, r2
   2050a:	9303      	str	r3, [sp, #12]
   2050c:	e9cd 6700 	strd	r6, r7, [sp]
   20510:	b14d      	cbz	r5, 20526 <_dtoa_r+0x2e>
   20512:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20514:	606a      	str	r2, [r5, #4]
   20516:	2301      	movs	r3, #1
   20518:	4093      	lsls	r3, r2
   2051a:	60ab      	str	r3, [r5, #8]
   2051c:	4629      	mov	r1, r5
   2051e:	f001 fa67 	bl	219f0 <_Bfree>
   20522:	2300      	movs	r3, #0
   20524:	6423      	str	r3, [r4, #64]	; 0x40
   20526:	e9dd 2300 	ldrd	r2, r3, [sp]
   2052a:	2b00      	cmp	r3, #0
   2052c:	4699      	mov	r9, r3
   2052e:	db38      	blt.n	205a2 <_dtoa_r+0xaa>
   20530:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20532:	2300      	movs	r3, #0
   20534:	6013      	str	r3, [r2, #0]
   20536:	4ba0      	ldr	r3, [pc, #640]	; (207b8 <_dtoa_r+0x2c0>)
   20538:	ea33 0309 	bics.w	r3, r3, r9
   2053c:	d017      	beq.n	2056e <_dtoa_r+0x76>
   2053e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20542:	2200      	movs	r2, #0
   20544:	2300      	movs	r3, #0
   20546:	4630      	mov	r0, r6
   20548:	4639      	mov	r1, r7
   2054a:	f7fb fc57 	bl	1bdfc <__aeabi_dcmpeq>
   2054e:	4680      	mov	r8, r0
   20550:	2800      	cmp	r0, #0
   20552:	d02f      	beq.n	205b4 <_dtoa_r+0xbc>
   20554:	9a03      	ldr	r2, [sp, #12]
   20556:	2301      	movs	r3, #1
   20558:	6013      	str	r3, [r2, #0]
   2055a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2055c:	2b00      	cmp	r3, #0
   2055e:	f000 80c4 	beq.w	206ea <_dtoa_r+0x1f2>
   20562:	4896      	ldr	r0, [pc, #600]	; (207bc <_dtoa_r+0x2c4>)
   20564:	6018      	str	r0, [r3, #0]
   20566:	3801      	subs	r0, #1
   20568:	b017      	add	sp, #92	; 0x5c
   2056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2056e:	9a03      	ldr	r2, [sp, #12]
   20570:	f242 730f 	movw	r3, #9999	; 0x270f
   20574:	6013      	str	r3, [r2, #0]
   20576:	9b00      	ldr	r3, [sp, #0]
   20578:	b96b      	cbnz	r3, 20596 <_dtoa_r+0x9e>
   2057a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2057e:	b953      	cbnz	r3, 20596 <_dtoa_r+0x9e>
   20580:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20582:	488f      	ldr	r0, [pc, #572]	; (207c0 <_dtoa_r+0x2c8>)
   20584:	2b00      	cmp	r3, #0
   20586:	d0ef      	beq.n	20568 <_dtoa_r+0x70>
   20588:	f100 0308 	add.w	r3, r0, #8
   2058c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2058e:	6013      	str	r3, [r2, #0]
   20590:	b017      	add	sp, #92	; 0x5c
   20592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20596:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20598:	488a      	ldr	r0, [pc, #552]	; (207c4 <_dtoa_r+0x2cc>)
   2059a:	2b00      	cmp	r3, #0
   2059c:	d0e4      	beq.n	20568 <_dtoa_r+0x70>
   2059e:	1cc3      	adds	r3, r0, #3
   205a0:	e7f4      	b.n	2058c <_dtoa_r+0x94>
   205a2:	9a01      	ldr	r2, [sp, #4]
   205a4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   205a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   205aa:	f8cd 9004 	str.w	r9, [sp, #4]
   205ae:	2301      	movs	r3, #1
   205b0:	6013      	str	r3, [r2, #0]
   205b2:	e7c0      	b.n	20536 <_dtoa_r+0x3e>
   205b4:	aa14      	add	r2, sp, #80	; 0x50
   205b6:	a915      	add	r1, sp, #84	; 0x54
   205b8:	ec47 6b10 	vmov	d0, r6, r7
   205bc:	4620      	mov	r0, r4
   205be:	f001 fc8f 	bl	21ee0 <__d2b>
   205c2:	ea5f 5519 	movs.w	r5, r9, lsr #20
   205c6:	4682      	mov	sl, r0
   205c8:	d073      	beq.n	206b2 <_dtoa_r+0x1ba>
   205ca:	f3c7 0313 	ubfx	r3, r7, #0, #20
   205ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   205d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   205d6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   205da:	4630      	mov	r0, r6
   205dc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   205e0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   205e4:	2200      	movs	r2, #0
   205e6:	4b78      	ldr	r3, [pc, #480]	; (207c8 <_dtoa_r+0x2d0>)
   205e8:	f7fa ffec 	bl	1b5c4 <__aeabi_dsub>
   205ec:	a36c      	add	r3, pc, #432	; (adr r3, 207a0 <_dtoa_r+0x2a8>)
   205ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   205f2:	f7fb f99b 	bl	1b92c <__aeabi_dmul>
   205f6:	a36c      	add	r3, pc, #432	; (adr r3, 207a8 <_dtoa_r+0x2b0>)
   205f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   205fc:	f7fa ffe4 	bl	1b5c8 <__adddf3>
   20600:	4606      	mov	r6, r0
   20602:	4628      	mov	r0, r5
   20604:	460f      	mov	r7, r1
   20606:	f7fb f92b 	bl	1b860 <__aeabi_i2d>
   2060a:	a369      	add	r3, pc, #420	; (adr r3, 207b0 <_dtoa_r+0x2b8>)
   2060c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20610:	f7fb f98c 	bl	1b92c <__aeabi_dmul>
   20614:	4602      	mov	r2, r0
   20616:	460b      	mov	r3, r1
   20618:	4630      	mov	r0, r6
   2061a:	4639      	mov	r1, r7
   2061c:	f7fa ffd4 	bl	1b5c8 <__adddf3>
   20620:	4606      	mov	r6, r0
   20622:	460f      	mov	r7, r1
   20624:	f7fb fc1c 	bl	1be60 <__aeabi_d2iz>
   20628:	2200      	movs	r2, #0
   2062a:	9004      	str	r0, [sp, #16]
   2062c:	2300      	movs	r3, #0
   2062e:	4630      	mov	r0, r6
   20630:	4639      	mov	r1, r7
   20632:	f7fb fbed 	bl	1be10 <__aeabi_dcmplt>
   20636:	2800      	cmp	r0, #0
   20638:	f040 816f 	bne.w	2091a <_dtoa_r+0x422>
   2063c:	9e04      	ldr	r6, [sp, #16]
   2063e:	2e16      	cmp	r6, #22
   20640:	f200 8159 	bhi.w	208f6 <_dtoa_r+0x3fe>
   20644:	4b61      	ldr	r3, [pc, #388]	; (207cc <_dtoa_r+0x2d4>)
   20646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2064a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2064e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20652:	f7fb fbfb 	bl	1be4c <__aeabi_dcmpgt>
   20656:	2800      	cmp	r0, #0
   20658:	f000 81c4 	beq.w	209e4 <_dtoa_r+0x4ec>
   2065c:	1e73      	subs	r3, r6, #1
   2065e:	9304      	str	r3, [sp, #16]
   20660:	2300      	movs	r3, #0
   20662:	930c      	str	r3, [sp, #48]	; 0x30
   20664:	eba8 0505 	sub.w	r5, r8, r5
   20668:	1e6b      	subs	r3, r5, #1
   2066a:	9305      	str	r3, [sp, #20]
   2066c:	f100 814f 	bmi.w	2090e <_dtoa_r+0x416>
   20670:	2300      	movs	r3, #0
   20672:	9306      	str	r3, [sp, #24]
   20674:	9b04      	ldr	r3, [sp, #16]
   20676:	2b00      	cmp	r3, #0
   20678:	f2c0 8140 	blt.w	208fc <_dtoa_r+0x404>
   2067c:	9a05      	ldr	r2, [sp, #20]
   2067e:	930b      	str	r3, [sp, #44]	; 0x2c
   20680:	4611      	mov	r1, r2
   20682:	4419      	add	r1, r3
   20684:	2300      	movs	r3, #0
   20686:	9105      	str	r1, [sp, #20]
   20688:	930a      	str	r3, [sp, #40]	; 0x28
   2068a:	9b02      	ldr	r3, [sp, #8]
   2068c:	2b09      	cmp	r3, #9
   2068e:	d82e      	bhi.n	206ee <_dtoa_r+0x1f6>
   20690:	2b05      	cmp	r3, #5
   20692:	f340 8651 	ble.w	21338 <_dtoa_r+0xe40>
   20696:	3b04      	subs	r3, #4
   20698:	9302      	str	r3, [sp, #8]
   2069a:	2700      	movs	r7, #0
   2069c:	9b02      	ldr	r3, [sp, #8]
   2069e:	3b02      	subs	r3, #2
   206a0:	2b03      	cmp	r3, #3
   206a2:	f200 8633 	bhi.w	2130c <_dtoa_r+0xe14>
   206a6:	e8df f013 	tbh	[pc, r3, lsl #1]
   206aa:	03d6      	.short	0x03d6
   206ac:	03e302cb 	.word	0x03e302cb
   206b0:	0464      	.short	0x0464
   206b2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   206b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   206b8:	4445      	add	r5, r8
   206ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
   206be:	2b20      	cmp	r3, #32
   206c0:	f340 818a 	ble.w	209d8 <_dtoa_r+0x4e0>
   206c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   206c8:	fa09 f903 	lsl.w	r9, r9, r3
   206cc:	9b00      	ldr	r3, [sp, #0]
   206ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
   206d2:	fa23 f000 	lsr.w	r0, r3, r0
   206d6:	ea40 0009 	orr.w	r0, r0, r9
   206da:	f7fb f8b1 	bl	1b840 <__aeabi_ui2d>
   206de:	2301      	movs	r3, #1
   206e0:	3d01      	subs	r5, #1
   206e2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   206e6:	9310      	str	r3, [sp, #64]	; 0x40
   206e8:	e77c      	b.n	205e4 <_dtoa_r+0xec>
   206ea:	4839      	ldr	r0, [pc, #228]	; (207d0 <_dtoa_r+0x2d8>)
   206ec:	e73c      	b.n	20568 <_dtoa_r+0x70>
   206ee:	2100      	movs	r1, #0
   206f0:	6461      	str	r1, [r4, #68]	; 0x44
   206f2:	4620      	mov	r0, r4
   206f4:	468b      	mov	fp, r1
   206f6:	f001 f955 	bl	219a4 <_Balloc>
   206fa:	f04f 33ff 	mov.w	r3, #4294967295
   206fe:	9308      	str	r3, [sp, #32]
   20700:	930d      	str	r3, [sp, #52]	; 0x34
   20702:	2301      	movs	r3, #1
   20704:	9007      	str	r0, [sp, #28]
   20706:	6420      	str	r0, [r4, #64]	; 0x40
   20708:	f8cd b008 	str.w	fp, [sp, #8]
   2070c:	9309      	str	r3, [sp, #36]	; 0x24
   2070e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20710:	2b00      	cmp	r3, #0
   20712:	f2c0 80d0 	blt.w	208b6 <_dtoa_r+0x3be>
   20716:	9a04      	ldr	r2, [sp, #16]
   20718:	2a0e      	cmp	r2, #14
   2071a:	f300 80cc 	bgt.w	208b6 <_dtoa_r+0x3be>
   2071e:	4b2b      	ldr	r3, [pc, #172]	; (207cc <_dtoa_r+0x2d4>)
   20720:	f1bb 0f00 	cmp.w	fp, #0
   20724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20728:	e9d3 8900 	ldrd	r8, r9, [r3]
   2072c:	f2c0 83be 	blt.w	20eac <_dtoa_r+0x9b4>
   20730:	e9dd 6700 	ldrd	r6, r7, [sp]
   20734:	4642      	mov	r2, r8
   20736:	464b      	mov	r3, r9
   20738:	4630      	mov	r0, r6
   2073a:	4639      	mov	r1, r7
   2073c:	f7fb fa20 	bl	1bb80 <__aeabi_ddiv>
   20740:	f7fb fb8e 	bl	1be60 <__aeabi_d2iz>
   20744:	4683      	mov	fp, r0
   20746:	f7fb f88b 	bl	1b860 <__aeabi_i2d>
   2074a:	4642      	mov	r2, r8
   2074c:	464b      	mov	r3, r9
   2074e:	f7fb f8ed 	bl	1b92c <__aeabi_dmul>
   20752:	460b      	mov	r3, r1
   20754:	4602      	mov	r2, r0
   20756:	4639      	mov	r1, r7
   20758:	4630      	mov	r0, r6
   2075a:	f7fa ff33 	bl	1b5c4 <__aeabi_dsub>
   2075e:	9d07      	ldr	r5, [sp, #28]
   20760:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20764:	702b      	strb	r3, [r5, #0]
   20766:	9b08      	ldr	r3, [sp, #32]
   20768:	2b01      	cmp	r3, #1
   2076a:	4606      	mov	r6, r0
   2076c:	460f      	mov	r7, r1
   2076e:	f105 0501 	add.w	r5, r5, #1
   20772:	d061      	beq.n	20838 <_dtoa_r+0x340>
   20774:	2200      	movs	r2, #0
   20776:	4b17      	ldr	r3, [pc, #92]	; (207d4 <_dtoa_r+0x2dc>)
   20778:	f7fb f8d8 	bl	1b92c <__aeabi_dmul>
   2077c:	2200      	movs	r2, #0
   2077e:	2300      	movs	r3, #0
   20780:	4606      	mov	r6, r0
   20782:	460f      	mov	r7, r1
   20784:	f7fb fb3a 	bl	1bdfc <__aeabi_dcmpeq>
   20788:	2800      	cmp	r0, #0
   2078a:	f040 8081 	bne.w	20890 <_dtoa_r+0x398>
   2078e:	f8cd a000 	str.w	sl, [sp]
   20792:	9402      	str	r4, [sp, #8]
   20794:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20798:	9c08      	ldr	r4, [sp, #32]
   2079a:	e028      	b.n	207ee <_dtoa_r+0x2f6>
   2079c:	f3af 8000 	nop.w
   207a0:	636f4361 	.word	0x636f4361
   207a4:	3fd287a7 	.word	0x3fd287a7
   207a8:	8b60c8b3 	.word	0x8b60c8b3
   207ac:	3fc68a28 	.word	0x3fc68a28
   207b0:	509f79fb 	.word	0x509f79fb
   207b4:	3fd34413 	.word	0x3fd34413
   207b8:	7ff00000 	.word	0x7ff00000
   207bc:	00024a39 	.word	0x00024a39
   207c0:	00024b88 	.word	0x00024b88
   207c4:	00024b94 	.word	0x00024b94
   207c8:	3ff80000 	.word	0x3ff80000
   207cc:	00024bc0 	.word	0x00024bc0
   207d0:	00024a38 	.word	0x00024a38
   207d4:	40240000 	.word	0x40240000
   207d8:	f7fb f8a8 	bl	1b92c <__aeabi_dmul>
   207dc:	2200      	movs	r2, #0
   207de:	2300      	movs	r3, #0
   207e0:	4606      	mov	r6, r0
   207e2:	460f      	mov	r7, r1
   207e4:	f7fb fb0a 	bl	1bdfc <__aeabi_dcmpeq>
   207e8:	2800      	cmp	r0, #0
   207ea:	f040 83c5 	bne.w	20f78 <_dtoa_r+0xa80>
   207ee:	4642      	mov	r2, r8
   207f0:	464b      	mov	r3, r9
   207f2:	4630      	mov	r0, r6
   207f4:	4639      	mov	r1, r7
   207f6:	f7fb f9c3 	bl	1bb80 <__aeabi_ddiv>
   207fa:	f7fb fb31 	bl	1be60 <__aeabi_d2iz>
   207fe:	4683      	mov	fp, r0
   20800:	f7fb f82e 	bl	1b860 <__aeabi_i2d>
   20804:	4642      	mov	r2, r8
   20806:	464b      	mov	r3, r9
   20808:	f7fb f890 	bl	1b92c <__aeabi_dmul>
   2080c:	4602      	mov	r2, r0
   2080e:	460b      	mov	r3, r1
   20810:	4630      	mov	r0, r6
   20812:	4639      	mov	r1, r7
   20814:	f7fa fed6 	bl	1b5c4 <__aeabi_dsub>
   20818:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   2081c:	f805 eb01 	strb.w	lr, [r5], #1
   20820:	eba5 0e0a 	sub.w	lr, r5, sl
   20824:	45a6      	cmp	lr, r4
   20826:	4606      	mov	r6, r0
   20828:	460f      	mov	r7, r1
   2082a:	f04f 0200 	mov.w	r2, #0
   2082e:	4b6e      	ldr	r3, [pc, #440]	; (209e8 <_dtoa_r+0x4f0>)
   20830:	d1d2      	bne.n	207d8 <_dtoa_r+0x2e0>
   20832:	f8dd a000 	ldr.w	sl, [sp]
   20836:	9c02      	ldr	r4, [sp, #8]
   20838:	4632      	mov	r2, r6
   2083a:	463b      	mov	r3, r7
   2083c:	4630      	mov	r0, r6
   2083e:	4639      	mov	r1, r7
   20840:	f7fa fec2 	bl	1b5c8 <__adddf3>
   20844:	4606      	mov	r6, r0
   20846:	460f      	mov	r7, r1
   20848:	4602      	mov	r2, r0
   2084a:	460b      	mov	r3, r1
   2084c:	4640      	mov	r0, r8
   2084e:	4649      	mov	r1, r9
   20850:	f7fb fade 	bl	1be10 <__aeabi_dcmplt>
   20854:	b948      	cbnz	r0, 2086a <_dtoa_r+0x372>
   20856:	4632      	mov	r2, r6
   20858:	463b      	mov	r3, r7
   2085a:	4640      	mov	r0, r8
   2085c:	4649      	mov	r1, r9
   2085e:	f7fb facd 	bl	1bdfc <__aeabi_dcmpeq>
   20862:	b1a8      	cbz	r0, 20890 <_dtoa_r+0x398>
   20864:	f01b 0f01 	tst.w	fp, #1
   20868:	d012      	beq.n	20890 <_dtoa_r+0x398>
   2086a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2086e:	9a07      	ldr	r2, [sp, #28]
   20870:	1e6b      	subs	r3, r5, #1
   20872:	e004      	b.n	2087e <_dtoa_r+0x386>
   20874:	429a      	cmp	r2, r3
   20876:	f000 842d 	beq.w	210d4 <_dtoa_r+0xbdc>
   2087a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2087e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20882:	f103 0501 	add.w	r5, r3, #1
   20886:	d0f5      	beq.n	20874 <_dtoa_r+0x37c>
   20888:	f108 0801 	add.w	r8, r8, #1
   2088c:	f883 8000 	strb.w	r8, [r3]
   20890:	4651      	mov	r1, sl
   20892:	4620      	mov	r0, r4
   20894:	f001 f8ac 	bl	219f0 <_Bfree>
   20898:	2200      	movs	r2, #0
   2089a:	9b04      	ldr	r3, [sp, #16]
   2089c:	702a      	strb	r2, [r5, #0]
   2089e:	9a03      	ldr	r2, [sp, #12]
   208a0:	3301      	adds	r3, #1
   208a2:	6013      	str	r3, [r2, #0]
   208a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   208a6:	2b00      	cmp	r3, #0
   208a8:	f000 83a3 	beq.w	20ff2 <_dtoa_r+0xafa>
   208ac:	9807      	ldr	r0, [sp, #28]
   208ae:	601d      	str	r5, [r3, #0]
   208b0:	b017      	add	sp, #92	; 0x5c
   208b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   208b8:	2a00      	cmp	r2, #0
   208ba:	d040      	beq.n	2093e <_dtoa_r+0x446>
   208bc:	9a02      	ldr	r2, [sp, #8]
   208be:	2a01      	cmp	r2, #1
   208c0:	f340 831c 	ble.w	20efc <_dtoa_r+0xa04>
   208c4:	9b08      	ldr	r3, [sp, #32]
   208c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   208c8:	1e5f      	subs	r7, r3, #1
   208ca:	42ba      	cmp	r2, r7
   208cc:	f2c0 8394 	blt.w	20ff8 <_dtoa_r+0xb00>
   208d0:	1bd7      	subs	r7, r2, r7
   208d2:	9b08      	ldr	r3, [sp, #32]
   208d4:	2b00      	cmp	r3, #0
   208d6:	f2c0 847e 	blt.w	211d6 <_dtoa_r+0xcde>
   208da:	9d06      	ldr	r5, [sp, #24]
   208dc:	9b08      	ldr	r3, [sp, #32]
   208de:	9a06      	ldr	r2, [sp, #24]
   208e0:	441a      	add	r2, r3
   208e2:	9206      	str	r2, [sp, #24]
   208e4:	9a05      	ldr	r2, [sp, #20]
   208e6:	2101      	movs	r1, #1
   208e8:	441a      	add	r2, r3
   208ea:	4620      	mov	r0, r4
   208ec:	9205      	str	r2, [sp, #20]
   208ee:	f001 f919 	bl	21b24 <__i2b>
   208f2:	4606      	mov	r6, r0
   208f4:	e026      	b.n	20944 <_dtoa_r+0x44c>
   208f6:	2301      	movs	r3, #1
   208f8:	930c      	str	r3, [sp, #48]	; 0x30
   208fa:	e6b3      	b.n	20664 <_dtoa_r+0x16c>
   208fc:	9a06      	ldr	r2, [sp, #24]
   208fe:	9b04      	ldr	r3, [sp, #16]
   20900:	1ad2      	subs	r2, r2, r3
   20902:	425b      	negs	r3, r3
   20904:	930a      	str	r3, [sp, #40]	; 0x28
   20906:	2300      	movs	r3, #0
   20908:	9206      	str	r2, [sp, #24]
   2090a:	930b      	str	r3, [sp, #44]	; 0x2c
   2090c:	e6bd      	b.n	2068a <_dtoa_r+0x192>
   2090e:	f1c5 0301 	rsb	r3, r5, #1
   20912:	9306      	str	r3, [sp, #24]
   20914:	2300      	movs	r3, #0
   20916:	9305      	str	r3, [sp, #20]
   20918:	e6ac      	b.n	20674 <_dtoa_r+0x17c>
   2091a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2091e:	4648      	mov	r0, r9
   20920:	f7fa ff9e 	bl	1b860 <__aeabi_i2d>
   20924:	4602      	mov	r2, r0
   20926:	460b      	mov	r3, r1
   20928:	4630      	mov	r0, r6
   2092a:	4639      	mov	r1, r7
   2092c:	f7fb fa66 	bl	1bdfc <__aeabi_dcmpeq>
   20930:	2800      	cmp	r0, #0
   20932:	f47f ae83 	bne.w	2063c <_dtoa_r+0x144>
   20936:	f109 33ff 	add.w	r3, r9, #4294967295
   2093a:	9304      	str	r3, [sp, #16]
   2093c:	e67e      	b.n	2063c <_dtoa_r+0x144>
   2093e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20940:	9d06      	ldr	r5, [sp, #24]
   20942:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20944:	2d00      	cmp	r5, #0
   20946:	dd0c      	ble.n	20962 <_dtoa_r+0x46a>
   20948:	9905      	ldr	r1, [sp, #20]
   2094a:	2900      	cmp	r1, #0
   2094c:	460b      	mov	r3, r1
   2094e:	dd08      	ble.n	20962 <_dtoa_r+0x46a>
   20950:	42a9      	cmp	r1, r5
   20952:	9a06      	ldr	r2, [sp, #24]
   20954:	bfa8      	it	ge
   20956:	462b      	movge	r3, r5
   20958:	1ad2      	subs	r2, r2, r3
   2095a:	1aed      	subs	r5, r5, r3
   2095c:	1acb      	subs	r3, r1, r3
   2095e:	9206      	str	r2, [sp, #24]
   20960:	9305      	str	r3, [sp, #20]
   20962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20964:	b1d3      	cbz	r3, 2099c <_dtoa_r+0x4a4>
   20966:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20968:	2b00      	cmp	r3, #0
   2096a:	f000 82c0 	beq.w	20eee <_dtoa_r+0x9f6>
   2096e:	2f00      	cmp	r7, #0
   20970:	dd10      	ble.n	20994 <_dtoa_r+0x49c>
   20972:	4631      	mov	r1, r6
   20974:	463a      	mov	r2, r7
   20976:	4620      	mov	r0, r4
   20978:	f001 f970 	bl	21c5c <__pow5mult>
   2097c:	4652      	mov	r2, sl
   2097e:	4601      	mov	r1, r0
   20980:	4606      	mov	r6, r0
   20982:	4620      	mov	r0, r4
   20984:	f001 f8d8 	bl	21b38 <__multiply>
   20988:	4651      	mov	r1, sl
   2098a:	4680      	mov	r8, r0
   2098c:	4620      	mov	r0, r4
   2098e:	f001 f82f 	bl	219f0 <_Bfree>
   20992:	46c2      	mov	sl, r8
   20994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20996:	1bda      	subs	r2, r3, r7
   20998:	f040 82aa 	bne.w	20ef0 <_dtoa_r+0x9f8>
   2099c:	2101      	movs	r1, #1
   2099e:	4620      	mov	r0, r4
   209a0:	f001 f8c0 	bl	21b24 <__i2b>
   209a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   209a6:	2b00      	cmp	r3, #0
   209a8:	4681      	mov	r9, r0
   209aa:	dd1f      	ble.n	209ec <_dtoa_r+0x4f4>
   209ac:	4601      	mov	r1, r0
   209ae:	461a      	mov	r2, r3
   209b0:	4620      	mov	r0, r4
   209b2:	f001 f953 	bl	21c5c <__pow5mult>
   209b6:	9b02      	ldr	r3, [sp, #8]
   209b8:	2b01      	cmp	r3, #1
   209ba:	4681      	mov	r9, r0
   209bc:	f340 825b 	ble.w	20e76 <_dtoa_r+0x97e>
   209c0:	f04f 0800 	mov.w	r8, #0
   209c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   209c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   209cc:	6918      	ldr	r0, [r3, #16]
   209ce:	f001 f859 	bl	21a84 <__hi0bits>
   209d2:	f1c0 0020 	rsb	r0, r0, #32
   209d6:	e013      	b.n	20a00 <_dtoa_r+0x508>
   209d8:	f1c3 0920 	rsb	r9, r3, #32
   209dc:	9b00      	ldr	r3, [sp, #0]
   209de:	fa03 f009 	lsl.w	r0, r3, r9
   209e2:	e67a      	b.n	206da <_dtoa_r+0x1e2>
   209e4:	900c      	str	r0, [sp, #48]	; 0x30
   209e6:	e63d      	b.n	20664 <_dtoa_r+0x16c>
   209e8:	40240000 	.word	0x40240000
   209ec:	9b02      	ldr	r3, [sp, #8]
   209ee:	2b01      	cmp	r3, #1
   209f0:	f340 828d 	ble.w	20f0e <_dtoa_r+0xa16>
   209f4:	f04f 0800 	mov.w	r8, #0
   209f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   209fa:	2001      	movs	r0, #1
   209fc:	2b00      	cmp	r3, #0
   209fe:	d1e1      	bne.n	209c4 <_dtoa_r+0x4cc>
   20a00:	9a05      	ldr	r2, [sp, #20]
   20a02:	4410      	add	r0, r2
   20a04:	f010 001f 	ands.w	r0, r0, #31
   20a08:	f000 80a1 	beq.w	20b4e <_dtoa_r+0x656>
   20a0c:	f1c0 0320 	rsb	r3, r0, #32
   20a10:	2b04      	cmp	r3, #4
   20a12:	f340 848c 	ble.w	2132e <_dtoa_r+0xe36>
   20a16:	9b06      	ldr	r3, [sp, #24]
   20a18:	f1c0 001c 	rsb	r0, r0, #28
   20a1c:	4403      	add	r3, r0
   20a1e:	9306      	str	r3, [sp, #24]
   20a20:	4613      	mov	r3, r2
   20a22:	4403      	add	r3, r0
   20a24:	4405      	add	r5, r0
   20a26:	9305      	str	r3, [sp, #20]
   20a28:	9b06      	ldr	r3, [sp, #24]
   20a2a:	2b00      	cmp	r3, #0
   20a2c:	dd05      	ble.n	20a3a <_dtoa_r+0x542>
   20a2e:	4651      	mov	r1, sl
   20a30:	461a      	mov	r2, r3
   20a32:	4620      	mov	r0, r4
   20a34:	f001 f962 	bl	21cfc <__lshift>
   20a38:	4682      	mov	sl, r0
   20a3a:	9b05      	ldr	r3, [sp, #20]
   20a3c:	2b00      	cmp	r3, #0
   20a3e:	dd05      	ble.n	20a4c <_dtoa_r+0x554>
   20a40:	4649      	mov	r1, r9
   20a42:	461a      	mov	r2, r3
   20a44:	4620      	mov	r0, r4
   20a46:	f001 f959 	bl	21cfc <__lshift>
   20a4a:	4681      	mov	r9, r0
   20a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20a4e:	2b00      	cmp	r3, #0
   20a50:	f040 8086 	bne.w	20b60 <_dtoa_r+0x668>
   20a54:	9b08      	ldr	r3, [sp, #32]
   20a56:	2b00      	cmp	r3, #0
   20a58:	f340 8269 	ble.w	20f2e <_dtoa_r+0xa36>
   20a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20a5e:	2b00      	cmp	r3, #0
   20a60:	f000 8098 	beq.w	20b94 <_dtoa_r+0x69c>
   20a64:	2d00      	cmp	r5, #0
   20a66:	dd05      	ble.n	20a74 <_dtoa_r+0x57c>
   20a68:	4631      	mov	r1, r6
   20a6a:	462a      	mov	r2, r5
   20a6c:	4620      	mov	r0, r4
   20a6e:	f001 f945 	bl	21cfc <__lshift>
   20a72:	4606      	mov	r6, r0
   20a74:	f1b8 0f00 	cmp.w	r8, #0
   20a78:	f040 8336 	bne.w	210e8 <_dtoa_r+0xbf0>
   20a7c:	46b0      	mov	r8, r6
   20a7e:	9b08      	ldr	r3, [sp, #32]
   20a80:	9a07      	ldr	r2, [sp, #28]
   20a82:	3b01      	subs	r3, #1
   20a84:	18d3      	adds	r3, r2, r3
   20a86:	9308      	str	r3, [sp, #32]
   20a88:	9b00      	ldr	r3, [sp, #0]
   20a8a:	f003 0301 	and.w	r3, r3, #1
   20a8e:	9309      	str	r3, [sp, #36]	; 0x24
   20a90:	4617      	mov	r7, r2
   20a92:	4649      	mov	r1, r9
   20a94:	4650      	mov	r0, sl
   20a96:	f7ff fc9b 	bl	203d0 <quorem>
   20a9a:	4631      	mov	r1, r6
   20a9c:	4605      	mov	r5, r0
   20a9e:	4650      	mov	r0, sl
   20aa0:	f001 f97e 	bl	21da0 <__mcmp>
   20aa4:	4642      	mov	r2, r8
   20aa6:	4649      	mov	r1, r9
   20aa8:	4683      	mov	fp, r0
   20aaa:	4620      	mov	r0, r4
   20aac:	f001 f994 	bl	21dd8 <__mdiff>
   20ab0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20ab4:	9200      	str	r2, [sp, #0]
   20ab6:	68c2      	ldr	r2, [r0, #12]
   20ab8:	4601      	mov	r1, r0
   20aba:	2a00      	cmp	r2, #0
   20abc:	f040 8232 	bne.w	20f24 <_dtoa_r+0xa2c>
   20ac0:	9006      	str	r0, [sp, #24]
   20ac2:	4650      	mov	r0, sl
   20ac4:	f001 f96c 	bl	21da0 <__mcmp>
   20ac8:	9b06      	ldr	r3, [sp, #24]
   20aca:	9005      	str	r0, [sp, #20]
   20acc:	4619      	mov	r1, r3
   20ace:	4620      	mov	r0, r4
   20ad0:	f000 ff8e 	bl	219f0 <_Bfree>
   20ad4:	9a05      	ldr	r2, [sp, #20]
   20ad6:	b932      	cbnz	r2, 20ae6 <_dtoa_r+0x5ee>
   20ad8:	9b02      	ldr	r3, [sp, #8]
   20ada:	b923      	cbnz	r3, 20ae6 <_dtoa_r+0x5ee>
   20adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ade:	2b00      	cmp	r3, #0
   20ae0:	f000 83de 	beq.w	212a0 <_dtoa_r+0xda8>
   20ae4:	9a02      	ldr	r2, [sp, #8]
   20ae6:	f1bb 0f00 	cmp.w	fp, #0
   20aea:	f2c0 82a2 	blt.w	21032 <_dtoa_r+0xb3a>
   20aee:	d105      	bne.n	20afc <_dtoa_r+0x604>
   20af0:	9b02      	ldr	r3, [sp, #8]
   20af2:	b91b      	cbnz	r3, 20afc <_dtoa_r+0x604>
   20af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20af6:	2b00      	cmp	r3, #0
   20af8:	f000 829b 	beq.w	21032 <_dtoa_r+0xb3a>
   20afc:	2a00      	cmp	r2, #0
   20afe:	f300 8307 	bgt.w	21110 <_dtoa_r+0xc18>
   20b02:	f89d 3000 	ldrb.w	r3, [sp]
   20b06:	703b      	strb	r3, [r7, #0]
   20b08:	9b08      	ldr	r3, [sp, #32]
   20b0a:	f107 0b01 	add.w	fp, r7, #1
   20b0e:	429f      	cmp	r7, r3
   20b10:	465d      	mov	r5, fp
   20b12:	f000 8308 	beq.w	21126 <_dtoa_r+0xc2e>
   20b16:	4651      	mov	r1, sl
   20b18:	2300      	movs	r3, #0
   20b1a:	220a      	movs	r2, #10
   20b1c:	4620      	mov	r0, r4
   20b1e:	f000 ff71 	bl	21a04 <__multadd>
   20b22:	4546      	cmp	r6, r8
   20b24:	4682      	mov	sl, r0
   20b26:	4631      	mov	r1, r6
   20b28:	f04f 0300 	mov.w	r3, #0
   20b2c:	f04f 020a 	mov.w	r2, #10
   20b30:	4620      	mov	r0, r4
   20b32:	f000 81f1 	beq.w	20f18 <_dtoa_r+0xa20>
   20b36:	f000 ff65 	bl	21a04 <__multadd>
   20b3a:	4641      	mov	r1, r8
   20b3c:	4606      	mov	r6, r0
   20b3e:	2300      	movs	r3, #0
   20b40:	220a      	movs	r2, #10
   20b42:	4620      	mov	r0, r4
   20b44:	f000 ff5e 	bl	21a04 <__multadd>
   20b48:	465f      	mov	r7, fp
   20b4a:	4680      	mov	r8, r0
   20b4c:	e7a1      	b.n	20a92 <_dtoa_r+0x59a>
   20b4e:	201c      	movs	r0, #28
   20b50:	9b06      	ldr	r3, [sp, #24]
   20b52:	4403      	add	r3, r0
   20b54:	9306      	str	r3, [sp, #24]
   20b56:	9b05      	ldr	r3, [sp, #20]
   20b58:	4403      	add	r3, r0
   20b5a:	4405      	add	r5, r0
   20b5c:	9305      	str	r3, [sp, #20]
   20b5e:	e763      	b.n	20a28 <_dtoa_r+0x530>
   20b60:	4649      	mov	r1, r9
   20b62:	4650      	mov	r0, sl
   20b64:	f001 f91c 	bl	21da0 <__mcmp>
   20b68:	2800      	cmp	r0, #0
   20b6a:	f6bf af73 	bge.w	20a54 <_dtoa_r+0x55c>
   20b6e:	9f04      	ldr	r7, [sp, #16]
   20b70:	4651      	mov	r1, sl
   20b72:	2300      	movs	r3, #0
   20b74:	220a      	movs	r2, #10
   20b76:	4620      	mov	r0, r4
   20b78:	3f01      	subs	r7, #1
   20b7a:	9704      	str	r7, [sp, #16]
   20b7c:	f000 ff42 	bl	21a04 <__multadd>
   20b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20b82:	4682      	mov	sl, r0
   20b84:	2b00      	cmp	r3, #0
   20b86:	f040 83a7 	bne.w	212d8 <_dtoa_r+0xde0>
   20b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20b8c:	2b00      	cmp	r3, #0
   20b8e:	f340 83b0 	ble.w	212f2 <_dtoa_r+0xdfa>
   20b92:	9308      	str	r3, [sp, #32]
   20b94:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20b9c:	465d      	mov	r5, fp
   20b9e:	e002      	b.n	20ba6 <_dtoa_r+0x6ae>
   20ba0:	f000 ff30 	bl	21a04 <__multadd>
   20ba4:	4682      	mov	sl, r0
   20ba6:	4649      	mov	r1, r9
   20ba8:	4650      	mov	r0, sl
   20baa:	f7ff fc11 	bl	203d0 <quorem>
   20bae:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20bb2:	f805 7b01 	strb.w	r7, [r5], #1
   20bb6:	eba5 030b 	sub.w	r3, r5, fp
   20bba:	4543      	cmp	r3, r8
   20bbc:	f04f 020a 	mov.w	r2, #10
   20bc0:	f04f 0300 	mov.w	r3, #0
   20bc4:	4651      	mov	r1, sl
   20bc6:	4620      	mov	r0, r4
   20bc8:	dbea      	blt.n	20ba0 <_dtoa_r+0x6a8>
   20bca:	9b07      	ldr	r3, [sp, #28]
   20bcc:	9a08      	ldr	r2, [sp, #32]
   20bce:	9700      	str	r7, [sp, #0]
   20bd0:	2a01      	cmp	r2, #1
   20bd2:	bfac      	ite	ge
   20bd4:	189b      	addge	r3, r3, r2
   20bd6:	3301      	addlt	r3, #1
   20bd8:	461d      	mov	r5, r3
   20bda:	f04f 0b00 	mov.w	fp, #0
   20bde:	4651      	mov	r1, sl
   20be0:	2201      	movs	r2, #1
   20be2:	4620      	mov	r0, r4
   20be4:	f001 f88a 	bl	21cfc <__lshift>
   20be8:	4649      	mov	r1, r9
   20bea:	4682      	mov	sl, r0
   20bec:	f001 f8d8 	bl	21da0 <__mcmp>
   20bf0:	2800      	cmp	r0, #0
   20bf2:	f340 823a 	ble.w	2106a <_dtoa_r+0xb72>
   20bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20bfa:	9907      	ldr	r1, [sp, #28]
   20bfc:	1e6b      	subs	r3, r5, #1
   20bfe:	e004      	b.n	20c0a <_dtoa_r+0x712>
   20c00:	428b      	cmp	r3, r1
   20c02:	f000 81af 	beq.w	20f64 <_dtoa_r+0xa6c>
   20c06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20c0a:	2a39      	cmp	r2, #57	; 0x39
   20c0c:	f103 0501 	add.w	r5, r3, #1
   20c10:	d0f6      	beq.n	20c00 <_dtoa_r+0x708>
   20c12:	3201      	adds	r2, #1
   20c14:	701a      	strb	r2, [r3, #0]
   20c16:	4649      	mov	r1, r9
   20c18:	4620      	mov	r0, r4
   20c1a:	f000 fee9 	bl	219f0 <_Bfree>
   20c1e:	2e00      	cmp	r6, #0
   20c20:	f43f ae36 	beq.w	20890 <_dtoa_r+0x398>
   20c24:	f1bb 0f00 	cmp.w	fp, #0
   20c28:	d005      	beq.n	20c36 <_dtoa_r+0x73e>
   20c2a:	45b3      	cmp	fp, r6
   20c2c:	d003      	beq.n	20c36 <_dtoa_r+0x73e>
   20c2e:	4659      	mov	r1, fp
   20c30:	4620      	mov	r0, r4
   20c32:	f000 fedd 	bl	219f0 <_Bfree>
   20c36:	4631      	mov	r1, r6
   20c38:	4620      	mov	r0, r4
   20c3a:	f000 fed9 	bl	219f0 <_Bfree>
   20c3e:	e627      	b.n	20890 <_dtoa_r+0x398>
   20c40:	2300      	movs	r3, #0
   20c42:	9309      	str	r3, [sp, #36]	; 0x24
   20c44:	9b04      	ldr	r3, [sp, #16]
   20c46:	445b      	add	r3, fp
   20c48:	930d      	str	r3, [sp, #52]	; 0x34
   20c4a:	3301      	adds	r3, #1
   20c4c:	2b01      	cmp	r3, #1
   20c4e:	461e      	mov	r6, r3
   20c50:	461d      	mov	r5, r3
   20c52:	9308      	str	r3, [sp, #32]
   20c54:	bfb8      	it	lt
   20c56:	2601      	movlt	r6, #1
   20c58:	2100      	movs	r1, #0
   20c5a:	2e17      	cmp	r6, #23
   20c5c:	6461      	str	r1, [r4, #68]	; 0x44
   20c5e:	d90a      	bls.n	20c76 <_dtoa_r+0x77e>
   20c60:	2201      	movs	r2, #1
   20c62:	2304      	movs	r3, #4
   20c64:	005b      	lsls	r3, r3, #1
   20c66:	f103 0014 	add.w	r0, r3, #20
   20c6a:	4286      	cmp	r6, r0
   20c6c:	4611      	mov	r1, r2
   20c6e:	f102 0201 	add.w	r2, r2, #1
   20c72:	d2f7      	bcs.n	20c64 <_dtoa_r+0x76c>
   20c74:	6461      	str	r1, [r4, #68]	; 0x44
   20c76:	4620      	mov	r0, r4
   20c78:	f000 fe94 	bl	219a4 <_Balloc>
   20c7c:	2d0e      	cmp	r5, #14
   20c7e:	9007      	str	r0, [sp, #28]
   20c80:	6420      	str	r0, [r4, #64]	; 0x40
   20c82:	f63f ad44 	bhi.w	2070e <_dtoa_r+0x216>
   20c86:	2f00      	cmp	r7, #0
   20c88:	f43f ad41 	beq.w	2070e <_dtoa_r+0x216>
   20c8c:	9904      	ldr	r1, [sp, #16]
   20c8e:	2900      	cmp	r1, #0
   20c90:	ed9d 7b00 	vldr	d7, [sp]
   20c94:	f340 81f6 	ble.w	21084 <_dtoa_r+0xb8c>
   20c98:	4bb9      	ldr	r3, [pc, #740]	; (20f80 <_dtoa_r+0xa88>)
   20c9a:	f001 020f 	and.w	r2, r1, #15
   20c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20ca2:	110d      	asrs	r5, r1, #4
   20ca4:	e9d3 6700 	ldrd	r6, r7, [r3]
   20ca8:	06eb      	lsls	r3, r5, #27
   20caa:	f140 81ad 	bpl.w	21008 <_dtoa_r+0xb10>
   20cae:	4bb5      	ldr	r3, [pc, #724]	; (20f84 <_dtoa_r+0xa8c>)
   20cb0:	ec51 0b17 	vmov	r0, r1, d7
   20cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20cb8:	f7fa ff62 	bl	1bb80 <__aeabi_ddiv>
   20cbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20cc0:	f005 050f 	and.w	r5, r5, #15
   20cc4:	f04f 0903 	mov.w	r9, #3
   20cc8:	b18d      	cbz	r5, 20cee <_dtoa_r+0x7f6>
   20cca:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 20f84 <_dtoa_r+0xa8c>
   20cce:	07e8      	lsls	r0, r5, #31
   20cd0:	d509      	bpl.n	20ce6 <_dtoa_r+0x7ee>
   20cd2:	4630      	mov	r0, r6
   20cd4:	4639      	mov	r1, r7
   20cd6:	e9d8 2300 	ldrd	r2, r3, [r8]
   20cda:	f7fa fe27 	bl	1b92c <__aeabi_dmul>
   20cde:	f109 0901 	add.w	r9, r9, #1
   20ce2:	4606      	mov	r6, r0
   20ce4:	460f      	mov	r7, r1
   20ce6:	106d      	asrs	r5, r5, #1
   20ce8:	f108 0808 	add.w	r8, r8, #8
   20cec:	d1ef      	bne.n	20cce <_dtoa_r+0x7d6>
   20cee:	463b      	mov	r3, r7
   20cf0:	4632      	mov	r2, r6
   20cf2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20cf6:	f7fa ff43 	bl	1bb80 <__aeabi_ddiv>
   20cfa:	4607      	mov	r7, r0
   20cfc:	4688      	mov	r8, r1
   20cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20d00:	b143      	cbz	r3, 20d14 <_dtoa_r+0x81c>
   20d02:	2200      	movs	r2, #0
   20d04:	4ba0      	ldr	r3, [pc, #640]	; (20f88 <_dtoa_r+0xa90>)
   20d06:	4638      	mov	r0, r7
   20d08:	4641      	mov	r1, r8
   20d0a:	f7fb f881 	bl	1be10 <__aeabi_dcmplt>
   20d0e:	2800      	cmp	r0, #0
   20d10:	f040 8273 	bne.w	211fa <_dtoa_r+0xd02>
   20d14:	4648      	mov	r0, r9
   20d16:	f7fa fda3 	bl	1b860 <__aeabi_i2d>
   20d1a:	463a      	mov	r2, r7
   20d1c:	4643      	mov	r3, r8
   20d1e:	f7fa fe05 	bl	1b92c <__aeabi_dmul>
   20d22:	4b9a      	ldr	r3, [pc, #616]	; (20f8c <_dtoa_r+0xa94>)
   20d24:	2200      	movs	r2, #0
   20d26:	f7fa fc4f 	bl	1b5c8 <__adddf3>
   20d2a:	9b08      	ldr	r3, [sp, #32]
   20d2c:	4605      	mov	r5, r0
   20d2e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20d32:	2b00      	cmp	r3, #0
   20d34:	f000 8140 	beq.w	20fb8 <_dtoa_r+0xac0>
   20d38:	9b04      	ldr	r3, [sp, #16]
   20d3a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20d3e:	9311      	str	r3, [sp, #68]	; 0x44
   20d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d42:	2b00      	cmp	r3, #0
   20d44:	f000 81f6 	beq.w	21134 <_dtoa_r+0xc3c>
   20d48:	4b8d      	ldr	r3, [pc, #564]	; (20f80 <_dtoa_r+0xa88>)
   20d4a:	4991      	ldr	r1, [pc, #580]	; (20f90 <_dtoa_r+0xa98>)
   20d4c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   20d50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20d54:	2000      	movs	r0, #0
   20d56:	f7fa ff13 	bl	1bb80 <__aeabi_ddiv>
   20d5a:	462a      	mov	r2, r5
   20d5c:	4633      	mov	r3, r6
   20d5e:	f7fa fc31 	bl	1b5c4 <__aeabi_dsub>
   20d62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20d66:	4641      	mov	r1, r8
   20d68:	4638      	mov	r0, r7
   20d6a:	f7fb f879 	bl	1be60 <__aeabi_d2iz>
   20d6e:	4605      	mov	r5, r0
   20d70:	f7fa fd76 	bl	1b860 <__aeabi_i2d>
   20d74:	4602      	mov	r2, r0
   20d76:	460b      	mov	r3, r1
   20d78:	4638      	mov	r0, r7
   20d7a:	4641      	mov	r1, r8
   20d7c:	f7fa fc22 	bl	1b5c4 <__aeabi_dsub>
   20d80:	3530      	adds	r5, #48	; 0x30
   20d82:	fa5f f885 	uxtb.w	r8, r5
   20d86:	9d07      	ldr	r5, [sp, #28]
   20d88:	4606      	mov	r6, r0
   20d8a:	460f      	mov	r7, r1
   20d8c:	f885 8000 	strb.w	r8, [r5]
   20d90:	4602      	mov	r2, r0
   20d92:	460b      	mov	r3, r1
   20d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20d98:	3501      	adds	r5, #1
   20d9a:	f7fb f857 	bl	1be4c <__aeabi_dcmpgt>
   20d9e:	2800      	cmp	r0, #0
   20da0:	d156      	bne.n	20e50 <_dtoa_r+0x958>
   20da2:	4632      	mov	r2, r6
   20da4:	463b      	mov	r3, r7
   20da6:	2000      	movs	r0, #0
   20da8:	4977      	ldr	r1, [pc, #476]	; (20f88 <_dtoa_r+0xa90>)
   20daa:	f7fa fc0b 	bl	1b5c4 <__aeabi_dsub>
   20dae:	4602      	mov	r2, r0
   20db0:	460b      	mov	r3, r1
   20db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20db6:	f7fb f849 	bl	1be4c <__aeabi_dcmpgt>
   20dba:	2800      	cmp	r0, #0
   20dbc:	f040 8262 	bne.w	21284 <_dtoa_r+0xd8c>
   20dc0:	f1b9 0f01 	cmp.w	r9, #1
   20dc4:	f43f aca3 	beq.w	2070e <_dtoa_r+0x216>
   20dc8:	9b07      	ldr	r3, [sp, #28]
   20dca:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   20dce:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   20dd2:	4499      	add	r9, r3
   20dd4:	46a0      	mov	r8, r4
   20dd6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   20dda:	e00d      	b.n	20df8 <_dtoa_r+0x900>
   20ddc:	2000      	movs	r0, #0
   20dde:	496a      	ldr	r1, [pc, #424]	; (20f88 <_dtoa_r+0xa90>)
   20de0:	f7fa fbf0 	bl	1b5c4 <__aeabi_dsub>
   20de4:	4652      	mov	r2, sl
   20de6:	465b      	mov	r3, fp
   20de8:	f7fb f812 	bl	1be10 <__aeabi_dcmplt>
   20dec:	2800      	cmp	r0, #0
   20dee:	f040 8244 	bne.w	2127a <_dtoa_r+0xd82>
   20df2:	454d      	cmp	r5, r9
   20df4:	f000 824a 	beq.w	2128c <_dtoa_r+0xd94>
   20df8:	4650      	mov	r0, sl
   20dfa:	4659      	mov	r1, fp
   20dfc:	2200      	movs	r2, #0
   20dfe:	4b65      	ldr	r3, [pc, #404]	; (20f94 <_dtoa_r+0xa9c>)
   20e00:	f7fa fd94 	bl	1b92c <__aeabi_dmul>
   20e04:	2200      	movs	r2, #0
   20e06:	4b63      	ldr	r3, [pc, #396]	; (20f94 <_dtoa_r+0xa9c>)
   20e08:	4682      	mov	sl, r0
   20e0a:	468b      	mov	fp, r1
   20e0c:	4630      	mov	r0, r6
   20e0e:	4639      	mov	r1, r7
   20e10:	f7fa fd8c 	bl	1b92c <__aeabi_dmul>
   20e14:	460f      	mov	r7, r1
   20e16:	4606      	mov	r6, r0
   20e18:	f7fb f822 	bl	1be60 <__aeabi_d2iz>
   20e1c:	4604      	mov	r4, r0
   20e1e:	f7fa fd1f 	bl	1b860 <__aeabi_i2d>
   20e22:	4602      	mov	r2, r0
   20e24:	460b      	mov	r3, r1
   20e26:	4630      	mov	r0, r6
   20e28:	4639      	mov	r1, r7
   20e2a:	f7fa fbcb 	bl	1b5c4 <__aeabi_dsub>
   20e2e:	3430      	adds	r4, #48	; 0x30
   20e30:	b2e4      	uxtb	r4, r4
   20e32:	4652      	mov	r2, sl
   20e34:	465b      	mov	r3, fp
   20e36:	f805 4b01 	strb.w	r4, [r5], #1
   20e3a:	4606      	mov	r6, r0
   20e3c:	460f      	mov	r7, r1
   20e3e:	f7fa ffe7 	bl	1be10 <__aeabi_dcmplt>
   20e42:	4632      	mov	r2, r6
   20e44:	463b      	mov	r3, r7
   20e46:	2800      	cmp	r0, #0
   20e48:	d0c8      	beq.n	20ddc <_dtoa_r+0x8e4>
   20e4a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   20e4e:	4644      	mov	r4, r8
   20e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20e52:	9304      	str	r3, [sp, #16]
   20e54:	e51c      	b.n	20890 <_dtoa_r+0x398>
   20e56:	2300      	movs	r3, #0
   20e58:	9309      	str	r3, [sp, #36]	; 0x24
   20e5a:	f1bb 0f00 	cmp.w	fp, #0
   20e5e:	f340 80da 	ble.w	21016 <_dtoa_r+0xb1e>
   20e62:	465e      	mov	r6, fp
   20e64:	465d      	mov	r5, fp
   20e66:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   20e6a:	f8cd b020 	str.w	fp, [sp, #32]
   20e6e:	e6f3      	b.n	20c58 <_dtoa_r+0x760>
   20e70:	2301      	movs	r3, #1
   20e72:	9309      	str	r3, [sp, #36]	; 0x24
   20e74:	e7f1      	b.n	20e5a <_dtoa_r+0x962>
   20e76:	9b00      	ldr	r3, [sp, #0]
   20e78:	2b00      	cmp	r3, #0
   20e7a:	f47f ada1 	bne.w	209c0 <_dtoa_r+0x4c8>
   20e7e:	e9dd 1200 	ldrd	r1, r2, [sp]
   20e82:	f3c2 0313 	ubfx	r3, r2, #0, #20
   20e86:	2b00      	cmp	r3, #0
   20e88:	f47f adb4 	bne.w	209f4 <_dtoa_r+0x4fc>
   20e8c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   20e90:	0d3f      	lsrs	r7, r7, #20
   20e92:	053f      	lsls	r7, r7, #20
   20e94:	2f00      	cmp	r7, #0
   20e96:	f000 8200 	beq.w	2129a <_dtoa_r+0xda2>
   20e9a:	9b06      	ldr	r3, [sp, #24]
   20e9c:	3301      	adds	r3, #1
   20e9e:	9306      	str	r3, [sp, #24]
   20ea0:	9b05      	ldr	r3, [sp, #20]
   20ea2:	3301      	adds	r3, #1
   20ea4:	9305      	str	r3, [sp, #20]
   20ea6:	f04f 0801 	mov.w	r8, #1
   20eaa:	e5a5      	b.n	209f8 <_dtoa_r+0x500>
   20eac:	9b08      	ldr	r3, [sp, #32]
   20eae:	2b00      	cmp	r3, #0
   20eb0:	f73f ac3e 	bgt.w	20730 <_dtoa_r+0x238>
   20eb4:	f040 8099 	bne.w	20fea <_dtoa_r+0xaf2>
   20eb8:	4649      	mov	r1, r9
   20eba:	2200      	movs	r2, #0
   20ebc:	4b36      	ldr	r3, [pc, #216]	; (20f98 <_dtoa_r+0xaa0>)
   20ebe:	4640      	mov	r0, r8
   20ec0:	f7fa fd34 	bl	1b92c <__aeabi_dmul>
   20ec4:	e9dd 2300 	ldrd	r2, r3, [sp]
   20ec8:	f7fa ffb6 	bl	1be38 <__aeabi_dcmpge>
   20ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20ed0:	464e      	mov	r6, r9
   20ed2:	2800      	cmp	r0, #0
   20ed4:	d03e      	beq.n	20f54 <_dtoa_r+0xa5c>
   20ed6:	ea6f 030b 	mvn.w	r3, fp
   20eda:	9d07      	ldr	r5, [sp, #28]
   20edc:	9304      	str	r3, [sp, #16]
   20ede:	4649      	mov	r1, r9
   20ee0:	4620      	mov	r0, r4
   20ee2:	f000 fd85 	bl	219f0 <_Bfree>
   20ee6:	2e00      	cmp	r6, #0
   20ee8:	f43f acd2 	beq.w	20890 <_dtoa_r+0x398>
   20eec:	e6a3      	b.n	20c36 <_dtoa_r+0x73e>
   20eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20ef0:	4651      	mov	r1, sl
   20ef2:	4620      	mov	r0, r4
   20ef4:	f000 feb2 	bl	21c5c <__pow5mult>
   20ef8:	4682      	mov	sl, r0
   20efa:	e54f      	b.n	2099c <_dtoa_r+0x4a4>
   20efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20efe:	2a00      	cmp	r2, #0
   20f00:	f000 816f 	beq.w	211e2 <_dtoa_r+0xcea>
   20f04:	f203 4333 	addw	r3, r3, #1075	; 0x433
   20f08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20f0a:	9d06      	ldr	r5, [sp, #24]
   20f0c:	e4e7      	b.n	208de <_dtoa_r+0x3e6>
   20f0e:	9b00      	ldr	r3, [sp, #0]
   20f10:	2b00      	cmp	r3, #0
   20f12:	f47f ad6f 	bne.w	209f4 <_dtoa_r+0x4fc>
   20f16:	e7b2      	b.n	20e7e <_dtoa_r+0x986>
   20f18:	f000 fd74 	bl	21a04 <__multadd>
   20f1c:	465f      	mov	r7, fp
   20f1e:	4606      	mov	r6, r0
   20f20:	4680      	mov	r8, r0
   20f22:	e5b6      	b.n	20a92 <_dtoa_r+0x59a>
   20f24:	4620      	mov	r0, r4
   20f26:	f000 fd63 	bl	219f0 <_Bfree>
   20f2a:	2201      	movs	r2, #1
   20f2c:	e5db      	b.n	20ae6 <_dtoa_r+0x5ee>
   20f2e:	9b02      	ldr	r3, [sp, #8]
   20f30:	2b02      	cmp	r3, #2
   20f32:	f77f ad93 	ble.w	20a5c <_dtoa_r+0x564>
   20f36:	9b08      	ldr	r3, [sp, #32]
   20f38:	2b00      	cmp	r3, #0
   20f3a:	d1cc      	bne.n	20ed6 <_dtoa_r+0x9de>
   20f3c:	4649      	mov	r1, r9
   20f3e:	2205      	movs	r2, #5
   20f40:	4620      	mov	r0, r4
   20f42:	f000 fd5f 	bl	21a04 <__multadd>
   20f46:	4601      	mov	r1, r0
   20f48:	4681      	mov	r9, r0
   20f4a:	4650      	mov	r0, sl
   20f4c:	f000 ff28 	bl	21da0 <__mcmp>
   20f50:	2800      	cmp	r0, #0
   20f52:	ddc0      	ble.n	20ed6 <_dtoa_r+0x9de>
   20f54:	9a04      	ldr	r2, [sp, #16]
   20f56:	9907      	ldr	r1, [sp, #28]
   20f58:	2331      	movs	r3, #49	; 0x31
   20f5a:	3201      	adds	r2, #1
   20f5c:	9204      	str	r2, [sp, #16]
   20f5e:	700b      	strb	r3, [r1, #0]
   20f60:	1c4d      	adds	r5, r1, #1
   20f62:	e7bc      	b.n	20ede <_dtoa_r+0x9e6>
   20f64:	9a04      	ldr	r2, [sp, #16]
   20f66:	3201      	adds	r2, #1
   20f68:	9204      	str	r2, [sp, #16]
   20f6a:	9a07      	ldr	r2, [sp, #28]
   20f6c:	2331      	movs	r3, #49	; 0x31
   20f6e:	7013      	strb	r3, [r2, #0]
   20f70:	e651      	b.n	20c16 <_dtoa_r+0x71e>
   20f72:	2301      	movs	r3, #1
   20f74:	9309      	str	r3, [sp, #36]	; 0x24
   20f76:	e665      	b.n	20c44 <_dtoa_r+0x74c>
   20f78:	f8dd a000 	ldr.w	sl, [sp]
   20f7c:	9c02      	ldr	r4, [sp, #8]
   20f7e:	e487      	b.n	20890 <_dtoa_r+0x398>
   20f80:	00024bc0 	.word	0x00024bc0
   20f84:	00024b98 	.word	0x00024b98
   20f88:	3ff00000 	.word	0x3ff00000
   20f8c:	401c0000 	.word	0x401c0000
   20f90:	3fe00000 	.word	0x3fe00000
   20f94:	40240000 	.word	0x40240000
   20f98:	40140000 	.word	0x40140000
   20f9c:	4648      	mov	r0, r9
   20f9e:	f7fa fc5f 	bl	1b860 <__aeabi_i2d>
   20fa2:	463a      	mov	r2, r7
   20fa4:	4643      	mov	r3, r8
   20fa6:	f7fa fcc1 	bl	1b92c <__aeabi_dmul>
   20faa:	2200      	movs	r2, #0
   20fac:	4bc4      	ldr	r3, [pc, #784]	; (212c0 <_dtoa_r+0xdc8>)
   20fae:	f7fa fb0b 	bl	1b5c8 <__adddf3>
   20fb2:	4605      	mov	r5, r0
   20fb4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20fb8:	4641      	mov	r1, r8
   20fba:	2200      	movs	r2, #0
   20fbc:	4bc1      	ldr	r3, [pc, #772]	; (212c4 <_dtoa_r+0xdcc>)
   20fbe:	4638      	mov	r0, r7
   20fc0:	f7fa fb00 	bl	1b5c4 <__aeabi_dsub>
   20fc4:	462a      	mov	r2, r5
   20fc6:	4633      	mov	r3, r6
   20fc8:	4680      	mov	r8, r0
   20fca:	4689      	mov	r9, r1
   20fcc:	f7fa ff3e 	bl	1be4c <__aeabi_dcmpgt>
   20fd0:	2800      	cmp	r0, #0
   20fd2:	f040 80ab 	bne.w	2112c <_dtoa_r+0xc34>
   20fd6:	462a      	mov	r2, r5
   20fd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   20fdc:	4640      	mov	r0, r8
   20fde:	4649      	mov	r1, r9
   20fe0:	f7fa ff16 	bl	1be10 <__aeabi_dcmplt>
   20fe4:	2800      	cmp	r0, #0
   20fe6:	f43f ab92 	beq.w	2070e <_dtoa_r+0x216>
   20fea:	f04f 0900 	mov.w	r9, #0
   20fee:	464e      	mov	r6, r9
   20ff0:	e771      	b.n	20ed6 <_dtoa_r+0x9de>
   20ff2:	9807      	ldr	r0, [sp, #28]
   20ff4:	f7ff bab8 	b.w	20568 <_dtoa_r+0x70>
   20ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20ffc:	970a      	str	r7, [sp, #40]	; 0x28
   20ffe:	1afb      	subs	r3, r7, r3
   21000:	441a      	add	r2, r3
   21002:	920b      	str	r2, [sp, #44]	; 0x2c
   21004:	2700      	movs	r7, #0
   21006:	e464      	b.n	208d2 <_dtoa_r+0x3da>
   21008:	ed9d 7b00 	vldr	d7, [sp]
   2100c:	f04f 0902 	mov.w	r9, #2
   21010:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21014:	e658      	b.n	20cc8 <_dtoa_r+0x7d0>
   21016:	2100      	movs	r1, #0
   21018:	6461      	str	r1, [r4, #68]	; 0x44
   2101a:	4620      	mov	r0, r4
   2101c:	f000 fcc2 	bl	219a4 <_Balloc>
   21020:	f04f 0b01 	mov.w	fp, #1
   21024:	9007      	str	r0, [sp, #28]
   21026:	6420      	str	r0, [r4, #64]	; 0x40
   21028:	f8cd b020 	str.w	fp, [sp, #32]
   2102c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21030:	e629      	b.n	20c86 <_dtoa_r+0x78e>
   21032:	2a00      	cmp	r2, #0
   21034:	dd12      	ble.n	2105c <_dtoa_r+0xb64>
   21036:	4651      	mov	r1, sl
   21038:	2201      	movs	r2, #1
   2103a:	4620      	mov	r0, r4
   2103c:	f000 fe5e 	bl	21cfc <__lshift>
   21040:	4649      	mov	r1, r9
   21042:	4682      	mov	sl, r0
   21044:	f000 feac 	bl	21da0 <__mcmp>
   21048:	2800      	cmp	r0, #0
   2104a:	f340 8131 	ble.w	212b0 <_dtoa_r+0xdb8>
   2104e:	9b00      	ldr	r3, [sp, #0]
   21050:	2b39      	cmp	r3, #57	; 0x39
   21052:	f000 80f7 	beq.w	21244 <_dtoa_r+0xd4c>
   21056:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2105a:	9300      	str	r3, [sp, #0]
   2105c:	f89d 3000 	ldrb.w	r3, [sp]
   21060:	703b      	strb	r3, [r7, #0]
   21062:	46b3      	mov	fp, r6
   21064:	1c7d      	adds	r5, r7, #1
   21066:	4646      	mov	r6, r8
   21068:	e5d5      	b.n	20c16 <_dtoa_r+0x71e>
   2106a:	d104      	bne.n	21076 <_dtoa_r+0xb7e>
   2106c:	9b00      	ldr	r3, [sp, #0]
   2106e:	07db      	lsls	r3, r3, #31
   21070:	d501      	bpl.n	21076 <_dtoa_r+0xb7e>
   21072:	e5c0      	b.n	20bf6 <_dtoa_r+0x6fe>
   21074:	4615      	mov	r5, r2
   21076:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2107a:	2b30      	cmp	r3, #48	; 0x30
   2107c:	f105 32ff 	add.w	r2, r5, #4294967295
   21080:	d0f8      	beq.n	21074 <_dtoa_r+0xb7c>
   21082:	e5c8      	b.n	20c16 <_dtoa_r+0x71e>
   21084:	f000 80b4 	beq.w	211f0 <_dtoa_r+0xcf8>
   21088:	9b04      	ldr	r3, [sp, #16]
   2108a:	425d      	negs	r5, r3
   2108c:	4b8e      	ldr	r3, [pc, #568]	; (212c8 <_dtoa_r+0xdd0>)
   2108e:	f005 020f 	and.w	r2, r5, #15
   21092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21096:	e9d3 2300 	ldrd	r2, r3, [r3]
   2109a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2109e:	f7fa fc45 	bl	1b92c <__aeabi_dmul>
   210a2:	112d      	asrs	r5, r5, #4
   210a4:	4607      	mov	r7, r0
   210a6:	4688      	mov	r8, r1
   210a8:	f000 8128 	beq.w	212fc <_dtoa_r+0xe04>
   210ac:	4e87      	ldr	r6, [pc, #540]	; (212cc <_dtoa_r+0xdd4>)
   210ae:	f04f 0902 	mov.w	r9, #2
   210b2:	07e9      	lsls	r1, r5, #31
   210b4:	d509      	bpl.n	210ca <_dtoa_r+0xbd2>
   210b6:	4638      	mov	r0, r7
   210b8:	4641      	mov	r1, r8
   210ba:	e9d6 2300 	ldrd	r2, r3, [r6]
   210be:	f7fa fc35 	bl	1b92c <__aeabi_dmul>
   210c2:	f109 0901 	add.w	r9, r9, #1
   210c6:	4607      	mov	r7, r0
   210c8:	4688      	mov	r8, r1
   210ca:	106d      	asrs	r5, r5, #1
   210cc:	f106 0608 	add.w	r6, r6, #8
   210d0:	d1ef      	bne.n	210b2 <_dtoa_r+0xbba>
   210d2:	e614      	b.n	20cfe <_dtoa_r+0x806>
   210d4:	9907      	ldr	r1, [sp, #28]
   210d6:	2230      	movs	r2, #48	; 0x30
   210d8:	700a      	strb	r2, [r1, #0]
   210da:	9a04      	ldr	r2, [sp, #16]
   210dc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   210e0:	3201      	adds	r2, #1
   210e2:	9204      	str	r2, [sp, #16]
   210e4:	f7ff bbd0 	b.w	20888 <_dtoa_r+0x390>
   210e8:	6871      	ldr	r1, [r6, #4]
   210ea:	4620      	mov	r0, r4
   210ec:	f000 fc5a 	bl	219a4 <_Balloc>
   210f0:	6933      	ldr	r3, [r6, #16]
   210f2:	3302      	adds	r3, #2
   210f4:	009a      	lsls	r2, r3, #2
   210f6:	4605      	mov	r5, r0
   210f8:	f106 010c 	add.w	r1, r6, #12
   210fc:	300c      	adds	r0, #12
   210fe:	f7fc ffcf 	bl	1e0a0 <memcpy>
   21102:	4629      	mov	r1, r5
   21104:	2201      	movs	r2, #1
   21106:	4620      	mov	r0, r4
   21108:	f000 fdf8 	bl	21cfc <__lshift>
   2110c:	4680      	mov	r8, r0
   2110e:	e4b6      	b.n	20a7e <_dtoa_r+0x586>
   21110:	9b00      	ldr	r3, [sp, #0]
   21112:	2b39      	cmp	r3, #57	; 0x39
   21114:	f000 8096 	beq.w	21244 <_dtoa_r+0xd4c>
   21118:	9b00      	ldr	r3, [sp, #0]
   2111a:	3301      	adds	r3, #1
   2111c:	46b3      	mov	fp, r6
   2111e:	703b      	strb	r3, [r7, #0]
   21120:	1c7d      	adds	r5, r7, #1
   21122:	4646      	mov	r6, r8
   21124:	e577      	b.n	20c16 <_dtoa_r+0x71e>
   21126:	46b3      	mov	fp, r6
   21128:	4646      	mov	r6, r8
   2112a:	e558      	b.n	20bde <_dtoa_r+0x6e6>
   2112c:	f04f 0900 	mov.w	r9, #0
   21130:	464e      	mov	r6, r9
   21132:	e70f      	b.n	20f54 <_dtoa_r+0xa5c>
   21134:	4964      	ldr	r1, [pc, #400]	; (212c8 <_dtoa_r+0xdd0>)
   21136:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2113a:	462a      	mov	r2, r5
   2113c:	4633      	mov	r3, r6
   2113e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21142:	f7fa fbf3 	bl	1b92c <__aeabi_dmul>
   21146:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2114a:	4638      	mov	r0, r7
   2114c:	4641      	mov	r1, r8
   2114e:	f7fa fe87 	bl	1be60 <__aeabi_d2iz>
   21152:	4605      	mov	r5, r0
   21154:	f7fa fb84 	bl	1b860 <__aeabi_i2d>
   21158:	4602      	mov	r2, r0
   2115a:	460b      	mov	r3, r1
   2115c:	4638      	mov	r0, r7
   2115e:	4641      	mov	r1, r8
   21160:	f7fa fa30 	bl	1b5c4 <__aeabi_dsub>
   21164:	9a07      	ldr	r2, [sp, #28]
   21166:	3530      	adds	r5, #48	; 0x30
   21168:	f1b9 0f01 	cmp.w	r9, #1
   2116c:	7015      	strb	r5, [r2, #0]
   2116e:	4606      	mov	r6, r0
   21170:	460f      	mov	r7, r1
   21172:	f102 0501 	add.w	r5, r2, #1
   21176:	d01c      	beq.n	211b2 <_dtoa_r+0xcba>
   21178:	9b07      	ldr	r3, [sp, #28]
   2117a:	4499      	add	r9, r3
   2117c:	2200      	movs	r2, #0
   2117e:	4b54      	ldr	r3, [pc, #336]	; (212d0 <_dtoa_r+0xdd8>)
   21180:	4630      	mov	r0, r6
   21182:	4639      	mov	r1, r7
   21184:	f7fa fbd2 	bl	1b92c <__aeabi_dmul>
   21188:	460f      	mov	r7, r1
   2118a:	4606      	mov	r6, r0
   2118c:	f7fa fe68 	bl	1be60 <__aeabi_d2iz>
   21190:	4680      	mov	r8, r0
   21192:	f7fa fb65 	bl	1b860 <__aeabi_i2d>
   21196:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2119a:	4602      	mov	r2, r0
   2119c:	460b      	mov	r3, r1
   2119e:	4630      	mov	r0, r6
   211a0:	4639      	mov	r1, r7
   211a2:	f7fa fa0f 	bl	1b5c4 <__aeabi_dsub>
   211a6:	f805 8b01 	strb.w	r8, [r5], #1
   211aa:	454d      	cmp	r5, r9
   211ac:	4606      	mov	r6, r0
   211ae:	460f      	mov	r7, r1
   211b0:	d1e4      	bne.n	2117c <_dtoa_r+0xc84>
   211b2:	2200      	movs	r2, #0
   211b4:	4b47      	ldr	r3, [pc, #284]	; (212d4 <_dtoa_r+0xddc>)
   211b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   211ba:	f7fa fa05 	bl	1b5c8 <__adddf3>
   211be:	4632      	mov	r2, r6
   211c0:	463b      	mov	r3, r7
   211c2:	f7fa fe25 	bl	1be10 <__aeabi_dcmplt>
   211c6:	2800      	cmp	r0, #0
   211c8:	d042      	beq.n	21250 <_dtoa_r+0xd58>
   211ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   211cc:	9304      	str	r3, [sp, #16]
   211ce:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   211d2:	f7ff bb4c 	b.w	2086e <_dtoa_r+0x376>
   211d6:	9b06      	ldr	r3, [sp, #24]
   211d8:	9a08      	ldr	r2, [sp, #32]
   211da:	1a9d      	subs	r5, r3, r2
   211dc:	2300      	movs	r3, #0
   211de:	f7ff bb7e 	b.w	208de <_dtoa_r+0x3e6>
   211e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   211e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   211e6:	9d06      	ldr	r5, [sp, #24]
   211e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   211ec:	f7ff bb77 	b.w	208de <_dtoa_r+0x3e6>
   211f0:	e9dd 7800 	ldrd	r7, r8, [sp]
   211f4:	f04f 0902 	mov.w	r9, #2
   211f8:	e581      	b.n	20cfe <_dtoa_r+0x806>
   211fa:	9b08      	ldr	r3, [sp, #32]
   211fc:	2b00      	cmp	r3, #0
   211fe:	f43f aecd 	beq.w	20f9c <_dtoa_r+0xaa4>
   21202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21204:	2b00      	cmp	r3, #0
   21206:	f77f aa82 	ble.w	2070e <_dtoa_r+0x216>
   2120a:	2200      	movs	r2, #0
   2120c:	4b30      	ldr	r3, [pc, #192]	; (212d0 <_dtoa_r+0xdd8>)
   2120e:	4638      	mov	r0, r7
   21210:	4641      	mov	r1, r8
   21212:	f7fa fb8b 	bl	1b92c <__aeabi_dmul>
   21216:	4607      	mov	r7, r0
   21218:	4688      	mov	r8, r1
   2121a:	f109 0001 	add.w	r0, r9, #1
   2121e:	f7fa fb1f 	bl	1b860 <__aeabi_i2d>
   21222:	463a      	mov	r2, r7
   21224:	4643      	mov	r3, r8
   21226:	f7fa fb81 	bl	1b92c <__aeabi_dmul>
   2122a:	2200      	movs	r2, #0
   2122c:	4b24      	ldr	r3, [pc, #144]	; (212c0 <_dtoa_r+0xdc8>)
   2122e:	f7fa f9cb 	bl	1b5c8 <__adddf3>
   21232:	9a04      	ldr	r2, [sp, #16]
   21234:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21238:	3a01      	subs	r2, #1
   2123a:	4605      	mov	r5, r0
   2123c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21240:	9211      	str	r2, [sp, #68]	; 0x44
   21242:	e57d      	b.n	20d40 <_dtoa_r+0x848>
   21244:	2239      	movs	r2, #57	; 0x39
   21246:	46b3      	mov	fp, r6
   21248:	703a      	strb	r2, [r7, #0]
   2124a:	4646      	mov	r6, r8
   2124c:	1c7d      	adds	r5, r7, #1
   2124e:	e4d4      	b.n	20bfa <_dtoa_r+0x702>
   21250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21254:	2000      	movs	r0, #0
   21256:	491f      	ldr	r1, [pc, #124]	; (212d4 <_dtoa_r+0xddc>)
   21258:	f7fa f9b4 	bl	1b5c4 <__aeabi_dsub>
   2125c:	4632      	mov	r2, r6
   2125e:	463b      	mov	r3, r7
   21260:	f7fa fdf4 	bl	1be4c <__aeabi_dcmpgt>
   21264:	b910      	cbnz	r0, 2126c <_dtoa_r+0xd74>
   21266:	f7ff ba52 	b.w	2070e <_dtoa_r+0x216>
   2126a:	4615      	mov	r5, r2
   2126c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21270:	2b30      	cmp	r3, #48	; 0x30
   21272:	f105 32ff 	add.w	r2, r5, #4294967295
   21276:	d0f8      	beq.n	2126a <_dtoa_r+0xd72>
   21278:	e5ea      	b.n	20e50 <_dtoa_r+0x958>
   2127a:	4643      	mov	r3, r8
   2127c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21280:	46a0      	mov	r8, r4
   21282:	461c      	mov	r4, r3
   21284:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21286:	9304      	str	r3, [sp, #16]
   21288:	f7ff baf1 	b.w	2086e <_dtoa_r+0x376>
   2128c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21290:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   21294:	4644      	mov	r4, r8
   21296:	f7ff ba3a 	b.w	2070e <_dtoa_r+0x216>
   2129a:	46b8      	mov	r8, r7
   2129c:	f7ff bbac 	b.w	209f8 <_dtoa_r+0x500>
   212a0:	9b00      	ldr	r3, [sp, #0]
   212a2:	2b39      	cmp	r3, #57	; 0x39
   212a4:	d0ce      	beq.n	21244 <_dtoa_r+0xd4c>
   212a6:	f1bb 0f00 	cmp.w	fp, #0
   212aa:	f73f aed4 	bgt.w	21056 <_dtoa_r+0xb5e>
   212ae:	e6d5      	b.n	2105c <_dtoa_r+0xb64>
   212b0:	f47f aed4 	bne.w	2105c <_dtoa_r+0xb64>
   212b4:	9b00      	ldr	r3, [sp, #0]
   212b6:	07da      	lsls	r2, r3, #31
   212b8:	f57f aed0 	bpl.w	2105c <_dtoa_r+0xb64>
   212bc:	e6c7      	b.n	2104e <_dtoa_r+0xb56>
   212be:	bf00      	nop
   212c0:	401c0000 	.word	0x401c0000
   212c4:	40140000 	.word	0x40140000
   212c8:	00024bc0 	.word	0x00024bc0
   212cc:	00024b98 	.word	0x00024b98
   212d0:	40240000 	.word	0x40240000
   212d4:	3fe00000 	.word	0x3fe00000
   212d8:	4631      	mov	r1, r6
   212da:	2300      	movs	r3, #0
   212dc:	220a      	movs	r2, #10
   212de:	4620      	mov	r0, r4
   212e0:	f000 fb90 	bl	21a04 <__multadd>
   212e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   212e6:	2b00      	cmp	r3, #0
   212e8:	4606      	mov	r6, r0
   212ea:	dd0a      	ble.n	21302 <_dtoa_r+0xe0a>
   212ec:	9308      	str	r3, [sp, #32]
   212ee:	f7ff bbb9 	b.w	20a64 <_dtoa_r+0x56c>
   212f2:	9b02      	ldr	r3, [sp, #8]
   212f4:	2b02      	cmp	r3, #2
   212f6:	dc22      	bgt.n	2133e <_dtoa_r+0xe46>
   212f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   212fa:	e44a      	b.n	20b92 <_dtoa_r+0x69a>
   212fc:	f04f 0902 	mov.w	r9, #2
   21300:	e4fd      	b.n	20cfe <_dtoa_r+0x806>
   21302:	9b02      	ldr	r3, [sp, #8]
   21304:	2b02      	cmp	r3, #2
   21306:	dc1a      	bgt.n	2133e <_dtoa_r+0xe46>
   21308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2130a:	e7ef      	b.n	212ec <_dtoa_r+0xdf4>
   2130c:	2500      	movs	r5, #0
   2130e:	6465      	str	r5, [r4, #68]	; 0x44
   21310:	4629      	mov	r1, r5
   21312:	4620      	mov	r0, r4
   21314:	f000 fb46 	bl	219a4 <_Balloc>
   21318:	f04f 33ff 	mov.w	r3, #4294967295
   2131c:	9308      	str	r3, [sp, #32]
   2131e:	930d      	str	r3, [sp, #52]	; 0x34
   21320:	2301      	movs	r3, #1
   21322:	9007      	str	r0, [sp, #28]
   21324:	46ab      	mov	fp, r5
   21326:	6420      	str	r0, [r4, #64]	; 0x40
   21328:	9309      	str	r3, [sp, #36]	; 0x24
   2132a:	f7ff b9f0 	b.w	2070e <_dtoa_r+0x216>
   2132e:	f43f ab7b 	beq.w	20a28 <_dtoa_r+0x530>
   21332:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21336:	e40b      	b.n	20b50 <_dtoa_r+0x658>
   21338:	2701      	movs	r7, #1
   2133a:	f7ff b9af 	b.w	2069c <_dtoa_r+0x1a4>
   2133e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21340:	9308      	str	r3, [sp, #32]
   21342:	e5f8      	b.n	20f36 <_dtoa_r+0xa3e>

00021344 <__sflush_r>:
   21344:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21348:	b29a      	uxth	r2, r3
   2134a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2134e:	460d      	mov	r5, r1
   21350:	0711      	lsls	r1, r2, #28
   21352:	4680      	mov	r8, r0
   21354:	d43a      	bmi.n	213cc <__sflush_r+0x88>
   21356:	686a      	ldr	r2, [r5, #4]
   21358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2135c:	2a00      	cmp	r2, #0
   2135e:	81ab      	strh	r3, [r5, #12]
   21360:	dd6f      	ble.n	21442 <__sflush_r+0xfe>
   21362:	6aac      	ldr	r4, [r5, #40]	; 0x28
   21364:	2c00      	cmp	r4, #0
   21366:	d049      	beq.n	213fc <__sflush_r+0xb8>
   21368:	2200      	movs	r2, #0
   2136a:	b29b      	uxth	r3, r3
   2136c:	f8d8 6000 	ldr.w	r6, [r8]
   21370:	f8c8 2000 	str.w	r2, [r8]
   21374:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   21378:	d067      	beq.n	2144a <__sflush_r+0x106>
   2137a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2137c:	075f      	lsls	r7, r3, #29
   2137e:	d505      	bpl.n	2138c <__sflush_r+0x48>
   21380:	6869      	ldr	r1, [r5, #4]
   21382:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   21384:	1a52      	subs	r2, r2, r1
   21386:	b10b      	cbz	r3, 2138c <__sflush_r+0x48>
   21388:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2138a:	1ad2      	subs	r2, r2, r3
   2138c:	2300      	movs	r3, #0
   2138e:	69e9      	ldr	r1, [r5, #28]
   21390:	4640      	mov	r0, r8
   21392:	47a0      	blx	r4
   21394:	1c44      	adds	r4, r0, #1
   21396:	d03c      	beq.n	21412 <__sflush_r+0xce>
   21398:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2139c:	692a      	ldr	r2, [r5, #16]
   2139e:	602a      	str	r2, [r5, #0]
   213a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   213a4:	2200      	movs	r2, #0
   213a6:	81ab      	strh	r3, [r5, #12]
   213a8:	04db      	lsls	r3, r3, #19
   213aa:	606a      	str	r2, [r5, #4]
   213ac:	d447      	bmi.n	2143e <__sflush_r+0xfa>
   213ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
   213b0:	f8c8 6000 	str.w	r6, [r8]
   213b4:	b311      	cbz	r1, 213fc <__sflush_r+0xb8>
   213b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   213ba:	4299      	cmp	r1, r3
   213bc:	d002      	beq.n	213c4 <__sflush_r+0x80>
   213be:	4640      	mov	r0, r8
   213c0:	f000 f95a 	bl	21678 <_free_r>
   213c4:	2000      	movs	r0, #0
   213c6:	6328      	str	r0, [r5, #48]	; 0x30
   213c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   213cc:	692e      	ldr	r6, [r5, #16]
   213ce:	b1ae      	cbz	r6, 213fc <__sflush_r+0xb8>
   213d0:	682c      	ldr	r4, [r5, #0]
   213d2:	602e      	str	r6, [r5, #0]
   213d4:	0791      	lsls	r1, r2, #30
   213d6:	bf0c      	ite	eq
   213d8:	696b      	ldreq	r3, [r5, #20]
   213da:	2300      	movne	r3, #0
   213dc:	1ba4      	subs	r4, r4, r6
   213de:	60ab      	str	r3, [r5, #8]
   213e0:	e00a      	b.n	213f8 <__sflush_r+0xb4>
   213e2:	4623      	mov	r3, r4
   213e4:	4632      	mov	r2, r6
   213e6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   213e8:	69e9      	ldr	r1, [r5, #28]
   213ea:	4640      	mov	r0, r8
   213ec:	47b8      	blx	r7
   213ee:	2800      	cmp	r0, #0
   213f0:	eba4 0400 	sub.w	r4, r4, r0
   213f4:	4406      	add	r6, r0
   213f6:	dd04      	ble.n	21402 <__sflush_r+0xbe>
   213f8:	2c00      	cmp	r4, #0
   213fa:	dcf2      	bgt.n	213e2 <__sflush_r+0x9e>
   213fc:	2000      	movs	r0, #0
   213fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21402:	89ab      	ldrh	r3, [r5, #12]
   21404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21408:	81ab      	strh	r3, [r5, #12]
   2140a:	f04f 30ff 	mov.w	r0, #4294967295
   2140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21412:	f8d8 4000 	ldr.w	r4, [r8]
   21416:	2c1d      	cmp	r4, #29
   21418:	d8f3      	bhi.n	21402 <__sflush_r+0xbe>
   2141a:	4b19      	ldr	r3, [pc, #100]	; (21480 <__sflush_r+0x13c>)
   2141c:	40e3      	lsrs	r3, r4
   2141e:	43db      	mvns	r3, r3
   21420:	f013 0301 	ands.w	r3, r3, #1
   21424:	d1ed      	bne.n	21402 <__sflush_r+0xbe>
   21426:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2142a:	606b      	str	r3, [r5, #4]
   2142c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21430:	6929      	ldr	r1, [r5, #16]
   21432:	81ab      	strh	r3, [r5, #12]
   21434:	04da      	lsls	r2, r3, #19
   21436:	6029      	str	r1, [r5, #0]
   21438:	d5b9      	bpl.n	213ae <__sflush_r+0x6a>
   2143a:	2c00      	cmp	r4, #0
   2143c:	d1b7      	bne.n	213ae <__sflush_r+0x6a>
   2143e:	6528      	str	r0, [r5, #80]	; 0x50
   21440:	e7b5      	b.n	213ae <__sflush_r+0x6a>
   21442:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21444:	2a00      	cmp	r2, #0
   21446:	dc8c      	bgt.n	21362 <__sflush_r+0x1e>
   21448:	e7d8      	b.n	213fc <__sflush_r+0xb8>
   2144a:	2301      	movs	r3, #1
   2144c:	69e9      	ldr	r1, [r5, #28]
   2144e:	4640      	mov	r0, r8
   21450:	47a0      	blx	r4
   21452:	1c43      	adds	r3, r0, #1
   21454:	4602      	mov	r2, r0
   21456:	d002      	beq.n	2145e <__sflush_r+0x11a>
   21458:	89ab      	ldrh	r3, [r5, #12]
   2145a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2145c:	e78e      	b.n	2137c <__sflush_r+0x38>
   2145e:	f8d8 3000 	ldr.w	r3, [r8]
   21462:	2b00      	cmp	r3, #0
   21464:	d0f8      	beq.n	21458 <__sflush_r+0x114>
   21466:	2b1d      	cmp	r3, #29
   21468:	d001      	beq.n	2146e <__sflush_r+0x12a>
   2146a:	2b16      	cmp	r3, #22
   2146c:	d102      	bne.n	21474 <__sflush_r+0x130>
   2146e:	f8c8 6000 	str.w	r6, [r8]
   21472:	e7c3      	b.n	213fc <__sflush_r+0xb8>
   21474:	89ab      	ldrh	r3, [r5, #12]
   21476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2147a:	81ab      	strh	r3, [r5, #12]
   2147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21480:	20400001 	.word	0x20400001

00021484 <_fflush_r>:
   21484:	b538      	push	{r3, r4, r5, lr}
   21486:	460d      	mov	r5, r1
   21488:	4604      	mov	r4, r0
   2148a:	b108      	cbz	r0, 21490 <_fflush_r+0xc>
   2148c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2148e:	b1bb      	cbz	r3, 214c0 <_fflush_r+0x3c>
   21490:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   21494:	b188      	cbz	r0, 214ba <_fflush_r+0x36>
   21496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21498:	07db      	lsls	r3, r3, #31
   2149a:	d401      	bmi.n	214a0 <_fflush_r+0x1c>
   2149c:	0581      	lsls	r1, r0, #22
   2149e:	d517      	bpl.n	214d0 <_fflush_r+0x4c>
   214a0:	4620      	mov	r0, r4
   214a2:	4629      	mov	r1, r5
   214a4:	f7ff ff4e 	bl	21344 <__sflush_r>
   214a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   214aa:	07da      	lsls	r2, r3, #31
   214ac:	4604      	mov	r4, r0
   214ae:	d402      	bmi.n	214b6 <_fflush_r+0x32>
   214b0:	89ab      	ldrh	r3, [r5, #12]
   214b2:	059b      	lsls	r3, r3, #22
   214b4:	d507      	bpl.n	214c6 <_fflush_r+0x42>
   214b6:	4620      	mov	r0, r4
   214b8:	bd38      	pop	{r3, r4, r5, pc}
   214ba:	4604      	mov	r4, r0
   214bc:	4620      	mov	r0, r4
   214be:	bd38      	pop	{r3, r4, r5, pc}
   214c0:	f000 f838 	bl	21534 <__sinit>
   214c4:	e7e4      	b.n	21490 <_fflush_r+0xc>
   214c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   214c8:	f7fc fa8e 	bl	1d9e8 <__retarget_lock_release_recursive>
   214cc:	4620      	mov	r0, r4
   214ce:	bd38      	pop	{r3, r4, r5, pc}
   214d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   214d2:	f7fc fa87 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   214d6:	e7e3      	b.n	214a0 <_fflush_r+0x1c>

000214d8 <_cleanup_r>:
   214d8:	4901      	ldr	r1, [pc, #4]	; (214e0 <_cleanup_r+0x8>)
   214da:	f000 b9b3 	b.w	21844 <_fwalk_reent>
   214de:	bf00      	nop
   214e0:	00022269 	.word	0x00022269

000214e4 <std.isra.0>:
   214e4:	b510      	push	{r4, lr}
   214e6:	2300      	movs	r3, #0
   214e8:	4604      	mov	r4, r0
   214ea:	8181      	strh	r1, [r0, #12]
   214ec:	81c2      	strh	r2, [r0, #14]
   214ee:	6003      	str	r3, [r0, #0]
   214f0:	6043      	str	r3, [r0, #4]
   214f2:	6083      	str	r3, [r0, #8]
   214f4:	6643      	str	r3, [r0, #100]	; 0x64
   214f6:	6103      	str	r3, [r0, #16]
   214f8:	6143      	str	r3, [r0, #20]
   214fa:	6183      	str	r3, [r0, #24]
   214fc:	4619      	mov	r1, r3
   214fe:	2208      	movs	r2, #8
   21500:	305c      	adds	r0, #92	; 0x5c
   21502:	f7fc fecb 	bl	1e29c <memset>
   21506:	4807      	ldr	r0, [pc, #28]	; (21524 <std.isra.0+0x40>)
   21508:	4907      	ldr	r1, [pc, #28]	; (21528 <std.isra.0+0x44>)
   2150a:	4a08      	ldr	r2, [pc, #32]	; (2152c <std.isra.0+0x48>)
   2150c:	4b08      	ldr	r3, [pc, #32]	; (21530 <std.isra.0+0x4c>)
   2150e:	6220      	str	r0, [r4, #32]
   21510:	61e4      	str	r4, [r4, #28]
   21512:	6261      	str	r1, [r4, #36]	; 0x24
   21514:	62a2      	str	r2, [r4, #40]	; 0x28
   21516:	62e3      	str	r3, [r4, #44]	; 0x2c
   21518:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2151c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21520:	f7fc ba5c 	b.w	1d9dc <__retarget_lock_init_recursive>
   21524:	00021f9d 	.word	0x00021f9d
   21528:	00021fc1 	.word	0x00021fc1
   2152c:	00021ffd 	.word	0x00021ffd
   21530:	0002201d 	.word	0x0002201d

00021534 <__sinit>:
   21534:	b510      	push	{r4, lr}
   21536:	4604      	mov	r4, r0
   21538:	4812      	ldr	r0, [pc, #72]	; (21584 <__sinit+0x50>)
   2153a:	f7fc fa53 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   2153e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21540:	b9d2      	cbnz	r2, 21578 <__sinit+0x44>
   21542:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21546:	4810      	ldr	r0, [pc, #64]	; (21588 <__sinit+0x54>)
   21548:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2154c:	2103      	movs	r1, #3
   2154e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21552:	63e0      	str	r0, [r4, #60]	; 0x3c
   21554:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21558:	6860      	ldr	r0, [r4, #4]
   2155a:	2104      	movs	r1, #4
   2155c:	f7ff ffc2 	bl	214e4 <std.isra.0>
   21560:	2201      	movs	r2, #1
   21562:	2109      	movs	r1, #9
   21564:	68a0      	ldr	r0, [r4, #8]
   21566:	f7ff ffbd 	bl	214e4 <std.isra.0>
   2156a:	2202      	movs	r2, #2
   2156c:	2112      	movs	r1, #18
   2156e:	68e0      	ldr	r0, [r4, #12]
   21570:	f7ff ffb8 	bl	214e4 <std.isra.0>
   21574:	2301      	movs	r3, #1
   21576:	63a3      	str	r3, [r4, #56]	; 0x38
   21578:	4802      	ldr	r0, [pc, #8]	; (21584 <__sinit+0x50>)
   2157a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2157e:	f7fc ba33 	b.w	1d9e8 <__retarget_lock_release_recursive>
   21582:	bf00      	nop
   21584:	20002384 	.word	0x20002384
   21588:	000214d9 	.word	0x000214d9

0002158c <__sfp_lock_acquire>:
   2158c:	4801      	ldr	r0, [pc, #4]	; (21594 <__sfp_lock_acquire+0x8>)
   2158e:	f7fc ba29 	b.w	1d9e4 <__retarget_lock_acquire_recursive>
   21592:	bf00      	nop
   21594:	20002398 	.word	0x20002398

00021598 <__sfp_lock_release>:
   21598:	4801      	ldr	r0, [pc, #4]	; (215a0 <__sfp_lock_release+0x8>)
   2159a:	f7fc ba25 	b.w	1d9e8 <__retarget_lock_release_recursive>
   2159e:	bf00      	nop
   215a0:	20002398 	.word	0x20002398

000215a4 <__libc_fini_array>:
   215a4:	b538      	push	{r3, r4, r5, lr}
   215a6:	4c0a      	ldr	r4, [pc, #40]	; (215d0 <__libc_fini_array+0x2c>)
   215a8:	4d0a      	ldr	r5, [pc, #40]	; (215d4 <__libc_fini_array+0x30>)
   215aa:	1b64      	subs	r4, r4, r5
   215ac:	10a4      	asrs	r4, r4, #2
   215ae:	d00a      	beq.n	215c6 <__libc_fini_array+0x22>
   215b0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   215b4:	3b01      	subs	r3, #1
   215b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   215ba:	3c01      	subs	r4, #1
   215bc:	f855 3904 	ldr.w	r3, [r5], #-4
   215c0:	4798      	blx	r3
   215c2:	2c00      	cmp	r4, #0
   215c4:	d1f9      	bne.n	215ba <__libc_fini_array+0x16>
   215c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   215ca:	f001 b8b3 	b.w	22734 <_fini>
   215ce:	bf00      	nop
   215d0:	0002277c 	.word	0x0002277c
   215d4:	00022778 	.word	0x00022778

000215d8 <_malloc_trim_r>:
   215d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215da:	4f24      	ldr	r7, [pc, #144]	; (2166c <_malloc_trim_r+0x94>)
   215dc:	460c      	mov	r4, r1
   215de:	4606      	mov	r6, r0
   215e0:	f7fc feaa 	bl	1e338 <__malloc_lock>
   215e4:	68bb      	ldr	r3, [r7, #8]
   215e6:	685d      	ldr	r5, [r3, #4]
   215e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   215ec:	310f      	adds	r1, #15
   215ee:	f025 0503 	bic.w	r5, r5, #3
   215f2:	4429      	add	r1, r5
   215f4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   215f8:	f021 010f 	bic.w	r1, r1, #15
   215fc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21600:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21604:	db07      	blt.n	21616 <_malloc_trim_r+0x3e>
   21606:	2100      	movs	r1, #0
   21608:	4630      	mov	r0, r6
   2160a:	f7fd f887 	bl	1e71c <_sbrk_r>
   2160e:	68bb      	ldr	r3, [r7, #8]
   21610:	442b      	add	r3, r5
   21612:	4298      	cmp	r0, r3
   21614:	d004      	beq.n	21620 <_malloc_trim_r+0x48>
   21616:	4630      	mov	r0, r6
   21618:	f7fc fe94 	bl	1e344 <__malloc_unlock>
   2161c:	2000      	movs	r0, #0
   2161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21620:	4261      	negs	r1, r4
   21622:	4630      	mov	r0, r6
   21624:	f7fd f87a 	bl	1e71c <_sbrk_r>
   21628:	3001      	adds	r0, #1
   2162a:	d00d      	beq.n	21648 <_malloc_trim_r+0x70>
   2162c:	4b10      	ldr	r3, [pc, #64]	; (21670 <_malloc_trim_r+0x98>)
   2162e:	68ba      	ldr	r2, [r7, #8]
   21630:	6819      	ldr	r1, [r3, #0]
   21632:	1b2d      	subs	r5, r5, r4
   21634:	f045 0501 	orr.w	r5, r5, #1
   21638:	4630      	mov	r0, r6
   2163a:	1b09      	subs	r1, r1, r4
   2163c:	6055      	str	r5, [r2, #4]
   2163e:	6019      	str	r1, [r3, #0]
   21640:	f7fc fe80 	bl	1e344 <__malloc_unlock>
   21644:	2001      	movs	r0, #1
   21646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21648:	2100      	movs	r1, #0
   2164a:	4630      	mov	r0, r6
   2164c:	f7fd f866 	bl	1e71c <_sbrk_r>
   21650:	68ba      	ldr	r2, [r7, #8]
   21652:	1a83      	subs	r3, r0, r2
   21654:	2b0f      	cmp	r3, #15
   21656:	ddde      	ble.n	21616 <_malloc_trim_r+0x3e>
   21658:	4c06      	ldr	r4, [pc, #24]	; (21674 <_malloc_trim_r+0x9c>)
   2165a:	4905      	ldr	r1, [pc, #20]	; (21670 <_malloc_trim_r+0x98>)
   2165c:	6824      	ldr	r4, [r4, #0]
   2165e:	f043 0301 	orr.w	r3, r3, #1
   21662:	1b00      	subs	r0, r0, r4
   21664:	6053      	str	r3, [r2, #4]
   21666:	6008      	str	r0, [r1, #0]
   21668:	e7d5      	b.n	21616 <_malloc_trim_r+0x3e>
   2166a:	bf00      	nop
   2166c:	20000694 	.word	0x20000694
   21670:	200022a0 	.word	0x200022a0
   21674:	20000a9c 	.word	0x20000a9c

00021678 <_free_r>:
   21678:	2900      	cmp	r1, #0
   2167a:	d044      	beq.n	21706 <_free_r+0x8e>
   2167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21680:	460d      	mov	r5, r1
   21682:	4680      	mov	r8, r0
   21684:	f7fc fe58 	bl	1e338 <__malloc_lock>
   21688:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2168c:	4969      	ldr	r1, [pc, #420]	; (21834 <_free_r+0x1bc>)
   2168e:	f027 0301 	bic.w	r3, r7, #1
   21692:	f1a5 0408 	sub.w	r4, r5, #8
   21696:	18e2      	adds	r2, r4, r3
   21698:	688e      	ldr	r6, [r1, #8]
   2169a:	6850      	ldr	r0, [r2, #4]
   2169c:	42b2      	cmp	r2, r6
   2169e:	f020 0003 	bic.w	r0, r0, #3
   216a2:	d05e      	beq.n	21762 <_free_r+0xea>
   216a4:	07fe      	lsls	r6, r7, #31
   216a6:	6050      	str	r0, [r2, #4]
   216a8:	d40b      	bmi.n	216c2 <_free_r+0x4a>
   216aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
   216ae:	1be4      	subs	r4, r4, r7
   216b0:	f101 0e08 	add.w	lr, r1, #8
   216b4:	68a5      	ldr	r5, [r4, #8]
   216b6:	4575      	cmp	r5, lr
   216b8:	443b      	add	r3, r7
   216ba:	d06d      	beq.n	21798 <_free_r+0x120>
   216bc:	68e7      	ldr	r7, [r4, #12]
   216be:	60ef      	str	r7, [r5, #12]
   216c0:	60bd      	str	r5, [r7, #8]
   216c2:	1815      	adds	r5, r2, r0
   216c4:	686d      	ldr	r5, [r5, #4]
   216c6:	07ed      	lsls	r5, r5, #31
   216c8:	d53e      	bpl.n	21748 <_free_r+0xd0>
   216ca:	f043 0201 	orr.w	r2, r3, #1
   216ce:	6062      	str	r2, [r4, #4]
   216d0:	50e3      	str	r3, [r4, r3]
   216d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   216d6:	d217      	bcs.n	21708 <_free_r+0x90>
   216d8:	08db      	lsrs	r3, r3, #3
   216da:	1c58      	adds	r0, r3, #1
   216dc:	109a      	asrs	r2, r3, #2
   216de:	684d      	ldr	r5, [r1, #4]
   216e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   216e4:	60a7      	str	r7, [r4, #8]
   216e6:	2301      	movs	r3, #1
   216e8:	4093      	lsls	r3, r2
   216ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   216ee:	432b      	orrs	r3, r5
   216f0:	3a08      	subs	r2, #8
   216f2:	60e2      	str	r2, [r4, #12]
   216f4:	604b      	str	r3, [r1, #4]
   216f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   216fa:	60fc      	str	r4, [r7, #12]
   216fc:	4640      	mov	r0, r8
   216fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21702:	f7fc be1f 	b.w	1e344 <__malloc_unlock>
   21706:	4770      	bx	lr
   21708:	0a5a      	lsrs	r2, r3, #9
   2170a:	2a04      	cmp	r2, #4
   2170c:	d852      	bhi.n	217b4 <_free_r+0x13c>
   2170e:	099a      	lsrs	r2, r3, #6
   21710:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21714:	00ff      	lsls	r7, r7, #3
   21716:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2171a:	19c8      	adds	r0, r1, r7
   2171c:	59ca      	ldr	r2, [r1, r7]
   2171e:	3808      	subs	r0, #8
   21720:	4290      	cmp	r0, r2
   21722:	d04f      	beq.n	217c4 <_free_r+0x14c>
   21724:	6851      	ldr	r1, [r2, #4]
   21726:	f021 0103 	bic.w	r1, r1, #3
   2172a:	428b      	cmp	r3, r1
   2172c:	d232      	bcs.n	21794 <_free_r+0x11c>
   2172e:	6892      	ldr	r2, [r2, #8]
   21730:	4290      	cmp	r0, r2
   21732:	d1f7      	bne.n	21724 <_free_r+0xac>
   21734:	68c3      	ldr	r3, [r0, #12]
   21736:	60a0      	str	r0, [r4, #8]
   21738:	60e3      	str	r3, [r4, #12]
   2173a:	609c      	str	r4, [r3, #8]
   2173c:	60c4      	str	r4, [r0, #12]
   2173e:	4640      	mov	r0, r8
   21740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21744:	f7fc bdfe 	b.w	1e344 <__malloc_unlock>
   21748:	6895      	ldr	r5, [r2, #8]
   2174a:	4f3b      	ldr	r7, [pc, #236]	; (21838 <_free_r+0x1c0>)
   2174c:	42bd      	cmp	r5, r7
   2174e:	4403      	add	r3, r0
   21750:	d040      	beq.n	217d4 <_free_r+0x15c>
   21752:	68d0      	ldr	r0, [r2, #12]
   21754:	60e8      	str	r0, [r5, #12]
   21756:	f043 0201 	orr.w	r2, r3, #1
   2175a:	6085      	str	r5, [r0, #8]
   2175c:	6062      	str	r2, [r4, #4]
   2175e:	50e3      	str	r3, [r4, r3]
   21760:	e7b7      	b.n	216d2 <_free_r+0x5a>
   21762:	07ff      	lsls	r7, r7, #31
   21764:	4403      	add	r3, r0
   21766:	d407      	bmi.n	21778 <_free_r+0x100>
   21768:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2176c:	1aa4      	subs	r4, r4, r2
   2176e:	4413      	add	r3, r2
   21770:	68a0      	ldr	r0, [r4, #8]
   21772:	68e2      	ldr	r2, [r4, #12]
   21774:	60c2      	str	r2, [r0, #12]
   21776:	6090      	str	r0, [r2, #8]
   21778:	4a30      	ldr	r2, [pc, #192]	; (2183c <_free_r+0x1c4>)
   2177a:	6812      	ldr	r2, [r2, #0]
   2177c:	f043 0001 	orr.w	r0, r3, #1
   21780:	4293      	cmp	r3, r2
   21782:	6060      	str	r0, [r4, #4]
   21784:	608c      	str	r4, [r1, #8]
   21786:	d3b9      	bcc.n	216fc <_free_r+0x84>
   21788:	4b2d      	ldr	r3, [pc, #180]	; (21840 <_free_r+0x1c8>)
   2178a:	4640      	mov	r0, r8
   2178c:	6819      	ldr	r1, [r3, #0]
   2178e:	f7ff ff23 	bl	215d8 <_malloc_trim_r>
   21792:	e7b3      	b.n	216fc <_free_r+0x84>
   21794:	4610      	mov	r0, r2
   21796:	e7cd      	b.n	21734 <_free_r+0xbc>
   21798:	1811      	adds	r1, r2, r0
   2179a:	6849      	ldr	r1, [r1, #4]
   2179c:	07c9      	lsls	r1, r1, #31
   2179e:	d444      	bmi.n	2182a <_free_r+0x1b2>
   217a0:	6891      	ldr	r1, [r2, #8]
   217a2:	68d2      	ldr	r2, [r2, #12]
   217a4:	60ca      	str	r2, [r1, #12]
   217a6:	4403      	add	r3, r0
   217a8:	f043 0001 	orr.w	r0, r3, #1
   217ac:	6091      	str	r1, [r2, #8]
   217ae:	6060      	str	r0, [r4, #4]
   217b0:	50e3      	str	r3, [r4, r3]
   217b2:	e7a3      	b.n	216fc <_free_r+0x84>
   217b4:	2a14      	cmp	r2, #20
   217b6:	d816      	bhi.n	217e6 <_free_r+0x16e>
   217b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   217bc:	00ff      	lsls	r7, r7, #3
   217be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   217c2:	e7aa      	b.n	2171a <_free_r+0xa2>
   217c4:	10aa      	asrs	r2, r5, #2
   217c6:	2301      	movs	r3, #1
   217c8:	684d      	ldr	r5, [r1, #4]
   217ca:	4093      	lsls	r3, r2
   217cc:	432b      	orrs	r3, r5
   217ce:	604b      	str	r3, [r1, #4]
   217d0:	4603      	mov	r3, r0
   217d2:	e7b0      	b.n	21736 <_free_r+0xbe>
   217d4:	f043 0201 	orr.w	r2, r3, #1
   217d8:	614c      	str	r4, [r1, #20]
   217da:	610c      	str	r4, [r1, #16]
   217dc:	60e5      	str	r5, [r4, #12]
   217de:	60a5      	str	r5, [r4, #8]
   217e0:	6062      	str	r2, [r4, #4]
   217e2:	50e3      	str	r3, [r4, r3]
   217e4:	e78a      	b.n	216fc <_free_r+0x84>
   217e6:	2a54      	cmp	r2, #84	; 0x54
   217e8:	d806      	bhi.n	217f8 <_free_r+0x180>
   217ea:	0b1a      	lsrs	r2, r3, #12
   217ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   217f0:	00ff      	lsls	r7, r7, #3
   217f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   217f6:	e790      	b.n	2171a <_free_r+0xa2>
   217f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   217fc:	d806      	bhi.n	2180c <_free_r+0x194>
   217fe:	0bda      	lsrs	r2, r3, #15
   21800:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21804:	00ff      	lsls	r7, r7, #3
   21806:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2180a:	e786      	b.n	2171a <_free_r+0xa2>
   2180c:	f240 5054 	movw	r0, #1364	; 0x554
   21810:	4282      	cmp	r2, r0
   21812:	d806      	bhi.n	21822 <_free_r+0x1aa>
   21814:	0c9a      	lsrs	r2, r3, #18
   21816:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2181a:	00ff      	lsls	r7, r7, #3
   2181c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21820:	e77b      	b.n	2171a <_free_r+0xa2>
   21822:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21826:	257e      	movs	r5, #126	; 0x7e
   21828:	e777      	b.n	2171a <_free_r+0xa2>
   2182a:	f043 0101 	orr.w	r1, r3, #1
   2182e:	6061      	str	r1, [r4, #4]
   21830:	6013      	str	r3, [r2, #0]
   21832:	e763      	b.n	216fc <_free_r+0x84>
   21834:	20000694 	.word	0x20000694
   21838:	2000069c 	.word	0x2000069c
   2183c:	20000aa0 	.word	0x20000aa0
   21840:	200022d0 	.word	0x200022d0

00021844 <_fwalk_reent>:
   21844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21848:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   2184c:	d01f      	beq.n	2188e <_fwalk_reent+0x4a>
   2184e:	4688      	mov	r8, r1
   21850:	4606      	mov	r6, r0
   21852:	f04f 0900 	mov.w	r9, #0
   21856:	687d      	ldr	r5, [r7, #4]
   21858:	68bc      	ldr	r4, [r7, #8]
   2185a:	3d01      	subs	r5, #1
   2185c:	d411      	bmi.n	21882 <_fwalk_reent+0x3e>
   2185e:	89a3      	ldrh	r3, [r4, #12]
   21860:	2b01      	cmp	r3, #1
   21862:	f105 35ff 	add.w	r5, r5, #4294967295
   21866:	d908      	bls.n	2187a <_fwalk_reent+0x36>
   21868:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2186c:	3301      	adds	r3, #1
   2186e:	4621      	mov	r1, r4
   21870:	4630      	mov	r0, r6
   21872:	d002      	beq.n	2187a <_fwalk_reent+0x36>
   21874:	47c0      	blx	r8
   21876:	ea49 0900 	orr.w	r9, r9, r0
   2187a:	1c6b      	adds	r3, r5, #1
   2187c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21880:	d1ed      	bne.n	2185e <_fwalk_reent+0x1a>
   21882:	683f      	ldr	r7, [r7, #0]
   21884:	2f00      	cmp	r7, #0
   21886:	d1e6      	bne.n	21856 <_fwalk_reent+0x12>
   21888:	4648      	mov	r0, r9
   2188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2188e:	46b9      	mov	r9, r7
   21890:	4648      	mov	r0, r9
   21892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21896:	bf00      	nop

00021898 <_localeconv_r>:
   21898:	4a04      	ldr	r2, [pc, #16]	; (218ac <_localeconv_r+0x14>)
   2189a:	4b05      	ldr	r3, [pc, #20]	; (218b0 <_localeconv_r+0x18>)
   2189c:	6812      	ldr	r2, [r2, #0]
   2189e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   218a0:	2800      	cmp	r0, #0
   218a2:	bf08      	it	eq
   218a4:	4618      	moveq	r0, r3
   218a6:	30f0      	adds	r0, #240	; 0xf0
   218a8:	4770      	bx	lr
   218aa:	bf00      	nop
   218ac:	200000f8 	.word	0x200000f8
   218b0:	20000528 	.word	0x20000528

000218b4 <__swhatbuf_r>:
   218b4:	b570      	push	{r4, r5, r6, lr}
   218b6:	460c      	mov	r4, r1
   218b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   218bc:	2900      	cmp	r1, #0
   218be:	b090      	sub	sp, #64	; 0x40
   218c0:	4615      	mov	r5, r2
   218c2:	461e      	mov	r6, r3
   218c4:	db14      	blt.n	218f0 <__swhatbuf_r+0x3c>
   218c6:	aa01      	add	r2, sp, #4
   218c8:	f000 fd30 	bl	2232c <_fstat_r>
   218cc:	2800      	cmp	r0, #0
   218ce:	db0f      	blt.n	218f0 <__swhatbuf_r+0x3c>
   218d0:	9a02      	ldr	r2, [sp, #8]
   218d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   218d6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   218da:	fab2 f282 	clz	r2, r2
   218de:	0952      	lsrs	r2, r2, #5
   218e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   218e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   218e8:	6032      	str	r2, [r6, #0]
   218ea:	602b      	str	r3, [r5, #0]
   218ec:	b010      	add	sp, #64	; 0x40
   218ee:	bd70      	pop	{r4, r5, r6, pc}
   218f0:	89a2      	ldrh	r2, [r4, #12]
   218f2:	2300      	movs	r3, #0
   218f4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   218f8:	6033      	str	r3, [r6, #0]
   218fa:	d004      	beq.n	21906 <__swhatbuf_r+0x52>
   218fc:	2240      	movs	r2, #64	; 0x40
   218fe:	4618      	mov	r0, r3
   21900:	602a      	str	r2, [r5, #0]
   21902:	b010      	add	sp, #64	; 0x40
   21904:	bd70      	pop	{r4, r5, r6, pc}
   21906:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2190a:	602b      	str	r3, [r5, #0]
   2190c:	b010      	add	sp, #64	; 0x40
   2190e:	bd70      	pop	{r4, r5, r6, pc}

00021910 <__smakebuf_r>:
   21910:	898a      	ldrh	r2, [r1, #12]
   21912:	0792      	lsls	r2, r2, #30
   21914:	460b      	mov	r3, r1
   21916:	d506      	bpl.n	21926 <__smakebuf_r+0x16>
   21918:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2191c:	2101      	movs	r1, #1
   2191e:	601a      	str	r2, [r3, #0]
   21920:	611a      	str	r2, [r3, #16]
   21922:	6159      	str	r1, [r3, #20]
   21924:	4770      	bx	lr
   21926:	b5f0      	push	{r4, r5, r6, r7, lr}
   21928:	b083      	sub	sp, #12
   2192a:	ab01      	add	r3, sp, #4
   2192c:	466a      	mov	r2, sp
   2192e:	460c      	mov	r4, r1
   21930:	4606      	mov	r6, r0
   21932:	f7ff ffbf 	bl	218b4 <__swhatbuf_r>
   21936:	9900      	ldr	r1, [sp, #0]
   21938:	4605      	mov	r5, r0
   2193a:	4630      	mov	r0, r6
   2193c:	f7fc f866 	bl	1da0c <_malloc_r>
   21940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21944:	b1d8      	cbz	r0, 2197e <__smakebuf_r+0x6e>
   21946:	9a01      	ldr	r2, [sp, #4]
   21948:	4f15      	ldr	r7, [pc, #84]	; (219a0 <__smakebuf_r+0x90>)
   2194a:	9900      	ldr	r1, [sp, #0]
   2194c:	63f7      	str	r7, [r6, #60]	; 0x3c
   2194e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21952:	81a3      	strh	r3, [r4, #12]
   21954:	6020      	str	r0, [r4, #0]
   21956:	6120      	str	r0, [r4, #16]
   21958:	6161      	str	r1, [r4, #20]
   2195a:	b91a      	cbnz	r2, 21964 <__smakebuf_r+0x54>
   2195c:	432b      	orrs	r3, r5
   2195e:	81a3      	strh	r3, [r4, #12]
   21960:	b003      	add	sp, #12
   21962:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21964:	4630      	mov	r0, r6
   21966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2196a:	f000 fcf3 	bl	22354 <_isatty_r>
   2196e:	b1a0      	cbz	r0, 2199a <__smakebuf_r+0x8a>
   21970:	89a3      	ldrh	r3, [r4, #12]
   21972:	f023 0303 	bic.w	r3, r3, #3
   21976:	f043 0301 	orr.w	r3, r3, #1
   2197a:	b21b      	sxth	r3, r3
   2197c:	e7ee      	b.n	2195c <__smakebuf_r+0x4c>
   2197e:	059a      	lsls	r2, r3, #22
   21980:	d4ee      	bmi.n	21960 <__smakebuf_r+0x50>
   21982:	f023 0303 	bic.w	r3, r3, #3
   21986:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2198a:	f043 0302 	orr.w	r3, r3, #2
   2198e:	2101      	movs	r1, #1
   21990:	81a3      	strh	r3, [r4, #12]
   21992:	6022      	str	r2, [r4, #0]
   21994:	6122      	str	r2, [r4, #16]
   21996:	6161      	str	r1, [r4, #20]
   21998:	e7e2      	b.n	21960 <__smakebuf_r+0x50>
   2199a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2199e:	e7dd      	b.n	2195c <__smakebuf_r+0x4c>
   219a0:	000214d9 	.word	0x000214d9

000219a4 <_Balloc>:
   219a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   219a6:	b570      	push	{r4, r5, r6, lr}
   219a8:	4605      	mov	r5, r0
   219aa:	460c      	mov	r4, r1
   219ac:	b14b      	cbz	r3, 219c2 <_Balloc+0x1e>
   219ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   219b2:	b180      	cbz	r0, 219d6 <_Balloc+0x32>
   219b4:	6802      	ldr	r2, [r0, #0]
   219b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   219ba:	2300      	movs	r3, #0
   219bc:	6103      	str	r3, [r0, #16]
   219be:	60c3      	str	r3, [r0, #12]
   219c0:	bd70      	pop	{r4, r5, r6, pc}
   219c2:	2221      	movs	r2, #33	; 0x21
   219c4:	2104      	movs	r1, #4
   219c6:	f000 fc0d 	bl	221e4 <_calloc_r>
   219ca:	64e8      	str	r0, [r5, #76]	; 0x4c
   219cc:	4603      	mov	r3, r0
   219ce:	2800      	cmp	r0, #0
   219d0:	d1ed      	bne.n	219ae <_Balloc+0xa>
   219d2:	2000      	movs	r0, #0
   219d4:	bd70      	pop	{r4, r5, r6, pc}
   219d6:	2101      	movs	r1, #1
   219d8:	fa01 f604 	lsl.w	r6, r1, r4
   219dc:	1d72      	adds	r2, r6, #5
   219de:	4628      	mov	r0, r5
   219e0:	0092      	lsls	r2, r2, #2
   219e2:	f000 fbff 	bl	221e4 <_calloc_r>
   219e6:	2800      	cmp	r0, #0
   219e8:	d0f3      	beq.n	219d2 <_Balloc+0x2e>
   219ea:	6044      	str	r4, [r0, #4]
   219ec:	6086      	str	r6, [r0, #8]
   219ee:	e7e4      	b.n	219ba <_Balloc+0x16>

000219f0 <_Bfree>:
   219f0:	b131      	cbz	r1, 21a00 <_Bfree+0x10>
   219f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   219f4:	684a      	ldr	r2, [r1, #4]
   219f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   219fa:	6008      	str	r0, [r1, #0]
   219fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21a00:	4770      	bx	lr
   21a02:	bf00      	nop

00021a04 <__multadd>:
   21a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a06:	690c      	ldr	r4, [r1, #16]
   21a08:	b083      	sub	sp, #12
   21a0a:	460d      	mov	r5, r1
   21a0c:	4606      	mov	r6, r0
   21a0e:	f101 0e14 	add.w	lr, r1, #20
   21a12:	2700      	movs	r7, #0
   21a14:	f8de 0000 	ldr.w	r0, [lr]
   21a18:	b281      	uxth	r1, r0
   21a1a:	fb02 3301 	mla	r3, r2, r1, r3
   21a1e:	0c01      	lsrs	r1, r0, #16
   21a20:	0c18      	lsrs	r0, r3, #16
   21a22:	fb02 0101 	mla	r1, r2, r1, r0
   21a26:	b29b      	uxth	r3, r3
   21a28:	3701      	adds	r7, #1
   21a2a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21a2e:	42bc      	cmp	r4, r7
   21a30:	f84e 3b04 	str.w	r3, [lr], #4
   21a34:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21a38:	dcec      	bgt.n	21a14 <__multadd+0x10>
   21a3a:	b13b      	cbz	r3, 21a4c <__multadd+0x48>
   21a3c:	68aa      	ldr	r2, [r5, #8]
   21a3e:	4294      	cmp	r4, r2
   21a40:	da07      	bge.n	21a52 <__multadd+0x4e>
   21a42:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21a46:	3401      	adds	r4, #1
   21a48:	6153      	str	r3, [r2, #20]
   21a4a:	612c      	str	r4, [r5, #16]
   21a4c:	4628      	mov	r0, r5
   21a4e:	b003      	add	sp, #12
   21a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a52:	6869      	ldr	r1, [r5, #4]
   21a54:	9301      	str	r3, [sp, #4]
   21a56:	3101      	adds	r1, #1
   21a58:	4630      	mov	r0, r6
   21a5a:	f7ff ffa3 	bl	219a4 <_Balloc>
   21a5e:	692a      	ldr	r2, [r5, #16]
   21a60:	3202      	adds	r2, #2
   21a62:	f105 010c 	add.w	r1, r5, #12
   21a66:	4607      	mov	r7, r0
   21a68:	0092      	lsls	r2, r2, #2
   21a6a:	300c      	adds	r0, #12
   21a6c:	f7fc fb18 	bl	1e0a0 <memcpy>
   21a70:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21a72:	6869      	ldr	r1, [r5, #4]
   21a74:	9b01      	ldr	r3, [sp, #4]
   21a76:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21a7a:	6028      	str	r0, [r5, #0]
   21a7c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21a80:	463d      	mov	r5, r7
   21a82:	e7de      	b.n	21a42 <__multadd+0x3e>

00021a84 <__hi0bits>:
   21a84:	0c02      	lsrs	r2, r0, #16
   21a86:	0412      	lsls	r2, r2, #16
   21a88:	4603      	mov	r3, r0
   21a8a:	b9b2      	cbnz	r2, 21aba <__hi0bits+0x36>
   21a8c:	0403      	lsls	r3, r0, #16
   21a8e:	2010      	movs	r0, #16
   21a90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21a94:	bf04      	itt	eq
   21a96:	021b      	lsleq	r3, r3, #8
   21a98:	3008      	addeq	r0, #8
   21a9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21a9e:	bf04      	itt	eq
   21aa0:	011b      	lsleq	r3, r3, #4
   21aa2:	3004      	addeq	r0, #4
   21aa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21aa8:	bf04      	itt	eq
   21aaa:	009b      	lsleq	r3, r3, #2
   21aac:	3002      	addeq	r0, #2
   21aae:	2b00      	cmp	r3, #0
   21ab0:	db02      	blt.n	21ab8 <__hi0bits+0x34>
   21ab2:	005b      	lsls	r3, r3, #1
   21ab4:	d403      	bmi.n	21abe <__hi0bits+0x3a>
   21ab6:	2020      	movs	r0, #32
   21ab8:	4770      	bx	lr
   21aba:	2000      	movs	r0, #0
   21abc:	e7e8      	b.n	21a90 <__hi0bits+0xc>
   21abe:	3001      	adds	r0, #1
   21ac0:	4770      	bx	lr
   21ac2:	bf00      	nop

00021ac4 <__lo0bits>:
   21ac4:	6803      	ldr	r3, [r0, #0]
   21ac6:	f013 0207 	ands.w	r2, r3, #7
   21aca:	4601      	mov	r1, r0
   21acc:	d007      	beq.n	21ade <__lo0bits+0x1a>
   21ace:	07da      	lsls	r2, r3, #31
   21ad0:	d421      	bmi.n	21b16 <__lo0bits+0x52>
   21ad2:	0798      	lsls	r0, r3, #30
   21ad4:	d421      	bmi.n	21b1a <__lo0bits+0x56>
   21ad6:	089b      	lsrs	r3, r3, #2
   21ad8:	600b      	str	r3, [r1, #0]
   21ada:	2002      	movs	r0, #2
   21adc:	4770      	bx	lr
   21ade:	b298      	uxth	r0, r3
   21ae0:	b198      	cbz	r0, 21b0a <__lo0bits+0x46>
   21ae2:	4610      	mov	r0, r2
   21ae4:	f013 0fff 	tst.w	r3, #255	; 0xff
   21ae8:	bf04      	itt	eq
   21aea:	0a1b      	lsreq	r3, r3, #8
   21aec:	3008      	addeq	r0, #8
   21aee:	071a      	lsls	r2, r3, #28
   21af0:	bf04      	itt	eq
   21af2:	091b      	lsreq	r3, r3, #4
   21af4:	3004      	addeq	r0, #4
   21af6:	079a      	lsls	r2, r3, #30
   21af8:	bf04      	itt	eq
   21afa:	089b      	lsreq	r3, r3, #2
   21afc:	3002      	addeq	r0, #2
   21afe:	07da      	lsls	r2, r3, #31
   21b00:	d407      	bmi.n	21b12 <__lo0bits+0x4e>
   21b02:	085b      	lsrs	r3, r3, #1
   21b04:	d104      	bne.n	21b10 <__lo0bits+0x4c>
   21b06:	2020      	movs	r0, #32
   21b08:	4770      	bx	lr
   21b0a:	0c1b      	lsrs	r3, r3, #16
   21b0c:	2010      	movs	r0, #16
   21b0e:	e7e9      	b.n	21ae4 <__lo0bits+0x20>
   21b10:	3001      	adds	r0, #1
   21b12:	600b      	str	r3, [r1, #0]
   21b14:	4770      	bx	lr
   21b16:	2000      	movs	r0, #0
   21b18:	4770      	bx	lr
   21b1a:	085b      	lsrs	r3, r3, #1
   21b1c:	600b      	str	r3, [r1, #0]
   21b1e:	2001      	movs	r0, #1
   21b20:	4770      	bx	lr
   21b22:	bf00      	nop

00021b24 <__i2b>:
   21b24:	b510      	push	{r4, lr}
   21b26:	460c      	mov	r4, r1
   21b28:	2101      	movs	r1, #1
   21b2a:	f7ff ff3b 	bl	219a4 <_Balloc>
   21b2e:	2201      	movs	r2, #1
   21b30:	6144      	str	r4, [r0, #20]
   21b32:	6102      	str	r2, [r0, #16]
   21b34:	bd10      	pop	{r4, pc}
   21b36:	bf00      	nop

00021b38 <__multiply>:
   21b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b3c:	690c      	ldr	r4, [r1, #16]
   21b3e:	6915      	ldr	r5, [r2, #16]
   21b40:	42ac      	cmp	r4, r5
   21b42:	b083      	sub	sp, #12
   21b44:	468b      	mov	fp, r1
   21b46:	4616      	mov	r6, r2
   21b48:	da04      	bge.n	21b54 <__multiply+0x1c>
   21b4a:	4622      	mov	r2, r4
   21b4c:	46b3      	mov	fp, r6
   21b4e:	462c      	mov	r4, r5
   21b50:	460e      	mov	r6, r1
   21b52:	4615      	mov	r5, r2
   21b54:	f8db 3008 	ldr.w	r3, [fp, #8]
   21b58:	f8db 1004 	ldr.w	r1, [fp, #4]
   21b5c:	eb04 0805 	add.w	r8, r4, r5
   21b60:	4598      	cmp	r8, r3
   21b62:	bfc8      	it	gt
   21b64:	3101      	addgt	r1, #1
   21b66:	f7ff ff1d 	bl	219a4 <_Balloc>
   21b6a:	f100 0914 	add.w	r9, r0, #20
   21b6e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21b72:	45d1      	cmp	r9, sl
   21b74:	9000      	str	r0, [sp, #0]
   21b76:	d205      	bcs.n	21b84 <__multiply+0x4c>
   21b78:	464b      	mov	r3, r9
   21b7a:	2100      	movs	r1, #0
   21b7c:	f843 1b04 	str.w	r1, [r3], #4
   21b80:	459a      	cmp	sl, r3
   21b82:	d8fb      	bhi.n	21b7c <__multiply+0x44>
   21b84:	f106 0c14 	add.w	ip, r6, #20
   21b88:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21b8c:	f10b 0b14 	add.w	fp, fp, #20
   21b90:	459c      	cmp	ip, r3
   21b92:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21b96:	d24c      	bcs.n	21c32 <__multiply+0xfa>
   21b98:	f8cd a004 	str.w	sl, [sp, #4]
   21b9c:	469a      	mov	sl, r3
   21b9e:	f8dc 5000 	ldr.w	r5, [ip]
   21ba2:	b2af      	uxth	r7, r5
   21ba4:	b1ef      	cbz	r7, 21be2 <__multiply+0xaa>
   21ba6:	2100      	movs	r1, #0
   21ba8:	464d      	mov	r5, r9
   21baa:	465e      	mov	r6, fp
   21bac:	460c      	mov	r4, r1
   21bae:	f856 2b04 	ldr.w	r2, [r6], #4
   21bb2:	6828      	ldr	r0, [r5, #0]
   21bb4:	b293      	uxth	r3, r2
   21bb6:	b281      	uxth	r1, r0
   21bb8:	fb07 1303 	mla	r3, r7, r3, r1
   21bbc:	0c12      	lsrs	r2, r2, #16
   21bbe:	0c01      	lsrs	r1, r0, #16
   21bc0:	4423      	add	r3, r4
   21bc2:	fb07 1102 	mla	r1, r7, r2, r1
   21bc6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21bca:	b29b      	uxth	r3, r3
   21bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21bd0:	45b6      	cmp	lr, r6
   21bd2:	f845 3b04 	str.w	r3, [r5], #4
   21bd6:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21bda:	d8e8      	bhi.n	21bae <__multiply+0x76>
   21bdc:	602c      	str	r4, [r5, #0]
   21bde:	f8dc 5000 	ldr.w	r5, [ip]
   21be2:	0c2d      	lsrs	r5, r5, #16
   21be4:	d01d      	beq.n	21c22 <__multiply+0xea>
   21be6:	f8d9 3000 	ldr.w	r3, [r9]
   21bea:	4648      	mov	r0, r9
   21bec:	461c      	mov	r4, r3
   21bee:	4659      	mov	r1, fp
   21bf0:	2200      	movs	r2, #0
   21bf2:	880e      	ldrh	r6, [r1, #0]
   21bf4:	0c24      	lsrs	r4, r4, #16
   21bf6:	fb05 4406 	mla	r4, r5, r6, r4
   21bfa:	4422      	add	r2, r4
   21bfc:	b29b      	uxth	r3, r3
   21bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21c02:	f840 3b04 	str.w	r3, [r0], #4
   21c06:	f851 3b04 	ldr.w	r3, [r1], #4
   21c0a:	6804      	ldr	r4, [r0, #0]
   21c0c:	0c1b      	lsrs	r3, r3, #16
   21c0e:	b2a6      	uxth	r6, r4
   21c10:	fb05 6303 	mla	r3, r5, r3, r6
   21c14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21c18:	458e      	cmp	lr, r1
   21c1a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21c1e:	d8e8      	bhi.n	21bf2 <__multiply+0xba>
   21c20:	6003      	str	r3, [r0, #0]
   21c22:	f10c 0c04 	add.w	ip, ip, #4
   21c26:	45e2      	cmp	sl, ip
   21c28:	f109 0904 	add.w	r9, r9, #4
   21c2c:	d8b7      	bhi.n	21b9e <__multiply+0x66>
   21c2e:	f8dd a004 	ldr.w	sl, [sp, #4]
   21c32:	f1b8 0f00 	cmp.w	r8, #0
   21c36:	dd0b      	ble.n	21c50 <__multiply+0x118>
   21c38:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21c3c:	f1aa 0a04 	sub.w	sl, sl, #4
   21c40:	b11b      	cbz	r3, 21c4a <__multiply+0x112>
   21c42:	e005      	b.n	21c50 <__multiply+0x118>
   21c44:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21c48:	b913      	cbnz	r3, 21c50 <__multiply+0x118>
   21c4a:	f1b8 0801 	subs.w	r8, r8, #1
   21c4e:	d1f9      	bne.n	21c44 <__multiply+0x10c>
   21c50:	9800      	ldr	r0, [sp, #0]
   21c52:	f8c0 8010 	str.w	r8, [r0, #16]
   21c56:	b003      	add	sp, #12
   21c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021c5c <__pow5mult>:
   21c5c:	f012 0303 	ands.w	r3, r2, #3
   21c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c64:	4614      	mov	r4, r2
   21c66:	4607      	mov	r7, r0
   21c68:	d12e      	bne.n	21cc8 <__pow5mult+0x6c>
   21c6a:	460d      	mov	r5, r1
   21c6c:	10a4      	asrs	r4, r4, #2
   21c6e:	d01c      	beq.n	21caa <__pow5mult+0x4e>
   21c70:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21c72:	b396      	cbz	r6, 21cda <__pow5mult+0x7e>
   21c74:	07e3      	lsls	r3, r4, #31
   21c76:	f04f 0800 	mov.w	r8, #0
   21c7a:	d406      	bmi.n	21c8a <__pow5mult+0x2e>
   21c7c:	1064      	asrs	r4, r4, #1
   21c7e:	d014      	beq.n	21caa <__pow5mult+0x4e>
   21c80:	6830      	ldr	r0, [r6, #0]
   21c82:	b1a8      	cbz	r0, 21cb0 <__pow5mult+0x54>
   21c84:	4606      	mov	r6, r0
   21c86:	07e3      	lsls	r3, r4, #31
   21c88:	d5f8      	bpl.n	21c7c <__pow5mult+0x20>
   21c8a:	4632      	mov	r2, r6
   21c8c:	4629      	mov	r1, r5
   21c8e:	4638      	mov	r0, r7
   21c90:	f7ff ff52 	bl	21b38 <__multiply>
   21c94:	b1b5      	cbz	r5, 21cc4 <__pow5mult+0x68>
   21c96:	686a      	ldr	r2, [r5, #4]
   21c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21c9a:	1064      	asrs	r4, r4, #1
   21c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21ca0:	6029      	str	r1, [r5, #0]
   21ca2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21ca6:	4605      	mov	r5, r0
   21ca8:	d1ea      	bne.n	21c80 <__pow5mult+0x24>
   21caa:	4628      	mov	r0, r5
   21cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21cb0:	4632      	mov	r2, r6
   21cb2:	4631      	mov	r1, r6
   21cb4:	4638      	mov	r0, r7
   21cb6:	f7ff ff3f 	bl	21b38 <__multiply>
   21cba:	6030      	str	r0, [r6, #0]
   21cbc:	f8c0 8000 	str.w	r8, [r0]
   21cc0:	4606      	mov	r6, r0
   21cc2:	e7e0      	b.n	21c86 <__pow5mult+0x2a>
   21cc4:	4605      	mov	r5, r0
   21cc6:	e7d9      	b.n	21c7c <__pow5mult+0x20>
   21cc8:	1e5a      	subs	r2, r3, #1
   21cca:	4d0b      	ldr	r5, [pc, #44]	; (21cf8 <__pow5mult+0x9c>)
   21ccc:	2300      	movs	r3, #0
   21cce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21cd2:	f7ff fe97 	bl	21a04 <__multadd>
   21cd6:	4605      	mov	r5, r0
   21cd8:	e7c8      	b.n	21c6c <__pow5mult+0x10>
   21cda:	2101      	movs	r1, #1
   21cdc:	4638      	mov	r0, r7
   21cde:	f7ff fe61 	bl	219a4 <_Balloc>
   21ce2:	f240 2171 	movw	r1, #625	; 0x271
   21ce6:	2201      	movs	r2, #1
   21ce8:	2300      	movs	r3, #0
   21cea:	6141      	str	r1, [r0, #20]
   21cec:	6102      	str	r2, [r0, #16]
   21cee:	4606      	mov	r6, r0
   21cf0:	64b8      	str	r0, [r7, #72]	; 0x48
   21cf2:	6003      	str	r3, [r0, #0]
   21cf4:	e7be      	b.n	21c74 <__pow5mult+0x18>
   21cf6:	bf00      	nop
   21cf8:	00024c88 	.word	0x00024c88

00021cfc <__lshift>:
   21cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21d00:	4691      	mov	r9, r2
   21d02:	690a      	ldr	r2, [r1, #16]
   21d04:	688b      	ldr	r3, [r1, #8]
   21d06:	ea4f 1469 	mov.w	r4, r9, asr #5
   21d0a:	eb04 0802 	add.w	r8, r4, r2
   21d0e:	f108 0501 	add.w	r5, r8, #1
   21d12:	429d      	cmp	r5, r3
   21d14:	460e      	mov	r6, r1
   21d16:	4607      	mov	r7, r0
   21d18:	6849      	ldr	r1, [r1, #4]
   21d1a:	dd04      	ble.n	21d26 <__lshift+0x2a>
   21d1c:	005b      	lsls	r3, r3, #1
   21d1e:	429d      	cmp	r5, r3
   21d20:	f101 0101 	add.w	r1, r1, #1
   21d24:	dcfa      	bgt.n	21d1c <__lshift+0x20>
   21d26:	4638      	mov	r0, r7
   21d28:	f7ff fe3c 	bl	219a4 <_Balloc>
   21d2c:	2c00      	cmp	r4, #0
   21d2e:	f100 0314 	add.w	r3, r0, #20
   21d32:	dd06      	ble.n	21d42 <__lshift+0x46>
   21d34:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21d38:	2100      	movs	r1, #0
   21d3a:	f843 1b04 	str.w	r1, [r3], #4
   21d3e:	429a      	cmp	r2, r3
   21d40:	d1fb      	bne.n	21d3a <__lshift+0x3e>
   21d42:	6934      	ldr	r4, [r6, #16]
   21d44:	f106 0114 	add.w	r1, r6, #20
   21d48:	f019 091f 	ands.w	r9, r9, #31
   21d4c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   21d50:	d01d      	beq.n	21d8e <__lshift+0x92>
   21d52:	f1c9 0c20 	rsb	ip, r9, #32
   21d56:	2200      	movs	r2, #0
   21d58:	680c      	ldr	r4, [r1, #0]
   21d5a:	fa04 f409 	lsl.w	r4, r4, r9
   21d5e:	4314      	orrs	r4, r2
   21d60:	f843 4b04 	str.w	r4, [r3], #4
   21d64:	f851 2b04 	ldr.w	r2, [r1], #4
   21d68:	458e      	cmp	lr, r1
   21d6a:	fa22 f20c 	lsr.w	r2, r2, ip
   21d6e:	d8f3      	bhi.n	21d58 <__lshift+0x5c>
   21d70:	601a      	str	r2, [r3, #0]
   21d72:	b10a      	cbz	r2, 21d78 <__lshift+0x7c>
   21d74:	f108 0502 	add.w	r5, r8, #2
   21d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21d7a:	6872      	ldr	r2, [r6, #4]
   21d7c:	3d01      	subs	r5, #1
   21d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21d82:	6105      	str	r5, [r0, #16]
   21d84:	6031      	str	r1, [r6, #0]
   21d86:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   21d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21d8e:	3b04      	subs	r3, #4
   21d90:	f851 2b04 	ldr.w	r2, [r1], #4
   21d94:	f843 2f04 	str.w	r2, [r3, #4]!
   21d98:	458e      	cmp	lr, r1
   21d9a:	d8f9      	bhi.n	21d90 <__lshift+0x94>
   21d9c:	e7ec      	b.n	21d78 <__lshift+0x7c>
   21d9e:	bf00      	nop

00021da0 <__mcmp>:
   21da0:	b430      	push	{r4, r5}
   21da2:	690b      	ldr	r3, [r1, #16]
   21da4:	4605      	mov	r5, r0
   21da6:	6900      	ldr	r0, [r0, #16]
   21da8:	1ac0      	subs	r0, r0, r3
   21daa:	d10f      	bne.n	21dcc <__mcmp+0x2c>
   21dac:	009b      	lsls	r3, r3, #2
   21dae:	3514      	adds	r5, #20
   21db0:	3114      	adds	r1, #20
   21db2:	4419      	add	r1, r3
   21db4:	442b      	add	r3, r5
   21db6:	e001      	b.n	21dbc <__mcmp+0x1c>
   21db8:	429d      	cmp	r5, r3
   21dba:	d207      	bcs.n	21dcc <__mcmp+0x2c>
   21dbc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   21dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   21dc4:	4294      	cmp	r4, r2
   21dc6:	d0f7      	beq.n	21db8 <__mcmp+0x18>
   21dc8:	d302      	bcc.n	21dd0 <__mcmp+0x30>
   21dca:	2001      	movs	r0, #1
   21dcc:	bc30      	pop	{r4, r5}
   21dce:	4770      	bx	lr
   21dd0:	f04f 30ff 	mov.w	r0, #4294967295
   21dd4:	e7fa      	b.n	21dcc <__mcmp+0x2c>
   21dd6:	bf00      	nop

00021dd8 <__mdiff>:
   21dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ddc:	690f      	ldr	r7, [r1, #16]
   21dde:	460e      	mov	r6, r1
   21de0:	6911      	ldr	r1, [r2, #16]
   21de2:	1a7f      	subs	r7, r7, r1
   21de4:	2f00      	cmp	r7, #0
   21de6:	4690      	mov	r8, r2
   21de8:	d117      	bne.n	21e1a <__mdiff+0x42>
   21dea:	0089      	lsls	r1, r1, #2
   21dec:	f106 0514 	add.w	r5, r6, #20
   21df0:	f102 0e14 	add.w	lr, r2, #20
   21df4:	186b      	adds	r3, r5, r1
   21df6:	4471      	add	r1, lr
   21df8:	e001      	b.n	21dfe <__mdiff+0x26>
   21dfa:	429d      	cmp	r5, r3
   21dfc:	d25c      	bcs.n	21eb8 <__mdiff+0xe0>
   21dfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21e02:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   21e06:	42a2      	cmp	r2, r4
   21e08:	d0f7      	beq.n	21dfa <__mdiff+0x22>
   21e0a:	d25e      	bcs.n	21eca <__mdiff+0xf2>
   21e0c:	4633      	mov	r3, r6
   21e0e:	462c      	mov	r4, r5
   21e10:	4646      	mov	r6, r8
   21e12:	4675      	mov	r5, lr
   21e14:	4698      	mov	r8, r3
   21e16:	2701      	movs	r7, #1
   21e18:	e005      	b.n	21e26 <__mdiff+0x4e>
   21e1a:	db58      	blt.n	21ece <__mdiff+0xf6>
   21e1c:	f106 0514 	add.w	r5, r6, #20
   21e20:	f108 0414 	add.w	r4, r8, #20
   21e24:	2700      	movs	r7, #0
   21e26:	6871      	ldr	r1, [r6, #4]
   21e28:	f7ff fdbc 	bl	219a4 <_Balloc>
   21e2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21e30:	6936      	ldr	r6, [r6, #16]
   21e32:	60c7      	str	r7, [r0, #12]
   21e34:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   21e38:	46a6      	mov	lr, r4
   21e3a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   21e3e:	f100 0414 	add.w	r4, r0, #20
   21e42:	2300      	movs	r3, #0
   21e44:	f85e 1b04 	ldr.w	r1, [lr], #4
   21e48:	f855 8b04 	ldr.w	r8, [r5], #4
   21e4c:	b28a      	uxth	r2, r1
   21e4e:	fa13 f388 	uxtah	r3, r3, r8
   21e52:	0c09      	lsrs	r1, r1, #16
   21e54:	1a9a      	subs	r2, r3, r2
   21e56:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   21e5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   21e5e:	b292      	uxth	r2, r2
   21e60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   21e64:	45f4      	cmp	ip, lr
   21e66:	f844 2b04 	str.w	r2, [r4], #4
   21e6a:	ea4f 4323 	mov.w	r3, r3, asr #16
   21e6e:	d8e9      	bhi.n	21e44 <__mdiff+0x6c>
   21e70:	42af      	cmp	r7, r5
   21e72:	d917      	bls.n	21ea4 <__mdiff+0xcc>
   21e74:	46a4      	mov	ip, r4
   21e76:	46ae      	mov	lr, r5
   21e78:	f85e 2b04 	ldr.w	r2, [lr], #4
   21e7c:	fa13 f382 	uxtah	r3, r3, r2
   21e80:	1419      	asrs	r1, r3, #16
   21e82:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   21e86:	b29b      	uxth	r3, r3
   21e88:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   21e8c:	4577      	cmp	r7, lr
   21e8e:	f84c 2b04 	str.w	r2, [ip], #4
   21e92:	ea4f 4321 	mov.w	r3, r1, asr #16
   21e96:	d8ef      	bhi.n	21e78 <__mdiff+0xa0>
   21e98:	43ed      	mvns	r5, r5
   21e9a:	442f      	add	r7, r5
   21e9c:	f027 0703 	bic.w	r7, r7, #3
   21ea0:	3704      	adds	r7, #4
   21ea2:	443c      	add	r4, r7
   21ea4:	3c04      	subs	r4, #4
   21ea6:	b922      	cbnz	r2, 21eb2 <__mdiff+0xda>
   21ea8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   21eac:	3e01      	subs	r6, #1
   21eae:	2b00      	cmp	r3, #0
   21eb0:	d0fa      	beq.n	21ea8 <__mdiff+0xd0>
   21eb2:	6106      	str	r6, [r0, #16]
   21eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21eb8:	2100      	movs	r1, #0
   21eba:	f7ff fd73 	bl	219a4 <_Balloc>
   21ebe:	2201      	movs	r2, #1
   21ec0:	2300      	movs	r3, #0
   21ec2:	6102      	str	r2, [r0, #16]
   21ec4:	6143      	str	r3, [r0, #20]
   21ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21eca:	4674      	mov	r4, lr
   21ecc:	e7ab      	b.n	21e26 <__mdiff+0x4e>
   21ece:	4633      	mov	r3, r6
   21ed0:	f106 0414 	add.w	r4, r6, #20
   21ed4:	f102 0514 	add.w	r5, r2, #20
   21ed8:	4616      	mov	r6, r2
   21eda:	2701      	movs	r7, #1
   21edc:	4698      	mov	r8, r3
   21ede:	e7a2      	b.n	21e26 <__mdiff+0x4e>

00021ee0 <__d2b>:
   21ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ee4:	ec57 6b10 	vmov	r6, r7, d0
   21ee8:	b083      	sub	sp, #12
   21eea:	4688      	mov	r8, r1
   21eec:	2101      	movs	r1, #1
   21eee:	463c      	mov	r4, r7
   21ef0:	f3c7 550a 	ubfx	r5, r7, #20, #11
   21ef4:	4617      	mov	r7, r2
   21ef6:	f7ff fd55 	bl	219a4 <_Balloc>
   21efa:	f3c4 0413 	ubfx	r4, r4, #0, #20
   21efe:	4681      	mov	r9, r0
   21f00:	b10d      	cbz	r5, 21f06 <__d2b+0x26>
   21f02:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   21f06:	9401      	str	r4, [sp, #4]
   21f08:	b31e      	cbz	r6, 21f52 <__d2b+0x72>
   21f0a:	a802      	add	r0, sp, #8
   21f0c:	f840 6d08 	str.w	r6, [r0, #-8]!
   21f10:	f7ff fdd8 	bl	21ac4 <__lo0bits>
   21f14:	2800      	cmp	r0, #0
   21f16:	d134      	bne.n	21f82 <__d2b+0xa2>
   21f18:	e89d 000c 	ldmia.w	sp, {r2, r3}
   21f1c:	f8c9 2014 	str.w	r2, [r9, #20]
   21f20:	2b00      	cmp	r3, #0
   21f22:	bf0c      	ite	eq
   21f24:	2101      	moveq	r1, #1
   21f26:	2102      	movne	r1, #2
   21f28:	f8c9 3018 	str.w	r3, [r9, #24]
   21f2c:	f8c9 1010 	str.w	r1, [r9, #16]
   21f30:	b9dd      	cbnz	r5, 21f6a <__d2b+0x8a>
   21f32:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   21f36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   21f3a:	f8c8 0000 	str.w	r0, [r8]
   21f3e:	6918      	ldr	r0, [r3, #16]
   21f40:	f7ff fda0 	bl	21a84 <__hi0bits>
   21f44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   21f48:	6038      	str	r0, [r7, #0]
   21f4a:	4648      	mov	r0, r9
   21f4c:	b003      	add	sp, #12
   21f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21f52:	a801      	add	r0, sp, #4
   21f54:	f7ff fdb6 	bl	21ac4 <__lo0bits>
   21f58:	9b01      	ldr	r3, [sp, #4]
   21f5a:	f8c9 3014 	str.w	r3, [r9, #20]
   21f5e:	2101      	movs	r1, #1
   21f60:	3020      	adds	r0, #32
   21f62:	f8c9 1010 	str.w	r1, [r9, #16]
   21f66:	2d00      	cmp	r5, #0
   21f68:	d0e3      	beq.n	21f32 <__d2b+0x52>
   21f6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   21f6e:	4405      	add	r5, r0
   21f70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   21f74:	f8c8 5000 	str.w	r5, [r8]
   21f78:	6038      	str	r0, [r7, #0]
   21f7a:	4648      	mov	r0, r9
   21f7c:	b003      	add	sp, #12
   21f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21f82:	e89d 000a 	ldmia.w	sp, {r1, r3}
   21f86:	f1c0 0220 	rsb	r2, r0, #32
   21f8a:	fa03 f202 	lsl.w	r2, r3, r2
   21f8e:	430a      	orrs	r2, r1
   21f90:	40c3      	lsrs	r3, r0
   21f92:	9301      	str	r3, [sp, #4]
   21f94:	f8c9 2014 	str.w	r2, [r9, #20]
   21f98:	e7c2      	b.n	21f20 <__d2b+0x40>
   21f9a:	bf00      	nop

00021f9c <__sread>:
   21f9c:	b510      	push	{r4, lr}
   21f9e:	460c      	mov	r4, r1
   21fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21fa4:	f000 f9fe 	bl	223a4 <_read_r>
   21fa8:	2800      	cmp	r0, #0
   21faa:	db03      	blt.n	21fb4 <__sread+0x18>
   21fac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   21fae:	4403      	add	r3, r0
   21fb0:	6523      	str	r3, [r4, #80]	; 0x50
   21fb2:	bd10      	pop	{r4, pc}
   21fb4:	89a3      	ldrh	r3, [r4, #12]
   21fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21fba:	81a3      	strh	r3, [r4, #12]
   21fbc:	bd10      	pop	{r4, pc}
   21fbe:	bf00      	nop

00021fc0 <__swrite>:
   21fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21fc4:	4616      	mov	r6, r2
   21fc6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   21fca:	461f      	mov	r7, r3
   21fcc:	05d3      	lsls	r3, r2, #23
   21fce:	460c      	mov	r4, r1
   21fd0:	4605      	mov	r5, r0
   21fd2:	d507      	bpl.n	21fe4 <__swrite+0x24>
   21fd4:	2200      	movs	r2, #0
   21fd6:	2302      	movs	r3, #2
   21fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21fdc:	f000 f9cc 	bl	22378 <_lseek_r>
   21fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   21fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   21fec:	81a2      	strh	r2, [r4, #12]
   21fee:	463b      	mov	r3, r7
   21ff0:	4632      	mov	r2, r6
   21ff2:	4628      	mov	r0, r5
   21ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21ff8:	f7fe b960 	b.w	202bc <_write_r>

00021ffc <__sseek>:
   21ffc:	b510      	push	{r4, lr}
   21ffe:	460c      	mov	r4, r1
   22000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22004:	f000 f9b8 	bl	22378 <_lseek_r>
   22008:	89a3      	ldrh	r3, [r4, #12]
   2200a:	1c42      	adds	r2, r0, #1
   2200c:	bf0e      	itee	eq
   2200e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22016:	6520      	strne	r0, [r4, #80]	; 0x50
   22018:	81a3      	strh	r3, [r4, #12]
   2201a:	bd10      	pop	{r4, pc}

0002201c <__sclose>:
   2201c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22020:	f000 b910 	b.w	22244 <_close_r>

00022024 <__ssprint_r>:
   22024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22028:	6893      	ldr	r3, [r2, #8]
   2202a:	b083      	sub	sp, #12
   2202c:	4690      	mov	r8, r2
   2202e:	2b00      	cmp	r3, #0
   22030:	d070      	beq.n	22114 <__ssprint_r+0xf0>
   22032:	4682      	mov	sl, r0
   22034:	460c      	mov	r4, r1
   22036:	6817      	ldr	r7, [r2, #0]
   22038:	688d      	ldr	r5, [r1, #8]
   2203a:	6808      	ldr	r0, [r1, #0]
   2203c:	e042      	b.n	220c4 <__ssprint_r+0xa0>
   2203e:	89a3      	ldrh	r3, [r4, #12]
   22040:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22044:	d02e      	beq.n	220a4 <__ssprint_r+0x80>
   22046:	6965      	ldr	r5, [r4, #20]
   22048:	6921      	ldr	r1, [r4, #16]
   2204a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2204e:	eba0 0b01 	sub.w	fp, r0, r1
   22052:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22056:	f10b 0001 	add.w	r0, fp, #1
   2205a:	106d      	asrs	r5, r5, #1
   2205c:	4430      	add	r0, r6
   2205e:	42a8      	cmp	r0, r5
   22060:	462a      	mov	r2, r5
   22062:	bf84      	itt	hi
   22064:	4605      	movhi	r5, r0
   22066:	462a      	movhi	r2, r5
   22068:	055b      	lsls	r3, r3, #21
   2206a:	d538      	bpl.n	220de <__ssprint_r+0xba>
   2206c:	4611      	mov	r1, r2
   2206e:	4650      	mov	r0, sl
   22070:	f7fb fccc 	bl	1da0c <_malloc_r>
   22074:	2800      	cmp	r0, #0
   22076:	d03c      	beq.n	220f2 <__ssprint_r+0xce>
   22078:	465a      	mov	r2, fp
   2207a:	6921      	ldr	r1, [r4, #16]
   2207c:	9001      	str	r0, [sp, #4]
   2207e:	f7fc f80f 	bl	1e0a0 <memcpy>
   22082:	89a2      	ldrh	r2, [r4, #12]
   22084:	9b01      	ldr	r3, [sp, #4]
   22086:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2208a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2208e:	81a2      	strh	r2, [r4, #12]
   22090:	eba5 020b 	sub.w	r2, r5, fp
   22094:	eb03 000b 	add.w	r0, r3, fp
   22098:	6165      	str	r5, [r4, #20]
   2209a:	6123      	str	r3, [r4, #16]
   2209c:	6020      	str	r0, [r4, #0]
   2209e:	60a2      	str	r2, [r4, #8]
   220a0:	4635      	mov	r5, r6
   220a2:	46b3      	mov	fp, r6
   220a4:	465a      	mov	r2, fp
   220a6:	4649      	mov	r1, r9
   220a8:	f7fc f894 	bl	1e1d4 <memmove>
   220ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   220b0:	68a2      	ldr	r2, [r4, #8]
   220b2:	6820      	ldr	r0, [r4, #0]
   220b4:	1b55      	subs	r5, r2, r5
   220b6:	4458      	add	r0, fp
   220b8:	1b9e      	subs	r6, r3, r6
   220ba:	60a5      	str	r5, [r4, #8]
   220bc:	6020      	str	r0, [r4, #0]
   220be:	f8c8 6008 	str.w	r6, [r8, #8]
   220c2:	b33e      	cbz	r6, 22114 <__ssprint_r+0xf0>
   220c4:	687e      	ldr	r6, [r7, #4]
   220c6:	463b      	mov	r3, r7
   220c8:	3708      	adds	r7, #8
   220ca:	2e00      	cmp	r6, #0
   220cc:	d0fa      	beq.n	220c4 <__ssprint_r+0xa0>
   220ce:	42ae      	cmp	r6, r5
   220d0:	f8d3 9000 	ldr.w	r9, [r3]
   220d4:	46ab      	mov	fp, r5
   220d6:	d2b2      	bcs.n	2203e <__ssprint_r+0x1a>
   220d8:	4635      	mov	r5, r6
   220da:	46b3      	mov	fp, r6
   220dc:	e7e2      	b.n	220a4 <__ssprint_r+0x80>
   220de:	4650      	mov	r0, sl
   220e0:	f7fc f976 	bl	1e3d0 <_realloc_r>
   220e4:	4603      	mov	r3, r0
   220e6:	2800      	cmp	r0, #0
   220e8:	d1d2      	bne.n	22090 <__ssprint_r+0x6c>
   220ea:	6921      	ldr	r1, [r4, #16]
   220ec:	4650      	mov	r0, sl
   220ee:	f7ff fac3 	bl	21678 <_free_r>
   220f2:	230c      	movs	r3, #12
   220f4:	f8ca 3000 	str.w	r3, [sl]
   220f8:	89a3      	ldrh	r3, [r4, #12]
   220fa:	2200      	movs	r2, #0
   220fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22100:	f04f 30ff 	mov.w	r0, #4294967295
   22104:	81a3      	strh	r3, [r4, #12]
   22106:	f8c8 2008 	str.w	r2, [r8, #8]
   2210a:	f8c8 2004 	str.w	r2, [r8, #4]
   2210e:	b003      	add	sp, #12
   22110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22114:	2000      	movs	r0, #0
   22116:	f8c8 0004 	str.w	r0, [r8, #4]
   2211a:	b003      	add	sp, #12
   2211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022120 <__register_exitproc>:
   22120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22124:	4d2c      	ldr	r5, [pc, #176]	; (221d8 <__register_exitproc+0xb8>)
   22126:	4606      	mov	r6, r0
   22128:	6828      	ldr	r0, [r5, #0]
   2212a:	4698      	mov	r8, r3
   2212c:	460f      	mov	r7, r1
   2212e:	4691      	mov	r9, r2
   22130:	f7fb fc58 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   22134:	4b29      	ldr	r3, [pc, #164]	; (221dc <__register_exitproc+0xbc>)
   22136:	681c      	ldr	r4, [r3, #0]
   22138:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2213c:	2b00      	cmp	r3, #0
   2213e:	d03e      	beq.n	221be <__register_exitproc+0x9e>
   22140:	685a      	ldr	r2, [r3, #4]
   22142:	2a1f      	cmp	r2, #31
   22144:	dc1c      	bgt.n	22180 <__register_exitproc+0x60>
   22146:	f102 0e01 	add.w	lr, r2, #1
   2214a:	b176      	cbz	r6, 2216a <__register_exitproc+0x4a>
   2214c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22150:	2401      	movs	r4, #1
   22152:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22156:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2215a:	4094      	lsls	r4, r2
   2215c:	4320      	orrs	r0, r4
   2215e:	2e02      	cmp	r6, #2
   22160:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   22164:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22168:	d023      	beq.n	221b2 <__register_exitproc+0x92>
   2216a:	3202      	adds	r2, #2
   2216c:	f8c3 e004 	str.w	lr, [r3, #4]
   22170:	6828      	ldr	r0, [r5, #0]
   22172:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22176:	f7fb fc37 	bl	1d9e8 <__retarget_lock_release_recursive>
   2217a:	2000      	movs	r0, #0
   2217c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22180:	4b17      	ldr	r3, [pc, #92]	; (221e0 <__register_exitproc+0xc0>)
   22182:	b30b      	cbz	r3, 221c8 <__register_exitproc+0xa8>
   22184:	f44f 70c8 	mov.w	r0, #400	; 0x190
   22188:	f7fb fc30 	bl	1d9ec <malloc>
   2218c:	4603      	mov	r3, r0
   2218e:	b1d8      	cbz	r0, 221c8 <__register_exitproc+0xa8>
   22190:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22194:	6002      	str	r2, [r0, #0]
   22196:	2100      	movs	r1, #0
   22198:	6041      	str	r1, [r0, #4]
   2219a:	460a      	mov	r2, r1
   2219c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   221a0:	f04f 0e01 	mov.w	lr, #1
   221a4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   221a8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   221ac:	2e00      	cmp	r6, #0
   221ae:	d0dc      	beq.n	2216a <__register_exitproc+0x4a>
   221b0:	e7cc      	b.n	2214c <__register_exitproc+0x2c>
   221b2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   221b6:	430c      	orrs	r4, r1
   221b8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   221bc:	e7d5      	b.n	2216a <__register_exitproc+0x4a>
   221be:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   221c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   221c6:	e7bb      	b.n	22140 <__register_exitproc+0x20>
   221c8:	6828      	ldr	r0, [r5, #0]
   221ca:	f7fb fc0d 	bl	1d9e8 <__retarget_lock_release_recursive>
   221ce:	f04f 30ff 	mov.w	r0, #4294967295
   221d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   221d6:	bf00      	nop
   221d8:	20000aa4 	.word	0x20000aa4
   221dc:	000249e8 	.word	0x000249e8
   221e0:	0001d9ed 	.word	0x0001d9ed

000221e4 <_calloc_r>:
   221e4:	b510      	push	{r4, lr}
   221e6:	fb02 f101 	mul.w	r1, r2, r1
   221ea:	f7fb fc0f 	bl	1da0c <_malloc_r>
   221ee:	4604      	mov	r4, r0
   221f0:	b1d8      	cbz	r0, 2222a <_calloc_r+0x46>
   221f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   221f6:	f022 0203 	bic.w	r2, r2, #3
   221fa:	3a04      	subs	r2, #4
   221fc:	2a24      	cmp	r2, #36	; 0x24
   221fe:	d818      	bhi.n	22232 <_calloc_r+0x4e>
   22200:	2a13      	cmp	r2, #19
   22202:	d914      	bls.n	2222e <_calloc_r+0x4a>
   22204:	2300      	movs	r3, #0
   22206:	2a1b      	cmp	r2, #27
   22208:	6003      	str	r3, [r0, #0]
   2220a:	6043      	str	r3, [r0, #4]
   2220c:	d916      	bls.n	2223c <_calloc_r+0x58>
   2220e:	2a24      	cmp	r2, #36	; 0x24
   22210:	6083      	str	r3, [r0, #8]
   22212:	60c3      	str	r3, [r0, #12]
   22214:	bf11      	iteee	ne
   22216:	f100 0210 	addne.w	r2, r0, #16
   2221a:	6103      	streq	r3, [r0, #16]
   2221c:	6143      	streq	r3, [r0, #20]
   2221e:	f100 0218 	addeq.w	r2, r0, #24
   22222:	2300      	movs	r3, #0
   22224:	6013      	str	r3, [r2, #0]
   22226:	6053      	str	r3, [r2, #4]
   22228:	6093      	str	r3, [r2, #8]
   2222a:	4620      	mov	r0, r4
   2222c:	bd10      	pop	{r4, pc}
   2222e:	4602      	mov	r2, r0
   22230:	e7f7      	b.n	22222 <_calloc_r+0x3e>
   22232:	2100      	movs	r1, #0
   22234:	f7fc f832 	bl	1e29c <memset>
   22238:	4620      	mov	r0, r4
   2223a:	bd10      	pop	{r4, pc}
   2223c:	f100 0208 	add.w	r2, r0, #8
   22240:	e7ef      	b.n	22222 <_calloc_r+0x3e>
   22242:	bf00      	nop

00022244 <_close_r>:
   22244:	b538      	push	{r3, r4, r5, lr}
   22246:	4c07      	ldr	r4, [pc, #28]	; (22264 <_close_r+0x20>)
   22248:	2300      	movs	r3, #0
   2224a:	4605      	mov	r5, r0
   2224c:	4608      	mov	r0, r1
   2224e:	6023      	str	r3, [r4, #0]
   22250:	f000 f9ac 	bl	225ac <_close>
   22254:	1c43      	adds	r3, r0, #1
   22256:	d000      	beq.n	2225a <_close_r+0x16>
   22258:	bd38      	pop	{r3, r4, r5, pc}
   2225a:	6823      	ldr	r3, [r4, #0]
   2225c:	2b00      	cmp	r3, #0
   2225e:	d0fb      	beq.n	22258 <_close_r+0x14>
   22260:	602b      	str	r3, [r5, #0]
   22262:	bd38      	pop	{r3, r4, r5, pc}
   22264:	2000239c 	.word	0x2000239c

00022268 <_fclose_r>:
   22268:	b570      	push	{r4, r5, r6, lr}
   2226a:	b159      	cbz	r1, 22284 <_fclose_r+0x1c>
   2226c:	4605      	mov	r5, r0
   2226e:	460c      	mov	r4, r1
   22270:	b110      	cbz	r0, 22278 <_fclose_r+0x10>
   22272:	6b83      	ldr	r3, [r0, #56]	; 0x38
   22274:	2b00      	cmp	r3, #0
   22276:	d03c      	beq.n	222f2 <_fclose_r+0x8a>
   22278:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2227a:	07d8      	lsls	r0, r3, #31
   2227c:	d505      	bpl.n	2228a <_fclose_r+0x22>
   2227e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22282:	b92b      	cbnz	r3, 22290 <_fclose_r+0x28>
   22284:	2600      	movs	r6, #0
   22286:	4630      	mov	r0, r6
   22288:	bd70      	pop	{r4, r5, r6, pc}
   2228a:	89a3      	ldrh	r3, [r4, #12]
   2228c:	0599      	lsls	r1, r3, #22
   2228e:	d53c      	bpl.n	2230a <_fclose_r+0xa2>
   22290:	4621      	mov	r1, r4
   22292:	4628      	mov	r0, r5
   22294:	f7ff f856 	bl	21344 <__sflush_r>
   22298:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2229a:	4606      	mov	r6, r0
   2229c:	b133      	cbz	r3, 222ac <_fclose_r+0x44>
   2229e:	69e1      	ldr	r1, [r4, #28]
   222a0:	4628      	mov	r0, r5
   222a2:	4798      	blx	r3
   222a4:	2800      	cmp	r0, #0
   222a6:	bfb8      	it	lt
   222a8:	f04f 36ff 	movlt.w	r6, #4294967295
   222ac:	89a3      	ldrh	r3, [r4, #12]
   222ae:	061a      	lsls	r2, r3, #24
   222b0:	d422      	bmi.n	222f8 <_fclose_r+0x90>
   222b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   222b4:	b141      	cbz	r1, 222c8 <_fclose_r+0x60>
   222b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   222ba:	4299      	cmp	r1, r3
   222bc:	d002      	beq.n	222c4 <_fclose_r+0x5c>
   222be:	4628      	mov	r0, r5
   222c0:	f7ff f9da 	bl	21678 <_free_r>
   222c4:	2300      	movs	r3, #0
   222c6:	6323      	str	r3, [r4, #48]	; 0x30
   222c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   222ca:	b121      	cbz	r1, 222d6 <_fclose_r+0x6e>
   222cc:	4628      	mov	r0, r5
   222ce:	f7ff f9d3 	bl	21678 <_free_r>
   222d2:	2300      	movs	r3, #0
   222d4:	6463      	str	r3, [r4, #68]	; 0x44
   222d6:	f7ff f959 	bl	2158c <__sfp_lock_acquire>
   222da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   222dc:	2200      	movs	r2, #0
   222de:	07db      	lsls	r3, r3, #31
   222e0:	81a2      	strh	r2, [r4, #12]
   222e2:	d50e      	bpl.n	22302 <_fclose_r+0x9a>
   222e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   222e6:	f7fb fb7b 	bl	1d9e0 <__retarget_lock_close_recursive>
   222ea:	f7ff f955 	bl	21598 <__sfp_lock_release>
   222ee:	4630      	mov	r0, r6
   222f0:	bd70      	pop	{r4, r5, r6, pc}
   222f2:	f7ff f91f 	bl	21534 <__sinit>
   222f6:	e7bf      	b.n	22278 <_fclose_r+0x10>
   222f8:	6921      	ldr	r1, [r4, #16]
   222fa:	4628      	mov	r0, r5
   222fc:	f7ff f9bc 	bl	21678 <_free_r>
   22300:	e7d7      	b.n	222b2 <_fclose_r+0x4a>
   22302:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22304:	f7fb fb70 	bl	1d9e8 <__retarget_lock_release_recursive>
   22308:	e7ec      	b.n	222e4 <_fclose_r+0x7c>
   2230a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2230c:	f7fb fb6a 	bl	1d9e4 <__retarget_lock_acquire_recursive>
   22310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22314:	2b00      	cmp	r3, #0
   22316:	d1bb      	bne.n	22290 <_fclose_r+0x28>
   22318:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2231a:	f016 0601 	ands.w	r6, r6, #1
   2231e:	d1b1      	bne.n	22284 <_fclose_r+0x1c>
   22320:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22322:	f7fb fb61 	bl	1d9e8 <__retarget_lock_release_recursive>
   22326:	4630      	mov	r0, r6
   22328:	bd70      	pop	{r4, r5, r6, pc}
   2232a:	bf00      	nop

0002232c <_fstat_r>:
   2232c:	b538      	push	{r3, r4, r5, lr}
   2232e:	460b      	mov	r3, r1
   22330:	4c07      	ldr	r4, [pc, #28]	; (22350 <_fstat_r+0x24>)
   22332:	4605      	mov	r5, r0
   22334:	4611      	mov	r1, r2
   22336:	4618      	mov	r0, r3
   22338:	2300      	movs	r3, #0
   2233a:	6023      	str	r3, [r4, #0]
   2233c:	f000 f9b4 	bl	226a8 <_fstat>
   22340:	1c43      	adds	r3, r0, #1
   22342:	d000      	beq.n	22346 <_fstat_r+0x1a>
   22344:	bd38      	pop	{r3, r4, r5, pc}
   22346:	6823      	ldr	r3, [r4, #0]
   22348:	2b00      	cmp	r3, #0
   2234a:	d0fb      	beq.n	22344 <_fstat_r+0x18>
   2234c:	602b      	str	r3, [r5, #0]
   2234e:	bd38      	pop	{r3, r4, r5, pc}
   22350:	2000239c 	.word	0x2000239c

00022354 <_isatty_r>:
   22354:	b538      	push	{r3, r4, r5, lr}
   22356:	4c07      	ldr	r4, [pc, #28]	; (22374 <_isatty_r+0x20>)
   22358:	2300      	movs	r3, #0
   2235a:	4605      	mov	r5, r0
   2235c:	4608      	mov	r0, r1
   2235e:	6023      	str	r3, [r4, #0]
   22360:	f000 f9b0 	bl	226c4 <_isatty>
   22364:	1c43      	adds	r3, r0, #1
   22366:	d000      	beq.n	2236a <_isatty_r+0x16>
   22368:	bd38      	pop	{r3, r4, r5, pc}
   2236a:	6823      	ldr	r3, [r4, #0]
   2236c:	2b00      	cmp	r3, #0
   2236e:	d0fb      	beq.n	22368 <_isatty_r+0x14>
   22370:	602b      	str	r3, [r5, #0]
   22372:	bd38      	pop	{r3, r4, r5, pc}
   22374:	2000239c 	.word	0x2000239c

00022378 <_lseek_r>:
   22378:	b570      	push	{r4, r5, r6, lr}
   2237a:	460d      	mov	r5, r1
   2237c:	4c08      	ldr	r4, [pc, #32]	; (223a0 <_lseek_r+0x28>)
   2237e:	4611      	mov	r1, r2
   22380:	4606      	mov	r6, r0
   22382:	461a      	mov	r2, r3
   22384:	4628      	mov	r0, r5
   22386:	2300      	movs	r3, #0
   22388:	6023      	str	r3, [r4, #0]
   2238a:	f000 f8d3 	bl	22534 <_lseek>
   2238e:	1c43      	adds	r3, r0, #1
   22390:	d000      	beq.n	22394 <_lseek_r+0x1c>
   22392:	bd70      	pop	{r4, r5, r6, pc}
   22394:	6823      	ldr	r3, [r4, #0]
   22396:	2b00      	cmp	r3, #0
   22398:	d0fb      	beq.n	22392 <_lseek_r+0x1a>
   2239a:	6033      	str	r3, [r6, #0]
   2239c:	bd70      	pop	{r4, r5, r6, pc}
   2239e:	bf00      	nop
   223a0:	2000239c 	.word	0x2000239c

000223a4 <_read_r>:
   223a4:	b570      	push	{r4, r5, r6, lr}
   223a6:	460d      	mov	r5, r1
   223a8:	4c08      	ldr	r4, [pc, #32]	; (223cc <_read_r+0x28>)
   223aa:	4611      	mov	r1, r2
   223ac:	4606      	mov	r6, r0
   223ae:	461a      	mov	r2, r3
   223b0:	4628      	mov	r0, r5
   223b2:	2300      	movs	r3, #0
   223b4:	6023      	str	r3, [r4, #0]
   223b6:	f000 f84b 	bl	22450 <_read>
   223ba:	1c43      	adds	r3, r0, #1
   223bc:	d000      	beq.n	223c0 <_read_r+0x1c>
   223be:	bd70      	pop	{r4, r5, r6, pc}
   223c0:	6823      	ldr	r3, [r4, #0]
   223c2:	2b00      	cmp	r3, #0
   223c4:	d0fb      	beq.n	223be <_read_r+0x1a>
   223c6:	6033      	str	r3, [r6, #0]
   223c8:	bd70      	pop	{r4, r5, r6, pc}
   223ca:	bf00      	nop
   223cc:	2000239c 	.word	0x2000239c

000223d0 <__aeabi_dcmpun>:
   223d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   223d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   223d8:	d102      	bne.n	223e0 <__aeabi_dcmpun+0x10>
   223da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   223de:	d10a      	bne.n	223f6 <__aeabi_dcmpun+0x26>
   223e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   223e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   223e8:	d102      	bne.n	223f0 <__aeabi_dcmpun+0x20>
   223ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   223ee:	d102      	bne.n	223f6 <__aeabi_dcmpun+0x26>
   223f0:	f04f 0000 	mov.w	r0, #0
   223f4:	4770      	bx	lr
   223f6:	f04f 0001 	mov.w	r0, #1
   223fa:	4770      	bx	lr

000223fc <findslot>:
   223fc:	4b0b      	ldr	r3, [pc, #44]	; (2242c <findslot+0x30>)
   223fe:	681b      	ldr	r3, [r3, #0]
   22400:	b510      	push	{r4, lr}
   22402:	4604      	mov	r4, r0
   22404:	b10b      	cbz	r3, 2240a <findslot+0xe>
   22406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22408:	b14a      	cbz	r2, 2241e <findslot+0x22>
   2240a:	2c13      	cmp	r4, #19
   2240c:	d80c      	bhi.n	22428 <findslot+0x2c>
   2240e:	4808      	ldr	r0, [pc, #32]	; (22430 <findslot+0x34>)
   22410:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22414:	3301      	adds	r3, #1
   22416:	d007      	beq.n	22428 <findslot+0x2c>
   22418:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2241c:	bd10      	pop	{r4, pc}
   2241e:	4618      	mov	r0, r3
   22420:	f7ff f888 	bl	21534 <__sinit>
   22424:	2c13      	cmp	r4, #19
   22426:	d9f2      	bls.n	2240e <findslot+0x12>
   22428:	2000      	movs	r0, #0
   2242a:	bd10      	pop	{r4, pc}
   2242c:	200000f8 	.word	0x200000f8
   22430:	200022d8 	.word	0x200022d8

00022434 <checkerror.part.0>:
   22434:	b570      	push	{r4, r5, r6, lr}
   22436:	f7fb f84d 	bl	1d4d4 <__errno>
   2243a:	2413      	movs	r4, #19
   2243c:	4605      	mov	r5, r0
   2243e:	2600      	movs	r6, #0
   22440:	4620      	mov	r0, r4
   22442:	4631      	mov	r1, r6
   22444:	beab      	bkpt	0x00ab
   22446:	4604      	mov	r4, r0
   22448:	f04f 30ff 	mov.w	r0, #4294967295
   2244c:	602c      	str	r4, [r5, #0]
   2244e:	bd70      	pop	{r4, r5, r6, pc}

00022450 <_read>:
   22450:	b5f0      	push	{r4, r5, r6, r7, lr}
   22452:	b085      	sub	sp, #20
   22454:	460c      	mov	r4, r1
   22456:	4616      	mov	r6, r2
   22458:	f7ff ffd0 	bl	223fc <findslot>
   2245c:	b1c8      	cbz	r0, 22492 <_read+0x42>
   2245e:	6803      	ldr	r3, [r0, #0]
   22460:	9301      	str	r3, [sp, #4]
   22462:	9402      	str	r4, [sp, #8]
   22464:	4605      	mov	r5, r0
   22466:	9603      	str	r6, [sp, #12]
   22468:	2406      	movs	r4, #6
   2246a:	af01      	add	r7, sp, #4
   2246c:	4620      	mov	r0, r4
   2246e:	4639      	mov	r1, r7
   22470:	beab      	bkpt	0x00ab
   22472:	4604      	mov	r4, r0
   22474:	1c62      	adds	r2, r4, #1
   22476:	4620      	mov	r0, r4
   22478:	d005      	beq.n	22486 <_read+0x36>
   2247a:	686b      	ldr	r3, [r5, #4]
   2247c:	1a30      	subs	r0, r6, r0
   2247e:	4403      	add	r3, r0
   22480:	606b      	str	r3, [r5, #4]
   22482:	b005      	add	sp, #20
   22484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22486:	f7ff ffd5 	bl	22434 <checkerror.part.0>
   2248a:	1c43      	adds	r3, r0, #1
   2248c:	d1f5      	bne.n	2247a <_read+0x2a>
   2248e:	b005      	add	sp, #20
   22490:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22492:	f7fb f81f 	bl	1d4d4 <__errno>
   22496:	2309      	movs	r3, #9
   22498:	6003      	str	r3, [r0, #0]
   2249a:	f04f 30ff 	mov.w	r0, #4294967295
   2249e:	e7f0      	b.n	22482 <_read+0x32>

000224a0 <_swilseek>:
   224a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   224a2:	b083      	sub	sp, #12
   224a4:	460d      	mov	r5, r1
   224a6:	4614      	mov	r4, r2
   224a8:	f7ff ffa8 	bl	223fc <findslot>
   224ac:	2800      	cmp	r0, #0
   224ae:	d03a      	beq.n	22526 <_swilseek+0x86>
   224b0:	2c02      	cmp	r4, #2
   224b2:	d825      	bhi.n	22500 <_swilseek+0x60>
   224b4:	2c01      	cmp	r4, #1
   224b6:	4606      	mov	r6, r0
   224b8:	d01f      	beq.n	224fa <_swilseek+0x5a>
   224ba:	2c02      	cmp	r4, #2
   224bc:	d010      	beq.n	224e0 <_swilseek+0x40>
   224be:	466f      	mov	r7, sp
   224c0:	6833      	ldr	r3, [r6, #0]
   224c2:	240a      	movs	r4, #10
   224c4:	e88d 0028 	stmia.w	sp, {r3, r5}
   224c8:	4620      	mov	r0, r4
   224ca:	4639      	mov	r1, r7
   224cc:	beab      	bkpt	0x00ab
   224ce:	4604      	mov	r4, r0
   224d0:	1c63      	adds	r3, r4, #1
   224d2:	d01c      	beq.n	2250e <_swilseek+0x6e>
   224d4:	2c00      	cmp	r4, #0
   224d6:	db23      	blt.n	22520 <_swilseek+0x80>
   224d8:	6075      	str	r5, [r6, #4]
   224da:	4628      	mov	r0, r5
   224dc:	b003      	add	sp, #12
   224de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   224e0:	af02      	add	r7, sp, #8
   224e2:	6803      	ldr	r3, [r0, #0]
   224e4:	f847 3d08 	str.w	r3, [r7, #-8]!
   224e8:	240c      	movs	r4, #12
   224ea:	4620      	mov	r0, r4
   224ec:	4639      	mov	r1, r7
   224ee:	beab      	bkpt	0x00ab
   224f0:	4604      	mov	r4, r0
   224f2:	1c61      	adds	r1, r4, #1
   224f4:	d00f      	beq.n	22516 <_swilseek+0x76>
   224f6:	4425      	add	r5, r4
   224f8:	e7e2      	b.n	224c0 <_swilseek+0x20>
   224fa:	6840      	ldr	r0, [r0, #4]
   224fc:	182d      	adds	r5, r5, r0
   224fe:	d5de      	bpl.n	224be <_swilseek+0x1e>
   22500:	f7fa ffe8 	bl	1d4d4 <__errno>
   22504:	2316      	movs	r3, #22
   22506:	6003      	str	r3, [r0, #0]
   22508:	f04f 35ff 	mov.w	r5, #4294967295
   2250c:	e7e5      	b.n	224da <_swilseek+0x3a>
   2250e:	f7ff ff91 	bl	22434 <checkerror.part.0>
   22512:	4604      	mov	r4, r0
   22514:	e7de      	b.n	224d4 <_swilseek+0x34>
   22516:	f7ff ff8d 	bl	22434 <checkerror.part.0>
   2251a:	1c42      	adds	r2, r0, #1
   2251c:	4604      	mov	r4, r0
   2251e:	d1ea      	bne.n	224f6 <_swilseek+0x56>
   22520:	f04f 35ff 	mov.w	r5, #4294967295
   22524:	e7d9      	b.n	224da <_swilseek+0x3a>
   22526:	f7fa ffd5 	bl	1d4d4 <__errno>
   2252a:	2309      	movs	r3, #9
   2252c:	6003      	str	r3, [r0, #0]
   2252e:	f04f 35ff 	mov.w	r5, #4294967295
   22532:	e7d2      	b.n	224da <_swilseek+0x3a>

00022534 <_lseek>:
   22534:	f7ff bfb4 	b.w	224a0 <_swilseek>

00022538 <_write>:
   22538:	b5f0      	push	{r4, r5, r6, r7, lr}
   2253a:	b085      	sub	sp, #20
   2253c:	460c      	mov	r4, r1
   2253e:	4616      	mov	r6, r2
   22540:	f7ff ff5c 	bl	223fc <findslot>
   22544:	b350      	cbz	r0, 2259c <_write+0x64>
   22546:	6803      	ldr	r3, [r0, #0]
   22548:	9301      	str	r3, [sp, #4]
   2254a:	9402      	str	r4, [sp, #8]
   2254c:	4605      	mov	r5, r0
   2254e:	9603      	str	r6, [sp, #12]
   22550:	2405      	movs	r4, #5
   22552:	af01      	add	r7, sp, #4
   22554:	4620      	mov	r0, r4
   22556:	4639      	mov	r1, r7
   22558:	beab      	bkpt	0x00ab
   2255a:	4604      	mov	r4, r0
   2255c:	1c63      	adds	r3, r4, #1
   2255e:	d016      	beq.n	2258e <_write+0x56>
   22560:	2c00      	cmp	r4, #0
   22562:	db18      	blt.n	22596 <_write+0x5e>
   22564:	686a      	ldr	r2, [r5, #4]
   22566:	1b30      	subs	r0, r6, r4
   22568:	4402      	add	r2, r0
   2256a:	42a6      	cmp	r6, r4
   2256c:	606a      	str	r2, [r5, #4]
   2256e:	d001      	beq.n	22574 <_write+0x3c>
   22570:	b005      	add	sp, #20
   22572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22574:	f7fa ffae 	bl	1d4d4 <__errno>
   22578:	2513      	movs	r5, #19
   2257a:	4606      	mov	r6, r0
   2257c:	2400      	movs	r4, #0
   2257e:	4628      	mov	r0, r5
   22580:	4621      	mov	r1, r4
   22582:	beab      	bkpt	0x00ab
   22584:	4605      	mov	r5, r0
   22586:	4620      	mov	r0, r4
   22588:	6035      	str	r5, [r6, #0]
   2258a:	b005      	add	sp, #20
   2258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2258e:	f7ff ff51 	bl	22434 <checkerror.part.0>
   22592:	4604      	mov	r4, r0
   22594:	e7e4      	b.n	22560 <_write+0x28>
   22596:	f04f 30ff 	mov.w	r0, #4294967295
   2259a:	e7e9      	b.n	22570 <_write+0x38>
   2259c:	f7fa ff9a 	bl	1d4d4 <__errno>
   225a0:	2309      	movs	r3, #9
   225a2:	6003      	str	r3, [r0, #0]
   225a4:	f04f 30ff 	mov.w	r0, #4294967295
   225a8:	e7e2      	b.n	22570 <_write+0x38>
   225aa:	bf00      	nop

000225ac <_close>:
   225ac:	b570      	push	{r4, r5, r6, lr}
   225ae:	b082      	sub	sp, #8
   225b0:	4604      	mov	r4, r0
   225b2:	f7ff ff23 	bl	223fc <findslot>
   225b6:	b310      	cbz	r0, 225fe <_close+0x52>
   225b8:	3c01      	subs	r4, #1
   225ba:	2c01      	cmp	r4, #1
   225bc:	4606      	mov	r6, r0
   225be:	d911      	bls.n	225e4 <_close+0x38>
   225c0:	ad02      	add	r5, sp, #8
   225c2:	6833      	ldr	r3, [r6, #0]
   225c4:	f845 3d04 	str.w	r3, [r5, #-4]!
   225c8:	2402      	movs	r4, #2
   225ca:	4620      	mov	r0, r4
   225cc:	4629      	mov	r1, r5
   225ce:	beab      	bkpt	0x00ab
   225d0:	4604      	mov	r4, r0
   225d2:	1c63      	adds	r3, r4, #1
   225d4:	4620      	mov	r0, r4
   225d6:	d00f      	beq.n	225f8 <_close+0x4c>
   225d8:	b910      	cbnz	r0, 225e0 <_close+0x34>
   225da:	f04f 33ff 	mov.w	r3, #4294967295
   225de:	6033      	str	r3, [r6, #0]
   225e0:	b002      	add	sp, #8
   225e2:	bd70      	pop	{r4, r5, r6, pc}
   225e4:	4b09      	ldr	r3, [pc, #36]	; (2260c <_close+0x60>)
   225e6:	689a      	ldr	r2, [r3, #8]
   225e8:	691b      	ldr	r3, [r3, #16]
   225ea:	429a      	cmp	r2, r3
   225ec:	d1e8      	bne.n	225c0 <_close+0x14>
   225ee:	f04f 33ff 	mov.w	r3, #4294967295
   225f2:	6003      	str	r3, [r0, #0]
   225f4:	2000      	movs	r0, #0
   225f6:	e7f3      	b.n	225e0 <_close+0x34>
   225f8:	f7ff ff1c 	bl	22434 <checkerror.part.0>
   225fc:	e7ec      	b.n	225d8 <_close+0x2c>
   225fe:	f7fa ff69 	bl	1d4d4 <__errno>
   22602:	2309      	movs	r3, #9
   22604:	6003      	str	r3, [r0, #0]
   22606:	f04f 30ff 	mov.w	r0, #4294967295
   2260a:	e7e9      	b.n	225e0 <_close+0x34>
   2260c:	200022d8 	.word	0x200022d8

00022610 <_getpid>:
   22610:	2001      	movs	r0, #1
   22612:	4770      	bx	lr

00022614 <_sbrk>:
   22614:	4a0e      	ldr	r2, [pc, #56]	; (22650 <_sbrk+0x3c>)
   22616:	6813      	ldr	r3, [r2, #0]
   22618:	b510      	push	{r4, lr}
   2261a:	b1ab      	cbz	r3, 22648 <_sbrk+0x34>
   2261c:	4418      	add	r0, r3
   2261e:	4669      	mov	r1, sp
   22620:	4288      	cmp	r0, r1
   22622:	d809      	bhi.n	22638 <_sbrk+0x24>
   22624:	490b      	ldr	r1, [pc, #44]	; (22654 <_sbrk+0x40>)
   22626:	4c0c      	ldr	r4, [pc, #48]	; (22658 <_sbrk+0x44>)
   22628:	6809      	ldr	r1, [r1, #0]
   2262a:	42a1      	cmp	r1, r4
   2262c:	d001      	beq.n	22632 <_sbrk+0x1e>
   2262e:	4288      	cmp	r0, r1
   22630:	d802      	bhi.n	22638 <_sbrk+0x24>
   22632:	6010      	str	r0, [r2, #0]
   22634:	4618      	mov	r0, r3
   22636:	bd10      	pop	{r4, pc}
   22638:	f7fa ff4c 	bl	1d4d4 <__errno>
   2263c:	230c      	movs	r3, #12
   2263e:	6003      	str	r3, [r0, #0]
   22640:	f04f 33ff 	mov.w	r3, #4294967295
   22644:	4618      	mov	r0, r3
   22646:	bd10      	pop	{r4, pc}
   22648:	4b04      	ldr	r3, [pc, #16]	; (2265c <_sbrk+0x48>)
   2264a:	6013      	str	r3, [r2, #0]
   2264c:	e7e6      	b.n	2261c <_sbrk+0x8>
   2264e:	bf00      	nop
   22650:	200022d4 	.word	0x200022d4
   22654:	20000aa8 	.word	0x20000aa8
   22658:	cafedead 	.word	0xcafedead
   2265c:	200023a0 	.word	0x200023a0

00022660 <_swistat>:
   22660:	b570      	push	{r4, r5, r6, lr}
   22662:	460d      	mov	r5, r1
   22664:	f7ff feca 	bl	223fc <findslot>
   22668:	b1b8      	cbz	r0, 2269a <_swistat+0x3a>
   2266a:	686b      	ldr	r3, [r5, #4]
   2266c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22674:	4606      	mov	r6, r0
   22676:	606b      	str	r3, [r5, #4]
   22678:	62ea      	str	r2, [r5, #44]	; 0x2c
   2267a:	240c      	movs	r4, #12
   2267c:	4620      	mov	r0, r4
   2267e:	4631      	mov	r1, r6
   22680:	beab      	bkpt	0x00ab
   22682:	4604      	mov	r4, r0
   22684:	1c62      	adds	r2, r4, #1
   22686:	4620      	mov	r0, r4
   22688:	d002      	beq.n	22690 <_swistat+0x30>
   2268a:	6128      	str	r0, [r5, #16]
   2268c:	2000      	movs	r0, #0
   2268e:	bd70      	pop	{r4, r5, r6, pc}
   22690:	f7ff fed0 	bl	22434 <checkerror.part.0>
   22694:	1c43      	adds	r3, r0, #1
   22696:	d1f8      	bne.n	2268a <_swistat+0x2a>
   22698:	e7f9      	b.n	2268e <_swistat+0x2e>
   2269a:	f7fa ff1b 	bl	1d4d4 <__errno>
   2269e:	2309      	movs	r3, #9
   226a0:	6003      	str	r3, [r0, #0]
   226a2:	f04f 30ff 	mov.w	r0, #4294967295
   226a6:	bd70      	pop	{r4, r5, r6, pc}

000226a8 <_fstat>:
   226a8:	b538      	push	{r3, r4, r5, lr}
   226aa:	223c      	movs	r2, #60	; 0x3c
   226ac:	460c      	mov	r4, r1
   226ae:	4605      	mov	r5, r0
   226b0:	4608      	mov	r0, r1
   226b2:	2100      	movs	r1, #0
   226b4:	f7fb fdf2 	bl	1e29c <memset>
   226b8:	4621      	mov	r1, r4
   226ba:	4628      	mov	r0, r5
   226bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   226c0:	f7ff bfce 	b.w	22660 <_swistat>

000226c4 <_isatty>:
   226c4:	b570      	push	{r4, r5, r6, lr}
   226c6:	f7ff fe99 	bl	223fc <findslot>
   226ca:	4605      	mov	r5, r0
   226cc:	b190      	cbz	r0, 226f4 <_isatty+0x30>
   226ce:	2409      	movs	r4, #9
   226d0:	4620      	mov	r0, r4
   226d2:	4629      	mov	r1, r5
   226d4:	beab      	bkpt	0x00ab
   226d6:	4604      	mov	r4, r0
   226d8:	2c01      	cmp	r4, #1
   226da:	d009      	beq.n	226f0 <_isatty+0x2c>
   226dc:	f7fa fefa 	bl	1d4d4 <__errno>
   226e0:	2513      	movs	r5, #19
   226e2:	4606      	mov	r6, r0
   226e4:	2400      	movs	r4, #0
   226e6:	4628      	mov	r0, r5
   226e8:	4621      	mov	r1, r4
   226ea:	beab      	bkpt	0x00ab
   226ec:	4605      	mov	r5, r0
   226ee:	6035      	str	r5, [r6, #0]
   226f0:	4620      	mov	r0, r4
   226f2:	bd70      	pop	{r4, r5, r6, pc}
   226f4:	f7fa feee 	bl	1d4d4 <__errno>
   226f8:	2209      	movs	r2, #9
   226fa:	462c      	mov	r4, r5
   226fc:	6002      	str	r2, [r0, #0]
   226fe:	e7f7      	b.n	226f0 <_isatty+0x2c>

00022700 <_exit>:
   22700:	f04f 31ff 	mov.w	r1, #4294967295
   22704:	f000 b800 	b.w	22708 <_kill>

00022708 <_kill>:
   22708:	2906      	cmp	r1, #6
   2270a:	b530      	push	{r4, r5, lr}
   2270c:	bf0c      	ite	eq
   2270e:	4d04      	ldreq	r5, [pc, #16]	; (22720 <_kill+0x18>)
   22710:	4d04      	ldrne	r5, [pc, #16]	; (22724 <_kill+0x1c>)
   22712:	2418      	movs	r4, #24
   22714:	4620      	mov	r0, r4
   22716:	4629      	mov	r1, r5
   22718:	beab      	bkpt	0x00ab
   2271a:	4604      	mov	r4, r0
   2271c:	4620      	mov	r0, r4
   2271e:	bd30      	pop	{r4, r5, pc}
   22720:	00020023 	.word	0x00020023
   22724:	00020026 	.word	0x00020026

00022728 <_init>:
   22728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2272a:	bf00      	nop
   2272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2272e:	bc08      	pop	{r3}
   22730:	469e      	mov	lr, r3
   22732:	4770      	bx	lr

00022734 <_fini>:
   22734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22736:	bf00      	nop
   22738:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2273a:	bc08      	pop	{r3}
   2273c:	469e      	mov	lr, r3
   2273e:	4770      	bx	lr

00022740 <__init_array_start>:
   22740:	000203b1 	.word	0x000203b1

00022744 <__frame_dummy_init_array_entry>:
   22744:	00004289 000072a1 000093a5 00009755     .B...r......U...
   22754:	0000a281 0000ae11 0000d2c1 0000eac9     ................
   22764:	0000f7f1 0000fb69 00011939 00011a1d     ....i...9.......
   22774:	00013349                                I3..

00022778 <__do_global_dtors_aux_fini_array_entry>:
   22778:	00004265                                eB..

0002277c <__fini_array_end>:
   2277c:	646e6148 	.word	0x646e6148
   22780:	676e696c 	.word	0x676e696c
   22784:	75616620 	.word	0x75616620
   22788:	203a746c 	.word	0x203a746c
   2278c:	61656c63 	.word	0x61656c63
   22790:	676e6972 	.word	0x676e6972
   22794:	75616620 	.word	0x75616620
   22798:	2073746c 	.word	0x2073746c
   2279c:	63207962 	.word	0x63207962
   227a0:	696c6379 	.word	0x696c6379
   227a4:	6520676e 	.word	0x6520676e
   227a8:	6c62616e 	.word	0x6c62616e
   227ac:	69732065 	.word	0x69732065
   227b0:	6c616e67 	.word	0x6c616e67
   227b4:	206f7420 	.word	0x206f7420
   227b8:	6f746f6d 	.word	0x6f746f6d
   227bc:	00002e72 	.word	0x00002e72
   227c0:	6f746f4d 	.word	0x6f746f4d
   227c4:	61662072 	.word	0x61662072
   227c8:	20746c75 	.word	0x20746c75
   227cc:	65746564 	.word	0x65746564
   227d0:	64657463 	.word	0x64657463
   227d4:	6f4d202e 	.word	0x6f4d202e
   227d8:	63206576 	.word	0x63206576
   227dc:	65636e61 	.word	0x65636e61
   227e0:	2e64656c 	.word	0x2e64656c
   227e4:	616e4520 	.word	0x616e4520
   227e8:	20656c62 	.word	0x20656c62
   227ec:	6f747561 	.word	0x6f747561
   227f0:	6974616d 	.word	0x6974616d
   227f4:	61662063 	.word	0x61662063
   227f8:	20746c75 	.word	0x20746c75
   227fc:	646e6168 	.word	0x646e6168
   22800:	676e696c 	.word	0x676e696c
   22804:	20796220 	.word	0x20796220
   22808:	74746573 	.word	0x74746573
   2280c:	20676e69 	.word	0x20676e69
   22810:	444e4148 	.word	0x444e4148
   22814:	4d5f454c 	.word	0x4d5f454c
   22818:	524f544f 	.word	0x524f544f
   2281c:	5541465f 	.word	0x5541465f
   22820:	2053544c 	.word	0x2053544c
   22824:	31206f74 	.word	0x31206f74
   22828:	0000002e 	.word	0x0000002e
   2282c:	69766f4d 	.word	0x69766f4d
   22830:	7420676e 	.word	0x7420676e
   22834:	6f70206f 	.word	0x6f70206f
   22838:	69746973 	.word	0x69746973
   2283c:	203a6e6f 	.word	0x203a6e6f
   22840:	00000000 	.word	0x00000000
   22844:	69766f4d 	.word	0x69766f4d
   22848:	2e2e676e 	.word	0x2e2e676e
   2284c:	69615720 	.word	0x69615720
   22850:	676e6974 	.word	0x676e6974
   22854:	726f6620 	.word	0x726f6620
   22858:	464c4820 	.word	0x464c4820
   2285c:	00000042 	.word	0x00000042
   22860:	6f746f4d 	.word	0x6f746f4d
   22864:	61662072 	.word	0x61662072
   22868:	20746c75 	.word	0x20746c75
   2286c:	65746564 	.word	0x65746564
   22870:	64657463 	.word	0x64657463
   22874:	0000002e 	.word	0x0000002e
   22878:	62616e45 	.word	0x62616e45
   2287c:	6120656c 	.word	0x6120656c
   22880:	6d6f7475 	.word	0x6d6f7475
   22884:	63697461 	.word	0x63697461
   22888:	75616620 	.word	0x75616620
   2288c:	6820746c 	.word	0x6820746c
   22890:	6c646e61 	.word	0x6c646e61
   22894:	20676e69 	.word	0x20676e69
   22898:	73207962 	.word	0x73207962
   2289c:	69747465 	.word	0x69747465
   228a0:	4820676e 	.word	0x4820676e
   228a4:	4c444e41 	.word	0x4c444e41
   228a8:	4f4d5f45 	.word	0x4f4d5f45
   228ac:	5f524f54 	.word	0x5f524f54
   228b0:	4c554146 	.word	0x4c554146
   228b4:	74205354 	.word	0x74205354
   228b8:	2e31206f 	.word	0x2e31206f
   228bc:	00000000 	.word	0x00000000
   228c0:	69746f4d 	.word	0x69746f4d
   228c4:	6d206e6f 	.word	0x6d206e6f
   228c8:	6e207961 	.word	0x6e207961
   228cc:	6820746f 	.word	0x6820746f
   228d0:	20657661 	.word	0x20657661
   228d4:	706d6f63 	.word	0x706d6f63
   228d8:	6574656c 	.word	0x6574656c
   228dc:	73612064 	.word	0x73612064
   228e0:	70786520 	.word	0x70786520
   228e4:	65746365 	.word	0x65746365
   228e8:	50202e64 	.word	0x50202e64
   228ec:	65636f72 	.word	0x65636f72
   228f0:	77206465 	.word	0x77206465
   228f4:	20687469 	.word	0x20687469
   228f8:	74756163 	.word	0x74756163
   228fc:	2e6e6f69 	.word	0x2e6e6f69
   22900:	00000000 	.word	0x00000000
   22904:	65766f4d 	.word	0x65766f4d
   22908:	6e6f4420 	.word	0x6e6f4420
   2290c:	00000065 	.word	0x00000065
   22910:	6f746f4d 	.word	0x6f746f4d
   22914:	6e452072 	.word	0x6e452072
   22918:	656c6261 	.word	0x656c6261
   2291c:	00000064 	.word	0x00000064
   22920:	74696157 	.word	0x74696157
   22924:	20676e69 	.word	0x20676e69
   22928:	20726f66 	.word	0x20726f66
   2292c:	42464c48 	.word	0x42464c48
   22930:	002e2e2e 	.word	0x002e2e2e
   22934:	62616e45 	.word	0x62616e45
   22938:	676e696c 	.word	0x676e696c
   2293c:	79616d20 	.word	0x79616d20
   22940:	746f6e20 	.word	0x746f6e20
   22944:	76616820 	.word	0x76616820
   22948:	6f632065 	.word	0x6f632065
   2294c:	656c706d 	.word	0x656c706d
   22950:	20646574 	.word	0x20646574
   22954:	65207361 	.word	0x65207361
   22958:	63657078 	.word	0x63657078
   2295c:	2e646574 	.word	0x2e646574
   22960:	6f725020 	.word	0x6f725020
   22964:	64656563 	.word	0x64656563
   22968:	74697720 	.word	0x74697720
   2296c:	61632068 	.word	0x61632068
   22970:	6f697475 	.word	0x6f697475
   22974:	00002e6e 	.word	0x00002e6e
   22978:	6f746f4d 	.word	0x6f746f4d
   2297c:	65522072 	.word	0x65522072
   22980:	00796461 	.word	0x00796461

00022984 <CSWTCH.95>:
   22984:	02030406 00000002                       ........

0002298c <_ZN9ClearCoreL11tcc_modulesE>:
   2298c:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   2299c:	43001000                                ...C

000229a0 <_ZTVN9ClearCore11MotorDriverE>:
	...
   229a8:	0000475d 00004761 0000474d 00004751     ]G..aG..MG..QG..
   229b8:	0000e085 00004741 00004755 00004745     ....AG..UG..EG..
   229c8:	00004e31 00005665 0000548d 00005585     1N..eV...T...U..
   229d8:	000048c5 ffffffd0 00000000 0000557d     .H..........}U..
   229e8:	0000565d 00004915                       ]V...I..

000229f0 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   229f0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22a00:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022a10 <_ZTVN9ClearCore7ISerialE>:
	...
   22a18:	000131cd 000131cd 000131cd 000131cd     .1...1...1...1..
   22a28:	000131cd 000131cd 000131cd 000131cd     .1...1...1...1..
   22a38:	000131cd 000131cd 000131cd 000131cd     .1...1...1...1..
   22a48:	000131cd 000131cd 000131cd 000131cd     .1...1...1...1..
   22a58:	000131cd 000131cd                       .1...1..

00022a60 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22a68:	00005a09 000059fd 00005a21 00005a2d     .Z...Y..!Z..-Z..
   22a78:	00005a39 00005a45 00005a51 00005a5d     9Z..EZ..QZ..]Z..
   22a88:	00005a69 00005a75 00005a81 00005a09     iZ..uZ...Z...Z..
   22a98:	00005a15 00005a15 00005981 0000598d     .Z...Z...Y...Y..
   22aa8:	00005991 0000599d 000059a9 000059b5     .Y...Y...Y...Y..
   22ab8:	000059c9 00005a8d 00005ab1 00005ae1     .Y...Z...Z...Z..
   22ac8:	000059d5 000059e1 000059f1 fffffffc     .Y...Y...Y......
   22ad8:	00000000 000059ad 000059c1 000059cd     .....Y...Y...Y..
   22ae8:	00005aa9 00005ad9 00005b21 000059d9     .Z...Z..![...Y..
   22af8:	00005979 000059f5 000059e9 008061fc     yY...Y...Y...a..
   22b08:	00806010 00806014 00806018              .`...`...`..

00022b14 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22b1c:	0000fbc1 0000fbd1 00010aed 0000fe49     ............I...
   22b2c:	0000fcf5 000072b1 0000fbe5 0000fc1d     .....r..........
   22b3c:	0000fc5d 0000fc39 0000fc49 0000fc9d     ]...9...I.......
   22b4c:	0000fbb9 000072b9 0000ff61 000072b5     .....r..a....r..
   22b5c:	00010135 00010051                       5...Q...

00022b64 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22b6c:	0000fbc1 0000fbd1 00010aed 0000fe49     ............I...
   22b7c:	0000fcf5 000072b1 0000fbe5 0000fc1d     .....r..........
   22b8c:	0000fc5d 0000fc39 0000fc49 0000fc9d     ]...9...I.......
   22b9c:	0000fbb9 000072b9 0000ff61 000072b5     .....r..a....r..
   22bac:	00010135 00010051 40003c00 4101a000     5...Q....<.@...A
   22bbc:	43001400                                ...C

00022bc0 <_ZN9ClearCore10hBridgeConE>:
   22bc0:	2000136c 200013f0                       l.. ... 

00022bc8 <_ZN9ClearCore15MotorConnectorsE>:
   22bc8:	20000b60 20000ca8 20000df0 20000f38     `.. ... ... 8.. 

00022bd8 <_ZN9ClearCoreL10ConnectorsE>:
   22bd8:	200011e0 2000124c 200012ac 2000130c     ... L.. ... ... 
   22be8:	2000136c 200013f0 20001150 20001180     l.. ... P.. ... 
   22bf8:	200011b0 20000b18 20001084 200010c8     ... ... ... ... 
   22c08:	2000110c 20001474 20000b60 20000ca8     ... t.. `.. ... 
   22c18:	20000df0 20000f38 200015d4 2000172c     ... 8.. ... ,.. 
   22c28:	20001484                                ... 

00022c2c <_ZN9ClearCoreL10MicroSD_SSE>:
   22c2c:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022c3c <_ZN9ClearCoreL10XBee_Rx_INE>:
   22c3c:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022c4c <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22c4c:	02120142 ffffff00 ffff0207 00040001     B...............

00022c5c <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22c5c:	04140144 ffffff00 ffff0107 00060201     D...............

00022c6c <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22c6c:	0a0a001c ffffff00 00010200 00040200     ................

00022c7c <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22c7c:	0909001b ff03ff00 01000100 00ff0100     ................

00022c8c <_ZN9ClearCoreL11IN06n_QuadAE>:
   22c8c:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022c9c <_ZN9ClearCoreL11IN07n_QuadBE>:
   22c9c:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022cac <_ZN9ClearCoreL11IN08n_QuadIE>:
   22cac:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022cbc <_ZN9ClearCoreL11IN09n_AIN09E>:
   22cbc:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022ccc <_ZN9ClearCoreL11IN10n_AIN10E>:
   22ccc:	0606010d ff08ff01 ffffffff 00ffffff     ................

00022cdc <_ZN9ClearCoreL11IN11n_AIN11E>:
   22cdc:	0505010a ff07ff01 ffffffff 00ffffff     ................

00022cec <_ZN9ClearCoreL11IN12n_AIN12E>:
   22cec:	03030206 ff05ff01 ffffffff 00ffffff     ................

00022cfc <_ZN9ClearCoreL11MicroSD_SCKE>:
   22cfc:	09090110 ff01ff00 01040104 00ffffff     ................

00022d0c <_ZN9ClearCoreL11XBee_CTS_INE>:
   22d0c:	09190253 ffffff00 ffff0302 00ffffff     S...............

00022d1c <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   22d1c:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00022d2c <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   22d2c:	05150145 ffffff00 ffff0007 00070301     E...............

00022d3c <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   22d3c:	ff08001a ff02ff00 00000000 00ff0000     ................

00022d4c <_ZN9ClearCoreL12MicroSD_MISOE>:
   22d4c:	0a0a0120 ffffff00 00050204 00040400      ...............

00022d5c <_ZN9ClearCoreL12MicroSD_MOSIE>:
   22d5c:	0808010f ff00ff00 00040004 00ffffff     ................

00022d6c <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   22d6c:	07170049 ffffff00 01040005 00ff0701     I...............

00022d7c <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   22d7c:	08180252 ffffff00 ffff0202 00ffffff     R...............

00022d8c <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   22d8c:	03130143 ffffff00 ffff0307 00050101     C...............

00022d9c <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   22d9c:	0b0b001d ffffff00 01010300 00050300     ................

00022dac <_ZN9ClearCoreL13IN00n_Aout00nE>:
   22dac:	05050012 01ffff00 0100ffff 00ffffff     ................

00022dbc <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   22dbc:	04140046 ffffff01 00070205 00ff0401     F...............

00022dcc <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   22dcc:	00100140 ffffff00 00060005 00020003     @...............

00022ddc <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   22ddc:	03030164 ffffff00 0106ffff 00ffffff     d...............

00022dec <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   22dec:	0e0e0124 ffffff00 00050204 00000004     $...............

00022dfc <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   22dfc:	0c0c0122 ffffff00 00040004 00060003     "...............

00022e0c <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   22e0c:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00022e1c <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   22e1c:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00022e2c <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   22e2c:	0f0f0125 ffffff00 01050304 00010104     %...............

00022e3c <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   22e3c:	0d0d0123 ffffff00 01040104 00070103     #...............

00022e4c <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   22e4c:	06160048 ffffff00 00040003 00ff0601     H...............

00022e5c <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   22e5c:	00100034 ffffff00 00020001 00020001     4...............

00022e6c <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   22e6c:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00022e7c <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   22e7c:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00022e8c <_ZN9ClearCoreL5IN01nE>:
   22e8c:	02110107 00ffff00 ffffffff 00ffffff     ................

00022e9c <_ZN9ClearCoreL5IN02nE>:
   22e9c:	03030008 ffffff00 ffffffff 00ffffff     ................

00022eac <_ZN9ClearCoreL5IN03nE>:
   22eac:	04150211 ffffff00 0000ffff 00ffffff     ................

00022ebc <_ZN9ClearCoreL5IN04nE>:
   22ebc:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

00022ecc <_ZN9ClearCoreL5IN05nE>:
   22ecc:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00022edc <_ZN9ClearCoreL5OUT00E>:
   22edc:	00000001 ffffff00 0002ffff 00ffffff     ................

00022eec <_ZN9ClearCoreL5OUT01E>:
   22eec:	01010002 ffffff00 0102ffff 00ffffff     ................

00022efc <_ZN9ClearCoreL5OUT02E>:
   22efc:	06060013 ffffff00 0001ffff 00ffffff     ................

00022f0c <_ZN9ClearCoreL5OUT03E>:
   22f0c:	07070014 ffffff00 0101ffff 00ffffff     ................

00022f1c <_ZN9ClearCoreL6Aout00E>:
   22f1c:	02020007 01ffff00 0100ffff 00ffffff     ................

00022f2c <_ZN9ClearCoreL6Mtr0_BE>:
   22f2c:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00022f3c <_ZN9ClearCoreL6Mtr1_BE>:
   22f3c:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00022f4c <_ZN9ClearCoreL7Mtr1_AnE>:
   22f4c:	05150047 ffffff00 01070305 00ff0501     G...............

00022f5c <_ZN9ClearCoreL9Mtr1_HLFBE>:
   22f5c:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   22f6c:	00000080 00000040 00000020 00000010     ....@... .......
   22f7c:	00000008 00000004 01000000 02000000     ................
   22f8c:	04000000 08000000 00800000 00400000     ..............@.
   22f9c:	00200000 00004000 00008000 00040000     .. ..@..........
   22fac:	00080000                                ....

00022fb0 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   22fb8:	0000ae21 0000ae95 000131cd              !........1..

00022fc4 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22fc4:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022fd4 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22fd4:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022fe4 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22fe4:	0212023a ffffff01 ffff0206 00ff0200     :...............
   22ff4:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   23004:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   23014:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   23024:	2e747369 00000063 0002306c 0002305c     ist.c...l0..\0..
   23034:	0002303c 0002304c                       <0..L0..

0002303c <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   2303c:	01010204 ff0bff00 ffffffff 00ffffff     ................

0002304c <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   2304c:	00000203 ff0aff00 ffffffff 00ffffff     ................

0002305c <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   2305c:	02020205 ff04ff00 ffffffff 00ffffff     ................

0002306c <_ZN9ClearCoreL9_5VOB_MONE>:
   2306c:	04040109 ff06ff00 ffffffff 00ffffff     ................

0002307c <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23084:	0000d315 0000d545 0000d319 0000d31d     ....E...........
   23094:	0000d63d 0000d659 0000d30d 00004745     =...Y.......EG..
   230a4:	0000d52d 0000d6f5                       -.......

000230ac <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   230b4:	0000d799 0000d7a9 0000d79d 0000d7a1     ................
   230c4:	0000d9fd 0000d7a5 0000d795 00004745     ............EG..
   230d4:	0000d8d1 0000d949                       ....I...

000230dc <_ZTVN9ClearCore12DigitalInOutE>:
	...
   230e4:	0000da45 0000db19 0000da49 0000da4d     E.......I...M...
   230f4:	0000dfb5 0000da61 0000d30d 00004745     ....a.......EG..
   23104:	0000dda9 0000dff5                       ........

0002310c <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   2310c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   2311c:	42001400 42001800 43001400 43001800     ...B...B...C...C

0002312c <_ZTVN9ClearCore9ConnectorE>:
	...
   23134:	0000e069 000131cd 000131cd 000131cd     i....1...1...1..
   23144:	000131cd 000131cd 000131cd 00005979     .1...1...1..yY..
   23154:	000131cd 000131cd                       .1...1..

0002315c <_ZTVN9ClearCore9DigitalInE>:
	...
   23164:	0000e06d 0000e071 0000e07d 0000e081     m...q...}.......
   23174:	0000e085 00004741 0000d795 00004745     ....AG......EG..
   23184:	0000e179 0000e0ad                       y.......

0002318c <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   23194:	0000e3d9 0000e871 0000e3dd 0000e3e1     ....q...........
   231a4:	0000e4a5 0000e4e1 0000d30d 00004745     ............EG..
   231b4:	0000e695 0000e7a9                       ........

000231bc <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   231bc:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   231cc:	43001000                                ...C

000231d0 <_ZTVN9ClearCore7CcioPinE>:
	...
   231d8:	0000f801 0000f85d 0000f805 0000f809     ....]...........
   231e8:	0000f8cd 0000f929 0000f909 00005979     ....).......yY..
   231f8:	0000f819 0000f81d                       ........

00023200 <_ZTVN9ClearCore10SerialBaseE>:
	...
   23208:	0000fbc1 0000fbd1 00010aed 0000fe49     ............I...
   23218:	0000fcf5 000072b1 0000fbe5 0000fc1d     .....r..........
   23228:	0000fc5d 0000fc39 0000fc49 0000fc9d     ]...9...I.......
   23238:	0000fbb9 000072b9 0000ff61 000072b5     .....r..a....r..
   23248:	00010135 00010051                       5...Q...

00023250 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   23250:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   23260:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00023270 <_ZTVN9ClearCore12SerialDriverE>:
	...
   23278:	0000fbc1 0000fbd1 000111bd 00011211     ................
   23288:	0001104d 000072b1 0000fbe5 0000fc1d     M....r..........
   23298:	0000fc5d 0000fc39 0000fc49 0000fc9d     ]...9...I.......
   232a8:	0000fbb9 000072b9 0000ff61 000072b5     .....r..a....r..
   232b8:	00010135 00010051 00010fa1 00011069     5...Q.......i...
   232c8:	00010fb1 00010fbd 00010fcd 00011355     ............U...
   232d8:	00010fe1 0001125d 00010fed fffffebc     ....]...........
   232e8:	00000000 00010fa9 000111b5 00010fb5     ................
   232f8:	00010fc5 00010fd9 00011409 00010fe5     ................
   23308:	00005979 00010ff1 0001134d              yY......M...

00023314 <_ZTVN9ClearCore9LedDriverE>:
	...
   2331c:	00011411 00011415 00011421 00011425     ........!...%...
   2332c:	00011439 00011451 00011429 00005979     9...Q...)...yY..
   2333c:	0001142d 00011431                       -...1...

00023344 <_usb_ep_cfgs>:
   23344:	20001f2c 00000000 00000040 20001f6c     ,.. ....@...l.. 
   23354:	00000000 00000040 20001fac 00000000     ....@...... ....
   23364:	00000040                                @...

00023368 <sinTable_q15>:
   23368:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   23378:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   23388:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   23398:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   233a8:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   233b8:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   233c8:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   233d8:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   233e8:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   233f8:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   23408:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   23418:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   23428:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   23438:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   23448:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   23458:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   23468:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   23478:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   23488:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   23498:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   234a8:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   234b8:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   234c8:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   234d8:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   234e8:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   234f8:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   23508:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   23518:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   23528:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   23538:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   23548:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   23558:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   23568:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   23578:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   23588:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   23598:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   235a8:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   235b8:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   235c8:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   235d8:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   235e8:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   235f8:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   23608:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   23618:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   23628:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   23638:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   23648:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   23658:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   23668:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   23678:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   23688:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   23698:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   236a8:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   236b8:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   236c8:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   236d8:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   236e8:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   236f8:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   23708:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   23718:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   23728:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   23738:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   23748:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   23758:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   23768:	00000000 65727570 72697620 6c617574     ....pure virtual
   23778:	74656d20 20646f68 6c6c6163 000a6465      method called..
   23788:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

00023798 <_ZTISt9bad_alloc>:
   23798:	000238b8 000237a4 000237f8              .8...7...7..

000237a4 <_ZTSSt9bad_alloc>:
   237a4:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

000237b4 <_ZTVSt9bad_alloc>:
   237b4:	00000000 00023798 000131e9 000131fd     .....7...1...1..
   237c4:	000131e1 3a647473 6461623a 6378655f     .1..std::bad_exc
   237d4:	69747065 00006e6f                       eption..

000237dc <_ZTIN10__cxxabiv115__forced_unwindE>:
   237dc:	0002392c 00023800                       ,9...8..

000237e4 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   237e4:	0002392c 00023820                       ,9.. 8..

000237ec <_ZTISt13bad_exception>:
   237ec:	000238b8 00023844 000237f8              .8..D8...7..

000237f8 <_ZTISt9exception>:
   237f8:	0002392c 00023858                       ,9..X8..

00023800 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23800:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23810:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023820 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23820:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23830:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23840:	00456e6f                                onE.

00023844 <_ZTSSt13bad_exception>:
   23844:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23854:	0000006e                                n...

00023858 <_ZTSSt9exception>:
   23858:	65397453 70656378 6e6f6974 00000000     St9exception....

00023868 <_ZTVSt13bad_exception>:
   23868:	00000000 000237ec 00013375 00013381     .....7..u3...3..
   23878:	00013379                                y3..

0002387c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   2387c:	000238b8 00023888 000238f4              .8...8...8..

00023888 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23888:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23898:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   238a8:	456f666e 00000000                       nfoE....

000238b0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   238b0:	00000000 0002387c 00013549 0001355d     ....|8..I5..]5..
   238c0:	00013675 00013675 00013731 000136a5     u6..u6..17...6..
   238d0:	00013645 000135b5 00013579              E6...5..y5..

000238dc <_ZTISt9type_info>:
   238dc:	0002392c 000238e4                       ,9...8..

000238e4 <_ZTSSt9type_info>:
   238e4:	74397453 5f657079 6f666e69 00000000     St9type_info....

000238f4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   238f4:	000238b8 00023900 000238dc              .8...9...8..

00023900 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23900:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23910:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23920:	00000045                                E...

00023924 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23924:	00000000 000238f4 000136e9 000136fd     .....8...6...6..
   23934:	00013675 00013675 00013731 000136a5     u6..u6..17...6..
   23944:	00013719 0001375d 000136dd 6d726574     .7..]7...6..term
   23954:	74616e69 61632065 64656c6c 63657220     inate called rec
   23964:	69737275 796c6576 0000000a 6d726574     ursively....term
   23974:	74616e69 61632065 64656c6c 74666120     inate called aft
   23984:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23994:	6174736e 2065636e 2720666f 00000000     nstance of '....
   239a4:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   239b4:	64656c6c 74697720 74756f68 206e6120     lled without an 
   239c4:	69746361 65206576 70656378 6e6f6974     active exception
   239d4:	0000000a 68772020 29287461 0020203a     ....  what():  .

000239e4 <standard_subs>:
   239e4:	00000074 000241c8 00000003 000241c8     t....A.......A..
   239f4:	00000003 00000000 00000000 00000061     ............a...
   23a04:	000244dc 0000000e 000244dc 0000000e     .D.......D......
   23a14:	000244ec 00000009 00000062 000244f8     .D......b....D..
   23a24:	00000011 000244f8 00000011 0002450c     .....D.......E..
   23a34:	0000000c 00000073 0002451c 0000000b     ....s....E......
   23a44:	00024528 00000046 0002450c 0000000c     (E..F....E......
   23a54:	00000069 00024570 0000000c 00024580     i...pE.......E..
   23a64:	00000031 000245b4 0000000d 0000006f     1....E......o...
   23a74:	000245c4 0000000c 000245d4 00000031     .E.......E..1...
   23a84:	00024608 0000000d 00000064 00024618     .F......d....F..
   23a94:	0000000d 00024628 00000032 0002465c     ....(F..2...\F..
   23aa4:	0000000e                                ....

00023aa8 <cplus_demangle_builtin_types>:
   23aa8:	0002486c 0000000b 0002486c 0000000b     lH......lH......
   23ab8:	00000000 00024878 00000004 00024880     ....xH.......H..
   23ac8:	00000007 00000007 00024888 00000004     .........H......
   23ad8:	00024890 00000004 00000000 00024898     .H...........H..
   23ae8:	00000006 00024898 00000006 00000008     .....H..........
   23af8:	000248a0 0000000b 000248a0 0000000b     .H.......H......
   23b08:	00000008 000248ac 00000005 000248ac     .....H.......H..
   23b18:	00000005 00000008 000248b4 0000000a     .........H......
   23b28:	000248b4 0000000a 00000008 000248c0     .H...........H..
   23b38:	0000000d 000248c0 0000000d 00000000     .....H..........
   23b48:	000248d0 00000003 000248d0 00000003     .H.......H......
   23b58:	00000001 000248d4 0000000c 000248e4     .....H.......H..
   23b68:	00000008 00000002 00000000 00000000     ................
	...
   23b84:	000248f0 00000004 000248f0 00000004     .H.......H......
   23b94:	00000003 000248f8 0000000d 000248f8     .....H.......H..
   23ba4:	0000000d 00000004 00024908 00000008     .........I......
   23bb4:	00024908 00000008 00000000 00024914     .I...........I..
   23bc4:	00000011 00024914 00000011 00000000     .....I..........
	...
   23c10:	00024928 00000005 00024928 00000005     (I......(I......
   23c20:	00000000 00024930 0000000e 00024930     ....0I......0I..
   23c30:	0000000e 00000000 00000000 00000000     ................
	...
   23c4c:	00024940 00000004 00024940 00000004     @I......@I......
   23c5c:	00000009 00024948 00000007 00024888     ....HI.......H..
   23c6c:	00000004 00000000 00024950 00000009     ........PI......
   23c7c:	000248f0 00000004 00000005 0002495c     .H..........\I..
   23c8c:	00000012 0002495c 00000012 00000006     ....\I..........
   23c9c:	00022930 00000003 00022930 00000003     0)......0)......
   23cac:	00000000 00024970 00000009 00024970     ....pI......pI..
   23cbc:	00000009 00000000 0002497c 00000009     ........|I......
   23ccc:	0002497c 00000009 00000000 00024988     |I...........I..
   23cdc:	0000000a 00024988 0000000a 00000000     .....I..........
   23cec:	00024994 00000004 00024994 00000004     .I.......I......
   23cfc:	00000008 0002499c 00000008 0002499c     .....I.......I..
   23d0c:	00000008 00000000 000249a8 00000008     .........I......
   23d1c:	000249a8 00000008 00000000 000249b4     .I...........I..
   23d2c:	00000011 000249b4 00000011 00000000     .....I..........

00023d3c <cplus_demangle_operators>:
   23d3c:	0002466c 00024670 00000002 00000002     lF..pF..........
   23d4c:	00024674 00024678 00000001 00000002     tF..xF..........
   23d5c:	0002467c 000244a0 00000002 00000002     |F...D..........
   23d6c:	00024398 00024680 00000001 00000001     .C...F..........
   23d7c:	00024684 00024680 00000001 00000002     .F...F..........
   23d8c:	00024688 0002468c 00000008 00000001     .F...F..........
   23d9c:	00024698 0002468c 00000008 00000001     .F...F..........
   23dac:	0002469c 000246a0 0000000a 00000002     .F...F..........
   23dbc:	000241a8 000246ac 00000002 00000002     .A...F..........
   23dcc:	000246b0 000246b4 00000001 00000002     .F...F..........
   23ddc:	000246b8 000246bc 00000001 00000001     .F...F..........
   23dec:	000246c0 000246c4 00000002 00000002     .F...F..........
   23dfc:	000246c8 000246cc 00000009 00000001     .F...F..........
   23e0c:	000246d8 000246dc 0000000c 00000002     .F...F..........
   23e1c:	000246ec 000246f0 00000001 00000001     .F...F..........
   23e2c:	000246f4 000246f8 00000007 00000001     .F...F..........
   23e3c:	00024700 00024704 00000002 00000002     .G...G..........
   23e4c:	000241ac 00024834 00000001 00000002     .A..4H..........
   23e5c:	00024708 0002470c 00000001 00000002     .G...G..........
   23e6c:	00024710 00024714 00000002 00000002     .G...G..........
   23e7c:	00024718 0002471c 00000001 00000002     .G...G..........
   23e8c:	00024720 00024724 00000002 00000002      G..$G..........
   23e9c:	00024728 00022930 00000003 00000003     (G..0)..........
   23eac:	0002472c 00022930 00000003 00000003     ,G..0)..........
   23ebc:	00024730 00022930 00000003 00000002     0G..0)..........
   23ecc:	00024734 00022930 00000003 00000002     4G..0)..........
   23edc:	00024738 0002473c 00000002 00000002     8G..<G..........
   23eec:	0002439c 000241f0 00000002 00000001     .C...A..........
   23efc:	00024740 000245b0 00000001 00000002     @G...E..........
   23f0c:	000243a4 00024210 00000002 00000002     .C...B..........
   23f1c:	00024744 00024748 00000003 00000002     DG..HG..........
   23f2c:	0002489c 0002474c 00000002 00000002     .H..LG..........
   23f3c:	000241e4 00024750 0000000b 00000001     .A..PG..........
   23f4c:	0002475c 00024760 00000002 00000002     \G..`G..........
   23f5c:	00024764 00024768 00000001 00000002     dG..hG..........
   23f6c:	0002476c 00024770 00000002 00000002     lG..pG..........
   23f7c:	00024774 00024778 00000002 00000002     tG..xG..........
   23f8c:	0002477c 00024780 00000001 00000002     |G...G..........
   23f9c:	00024784 000246f0 00000001 00000002     .G...F..........
   23fac:	00024788 0002478c 00000002 00000001     .G...G..........
   23fbc:	00024790 00024794 00000005 00000003     .G...G..........
   23fcc:	0002479c 000247a0 00000002 00000002     .G...G..........
   23fdc:	0002496c 00024780 00000001 00000001     lI...G..........
   23fec:	000247a4 000247a8 00000001 00000001     .G...G..........
   23ffc:	000247ac 000247b0 00000003 00000003     .G...G..........
   2400c:	000247b4 000247b8 00000002 00000002     .G...G..........
   2401c:	000247bc 000247c0 00000002 00000002     .G...G..........
   2402c:	000244e8 000247c4 00000001 00000002     .D...G..........
   2403c:	000247c8 000247cc 00000002 00000002     .G...G..........
   2404c:	000247d0 000247d4 00000001 00000002     .G...G..........
   2405c:	000247d8 000247dc 00000003 00000002     .G...G..........
   2406c:	000247e0 000247e4 00000002 00000001     .G...G..........
   2407c:	000247e8 000247d4 00000001 00000001     .G...G..........
   2408c:	000241b0 000247ec 00000002 00000002     .A...G..........
   2409c:	000241b4 000247f0 00000001 00000003     .A...G..........
   240ac:	000247f4 000247f8 00000002 00000002     .G...G..........
   240bc:	000247fc 00024800 00000003 00000002     .G...H..........
   240cc:	00024804 00024808 00000010 00000002     .H...H..........
   240dc:	0002481c 00024820 00000001 00000002     .H.. H..........
   240ec:	00024824 00024828 00000002 00000002     $H..(H..........
   240fc:	000241a4 0002482c 00000009 00000001     .A..,H..........
   2410c:	00024468 0002482c 00000009 00000001     hD..,H..........
   2411c:	00024838 0002483c 0000000b 00000002     8H..<H..........
   2412c:	000246a8 00024848 00000007 00000001     .F..HH..........
   2413c:	00024850 00024848 00000007 00000001     PH..HH..........
   2414c:	00024854 00024858 00000005 00000000     TH..XH..........
   2415c:	00024860 00024864 00000006 00000001     `H..dH..........
	...
   2417c:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   2418c:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   2419c:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   241ac:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   241bc:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   241cc:	6f747561 00000000 6c636564 65707974     auto....decltype
   241dc:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   241ec:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   241fc:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   2420c:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   2421c:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   2422c:	20726f66 00000000 736e6f63 63757274     for ....construc
   2423c:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   2424c:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   2425c:	6f666e69 726f6620 00000020 65707974     info for ...type
   2426c:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   2427c:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   2428c:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   2429c:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   242ac:	6e616972 65722074 6e727574 75687420     riant return thu
   242bc:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   242cc:	66207373 0020726f 72617567 61762064     ss for .guard va
   242dc:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   242ec:	74696e69 6e756620 6f697463 6f66206e     init function fo
   242fc:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   2430c:	636e7566 6e6f6974 726f6620 00000020     function for ...
   2431c:	65666572 636e6572 65742065 726f706d     reference tempor
   2432c:	20797261 00000023 64646968 61206e65     ary #...hidden a
   2433c:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   2434c:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   2435c:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   2436c:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   2437c:	0000202c 7265706f 726f7461 00000000     , ..operator....
   2438c:	7265706f 726f7461 00000020 00006461     operator ...ad..
   2439c:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   243ac:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   243bc:	006c6c75 736c6166 00000065 65757274     ull.false...true
   243cc:	00000000 6176616a 73657220 6372756f     ....java resourc
   243dc:	00002065 6c636564 65707974 00002820     e ..decltype (..
   243ec:	73696874 00000000 7261707b 0000236d     this....{parm#..
   243fc:	626f6c67 63206c61 74736e6f 74637572     global construct
   2440c:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   2441c:	626f6c67 64206c61 72747365 6f746375     global destructo
   2442c:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   2443c:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   2444c:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   2445c:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   2446c:	73657220 63697274 00000074 6c6f7620      restrict... vol
   2447c:	6c697461 00000065 6e6f6320 00007473     atile... const..
   2448c:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   2449c:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   244ac:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   244bc:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   244cc:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   244dc:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   244ec:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   244fc:	7361623a 735f6369 6e697274 00000067     :basic_string...
   2450c:	69736162 74735f63 676e6972 00000000     basic_string....
   2451c:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   2452c:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   2453c:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   2454c:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   2455c:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   2456c:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   2457c:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   2458c:	65727473 633c6d61 2c726168 64747320     stream<char, std
   2459c:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   245ac:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   245bc:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   245cc:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   245dc:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   245ec:	64747320 68633a3a 745f7261 74696172      std::char_trait
   245fc:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   2460c:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   2461c:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   2462c:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   2463c:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   2464c:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   2465c:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   2466c:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   2467c:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   2468c:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   2469c:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   246ac:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   246bc:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   246cc:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   246dc:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   246ec:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   246fc:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   2470c:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   2471c:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   2472c:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   2473c:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   2474c:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   2475c:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   2476c:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   2477c:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   2478c:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   2479c:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   247ac:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   247bc:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   247cc:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   247dc:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   247ec:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   247fc:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   2480c:	70726574 5f746572 74736163 00000000     terpret_cast....
   2481c:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   2482c:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   2483c:	74617473 635f6369 00747361 657a6973     static_cast.size
   2484c:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   2485c:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   2486c:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   2487c:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   2488c:	00000000 65747962 00000000 62756f64     ....byte....doub
   2489c:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   248ac:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   248bc:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   248cc:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   248dc:	746e6920 00000000 69736e75 64656e67      int....unsigned
   248ec:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   248fc:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   2490c:	38323174 00000000 69736e75 64656e67     t128....unsigned
   2491c:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   2492c:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   2493c:	00007472 64696f76 00000000 61686377     rt..void....wcha
   2494c:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   2495c:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   2496c:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   2497c:	69636564 366c616d 00000034 69636564     decimal64...deci
   2498c:	316c616d 00003832 666c6168 00000000     mal128..half....
   2499c:	72616863 745f3631 00000000 72616863     char16_t....char
   249ac:	745f3233 00000000 6c636564 65707974     32_t....decltype
   249bc:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   249cc:	00000000 74727173 00000066              ....sqrtf...

000249d8 <TWO52>:
   249d8:	00000000 43300000 00000000 c3300000     ......0C......0.

000249e8 <_global_impure_ptr>:
   249e8:	20000100 00000043 49534f50 00000058     ... C...POSIX...
   249f8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24a08:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24a18:	00000000 33323130 37363534 62613938     ....0123456789ab
   24a28:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24a38:	00000030                                0...

00024a3c <blanks.8346>:
   24a3c:	20202020 20202020 20202020 20202020                     

00024a4c <zeroes.8347>:
   24a4c:	30303030 30303030 30303030 30303030     0000000000000000
   24a5c:	33323130 37363534 62613938 66656463     0123456789abcdef
   24a6c:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24a7c:	7a797877 00000000                       wxyz....

00024a84 <_ctype_>:
   24a84:	20202000 20202020 28282020 20282828     .         ((((( 
   24a94:	20202020 20202020 20202020 20202020                     
   24aa4:	10108820 10101010 10101010 10101010      ...............
   24ab4:	04040410 04040404 10040404 10101010     ................
   24ac4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24ad4:	01010101 01010101 01010101 10101010     ................
   24ae4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24af4:	02020202 02020202 02020202 10101010     ................
   24b04:	00000020 00000000 00000000 00000000      ...............
	...
   24b88:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024b98 <__mprec_bigtens>:
   24b98:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24ba8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24bb8:	7f73bf3c 75154fdd                       <.s..O.u

00024bc0 <__mprec_tens>:
   24bc0:	00000000 3ff00000 00000000 40240000     .......?......$@
   24bd0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24be0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24bf0:	00000000 412e8480 00000000 416312d0     .......A......cA
   24c00:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   24c10:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   24c20:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   24c30:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   24c40:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   24c50:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24c60:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24c70:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24c80:	79d99db4 44ea7843                       ...yCx.D

00024c88 <p05.7178>:
   24c88:	00000005 00000019 0000007d              ........}...

00024c94 <__EH_FRAME_BEGIN__>:
   24c94:	00000000                                ....
