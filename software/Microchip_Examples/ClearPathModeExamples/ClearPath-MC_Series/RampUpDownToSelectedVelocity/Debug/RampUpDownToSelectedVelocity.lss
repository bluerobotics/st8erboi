
RampUpDownToSelectedVelocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020f40  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024f40  00024f40  00024f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  0002503c  0002503c  0002503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ab0  20000000  000251c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ab0  00025c80  00030ab0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a947d  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd3b  00000000  00000000  000da026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f0  00000000  00000000  000e9d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007d20  00000000  00000000  000eb551  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f3271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001428e  00000000  00000000  00114ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f192b  00000000  00000000  0012907b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000747c  00000000  00000000  0021a9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023b27  00000000  00000000  00221e24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 95 95 00 00 d1 42 00 00 d1 42 00 00     ... .....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	31 94 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     1....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 05 93 00 00 15 93 00 00 25 93 00 00     .B..........%...
    407c:	35 93 00 00 45 93 00 00 55 93 00 00 65 93 00 00     5...E...U...e...
    408c:	75 93 00 00 85 93 00 00 95 93 00 00 a5 93 00 00     u...............
    409c:	b5 93 00 00 c5 93 00 00 d1 93 00 00 e1 93 00 00     ................
    40ac:	f1 93 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 99 92 00 00 d1 42 00 00 a5 92 00 00     .B.......B......
    4104:	b1 92 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4114:	d1 42 00 00 bd 92 00 00 d1 42 00 00 c9 92 00 00     .B.......B......
    4124:	d5 92 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 e1 92 00 00 d1 42 00 00 ed 92 00 00     .B.......B......
    4174:	f9 92 00 00 00 00 00 00 00 00 00 00 d5 30 01 00     .............0..
    4184:	d9 30 01 00 dd 30 01 00 e1 30 01 00 8d 92 00 00     .0...0...0......
    4194:	85 94 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	01 94 00 00 d1 42 00 00 d1 42 00 00 19 94 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ab0 	.word	0x20000ab0
    4280:	00000000 	.word	0x00000000
    4284:	00024f3c 	.word	0x00024f3c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024f3c 	.word	0x00024f3c
    42c4:	20000ab4 	.word	0x20000ab4
    42c8:	20000aac 	.word	0x20000aac
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01a fd52 	bl	1ed80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f001 fce7 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x40>)
    42fe:	f001 fcdf 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f001 bcd7 	b.w	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001480 	.word	0x20001480

00004318 <_Z23RampToVelocitySelectionh.part.2>:
 *    int velocityIndex  - The velocity number to command (defined in MSP)
 *
 * Returns: True/False depending on whether the velocity selection was
 *    successfully commanded.
 */
bool RampToVelocitySelection(uint8_t velocityIndex)
    4318:	b5f0      	push	{r4, r5, r6, r7, lr}
    431a:	4c95      	ldr	r4, [pc, #596]	; (4570 <_Z23RampToVelocitySelectionh.part.2+0x258>)
            if (!SendChar(buffer[iChar])) {
    431c:	4d95      	ldr	r5, [pc, #596]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    431e:	b08b      	sub	sp, #44	; 0x2c
    4320:	4607      	mov	r7, r0
    4322:	f104 061e 	add.w	r6, r4, #30
    4326:	f814 1b01 	ldrb.w	r1, [r4], #1
    432a:	4628      	mov	r0, r5
    432c:	f001 fcc8 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4330:	b108      	cbz	r0, 4336 <_Z23RampToVelocitySelectionh.part.2+0x1e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4332:	42a6      	cmp	r6, r4
    4334:	d1f7      	bne.n	4326 <_Z23RampToVelocitySelectionh.part.2+0xe>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[1 + 8 * sizeof(number)];
        utoa(number, strRep, radix);
    4336:	a901      	add	r1, sp, #4
    4338:	220a      	movs	r2, #10
    433a:	4638      	mov	r0, r7
    433c:	f01c f876 	bl	2042c <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4340:	a801      	add	r0, sp, #4
    4342:	f01a fd1d 	bl	1ed80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4346:	b160      	cbz	r0, 4362 <_Z23RampToVelocitySelectionh.part.2+0x4a>
    4348:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    434a:	4e8a      	ldr	r6, [pc, #552]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    434c:	1825      	adds	r5, r4, r0
    434e:	e001      	b.n	4354 <_Z23RampToVelocitySelectionh.part.2+0x3c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4350:	42a5      	cmp	r5, r4
    4352:	d006      	beq.n	4362 <_Z23RampToVelocitySelectionh.part.2+0x4a>
            if (!SendChar(buffer[iChar])) {
    4354:	f814 1b01 	ldrb.w	r1, [r4], #1
    4358:	4630      	mov	r0, r6
    435a:	f001 fcb1 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    435e:	2800      	cmp	r0, #0
    4360:	d1f6      	bne.n	4350 <_Z23RampToVelocitySelectionh.part.2+0x38>
    }

    SerialPort.Send("Moving to Velocity Selection: ");
    SerialPort.Send(velocityIndex);

    switch (velocityIndex)
    4362:	3f01      	subs	r7, #1
    4364:	2f03      	cmp	r7, #3
    4366:	f200 8100 	bhi.w	456a <_Z23RampToVelocitySelectionh.part.2+0x252>
    436a:	e8df f007 	tbb	[pc, r7]
    436e:	788e      	.short	0x788e
    4370:	0258      	.short	0x0258
        motor.MotorInBState(true);
        SerialPort.SendLine(" (Inputs A Off/B On)");
        break;
    case 4:
        // Sets Input A and B for velocity 4
        motor.MotorInAState(true);
    4372:	2101      	movs	r1, #1
    4374:	4880      	ldr	r0, [pc, #512]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    4376:	4c81      	ldr	r4, [pc, #516]	; (457c <_Z23RampToVelocitySelectionh.part.2+0x264>)
    4378:	4d7e      	ldr	r5, [pc, #504]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    437a:	f000 fcd1 	bl	4d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(true);
    437e:	2101      	movs	r1, #1
    4380:	487d      	ldr	r0, [pc, #500]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    4382:	f000 fce7 	bl	4d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    4386:	f104 0613 	add.w	r6, r4, #19
    438a:	f814 1b01 	ldrb.w	r1, [r4], #1
    438e:	4628      	mov	r0, r5
    4390:	f001 fc96 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4394:	b138      	cbz	r0, 43a6 <_Z23RampToVelocitySelectionh.part.2+0x8e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4396:	42a6      	cmp	r6, r4
    4398:	d1f7      	bne.n	438a <_Z23RampToVelocitySelectionh.part.2+0x72>
        return SendChar('\r') && SendChar('\n');
    439a:	210d      	movs	r1, #13
    439c:	4875      	ldr	r0, [pc, #468]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    439e:	f001 fc8f 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43a2:	2800      	cmp	r0, #0
    43a4:	d156      	bne.n	4454 <_Z23RampToVelocitySelectionh.part.2+0x13c>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    43a6:	4876      	ldr	r0, [pc, #472]	; (4580 <_Z23RampToVelocitySelectionh.part.2+0x268>)
    43a8:	4c76      	ldr	r4, [pc, #472]	; (4584 <_Z23RampToVelocitySelectionh.part.2+0x26c>)
            if (!SendChar(buffer[iChar])) {
    43aa:	4d72      	ldr	r5, [pc, #456]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    43ac:	2100      	movs	r1, #0
    43ae:	f005 fadf 	bl	9970 <Delay_cycles>
    43b2:	f104 0619 	add.w	r6, r4, #25
    43b6:	f814 1b01 	ldrb.w	r1, [r4], #1
    43ba:	4628      	mov	r0, r5
    43bc:	f001 fc80 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43c0:	b140      	cbz	r0, 43d4 <_Z23RampToVelocitySelectionh.part.2+0xbc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43c2:	42b4      	cmp	r4, r6
    43c4:	d1f7      	bne.n	43b6 <_Z23RampToVelocitySelectionh.part.2+0x9e>
        return SendChar('\r') && SendChar('\n');
    43c6:	210d      	movs	r1, #13
    43c8:	486a      	ldr	r0, [pc, #424]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    43ca:	f001 fc79 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ce:	2800      	cmp	r0, #0
    43d0:	f040 80c6 	bne.w	4560 <_Z23RampToVelocitySelectionh.part.2+0x248>
    43d4:	4a68      	ldr	r2, [pc, #416]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    Delay_ms(20 + INPUT_A_B_FILTER);

    // Waits for HLFB to assert (signaling the move has successfully reached its
    // target velocity)
    SerialPort.SendLine("Moving.. Waiting for HLFB");
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    43d6:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    43da:	2b01      	cmp	r3, #1
    43dc:	d003      	beq.n	43e6 <_Z23RampToVelocitySelectionh.part.2+0xce>
           !motor.StatusReg().bit.MotorInFault)
    43de:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    43e2:	06d9      	lsls	r1, r3, #27
    43e4:	d5f7      	bpl.n	43d6 <_Z23RampToVelocitySelectionh.part.2+0xbe>
    {
        continue;
    }
    // Check if a motor faulted during move
    // Clear fault if configured to do so
    if (motor.StatusReg().bit.MotorInFault)
    43e6:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    43ea:	06db      	lsls	r3, r3, #27
    43ec:	d464      	bmi.n	44b8 <_Z23RampToVelocitySelectionh.part.2+0x1a0>
    43ee:	4c66      	ldr	r4, [pc, #408]	; (4588 <_Z23RampToVelocitySelectionh.part.2+0x270>)
            if (!SendChar(buffer[iChar])) {
    43f0:	4d60      	ldr	r5, [pc, #384]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    43f2:	f104 0609 	add.w	r6, r4, #9
    43f6:	f814 1b01 	ldrb.w	r1, [r4], #1
    43fa:	4628      	mov	r0, r5
    43fc:	f001 fc60 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4400:	b148      	cbz	r0, 4416 <_Z23RampToVelocitySelectionh.part.2+0xfe>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4402:	42b4      	cmp	r4, r6
    4404:	d1f7      	bne.n	43f6 <_Z23RampToVelocitySelectionh.part.2+0xde>
        return SendChar('\r') && SendChar('\n');
    4406:	210d      	movs	r1, #13
    4408:	485a      	ldr	r0, [pc, #360]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    440a:	f001 fc59 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    440e:	4604      	mov	r4, r0
    4410:	2800      	cmp	r0, #0
    4412:	f040 80a0 	bne.w	4556 <_Z23RampToVelocitySelectionh.part.2+0x23e>
        return false;
    }
    else
    {
        SerialPort.SendLine("Move Done");
        return true;
    4416:	2401      	movs	r4, #1
    }
}
    4418:	4620      	mov	r0, r4
    441a:	b00b      	add	sp, #44	; 0x2c
    441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        motor.MotorInAState(false);
    441e:	2100      	movs	r1, #0
    4420:	4855      	ldr	r0, [pc, #340]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    4422:	4c5a      	ldr	r4, [pc, #360]	; (458c <_Z23RampToVelocitySelectionh.part.2+0x274>)
            if (!SendChar(buffer[iChar])) {
    4424:	4d53      	ldr	r5, [pc, #332]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4426:	f000 fc7b 	bl	4d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(true);
    442a:	2101      	movs	r1, #1
    442c:	4852      	ldr	r0, [pc, #328]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    442e:	f000 fc91 	bl	4d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    4432:	f104 0614 	add.w	r6, r4, #20
    4436:	f814 1b01 	ldrb.w	r1, [r4], #1
    443a:	4628      	mov	r0, r5
    443c:	f001 fc40 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4440:	2800      	cmp	r0, #0
    4442:	d0b0      	beq.n	43a6 <_Z23RampToVelocitySelectionh.part.2+0x8e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4444:	42a6      	cmp	r6, r4
    4446:	d1f6      	bne.n	4436 <_Z23RampToVelocitySelectionh.part.2+0x11e>
        return SendChar('\r') && SendChar('\n');
    4448:	210d      	movs	r1, #13
    444a:	484a      	ldr	r0, [pc, #296]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    444c:	f001 fc38 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4450:	2800      	cmp	r0, #0
    4452:	d0a8      	beq.n	43a6 <_Z23RampToVelocitySelectionh.part.2+0x8e>
    4454:	210a      	movs	r1, #10
    4456:	4847      	ldr	r0, [pc, #284]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4458:	f001 fc32 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    445c:	e7a3      	b.n	43a6 <_Z23RampToVelocitySelectionh.part.2+0x8e>
        motor.MotorInAState(true);
    445e:	2101      	movs	r1, #1
    4460:	4845      	ldr	r0, [pc, #276]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    4462:	4c4b      	ldr	r4, [pc, #300]	; (4590 <_Z23RampToVelocitySelectionh.part.2+0x278>)
            if (!SendChar(buffer[iChar])) {
    4464:	4d43      	ldr	r5, [pc, #268]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4466:	f000 fc5b 	bl	4d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(false);
    446a:	2100      	movs	r1, #0
    446c:	4842      	ldr	r0, [pc, #264]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    446e:	f000 fc71 	bl	4d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    4472:	f104 0614 	add.w	r6, r4, #20
    4476:	f814 1b01 	ldrb.w	r1, [r4], #1
    447a:	4628      	mov	r0, r5
    447c:	f001 fc20 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4480:	2800      	cmp	r0, #0
    4482:	d090      	beq.n	43a6 <_Z23RampToVelocitySelectionh.part.2+0x8e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4484:	42b4      	cmp	r4, r6
    4486:	d1f6      	bne.n	4476 <_Z23RampToVelocitySelectionh.part.2+0x15e>
    4488:	e787      	b.n	439a <_Z23RampToVelocitySelectionh.part.2+0x82>
        motor.MotorInAState(false);
    448a:	2100      	movs	r1, #0
    448c:	483a      	ldr	r0, [pc, #232]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    448e:	4c41      	ldr	r4, [pc, #260]	; (4594 <_Z23RampToVelocitySelectionh.part.2+0x27c>)
            if (!SendChar(buffer[iChar])) {
    4490:	4d38      	ldr	r5, [pc, #224]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4492:	f000 fc45 	bl	4d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(false);
    4496:	2100      	movs	r1, #0
    4498:	4837      	ldr	r0, [pc, #220]	; (4578 <_Z23RampToVelocitySelectionh.part.2+0x260>)
    449a:	f000 fc5b 	bl	4d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    449e:	f104 0615 	add.w	r6, r4, #21
    44a2:	f814 1b01 	ldrb.w	r1, [r4], #1
    44a6:	4628      	mov	r0, r5
    44a8:	f001 fc0a 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44ac:	2800      	cmp	r0, #0
    44ae:	f43f af7a 	beq.w	43a6 <_Z23RampToVelocitySelectionh.part.2+0x8e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44b2:	42a6      	cmp	r6, r4
    44b4:	d1f5      	bne.n	44a2 <_Z23RampToVelocitySelectionh.part.2+0x18a>
    44b6:	e770      	b.n	439a <_Z23RampToVelocitySelectionh.part.2+0x82>
    44b8:	4c37      	ldr	r4, [pc, #220]	; (4598 <_Z23RampToVelocitySelectionh.part.2+0x280>)
            if (!SendChar(buffer[iChar])) {
    44ba:	4d2e      	ldr	r5, [pc, #184]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    44bc:	f104 0615 	add.w	r6, r4, #21
    44c0:	f814 1b01 	ldrb.w	r1, [r4], #1
    44c4:	4628      	mov	r0, r5
    44c6:	f001 fbfb 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44ca:	b150      	cbz	r0, 44e2 <_Z23RampToVelocitySelectionh.part.2+0x1ca>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44cc:	42a6      	cmp	r6, r4
    44ce:	d1f7      	bne.n	44c0 <_Z23RampToVelocitySelectionh.part.2+0x1a8>
        return SendChar('\r') && SendChar('\n');
    44d0:	210d      	movs	r1, #13
    44d2:	4828      	ldr	r0, [pc, #160]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    44d4:	f001 fbf4 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44d8:	b118      	cbz	r0, 44e2 <_Z23RampToVelocitySelectionh.part.2+0x1ca>
    44da:	210a      	movs	r1, #10
    44dc:	4825      	ldr	r0, [pc, #148]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    44de:	f001 fbef 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44e2:	4c2e      	ldr	r4, [pc, #184]	; (459c <_Z23RampToVelocitySelectionh.part.2+0x284>)
            if (!SendChar(buffer[iChar])) {
    44e4:	4d23      	ldr	r5, [pc, #140]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    44e6:	f104 0644 	add.w	r6, r4, #68	; 0x44
    44ea:	f814 1b01 	ldrb.w	r1, [r4], #1
    44ee:	4628      	mov	r0, r5
    44f0:	f001 fbe6 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44f4:	b150      	cbz	r0, 450c <_Z23RampToVelocitySelectionh.part.2+0x1f4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44f6:	42b4      	cmp	r4, r6
    44f8:	d1f7      	bne.n	44ea <_Z23RampToVelocitySelectionh.part.2+0x1d2>
        return SendChar('\r') && SendChar('\n');
    44fa:	210d      	movs	r1, #13
    44fc:	481d      	ldr	r0, [pc, #116]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    44fe:	f001 fbdf 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4502:	b118      	cbz	r0, 450c <_Z23RampToVelocitySelectionh.part.2+0x1f4>
    4504:	210a      	movs	r1, #10
    4506:	481b      	ldr	r0, [pc, #108]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4508:	f001 fbda 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    450c:	4c24      	ldr	r4, [pc, #144]	; (45a0 <_Z23RampToVelocitySelectionh.part.2+0x288>)
            if (!SendChar(buffer[iChar])) {
    450e:	4d19      	ldr	r5, [pc, #100]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4510:	f104 0640 	add.w	r6, r4, #64	; 0x40
    4514:	f814 1b01 	ldrb.w	r1, [r4], #1
    4518:	4628      	mov	r0, r5
    451a:	f001 fbd1 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    451e:	b150      	cbz	r0, 4536 <_Z23RampToVelocitySelectionh.part.2+0x21e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4520:	42a6      	cmp	r6, r4
    4522:	d1f7      	bne.n	4514 <_Z23RampToVelocitySelectionh.part.2+0x1fc>
        return SendChar('\r') && SendChar('\n');
    4524:	210d      	movs	r1, #13
    4526:	4813      	ldr	r0, [pc, #76]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4528:	f001 fbca 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    452c:	b118      	cbz	r0, 4536 <_Z23RampToVelocitySelectionh.part.2+0x21e>
    452e:	210a      	movs	r1, #10
    4530:	4810      	ldr	r0, [pc, #64]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4532:	f001 fbc5 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4536:	210d      	movs	r1, #13
    4538:	480e      	ldr	r0, [pc, #56]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    453a:	f001 fbc1 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    453e:	4604      	mov	r4, r0
    4540:	2800      	cmp	r0, #0
    4542:	f43f af69 	beq.w	4418 <_Z23RampToVelocitySelectionh.part.2+0x100>
    4546:	210a      	movs	r1, #10
    4548:	480a      	ldr	r0, [pc, #40]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    454a:	f001 fbb9 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
        return false;
    454e:	2400      	movs	r4, #0
}
    4550:	4620      	mov	r0, r4
    4552:	b00b      	add	sp, #44	; 0x2c
    4554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4556:	210a      	movs	r1, #10
    4558:	4806      	ldr	r0, [pc, #24]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    455a:	f001 fbb1 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    455e:	e75b      	b.n	4418 <_Z23RampToVelocitySelectionh.part.2+0x100>
    4560:	210a      	movs	r1, #10
    4562:	4804      	ldr	r0, [pc, #16]	; (4574 <_Z23RampToVelocitySelectionh.part.2+0x25c>)
    4564:	f001 fbac 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4568:	e734      	b.n	43d4 <_Z23RampToVelocitySelectionh.part.2+0xbc>
        return false;
    456a:	2400      	movs	r4, #0
    456c:	e754      	b.n	4418 <_Z23RampToVelocitySelectionh.part.2+0x100>
    456e:	bf00      	nop
    4570:	00022a00 	.word	0x00022a00
    4574:	20001480 	.word	0x20001480
    4578:	20000b60 	.word	0x20000b60
    457c:	00022a68 	.word	0x00022a68
    4580:	00493e00 	.word	0x00493e00
    4584:	00022a7c 	.word	0x00022a7c
    4588:	00022b3c 	.word	0x00022b3c
    458c:	00022a50 	.word	0x00022a50
    4590:	00022a38 	.word	0x00022a38
    4594:	00022a20 	.word	0x00022a20
    4598:	00022a98 	.word	0x00022a98
    459c:	00022ab0 	.word	0x00022ab0
    45a0:	00022af8 	.word	0x00022af8
    45a4:	00000000 	.word	0x00000000

000045a8 <main>:
{
    45a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    45ac:	4bb6      	ldr	r3, [pc, #728]	; (4888 <main+0x2e0>)
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    45ae:	4db7      	ldr	r5, [pc, #732]	; (488c <main+0x2e4>)
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    45b0:	6818      	ldr	r0, [r3, #0]
{
    45b2:	b08d      	sub	sp, #52	; 0x34
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    45b4:	2209      	movs	r2, #9
    45b6:	2102      	movs	r1, #2
    45b8:	f006 fc5a 	bl	ae70 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    45bc:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    45c0:	2b02      	cmp	r3, #2
    45c2:	d008      	beq.n	45d6 <main+0x2e>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    45c4:	49b2      	ldr	r1, [pc, #712]	; (4890 <main+0x2e8>)
    45c6:	f8c5 10f0 	str.w	r1, [r5, #240]	; 0xf0
        m_hlfbMode = newMode;
    45ca:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    45cc:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    45ce:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    45d2:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    45d6:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    45d8:	2301      	movs	r3, #1
    motor.MotorInAState(false);
    45da:	2100      	movs	r1, #0
    while (!SerialPort && Milliseconds() - startTime < timeout)
    45dc:	4fad      	ldr	r7, [pc, #692]	; (4894 <main+0x2ec>)
    motor.MotorInAState(false);
    45de:	48ab      	ldr	r0, [pc, #684]	; (488c <main+0x2e4>)
                m_hlfbCarrierLossStateChange_ms =
    45e0:	f8c5 20e8 	str.w	r2, [r5, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    45e4:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
    45e8:	f000 fb9a 	bl	4d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    motor.MotorInBState(false);
    45ec:	2100      	movs	r1, #0
    45ee:	48a7      	ldr	r0, [pc, #668]	; (488c <main+0x2e4>)
    45f0:	f000 fbb0 	bl	4d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    SerialPort.Speed(baudRate);
    45f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    45f8:	4638      	mov	r0, r7
    45fa:	f001 fb49 	bl	5c90 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    45fe:	f005 f98d 	bl	991c <Milliseconds>
    4602:	4606      	mov	r6, r0
    SerialPort.PortOpen();
    4604:	4638      	mov	r0, r7
    4606:	f001 fb37 	bl	5c78 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    460a:	f241 3487 	movw	r4, #4999	; 0x1387
    460e:	4638      	mov	r0, r7
    4610:	f001 fb2c 	bl	5c6c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    4614:	2800      	cmp	r0, #0
    4616:	f000 81ab 	beq.w	4970 <main+0x3c8>
    motor.EnableRequest(true);
    461a:	2101      	movs	r1, #1
    461c:	489b      	ldr	r0, [pc, #620]	; (488c <main+0x2e4>)
    461e:	f000 fbb1 	bl	4d84 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    4622:	489d      	ldr	r0, [pc, #628]	; (4898 <main+0x2f0>)
    4624:	f7ff fe56 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>
    SerialPort.SendLine("Waiting for HLFB...");
    4628:	489c      	ldr	r0, [pc, #624]	; (489c <main+0x2f4>)
    462a:	f7ff fe53 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    462e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    4632:	2b01      	cmp	r3, #1
    4634:	d003      	beq.n	463e <main+0x96>
           !motor.StatusReg().bit.MotorInFault)
    4636:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    463a:	06d8      	lsls	r0, r3, #27
    463c:	d5f7      	bpl.n	462e <main+0x86>
    if (motor.StatusReg().bit.MotorInFault)
    463e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4642:	06d9      	lsls	r1, r3, #27
    4644:	f140 8190 	bpl.w	4968 <main+0x3c0>
        SerialPort.SendLine("Motor fault detected.");
    4648:	4895      	ldr	r0, [pc, #596]	; (48a0 <main+0x2f8>)
    464a:	f7ff fe43 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>
            SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    464e:	4895      	ldr	r0, [pc, #596]	; (48a4 <main+0x2fc>)
    4650:	f7ff fe40 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>
        SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");
    4654:	4894      	ldr	r0, [pc, #592]	; (48a8 <main+0x300>)
    4656:	f7ff fe3d 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>
    465a:	210d      	movs	r1, #13
    465c:	488d      	ldr	r0, [pc, #564]	; (4894 <main+0x2ec>)
    465e:	f001 fb2f 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4662:	b118      	cbz	r0, 466c <main+0xc4>
    4664:	210a      	movs	r1, #10
    4666:	488b      	ldr	r0, [pc, #556]	; (4894 <main+0x2ec>)
    4668:	f001 fb2a 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    if (motor.StatusReg().bit.MotorInFault)
    466c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4670:	4e8e      	ldr	r6, [pc, #568]	; (48ac <main+0x304>)
    4672:	f8df 9244 	ldr.w	r9, [pc, #580]	; 48b8 <main+0x310>
    4676:	f8df 8244 	ldr.w	r8, [pc, #580]	; 48bc <main+0x314>
    467a:	4f8d      	ldr	r7, [pc, #564]	; (48b0 <main+0x308>)
    467c:	f8df b240 	ldr.w	fp, [pc, #576]	; 48c0 <main+0x318>
            if (!SendChar(buffer[iChar])) {
    4680:	4c84      	ldr	r4, [pc, #528]	; (4894 <main+0x2ec>)
    4682:	06da      	lsls	r2, r3, #27
    4684:	f100 80a1 	bmi.w	47ca <main+0x222>
    4688:	2001      	movs	r0, #1
    468a:	f7ff fe45 	bl	4318 <_Z23RampToVelocitySelectionh.part.2>
    468e:	a17c      	add	r1, pc, #496	; (adr r1, 4880 <main+0x2d8>)
    4690:	e9d1 0100 	ldrd	r0, r1, [r1]
    4694:	f005 f96c 	bl	9970 <Delay_cycles>
    4698:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    469c:	06db      	lsls	r3, r3, #27
    469e:	f100 80d5 	bmi.w	484c <main+0x2a4>
    46a2:	2002      	movs	r0, #2
    46a4:	f7ff fe38 	bl	4318 <_Z23RampToVelocitySelectionh.part.2>
    46a8:	a175      	add	r1, pc, #468	; (adr r1, 4880 <main+0x2d8>)
    46aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    46ae:	f005 f95f 	bl	9970 <Delay_cycles>
    46b2:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    46b6:	06d8      	lsls	r0, r3, #27
    46b8:	f100 80b0 	bmi.w	481c <main+0x274>
    46bc:	2003      	movs	r0, #3
    46be:	f7ff fe2b 	bl	4318 <_Z23RampToVelocitySelectionh.part.2>
    46c2:	a16f      	add	r1, pc, #444	; (adr r1, 4880 <main+0x2d8>)
    46c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    46c8:	f005 f952 	bl	9970 <Delay_cycles>
    46cc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    46d0:	06d9      	lsls	r1, r3, #27
    46d2:	f100 8097 	bmi.w	4804 <main+0x25c>
    46d6:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 48c4 <main+0x31c>
    46da:	f81a 1b01 	ldrb.w	r1, [sl], #1
    46de:	4620      	mov	r0, r4
    46e0:	f001 faee 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46e4:	b108      	cbz	r0, 46ea <main+0x142>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    46e6:	45d1      	cmp	r9, sl
    46e8:	d1f7      	bne.n	46da <main+0x132>
        utoa(number, strRep, radix);
    46ea:	220a      	movs	r2, #10
    46ec:	a903      	add	r1, sp, #12
    46ee:	2004      	movs	r0, #4
    46f0:	f01b fe9c 	bl	2042c <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    46f4:	a803      	add	r0, sp, #12
    46f6:	f01a fb43 	bl	1ed80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    46fa:	b178      	cbz	r0, 471c <main+0x174>
    46fc:	ab03      	add	r3, sp, #12
    46fe:	4403      	add	r3, r0
    4700:	9301      	str	r3, [sp, #4]
    4702:	f10d 0a0c 	add.w	sl, sp, #12
    4706:	e002      	b.n	470e <main+0x166>
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	459a      	cmp	sl, r3
    470c:	d006      	beq.n	471c <main+0x174>
            if (!SendChar(buffer[iChar])) {
    470e:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4712:	4620      	mov	r0, r4
    4714:	f001 fad4 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4718:	2800      	cmp	r0, #0
    471a:	d1f5      	bne.n	4708 <main+0x160>
        motor.MotorInAState(true);
    471c:	2101      	movs	r1, #1
    471e:	485b      	ldr	r0, [pc, #364]	; (488c <main+0x2e4>)
    4720:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 48c8 <main+0x320>
    4724:	f000 fafc 	bl	4d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
        motor.MotorInBState(true);
    4728:	2101      	movs	r1, #1
    472a:	4858      	ldr	r0, [pc, #352]	; (488c <main+0x2e4>)
    472c:	f000 fb12 	bl	4d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    4730:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4734:	4620      	mov	r0, r4
    4736:	f001 fac3 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    473a:	b140      	cbz	r0, 474e <main+0x1a6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    473c:	45d0      	cmp	r8, sl
    473e:	d1f7      	bne.n	4730 <main+0x188>
        return SendChar('\r') && SendChar('\n');
    4740:	210d      	movs	r1, #13
    4742:	4620      	mov	r0, r4
    4744:	f001 fabc 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4748:	2800      	cmp	r0, #0
    474a:	f040 80fe 	bne.w	494a <main+0x3a2>
    474e:	4859      	ldr	r0, [pc, #356]	; (48b4 <main+0x30c>)
    4750:	f8df a178 	ldr.w	sl, [pc, #376]	; 48cc <main+0x324>
    4754:	2100      	movs	r1, #0
    4756:	f005 f90b 	bl	9970 <Delay_cycles>
            if (!SendChar(buffer[iChar])) {
    475a:	f81a 1b01 	ldrb.w	r1, [sl], #1
    475e:	4620      	mov	r0, r4
    4760:	f001 faae 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4764:	b138      	cbz	r0, 4776 <main+0x1ce>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4766:	45ba      	cmp	sl, r7
    4768:	d1f7      	bne.n	475a <main+0x1b2>
        return SendChar('\r') && SendChar('\n');
    476a:	210d      	movs	r1, #13
    476c:	4620      	mov	r0, r4
    476e:	f001 faa7 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4772:	2800      	cmp	r0, #0
    4774:	d141      	bne.n	47fa <main+0x252>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4776:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    477a:	2b01      	cmp	r3, #1
    477c:	d003      	beq.n	4786 <main+0x1de>
           !motor.StatusReg().bit.MotorInFault)
    477e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4782:	06da      	lsls	r2, r3, #27
    4784:	d5f7      	bpl.n	4776 <main+0x1ce>
    if (motor.StatusReg().bit.MotorInFault)
    4786:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    478a:	06db      	lsls	r3, r3, #27
    478c:	f100 80a4 	bmi.w	48d8 <main+0x330>
    4790:	f8df a13c 	ldr.w	sl, [pc, #316]	; 48d0 <main+0x328>
            if (!SendChar(buffer[iChar])) {
    4794:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4798:	4620      	mov	r0, r4
    479a:	f001 fa91 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    479e:	b150      	cbz	r0, 47b6 <main+0x20e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47a0:	45d3      	cmp	fp, sl
    47a2:	d1f7      	bne.n	4794 <main+0x1ec>
        return SendChar('\r') && SendChar('\n');
    47a4:	210d      	movs	r1, #13
    47a6:	4620      	mov	r0, r4
    47a8:	f001 fa8a 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47ac:	b118      	cbz	r0, 47b6 <main+0x20e>
    47ae:	210a      	movs	r1, #10
    47b0:	4620      	mov	r0, r4
    47b2:	f001 fa85 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47b6:	a132      	add	r1, pc, #200	; (adr r1, 4880 <main+0x2d8>)
    47b8:	e9d1 0100 	ldrd	r0, r1, [r1]
    47bc:	f005 f8d8 	bl	9970 <Delay_cycles>
    if (motor.StatusReg().bit.MotorInFault)
    47c0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    47c4:	06da      	lsls	r2, r3, #27
    47c6:	f57f af5f 	bpl.w	4688 <main+0xe0>
    47ca:	f8df a108 	ldr.w	sl, [pc, #264]	; 48d4 <main+0x32c>
            if (!SendChar(buffer[iChar])) {
    47ce:	f81a 1b01 	ldrb.w	r1, [sl], #1
    47d2:	4620      	mov	r0, r4
    47d4:	f001 fa74 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47d8:	2800      	cmp	r0, #0
    47da:	f43f af58 	beq.w	468e <main+0xe6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47de:	4556      	cmp	r6, sl
    47e0:	d1f5      	bne.n	47ce <main+0x226>
        return SendChar('\r') && SendChar('\n');
    47e2:	210d      	movs	r1, #13
    47e4:	4620      	mov	r0, r4
    47e6:	f001 fa6b 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47ea:	2800      	cmp	r0, #0
    47ec:	f43f af4f 	beq.w	468e <main+0xe6>
    47f0:	210a      	movs	r1, #10
    47f2:	4620      	mov	r0, r4
    47f4:	f001 fa64 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47f8:	e749      	b.n	468e <main+0xe6>
    47fa:	210a      	movs	r1, #10
    47fc:	4620      	mov	r0, r4
    47fe:	f001 fa5f 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4802:	e7b8      	b.n	4776 <main+0x1ce>
    4804:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 48d4 <main+0x32c>
            if (!SendChar(buffer[iChar])) {
    4808:	f81a 1b01 	ldrb.w	r1, [sl], #1
    480c:	4620      	mov	r0, r4
    480e:	f001 fa57 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4812:	2800      	cmp	r0, #0
    4814:	d0cf      	beq.n	47b6 <main+0x20e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4816:	45b2      	cmp	sl, r6
    4818:	d1f6      	bne.n	4808 <main+0x260>
    481a:	e7c3      	b.n	47a4 <main+0x1fc>
    481c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 48d4 <main+0x32c>
            if (!SendChar(buffer[iChar])) {
    4820:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4824:	4620      	mov	r0, r4
    4826:	f001 fa4b 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    482a:	2800      	cmp	r0, #0
    482c:	f43f af49 	beq.w	46c2 <main+0x11a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4830:	45b2      	cmp	sl, r6
    4832:	d1f5      	bne.n	4820 <main+0x278>
        return SendChar('\r') && SendChar('\n');
    4834:	210d      	movs	r1, #13
    4836:	4620      	mov	r0, r4
    4838:	f001 fa42 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    483c:	2800      	cmp	r0, #0
    483e:	f43f af40 	beq.w	46c2 <main+0x11a>
    4842:	210a      	movs	r1, #10
    4844:	4620      	mov	r0, r4
    4846:	f001 fa3b 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    484a:	e73a      	b.n	46c2 <main+0x11a>
    484c:	f8df a084 	ldr.w	sl, [pc, #132]	; 48d4 <main+0x32c>
            if (!SendChar(buffer[iChar])) {
    4850:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4854:	4620      	mov	r0, r4
    4856:	f001 fa33 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    485a:	2800      	cmp	r0, #0
    485c:	f43f af24 	beq.w	46a8 <main+0x100>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4860:	4556      	cmp	r6, sl
    4862:	d1f5      	bne.n	4850 <main+0x2a8>
        return SendChar('\r') && SendChar('\n');
    4864:	210d      	movs	r1, #13
    4866:	4620      	mov	r0, r4
    4868:	f001 fa2a 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    486c:	2800      	cmp	r0, #0
    486e:	f43f af1b 	beq.w	46a8 <main+0x100>
    4872:	210a      	movs	r1, #10
    4874:	4620      	mov	r0, r4
    4876:	f001 fa23 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    487a:	e715      	b.n	46a8 <main+0x100>
    487c:	f3af 8000 	nop.w
    4880:	07270e00 	.word	0x07270e00
    4884:	00000000 	.word	0x00000000
    4888:	20001bfc 	.word	0x20001bfc
    488c:	20000b60 	.word	0x20000b60
    4890:	c61c3c00 	.word	0xc61c3c00
    4894:	20001480 	.word	0x20001480
    4898:	00022bb4 	.word	0x00022bb4
    489c:	00022bc4 	.word	0x00022bc4
    48a0:	00022a98 	.word	0x00022a98
    48a4:	00022ab0 	.word	0x00022ab0
    48a8:	00022bd8 	.word	0x00022bd8
    48ac:	00022bb1 	.word	0x00022bb1
    48b0:	00022a95 	.word	0x00022a95
    48b4:	00493e00 	.word	0x00493e00
    48b8:	00022a1e 	.word	0x00022a1e
    48bc:	00022a7b 	.word	0x00022a7b
    48c0:	00022b45 	.word	0x00022b45
    48c4:	00022a00 	.word	0x00022a00
    48c8:	00022a68 	.word	0x00022a68
    48cc:	00022a7c 	.word	0x00022a7c
    48d0:	00022b3c 	.word	0x00022b3c
    48d4:	00022b48 	.word	0x00022b48
    48d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 4990 <main+0x3e8>
            if (!SendChar(buffer[iChar])) {
    48dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
    48e0:	4620      	mov	r0, r4
    48e2:	f001 f9ed 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48e6:	b138      	cbz	r0, 48f8 <main+0x350>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    48e8:	4b25      	ldr	r3, [pc, #148]	; (4980 <main+0x3d8>)
    48ea:	459a      	cmp	sl, r3
    48ec:	d1f6      	bne.n	48dc <main+0x334>
        return SendChar('\r') && SendChar('\n');
    48ee:	210d      	movs	r1, #13
    48f0:	4620      	mov	r0, r4
    48f2:	f001 f9e5 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48f6:	bb90      	cbnz	r0, 495e <main+0x3b6>
    48f8:	f8df a098 	ldr.w	sl, [pc, #152]	; 4994 <main+0x3ec>
            if (!SendChar(buffer[iChar])) {
    48fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4900:	4620      	mov	r0, r4
    4902:	f001 f9dd 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4906:	b138      	cbz	r0, 4918 <main+0x370>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4908:	4b1e      	ldr	r3, [pc, #120]	; (4984 <main+0x3dc>)
    490a:	459a      	cmp	sl, r3
    490c:	d1f6      	bne.n	48fc <main+0x354>
        return SendChar('\r') && SendChar('\n');
    490e:	210d      	movs	r1, #13
    4910:	4620      	mov	r0, r4
    4912:	f001 f9d5 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4916:	b9e8      	cbnz	r0, 4954 <main+0x3ac>
    4918:	f8df a07c 	ldr.w	sl, [pc, #124]	; 4998 <main+0x3f0>
            if (!SendChar(buffer[iChar])) {
    491c:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4920:	4620      	mov	r0, r4
    4922:	f001 f9cd 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4926:	2800      	cmp	r0, #0
    4928:	f43f af3c 	beq.w	47a4 <main+0x1fc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    492c:	4b16      	ldr	r3, [pc, #88]	; (4988 <main+0x3e0>)
    492e:	4553      	cmp	r3, sl
    4930:	d1f4      	bne.n	491c <main+0x374>
        return SendChar('\r') && SendChar('\n');
    4932:	210d      	movs	r1, #13
    4934:	4620      	mov	r0, r4
    4936:	f001 f9c3 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    493a:	2800      	cmp	r0, #0
    493c:	f43f af32 	beq.w	47a4 <main+0x1fc>
    4940:	210a      	movs	r1, #10
    4942:	4620      	mov	r0, r4
    4944:	f001 f9bc 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4948:	e72c      	b.n	47a4 <main+0x1fc>
    494a:	210a      	movs	r1, #10
    494c:	4620      	mov	r0, r4
    494e:	f001 f9b7 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4952:	e6fc      	b.n	474e <main+0x1a6>
    4954:	210a      	movs	r1, #10
    4956:	4620      	mov	r0, r4
    4958:	f001 f9b2 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    495c:	e7dc      	b.n	4918 <main+0x370>
    495e:	210a      	movs	r1, #10
    4960:	4620      	mov	r0, r4
    4962:	f001 f9ad 	bl	5cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4966:	e7c7      	b.n	48f8 <main+0x350>
        SerialPort.SendLine("Motor Ready");
    4968:	4808      	ldr	r0, [pc, #32]	; (498c <main+0x3e4>)
    496a:	f7ff fcb3 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.7>
    496e:	e67d      	b.n	466c <main+0xc4>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    4970:	f004 ffd4 	bl	991c <Milliseconds>
    4974:	1b80      	subs	r0, r0, r6
    4976:	42a0      	cmp	r0, r4
    4978:	f67f ae49 	bls.w	460e <main+0x66>
    497c:	e64d      	b.n	461a <main+0x72>
    497e:	bf00      	nop
    4980:	00022aad 	.word	0x00022aad
    4984:	00022af4 	.word	0x00022af4
    4988:	00022b38 	.word	0x00022b38
    498c:	00022c1c 	.word	0x00022c1c
    4990:	00022a98 	.word	0x00022a98
    4994:	00022ab0 	.word	0x00022ab0
    4998:	00022af8 	.word	0x00022af8

0000499c <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    499c:	2000      	movs	r0, #0
    499e:	4770      	bx	lr

000049a0 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    49a0:	f990 0018 	ldrsb.w	r0, [r0, #24]
    49a4:	4770      	bx	lr
    49a6:	bf00      	nop

000049a8 <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    49a8:	2006      	movs	r0, #6
    49aa:	4770      	bx	lr

000049ac <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    49ac:	2001      	movs	r0, #1
    49ae:	4770      	bx	lr

000049b0 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    49b0:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    49b4:	4770      	bx	lr
    49b6:	bf00      	nop

000049b8 <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    49b8:	7980      	ldrb	r0, [r0, #6]
    49ba:	4770      	bx	lr

000049bc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    49bc:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    49be:	7983      	ldrb	r3, [r0, #6]
    49c0:	428b      	cmp	r3, r1
    49c2:	f000 80a7 	beq.w	4b14 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    49c6:	f1a1 0309 	sub.w	r3, r1, #9
    49ca:	460d      	mov	r5, r1
    49cc:	4604      	mov	r4, r0
    49ce:	2b03      	cmp	r3, #3
    49d0:	f200 80a2 	bhi.w	4b18 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    49d4:	e8df f003 	tbb	[pc, r3]
    49d8:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    49dc:	3030      	adds	r0, #48	; 0x30
    49de:	f006 fe77 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    49e2:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    49e4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    49e8:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    49ea:	2200      	movs	r2, #0
    49ec:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    49f0:	b13b      	cbz	r3, 4a02 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    49f2:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    49f6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    49fa:	680b      	ldr	r3, [r1, #0]
    49fc:	4013      	ands	r3, r2
    49fe:	d1fc      	bne.n	49fa <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    4a00:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    4a02:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4a06:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4a08:	2200      	movs	r2, #0
    4a0a:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4a0e:	b13b      	cbz	r3, 4a20 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    4a10:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4a14:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4a18:	680b      	ldr	r3, [r1, #0]
    4a1a:	4013      	ands	r3, r2
    4a1c:	d1fc      	bne.n	4a18 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    4a1e:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4a20:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4a24:	4a3d      	ldr	r2, [pc, #244]	; (4b1c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4a26:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4a2a:	7889      	ldrb	r1, [r1, #2]
    4a2c:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4a30:	440b      	add	r3, r1
            m_mode = newMode;
    4a32:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4a34:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4a38:	f041 0101 	orr.w	r1, r1, #1
    4a3c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4a40:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4a44:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4a48:	7889      	ldrb	r1, [r1, #2]
    4a4a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4a4e:	440b      	add	r3, r1
    4a50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4a54:	f042 0201 	orr.w	r2, r2, #1
    4a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4a5c:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4a5e:	b662      	cpsie	i
    return true;
    4a60:	2001      	movs	r0, #1
    4a62:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4a64:	3030      	adds	r0, #48	; 0x30
    4a66:	f006 fe33 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4a6a:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4a6c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4a70:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4a72:	2200      	movs	r2, #0
    4a74:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4a78:	b13b      	cbz	r3, 4a8a <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4a7a:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4a7e:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4a82:	680b      	ldr	r3, [r1, #0]
    4a84:	4013      	ands	r3, r2
    4a86:	d1fc      	bne.n	4a82 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4a88:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4a8a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4a8e:	4a23      	ldr	r2, [pc, #140]	; (4b1c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4a90:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4a94:	7889      	ldrb	r1, [r1, #2]
    4a96:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4a9a:	440b      	add	r3, r1
    4a9c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4aa0:	f36f 0100 	bfc	r1, #0, #1
    4aa4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4aa8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4aac:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4ab0:	7889      	ldrb	r1, [r1, #2]
    4ab2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4ab6:	440b      	add	r3, r1
    4ab8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4abc:	f042 0201 	orr.w	r2, r2, #1
    4ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4ac4:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4ac6:	b662      	cpsie	i
    return true;
    4ac8:	2001      	movs	r0, #1
    4aca:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4acc:	3030      	adds	r0, #48	; 0x30
    4ace:	f006 fdff 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4ad2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4ad6:	4a11      	ldr	r2, [pc, #68]	; (4b1c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4ad8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4adc:	7889      	ldrb	r1, [r1, #2]
    4ade:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4ae2:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4ae4:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4ae6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4aea:	f36f 0100 	bfc	r1, #0, #1
    4aee:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4af2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4af6:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4afa:	7889      	ldrb	r1, [r1, #2]
    4afc:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4b00:	440b      	add	r3, r1
    return true;
    4b02:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4b04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4b08:	f36f 0200 	bfc	r2, #0, #1
    4b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4b10:	71a5      	strb	r5, [r4, #6]
            break;
    4b12:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    4b14:	2001      	movs	r0, #1
    4b16:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    4b18:	2000      	movs	r0, #0
}
    4b1a:	bd38      	pop	{r3, r4, r5, pc}
    4b1c:	41008000 	.word	0x41008000

00004b20 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4b20:	7983      	ldrb	r3, [r0, #6]
    4b22:	2b0a      	cmp	r3, #10
    4b24:	d00f      	beq.n	4b46 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4b26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4b2a:	b1a3      	cbz	r3, 4b56 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    4b2c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4b30:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4b34:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4b38:	01db      	lsls	r3, r3, #7
    4b3a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4b42:	615a      	str	r2, [r3, #20]
    4b44:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    4b46:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4b4a:	079b      	lsls	r3, r3, #30
    4b4c:	d5eb      	bpl.n	4b26 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    4b4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4b52:	2b00      	cmp	r3, #0
    4b54:	d0ea      	beq.n	4b2c <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4b56:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4b5a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4b5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4b62:	01db      	lsls	r3, r3, #7
    4b64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4b6c:	619a      	str	r2, [r3, #24]
    4b6e:	4770      	bx	lr

00004b70 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4b70:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4b74:	e7d4      	b.n	4b20 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    4b76:	bf00      	nop

00004b78 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b7c:	9f08      	ldr	r7, [sp, #32]
    4b7e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4b82:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    4b86:	4604      	mov	r4, r0
    4b88:	4616      	mov	r6, r2
    4b8a:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4b8c:	463a      	mov	r2, r7
    4b8e:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4b90:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4b92:	f009 fccd 	bl	e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4b96:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4b9a:	f006 fd67 	bl	b66c <_ZN9ClearCore13StepGeneratorC1Ev>
    4b9e:	4b5c      	ldr	r3, [pc, #368]	; (4d10 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4ba0:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4ba4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    4ba8:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    4bac:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    4bb0:	6322      	str	r2, [r4, #48]	; 0x30
    4bb2:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    4bb6:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    4bb8:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    4bba:	f8df a160 	ldr.w	sl, [pc, #352]	; 4d1c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4bbe:	4f55      	ldr	r7, [pc, #340]	; (4d14 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    4bc0:	2101      	movs	r1, #1
    4bc2:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4bc6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    4bca:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    4bcc:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    4bd0:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4bd4:	f04f 0e02 	mov.w	lr, #2
    4bd8:	2200      	movs	r2, #0
    4bda:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4bde:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    4be2:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    4be6:	f04f 33ff 	mov.w	r3, #4294967295
    4bea:	f04f 0e19 	mov.w	lr, #25
    4bee:	f04f 0903 	mov.w	r9, #3
    4bf2:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    4bf6:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    4bfa:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    4bfe:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    4c02:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    4c06:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    4c0a:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    4c0e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    4c12:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    4c16:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    4c1a:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    4c1e:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    4c22:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    4c26:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    4c2a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    4c2e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    4c32:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    4c36:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    4c3a:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    4c3e:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    4c42:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    4c46:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4c4a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4c4e:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    4c52:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    4c56:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    4c5a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    4c5e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    4c62:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    4c66:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    4c6a:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    4c6e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    4c72:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    4c76:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    4c7a:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    4c7e:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    4c82:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    4c84:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    4c88:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    4c8c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4c90:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4c92:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4c94:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4c98:	2b04      	cmp	r3, #4
    4c9a:	bf9c      	itt	ls
    4c9c:	4a1e      	ldrls	r2, [pc, #120]	; (4d18 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4c9e:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4ca0:	fbb6 f1f2 	udiv	r1, r6, r2
    4ca4:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4cac:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4cae:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4cb2:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4cb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4cba:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4cbe:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4cc0:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4cc4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4cc8:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4ccc:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4cce:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4cd0:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    4cd4:	2a04      	cmp	r2, #4
    4cd6:	bf9a      	itte	ls
    4cd8:	4b0f      	ldrls	r3, [pc, #60]	; (4d18 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4cda:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4cdc:	2200      	movhi	r2, #0
    4cde:	fbb0 f3f2 	udiv	r3, r0, r2
    4ce2:	fb02 0313 	mls	r3, r2, r3, r0
    4ce6:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4cec:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4cf0:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4cf4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4cf8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4cfc:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4cfe:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4d02:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4d06:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    4d0a:	4620      	mov	r0, r4
    4d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d10:	00022c4c 	.word	0x00022c4c
    4d14:	00022c30 	.word	0x00022c30
    4d18:	00022c28 	.word	0x00022c28
    4d1c:	c61c3c00 	.word	0xc61c3c00

00004d20 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    4d20:	7983      	ldrb	r3, [r0, #6]
    4d22:	2b09      	cmp	r3, #9
    4d24:	d003      	beq.n	4d2e <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    4d26:	2b0b      	cmp	r3, #11
    4d28:	d001      	beq.n	4d2e <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    4d2a:	2000      	movs	r0, #0
}
    4d2c:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4d2e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4d32:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4d36:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4d3a:	01db      	lsls	r3, r3, #7
    4d3c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4d44:	b111      	cbz	r1, 4d4c <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    4d46:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4d48:	615a      	str	r2, [r3, #20]
    4d4a:	4770      	bx	lr
    4d4c:	2001      	movs	r0, #1
    4d4e:	619a      	str	r2, [r3, #24]
    4d50:	4770      	bx	lr
    4d52:	bf00      	nop

00004d54 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>:
    switch (m_mode) {
    4d54:	7983      	ldrb	r3, [r0, #6]
    4d56:	2b09      	cmp	r3, #9
    4d58:	d111      	bne.n	4d7e <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x2a>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4d5a:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    4d5e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    4d62:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4d66:	01db      	lsls	r3, r3, #7
    4d68:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4d70:	b111      	cbz	r1, 4d78 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x24>
            return true;
    4d72:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    4d74:	615a      	str	r2, [r3, #20]
    4d76:	4770      	bx	lr
    4d78:	2001      	movs	r0, #1
    4d7a:	619a      	str	r2, [r3, #24]
    4d7c:	4770      	bx	lr
            return false;
    4d7e:	2000      	movs	r0, #0
}
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop

00004d84 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    4d84:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4d86:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    4d8a:	b083      	sub	sp, #12
    4d8c:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d171      	bne.n	4e76 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    4d92:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4d96:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    4d9a:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    4d9e:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4da2:	428a      	cmp	r2, r1
    4da4:	d031      	beq.n	4e0a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    4da6:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    4daa:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4dae:	2200      	movs	r2, #0
    4db0:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4db4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    4db8:	b358      	cbz	r0, 4e12 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    4dba:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4dbc:	b672      	cpsid	i
    if (wasDisabled && value) {
    4dbe:	b36b      	cbz	r3, 4e1c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    4dc0:	b371      	cbz	r1, 4e20 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    4dc2:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4dc6:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4dc8:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4dcc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4dd0:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4dd2:	79a3      	ldrb	r3, [r4, #6]
    4dd4:	2b0a      	cmp	r3, #10
    4dd6:	d02a      	beq.n	4e2e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4dd8:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4ddc:	428b      	cmp	r3, r1
    4dde:	d035      	beq.n	4e4c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    4de0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        \param[in] bitsToChange LED bit in the shift register to be set
        or cleared.
    **/
    void ShifterState(bool setFlds, Masks bitsToChange) {
        setFlds ? ShifterStateSet(bitsToChange)
        : ShifterStateClear(bitsToChange);
    4de4:	2900      	cmp	r1, #0
    4de6:	d13b      	bne.n	4e60 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4de8:	f3bf 8f5b 	dmb	ish
    4dec:	4a2d      	ldr	r2, [pc, #180]	; (4ea4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4dee:	43db      	mvns	r3, r3
    4df0:	e852 0f00 	ldrex	r0, [r2]
    4df4:	4018      	ands	r0, r3
    4df6:	e842 0500 	strex	r5, r0, [r2]
    4dfa:	2d00      	cmp	r5, #0
    4dfc:	d1f8      	bne.n	4df0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    4dfe:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4e02:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    4e06:	b003      	add	sp, #12
    4e08:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    4e0a:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    4e0e:	2a00      	cmp	r2, #0
    4e10:	d133      	bne.n	4e7a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    4e12:	2900      	cmp	r1, #0
    4e14:	d0d1      	beq.n	4dba <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    4e16:	b672      	cpsid	i
    if (wasDisabled && value) {
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d1d1      	bne.n	4dc0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    4e1c:	2900      	cmp	r1, #0
    4e1e:	d1d7      	bne.n	4dd0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    4e20:	2300      	movs	r3, #0
    4e22:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    4e26:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4e28:	79a3      	ldrb	r3, [r4, #6]
    4e2a:	2b0a      	cmp	r3, #10
    4e2c:	d1d4      	bne.n	4dd8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4e2e:	b919      	cbnz	r1, 4e38 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4e30:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    4e34:	079a      	lsls	r2, r3, #30
    4e36:	d428      	bmi.n	4e8a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    4e38:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    4e3c:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4e3e:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4e42:	bf48      	it	mi
    4e44:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4e48:	428b      	cmp	r3, r1
    4e4a:	d1c9      	bne.n	4de0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    4e4c:	2d00      	cmp	r5, #0
    4e4e:	d0d8      	beq.n	4e02 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    4e50:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    4e54:	2b00      	cmp	r3, #0
    4e56:	d1d4      	bne.n	4e02 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    4e58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4e5c:	2900      	cmp	r1, #0
    4e5e:	d0c3      	beq.n	4de8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4e60:	f3bf 8f5b 	dmb	ish
    4e64:	4a0f      	ldr	r2, [pc, #60]	; (4ea4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4e66:	e852 0f00 	ldrex	r0, [r2]
    4e6a:	4318      	orrs	r0, r3
    4e6c:	e842 0500 	strex	r5, r0, [r2]
    4e70:	2d00      	cmp	r5, #0
    4e72:	d0c4      	beq.n	4dfe <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    4e74:	e7f7      	b.n	4e66 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4e76:	2300      	movs	r3, #0
    4e78:	e78f      	b.n	4d9a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    4e7a:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    4e7c:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4e80:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4e84:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4e88:	e797      	b.n	4dba <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    4e8a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    4e8e:	9101      	str	r1, [sp, #4]
    4e90:	f043 0310 	orr.w	r3, r3, #16
    4e94:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    4e98:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4e9c:	f006 fc18 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    4ea0:	9901      	ldr	r1, [sp, #4]
    4ea2:	e7c9      	b.n	4e38 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4ea4:	20001ac4 	.word	0x20001ac4

00004ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    4ea8:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    4eac:	2b00      	cmp	r3, #0
    4eae:	d04a      	beq.n	4f46 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4eb0:	4a35      	ldr	r2, [pc, #212]	; (4f88 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    4eb2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4eb6:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    4eb8:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4eba:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    4ebc:	b98b      	cbnz	r3, 4ee2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    4ebe:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4ec2:	2b01      	cmp	r3, #1
    4ec4:	d022      	beq.n	4f0c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4ec6:	2b02      	cmp	r3, #2
    4ec8:	d13b      	bne.n	4f42 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    4eca:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d145      	bne.n	4f5e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4ed2:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d13c      	bne.n	4f54 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4eda:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4ede:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4ee2:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    4ee6:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4eea:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    4eec:	428b      	cmp	r3, r1
    4eee:	d32b      	bcc.n	4f48 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    4ef0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    4ef4:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    4ef8:	3b01      	subs	r3, #1
    4efa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4efe:	b94b      	cbnz	r3, 4f14 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    4f00:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    4f04:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4f08:	2b01      	cmp	r3, #1
    4f0a:	d1dc      	bne.n	4ec6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    4f0c:	2302      	movs	r3, #2
    4f0e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4f12:	e7da      	b.n	4eca <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    4f14:	4b1d      	ldr	r3, [pc, #116]	; (4f8c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    4f16:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    4f1a:	f3bf 8f5b 	dmb	ish
    4f1e:	e853 1f00 	ldrex	r1, [r3]
    4f22:	4051      	eors	r1, r2
    4f24:	e843 1e00 	strex	lr, r1, [r3]
    4f28:	f1be 0f00 	cmp.w	lr, #0
    4f2c:	d1f7      	bne.n	4f1e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    4f2e:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    4f32:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4f36:	2b01      	cmp	r3, #1
    4f38:	d1c5      	bne.n	4ec6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    4f3a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d0e4      	beq.n	4f0c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4f42:	f85d fb04 	ldr.w	pc, [sp], #4
    4f46:	4770      	bx	lr
    switch (m_clearFaultState) {
    4f48:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4f4c:	2b02      	cmp	r3, #2
    4f4e:	d0bc      	beq.n	4eca <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    4f50:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4f54:	3b01      	subs	r3, #1
    4f56:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    4f5a:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    4f5e:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    4f60:	f500 7394 	add.w	r3, r0, #296	; 0x128
    4f64:	f3bf 8f5b 	dmb	ish
    4f68:	e853 1f00 	ldrex	r1, [r3]
    4f6c:	f021 0120 	bic.w	r1, r1, #32
    4f70:	e843 1e00 	strex	lr, r1, [r3]
    4f74:	f1be 0f00 	cmp.w	lr, #0
    4f78:	d1f6      	bne.n	4f68 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    4f7a:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4f7e:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    4f82:	f85d fb04 	ldr.w	pc, [sp], #4
    4f86:	bf00      	nop
    4f88:	20001be4 	.word	0x20001be4
    4f8c:	20001ac4 	.word	0x20001ac4

00004f90 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4f90:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    4f94:	b570      	push	{r4, r5, r6, lr}
    4f96:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    4f98:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d163      	bne.n	5068 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    4fa0:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4fa4:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    4fa8:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4fac:	bb39      	cbnz	r1, 4ffe <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    4fae:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    4fb2:	b672      	cpsid	i
    if (wasDisabled && value) {
    4fb4:	b35b      	cbz	r3, 500e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    4fb6:	b365      	cbz	r5, 5012 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    4fb8:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4fbc:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4fbe:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4fc2:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4fc6:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4fc8:	79a3      	ldrb	r3, [r4, #6]
    4fca:	2b0a      	cmp	r3, #10
    4fcc:	d028      	beq.n	5020 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4fce:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4fd2:	42ab      	cmp	r3, r5
    4fd4:	d033      	beq.n	503e <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    4fd6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4fda:	2d00      	cmp	r5, #0
    4fdc:	d139      	bne.n	5052 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4fde:	f3bf 8f5b 	dmb	ish
    4fe2:	4a28      	ldr	r2, [pc, #160]	; (5084 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    4fe4:	43db      	mvns	r3, r3
    4fe6:	e852 1f00 	ldrex	r1, [r2]
    4fea:	4019      	ands	r1, r3
    4fec:	e842 1000 	strex	r0, r1, [r2]
    4ff0:	2800      	cmp	r0, #0
    4ff2:	d1f8      	bne.n	4fe6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    4ff4:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4ff8:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    4ffc:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    4ffe:	2500      	movs	r5, #0
    5000:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5004:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    5008:	b672      	cpsid	i
    if (wasDisabled && value) {
    500a:	2b00      	cmp	r3, #0
    500c:	d1d3      	bne.n	4fb6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    500e:	2d00      	cmp	r5, #0
    5010:	d1d9      	bne.n	4fc6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    5012:	2300      	movs	r3, #0
    5014:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5018:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    501a:	79a3      	ldrb	r3, [r4, #6]
    501c:	2b0a      	cmp	r3, #10
    501e:	d1d6      	bne.n	4fce <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5020:	b91d      	cbnz	r5, 502a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5022:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5026:	079a      	lsls	r2, r3, #30
    5028:	d420      	bmi.n	506c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    502a:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    502e:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5030:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5034:	bf48      	it	mi
    5036:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    503a:	42ab      	cmp	r3, r5
    503c:	d1cb      	bne.n	4fd6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    503e:	2e00      	cmp	r6, #0
    5040:	d0da      	beq.n	4ff8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    5042:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    5046:	2b00      	cmp	r3, #0
    5048:	d1d6      	bne.n	4ff8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    504a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    504e:	2d00      	cmp	r5, #0
    5050:	d0c5      	beq.n	4fde <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5052:	f3bf 8f5b 	dmb	ish
    5056:	4a0b      	ldr	r2, [pc, #44]	; (5084 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5058:	e852 1f00 	ldrex	r1, [r2]
    505c:	4319      	orrs	r1, r3
    505e:	e842 1000 	strex	r0, r1, [r2]
    5062:	2800      	cmp	r0, #0
    5064:	d0c6      	beq.n	4ff4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    5066:	e7f7      	b.n	5058 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5068:	2300      	movs	r3, #0
    506a:	e79d      	b.n	4fa8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    506c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5070:	f043 0310 	orr.w	r3, r3, #16
    5074:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5078:	f104 0030 	add.w	r0, r4, #48	; 0x30
    507c:	f006 fb28 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5080:	e7d3      	b.n	502a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5082:	bf00      	nop
    5084:	20001ac4 	.word	0x20001ac4

00005088 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    508a:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    508e:	b903      	cbnz	r3, 5092 <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5092:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    5094:	f009 f99c 	bl	e3d0 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5098:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    509a:	4a98      	ldr	r2, [pc, #608]	; (52fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    509c:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    50a0:	2b0a      	cmp	r3, #10
    50a2:	bf08      	it	eq
    50a4:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    50a8:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    50ac:	bf08      	it	eq
    50ae:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    50b2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    50b6:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    50b8:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    50bc:	bf18      	it	ne
    50be:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    50c0:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    50c2:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    50c4:	f240 80df 	bls.w	5286 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    50c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    50cc:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    50ce:	4a8c      	ldr	r2, [pc, #560]	; (5300 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    50d0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    50d4:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    50d8:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    50dc:	1c48      	adds	r0, r1, #1
    50de:	d012      	beq.n	5106 <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    50e0:	4888      	ldr	r0, [pc, #544]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    50e2:	f003 fdfb 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    50e6:	6803      	ldr	r3, [r0, #0]
    50e8:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    50ea:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    50ec:	4798      	blx	r3
    50ee:	2809      	cmp	r0, #9
    50f0:	f000 8248 	beq.w	5584 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    50f4:	4628      	mov	r0, r5
    50f6:	f009 f8f1 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
    50fa:	1c01      	adds	r1, r0, #0
    50fc:	bf18      	it	ne
    50fe:	2101      	movne	r1, #1
    5100:	4620      	mov	r0, r4
    5102:	f7ff fe3f 	bl	4d84 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5106:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    510a:	1c4a      	adds	r2, r1, #1
    510c:	d016      	beq.n	513c <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    510e:	79a3      	ldrb	r3, [r4, #6]
    5110:	2b0a      	cmp	r3, #10
    5112:	d039      	beq.n	5188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5114:	487b      	ldr	r0, [pc, #492]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5116:	f003 fde1 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    511a:	6803      	ldr	r3, [r0, #0]
    511c:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    511e:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5120:	4798      	blx	r3
    5122:	2809      	cmp	r0, #9
    5124:	f000 80d0 	beq.w	52c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5128:	4628      	mov	r0, r5
    512a:	f009 f8d7 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    512e:	79a3      	ldrb	r3, [r4, #6]
    5130:	2b09      	cmp	r3, #9
    5132:	f000 80d3 	beq.w	52dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    5136:	2b0b      	cmp	r3, #11
    5138:	f000 80d0 	beq.w	52dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    513c:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5140:	1c4b      	adds	r3, r1, #1
    5142:	d021      	beq.n	5188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    5144:	79a3      	ldrb	r3, [r4, #6]
    5146:	2b0a      	cmp	r3, #10
    5148:	d01e      	beq.n	5188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    514a:	486e      	ldr	r0, [pc, #440]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    514c:	f003 fdc6 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5150:	6803      	ldr	r3, [r0, #0]
    5152:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5154:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5156:	4798      	blx	r3
    5158:	2809      	cmp	r0, #9
    515a:	f000 8239 	beq.w	55d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    515e:	4628      	mov	r0, r5
    5160:	f009 f8bc 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5164:	79a3      	ldrb	r3, [r4, #6]
    5166:	2b09      	cmp	r3, #9
    5168:	d10e      	bne.n	5188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    516a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    516e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    5172:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5176:	01db      	lsls	r3, r3, #7
    5178:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    517c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5180:	2800      	cmp	r0, #0
    5182:	f000 81d4 	beq.w	552e <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    5186:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5188:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    518c:	1c4f      	adds	r7, r1, #1
    518e:	d010      	beq.n	51b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5190:	485c      	ldr	r0, [pc, #368]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5192:	f003 fda3 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5196:	6803      	ldr	r3, [r0, #0]
    5198:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    519a:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    519c:	4798      	blx	r3
    519e:	2809      	cmp	r0, #9
    51a0:	f000 817d 	beq.w	549e <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    51a4:	682b      	ldr	r3, [r5, #0]
    51a6:	4628      	mov	r0, r5
    51a8:	681b      	ldr	r3, [r3, #0]
    51aa:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    51ac:	2804      	cmp	r0, #4
    51ae:	f000 8176 	beq.w	549e <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    51b2:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    51b6:	1c4e      	adds	r6, r1, #1
    51b8:	d015      	beq.n	51e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    51ba:	4852      	ldr	r0, [pc, #328]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    51bc:	f003 fd8e 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    51c0:	6803      	ldr	r3, [r0, #0]
    51c2:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    51c4:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    51c6:	4798      	blx	r3
    51c8:	2809      	cmp	r0, #9
    51ca:	f000 81e6 	beq.w	559a <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    51ce:	4628      	mov	r0, r5
    51d0:	f009 f884 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    51d4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    51d8:	fab0 f080 	clz	r0, r0
    51dc:	0940      	lsrs	r0, r0, #5
    51de:	f360 03c3 	bfi	r3, r0, #3, #1
    51e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    51e6:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    51ea:	1c4d      	adds	r5, r1, #1
    51ec:	d015      	beq.n	521a <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    51ee:	4845      	ldr	r0, [pc, #276]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    51f0:	f003 fd74 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    51f4:	6803      	ldr	r3, [r0, #0]
    51f6:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    51f8:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    51fa:	4798      	blx	r3
    51fc:	2809      	cmp	r0, #9
    51fe:	f000 81d1 	beq.w	55a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    5202:	4628      	mov	r0, r5
    5204:	f009 f86a 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5208:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    520c:	fab0 f080 	clz	r0, r0
    5210:	0940      	lsrs	r0, r0, #5
    5212:	f360 1304 	bfi	r3, r0, #4, #1
    5216:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    521a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    521e:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    5222:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5226:	1c48      	adds	r0, r1, #1
    5228:	f000 8132 	beq.w	5490 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    522c:	4835      	ldr	r0, [pc, #212]	; (5304 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    522e:	f003 fd55 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5232:	6803      	ldr	r3, [r0, #0]
    5234:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5236:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5238:	4798      	blx	r3
    523a:	2809      	cmp	r0, #9
    523c:	f000 81c0 	beq.w	55c0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    5240:	4638      	mov	r0, r7
    5242:	f009 f84b 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
    5246:	fab0 f780 	clz	r7, r0
    524a:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    524c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5250:	2b00      	cmp	r3, #0
    5252:	f040 8131 	bne.w	54b8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    5256:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    525a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    525e:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5262:	2900      	cmp	r1, #0
    5264:	d152      	bne.n	530c <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    5266:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    526a:	0792      	lsls	r2, r2, #30
    526c:	d54e      	bpl.n	530c <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    526e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5272:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    5276:	2800      	cmp	r0, #0
    5278:	f000 8152 	beq.w	5520 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    527c:	06d7      	lsls	r7, r2, #27
    527e:	d549      	bpl.n	5314 <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5280:	f046 0604 	orr.w	r6, r6, #4
    5284:	e046      	b.n	5314 <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5286:	07aa      	lsls	r2, r5, #30
    5288:	f000 8161 	beq.w	554e <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    528c:	2333      	movs	r3, #51	; 0x33
    528e:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5290:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    5294:	2201      	movs	r2, #1
    5296:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    529a:	b29a      	uxth	r2, r3
    529c:	3200      	adds	r2, #0
    529e:	bf18      	it	ne
    52a0:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    52a2:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    52a6:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    52aa:	06eb      	lsls	r3, r5, #27
    52ac:	f100 8158 	bmi.w	5560 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    52b0:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    52b4:	2b00      	cmp	r3, #0
    52b6:	f040 810f 	bne.w	54d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    52ba:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    52be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    52c2:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    52c6:	e707      	b.n	50d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    52c8:	4b0f      	ldr	r3, [pc, #60]	; (5308 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    52ca:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    52ce:	6818      	ldr	r0, [r3, #0]
    52d0:	f00a f85a 	bl	f388 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    52d4:	79a3      	ldrb	r3, [r4, #6]
    52d6:	2b09      	cmp	r3, #9
    52d8:	f47f af2d 	bne.w	5136 <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    52dc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    52e0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    52e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
    52e8:	01db      	lsls	r3, r3, #7
    52ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    52ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    52f2:	2800      	cmp	r0, #0
    52f4:	f000 8119 	beq.w	552a <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    52f8:	615a      	str	r2, [r3, #20]
    52fa:	e71f      	b.n	513c <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    52fc:	00022c94 	.word	0x00022c94
    5300:	c61c3c00 	.word	0xc61c3c00
    5304:	200019cc 	.word	0x200019cc
    5308:	20001efc 	.word	0x20001efc
    530c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5310:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    5314:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5318:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    531c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5320:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5324:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5328:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    532c:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5330:	2b00      	cmp	r3, #0
    5332:	f000 80ab 	beq.w	548c <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    5336:	1f98      	subs	r0, r3, #6
    5338:	bf18      	it	ne
    533a:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    533c:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    5340:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5344:	2a00      	cmp	r2, #0
    5346:	f000 809b 	beq.w	5480 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    534a:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    534e:	b111      	cbz	r1, 5356 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5350:	07af      	lsls	r7, r5, #30
    5352:	f140 80df 	bpl.w	5514 <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5356:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    535a:	2b03      	cmp	r3, #3
    535c:	d071      	beq.n	5442 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    535e:	f015 0302 	ands.w	r3, r5, #2
    5362:	f040 80ce 	bne.w	5502 <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5366:	2900      	cmp	r1, #0
    5368:	d06b      	beq.n	5442 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    536a:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    536e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    5372:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    5376:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    537a:	2b00      	cmp	r3, #0
    537c:	d065      	beq.n	544a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    537e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    5382:	2b00      	cmp	r3, #0
    5384:	f340 8113 	ble.w	55ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5388:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    538c:	2201      	movs	r2, #1
            m_enableCounter--;
    538e:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5390:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    5394:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5398:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    539c:	b11b      	cbz	r3, 53a6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    539e:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    53a0:	bf48      	it	mi
    53a2:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    53a6:	1c32      	adds	r2, r6, #0
    53a8:	bf18      	it	ne
    53aa:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    53ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    53b0:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    53b4:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    53b8:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    53bc:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    53c0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    53c4:	f3bf 8f5b 	dmb	ish
    53c8:	e852 1f00 	ldrex	r1, [r2]
    53cc:	4319      	orrs	r1, r3
    53ce:	e842 1000 	strex	r0, r1, [r2]
    53d2:	2800      	cmp	r0, #0
    53d4:	d1f8      	bne.n	53c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    53d6:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    53da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    53de:	f3bf 8f5b 	dmb	ish
    53e2:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    53e6:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    53ea:	e853 2f00 	ldrex	r2, [r3]
    53ee:	432a      	orrs	r2, r5
    53f0:	e843 2100 	strex	r1, r2, [r3]
    53f4:	2900      	cmp	r1, #0
    53f6:	d1f8      	bne.n	53ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    53f8:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    53fc:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    53fe:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    5402:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5406:	2b0a      	cmp	r3, #10
    5408:	f47f ae42 	bne.w	5090 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    540c:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5410:	4628      	mov	r0, r5
    5412:	f005 feb5 	bl	b180 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    5416:	4628      	mov	r0, r5
    5418:	f006 f9d6 	bl	b7c8 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    541c:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5420:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    5422:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5424:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    5428:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    542a:	4282      	cmp	r2, r0
    542c:	f43f ae30 	beq.w	5090 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    5430:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5434:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5438:	680b      	ldr	r3, [r1, #0]
    543a:	4213      	tst	r3, r2
    543c:	d1fc      	bne.n	5438 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    543e:	6028      	str	r0, [r5, #0]
    5440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5442:	1c03      	adds	r3, r0, #0
    5444:	bf18      	it	ne
    5446:	2301      	movne	r3, #1
    5448:	e78f      	b.n	536a <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    544a:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    544e:	2a00      	cmp	r2, #0
    5450:	d03a      	beq.n	54c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    5452:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    5456:	b933      	cbnz	r3, 5466 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    5458:	b938      	cbnz	r0, 546a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    545a:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    545e:	2204      	movs	r2, #4
    5460:	f362 258c 	bfi	r5, r2, #10, #3
    5464:	e79a      	b.n	539c <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    5466:	2800      	cmp	r0, #0
    5468:	d063      	beq.n	5532 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    546a:	f015 0302 	ands.w	r3, r5, #2
    546e:	d1f6      	bne.n	545e <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    5470:	2203      	movs	r2, #3
    5472:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    5476:	f363 1504 	bfi	r5, r3, #4, #1
    547a:	f005 0302 	and.w	r3, r5, #2
    547e:	e78d      	b.n	539c <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5480:	f362 0500 	bfi	r5, r2, #0, #1
    5484:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5488:	4613      	mov	r3, r2
    548a:	e76e      	b.n	536a <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    548c:	4618      	mov	r0, r3
    548e:	e755      	b.n	533c <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    5490:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5494:	bb93      	cbnz	r3, 54fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    5496:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    549a:	461f      	mov	r7, r3
    549c:	e6dd      	b.n	525a <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    549e:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    54a2:	b381      	cbz	r1, 5506 <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    54a4:	682b      	ldr	r3, [r5, #0]
    54a6:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    54aa:	695b      	ldr	r3, [r3, #20]
    54ac:	b109      	cbz	r1, 54b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    54ae:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    54b2:	4628      	mov	r0, r5
    54b4:	4798      	blx	r3
    54b6:	e67c      	b.n	51b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    54b8:	b307      	cbz	r7, 54fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    54ba:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    54be:	2900      	cmp	r1, #0
    54c0:	f000 80ab 	beq.w	561a <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    54c4:	460f      	mov	r7, r1
    54c6:	e6c8      	b.n	525a <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    54c8:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    54cc:	07aa      	lsls	r2, r5, #30
    54ce:	f57f af6a 	bpl.w	53a6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    54d2:	f046 0610 	orr.w	r6, r6, #16
    54d6:	e762      	b.n	539e <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    54d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    54dc:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    54e0:	4073      	eors	r3, r6
    54e2:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    54e4:	4291      	cmp	r1, r2
    54e6:	f000 80a4 	beq.w	5632 <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    54ea:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    54ee:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    54f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    54f6:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    54fa:	e5ed      	b.n	50d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    54fc:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5500:	e6ab      	b.n	525a <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5502:	2300      	movs	r3, #0
    5504:	e731      	b.n	536a <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    5506:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    550a:	682b      	ldr	r3, [r5, #0]
    550c:	2a01      	cmp	r2, #1
    550e:	695b      	ldr	r3, [r3, #20]
    5510:	d1cf      	bne.n	54b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5512:	e7cc      	b.n	54ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5514:	2801      	cmp	r0, #1
    5516:	f47f af1e 	bne.w	5356 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    551a:	f045 0501 	orr.w	r5, r5, #1
    551e:	e71c      	b.n	535a <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    5520:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    5522:	bf48      	it	mi
    5524:	f046 0602 	orrmi.w	r6, r6, #2
    5528:	e6f4      	b.n	5314 <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    552a:	619a      	str	r2, [r3, #24]
    552c:	e606      	b.n	513c <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    552e:	619a      	str	r2, [r3, #24]
    5530:	e62a      	b.n	5188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    5532:	2302      	movs	r3, #2
    5534:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    5538:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    553c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5540:	f006 f8c6 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    5544:	f046 0620 	orr.w	r6, r6, #32
    5548:	f005 0302 	and.w	r3, r5, #2
    554c:	e726      	b.n	539c <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    554e:	f004 f9e5 	bl	991c <Milliseconds>
    5552:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    5556:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5558:	2803      	cmp	r0, #3
    555a:	f63f ae97 	bhi.w	528c <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    555e:	e6a4      	b.n	52aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5560:	f004 f9dc 	bl	991c <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    5564:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5568:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    556c:	2b00      	cmp	r3, #0
    556e:	d03a      	beq.n	55e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    5570:	2330      	movs	r3, #48	; 0x30
    5572:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    5574:	2200      	movs	r2, #0
    5576:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    557a:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    557e:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    5582:	e697      	b.n	52b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    5584:	4b54      	ldr	r3, [pc, #336]	; (56d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    5586:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    558a:	6818      	ldr	r0, [r3, #0]
    558c:	f009 fefc 	bl	f388 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    5590:	4601      	mov	r1, r0
    5592:	4620      	mov	r0, r4
    5594:	f7ff fbf6 	bl	4d84 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    5598:	e5b5      	b.n	5106 <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    559a:	682b      	ldr	r3, [r5, #0]
    559c:	4628      	mov	r0, r5
    559e:	691b      	ldr	r3, [r3, #16]
    55a0:	4798      	blx	r3
    55a2:	e617      	b.n	51d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    55a4:	682b      	ldr	r3, [r5, #0]
    55a6:	4628      	mov	r0, r5
    55a8:	691b      	ldr	r3, [r3, #16]
    55aa:	4798      	blx	r3
    55ac:	e62c      	b.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    55ae:	2201      	movs	r2, #1
            m_isEnabling = false;
    55b0:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    55b2:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    55b6:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    55ba:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    55be:	e748      	b.n	5452 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    55c0:	683b      	ldr	r3, [r7, #0]
    55c2:	4638      	mov	r0, r7
    55c4:	691b      	ldr	r3, [r3, #16]
    55c6:	4798      	blx	r3
    55c8:	fab0 f780 	clz	r7, r0
    55cc:	097f      	lsrs	r7, r7, #5
    55ce:	e63d      	b.n	524c <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    55d0:	4b41      	ldr	r3, [pc, #260]	; (56d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    55d2:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    55d6:	6818      	ldr	r0, [r3, #0]
    55d8:	f009 fed6 	bl	f388 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    55dc:	79a3      	ldrb	r3, [r4, #6]
    55de:	2b09      	cmp	r3, #9
    55e0:	f43f adc3 	beq.w	516a <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    55e4:	e5d0      	b.n	5188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    55e6:	06ad      	lsls	r5, r5, #26
    55e8:	f57f ae62 	bpl.w	52b0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    55ec:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    55f0:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    55f4:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    55f8:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    55fc:	8bf8      	ldrh	r0, [r7, #30]
    55fe:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    5602:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    5606:	8bbd      	ldrh	r5, [r7, #28]
    5608:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    560c:	b9d0      	cbnz	r0, 5644 <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    560e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    5612:	2201      	movs	r2, #1
    5614:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    5618:	e64c      	b.n	52b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    561a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    561e:	f006 f873 	bl	b708 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    5622:	2301      	movs	r3, #1
    5624:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    5628:	f046 0608 	orr.w	r6, r6, #8
    562c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5630:	e613      	b.n	525a <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    5632:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    5636:	2a00      	cmp	r2, #0
    5638:	f43f ad49 	beq.w	50ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    563c:	3a01      	subs	r2, #1
    563e:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    5642:	e549      	b.n	50d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    5644:	ee07 1a90 	vmov	s15, r1
    5648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    564c:	ee07 2a90 	vmov	s15, r2
    5650:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    5654:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    5658:	eec7 6a27 	vdiv.f32	s13, s14, s15
    565c:	ee16 0a90 	vmov	r0, s13
    5660:	f016 fa3c 	bl	1badc <__aeabi_f2d>
    5664:	a318      	add	r3, pc, #96	; (adr r3, 56c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    5666:	e9d3 2300 	ldrd	r2, r3, [r3]
    566a:	f016 f8d7 	bl	1b81c <__aeabi_dsub>
    566e:	a318      	add	r3, pc, #96	; (adr r3, 56d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    5670:	e9d3 2300 	ldrd	r2, r3, [r3]
    5674:	f016 fa86 	bl	1bb84 <__aeabi_dmul>
    5678:	f016 fd66 	bl	1c148 <__aeabi_d2f>
    567c:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    5680:	b11e      	cbz	r6, 568a <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5682:	ed9f 7a16 	vldr	s14, [pc, #88]	; 56dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    5686:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    568a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    568e:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5692:	2b02      	cmp	r3, #2
    5694:	d004      	beq.n	56a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    5696:	2302      	movs	r3, #2
    5698:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    569c:	2300      	movs	r3, #0
    569e:	e7b8      	b.n	5612 <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    56a0:	ee17 0a90 	vmov	r0, s15
    56a4:	f016 fa1a 	bl	1badc <__aeabi_f2d>
    56a8:	2200      	movs	r2, #0
    56aa:	4b0d      	ldr	r3, [pc, #52]	; (56e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    56ac:	f016 f8b6 	bl	1b81c <__aeabi_dsub>
    56b0:	4602      	mov	r2, r0
    56b2:	460b      	mov	r3, r1
    56b4:	f016 f8b4 	bl	1b820 <__adddf3>
    56b8:	f016 fd46 	bl	1c148 <__aeabi_d2f>
    56bc:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    56c0:	e7e9      	b.n	5696 <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    56c2:	bf00      	nop
    56c4:	f3af 8000 	nop.w
    56c8:	9999999a 	.word	0x9999999a
    56cc:	3fa99999 	.word	0x3fa99999
    56d0:	71c71c72 	.word	0x71c71c72
    56d4:	405bc71c 	.word	0x405bc71c
    56d8:	20001efc 	.word	0x20001efc
    56dc:	42c80000 	.word	0x42c80000
    56e0:	40490000 	.word	0x40490000

000056e4 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    56e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56e8:	4604      	mov	r4, r0
    56ea:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    56ec:	4690      	mov	r8, r2
    56ee:	2a00      	cmp	r2, #0
    56f0:	d154      	bne.n	579c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    56f2:	6c45      	ldr	r5, [r0, #68]	; 0x44
    56f4:	1b4d      	subs	r5, r1, r5
    56f6:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    56f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    56fc:	2b00      	cmp	r3, #0
    56fe:	d04b      	beq.n	5798 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5700:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5704:	f043 0301 	orr.w	r3, r3, #1
    5708:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    570c:	2600      	movs	r6, #0
    570e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5712:	b933      	cbnz	r3, 5722 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5714:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5718:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    571c:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    571e:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5722:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5726:	1c48      	adds	r0, r1, #1
    5728:	d016      	beq.n	5758 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    572a:	4829      	ldr	r0, [pc, #164]	; (57d0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    572c:	f003 fad6 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5730:	6803      	ldr	r3, [r0, #0]
    5732:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5734:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5736:	4798      	blx	r3
    5738:	2809      	cmp	r0, #9
    573a:	d040      	beq.n	57be <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    573c:	4648      	mov	r0, r9
    573e:	f008 fdcd 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
    5742:	fab0 f080 	clz	r0, r0
    5746:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5748:	b130      	cbz	r0, 5758 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    574a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    574e:	f043 0308 	orr.w	r3, r3, #8
    5752:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5756:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5758:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    575c:	b16d      	cbz	r5, 577a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    575e:	06d9      	lsls	r1, r3, #27
    5760:	d426      	bmi.n	57b0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    5762:	b196      	cbz	r6, 578a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    5764:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    5766:	4642      	mov	r2, r8
    5768:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    576a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    576e:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5772:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    5776:	f005 bc7f 	b.w	b078 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    577a:	071a      	lsls	r2, r3, #28
    577c:	d5f1      	bpl.n	5762 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    577e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5782:	f043 0302 	orr.w	r3, r3, #2
    5786:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    578a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    578e:	079b      	lsls	r3, r3, #30
    5790:	d406      	bmi.n	57a0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    5792:	2000      	movs	r0, #0
    5794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5798:	2601      	movs	r6, #1
    579a:	e7b8      	b.n	570e <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    579c:	0fcd      	lsrs	r5, r1, #31
    579e:	e7ab      	b.n	56f8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    57a0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    57a4:	2100      	movs	r1, #0
    57a6:	f005 ffaf 	bl	b708 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    57aa:	2000      	movs	r0, #0
    57ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    57b0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    57b4:	f043 0304 	orr.w	r3, r3, #4
    57b8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    57bc:	e7e5      	b.n	578a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    57be:	f8d9 3000 	ldr.w	r3, [r9]
    57c2:	4648      	mov	r0, r9
    57c4:	691b      	ldr	r3, [r3, #16]
    57c6:	4798      	blx	r3
    57c8:	fab0 f080 	clz	r0, r0
    57cc:	0940      	lsrs	r0, r0, #5
    57ce:	e7bb      	b.n	5748 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    57d0:	200019cc 	.word	0x200019cc

000057d4 <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    57d4:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    57d8:	f7ff bf84 	b.w	56e4 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

000057dc <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    57dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    57de:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    57e2:	4604      	mov	r4, r0
    57e4:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    57e6:	2b00      	cmp	r3, #0
    57e8:	d04a      	beq.n	5880 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    57ea:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    57ee:	f043 0301 	orr.w	r3, r3, #1
    57f2:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    57f6:	2500      	movs	r5, #0
    57f8:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    57fc:	b933      	cbnz	r3, 580c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    57fe:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5802:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5806:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5808:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    580c:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5810:	1c48      	adds	r0, r1, #1
    5812:	d016      	beq.n	5842 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5814:	4826      	ldr	r0, [pc, #152]	; (58b0 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    5816:	f003 fa61 	bl	8cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    581a:	6803      	ldr	r3, [r0, #0]
    581c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    581e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5820:	4798      	blx	r3
    5822:	2809      	cmp	r0, #9
    5824:	d03c      	beq.n	58a0 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    5826:	4638      	mov	r0, r7
    5828:	f008 fd58 	bl	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
    582c:	fab0 f080 	clz	r0, r0
    5830:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5832:	b130      	cbz	r0, 5842 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5834:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5838:	f043 0308 	orr.w	r3, r3, #8
    583c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5840:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5842:	2e00      	cmp	r6, #0
    5844:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5848:	da0c      	bge.n	5864 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    584a:	06d9      	lsls	r1, r3, #27
    584c:	d421      	bmi.n	5892 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    584e:	b18d      	cbz	r5, 5874 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    5850:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    5852:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    5854:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    5858:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    585c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    5860:	f005 bc44 	b.w	b0ec <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5864:	071a      	lsls	r2, r3, #28
    5866:	d5f2      	bpl.n	584e <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5868:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    586c:	f043 0302 	orr.w	r3, r3, #2
    5870:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5874:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5878:	079b      	lsls	r3, r3, #30
    587a:	d403      	bmi.n	5884 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    587c:	2000      	movs	r0, #0
    587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5880:	2501      	movs	r5, #1
    5882:	e7b9      	b.n	57f8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    5884:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5888:	2100      	movs	r1, #0
    588a:	f005 ff3d 	bl	b708 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    588e:	2000      	movs	r0, #0
    5890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5892:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5896:	f043 0304 	orr.w	r3, r3, #4
    589a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    589e:	e7e9      	b.n	5874 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    58a0:	683b      	ldr	r3, [r7, #0]
    58a2:	4638      	mov	r0, r7
    58a4:	691b      	ldr	r3, [r3, #16]
    58a6:	4798      	blx	r3
    58a8:	fab0 f080 	clz	r0, r0
    58ac:	0940      	lsrs	r0, r0, #5
    58ae:	e7c0      	b.n	5832 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    58b0:	200019cc 	.word	0x200019cc

000058b4 <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    58b4:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    58b8:	f7ff bf90 	b.w	57dc <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

000058bc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    58bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    58be:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    58c2:	4dbc      	ldr	r5, [pc, #752]	; (5bb4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    58c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
    58c8:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    58cc:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    58d0:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    58d2:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    58d4:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    58d8:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    58dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
    58e0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    58e4:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    58e6:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    58e8:	2100      	movs	r1, #0
    58ea:	f7ff fa4b 	bl	4d84 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    58ee:	4631      	mov	r1, r6
    58f0:	4620      	mov	r0, r4
    58f2:	f008 fd07 	bl	e304 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    58f6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    58fa:	f993 2001 	ldrsb.w	r2, [r3, #1]
    58fe:	7898      	ldrb	r0, [r3, #2]
    5900:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    5904:	1813      	adds	r3, r2, r0
    5906:	2700      	movs	r7, #0
    5908:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    590c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5910:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5914:	788e      	ldrb	r6, [r1, #2]
    5916:	01db      	lsls	r3, r3, #7
    5918:	18e9      	adds	r1, r5, r3
    591a:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    591c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5920:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    5924:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    5928:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    592a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    592e:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5930:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    5934:	f010 0f01 	tst.w	r0, #1
    5938:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    593c:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5940:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5944:	bf14      	ite	ne
    5946:	f360 1107 	bfine	r1, r0, #4, #4
    594a:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    594e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5952:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5956:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    595a:	07f0      	lsls	r0, r6, #31
    595c:	f04f 0105 	mov.w	r1, #5
    5960:	bf4c      	ite	mi
    5962:	f361 1207 	bfimi	r2, r1, #4, #4
    5966:	f361 0203 	bfipl	r2, r1, #0, #4
    596a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    596e:	6823      	ldr	r3, [r4, #0]
    5970:	4a91      	ldr	r2, [pc, #580]	; (5bb8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    5972:	685b      	ldr	r3, [r3, #4]
    5974:	4293      	cmp	r3, r2
    5976:	f040 8119 	bne.w	5bac <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    597a:	79a3      	ldrb	r3, [r4, #6]
    597c:	2b09      	cmp	r3, #9
    597e:	d022      	beq.n	59c6 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5980:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5984:	f005 fea4 	bl	b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5988:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    598c:	4b89      	ldr	r3, [pc, #548]	; (5bb4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    598e:	f991 2001 	ldrsb.w	r2, [r1, #1]
    5992:	7889      	ldrb	r1, [r1, #2]
    5994:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5998:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    599a:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    599c:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    59a0:	f36f 0100 	bfc	r1, #0, #1
    59a4:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    59a8:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    59ac:	f992 1001 	ldrsb.w	r1, [r2, #1]
    59b0:	7892      	ldrb	r2, [r2, #2]
    59b2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    59b6:	4413      	add	r3, r2
    59b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    59bc:	f36f 0200 	bfc	r2, #0, #1
    59c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    59c4:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    59c6:	68e3      	ldr	r3, [r4, #12]
    59c8:	6922      	ldr	r2, [r4, #16]
    59ca:	01db      	lsls	r3, r3, #7
    59cc:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    59d0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    59d4:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    59d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    59dc:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    59e0:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    59e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    59e8:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    59ea:	bf14      	ite	ne
    59ec:	f36f 1007 	bfcne	r0, #4, #4
    59f0:	f365 0003 	bfieq	r0, r5, #0, #4
    59f4:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    59f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    59fc:	496f      	ldr	r1, [pc, #444]	; (5bbc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    59fe:	f042 0201 	orr.w	r2, r2, #1
    5a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5a06:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5a0a:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5a0e:	681a      	ldr	r2, [r3, #0]
    5a10:	f36f 0241 	bfc	r2, #1, #1
    5a14:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5a16:	691a      	ldr	r2, [r3, #16]
    5a18:	0792      	lsls	r2, r2, #30
    5a1a:	d4fc      	bmi.n	5a16 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5a1c:	681a      	ldr	r2, [r3, #0]
    5a1e:	f042 0201 	orr.w	r2, r2, #1
    5a22:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    5a24:	691a      	ldr	r2, [r3, #16]
    5a26:	f012 0201 	ands.w	r2, r2, #1
    5a2a:	d1fb      	bne.n	5a24 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5a2c:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5a2e:	4964      	ldr	r1, [pc, #400]	; (5bc0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5a30:	f362 1505 	bfi	r5, r2, #4, #2
    5a34:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    5a36:	681d      	ldr	r5, [r3, #0]
    5a38:	f362 5514 	bfi	r5, r2, #20, #1
    5a3c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    5a3e:	681d      	ldr	r5, [r3, #0]
    5a40:	f362 5555 	bfi	r5, r2, #21, #1
    5a44:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    5a46:	681d      	ldr	r5, [r3, #0]
    5a48:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    5a4c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    5a4e:	681d      	ldr	r5, [r3, #0]
    5a50:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    5a54:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    5a56:	681d      	ldr	r5, [r3, #0]
    5a58:	f362 25cb 	bfi	r5, r2, #11, #1
    5a5c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5a5e:	681d      	ldr	r5, [r3, #0]
    5a60:	f362 250a 	bfi	r5, r2, #8, #3
    5a64:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    5a66:	681d      	ldr	r5, [r3, #0]
    5a68:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5a6c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    5a6e:	681d      	ldr	r5, [r3, #0]
    5a70:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    5a74:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    5a76:	681d      	ldr	r5, [r3, #0]
    5a78:	f362 0583 	bfi	r5, r2, #2, #2
    5a7c:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    5a7e:	88dd      	ldrh	r5, [r3, #6]
    5a80:	2605      	movs	r6, #5
    5a82:	f366 0502 	bfi	r5, r6, #0, #3
    5a86:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    5a88:	88dd      	ldrh	r5, [r3, #6]
    5a8a:	f045 0520 	orr.w	r5, r5, #32
    5a8e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    5a90:	88dd      	ldrh	r5, [r3, #6]
    5a92:	f362 350c 	bfi	r5, r2, #12, #1
    5a96:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5a98:	88dd      	ldrh	r5, [r3, #6]
    5a9a:	f362 354d 	bfi	r5, r2, #13, #1
    5a9e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5aa0:	88dd      	ldrh	r5, [r3, #6]
    5aa2:	f362 2508 	bfi	r5, r2, #8, #1
    5aa6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5aa8:	88dd      	ldrh	r5, [r3, #6]
    5aaa:	f045 0510 	orr.w	r5, r5, #16
    5aae:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5ab0:	780d      	ldrb	r5, [r1, #0]
    5ab2:	f362 0541 	bfi	r5, r2, #1, #1
    5ab6:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5ab8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5abc:	688e      	ldr	r6, [r1, #8]
    5abe:	78d5      	ldrb	r5, [r2, #3]
    5ac0:	2201      	movs	r2, #1
    5ac2:	40aa      	lsls	r2, r5
    5ac4:	4316      	orrs	r6, r2
    5ac6:	608e      	str	r6, [r1, #8]
    5ac8:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5aca:	698e      	ldr	r6, [r1, #24]
    5acc:	00bf      	lsls	r7, r7, #2
    5ace:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    5ad2:	4316      	orrs	r6, r2
    5ad4:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5ad8:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5ada:	f005 0607 	and.w	r6, r5, #7
    5ade:	f8de c01c 	ldr.w	ip, [lr, #28]
    5ae2:	00b7      	lsls	r7, r6, #2
    5ae4:	2604      	movs	r6, #4
    5ae6:	40be      	lsls	r6, r7
    5ae8:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5aec:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5af0:	68ce      	ldr	r6, [r1, #12]
    5af2:	b292      	uxth	r2, r2
    5af4:	f362 060f 	bfi	r6, r2, #0, #16
    5af8:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    5afa:	780a      	ldrb	r2, [r1, #0]
    5afc:	f042 0202 	orr.w	r2, r2, #2
    5b00:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    5b02:	684a      	ldr	r2, [r1, #4]
    5b04:	f012 0202 	ands.w	r2, r2, #2
    5b08:	d1fb      	bne.n	5b02 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    5b0a:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    5b0e:	492d      	ldr	r1, [pc, #180]	; (5bc4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5b10:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    5b14:	463e      	mov	r6, r7
    5b16:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    5b1a:	f362 1c86 	bfi	ip, r2, #6, #1
    5b1e:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    5b22:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5b26:	0657      	lsls	r7, r2, #25
    5b28:	d4fb      	bmi.n	5b22 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    5b2a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5b2e:	4f25      	ldr	r7, [pc, #148]	; (5bc4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5b30:	f04f 0c06 	mov.w	ip, #6
    5b34:	f36c 0203 	bfi	r2, ip, #0, #4
    5b38:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5b3c:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5b44:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5b48:	687a      	ldr	r2, [r7, #4]
    5b4a:	f012 0f18 	tst.w	r2, #24
    5b4e:	d1fb      	bne.n	5b48 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5b50:	4a1d      	ldr	r2, [pc, #116]	; (5bc8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5b52:	4e1e      	ldr	r6, [pc, #120]	; (5bcc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5b54:	3074      	adds	r0, #116	; 0x74
    5b56:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5b5a:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5b5e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5b62:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    5b66:	7991      	ldrb	r1, [r2, #6]
    5b68:	f041 0102 	orr.w	r1, r1, #2
    5b6c:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5b6e:	79d1      	ldrb	r1, [r2, #7]
    5b70:	07c8      	lsls	r0, r1, #31
    5b72:	d4fc      	bmi.n	5b6e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    5b74:	3512      	adds	r5, #18
    5b76:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5b7a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5b7e:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    5b82:	79d1      	ldrb	r1, [r2, #7]
    5b84:	0789      	lsls	r1, r1, #30
    5b86:	d4fc      	bmi.n	5b82 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5b88:	681a      	ldr	r2, [r3, #0]
    5b8a:	f042 0202 	orr.w	r2, r2, #2
    5b8e:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5b90:	691a      	ldr	r2, [r3, #16]
    5b92:	f012 0202 	ands.w	r2, r2, #2
    5b96:	d1fb      	bne.n	5b90 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5b98:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5b9a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5b9e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    5ba2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    5ba6:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    5baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5bac:	2109      	movs	r1, #9
    5bae:	4620      	mov	r0, r4
    5bb0:	4798      	blx	r3
    5bb2:	e708      	b.n	59c6 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    5bb4:	41008000 	.word	0x41008000
    5bb8:	000049bd 	.word	0x000049bd
    5bbc:	00022c94 	.word	0x00022c94
    5bc0:	40002800 	.word	0x40002800
    5bc4:	40001c00 	.word	0x40001c00
    5bc8:	4100e000 	.word	0x4100e000
    5bcc:	4100e020 	.word	0x4100e020

00005bd0 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5bd0:	f04f 30ff 	mov.w	r0, #4294967295
    5bd4:	4770      	bx	lr
    5bd6:	bf00      	nop

00005bd8 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    5bd8:	f1a1 0002 	sub.w	r0, r1, #2
    5bdc:	fab0 f080 	clz	r0, r0
    5be0:	0940      	lsrs	r0, r0, #5
    5be2:	4770      	bx	lr

00005be4 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    5be4:	2002      	movs	r0, #2
    5be6:	4770      	bx	lr

00005be8 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    5be8:	f1a1 0001 	sub.w	r0, r1, #1
    5bec:	fab0 f080 	clz	r0, r0
    5bf0:	0940      	lsrs	r0, r0, #5
    5bf2:	4770      	bx	lr

00005bf4 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    5bf4:	f1a1 0008 	sub.w	r0, r1, #8
    5bf8:	fab0 f080 	clz	r0, r0
    5bfc:	0940      	lsrs	r0, r0, #5
    5bfe:	4770      	bx	lr

00005c00 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    5c00:	7a80      	ldrb	r0, [r0, #10]
    5c02:	4770      	bx	lr

00005c04 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    5c04:	f1a0 0004 	sub.w	r0, r0, #4
    5c08:	e7fa      	b.n	5c00 <_ZN9ClearCore9SerialUsb4ModeEv>
    5c0a:	bf00      	nop

00005c0c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    5c0c:	7a80      	ldrb	r0, [r0, #10]
    }
    5c0e:	1a40      	subs	r0, r0, r1
    5c10:	fab0 f080 	clz	r0, r0
    5c14:	0940      	lsrs	r0, r0, #5
    5c16:	4770      	bx	lr

00005c18 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    5c18:	f1a0 0004 	sub.w	r0, r0, #4
    5c1c:	e7f6      	b.n	5c0c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    5c1e:	bf00      	nop

00005c20 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    5c20:	2008      	movs	r0, #8
    5c22:	4770      	bx	lr

00005c24 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    5c24:	f1a0 0004 	sub.w	r0, r0, #4
    5c28:	e7fa      	b.n	5c20 <_ZN9ClearCore9SerialUsb4TypeEv>
    5c2a:	bf00      	nop

00005c2c <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    5c2c:	2000      	movs	r0, #0
    5c2e:	4770      	bx	lr

00005c30 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    5c30:	f1a0 0004 	sub.w	r0, r0, #4
    5c34:	e7fa      	b.n	5c2c <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    5c36:	bf00      	nop

00005c38 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    5c38:	2311      	movs	r3, #17
        m_index = clearCorePin;
    5c3a:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    5c3c:	7283      	strb	r3, [r0, #10]
    5c3e:	4770      	bx	lr

00005c40 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    5c40:	f1a0 0004 	sub.w	r0, r0, #4
    5c44:	e7f8      	b.n	5c38 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    5c46:	bf00      	nop

00005c48 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    5c48:	4770      	bx	lr
    5c4a:	bf00      	nop

00005c4c <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    5c4c:	f1a0 0004 	sub.w	r0, r0, #4
    5c50:	e7fa      	b.n	5c48 <_ZN9ClearCore9SerialUsb7RefreshEv>
    5c52:	bf00      	nop

00005c54 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    5c54:	4b01      	ldr	r3, [pc, #4]	; (5c5c <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    5c56:	6818      	ldr	r0, [r3, #0]
    5c58:	f000 be5e 	b.w	6918 <_ZN9ClearCore10UsbManager10FlushInputEv>
    5c5c:	20000ad0 	.word	0x20000ad0

00005c60 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    5c60:	4b01      	ldr	r3, [pc, #4]	; (5c68 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    5c62:	6818      	ldr	r0, [r3, #0]
    5c64:	f000 be66 	b.w	6934 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    5c68:	20000ad0 	.word	0x20000ad0

00005c6c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    5c6c:	4b01      	ldr	r3, [pc, #4]	; (5c74 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    5c6e:	6818      	ldr	r0, [r3, #0]
    5c70:	f000 be7a 	b.w	6968 <_ZN9ClearCore10UsbManagercvbEv>
    5c74:	20000ad0 	.word	0x20000ad0

00005c78 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    5c78:	4b01      	ldr	r3, [pc, #4]	; (5c80 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    5c7a:	6818      	ldr	r0, [r3, #0]
    5c7c:	f000 be30 	b.w	68e0 <_ZN9ClearCore10UsbManager8PortOpenEv>
    5c80:	20000ad0 	.word	0x20000ad0

00005c84 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    5c84:	4b01      	ldr	r3, [pc, #4]	; (5c8c <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    5c86:	6818      	ldr	r0, [r3, #0]
    5c88:	f001 ba04 	b.w	7094 <_ZN9ClearCore10UsbManager9PortCloseEv>
    5c8c:	20000ad0 	.word	0x20000ad0

00005c90 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    5c90:	4b01      	ldr	r3, [pc, #4]	; (5c98 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    5c92:	6818      	ldr	r0, [r3, #0]
    5c94:	f000 be1c 	b.w	68d0 <_ZN9ClearCore10UsbManager5SpeedEm>
    5c98:	20000ad0 	.word	0x20000ad0

00005c9c <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    5c9c:	4b01      	ldr	r3, [pc, #4]	; (5ca4 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    5c9e:	6818      	ldr	r0, [r3, #0]
    5ca0:	f000 be18 	b.w	68d4 <_ZN9ClearCore10UsbManager5SpeedEv>
    5ca4:	20000ad0 	.word	0x20000ad0

00005ca8 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    5ca8:	4b01      	ldr	r3, [pc, #4]	; (5cb0 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    5caa:	6818      	ldr	r0, [r3, #0]
    5cac:	f000 be7a 	b.w	69a4 <_ZN9ClearCore10UsbManager7CharGetEv>
    5cb0:	20000ad0 	.word	0x20000ad0

00005cb4 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    5cb4:	4b01      	ldr	r3, [pc, #4]	; (5cbc <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    5cb6:	6818      	ldr	r0, [r3, #0]
    5cb8:	f000 bfa0 	b.w	6bfc <_ZN9ClearCore10UsbManager8CharPeekEv>
    5cbc:	20000ad0 	.word	0x20000ad0

00005cc0 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    5cc0:	4b01      	ldr	r3, [pc, #4]	; (5cc8 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    5cc2:	6818      	ldr	r0, [r3, #0]
    5cc4:	f000 bfa6 	b.w	6c14 <_ZN9ClearCore10UsbManager8SendCharEh>
    5cc8:	20000ad0 	.word	0x20000ad0

00005ccc <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    5ccc:	4b01      	ldr	r3, [pc, #4]	; (5cd4 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    5cce:	6818      	ldr	r0, [r3, #0]
    5cd0:	f000 bfd4 	b.w	6c7c <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    5cd4:	20000ad0 	.word	0x20000ad0

00005cd8 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    5cd8:	4b01      	ldr	r3, [pc, #4]	; (5ce0 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    5cda:	6818      	ldr	r0, [r3, #0]
    5cdc:	f000 bfd6 	b.w	6c8c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    5ce0:	20000ad0 	.word	0x20000ad0

00005ce4 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    5ce4:	6803      	ldr	r3, [r0, #0]
    5ce6:	4a04      	ldr	r2, [pc, #16]	; (5cf8 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    5ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5cea:	4293      	cmp	r3, r2
    5cec:	d103      	bne.n	5cf6 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    5cee:	4b03      	ldr	r3, [pc, #12]	; (5cfc <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    5cf0:	6818      	ldr	r0, [r3, #0]
    5cf2:	f000 be39 	b.w	6968 <_ZN9ClearCore10UsbManagercvbEv>
    5cf6:	4718      	bx	r3
    5cf8:	00005c6d 	.word	0x00005c6d
    5cfc:	20000ad0 	.word	0x20000ad0

00005d00 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    5d00:	f1a0 0004 	sub.w	r0, r0, #4
    5d04:	e7ee      	b.n	5ce4 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    5d06:	bf00      	nop

00005d08 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5d08:	b508      	push	{r3, lr}
        return PortIsOpen();
    5d0a:	6803      	ldr	r3, [r0, #0]
    5d0c:	4a06      	ldr	r2, [pc, #24]	; (5d28 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    5d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5d10:	4293      	cmp	r3, r2
    5d12:	d105      	bne.n	5d20 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    5d14:	4b05      	ldr	r3, [pc, #20]	; (5d2c <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    5d16:	6818      	ldr	r0, [r3, #0]
    5d18:	f000 fe26 	bl	6968 <_ZN9ClearCore10UsbManagercvbEv>
    }
    5d1c:	b200      	sxth	r0, r0
    5d1e:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    5d20:	4798      	blx	r3
    }
    5d22:	b200      	sxth	r0, r0
    5d24:	bd08      	pop	{r3, pc}
    5d26:	bf00      	nop
    5d28:	00005c6d 	.word	0x00005c6d
    5d2c:	20000ad0 	.word	0x20000ad0

00005d30 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5d30:	f1a0 0004 	sub.w	r0, r0, #4
    5d34:	e7e8      	b.n	5d08 <_ZN9ClearCore9SerialUsb5StateEv>
    5d36:	bf00      	nop

00005d38 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5d38:	b508      	push	{r3, lr}
            PortOpen();
    5d3a:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    5d3c:	b961      	cbnz	r1, 5d58 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    5d3e:	4a0b      	ldr	r2, [pc, #44]	; (5d6c <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    5d40:	68db      	ldr	r3, [r3, #12]
    5d42:	4293      	cmp	r3, r2
    5d44:	d105      	bne.n	5d52 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    5d46:	4b0a      	ldr	r3, [pc, #40]	; (5d70 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5d48:	6818      	ldr	r0, [r3, #0]
    5d4a:	f001 f9a3 	bl	7094 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    5d4e:	2001      	movs	r0, #1
    5d50:	bd08      	pop	{r3, pc}
            PortClose();
    5d52:	4798      	blx	r3
    }
    5d54:	2001      	movs	r0, #1
    5d56:	bd08      	pop	{r3, pc}
    5d58:	4a06      	ldr	r2, [pc, #24]	; (5d74 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    5d5a:	689b      	ldr	r3, [r3, #8]
    5d5c:	4293      	cmp	r3, r2
    5d5e:	d1f8      	bne.n	5d52 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    5d60:	4b03      	ldr	r3, [pc, #12]	; (5d70 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5d62:	6818      	ldr	r0, [r3, #0]
    5d64:	f000 fdbc 	bl	68e0 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    5d68:	2001      	movs	r0, #1
    5d6a:	bd08      	pop	{r3, pc}
    5d6c:	00005c85 	.word	0x00005c85
    5d70:	20000ad0 	.word	0x20000ad0
    5d74:	00005c79 	.word	0x00005c79

00005d78 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5d78:	f1a0 0004 	sub.w	r0, r0, #4
    5d7c:	e7dc      	b.n	5d38 <_ZN9ClearCore9SerialUsb5StateEs>
    5d7e:	bf00      	nop

00005d80 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5d80:	b530      	push	{r4, r5, lr}
    5d82:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    5d84:	4d1a      	ldr	r5, [pc, #104]	; (5df0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5d86:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    5d8a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    5d8e:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    5d90:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    5d94:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    5d98:	d112      	bne.n	5dc0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    5d9a:	4621      	mov	r1, r4
    5d9c:	4620      	mov	r0, r4
    5d9e:	f006 f8dd 	bl	bf5c <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    5da2:	4621      	mov	r1, r4
    5da4:	2001      	movs	r0, #1
    5da6:	f006 f8d9 	bl	bf5c <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    5daa:	f006 f8cb 	bl	bf44 <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    5dae:	f006 f903 	bl	bfb8 <cdcdf_acm_get_line_coding>
    5db2:	6803      	ldr	r3, [r0, #0]
    5db4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5db8:	d012      	beq.n	5de0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    5dba:	2000      	movs	r0, #0
    5dbc:	b003      	add	sp, #12
    5dbe:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    5dc0:	490c      	ldr	r1, [pc, #48]	; (5df4 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    5dc2:	2000      	movs	r0, #0
    5dc4:	f006 f8ca 	bl	bf5c <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    5dc8:	490b      	ldr	r1, [pc, #44]	; (5df8 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    5dca:	2001      	movs	r0, #1
    5dcc:	f006 f8c6 	bl	bf5c <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    5dd0:	6828      	ldr	r0, [r5, #0]
    5dd2:	2140      	movs	r1, #64	; 0x40
    5dd4:	3080      	adds	r0, #128	; 0x80
    5dd6:	f006 f88d 	bl	bef4 <cdcdf_acm_read>
}
    5dda:	2000      	movs	r0, #0
    5ddc:	b003      	add	sp, #12
    5dde:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    5de0:	2101      	movs	r1, #1
    5de2:	4806      	ldr	r0, [pc, #24]	; (5dfc <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    5de4:	f003 fa36 	bl	9254 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    5de8:	2000      	movs	r0, #0
    5dea:	b003      	add	sp, #12
    5dec:	bd30      	pop	{r4, r5, pc}
    5dee:	bf00      	nop
    5df0:	20000ad0 	.word	0x20000ad0
    5df4:	00005e01 	.word	0x00005e01
    5df8:	00006039 	.word	0x00006039
    5dfc:	200019cc 	.word	0x200019cc

00005e00 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    5e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e04:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    5e06:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    5e08:	498a      	ldr	r1, [pc, #552]	; (6034 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    5e0a:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5e0c:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    5e10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5e14:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    5e18:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    5e1a:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5e1c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    5e1e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    5e22:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    5e26:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    5e2a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    5e2c:	bf48      	it	mi
    5e2e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    5e30:	2c00      	cmp	r4, #0
    5e32:	f000 80d6 	beq.w	5fe2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    5e36:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    5e3a:	f000 80d2 	beq.w	5fe2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    5e3e:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    5e42:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5e46:	42a3      	cmp	r3, r4
    5e48:	bf28      	it	cs
    5e4a:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    5e4c:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    5e50:	4299      	cmp	r1, r3
    5e52:	bf28      	it	cs
    5e54:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    5e56:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5e58:	2900      	cmp	r1, #0
    5e5a:	f000 80e8 	beq.w	602e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    5e5e:	1d2c      	adds	r4, r5, #4
    5e60:	4404      	add	r4, r0
    5e62:	1d17      	adds	r7, r2, #4
    5e64:	42be      	cmp	r6, r7
    5e66:	bf38      	it	cc
    5e68:	42a2      	cmpcc	r2, r4
    5e6a:	f0c0 80ce 	bcc.w	600a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5e6e:	290b      	cmp	r1, #11
    5e70:	f240 80cb 	bls.w	600a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5e74:	4254      	negs	r4, r2
    5e76:	f014 0403 	ands.w	r4, r4, #3
    5e7a:	f000 80b7 	beq.w	5fec <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    5e7e:	7817      	ldrb	r7, [r2, #0]
    5e80:	5547      	strb	r7, [r0, r5]
    5e82:	2c01      	cmp	r4, #1
    5e84:	f106 0c01 	add.w	ip, r6, #1
    5e88:	f102 0801 	add.w	r8, r2, #1
    5e8c:	f000 80b0 	beq.w	5ff0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5e90:	7857      	ldrb	r7, [r2, #1]
    5e92:	7077      	strb	r7, [r6, #1]
    5e94:	2c02      	cmp	r4, #2
    5e96:	f106 0c02 	add.w	ip, r6, #2
    5e9a:	f102 0802 	add.w	r8, r2, #2
    5e9e:	f000 80a7 	beq.w	5ff0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5ea2:	7897      	ldrb	r7, [r2, #2]
    5ea4:	70b7      	strb	r7, [r6, #2]
    5ea6:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5eaa:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5eac:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5eb0:	9601      	str	r6, [sp, #4]
    5eb2:	eba1 0b04 	sub.w	fp, r1, r4
    5eb6:	f1ab 0604 	sub.w	r6, fp, #4
    5eba:	08b6      	lsrs	r6, r6, #2
    5ebc:	192f      	adds	r7, r5, r4
    5ebe:	3601      	adds	r6, #1
    5ec0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    5ec4:	4407      	add	r7, r0
    5ec6:	4414      	add	r4, r2
    5ec8:	f04f 0e00 	mov.w	lr, #0
    5ecc:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    5ed0:	f854 ab04 	ldr.w	sl, [r4], #4
    5ed4:	f847 ab04 	str.w	sl, [r7], #4
    5ed8:	4576      	cmp	r6, lr
    5eda:	d8f7      	bhi.n	5ecc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    5edc:	9c01      	ldr	r4, [sp, #4]
    5ede:	45cb      	cmp	fp, r9
    5ee0:	444c      	add	r4, r9
    5ee2:	eb0c 0709 	add.w	r7, ip, r9
    5ee6:	eb08 0e09 	add.w	lr, r8, r9
    5eea:	f000 8089 	beq.w	6000 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5eee:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    5ef2:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5ef6:	1c66      	adds	r6, r4, #1
    5ef8:	42b1      	cmp	r1, r6
    5efa:	f240 8081 	bls.w	6000 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5efe:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5f00:	f89e 6001 	ldrb.w	r6, [lr, #1]
    5f04:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f06:	42a1      	cmp	r1, r4
    5f08:	d97a      	bls.n	6000 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    5f0a:	f89e 4002 	ldrb.w	r4, [lr, #2]
    5f0e:	70bc      	strb	r4, [r7, #2]
    5f10:	1856      	adds	r6, r2, r1
    5f12:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5f16:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    5f1a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    5f1c:	1a64      	subs	r4, r4, r1
        if (count) {
    5f1e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    5f20:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    5f24:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    5f28:	d064      	beq.n	5ff4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    5f2a:	1d31      	adds	r1, r6, #4
    5f2c:	1d02      	adds	r2, r0, #4
    5f2e:	4296      	cmp	r6, r2
    5f30:	bf38      	it	cc
    5f32:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    5f34:	4604      	mov	r4, r0
    5f36:	d371      	bcc.n	601c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5f38:	2b0b      	cmp	r3, #11
    5f3a:	d96f      	bls.n	601c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5f3c:	4272      	negs	r2, r6
    5f3e:	f012 0203 	ands.w	r2, r2, #3
    5f42:	d05f      	beq.n	6004 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    5f44:	7831      	ldrb	r1, [r6, #0]
    5f46:	7001      	strb	r1, [r0, #0]
    5f48:	2a01      	cmp	r2, #1
    5f4a:	f100 0401 	add.w	r4, r0, #1
    5f4e:	f106 0e01 	add.w	lr, r6, #1
    5f52:	d058      	beq.n	6006 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5f54:	7871      	ldrb	r1, [r6, #1]
    5f56:	7041      	strb	r1, [r0, #1]
    5f58:	2a02      	cmp	r2, #2
    5f5a:	f100 0402 	add.w	r4, r0, #2
    5f5e:	f106 0e02 	add.w	lr, r6, #2
    5f62:	d050      	beq.n	6006 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5f64:	78b1      	ldrb	r1, [r6, #2]
    5f66:	7081      	strb	r1, [r0, #2]
    5f68:	1cc4      	adds	r4, r0, #3
    5f6a:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    5f6e:	2703      	movs	r7, #3
    5f70:	eba3 0c02 	sub.w	ip, r3, r2
    5f74:	f1ac 0104 	sub.w	r1, ip, #4
    5f78:	0889      	lsrs	r1, r1, #2
    5f7a:	1c4d      	adds	r5, r1, #1
    5f7c:	4416      	add	r6, r2
    5f7e:	ea4f 0885 	mov.w	r8, r5, lsl #2
    5f82:	4402      	add	r2, r0
    5f84:	2100      	movs	r1, #0
    5f86:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    5f88:	f856 9b04 	ldr.w	r9, [r6], #4
    5f8c:	f842 9b04 	str.w	r9, [r2], #4
    5f90:	428d      	cmp	r5, r1
    5f92:	d8f8      	bhi.n	5f86 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    5f94:	45c4      	cmp	ip, r8
    5f96:	eb07 0208 	add.w	r2, r7, r8
    5f9a:	eb04 0108 	add.w	r1, r4, r8
    5f9e:	eb0e 0608 	add.w	r6, lr, r8
    5fa2:	d00d      	beq.n	5fc0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    5fa4:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    5fa8:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    5fac:	1c54      	adds	r4, r2, #1
    5fae:	42a3      	cmp	r3, r4
    5fb0:	d906      	bls.n	5fc0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    5fb2:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    5fb4:	7874      	ldrb	r4, [r6, #1]
    5fb6:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    5fb8:	4293      	cmp	r3, r2
    5fba:	d901      	bls.n	5fc0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    5fbc:	78b2      	ldrb	r2, [r6, #2]
    5fbe:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    5fc0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5fc4:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    5fc8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    5fcc:	441a      	add	r2, r3
            m_readBufAvail -= count;
    5fce:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    5fd0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5fd4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    5fd8:	b91c      	cbnz	r4, 5fe2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    5fda:	3080      	adds	r0, #128	; 0x80
    5fdc:	2140      	movs	r1, #64	; 0x40
    5fde:	f005 ff89 	bl	bef4 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    5fe2:	b662      	cpsie	i
}
    5fe4:	2001      	movs	r0, #1
    5fe6:	b003      	add	sp, #12
    5fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    5fec:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    5fee:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5ff0:	9401      	str	r4, [sp, #4]
    5ff2:	e75e      	b.n	5eb2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    5ff4:	4429      	add	r1, r5
    5ff6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    5ffa:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    5ffe:	e7eb      	b.n	5fd8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    6000:	1856      	adds	r6, r2, r1
    6002:	e786      	b.n	5f12 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    6004:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    6006:	4617      	mov	r7, r2
    6008:	e7b2      	b.n	5f70 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    600a:	1e74      	subs	r4, r6, #1
    600c:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    600e:	f812 7b01 	ldrb.w	r7, [r2], #1
    6012:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6016:	42b2      	cmp	r2, r6
    6018:	d1f9      	bne.n	600e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    601a:	e77a      	b.n	5f12 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    601c:	1e42      	subs	r2, r0, #1
    601e:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    6020:	f816 1b01 	ldrb.w	r1, [r6], #1
    6024:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6028:	42b4      	cmp	r4, r6
    602a:	d1f9      	bne.n	6020 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    602c:	e7c8      	b.n	5fc0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    602e:	4616      	mov	r6, r2
    6030:	e773      	b.n	5f1a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    6032:	bf00      	nop
    6034:	20000ad0 	.word	0x20000ad0

00006038 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    6038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    603c:	48d8      	ldr	r0, [pc, #864]	; (63a0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    603e:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    6040:	2900      	cmp	r1, #0
    6042:	f040 81ab 	bne.w	639c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    6046:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    6048:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    604c:	441a      	add	r2, r3
    604e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    6052:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    6056:	2300      	movs	r3, #0
    6058:	f3bf 8f5b 	dmb	ish
    605c:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    6060:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    6064:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6066:	f3bf 8f5b 	dmb	ish
    606a:	f04f 0101 	mov.w	r1, #1
    606e:	f504 7388 	add.w	r3, r4, #272	; 0x110
    6072:	e8d3 2f4f 	ldrexb	r2, [r3]
    6076:	e8c3 1f40 	strexb	r0, r1, [r3]
    607a:	2800      	cmp	r0, #0
    607c:	d1f9      	bne.n	6072 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    607e:	f3bf 8f5b 	dmb	ish
    6082:	f012 0fff 	tst.w	r2, #255	; 0xff
    6086:	f040 80dc 	bne.w	6242 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    608a:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    608e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    6092:	428e      	cmp	r6, r1
    6094:	f000 8191 	beq.w	63ba <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6098:	f104 0240 	add.w	r2, r4, #64	; 0x40
    609c:	eb02 0706 	add.w	r7, r2, r6
    60a0:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    60a4:	f0c0 80d1 	bcc.w	624a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    60a8:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    60ac:	4419      	add	r1, r3
    60ae:	2940      	cmp	r1, #64	; 0x40
    60b0:	bf28      	it	cs
    60b2:	2140      	movcs	r1, #64	; 0x40
    60b4:	428b      	cmp	r3, r1
    60b6:	bf28      	it	cs
    60b8:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    60ba:	2b00      	cmp	r3, #0
    60bc:	f000 81a1 	beq.w	6402 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    60c0:	f106 0540 	add.w	r5, r6, #64	; 0x40
    60c4:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    60c8:	1960      	adds	r0, r4, r5
    60ca:	44a4      	add	ip, r4
    60cc:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    60d0:	4540      	cmp	r0, r8
    60d2:	bf38      	it	cc
    60d4:	45e6      	cmpcc	lr, ip
    60d6:	f0c0 818a 	bcc.w	63ee <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    60da:	2b0b      	cmp	r3, #11
    60dc:	f240 8187 	bls.w	63ee <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    60e0:	4240      	negs	r0, r0
    60e2:	f010 0003 	ands.w	r0, r0, #3
    60e6:	f000 8161 	beq.w	63ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    60ea:	5d96      	ldrb	r6, [r2, r6]
    60ec:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    60f0:	2801      	cmp	r0, #1
    60f2:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    60f6:	f107 0801 	add.w	r8, r7, #1
    60fa:	f000 8159 	beq.w	63b0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    60fe:	787e      	ldrb	r6, [r7, #1]
    6100:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    6104:	2802      	cmp	r0, #2
    6106:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    610a:	f107 0802 	add.w	r8, r7, #2
    610e:	f000 814f 	beq.w	63b0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6112:	78be      	ldrb	r6, [r7, #2]
    6114:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6118:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    611a:	f107 0803 	add.w	r8, r7, #3
    611e:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6122:	9601      	str	r6, [sp, #4]
    6124:	eba3 0b00 	sub.w	fp, r3, r0
    6128:	f1ab 0604 	sub.w	r6, fp, #4
    612c:	08b6      	lsrs	r6, r6, #2
    612e:	4405      	add	r5, r0
    6130:	3601      	adds	r6, #1
    6132:	30c0      	adds	r0, #192	; 0xc0
    6134:	4425      	add	r5, r4
    6136:	4420      	add	r0, r4
    6138:	ea4f 0986 	mov.w	r9, r6, lsl #2
    613c:	2700      	movs	r7, #0
    613e:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6140:	f855 ab04 	ldr.w	sl, [r5], #4
    6144:	f840 ab04 	str.w	sl, [r0], #4
    6148:	42b7      	cmp	r7, r6
    614a:	d3f8      	bcc.n	613e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    614c:	9801      	ldr	r0, [sp, #4]
    614e:	45cb      	cmp	fp, r9
    6150:	4448      	add	r0, r9
    6152:	eb0c 0509 	add.w	r5, ip, r9
    6156:	eb08 0709 	add.w	r7, r8, r9
    615a:	d00d      	beq.n	6178 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    615c:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    6160:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6164:	1c46      	adds	r6, r0, #1
    6166:	42b3      	cmp	r3, r6
    6168:	d906      	bls.n	6178 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    616a:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    616c:	787e      	ldrb	r6, [r7, #1]
    616e:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6170:	4283      	cmp	r3, r0
    6172:	d901      	bls.n	6178 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    6174:	78b8      	ldrb	r0, [r7, #2]
    6176:	70a8      	strb	r0, [r5, #2]
    6178:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    617c:	1acb      	subs	r3, r1, r3
    617e:	f000 80fc 	beq.w	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6182:	f104 0544 	add.w	r5, r4, #68	; 0x44
    6186:	1d06      	adds	r6, r0, #4
    6188:	42b2      	cmp	r2, r6
    618a:	bf38      	it	cc
    618c:	42a8      	cmpcc	r0, r5
    618e:	f0c0 8125 	bcc.w	63dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6192:	2b0b      	cmp	r3, #11
    6194:	f240 8122 	bls.w	63dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6198:	4255      	negs	r5, r2
    619a:	f015 0503 	ands.w	r5, r5, #3
    619e:	f000 8109 	beq.w	63b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    61a2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    61a6:	7002      	strb	r2, [r0, #0]
    61a8:	2d01      	cmp	r5, #1
    61aa:	f100 0801 	add.w	r8, r0, #1
    61ae:	f104 0241 	add.w	r2, r4, #65	; 0x41
    61b2:	f000 8100 	beq.w	63b6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    61b6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    61ba:	7042      	strb	r2, [r0, #1]
    61bc:	2d02      	cmp	r5, #2
    61be:	f100 0802 	add.w	r8, r0, #2
    61c2:	f104 0242 	add.w	r2, r4, #66	; 0x42
    61c6:	f000 80f6 	beq.w	63b6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    61ca:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    61ce:	7082      	strb	r2, [r0, #2]
    61d0:	f100 0803 	add.w	r8, r0, #3
    61d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    61d8:	2703      	movs	r7, #3
    61da:	eba3 0905 	sub.w	r9, r3, r5
    61de:	f1a9 0604 	sub.w	r6, r9, #4
    61e2:	08b6      	lsrs	r6, r6, #2
    61e4:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    61e8:	3601      	adds	r6, #1
    61ea:	4428      	add	r0, r5
    61ec:	44a4      	add	ip, r4
    61ee:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    61f2:	f04f 0a00 	mov.w	sl, #0
    61f6:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    61fa:	f85c 5b04 	ldr.w	r5, [ip], #4
    61fe:	f840 5b04 	str.w	r5, [r0], #4
    6202:	4556      	cmp	r6, sl
    6204:	d8f7      	bhi.n	61f6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    6206:	45d9      	cmp	r9, fp
    6208:	445f      	add	r7, fp
    620a:	eb08 000b 	add.w	r0, r8, fp
    620e:	eb02 050b 	add.w	r5, r2, fp
    6212:	f000 80b2 	beq.w	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6216:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    621a:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    621e:	1c7a      	adds	r2, r7, #1
    6220:	4293      	cmp	r3, r2
    6222:	f240 80aa 	bls.w	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6226:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    6228:	786a      	ldrb	r2, [r5, #1]
    622a:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    622c:	42bb      	cmp	r3, r7
    622e:	f240 80a4 	bls.w	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    6232:	78ab      	ldrb	r3, [r5, #2]
    6234:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6236:	4670      	mov	r0, lr
    6238:	f005 fe70 	bl	bf1c <cdcdf_acm_write>
    623c:	2800      	cmp	r0, #0
    623e:	f040 80a2 	bne.w	6386 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    6242:	2001      	movs	r0, #1
    6244:	b003      	add	sp, #12
    6246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    624a:	1b89      	subs	r1, r1, r6
    624c:	f106 0340 	add.w	r3, r6, #64	; 0x40
    6250:	f106 0044 	add.w	r0, r6, #68	; 0x44
    6254:	2940      	cmp	r1, #64	; 0x40
    6256:	eb04 0803 	add.w	r8, r4, r3
    625a:	4420      	add	r0, r4
    625c:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    6260:	bf28      	it	cs
    6262:	2140      	movcs	r1, #64	; 0x40
    6264:	45a8      	cmp	r8, r5
    6266:	bf38      	it	cc
    6268:	4586      	cmpcc	lr, r0
    626a:	f0c0 80ad 	bcc.w	63c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    626e:	290b      	cmp	r1, #11
    6270:	f240 80aa 	bls.w	63c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    6274:	f1c8 0800 	rsb	r8, r8, #0
    6278:	f018 0803 	ands.w	r8, r8, #3
    627c:	f000 8092 	beq.w	63a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    6280:	5d92      	ldrb	r2, [r2, r6]
    6282:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    6286:	f1b8 0f01 	cmp.w	r8, #1
    628a:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    628e:	f107 0601 	add.w	r6, r7, #1
    6292:	f000 8089 	beq.w	63a8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6296:	787a      	ldrb	r2, [r7, #1]
    6298:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    629c:	f1b8 0f02 	cmp.w	r8, #2
    62a0:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    62a4:	f107 0602 	add.w	r6, r7, #2
    62a8:	d07e      	beq.n	63a8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    62aa:	78ba      	ldrb	r2, [r7, #2]
    62ac:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    62b0:	1cfe      	adds	r6, r7, #3
    62b2:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    62b6:	f04f 0903 	mov.w	r9, #3
    62ba:	4443      	add	r3, r8
    62bc:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    62c0:	58e2      	ldr	r2, [r4, r3]
    62c2:	5022      	str	r2, [r4, r0]
    62c4:	eba1 0808 	sub.w	r8, r1, r8
    62c8:	f1a8 0204 	sub.w	r2, r8, #4
    62cc:	4423      	add	r3, r4
    62ce:	0892      	lsrs	r2, r2, #2
    62d0:	3201      	adds	r2, #1
    62d2:	4420      	add	r0, r4
    62d4:	685f      	ldr	r7, [r3, #4]
    62d6:	6047      	str	r7, [r0, #4]
    62d8:	2a02      	cmp	r2, #2
    62da:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    62de:	d035      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62e0:	689f      	ldr	r7, [r3, #8]
    62e2:	6087      	str	r7, [r0, #8]
    62e4:	2a03      	cmp	r2, #3
    62e6:	d031      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62e8:	68df      	ldr	r7, [r3, #12]
    62ea:	60c7      	str	r7, [r0, #12]
    62ec:	2a04      	cmp	r2, #4
    62ee:	d02d      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62f0:	691f      	ldr	r7, [r3, #16]
    62f2:	6107      	str	r7, [r0, #16]
    62f4:	2a05      	cmp	r2, #5
    62f6:	d029      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    62f8:	695f      	ldr	r7, [r3, #20]
    62fa:	6147      	str	r7, [r0, #20]
    62fc:	2a06      	cmp	r2, #6
    62fe:	d025      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6300:	699f      	ldr	r7, [r3, #24]
    6302:	6187      	str	r7, [r0, #24]
    6304:	2a07      	cmp	r2, #7
    6306:	d021      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6308:	69df      	ldr	r7, [r3, #28]
    630a:	61c7      	str	r7, [r0, #28]
    630c:	2a08      	cmp	r2, #8
    630e:	d01d      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6310:	6a1f      	ldr	r7, [r3, #32]
    6312:	6207      	str	r7, [r0, #32]
    6314:	2a09      	cmp	r2, #9
    6316:	d019      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6318:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    631a:	6247      	str	r7, [r0, #36]	; 0x24
    631c:	2a0a      	cmp	r2, #10
    631e:	d015      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6320:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6322:	6287      	str	r7, [r0, #40]	; 0x28
    6324:	2a0b      	cmp	r2, #11
    6326:	d011      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6328:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    632a:	62c7      	str	r7, [r0, #44]	; 0x2c
    632c:	2a0c      	cmp	r2, #12
    632e:	d00d      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6330:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    6332:	6307      	str	r7, [r0, #48]	; 0x30
    6334:	2a0d      	cmp	r2, #13
    6336:	d009      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6338:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    633a:	6347      	str	r7, [r0, #52]	; 0x34
    633c:	2a0e      	cmp	r2, #14
    633e:	d005      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6340:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    6342:	6387      	str	r7, [r0, #56]	; 0x38
    6344:	2a0f      	cmp	r2, #15
    6346:	d001      	beq.n	634c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    634a:	63c3      	str	r3, [r0, #60]	; 0x3c
    634c:	45e0      	cmp	r8, ip
    634e:	44e1      	add	r9, ip
    6350:	eb05 030c 	add.w	r3, r5, ip
    6354:	eb06 000c 	add.w	r0, r6, ip
    6358:	d00f      	beq.n	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    635a:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    635e:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6362:	f109 0201 	add.w	r2, r9, #1
    6366:	4291      	cmp	r1, r2
    6368:	d907      	bls.n	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    636a:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    636e:	7842      	ldrb	r2, [r0, #1]
    6370:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6372:	4549      	cmp	r1, r9
    6374:	d901      	bls.n	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    6376:	7882      	ldrb	r2, [r0, #2]
    6378:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    637a:	4670      	mov	r0, lr
    637c:	f005 fdce 	bl	bf1c <cdcdf_acm_write>
    6380:	2800      	cmp	r0, #0
    6382:	f43f af5e 	beq.w	6242 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    6386:	f3bf 8f5b 	dmb	ish
    638a:	2300      	movs	r3, #0
    638c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    6390:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    6392:	f3bf 8f5b 	dmb	ish
}
    6396:	b003      	add	sp, #12
    6398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    639c:	6801      	ldr	r1, [r0, #0]
    639e:	e65a      	b.n	6056 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    63a0:	20000ad0 	.word	0x20000ad0
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    63a4:	463e      	mov	r6, r7
    63a6:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    63a8:	46c1      	mov	r9, r8
    63aa:	e786      	b.n	62ba <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    63ac:	46b8      	mov	r8, r7
    63ae:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    63b0:	9001      	str	r0, [sp, #4]
    63b2:	e6b7      	b.n	6124 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    63b4:	4680      	mov	r8, r0
    63b6:	462f      	mov	r7, r5
    63b8:	e70f      	b.n	61da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    63ba:	f3bf 8f5b 	dmb	ish
    63be:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    63c2:	f3bf 8f5b 	dmb	ish
    63c6:	e73c      	b.n	6242 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    63c8:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    63cc:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    63ce:	f817 2b01 	ldrb.w	r2, [r7], #1
    63d2:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    63d6:	4287      	cmp	r7, r0
    63d8:	d1f9      	bne.n	63ce <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    63da:	e7ce      	b.n	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    63dc:	3801      	subs	r0, #1
    63de:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    63e0:	f812 5b01 	ldrb.w	r5, [r2], #1
    63e4:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    63e8:	429a      	cmp	r2, r3
    63ea:	d1f9      	bne.n	63e0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    63ec:	e7c5      	b.n	637a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    63ee:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    63f2:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    63f4:	f817 5b01 	ldrb.w	r5, [r7], #1
    63f8:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    63fc:	42be      	cmp	r6, r7
    63fe:	d1f9      	bne.n	63f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6400:	e6ba      	b.n	6178 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6402:	4670      	mov	r0, lr
    6404:	e6ba      	b.n	617c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    6406:	bf00      	nop

00006408 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6408:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    640a:	4e16      	ldr	r6, [pc, #88]	; (6464 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    640c:	6834      	ldr	r4, [r6, #0]
    640e:	f014 0401 	ands.w	r4, r4, #1
    6412:	d002      	beq.n	641a <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    6414:	4b14      	ldr	r3, [pc, #80]	; (6468 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6416:	6818      	ldr	r0, [r3, #0]
    6418:	bd70      	pop	{r4, r5, r6, pc}
    641a:	f44f 7090 	mov.w	r0, #288	; 0x120
    641e:	f00c ffe3 	bl	133e8 <_Znwj>
    6422:	4605      	mov	r5, r0
    m_portOpen(false) {
    6424:	f100 0380 	add.w	r3, r0, #128	; 0x80
    6428:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    642c:	490f      	ldr	r1, [pc, #60]	; (646c <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    642e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    6432:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    6436:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    643a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    643e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    6442:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    6446:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    644a:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    644e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    6452:	2003      	movs	r0, #3
    6454:	f005 fd82 	bl	bf5c <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    6458:	4a03      	ldr	r2, [pc, #12]	; (6468 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    645a:	2301      	movs	r3, #1
    645c:	6015      	str	r5, [r2, #0]
    645e:	4628      	mov	r0, r5
    6460:	6033      	str	r3, [r6, #0]
}
    6462:	bd70      	pop	{r4, r5, r6, pc}
    6464:	20000acc 	.word	0x20000acc
    6468:	20000b14 	.word	0x20000b14
    646c:	00005d81 	.word	0x00005d81

00006470 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    6470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6474:	4ac7      	ldr	r2, [pc, #796]	; (6794 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6476:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    647a:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    647e:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6480:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6484:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6488:	0659      	lsls	r1, r3, #25
    648a:	d4fb      	bmi.n	6484 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    648c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6490:	49c0      	ldr	r1, [pc, #768]	; (6794 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6492:	2004      	movs	r0, #4
    6494:	f360 0303 	bfi	r3, r0, #0, #4
    6498:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    649c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    64a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    64a4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    64a8:	684b      	ldr	r3, [r1, #4]
    64aa:	06db      	lsls	r3, r3, #27
    64ac:	d4fc      	bmi.n	64a8 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    64ae:	4bba      	ldr	r3, [pc, #744]	; (6798 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    64b0:	49ba      	ldr	r1, [pc, #744]	; (679c <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    64b2:	691a      	ldr	r2, [r3, #16]
    64b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    64b8:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    64ba:	699a      	ldr	r2, [r3, #24]
    64bc:	f042 0201 	orr.w	r2, r2, #1
    64c0:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    64c2:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    64c6:	2203      	movs	r2, #3
    64c8:	f006 f8f4 	bl	c6b4 <usb_find_str_desc>
    if (!serNumDescPtr) {
    64cc:	4604      	mov	r4, r0
    64ce:	2800      	cmp	r0, #0
    64d0:	f000 819c 	beq.w	680c <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    64d4:	4bb2      	ldr	r3, [pc, #712]	; (67a0 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    64d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    64d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    64dc:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    64de:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64e0:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    64e2:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64e6:	f100 0730 	add.w	r7, r0, #48	; 0x30
    64ea:	3037      	adds	r0, #55	; 0x37
    64ec:	2d09      	cmp	r5, #9
    64ee:	bf88      	it	hi
    64f0:	4607      	movhi	r7, r0
    64f2:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    64f6:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    64fa:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    64fe:	3037      	adds	r0, #55	; 0x37
    6500:	f1b8 0f09 	cmp.w	r8, #9
    6504:	bfc8      	it	gt
    6506:	4684      	movgt	ip, r0
    6508:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    650a:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    650e:	f88d c011 	strb.w	ip, [sp, #17]
    6512:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6516:	3037      	adds	r0, #55	; 0x37
    6518:	2e09      	cmp	r6, #9
    651a:	bfc8      	it	gt
    651c:	4684      	movgt	ip, r0
    651e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6520:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6524:	f88d c012 	strb.w	ip, [sp, #18]
    6528:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    652c:	3037      	adds	r0, #55	; 0x37
    652e:	2d09      	cmp	r5, #9
    6530:	bfc8      	it	gt
    6532:	4684      	movgt	ip, r0
    6534:	fa5f f08e 	uxtb.w	r0, lr
    6538:	f88d 7010 	strb.w	r7, [sp, #16]
    653c:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    6540:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6544:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6548:	3037      	adds	r0, #55	; 0x37
    654a:	f1be 0f09 	cmp.w	lr, #9
    654e:	bfd4      	ite	le
    6550:	46e6      	movle	lr, ip
    6552:	4686      	movgt	lr, r0
    6554:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    6556:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    655a:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    655c:	f88d e014 	strb.w	lr, [sp, #20]
    6560:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    6564:	3030      	adds	r0, #48	; 0x30
    6566:	2f09      	cmp	r7, #9
    6568:	bfcc      	ite	gt
    656a:	4677      	movgt	r7, lr
    656c:	4607      	movle	r7, r0
    656e:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6570:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6572:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    6576:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    657a:	f100 0737 	add.w	r7, r0, #55	; 0x37
    657e:	3030      	adds	r0, #48	; 0x30
    6580:	2e09      	cmp	r6, #9
    6582:	bfcc      	ite	gt
    6584:	463e      	movgt	r6, r7
    6586:	4606      	movle	r6, r0
    6588:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    658a:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    658c:	f88d 6016 	strb.w	r6, [sp, #22]
    6590:	f100 0637 	add.w	r6, r0, #55	; 0x37
    6594:	3030      	adds	r0, #48	; 0x30
    6596:	2b09      	cmp	r3, #9
    6598:	bfcc      	ite	gt
    659a:	4633      	movgt	r3, r6
    659c:	4603      	movle	r3, r0
    659e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    65a0:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65a4:	f88d 3017 	strb.w	r3, [sp, #23]
    65a8:	f100 0337 	add.w	r3, r0, #55	; 0x37
    65ac:	3030      	adds	r0, #48	; 0x30
    65ae:	2d09      	cmp	r5, #9
    65b0:	bf88      	it	hi
    65b2:	4618      	movhi	r0, r3
    65b4:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    65b8:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65bc:	f88d 0018 	strb.w	r0, [sp, #24]
    65c0:	f103 0037 	add.w	r0, r3, #55	; 0x37
    65c4:	3330      	adds	r3, #48	; 0x30
    65c6:	f1bc 0f09 	cmp.w	ip, #9
    65ca:	bfcc      	ite	gt
    65cc:	4684      	movgt	ip, r0
    65ce:	469c      	movle	ip, r3
    65d0:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    65d4:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65d8:	f88d c019 	strb.w	ip, [sp, #25]
    65dc:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    65e0:	3330      	adds	r3, #48	; 0x30
    65e2:	f1be 0f09 	cmp.w	lr, #9
    65e6:	bfd8      	it	le
    65e8:	469c      	movle	ip, r3
    65ea:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    65ec:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65f0:	f88d c01a 	strb.w	ip, [sp, #26]
    65f4:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    65f8:	3330      	adds	r3, #48	; 0x30
    65fa:	2f09      	cmp	r7, #9
    65fc:	bfd8      	it	le
    65fe:	469c      	movle	ip, r3
    6600:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    6602:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6606:	f88d c01b 	strb.w	ip, [sp, #27]
    660a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    660e:	3330      	adds	r3, #48	; 0x30
    6610:	2e09      	cmp	r6, #9
    6612:	bfd8      	it	le
    6614:	469c      	movle	ip, r3
    6616:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    6618:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    661c:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    661e:	f88d c01c 	strb.w	ip, [sp, #28]
    6622:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6626:	3330      	adds	r3, #48	; 0x30
    6628:	2d09      	cmp	r5, #9
    662a:	bfcc      	ite	gt
    662c:	4665      	movgt	r5, ip
    662e:	461d      	movle	r5, r3
    6630:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6632:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6634:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    6638:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    663c:	f103 0537 	add.w	r5, r3, #55	; 0x37
    6640:	3330      	adds	r3, #48	; 0x30
    6642:	2809      	cmp	r0, #9
    6644:	bfcc      	ite	gt
    6646:	4628      	movgt	r0, r5
    6648:	4618      	movle	r0, r3
    664a:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    664c:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6650:	f88d 001e 	strb.w	r0, [sp, #30]
    6654:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6658:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    665a:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    665e:	2a09      	cmp	r2, #9
    6660:	bfcc      	ite	gt
    6662:	4602      	movgt	r2, r0
    6664:	461a      	movle	r2, r3
    6666:	fa5f f58e 	uxtb.w	r5, lr
    666a:	b2f8      	uxtb	r0, r7
    666c:	f88d 201f 	strb.w	r2, [sp, #31]
    6670:	f105 0237 	add.w	r2, r5, #55	; 0x37
    6674:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6676:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    667a:	f1be 0f09 	cmp.w	lr, #9
    667e:	bf88      	it	hi
    6680:	4615      	movhi	r5, r2
    6682:	f100 0237 	add.w	r2, r0, #55	; 0x37
    6686:	3030      	adds	r0, #48	; 0x30
    6688:	2f09      	cmp	r7, #9
    668a:	bfc8      	it	gt
    668c:	4610      	movgt	r0, r2
    668e:	b2f3      	uxtb	r3, r6
    6690:	f103 0237 	add.w	r2, r3, #55	; 0x37
    6694:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6698:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    669a:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    669e:	2e09      	cmp	r6, #9
    66a0:	bfc8      	it	gt
    66a2:	4613      	movgt	r3, r2
    66a4:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    66a6:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66aa:	f102 0837 	add.w	r8, r2, #55	; 0x37
    66ae:	3230      	adds	r2, #48	; 0x30
    66b0:	2809      	cmp	r0, #9
    66b2:	bfd8      	it	le
    66b4:	4690      	movle	r8, r2
    66b6:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    66ba:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66be:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    66c2:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    66c4:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66c6:	f88d 5020 	strb.w	r5, [sp, #32]
    66ca:	f102 0437 	add.w	r4, r2, #55	; 0x37
    66ce:	3230      	adds	r2, #48	; 0x30
    66d0:	f1be 0f09 	cmp.w	lr, #9
    66d4:	bfd8      	it	le
    66d6:	4614      	movle	r4, r2
    66d8:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    66da:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66dc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    66e0:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66e4:	f102 0437 	add.w	r4, r2, #55	; 0x37
    66e8:	3230      	adds	r2, #48	; 0x30
    66ea:	2f09      	cmp	r7, #9
    66ec:	bfcc      	ite	gt
    66ee:	4627      	movgt	r7, r4
    66f0:	4617      	movle	r7, r2
    66f2:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    66f4:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66f8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    66fc:	f102 0737 	add.w	r7, r2, #55	; 0x37
    6700:	3230      	adds	r2, #48	; 0x30
    6702:	2e09      	cmp	r6, #9
    6704:	bfcc      	ite	gt
    6706:	463e      	movgt	r6, r7
    6708:	4616      	movle	r6, r2
    670a:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    670c:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    670e:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    6712:	f102 0637 	add.w	r6, r2, #55	; 0x37
    6716:	3230      	adds	r2, #48	; 0x30
    6718:	2909      	cmp	r1, #9
    671a:	bfcc      	ite	gt
    671c:	4631      	movgt	r1, r6
    671e:	4611      	movle	r1, r2
    6720:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    6722:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6726:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    672a:	f102 0130 	add.w	r1, r2, #48	; 0x30
    672e:	3237      	adds	r2, #55	; 0x37
    6730:	2d09      	cmp	r5, #9
    6732:	bf88      	it	hi
    6734:	4611      	movhi	r1, r2
    6736:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    673a:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    673e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6742:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6746:	3237      	adds	r2, #55	; 0x37
    6748:	f1bc 0f09 	cmp.w	ip, #9
    674c:	bfd4      	ite	le
    674e:	468c      	movle	ip, r1
    6750:	4694      	movgt	ip, r2
    6752:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6756:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    675a:	f102 0137 	add.w	r1, r2, #55	; 0x37
    675e:	3230      	adds	r2, #48	; 0x30
    6760:	f1be 0f09 	cmp.w	lr, #9
    6764:	bfcc      	ite	gt
    6766:	468e      	movgt	lr, r1
    6768:	4696      	movle	lr, r2
    676a:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    676c:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6770:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    6774:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    6778:	3130      	adds	r1, #48	; 0x30
    677a:	2c09      	cmp	r4, #9
    677c:	bfd8      	it	le
    677e:	468e      	movle	lr, r1
    6780:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    6782:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6786:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    678a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    678e:	3237      	adds	r2, #55	; 0x37
    6790:	e008      	b.n	67a4 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    6792:	bf00      	nop
    6794:	40001c00 	.word	0x40001c00
    6798:	40000800 	.word	0x40000800
    679c:	200000df 	.word	0x200000df
    67a0:	00022da8 	.word	0x00022da8
    67a4:	2f09      	cmp	r7, #9
    67a6:	bfd4      	ite	le
    67a8:	4677      	movle	r7, lr
    67aa:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    67ac:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67b0:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    67b2:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67b6:	b2da      	uxtb	r2, r3
    67b8:	b2e9      	uxtb	r1, r5
    67ba:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    67be:	f104 0730 	add.w	r7, r4, #48	; 0x30
    67c2:	3437      	adds	r4, #55	; 0x37
    67c4:	2e09      	cmp	r6, #9
    67c6:	bfd8      	it	le
    67c8:	463c      	movle	r4, r7
    67ca:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    67ce:	f102 0730 	add.w	r7, r2, #48	; 0x30
    67d2:	3137      	adds	r1, #55	; 0x37
    67d4:	3237      	adds	r2, #55	; 0x37
    67d6:	2d09      	cmp	r5, #9
    67d8:	bfd8      	it	le
    67da:	4671      	movle	r1, lr
    67dc:	2b09      	cmp	r3, #9
    67de:	bfd4      	ite	le
    67e0:	463b      	movle	r3, r7
    67e2:	4613      	movgt	r3, r2
    67e4:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    67e8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    67ec:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    67f0:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    67f4:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    67f8:	f10d 030f 	add.w	r3, sp, #15
    67fc:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6800:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6804:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6808:	428b      	cmp	r3, r1
    680a:	d1f9      	bne.n	6800 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    680c:	4b2a      	ldr	r3, [pc, #168]	; (68b8 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    680e:	4a2b      	ldr	r2, [pc, #172]	; (68bc <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6810:	4f2b      	ldr	r7, [pc, #172]	; (68c0 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    6812:	4d2c      	ldr	r5, [pc, #176]	; (68c4 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    6814:	482c      	ldr	r0, [pc, #176]	; (68c8 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    6816:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6818:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    681c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6820:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    6824:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    6828:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    682c:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6830:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6832:	629c      	str	r4, [r3, #40]	; 0x28
    6834:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6836:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6838:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    683c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6840:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6844:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    6848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    684c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6850:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6854:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6858:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    685c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    6860:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6868:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    686a:	629c      	str	r4, [r3, #40]	; 0x28
    686c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    686e:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6870:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    6874:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6878:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    687c:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6884:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6888:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    688c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6890:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6894:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    689c:	f005 fe52 	bl	c544 <usbdc_init>
    cdcdf_acm_init();
    68a0:	f005 fb0a 	bl	beb8 <cdcdf_acm_init>
    usbdc_start(single_desc);
    68a4:	4809      	ldr	r0, [pc, #36]	; (68cc <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    68a6:	f005 fe7b 	bl	c5a0 <usbdc_start>
    usbdc_attach();
    68aa:	f005 fe91 	bl	c5d0 <usbdc_attach>
}
    68ae:	2001      	movs	r0, #1
    68b0:	b00c      	add	sp, #48	; 0x30
    68b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68b6:	bf00      	nop
    68b8:	41008000 	.word	0x41008000
    68bc:	e000e100 	.word	0xe000e100
    68c0:	c0000100 	.word	0xc0000100
    68c4:	c0000200 	.word	0xc0000200
    68c8:	20000ad4 	.word	0x20000ad4
    68cc:	20000000 	.word	0x20000000

000068d0 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    68d0:	2001      	movs	r0, #1
    68d2:	4770      	bx	lr

000068d4 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    68d4:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    68d6:	f005 fb6f 	bl	bfb8 <cdcdf_acm_get_line_coding>
}
    68da:	6800      	ldr	r0, [r0, #0]
    68dc:	bd08      	pop	{r3, pc}
    68de:	bf00      	nop

000068e0 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    68e0:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    68e2:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    68e6:	b103      	cbz	r3, 68ea <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    68e8:	bd38      	pop	{r3, r4, r5, pc}
    68ea:	4604      	mov	r4, r0
    m_portOpen = true;
    68ec:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    68ee:	4618      	mov	r0, r3
    m_portOpen = true;
    68f0:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    68f4:	4906      	ldr	r1, [pc, #24]	; (6910 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    68f6:	f005 fb31 	bl	bf5c <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    68fa:	4628      	mov	r0, r5
    68fc:	4905      	ldr	r1, [pc, #20]	; (6914 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    68fe:	f005 fb2d 	bl	bf5c <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6902:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6906:	2140      	movs	r1, #64	; 0x40
}
    6908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    690c:	f005 baf2 	b.w	bef4 <cdcdf_acm_read>
    6910:	00005e01 	.word	0x00005e01
    6914:	00006039 	.word	0x00006039

00006918 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6918:	4603      	mov	r3, r0
    m_inHead = 0;
    691a:	2200      	movs	r2, #0
    691c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    6920:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    6924:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6928:	2140      	movs	r1, #64	; 0x40
    692a:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    692c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6930:	f005 bae0 	b.w	bef4 <cdcdf_acm_read>

00006934 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    6934:	b538      	push	{r3, r4, r5, lr}
    6936:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6938:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    693c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    6940:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6944:	429a      	cmp	r2, r3
    6946:	d100      	bne.n	694a <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    6948:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    694a:	f005 fb2f 	bl	bfac <cdcdf_acm_is_enabled>
    694e:	2800      	cmp	r0, #0
    6950:	d0fa      	beq.n	6948 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    6952:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    6956:	07db      	lsls	r3, r3, #31
    6958:	d5f6      	bpl.n	6948 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    695a:	7b6b      	ldrb	r3, [r5, #13]
    695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6960:	2b02      	cmp	r3, #2
    6962:	d0eb      	beq.n	693c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    6964:	bd38      	pop	{r3, r4, r5, pc}
    6966:	bf00      	nop

00006968 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    6968:	b538      	push	{r3, r4, r5, lr}
    696a:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    696c:	f005 fb1e 	bl	bfac <cdcdf_acm_is_enabled>
    6970:	4604      	mov	r4, r0
    6972:	b170      	cbz	r0, 6992 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    6974:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    6978:	f014 0401 	ands.w	r4, r4, #1
    697c:	d009      	beq.n	6992 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    697e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6982:	7b5c      	ldrb	r4, [r3, #13]
    6984:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6988:	f1a4 0402 	sub.w	r4, r4, #2
    698c:	fab4 f484 	clz	r4, r4
    6990:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    6992:	4803      	ldr	r0, [pc, #12]	; (69a0 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    6994:	2100      	movs	r1, #0
    6996:	f002 ffeb 	bl	9970 <Delay_cycles>
}
    699a:	4620      	mov	r0, r4
    699c:	bd38      	pop	{r3, r4, r5, pc}
    699e:	bf00      	nop
    69a0:	00124f80 	.word	0x00124f80

000069a4 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    69a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    69a8:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    69ac:	4293      	cmp	r3, r2
    69ae:	f000 8116 	beq.w	6bde <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    69b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    69b6:	1c5a      	adds	r2, r3, #1
    69b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    69bc:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    69be:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    69c2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    69c4:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    69c6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    69ca:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    69ce:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    69d2:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    69d4:	bf48      	it	mi
    69d6:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    69d8:	2d00      	cmp	r5, #0
    69da:	f000 80e3 	beq.w	6ba4 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    69de:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    69e2:	f000 80df 	beq.w	6ba4 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    69e6:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    69ea:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    69ee:	42ab      	cmp	r3, r5
    69f0:	bf28      	it	cs
    69f2:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    69f4:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    69f8:	4299      	cmp	r1, r3
    69fa:	bf28      	it	cs
    69fc:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    69fe:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a00:	2900      	cmp	r1, #0
    6a02:	f000 80f8 	beq.w	6bf6 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    6a06:	1d35      	adds	r5, r6, #4
    6a08:	4405      	add	r5, r0
    6a0a:	f102 0e04 	add.w	lr, r2, #4
    6a0e:	4577      	cmp	r7, lr
    6a10:	bf38      	it	cc
    6a12:	42aa      	cmpcc	r2, r5
    6a14:	f0c0 80da 	bcc.w	6bcc <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6a18:	290b      	cmp	r1, #11
    6a1a:	f240 80d7 	bls.w	6bcc <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6a1e:	4255      	negs	r5, r2
    6a20:	f015 0503 	ands.w	r5, r5, #3
    6a24:	f000 80c3 	beq.w	6bae <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6a28:	f892 e000 	ldrb.w	lr, [r2]
    6a2c:	f800 e006 	strb.w	lr, [r0, r6]
    6a30:	2d01      	cmp	r5, #1
    6a32:	f107 0801 	add.w	r8, r7, #1
    6a36:	f102 0901 	add.w	r9, r2, #1
    6a3a:	f000 80ba 	beq.w	6bb2 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6a3e:	f892 e001 	ldrb.w	lr, [r2, #1]
    6a42:	f887 e001 	strb.w	lr, [r7, #1]
    6a46:	2d02      	cmp	r5, #2
    6a48:	f107 0802 	add.w	r8, r7, #2
    6a4c:	f102 0902 	add.w	r9, r2, #2
    6a50:	f000 80af 	beq.w	6bb2 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6a54:	f892 e002 	ldrb.w	lr, [r2, #2]
    6a58:	f887 e002 	strb.w	lr, [r7, #2]
    6a5c:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a60:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    6a62:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a66:	9700      	str	r7, [sp, #0]
    6a68:	eba1 0b05 	sub.w	fp, r1, r5
    6a6c:	f1ab 0704 	sub.w	r7, fp, #4
    6a70:	08bf      	lsrs	r7, r7, #2
    6a72:	eb06 0e05 	add.w	lr, r6, r5
    6a76:	3701      	adds	r7, #1
    6a78:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    6a7c:	4486      	add	lr, r0
    6a7e:	4415      	add	r5, r2
    6a80:	f04f 0c00 	mov.w	ip, #0
    6a84:	9401      	str	r4, [sp, #4]
    6a86:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    6a8a:	f855 4b04 	ldr.w	r4, [r5], #4
    6a8e:	f84e 4b04 	str.w	r4, [lr], #4
    6a92:	4567      	cmp	r7, ip
    6a94:	d8f7      	bhi.n	6a86 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    6a96:	9d00      	ldr	r5, [sp, #0]
    6a98:	9c01      	ldr	r4, [sp, #4]
    6a9a:	45d3      	cmp	fp, sl
    6a9c:	4455      	add	r5, sl
    6a9e:	eb08 0e0a 	add.w	lr, r8, sl
    6aa2:	eb09 0c0a 	add.w	ip, r9, sl
    6aa6:	f000 808c 	beq.w	6bc2 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6aaa:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6aae:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6ab2:	1c6f      	adds	r7, r5, #1
    6ab4:	42b9      	cmp	r1, r7
    6ab6:	f240 8084 	bls.w	6bc2 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6aba:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6abc:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6ac0:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6ac4:	42a9      	cmp	r1, r5
    6ac6:	d97c      	bls.n	6bc2 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6ac8:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6acc:	f88e 5002 	strb.w	r5, [lr, #2]
    6ad0:	1857      	adds	r7, r2, r1
    6ad2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6ad6:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6ada:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6adc:	1a6d      	subs	r5, r5, r1
        if (count) {
    6ade:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6ae0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6ae4:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6ae8:	d065      	beq.n	6bb6 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6aea:	1d01      	adds	r1, r0, #4
    6aec:	1d3a      	adds	r2, r7, #4
    6aee:	4290      	cmp	r0, r2
    6af0:	bf38      	it	cc
    6af2:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    6af4:	4605      	mov	r5, r0
    6af6:	d375      	bcc.n	6be4 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6af8:	2b0b      	cmp	r3, #11
    6afa:	d973      	bls.n	6be4 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6afc:	4242      	negs	r2, r0
    6afe:	f012 0203 	ands.w	r2, r2, #3
    6b02:	d060      	beq.n	6bc6 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    6b04:	7839      	ldrb	r1, [r7, #0]
    6b06:	7001      	strb	r1, [r0, #0]
    6b08:	2a01      	cmp	r2, #1
    6b0a:	f100 0501 	add.w	r5, r0, #1
    6b0e:	f107 0e01 	add.w	lr, r7, #1
    6b12:	d059      	beq.n	6bc8 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6b14:	7879      	ldrb	r1, [r7, #1]
    6b16:	7041      	strb	r1, [r0, #1]
    6b18:	2a02      	cmp	r2, #2
    6b1a:	f100 0502 	add.w	r5, r0, #2
    6b1e:	f107 0e02 	add.w	lr, r7, #2
    6b22:	d051      	beq.n	6bc8 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6b24:	78b9      	ldrb	r1, [r7, #2]
    6b26:	7081      	strb	r1, [r0, #2]
    6b28:	1cc5      	adds	r5, r0, #3
    6b2a:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    6b2e:	f04f 0803 	mov.w	r8, #3
    6b32:	eba3 0c02 	sub.w	ip, r3, r2
    6b36:	f1ac 0104 	sub.w	r1, ip, #4
    6b3a:	0889      	lsrs	r1, r1, #2
    6b3c:	1c4e      	adds	r6, r1, #1
    6b3e:	4417      	add	r7, r2
    6b40:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6b44:	4402      	add	r2, r0
    6b46:	2100      	movs	r1, #0
    6b48:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6b4a:	f857 ab04 	ldr.w	sl, [r7], #4
    6b4e:	f842 ab04 	str.w	sl, [r2], #4
    6b52:	428e      	cmp	r6, r1
    6b54:	d8f8      	bhi.n	6b48 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    6b56:	45cc      	cmp	ip, r9
    6b58:	eb08 0209 	add.w	r2, r8, r9
    6b5c:	eb05 0109 	add.w	r1, r5, r9
    6b60:	eb0e 0709 	add.w	r7, lr, r9
    6b64:	d00d      	beq.n	6b82 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6b66:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6b6a:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6b6e:	1c55      	adds	r5, r2, #1
    6b70:	42ab      	cmp	r3, r5
    6b72:	d906      	bls.n	6b82 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6b74:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6b76:	787d      	ldrb	r5, [r7, #1]
    6b78:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6b7a:	4293      	cmp	r3, r2
    6b7c:	d901      	bls.n	6b82 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6b7e:	78ba      	ldrb	r2, [r7, #2]
    6b80:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    6b82:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6b86:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6b8a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6b8e:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6b90:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    6b92:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6b96:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6b9a:	b91d      	cbnz	r5, 6ba4 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6b9c:	3080      	adds	r0, #128	; 0x80
    6b9e:	2140      	movs	r1, #64	; 0x40
    6ba0:	f005 f9a8 	bl	bef4 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6ba4:	b662      	cpsie	i
    return retVal;
    6ba6:	b220      	sxth	r0, r4
}
    6ba8:	b003      	add	sp, #12
    6baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6bae:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    6bb0:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6bb2:	9500      	str	r5, [sp, #0]
    6bb4:	e758      	b.n	6a68 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6bb6:	4431      	add	r1, r6
    6bb8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6bbc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6bc0:	e7eb      	b.n	6b9a <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    6bc2:	1857      	adds	r7, r2, r1
    6bc4:	e785      	b.n	6ad2 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    6bc6:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    6bc8:	4690      	mov	r8, r2
    6bca:	e7b2      	b.n	6b32 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    6bcc:	1e7d      	subs	r5, r7, #1
    6bce:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    6bd0:	f812 eb01 	ldrb.w	lr, [r2], #1
    6bd4:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6bd8:	42ba      	cmp	r2, r7
    6bda:	d1f9      	bne.n	6bd0 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    6bdc:	e779      	b.n	6ad2 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    6bde:	f04f 30ff 	mov.w	r0, #4294967295
    6be2:	4770      	bx	lr
    6be4:	1e42      	subs	r2, r0, #1
    6be6:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    6be8:	f817 1b01 	ldrb.w	r1, [r7], #1
    6bec:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6bf0:	42bd      	cmp	r5, r7
    6bf2:	d1f9      	bne.n	6be8 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    6bf4:	e7c5      	b.n	6b82 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    6bf6:	4617      	mov	r7, r2
    6bf8:	e76f      	b.n	6ada <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    6bfa:	bf00      	nop

00006bfc <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    6bfc:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6c00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    6c04:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    6c06:	bf1a      	itte	ne
    6c08:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    6c0c:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    6c0e:	f04f 30ff 	moveq.w	r0, #4294967295
}
    6c12:	4770      	bx	lr

00006c14 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    6c14:	b570      	push	{r4, r5, r6, lr}
    6c16:	4604      	mov	r4, r0
    6c18:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6c1a:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c1e:	f005 f9c5 	bl	bfac <cdcdf_acm_is_enabled>
    6c22:	b350      	cbz	r0, 6c7a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    6c24:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    6c28:	f010 0001 	ands.w	r0, r0, #1
    6c2c:	d025      	beq.n	6c7a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6c2e:	7b6b      	ldrb	r3, [r5, #13]
    6c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c34:	2b02      	cmp	r3, #2
    6c36:	d001      	beq.n	6c3c <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    6c38:	2000      	movs	r0, #0
    6c3a:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    6c3c:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    6c40:	b900      	cbnz	r0, 6c44 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    6c42:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    6c44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    6c48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    6c4c:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6c4e:	1e5a      	subs	r2, r3, #1
    6c50:	d40e      	bmi.n	6c70 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    6c52:	2a00      	cmp	r2, #0
    6c54:	d0e3      	beq.n	6c1e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    6c56:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6c5a:	4423      	add	r3, r4
    6c5c:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    6c60:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6c64:	3301      	adds	r3, #1
    6c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c6a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    6c6e:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    6c70:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    6c74:	2a00      	cmp	r2, #0
    6c76:	d0d2      	beq.n	6c1e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    6c78:	e7ed      	b.n	6c56 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    6c7a:	bd70      	pop	{r4, r5, r6, pc}

00006c7c <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    6c7c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6c80:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    6c84:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    6c86:	bf48      	it	mi
    6c88:	3040      	addmi	r0, #64	; 0x40
}
    6c8a:	4770      	bx	lr

00006c8c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    6c8c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6c90:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    6c94:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6c96:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    6c98:	bf48      	it	mi
    6c9a:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    6c9e:	4770      	bx	lr

00006ca0 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    6ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6ca4:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    6ca8:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6caa:	f04f 0101 	mov.w	r1, #1
    6cae:	f3bf 8f5b 	dmb	ish
    6cb2:	e8d3 2f4f 	ldrexb	r2, [r3]
    6cb6:	e8c3 1f44 	strexb	r4, r1, [r3]
    6cba:	2c00      	cmp	r4, #0
    6cbc:	d1f9      	bne.n	6cb2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    6cbe:	f3bf 8f5b 	dmb	ish
    6cc2:	f012 0fff 	tst.w	r2, #255	; 0xff
    6cc6:	f040 80e4 	bne.w	6e92 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    6cca:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    6cce:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    6cd2:	428e      	cmp	r6, r1
    6cd4:	f000 81b6 	beq.w	7044 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6cd8:	f100 0340 	add.w	r3, r0, #64	; 0x40
    6cdc:	eb03 0706 	add.w	r7, r3, r6
    6ce0:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    6ce4:	f0c0 80d8 	bcc.w	6e98 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6ce8:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6cec:	4411      	add	r1, r2
    6cee:	2940      	cmp	r1, #64	; 0x40
    6cf0:	bf28      	it	cs
    6cf2:	2140      	movcs	r1, #64	; 0x40
    6cf4:	428a      	cmp	r2, r1
    6cf6:	bf28      	it	cs
    6cf8:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6cfa:	2a00      	cmp	r2, #0
    6cfc:	f000 81c7 	beq.w	708e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    6d00:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    6d04:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6d08:	eb00 080e 	add.w	r8, r0, lr
    6d0c:	4404      	add	r4, r0
    6d0e:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    6d12:	45e0      	cmp	r8, ip
    6d14:	bf38      	it	cc
    6d16:	42a5      	cmpcc	r5, r4
    6d18:	f0c0 81ae 	bcc.w	7078 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6d1c:	2a0b      	cmp	r2, #11
    6d1e:	f240 81ab 	bls.w	7078 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6d22:	426c      	negs	r4, r5
    6d24:	f014 0403 	ands.w	r4, r4, #3
    6d28:	f000 817f 	beq.w	702a <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    6d2c:	5d9e      	ldrb	r6, [r3, r6]
    6d2e:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    6d32:	2c01      	cmp	r4, #1
    6d34:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    6d38:	f107 0801 	add.w	r8, r7, #1
    6d3c:	f000 817b 	beq.w	7036 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6d40:	787e      	ldrb	r6, [r7, #1]
    6d42:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    6d46:	2c02      	cmp	r4, #2
    6d48:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    6d4c:	f107 0802 	add.w	r8, r7, #2
    6d50:	f000 8171 	beq.w	7036 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6d54:	78be      	ldrb	r6, [r7, #2]
    6d56:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d5a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6d5c:	f107 0803 	add.w	r8, r7, #3
    6d60:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d64:	9601      	str	r6, [sp, #4]
    6d66:	eba2 0b04 	sub.w	fp, r2, r4
    6d6a:	f1ab 0704 	sub.w	r7, fp, #4
    6d6e:	08bf      	lsrs	r7, r7, #2
    6d70:	eb0e 0604 	add.w	r6, lr, r4
    6d74:	3701      	adds	r7, #1
    6d76:	34c0      	adds	r4, #192	; 0xc0
    6d78:	4406      	add	r6, r0
    6d7a:	4404      	add	r4, r0
    6d7c:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6d80:	f04f 0e00 	mov.w	lr, #0
    6d84:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6d88:	f856 ab04 	ldr.w	sl, [r6], #4
    6d8c:	f844 ab04 	str.w	sl, [r4], #4
    6d90:	45be      	cmp	lr, r7
    6d92:	d3f7      	bcc.n	6d84 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    6d94:	9c01      	ldr	r4, [sp, #4]
    6d96:	45cb      	cmp	fp, r9
    6d98:	444c      	add	r4, r9
    6d9a:	eb08 0e09 	add.w	lr, r8, r9
    6d9e:	eb0c 0609 	add.w	r6, ip, r9
    6da2:	d00f      	beq.n	6dc4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6da4:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    6da8:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dac:	1c67      	adds	r7, r4, #1
    6dae:	42ba      	cmp	r2, r7
    6db0:	d908      	bls.n	6dc4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6db2:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6db4:	f89e 7001 	ldrb.w	r7, [lr, #1]
    6db8:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dba:	42a2      	cmp	r2, r4
    6dbc:	d902      	bls.n	6dc4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    6dbe:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6dc2:	70b4      	strb	r4, [r6, #2]
    6dc4:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dc6:	1a8a      	subs	r2, r1, r2
    6dc8:	f000 811a 	beq.w	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6dcc:	1d26      	adds	r6, r4, #4
    6dce:	f100 0744 	add.w	r7, r0, #68	; 0x44
    6dd2:	42bc      	cmp	r4, r7
    6dd4:	bf38      	it	cc
    6dd6:	42b3      	cmpcc	r3, r6
    6dd8:	f0c0 8145 	bcc.w	7066 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6ddc:	2a0b      	cmp	r2, #11
    6dde:	f240 8142 	bls.w	7066 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6de2:	425f      	negs	r7, r3
    6de4:	f017 0703 	ands.w	r7, r7, #3
    6de8:	f000 8129 	beq.w	703e <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    6dec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    6df0:	7023      	strb	r3, [r4, #0]
    6df2:	2f01      	cmp	r7, #1
    6df4:	f104 0c01 	add.w	ip, r4, #1
    6df8:	f100 0341 	add.w	r3, r0, #65	; 0x41
    6dfc:	f000 811d 	beq.w	703a <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6e00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    6e04:	7063      	strb	r3, [r4, #1]
    6e06:	2f02      	cmp	r7, #2
    6e08:	f104 0c02 	add.w	ip, r4, #2
    6e0c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    6e10:	f000 8113 	beq.w	703a <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6e14:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    6e18:	70a3      	strb	r3, [r4, #2]
    6e1a:	f104 0c03 	add.w	ip, r4, #3
    6e1e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e22:	f04f 0903 	mov.w	r9, #3
    6e26:	eba2 0807 	sub.w	r8, r2, r7
    6e2a:	f1a8 0e04 	sub.w	lr, r8, #4
    6e2e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    6e32:	f107 0640 	add.w	r6, r7, #64	; 0x40
    6e36:	f10e 0e01 	add.w	lr, lr, #1
    6e3a:	443c      	add	r4, r7
    6e3c:	4406      	add	r6, r0
    6e3e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6e42:	2700      	movs	r7, #0
    6e44:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6e46:	f856 bb04 	ldr.w	fp, [r6], #4
    6e4a:	f844 bb04 	str.w	fp, [r4], #4
    6e4e:	45be      	cmp	lr, r7
    6e50:	d8f8      	bhi.n	6e44 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    6e52:	45d0      	cmp	r8, sl
    6e54:	eb09 040a 	add.w	r4, r9, sl
    6e58:	eb03 070a 	add.w	r7, r3, sl
    6e5c:	eb0c 060a 	add.w	r6, ip, sl
    6e60:	f000 80ce 	beq.w	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6e64:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    6e68:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e6c:	1c63      	adds	r3, r4, #1
    6e6e:	429a      	cmp	r2, r3
    6e70:	f240 80c6 	bls.w	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6e74:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6e76:	787b      	ldrb	r3, [r7, #1]
    6e78:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e7a:	42a2      	cmp	r2, r4
    6e7c:	f240 80c0 	bls.w	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6e80:	78bb      	ldrb	r3, [r7, #2]
    6e82:	70b3      	strb	r3, [r6, #2]
    6e84:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6e86:	4628      	mov	r0, r5
    6e88:	f005 f848 	bl	bf1c <cdcdf_acm_write>
    6e8c:	2800      	cmp	r0, #0
    6e8e:	f040 80be 	bne.w	700e <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    6e92:	b003      	add	sp, #12
    6e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    6e98:	1b89      	subs	r1, r1, r6
    6e9a:	f106 0240 	add.w	r2, r6, #64	; 0x40
    6e9e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6ea2:	2940      	cmp	r1, #64	; 0x40
    6ea4:	eb00 0c02 	add.w	ip, r0, r2
    6ea8:	4404      	add	r4, r0
    6eaa:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    6eae:	bf28      	it	cs
    6eb0:	2140      	movcs	r1, #64	; 0x40
    6eb2:	45f4      	cmp	ip, lr
    6eb4:	bf38      	it	cc
    6eb6:	42a5      	cmpcc	r5, r4
    6eb8:	f0c0 80cb 	bcc.w	7052 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6ebc:	290b      	cmp	r1, #11
    6ebe:	f240 80c8 	bls.w	7052 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6ec2:	426c      	negs	r4, r5
    6ec4:	f014 0403 	ands.w	r4, r4, #3
    6ec8:	f000 80ab 	beq.w	7022 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    6ecc:	5d9b      	ldrb	r3, [r3, r6]
    6ece:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    6ed2:	2c01      	cmp	r4, #1
    6ed4:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    6ed8:	f107 0e01 	add.w	lr, r7, #1
    6edc:	f000 80a9 	beq.w	7032 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6ee0:	787b      	ldrb	r3, [r7, #1]
    6ee2:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    6ee6:	2c02      	cmp	r4, #2
    6ee8:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    6eec:	f107 0e02 	add.w	lr, r7, #2
    6ef0:	f000 809f 	beq.w	7032 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6ef4:	78bb      	ldrb	r3, [r7, #2]
    6ef6:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    6efa:	f107 0e03 	add.w	lr, r7, #3
    6efe:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6f02:	f04f 0c03 	mov.w	ip, #3
    6f06:	1913      	adds	r3, r2, r4
    6f08:	4403      	add	r3, r0
    6f0a:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6f0e:	681a      	ldr	r2, [r3, #0]
    6f10:	f840 2008 	str.w	r2, [r0, r8]
    6f14:	1b0f      	subs	r7, r1, r4
    6f16:	1f3a      	subs	r2, r7, #4
    6f18:	0892      	lsrs	r2, r2, #2
    6f1a:	eb00 0408 	add.w	r4, r0, r8
    6f1e:	3201      	adds	r2, #1
    6f20:	f8d3 8004 	ldr.w	r8, [r3, #4]
    6f24:	f8c4 8004 	str.w	r8, [r4, #4]
    6f28:	2a02      	cmp	r2, #2
    6f2a:	ea4f 0882 	mov.w	r8, r2, lsl #2
    6f2e:	d04f      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f30:	f8d3 9008 	ldr.w	r9, [r3, #8]
    6f34:	f8c4 9008 	str.w	r9, [r4, #8]
    6f38:	2a03      	cmp	r2, #3
    6f3a:	d049      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f3c:	f8d3 900c 	ldr.w	r9, [r3, #12]
    6f40:	f8c4 900c 	str.w	r9, [r4, #12]
    6f44:	2a04      	cmp	r2, #4
    6f46:	d043      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f48:	f8d3 9010 	ldr.w	r9, [r3, #16]
    6f4c:	f8c4 9010 	str.w	r9, [r4, #16]
    6f50:	2a05      	cmp	r2, #5
    6f52:	d03d      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f54:	f8d3 9014 	ldr.w	r9, [r3, #20]
    6f58:	f8c4 9014 	str.w	r9, [r4, #20]
    6f5c:	2a06      	cmp	r2, #6
    6f5e:	d037      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f60:	f8d3 9018 	ldr.w	r9, [r3, #24]
    6f64:	f8c4 9018 	str.w	r9, [r4, #24]
    6f68:	2a07      	cmp	r2, #7
    6f6a:	d031      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f6c:	f8d3 901c 	ldr.w	r9, [r3, #28]
    6f70:	f8c4 901c 	str.w	r9, [r4, #28]
    6f74:	2a08      	cmp	r2, #8
    6f76:	d02b      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f78:	f8d3 9020 	ldr.w	r9, [r3, #32]
    6f7c:	f8c4 9020 	str.w	r9, [r4, #32]
    6f80:	2a09      	cmp	r2, #9
    6f82:	d025      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f84:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    6f88:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    6f8c:	2a0a      	cmp	r2, #10
    6f8e:	d01f      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f90:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    6f94:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    6f98:	2a0b      	cmp	r2, #11
    6f9a:	d019      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6f9c:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    6fa0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    6fa4:	2a0c      	cmp	r2, #12
    6fa6:	d013      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fa8:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    6fac:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    6fb0:	2a0d      	cmp	r2, #13
    6fb2:	d00d      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fb4:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    6fb8:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    6fbc:	2a0e      	cmp	r2, #14
    6fbe:	d007      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fc0:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    6fc4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    6fc8:	2a0f      	cmp	r2, #15
    6fca:	d001      	beq.n	6fd0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6fce:	63e3      	str	r3, [r4, #60]	; 0x3c
    6fd0:	4547      	cmp	r7, r8
    6fd2:	eb0c 0308 	add.w	r3, ip, r8
    6fd6:	eb06 0408 	add.w	r4, r6, r8
    6fda:	eb0e 0c08 	add.w	ip, lr, r8
    6fde:	d00f      	beq.n	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6fe0:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    6fe4:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6fe8:	1c5a      	adds	r2, r3, #1
    6fea:	4291      	cmp	r1, r2
    6fec:	d908      	bls.n	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6fee:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    6ff0:	f89c 2001 	ldrb.w	r2, [ip, #1]
    6ff4:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6ff6:	4299      	cmp	r1, r3
    6ff8:	d902      	bls.n	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6ffa:	f89c 3002 	ldrb.w	r3, [ip, #2]
    6ffe:	70a3      	strb	r3, [r4, #2]
    7000:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7002:	4628      	mov	r0, r5
    7004:	f004 ff8a 	bl	bf1c <cdcdf_acm_write>
    7008:	2800      	cmp	r0, #0
    700a:	f43f af42 	beq.w	6e92 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    700e:	f3bf 8f5b 	dmb	ish
    7012:	2300      	movs	r3, #0
    7014:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7018:	f3bf 8f5b 	dmb	ish
}
    701c:	b003      	add	sp, #12
    701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7022:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7024:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7026:	462e      	mov	r6, r5
    7028:	e76d      	b.n	6f06 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    702a:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    702c:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    702e:	46ac      	mov	ip, r5
    7030:	e699      	b.n	6d66 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7032:	46a4      	mov	ip, r4
    7034:	e767      	b.n	6f06 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7036:	9401      	str	r4, [sp, #4]
    7038:	e695      	b.n	6d66 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    703a:	46b9      	mov	r9, r7
    703c:	e6f3      	b.n	6e26 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    703e:	46b9      	mov	r9, r7
    7040:	46a4      	mov	ip, r4
    7042:	e6f0      	b.n	6e26 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    7044:	f3bf 8f5b 	dmb	ish
    7048:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    704c:	f3bf 8f5b 	dmb	ish
        return;
    7050:	e71f      	b.n	6e92 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    7052:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7056:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7058:	f817 2b01 	ldrb.w	r2, [r7], #1
    705c:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7060:	42a7      	cmp	r7, r4
    7062:	d1f9      	bne.n	7058 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    7064:	e7cc      	b.n	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7066:	3c01      	subs	r4, #1
    7068:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    706a:	f813 6b01 	ldrb.w	r6, [r3], #1
    706e:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7072:	4293      	cmp	r3, r2
    7074:	d1f9      	bne.n	706a <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    7076:	e7c3      	b.n	7000 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7078:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    707c:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7080:	f817 6b01 	ldrb.w	r6, [r7], #1
    7084:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7088:	45be      	cmp	lr, r7
    708a:	d1f9      	bne.n	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    708c:	e69a      	b.n	6dc4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    708e:	462c      	mov	r4, r5
    7090:	e699      	b.n	6dc6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    7092:	bf00      	nop

00007094 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    7094:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    7096:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    709a:	b903      	cbnz	r3, 709e <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    709c:	bd38      	pop	{r3, r4, r5, pc}
    709e:	4605      	mov	r5, r0
    TxPump();
    70a0:	f7ff fdfe 	bl	6ca0 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    70a4:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    70a8:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    70ac:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    70b0:	429a      	cmp	r2, r3
    70b2:	d00b      	beq.n	70cc <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    70b4:	f004 ff7a 	bl	bfac <cdcdf_acm_is_enabled>
    70b8:	b140      	cbz	r0, 70cc <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    70ba:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    70be:	07db      	lsls	r3, r3, #31
    70c0:	d504      	bpl.n	70cc <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    70c2:	7b63      	ldrb	r3, [r4, #13]
    70c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    70c8:	2b02      	cmp	r3, #2
    70ca:	d0ed      	beq.n	70a8 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    70cc:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    70ce:	4621      	mov	r1, r4
    m_portOpen = false;
    70d0:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    70d4:	4620      	mov	r0, r4
    70d6:	f004 ff41 	bl	bf5c <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    70da:	4621      	mov	r1, r4
    70dc:	2001      	movs	r0, #1
    70de:	f004 ff3d 	bl	bf5c <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    70e2:	f004 ff2f 	bl	bf44 <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    70e6:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    70ea:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    70ee:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    70f2:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    70f6:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    70fa:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    70fe:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    7102:	bd38      	pop	{r3, r4, r5, pc}

00007104 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    7104:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7108:	b103      	cbz	r3, 710c <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    710a:	4770      	bx	lr
    710c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    7110:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    7114:	429a      	cmp	r2, r3
    7116:	f000 80fd 	beq.w	7314 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    711a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    711e:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    7122:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7124:	f04f 0101 	mov.w	r1, #1
    7128:	f3bf 8f5b 	dmb	ish
    712c:	e8d3 2f4f 	ldrexb	r2, [r3]
    7130:	e8c3 1f44 	strexb	r4, r1, [r3]
    7134:	2c00      	cmp	r4, #0
    7136:	d1f9      	bne.n	712c <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    7138:	f3bf 8f5b 	dmb	ish
    713c:	f012 0fff 	tst.w	r2, #255	; 0xff
    7140:	f040 80e5 	bne.w	730e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    7144:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7148:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    714c:	428e      	cmp	r6, r1
    714e:	f000 81ab 	beq.w	74a8 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7152:	f100 0340 	add.w	r3, r0, #64	; 0x40
    7156:	eb03 0706 	add.w	r7, r3, r6
    715a:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    715e:	f0c0 80da 	bcc.w	7316 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7162:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    7166:	4411      	add	r1, r2
    7168:	2940      	cmp	r1, #64	; 0x40
    716a:	bf28      	it	cs
    716c:	2140      	movcs	r1, #64	; 0x40
    716e:	428a      	cmp	r2, r1
    7170:	bf28      	it	cs
    7172:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7174:	2a00      	cmp	r2, #0
    7176:	f000 81bc 	beq.w	74f2 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    717a:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    717e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7182:	eb00 080e 	add.w	r8, r0, lr
    7186:	4404      	add	r4, r0
    7188:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    718c:	45e0      	cmp	r8, ip
    718e:	bf38      	it	cc
    7190:	42a5      	cmpcc	r5, r4
    7192:	f0c0 81a3 	bcc.w	74dc <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7196:	2a0b      	cmp	r2, #11
    7198:	f240 81a0 	bls.w	74dc <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    719c:	426c      	negs	r4, r5
    719e:	f014 0403 	ands.w	r4, r4, #3
    71a2:	f000 8177 	beq.w	7494 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    71a6:	5d9e      	ldrb	r6, [r3, r6]
    71a8:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    71ac:	2c01      	cmp	r4, #1
    71ae:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    71b2:	f107 0801 	add.w	r8, r7, #1
    71b6:	f000 8171 	beq.w	749c <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    71ba:	787e      	ldrb	r6, [r7, #1]
    71bc:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    71c0:	2c02      	cmp	r4, #2
    71c2:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    71c6:	f107 0802 	add.w	r8, r7, #2
    71ca:	f000 8165 	beq.w	7498 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    71ce:	78be      	ldrb	r6, [r7, #2]
    71d0:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71d4:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    71d6:	f107 0803 	add.w	r8, r7, #3
    71da:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71de:	9601      	str	r6, [sp, #4]
    71e0:	eba2 0b04 	sub.w	fp, r2, r4
    71e4:	f1ab 0704 	sub.w	r7, fp, #4
    71e8:	08bf      	lsrs	r7, r7, #2
    71ea:	eb0e 0604 	add.w	r6, lr, r4
    71ee:	3701      	adds	r7, #1
    71f0:	34c0      	adds	r4, #192	; 0xc0
    71f2:	4406      	add	r6, r0
    71f4:	4404      	add	r4, r0
    71f6:	ea4f 0987 	mov.w	r9, r7, lsl #2
    71fa:	f04f 0e00 	mov.w	lr, #0
    71fe:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7202:	f856 ab04 	ldr.w	sl, [r6], #4
    7206:	f844 ab04 	str.w	sl, [r4], #4
    720a:	45be      	cmp	lr, r7
    720c:	d3f7      	bcc.n	71fe <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    720e:	9c01      	ldr	r4, [sp, #4]
    7210:	45cb      	cmp	fp, r9
    7212:	444c      	add	r4, r9
    7214:	eb0c 0609 	add.w	r6, ip, r9
    7218:	eb08 0e09 	add.w	lr, r8, r9
    721c:	d00f      	beq.n	723e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    721e:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7222:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7226:	1c67      	adds	r7, r4, #1
    7228:	42ba      	cmp	r2, r7
    722a:	d908      	bls.n	723e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    722c:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    722e:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7232:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7234:	42a2      	cmp	r2, r4
    7236:	d902      	bls.n	723e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    7238:	f89e 4002 	ldrb.w	r4, [lr, #2]
    723c:	70b4      	strb	r4, [r6, #2]
    723e:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7240:	1a8a      	subs	r2, r1, r2
    7242:	d058      	beq.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7244:	1d26      	adds	r6, r4, #4
    7246:	f100 0744 	add.w	r7, r0, #68	; 0x44
    724a:	42bc      	cmp	r4, r7
    724c:	bf38      	it	cc
    724e:	42b3      	cmpcc	r3, r6
    7250:	f0c0 813b 	bcc.w	74ca <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    7254:	2a0b      	cmp	r2, #11
    7256:	f240 8138 	bls.w	74ca <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    725a:	425f      	negs	r7, r3
    725c:	f017 0703 	ands.w	r7, r7, #3
    7260:	f000 811f 	beq.w	74a2 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    7264:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7268:	7023      	strb	r3, [r4, #0]
    726a:	2f01      	cmp	r7, #1
    726c:	f104 0c01 	add.w	ip, r4, #1
    7270:	f100 0341 	add.w	r3, r0, #65	; 0x41
    7274:	f000 8116 	beq.w	74a4 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7278:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    727c:	7063      	strb	r3, [r4, #1]
    727e:	2f02      	cmp	r7, #2
    7280:	f104 0c02 	add.w	ip, r4, #2
    7284:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7288:	f000 810c 	beq.w	74a4 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    728c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7290:	70a3      	strb	r3, [r4, #2]
    7292:	f104 0c03 	add.w	ip, r4, #3
    7296:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    729a:	f04f 0903 	mov.w	r9, #3
    729e:	eba2 0807 	sub.w	r8, r2, r7
    72a2:	f1a8 0e04 	sub.w	lr, r8, #4
    72a6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    72aa:	f107 0640 	add.w	r6, r7, #64	; 0x40
    72ae:	f10e 0e01 	add.w	lr, lr, #1
    72b2:	443c      	add	r4, r7
    72b4:	4406      	add	r6, r0
    72b6:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    72ba:	2700      	movs	r7, #0
    72bc:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    72be:	f856 bb04 	ldr.w	fp, [r6], #4
    72c2:	f844 bb04 	str.w	fp, [r4], #4
    72c6:	45be      	cmp	lr, r7
    72c8:	d8f8      	bhi.n	72bc <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    72ca:	45d0      	cmp	r8, sl
    72cc:	eb09 040a 	add.w	r4, r9, sl
    72d0:	eb0c 060a 	add.w	r6, ip, sl
    72d4:	eb03 070a 	add.w	r7, r3, sl
    72d8:	d00d      	beq.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    72da:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    72de:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72e2:	1c63      	adds	r3, r4, #1
    72e4:	429a      	cmp	r2, r3
    72e6:	d906      	bls.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    72e8:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    72ea:	787b      	ldrb	r3, [r7, #1]
    72ec:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72ee:	42a2      	cmp	r2, r4
    72f0:	d901      	bls.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    72f2:	78bb      	ldrb	r3, [r7, #2]
    72f4:	70b3      	strb	r3, [r6, #2]
    72f6:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    72f8:	4628      	mov	r0, r5
    72fa:	f004 fe0f 	bl	bf1c <cdcdf_acm_write>
    72fe:	b130      	cbz	r0, 730e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7300:	f3bf 8f5b 	dmb	ish
    7304:	2300      	movs	r3, #0
    7306:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    730a:	f3bf 8f5b 	dmb	ish
}
    730e:	b003      	add	sp, #12
    7310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7314:	4770      	bx	lr
        count = min(count, tail - head);
    7316:	1b89      	subs	r1, r1, r6
    7318:	f106 0240 	add.w	r2, r6, #64	; 0x40
    731c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7320:	2940      	cmp	r1, #64	; 0x40
    7322:	eb00 0c02 	add.w	ip, r0, r2
    7326:	4404      	add	r4, r0
    7328:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    732c:	bf28      	it	cs
    732e:	2140      	movcs	r1, #64	; 0x40
    7330:	45f4      	cmp	ip, lr
    7332:	bf38      	it	cc
    7334:	42a5      	cmpcc	r5, r4
    7336:	f0c0 80be 	bcc.w	74b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    733a:	290b      	cmp	r1, #11
    733c:	f240 80bb 	bls.w	74b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    7340:	426c      	negs	r4, r5
    7342:	f014 0403 	ands.w	r4, r4, #3
    7346:	f000 809e 	beq.w	7486 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    734a:	5d9b      	ldrb	r3, [r3, r6]
    734c:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    7350:	2c01      	cmp	r4, #1
    7352:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7356:	f107 0e01 	add.w	lr, r7, #1
    735a:	f000 8096 	beq.w	748a <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    735e:	787b      	ldrb	r3, [r7, #1]
    7360:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    7364:	2c02      	cmp	r4, #2
    7366:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    736a:	f107 0e02 	add.w	lr, r7, #2
    736e:	f000 808e 	beq.w	748e <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    7372:	78bb      	ldrb	r3, [r7, #2]
    7374:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7378:	f107 0e03 	add.w	lr, r7, #3
    737c:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7380:	f04f 0c03 	mov.w	ip, #3
    7384:	1913      	adds	r3, r2, r4
    7386:	4403      	add	r3, r0
    7388:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    738c:	681a      	ldr	r2, [r3, #0]
    738e:	f840 2008 	str.w	r2, [r0, r8]
    7392:	1b0f      	subs	r7, r1, r4
    7394:	1f3a      	subs	r2, r7, #4
    7396:	0892      	lsrs	r2, r2, #2
    7398:	eb00 0408 	add.w	r4, r0, r8
    739c:	3201      	adds	r2, #1
    739e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    73a2:	f8c4 8004 	str.w	r8, [r4, #4]
    73a6:	2a02      	cmp	r2, #2
    73a8:	ea4f 0882 	mov.w	r8, r2, lsl #2
    73ac:	d04f      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73ae:	f8d3 9008 	ldr.w	r9, [r3, #8]
    73b2:	f8c4 9008 	str.w	r9, [r4, #8]
    73b6:	2a03      	cmp	r2, #3
    73b8:	d049      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73ba:	f8d3 900c 	ldr.w	r9, [r3, #12]
    73be:	f8c4 900c 	str.w	r9, [r4, #12]
    73c2:	2a04      	cmp	r2, #4
    73c4:	d043      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73c6:	f8d3 9010 	ldr.w	r9, [r3, #16]
    73ca:	f8c4 9010 	str.w	r9, [r4, #16]
    73ce:	2a05      	cmp	r2, #5
    73d0:	d03d      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73d2:	f8d3 9014 	ldr.w	r9, [r3, #20]
    73d6:	f8c4 9014 	str.w	r9, [r4, #20]
    73da:	2a06      	cmp	r2, #6
    73dc:	d037      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73de:	f8d3 9018 	ldr.w	r9, [r3, #24]
    73e2:	f8c4 9018 	str.w	r9, [r4, #24]
    73e6:	2a07      	cmp	r2, #7
    73e8:	d031      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73ea:	f8d3 901c 	ldr.w	r9, [r3, #28]
    73ee:	f8c4 901c 	str.w	r9, [r4, #28]
    73f2:	2a08      	cmp	r2, #8
    73f4:	d02b      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    73f6:	f8d3 9020 	ldr.w	r9, [r3, #32]
    73fa:	f8c4 9020 	str.w	r9, [r4, #32]
    73fe:	2a09      	cmp	r2, #9
    7400:	d025      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7402:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7406:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    740a:	2a0a      	cmp	r2, #10
    740c:	d01f      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    740e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7412:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7416:	2a0b      	cmp	r2, #11
    7418:	d019      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    741a:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    741e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    7422:	2a0c      	cmp	r2, #12
    7424:	d013      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7426:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    742a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    742e:	2a0d      	cmp	r2, #13
    7430:	d00d      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7432:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7436:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    743a:	2a0e      	cmp	r2, #14
    743c:	d007      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    743e:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7442:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7446:	2a0f      	cmp	r2, #15
    7448:	d001      	beq.n	744e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    744c:	63e3      	str	r3, [r4, #60]	; 0x3c
    744e:	4547      	cmp	r7, r8
    7450:	eb0c 0308 	add.w	r3, ip, r8
    7454:	eb06 0408 	add.w	r4, r6, r8
    7458:	eb0e 0c08 	add.w	ip, lr, r8
    745c:	f43f af4b 	beq.w	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7460:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    7464:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7468:	1c5a      	adds	r2, r3, #1
    746a:	4291      	cmp	r1, r2
    746c:	f67f af43 	bls.w	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7470:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7472:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7476:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7478:	4299      	cmp	r1, r3
    747a:	f67f af3c 	bls.w	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    747e:	f89c 3002 	ldrb.w	r3, [ip, #2]
    7482:	70a3      	strb	r3, [r4, #2]
    7484:	e737      	b.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7486:	46be      	mov	lr, r7
    7488:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    748a:	46a4      	mov	ip, r4
    748c:	e77a      	b.n	7384 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    748e:	f04f 0c02 	mov.w	ip, #2
    7492:	e777      	b.n	7384 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7494:	46b8      	mov	r8, r7
    7496:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7498:	9401      	str	r4, [sp, #4]
    749a:	e6a1      	b.n	71e0 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    749c:	2601      	movs	r6, #1
    749e:	9601      	str	r6, [sp, #4]
    74a0:	e69e      	b.n	71e0 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74a2:	46a4      	mov	ip, r4
    74a4:	46b9      	mov	r9, r7
    74a6:	e6fa      	b.n	729e <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    74a8:	f3bf 8f5b 	dmb	ish
    74ac:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    74b0:	f3bf 8f5b 	dmb	ish
    74b4:	e72b      	b.n	730e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    74b6:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    74ba:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    74bc:	f817 2b01 	ldrb.w	r2, [r7], #1
    74c0:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    74c4:	42a7      	cmp	r7, r4
    74c6:	d1f9      	bne.n	74bc <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    74c8:	e715      	b.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    74ca:	3c01      	subs	r4, #1
    74cc:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    74ce:	f813 6b01 	ldrb.w	r6, [r3], #1
    74d2:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74d6:	4293      	cmp	r3, r2
    74d8:	d1f9      	bne.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    74da:	e70c      	b.n	72f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    74dc:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    74e0:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    74e4:	f817 6b01 	ldrb.w	r6, [r7], #1
    74e8:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74ec:	45be      	cmp	lr, r7
    74ee:	d1f9      	bne.n	74e4 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    74f0:	e6a5      	b.n	723e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    74f2:	462c      	mov	r4, r5
    74f4:	e6a4      	b.n	7240 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    74f6:	bf00      	nop

000074f8 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    74f8:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    74fa:	f7fe ff85 	bl	6408 <_ZN9ClearCore10UsbManager8InstanceEv>
    74fe:	4b01      	ldr	r3, [pc, #4]	; (7504 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7500:	6018      	str	r0, [r3, #0]
    7502:	bd08      	pop	{r3, pc}
    7504:	20000ad0 	.word	0x20000ad0

00007508 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7508:	6a40      	ldr	r0, [r0, #36]	; 0x24
    750a:	4770      	bx	lr

0000750c <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    750c:	7900      	ldrb	r0, [r0, #4]
    750e:	4770      	bx	lr

00007510 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7510:	2001      	movs	r0, #1
    7512:	4770      	bx	lr

00007514 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    7514:	b510      	push	{r4, lr}
    7516:	4604      	mov	r4, r0
    DigitalIn() {};
    7518:	f007 f800 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    751c:	4620      	mov	r0, r4
    751e:	4b0c      	ldr	r3, [pc, #48]	; (7550 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    7520:	f840 3b30 	str.w	r3, [r0], #48
    7524:	f004 f8a2 	bl	b66c <_ZN9ClearCore13StepGeneratorC1Ev>
    7528:	4a0a      	ldr	r2, [pc, #40]	; (7554 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    752a:	6022      	str	r2, [r4, #0]
            reg = 0;
    752c:	2300      	movs	r3, #0
    MotorDriver() {};
    752e:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    7530:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    7534:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7538:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    753c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7540:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    7544:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    7548:	6322      	str	r2, [r4, #48]	; 0x30
    754a:	4620      	mov	r0, r4
    754c:	bd10      	pop	{r4, pc}
    754e:	bf00      	nop
    7550:	00023408 	.word	0x00023408
    7554:	00022c4c 	.word	0x00022c4c

00007558 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    7558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    755c:	4bbf      	ldr	r3, [pc, #764]	; (785c <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    755e:	f8df a340 	ldr.w	sl, [pc, #832]	; 78a0 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    7562:	4abf      	ldr	r2, [pc, #764]	; (7860 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    7564:	49bf      	ldr	r1, [pc, #764]	; (7864 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    7566:	4dc0      	ldr	r5, [pc, #768]	; (7868 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    7568:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    756a:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    756c:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    756e:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    7572:	7007      	strb	r7, [r0, #0]
    7574:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7576:	e88d 0108 	stmia.w	sp, {r3, r8}
    757a:	4620      	mov	r0, r4
    757c:	4bbb      	ldr	r3, [pc, #748]	; (786c <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    757e:	f00a fb0f 	bl	11ba0 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    7582:	68a1      	ldr	r1, [r4, #8]
    7584:	6862      	ldr	r2, [r4, #4]
    7586:	7b23      	ldrb	r3, [r4, #12]
    7588:	f8ca 1008 	str.w	r1, [sl, #8]
    758c:	f8ca 2004 	str.w	r2, [sl, #4]
    7590:	6921      	ldr	r1, [r4, #16]
    7592:	6962      	ldr	r2, [r4, #20]
    7594:	f88a 300c 	strb.w	r3, [sl, #12]
    7598:	69a3      	ldr	r3, [r4, #24]
    759a:	f8ca 1010 	str.w	r1, [sl, #16]
    759e:	f8ca 2014 	str.w	r2, [sl, #20]
    75a2:	69e1      	ldr	r1, [r4, #28]
    75a4:	6a22      	ldr	r2, [r4, #32]
    75a6:	f8ca 3018 	str.w	r3, [sl, #24]
    75aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    75ac:	f8ca 101c 	str.w	r1, [sl, #28]
    75b0:	f8ca 2020 	str.w	r2, [sl, #32]
    75b4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    75b8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    75bc:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    75c0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    75c4:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    75c8:	2680      	movs	r6, #128	; 0x80
    75ca:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    75cc:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    75d0:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    75d4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    75d8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    75dc:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    75e0:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    75e4:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    75e8:	a914      	add	r1, sp, #80	; 0x50
    75ea:	4632      	mov	r2, r6
    75ec:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    75f0:	f016 fe7e 	bl	1e2f0 <memcpy>
    75f4:	4632      	mov	r2, r6
    75f6:	a934      	add	r1, sp, #208	; 0xd0
    75f8:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    75fc:	f016 fe78 	bl	1e2f0 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    7600:	f8cd 8004 	str.w	r8, [sp, #4]
    7604:	499a      	ldr	r1, [pc, #616]	; (7870 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    7606:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    760a:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    760e:	9100      	str	r1, [sp, #0]
    7610:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    7614:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    7618:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    761c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7620:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    7624:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    7628:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    762c:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    7630:	4620      	mov	r0, r4
    7632:	4b90      	ldr	r3, [pc, #576]	; (7874 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    7634:	4a90      	ldr	r2, [pc, #576]	; (7878 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    7636:	4991      	ldr	r1, [pc, #580]	; (787c <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    7638:	f008 fbca 	bl	fdd0 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    763c:	6863      	ldr	r3, [r4, #4]
    763e:	606b      	str	r3, [r5, #4]
    7640:	69a3      	ldr	r3, [r4, #24]
    7642:	68a2      	ldr	r2, [r4, #8]
    7644:	f894 e00c 	ldrb.w	lr, [r4, #12]
    7648:	6920      	ldr	r0, [r4, #16]
    764a:	61ab      	str	r3, [r5, #24]
    764c:	69e3      	ldr	r3, [r4, #28]
    764e:	60aa      	str	r2, [r5, #8]
    7650:	f885 e00c 	strb.w	lr, [r5, #12]
    7654:	6962      	ldr	r2, [r4, #20]
    7656:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    765a:	6128      	str	r0, [r5, #16]
    765c:	61eb      	str	r3, [r5, #28]
    765e:	6a20      	ldr	r0, [r4, #32]
    7660:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7664:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    7668:	616a      	str	r2, [r5, #20]
    766a:	6228      	str	r0, [r5, #32]
    766c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    766e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    7670:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7674:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    7678:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    767c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7680:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    7684:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    7688:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    768c:	a914      	add	r1, sp, #80	; 0x50
    768e:	626a      	str	r2, [r5, #36]	; 0x24
    7690:	85a8      	strh	r0, [r5, #44]	; 0x2c
    7692:	4632      	mov	r2, r6
    7694:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7698:	f016 fe2a 	bl	1e2f0 <memcpy>
    769c:	4632      	mov	r2, r6
    769e:	a934      	add	r1, sp, #208	; 0xd0
    76a0:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    76a4:	f016 fe24 	bl	1e2f0 <memcpy>
    76a8:	f504 7098 	add.w	r0, r4, #304	; 0x130
    76ac:	c807      	ldmia	r0, {r0, r1, r2}
    76ae:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    76b2:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    76b6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    76ba:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    76be:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    76c2:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    76c6:	4620      	mov	r0, r4
    76c8:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    76cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    76d0:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    76d4:	f04f 0a01 	mov.w	sl, #1
    76d8:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    76dc:	f00a f806 	bl	116ec <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    76e0:	4b67      	ldr	r3, [pc, #412]	; (7880 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    76e2:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    76e4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    76e8:	4d66      	ldr	r5, [pc, #408]	; (7884 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    76ea:	f8cd a004 	str.w	sl, [sp, #4]
    76ee:	9300      	str	r3, [sp, #0]
    76f0:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    76f2:	68a6      	ldr	r6, [r4, #8]
    76f4:	71aa      	strb	r2, [r5, #6]
    76f6:	f8a5 c004 	strh.w	ip, [r5, #4]
    76fa:	60ae      	str	r6, [r5, #8]
    76fc:	4620      	mov	r0, r4
    76fe:	4b62      	ldr	r3, [pc, #392]	; (7888 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    7700:	4a62      	ldr	r2, [pc, #392]	; (788c <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    7702:	4d63      	ldr	r5, [pc, #396]	; (7890 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    7704:	f005 ff40 	bl	d588 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    7708:	f104 000c 	add.w	r0, r4, #12
    770c:	c807      	ldmia	r0, {r0, r1, r2}
    770e:	f894 e006 	ldrb.w	lr, [r4, #6]
    7712:	68a3      	ldr	r3, [r4, #8]
    7714:	88a6      	ldrh	r6, [r4, #4]
    7716:	f885 e006 	strb.w	lr, [r5, #6]
    771a:	60ab      	str	r3, [r5, #8]
    771c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7720:	69e3      	ldr	r3, [r4, #28]
    7722:	60e8      	str	r0, [r5, #12]
    7724:	6a20      	ldr	r0, [r4, #32]
    7726:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    772a:	80ae      	strh	r6, [r5, #4]
    772c:	6129      	str	r1, [r5, #16]
    772e:	7e66      	ldrb	r6, [r4, #25]
    7730:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7732:	616a      	str	r2, [r5, #20]
    7734:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    7738:	6b22      	ldr	r2, [r4, #48]	; 0x30
    773a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    773e:	61eb      	str	r3, [r5, #28]
    7740:	6228      	str	r0, [r5, #32]
    7742:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7744:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7746:	766e      	strb	r6, [r5, #25]
    7748:	6269      	str	r1, [r5, #36]	; 0x24
    774a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    774e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7752:	632a      	str	r2, [r5, #48]	; 0x30
    7754:	63a8      	str	r0, [r5, #56]	; 0x38
    7756:	636b      	str	r3, [r5, #52]	; 0x34
    7758:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    775c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7760:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7762:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7766:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    776a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    776c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7770:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7774:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7776:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7778:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    777c:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7780:	6429      	str	r1, [r5, #64]	; 0x40
    7782:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7786:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7788:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    778c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7790:	64aa      	str	r2, [r5, #72]	; 0x48
    7792:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    7796:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7798:	64eb      	str	r3, [r5, #76]	; 0x4c
    779a:	6528      	str	r0, [r5, #80]	; 0x50
    779c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    779e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    77a2:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    77a6:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    77aa:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    77ae:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    77b2:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    77b6:	662a      	str	r2, [r5, #96]	; 0x60
    77b8:	666b      	str	r3, [r5, #100]	; 0x64
    77ba:	6569      	str	r1, [r5, #84]	; 0x54
    77bc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    77be:	4b35      	ldr	r3, [pc, #212]	; (7894 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    77c0:	f8cd a000 	str.w	sl, [sp]
    77c4:	4620      	mov	r0, r4
    77c6:	66a9      	str	r1, [r5, #104]	; 0x68
    77c8:	4a33      	ldr	r2, [pc, #204]	; (7898 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    77ca:	4d34      	ldr	r5, [pc, #208]	; (789c <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    77cc:	2140      	movs	r1, #64	; 0x40
    77ce:	f006 fbe1 	bl	df94 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    77d2:	f894 e006 	ldrb.w	lr, [r4, #6]
    77d6:	68a2      	ldr	r2, [r4, #8]
    77d8:	68e3      	ldr	r3, [r4, #12]
    77da:	88a6      	ldrh	r6, [r4, #4]
    77dc:	6920      	ldr	r0, [r4, #16]
    77de:	6961      	ldr	r1, [r4, #20]
    77e0:	f885 e006 	strb.w	lr, [r5, #6]
    77e4:	60aa      	str	r2, [r5, #8]
    77e6:	f894 e018 	ldrb.w	lr, [r4, #24]
    77ea:	69e2      	ldr	r2, [r4, #28]
    77ec:	60eb      	str	r3, [r5, #12]
    77ee:	6a23      	ldr	r3, [r4, #32]
    77f0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    77f4:	80ae      	strh	r6, [r5, #4]
    77f6:	6128      	str	r0, [r5, #16]
    77f8:	7e66      	ldrb	r6, [r4, #25]
    77fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    77fc:	6169      	str	r1, [r5, #20]
    77fe:	f885 e018 	strb.w	lr, [r5, #24]
    7802:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7804:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7808:	61ea      	str	r2, [r5, #28]
    780a:	622b      	str	r3, [r5, #32]
    780c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    780e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7810:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7814:	766e      	strb	r6, [r5, #25]
    7816:	6268      	str	r0, [r5, #36]	; 0x24
    7818:	6329      	str	r1, [r5, #48]	; 0x30
    781a:	636a      	str	r2, [r5, #52]	; 0x34
    781c:	63ab      	str	r3, [r5, #56]	; 0x38
    781e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7822:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    7826:	f8cd a000 	str.w	sl, [sp]
    782a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    782e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7832:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7834:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7838:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    783c:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7840:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7842:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7846:	642a      	str	r2, [r5, #64]	; 0x40
    7848:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    784a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    784c:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7850:	652e      	str	r6, [r5, #80]	; 0x50
    7852:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7856:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7858:	64a9      	str	r1, [r5, #72]	; 0x48
    785a:	e023      	b.n	78a4 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    785c:	00022fc0 	.word	0x00022fc0
    7860:	00023020 	.word	0x00023020
    7864:	00022fb0 	.word	0x00022fb0
    7868:	20001884 	.word	0x20001884
    786c:	00022ee0 	.word	0x00022ee0
    7870:	00023000 	.word	0x00023000
    7874:	00022fa0 	.word	0x00022fa0
    7878:	00022ed0 	.word	0x00022ed0
    787c:	00022ff0 	.word	0x00022ff0
    7880:	000231c0 	.word	0x000231c0
    7884:	20001474 	.word	0x20001474
    7888:	00023180 	.word	0x00023180
    788c:	00023050 	.word	0x00023050
    7890:	200011e0 	.word	0x200011e0
    7894:	00023190 	.word	0x00023190
    7898:	00023130 	.word	0x00023130
    789c:	2000124c 	.word	0x2000124c
    78a0:	20001740 	.word	0x20001740
    78a4:	64ea      	str	r2, [r5, #76]	; 0x4c
    78a6:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    78aa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    78ae:	656e      	str	r6, [r5, #84]	; 0x54
    78b0:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    78b4:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    78b8:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    78bc:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    78c0:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    78c4:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    78c8:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    78cc:	4620      	mov	r0, r4
    78ce:	4db9      	ldr	r5, [pc, #740]	; (7bb4 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    78d0:	4bb9      	ldr	r3, [pc, #740]	; (7bb8 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    78d2:	4aba      	ldr	r2, [pc, #744]	; (7bbc <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    78d4:	2120      	movs	r1, #32
    78d6:	f006 fb5d 	bl	df94 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    78da:	f894 e006 	ldrb.w	lr, [r4, #6]
    78de:	68a2      	ldr	r2, [r4, #8]
    78e0:	68e3      	ldr	r3, [r4, #12]
    78e2:	88a6      	ldrh	r6, [r4, #4]
    78e4:	6920      	ldr	r0, [r4, #16]
    78e6:	6961      	ldr	r1, [r4, #20]
    78e8:	f885 e006 	strb.w	lr, [r5, #6]
    78ec:	60aa      	str	r2, [r5, #8]
    78ee:	f894 e018 	ldrb.w	lr, [r4, #24]
    78f2:	69e2      	ldr	r2, [r4, #28]
    78f4:	60eb      	str	r3, [r5, #12]
    78f6:	6a23      	ldr	r3, [r4, #32]
    78f8:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    78fc:	80ae      	strh	r6, [r5, #4]
    78fe:	6128      	str	r0, [r5, #16]
    7900:	7e66      	ldrb	r6, [r4, #25]
    7902:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7904:	6169      	str	r1, [r5, #20]
    7906:	f885 e018 	strb.w	lr, [r5, #24]
    790a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    790c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7910:	61ea      	str	r2, [r5, #28]
    7912:	622b      	str	r3, [r5, #32]
    7914:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7918:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    791c:	766e      	strb	r6, [r5, #25]
    791e:	6268      	str	r0, [r5, #36]	; 0x24
    7920:	6329      	str	r1, [r5, #48]	; 0x30
    7922:	636a      	str	r2, [r5, #52]	; 0x34
    7924:	63ab      	str	r3, [r5, #56]	; 0x38
    7926:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    792a:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    792e:	f8cd a000 	str.w	sl, [sp]
    7932:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7936:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    793a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    793c:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7940:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7944:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7948:	6d26      	ldr	r6, [r4, #80]	; 0x50
    794a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    794e:	642a      	str	r2, [r5, #64]	; 0x40
    7950:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7952:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7954:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7958:	652e      	str	r6, [r5, #80]	; 0x50
    795a:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    795e:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7960:	64a9      	str	r1, [r5, #72]	; 0x48
    7962:	64ea      	str	r2, [r5, #76]	; 0x4c
    7964:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7968:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    796c:	656e      	str	r6, [r5, #84]	; 0x54
    796e:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7972:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7976:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    797a:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    797e:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7982:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7986:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    798a:	4620      	mov	r0, r4
    798c:	4d8c      	ldr	r5, [pc, #560]	; (7bc0 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    798e:	4b8d      	ldr	r3, [pc, #564]	; (7bc4 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7990:	4a8d      	ldr	r2, [pc, #564]	; (7bc8 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    7992:	2110      	movs	r1, #16
    7994:	f006 fafe 	bl	df94 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7998:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    799c:	68a2      	ldr	r2, [r4, #8]
    799e:	68e3      	ldr	r3, [r4, #12]
    79a0:	79a6      	ldrb	r6, [r4, #6]
    79a2:	6920      	ldr	r0, [r4, #16]
    79a4:	6961      	ldr	r1, [r4, #20]
    79a6:	f8a5 e004 	strh.w	lr, [r5, #4]
    79aa:	60aa      	str	r2, [r5, #8]
    79ac:	f894 e018 	ldrb.w	lr, [r4, #24]
    79b0:	69e2      	ldr	r2, [r4, #28]
    79b2:	60eb      	str	r3, [r5, #12]
    79b4:	6a23      	ldr	r3, [r4, #32]
    79b6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    79ba:	71ae      	strb	r6, [r5, #6]
    79bc:	6128      	str	r0, [r5, #16]
    79be:	7e66      	ldrb	r6, [r4, #25]
    79c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    79c2:	6169      	str	r1, [r5, #20]
    79c4:	f885 e018 	strb.w	lr, [r5, #24]
    79c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    79ca:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    79ce:	61ea      	str	r2, [r5, #28]
    79d0:	622b      	str	r3, [r5, #32]
    79d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    79d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    79d6:	766e      	strb	r6, [r5, #25]
    79d8:	6268      	str	r0, [r5, #36]	; 0x24
    79da:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    79de:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    79e2:	636a      	str	r2, [r5, #52]	; 0x34
    79e4:	63ab      	str	r3, [r5, #56]	; 0x38
    79e6:	6329      	str	r1, [r5, #48]	; 0x30
    79e8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    79ec:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    79f0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    79f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    79f6:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    79fa:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    79fe:	9703      	str	r7, [sp, #12]
    7a00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7a02:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    7a06:	642b      	str	r3, [r5, #64]	; 0x40
    7a08:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7a0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7a0c:	64a9      	str	r1, [r5, #72]	; 0x48
    7a0e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    7a12:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    7a16:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7a1a:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7a20:	64ea      	str	r2, [r5, #76]	; 0x4c
    7a22:	652b      	str	r3, [r5, #80]	; 0x50
    7a24:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7a28:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7a2c:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7a30:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7a34:	6568      	str	r0, [r5, #84]	; 0x54
    7a36:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    7a3a:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    7a3e:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    7a42:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7a46:	f04f 0e68 	mov.w	lr, #104	; 0x68
    7a4a:	4d60      	ldr	r5, [pc, #384]	; (7bcc <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    7a4c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 7bec <_ZN9ClearCore10SysManagerC1Ev+0x694>
    7a50:	4e5f      	ldr	r6, [pc, #380]	; (7bd0 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    7a52:	4b60      	ldr	r3, [pc, #384]	; (7bd4 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    7a54:	4a60      	ldr	r2, [pc, #384]	; (7bd8 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    7a56:	f8cd e008 	str.w	lr, [sp, #8]
    7a5a:	4620      	mov	r0, r4
    7a5c:	2108      	movs	r1, #8
    7a5e:	9601      	str	r6, [sp, #4]
    7a60:	f8cd c000 	str.w	ip, [sp]
    7a64:	f006 fdf0 	bl	e648 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7a68:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7a6c:	68a2      	ldr	r2, [r4, #8]
    7a6e:	68e3      	ldr	r3, [r4, #12]
    7a70:	79a6      	ldrb	r6, [r4, #6]
    7a72:	6920      	ldr	r0, [r4, #16]
    7a74:	6961      	ldr	r1, [r4, #20]
    7a76:	f8a5 e004 	strh.w	lr, [r5, #4]
    7a7a:	60aa      	str	r2, [r5, #8]
    7a7c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7a80:	69e2      	ldr	r2, [r4, #28]
    7a82:	60eb      	str	r3, [r5, #12]
    7a84:	6a23      	ldr	r3, [r4, #32]
    7a86:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7a8a:	71ae      	strb	r6, [r5, #6]
    7a8c:	6128      	str	r0, [r5, #16]
    7a8e:	7e66      	ldrb	r6, [r4, #25]
    7a90:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a92:	6169      	str	r1, [r5, #20]
    7a94:	f885 e018 	strb.w	lr, [r5, #24]
    7a98:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7a9a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7a9e:	61ea      	str	r2, [r5, #28]
    7aa0:	622b      	str	r3, [r5, #32]
    7aa2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7aa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7aa6:	766e      	strb	r6, [r5, #25]
    7aa8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7aac:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7ab0:	6329      	str	r1, [r5, #48]	; 0x30
    7ab2:	636a      	str	r2, [r5, #52]	; 0x34
    7ab4:	63ab      	str	r3, [r5, #56]	; 0x38
    7ab6:	6268      	str	r0, [r5, #36]	; 0x24
    7ab8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7abc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7ac0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7ac6:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7aca:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7ace:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7ad0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7ad2:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7ad6:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7ada:	642b      	str	r3, [r5, #64]	; 0x40
    7adc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7ade:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7ae0:	64a8      	str	r0, [r5, #72]	; 0x48
    7ae2:	652a      	str	r2, [r5, #80]	; 0x50
    7ae4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7ae8:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7aec:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7af0:	64e9      	str	r1, [r5, #76]	; 0x4c
    7af2:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    7af6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7afa:	656b      	str	r3, [r5, #84]	; 0x54
    7afc:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    7b00:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    7b04:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    7b08:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    7b0c:	f04f 0c65 	mov.w	ip, #101	; 0x65
    7b10:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    7b14:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    7b18:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7b1c:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    7b20:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    7b24:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 7bf0 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    7b28:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    7b2c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7b30:	9703      	str	r7, [sp, #12]
    7b32:	f8cd c008 	str.w	ip, [sp, #8]
    7b36:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7b38:	4b28      	ldr	r3, [pc, #160]	; (7bdc <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    7b3a:	f8cd e004 	str.w	lr, [sp, #4]
    7b3e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7b40:	9300      	str	r3, [sp, #0]
    7b42:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7b46:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7b4a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7b4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7b4e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7b52:	6669      	str	r1, [r5, #100]	; 0x64
    7b54:	66aa      	str	r2, [r5, #104]	; 0x68
    7b56:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7b58:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7b5a:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7b5e:	676e      	str	r6, [r5, #116]	; 0x74
    7b60:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7b64:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7b68:	66eb      	str	r3, [r5, #108]	; 0x6c
    7b6a:	67a9      	str	r1, [r5, #120]	; 0x78
    7b6c:	67ea      	str	r2, [r5, #124]	; 0x7c
    7b6e:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7b72:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7b76:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7b7a:	4620      	mov	r0, r4
    7b7c:	4b18      	ldr	r3, [pc, #96]	; (7be0 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7b7e:	4a19      	ldr	r2, [pc, #100]	; (7be4 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7b80:	4d19      	ldr	r5, [pc, #100]	; (7be8 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    7b82:	2104      	movs	r1, #4
    7b84:	f006 fd60 	bl	e648 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7b88:	f104 000c 	add.w	r0, r4, #12
    7b8c:	c807      	ldmia	r0, {r0, r1, r2}
    7b8e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7b92:	68a3      	ldr	r3, [r4, #8]
    7b94:	79a6      	ldrb	r6, [r4, #6]
    7b96:	f8a5 e004 	strh.w	lr, [r5, #4]
    7b9a:	60ab      	str	r3, [r5, #8]
    7b9c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7ba0:	69e3      	ldr	r3, [r4, #28]
    7ba2:	60e8      	str	r0, [r5, #12]
    7ba4:	6a20      	ldr	r0, [r4, #32]
    7ba6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7baa:	71ae      	strb	r6, [r5, #6]
    7bac:	6129      	str	r1, [r5, #16]
    7bae:	7e66      	ldrb	r6, [r4, #25]
    7bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7bb2:	e01f      	b.n	7bf4 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    7bb4:	200012ac 	.word	0x200012ac
    7bb8:	000231a0 	.word	0x000231a0
    7bbc:	00023140 	.word	0x00023140
    7bc0:	2000130c 	.word	0x2000130c
    7bc4:	000231b0 	.word	0x000231b0
    7bc8:	00023150 	.word	0x00023150
    7bcc:	2000136c 	.word	0x2000136c
    7bd0:	000230d0 	.word	0x000230d0
    7bd4:	00023070 	.word	0x00023070
    7bd8:	00023160 	.word	0x00023160
    7bdc:	000230a0 	.word	0x000230a0
    7be0:	00023080 	.word	0x00023080
    7be4:	00023170 	.word	0x00023170
    7be8:	200013f0 	.word	0x200013f0
    7bec:	00023090 	.word	0x00023090
    7bf0:	000230e0 	.word	0x000230e0
    7bf4:	616a      	str	r2, [r5, #20]
    7bf6:	f885 e018 	strb.w	lr, [r5, #24]
    7bfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7bfc:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7c00:	61eb      	str	r3, [r5, #28]
    7c02:	6228      	str	r0, [r5, #32]
    7c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7c08:	766e      	strb	r6, [r5, #25]
    7c0a:	6269      	str	r1, [r5, #36]	; 0x24
    7c0c:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7c10:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7c14:	632a      	str	r2, [r5, #48]	; 0x30
    7c16:	63a8      	str	r0, [r5, #56]	; 0x38
    7c18:	636b      	str	r3, [r5, #52]	; 0x34
    7c1a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7c1e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7c22:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7c24:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7c28:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7c2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7c2e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7c32:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7c36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7c38:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7c3a:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7c3e:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7c42:	6429      	str	r1, [r5, #64]	; 0x40
    7c44:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7c48:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7c4a:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7c4e:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7c52:	64aa      	str	r2, [r5, #72]	; 0x48
    7c54:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    7c58:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    7c5c:	64eb      	str	r3, [r5, #76]	; 0x4c
    7c5e:	6528      	str	r0, [r5, #80]	; 0x50
    7c60:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7c64:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7c68:	6569      	str	r1, [r5, #84]	; 0x54
    7c6a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7c6e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7c72:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7c76:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7c7a:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    7c7e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    7c82:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7c86:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7c8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7c8c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7c8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7c90:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7c94:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7c98:	6669      	str	r1, [r5, #100]	; 0x64
    7c9a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7c9c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7c9e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7ca2:	66ab      	str	r3, [r5, #104]	; 0x68
    7ca4:	66e8      	str	r0, [r5, #108]	; 0x6c
    7ca6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    7ca8:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7cac:	676e      	str	r6, [r5, #116]	; 0x74
    7cae:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7cb2:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7cb6:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    7cb8:	4abe      	ldr	r2, [pc, #760]	; (7fb4 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    7cba:	67eb      	str	r3, [r5, #124]	; 0x7c
    7cbc:	4620      	mov	r0, r4
    7cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7cc2:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7cc6:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7cca:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7cce:	f006 fc2f 	bl	e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7cd2:	f104 000c 	add.w	r0, r4, #12
    7cd6:	c807      	ldmia	r0, {r0, r1, r2}
    7cd8:	4db7      	ldr	r5, [pc, #732]	; (7fb8 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    7cda:	68a3      	ldr	r3, [r4, #8]
    7cdc:	f894 c018 	ldrb.w	ip, [r4, #24]
    7ce0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ce4:	79a6      	ldrb	r6, [r4, #6]
    7ce6:	60ab      	str	r3, [r5, #8]
    7ce8:	f885 c018 	strb.w	ip, [r5, #24]
    7cec:	69e3      	ldr	r3, [r4, #28]
    7cee:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7cf2:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7cf6:	f8a5 e004 	strh.w	lr, [r5, #4]
    7cfa:	71ae      	strb	r6, [r5, #6]
    7cfc:	f894 e019 	ldrb.w	lr, [r4, #25]
    7d00:	6a26      	ldr	r6, [r4, #32]
    7d02:	60e8      	str	r0, [r5, #12]
    7d04:	6129      	str	r1, [r5, #16]
    7d06:	616a      	str	r2, [r5, #20]
    7d08:	61eb      	str	r3, [r5, #28]
    7d0a:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    7d10:	4aaa      	ldr	r2, [pc, #680]	; (7fbc <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    7d12:	f885 e019 	strb.w	lr, [r5, #25]
    7d16:	4620      	mov	r0, r4
    7d18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7d1c:	622e      	str	r6, [r5, #32]
    7d1e:	626b      	str	r3, [r5, #36]	; 0x24
    7d20:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7d24:	f006 fc04 	bl	e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7d28:	f104 000c 	add.w	r0, r4, #12
    7d2c:	c807      	ldmia	r0, {r0, r1, r2}
    7d2e:	4da4      	ldr	r5, [pc, #656]	; (7fc0 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    7d30:	68a3      	ldr	r3, [r4, #8]
    7d32:	f894 c018 	ldrb.w	ip, [r4, #24]
    7d36:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7d3a:	79a6      	ldrb	r6, [r4, #6]
    7d3c:	60ab      	str	r3, [r5, #8]
    7d3e:	f885 c018 	strb.w	ip, [r5, #24]
    7d42:	69e3      	ldr	r3, [r4, #28]
    7d44:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7d48:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7d4c:	f8a5 e004 	strh.w	lr, [r5, #4]
    7d50:	71ae      	strb	r6, [r5, #6]
    7d52:	f894 e019 	ldrb.w	lr, [r4, #25]
    7d56:	6a26      	ldr	r6, [r4, #32]
    7d58:	60e8      	str	r0, [r5, #12]
    7d5a:	6129      	str	r1, [r5, #16]
    7d5c:	616a      	str	r2, [r5, #20]
    7d5e:	61eb      	str	r3, [r5, #28]
    7d60:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    7d66:	4a97      	ldr	r2, [pc, #604]	; (7fc4 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    7d68:	f885 e019 	strb.w	lr, [r5, #25]
    7d6c:	4620      	mov	r0, r4
    7d6e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7d72:	622e      	str	r6, [r5, #32]
    7d74:	626b      	str	r3, [r5, #36]	; 0x24
    7d76:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7d7a:	f006 fbd9 	bl	e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7d7e:	4d92      	ldr	r5, [pc, #584]	; (7fc8 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    7d80:	88a6      	ldrh	r6, [r4, #4]
    7d82:	80ae      	strh	r6, [r5, #4]
    7d84:	f104 000c 	add.w	r0, r4, #12
    7d88:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    7d8a:	2605      	movs	r6, #5
    7d8c:	f894 e006 	ldrb.w	lr, [r4, #6]
    7d90:	68a3      	ldr	r3, [r4, #8]
    7d92:	9600      	str	r6, [sp, #0]
    7d94:	7e26      	ldrb	r6, [r4, #24]
    7d96:	f894 c019 	ldrb.w	ip, [r4, #25]
    7d9a:	f885 e006 	strb.w	lr, [r5, #6]
    7d9e:	60ab      	str	r3, [r5, #8]
    7da0:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7da4:	69e3      	ldr	r3, [r4, #28]
    7da6:	6129      	str	r1, [r5, #16]
    7da8:	616a      	str	r2, [r5, #20]
    7daa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7dac:	6a22      	ldr	r2, [r4, #32]
    7dae:	762e      	strb	r6, [r5, #24]
    7db0:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    7db4:	60e8      	str	r0, [r5, #12]
    7db6:	f885 c019 	strb.w	ip, [r5, #25]
    7dba:	61eb      	str	r3, [r5, #28]
    7dbc:	622a      	str	r2, [r5, #32]
    7dbe:	6269      	str	r1, [r5, #36]	; 0x24
    7dc0:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7dc4:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    7dc8:	4620      	mov	r0, r4
    7dca:	4d80      	ldr	r5, [pc, #512]	; (7fcc <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    7dcc:	4b80      	ldr	r3, [pc, #512]	; (7fd0 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    7dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7dd2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7dd6:	f005 fe91 	bl	dafc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7dda:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7dde:	68a2      	ldr	r2, [r4, #8]
    7de0:	68e3      	ldr	r3, [r4, #12]
    7de2:	79a6      	ldrb	r6, [r4, #6]
    7de4:	6920      	ldr	r0, [r4, #16]
    7de6:	6961      	ldr	r1, [r4, #20]
    7de8:	f8a5 e004 	strh.w	lr, [r5, #4]
    7dec:	60aa      	str	r2, [r5, #8]
    7dee:	f894 e018 	ldrb.w	lr, [r4, #24]
    7df2:	69e2      	ldr	r2, [r4, #28]
    7df4:	60eb      	str	r3, [r5, #12]
    7df6:	6a23      	ldr	r3, [r4, #32]
    7df8:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7dfc:	71ae      	strb	r6, [r5, #6]
    7dfe:	6128      	str	r0, [r5, #16]
    7e00:	7e66      	ldrb	r6, [r4, #25]
    7e02:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e04:	6169      	str	r1, [r5, #20]
    7e06:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    7e0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e0c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7e10:	61ea      	str	r2, [r5, #28]
    7e12:	622b      	str	r3, [r5, #32]
    7e14:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7e1a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7e1e:	766e      	strb	r6, [r5, #25]
    7e20:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    7e22:	2604      	movs	r6, #4
    7e24:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7e28:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7e2c:	63ab      	str	r3, [r5, #56]	; 0x38
    7e2e:	6329      	str	r1, [r5, #48]	; 0x30
    7e30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    7e32:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7e36:	4b67      	ldr	r3, [pc, #412]	; (7fd4 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    7e38:	9600      	str	r6, [sp, #0]
    7e3a:	4620      	mov	r0, r4
    7e3c:	63e9      	str	r1, [r5, #60]	; 0x3c
    7e3e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7e46:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7e4a:	f005 fe57 	bl	dafc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7e4e:	f104 0008 	add.w	r0, r4, #8
    7e52:	c80d      	ldmia	r0, {r0, r2, r3}
    7e54:	4d60      	ldr	r5, [pc, #384]	; (7fd8 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    7e56:	88a1      	ldrh	r1, [r4, #4]
    7e58:	f894 e006 	ldrb.w	lr, [r4, #6]
    7e5c:	80a9      	strh	r1, [r5, #4]
    7e5e:	f885 e006 	strb.w	lr, [r5, #6]
    7e62:	6961      	ldr	r1, [r4, #20]
    7e64:	f894 e018 	ldrb.w	lr, [r4, #24]
    7e68:	60a8      	str	r0, [r5, #8]
    7e6a:	60ea      	str	r2, [r5, #12]
    7e6c:	7e60      	ldrb	r0, [r4, #25]
    7e6e:	69e2      	ldr	r2, [r4, #28]
    7e70:	612b      	str	r3, [r5, #16]
    7e72:	6a23      	ldr	r3, [r4, #32]
    7e74:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7e78:	6169      	str	r1, [r5, #20]
    7e7a:	f885 e018 	strb.w	lr, [r5, #24]
    7e7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e80:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7e84:	7668      	strb	r0, [r5, #25]
    7e86:	61ea      	str	r2, [r5, #28]
    7e88:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    7e8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7e8e:	622b      	str	r3, [r5, #32]
    7e90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7e92:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    7e96:	6269      	str	r1, [r5, #36]	; 0x24
    7e98:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7e9c:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    7ea0:	63ab      	str	r3, [r5, #56]	; 0x38
    7ea2:	632a      	str	r2, [r5, #48]	; 0x30
    7ea4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    7ea6:	f8cd 8000 	str.w	r8, [sp]
    7eaa:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7eae:	63ea      	str	r2, [r5, #60]	; 0x3c
    7eb0:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7eb4:	4620      	mov	r0, r4
    7eb6:	4d49      	ldr	r5, [pc, #292]	; (7fdc <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    7eb8:	4b49      	ldr	r3, [pc, #292]	; (7fe0 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    7eba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7ebe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    7ec2:	f005 fe1b 	bl	dafc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7ec6:	f894 c006 	ldrb.w	ip, [r4, #6]
    7eca:	68a2      	ldr	r2, [r4, #8]
    7ecc:	68e3      	ldr	r3, [r4, #12]
    7ece:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ed2:	6920      	ldr	r0, [r4, #16]
    7ed4:	6961      	ldr	r1, [r4, #20]
    7ed6:	f885 c006 	strb.w	ip, [r5, #6]
    7eda:	60aa      	str	r2, [r5, #8]
    7edc:	f894 c018 	ldrb.w	ip, [r4, #24]
    7ee0:	69e2      	ldr	r2, [r4, #28]
    7ee2:	60eb      	str	r3, [r5, #12]
    7ee4:	6a23      	ldr	r3, [r4, #32]
    7ee6:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    7eea:	f8a5 e004 	strh.w	lr, [r5, #4]
    7eee:	6128      	str	r0, [r5, #16]
    7ef0:	f894 e019 	ldrb.w	lr, [r4, #25]
    7ef4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ef6:	6169      	str	r1, [r5, #20]
    7ef8:	f885 c018 	strb.w	ip, [r5, #24]
    7efc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7efe:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7f02:	61ea      	str	r2, [r5, #28]
    7f04:	622b      	str	r3, [r5, #32]
    7f06:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7f0c:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7f10:	f885 e019 	strb.w	lr, [r5, #25]
    7f14:	6268      	str	r0, [r5, #36]	; 0x24
    7f16:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    7f1a:	6329      	str	r1, [r5, #48]	; 0x30
    7f1c:	63ab      	str	r3, [r5, #56]	; 0x38
    7f1e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7f22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    7f24:	f8cd a000 	str.w	sl, [sp]
    7f28:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7f2c:	63ea      	str	r2, [r5, #60]	; 0x3c
    7f2e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7f32:	4620      	mov	r0, r4
    7f34:	4b2b      	ldr	r3, [pc, #172]	; (7fe4 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    7f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7f3a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    7f3e:	f005 fddd 	bl	dafc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7f42:	f104 0008 	add.w	r0, r4, #8
    7f46:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    7f48:	f8df e09c 	ldr.w	lr, [pc, #156]	; 7fe8 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    7f4c:	f894 c006 	ldrb.w	ip, [r4, #6]
    7f50:	88a5      	ldrh	r5, [r4, #4]
    7f52:	f88e c006 	strb.w	ip, [lr, #6]
    7f56:	f894 c019 	ldrb.w	ip, [r4, #25]
    7f5a:	f894 8018 	ldrb.w	r8, [r4, #24]
    7f5e:	f8ae 5004 	strh.w	r5, [lr, #4]
    7f62:	f8ce 0008 	str.w	r0, [lr, #8]
    7f66:	69e5      	ldr	r5, [r4, #28]
    7f68:	6a20      	ldr	r0, [r4, #32]
    7f6a:	f8ce 100c 	str.w	r1, [lr, #12]
    7f6e:	f8ce 2010 	str.w	r2, [lr, #16]
    7f72:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    7f76:	f8ce 3014 	str.w	r3, [lr, #20]
    7f7a:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    7f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7f80:	f88e c019 	strb.w	ip, [lr, #25]
    7f84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7f86:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7f8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7f8c:	f88e 8018 	strb.w	r8, [lr, #24]
    7f90:	f8ce 501c 	str.w	r5, [lr, #28]
    7f94:	f8ce 0020 	str.w	r0, [lr, #32]
    7f98:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    7f9c:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    7fa0:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    7fa4:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    7fa8:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    7fac:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    7fb0:	e01c      	b.n	7fec <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    7fb2:	bf00      	nop
    7fb4:	00022f30 	.word	0x00022f30
    7fb8:	20001150 	.word	0x20001150
    7fbc:	00022f40 	.word	0x00022f40
    7fc0:	20001180 	.word	0x20001180
    7fc4:	00022f50 	.word	0x00022f50
    7fc8:	200011b0 	.word	0x200011b0
    7fcc:	20000b18 	.word	0x20000b18
    7fd0:	00022f60 	.word	0x00022f60
    7fd4:	00022f70 	.word	0x00022f70
    7fd8:	20001084 	.word	0x20001084
    7fdc:	200010c8 	.word	0x200010c8
    7fe0:	00022f80 	.word	0x00022f80
    7fe4:	00022f90 	.word	0x00022f90
    7fe8:	2000110c 	.word	0x2000110c
    7fec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    7fee:	9702      	str	r7, [sp, #8]
    7ff0:	9601      	str	r6, [sp, #4]
    7ff2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    7ff6:	4dcc      	ldr	r5, [pc, #816]	; (8328 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    7ff8:	9500      	str	r5, [sp, #0]
    7ffa:	4620      	mov	r0, r4
    7ffc:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    8000:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    8004:	4bc9      	ldr	r3, [pc, #804]	; (832c <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    8006:	4aca      	ldr	r2, [pc, #808]	; (8330 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    8008:	f44f 6100 	mov.w	r1, #2048	; 0x800
    800c:	f7fc fdb4 	bl	4b78 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8010:	4bc8      	ldr	r3, [pc, #800]	; (8334 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    8012:	79a7      	ldrb	r7, [r4, #6]
    8014:	68a6      	ldr	r6, [r4, #8]
    8016:	68e5      	ldr	r5, [r4, #12]
    8018:	6920      	ldr	r0, [r4, #16]
    801a:	6961      	ldr	r1, [r4, #20]
    801c:	f894 8018 	ldrb.w	r8, [r4, #24]
    8020:	69e2      	ldr	r2, [r4, #28]
    8022:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8026:	f894 c019 	ldrb.w	ip, [r4, #25]
    802a:	719f      	strb	r7, [r3, #6]
    802c:	609e      	str	r6, [r3, #8]
    802e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8030:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    8034:	60dd      	str	r5, [r3, #12]
    8036:	6118      	str	r0, [r3, #16]
    8038:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    803c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    803e:	6159      	str	r1, [r3, #20]
    8040:	f883 8018 	strb.w	r8, [r3, #24]
    8044:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8046:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    804a:	61da      	str	r2, [r3, #28]
    804c:	6a22      	ldr	r2, [r4, #32]
    804e:	f8a3 e004 	strh.w	lr, [r3, #4]
    8052:	f883 c019 	strb.w	ip, [r3, #25]
    8056:	621a      	str	r2, [r3, #32]
    8058:	625f      	str	r7, [r3, #36]	; 0x24
    805a:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    805e:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    8062:	6358      	str	r0, [r3, #52]	; 0x34
    8064:	6399      	str	r1, [r3, #56]	; 0x38
    8066:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    806a:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    806e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8070:	649a      	str	r2, [r3, #72]	; 0x48
    8072:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    8074:	9207      	str	r2, [sp, #28]
    8076:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    807a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    807c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    8080:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8082:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    8086:	64da      	str	r2, [r3, #76]	; 0x4c
    8088:	9a07      	ldr	r2, [sp, #28]
    808a:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    808e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    8092:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    8096:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    809a:	6459      	str	r1, [r3, #68]	; 0x44
    809c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    809e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    80a0:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    80a4:	65da      	str	r2, [r3, #92]	; 0x5c
    80a6:	6f27      	ldr	r7, [r4, #112]	; 0x70
    80a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    80aa:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    80ae:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    80b2:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    80b6:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    80ba:	6f66      	ldr	r6, [r4, #116]	; 0x74
    80bc:	6558      	str	r0, [r3, #84]	; 0x54
    80be:	6599      	str	r1, [r3, #88]	; 0x58
    80c0:	661a      	str	r2, [r3, #96]	; 0x60
    80c2:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    80c6:	671f      	str	r7, [r3, #112]	; 0x70
    80c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    80cc:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    80d0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    80d4:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    80d8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    80dc:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    80e0:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    80e4:	675e      	str	r6, [r3, #116]	; 0x74
    80e6:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    80ea:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    80ee:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    80f2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    80f6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    80fa:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    80fe:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    8102:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    8106:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    810a:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    810e:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    8112:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    8116:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    811a:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    811e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    8122:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    8126:	4619      	mov	r1, r3
    8128:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    812c:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    8130:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    8134:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    8136:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    813a:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    813e:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    8142:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    8146:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    814a:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    814c:	983a      	ldr	r0, [sp, #232]	; 0xe8
    814e:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    8150:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    8154:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    8158:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    815c:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    8160:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    8164:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    8168:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    816c:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8170:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    8174:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    8178:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    817c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    8180:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    8184:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8188:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    818c:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    8190:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8192:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    8196:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    819a:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    819e:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    81a2:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    81a6:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    81aa:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    81ae:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    81b2:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    81b6:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    81ba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    81be:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    81c2:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    81c4:	9d44      	ldr	r5, [sp, #272]	; 0x110
    81c6:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    81ca:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    81ce:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    81d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    81d4:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    81d8:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    81dc:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    81e0:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    81e4:	9e49      	ldr	r6, [sp, #292]	; 0x124
    81e6:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    81e8:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    81ec:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    81f0:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    81f2:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    81f6:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    81fa:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    81fe:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    8202:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8206:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    820a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    820c:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    8210:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    8214:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    8218:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    821c:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    8220:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    8224:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    8228:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    822c:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    8230:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    8234:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    8236:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8238:	9d51      	ldr	r5, [sp, #324]	; 0x144
    823a:	9852      	ldr	r0, [sp, #328]	; 0x148
    823c:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8240:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8244:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    8248:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    824c:	9b54      	ldr	r3, [sp, #336]	; 0x150
    824e:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    8252:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    8256:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    825a:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    825e:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    8262:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    8266:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    826a:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    826e:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    8272:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    8276:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    827a:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    827e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    8282:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    8286:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    828a:	4a2b      	ldr	r2, [pc, #172]	; (8338 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    828c:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    8290:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    8294:	2401      	movs	r4, #1
    8296:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    829a:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    829e:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    82a2:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    82a6:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    82aa:	2605      	movs	r6, #5
    82ac:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    82b0:	9d58      	ldr	r5, [sp, #352]	; 0x160
    82b2:	4f22      	ldr	r7, [pc, #136]	; (833c <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    82b4:	9402      	str	r4, [sp, #8]
    82b6:	e88d 0044 	stmia.w	sp, {r2, r6}
    82ba:	a808      	add	r0, sp, #32
    82bc:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    82c0:	4b1f      	ldr	r3, [pc, #124]	; (8340 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    82c2:	4a20      	ldr	r2, [pc, #128]	; (8344 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    82c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    82c8:	f7fc fc56 	bl	4b78 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    82cc:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    82d0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    82d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    82d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    82d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    82da:	980d      	ldr	r0, [sp, #52]	; 0x34
    82dc:	71b9      	strb	r1, [r7, #6]
    82de:	990f      	ldr	r1, [sp, #60]	; 0x3c
    82e0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    82e4:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    82e8:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    82ec:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    82f0:	80ba      	strh	r2, [r7, #4]
    82f2:	60bb      	str	r3, [r7, #8]
    82f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    82f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    82f8:	60fe      	str	r6, [r7, #12]
    82fa:	613d      	str	r5, [r7, #16]
    82fc:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8300:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8302:	6178      	str	r0, [r7, #20]
    8304:	61f9      	str	r1, [r7, #28]
    8306:	9816      	ldr	r0, [sp, #88]	; 0x58
    8308:	f887 8018 	strb.w	r8, [r7, #24]
    830c:	a919      	add	r1, sp, #100	; 0x64
    830e:	623a      	str	r2, [r7, #32]
    8310:	627b      	str	r3, [r7, #36]	; 0x24
    8312:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8316:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    831a:	637d      	str	r5, [r7, #52]	; 0x34
    831c:	63b8      	str	r0, [r7, #56]	; 0x38
    831e:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    8322:	f887 c019 	strb.w	ip, [r7, #25]
    8326:	e00f      	b.n	8348 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    8328:	00023060 	.word	0x00023060
    832c:	000231d0 	.word	0x000231d0
    8330:	00023010 	.word	0x00023010
    8334:	20000b60 	.word	0x20000b60
    8338:	00023200 	.word	0x00023200
    833c:	20000ca8 	.word	0x20000ca8
    8340:	000231e0 	.word	0x000231e0
    8344:	000231f0 	.word	0x000231f0
    8348:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    834c:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    8350:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8354:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    8358:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    835c:	c90e      	ldmia	r1, {r1, r2, r3}
    835e:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8362:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    8366:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    836a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    836e:	6479      	str	r1, [r7, #68]	; 0x44
    8370:	981d      	ldr	r0, [sp, #116]	; 0x74
    8372:	991e      	ldr	r1, [sp, #120]	; 0x78
    8374:	64ba      	str	r2, [r7, #72]	; 0x48
    8376:	64fb      	str	r3, [r7, #76]	; 0x4c
    8378:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    837a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    837c:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    8380:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    8384:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8386:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8388:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    838c:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    8390:	6578      	str	r0, [r7, #84]	; 0x54
    8392:	65b9      	str	r1, [r7, #88]	; 0x58
    8394:	65fa      	str	r2, [r7, #92]	; 0x5c
    8396:	663b      	str	r3, [r7, #96]	; 0x60
    8398:	673d      	str	r5, [r7, #112]	; 0x70
    839a:	677e      	str	r6, [r7, #116]	; 0x74
    839c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    83a0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    83a4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    83a8:	9928      	ldr	r1, [sp, #160]	; 0xa0
    83aa:	982e      	ldr	r0, [sp, #184]	; 0xb8
    83ac:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    83b0:	4615      	mov	r5, r2
    83b2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    83b4:	992f      	ldr	r1, [sp, #188]	; 0xbc
    83b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    83ba:	461e      	mov	r6, r3
    83bc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    83be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    83c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    83c4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    83c8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    83ca:	9832      	ldr	r0, [sp, #200]	; 0xc8
    83cc:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    83d0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    83d4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    83d6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    83d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    83dc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    83e0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    83e2:	9836      	ldr	r0, [sp, #216]	; 0xd8
    83e4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    83e8:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    83ec:	9937      	ldr	r1, [sp, #220]	; 0xdc
    83ee:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    83f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    83f4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    83f8:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    83fc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8400:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8404:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8408:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    840a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    840c:	993b      	ldr	r1, [sp, #236]	; 0xec
    840e:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    8412:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    8416:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    841a:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    841e:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    8422:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    8426:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    842a:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    842e:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    8432:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8436:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    843a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    843e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8442:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    8446:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    844a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    844e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    8452:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8454:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    8458:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    845c:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    8460:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    8464:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    8468:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    846c:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    8470:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8474:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    847c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8480:	9943      	ldr	r1, [sp, #268]	; 0x10c
    8482:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8484:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    8488:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    848c:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    8490:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8494:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8496:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    849a:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    849e:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    84a2:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    84a6:	994b      	ldr	r1, [sp, #300]	; 0x12c
    84a8:	9d49      	ldr	r5, [sp, #292]	; 0x124
    84aa:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    84ae:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    84b2:	984a      	ldr	r0, [sp, #296]	; 0x128
    84b4:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    84b8:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    84bc:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    84c0:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    84c4:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    84c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    84cc:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    84ce:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    84d2:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    84d6:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    84da:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    84de:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    84e2:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    84e6:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    84ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    84ee:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    84f2:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    84f4:	9b50      	ldr	r3, [sp, #320]	; 0x140
    84f6:	9851      	ldr	r0, [sp, #324]	; 0x144
    84f8:	9952      	ldr	r1, [sp, #328]	; 0x148
    84fa:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    84fe:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8502:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    8506:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8508:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    850c:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8510:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    8514:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8518:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    851c:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    8520:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8524:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    8528:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    852c:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8530:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    8534:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    8538:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    853c:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8540:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    8544:	4aca      	ldr	r2, [pc, #808]	; (8870 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    8546:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    854a:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    854e:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    8552:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    8556:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    855a:	2503      	movs	r5, #3
    855c:	2602      	movs	r6, #2
    855e:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8562:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    8566:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    856a:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    856e:	9958      	ldr	r1, [sp, #352]	; 0x160
    8570:	4bc0      	ldr	r3, [pc, #768]	; (8874 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    8572:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    8576:	a808      	add	r0, sp, #32
    8578:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    857c:	4abe      	ldr	r2, [pc, #760]	; (8878 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    857e:	4fbf      	ldr	r7, [pc, #764]	; (887c <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    8580:	f44f 7100 	mov.w	r1, #512	; 0x200
    8584:	f7fc faf8 	bl	4b78 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8588:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    858c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    858e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8590:	990d      	ldr	r1, [sp, #52]	; 0x34
    8592:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8596:	980c      	ldr	r0, [sp, #48]	; 0x30
    8598:	f8a7 c004 	strh.w	ip, [r7, #4]
    859c:	60ba      	str	r2, [r7, #8]
    859e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    85a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    85a4:	60fb      	str	r3, [r7, #12]
    85a6:	6179      	str	r1, [r7, #20]
    85a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    85aa:	9915      	ldr	r1, [sp, #84]	; 0x54
    85ac:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    85b0:	f887 e006 	strb.w	lr, [r7, #6]
    85b4:	6138      	str	r0, [r7, #16]
    85b6:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    85ba:	9811      	ldr	r0, [sp, #68]	; 0x44
    85bc:	f887 c018 	strb.w	ip, [r7, #24]
    85c0:	61fa      	str	r2, [r7, #28]
    85c2:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    85c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    85c8:	623b      	str	r3, [r7, #32]
    85ca:	6379      	str	r1, [r7, #52]	; 0x34
    85cc:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    85d0:	f887 e019 	strb.w	lr, [r7, #25]
    85d4:	a919      	add	r1, sp, #100	; 0x64
    85d6:	6278      	str	r0, [r7, #36]	; 0x24
    85d8:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    85dc:	63ba      	str	r2, [r7, #56]	; 0x38
    85de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    85e2:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    85e6:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    85ea:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    85ee:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    85f2:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    85f6:	c90e      	ldmia	r1, {r1, r2, r3}
    85f8:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    85fc:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    8600:	6479      	str	r1, [r7, #68]	; 0x44
    8602:	64ba      	str	r2, [r7, #72]	; 0x48
    8604:	991d      	ldr	r1, [sp, #116]	; 0x74
    8606:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8608:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    860c:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    8610:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    8614:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    8618:	64fb      	str	r3, [r7, #76]	; 0x4c
    861a:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    861e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8620:	9820      	ldr	r0, [sp, #128]	; 0x80
    8622:	6579      	str	r1, [r7, #84]	; 0x54
    8624:	65ba      	str	r2, [r7, #88]	; 0x58
    8626:	9924      	ldr	r1, [sp, #144]	; 0x90
    8628:	9a25      	ldr	r2, [sp, #148]	; 0x94
    862a:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    862e:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    8632:	65fb      	str	r3, [r7, #92]	; 0x5c
    8634:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8638:	677a      	str	r2, [r7, #116]	; 0x74
    863a:	6638      	str	r0, [r7, #96]	; 0x60
    863c:	6739      	str	r1, [r7, #112]	; 0x70
    863e:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    8642:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    8644:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    864a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    864e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8650:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    8652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8656:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    865a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    865c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    865e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    8662:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8666:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8668:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    866a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    866e:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8672:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    8674:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    8678:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    867a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    867e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8682:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8684:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    8686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    868a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    868e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    8690:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    8694:	a939      	add	r1, sp, #228	; 0xe4
    8696:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    869c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    86a0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    86a4:	c90e      	ldmia	r1, {r1, r2, r3}
    86a6:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    86aa:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    86ae:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    86b2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    86b6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    86ba:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    86be:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    86c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    86c6:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    86ca:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    86ce:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    86d2:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    86d6:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    86da:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    86de:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    86e2:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    86e6:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    86ea:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    86ee:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    86f2:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    86f6:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    86fa:	9b42      	ldr	r3, [sp, #264]	; 0x108
    86fc:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    8700:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    8704:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8708:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    870c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8710:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8714:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8718:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    871a:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    871e:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8722:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    8726:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    872a:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    872e:	9947      	ldr	r1, [sp, #284]	; 0x11c
    8730:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    8734:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    8738:	9a49      	ldr	r2, [sp, #292]	; 0x124
    873a:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    873e:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    8742:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    8746:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    874a:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    874e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    8752:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8756:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8758:	984b      	ldr	r0, [sp, #300]	; 0x12c
    875a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    875e:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8762:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    8766:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    876a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    876e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    8770:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    8774:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8778:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    877c:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8780:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    8784:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8788:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    878c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    878e:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8790:	9a50      	ldr	r2, [sp, #320]	; 0x140
    8792:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    8796:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    879a:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    879e:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    87a2:	9852      	ldr	r0, [sp, #328]	; 0x148
    87a4:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    87a8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    87ac:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    87b0:	9a54      	ldr	r2, [sp, #336]	; 0x150
    87b2:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    87b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    87ba:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    87be:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    87c2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    87c6:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    87ca:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    87ce:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    87d2:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    87d6:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    87da:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    87de:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    87e2:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    87e6:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    87ea:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    87ee:	f04f 0800 	mov.w	r8, #0
    87f2:	f8df e098 	ldr.w	lr, [pc, #152]	; 888c <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    87f6:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    87fa:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    87fe:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    8802:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8806:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    880a:	9958      	ldr	r1, [sp, #352]	; 0x160
    880c:	4b1c      	ldr	r3, [pc, #112]	; (8880 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    880e:	9502      	str	r5, [sp, #8]
    8810:	f8cd 8004 	str.w	r8, [sp, #4]
    8814:	f8cd e000 	str.w	lr, [sp]
    8818:	a808      	add	r0, sp, #32
    881a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    881e:	4a19      	ldr	r2, [pc, #100]	; (8884 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    8820:	4f19      	ldr	r7, [pc, #100]	; (8888 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    8822:	f44f 7180 	mov.w	r1, #256	; 0x100
    8826:	f7fc f9a7 	bl	4b78 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    882a:	a80a      	add	r0, sp, #40	; 0x28
    882c:	c807      	ldmia	r0, {r0, r1, r2}
    882e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8832:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8836:	80bb      	strh	r3, [r7, #4]
    8838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    883a:	f887 e006 	strb.w	lr, [r7, #6]
    883e:	60b8      	str	r0, [r7, #8]
    8840:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    8844:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    8848:	60f9      	str	r1, [r7, #12]
    884a:	613a      	str	r2, [r7, #16]
    884c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    884e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8850:	617b      	str	r3, [r7, #20]
    8852:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8854:	f887 e018 	strb.w	lr, [r7, #24]
    8858:	7678      	strb	r0, [r7, #25]
    885a:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    885e:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    8862:	61f9      	str	r1, [r7, #28]
    8864:	623a      	str	r2, [r7, #32]
    8866:	9915      	ldr	r1, [sp, #84]	; 0x54
    8868:	9a16      	ldr	r2, [sp, #88]	; 0x58
    886a:	627b      	str	r3, [r7, #36]	; 0x24
    886c:	e010      	b.n	8890 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    886e:	bf00      	nop
    8870:	00023110 	.word	0x00023110
    8874:	000230b0 	.word	0x000230b0
    8878:	000230f0 	.word	0x000230f0
    887c:	20000df0 	.word	0x20000df0
    8880:	000230c0 	.word	0x000230c0
    8884:	00023100 	.word	0x00023100
    8888:	20000f38 	.word	0x20000f38
    888c:	00023120 	.word	0x00023120
    8890:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8894:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8898:	6379      	str	r1, [r7, #52]	; 0x34
    889a:	63ba      	str	r2, [r7, #56]	; 0x38
    889c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    88a0:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    88a4:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    88a8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    88ac:	9919      	ldr	r1, [sp, #100]	; 0x64
    88ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    88b0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    88b4:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    88b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    88ba:	6479      	str	r1, [r7, #68]	; 0x44
    88bc:	64ba      	str	r2, [r7, #72]	; 0x48
    88be:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    88c2:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    88c6:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    88ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    88cc:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    88d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    88d2:	991e      	ldr	r1, [sp, #120]	; 0x78
    88d4:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    88d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    88da:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    88de:	657b      	str	r3, [r7, #84]	; 0x54
    88e0:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    88e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    88e6:	65b9      	str	r1, [r7, #88]	; 0x58
    88e8:	65fa      	str	r2, [r7, #92]	; 0x5c
    88ea:	9924      	ldr	r1, [sp, #144]	; 0x90
    88ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
    88ee:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    88f2:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    88f6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    88fa:	6739      	str	r1, [r7, #112]	; 0x70
    88fc:	663b      	str	r3, [r7, #96]	; 0x60
    88fe:	677a      	str	r2, [r7, #116]	; 0x74
    8900:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    8904:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8906:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    890a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    890c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8910:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8912:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    8916:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8918:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    891c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    891e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8922:	9930      	ldr	r1, [sp, #192]	; 0xc0
    8924:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    8928:	9931      	ldr	r1, [sp, #196]	; 0xc4
    892a:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    892e:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8930:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    8934:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8936:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    893a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    893c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    8940:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8942:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    8946:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    894a:	9936      	ldr	r1, [sp, #216]	; 0xd8
    894c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    8950:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8952:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8956:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8958:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    895c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8960:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    8964:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    8966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    896a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    896c:	993b      	ldr	r1, [sp, #236]	; 0xec
    896e:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    8972:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    8976:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    897a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    897e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8982:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    8986:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    898a:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    898e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    8992:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    8996:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    899a:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    899e:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    89a2:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    89a6:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    89aa:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    89ae:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    89b2:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    89b6:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    89ba:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    89be:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    89c2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    89c4:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    89c8:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    89cc:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    89d0:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    89d4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    89d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    89dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    89de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    89e2:	9844      	ldr	r0, [sp, #272]	; 0x110
    89e4:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    89e8:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    89ec:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    89f0:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    89f4:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    89f8:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    89fc:	9847      	ldr	r0, [sp, #284]	; 0x11c
    89fe:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8a02:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    8a06:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8a0a:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8a0e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8a10:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    8a14:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8a1a:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8a1e:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8a20:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8a24:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8a28:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8a2c:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8a30:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8a34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8a38:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8a3a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8a3e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8a42:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    8a46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8a4a:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8a4e:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8a50:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    8a54:	9850      	ldr	r0, [sp, #320]	; 0x140
    8a56:	9951      	ldr	r1, [sp, #324]	; 0x144
    8a58:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8a5a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8a5e:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    8a62:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    8a66:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8a6a:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8a6e:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8a70:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    8a74:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    8a78:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    8a7c:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8a80:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8a84:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8a88:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    8a8c:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8a90:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    8a94:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8a98:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8a9c:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8aa0:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8aa4:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8aa8:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8aac:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8ab0:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8ab4:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8ab8:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8abc:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8ac0:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    8ac4:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    8ac6:	f8df c208 	ldr.w	ip, [pc, #520]	; 8cd0 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8aca:	9207      	str	r2, [sp, #28]
    8acc:	f8df e204 	ldr.w	lr, [pc, #516]	; 8cd4 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8ad0:	9505      	str	r5, [sp, #20]
    8ad2:	4b78      	ldr	r3, [pc, #480]	; (8cb4 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    8ad4:	9d07      	ldr	r5, [sp, #28]
    8ad6:	4878      	ldr	r0, [pc, #480]	; (8cb8 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8ad8:	f8cd e010 	str.w	lr, [sp, #16]
    8adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8ae0:	e88d 1004 	stmia.w	sp, {r2, ip}
    8ae4:	9303      	str	r3, [sp, #12]
    8ae6:	9002      	str	r0, [sp, #8]
    8ae8:	4641      	mov	r1, r8
    8aea:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8aee:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8cd8 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    8af2:	4d72      	ldr	r5, [pc, #456]	; (8cbc <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    8af4:	a808      	add	r0, sp, #32
    8af6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8afa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8afe:	f008 fba7 	bl	11250 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8b02:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b06:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8b0a:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b0c:	f8c8 1008 	str.w	r1, [r8, #8]
    8b10:	f8c8 2004 	str.w	r2, [r8, #4]
    8b14:	990d      	ldr	r1, [sp, #52]	; 0x34
    8b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b18:	f888 300c 	strb.w	r3, [r8, #12]
    8b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b1e:	f8c8 0010 	str.w	r0, [r8, #16]
    8b22:	f8c8 1014 	str.w	r1, [r8, #20]
    8b26:	9810      	ldr	r0, [sp, #64]	; 0x40
    8b28:	9911      	ldr	r1, [sp, #68]	; 0x44
    8b2a:	f8c8 2018 	str.w	r2, [r8, #24]
    8b2e:	f8c8 301c 	str.w	r3, [r8, #28]
    8b32:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8b36:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8b3a:	f8c8 0020 	str.w	r0, [r8, #32]
    8b3e:	2780      	movs	r7, #128	; 0x80
    8b40:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    8b44:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    8b48:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    8b4c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    8b50:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    8b54:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8b58:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8b5c:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8b60:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    8b64:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8b68:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8b6c:	a914      	add	r1, sp, #80	; 0x50
    8b6e:	463a      	mov	r2, r7
    8b70:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8b74:	f015 fbbc 	bl	1e2f0 <memcpy>
    8b78:	463a      	mov	r2, r7
    8b7a:	a934      	add	r1, sp, #208	; 0xd0
    8b7c:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8b80:	f015 fbb6 	bl	1e2f0 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    8b84:	4b4e      	ldr	r3, [pc, #312]	; (8cc0 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    8b86:	9303      	str	r3, [sp, #12]
    8b88:	484e      	ldr	r0, [pc, #312]	; (8cc4 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8b8a:	4a4f      	ldr	r2, [pc, #316]	; (8cc8 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8b8c:	9002      	str	r0, [sp, #8]
    8b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8b92:	9201      	str	r2, [sp, #4]
    8b94:	9300      	str	r3, [sp, #0]
    8b96:	9854      	ldr	r0, [sp, #336]	; 0x150
    8b98:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8b9a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8b9c:	9605      	str	r6, [sp, #20]
    8b9e:	4621      	mov	r1, r4
    8ba0:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    8ba2:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    8ba6:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8baa:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8bae:	9858      	ldr	r0, [sp, #352]	; 0x160
    8bb0:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    8bb4:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    8bb8:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    8bbc:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    8bc0:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    8bc2:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8bc4:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    8bc6:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    8bca:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    8bce:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    8bd2:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    8bd6:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    8bda:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    8bde:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    8be2:	a808      	add	r0, sp, #32
    8be4:	4e39      	ldr	r6, [pc, #228]	; (8ccc <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    8be6:	9604      	str	r6, [sp, #16]
    8be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8bec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8bf0:	f008 fb2e 	bl	11250 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8bf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bf8:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    8bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8bfe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8c00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8c02:	60ac      	str	r4, [r5, #8]
    8c04:	6068      	str	r0, [r5, #4]
    8c06:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8c08:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c0a:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    8c0e:	f885 e00c 	strb.w	lr, [r5, #12]
    8c12:	612a      	str	r2, [r5, #16]
    8c14:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    8c18:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8c1c:	6168      	str	r0, [r5, #20]
    8c1e:	61ae      	str	r6, [r5, #24]
    8c20:	9810      	ldr	r0, [sp, #64]	; 0x40
    8c22:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    8c26:	61ec      	str	r4, [r5, #28]
    8c28:	626b      	str	r3, [r5, #36]	; 0x24
    8c2a:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    8c2e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8c32:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    8c36:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    8c3a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    8c3e:	a914      	add	r1, sp, #80	; 0x50
    8c40:	6228      	str	r0, [r5, #32]
    8c42:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    8c46:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    8c4a:	463a      	mov	r2, r7
    8c4c:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    8c50:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8c54:	f015 fb4c 	bl	1e2f0 <memcpy>
    8c58:	463a      	mov	r2, r7
    8c5a:	a934      	add	r1, sp, #208	; 0xd0
    8c5c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8c60:	f015 fb46 	bl	1e2f0 <memcpy>
    8c64:	a855      	add	r0, sp, #340	; 0x154
    8c66:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    8c6a:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8c6c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    8c70:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8c72:	9e58      	ldr	r6, [sp, #352]	; 0x160
    8c74:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    8c78:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    8c7c:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    8c80:	995b      	ldr	r1, [sp, #364]	; 0x16c
    8c82:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    8c86:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    8c88:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    8c8c:	4648      	mov	r0, r9
    8c8e:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8c92:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    8c96:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    8c9a:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    8c9e:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    8ca2:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    8ca6:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    8caa:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    8cae:	b05f      	add	sp, #380	; 0x17c
    8cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cb4:	00022f00 	.word	0x00022f00
    8cb8:	00022ef0 	.word	0x00022ef0
    8cbc:	200015e8 	.word	0x200015e8
    8cc0:	00022f20 	.word	0x00022f20
    8cc4:	00022f10 	.word	0x00022f10
    8cc8:	00023040 	.word	0x00023040
    8ccc:	00022fe0 	.word	0x00022fe0
    8cd0:	00023030 	.word	0x00023030
    8cd4:	00022fd0 	.word	0x00022fd0
    8cd8:	20001490 	.word	0x20001490

00008cdc <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    8cdc:	2914      	cmp	r1, #20
    8cde:	dc03      	bgt.n	8ce8 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    8ce0:	4a03      	ldr	r2, [pc, #12]	; (8cf0 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    8ce2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    8ce6:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    8ce8:	4b02      	ldr	r3, [pc, #8]	; (8cf4 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    8cea:	6818      	ldr	r0, [r3, #0]
    8cec:	f006 bea0 	b.w	fa30 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    8cf0:	00022e7c 	.word	0x00022e7c
    8cf4:	20001efc 	.word	0x20001efc

00008cf8 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    8cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8cfa:	4ab1      	ldr	r2, [pc, #708]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8cfc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d00:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    8d04:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8d06:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8d0a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d0e:	065e      	lsls	r6, r3, #25
    8d10:	d4fb      	bmi.n	8d0a <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    8d12:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d16:	49aa      	ldr	r1, [pc, #680]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8d18:	2001      	movs	r0, #1
    8d1a:	f360 0303 	bfi	r3, r0, #0, #4
    8d1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8d22:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8d2a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8d2e:	684b      	ldr	r3, [r1, #4]
    8d30:	f013 0304 	ands.w	r3, r3, #4
    8d34:	d1fb      	bne.n	8d2e <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8d36:	48a3      	ldr	r0, [pc, #652]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    8d38:	4aa3      	ldr	r2, [pc, #652]	; (8fc8 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8d3a:	6981      	ldr	r1, [r0, #24]
    8d3c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    8d40:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    8d42:	6811      	ldr	r1, [r2, #0]
    8d44:	f363 0141 	bfi	r1, r3, #1, #1
    8d48:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    8d4a:	6893      	ldr	r3, [r2, #8]
    8d4c:	f013 0302 	ands.w	r3, r3, #2
    8d50:	d1fb      	bne.n	8d4a <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    8d52:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8d54:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8d56:	499a      	ldr	r1, [pc, #616]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8d58:	f040 0002 	orr.w	r0, r0, #2
    8d5c:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8d5e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8d60:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8d64:	f040 0002 	orr.w	r0, r0, #2
    8d68:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    8d6a:	6453      	str	r3, [r2, #68]	; 0x44
    8d6c:	6493      	str	r3, [r2, #72]	; 0x48
    8d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
    8d70:	6513      	str	r3, [r2, #80]	; 0x50
    8d72:	6553      	str	r3, [r2, #84]	; 0x54
    8d74:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    8d76:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8d78:	f040 0001 	orr.w	r0, r0, #1
    8d7c:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8d7e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    8d82:	f363 1286 	bfi	r2, r3, #6, #1
    8d86:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    8d8a:	460a      	mov	r2, r1
    8d8c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d90:	065d      	lsls	r5, r3, #25
    8d92:	d4fb      	bmi.n	8d8c <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    8d94:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d98:	4989      	ldr	r1, [pc, #548]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8d9a:	2001      	movs	r0, #1
    8d9c:	f360 0303 	bfi	r3, r0, #0, #4
    8da0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8da4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8dac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8db0:	684b      	ldr	r3, [r1, #4]
    8db2:	f013 0304 	ands.w	r3, r3, #4
    8db6:	d1fb      	bne.n	8db0 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8db8:	4882      	ldr	r0, [pc, #520]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    8dba:	4a84      	ldr	r2, [pc, #528]	; (8fcc <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8dbc:	6981      	ldr	r1, [r0, #24]
    8dbe:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8dc2:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    8dc4:	6811      	ldr	r1, [r2, #0]
    8dc6:	f363 0141 	bfi	r1, r3, #1, #1
    8dca:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    8dcc:	6893      	ldr	r3, [r2, #8]
    8dce:	f013 0302 	ands.w	r3, r3, #2
    8dd2:	d1fb      	bne.n	8dcc <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    8dd4:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8dd6:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8dd8:	4979      	ldr	r1, [pc, #484]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8dda:	f040 0002 	orr.w	r0, r0, #2
    8dde:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8de0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8de2:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8de6:	f040 0002 	orr.w	r0, r0, #2
    8dea:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    8dec:	6453      	str	r3, [r2, #68]	; 0x44
    8dee:	6493      	str	r3, [r2, #72]	; 0x48
    8df0:	64d3      	str	r3, [r2, #76]	; 0x4c
    8df2:	6513      	str	r3, [r2, #80]	; 0x50
    8df4:	6553      	str	r3, [r2, #84]	; 0x54
    8df6:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8df8:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    8dfc:	f363 1286 	bfi	r2, r3, #6, #1
    8e00:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    8e04:	460a      	mov	r2, r1
    8e06:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8e0a:	065c      	lsls	r4, r3, #25
    8e0c:	d4fb      	bmi.n	8e06 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    8e0e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8e12:	496b      	ldr	r1, [pc, #428]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8e14:	2006      	movs	r0, #6
    8e16:	f360 0303 	bfi	r3, r0, #0, #4
    8e1a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8e1e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e26:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8e2a:	684b      	ldr	r3, [r1, #4]
    8e2c:	f013 0318 	ands.w	r3, r3, #24
    8e30:	d1fb      	bne.n	8e2a <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8e32:	4c64      	ldr	r4, [pc, #400]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8e34:	4a62      	ldr	r2, [pc, #392]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8e36:	6960      	ldr	r0, [r4, #20]
    8e38:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    8e3c:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8e3e:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    8e42:	f363 1086 	bfi	r0, r3, #6, #1
    8e46:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    8e4a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8e4e:	0658      	lsls	r0, r3, #25
    8e50:	d4fb      	bmi.n	8e4a <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    8e52:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8e56:	495a      	ldr	r1, [pc, #360]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8e58:	2006      	movs	r0, #6
    8e5a:	f360 0303 	bfi	r3, r0, #0, #4
    8e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8e62:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8e6e:	684b      	ldr	r3, [r1, #4]
    8e70:	f013 0318 	ands.w	r3, r3, #24
    8e74:	d1fb      	bne.n	8e6e <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8e76:	4c53      	ldr	r4, [pc, #332]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8e78:	4a51      	ldr	r2, [pc, #324]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8e7a:	69a0      	ldr	r0, [r4, #24]
    8e7c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    8e80:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8e82:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    8e86:	f363 1086 	bfi	r0, r3, #6, #1
    8e8a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    8e8e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8e92:	0659      	lsls	r1, r3, #25
    8e94:	d4fb      	bmi.n	8e8e <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    8e96:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8e9a:	4949      	ldr	r1, [pc, #292]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8e9c:	2006      	movs	r0, #6
    8e9e:	f360 0303 	bfi	r3, r0, #0, #4
    8ea2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8ea6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8eae:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8eb2:	684b      	ldr	r3, [r1, #4]
    8eb4:	f013 0318 	ands.w	r3, r3, #24
    8eb8:	d1fb      	bne.n	8eb2 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8eba:	4842      	ldr	r0, [pc, #264]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8ebc:	4a40      	ldr	r2, [pc, #256]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8ebe:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8ec0:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8ec2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    8ec6:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8ec8:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    8ecc:	6a04      	ldr	r4, [r0, #32]
    8ece:	f044 0420 	orr.w	r4, r4, #32
    8ed2:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8ed4:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    8ed8:	f363 1086 	bfi	r0, r3, #6, #1
    8edc:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    8ee0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    8ee4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d1f9      	bne.n	8ee0 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    8eec:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8ef0:	4834      	ldr	r0, [pc, #208]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8ef2:	4c33      	ldr	r4, [pc, #204]	; (8fc0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8ef4:	f363 0103 	bfi	r1, r3, #0, #4
    8ef8:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8efc:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    8f00:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8f04:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8f08:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8f0a:	69c1      	ldr	r1, [r0, #28]
    8f0c:	f041 0110 	orr.w	r1, r1, #16
    8f10:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8f12:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    8f16:	f363 1186 	bfi	r1, r3, #6, #1
    8f1a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    8f1e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8f22:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8f26:	2b00      	cmp	r3, #0
    8f28:	d1f9      	bne.n	8f1e <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    8f2a:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    8f2e:	4a28      	ldr	r2, [pc, #160]	; (8fd0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8f30:	4d24      	ldr	r5, [pc, #144]	; (8fc4 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8f32:	f363 0103 	bfi	r1, r3, #0, #4
    8f36:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    8f3a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f42:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    8f46:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8f48:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8f4a:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    8f4c:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8f4e:	f044 0410 	orr.w	r4, r4, #16
    8f52:	622c      	str	r4, [r5, #32]
    8f54:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    8f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8f5c:	f04f 0e01 	mov.w	lr, #1
    8f60:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8f62:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8f64:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8f66:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    8f68:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    8f6a:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    8f6e:	6813      	ldr	r3, [r2, #0]
    8f70:	f36f 0341 	bfc	r3, #1, #1
    8f74:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8f76:	6913      	ldr	r3, [r2, #16]
    8f78:	f013 0302 	ands.w	r3, r3, #2
    8f7c:	d1fb      	bne.n	8f76 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    8f7e:	7910      	ldrb	r0, [r2, #4]
    8f80:	f040 0002 	orr.w	r0, r0, #2
    8f84:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8f86:	6810      	ldr	r0, [r2, #0]
    8f88:	f36e 0083 	bfi	r0, lr, #2, #2
    8f8c:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8f8e:	6810      	ldr	r0, [r2, #0]
    8f90:	f367 200a 	bfi	r0, r7, #8, #3
    8f94:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8f96:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8f98:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    8f9a:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    8f9e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    8fa2:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    8fa6:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    8fa8:	6813      	ldr	r3, [r2, #0]
    8faa:	f043 0302 	orr.w	r3, r3, #2
    8fae:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8fb0:	6913      	ldr	r3, [r2, #16]
    8fb2:	079b      	lsls	r3, r3, #30
    8fb4:	d4fc      	bmi.n	8fb0 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    8fb6:	4561      	cmp	r1, ip
    8fb8:	d1d7      	bne.n	8f6a <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    8fba:	b005      	add	sp, #20
    8fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fbe:	bf00      	nop
    8fc0:	40001c00 	.word	0x40001c00
    8fc4:	40000800 	.word	0x40000800
    8fc8:	41016000 	.word	0x41016000
    8fcc:	41018000 	.word	0x41018000
    8fd0:	00022e58 	.word	0x00022e58

00008fd4 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8fd4:	498b      	ldr	r1, [pc, #556]	; (9204 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    8fd6:	4a8c      	ldr	r2, [pc, #560]	; (9208 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8fd8:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    8fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    8fe2:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    8fe6:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    8fe8:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    8fea:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    8fec:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    8ff0:	4606      	mov	r6, r0
    InitClocks();
    8ff2:	f7ff fe81 	bl	8cf8 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    8ff6:	4b85      	ldr	r3, [pc, #532]	; (920c <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    8ff8:	4985      	ldr	r1, [pc, #532]	; (9210 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    8ffa:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    8ffc:	680d      	ldr	r5, [r1, #0]
    8ffe:	4f85      	ldr	r7, [pc, #532]	; (9214 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    9000:	f364 0241 	bfi	r2, r4, #1, #1
    9004:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    9006:	691a      	ldr	r2, [r3, #16]
    9008:	21a7      	movs	r1, #167	; 0xa7
    900a:	f361 4217 	bfi	r2, r1, #16, #8
    900e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    9010:	691a      	ldr	r2, [r3, #16]
    9012:	f368 0283 	bfi	r2, r8, #2, #2
    9016:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    9018:	691a      	ldr	r2, [r3, #16]
    901a:	2107      	movs	r1, #7
    901c:	f361 220b 	bfi	r2, r1, #8, #4
    9020:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    9022:	691a      	ldr	r2, [r3, #16]
    9024:	f042 0202 	orr.w	r2, r2, #2
    9028:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    902a:	4628      	mov	r0, r5
    902c:	4641      	mov	r1, r8
    902e:	f008 fbc1 	bl	117b4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    9032:	4879      	ldr	r0, [pc, #484]	; (9218 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    9034:	2100      	movs	r1, #0
    9036:	f000 fc9b 	bl	9970 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    903a:	4621      	mov	r1, r4
    903c:	4628      	mov	r0, r5
    903e:	f008 fbb9 	bl	117b4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    9042:	4b76      	ldr	r3, [pc, #472]	; (921c <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    9044:	4a76      	ldr	r2, [pc, #472]	; (9220 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    9046:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    904a:	2102      	movs	r1, #2
    904c:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    9050:	6810      	ldr	r0, [r2, #0]
    9052:	f006 fe01 	bl	fc58 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    9056:	f857 0f04 	ldr.w	r0, [r7, #4]!
    905a:	6803      	ldr	r3, [r0, #0]
    905c:	b221      	sxth	r1, r4
    905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9060:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    9062:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9064:	2c15      	cmp	r4, #21
    9066:	d1f6      	bne.n	9056 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    9068:	f005 fe14 	bl	ec94 <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    906c:	4b6d      	ldr	r3, [pc, #436]	; (9224 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    906e:	6818      	ldr	r0, [r3, #0]
    9070:	f001 ff74 	bl	af5c <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    9074:	486c      	ldr	r0, [pc, #432]	; (9228 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    9076:	f001 fac9 	bl	a60c <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    907a:	4b6c      	ldr	r3, [pc, #432]	; (922c <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    907c:	6818      	ldr	r0, [r3, #0]
    907e:	f003 ff21 	bl	cec4 <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    9082:	4b6b      	ldr	r3, [pc, #428]	; (9230 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    9084:	6818      	ldr	r0, [r3, #0]
    9086:	f006 f923 	bl	f2d0 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    908a:	4b6a      	ldr	r3, [pc, #424]	; (9234 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    908c:	6818      	ldr	r0, [r3, #0]
    908e:	f7fd f9ef 	bl	6470 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    9092:	4869      	ldr	r0, [pc, #420]	; (9238 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    9094:	f002 fd7c 	bl	bb90 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9098:	4a68      	ldr	r2, [pc, #416]	; (923c <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    909a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    909e:	f36f 1386 	bfc	r3, #6, #1
    90a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    90a6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    90aa:	f3c1 1180 	ubfx	r1, r1, #6, #1
    90ae:	2900      	cmp	r1, #0
    90b0:	d1f9      	bne.n	90a6 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    90b2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    90b6:	4c62      	ldr	r4, [pc, #392]	; (9240 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    90b8:	4f5b      	ldr	r7, [pc, #364]	; (9228 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90ba:	4b62      	ldr	r3, [pc, #392]	; (9244 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    90bc:	f8df c190 	ldr.w	ip, [pc, #400]	; 9250 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    90c0:	f361 0003 	bfi	r0, r1, #0, #4
    90c4:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    90c8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    90cc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    90d0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    90d4:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    90d6:	6961      	ldr	r1, [r4, #20]
    90d8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    90dc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    90e0:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    90e4:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    90e6:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    90e8:	f8c3 e000 	str.w	lr, [r3]
    90ec:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    90f0:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    90f4:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    90f8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    90fc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9100:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    9104:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9108:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    910c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9110:	f8c3 9000 	str.w	r9, [r3]
    9114:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9118:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    911c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    9120:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9122:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9126:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    912a:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    912e:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9132:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9136:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    913a:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    913e:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    9142:	6019      	str	r1, [r3, #0]
    9144:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9148:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    914c:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    914e:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9152:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    9156:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9158:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    915c:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9160:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9164:	6019      	str	r1, [r3, #0]
    9166:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    916a:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    916e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    9172:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9174:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9178:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    917a:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    917e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9182:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    9186:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    918a:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    918e:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9192:	f44f 7880 	mov.w	r8, #256	; 0x100
    9196:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9198:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    919c:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    919e:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91a2:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91a6:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91aa:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91ac:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91b0:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91b4:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91b6:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91ba:	f8c3 800c 	str.w	r8, [r3, #12]
    91be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    91c2:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91c6:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    91ca:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    91ce:	f000 fb7f 	bl	98d0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    91d2:	b100      	cbz	r0, 91d6 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    91d4:	e7fe      	b.n	91d4 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91d6:	4b1c      	ldr	r3, [pc, #112]	; (9248 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    91d8:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    91da:	4621      	mov	r1, r4
    91dc:	4628      	mov	r0, r5
    91de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    91e2:	f008 fad9 	bl	11798 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    91e6:	f642 043b 	movw	r4, #10299	; 0x283b
    91ea:	f000 fb9d 	bl	9928 <Microseconds>
    91ee:	42a0      	cmp	r0, r4
    91f0:	d9fb      	bls.n	91ea <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    91f2:	4b16      	ldr	r3, [pc, #88]	; (924c <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    91f4:	6818      	ldr	r0, [r3, #0]
    91f6:	f000 fcdd 	bl	9bb4 <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    91fa:	2301      	movs	r3, #1
    91fc:	7033      	strb	r3, [r6, #0]
    91fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9202:	bf00      	nop
    9204:	e000edf0 	.word	0xe000edf0
    9208:	e0001000 	.word	0xe0001000
    920c:	40001800 	.word	0x40001800
    9210:	20001f18 	.word	0x20001f18
    9214:	00022e78 	.word	0x00022e78
    9218:	0001d4c0 	.word	0x0001d4c0
    921c:	41008000 	.word	0x41008000
    9220:	20001f08 	.word	0x20001f08
    9224:	20001bfc 	.word	0x20001bfc
    9228:	200019d0 	.word	0x200019d0
    922c:	20001dfc 	.word	0x20001dfc
    9230:	20001efc 	.word	0x20001efc
    9234:	20000ad0 	.word	0x20000ad0
    9238:	20001ae8 	.word	0x20001ae8
    923c:	40001c00 	.word	0x40001c00
    9240:	40000800 	.word	0x40000800
    9244:	e000e100 	.word	0xe000e100
    9248:	e000ed00 	.word	0xe000ed00
    924c:	20001bf0 	.word	0x20001bf0
    9250:	20001be4 	.word	0x20001be4

00009254 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    9254:	b672      	cpsid	i
    9256:	4a09      	ldr	r2, [pc, #36]	; (927c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    9258:	4b09      	ldr	r3, [pc, #36]	; (9280 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    925a:	2901      	cmp	r1, #1
    925c:	bf18      	it	ne
    925e:	2300      	movne	r3, #0
    9260:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    9262:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9266:	4907      	ldr	r1, [pc, #28]	; (9284 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    9268:	4b07      	ldr	r3, [pc, #28]	; (9288 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    926a:	68ca      	ldr	r2, [r1, #12]
    926c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9270:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9272:	60cb      	str	r3, [r1, #12]
    9274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    9278:	bf00      	nop
    927a:	e7fd      	b.n	9278 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    927c:	2002fffc 	.word	0x2002fffc
    9280:	f01669ef 	.word	0xf01669ef
    9284:	e000ed00 	.word	0xe000ed00
    9288:	05fa0004 	.word	0x05fa0004

0000928c <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    928c:	4b01      	ldr	r3, [pc, #4]	; (9294 <GMAC_Handler+0x8>)
    928e:	6818      	ldr	r0, [r3, #0]
    9290:	f001 b908 	b.w	a4a4 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    9294:	20001bf0 	.word	0x20001bf0

00009298 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9298:	4801      	ldr	r0, [pc, #4]	; (92a0 <SERCOM0_0_Handler+0x8>)
    929a:	f007 bf13 	b.w	110c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    929e:	bf00      	nop
    92a0:	200015e8 	.word	0x200015e8

000092a4 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    92a4:	4801      	ldr	r0, [pc, #4]	; (92ac <SERCOM0_2_Handler+0x8>)
    92a6:	f007 bf35 	b.w	11114 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    92aa:	bf00      	nop
    92ac:	200015e8 	.word	0x200015e8

000092b0 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    92b0:	4801      	ldr	r0, [pc, #4]	; (92b8 <SERCOM0_3_Handler+0x8>)
    92b2:	f007 bf6b 	b.w	1118c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    92b6:	bf00      	nop
    92b8:	200015e8 	.word	0x200015e8

000092bc <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    92bc:	4801      	ldr	r0, [pc, #4]	; (92c4 <SERCOM2_0_Handler+0x8>)
    92be:	f007 bf01 	b.w	110c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    92c2:	bf00      	nop
    92c4:	20001740 	.word	0x20001740

000092c8 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    92c8:	4801      	ldr	r0, [pc, #4]	; (92d0 <SERCOM2_2_Handler+0x8>)
    92ca:	f007 bf23 	b.w	11114 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    92ce:	bf00      	nop
    92d0:	20001740 	.word	0x20001740

000092d4 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    92d4:	4801      	ldr	r0, [pc, #4]	; (92dc <SERCOM2_3_Handler+0x8>)
    92d6:	f007 bf59 	b.w	1118c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    92da:	bf00      	nop
    92dc:	20001740 	.word	0x20001740

000092e0 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    92e0:	4801      	ldr	r0, [pc, #4]	; (92e8 <SERCOM7_0_Handler+0x8>)
    92e2:	f007 beef 	b.w	110c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    92e6:	bf00      	nop
    92e8:	20001490 	.word	0x20001490

000092ec <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    92ec:	4801      	ldr	r0, [pc, #4]	; (92f4 <SERCOM7_2_Handler+0x8>)
    92ee:	f007 bf11 	b.w	11114 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    92f2:	bf00      	nop
    92f4:	20001490 	.word	0x20001490

000092f8 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    92f8:	4801      	ldr	r0, [pc, #4]	; (9300 <SERCOM7_3_Handler+0x8>)
    92fa:	f007 bf47 	b.w	1118c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    92fe:	bf00      	nop
    9300:	20001490 	.word	0x20001490

00009304 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    9304:	4b02      	ldr	r3, [pc, #8]	; (9310 <EIC_0_Handler+0xc>)
    9306:	2100      	movs	r1, #0
    9308:	6818      	ldr	r0, [r3, #0]
    930a:	f006 bced 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    930e:	bf00      	nop
    9310:	20001f08 	.word	0x20001f08

00009314 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    9314:	4b02      	ldr	r3, [pc, #8]	; (9320 <EIC_1_Handler+0xc>)
    9316:	2101      	movs	r1, #1
    9318:	6818      	ldr	r0, [r3, #0]
    931a:	f006 bce5 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    931e:	bf00      	nop
    9320:	20001f08 	.word	0x20001f08

00009324 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    9324:	4b02      	ldr	r3, [pc, #8]	; (9330 <EIC_2_Handler+0xc>)
    9326:	2102      	movs	r1, #2
    9328:	6818      	ldr	r0, [r3, #0]
    932a:	f006 bcdd 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    932e:	bf00      	nop
    9330:	20001f08 	.word	0x20001f08

00009334 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    9334:	4b02      	ldr	r3, [pc, #8]	; (9340 <EIC_3_Handler+0xc>)
    9336:	2103      	movs	r1, #3
    9338:	6818      	ldr	r0, [r3, #0]
    933a:	f006 bcd5 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    933e:	bf00      	nop
    9340:	20001f08 	.word	0x20001f08

00009344 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    9344:	4b02      	ldr	r3, [pc, #8]	; (9350 <EIC_4_Handler+0xc>)
    9346:	2104      	movs	r1, #4
    9348:	6818      	ldr	r0, [r3, #0]
    934a:	f006 bccd 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    934e:	bf00      	nop
    9350:	20001f08 	.word	0x20001f08

00009354 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    9354:	4b02      	ldr	r3, [pc, #8]	; (9360 <EIC_5_Handler+0xc>)
    9356:	2105      	movs	r1, #5
    9358:	6818      	ldr	r0, [r3, #0]
    935a:	f006 bcc5 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    935e:	bf00      	nop
    9360:	20001f08 	.word	0x20001f08

00009364 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    9364:	4b02      	ldr	r3, [pc, #8]	; (9370 <EIC_6_Handler+0xc>)
    9366:	2106      	movs	r1, #6
    9368:	6818      	ldr	r0, [r3, #0]
    936a:	f006 bcbd 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    936e:	bf00      	nop
    9370:	20001f08 	.word	0x20001f08

00009374 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    9374:	4b02      	ldr	r3, [pc, #8]	; (9380 <EIC_7_Handler+0xc>)
    9376:	2107      	movs	r1, #7
    9378:	6818      	ldr	r0, [r3, #0]
    937a:	f006 bcb5 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    937e:	bf00      	nop
    9380:	20001f08 	.word	0x20001f08

00009384 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    9384:	4b02      	ldr	r3, [pc, #8]	; (9390 <EIC_8_Handler+0xc>)
    9386:	2108      	movs	r1, #8
    9388:	6818      	ldr	r0, [r3, #0]
    938a:	f006 bcad 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    938e:	bf00      	nop
    9390:	20001f08 	.word	0x20001f08

00009394 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    9394:	4b02      	ldr	r3, [pc, #8]	; (93a0 <EIC_9_Handler+0xc>)
    9396:	2109      	movs	r1, #9
    9398:	6818      	ldr	r0, [r3, #0]
    939a:	f006 bca5 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    939e:	bf00      	nop
    93a0:	20001f08 	.word	0x20001f08

000093a4 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    93a4:	4b02      	ldr	r3, [pc, #8]	; (93b0 <EIC_10_Handler+0xc>)
    93a6:	210a      	movs	r1, #10
    93a8:	6818      	ldr	r0, [r3, #0]
    93aa:	f006 bc9d 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93ae:	bf00      	nop
    93b0:	20001f08 	.word	0x20001f08

000093b4 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    93b4:	4b02      	ldr	r3, [pc, #8]	; (93c0 <EIC_11_Handler+0xc>)
    93b6:	210b      	movs	r1, #11
    93b8:	6818      	ldr	r0, [r3, #0]
    93ba:	f006 bc95 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93be:	bf00      	nop
    93c0:	20001f08 	.word	0x20001f08

000093c4 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    93c4:	4b01      	ldr	r3, [pc, #4]	; (93cc <EIC_12_Handler+0x8>)
    93c6:	6818      	ldr	r0, [r3, #0]
    93c8:	f000 beb0 	b.w	a12c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    93cc:	20001bf0 	.word	0x20001bf0

000093d0 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    93d0:	4b02      	ldr	r3, [pc, #8]	; (93dc <EIC_13_Handler+0xc>)
    93d2:	210d      	movs	r1, #13
    93d4:	6818      	ldr	r0, [r3, #0]
    93d6:	f006 bc87 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93da:	bf00      	nop
    93dc:	20001f08 	.word	0x20001f08

000093e0 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    93e0:	4b02      	ldr	r3, [pc, #8]	; (93ec <EIC_14_Handler+0xc>)
    93e2:	210e      	movs	r1, #14
    93e4:	6818      	ldr	r0, [r3, #0]
    93e6:	f006 bc7f 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93ea:	bf00      	nop
    93ec:	20001f08 	.word	0x20001f08

000093f0 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    93f0:	4b02      	ldr	r3, [pc, #8]	; (93fc <EIC_15_Handler+0xc>)
    93f2:	210f      	movs	r1, #15
    93f4:	6818      	ldr	r0, [r3, #0]
    93f6:	f006 bc77 	b.w	fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93fa:	bf00      	nop
    93fc:	20001f08 	.word	0x20001f08

00009400 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9400:	4b02      	ldr	r3, [pc, #8]	; (940c <TCC3_0_Handler+0xc>)
    9402:	4a03      	ldr	r2, [pc, #12]	; (9410 <TCC3_0_Handler+0x10>)
    9404:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    9406:	4803      	ldr	r0, [pc, #12]	; (9414 <TCC3_0_Handler+0x14>)
    9408:	f005 b9ce 	b.w	e7a8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    940c:	42001000 	.word	0x42001000
    9410:	003ffc0f 	.word	0x003ffc0f
    9414:	200013f0 	.word	0x200013f0

00009418 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    9418:	4b02      	ldr	r3, [pc, #8]	; (9424 <TCC4_0_Handler+0xc>)
    941a:	4a03      	ldr	r2, [pc, #12]	; (9428 <TCC4_0_Handler+0x10>)
    941c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    941e:	4803      	ldr	r0, [pc, #12]	; (942c <TCC4_0_Handler+0x14>)
    9420:	f005 b9c2 	b.w	e7a8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    9424:	43001000 	.word	0x43001000
    9428:	003ffc0f 	.word	0x003ffc0f
    942c:	2000136c 	.word	0x2000136c

00009430 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    9430:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    9432:	4b0d      	ldr	r3, [pc, #52]	; (9468 <SysTick_Handler+0x38>)
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	b103      	cbz	r3, 943a <SysTick_Handler+0xa>
    9438:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    943a:	4b0c      	ldr	r3, [pc, #48]	; (946c <SysTick_Handler+0x3c>)
    943c:	781b      	ldrb	r3, [r3, #0]
    943e:	2b00      	cmp	r3, #0
    9440:	d0fa      	beq.n	9438 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    9442:	4b0b      	ldr	r3, [pc, #44]	; (9470 <SysTick_Handler+0x40>)
    9444:	6818      	ldr	r0, [r3, #0]
    9446:	f006 fa99 	bl	f97c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    944a:	480a      	ldr	r0, [pc, #40]	; (9474 <SysTick_Handler+0x44>)
    944c:	f7fb fd2c 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9450:	4809      	ldr	r0, [pc, #36]	; (9478 <SysTick_Handler+0x48>)
    9452:	f7fb fd29 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9456:	4809      	ldr	r0, [pc, #36]	; (947c <SysTick_Handler+0x4c>)
    9458:	f7fb fd26 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    945c:	4808      	ldr	r0, [pc, #32]	; (9480 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    945e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    9462:	f7fb bd21 	b.w	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9466:	bf00      	nop
    9468:	20001080 	.word	0x20001080
    946c:	200019cc 	.word	0x200019cc
    9470:	20001efc 	.word	0x20001efc
    9474:	20000b60 	.word	0x20000b60
    9478:	20000ca8 	.word	0x20000ca8
    947c:	20000df0 	.word	0x20000df0
    9480:	20000f38 	.word	0x20000f38

00009484 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    9484:	4a30      	ldr	r2, [pc, #192]	; (9548 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    9486:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    948a:	4b30      	ldr	r3, [pc, #192]	; (954c <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    948c:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    948e:	4a30      	ldr	r2, [pc, #192]	; (9550 <TCC0_0_Handler+0xcc>)
    9490:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    9492:	4630      	mov	r0, r6
    9494:	f000 f9ca 	bl	982c <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9498:	4b2e      	ldr	r3, [pc, #184]	; (9554 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    949a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9590 <TCC0_0_Handler+0x10c>
    949e:	f8d3 9000 	ldr.w	r9, [r3]
    94a2:	4648      	mov	r0, r9
    94a4:	f005 ff88 	bl	f3b8 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    94a8:	4b2b      	ldr	r3, [pc, #172]	; (9558 <TCC0_0_Handler+0xd4>)
    94aa:	6818      	ldr	r0, [r3, #0]
    94ac:	f003 fec4 	bl	d238 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    94b0:	4b2a      	ldr	r3, [pc, #168]	; (955c <TCC0_0_Handler+0xd8>)
    94b2:	6818      	ldr	r0, [r3, #0]
    94b4:	f008 fa14 	bl	118e0 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    94b8:	4b29      	ldr	r3, [pc, #164]	; (9560 <TCC0_0_Handler+0xdc>)
    94ba:	6818      	ldr	r0, [r3, #0]
    94bc:	f7fd fe22 	bl	7104 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    94c0:	4b28      	ldr	r3, [pc, #160]	; (9564 <TCC0_0_Handler+0xe0>)
    94c2:	681f      	ldr	r7, [r3, #0]
    94c4:	4638      	mov	r0, r7
    94c6:	f006 fc3d 	bl	fd44 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    94ca:	f898 3000 	ldrb.w	r3, [r8]
    94ce:	b15b      	cbz	r3, 94e8 <TCC0_0_Handler+0x64>
    94d0:	4c25      	ldr	r4, [pc, #148]	; (9568 <TCC0_0_Handler+0xe4>)
    94d2:	4826      	ldr	r0, [pc, #152]	; (956c <TCC0_0_Handler+0xe8>)
    94d4:	f104 0550 	add.w	r5, r4, #80	; 0x50
    94d8:	e001      	b.n	94de <TCC0_0_Handler+0x5a>
    94da:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    94de:	6803      	ldr	r3, [r0, #0]
    94e0:	6a1b      	ldr	r3, [r3, #32]
    94e2:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    94e4:	42ac      	cmp	r4, r5
    94e6:	d1f8      	bne.n	94da <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    94e8:	4638      	mov	r0, r7
    94ea:	f006 fc3f 	bl	fd6c <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    94ee:	4820      	ldr	r0, [pc, #128]	; (9570 <TCC0_0_Handler+0xec>)
    94f0:	f002 fb7c 	bl	bbec <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    94f4:	481f      	ldr	r0, [pc, #124]	; (9574 <TCC0_0_Handler+0xf0>)
    94f6:	f001 f95b 	bl	a7b0 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    94fa:	4630      	mov	r0, r6
    94fc:	f000 f9ac 	bl	9858 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9500:	4a1d      	ldr	r2, [pc, #116]	; (9578 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    9502:	491e      	ldr	r1, [pc, #120]	; (957c <TCC0_0_Handler+0xf8>)
    tickCnt++;
    9504:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    9506:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9508:	3301      	adds	r3, #1
    950a:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    950c:	b111      	cbz	r1, 9514 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    950e:	f898 3000 	ldrb.w	r3, [r8]
    9512:	b923      	cbnz	r3, 951e <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    9514:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    9516:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    951a:	f000 b98d 	b.w	9838 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    951e:	4648      	mov	r0, r9
    9520:	f006 fa2c 	bl	f97c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    9524:	4816      	ldr	r0, [pc, #88]	; (9580 <TCC0_0_Handler+0xfc>)
    9526:	f7fb fcbf 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    952a:	4816      	ldr	r0, [pc, #88]	; (9584 <TCC0_0_Handler+0x100>)
    952c:	f7fb fcbc 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9530:	4815      	ldr	r0, [pc, #84]	; (9588 <TCC0_0_Handler+0x104>)
    9532:	f7fb fcb9 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9536:	4815      	ldr	r0, [pc, #84]	; (958c <TCC0_0_Handler+0x108>)
    9538:	f7fb fcb6 	bl	4ea8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    953c:	4630      	mov	r0, r6
}
    953e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9542:	f000 b979 	b.w	9838 <_ZN9ClearCore9SysTiming6IsrEndEv>
    9546:	bf00      	nop
    9548:	20001be4 	.word	0x20001be4
    954c:	41016000 	.word	0x41016000
    9550:	003ffc0f 	.word	0x003ffc0f
    9554:	20001efc 	.word	0x20001efc
    9558:	20001dfc 	.word	0x20001dfc
    955c:	20001f18 	.word	0x20001f18
    9560:	20000ad0 	.word	0x20000ad0
    9564:	20001f08 	.word	0x20001f08
    9568:	00022e7c 	.word	0x00022e7c
    956c:	200011e0 	.word	0x200011e0
    9570:	20001ae8 	.word	0x20001ae8
    9574:	200019d0 	.word	0x200019d0
    9578:	20001be0 	.word	0x20001be0
    957c:	20001080 	.word	0x20001080
    9580:	20000b60 	.word	0x20000b60
    9584:	20000ca8 	.word	0x20000ca8
    9588:	20000df0 	.word	0x20000df0
    958c:	20000f38 	.word	0x20000f38
    9590:	200019cc 	.word	0x200019cc

00009594 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    9594:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    9596:	4813      	ldr	r0, [pc, #76]	; (95e4 <Reset_Handler+0x50>)
    9598:	4b13      	ldr	r3, [pc, #76]	; (95e8 <Reset_Handler+0x54>)
    959a:	4298      	cmp	r0, r3
    959c:	d00b      	beq.n	95b6 <Reset_Handler+0x22>
    959e:	4913      	ldr	r1, [pc, #76]	; (95ec <Reset_Handler+0x58>)
    95a0:	4281      	cmp	r1, r0
    95a2:	d008      	beq.n	95b6 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    95a4:	4298      	cmp	r0, r3
    95a6:	d206      	bcs.n	95b6 <Reset_Handler+0x22>
            *pDest = *pSrc;
    95a8:	43c2      	mvns	r2, r0
    95aa:	441a      	add	r2, r3
    95ac:	f022 0203 	bic.w	r2, r2, #3
    95b0:	3204      	adds	r2, #4
    95b2:	f014 fe9d 	bl	1e2f0 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    95b6:	480e      	ldr	r0, [pc, #56]	; (95f0 <Reset_Handler+0x5c>)
    95b8:	4b0e      	ldr	r3, [pc, #56]	; (95f4 <Reset_Handler+0x60>)
    95ba:	4298      	cmp	r0, r3
    95bc:	d008      	beq.n	95d0 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    95be:	d207      	bcs.n	95d0 <Reset_Handler+0x3c>
            *pDest = 0ul;
    95c0:	43c2      	mvns	r2, r0
    95c2:	441a      	add	r2, r3
    95c4:	f022 0203 	bic.w	r2, r2, #3
    95c8:	3204      	adds	r2, #4
    95ca:	2100      	movs	r1, #0
    95cc:	f014 ff8e 	bl	1e4ec <memset>
        }
    }

    SystemInit();
    95d0:	f002 f93a 	bl	b848 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    95d4:	f014 fb06 	bl	1dbe4 <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    95d8:	4807      	ldr	r0, [pc, #28]	; (95f8 <Reset_Handler+0x64>)
    95da:	f7ff fcfb 	bl	8fd4 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    95de:	f7fa ffe3 	bl	45a8 <main>
    95e2:	e7fe      	b.n	95e2 <Reset_Handler+0x4e>
    95e4:	20000000 	.word	0x20000000
    95e8:	20000ab0 	.word	0x20000ab0
    95ec:	000251c4 	.word	0x000251c4
    95f0:	20000ab0 	.word	0x20000ab0
    95f4:	200023a0 	.word	0x200023a0
    95f8:	200019cc 	.word	0x200019cc

000095fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    95fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    9600:	4852      	ldr	r0, [pc, #328]	; (974c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    9602:	4d53      	ldr	r5, [pc, #332]	; (9750 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    9604:	4c53      	ldr	r4, [pc, #332]	; (9754 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    9606:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 97c4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    960a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 97c8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    960e:	4f52      	ldr	r7, [pc, #328]	; (9758 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    9610:	f002 fa94 	bl	bb3c <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    9614:	4b51      	ldr	r3, [pc, #324]	; (975c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    9616:	4a52      	ldr	r2, [pc, #328]	; (9760 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    9618:	4852      	ldr	r0, [pc, #328]	; (9764 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    961a:	601a      	str	r2, [r3, #0]
    961c:	2600      	movs	r6, #0
    961e:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9622:	f000 ff61 	bl	a4e8 <_ZN9ClearCore13ShiftRegisterC1Ev>
    9626:	4b50      	ldr	r3, [pc, #320]	; (9768 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    9628:	4a50      	ldr	r2, [pc, #320]	; (976c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    962a:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    962e:	4628      	mov	r0, r5
    9630:	601a      	str	r2, [r3, #0]
    9632:	f004 ff73 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    9636:	4b4e      	ldr	r3, [pc, #312]	; (9770 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    9638:	602b      	str	r3, [r5, #0]
    963a:	4620      	mov	r0, r4
    963c:	f004 ff6e 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    9640:	4b4c      	ldr	r3, [pc, #304]	; (9774 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    9642:	6023      	str	r3, [r4, #0]
    9644:	4648      	mov	r0, r9
    9646:	f004 ff69 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    964a:	4c4b      	ldr	r4, [pc, #300]	; (9778 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    964c:	4d4b      	ldr	r5, [pc, #300]	; (977c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    964e:	f8c9 4000 	str.w	r4, [r9]
    9652:	4640      	mov	r0, r8
    9654:	f004 ff62 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    9658:	f8df 9170 	ldr.w	r9, [pc, #368]	; 97cc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    965c:	f8c8 4000 	str.w	r4, [r8]
    9660:	4638      	mov	r0, r7
    9662:	f004 ff5b 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    9666:	f8df 8168 	ldr.w	r8, [pc, #360]	; 97d0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    966a:	603c      	str	r4, [r7, #0]
    966c:	4628      	mov	r0, r5
    966e:	f004 ff55 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    9672:	4c43      	ldr	r4, [pc, #268]	; (9780 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    9674:	4f43      	ldr	r7, [pc, #268]	; (9784 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    9676:	602c      	str	r4, [r5, #0]
    9678:	4648      	mov	r0, r9
    967a:	f004 ff4f 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    967e:	4d42      	ldr	r5, [pc, #264]	; (9788 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    9680:	f8c9 4000 	str.w	r4, [r9]
    9684:	4640      	mov	r0, r8
    9686:	f004 ff49 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    968a:	4c40      	ldr	r4, [pc, #256]	; (978c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    968c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 97d4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    9690:	f8c8 4000 	str.w	r4, [r8]
    9694:	4638      	mov	r0, r7
    9696:	f004 ff41 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    969a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 97d8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    969e:	603c      	str	r4, [r7, #0]
    96a0:	4628      	mov	r0, r5
    96a2:	f004 ff3b 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    96a6:	4f3a      	ldr	r7, [pc, #232]	; (9790 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    96a8:	602c      	str	r4, [r5, #0]
    96aa:	4648      	mov	r0, r9
    96ac:	f004 ff36 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    96b0:	4c38      	ldr	r4, [pc, #224]	; (9794 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    96b2:	4d39      	ldr	r5, [pc, #228]	; (9798 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    96b4:	f8c9 4000 	str.w	r4, [r9]
    96b8:	4640      	mov	r0, r8
    96ba:	f004 ff2f 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    96be:	4638      	mov	r0, r7
    96c0:	f8c8 4000 	str.w	r4, [r8]
    96c4:	f004 ff2a 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    96c8:	4628      	mov	r0, r5
    96ca:	603c      	str	r4, [r7, #0]
    96cc:	f004 ff26 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    96d0:	4832      	ldr	r0, [pc, #200]	; (979c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    96d2:	602c      	str	r4, [r5, #0]
    96d4:	f7fd ff1e 	bl	7514 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    96d8:	4831      	ldr	r0, [pc, #196]	; (97a0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    96da:	f8df 8100 	ldr.w	r8, [pc, #256]	; 97dc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    96de:	4d31      	ldr	r5, [pc, #196]	; (97a4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    96e0:	4c31      	ldr	r4, [pc, #196]	; (97a8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    96e2:	4f32      	ldr	r7, [pc, #200]	; (97ac <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    96e4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 97e0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    96e8:	f7fd ff14 	bl	7514 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    96ec:	4830      	ldr	r0, [pc, #192]	; (97b0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    96ee:	f7fd ff11 	bl	7514 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    96f2:	4830      	ldr	r0, [pc, #192]	; (97b4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    96f4:	f7fd ff0e 	bl	7514 <_ZN9ClearCore11MotorDriverC1Ev>
    96f8:	4640      	mov	r0, r8
    96fa:	4b2f      	ldr	r3, [pc, #188]	; (97b8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    96fc:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    9700:	f004 ff0c 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    9704:	4b2d      	ldr	r3, [pc, #180]	; (97bc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    9706:	f8c8 3000 	str.w	r3, [r8]
    970a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    970e:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    9710:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    9714:	f8c5 9000 	str.w	r9, [r5]
    9718:	f8c8 3004 	str.w	r3, [r8, #4]
    971c:	f004 fefe 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    9720:	f107 0874 	add.w	r8, r7, #116	; 0x74
    9724:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    9728:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    972c:	f8c4 9000 	str.w	r9, [r4]
    9730:	602f      	str	r7, [r5, #0]
    9732:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    9736:	f004 fef1 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    973a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    973e:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    9740:	481f      	ldr	r0, [pc, #124]	; (97c0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    9742:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    9746:	f7fd bf07 	b.w	7558 <_ZN9ClearCore10SysManagerC1Ev>
    974a:	bf00      	nop
    974c:	20001ae8 	.word	0x20001ae8
    9750:	20001474 	.word	0x20001474
    9754:	200011e0 	.word	0x200011e0
    9758:	2000130c 	.word	0x2000130c
    975c:	20001884 	.word	0x20001884
    9760:	00022dc0 	.word	0x00022dc0
    9764:	200019d0 	.word	0x200019d0
    9768:	20001740 	.word	0x20001740
    976c:	00022e10 	.word	0x00022e10
    9770:	000235c0 	.word	0x000235c0
    9774:	00023328 	.word	0x00023328
    9778:	00023388 	.word	0x00023388
    977c:	2000136c 	.word	0x2000136c
    9780:	00023438 	.word	0x00023438
    9784:	20001180 	.word	0x20001180
    9788:	200011b0 	.word	0x200011b0
    978c:	00023408 	.word	0x00023408
    9790:	200010c8 	.word	0x200010c8
    9794:	00023358 	.word	0x00023358
    9798:	2000110c 	.word	0x2000110c
    979c:	20000b60 	.word	0x20000b60
    97a0:	20000ca8 	.word	0x20000ca8
    97a4:	20001490 	.word	0x20001490
    97a8:	200015e8 	.word	0x200015e8
    97ac:	0002351c 	.word	0x0002351c
    97b0:	20000df0 	.word	0x20000df0
    97b4:	20000f38 	.word	0x20000f38
    97b8:	00022cbc 	.word	0x00022cbc
    97bc:	00022d0c 	.word	0x00022d0c
    97c0:	200019cc 	.word	0x200019cc
    97c4:	2000124c 	.word	0x2000124c
    97c8:	200012ac 	.word	0x200012ac
    97cc:	200013f0 	.word	0x200013f0
    97d0:	20001150 	.word	0x20001150
    97d4:	20000b18 	.word	0x20000b18
    97d8:	20001084 	.word	0x20001084
    97dc:	20001480 	.word	0x20001480
    97e0:	000234ac 	.word	0x000234ac

000097e4 <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    97e4:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    97e6:	4d0f      	ldr	r5, [pc, #60]	; (9824 <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    97e8:	682c      	ldr	r4, [r5, #0]
    97ea:	f014 0401 	ands.w	r4, r4, #1
    97ee:	d002      	beq.n	97f6 <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    97f0:	4b0d      	ldr	r3, [pc, #52]	; (9828 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    97f2:	6818      	ldr	r0, [r3, #0]
    97f4:	bd70      	pop	{r4, r5, r6, pc}
    97f6:	2030      	movs	r0, #48	; 0x30
    97f8:	f009 fdf6 	bl	133e8 <_Znwj>
    97fc:	4a0a      	ldr	r2, [pc, #40]	; (9828 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    97fe:	6004      	str	r4, [r0, #0]
    9800:	2105      	movs	r1, #5
    9802:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    9806:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9808:	7501      	strb	r1, [r0, #20]
    980a:	6084      	str	r4, [r0, #8]
    980c:	60c4      	str	r4, [r0, #12]
    980e:	6104      	str	r4, [r0, #16]
    9810:	6184      	str	r4, [r0, #24]
    9812:	61c4      	str	r4, [r0, #28]
    9814:	6204      	str	r4, [r0, #32]
    9816:	6244      	str	r4, [r0, #36]	; 0x24
    9818:	6284      	str	r4, [r0, #40]	; 0x28
    981a:	62c4      	str	r4, [r0, #44]	; 0x2c
    981c:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    981e:	6010      	str	r0, [r2, #0]
    9820:	602b      	str	r3, [r5, #0]
    return *instance;
}
    9822:	bd70      	pop	{r4, r5, r6, pc}
    9824:	20001bdc 	.word	0x20001bdc
    9828:	20001be8 	.word	0x20001be8

0000982c <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    982c:	4b01      	ldr	r3, [pc, #4]	; (9834 <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    982e:	685b      	ldr	r3, [r3, #4]
    9830:	6003      	str	r3, [r0, #0]
    9832:	4770      	bx	lr
    9834:	e0001000 	.word	0xe0001000

00009838 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9838:	4b06      	ldr	r3, [pc, #24]	; (9854 <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    983a:	6801      	ldr	r1, [r0, #0]
    983c:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    983e:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9840:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    9842:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    9844:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    9846:	bf38      	it	cc
    9848:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    984a:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    984c:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    984e:	bf88      	it	hi
    9850:	6083      	strhi	r3, [r0, #8]
    9852:	4770      	bx	lr
    9854:	e0001000 	.word	0xe0001000

00009858 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9858:	4a1c      	ldr	r2, [pc, #112]	; (98cc <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    985a:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    985c:	68d3      	ldr	r3, [r2, #12]
    985e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9862:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    9864:	7d03      	ldrb	r3, [r0, #20]
    9866:	3b01      	subs	r3, #1
    9868:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    986a:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    986c:	7503      	strb	r3, [r0, #20]
    986e:	b923      	cbnz	r3, 987a <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    9870:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9872:	2205      	movs	r2, #5
        m_msTickCnt++;
    9874:	3301      	adds	r3, #1
    9876:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9878:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    987a:	6825      	ldr	r5, [r4, #0]
    987c:	69a3      	ldr	r3, [r4, #24]
    987e:	406b      	eors	r3, r5
    9880:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    9884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9888:	d001      	beq.n	988e <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    988a:	61a5      	str	r5, [r4, #24]
    988c:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    988e:	2d00      	cmp	r5, #0
    9890:	db08      	blt.n	98a4 <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    9892:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    9896:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9898:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    989a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    989e:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    98a0:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    98a2:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    98a4:	69e1      	ldr	r1, [r4, #28]
    98a6:	3101      	adds	r1, #1
    98a8:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    98aa:	2278      	movs	r2, #120	; 0x78
    98ac:	2300      	movs	r3, #0
    98ae:	2000      	movs	r0, #0
    98b0:	f012 fdf8 	bl	1c4a4 <__aeabi_uldivmod>
    98b4:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    98b6:	b128      	cbz	r0, 98c4 <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    98b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    98bc:	00c3      	lsls	r3, r0, #3
    98be:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    98c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    98c2:	e7e2      	b.n	988a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    98c4:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    98c6:	62e0      	str	r0, [r4, #44]	; 0x2c
    98c8:	e7df      	b.n	988a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    98ca:	bf00      	nop
    98cc:	e000edf0 	.word	0xe000edf0

000098d0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    98d0:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    98d4:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    98d6:	29c7      	cmp	r1, #199	; 0xc7
    98d8:	4a0d      	ldr	r2, [pc, #52]	; (9910 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    98da:	f103 33ff 	add.w	r3, r3, #4294967295
    98de:	bf8c      	ite	hi
    98e0:	2100      	movhi	r1, #0
    98e2:	2101      	movls	r1, #1
    98e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    98e8:	7011      	strb	r1, [r2, #0]
    98ea:	d20e      	bcs.n	990a <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    98ec:	4a09      	ldr	r2, [pc, #36]	; (9914 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    98ee:	480a      	ldr	r0, [pc, #40]	; (9918 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    98f0:	b410      	push	{r4}
    98f2:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    98f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    98f6:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    98f8:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    98fc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    98fe:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9900:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9902:	6011      	str	r1, [r2, #0]
}
    9904:	f85d 4b04 	ldr.w	r4, [sp], #4
    9908:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    990a:	2001      	movs	r0, #1
    990c:	4770      	bx	lr
    990e:	bf00      	nop
    9910:	20001080 	.word	0x20001080
    9914:	e000e010 	.word	0xe000e010
    9918:	e000ed00 	.word	0xe000ed00

0000991c <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    991c:	4b01      	ldr	r3, [pc, #4]	; (9924 <Milliseconds+0x8>)
    991e:	681b      	ldr	r3, [r3, #0]
    9920:	6918      	ldr	r0, [r3, #16]
}
    9922:	4770      	bx	lr
    9924:	20001be4 	.word	0x20001be4

00009928 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    9928:	4b0e      	ldr	r3, [pc, #56]	; (9964 <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    992a:	4a0f      	ldr	r2, [pc, #60]	; (9968 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    992c:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    992e:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    9930:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    9932:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    9934:	db0a      	blt.n	994c <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    9936:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    9938:	490c      	ldr	r1, [pc, #48]	; (996c <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    993a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    993c:	4423      	add	r3, r4
    993e:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9942:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9946:	f85d 4b04 	ldr.w	r4, [sp], #4
    994a:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    994c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    994e:	4907      	ldr	r1, [pc, #28]	; (996c <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9950:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    9952:	1b1b      	subs	r3, r3, r4
    9954:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9958:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    995c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9960:	4770      	bx	lr
    9962:	bf00      	nop
    9964:	e0001000 	.word	0xe0001000
    9968:	20001be4 	.word	0x20001be4
    996c:	88888889 	.word	0x88888889

00009970 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    9970:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    9972:	4e0d      	ldr	r6, [pc, #52]	; (99a8 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    9974:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    9978:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    997a:	d013      	beq.n	99a4 <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    997c:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    997e:	2500      	movs	r5, #0
    9980:	1b1c      	subs	r4, r3, r4
    9982:	428d      	cmp	r5, r1
    9984:	bf08      	it	eq
    9986:	4284      	cmpeq	r4, r0
    9988:	d20c      	bcs.n	99a4 <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    998a:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    998c:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    998e:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9992:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9996:	2500      	movs	r5, #0
    9998:	461c      	mov	r4, r3
    999a:	428d      	cmp	r5, r1
    999c:	bf08      	it	eq
    999e:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    99a0:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    99a2:	d3f2      	bcc.n	998a <Delay_cycles+0x1a>
    }
}
    99a4:	bc70      	pop	{r4, r5, r6}
    99a6:	4770      	bx	lr
    99a8:	e0001000 	.word	0xe0001000

000099ac <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    99ac:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    99ae:	f7ff ff19 	bl	97e4 <_ZN9ClearCore9SysTiming8InstanceEv>
    99b2:	4b01      	ldr	r3, [pc, #4]	; (99b8 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    99b4:	6018      	str	r0, [r3, #0]
    99b6:	bd08      	pop	{r3, pc}
    99b8:	20001be4 	.word	0x20001be4

000099bc <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    99bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    99be:	4e37      	ldr	r6, [pc, #220]	; (9a9c <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    99c0:	6835      	ldr	r5, [r6, #0]
    99c2:	f015 0501 	ands.w	r5, r5, #1
    99c6:	d002      	beq.n	99ce <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    99c8:	4b35      	ldr	r3, [pc, #212]	; (9aa0 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    99ca:	6818      	ldr	r0, [r3, #0]
    99cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99ce:	f641 10c4 	movw	r0, #6596	; 0x19c4
    99d2:	f009 fd09 	bl	133e8 <_Znwj>
    99d6:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    99d8:	2711      	movs	r7, #17
    99da:	2312      	movs	r3, #18
    99dc:	6067      	str	r7, [r4, #4]
    99de:	60e3      	str	r3, [r4, #12]
    99e0:	2213      	movs	r2, #19
    99e2:	210d      	movs	r1, #13
    99e4:	2714      	movs	r7, #20
    99e6:	230b      	movs	r3, #11
    99e8:	6162      	str	r2, [r4, #20]
    99ea:	61e1      	str	r1, [r4, #28]
    99ec:	6367      	str	r7, [r4, #52]	; 0x34
    99ee:	6463      	str	r3, [r4, #68]	; 0x44
    99f0:	270c      	movs	r7, #12
    99f2:	2302      	movs	r3, #2
    99f4:	200f      	movs	r0, #15
    99f6:	220e      	movs	r2, #14
    99f8:	211c      	movs	r1, #28
    99fa:	6323      	str	r3, [r4, #48]	; 0x30
    99fc:	63a3      	str	r3, [r4, #56]	; 0x38
    99fe:	6423      	str	r3, [r4, #64]	; 0x40
    9a00:	6523      	str	r3, [r4, #80]	; 0x50
    9a02:	62e0      	str	r0, [r4, #44]	; 0x2c
    9a04:	64e2      	str	r2, [r4, #76]	; 0x4c
    9a06:	6561      	str	r1, [r4, #84]	; 0x54
    9a08:	6267      	str	r7, [r4, #36]	; 0x24
    9a0a:	4629      	mov	r1, r5
    9a0c:	63e7      	str	r7, [r4, #60]	; 0x3c
    9a0e:	65a7      	str	r7, [r4, #88]	; 0x58
    9a10:	6025      	str	r5, [r4, #0]
    9a12:	60a5      	str	r5, [r4, #8]
    9a14:	6125      	str	r5, [r4, #16]
    9a16:	61a5      	str	r5, [r4, #24]
    9a18:	6225      	str	r5, [r4, #32]
    9a1a:	62a5      	str	r5, [r4, #40]	; 0x28
    9a1c:	64a5      	str	r5, [r4, #72]	; 0x48
    9a1e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    9a22:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    9a26:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9a2a:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9a2e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9a32:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9a36:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    9a3a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    9a3e:	f504 7094 	add.w	r0, r4, #296	; 0x128
    9a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9a46:	f014 fd51 	bl	1e4ec <memset>
    9a4a:	4629      	mov	r1, r5
    9a4c:	f604 1028 	addw	r0, r4, #2344	; 0x928
    9a50:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    9a54:	f014 fd4a 	bl	1e4ec <memset>
    9a58:	f641 176c 	movw	r7, #6508	; 0x196c
    9a5c:	f641 1168 	movw	r1, #6504	; 0x1968
    9a60:	19e3      	adds	r3, r4, r7
    9a62:	f641 126a 	movw	r2, #6506	; 0x196a
    9a66:	20c8      	movs	r0, #200	; 0xc8
    9a68:	5260      	strh	r0, [r4, r1]
    9a6a:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9a6e:	2108      	movs	r1, #8
    9a70:	54a1      	strb	r1, [r4, r2]
    9a72:	3004      	adds	r0, #4
    9a74:	51e5      	str	r5, [r4, r7]
    9a76:	4629      	mov	r1, r5
    9a78:	605d      	str	r5, [r3, #4]
    9a7a:	609d      	str	r5, [r3, #8]
    9a7c:	60dd      	str	r5, [r3, #12]
    9a7e:	611d      	str	r5, [r3, #16]
    9a80:	615d      	str	r5, [r3, #20]
    9a82:	223c      	movs	r2, #60	; 0x3c
    9a84:	f014 fd32 	bl	1e4ec <memset>
    static EthernetManager *instance = new EthernetManager();
    9a88:	4905      	ldr	r1, [pc, #20]	; (9aa0 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9a8a:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    9a8e:	2301      	movs	r3, #1
    9a90:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9a92:	6015      	str	r5, [r2, #0]
    9a94:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    9a96:	6033      	str	r3, [r6, #0]
}
    9a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a9a:	bf00      	nop
    9a9c:	20001bec 	.word	0x20001bec
    9aa0:	20001bf4 	.word	0x20001bf4

00009aa4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    9aa4:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    9aa6:	4b3e      	ldr	r3, [pc, #248]	; (9ba0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9aa8:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9aac:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9ab0:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    9ab4:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ab6:	493b      	ldr	r1, [pc, #236]	; (9ba4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9ab8:	f042 0210 	orr.w	r2, r2, #16
    9abc:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9abe:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ac0:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ac2:	6893      	ldr	r3, [r2, #8]
    9ac4:	0759      	lsls	r1, r3, #29
    9ac6:	d5fc      	bpl.n	9ac2 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9ac8:	6813      	ldr	r3, [r2, #0]
    9aca:	f36f 1304 	bfc	r3, #4, #1
    9ace:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9ad0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9ad6:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9ad8:	428b      	cmp	r3, r1
    9ada:	d05d      	beq.n	9b98 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9adc:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9ade:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ae0:	4c31      	ldr	r4, [pc, #196]	; (9ba8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ae2:	492f      	ldr	r1, [pc, #188]	; (9ba0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9ae4:	f043 0310 	orr.w	r3, r3, #16
    9ae8:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9aea:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9aec:	688b      	ldr	r3, [r1, #8]
    9aee:	075a      	lsls	r2, r3, #29
    9af0:	d5fc      	bpl.n	9aec <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    9af2:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9af4:	4c2b      	ldr	r4, [pc, #172]	; (9ba4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9af6:	4a2a      	ldr	r2, [pc, #168]	; (9ba0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9af8:	f36f 1304 	bfc	r3, #4, #1
    9afc:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9afe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9b00:	680b      	ldr	r3, [r1, #0]
    9b02:	f043 0310 	orr.w	r3, r3, #16
    9b06:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b08:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b0a:	6893      	ldr	r3, [r2, #8]
    9b0c:	075b      	lsls	r3, r3, #29
    9b0e:	d5fc      	bpl.n	9b0a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    9b10:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b12:	4c26      	ldr	r4, [pc, #152]	; (9bac <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b14:	4922      	ldr	r1, [pc, #136]	; (9ba0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9b16:	f36f 1304 	bfc	r3, #4, #1
    9b1a:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9b1e:	6813      	ldr	r3, [r2, #0]
    9b20:	f043 0310 	orr.w	r3, r3, #16
    9b24:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b26:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b28:	688b      	ldr	r3, [r1, #8]
    9b2a:	075c      	lsls	r4, r3, #29
    9b2c:	d5fc      	bpl.n	9b28 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    9b2e:	680b      	ldr	r3, [r1, #0]
    9b30:	f36f 1304 	bfc	r3, #4, #1
    9b34:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b36:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9b38:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    9b3a:	b12b      	cbz	r3, 9b48 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    9b3c:	2301      	movs	r3, #1
    9b3e:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9b42:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b46:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    9b48:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b4a:	4c19      	ldr	r4, [pc, #100]	; (9bb0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b4c:	4a14      	ldr	r2, [pc, #80]	; (9ba0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9b4e:	f043 0310 	orr.w	r3, r3, #16
    9b52:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b54:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b56:	6893      	ldr	r3, [r2, #8]
    9b58:	0759      	lsls	r1, r3, #29
    9b5a:	d5fc      	bpl.n	9b56 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9b5c:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b5e:	4c13      	ldr	r4, [pc, #76]	; (9bac <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b60:	490f      	ldr	r1, [pc, #60]	; (9ba0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9b62:	f36f 1304 	bfc	r3, #4, #1
    9b66:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b68:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9b6a:	6813      	ldr	r3, [r2, #0]
    9b6c:	f043 0310 	orr.w	r3, r3, #16
    9b70:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b72:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b74:	688b      	ldr	r3, [r1, #8]
    9b76:	075b      	lsls	r3, r3, #29
    9b78:	d5fc      	bpl.n	9b74 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9b7a:	680b      	ldr	r3, [r1, #0]
    9b7c:	f36f 1304 	bfc	r3, #4, #1
    9b80:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b82:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    9b84:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9b88:	2b07      	cmp	r3, #7
    9b8a:	d1d7      	bne.n	9b3c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9b8c:	2300      	movs	r3, #0
    9b8e:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9b92:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b96:	4770      	bx	lr
        m_phyInitFailed = true;
    9b98:	2301      	movs	r3, #1
    9b9a:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9b9e:	4770      	bx	lr
    9ba0:	42000800 	.word	0x42000800
    9ba4:	60020000 	.word	0x60020000
    9ba8:	50028000 	.word	0x50028000
    9bac:	606e0000 	.word	0x606e0000
    9bb0:	506e0700 	.word	0x506e0700

00009bb4 <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    9bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9bb8:	4be2      	ldr	r3, [pc, #904]	; (9f44 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    9bba:	681a      	ldr	r2, [r3, #0]
    9bbc:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    9bbe:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9bc0:	d503      	bpl.n	9bca <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    9bc2:	681a      	ldr	r2, [r3, #0]
    9bc4:	0750      	lsls	r0, r2, #29
    9bc6:	f100 82a2 	bmi.w	a10e <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    9bca:	4ade      	ldr	r2, [pc, #888]	; (9f44 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9bcc:	48de      	ldr	r0, [pc, #888]	; (9f48 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    9bce:	6813      	ldr	r3, [r2, #0]
    9bd0:	f043 0310 	orr.w	r3, r3, #16
    9bd4:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    9bd6:	6853      	ldr	r3, [r2, #4]
    9bd8:	f043 0301 	orr.w	r3, r3, #1
    9bdc:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    9bde:	6853      	ldr	r3, [r2, #4]
    9be0:	f043 0302 	orr.w	r3, r3, #2
    9be4:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    9be6:	6853      	ldr	r3, [r2, #4]
    9be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9bec:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    9bee:	6853      	ldr	r3, [r2, #4]
    9bf0:	2104      	movs	r1, #4
    9bf2:	f361 4394 	bfi	r3, r1, #18, #3
    9bf6:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    9bf8:	68d3      	ldr	r3, [r2, #12]
    9bfa:	f36f 0300 	bfc	r3, #0, #1
    9bfe:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    9c00:	6913      	ldr	r3, [r2, #16]
    9c02:	f361 0304 	bfi	r3, r1, #0, #5
    9c06:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    9c08:	6913      	ldr	r3, [r2, #16]
    9c0a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    9c0e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    9c10:	6913      	ldr	r3, [r2, #16]
    9c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9c16:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9c18:	6915      	ldr	r5, [r2, #16]
    9c1a:	2302      	movs	r3, #2
    9c1c:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9c20:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    9c24:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9c26:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    9c28:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9c2c:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9c30:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    9c34:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    9c38:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    9c3c:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    9c40:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    9c44:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    9c48:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    9c4c:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9c50:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9c54:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    9c58:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9c5c:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9c60:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    9c64:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    9c68:	66e3      	str	r3, [r4, #108]	; 0x6c
    9c6a:	6763      	str	r3, [r4, #116]	; 0x74
    9c6c:	67e3      	str	r3, [r4, #124]	; 0x7c
    9c6e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    9c72:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9c76:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    9c7a:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9c7e:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9c82:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    9c86:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    9c8a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    9c8e:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    9c92:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    9c96:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    9c9a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    9c9e:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    9ca2:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    9ca6:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    9caa:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    9cae:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    9cb2:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    9cb6:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    9cba:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    9cbe:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cc2:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    9cc6:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    9cca:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cce:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    9cd2:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    9cd6:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cd8:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    9cdc:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    9ce0:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    9ce4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9ce8:	3610      	adds	r6, #16
    9cea:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    9cec:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cf0:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    9cf4:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    9cf8:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9cfa:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    9cfe:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9d02:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    9d06:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d08:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    9d0a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    9d0e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    9d12:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    9d16:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    9d1a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    9d1e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    9d22:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    9d26:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    9d2a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    9d2e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    9d32:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    9d36:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    9d3a:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d3e:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9d42:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9d46:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    9d48:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d4c:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    9d50:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    9d54:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    9d58:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    9d5c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    9d60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    9d64:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d68:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    9d6c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    9d70:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    9d74:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    9d78:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    9d7c:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    9d80:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    9d84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d88:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9d8c:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9d90:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d94:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9d98:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d9c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    9da0:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    9da4:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    9da8:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    9dac:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    9db0:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9db4:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    9db8:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9dbc:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9dbe:	6196      	str	r6, [r2, #24]
    9dc0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9dc4:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9dc8:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    9dca:	6823      	ldr	r3, [r4, #0]
    9dcc:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    9dce:	01db      	lsls	r3, r3, #7
    9dd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9dd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9dd8:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    9dda:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    9dde:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    9de2:	f042 0201 	orr.w	r2, r2, #1
    9de6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9dea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9dee:	f011 0f01 	tst.w	r1, #1
    9df2:	f04f 010b 	mov.w	r1, #11
    9df6:	bf14      	ite	ne
    9df8:	f361 1207 	bfine	r2, r1, #4, #4
    9dfc:	f361 0203 	bfieq	r2, r1, #0, #4
    9e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    9e04:	68a3      	ldr	r3, [r4, #8]
    9e06:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    9e08:	01db      	lsls	r3, r3, #7
    9e0a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e12:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e14:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9e18:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9e1c:	f041 0101 	orr.w	r1, r1, #1
    9e20:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e24:	f012 0f01 	tst.w	r2, #1
    9e28:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9e2c:	f04f 010b 	mov.w	r1, #11
    9e30:	bf14      	ite	ne
    9e32:	f361 1207 	bfine	r2, r1, #4, #4
    9e36:	f361 0203 	bfieq	r2, r1, #0, #4
    9e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    9e3e:	6923      	ldr	r3, [r4, #16]
    9e40:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    9e42:	01db      	lsls	r3, r3, #7
    9e44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e4c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e4e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9e52:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9e56:	f041 0101 	orr.w	r1, r1, #1
    9e5a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e5e:	f012 0f01 	tst.w	r2, #1
    9e62:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9e66:	f04f 010b 	mov.w	r1, #11
    9e6a:	bf14      	ite	ne
    9e6c:	f361 1207 	bfine	r2, r1, #4, #4
    9e70:	f361 0203 	bfieq	r2, r1, #0, #4
    9e74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    9e78:	69a3      	ldr	r3, [r4, #24]
    9e7a:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    9e7c:	01db      	lsls	r3, r3, #7
    9e7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e86:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e88:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9e8c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9e90:	f041 0101 	orr.w	r1, r1, #1
    9e94:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e98:	f012 0f01 	tst.w	r2, #1
    9e9c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9ea0:	f04f 010b 	mov.w	r1, #11
    9ea4:	bf14      	ite	ne
    9ea6:	f361 1207 	bfine	r2, r1, #4, #4
    9eaa:	f361 0203 	bfieq	r2, r1, #0, #4
    9eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    9eb2:	6a23      	ldr	r3, [r4, #32]
    9eb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    9eb6:	01db      	lsls	r3, r3, #7
    9eb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ebc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9ec0:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ec2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ec6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9eca:	f041 0101 	orr.w	r1, r1, #1
    9ece:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ed2:	f012 0f01 	tst.w	r2, #1
    9ed6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9eda:	f04f 010b 	mov.w	r1, #11
    9ede:	bf14      	ite	ne
    9ee0:	f361 1207 	bfine	r2, r1, #4, #4
    9ee4:	f361 0203 	bfieq	r2, r1, #0, #4
    9ee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    9eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9eee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    9ef0:	01db      	lsls	r3, r3, #7
    9ef2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ef6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9efa:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9efc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f00:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f04:	f041 0101 	orr.w	r1, r1, #1
    9f08:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f0c:	f012 0f01 	tst.w	r2, #1
    9f10:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f14:	f04f 010b 	mov.w	r1, #11
    9f18:	bf14      	ite	ne
    9f1a:	f361 1207 	bfine	r2, r1, #4, #4
    9f1e:	f361 0203 	bfieq	r2, r1, #0, #4
    9f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    9f26:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9f28:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    9f2a:	01db      	lsls	r3, r3, #7
    9f2c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f34:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f36:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f3a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f3e:	f041 0101 	orr.w	r1, r1, #1
    9f42:	e003      	b.n	9f4c <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    9f44:	42000800 	.word	0x42000800
    9f48:	e000e100 	.word	0xe000e100
    9f4c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f50:	f012 0f01 	tst.w	r2, #1
    9f54:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f58:	f04f 010b 	mov.w	r1, #11
    9f5c:	bf14      	ite	ne
    9f5e:	f361 1207 	bfine	r2, r1, #4, #4
    9f62:	f361 0203 	bfieq	r2, r1, #0, #4
    9f66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    9f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9f6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    9f6e:	01db      	lsls	r3, r3, #7
    9f70:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f78:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f7a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f7e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f82:	f041 0101 	orr.w	r1, r1, #1
    9f86:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f8a:	f012 0f01 	tst.w	r2, #1
    9f8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f92:	f04f 010b 	mov.w	r1, #11
    9f96:	bf14      	ite	ne
    9f98:	f361 1207 	bfine	r2, r1, #4, #4
    9f9c:	f361 0203 	bfieq	r2, r1, #0, #4
    9fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    9fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9fa6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    9fa8:	01db      	lsls	r3, r3, #7
    9faa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9fae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9fb2:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9fb4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9fb8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9fbc:	f041 0101 	orr.w	r1, r1, #1
    9fc0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9fc4:	f012 0f01 	tst.w	r2, #1
    9fc8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9fcc:	f04f 010b 	mov.w	r1, #11
    9fd0:	bf14      	ite	ne
    9fd2:	f361 1207 	bfine	r2, r1, #4, #4
    9fd6:	f361 0203 	bfieq	r2, r1, #0, #4
    9fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    9fde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9fe0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    9fe2:	01db      	lsls	r3, r3, #7
    9fe4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9fe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9fec:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9fee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ff2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9ff6:	f041 0101 	orr.w	r1, r1, #1
    9ffa:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ffe:	f012 0f01 	tst.w	r2, #1
    a002:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a006:	f04f 010b 	mov.w	r1, #11
    a00a:	bf14      	ite	ne
    a00c:	f361 1207 	bfine	r2, r1, #4, #4
    a010:	f361 0203 	bfieq	r2, r1, #0, #4
    a014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a018:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a01a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a01c:	01db      	lsls	r3, r3, #7
    a01e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    a022:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    a026:	1850      	adds	r0, r2, r1
    a028:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a02a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a02e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a032:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a036:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a03a:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a03e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a042:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a044:	bf14      	ite	ne
    a046:	f36f 1007 	bfcne	r0, #4, #4
    a04a:	f367 0003 	bfieq	r0, r7, #0, #4
    a04e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a052:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a056:	4932      	ldr	r1, [pc, #200]	; (a120 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    a058:	4a32      	ldr	r2, [pc, #200]	; (a124 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a05a:	f040 0001 	orr.w	r0, r0, #1
    a05e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    a062:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a066:	f040 0002 	orr.w	r0, r0, #2
    a06a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a06e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a074:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    a076:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a078:	f043 0302 	orr.w	r3, r3, #2
    a07c:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    a07e:	7813      	ldrb	r3, [r2, #0]
    a080:	f36f 0341 	bfc	r3, #1, #1
    a084:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a086:	6853      	ldr	r3, [r2, #4]
    a088:	0799      	lsls	r1, r3, #30
    a08a:	d4fc      	bmi.n	a086 <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a08e:	4925      	ldr	r1, [pc, #148]	; (a124 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a090:	08c3      	lsrs	r3, r0, #3
    a092:	009b      	lsls	r3, r3, #2
    a094:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a098:	2701      	movs	r7, #1
    a09a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a09e:	4087      	lsls	r7, r0
    a0a0:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a0a2:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a0a6:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a0a8:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a0aa:	f04f 0e0f 	mov.w	lr, #15
    a0ae:	fa0e fe00 	lsl.w	lr, lr, r0
    a0b2:	ea27 070e 	bic.w	r7, r7, lr
    a0b6:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a0b8:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a0bc:	2705      	movs	r7, #5
    a0be:	fa07 f000 	lsl.w	r0, r7, r0
    a0c2:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a0c6:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a0c8:	7813      	ldrb	r3, [r2, #0]
    a0ca:	f043 0302 	orr.w	r3, r3, #2
    a0ce:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a0d0:	684b      	ldr	r3, [r1, #4]
    a0d2:	079b      	lsls	r3, r3, #30
    a0d4:	d4fc      	bmi.n	a0d0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a0d6:	4620      	mov	r0, r4
    a0d8:	f7ff fce4 	bl	9aa4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a0dc:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a0e0:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a0e4:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a0e8:	4b0f      	ldr	r3, [pc, #60]	; (a128 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a0ea:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a0ec:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a0f0:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a0f2:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a0f6:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a0fa:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a0fe:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a100:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a102:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a104:	6818      	ldr	r0, [r3, #0]
}
    a106:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a10a:	f007 bd8f 	b.w	11c2c <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a10e:	681a      	ldr	r2, [r3, #0]
    a110:	f36f 02c3 	bfc	r2, #3, #1
    a114:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a116:	681a      	ldr	r2, [r3, #0]
    a118:	f36f 0282 	bfc	r2, #2, #1
    a11c:	601a      	str	r2, [r3, #0]
    a11e:	e554      	b.n	9bca <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a120:	42000800 	.word	0x42000800
    a124:	40002800 	.word	0x40002800
    a128:	20001f24 	.word	0x20001f24

0000a12c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a130:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a132:	4ca1      	ldr	r4, [pc, #644]	; (a3b8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a134:	4ba1      	ldr	r3, [pc, #644]	; (a3bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a136:	49a2      	ldr	r1, [pc, #648]	; (a3c0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a138:	2201      	movs	r2, #1
    a13a:	40aa      	lsls	r2, r5
    a13c:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a13e:	681a      	ldr	r2, [r3, #0]
    a140:	f042 0210 	orr.w	r2, r2, #16
    a144:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a146:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a148:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a14a:	6893      	ldr	r3, [r2, #8]
    a14c:	075d      	lsls	r5, r3, #29
    a14e:	d5fc      	bpl.n	a14a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a150:	6813      	ldr	r3, [r2, #0]
    a152:	f36f 1304 	bfc	r3, #4, #1
    a156:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a158:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a15a:	07cc      	lsls	r4, r1, #31
    a15c:	d415      	bmi.n	a18a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a15e:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a160:	bf44      	itt	mi
    a162:	2300      	movmi	r3, #0
    a164:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a168:	078c      	lsls	r4, r1, #30
    a16a:	d401      	bmi.n	a170 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a170:	4b92      	ldr	r3, [pc, #584]	; (a3bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a172:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a174:	2101      	movs	r1, #1
    a176:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a17a:	0711      	lsls	r1, r2, #28
    a17c:	d5f6      	bpl.n	a16c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a17e:	681a      	ldr	r2, [r3, #0]
    a180:	0752      	lsls	r2, r2, #29
    a182:	f100 8121 	bmi.w	a3c8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a18a:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a18c:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a18e:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a190:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a192:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a196:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a19a:	d56d      	bpl.n	a278 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a19c:	6813      	ldr	r3, [r2, #0]
    a19e:	075f      	lsls	r7, r3, #29
    a1a0:	d56a      	bpl.n	a278 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a1a2:	6813      	ldr	r3, [r2, #0]
    a1a4:	f36f 03c3 	bfc	r3, #3, #1
    a1a8:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a1aa:	6813      	ldr	r3, [r2, #0]
    a1ac:	f36f 0382 	bfc	r3, #2, #1
    a1b0:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a1b2:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a1b6:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a1ba:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a1be:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a1c2:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a1c6:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a1ca:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a1ce:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a1d2:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1d6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1da:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1de:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a1ea:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a1ee:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a1f2:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a1f6:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a1fa:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a1fe:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a202:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a206:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a20a:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a20e:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a212:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a216:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a21a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a21e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a226:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a22a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a22e:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a232:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a236:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a23a:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a23e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a242:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a246:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a24a:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a24e:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a252:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a256:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a25a:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a25e:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a26a:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a26c:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a270:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a274:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a278:	4b50      	ldr	r3, [pc, #320]	; (a3bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a27a:	4d52      	ldr	r5, [pc, #328]	; (a3c4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a27c:	681a      	ldr	r2, [r3, #0]
    a27e:	f042 0210 	orr.w	r2, r2, #16
    a282:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a284:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a286:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a288:	6893      	ldr	r3, [r2, #8]
    a28a:	075e      	lsls	r6, r3, #29
    a28c:	d5fc      	bpl.n	a288 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a28e:	6813      	ldr	r3, [r2, #0]
    a290:	f36f 1304 	bfc	r3, #4, #1
    a294:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a296:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a298:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a29a:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a29c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a2a0:	f366 0500 	bfi	r5, r6, #0, #1
    a2a4:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a2a6:	6855      	ldr	r5, [r2, #4]
    a2a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a2ac:	f363 0541 	bfi	r5, r3, #1, #1
    a2b0:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a2b2:	6813      	ldr	r3, [r2, #0]
    a2b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a2b8:	b96b      	cbnz	r3, a2d6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a2ba:	429c      	cmp	r4, r3
    a2bc:	f43f af4f 	beq.w	a15e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a2c0:	b16c      	cbz	r4, a2de <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a2c2:	4b3e      	ldr	r3, [pc, #248]	; (a3bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a2c4:	681a      	ldr	r2, [r3, #0]
    a2c6:	f042 0208 	orr.w	r2, r2, #8
    a2ca:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a2cc:	681a      	ldr	r2, [r3, #0]
    a2ce:	f042 0204 	orr.w	r2, r2, #4
    a2d2:	601a      	str	r2, [r3, #0]
    a2d4:	e743      	b.n	a15e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a2d6:	6813      	ldr	r3, [r2, #0]
    a2d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a2dc:	e7ed      	b.n	a2ba <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a2de:	4b37      	ldr	r3, [pc, #220]	; (a3bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a2e0:	681a      	ldr	r2, [r3, #0]
    a2e2:	f364 02c3 	bfi	r2, r4, #3, #1
    a2e6:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a2e8:	681a      	ldr	r2, [r3, #0]
    a2ea:	f364 0282 	bfi	r2, r4, #2, #1
    a2ee:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a2f0:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a2f4:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a2f8:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a2fc:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a300:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a304:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a308:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a30c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a310:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a314:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a318:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a31c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a328:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a32c:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a330:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a334:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a338:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a33c:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a340:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a344:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a348:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a34c:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a350:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a354:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a358:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a360:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a364:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a368:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a36c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a370:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a374:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a378:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a37c:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a380:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a384:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a388:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a38c:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a390:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a394:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a398:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a39c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a3a0:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a3a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3ac:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a3b0:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a3b4:	e6d3      	b.n	a15e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a3b6:	bf00      	nop
    a3b8:	40002800 	.word	0x40002800
    a3bc:	42000800 	.word	0x42000800
    a3c0:	606e0000 	.word	0x606e0000
    a3c4:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a3c8:	681a      	ldr	r2, [r3, #0]
    a3ca:	f36f 02c3 	bfc	r2, #3, #1
    a3ce:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a3d0:	681a      	ldr	r2, [r3, #0]
    a3d2:	f36f 0282 	bfc	r2, #2, #1
    a3d6:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a3d8:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a3dc:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a3e0:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a3e4:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a3e8:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a3ec:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a3f0:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a3f4:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a3f8:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a3fc:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a400:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a404:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a408:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a410:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a414:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a418:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a41c:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a420:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a424:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a428:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a42c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a430:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a43c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a440:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a444:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a448:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a44c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a450:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a454:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a458:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a45c:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a460:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a464:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a468:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a46c:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a470:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a474:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a478:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a47c:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a480:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a484:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a490:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a492:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a496:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a49a:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4a2:	bf00      	nop

0000a4a4 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a4a4:	4b0b      	ldr	r3, [pc, #44]	; (a4d4 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a4a6:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a4a8:	695a      	ldr	r2, [r3, #20]
    a4aa:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a4ac:	6a1a      	ldr	r2, [r3, #32]
    a4ae:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a4b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a4b2:	9a00      	ldr	r2, [sp, #0]
    a4b4:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a4b6:	bf44      	itt	mi
    a4b8:	9a00      	ldrmi	r2, [sp, #0]
    a4ba:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a4bc:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a4be:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a4c0:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a4c2:	bf44      	itt	mi
    a4c4:	2301      	movmi	r3, #1
    a4c6:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a4ca:	4b02      	ldr	r3, [pc, #8]	; (a4d4 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a4cc:	621a      	str	r2, [r3, #32]
}
    a4ce:	b002      	add	sp, #8
    a4d0:	4770      	bx	lr
    a4d2:	bf00      	nop
    a4d4:	42000800 	.word	0x42000800

0000a4d8 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a4d8:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a4da:	f7ff fa6f 	bl	99bc <_ZN9ClearCore15EthernetManager8InstanceEv>
    a4de:	4b01      	ldr	r3, [pc, #4]	; (a4e4 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a4e0:	6018      	str	r0, [r3, #0]
    a4e2:	bd08      	pop	{r3, pc}
    a4e4:	20001bf0 	.word	0x20001bf0

0000a4e8 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a4ea:	4f46      	ldr	r7, [pc, #280]	; (a604 <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a4ec:	f8df e118 	ldr.w	lr, [pc, #280]	; a608 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a4f0:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a4f2:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a4f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a4f6:	4625      	mov	r5, r4
    a4f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a4fa:	e896 0003 	ldmia.w	r6, {r0, r1}
    a4fe:	f107 0618 	add.w	r6, r7, #24
    a502:	e885 0003 	stmia.w	r5, {r0, r1}
    a506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a508:	f104 0518 	add.w	r5, r4, #24
    a50c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a50e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a512:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a516:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a51a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a51c:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a520:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a524:	2608      	movs	r6, #8
    a526:	257f      	movs	r5, #127	; 0x7f
    a528:	23c8      	movs	r3, #200	; 0xc8
    a52a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a52e:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a532:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a536:	2500      	movs	r5, #0
    a538:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a53c:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a53e:	21fe      	movs	r1, #254	; 0xfe
    a540:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a544:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a548:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a54c:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a54e:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a550:	4629      	mov	r1, r5
    a552:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a554:	6563      	str	r3, [r4, #84]	; 0x54
    a556:	65a5      	str	r5, [r4, #88]	; 0x58
    a558:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a55a:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a55e:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a562:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a564:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a568:	67a5      	str	r5, [r4, #120]	; 0x78
    a56a:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a56e:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a570:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a572:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a576:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a57a:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a57e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a582:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a586:	2240      	movs	r2, #64	; 0x40
    a588:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a58c:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a590:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a594:	f013 ffaa 	bl	1e4ec <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a598:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a59c:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a5a0:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a5a4:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a5a8:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a5ac:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    a5b0:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    a5b4:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    a5b8:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    a5bc:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a5c0:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    a5c4:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    a5c8:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    a5cc:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    a5d0:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    a5d4:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    a5d8:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    a5dc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    a5e0:	4620      	mov	r0, r4
    m_lastOutput(0) {
    a5e2:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    a5e6:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    a5ea:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a5ee:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    a5f2:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    a5f6:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a5fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a5fe:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a604:	00023210 	.word	0x00023210
    a608:	0fe080fc 	.word	0x0fe080fc

0000a60c <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    a60c:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    a60e:	4a64      	ldr	r2, [pc, #400]	; (a7a0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a610:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a614:	f36f 1386 	bfc	r3, #6, #1
    a618:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a61c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a620:	065d      	lsls	r5, r3, #25
    a622:	d4fb      	bmi.n	a61c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    a624:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a628:	495d      	ldr	r1, [pc, #372]	; (a7a0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a62a:	2405      	movs	r4, #5
    a62c:	f364 0303 	bfi	r3, r4, #0, #4
    a630:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a634:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a63c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a640:	684b      	ldr	r3, [r1, #4]
    a642:	f013 0314 	ands.w	r3, r3, #20
    a646:	d1fb      	bne.n	a640 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a648:	4d56      	ldr	r5, [pc, #344]	; (a7a4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a64a:	4957      	ldr	r1, [pc, #348]	; (a7a8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a64c:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a64e:	4a57      	ldr	r2, [pc, #348]	; (a7ac <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a650:	f044 0404 	orr.w	r4, r4, #4
    a654:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a656:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    a65a:	2402      	movs	r4, #2
    a65c:	f364 1507 	bfi	r5, r4, #4, #4
    a660:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    a664:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    a668:	f045 0501 	orr.w	r5, r5, #1
    a66c:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    a670:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a674:	f364 1507 	bfi	r5, r4, #4, #4
    a678:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    a67c:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    a680:	f045 0501 	orr.w	r5, r5, #1
    a684:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    a688:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a68c:	f364 0503 	bfi	r5, r4, #0, #4
    a690:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a694:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a698:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a69a:	f045 0501 	orr.w	r5, r5, #1
    a69e:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    a6a2:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a6a6:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    a6aa:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    a6ae:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a6b2:	6811      	ldr	r1, [r2, #0]
    a6b4:	f363 0141 	bfi	r1, r3, #1, #1
    a6b8:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a6ba:	69d3      	ldr	r3, [r2, #28]
    a6bc:	f013 0302 	ands.w	r3, r3, #2
    a6c0:	d1fb      	bne.n	a6ba <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a6c2:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a6c4:	4939      	ldr	r1, [pc, #228]	; (a7ac <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a6c6:	f044 040c 	orr.w	r4, r4, #12
    a6ca:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    a6cc:	6814      	ldr	r4, [r2, #0]
    a6ce:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    a6d2:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    a6d6:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    a6d8:	6854      	ldr	r4, [r2, #4]
    a6da:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    a6de:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    a6e0:	6894      	ldr	r4, [r2, #8]
    a6e2:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    a6e6:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    a6e8:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    a6ea:	6813      	ldr	r3, [r2, #0]
    a6ec:	f043 0302 	orr.w	r3, r3, #2
    a6f0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a6f2:	69cb      	ldr	r3, [r1, #28]
    a6f4:	079c      	lsls	r4, r3, #30
    a6f6:	d4fc      	bmi.n	a6f2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a6f8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a6fc:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    a700:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a704:	4a29      	ldr	r2, [pc, #164]	; (a7ac <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    a706:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a708:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a70a:	7e13      	ldrb	r3, [r2, #24]
    a70c:	0799      	lsls	r1, r3, #30
    a70e:	d5fc      	bpl.n	a70a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a710:	4b25      	ldr	r3, [pc, #148]	; (a7a8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a712:	4a26      	ldr	r2, [pc, #152]	; (a7ac <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a714:	2104      	movs	r1, #4
    a716:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a71a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a71e:	7e13      	ldrb	r3, [r2, #24]
    a720:	075b      	lsls	r3, r3, #29
    a722:	d5fc      	bpl.n	a71e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a724:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    a726:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a72a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    a72e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a732:	4063      	eors	r3, r4
    a734:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a738:	bb7a      	cbnz	r2, a79a <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a73a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a73e:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    a742:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a746:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    a74a:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    a74e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    a752:	4059      	eors	r1, r3
    a754:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a756:	404b      	eors	r3, r1
    a758:	ea83 0105 	eor.w	r1, r3, r5
    a75c:	4031      	ands	r1, r6
    a75e:	4059      	eors	r1, r3
    a760:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    a764:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    a768:	404a      	eors	r2, r1
    a76a:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a76c:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    a76e:	b135      	cbz	r5, a77e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    a770:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a778:	b10a      	cbz	r2, a77e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    a77a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    a77e:	4d0b      	ldr	r5, [pc, #44]	; (a7ac <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a780:	4909      	ldr	r1, [pc, #36]	; (a7a8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    a782:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a786:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a788:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    a78a:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    a78c:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a78e:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    a792:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    a794:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    a798:	4770      	bx	lr
        output = m_altOutput;
    a79a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    a79e:	e7ee      	b.n	a77e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    a7a0:	40001c00 	.word	0x40001c00
    a7a4:	40000800 	.word	0x40000800
    a7a8:	41008000 	.word	0x41008000
    a7ac:	43000800 	.word	0x43000800

0000a7b0 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    a7b0:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d078      	beq.n	a8aa <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    a7b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
    a7ba:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    a7bc:	b4f0      	push	{r4, r5, r6, r7}
    a7be:	6582      	str	r2, [r0, #88]	; 0x58
    a7c0:	b90b      	cbnz	r3, a7c6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    a7c2:	6d02      	ldr	r2, [r0, #80]	; 0x50
    a7c4:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    a7c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    a7c8:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    a7cc:	428a      	cmp	r2, r1
    a7ce:	bf34      	ite	cc
    a7d0:	220c      	movcc	r2, #12
    a7d2:	2208      	movcs	r2, #8
    a7d4:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    a7d6:	3301      	adds	r3, #1
    a7d8:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    a7da:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    a7dc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    a7e0:	2b3e      	cmp	r3, #62	; 0x3e
    a7e2:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    a7e6:	d961      	bls.n	a8ac <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    a7e8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    a7ec:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    a7f0:	2400      	movs	r4, #0
    a7f2:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	f000 817a 	beq.w	aaf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    a7fc:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    a800:	3101      	adds	r1, #1
    a802:	b2c9      	uxtb	r1, r1
    a804:	4299      	cmp	r1, r3
    a806:	460a      	mov	r2, r1
    a808:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    a80c:	f2c0 817e 	blt.w	ab0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    a810:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    a814:	4623      	mov	r3, r4
    a816:	e04c      	b.n	a8b2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    a818:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    a81a:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    a81c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a820:	49b1      	ldr	r1, [pc, #708]	; (aae8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    a822:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a826:	7e0b      	ldrb	r3, [r1, #24]
    a828:	079c      	lsls	r4, r3, #30
    a82a:	d5fc      	bpl.n	a826 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a82c:	4baf      	ldr	r3, [pc, #700]	; (aaec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a82e:	49ae      	ldr	r1, [pc, #696]	; (aae8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a830:	2404      	movs	r4, #4
    a832:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a836:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a83a:	7e0b      	ldrb	r3, [r1, #24]
    a83c:	075b      	lsls	r3, r3, #29
    a83e:	d5fc      	bpl.n	a83a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a840:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a842:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    a846:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a84a:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    a84e:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a852:	4073      	eors	r3, r6
    a854:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a858:	2900      	cmp	r1, #0
    a85a:	f040 80d4 	bne.w	aa06 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a85e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a862:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a866:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    a86a:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    a86e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a872:	405a      	eors	r2, r3
    a874:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a876:	4053      	eors	r3, r2
    a878:	ea83 0204 	eor.w	r2, r3, r4
    a87c:	402a      	ands	r2, r5
    a87e:	405a      	eors	r2, r3
    a880:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    a884:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    a888:	4051      	eors	r1, r2
    a88a:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a88c:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    a88e:	b134      	cbz	r4, a89e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    a890:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a898:	b10a      	cbz	r2, a89e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    a89a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    a89e:	4a92      	ldr	r2, [pc, #584]	; (aae8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    a8a0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a8a4:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    a8a6:	6293      	str	r3, [r2, #40]	; 0x28
}
    a8a8:	bcf0      	pop	{r4, r5, r6, r7}
    a8aa:	4770      	bx	lr
    a8ac:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a8b0:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    a8b2:	4293      	cmp	r3, r2
    a8b4:	bfb4      	ite	lt
    a8b6:	230c      	movlt	r3, #12
    a8b8:	2308      	movge	r3, #8
    a8ba:	4403      	add	r3, r0
            if (!m_activeMask) {
    a8bc:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    a8c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    a8c2:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    a8c6:	2900      	cmp	r1, #0
    a8c8:	d0a6      	beq.n	a818 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    a8ca:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    a8ce:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    a8d0:	3301      	adds	r3, #1
    a8d2:	b2db      	uxtb	r3, r3
    a8d4:	2b3f      	cmp	r3, #63	; 0x3f
    a8d6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    a8da:	f200 8097 	bhi.w	aa0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    a8de:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    a8e2:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    a8e4:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    a8e6:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    a8e8:	d004      	beq.n	a8f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    a8ea:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    a8ee:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a8f0:	bfb8      	it	lt
    a8f2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a8f4:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    a8f8:	420a      	tst	r2, r1
    a8fa:	d004      	beq.n	a906 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    a8fc:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    a900:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a902:	bfb8      	it	lt
    a904:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a906:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    a90a:	420a      	tst	r2, r1
    a90c:	d004      	beq.n	a918 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    a90e:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    a912:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a914:	bfb8      	it	lt
    a916:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a918:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    a91c:	420a      	tst	r2, r1
    a91e:	d004      	beq.n	a92a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    a920:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    a924:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a926:	bfb8      	it	lt
    a928:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a92a:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    a92e:	420a      	tst	r2, r1
    a930:	d004      	beq.n	a93c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    a932:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    a936:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a938:	bfb8      	it	lt
    a93a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a93c:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    a940:	420a      	tst	r2, r1
    a942:	d004      	beq.n	a94e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    a944:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    a948:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a94a:	bfb8      	it	lt
    a94c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a94e:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    a952:	420a      	tst	r2, r1
    a954:	d004      	beq.n	a960 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    a956:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    a95a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a95c:	bfb8      	it	lt
    a95e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a960:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    a964:	420a      	tst	r2, r1
    a966:	d004      	beq.n	a972 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    a968:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    a96c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a96e:	bfb8      	it	lt
    a970:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a972:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    a976:	420a      	tst	r2, r1
    a978:	d004      	beq.n	a984 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    a97a:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    a97e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a980:	bfb8      	it	lt
    a982:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a984:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    a988:	420a      	tst	r2, r1
    a98a:	d004      	beq.n	a996 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    a98c:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    a990:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a992:	bfb8      	it	lt
    a994:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a996:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    a99a:	420a      	tst	r2, r1
    a99c:	d004      	beq.n	a9a8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    a99e:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    a9a2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9a4:	bfb8      	it	lt
    a9a6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9a8:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    a9ac:	420a      	tst	r2, r1
    a9ae:	d004      	beq.n	a9ba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    a9b0:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    a9b4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9b6:	bfb8      	it	lt
    a9b8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9ba:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    a9be:	420a      	tst	r2, r1
    a9c0:	d004      	beq.n	a9cc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    a9c2:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    a9c6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9c8:	bfb8      	it	lt
    a9ca:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9cc:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    a9d0:	420a      	tst	r2, r1
    a9d2:	d004      	beq.n	a9de <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    a9d4:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    a9d8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9da:	bfb8      	it	lt
    a9dc:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9de:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    a9e2:	420a      	tst	r2, r1
    a9e4:	d004      	beq.n	a9f0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    a9e6:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    a9ea:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9ec:	bfb8      	it	lt
    a9ee:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9f0:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    a9f4:	4211      	tst	r1, r2
    a9f6:	d004      	beq.n	aa02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    a9f8:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    a9fc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9fe:	bfb8      	it	lt
    aa00:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    aa02:	6782      	str	r2, [r0, #120]	; 0x78
    aa04:	e70c      	b.n	a820 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    aa06:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    aa0a:	e748      	b.n	a89e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    aa0c:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    aa0e:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    aa12:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    aa16:	d004      	beq.n	aa22 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    aa18:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    aa1c:	2a00      	cmp	r2, #0
    aa1e:	f040 80cb 	bne.w	abb8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    aa22:	078b      	lsls	r3, r1, #30
    aa24:	d504      	bpl.n	aa30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    aa26:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	f040 80be 	bne.w	abac <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    aa30:	074f      	lsls	r7, r1, #29
    aa32:	d504      	bpl.n	aa3e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    aa34:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    aa38:	2b00      	cmp	r3, #0
    aa3a:	f040 80b1 	bne.w	aba0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    aa3e:	070e      	lsls	r6, r1, #28
    aa40:	d504      	bpl.n	aa4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    aa42:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    aa46:	2b00      	cmp	r3, #0
    aa48:	f040 80a4 	bne.w	ab94 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    aa4c:	06cd      	lsls	r5, r1, #27
    aa4e:	d504      	bpl.n	aa5a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    aa50:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    aa54:	2b00      	cmp	r3, #0
    aa56:	f040 8097 	bne.w	ab88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    aa5a:	068c      	lsls	r4, r1, #26
    aa5c:	d504      	bpl.n	aa68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    aa5e:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    aa62:	2b00      	cmp	r3, #0
    aa64:	f040 808a 	bne.w	ab7c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    aa68:	064b      	lsls	r3, r1, #25
    aa6a:	d503      	bpl.n	aa74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    aa6c:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    aa70:	2b00      	cmp	r3, #0
    aa72:	d17d      	bne.n	ab70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    aa74:	060f      	lsls	r7, r1, #24
    aa76:	d503      	bpl.n	aa80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    aa78:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d171      	bne.n	ab64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    aa80:	05ce      	lsls	r6, r1, #23
    aa82:	d503      	bpl.n	aa8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    aa84:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d165      	bne.n	ab58 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    aa8c:	058d      	lsls	r5, r1, #22
    aa8e:	d503      	bpl.n	aa98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    aa90:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    aa94:	2b00      	cmp	r3, #0
    aa96:	d159      	bne.n	ab4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    aa98:	054c      	lsls	r4, r1, #21
    aa9a:	d503      	bpl.n	aaa4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    aa9c:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d14d      	bne.n	ab40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    aaa4:	050b      	lsls	r3, r1, #20
    aaa6:	d503      	bpl.n	aab0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    aaa8:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    aaac:	2b00      	cmp	r3, #0
    aaae:	d141      	bne.n	ab34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    aab0:	04cf      	lsls	r7, r1, #19
    aab2:	d503      	bpl.n	aabc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    aab4:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    aab8:	2b00      	cmp	r3, #0
    aaba:	d135      	bne.n	ab28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    aabc:	048e      	lsls	r6, r1, #18
    aabe:	d502      	bpl.n	aac6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    aac0:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    aac4:	bb53      	cbnz	r3, ab1c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    aac6:	044d      	lsls	r5, r1, #17
    aac8:	d502      	bpl.n	aad0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    aaca:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    aace:	b9fb      	cbnz	r3, ab10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    aad0:	0bcb      	lsrs	r3, r1, #15
    aad2:	d096      	beq.n	aa02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    aad4:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    aad8:	2b00      	cmp	r3, #0
    aada:	d092      	beq.n	aa02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    aadc:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    aae0:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    aae4:	430a      	orrs	r2, r1
    aae6:	e78c      	b.n	aa02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    aae8:	43000800 	.word	0x43000800
    aaec:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    aaf0:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    aaf4:	3901      	subs	r1, #1
    aaf6:	b2c9      	uxtb	r1, r1
    aaf8:	42a1      	cmp	r1, r4
    aafa:	460a      	mov	r2, r1
    aafc:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    ab00:	f73f aed7 	bgt.w	a8b2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    ab04:	2101      	movs	r1, #1
    ab06:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ab0a:	e6d2      	b.n	a8b2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    ab0c:	4623      	mov	r3, r4
    ab0e:	e6d0      	b.n	a8b2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    ab10:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    ab14:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    ab18:	4322      	orrs	r2, r4
    ab1a:	e7d9      	b.n	aad0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    ab1c:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    ab20:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    ab24:	4322      	orrs	r2, r4
    ab26:	e7ce      	b.n	aac6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    ab28:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    ab2c:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    ab30:	4322      	orrs	r2, r4
    ab32:	e7c3      	b.n	aabc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    ab34:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    ab38:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    ab3c:	4322      	orrs	r2, r4
    ab3e:	e7b7      	b.n	aab0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    ab40:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    ab44:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    ab48:	4322      	orrs	r2, r4
    ab4a:	e7ab      	b.n	aaa4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    ab4c:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    ab50:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    ab54:	4322      	orrs	r2, r4
    ab56:	e79f      	b.n	aa98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    ab58:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    ab5c:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    ab60:	4322      	orrs	r2, r4
    ab62:	e793      	b.n	aa8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    ab64:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    ab68:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    ab6c:	4322      	orrs	r2, r4
    ab6e:	e787      	b.n	aa80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    ab70:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    ab74:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    ab78:	4322      	orrs	r2, r4
    ab7a:	e77b      	b.n	aa74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    ab7c:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    ab80:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    ab84:	4322      	orrs	r2, r4
    ab86:	e76f      	b.n	aa68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    ab88:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    ab8c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    ab90:	4322      	orrs	r2, r4
    ab92:	e762      	b.n	aa5a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    ab94:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    ab98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    ab9c:	4322      	orrs	r2, r4
    ab9e:	e755      	b.n	aa4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    aba0:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    aba4:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    aba8:	4322      	orrs	r2, r4
    abaa:	e748      	b.n	aa3e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    abac:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    abb0:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    abb4:	4322      	orrs	r2, r4
    abb6:	e73b      	b.n	aa30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    abb8:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    abbc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    abc0:	e72f      	b.n	aa22 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    abc2:	bf00      	nop

0000abc4 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    abc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    abc8:	2301      	movs	r3, #1
    abca:	f100 0834 	add.w	r8, r0, #52	; 0x34
    abce:	4e4d      	ldr	r6, [pc, #308]	; (ad04 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    abd0:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    abd4:	b083      	sub	sp, #12
    abd6:	4681      	mov	r9, r0
    m_useAltOutput = true;
    abd8:	4645      	mov	r5, r8
    abda:	f100 0444 	add.w	r4, r0, #68	; 0x44
    abde:	2200      	movs	r2, #0
    abe0:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    abe2:	f855 3b04 	ldr.w	r3, [r5], #4
    abe6:	4313      	orrs	r3, r2
    abe8:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    abec:	4630      	mov	r0, r6
    abee:	4639      	mov	r1, r7
    abf0:	f7fe febe 	bl	9970 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    abf4:	42a5      	cmp	r5, r4
    abf6:	d002      	beq.n	abfe <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    abf8:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    abfc:	e7f1      	b.n	abe2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    abfe:	f109 0318 	add.w	r3, r9, #24
    ac02:	4e40      	ldr	r6, [pc, #256]	; (ad04 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac04:	9301      	str	r3, [sp, #4]
    ac06:	469b      	mov	fp, r3
    ac08:	f04f 0a00 	mov.w	sl, #0
    ac0c:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    ac0e:	f1ba 0f06 	cmp.w	sl, #6
    ac12:	4630      	mov	r0, r6
    ac14:	4639      	mov	r1, r7
    ac16:	f10a 0a01 	add.w	sl, sl, #1
    ac1a:	d148      	bne.n	acae <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    ac1c:	f8db 2000 	ldr.w	r2, [fp]
    ac20:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    ac24:	4837      	ldr	r0, [pc, #220]	; (ad04 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac26:	4313      	orrs	r3, r2
    ac28:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac2c:	2100      	movs	r1, #0
    ac2e:	f7fe fe9f 	bl	9970 <Delay_cycles>
    ac32:	4835      	ldr	r0, [pc, #212]	; (ad08 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    ac34:	4e33      	ldr	r6, [pc, #204]	; (ad04 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac36:	2100      	movs	r1, #0
    ac38:	f7fe fe9a 	bl	9970 <Delay_cycles>
    ac3c:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    ac3e:	f858 2b04 	ldr.w	r2, [r8], #4
    ac42:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    ac46:	ea23 0302 	bic.w	r3, r3, r2
    ac4a:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac4e:	4630      	mov	r0, r6
    ac50:	4639      	mov	r1, r7
    ac52:	f7fe fe8d 	bl	9970 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    ac56:	4545      	cmp	r5, r8
    ac58:	d1f1      	bne.n	ac3e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    ac5a:	f3bf 8f5b 	dmb	ish
    ac5e:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    ac62:	e853 2f00 	ldrex	r2, [r3]
    ac66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    ac6a:	e843 2100 	strex	r1, r2, [r3]
    ac6e:	2900      	cmp	r1, #0
    ac70:	d1f7      	bne.n	ac62 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    ac72:	f3bf 8f5b 	dmb	ish
    ac76:	4e23      	ldr	r6, [pc, #140]	; (ad04 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac78:	2500      	movs	r5, #0
    ac7a:	2700      	movs	r7, #0
    ac7c:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    ac7e:	2d06      	cmp	r5, #6
    ac80:	461a      	mov	r2, r3
    ac82:	4630      	mov	r0, r6
    ac84:	4639      	mov	r1, r7
    ac86:	f105 0501 	add.w	r5, r5, #1
    ac8a:	d122      	bne.n	acd2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    ac8c:	681a      	ldr	r2, [r3, #0]
    ac8e:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    ac92:	481c      	ldr	r0, [pc, #112]	; (ad04 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac94:	ea23 0302 	bic.w	r3, r3, r2
    ac98:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac9c:	2100      	movs	r1, #0
    ac9e:	f7fe fe67 	bl	9970 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    aca2:	2300      	movs	r3, #0
    aca4:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    aca8:	b003      	add	sp, #12
    acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    acae:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    acb2:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    acb6:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    acba:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    acbc:	4313      	orrs	r3, r2
    acbe:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    acc2:	f7fe fe55 	bl	9970 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    acc6:	f1ba 0f07 	cmp.w	sl, #7
    acca:	f10b 0b04 	add.w	fp, fp, #4
    acce:	d19e      	bne.n	ac0e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    acd0:	e7af      	b.n	ac32 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    acd2:	f853 3c18 	ldr.w	r3, [r3, #-24]
    acd6:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    acda:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    acdc:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    ace0:	ea23 0302 	bic.w	r3, r3, r2
    ace4:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ace8:	9b01      	ldr	r3, [sp, #4]
    acea:	3304      	adds	r3, #4
    acec:	9301      	str	r3, [sp, #4]
    acee:	f7fe fe3f 	bl	9970 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    acf2:	2d07      	cmp	r5, #7
    acf4:	d1c2      	bne.n	ac7c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    acf6:	2300      	movs	r3, #0
    acf8:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    acfc:	b003      	add	sp, #12
    acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad02:	bf00      	nop
    ad04:	002dc6c0 	.word	0x002dc6c0
    ad08:	005b8d80 	.word	0x005b8d80

0000ad0c <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    ad0e:	4d0e      	ldr	r5, [pc, #56]	; (ad48 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    ad10:	682b      	ldr	r3, [r5, #0]
    ad12:	f013 0401 	ands.w	r4, r3, #1
    ad16:	d002      	beq.n	ad1e <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    ad18:	4b0c      	ldr	r3, [pc, #48]	; (ad4c <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    ad1a:	6818      	ldr	r0, [r3, #0]
    ad1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad1e:	2010      	movs	r0, #16
    ad20:	f008 fb62 	bl	133e8 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    ad24:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    ad26:	4909      	ldr	r1, [pc, #36]	; (ad4c <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    ad28:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ad2a:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    ad2c:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    ad2e:	2617      	movs	r6, #23
      m_initialized(false) {
    ad30:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    ad32:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    ad34:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    ad36:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    ad38:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    ad3a:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    ad3c:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    ad3e:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ad40:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    ad42:	7342      	strb	r2, [r0, #13]
}
    ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad46:	bf00      	nop
    ad48:	20001bf8 	.word	0x20001bf8
    ad4c:	20001c00 	.word	0x20001c00

0000ad50 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    ad50:	7843      	ldrb	r3, [r0, #1]
    ad52:	428b      	cmp	r3, r1
    ad54:	d06d      	beq.n	ae32 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    ad56:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    ad5c:	d071      	beq.n	ae42 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    ad5e:	d363      	bcc.n	ae28 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    ad60:	2902      	cmp	r1, #2
    ad62:	d16b      	bne.n	ae3c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    ad64:	4e39      	ldr	r6, [pc, #228]	; (ae4c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    ad66:	f240 188f 	movw	r8, #399	; 0x18f
    ad6a:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    ad6e:	4a38      	ldr	r2, [pc, #224]	; (ae50 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    ad70:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    ad72:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    ad74:	4b37      	ldr	r3, [pc, #220]	; (ae54 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    ad76:	f36f 0441 	bfc	r4, #1, #1
    ad7a:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    ad7c:	681c      	ldr	r4, [r3, #0]
    ad7e:	f36f 0441 	bfc	r4, #1, #1
    ad82:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    ad84:	6893      	ldr	r3, [r2, #8]
    ad86:	079c      	lsls	r4, r3, #30
    ad88:	d4fc      	bmi.n	ad84 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    ad8a:	4d32      	ldr	r5, [pc, #200]	; (ae54 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    ad8c:	68ac      	ldr	r4, [r5, #8]
    ad8e:	f014 0402 	ands.w	r4, r4, #2
    ad92:	d1fb      	bne.n	ad8c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    ad94:	4631      	mov	r1, r6
    ad96:	7800      	ldrb	r0, [r0, #0]
    ad98:	4e2f      	ldr	r6, [pc, #188]	; (ae58 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    ad9a:	f000 fead 	bl	baf8 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    ad9e:	492f      	ldr	r1, [pc, #188]	; (ae5c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    ada0:	4a2f      	ldr	r2, [pc, #188]	; (ae60 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    ada2:	4b2b      	ldr	r3, [pc, #172]	; (ae50 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    ada4:	482f      	ldr	r0, [pc, #188]	; (ae64 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    ada6:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    ada8:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    adaa:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    adac:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    adae:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    adb0:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    adb2:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    adb4:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    adb6:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    adb8:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    adba:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    adbc:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    adc0:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    adc2:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    adc4:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    adc8:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    adca:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    adce:	3018      	adds	r0, #24
    add0:	3104      	adds	r1, #4
    add2:	3204      	adds	r2, #4
    add4:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    add6:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    add8:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    adda:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    addc:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    adde:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ade0:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ade2:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    ade4:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    ade8:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    adec:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    adf0:	f856 0b04 	ldr.w	r0, [r6], #4
    adf4:	4639      	mov	r1, r7
    adf6:	3030      	adds	r0, #48	; 0x30
    adf8:	f000 fcb2 	bl	b760 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    adfc:	42b4      	cmp	r4, r6
    adfe:	d1f7      	bne.n	adf0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    ae00:	4a13      	ldr	r2, [pc, #76]	; (ae50 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    ae02:	4914      	ldr	r1, [pc, #80]	; (ae54 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    ae04:	6813      	ldr	r3, [r2, #0]
    ae06:	f043 0302 	orr.w	r3, r3, #2
    ae0a:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    ae0c:	680b      	ldr	r3, [r1, #0]
    ae0e:	f043 0302 	orr.w	r3, r3, #2
    ae12:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    ae14:	6893      	ldr	r3, [r2, #8]
    ae16:	0799      	lsls	r1, r3, #30
    ae18:	d4fc      	bmi.n	ae14 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    ae1a:	4a0e      	ldr	r2, [pc, #56]	; (ae54 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    ae1c:	6893      	ldr	r3, [r2, #8]
    ae1e:	079b      	lsls	r3, r3, #30
    ae20:	d4fc      	bmi.n	ae1c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    ae22:	2001      	movs	r0, #1
    ae24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    ae28:	f04f 0813 	mov.w	r8, #19
    ae2c:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    ae2e:	4e0e      	ldr	r6, [pc, #56]	; (ae68 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    ae30:	e79d      	b.n	ad6e <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    ae32:	7b83      	ldrb	r3, [r0, #14]
    ae34:	2b00      	cmp	r3, #0
    ae36:	d08e      	beq.n	ad56 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    ae38:	2000      	movs	r0, #0
    ae3a:	4770      	bx	lr
        return false;
    ae3c:	2000      	movs	r0, #0
    ae3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    ae42:	f04f 0863 	mov.w	r8, #99	; 0x63
    ae46:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    ae48:	4e08      	ldr	r6, [pc, #32]	; (ae6c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    ae4a:	e790      	b.n	ad6e <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    ae4c:	001e8480 	.word	0x001e8480
    ae50:	41016000 	.word	0x41016000
    ae54:	41018000 	.word	0x41018000
    ae58:	00022e6c 	.word	0x00022e6c
    ae5c:	41016004 	.word	0x41016004
    ae60:	41016008 	.word	0x41016008
    ae64:	4101600c 	.word	0x4101600c
    ae68:	000186a0 	.word	0x000186a0
    ae6c:	0007a120 	.word	0x0007a120

0000ae70 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    ae70:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    ae72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ae76:	4606      	mov	r6, r0
    ae78:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    ae7a:	d036      	beq.n	aeea <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    ae7c:	460c      	mov	r4, r1
    ae7e:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    ae82:	2f03      	cmp	r7, #3
    ae84:	d907      	bls.n	ae96 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    ae86:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    ae88:	7b38      	ldrb	r0, [r7, #12]
    ae8a:	1b40      	subs	r0, r0, r5
    ae8c:	fab0 f080 	clz	r0, r0
    ae90:	0940      	lsrs	r0, r0, #5
    ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ae96:	f8df 90c0 	ldr.w	r9, [pc, #192]	; af58 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    ae9a:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    ae9e:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    aea0:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    aea4:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    aea6:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    aea8:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    aeac:	685b      	ldr	r3, [r3, #4]
    aeae:	4629      	mov	r1, r5
    aeb0:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    aeb2:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    aeb6:	6803      	ldr	r3, [r0, #0]
    aeb8:	4629      	mov	r1, r5
    aeba:	685b      	ldr	r3, [r3, #4]
    aebc:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    aebe:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    aec2:	f997 2002 	ldrsb.w	r2, [r7, #2]
    aec6:	684b      	ldr	r3, [r1, #4]
    aec8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    aecc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    aed0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    aed4:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    aed6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    aeda:	bf0c      	ite	eq
    aedc:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    aee0:	f36f 0200 	bfcne	r2, #0, #1
    aee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    aee8:	e7ce      	b.n	ae88 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    aeea:	f1a2 0709 	sub.w	r7, r2, #9
    aeee:	2f03      	cmp	r7, #3
    aef0:	d907      	bls.n	af02 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    aef2:	7b33      	ldrb	r3, [r6, #12]
    aef4:	42ab      	cmp	r3, r5
    aef6:	d002      	beq.n	aefe <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    aef8:	2000      	movs	r0, #0
}
    aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aefe:	2401      	movs	r4, #1
    af00:	e7bf      	b.n	ae82 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af02:	f8df 9054 	ldr.w	r9, [pc, #84]	; af58 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    af06:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af08:	f8d9 0000 	ldr.w	r0, [r9]
    af0c:	6803      	ldr	r3, [r0, #0]
    af0e:	4611      	mov	r1, r2
    af10:	685b      	ldr	r3, [r3, #4]
    af12:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    af14:	f8d9 0004 	ldr.w	r0, [r9, #4]
    af18:	6803      	ldr	r3, [r0, #0]
    af1a:	4629      	mov	r1, r5
    af1c:	685b      	ldr	r3, [r3, #4]
    af1e:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    af20:	f996 2002 	ldrsb.w	r2, [r6, #2]
    af24:	6873      	ldr	r3, [r6, #4]
    af26:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    af2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    af2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    af32:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    af34:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    af38:	d004      	beq.n	af44 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    af3a:	f36f 0200 	bfc	r2, #0, #1
    af3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    af42:	e7d6      	b.n	aef2 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    af44:	f042 0201 	orr.w	r2, r2, #1
    af48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    af4c:	7b33      	ldrb	r3, [r6, #12]
    af4e:	2b0a      	cmp	r3, #10
    af50:	d1d2      	bne.n	aef8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    af52:	2401      	movs	r4, #1
    af54:	e7a1      	b.n	ae9a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    af56:	bf00      	nop
    af58:	00022e6c 	.word	0x00022e6c

0000af5c <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    af5c:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    af5e:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    af60:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    af62:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    af64:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    af66:	2101      	movs	r1, #1
    af68:	f7ff fef2 	bl	ad50 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    af6c:	f995 2002 	ldrsb.w	r2, [r5, #2]
    af70:	6868      	ldr	r0, [r5, #4]
    af72:	01d2      	lsls	r2, r2, #7
    af74:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    af78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    af7c:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    af7e:	2101      	movs	r1, #1
    af80:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    af82:	2600      	movs	r6, #0
    af84:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    af88:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    af8a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    af8e:	f010 0f01 	tst.w	r0, #1
    af92:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    af96:	f04f 040c 	mov.w	r4, #12
    af9a:	bf0c      	ite	eq
    af9c:	f364 0003 	bfieq	r0, r4, #0, #4
    afa0:	f364 1007 	bfine	r0, r4, #4, #4
    afa4:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    afa8:	4b2d      	ldr	r3, [pc, #180]	; (b060 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    afaa:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    afac:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    afae:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    afb0:	f995 2003 	ldrsb.w	r2, [r5, #3]
    afb4:	68a9      	ldr	r1, [r5, #8]
    afb6:	01d2      	lsls	r2, r2, #7
    afb8:	4413      	add	r3, r2
    afba:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    afbc:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    afbe:	2600      	movs	r6, #0
    afc0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    afc4:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    afc6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    afca:	f011 0f01 	tst.w	r1, #1
    afce:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    afd2:	4e24      	ldr	r6, [pc, #144]	; (b064 <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    afd4:	f04f 040c 	mov.w	r4, #12
    afd8:	bf14      	ite	ne
    afda:	f364 1107 	bfine	r1, r4, #4, #4
    afde:	f364 0103 	bfieq	r1, r4, #0, #4
    afe2:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    afe6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    afea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    afee:	2400      	movs	r4, #0
    aff0:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    aff2:	f856 0b04 	ldr.w	r0, [r6], #4
    aff6:	f3c4 0346 	ubfx	r3, r4, #1, #7
    affa:	6802      	ldr	r2, [r0, #0]
    affc:	442b      	add	r3, r5
    affe:	6852      	ldr	r2, [r2, #4]
    b000:	7b19      	ldrb	r1, [r3, #12]
    b002:	3401      	adds	r4, #1
    b004:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b006:	2c04      	cmp	r4, #4
    b008:	d1f3      	bne.n	aff2 <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b00a:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b00c:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b010:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b012:	686b      	ldr	r3, [r5, #4]
    b014:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b018:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b01c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b020:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b024:	bf14      	ite	ne
    b026:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b02a:	f042 0201 	orreq.w	r2, r2, #1
    b02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b032:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b034:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b038:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b03a:	68ab      	ldr	r3, [r5, #8]
    b03c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b040:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b044:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b048:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b04c:	bf0c      	ite	eq
    b04e:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b052:	f36f 0200 	bfcne	r2, #0, #1
    b056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    b05a:	2301      	movs	r3, #1
    b05c:	73ab      	strb	r3, [r5, #14]
    b05e:	bd70      	pop	{r4, r5, r6, pc}
    b060:	41008000 	.word	0x41008000
    b064:	00022e6c 	.word	0x00022e6c

0000b068 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    b068:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    b06a:	f7ff fe4f 	bl	ad0c <_ZN9ClearCore12MotorManager8InstanceEv>
    b06e:	4b01      	ldr	r3, [pc, #4]	; (b074 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    b070:	6018      	str	r0, [r3, #0]
    b072:	bd08      	pop	{r3, pc}
    b074:	20001bfc 	.word	0x20001bfc

0000b078 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b07a:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b07c:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    b07e:	f890 3020 	ldrb.w	r3, [r0, #32]
    b082:	b113      	cbz	r3, b08a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    b084:	2300      	movs	r3, #0
    b086:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    b088:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    b08a:	b362      	cbz	r2, b0e6 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    b08c:	69a0      	ldr	r0, [r4, #24]
    b08e:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b090:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    b092:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b094:	bb2b      	cbnz	r3, b0e2 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    b096:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b098:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b09c:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b0a0:	2700      	movs	r7, #0
    b0a2:	4032      	ands	r2, r6
    b0a4:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b0a6:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b0a8:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b0aa:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b0ae:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b0b0:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b0b4:	f010 fd00 	bl	1bab8 <__aeabi_i2d>
    b0b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b0bc:	4619      	mov	r1, r3
    b0be:	f010 fffb 	bl	1c0b8 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b0c2:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b0c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b0c6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b0c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b0ca:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b0ce:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b0d0:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b0d2:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b0d4:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b0d6:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b0d8:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b0da:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b0dc:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b0de:	4618      	mov	r0, r3
    b0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b0e2:	4240      	negs	r0, r0
    b0e4:	e7d7      	b.n	b096 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b0e6:	6960      	ldr	r0, [r4, #20]
    b0e8:	1a08      	subs	r0, r1, r0
            break;
    b0ea:	e7d5      	b.n	b098 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b0ec <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0ee:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b0f0:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b0f2:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b0f4:	0fca      	lsrs	r2, r1, #31
    b0f6:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b0fa:	f884 3020 	strb.w	r3, [r4, #32]
    b0fe:	4608      	mov	r0, r1
    b100:	f010 fcda 	bl	1bab8 <__aeabi_i2d>
    b104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b108:	4619      	mov	r1, r3
    b10a:	f010 ffd5 	bl	1c0b8 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b10e:	17c3      	asrs	r3, r0, #31
    b110:	03d9      	lsls	r1, r3, #15
    b112:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b116:	f241 3288 	movw	r2, #5000	; 0x1388
    b11a:	2300      	movs	r3, #0
    b11c:	03c0      	lsls	r0, r0, #15
    b11e:	f011 f971 	bl	1c404 <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b122:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b124:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b128:	03de      	lsls	r6, r3, #15
    b12a:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b12c:	42b2      	cmp	r2, r6
    b12e:	f04f 0300 	mov.w	r3, #0
    b132:	eb73 0507 	sbcs.w	r5, r3, r7
    b136:	bfbc      	itt	lt
    b138:	4616      	movlt	r6, r2
    b13a:	461f      	movlt	r7, r3
    b13c:	4286      	cmp	r6, r0
    b13e:	460b      	mov	r3, r1
    b140:	4602      	mov	r2, r0
    b142:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b146:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b14a:	bfb8      	it	lt
    b14c:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b14e:	2700      	movs	r7, #0
    b150:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b154:	4030      	ands	r0, r6
    b156:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b158:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b15a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b15c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b15e:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b160:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b162:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b166:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b168:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b16c:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b16e:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b170:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b172:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b174:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b176:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b178:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b17a:	b662      	cpsie	i
}
    b17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b17e:	bf00      	nop

0000b180 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b184:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b186:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b18a:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b18c:	b085      	sub	sp, #20
    b18e:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b190:	d038      	beq.n	b204 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b192:	2b07      	cmp	r3, #7
    b194:	f200 80da 	bhi.w	b34c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b198:	e8df f013 	tbh	[pc, r3, lsl #1]
    b19c:	00d8002f 	.word	0x00d8002f
    b1a0:	00be01d7 	.word	0x00be01d7
    b1a4:	025f0086 	.word	0x025f0086
    b1a8:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b1ac:	7b41      	ldrb	r1, [r0, #13]
    b1ae:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b1b2:	428b      	cmp	r3, r1
    b1b4:	f000 822d 	beq.w	b612 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b1b8:	6980      	ldr	r0, [r0, #24]
    b1ba:	69e3      	ldr	r3, [r4, #28]
    b1bc:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b1be:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b1c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b1c6:	2300      	movs	r3, #0
    b1c8:	4016      	ands	r6, r2
    b1ca:	401f      	ands	r7, r3
    b1cc:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b1d0:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b1d4:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b1d6:	2300      	movs	r3, #0
    b1d8:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b1da:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b1de:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b1e0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b1e4:	0bf2      	lsrs	r2, r6, #15
    b1e6:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b1ea:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b1ec:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b1ee:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b1f0:	6962      	ldr	r2, [r4, #20]
    b1f2:	b101      	cbz	r1, b1f6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b1f4:	425b      	negs	r3, r3
    b1f6:	4413      	add	r3, r2
    b1f8:	6163      	str	r3, [r4, #20]
}
    b1fa:	b005      	add	sp, #20
    b1fc:	ecbd 8b02 	vpop	{d8}
    b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b204:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b206:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b20a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b20e:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b212:	1457      	asrs	r7, r2, #17
    b214:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b216:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b21a:	2900      	cmp	r1, #0
    b21c:	d163      	bne.n	b2e6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b21e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b220:	2d00      	cmp	r5, #0
    b222:	f000 8117 	beq.w	b454 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b226:	7b41      	ldrb	r1, [r0, #13]
    b228:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b22c:	9100      	str	r1, [sp, #0]
    b22e:	4291      	cmp	r1, r2
    b230:	f000 81f8 	beq.w	b624 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b234:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b238:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b23a:	2305      	movs	r3, #5
    b23c:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b23e:	6520      	str	r0, [r4, #80]	; 0x50
    b240:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b242:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b246:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b24a:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b24c:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b250:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b254:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b256:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b25a:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b25c:	f300 80ab 	bgt.w	b3b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b260:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b262:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b266:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b26a:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b26c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b270:	4629      	mov	r1, r5
    b272:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b274:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b278:	f011 f914 	bl	1c4a4 <__aeabi_uldivmod>
    b27c:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b27e:	fba0 bc05 	umull	fp, ip, r0, r5
    b282:	fb00 cc03 	mla	ip, r0, r3, ip
    b286:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b28a:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b28c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b290:	eb47 0709 	adc.w	r7, r7, r9
    b294:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b298:	2900      	cmp	r1, #0
    b29a:	f000 816e 	beq.w	b57a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b29e:	2307      	movs	r3, #7
    b2a0:	7323      	strb	r3, [r4, #12]
    b2a2:	9900      	ldr	r1, [sp, #0]
    b2a4:	69e3      	ldr	r3, [r4, #28]
    b2a6:	e79d      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b2a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b2aa:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b2ac:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b2b0:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b2b4:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b2b8:	1952      	adds	r2, r2, r5
    b2ba:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b2be:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b2c0:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b2c4:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b2c8:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b2ca:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b2ce:	da54      	bge.n	b37a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b2d0:	2900      	cmp	r1, #0
    b2d2:	dd52      	ble.n	b37a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b2d4:	2a01      	cmp	r2, #1
    b2d6:	f173 0100 	sbcs.w	r1, r3, #0
    b2da:	db4e      	blt.n	b37a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b2dc:	461f      	mov	r7, r3
    b2de:	4616      	mov	r6, r2
    b2e0:	69e3      	ldr	r3, [r4, #28]
    b2e2:	7b61      	ldrb	r1, [r4, #13]
    b2e4:	e77e      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b2e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b2e8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	f000 80a1 	beq.w	b432 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b2f0:	2d00      	cmp	r5, #0
    b2f2:	f040 8130 	bne.w	b556 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b2f6:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b2fa:	6820      	ldr	r0, [r4, #0]
    b2fc:	6523      	str	r3, [r4, #80]	; 0x50
    b2fe:	2100      	movs	r1, #0
    b300:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b302:	7362      	strb	r2, [r4, #13]
    b304:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b308:	4620      	mov	r0, r4
    b30a:	4798      	blx	r3
    b30c:	7b63      	ldrb	r3, [r4, #13]
    b30e:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b312:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b314:	9300      	str	r3, [sp, #0]
    b316:	e094      	b.n	b442 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b318:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b31c:	7b43      	ldrb	r3, [r0, #13]
    b31e:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b322:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b324:	4652      	mov	r2, sl
    b326:	eb16 060a 	adds.w	r6, r6, sl
    b32a:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b32e:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b332:	415f      	adcs	r7, r3
    b334:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b338:	2900      	cmp	r1, #0
    b33a:	d03f      	beq.n	b3bc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b33c:	f1ba 0f00 	cmp.w	sl, #0
    b340:	d139      	bne.n	b3b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b342:	2306      	movs	r3, #6
    b344:	7323      	strb	r3, [r4, #12]
    b346:	9900      	ldr	r1, [sp, #0]
    b348:	69e3      	ldr	r3, [r4, #28]
    b34a:	e74b      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b34c:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b34e:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b354:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b358:	2000      	movs	r0, #0
    b35a:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b35c:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b35e:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b360:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b362:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b364:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b366:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b368:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b36c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b370:	b005      	add	sp, #20
    b372:	ecbd 8b02 	vpop	{d8}
    b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b37a:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b37c:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b37e:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b380:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b382:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b386:	7322      	strb	r2, [r4, #12]
    b388:	69e3      	ldr	r3, [r4, #28]
    b38a:	7b61      	ldrb	r1, [r4, #13]
    b38c:	e72a      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b38e:	2302      	movs	r3, #2
    b390:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b392:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b396:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b398:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b39c:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b39e:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b3a0:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b3a4:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b3a6:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b3a8:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b3ac:	f280 80a2 	bge.w	b4f4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b3b0:	2d00      	cmp	r5, #0
    b3b2:	f340 809f 	ble.w	b4f4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b3b6:	9900      	ldr	r1, [sp, #0]
    b3b8:	69e3      	ldr	r3, [r4, #28]
    b3ba:	e713      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b3bc:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b3c0:	4286      	cmp	r6, r0
    b3c2:	eb77 0501 	sbcs.w	r5, r7, r1
    b3c6:	da03      	bge.n	b3d0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b3c8:	2e01      	cmp	r6, #1
    b3ca:	f177 0500 	sbcs.w	r5, r7, #0
    b3ce:	daf2      	bge.n	b3b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b3d0:	2500      	movs	r5, #0
    b3d2:	1a31      	subs	r1, r6, r0
    b3d4:	4628      	mov	r0, r5
    b3d6:	f011 f865 	bl	1c4a4 <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b3da:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b3dc:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b3e0:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b3e2:	fb00 9e03 	mla	lr, r0, r3, r9
    b3e6:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b3e8:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b3ec:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b3f0:	fb0e 330c 	mla	r3, lr, ip, r3
    b3f4:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b3f6:	1a32      	subs	r2, r6, r0
    b3f8:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b3fc:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b400:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b402:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b406:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b40a:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b40c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b410:	f280 80a9 	bge.w	b566 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b414:	42a8      	cmp	r0, r5
    b416:	f340 80a6 	ble.w	b566 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b41a:	2a01      	cmp	r2, #1
    b41c:	f173 0100 	sbcs.w	r1, r3, #0
    b420:	f2c0 80a1 	blt.w	b566 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b424:	2004      	movs	r0, #4
    b426:	461f      	mov	r7, r3
    b428:	9900      	ldr	r1, [sp, #0]
    b42a:	7320      	strb	r0, [r4, #12]
    b42c:	4616      	mov	r6, r2
    b42e:	69e3      	ldr	r3, [r4, #28]
    b430:	e6d8      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b432:	7b42      	ldrb	r2, [r0, #13]
    b434:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b436:	4619      	mov	r1, r3
    b438:	2000      	movs	r0, #0
    b43a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b43e:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b440:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b442:	4555      	cmp	r5, sl
    b444:	f000 80db 	beq.w	b5fe <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b448:	dda1      	ble.n	b38e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b44a:	2305      	movs	r3, #5
    b44c:	7323      	strb	r3, [r4, #12]
    b44e:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b452:	e6f6      	b.n	b242 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b454:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b458:	4611      	mov	r1, r2
    b45a:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b45c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b460:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b462:	4613      	mov	r3, r2
    b464:	429f      	cmp	r7, r3
    b466:	bf08      	it	eq
    b468:	428e      	cmpeq	r6, r1
    b46a:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b46e:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b472:	d00e      	beq.n	b492 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b474:	6803      	ldr	r3, [r0, #0]
    b476:	689b      	ldr	r3, [r3, #8]
    b478:	4798      	blx	r3
    b47a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b47e:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b480:	2b00      	cmp	r3, #0
    b482:	f040 80ca 	bne.w	b61a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b486:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b48a:	e9cd 2300 	strd	r2, r3, [sp]
    b48e:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b492:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b496:	0fcb      	lsrs	r3, r1, #31
    b498:	18c0      	adds	r0, r0, r3
    b49a:	464e      	mov	r6, r9
    b49c:	f141 0100 	adc.w	r1, r1, #0
    b4a0:	17f7      	asrs	r7, r6, #31
    b4a2:	1049      	asrs	r1, r1, #1
    b4a4:	ea4f 0030 	mov.w	r0, r0, rrx
    b4a8:	464a      	mov	r2, r9
    b4aa:	463b      	mov	r3, r7
    b4ac:	f010 ffaa 	bl	1c404 <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b4b0:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b4b8:	464a      	mov	r2, r9
    b4ba:	463b      	mov	r3, r7
    b4bc:	fb8a 010a 	smull	r0, r1, sl, sl
    b4c0:	f010 ffa0 	bl	1c404 <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b4c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b4c8:	1a82      	subs	r2, r0, r2
    b4ca:	eb61 0303 	sbc.w	r3, r1, r3
    b4ce:	4610      	mov	r0, r2
    b4d0:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
    b4d6:	4282      	cmp	r2, r0
    b4d8:	418b      	sbcs	r3, r1
    b4da:	db63      	blt.n	b5a4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b4dc:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b4e0:	4555      	cmp	r5, sl
    b4e2:	f340 8091 	ble.w	b608 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b4e6:	2305      	movs	r3, #5
    b4e8:	7323      	strb	r3, [r4, #12]
    b4ea:	7b63      	ldrb	r3, [r4, #13]
    b4ec:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b4f0:	9300      	str	r3, [sp, #0]
    b4f2:	e6a6      	b.n	b242 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b4f4:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b4f6:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b4fa:	4691      	mov	r9, r2
    b4fc:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b4fe:	461a      	mov	r2, r3
    b500:	4629      	mov	r1, r5
    b502:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b504:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b508:	2000      	movs	r0, #0
    b50a:	f010 ffcb 	bl	1c4a4 <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b50e:	4602      	mov	r2, r0
    b510:	fba2 0105 	umull	r0, r1, r2, r5
    b514:	2300      	movs	r3, #0
    b516:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b51a:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b51e:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b520:	4642      	mov	r2, r8
    b522:	464b      	mov	r3, r9
    b524:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b528:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b52c:	f010 ffba 	bl	1c4a4 <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b530:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b534:	0849      	lsrs	r1, r1, #1
    b536:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b53a:	1a12      	subs	r2, r2, r0
    b53c:	eb63 0301 	sbc.w	r3, r3, r1
    b540:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b544:	2303      	movs	r3, #3
    b546:	7323      	strb	r3, [r4, #12]
    b548:	e6ec      	b.n	b324 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b54a:	7b43      	ldrb	r3, [r0, #13]
    b54c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b54e:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b552:	9300      	str	r3, [sp, #0]
    b554:	e71d      	b.n	b392 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b556:	7b40      	ldrb	r0, [r0, #13]
    b558:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b55c:	9000      	str	r0, [sp, #0]
    b55e:	4290      	cmp	r0, r2
    b560:	f47f af6a 	bne.w	b438 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b564:	e6c9      	b.n	b2fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b566:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b568:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b56a:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b56c:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b56e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b572:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b574:	7322      	strb	r2, [r4, #12]
    b576:	69e3      	ldr	r3, [r4, #28]
    b578:	e634      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b57e:	fb8a 010a 	smull	r0, r1, sl, sl
    b582:	f010 ff8f 	bl	1c4a4 <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b586:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b58a:	0849      	lsrs	r1, r1, #1
    b58c:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b590:	1a12      	subs	r2, r2, r0
    b592:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b596:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b598:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b59c:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b59e:	7320      	strb	r0, [r4, #12]
    b5a0:	69e3      	ldr	r3, [r4, #28]
    b5a2:	e61f      	b.n	b1e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b5a4:	69a6      	ldr	r6, [r4, #24]
    b5a6:	17f1      	asrs	r1, r6, #31
    b5a8:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b5ae:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b5b0:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b5b2:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    b5b6:	4159      	adcs	r1, r3
    b5b8:	460b      	mov	r3, r1
    b5ba:	fb00 f107 	mul.w	r1, r0, r7
    b5be:	fb09 1303 	mla	r3, r9, r3, r1
    b5c2:	fba0 0109 	umull	r0, r1, r0, r9
    b5c6:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    b5c8:	f010 fede 	bl	1c388 <__aeabi_l2f>
    b5cc:	ee00 0a10 	vmov	s0, r0
    b5d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b5d8:	eeb1 8ac0 	vsqrt.f32	s16, s0
    b5dc:	d439      	bmi.n	b652 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    b5de:	ee18 0a10 	vmov	r0, s16
    b5e2:	f010 ff77 	bl	1c4d4 <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    b5e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b5ea:	4282      	cmp	r2, r0
    b5ec:	f04f 0300 	mov.w	r3, #0
    b5f0:	eb73 0601 	sbcs.w	r6, r3, r1
    b5f4:	bfb8      	it	lt
    b5f6:	4610      	movlt	r0, r2
    b5f8:	6520      	str	r0, [r4, #80]	; 0x50
    b5fa:	4682      	mov	sl, r0
    b5fc:	e770      	b.n	b4e0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    b5fe:	2303      	movs	r3, #3
    b600:	7323      	strb	r3, [r4, #12]
    b602:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b606:	e68d      	b.n	b324 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    b608:	2302      	movs	r3, #2
    b60a:	7323      	strb	r3, [r4, #12]
    b60c:	7b63      	ldrb	r3, [r4, #13]
    b60e:	9300      	str	r3, [sp, #0]
    b610:	e6bf      	b.n	b392 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    b612:	69c0      	ldr	r0, [r0, #28]
    b614:	69a3      	ldr	r3, [r4, #24]
    b616:	1ac0      	subs	r0, r0, r3
    b618:	e5d1      	b.n	b1be <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    b61a:	7b63      	ldrb	r3, [r4, #13]
    b61c:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b620:	9300      	str	r3, [sp, #0]
    b622:	e609      	b.n	b238 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    b624:	464a      	mov	r2, r9
    b626:	17d3      	asrs	r3, r2, #31
    b628:	fb85 0105 	smull	r0, r1, r5, r5
    b62c:	f010 feea 	bl	1c404 <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b630:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    b634:	1049      	asrs	r1, r1, #1
    b636:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b63a:	1ab6      	subs	r6, r6, r2
    b63c:	eb67 0703 	sbc.w	r7, r7, r3
    b640:	4286      	cmp	r6, r0
    b642:	eb77 0301 	sbcs.w	r3, r7, r1
    b646:	bfb4      	ite	lt
    b648:	2301      	movlt	r3, #1
    b64a:	2300      	movge	r3, #0
    b64c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b650:	e716      	b.n	b480 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    b652:	f00f fc6d 	bl	1af30 <sqrtf>
    b656:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b658:	e7c1      	b.n	b5de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    b65a:	7b43      	ldrb	r3, [r0, #13]
    b65c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b65e:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b662:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    b666:	9300      	str	r3, [sp, #0]
    b668:	e5eb      	b.n	b242 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    b66a:	bf00      	nop

0000b66c <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    b66c:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    b66e:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    b670:	4916      	ldr	r1, [pc, #88]	; (b6cc <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    b672:	6001      	str	r1, [r0, #0]
    b674:	2200      	movs	r2, #0
    b676:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    b67a:	2501      	movs	r5, #1
    b67c:	2102      	movs	r1, #2
    b67e:	2600      	movs	r6, #0
    b680:	2700      	movs	r7, #0
    b682:	f362 1486 	bfi	r4, r2, #6, #1
    b686:	7404      	strb	r4, [r0, #16]
    b688:	6042      	str	r2, [r0, #4]
    b68a:	6082      	str	r2, [r0, #8]
    b68c:	7302      	strb	r2, [r0, #12]
    b68e:	7342      	strb	r2, [r0, #13]
    b690:	6142      	str	r2, [r0, #20]
    b692:	6182      	str	r2, [r0, #24]
    b694:	61c2      	str	r2, [r0, #28]
    b696:	f880 2020 	strb.w	r2, [r0, #32]
    b69a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    b69e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    b6a2:	6282      	str	r2, [r0, #40]	; 0x28
    b6a4:	6402      	str	r2, [r0, #64]	; 0x40
    b6a6:	6442      	str	r2, [r0, #68]	; 0x44
    b6a8:	6502      	str	r2, [r0, #80]	; 0x50
    b6aa:	6642      	str	r2, [r0, #100]	; 0x64
    b6ac:	7385      	strb	r5, [r0, #14]
    b6ae:	6245      	str	r5, [r0, #36]	; 0x24
    b6b0:	6605      	str	r5, [r0, #96]	; 0x60
    b6b2:	62c1      	str	r1, [r0, #44]	; 0x2c
    b6b4:	6301      	str	r1, [r0, #48]	; 0x30
    b6b6:	6681      	str	r1, [r0, #104]	; 0x68
    b6b8:	66c1      	str	r1, [r0, #108]	; 0x6c
    b6ba:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    b6be:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    b6c2:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    b6c6:	bcf0      	pop	{r4, r5, r6, r7}
    b6c8:	4770      	bx	lr
    b6ca:	bf00      	nop
    b6cc:	0002325c 	.word	0x0002325c

0000b6d0 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    b6d0:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b6d2:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b6d4:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b6d6:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b6d8:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b6da:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b6dc:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b6de:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b6e0:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b6e2:	2700      	movs	r7, #0
    b6e4:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b6e8:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b6ea:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b6ec:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b6ee:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b6f0:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b6f2:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b6f4:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b6f8:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b6fa:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b6fc:	b662      	cpsie	i
}
    b6fe:	bcd0      	pop	{r4, r6, r7}
    b700:	4770      	bx	lr
    b702:	bf00      	nop
    b704:	0000      	movs	r0, r0
	...

0000b708 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    b708:	b510      	push	{r4, lr}
    b70a:	4604      	mov	r4, r0
    if (decelMax != 0) {
    b70c:	b191      	cbz	r1, b734 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    b70e:	a312      	add	r3, pc, #72	; (adr r3, b758 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    b710:	e9d3 2300 	ldrd	r2, r3, [r3]
    b714:	03c8      	lsls	r0, r1, #15
    b716:	0c49      	lsrs	r1, r1, #17
    b718:	f010 fe74 	bl	1c404 <__aeabi_ldivmod>
    b71c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b71e:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    b720:	f020 0201 	bic.w	r2, r0, #1
    b724:	bfb8      	it	lt
    b726:	2302      	movlt	r3, #2
    b728:	4293      	cmp	r3, r2
    b72a:	4618      	mov	r0, r3
    b72c:	bfb8      	it	lt
    b72e:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    b730:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b732:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    b734:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b738:	6b22      	ldr	r2, [r4, #48]	; 0x30
    b73a:	4293      	cmp	r3, r2
    b73c:	bfb8      	it	lt
    b73e:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b740:	2100      	movs	r1, #0
    m_velocityMove = true;
    b742:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b744:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b746:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    b748:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    b74c:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b74e:	b662      	cpsie	i
    b750:	bd10      	pop	{r4, pc}
    b752:	bf00      	nop
    b754:	f3af 8000 	nop.w
    b758:	017d7840 	.word	0x017d7840
    b75c:	00000000 	.word	0x00000000

0000b760 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    b760:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b762:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b764:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b766:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b768:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b76a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b76c:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b76e:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b770:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b772:	2700      	movs	r7, #0
    b774:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b778:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b77a:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b77c:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b77e:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b780:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b782:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b784:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b788:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b78a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b78c:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    b78e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b792:	03ca      	lsls	r2, r1, #15
    b794:	0c4b      	lsrs	r3, r1, #17
    b796:	4294      	cmp	r4, r2
    b798:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    b79c:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    b79e:	eb75 0103 	sbcs.w	r1, r5, r3
    b7a2:	bfbc      	itt	lt
    b7a4:	4622      	movlt	r2, r4
    b7a6:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    b7a8:	2a01      	cmp	r2, #1
    b7aa:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b7ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    b7b0:	bfbc      	itt	lt
    b7b2:	2201      	movlt	r2, #1
    b7b4:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b7b6:	17e5      	asrs	r5, r4, #31
    b7b8:	4294      	cmp	r4, r2
    b7ba:	eb75 0103 	sbcs.w	r1, r5, r3
    b7be:	bfb8      	it	lt
    b7c0:	4622      	movlt	r2, r4
    b7c2:	6602      	str	r2, [r0, #96]	; 0x60
}
    b7c4:	bcf0      	pop	{r4, r5, r6, r7}
    b7c6:	4770      	bx	lr

0000b7c8 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    b7c8:	6843      	ldr	r3, [r0, #4]
    b7ca:	b363      	cbz	r3, b826 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b7cc:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b7ce:	f013 0218 	ands.w	r2, r3, #24
    b7d2:	d12a      	bne.n	b82a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    b7d4:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b7d6:	7c02      	ldrb	r2, [r0, #16]
    b7d8:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    b7dc:	b2d2      	uxtb	r2, r2
    b7de:	4613      	mov	r3, r2
    b7e0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    b7e4:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b7e8:	b2db      	uxtb	r3, r3
    b7ea:	461a      	mov	r2, r3
    b7ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
    b7f0:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    b7f4:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b7f6:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    b7f8:	075a      	lsls	r2, r3, #29
    b7fa:	d514      	bpl.n	b826 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    b7fc:	7b42      	ldrb	r2, [r0, #13]
    b7fe:	b9e2      	cbnz	r2, b83a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    b800:	0719      	lsls	r1, r3, #28
    b802:	d510      	bpl.n	b826 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    b804:	f043 0301 	orr.w	r3, r3, #1
    b808:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    b80a:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b80c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b80e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    b810:	4293      	cmp	r3, r2
    b812:	bfb8      	it	lt
    b814:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b816:	2100      	movs	r1, #0
    m_velocityMove = true;
    b818:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b81a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b81c:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    b81e:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    b822:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b824:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    b826:	2000      	movs	r0, #0
    b828:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b82a:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    b82e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b832:	1ad3      	subs	r3, r2, r3
    b834:	bf18      	it	ne
    b836:	2301      	movne	r3, #1
    b838:	e7cd      	b.n	b7d6 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    b83a:	06da      	lsls	r2, r3, #27
    b83c:	d5f3      	bpl.n	b826 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    b83e:	f043 0302 	orr.w	r3, r3, #2
    b842:	7403      	strb	r3, [r0, #16]
    b844:	e7e1      	b.n	b80a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    b846:	bf00      	nop

0000b848 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    b848:	4ba1      	ldr	r3, [pc, #644]	; (bad0 <SystemInit+0x288>)
    b84a:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    b84e:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    b850:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    b852:	691a      	ldr	r2, [r3, #16]
    b854:	0792      	lsls	r2, r2, #30
    b856:	d5fc      	bpl.n	b852 <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b858:	4a9e      	ldr	r2, [pc, #632]	; (bad4 <SystemInit+0x28c>)
    b85a:	4b9f      	ldr	r3, [pc, #636]	; (bad8 <SystemInit+0x290>)
    b85c:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    b85e:	6853      	ldr	r3, [r2, #4]
    b860:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    b864:	d1fb      	bne.n	b85e <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    b866:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    b86a:	499a      	ldr	r1, [pc, #616]	; (bad4 <SystemInit+0x28c>)
    b86c:	f363 1086 	bfi	r0, r3, #6, #1
    b870:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    b874:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b878:	065b      	lsls	r3, r3, #25
    b87a:	d4fb      	bmi.n	b874 <SystemInit+0x2c>
    b87c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b880:	4a94      	ldr	r2, [pc, #592]	; (bad4 <SystemInit+0x28c>)
    b882:	2005      	movs	r0, #5
    b884:	f360 0303 	bfi	r3, r0, #0, #4
    b888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b88c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b898:	6853      	ldr	r3, [r2, #4]
    b89a:	f013 0f14 	tst.w	r3, #20
    b89e:	d1fb      	bne.n	b898 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b8a0:	4b8b      	ldr	r3, [pc, #556]	; (bad0 <SystemInit+0x288>)
    b8a2:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b8a4:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b8a6:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b8a8:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b8aa:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b8ac:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b8ae:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b8b2:	6913      	ldr	r3, [r2, #16]
    b8b4:	01df      	lsls	r7, r3, #7
    b8b6:	d4fc      	bmi.n	b8b2 <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    b8b8:	4a86      	ldr	r2, [pc, #536]	; (bad4 <SystemInit+0x28c>)
    b8ba:	f44f 7384 	mov.w	r3, #264	; 0x108
    b8be:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    b8c0:	6853      	ldr	r3, [r2, #4]
    b8c2:	f013 0304 	ands.w	r3, r3, #4
    b8c6:	d1fb      	bne.n	b8c0 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b8c8:	4884      	ldr	r0, [pc, #528]	; (badc <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b8ca:	4982      	ldr	r1, [pc, #520]	; (bad4 <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b8cc:	2401      	movs	r4, #1
    b8ce:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b8d0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    b8d4:	f363 1086 	bfi	r0, r3, #6, #1
    b8d8:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    b8dc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b8e0:	065e      	lsls	r6, r3, #25
    b8e2:	d4fb      	bmi.n	b8dc <SystemInit+0x94>
    b8e4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b8e8:	4a7a      	ldr	r2, [pc, #488]	; (bad4 <SystemInit+0x28c>)
    b8ea:	2005      	movs	r0, #5
    b8ec:	f360 0303 	bfi	r3, r0, #0, #4
    b8f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b8f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b8fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b900:	6853      	ldr	r3, [r2, #4]
    b902:	f013 0314 	ands.w	r3, r3, #20
    b906:	d1fb      	bne.n	b900 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b908:	4871      	ldr	r0, [pc, #452]	; (bad0 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    b90a:	4972      	ldr	r1, [pc, #456]	; (bad4 <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b90c:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    b90e:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    b910:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    b912:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    b914:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    b916:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    b91a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    b91e:	f363 1086 	bfi	r0, r3, #6, #1
    b922:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    b926:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    b92a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b92e:	2b00      	cmp	r3, #0
    b930:	d1f9      	bne.n	b926 <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    b932:	4c67      	ldr	r4, [pc, #412]	; (bad0 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    b934:	486a      	ldr	r0, [pc, #424]	; (bae0 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    b936:	4a67      	ldr	r2, [pc, #412]	; (bad4 <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    b938:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    b93a:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    b93c:	6853      	ldr	r3, [r2, #4]
    b93e:	065d      	lsls	r5, r3, #25
    b940:	d4fc      	bmi.n	b93c <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b942:	4b66      	ldr	r3, [pc, #408]	; (badc <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b944:	4967      	ldr	r1, [pc, #412]	; (bae4 <SystemInit+0x29c>)
    b946:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b948:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b94a:	4e67      	ldr	r6, [pc, #412]	; (bae8 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    b94c:	4d67      	ldr	r5, [pc, #412]	; (baec <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    b94e:	4c68      	ldr	r4, [pc, #416]	; (baf0 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    b950:	4960      	ldr	r1, [pc, #384]	; (bad4 <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    b952:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    b956:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    b958:	6998      	ldr	r0, [r3, #24]
    b95a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b95e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    b960:	6958      	ldr	r0, [r3, #20]
    b962:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b966:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    b968:	6998      	ldr	r0, [r3, #24]
    b96a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    b96e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    b970:	6998      	ldr	r0, [r3, #24]
    b972:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    b976:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    b978:	69d8      	ldr	r0, [r3, #28]
    b97a:	f040 0020 	orr.w	r0, r0, #32
    b97e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    b980:	6918      	ldr	r0, [r3, #16]
    b982:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b986:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    b988:	69d8      	ldr	r0, [r3, #28]
    b98a:	f040 0004 	orr.w	r0, r0, #4
    b98e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    b990:	6a18      	ldr	r0, [r3, #32]
    b992:	f040 0001 	orr.w	r0, r0, #1
    b996:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    b998:	6a18      	ldr	r0, [r3, #32]
    b99a:	f040 0008 	orr.w	r0, r0, #8
    b99e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    b9a0:	6a18      	ldr	r0, [r3, #32]
    b9a2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b9a6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    b9a8:	69d8      	ldr	r0, [r3, #28]
    b9aa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b9ae:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    b9b0:	6958      	ldr	r0, [r3, #20]
    b9b2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    b9b6:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    b9b8:	6a18      	ldr	r0, [r3, #32]
    b9ba:	f040 0020 	orr.w	r0, r0, #32
    b9be:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b9c0:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    b9c2:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    b9c6:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    b9c8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    b9cc:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    b9ce:	684b      	ldr	r3, [r1, #4]
    b9d0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    b9d4:	d1fb      	bne.n	b9ce <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    b9d6:	4a47      	ldr	r2, [pc, #284]	; (baf4 <SystemInit+0x2ac>)
    b9d8:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    b9da:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    b9de:	4a3d      	ldr	r2, [pc, #244]	; (bad4 <SystemInit+0x28c>)
    b9e0:	f363 1086 	bfi	r0, r3, #6, #1
    b9e4:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    b9e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b9ec:	065c      	lsls	r4, r3, #25
    b9ee:	d4fb      	bmi.n	b9e8 <SystemInit+0x1a0>
    b9f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    b9f4:	4937      	ldr	r1, [pc, #220]	; (bad4 <SystemInit+0x28c>)
    b9f6:	2006      	movs	r0, #6
    b9f8:	f360 0303 	bfi	r3, r0, #0, #4
    b9fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ba00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    ba04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ba0c:	684b      	ldr	r3, [r1, #4]
    ba0e:	f013 0318 	ands.w	r3, r3, #24
    ba12:	d1fb      	bne.n	ba0c <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    ba14:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    ba18:	4a2e      	ldr	r2, [pc, #184]	; (bad4 <SystemInit+0x28c>)
    ba1a:	f363 1086 	bfi	r0, r3, #6, #1
    ba1e:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    ba22:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    ba26:	0658      	lsls	r0, r3, #25
    ba28:	d4fb      	bmi.n	ba22 <SystemInit+0x1da>
    ba2a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    ba2e:	4929      	ldr	r1, [pc, #164]	; (bad4 <SystemInit+0x28c>)
    ba30:	2006      	movs	r0, #6
    ba32:	f360 0303 	bfi	r3, r0, #0, #4
    ba36:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    ba3a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    ba3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba42:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    ba46:	684b      	ldr	r3, [r1, #4]
    ba48:	f013 0318 	ands.w	r3, r3, #24
    ba4c:	d1fb      	bne.n	ba46 <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    ba4e:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    ba52:	4a20      	ldr	r2, [pc, #128]	; (bad4 <SystemInit+0x28c>)
    ba54:	f363 1086 	bfi	r0, r3, #6, #1
    ba58:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    ba5c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ba60:	0659      	lsls	r1, r3, #25
    ba62:	d4fb      	bmi.n	ba5c <SystemInit+0x214>
    ba64:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ba68:	491a      	ldr	r1, [pc, #104]	; (bad4 <SystemInit+0x28c>)
    ba6a:	2006      	movs	r0, #6
    ba6c:	f360 0303 	bfi	r3, r0, #0, #4
    ba70:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    ba74:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ba78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba7c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    ba80:	684b      	ldr	r3, [r1, #4]
    ba82:	f013 0318 	ands.w	r3, r3, #24
    ba86:	d1fb      	bne.n	ba80 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    ba88:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    ba8c:	4a11      	ldr	r2, [pc, #68]	; (bad4 <SystemInit+0x28c>)
    ba8e:	f363 1086 	bfi	r0, r3, #6, #1
    ba92:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ba96:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ba9a:	065b      	lsls	r3, r3, #25
    ba9c:	d4fb      	bmi.n	ba96 <SystemInit+0x24e>
    ba9e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    baa2:	490c      	ldr	r1, [pc, #48]	; (bad4 <SystemInit+0x28c>)
    baa4:	2006      	movs	r0, #6
    baa6:	f360 0303 	bfi	r3, r0, #0, #4
    baaa:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    baae:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bab6:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    baba:	684b      	ldr	r3, [r1, #4]
    babc:	f013 0f18 	tst.w	r3, #24
    bac0:	d1fb      	bne.n	baba <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    bac2:	4a04      	ldr	r2, [pc, #16]	; (bad4 <SystemInit+0x28c>)
    bac4:	6853      	ldr	r3, [r2, #4]
    bac6:	2b00      	cmp	r3, #0
    bac8:	d1fc      	bne.n	bac4 <SystemInit+0x27c>
        continue;
    }
    return;
}
    baca:	bcf0      	pop	{r4, r5, r6, r7}
    bacc:	4770      	bx	lr
    bace:	bf00      	nop
    bad0:	40001000 	.word	0x40001000
    bad4:	40001c00 	.word	0x40001c00
    bad8:	00190301 	.word	0x00190301
    badc:	40000800 	.word	0x40000800
    bae0:	00020107 	.word	0x00020107
    bae4:	00320b01 	.word	0x00320b01
    bae8:	41006000 	.word	0x41006000
    baec:	e000ed00 	.word	0xe000ed00
    baf0:	003a0108 	.word	0x003a0108
    baf4:	000c0108 	.word	0x000c0108

0000baf8 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    baf8:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    bafa:	4a0e      	ldr	r2, [pc, #56]	; (bb34 <GClkFreqUpdate+0x3c>)
    bafc:	f100 0408 	add.w	r4, r0, #8
    bb00:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    bb04:	f003 030f 	and.w	r3, r3, #15
    bb08:	2b01      	cmp	r3, #1
    bb0a:	d001      	beq.n	bb10 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    bb0c:	bc70      	pop	{r4, r5, r6}
    bb0e:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    bb10:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    bb14:	4d08      	ldr	r5, [pc, #32]	; (bb38 <GClkFreqUpdate+0x40>)
    bb16:	fbb5 f1f1 	udiv	r1, r5, r1
    bb1a:	b289      	uxth	r1, r1
    bb1c:	f361 461f 	bfi	r6, r1, #16, #16
    bb20:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    bb24:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    bb26:	6851      	ldr	r1, [r2, #4]
    bb28:	f3c1 018b 	ubfx	r1, r1, #2, #12
    bb2c:	4219      	tst	r1, r3
    bb2e:	d1fa      	bne.n	bb26 <GClkFreqUpdate+0x2e>
}
    bb30:	bc70      	pop	{r4, r5, r6}
    bb32:	4770      	bx	lr
    bb34:	40001c00 	.word	0x40001c00
    bb38:	017d7840 	.word	0x017d7840

0000bb3c <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    bb3c:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    bb3e:	4911      	ldr	r1, [pc, #68]	; (bb84 <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    bb40:	4b11      	ldr	r3, [pc, #68]	; (bb88 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    bb42:	4a12      	ldr	r2, [pc, #72]	; (bb8c <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    bb44:	6001      	str	r1, [r0, #0]
    bb46:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    bb48:	4604      	mov	r4, r0
      m_stepsLast(0) {
    bb4a:	6042      	str	r2, [r0, #4]
    bb4c:	6083      	str	r3, [r0, #8]
    bb4e:	60c5      	str	r5, [r0, #12]
    bb50:	6105      	str	r5, [r0, #16]
    bb52:	6145      	str	r5, [r0, #20]
    bb54:	8305      	strh	r5, [r0, #24]
    bb56:	4629      	mov	r1, r5
    bb58:	22c8      	movs	r2, #200	; 0xc8
    bb5a:	301c      	adds	r0, #28
    bb5c:	f012 fcc6 	bl	1e4ec <memset>
    bb60:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    bb64:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    bb68:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    bb6c:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    bb70:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    bb74:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    bb78:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    bb7c:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    bb80:	4620      	mov	r0, r4
    bb82:	bd38      	pop	{r3, r4, r5, pc}
    bb84:	00023268 	.word	0x00023268
    bb88:	00023288 	.word	0x00023288
    bb8c:	00023278 	.word	0x00023278

0000bb90 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    bb90:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bb92:	4a12      	ldr	r2, [pc, #72]	; (bbdc <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    bb94:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bb98:	f36f 1386 	bfc	r3, #6, #1
    bb9c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bba0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bba4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bba8:	2b00      	cmp	r3, #0
    bbaa:	d1f9      	bne.n	bba0 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    bbac:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bbb0:	490b      	ldr	r1, [pc, #44]	; (bbe0 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bbb2:	4c0c      	ldr	r4, [pc, #48]	; (bbe4 <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    bbb4:	4d0c      	ldr	r5, [pc, #48]	; (bbe8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bbb6:	f363 0003 	bfi	r0, r3, #0, #4
    bbba:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    bbbe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bbc6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bbca:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bbcc:	69cb      	ldr	r3, [r1, #28]
    bbce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbd2:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bbd4:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    bbd6:	bc30      	pop	{r4, r5}
    bbd8:	4770      	bx	lr
    bbda:	bf00      	nop
    bbdc:	40001c00 	.word	0x40001c00
    bbe0:	40000800 	.word	0x40000800
    bbe4:	42001c00 	.word	0x42001c00
    bbe8:	07030000 	.word	0x07030000

0000bbec <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    bbee:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d038      	beq.n	bc68 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    bbf6:	4a29      	ldr	r2, [pc, #164]	; (bc9c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    bbf8:	2360      	movs	r3, #96	; 0x60
    bbfa:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    bbfc:	6913      	ldr	r3, [r2, #16]
    bbfe:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    bc02:	d1fb      	bne.n	bbfc <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bc04:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    bc06:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    bc08:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    bc0c:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    bc10:	1aaa      	subs	r2, r5, r2
    bc12:	b212      	sxth	r2, r2
    bc14:	4604      	mov	r4, r0
    bc16:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bc1a:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    bc1c:	bb29      	cbnz	r1, bc6a <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    bc1e:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bc20:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    bc24:	f3bf 8f5b 	dmb	ish
    bc28:	e853 6f00 	ldrex	r6, [r3]
    bc2c:	4416      	add	r6, r2
    bc2e:	e843 6100 	strex	r1, r6, [r3]
    bc32:	2900      	cmp	r1, #0
    bc34:	d1f8      	bne.n	bc28 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    bc36:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bc3a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bc3e:	4d18      	ldr	r5, [pc, #96]	; (bca0 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    bc40:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    bc44:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bc46:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bc48:	fb85 2503 	smull	r2, r5, r5, r3
    bc4c:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bc4e:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bc50:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bc54:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bc56:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bc58:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bc5c:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bc60:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    bc62:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bc64:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    bc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bc6a:	68c6      	ldr	r6, [r0, #12]
    bc6c:	f3bf 8f5b 	dmb	ish
    bc70:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    bc74:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bc78:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    bc7a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bc7e:	4432      	add	r2, r6
    bc80:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bc82:	4808      	ldr	r0, [pc, #32]	; (bca4 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bc84:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bc88:	f991 1003 	ldrsb.w	r1, [r1, #3]
    bc8c:	6800      	ldr	r0, [r0, #0]
    bc8e:	2201      	movs	r2, #1
    bc90:	f003 ffee 	bl	fc70 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    bc94:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    bc98:	e7c1      	b.n	bc1e <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    bc9a:	bf00      	nop
    bc9c:	42001c00 	.word	0x42001c00
    bca0:	51eb851f 	.word	0x51eb851f
    bca4:	20001f08 	.word	0x20001f08

0000bca8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bcaa:	780d      	ldrb	r5, [r1, #0]
    bcac:	f3c5 1441 	ubfx	r4, r5, #5, #2
    bcb0:	2c01      	cmp	r4, #1
{
    bcb2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bcb4:	d152      	bne.n	bd5c <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bcb6:	4e30      	ldr	r6, [pc, #192]	; (bd78 <cdcdf_acm_req+0xd0>)
    bcb8:	888c      	ldrh	r4, [r1, #4]
    bcba:	7833      	ldrb	r3, [r6, #0]
    bcbc:	42a3      	cmp	r3, r4
    bcbe:	d002      	beq.n	bcc6 <cdcdf_acm_req+0x1e>
    bcc0:	7873      	ldrb	r3, [r6, #1]
    bcc2:	42a3      	cmp	r3, r4
    bcc4:	d14a      	bne.n	bd5c <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bcc6:	062b      	lsls	r3, r5, #24
    bcc8:	4617      	mov	r7, r2
    bcca:	4606      	mov	r6, r0
    bccc:	460c      	mov	r4, r1
    bcce:	d438      	bmi.n	bd42 <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    bcd0:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bcd2:	f000 fc7f 	bl	c5d4 <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    bcd6:	7863      	ldrb	r3, [r4, #1]
    bcd8:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bcda:	4601      	mov	r1, r0
	switch (req->bRequest) {
    bcdc:	d00f      	beq.n	bcfe <cdcdf_acm_req+0x56>
    bcde:	2b22      	cmp	r3, #34	; 0x22
    bce0:	d128      	bne.n	bd34 <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    bce2:	2300      	movs	r3, #0
    bce4:	461a      	mov	r2, r3
    bce6:	4619      	mov	r1, r3
    bce8:	4618      	mov	r0, r3
    bcea:	f000 fc07 	bl	c4fc <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    bcee:	4b23      	ldr	r3, [pc, #140]	; (bd7c <cdcdf_acm_req+0xd4>)
    bcf0:	681b      	ldr	r3, [r3, #0]
    bcf2:	b31b      	cbz	r3, bd3c <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    bcf4:	8860      	ldrh	r0, [r4, #2]
    bcf6:	4798      	blx	r3
		return ERR_NONE;
    bcf8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    bcfa:	b003      	add	sp, #12
    bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bcfe:	2d07      	cmp	r5, #7
    bd00:	d136      	bne.n	bd70 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    bd02:	b37f      	cbz	r7, bd64 <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bd04:	4b1e      	ldr	r3, [pc, #120]	; (bd80 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bd06:	6800      	ldr	r0, [r0, #0]
    bd08:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bd0a:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bd0c:	888a      	ldrh	r2, [r1, #4]
    bd0e:	7989      	ldrb	r1, [r1, #6]
    bd10:	f88d 1006 	strb.w	r1, [sp, #6]
    bd14:	466c      	mov	r4, sp
    bd16:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bd1a:	b113      	cbz	r3, bd22 <cdcdf_acm_req+0x7a>
    bd1c:	4668      	mov	r0, sp
    bd1e:	4798      	blx	r3
    bd20:	b160      	cbz	r0, bd3c <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bd22:	e894 0003 	ldmia.w	r4, {r0, r1}
    bd26:	4b17      	ldr	r3, [pc, #92]	; (bd84 <cdcdf_acm_req+0xdc>)
    bd28:	0c0a      	lsrs	r2, r1, #16
    bd2a:	6018      	str	r0, [r3, #0]
    bd2c:	8099      	strh	r1, [r3, #4]
    bd2e:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    bd30:	2000      	movs	r0, #0
    bd32:	e001      	b.n	bd38 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    bd34:	f06f 000c 	mvn.w	r0, #12
}
    bd38:	b003      	add	sp, #12
    bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    bd3c:	2000      	movs	r0, #0
}
    bd3e:	b003      	add	sp, #12
    bd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    bd42:	2a01      	cmp	r2, #1
    bd44:	d0fa      	beq.n	bd3c <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    bd46:	784b      	ldrb	r3, [r1, #1]
    bd48:	2b21      	cmp	r3, #33	; 0x21
    bd4a:	d1f3      	bne.n	bd34 <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bd4c:	88ca      	ldrh	r2, [r1, #6]
    bd4e:	2a07      	cmp	r2, #7
    bd50:	d10e      	bne.n	bd70 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bd52:	2300      	movs	r3, #0
    bd54:	490b      	ldr	r1, [pc, #44]	; (bd84 <cdcdf_acm_req+0xdc>)
    bd56:	f000 fbd1 	bl	c4fc <usbdc_xfer>
    bd5a:	e7ed      	b.n	bd38 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    bd5c:	f06f 0009 	mvn.w	r0, #9
}
    bd60:	b003      	add	sp, #12
    bd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bd64:	463b      	mov	r3, r7
    bd66:	462a      	mov	r2, r5
    bd68:	4630      	mov	r0, r6
    bd6a:	f000 fbc7 	bl	c4fc <usbdc_xfer>
    bd6e:	e7e3      	b.n	bd38 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    bd70:	f04f 30ff 	mov.w	r0, #4294967295
    bd74:	e7e0      	b.n	bd38 <cdcdf_acm_req+0x90>
    bd76:	bf00      	nop
    bd78:	20001c10 	.word	0x20001c10
    bd7c:	20001c18 	.word	0x20001c18
    bd80:	20001c1c 	.word	0x20001c1c
    bd84:	20001c20 	.word	0x20001c20

0000bd88 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    bd88:	2901      	cmp	r1, #1
{
    bd8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bd8e:	4616      	mov	r6, r2
	switch (ctrl) {
    bd90:	d008      	beq.n	bda4 <cdcdf_acm_ctrl+0x1c>
    bd92:	d314      	bcc.n	bdbe <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    bd94:	2902      	cmp	r1, #2
    bd96:	bf0c      	ite	eq
    bd98:	f06f 001a 	mvneq.w	r0, #26
    bd9c:	f06f 000c 	mvnne.w	r0, #12
    bda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bda4:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    bda6:	2a00      	cmp	r2, #0
    bda8:	d047      	beq.n	be3a <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bdaa:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bdac:	795b      	ldrb	r3, [r3, #5]
    bdae:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    bdb2:	2b02      	cmp	r3, #2
    bdb4:	d041      	beq.n	be3a <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    bdb6:	f06f 0009 	mvn.w	r0, #9
    bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    bdbe:	6813      	ldr	r3, [r2, #0]
    bdc0:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    bdc2:	2b00      	cmp	r3, #0
    bdc4:	d0f7      	beq.n	bdb6 <cdcdf_acm_ctrl+0x2e>
    bdc6:	f107 38ff 	add.w	r8, r7, #4294967295
    bdca:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bdce:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    bdd0:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bdd2:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    bdd6:	2a02      	cmp	r2, #2
    bdd8:	d1ed      	bne.n	bdb6 <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bdda:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    bdde:	4291      	cmp	r1, r2
    bde0:	d061      	beq.n	bea6 <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bde2:	2aff      	cmp	r2, #255	; 0xff
    bde4:	d15b      	bne.n	be9e <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bde6:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bdea:	4618      	mov	r0, r3
    bdec:	6871      	ldr	r1, [r6, #4]
    bdee:	2205      	movs	r2, #5
    bdf0:	f000 fc00 	bl	c5f4 <usb_find_desc>
		while (NULL != ep) {
    bdf4:	4604      	mov	r4, r0
    bdf6:	b980      	cbnz	r0, be1a <cdcdf_acm_ctrl+0x92>
    bdf8:	e041      	b.n	be7e <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bdfa:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bdfc:	bf4c      	ite	mi
    bdfe:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    be02:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    be04:	4628      	mov	r0, r5
    be06:	f000 feaf 	bl	cb68 <usb_d_ep_enable>
			desc->sod = ep;
    be0a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    be0c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    be0e:	6871      	ldr	r1, [r6, #4]
    be10:	4420      	add	r0, r4
    be12:	f000 fc09 	bl	c628 <usb_find_ep_desc>
		while (NULL != ep) {
    be16:	4604      	mov	r4, r0
    be18:	b388      	cbz	r0, be7e <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    be1a:	7963      	ldrb	r3, [r4, #5]
    be1c:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    be1e:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    be20:	78e1      	ldrb	r1, [r4, #3]
    be22:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    be26:	b292      	uxth	r2, r2
    be28:	4628      	mov	r0, r5
    be2a:	f000 fe4b 	bl	cac4 <usb_d_ep_init>
    be2e:	2800      	cmp	r0, #0
    be30:	d0e3      	beq.n	bdfa <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    be32:	f06f 0013 	mvn.w	r0, #19
}
    be36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    be3a:	7823      	ldrb	r3, [r4, #0]
    be3c:	2bff      	cmp	r3, #255	; 0xff
    be3e:	d007      	beq.n	be50 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    be40:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    be42:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    be44:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    be46:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    be48:	d002      	beq.n	be50 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    be4a:	f000 fe71 	bl	cb30 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    be4e:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    be50:	7863      	ldrb	r3, [r4, #1]
    be52:	2bff      	cmp	r3, #255	; 0xff
    be54:	d007      	beq.n	be66 <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    be56:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    be58:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    be5a:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    be5c:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    be5e:	d002      	beq.n	be66 <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    be60:	f000 fe66 	bl	cb30 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    be64:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    be66:	7920      	ldrb	r0, [r4, #4]
    be68:	28ff      	cmp	r0, #255	; 0xff
    be6a:	d003      	beq.n	be74 <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    be6c:	f000 fe60 	bl	cb30 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    be70:	23ff      	movs	r3, #255	; 0xff
    be72:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    be74:	4b0f      	ldr	r3, [pc, #60]	; (beb4 <cdcdf_acm_ctrl+0x12c>)
    be76:	2000      	movs	r0, #0
    be78:	7158      	strb	r0, [r3, #5]
    be7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    be7e:	6833      	ldr	r3, [r6, #0]
    be80:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    be82:	7818      	ldrb	r0, [r3, #0]
    be84:	2204      	movs	r2, #4
    be86:	4418      	add	r0, r3
    be88:	f000 fbb4 	bl	c5f4 <usb_find_desc>
	for (i = 0; i < 2; i++) {
    be8c:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    be8e:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    be90:	d10d      	bne.n	beae <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    be92:	4b08      	ldr	r3, [pc, #32]	; (beb4 <cdcdf_acm_ctrl+0x12c>)
    be94:	2201      	movs	r2, #1
    be96:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    be98:	2000      	movs	r0, #0
    be9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    be9e:	f06f 001b 	mvn.w	r0, #27
    bea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    bea6:	f06f 0011 	mvn.w	r0, #17
    beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    beae:	2b00      	cmp	r3, #0
    beb0:	d18d      	bne.n	bdce <cdcdf_acm_ctrl+0x46>
    beb2:	e780      	b.n	bdb6 <cdcdf_acm_ctrl+0x2e>
    beb4:	20001c10 	.word	0x20001c10

0000beb8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    beb8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    beba:	f000 fb91 	bl	c5e0 <usbdc_get_state>
    bebe:	2801      	cmp	r0, #1
    bec0:	d80d      	bhi.n	bede <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bec2:	4b08      	ldr	r3, [pc, #32]	; (bee4 <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bec4:	4a08      	ldr	r2, [pc, #32]	; (bee8 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bec6:	4909      	ldr	r1, [pc, #36]	; (beec <cdcdf_acm_init+0x34>)
    bec8:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    beca:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    becc:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    bece:	f000 fb61 	bl	c594 <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bed2:	4907      	ldr	r1, [pc, #28]	; (bef0 <cdcdf_acm_init+0x38>)
    bed4:	2001      	movs	r0, #1
    bed6:	f000 fb1f 	bl	c518 <usbdc_register_handler>
	return ERR_NONE;
    beda:	2000      	movs	r0, #0
    bedc:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bede:	f06f 0010 	mvn.w	r0, #16
}
    bee2:	bd08      	pop	{r3, pc}
    bee4:	20001c04 	.word	0x20001c04
    bee8:	20001c10 	.word	0x20001c10
    beec:	0000bd89 	.word	0x0000bd89
    bef0:	200000e4 	.word	0x200000e4

0000bef4 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    bef4:	4b08      	ldr	r3, [pc, #32]	; (bf18 <cdcdf_acm_read+0x24>)
{
    bef6:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    bef8:	795c      	ldrb	r4, [r3, #5]
    befa:	b13c      	cbz	r4, bf0c <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    befc:	460a      	mov	r2, r1
}
    befe:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bf02:	4601      	mov	r1, r0
    bf04:	7918      	ldrb	r0, [r3, #4]
    bf06:	2300      	movs	r3, #0
    bf08:	f000 baf8 	b.w	c4fc <usbdc_xfer>
}
    bf0c:	f06f 0010 	mvn.w	r0, #16
    bf10:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf14:	4770      	bx	lr
    bf16:	bf00      	nop
    bf18:	20001c10 	.word	0x20001c10

0000bf1c <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    bf1c:	4b08      	ldr	r3, [pc, #32]	; (bf40 <cdcdf_acm_write+0x24>)
{
    bf1e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    bf20:	795c      	ldrb	r4, [r3, #5]
    bf22:	b13c      	cbz	r4, bf34 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bf24:	460a      	mov	r2, r1
}
    bf26:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bf2a:	4601      	mov	r1, r0
    bf2c:	78d8      	ldrb	r0, [r3, #3]
    bf2e:	2301      	movs	r3, #1
    bf30:	f000 bae4 	b.w	c4fc <usbdc_xfer>
}
    bf34:	f06f 0010 	mvn.w	r0, #16
    bf38:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf3c:	4770      	bx	lr
    bf3e:	bf00      	nop
    bf40:	20001c10 	.word	0x20001c10

0000bf44 <cdcdf_acm_stop_xfer>:
{
    bf44:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bf46:	4c04      	ldr	r4, [pc, #16]	; (bf58 <cdcdf_acm_stop_xfer+0x14>)
    bf48:	78e0      	ldrb	r0, [r4, #3]
    bf4a:	f000 fecb 	bl	cce4 <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bf4e:	7920      	ldrb	r0, [r4, #4]
}
    bf50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bf54:	f000 bec6 	b.w	cce4 <usb_d_ep_abort>
    bf58:	20001c10 	.word	0x20001c10

0000bf5c <cdcdf_acm_register_callback>:
{
    bf5c:	b508      	push	{r3, lr}
	switch (cb_type) {
    bf5e:	2803      	cmp	r0, #3
    bf60:	d81b      	bhi.n	bf9a <cdcdf_acm_register_callback+0x3e>
    bf62:	e8df f000 	tbb	[pc, r0]
    bf66:	0a12      	.short	0x0a12
    bf68:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bf6a:	4b0d      	ldr	r3, [pc, #52]	; (bfa0 <cdcdf_acm_register_callback+0x44>)
    bf6c:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    bf6e:	2000      	movs	r0, #0
		break;
    bf70:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bf72:	4b0c      	ldr	r3, [pc, #48]	; (bfa4 <cdcdf_acm_register_callback+0x48>)
    bf74:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    bf76:	2000      	movs	r0, #0
		break;
    bf78:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bf7a:	4b0b      	ldr	r3, [pc, #44]	; (bfa8 <cdcdf_acm_register_callback+0x4c>)
    bf7c:	460a      	mov	r2, r1
    bf7e:	78d8      	ldrb	r0, [r3, #3]
    bf80:	2102      	movs	r1, #2
    bf82:	f000 ff05 	bl	cd90 <usb_d_ep_register_callback>
	return ERR_NONE;
    bf86:	2000      	movs	r0, #0
		break;
    bf88:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bf8a:	4b07      	ldr	r3, [pc, #28]	; (bfa8 <cdcdf_acm_register_callback+0x4c>)
    bf8c:	460a      	mov	r2, r1
    bf8e:	7918      	ldrb	r0, [r3, #4]
    bf90:	2102      	movs	r1, #2
    bf92:	f000 fefd 	bl	cd90 <usb_d_ep_register_callback>
	return ERR_NONE;
    bf96:	2000      	movs	r0, #0
		break;
    bf98:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    bf9a:	f06f 000c 	mvn.w	r0, #12
}
    bf9e:	bd08      	pop	{r3, pc}
    bfa0:	20001c18 	.word	0x20001c18
    bfa4:	20001c1c 	.word	0x20001c1c
    bfa8:	20001c10 	.word	0x20001c10

0000bfac <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    bfac:	4b01      	ldr	r3, [pc, #4]	; (bfb4 <cdcdf_acm_is_enabled+0x8>)
}
    bfae:	7958      	ldrb	r0, [r3, #5]
    bfb0:	4770      	bx	lr
    bfb2:	bf00      	nop
    bfb4:	20001c10 	.word	0x20001c10

0000bfb8 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    bfb8:	4800      	ldr	r0, [pc, #0]	; (bfbc <cdcdf_acm_get_line_coding+0x4>)
    bfba:	4770      	bx	lr
    bfbc:	20001c20 	.word	0x20001c20

0000bfc0 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bfc0:	4b05      	ldr	r3, [pc, #20]	; (bfd8 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    bfc2:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bfc4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    bfc6:	b12c      	cbz	r4, bfd4 <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    bfc8:	6863      	ldr	r3, [r4, #4]
    bfca:	b103      	cbz	r3, bfce <usbd_sof_cb+0xe>
			sof->cb();
    bfcc:	4798      	blx	r3
		sof = sof->next;
    bfce:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    bfd0:	2c00      	cmp	r4, #0
    bfd2:	d1f9      	bne.n	bfc8 <usbd_sof_cb+0x8>
    bfd4:	bd10      	pop	{r4, pc}
    bfd6:	bf00      	nop
    bfd8:	20001c28 	.word	0x20001c28

0000bfdc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    bfdc:	b538      	push	{r3, r4, r5, lr}
    bfde:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    bfe0:	b189      	cbz	r1, c006 <usbdc_cb_ctl_done+0x2a>
    bfe2:	2901      	cmp	r1, #1
    bfe4:	d10d      	bne.n	c002 <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    bfe6:	4b23      	ldr	r3, [pc, #140]	; (c074 <usbdc_cb_ctl_done+0x98>)
    bfe8:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    bfea:	b154      	cbz	r4, c002 <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    bfec:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    bfee:	2201      	movs	r2, #1
    bff0:	4629      	mov	r1, r5
    bff2:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    bff4:	b113      	cbz	r3, bffc <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    bff6:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    bff8:	300a      	adds	r0, #10
    bffa:	d102      	bne.n	c002 <usbdc_cb_ctl_done+0x26>
		h = h->next;
    bffc:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    bffe:	2c00      	cmp	r4, #0
    c000:	d1f4      	bne.n	bfec <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c002:	2000      	movs	r0, #0
    c004:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c006:	7813      	ldrb	r3, [r2, #0]
    c008:	2b00      	cmp	r3, #0
    c00a:	d1fa      	bne.n	c002 <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    c00c:	7853      	ldrb	r3, [r2, #1]
    c00e:	2b05      	cmp	r3, #5
    c010:	d014      	beq.n	c03c <usbdc_cb_ctl_done+0x60>
    c012:	2b09      	cmp	r3, #9
    c014:	d1f5      	bne.n	c002 <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    c016:	8852      	ldrh	r2, [r2, #2]
    c018:	4b16      	ldr	r3, [pc, #88]	; (c074 <usbdc_cb_ctl_done+0x98>)
    c01a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c01c:	bb3a      	cbnz	r2, c06e <usbdc_cb_ctl_done+0x92>
    c01e:	2503      	movs	r5, #3
    c020:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c022:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c024:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c026:	2c00      	cmp	r4, #0
    c028:	d0eb      	beq.n	c002 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c02a:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c02c:	4629      	mov	r1, r5
    c02e:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c030:	b103      	cbz	r3, c034 <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    c032:	4798      	blx	r3
		cg = cg->next;
    c034:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c036:	2c00      	cmp	r4, #0
    c038:	d1f7      	bne.n	c02a <usbdc_cb_ctl_done+0x4e>
    c03a:	e7e2      	b.n	c002 <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    c03c:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c03e:	b2c0      	uxtb	r0, r0
    c040:	f000 fcf0 	bl	ca24 <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c044:	886b      	ldrh	r3, [r5, #2]
    c046:	b97b      	cbnz	r3, c068 <usbdc_cb_ctl_done+0x8c>
    c048:	2502      	movs	r5, #2
    c04a:	462a      	mov	r2, r5
    c04c:	4b09      	ldr	r3, [pc, #36]	; (c074 <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c04e:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c050:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c052:	2c00      	cmp	r4, #0
    c054:	d0d5      	beq.n	c002 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c056:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c058:	4629      	mov	r1, r5
    c05a:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c05c:	b103      	cbz	r3, c060 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    c05e:	4798      	blx	r3
		cg = cg->next;
    c060:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c062:	2c00      	cmp	r4, #0
    c064:	d1f7      	bne.n	c056 <usbdc_cb_ctl_done+0x7a>
    c066:	e7cc      	b.n	c002 <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c068:	2503      	movs	r5, #3
    c06a:	462a      	mov	r2, r5
    c06c:	e7ee      	b.n	c04c <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c06e:	2504      	movs	r5, #4
    c070:	462a      	mov	r2, r5
    c072:	e7d6      	b.n	c022 <usbdc_cb_ctl_done+0x46>
    c074:	20001c28 	.word	0x20001c28

0000c078 <usbdc_cb_ctl_req>:
{
    c078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c07c:	4fb6      	ldr	r7, [pc, #728]	; (c358 <usbdc_cb_ctl_req+0x2e0>)
    c07e:	68bc      	ldr	r4, [r7, #8]
{
    c080:	b086      	sub	sp, #24
    c082:	4606      	mov	r6, r0
    c084:	460d      	mov	r5, r1
	while (h != NULL) {
    c086:	b15c      	cbz	r4, c0a0 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    c088:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c08a:	2200      	movs	r2, #0
    c08c:	4629      	mov	r1, r5
    c08e:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    c090:	b11b      	cbz	r3, c09a <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    c092:	4798      	blx	r3
			if (0 == rc) {
    c094:	b170      	cbz	r0, c0b4 <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    c096:	300a      	adds	r0, #10
    c098:	d108      	bne.n	c0ac <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c09a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c09c:	2c00      	cmp	r4, #0
    c09e:	d1f3      	bne.n	c088 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c0a0:	782b      	ldrb	r3, [r5, #0]
    c0a2:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c0a6:	d025      	beq.n	c0f4 <usbdc_cb_ctl_req+0x7c>
    c0a8:	2a80      	cmp	r2, #128	; 0x80
    c0aa:	d007      	beq.n	c0bc <usbdc_cb_ctl_req+0x44>
		return false;
    c0ac:	2000      	movs	r0, #0
}
    c0ae:	b006      	add	sp, #24
    c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c0b4:	2001      	movs	r0, #1
}
    c0b6:	b006      	add	sp, #24
    c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c0bc:	786a      	ldrb	r2, [r5, #1]
    c0be:	2a0a      	cmp	r2, #10
    c0c0:	d8f4      	bhi.n	c0ac <usbdc_cb_ctl_req+0x34>
    c0c2:	a101      	add	r1, pc, #4	; (adr r1, c0c8 <usbdc_cb_ctl_req+0x50>)
    c0c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c0c8:	0000c1e7 	.word	0x0000c1e7
    c0cc:	0000c0ad 	.word	0x0000c0ad
    c0d0:	0000c0ad 	.word	0x0000c0ad
    c0d4:	0000c0ad 	.word	0x0000c0ad
    c0d8:	0000c0ad 	.word	0x0000c0ad
    c0dc:	0000c0ad 	.word	0x0000c0ad
    c0e0:	0000c19b 	.word	0x0000c19b
    c0e4:	0000c0ad 	.word	0x0000c0ad
    c0e8:	0000c179 	.word	0x0000c179
    c0ec:	0000c0ad 	.word	0x0000c0ad
    c0f0:	0000c131 	.word	0x0000c131
	switch (req->bRequest) {
    c0f4:	786a      	ldrb	r2, [r5, #1]
    c0f6:	3a01      	subs	r2, #1
    c0f8:	2a0a      	cmp	r2, #10
    c0fa:	d8d7      	bhi.n	c0ac <usbdc_cb_ctl_req+0x34>
    c0fc:	a101      	add	r1, pc, #4	; (adr r1, c104 <usbdc_cb_ctl_req+0x8c>)
    c0fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c102:	bf00      	nop
    c104:	0000c2ff 	.word	0x0000c2ff
    c108:	0000c0ad 	.word	0x0000c0ad
    c10c:	0000c2cf 	.word	0x0000c2cf
    c110:	0000c0ad 	.word	0x0000c0ad
    c114:	0000c2b1 	.word	0x0000c2b1
    c118:	0000c0ad 	.word	0x0000c0ad
    c11c:	0000c0ad 	.word	0x0000c0ad
    c120:	0000c0ad 	.word	0x0000c0ad
    c124:	0000c28b 	.word	0x0000c28b
    c128:	0000c0ad 	.word	0x0000c0ad
    c12c:	0000c22f 	.word	0x0000c22f
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c130:	7f7b      	ldrb	r3, [r7, #29]
    c132:	88aa      	ldrh	r2, [r5, #4]
    c134:	4113      	asrs	r3, r2
    c136:	f013 0301 	ands.w	r3, r3, #1
    c13a:	f000 818e 	beq.w	c45a <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c13e:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c140:	b91c      	cbnz	r4, c14a <usbdc_cb_ctl_req+0xd2>
    c142:	e7b3      	b.n	c0ac <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c144:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c146:	2c00      	cmp	r4, #0
    c148:	d0b0      	beq.n	c0ac <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c14a:	6863      	ldr	r3, [r4, #4]
    c14c:	462a      	mov	r2, r5
    c14e:	2102      	movs	r1, #2
    c150:	4620      	mov	r0, r4
    c152:	4798      	blx	r3
    c154:	2800      	cmp	r0, #0
    c156:	dbf5      	blt.n	c144 <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c158:	697b      	ldr	r3, [r7, #20]
    c15a:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c15c:	697b      	ldr	r3, [r7, #20]
    c15e:	9303      	str	r3, [sp, #12]
    c160:	2401      	movs	r4, #1
    c162:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c164:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c166:	9404      	str	r4, [sp, #16]
    c168:	f88d 3014 	strb.w	r3, [sp, #20]
    c16c:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c170:	f000 fd24 	bl	cbbc <usb_d_ep_transfer>
			return true;
    c174:	4620      	mov	r0, r4
    c176:	e79a      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c178:	697b      	ldr	r3, [r7, #20]
    c17a:	7efa      	ldrb	r2, [r7, #27]
    c17c:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c17e:	697b      	ldr	r3, [r7, #20]
    c180:	9303      	str	r3, [sp, #12]
    c182:	2401      	movs	r4, #1
    c184:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c186:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c188:	f88d 6014 	strb.w	r6, [sp, #20]
    c18c:	9404      	str	r4, [sp, #16]
    c18e:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c192:	f000 fd13 	bl	cbbc <usb_d_ep_transfer>
		return true;
    c196:	4620      	mov	r0, r4
    c198:	e789      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c19a:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c19c:	0a1a      	lsrs	r2, r3, #8
    c19e:	2a02      	cmp	r2, #2
    c1a0:	f000 810a 	beq.w	c3b8 <usbdc_cb_ctl_req+0x340>
    c1a4:	2a03      	cmp	r2, #3
    c1a6:	f000 80f0 	beq.w	c38a <usbdc_cb_ctl_req+0x312>
    c1aa:	2a01      	cmp	r2, #1
    c1ac:	f47f af7e 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c1b0:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c1b2:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c1b4:	e893 0003 	ldmia.w	r3, {r0, r1}
    c1b8:	2c12      	cmp	r4, #18
    c1ba:	bf28      	it	cs
    c1bc:	2412      	movcs	r4, #18
    c1be:	f000 fa19 	bl	c5f4 <usb_find_desc>
	if (!dev_desc) {
    c1c2:	4603      	mov	r3, r0
    c1c4:	2800      	cmp	r0, #0
    c1c6:	f43f af71 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c1ca:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c1cc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c1ce:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c1d0:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c1d2:	f88d 6014 	strb.w	r6, [sp, #20]
    c1d6:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c1da:	f000 fcef 	bl	cbbc <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c1de:	fab0 f080 	clz	r0, r0
    c1e2:	0940      	lsrs	r0, r0, #5
    c1e4:	e763      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c1e6:	f003 011f 	and.w	r1, r3, #31
    c1ea:	2901      	cmp	r1, #1
    c1ec:	f240 8091 	bls.w	c312 <usbdc_cb_ctl_req+0x29a>
    c1f0:	2902      	cmp	r1, #2
    c1f2:	f47f af5b 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c1f6:	88a8      	ldrh	r0, [r5, #4]
    c1f8:	b2c0      	uxtb	r0, r0
    c1fa:	f000 fd91 	bl	cd20 <usb_d_ep_halt>
		if (st < 0) {
    c1fe:	1e03      	subs	r3, r0, #0
    c200:	f6ff af54 	blt.w	c0ac <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c204:	f003 0301 	and.w	r3, r3, #1
    c208:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c20a:	697b      	ldr	r3, [r7, #20]
    c20c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c210:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c212:	697b      	ldr	r3, [r7, #20]
    c214:	9303      	str	r3, [sp, #12]
    c216:	2202      	movs	r2, #2
    c218:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c21a:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c21c:	f88d 6014 	strb.w	r6, [sp, #20]
    c220:	9204      	str	r2, [sp, #16]
    c222:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c226:	f000 fcc9 	bl	cbbc <usb_d_ep_transfer>
	return true;
    c22a:	2001      	movs	r0, #1
    c22c:	e73f      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c22e:	683b      	ldr	r3, [r7, #0]
    c230:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c232:	886c      	ldrh	r4, [r5, #2]
    c234:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c236:	e893 0003 	ldmia.w	r3, {r0, r1}
    c23a:	f000 fa0f 	bl	c65c <usb_find_cfg_desc>
	if (NULL == ifc) {
    c23e:	2800      	cmp	r0, #0
    c240:	f43f af34 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c244:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c246:	78c1      	ldrb	r1, [r0, #3]
    c248:	7883      	ldrb	r3, [r0, #2]
    c24a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c24e:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c252:	4619      	mov	r1, r3
    c254:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c256:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c258:	f000 f9cc 	bl	c5f4 <usb_find_desc>
    c25c:	2800      	cmp	r0, #0
    c25e:	f43f af25 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c262:	7883      	ldrb	r3, [r0, #2]
    c264:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c266:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c26a:	d103      	bne.n	c274 <usbdc_cb_ctl_req+0x1fc>
    c26c:	78c3      	ldrb	r3, [r0, #3]
    c26e:	42a3      	cmp	r3, r4
    c270:	f000 80c9 	beq.w	c406 <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c274:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c276:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c278:	7818      	ldrb	r0, [r3, #0]
    c27a:	4403      	add	r3, r0
    c27c:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c27e:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c280:	f000 f9b8 	bl	c5f4 <usb_find_desc>
		if (NULL == ifc) {
    c284:	2800      	cmp	r0, #0
    c286:	d1ec      	bne.n	c262 <usbdc_cb_ctl_req+0x1ea>
    c288:	e710      	b.n	c0ac <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c28a:	886a      	ldrh	r2, [r5, #2]
    c28c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c28e:	2a00      	cmp	r2, #0
    c290:	d142      	bne.n	c318 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c292:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c294:	b13c      	cbz	r4, c2a6 <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c296:	6863      	ldr	r3, [r4, #4]
    c298:	4620      	mov	r0, r4
    c29a:	2200      	movs	r2, #0
    c29c:	2101      	movs	r1, #1
    c29e:	4798      	blx	r3
		func = func->next;
    c2a0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c2a2:	2c00      	cmp	r4, #0
    c2a4:	d1f7      	bne.n	c296 <usbdc_cb_ctl_req+0x21e>
    c2a6:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c2a8:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2aa:	2300      	movs	r3, #0
    c2ac:	2201      	movs	r2, #1
    c2ae:	e002      	b.n	c2b6 <usbdc_cb_ctl_req+0x23e>
    c2b0:	2300      	movs	r3, #0
    c2b2:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c2b4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2b6:	f88d 6014 	strb.w	r6, [sp, #20]
    c2ba:	9303      	str	r3, [sp, #12]
    c2bc:	9304      	str	r3, [sp, #16]
    c2be:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c2c2:	f000 fc7b 	bl	cbbc <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c2c6:	fab0 f080 	clz	r0, r0
    c2ca:	0940      	lsrs	r0, r0, #5
    c2cc:	e6ef      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c2ce:	2b02      	cmp	r3, #2
    c2d0:	f47f aeec 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c2d4:	88ef      	ldrh	r7, [r5, #6]
    c2d6:	2f00      	cmp	r7, #0
    c2d8:	f47f aee8 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c2dc:	88a8      	ldrh	r0, [r5, #4]
    c2de:	2101      	movs	r1, #1
    c2e0:	b2c0      	uxtb	r0, r0
    c2e2:	f000 fd1d 	bl	cd20 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2e6:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c2e8:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2ea:	9703      	str	r7, [sp, #12]
    c2ec:	9704      	str	r7, [sp, #16]
    c2ee:	f88d 6014 	strb.w	r6, [sp, #20]
    c2f2:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c2f6:	f000 fc61 	bl	cbbc <usb_d_ep_transfer>
		return true;
    c2fa:	4620      	mov	r0, r4
    c2fc:	e6d7      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c2fe:	2b02      	cmp	r3, #2
    c300:	f47f aed4 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c304:	88ef      	ldrh	r7, [r5, #6]
    c306:	2f00      	cmp	r7, #0
    c308:	f47f aed0 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c30c:	88a8      	ldrh	r0, [r5, #4]
    c30e:	4639      	mov	r1, r7
    c310:	e7e6      	b.n	c2e0 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c312:	2300      	movs	r3, #0
    c314:	9301      	str	r3, [sp, #4]
    c316:	e778      	b.n	c20a <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c318:	683b      	ldr	r3, [r7, #0]
    c31a:	e893 0003 	ldmia.w	r3, {r0, r1}
    c31e:	f000 f99d 	bl	c65c <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c322:	2800      	cmp	r0, #0
    c324:	f43f aec2 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c328:	78c1      	ldrb	r1, [r0, #3]
    c32a:	7882      	ldrb	r2, [r0, #2]
    c32c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c330:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c334:	4619      	mov	r1, r3
    c336:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c338:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c33a:	f000 f95b 	bl	c5f4 <usb_find_desc>
    c33e:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c340:	2800      	cmp	r0, #0
    c342:	d0b0      	beq.n	c2a6 <usbdc_cb_ctl_req+0x22e>
    c344:	24ff      	movs	r4, #255	; 0xff
    c346:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c348:	f890 8002 	ldrb.w	r8, [r0, #2]
    c34c:	45a0      	cmp	r8, r4
    c34e:	d010      	beq.n	c372 <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c350:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c352:	b92c      	cbnz	r4, c360 <usbdc_cb_ctl_req+0x2e8>
    c354:	e092      	b.n	c47c <usbdc_cb_ctl_req+0x404>
    c356:	bf00      	nop
    c358:	20001c28 	.word	0x20001c28
					func = func->next;
    c35c:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c35e:	b134      	cbz	r4, c36e <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c360:	6863      	ldr	r3, [r4, #4]
    c362:	462a      	mov	r2, r5
    c364:	2100      	movs	r1, #0
    c366:	4620      	mov	r0, r4
    c368:	4798      	blx	r3
    c36a:	2800      	cmp	r0, #0
    c36c:	d1f6      	bne.n	c35c <usbdc_cb_ctl_req+0x2e4>
    c36e:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c370:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c372:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c374:	9904      	ldr	r1, [sp, #16]
    c376:	4403      	add	r3, r0
    c378:	4618      	mov	r0, r3
    c37a:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c37c:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c37e:	f000 f939 	bl	c5f4 <usb_find_desc>
    c382:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c384:	2800      	cmp	r0, #0
    c386:	d1df      	bne.n	c348 <usbdc_cb_ctl_req+0x2d0>
    c388:	e78e      	b.n	c2a8 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c38a:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c38c:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c38e:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c390:	e892 0003 	ldmia.w	r2, {r0, r1}
    c394:	b2da      	uxtb	r2, r3
    c396:	f000 f98d 	bl	c6b4 <usb_find_str_desc>
	if (NULL == str_desc) {
    c39a:	4603      	mov	r3, r0
    c39c:	2800      	cmp	r0, #0
    c39e:	f43f ae85 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c3a2:	7801      	ldrb	r1, [r0, #0]
    c3a4:	428c      	cmp	r4, r1
    c3a6:	f67f af10 	bls.w	c1ca <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3aa:	3d01      	subs	r5, #1
    c3ac:	4225      	tst	r5, r4
    c3ae:	bf0c      	ite	eq
    c3b0:	2201      	moveq	r2, #1
    c3b2:	2200      	movne	r2, #0
    c3b4:	460c      	mov	r4, r1
    c3b6:	e709      	b.n	c1cc <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c3b8:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c3ba:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3bc:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c3be:	3301      	adds	r3, #1
    c3c0:	e892 0003 	ldmia.w	r2, {r0, r1}
    c3c4:	b2da      	uxtb	r2, r3
    c3c6:	f000 f949 	bl	c65c <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c3ca:	4602      	mov	r2, r0
    c3cc:	2800      	cmp	r0, #0
    c3ce:	f43f ae6d 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c3d2:	78c1      	ldrb	r1, [r0, #3]
    c3d4:	7883      	ldrb	r3, [r0, #2]
    c3d6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c3da:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c3dc:	429c      	cmp	r4, r3
    c3de:	d94b      	bls.n	c478 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c3e0:	3d01      	subs	r5, #1
    c3e2:	4225      	tst	r5, r4
    c3e4:	bf0c      	ite	eq
    c3e6:	2101      	moveq	r1, #1
    c3e8:	2100      	movne	r1, #0
    c3ea:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c3ec:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3ee:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c3f0:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3f2:	f88d 6014 	strb.w	r6, [sp, #20]
    c3f6:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c3fa:	f000 fbdf 	bl	cbbc <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c3fe:	fab0 f080 	clz	r0, r0
    c402:	0940      	lsrs	r0, r0, #5
    c404:	e653      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c406:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c408:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c40a:	b926      	cbnz	r6, c416 <usbdc_cb_ctl_req+0x39e>
    c40c:	e64e      	b.n	c0ac <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c40e:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c410:	2e00      	cmp	r6, #0
    c412:	f43f ae4b 	beq.w	c0ac <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c416:	6873      	ldr	r3, [r6, #4]
    c418:	aa01      	add	r2, sp, #4
    c41a:	2101      	movs	r1, #1
    c41c:	4630      	mov	r0, r6
    c41e:	4798      	blx	r3
    c420:	2800      	cmp	r0, #0
    c422:	d1f4      	bne.n	c40e <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c424:	4601      	mov	r1, r0
    c426:	aa01      	add	r2, sp, #4
    c428:	6873      	ldr	r3, [r6, #4]
    c42a:	4630      	mov	r0, r6
    c42c:	4798      	blx	r3
    c42e:	2800      	cmp	r0, #0
    c430:	f47f ae3c 	bne.w	c0ac <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c434:	b12c      	cbz	r4, c442 <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c436:	7f7b      	ldrb	r3, [r7, #29]
    c438:	2201      	movs	r2, #1
    c43a:	fa02 f505 	lsl.w	r5, r2, r5
    c43e:	432b      	orrs	r3, r5
    c440:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c442:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c444:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c446:	9303      	str	r3, [sp, #12]
    c448:	9304      	str	r3, [sp, #16]
    c44a:	f88d 3014 	strb.w	r3, [sp, #20]
    c44e:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c452:	f000 fbb3 	bl	cbbc <usb_d_ep_transfer>
			return true;
    c456:	2001      	movs	r0, #1
    c458:	e629      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c45a:	697a      	ldr	r2, [r7, #20]
    c45c:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c45e:	697a      	ldr	r2, [r7, #20]
    c460:	9203      	str	r2, [sp, #12]
    c462:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c464:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c466:	f88d 3014 	strb.w	r3, [sp, #20]
    c46a:	f88d 3015 	strb.w	r3, [sp, #21]
    c46e:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c470:	f000 fba4 	bl	cbbc <usb_d_ep_transfer>
		return true;
    c474:	4620      	mov	r0, r4
    c476:	e61a      	b.n	c0ae <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c478:	2100      	movs	r1, #0
    c47a:	e7b7      	b.n	c3ec <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c47c:	4644      	mov	r4, r8
    c47e:	e778      	b.n	c372 <usbdc_cb_ctl_req+0x2fa>

0000c480 <usbd_event_cb>:
{
    c480:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c482:	b338      	cbz	r0, c4d4 <usbd_event_cb+0x54>
    c484:	2801      	cmp	r0, #1
    c486:	d124      	bne.n	c4d2 <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c488:	4d19      	ldr	r5, [pc, #100]	; (c4f0 <usbd_event_cb+0x70>)
    c48a:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c48c:	b13c      	cbz	r4, c49e <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c48e:	6863      	ldr	r3, [r4, #4]
    c490:	4620      	mov	r0, r4
    c492:	2200      	movs	r2, #0
    c494:	2101      	movs	r1, #1
    c496:	4798      	blx	r3
		func = func->next;
    c498:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c49a:	2c00      	cmp	r4, #0
    c49c:	d1f7      	bne.n	c48e <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c49e:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c4a0:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c4a2:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c4a4:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c4a6:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c4a8:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c4aa:	f000 fb41 	bl	cb30 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c4ae:	7f28      	ldrb	r0, [r5, #28]
    c4b0:	f000 faba 	bl	ca28 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c4b4:	4621      	mov	r1, r4
    c4b6:	4620      	mov	r0, r4
    c4b8:	4a0e      	ldr	r2, [pc, #56]	; (c4f4 <usbd_event_cb+0x74>)
    c4ba:	f000 fc69 	bl	cd90 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c4be:	4620      	mov	r0, r4
    c4c0:	4631      	mov	r1, r6
    c4c2:	4a0d      	ldr	r2, [pc, #52]	; (c4f8 <usbd_event_cb+0x78>)
    c4c4:	f000 fc64 	bl	cd90 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c4c8:	4620      	mov	r0, r4
}
    c4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c4ce:	f000 bb4b 	b.w	cb68 <usb_d_ep_enable>
    c4d2:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c4d4:	4b06      	ldr	r3, [pc, #24]	; (c4f0 <usbd_event_cb+0x70>)
    c4d6:	68dc      	ldr	r4, [r3, #12]
    c4d8:	460d      	mov	r5, r1
	while (cg != NULL) {
    c4da:	b144      	cbz	r4, c4ee <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c4dc:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c4de:	4629      	mov	r1, r5
    c4e0:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c4e2:	b103      	cbz	r3, c4e6 <usbd_event_cb+0x66>
			cg->cb(change, value);
    c4e4:	4798      	blx	r3
		cg = cg->next;
    c4e6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c4e8:	2c00      	cmp	r4, #0
    c4ea:	d1f7      	bne.n	c4dc <usbd_event_cb+0x5c>
    c4ec:	bd70      	pop	{r4, r5, r6, pc}
    c4ee:	bd70      	pop	{r4, r5, r6, pc}
    c4f0:	20001c28 	.word	0x20001c28
    c4f4:	0000c079 	.word	0x0000c079
    c4f8:	0000bfdd 	.word	0x0000bfdd

0000c4fc <usbdc_xfer>:
{
    c4fc:	b500      	push	{lr}
    c4fe:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c500:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c504:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c506:	9101      	str	r1, [sp, #4]
    c508:	9202      	str	r2, [sp, #8]
    c50a:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c50e:	f000 fb55 	bl	cbbc <usb_d_ep_transfer>
}
    c512:	b005      	add	sp, #20
    c514:	f85d fb04 	ldr.w	pc, [sp], #4

0000c518 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c518:	2801      	cmp	r0, #1
    c51a:	d009      	beq.n	c530 <usbdc_register_handler+0x18>
    c51c:	d305      	bcc.n	c52a <usbdc_register_handler+0x12>
    c51e:	2802      	cmp	r0, #2
    c520:	d102      	bne.n	c528 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c522:	4805      	ldr	r0, [pc, #20]	; (c538 <usbdc_register_handler+0x20>)
    c524:	f000 bc66 	b.w	cdf4 <list_insert_at_end>
    c528:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c52a:	4804      	ldr	r0, [pc, #16]	; (c53c <usbdc_register_handler+0x24>)
    c52c:	f000 bc62 	b.w	cdf4 <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c530:	4803      	ldr	r0, [pc, #12]	; (c540 <usbdc_register_handler+0x28>)
    c532:	f000 bc5f 	b.w	cdf4 <list_insert_at_end>
    c536:	bf00      	nop
    c538:	20001c34 	.word	0x20001c34
    c53c:	20001c2c 	.word	0x20001c2c
    c540:	20001c30 	.word	0x20001c30

0000c544 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c544:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c546:	4605      	mov	r5, r0
    c548:	3000      	adds	r0, #0
    c54a:	bf18      	it	ne
    c54c:	2001      	movne	r0, #1
    c54e:	f240 3255 	movw	r2, #853	; 0x355
    c552:	490c      	ldr	r1, [pc, #48]	; (c584 <usbdc_init+0x40>)
    c554:	f000 fc4a 	bl	cdec <assert>

	int32_t rc;

	rc = usb_d_init();
    c558:	f000 f9dc 	bl	c914 <usb_d_init>
	if (rc < 0) {
    c55c:	2800      	cmp	r0, #0
    c55e:	db0f      	blt.n	c580 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c560:	4c09      	ldr	r4, [pc, #36]	; (c588 <usbdc_init+0x44>)
    c562:	2220      	movs	r2, #32
    c564:	2100      	movs	r1, #0
    c566:	4620      	mov	r0, r4
    c568:	f011 ffc0 	bl	1e4ec <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c56c:	4907      	ldr	r1, [pc, #28]	; (c58c <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c56e:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c570:	2000      	movs	r0, #0
    c572:	f000 fa51 	bl	ca18 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c576:	2001      	movs	r0, #1
    c578:	4905      	ldr	r1, [pc, #20]	; (c590 <usbdc_init+0x4c>)
    c57a:	f000 fa4d 	bl	ca18 <usb_d_register_callback>

	return 0;
    c57e:	2000      	movs	r0, #0
}
    c580:	bd38      	pop	{r3, r4, r5, pc}
    c582:	bf00      	nop
    c584:	00023298 	.word	0x00023298
    c588:	20001c28 	.word	0x20001c28
    c58c:	0000bfc1 	.word	0x0000bfc1
    c590:	0000c481 	.word	0x0000c481

0000c594 <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c594:	4601      	mov	r1, r0
    c596:	4801      	ldr	r0, [pc, #4]	; (c59c <usbdc_register_function+0x8>)
    c598:	f000 bc2c 	b.w	cdf4 <list_insert_at_end>
    c59c:	20001c38 	.word	0x20001c38

0000c5a0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c5a0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c5a2:	4b0a      	ldr	r3, [pc, #40]	; (c5cc <usbdc_start+0x2c>)
    c5a4:	7e9c      	ldrb	r4, [r3, #26]
    c5a6:	b954      	cbnz	r4, c5be <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c5a8:	b160      	cbz	r0, c5c4 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c5aa:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c5ac:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c5ae:	79d2      	ldrb	r2, [r2, #7]
    c5b0:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c5b2:	2201      	movs	r2, #1
    c5b4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c5b6:	f000 fa31 	bl	ca1c <usb_d_enable>
	return ERR_NONE;
    c5ba:	4620      	mov	r0, r4
    c5bc:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    c5be:	f06f 0003 	mvn.w	r0, #3
    c5c2:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    c5c4:	f06f 0008 	mvn.w	r0, #8
}
    c5c8:	bd10      	pop	{r4, pc}
    c5ca:	bf00      	nop
    c5cc:	20001c28 	.word	0x20001c28

0000c5d0 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    c5d0:	f000 ba26 	b.w	ca20 <usb_d_attach>

0000c5d4 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    c5d4:	4b01      	ldr	r3, [pc, #4]	; (c5dc <usbdc_get_ctrl_buffer+0x8>)
}
    c5d6:	6958      	ldr	r0, [r3, #20]
    c5d8:	4770      	bx	lr
    c5da:	bf00      	nop
    c5dc:	20001c28 	.word	0x20001c28

0000c5e0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c5e0:	4b03      	ldr	r3, [pc, #12]	; (c5f0 <usbdc_get_state+0x10>)
    c5e2:	7e98      	ldrb	r0, [r3, #26]
    c5e4:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    c5e8:	bf18      	it	ne
    c5ea:	2010      	movne	r0, #16
    c5ec:	4770      	bx	lr
    c5ee:	bf00      	nop
    c5f0:	20001c28 	.word	0x20001c28

0000c5f4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c5f4:	4288      	cmp	r0, r1
    c5f6:	d214      	bcs.n	c622 <usb_find_desc+0x2e>
    c5f8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c5fa:	2b01      	cmp	r3, #1
    c5fc:	d911      	bls.n	c622 <usb_find_desc+0x2e>
{
    c5fe:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c600:	7844      	ldrb	r4, [r0, #1]
    c602:	4294      	cmp	r4, r2
    c604:	d106      	bne.n	c614 <usb_find_desc+0x20>
    c606:	e009      	b.n	c61c <usb_find_desc+0x28>
    c608:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c60a:	2b01      	cmp	r3, #1
    c60c:	d905      	bls.n	c61a <usb_find_desc+0x26>
	return desc[1];
    c60e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c610:	4294      	cmp	r4, r2
    c612:	d003      	beq.n	c61c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c614:	4418      	add	r0, r3
	while (desc < eof) {
    c616:	4281      	cmp	r1, r0
    c618:	d8f6      	bhi.n	c608 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c61a:	2000      	movs	r0, #0
}
    c61c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c620:	4770      	bx	lr
	return NULL;
    c622:	2000      	movs	r0, #0
    c624:	4770      	bx	lr
    c626:	bf00      	nop

0000c628 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c628:	4288      	cmp	r0, r1
    c62a:	d213      	bcs.n	c654 <usb_find_ep_desc+0x2c>
    c62c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c62e:	2b01      	cmp	r3, #1
    c630:	d910      	bls.n	c654 <usb_find_ep_desc+0x2c>
	return desc[1];
    c632:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c634:	2a04      	cmp	r2, #4
    c636:	d00d      	beq.n	c654 <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c638:	2a05      	cmp	r2, #5
    c63a:	d108      	bne.n	c64e <usb_find_ep_desc+0x26>
    c63c:	e00c      	b.n	c658 <usb_find_ep_desc+0x30>
    c63e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c640:	2b01      	cmp	r3, #1
    c642:	d907      	bls.n	c654 <usb_find_ep_desc+0x2c>
    c644:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c646:	2a04      	cmp	r2, #4
    c648:	d004      	beq.n	c654 <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c64a:	2a05      	cmp	r2, #5
    c64c:	d003      	beq.n	c656 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    c64e:	4418      	add	r0, r3
	while (desc < eof) {
    c650:	4281      	cmp	r1, r0
    c652:	d8f4      	bhi.n	c63e <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c654:	2000      	movs	r0, #0
}
    c656:	4770      	bx	lr
    c658:	4770      	bx	lr
    c65a:	bf00      	nop

0000c65c <usb_find_cfg_desc>:
	while (desc < eof) {
    c65c:	4288      	cmp	r0, r1
    c65e:	d226      	bcs.n	c6ae <usb_find_cfg_desc+0x52>
    c660:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c662:	2b01      	cmp	r3, #1
    c664:	d923      	bls.n	c6ae <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c666:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c668:	7844      	ldrb	r4, [r0, #1]
    c66a:	2c02      	cmp	r4, #2
    c66c:	d106      	bne.n	c67c <usb_find_cfg_desc+0x20>
    c66e:	e012      	b.n	c696 <usb_find_cfg_desc+0x3a>
    c670:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c672:	2b01      	cmp	r3, #1
    c674:	d905      	bls.n	c682 <usb_find_cfg_desc+0x26>
	return desc[1];
    c676:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c678:	2c02      	cmp	r4, #2
    c67a:	d00c      	beq.n	c696 <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    c67c:	4418      	add	r0, r3
	while (desc < eof) {
    c67e:	4281      	cmp	r1, r0
    c680:	d8f6      	bhi.n	c670 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    c682:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    c684:	f85d 4b04 	ldr.w	r4, [sp], #4
    c688:	4770      	bx	lr
		_desc_len_check();
    c68a:	7803      	ldrb	r3, [r0, #0]
    c68c:	2b01      	cmp	r3, #1
    c68e:	d9f8      	bls.n	c682 <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    c690:	7843      	ldrb	r3, [r0, #1]
    c692:	2b02      	cmp	r3, #2
    c694:	d1f5      	bne.n	c682 <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    c696:	7943      	ldrb	r3, [r0, #5]
    c698:	4293      	cmp	r3, r2
    c69a:	d0f3      	beq.n	c684 <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    c69c:	78c4      	ldrb	r4, [r0, #3]
    c69e:	7883      	ldrb	r3, [r0, #2]
    c6a0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c6a4:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    c6a8:	4281      	cmp	r1, r0
    c6aa:	d8ee      	bhi.n	c68a <usb_find_cfg_desc+0x2e>
    c6ac:	e7e9      	b.n	c682 <usb_find_cfg_desc+0x26>
		return NULL;
    c6ae:	2000      	movs	r0, #0
    c6b0:	4770      	bx	lr
    c6b2:	bf00      	nop

0000c6b4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c6b4:	4288      	cmp	r0, r1
    c6b6:	d216      	bcs.n	c6e6 <usb_find_str_desc+0x32>
{
    c6b8:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    c6ba:	2500      	movs	r5, #0
    c6bc:	e005      	b.n	c6ca <usb_find_str_desc+0x16>
	return desc[1];
    c6be:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c6c0:	2c03      	cmp	r4, #3
    c6c2:	d008      	beq.n	c6d6 <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    c6c4:	4418      	add	r0, r3
	while (desc < eof) {
    c6c6:	4281      	cmp	r1, r0
    c6c8:	d902      	bls.n	c6d0 <usb_find_str_desc+0x1c>
    c6ca:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c6cc:	2b01      	cmp	r3, #1
    c6ce:	d8f6      	bhi.n	c6be <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    c6d0:	2000      	movs	r0, #0
}
    c6d2:	bc30      	pop	{r4, r5}
    c6d4:	4770      	bx	lr
			if (i == str_index) {
    c6d6:	4295      	cmp	r5, r2
    c6d8:	d0fb      	beq.n	c6d2 <usb_find_str_desc+0x1e>
    c6da:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    c6dc:	4281      	cmp	r1, r0
    c6de:	f105 0501 	add.w	r5, r5, #1
    c6e2:	d8f2      	bhi.n	c6ca <usb_find_str_desc+0x16>
    c6e4:	e7f4      	b.n	c6d0 <usb_find_str_desc+0x1c>
	return NULL;
    c6e6:	2000      	movs	r0, #0
    c6e8:	4770      	bx	lr
    c6ea:	bf00      	nop

0000c6ec <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    c6ec:	2000      	movs	r0, #0
    c6ee:	4770      	bx	lr

0000c6f0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    c6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6f2:	4f0f      	ldr	r7, [pc, #60]	; (c730 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c6f4:	f000 0e0f 	and.w	lr, r0, #15
    c6f8:	463a      	mov	r2, r7
{
    c6fa:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c6fc:	7854      	ldrb	r4, [r2, #1]
    c6fe:	42a0      	cmp	r0, r4
    c700:	461e      	mov	r6, r3
    c702:	f103 0301 	add.w	r3, r3, #1
    c706:	d008      	beq.n	c71a <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c708:	7815      	ldrb	r5, [r2, #0]
    c70a:	3220      	adds	r2, #32
    c70c:	b90d      	cbnz	r5, c712 <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c70e:	4574      	cmp	r4, lr
    c710:	d003      	beq.n	c71a <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c712:	2b0d      	cmp	r3, #13
    c714:	d1f2      	bne.n	c6fc <usb_d_cb_trans_more+0xc>
    c716:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    c71a:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    c71e:	78b3      	ldrb	r3, [r6, #2]
    c720:	2b03      	cmp	r3, #3
    c722:	d001      	beq.n	c728 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    c724:	2000      	movs	r0, #0
    c726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    c728:	69b3      	ldr	r3, [r6, #24]
}
    c72a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    c72e:	4718      	bx	r3
    c730:	20001c48 	.word	0x20001c48

0000c734 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    c734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c738:	f8df 9130 	ldr.w	r9, [pc, #304]	; c86c <_usb_d_cb_trans_done+0x138>
    c73c:	4607      	mov	r7, r0
    c73e:	4688      	mov	r8, r1
    c740:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c742:	f000 010f 	and.w	r1, r0, #15
{
    c746:	2300      	movs	r3, #0
    c748:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c74a:	7844      	ldrb	r4, [r0, #1]
    c74c:	42a7      	cmp	r7, r4
    c74e:	461e      	mov	r6, r3
    c750:	f103 0301 	add.w	r3, r3, #1
    c754:	d008      	beq.n	c768 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c756:	7805      	ldrb	r5, [r0, #0]
    c758:	3020      	adds	r0, #32
    c75a:	b90d      	cbnz	r5, c760 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c75c:	428c      	cmp	r4, r1
    c75e:	d003      	beq.n	c768 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c760:	2b0d      	cmp	r3, #13
    c762:	d1f2      	bne.n	c74a <_usb_d_cb_trans_done+0x16>
    c764:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    c768:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    c76a:	f1b8 0f00 	cmp.w	r8, #0
    c76e:	d110      	bne.n	c792 <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    c770:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c774:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    c778:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c77c:	b32b      	cbz	r3, c7ca <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c77e:	2301      	movs	r3, #1
    c780:	4641      	mov	r1, r8
    c782:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    c784:	444e      	add	r6, r9
    c786:	4638      	mov	r0, r7
    c788:	69f3      	ldr	r3, [r6, #28]
    c78a:	4798      	blx	r3
}
    c78c:	b007      	add	sp, #28
    c78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    c792:	f1b8 0f01 	cmp.w	r8, #1
    c796:	d00b      	beq.n	c7b0 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    c798:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c79c:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    c7a0:	d025      	beq.n	c7ee <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    c7a2:	f1b8 0f03 	cmp.w	r8, #3
    c7a6:	d01d      	beq.n	c7e4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    c7a8:	2106      	movs	r1, #6
    c7aa:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    c7ac:	70d9      	strb	r1, [r3, #3]
    c7ae:	e7e9      	b.n	c784 <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    c7b0:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c7b4:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    c7b8:	f04f 0802 	mov.w	r8, #2
    c7bc:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c7c0:	b1e9      	cbz	r1, c7fe <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    c7c2:	2305      	movs	r3, #5
    c7c4:	4641      	mov	r1, r8
    c7c6:	70a3      	strb	r3, [r4, #2]
    c7c8:	e7dc      	b.n	c784 <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    c7ca:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c7cc:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    c7ce:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c7d0:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    c7d4:	d01f      	beq.n	c816 <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    c7d6:	69e3      	ldr	r3, [r4, #28]
    c7d8:	7860      	ldrb	r0, [r4, #1]
    c7da:	4641      	mov	r1, r8
    c7dc:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c7de:	2302      	movs	r3, #2
    c7e0:	70a3      	strb	r3, [r4, #2]
    c7e2:	e7d3      	b.n	c78c <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c7e4:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    c7e6:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c7e8:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    c7ea:	70d9      	strb	r1, [r3, #3]
    c7ec:	e7ca      	b.n	c784 <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c7ee:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c7f2:	2104      	movs	r1, #4
    c7f4:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c7f6:	b158      	cbz	r0, c810 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c7f8:	2001      	movs	r0, #1
    c7fa:	7098      	strb	r0, [r3, #2]
    c7fc:	e7c2      	b.n	c784 <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c7fe:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c800:	f884 8002 	strb.w	r8, [r4, #2]
    c804:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c806:	f006 fa5b 	bl	12cc0 <_usb_d_dev_ep_stall>
    c80a:	78e1      	ldrb	r1, [r4, #3]
    c80c:	9a01      	ldr	r2, [sp, #4]
    c80e:	e7b9      	b.n	c784 <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c810:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    c814:	e7ba      	b.n	c78c <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c816:	69e3      	ldr	r3, [r4, #28]
    c818:	7860      	ldrb	r0, [r4, #1]
    c81a:	f994 500c 	ldrsb.w	r5, [r4, #12]
    c81e:	2101      	movs	r1, #1
    c820:	4798      	blx	r3
		if (err) {
    c822:	b160      	cbz	r0, c83e <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c824:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c826:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    c828:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c82a:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c82c:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    c82e:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c830:	bfa8      	it	ge
    c832:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    c836:	2101      	movs	r1, #1
    c838:	f006 fa42 	bl	12cc0 <_usb_d_dev_ep_stall>
    c83c:	e7a6      	b.n	c78c <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    c83e:	2304      	movs	r3, #4
    c840:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    c842:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    c844:	f8cd 800c 	str.w	r8, [sp, #12]
    c848:	2d00      	cmp	r5, #0
    c84a:	bfac      	ite	ge
    c84c:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    c850:	f003 030f 	andlt.w	r3, r3, #15
    c854:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    c856:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    c858:	f8cd 8010 	str.w	r8, [sp, #16]
    c85c:	f88d 3014 	strb.w	r3, [sp, #20]
    c860:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    c864:	f006 fae8 	bl	12e38 <_usb_d_dev_ep_trans>
    c868:	e790      	b.n	c78c <_usb_d_cb_trans_done+0x58>
    c86a:	bf00      	nop
    c86c:	20001c48 	.word	0x20001c48

0000c870 <usb_d_cb_trans_setup>:
{
    c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c874:	4f26      	ldr	r7, [pc, #152]	; (c910 <usb_d_cb_trans_setup+0xa0>)
    c876:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c878:	f000 060f 	and.w	r6, r0, #15
    c87c:	463a      	mov	r2, r7
{
    c87e:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c880:	7851      	ldrb	r1, [r2, #1]
    c882:	428c      	cmp	r4, r1
    c884:	461d      	mov	r5, r3
    c886:	f103 0301 	add.w	r3, r3, #1
    c88a:	d032      	beq.n	c8f2 <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c88c:	7810      	ldrb	r0, [r2, #0]
    c88e:	3220      	adds	r2, #32
    c890:	b908      	cbnz	r0, c896 <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c892:	42b1      	cmp	r1, r6
    c894:	d02d      	beq.n	c8f2 <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c896:	2b0d      	cmp	r3, #13
    c898:	d1f2      	bne.n	c880 <usb_d_cb_trans_setup+0x10>
    c89a:	f06f 0613 	mvn.w	r6, #19
    c89e:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    c8a2:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    c8a4:	4631      	mov	r1, r6
    c8a6:	4620      	mov	r0, r4
    c8a8:	f006 fa9c 	bl	12de4 <_usb_d_dev_ep_read_req>
	if (n != 8) {
    c8ac:	b2c0      	uxtb	r0, r0
    c8ae:	2808      	cmp	r0, #8
    c8b0:	d00a      	beq.n	c8c8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c8b2:	2101      	movs	r1, #1
    c8b4:	4620      	mov	r0, r4
    c8b6:	f006 fa03 	bl	12cc0 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c8ba:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    c8be:	2101      	movs	r1, #1
}
    c8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c8c4:	f006 b9fc 	b.w	12cc0 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c8c8:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c8cc:	2100      	movs	r1, #0
    c8ce:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c8d0:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c8d4:	f006 f9f4 	bl	12cc0 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c8d8:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c8da:	2100      	movs	r1, #0
    c8dc:	4640      	mov	r0, r8
    c8de:	f006 f9ef 	bl	12cc0 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    c8e2:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c8e4:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    c8e6:	696b      	ldr	r3, [r5, #20]
    c8e8:	4620      	mov	r0, r4
    c8ea:	4798      	blx	r3
    c8ec:	b120      	cbz	r0, c8f8 <usb_d_cb_trans_setup+0x88>
    c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8f2:	016e      	lsls	r6, r5, #5
    c8f4:	360c      	adds	r6, #12
    c8f6:	e7d4      	b.n	c8a2 <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c8f8:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c8fa:	4639      	mov	r1, r7
    c8fc:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c8fe:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c900:	f006 f9de 	bl	12cc0 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c904:	4639      	mov	r1, r7
    c906:	4640      	mov	r0, r8
}
    c908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c90c:	f006 b9d8 	b.w	12cc0 <_usb_d_dev_ep_stall>
    c910:	20001c48 	.word	0x20001c48

0000c914 <usb_d_init>:

int32_t usb_d_init(void)
{
    c914:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    c916:	f005 fecf 	bl	126b8 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    c91a:	2800      	cmp	r0, #0
    c91c:	db70      	blt.n	ca00 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    c91e:	4c39      	ldr	r4, [pc, #228]	; (ca04 <usb_d_init+0xf0>)
    c920:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    c924:	2100      	movs	r1, #0
    c926:	4620      	mov	r0, r4
    c928:	f011 fde0 	bl	1e4ec <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c92c:	4b36      	ldr	r3, [pc, #216]	; (ca08 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c92e:	4937      	ldr	r1, [pc, #220]	; (ca0c <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c930:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    c932:	22ff      	movs	r2, #255	; 0xff
    c934:	7062      	strb	r2, [r4, #1]
    c936:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    c93a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    c93e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    c942:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    c946:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    c94a:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    c94e:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c952:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c954:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c956:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c958:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c95a:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c95c:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c95e:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c960:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c962:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c964:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c966:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c968:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c96a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c96e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c972:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c976:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c97a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c97e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c982:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c986:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c98a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c98e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c992:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c996:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    c99a:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    c99e:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    c9a2:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    c9a6:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    c9aa:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c9ae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c9b2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c9b6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c9ba:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c9be:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c9c2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c9c6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c9ca:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c9ce:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c9d2:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c9d6:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c9da:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    c9de:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    c9e2:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    c9e6:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    c9ea:	f006 fb5d 	bl	130a8 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    c9ee:	4908      	ldr	r1, [pc, #32]	; (ca10 <usb_d_init+0xfc>)
    c9f0:	2001      	movs	r0, #1
    c9f2:	f006 fb59 	bl	130a8 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    c9f6:	2002      	movs	r0, #2
    c9f8:	4906      	ldr	r1, [pc, #24]	; (ca14 <usb_d_init+0x100>)
    c9fa:	f006 fb55 	bl	130a8 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    c9fe:	2000      	movs	r0, #0
}
    ca00:	bd10      	pop	{r4, pc}
    ca02:	bf00      	nop
    ca04:	20001c48 	.word	0x20001c48
    ca08:	0000c6ed 	.word	0x0000c6ed
    ca0c:	0000c871 	.word	0x0000c871
    ca10:	0000c6f1 	.word	0x0000c6f1
    ca14:	0000c735 	.word	0x0000c735

0000ca18 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    ca18:	f006 bb34 	b.w	13084 <_usb_d_dev_register_callback>

0000ca1c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    ca1c:	f005 beec 	b.w	127f8 <_usb_d_dev_enable>

0000ca20 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    ca20:	f005 bf1a 	b.w	12858 <_usb_d_dev_attach>

0000ca24 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    ca24:	f005 bf22 	b.w	1286c <_usb_d_dev_set_address>

0000ca28 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    ca28:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ca2a:	4e25      	ldr	r6, [pc, #148]	; (cac0 <usb_d_ep0_init+0x98>)
    ca2c:	7873      	ldrb	r3, [r6, #1]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d043      	beq.n	caba <usb_d_ep0_init+0x92>
    ca32:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    ca36:	2b00      	cmp	r3, #0
    ca38:	d03f      	beq.n	caba <usb_d_ep0_init+0x92>
    ca3a:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d03b      	beq.n	caba <usb_d_ep0_init+0x92>
    ca42:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    ca46:	b3c3      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca48:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    ca4c:	b3ab      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca4e:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    ca52:	b393      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca54:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    ca58:	b37b      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca5a:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    ca5e:	b363      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca60:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    ca64:	b34b      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca66:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    ca6a:	b333      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca6c:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    ca70:	b31b      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca72:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    ca76:	b303      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca78:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    ca7c:	b1eb      	cbz	r3, caba <usb_d_ep0_init+0x92>
    ca7e:	4633      	mov	r3, r6
    ca80:	2400      	movs	r4, #0
    ca82:	7859      	ldrb	r1, [r3, #1]
    ca84:	29ff      	cmp	r1, #255	; 0xff
    ca86:	d00a      	beq.n	ca9e <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ca88:	781d      	ldrb	r5, [r3, #0]
    ca8a:	3320      	adds	r3, #32
    ca8c:	b90d      	cbnz	r5, ca92 <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca8e:	290f      	cmp	r1, #15
    ca90:	d005      	beq.n	ca9e <usb_d_ep0_init+0x76>
    ca92:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ca94:	2c0d      	cmp	r4, #13
    ca96:	d1f4      	bne.n	ca82 <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    ca98:	f06f 0014 	mvn.w	r0, #20
    ca9c:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    ca9e:	2100      	movs	r1, #0
    caa0:	4602      	mov	r2, r0
    caa2:	4608      	mov	r0, r1
    caa4:	f005 fee8 	bl	12878 <_usb_d_dev_ep_init>
	if (rc < 0) {
    caa8:	2800      	cmp	r0, #0
    caaa:	db05      	blt.n	cab8 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    caac:	0164      	lsls	r4, r4, #5
    caae:	1933      	adds	r3, r6, r4
    cab0:	2000      	movs	r0, #0
    cab2:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cab4:	5530      	strb	r0, [r6, r4]
    cab6:	bd70      	pop	{r4, r5, r6, pc}
}
    cab8:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    caba:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    cabe:	bd70      	pop	{r4, r5, r6, pc}
    cac0:	20001c48 	.word	0x20001c48

0000cac4 <usb_d_ep_init>:
{
    cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cac6:	4c19      	ldr	r4, [pc, #100]	; (cb2c <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cac8:	f000 0c0f 	and.w	ip, r0, #15
    cacc:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    cad0:	4627      	mov	r7, r4
    cad2:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cad4:	785d      	ldrb	r5, [r3, #1]
    cad6:	42a8      	cmp	r0, r5
    cad8:	d024      	beq.n	cb24 <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cada:	781e      	ldrb	r6, [r3, #0]
    cadc:	3320      	adds	r3, #32
    cade:	b90e      	cbnz	r6, cae4 <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cae0:	4565      	cmp	r5, ip
    cae2:	d01f      	beq.n	cb24 <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cae4:	459e      	cmp	lr, r3
    cae6:	d1f5      	bne.n	cad4 <usb_d_ep_init+0x10>
    cae8:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    caea:	7863      	ldrb	r3, [r4, #1]
    caec:	2bff      	cmp	r3, #255	; 0xff
    caee:	d00a      	beq.n	cb06 <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    caf0:	7826      	ldrb	r6, [r4, #0]
    caf2:	3420      	adds	r4, #32
    caf4:	b90e      	cbnz	r6, cafa <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    caf6:	2b0f      	cmp	r3, #15
    caf8:	d005      	beq.n	cb06 <usb_d_ep_init+0x42>
    cafa:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cafc:	2d0d      	cmp	r5, #13
    cafe:	d1f4      	bne.n	caea <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    cb00:	f06f 0014 	mvn.w	r0, #20
    cb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb06:	460e      	mov	r6, r1
    cb08:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cb0a:	f005 feb5 	bl	12878 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cb0e:	2800      	cmp	r0, #0
    cb10:	db07      	blt.n	cb22 <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    cb12:	016d      	lsls	r5, r5, #5
    cb14:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cb16:	f006 0603 	and.w	r6, r6, #3
    cb1a:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    cb1c:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    cb1e:	2000      	movs	r0, #0
    cb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    cb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    cb24:	f06f 0013 	mvn.w	r0, #19
    cb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb2a:	bf00      	nop
    cb2c:	20001c48 	.word	0x20001c48

0000cb30 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    cb30:	b570      	push	{r4, r5, r6, lr}
    cb32:	4e0c      	ldr	r6, [pc, #48]	; (cb64 <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb34:	f000 050f 	and.w	r5, r0, #15
    cb38:	4633      	mov	r3, r6
{
    cb3a:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb3c:	785a      	ldrb	r2, [r3, #1]
    cb3e:	4290      	cmp	r0, r2
    cb40:	d008      	beq.n	cb54 <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb42:	7819      	ldrb	r1, [r3, #0]
    cb44:	3320      	adds	r3, #32
    cb46:	b909      	cbnz	r1, cb4c <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb48:	42aa      	cmp	r2, r5
    cb4a:	d003      	beq.n	cb54 <usb_d_ep_deinit+0x24>
    cb4c:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb4e:	2c0d      	cmp	r4, #13
    cb50:	d1f4      	bne.n	cb3c <usb_d_ep_deinit+0xc>
    cb52:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    cb54:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    cb58:	f005 ff00 	bl	1295c <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    cb5c:	23ff      	movs	r3, #255	; 0xff
    cb5e:	7063      	strb	r3, [r4, #1]
    cb60:	bd70      	pop	{r4, r5, r6, pc}
    cb62:	bf00      	nop
    cb64:	20001c48 	.word	0x20001c48

0000cb68 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    cb68:	b570      	push	{r4, r5, r6, lr}
    cb6a:	4d13      	ldr	r5, [pc, #76]	; (cbb8 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb6c:	f000 060f 	and.w	r6, r0, #15
    cb70:	462b      	mov	r3, r5
{
    cb72:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb74:	7859      	ldrb	r1, [r3, #1]
    cb76:	4288      	cmp	r0, r1
    cb78:	d00a      	beq.n	cb90 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb7a:	781c      	ldrb	r4, [r3, #0]
    cb7c:	3320      	adds	r3, #32
    cb7e:	b90c      	cbnz	r4, cb84 <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb80:	42b1      	cmp	r1, r6
    cb82:	d015      	beq.n	cbb0 <usb_d_ep_enable+0x48>
    cb84:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb86:	2a0d      	cmp	r2, #13
    cb88:	d1f4      	bne.n	cb74 <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cb8a:	f06f 0011 	mvn.w	r0, #17
    cb8e:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cb90:	0152      	lsls	r2, r2, #5
    cb92:	5cab      	ldrb	r3, [r5, r2]
    cb94:	2b00      	cmp	r3, #0
    cb96:	bf14      	ite	ne
    cb98:	2301      	movne	r3, #1
    cb9a:	2302      	moveq	r3, #2
    cb9c:	4415      	add	r5, r2
    cb9e:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    cba0:	f005 ff6e 	bl	12a80 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    cba4:	2800      	cmp	r0, #0
    cba6:	db00      	blt.n	cbaa <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    cba8:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    cbaa:	2300      	movs	r3, #0
    cbac:	70ab      	strb	r3, [r5, #2]
    cbae:	bd70      	pop	{r4, r5, r6, pc}
    cbb0:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cbb2:	2302      	movs	r3, #2
    cbb4:	e7f2      	b.n	cb9c <usb_d_ep_enable+0x34>
    cbb6:	bf00      	nop
    cbb8:	20001c48 	.word	0x20001c48

0000cbbc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbc0:	f8df 811c 	ldr.w	r8, [pc, #284]	; cce0 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    cbc4:	7a05      	ldrb	r5, [r0, #8]
{
    cbc6:	b087      	sub	sp, #28
    cbc8:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbca:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    cbce:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cbd0:	7859      	ldrb	r1, [r3, #1]
    cbd2:	428d      	cmp	r5, r1
    cbd4:	d00c      	beq.n	cbf0 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cbd6:	781c      	ldrb	r4, [r3, #0]
    cbd8:	3320      	adds	r3, #32
    cbda:	b90c      	cbnz	r4, cbe0 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbdc:	42b9      	cmp	r1, r7
    cbde:	d007      	beq.n	cbf0 <usb_d_ep_transfer+0x34>
    cbe0:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cbe2:	2a0d      	cmp	r2, #13
    cbe4:	d1f4      	bne.n	cbd0 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cbe6:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    cbea:	b007      	add	sp, #28
    cbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    cbf0:	0154      	lsls	r4, r2, #5
    cbf2:	4606      	mov	r6, r0
    cbf4:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    cbf8:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    cbfa:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    cbfe:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    cc02:	f006 fa6f 	bl	130e4 <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    cc06:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cc0a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    cc0e:	f89d 7007 	ldrb.w	r7, [sp, #7]
    cc12:	b2ff      	uxtb	r7, r7
    cc14:	2f01      	cmp	r7, #1
    cc16:	d011      	beq.n	cc3c <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    cc18:	a802      	add	r0, sp, #8
    cc1a:	f006 fa6b 	bl	130f4 <atomic_leave_critical>
		switch (state) {
    cc1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cc22:	b2db      	uxtb	r3, r3
    cc24:	2b05      	cmp	r3, #5
    cc26:	d040      	beq.n	ccaa <usb_d_ep_transfer+0xee>
    cc28:	2b06      	cmp	r3, #6
    cc2a:	d022      	beq.n	cc72 <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	bf0c      	ite	eq
    cc30:	f06f 0012 	mvneq.w	r0, #18
    cc34:	2001      	movne	r0, #1
}
    cc36:	b007      	add	sp, #28
    cc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cc3c:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    cc3e:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cc40:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    cc44:	f006 fa56 	bl	130f4 <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cc48:	f818 2004 	ldrb.w	r2, [r8, r4]
    cc4c:	b9b2      	cbnz	r2, cc7c <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    cc4e:	f89b 1013 	ldrb.w	r1, [fp, #19]
    cc52:	f89b 3012 	ldrb.w	r3, [fp, #18]
    cc56:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cc5a:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    cc5c:	bb4b      	cbnz	r3, ccb2 <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cc5e:	2204      	movs	r2, #4
    cc60:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    cc64:	9304      	str	r3, [sp, #16]
    cc66:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cc68:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cc6a:	9203      	str	r2, [sp, #12]
    cc6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cc70:	e011      	b.n	cc96 <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    cc72:	f06f 000f 	mvn.w	r0, #15
}
    cc76:	b007      	add	sp, #28
    cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cc7c:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    cc80:	6833      	ldr	r3, [r6, #0]
    cc82:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cc84:	bf18      	it	ne
    cc86:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    cc88:	062a      	lsls	r2, r5, #24
    cc8a:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cc8e:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cc90:	d4ec      	bmi.n	cc6c <usb_d_ep_transfer+0xb0>
    cc92:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    cc96:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cc98:	f88d 3014 	strb.w	r3, [sp, #20]
    cc9c:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cca0:	f006 f8ca 	bl	12e38 <_usb_d_dev_ep_trans>
}
    cca4:	b007      	add	sp, #28
    cca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    ccaa:	2002      	movs	r0, #2
}
    ccac:	b007      	add	sp, #28
    ccae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    ccb2:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    ccb6:	4599      	cmp	r9, r3
    ccb8:	464f      	mov	r7, r9
    ccba:	bf28      	it	cs
    ccbc:	461f      	movcs	r7, r3
    ccbe:	2900      	cmp	r1, #0
    ccc0:	db05      	blt.n	ccce <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    ccc2:	6833      	ldr	r3, [r6, #0]
    ccc4:	9704      	str	r7, [sp, #16]
    ccc6:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ccc8:	4617      	mov	r7, r2
    ccca:	7a33      	ldrb	r3, [r6, #8]
    cccc:	e7e1      	b.n	cc92 <usb_d_ep_transfer+0xd6>
    ccce:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    ccd0:	6832      	ldr	r2, [r6, #0]
    ccd2:	9704      	str	r7, [sp, #16]
    ccd4:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ccd6:	bf94      	ite	ls
    ccd8:	2700      	movls	r7, #0
    ccda:	2701      	movhi	r7, #1
    ccdc:	7a33      	ldrb	r3, [r6, #8]
    ccde:	e7c5      	b.n	cc6c <usb_d_ep_transfer+0xb0>
    cce0:	20001c48 	.word	0x20001c48

0000cce4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    cce4:	b570      	push	{r4, r5, r6, lr}
    cce6:	4e0d      	ldr	r6, [pc, #52]	; (cd1c <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cce8:	f000 050f 	and.w	r5, r0, #15
    ccec:	4633      	mov	r3, r6
{
    ccee:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ccf0:	785a      	ldrb	r2, [r3, #1]
    ccf2:	4290      	cmp	r0, r2
    ccf4:	d008      	beq.n	cd08 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ccf6:	7819      	ldrb	r1, [r3, #0]
    ccf8:	3320      	adds	r3, #32
    ccfa:	b909      	cbnz	r1, cd00 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccfc:	42aa      	cmp	r2, r5
    ccfe:	d003      	beq.n	cd08 <usb_d_ep_abort+0x24>
    cd00:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cd02:	2c0d      	cmp	r4, #13
    cd04:	d1f4      	bne.n	ccf0 <usb_d_ep_abort+0xc>
    cd06:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cd08:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    cd0c:	f006 f962 	bl	12fd4 <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cd10:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cd12:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cd14:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cd16:	70e3      	strb	r3, [r4, #3]
    cd18:	bd70      	pop	{r4, r5, r6, pc}
    cd1a:	bf00      	nop
    cd1c:	20001c48 	.word	0x20001c48

0000cd20 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    cd20:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    cd22:	460c      	mov	r4, r1
    cd24:	b131      	cbz	r1, cd34 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    cd26:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cd28:	bf18      	it	ne
    cd2a:	2102      	movne	r1, #2
	}
}
    cd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cd30:	f005 bfc6 	b.w	12cc0 <_usb_d_dev_ep_stall>
    cd34:	4e15      	ldr	r6, [pc, #84]	; (cd8c <usb_d_ep_halt+0x6c>)
    cd36:	4605      	mov	r5, r0
    cd38:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd3a:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cd3e:	785a      	ldrb	r2, [r3, #1]
    cd40:	4295      	cmp	r5, r2
    cd42:	d00a      	beq.n	cd5a <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cd44:	7819      	ldrb	r1, [r3, #0]
    cd46:	3320      	adds	r3, #32
    cd48:	b909      	cbnz	r1, cd4e <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd4a:	4282      	cmp	r2, r0
    cd4c:	d005      	beq.n	cd5a <usb_d_ep_halt+0x3a>
    cd4e:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cd50:	2c0d      	cmp	r4, #13
    cd52:	d1f4      	bne.n	cd3e <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    cd54:	f06f 0011 	mvn.w	r0, #17
    cd58:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    cd5a:	2102      	movs	r1, #2
    cd5c:	4628      	mov	r0, r5
    cd5e:	f005 ffaf 	bl	12cc0 <_usb_d_dev_ep_stall>
    cd62:	b900      	cbnz	r0, cd66 <usb_d_ep_halt+0x46>
}
    cd64:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cd66:	2100      	movs	r1, #0
    cd68:	4628      	mov	r0, r5
    cd6a:	f005 ffa9 	bl	12cc0 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    cd6e:	2800      	cmp	r0, #0
    cd70:	dbf8      	blt.n	cd64 <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cd72:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    cd76:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cd78:	2301      	movs	r3, #1
    cd7a:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    cd7c:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    cd7e:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    cd80:	69e3      	ldr	r3, [r4, #28]
    cd82:	2200      	movs	r2, #0
    cd84:	4798      	blx	r3
	return ERR_NONE;
    cd86:	2000      	movs	r0, #0
    cd88:	bd70      	pop	{r4, r5, r6, pc}
    cd8a:	bf00      	nop
    cd8c:	20001c48 	.word	0x20001c48

0000cd90 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    cd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd92:	f8df e054 	ldr.w	lr, [pc, #84]	; cde8 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd96:	f000 070f 	and.w	r7, r0, #15
    cd9a:	4673      	mov	r3, lr
{
    cd9c:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cd9e:	785d      	ldrb	r5, [r3, #1]
    cda0:	42a8      	cmp	r0, r5
    cda2:	d008      	beq.n	cdb6 <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cda4:	781e      	ldrb	r6, [r3, #0]
    cda6:	3320      	adds	r3, #32
    cda8:	b90e      	cbnz	r6, cdae <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cdaa:	42bd      	cmp	r5, r7
    cdac:	d003      	beq.n	cdb6 <usb_d_ep_register_callback+0x26>
    cdae:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cdb0:	2c0d      	cmp	r4, #13
    cdb2:	d1f4      	bne.n	cd9e <usb_d_ep_register_callback+0xe>
    cdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    cdb6:	4b0b      	ldr	r3, [pc, #44]	; (cde4 <usb_d_ep_register_callback+0x54>)
    cdb8:	2a00      	cmp	r2, #0
    cdba:	bf08      	it	eq
    cdbc:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    cdbe:	2901      	cmp	r1, #1
    cdc0:	d003      	beq.n	cdca <usb_d_ep_register_callback+0x3a>
    cdc2:	d30a      	bcc.n	cdda <usb_d_ep_register_callback+0x4a>
    cdc4:	2902      	cmp	r1, #2
    cdc6:	d004      	beq.n	cdd2 <usb_d_ep_register_callback+0x42>
    cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    cdca:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cdce:	61a2      	str	r2, [r4, #24]
		break;
    cdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    cdd2:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cdd6:	61e2      	str	r2, [r4, #28]
    cdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    cdda:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cdde:	6162      	str	r2, [r4, #20]
		break;
    cde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cde2:	bf00      	nop
    cde4:	0000c6ed 	.word	0x0000c6ed
    cde8:	20001c48 	.word	0x20001c48

0000cdec <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    cdec:	b900      	cbnz	r0, cdf0 <assert+0x4>
		__asm("BKPT #0");
    cdee:	be00      	bkpt	0x0000
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop

0000cdf4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    cdf4:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    cdf6:	6804      	ldr	r4, [r0, #0]
{
    cdf8:	4606      	mov	r6, r0
    cdfa:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    cdfc:	b144      	cbz	r4, ce10 <list_insert_at_end+0x1c>
		if (it == element) {
    cdfe:	428c      	cmp	r4, r1
    ce00:	d015      	beq.n	ce2e <list_insert_at_end+0x3a>
    ce02:	4623      	mov	r3, r4
    ce04:	e001      	b.n	ce0a <list_insert_at_end+0x16>
    ce06:	429d      	cmp	r5, r3
    ce08:	d011      	beq.n	ce2e <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    ce0a:	681b      	ldr	r3, [r3, #0]
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d1fa      	bne.n	ce06 <list_insert_at_end+0x12>
    ce10:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    ce12:	224f      	movs	r2, #79	; 0x4f
    ce14:	4908      	ldr	r1, [pc, #32]	; (ce38 <list_insert_at_end+0x44>)
    ce16:	f7ff ffe9 	bl	cdec <assert>

	if (!list->head) {
    ce1a:	6833      	ldr	r3, [r6, #0]
    ce1c:	b90b      	cbnz	r3, ce22 <list_insert_at_end+0x2e>
    ce1e:	e008      	b.n	ce32 <list_insert_at_end+0x3e>
    ce20:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    ce22:	6823      	ldr	r3, [r4, #0]
    ce24:	2b00      	cmp	r3, #0
    ce26:	d1fb      	bne.n	ce20 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    ce28:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    ce2a:	602b      	str	r3, [r5, #0]
    ce2c:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    ce2e:	2000      	movs	r0, #0
    ce30:	e7ef      	b.n	ce12 <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    ce32:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    ce34:	602b      	str	r3, [r5, #0]
		return;
    ce36:	bd70      	pop	{r4, r5, r6, pc}
    ce38:	000232b0 	.word	0x000232b0

0000ce3c <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    ce3e:	4d1f      	ldr	r5, [pc, #124]	; (cebc <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    ce40:	682c      	ldr	r4, [r5, #0]
    ce42:	f014 0401 	ands.w	r4, r4, #1
    ce46:	d002      	beq.n	ce4e <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    ce48:	4b1d      	ldr	r3, [pc, #116]	; (cec0 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    ce4a:	6818      	ldr	r0, [r3, #0]
    ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce4e:	2074      	movs	r0, #116	; 0x74
    ce50:	f006 faca 	bl	133e8 <_Znwj>
    ce54:	4e1a      	ldr	r6, [pc, #104]	; (cec0 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    ce56:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    ce58:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    ce5a:	210c      	movs	r1, #12
    ce5c:	f04f 30ff 	mov.w	r0, #4294967295
    ce60:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    ce62:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    ce64:	605c      	str	r4, [r3, #4]
    ce66:	6658      	str	r0, [r3, #100]	; 0x64
    ce68:	609c      	str	r4, [r3, #8]
    ce6a:	6698      	str	r0, [r3, #104]	; 0x68
    ce6c:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    ce6e:	841c      	strh	r4, [r3, #32]
    ce70:	611c      	str	r4, [r3, #16]
    ce72:	625c      	str	r4, [r3, #36]	; 0x24
    ce74:	615c      	str	r4, [r3, #20]
    ce76:	851c      	strh	r4, [r3, #40]	; 0x28
    ce78:	619c      	str	r4, [r3, #24]
    ce7a:	62dc      	str	r4, [r3, #44]	; 0x2c
    ce7c:	61dc      	str	r4, [r3, #28]
    ce7e:	861c      	strh	r4, [r3, #48]	; 0x30
    ce80:	635c      	str	r4, [r3, #52]	; 0x34
    ce82:	871c      	strh	r4, [r3, #56]	; 0x38
    ce84:	63dc      	str	r4, [r3, #60]	; 0x3c
    ce86:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    ce8a:	645c      	str	r4, [r3, #68]	; 0x44
    ce8c:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    ce90:	64dc      	str	r4, [r3, #76]	; 0x4c
    ce92:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    ce96:	655c      	str	r4, [r3, #84]	; 0x54
    ce98:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    ce9c:	65dc      	str	r4, [r3, #92]	; 0x5c
    ce9e:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    cea2:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    cea6:	671c      	str	r4, [r3, #112]	; 0x70
    cea8:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    ceac:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    ceb0:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    ceb4:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    ceb6:	6033      	str	r3, [r6, #0]
    ceb8:	602a      	str	r2, [r5, #0]
}
    ceba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cebc:	20001de8 	.word	0x20001de8
    cec0:	20001e20 	.word	0x20001e20

0000cec4 <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    cec6:	4bbd      	ldr	r3, [pc, #756]	; (d1bc <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    cec8:	4605      	mov	r5, r0
    };
    ceca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    cecc:	b085      	sub	sp, #20
    };
    cece:	ac04      	add	r4, sp, #16
    ced0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    ced4:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    ced6:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    ced8:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    cedc:	2303      	movs	r3, #3
    cede:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    cee2:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    cee6:	f245 03c3 	movw	r3, #20675	; 0x50c3
    ceea:	842b      	strh	r3, [r5, #32]
    ceec:	852b      	strh	r3, [r5, #40]	; 0x28
    ceee:	862b      	strh	r3, [r5, #48]	; 0x30
    cef0:	872b      	strh	r3, [r5, #56]	; 0x38
    cef2:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    cef6:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    cefa:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    cefe:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cf02:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    cf06:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    cf08:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    cf0c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    cf10:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    cf14:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    cf16:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    cf18:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf1a:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    cf1c:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf1e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    cf22:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    cf26:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cf2a:	07cf      	lsls	r7, r1, #31
    cf2c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cf30:	f04f 0401 	mov.w	r4, #1
    cf34:	bf54      	ite	pl
    cf36:	f364 0003 	bfipl	r0, r4, #0, #4
    cf3a:	f364 1007 	bfimi	r0, r4, #4, #4
    cf3e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf42:	4a9f      	ldr	r2, [pc, #636]	; (d1c0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cf44:	4413      	add	r3, r2
    cf46:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf48:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf4a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    cf4e:	f041 0101 	orr.w	r1, r1, #1
    cf52:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cf56:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cf58:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cf5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf5e:	01db      	lsls	r3, r3, #7
    cf60:	441a      	add	r2, r3
    cf62:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cf66:	07ce      	lsls	r6, r1, #31
    cf68:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cf6c:	bf54      	ite	pl
    cf6e:	f364 0003 	bfipl	r0, r4, #0, #4
    cf72:	f364 1007 	bfimi	r0, r4, #4, #4
    cf76:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf7a:	4a91      	ldr	r2, [pc, #580]	; (d1c0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cf7c:	4413      	add	r3, r2
    cf7e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf80:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cf82:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    cf86:	f041 0101 	orr.w	r1, r1, #1
    cf8a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cf8e:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cf90:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cf92:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cf96:	01db      	lsls	r3, r3, #7
    cf98:	441a      	add	r2, r3
    cf9a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cf9e:	07cf      	lsls	r7, r1, #31
    cfa0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cfa4:	bf54      	ite	pl
    cfa6:	f364 0003 	bfipl	r0, r4, #0, #4
    cfaa:	f364 1007 	bfimi	r0, r4, #4, #4
    cfae:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cfb2:	4a83      	ldr	r2, [pc, #524]	; (d1c0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    cfb4:	4413      	add	r3, r2
    cfb6:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cfb8:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cfba:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    cfbe:	f041 0101 	orr.w	r1, r1, #1
    cfc2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cfc6:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    cfc8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    cfca:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cfce:	01db      	lsls	r3, r3, #7
    cfd0:	441a      	add	r2, r3
    cfd2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cfd6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cfda:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    cfde:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cfe0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    cfe4:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    cfe6:	bf4c      	ite	mi
    cfe8:	f364 1007 	bfimi	r0, r4, #4, #4
    cfec:	f364 0003 	bfipl	r0, r4, #0, #4
    cff0:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cff4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    cff8:	4a72      	ldr	r2, [pc, #456]	; (d1c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    cffa:	f041 0101 	orr.w	r1, r1, #1
    cffe:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d002:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d006:	f36f 1386 	bfc	r3, #6, #1
    d00a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d00e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d012:	065f      	lsls	r7, r3, #25
    d014:	d4fb      	bmi.n	d00e <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    d016:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d01a:	496a      	ldr	r1, [pc, #424]	; (d1c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    d01c:	2004      	movs	r0, #4
    d01e:	f360 0303 	bfi	r3, r0, #0, #4
    d022:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d026:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d02e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d032:	684b      	ldr	r3, [r1, #4]
    d034:	06de      	lsls	r6, r3, #27
    d036:	d4fc      	bmi.n	d032 <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d038:	4963      	ldr	r1, [pc, #396]	; (d1c8 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    d03a:	4a64      	ldr	r2, [pc, #400]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d03c:	6a0b      	ldr	r3, [r1, #32]
    d03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d042:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    d044:	8813      	ldrh	r3, [r2, #0]
    d046:	f043 0301 	orr.w	r3, r3, #1
    d04a:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    d04c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d04e:	f013 0301 	ands.w	r3, r3, #1
    d052:	d1fb      	bne.n	d04c <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    d054:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    d058:	290a      	cmp	r1, #10
    d05a:	f000 80e7 	beq.w	d22c <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    d05e:	290c      	cmp	r1, #12
    d060:	f000 80df 	beq.w	d222 <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    d064:	2908      	cmp	r1, #8
    d066:	f000 80d5 	beq.w	d214 <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    d06a:	4b58      	ldr	r3, [pc, #352]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d06c:	881a      	ldrh	r2, [r3, #0]
    d06e:	2101      	movs	r1, #1
    d070:	f361 220a 	bfi	r2, r1, #8, #3
    d074:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    d076:	889a      	ldrh	r2, [r3, #4]
    d078:	b292      	uxth	r2, r2
    d07a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    d07e:	f042 0204 	orr.w	r2, r2, #4
    d082:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d084:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    d086:	f014 0404 	ands.w	r4, r4, #4
    d08a:	d1fb      	bne.n	d084 <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    d08c:	4620      	mov	r0, r4
    d08e:	f001 fe33 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d092:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d094:	4620      	mov	r0, r4
    d096:	f001 fe39 	bl	ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d09a:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d09c:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d09e:	f023 0302 	bic.w	r3, r3, #2
    d0a2:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d0a4:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d0a6:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d0a8:	6833      	ldr	r3, [r6, #0]
    d0aa:	2b01      	cmp	r3, #1
    d0ac:	d0fc      	beq.n	d0a8 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d0ae:	4b48      	ldr	r3, [pc, #288]	; (d1d0 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d0b0:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d0b2:	4948      	ldr	r1, [pc, #288]	; (d1d4 <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d0b4:	4f48      	ldr	r7, [pc, #288]	; (d1d8 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d0b6:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d0ba:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d0bc:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d0be:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d0c0:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d0c2:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d0c4:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d0c6:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d0c8:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d0ca:	f001 fe15 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d0ce:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d0d0:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d0d2:	f023 0302 	bic.w	r3, r3, #2
    d0d6:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d0d8:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d0da:	6803      	ldr	r3, [r0, #0]
    d0dc:	2b01      	cmp	r3, #1
    d0de:	d0fc      	beq.n	d0da <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d0e0:	4b3e      	ldr	r3, [pc, #248]	; (d1dc <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d0e2:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d0e4:	2001      	movs	r0, #1
    d0e6:	f001 fe11 	bl	ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d0ea:	2300      	movs	r3, #0
    d0ec:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d0ee:	4a37      	ldr	r2, [pc, #220]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d0f0:	4e3b      	ldr	r6, [pc, #236]	; (d1e0 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d0f2:	493c      	ldr	r1, [pc, #240]	; (d1e4 <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d0f4:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d0f6:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d0fa:	2408      	movs	r4, #8
    d0fc:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d0fe:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d100:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d102:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d104:	f043 0301 	orr.w	r3, r3, #1
    d108:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d10a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d10c:	075c      	lsls	r4, r3, #29
    d10e:	d4fc      	bmi.n	d10a <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d110:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d112:	492e      	ldr	r1, [pc, #184]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d118:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d11a:	7a13      	ldrb	r3, [r2, #8]
    d11c:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d120:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d122:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d124:	06d8      	lsls	r0, r3, #27
    d126:	d4fc      	bmi.n	d122 <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d128:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d12a:	4c28      	ldr	r4, [pc, #160]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d12c:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d12e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d130:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d134:	d1fb      	bne.n	d12e <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d136:	78e3      	ldrb	r3, [r4, #3]
    d138:	f043 0301 	orr.w	r3, r3, #1
    d13c:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d13e:	f001 fddb 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d142:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d144:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d146:	6813      	ldr	r3, [r2, #0]
    d148:	f043 0302 	orr.w	r3, r3, #2
    d14c:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d14e:	f001 fdd3 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d152:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d154:	4a1d      	ldr	r2, [pc, #116]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d156:	f043 0302 	orr.w	r3, r3, #2
    d15a:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d15c:	88a3      	ldrh	r3, [r4, #4]
    d15e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d162:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d164:	8823      	ldrh	r3, [r4, #0]
    d166:	f043 0302 	orr.w	r3, r3, #2
    d16a:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d16c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d16e:	0799      	lsls	r1, r3, #30
    d170:	d4fc      	bmi.n	d16c <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d172:	2000      	movs	r0, #0
    d174:	f001 fdc0 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d178:	6803      	ldr	r3, [r0, #0]
    d17a:	079a      	lsls	r2, r3, #30
    d17c:	d4f9      	bmi.n	d172 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d17e:	2001      	movs	r0, #1
    d180:	f001 fdba 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d184:	6803      	ldr	r3, [r0, #0]
    d186:	079b      	lsls	r3, r3, #30
    d188:	d4f9      	bmi.n	d17e <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d18a:	4a10      	ldr	r2, [pc, #64]	; (d1cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d18c:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d190:	f013 0301 	ands.w	r3, r3, #1
    d194:	d1fa      	bne.n	d18c <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d196:	4e14      	ldr	r6, [pc, #80]	; (d1e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d198:	4c14      	ldr	r4, [pc, #80]	; (d1ec <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d19a:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d19c:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d1a0:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d1a4:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d1a6:	8029      	strh	r1, [r5, #0]
    d1a8:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d1aa:	8229      	strh	r1, [r5, #16]
    d1ac:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d1ae:	806b      	strh	r3, [r5, #2]
    d1b0:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d1b2:	826b      	strh	r3, [r5, #18]
    d1b4:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d1b6:	80aa      	strh	r2, [r5, #4]
    d1b8:	e01a      	b.n	d1f0 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d1ba:	bf00      	nop
    d1bc:	000232d0 	.word	0x000232d0
    d1c0:	41008000 	.word	0x41008000
    d1c4:	40001c00 	.word	0x40001c00
    d1c8:	40000800 	.word	0x40000800
    d1cc:	43002000 	.word	0x43002000
    d1d0:	00204600 	.word	0x00204600
    d1d4:	20001dfc 	.word	0x20001dfc
    d1d8:	43002040 	.word	0x43002040
    d1dc:	00204700 	.word	0x00204700
    d1e0:	20001e20 	.word	0x20001e20
    d1e4:	43002034 	.word	0x43002034
    d1e8:	25ff0000 	.word	0x25ff0000
    d1ec:	60f80000 	.word	0x60f80000
    d1f0:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d1f2:	82aa      	strh	r2, [r5, #20]
    d1f4:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d1f6:	80eb      	strh	r3, [r5, #6]
    d1f8:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d1fa:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d1fc:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d200:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d202:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d204:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d206:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d208:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d20a:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d20c:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d20e:	83eb      	strh	r3, [r5, #30]
}
    d210:	b005      	add	sp, #20
    d212:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d214:	88d3      	ldrh	r3, [r2, #6]
    d216:	f043 0318 	orr.w	r3, r3, #24
    d21a:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d21c:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d220:	e723      	b.n	d06a <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d222:	88d0      	ldrh	r0, [r2, #6]
    d224:	f363 00c4 	bfi	r0, r3, #3, #2
    d228:	80d0      	strh	r0, [r2, #6]
    d22a:	e7f7      	b.n	d21c <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d22c:	88d3      	ldrh	r3, [r2, #6]
    d22e:	2002      	movs	r0, #2
    d230:	f360 03c4 	bfi	r3, r0, #3, #2
    d234:	80d3      	strh	r3, [r2, #6]
    d236:	e7f1      	b.n	d21c <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d238 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d23c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d240:	2b00      	cmp	r3, #0
    d242:	f000 80ab 	beq.w	d39c <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d246:	4b89      	ldr	r3, [pc, #548]	; (d46c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d248:	4604      	mov	r4, r0
    d24a:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d24e:	f010 0001 	ands.w	r0, r0, #1
    d252:	f000 80a5 	beq.w	d3a0 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d256:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d258:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d25c:	3301      	adds	r3, #1
    d25e:	4293      	cmp	r3, r2
    d260:	6723      	str	r3, [r4, #112]	; 0x70
    d262:	d302      	bcc.n	d26a <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d264:	2301      	movs	r3, #1
    d266:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d26a:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d26c:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d26e:	8821      	ldrh	r1, [r4, #0]
    d270:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d272:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d274:	fb83 6706 	smull	r6, r7, r3, r6
    d278:	0bf2      	lsrs	r2, r6, #15
    d27a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d27e:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d280:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d284:	fb01 f103 	mul.w	r1, r1, r3
    d288:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d28c:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d28e:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d290:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d292:	6262      	str	r2, [r4, #36]	; 0x24
    d294:	fb80 8905 	smull	r8, r9, r0, r5
    d298:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d29c:	b2b2      	uxth	r2, r6
    d29e:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d2a2:	fb02 f000 	mul.w	r0, r2, r0
    d2a6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d2aa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d2ae:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d2b2:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d2b4:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d2b6:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d2b8:	88a0      	ldrh	r0, [r4, #4]
    d2ba:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d2bc:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2c0:	fb81 2302 	smull	r2, r3, r1, r2
    d2c4:	0bd2      	lsrs	r2, r2, #15
    d2c6:	b280      	uxth	r0, r0
    d2c8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d2cc:	fb00 f101 	mul.w	r1, r0, r1
    d2d0:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d2d4:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d2da:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d2dc:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d2de:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d2e0:	88e1      	ldrh	r1, [r4, #6]
    d2e2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d2e6:	fb86 8903 	smull	r8, r9, r6, r3
    d2ea:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d2ee:	b289      	uxth	r1, r1
    d2f0:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d2f4:	fb01 f606 	mul.w	r6, r1, r6
    d2f8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d2fc:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d300:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d302:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d304:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d306:	8923      	ldrh	r3, [r4, #8]
    d308:	63e1      	str	r1, [r4, #60]	; 0x3c
    d30a:	fb85 6706 	smull	r6, r7, r5, r6
    d30e:	0bf2      	lsrs	r2, r6, #15
    d310:	b29b      	uxth	r3, r3
    d312:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d316:	fb03 f505 	mul.w	r5, r3, r5
    d31a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d31e:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d322:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d324:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d326:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d328:	8961      	ldrh	r1, [r4, #10]
    d32a:	6462      	str	r2, [r4, #68]	; 0x44
    d32c:	fb80 6706 	smull	r6, r7, r0, r6
    d330:	0bf3      	lsrs	r3, r6, #15
    d332:	b28a      	uxth	r2, r1
    d334:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d338:	fb02 f000 	mul.w	r0, r2, r0
    d33c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d340:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d344:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d346:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d348:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d34a:	89a0      	ldrh	r0, [r4, #12]
    d34c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d350:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d352:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d356:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d358:	fb83 8902 	smull	r8, r9, r3, r2
    d35c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d360:	b280      	uxth	r0, r0
    d362:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d366:	fb00 f303 	mul.w	r3, r0, r3
    d36a:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d36e:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d372:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d374:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d376:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d37a:	89e0      	ldrh	r0, [r4, #14]
    d37c:	6562      	str	r2, [r4, #84]	; 0x54
    d37e:	0bf3      	lsrs	r3, r6, #15
    d380:	b282      	uxth	r2, r0
    d382:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d386:	fb02 f101 	mul.w	r1, r2, r1
    d38a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d38e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d392:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d394:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d396:	83e2      	strh	r2, [r4, #30]
    d398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d3a0:	f001 fcaa 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d3a4:	6803      	ldr	r3, [r0, #0]
    d3a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d3aa:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d3ac:	2e00      	cmp	r6, #0
    d3ae:	f47f af52 	bne.w	d256 <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d3b2:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d3b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d3b8:	2501      	movs	r5, #1
    d3ba:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d478 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d3be:	4f2c      	ldr	r7, [pc, #176]	; (d470 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d3c0:	e00f      	b.n	d3e2 <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d3c2:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d3c6:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d3ca:	b29b      	uxth	r3, r3
    d3cc:	f1c2 010f 	rsb	r1, r2, #15
    d3d0:	408b      	lsls	r3, r1
    d3d2:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d3d4:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d3d6:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d3da:	462e      	mov	r6, r5
    d3dc:	dc0c      	bgt.n	d3f8 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d3de:	3501      	adds	r5, #1
    d3e0:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d3e2:	2d01      	cmp	r5, #1
    d3e4:	d1ed      	bne.n	d3c2 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d3e6:	f04f 31ff 	mov.w	r1, #4294967295
    d3ea:	6838      	ldr	r0, [r7, #0]
    d3ec:	f004 f9c8 	bl	11780 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d3f0:	0703      	lsls	r3, r0, #28
    d3f2:	d5e6      	bpl.n	d3c2 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d3f4:	462e      	mov	r6, r5
    d3f6:	e7f2      	b.n	d3de <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d3f8:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d3fc:	429a      	cmp	r2, r3
    d3fe:	d005      	beq.n	d40c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d400:	2b0a      	cmp	r3, #10
    d402:	d02c      	beq.n	d45e <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d404:	2b0c      	cmp	r3, #12
    d406:	d024      	beq.n	d452 <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d408:	2b08      	cmp	r3, #8
    d40a:	d01a      	beq.n	d442 <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d40c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d40e:	4b19      	ldr	r3, [pc, #100]	; (d474 <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d410:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d412:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d416:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d418:	2000      	movs	r0, #0
    d41a:	f001 fc6d 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d41e:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d420:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d422:	6813      	ldr	r3, [r2, #0]
    d424:	f043 0302 	orr.w	r3, r3, #2
    d428:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d42a:	f001 fc65 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d42e:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d430:	4a0e      	ldr	r2, [pc, #56]	; (d46c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d432:	f043 0302 	orr.w	r3, r3, #2
    d436:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d438:	8893      	ldrh	r3, [r2, #4]
    d43a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d43e:	8093      	strh	r3, [r2, #4]
    d440:	e713      	b.n	d26a <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d442:	490a      	ldr	r1, [pc, #40]	; (d46c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d444:	88ca      	ldrh	r2, [r1, #6]
    d446:	f042 0218 	orr.w	r2, r2, #24
    d44a:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d44c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d450:	e7dc      	b.n	d40c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d452:	4a06      	ldr	r2, [pc, #24]	; (d46c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d454:	88d1      	ldrh	r1, [r2, #6]
    d456:	f36f 01c4 	bfc	r1, #3, #2
    d45a:	80d1      	strh	r1, [r2, #6]
    d45c:	e7f6      	b.n	d44c <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d45e:	4a03      	ldr	r2, [pc, #12]	; (d46c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d460:	88d1      	ldrh	r1, [r2, #6]
    d462:	2002      	movs	r0, #2
    d464:	f360 01c4 	bfi	r1, r0, #3, #2
    d468:	80d1      	strh	r1, [r2, #6]
    d46a:	e7ef      	b.n	d44c <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d46c:	43002000 	.word	0x43002000
    d470:	20001f18 	.word	0x20001f18
    d474:	200019d0 	.word	0x200019d0
    d478:	20001dec 	.word	0x20001dec

0000d47c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d47c:	2907      	cmp	r1, #7
    d47e:	dc33      	bgt.n	d4e8 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d480:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d482:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d484:	b083      	sub	sp, #12
    d486:	4605      	mov	r5, r0
    switch (theUnits) {
    d488:	d033      	beq.n	d4f2 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d48a:	d336      	bcc.n	d4fa <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d48c:	2b02      	cmp	r3, #2
    d48e:	d12d      	bne.n	d4ec <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d490:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d492:	1d0c      	adds	r4, r1, #4
    d494:	f00e fb10 	bl	1bab8 <__aeabi_i2d>
    d498:	460b      	mov	r3, r1
    d49a:	4602      	mov	r2, r0
    d49c:	491a      	ldr	r1, [pc, #104]	; (d508 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d49e:	2000      	movs	r0, #0
    d4a0:	f00e fc9a 	bl	1bdd8 <__aeabi_ddiv>
    d4a4:	f00e fe50 	bl	1c148 <__aeabi_d2f>
    d4a8:	ed9f 0a18 	vldr	s0, [pc, #96]	; d50c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d4ac:	ee00 0a90 	vmov	s1, r0
    d4b0:	f00d fbaa 	bl	1ac08 <powf>
    d4b4:	eddf 6a16 	vldr	s13, [pc, #88]	; d510 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d4b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; d514 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d4bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d4c0:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d4c4:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d4c6:	eef4 7ac7 	vcmpe.f32	s15, s14
    d4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4ce:	bf49      	itett	mi
    d4d0:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d4d4:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d4d8:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d4dc:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d4e0:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d4e4:	b003      	add	sp, #12
    d4e6:	bd30      	pop	{r4, r5, pc}
        return false;
    d4e8:	2000      	movs	r0, #0
    d4ea:	4770      	bx	lr
            return false;
    d4ec:	2000      	movs	r0, #0
}
    d4ee:	b003      	add	sp, #12
    d4f0:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d4f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d4f6:	b290      	uxth	r0, r2
    d4f8:	e7cb      	b.n	d492 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d4fa:	3104      	adds	r1, #4
            return true;
    d4fc:	2001      	movs	r0, #1
        m_tc = newTc;
    d4fe:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d502:	b003      	add	sp, #12
    d504:	bd30      	pop	{r4, r5, pc}
    d506:	bf00      	nop
    d508:	3ff00000 	.word	0x3ff00000
    d50c:	3c23d70a 	.word	0x3c23d70a
    d510:	47000000 	.word	0x47000000
    d514:	46fffe00 	.word	0x46fffe00

0000d518 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d51a:	f7ff fc8f 	bl	ce3c <_ZN9ClearCore10AdcManager8InstanceEv>
    d51e:	4a0f      	ldr	r2, [pc, #60]	; (d55c <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d520:	4b0f      	ldr	r3, [pc, #60]	; (d560 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d522:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d524:	2104      	movs	r1, #4
    d526:	2205      	movs	r2, #5
    d528:	2706      	movs	r7, #6
    d52a:	2607      	movs	r6, #7
    d52c:	2508      	movs	r5, #8
    d52e:	2409      	movs	r4, #9
    d530:	200a      	movs	r0, #10
    d532:	8019      	strh	r1, [r3, #0]
    d534:	809a      	strh	r2, [r3, #4]
    d536:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d53a:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d53c:	811f      	strh	r7, [r3, #8]
    d53e:	819e      	strh	r6, [r3, #12]
    d540:	821d      	strh	r5, [r3, #16]
    d542:	829c      	strh	r4, [r3, #20]
    d544:	8318      	strh	r0, [r3, #24]
    d546:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d548:	805a      	strh	r2, [r3, #2]
    d54a:	80da      	strh	r2, [r3, #6]
    d54c:	815a      	strh	r2, [r3, #10]
    d54e:	81da      	strh	r2, [r3, #14]
    d550:	825a      	strh	r2, [r3, #18]
    d552:	82da      	strh	r2, [r3, #22]
    d554:	835a      	strh	r2, [r3, #26]
    d556:	83da      	strh	r2, [r3, #30]
    d558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d55a:	bf00      	nop
    d55c:	20001dfc 	.word	0x20001dfc
    d560:	20001e00 	.word	0x20001e00

0000d564 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d564:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d568:	4770      	bx	lr
    d56a:	bf00      	nop

0000d56c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d56c:	7980      	ldrb	r0, [r0, #6]
    d56e:	4770      	bx	lr

0000d570 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d570:	2004      	movs	r0, #4
    d572:	4770      	bx	lr

0000d574 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d574:	7980      	ldrb	r0, [r0, #6]
    d576:	1ec3      	subs	r3, r0, #3
    d578:	2b01      	cmp	r3, #1
    d57a:	bf83      	ittte	hi
    d57c:	3806      	subhi	r0, #6
    d57e:	fab0 f080 	clzhi	r0, r0
    d582:	0940      	lsrhi	r0, r0, #5
    d584:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d586:	4770      	bx	lr

0000d588 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d588:	b530      	push	{r4, r5, lr}
    d58a:	b083      	sub	sp, #12
    d58c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d590:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d592:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d594:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d596:	f000 fcfd 	bl	df94 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d59a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d59e:	4a05      	ldr	r2, [pc, #20]	; (d5b4 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d5a0:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d5a2:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d5a4:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d5a6:	4b04      	ldr	r3, [pc, #16]	; (d5b8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d5a8:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d5aa:	4620      	mov	r0, r4
    d5ac:	66a3      	str	r3, [r4, #104]	; 0x68
    d5ae:	b003      	add	sp, #12
    d5b0:	bd30      	pop	{r4, r5, pc}
    d5b2:	bf00      	nop
    d5b4:	00023328 	.word	0x00023328
    d5b8:	06a40000 	.word	0x06a40000

0000d5bc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    d5bc:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d5be:	4a3a      	ldr	r2, [pc, #232]	; (d6a8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d5c0:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d5c4:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    d5c8:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d5ca:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d5ce:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d5d2:	065d      	lsls	r5, r3, #25
    d5d4:	d4fb      	bmi.n	d5ce <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    d5d6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d5da:	4933      	ldr	r1, [pc, #204]	; (d6a8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d5dc:	2004      	movs	r0, #4
    d5de:	f360 0303 	bfi	r3, r0, #0, #4
    d5e2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d5e6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d5ee:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d5f2:	684b      	ldr	r3, [r1, #4]
    d5f4:	06d8      	lsls	r0, r3, #27
    d5f6:	d4fc      	bmi.n	d5f2 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d5f8:	4a2c      	ldr	r2, [pc, #176]	; (d6ac <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    d5fa:	492d      	ldr	r1, [pc, #180]	; (d6b0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d5fc:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    d5fe:	4b2d      	ldr	r3, [pc, #180]	; (d6b4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d600:	2507      	movs	r5, #7
    d602:	f365 4013 	bfi	r0, r5, #16, #4
    d606:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    d608:	6a0a      	ldr	r2, [r1, #32]
    d60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d60e:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    d610:	781a      	ldrb	r2, [r3, #0]
    d612:	f042 0201 	orr.w	r2, r2, #1
    d616:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    d618:	689a      	ldr	r2, [r3, #8]
    d61a:	07d2      	lsls	r2, r2, #31
    d61c:	d4fc      	bmi.n	d618 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    d61e:	785a      	ldrb	r2, [r3, #1]
    d620:	f042 0201 	orr.w	r2, r2, #1
    d624:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    d626:	785a      	ldrb	r2, [r3, #1]
    d628:	f042 0206 	orr.w	r2, r2, #6
    d62c:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    d62e:	899a      	ldrh	r2, [r3, #12]
    d630:	f042 0202 	orr.w	r2, r2, #2
    d634:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    d636:	899a      	ldrh	r2, [r3, #12]
    d638:	2105      	movs	r1, #5
    d63a:	f361 220b 	bfi	r2, r1, #8, #4
    d63e:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    d640:	899a      	ldrh	r2, [r3, #12]
    d642:	2102      	movs	r1, #2
    d644:	f361 0283 	bfi	r2, r1, #2, #2
    d648:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    d64a:	8a1b      	ldrh	r3, [r3, #16]
    d64c:	b29b      	uxth	r3, r3
    d64e:	bb23      	cbnz	r3, d69a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d650:	4b19      	ldr	r3, [pc, #100]	; (d6b8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    d652:	681d      	ldr	r5, [r3, #0]
    d654:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    d658:	4628      	mov	r0, r5
    d65a:	f004 fadd 	bl	11c18 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d65e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d662:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d666:	4628      	mov	r0, r5
    d668:	f004 fad6 	bl	11c18 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    d66c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d670:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    d672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d676:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    d67a:	461a      	mov	r2, r3
    d67c:	db03      	blt.n	d686 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    d67e:	2300      	movs	r3, #0
    d680:	461a      	mov	r2, r3
    d682:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    d686:	4410      	add	r0, r2
    d688:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d68c:	db04      	blt.n	d698 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    d68e:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    d692:	3304      	adds	r3, #4
    d694:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    d698:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d69a:	4a06      	ldr	r2, [pc, #24]	; (d6b4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    d69c:	6893      	ldr	r3, [r2, #8]
    d69e:	f013 0304 	ands.w	r3, r3, #4
    d6a2:	d1fb      	bne.n	d69c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    d6a4:	8213      	strh	r3, [r2, #16]
    d6a6:	e7d3      	b.n	d650 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    d6a8:	40001c00 	.word	0x40001c00
    d6ac:	40001800 	.word	0x40001800
    d6b0:	40000800 	.word	0x40000800
    d6b4:	43002400 	.word	0x43002400
    d6b8:	20001f24 	.word	0x20001f24

0000d6bc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    d6bc:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    d6be:	4a2e      	ldr	r2, [pc, #184]	; (d778 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    d6c0:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d6c4:	8a13      	ldrh	r3, [r2, #16]
    d6c6:	b29b      	uxth	r3, r3
    d6c8:	4299      	cmp	r1, r3
    d6ca:	d003      	beq.n	d6d4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d6cc:	6893      	ldr	r3, [r2, #8]
    d6ce:	075d      	lsls	r5, r3, #29
    d6d0:	d4fc      	bmi.n	d6cc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    d6d2:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d6d4:	68c3      	ldr	r3, [r0, #12]
    d6d6:	4929      	ldr	r1, [pc, #164]	; (d77c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    d6d8:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d6da:	4a27      	ldr	r2, [pc, #156]	; (d778 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d6dc:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d6e0:	4423      	add	r3, r4
    d6e2:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    d6e6:	f044 0401 	orr.w	r4, r4, #1
    d6ea:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d6ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
    d6f0:	6e44      	ldr	r4, [r0, #100]	; 0x64
    d6f2:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d6f6:	4423      	add	r3, r4
    d6f8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d6fc:	f041 0101 	orr.w	r1, r1, #1
    d700:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d704:	6893      	ldr	r3, [r2, #8]
    d706:	079c      	lsls	r4, r3, #30
    d708:	d4fc      	bmi.n	d704 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    d70a:	7813      	ldrb	r3, [r2, #0]
    d70c:	0799      	lsls	r1, r3, #30
    d70e:	d407      	bmi.n	d720 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    d710:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d712:	4919      	ldr	r1, [pc, #100]	; (d778 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    d714:	f043 0302 	orr.w	r3, r3, #2
    d718:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d71a:	688b      	ldr	r3, [r1, #8]
    d71c:	079a      	lsls	r2, r3, #30
    d71e:	d4fc      	bmi.n	d71a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    d720:	4a15      	ldr	r2, [pc, #84]	; (d778 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    d722:	79d3      	ldrb	r3, [r2, #7]
    d724:	079b      	lsls	r3, r3, #30
    d726:	d0fc      	beq.n	d722 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    d728:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d72a:	4b15      	ldr	r3, [pc, #84]	; (d780 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    d72c:	f002 010f 	and.w	r1, r2, #15
    d730:	185a      	adds	r2, r3, r1
    d732:	2400      	movs	r4, #0
    d734:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d738:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d73a:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    d73e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d742:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d744:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d748:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    d74a:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d74c:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    d74e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d752:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d756:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d75a:	33f4      	adds	r3, #244	; 0xf4
    d75c:	f3bf 8f5b 	dmb	ish
    d760:	e853 2f00 	ldrex	r2, [r3]
    d764:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d768:	e843 2100 	strex	r1, r2, [r3]
    d76c:	2900      	cmp	r1, #0
    d76e:	d1f7      	bne.n	d760 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    d770:	f3bf 8f5b 	dmb	ish
}
    d774:	bc70      	pop	{r4, r5, r6}
    d776:	4770      	bx	lr
    d778:	43002400 	.word	0x43002400
    d77c:	41008000 	.word	0x41008000
    d780:	200019d0 	.word	0x200019d0

0000d784 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    d784:	7983      	ldrb	r3, [r0, #6]
    d786:	2b06      	cmp	r3, #6
    d788:	d805      	bhi.n	d796 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    d78a:	2201      	movs	r2, #1
    d78c:	fa02 f303 	lsl.w	r3, r2, r3
    d790:	f013 0f54 	tst.w	r3, #84	; 0x54
    d794:	d100      	bne.n	d798 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    d796:	4770      	bx	lr
            DigitalInOut::Refresh();
    d798:	f000 bc32 	b.w	e000 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000d79c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    d79e:	7983      	ldrb	r3, [r0, #6]
    d7a0:	428b      	cmp	r3, r1
    d7a2:	d06e      	beq.n	d882 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    d7a4:	1e8a      	subs	r2, r1, #2
    d7a6:	460c      	mov	r4, r1
    d7a8:	4605      	mov	r5, r0
    d7aa:	2a04      	cmp	r2, #4
    d7ac:	d80d      	bhi.n	d7ca <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    d7ae:	e8df f002 	tbb	[pc, r2]
    d7b2:	0311      	.short	0x0311
    d7b4:	0c11      	.short	0x0c11
    d7b6:	11          	.byte	0x11
    d7b7:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    d7b8:	2102      	movs	r1, #2
    d7ba:	f000 fad9 	bl	dd70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    d7be:	4628      	mov	r0, r5
    d7c0:	f7ff ff7c 	bl	d6bc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    d7c4:	2303      	movs	r3, #3
    d7c6:	71ab      	strb	r3, [r5, #6]
            break;
    d7c8:	4623      	mov	r3, r4
    return (m_mode == newMode);
    d7ca:	1ae0      	subs	r0, r4, r3
    d7cc:	fab0 f080 	clz	r0, r0
    d7d0:	0940      	lsrs	r0, r0, #5
    d7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d7d4:	4b2c      	ldr	r3, [pc, #176]	; (d888 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    d7d6:	f3bf 8f5b 	dmb	ish
    d7da:	e853 2f00 	ldrex	r2, [r3]
    d7de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    d7e2:	e843 2100 	strex	r1, r2, [r3]
    d7e6:	2900      	cmp	r1, #0
    d7e8:	d1f7      	bne.n	d7da <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    d7ea:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    d7ee:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d7f0:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d7f4:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d7f6:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d7f8:	4924      	ldr	r1, [pc, #144]	; (d88c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d7fa:	3bf4      	subs	r3, #244	; 0xf4
    d7fc:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d800:	f04f 0e01 	mov.w	lr, #1
    d804:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d808:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d80c:	ea27 070e 	bic.w	r7, r7, lr
    d810:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    d814:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d816:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d81a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    d81e:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    d822:	4438      	add	r0, r7
    d824:	ea22 0606 	bic.w	r6, r2, r6
    d828:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    d82c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d830:	4a17      	ldr	r2, [pc, #92]	; (d890 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d832:	f36f 0300 	bfc	r3, #0, #1
    d836:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d83a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    d83c:	6e68      	ldr	r0, [r5, #100]	; 0x64
    d83e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d842:	4403      	add	r3, r0
    d844:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d848:	f36f 0100 	bfc	r1, #0, #1
    d84c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d850:	6893      	ldr	r3, [r2, #8]
    d852:	f013 0302 	ands.w	r3, r3, #2
    d856:	d1fb      	bne.n	d850 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    d858:	7811      	ldrb	r1, [r2, #0]
    d85a:	0789      	lsls	r1, r1, #30
    d85c:	d507      	bpl.n	d86e <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    d85e:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d860:	490b      	ldr	r1, [pc, #44]	; (d890 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    d862:	f363 0041 	bfi	r0, r3, #1, #1
    d866:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d868:	688b      	ldr	r3, [r1, #8]
    d86a:	079b      	lsls	r3, r3, #30
    d86c:	d4fc      	bmi.n	d868 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    d86e:	4621      	mov	r1, r4
    d870:	4628      	mov	r0, r5
    d872:	f000 fa7d 	bl	dd70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    d876:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    d878:	1ae0      	subs	r0, r4, r3
    d87a:	fab0 f080 	clz	r0, r0
    d87e:	0940      	lsrs	r0, r0, #5
    d880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    d882:	2001      	movs	r0, #1
}
    d884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d886:	bf00      	nop
    d888:	20001ac4 	.word	0x20001ac4
    d88c:	41008000 	.word	0x41008000
    d890:	43002400 	.word	0x43002400

0000d894 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    d894:	7983      	ldrb	r3, [r0, #6]
    d896:	2b06      	cmp	r3, #6
    d898:	d805      	bhi.n	d8a6 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    d89a:	2201      	movs	r2, #1
    d89c:	fa02 f303 	lsl.w	r3, r2, r3
    d8a0:	f013 0f54 	tst.w	r3, #84	; 0x54
    d8a4:	d101      	bne.n	d8aa <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    d8a6:	2000      	movs	r0, #0
    d8a8:	4770      	bx	lr
            state = DigitalInOut::State();
    d8aa:	f000 bcaf 	b.w	e20c <_ZN9ClearCore12DigitalInOut5StateEv>
    d8ae:	bf00      	nop

0000d8b0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    d8b0:	7983      	ldrb	r3, [r0, #6]
    d8b2:	3b02      	subs	r3, #2
    d8b4:	2b04      	cmp	r3, #4
    d8b6:	d83c      	bhi.n	d932 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    d8b8:	e8df f003 	tbb	[pc, r3]
    d8bc:	3b390339 	.word	0x3b390339
    d8c0:	39          	.byte	0x39
    d8c1:	00          	.byte	0x00
            newState = max(newState, 0);
    d8c2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    d8c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    d8c8:	b289      	uxth	r1, r1
    d8ca:	f240 74ff 	movw	r4, #2047	; 0x7ff
    d8ce:	42a1      	cmp	r1, r4
    d8d0:	bf28      	it	cs
    d8d2:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    d8d4:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d8d6:	4d19      	ldr	r5, [pc, #100]	; (d93c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    d8d8:	4e19      	ldr	r6, [pc, #100]	; (d940 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    d8da:	4a1a      	ldr	r2, [pc, #104]	; (d944 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d8dc:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    d8e0:	fb85 e503 	smull	lr, r5, r5, r3
    d8e4:	f007 070f 	and.w	r7, r7, #15
    d8e8:	441d      	add	r5, r3
    d8ea:	443e      	add	r6, r7
    d8ec:	17db      	asrs	r3, r3, #31
    d8ee:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    d8f2:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d8f6:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    d8fa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d8fe:	4812      	ldr	r0, [pc, #72]	; (d948 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d900:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    d904:	fba2 5201 	umull	r5, r2, r2, r1
    d908:	1a89      	subs	r1, r1, r2
    d90a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    d90e:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    d912:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    d914:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    d916:	42a1      	cmp	r1, r4
    d918:	bf28      	it	cs
    d91a:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    d91c:	b29b      	uxth	r3, r3
    d91e:	4299      	cmp	r1, r3
    d920:	d009      	beq.n	d936 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d922:	6883      	ldr	r3, [r0, #8]
    d924:	075b      	lsls	r3, r3, #29
    d926:	d4fc      	bmi.n	d922 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    d928:	8201      	strh	r1, [r0, #16]
            success = true;
    d92a:	2001      	movs	r0, #1
    d92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    d92e:	f000 b9c3 	b.w	dcb8 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    d932:	2000      	movs	r0, #0
    d934:	4770      	bx	lr
            success = true;
    d936:	2001      	movs	r0, #1
}
    d938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d93a:	bf00      	nop
    d93c:	80100201 	.word	0x80100201
    d940:	200019d0 	.word	0x200019d0
    d944:	00200401 	.word	0x00200401
    d948:	43002400 	.word	0x43002400

0000d94c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    d94c:	b538      	push	{r3, r4, r5, lr}
    d94e:	4604      	mov	r4, r0
    d950:	460d      	mov	r5, r1
    DacInitialize();
    d952:	f7ff fe33 	bl	d5bc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    d956:	4620      	mov	r0, r4
    d958:	4629      	mov	r1, r5
    d95a:	f000 fc77 	bl	e24c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    d95e:	6920      	ldr	r0, [r4, #16]
    d960:	07c2      	lsls	r2, r0, #31
    d962:	d521      	bpl.n	d9a8 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    d964:	68e1      	ldr	r1, [r4, #12]
    d966:	01c9      	lsls	r1, r1, #7
    d968:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    d96c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d970:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    d974:	2101      	movs	r1, #1
    d976:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d97a:	f361 1307 	bfi	r3, r1, #4, #4
    d97e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    d982:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d984:	07cb      	lsls	r3, r1, #31
    d986:	d421      	bmi.n	d9cc <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    d988:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d98a:	01db      	lsls	r3, r3, #7
    d98c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d990:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d994:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    d998:	2101      	movs	r1, #1
    d99a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d99e:	f361 0203 	bfi	r2, r1, #0, #4
    d9a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    d9a6:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    d9a8:	68e2      	ldr	r2, [r4, #12]
    d9aa:	01d2      	lsls	r2, r2, #7
    d9ac:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    d9b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d9b4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    d9b8:	2101      	movs	r1, #1
    d9ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d9be:	f361 0203 	bfi	r2, r1, #0, #4
    d9c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    d9c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    d9c8:	07cb      	lsls	r3, r1, #31
    d9ca:	d5dd      	bpl.n	d988 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    d9cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    d9ce:	01d2      	lsls	r2, r2, #7
    d9d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    d9d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d9d8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d9dc:	2101      	movs	r1, #1
    d9de:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d9e2:	f361 1307 	bfi	r3, r1, #4, #4
    d9e6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    d9ea:	bd38      	pop	{r3, r4, r5, pc}

0000d9ec <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    d9ec:	2000      	movs	r0, #0
    d9ee:	4770      	bx	lr

0000d9f0 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d9f0:	7980      	ldrb	r0, [r0, #6]
    d9f2:	4770      	bx	lr

0000d9f4 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    d9f4:	2003      	movs	r0, #3
    d9f6:	4770      	bx	lr

0000d9f8 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    d9f8:	2000      	movs	r0, #0
    d9fa:	4770      	bx	lr

0000d9fc <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    d9fc:	2000      	movs	r0, #0
    d9fe:	4770      	bx	lr

0000da00 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    da02:	7983      	ldrb	r3, [r0, #6]
    da04:	428b      	cmp	r3, r1
    da06:	d072      	beq.n	daee <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    da08:	2901      	cmp	r1, #1
    da0a:	460c      	mov	r4, r1
    da0c:	4605      	mov	r5, r0
    da0e:	d03c      	beq.n	da8a <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    da10:	2902      	cmp	r1, #2
    da12:	d135      	bne.n	da80 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    da14:	4e37      	ldr	r6, [pc, #220]	; (daf4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    da16:	6b03      	ldr	r3, [r0, #48]	; 0x30
    da18:	f3bf 8f5b 	dmb	ish
    da1c:	e856 2f00 	ldrex	r2, [r6]
    da20:	431a      	orrs	r2, r3
    da22:	e846 2100 	strex	r1, r2, [r6]
    da26:	2900      	cmp	r1, #0
    da28:	d1f8      	bne.n	da1c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    da2a:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    da2e:	3ef4      	subs	r6, #244	; 0xf4
    da30:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    da34:	b143      	cbz	r3, da48 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    da36:	4b30      	ldr	r3, [pc, #192]	; (daf8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    da38:	6b29      	ldr	r1, [r5, #48]	; 0x30
    da3a:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    da3c:	6e53      	ldr	r3, [r2, #100]	; 0x64
    da3e:	420b      	tst	r3, r1
    da40:	d0fc      	beq.n	da3c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    da42:	4628      	mov	r0, r5
    da44:	f000 fda6 	bl	e594 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    da48:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    da4a:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    da4e:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    da50:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da54:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    da58:	2001      	movs	r0, #1
    da5a:	4098      	lsls	r0, r3
    da5c:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    da64:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    da68:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    da6a:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    da6e:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da70:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    da74:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    da78:	4603      	mov	r3, r0
            m_mode = newMode;
    da7a:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    da7c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    da80:	1ae0      	subs	r0, r4, r3
    da82:	fab0 f080 	clz	r0, r0
    da86:	0940      	lsrs	r0, r0, #5
    da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    da8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    da8c:	4e19      	ldr	r6, [pc, #100]	; (daf4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    da8e:	f3bf 8f5b 	dmb	ish
    da92:	43db      	mvns	r3, r3
    da94:	e856 2f00 	ldrex	r2, [r6]
    da98:	401a      	ands	r2, r3
    da9a:	e846 2100 	strex	r1, r2, [r6]
    da9e:	2900      	cmp	r1, #0
    daa0:	d1f8      	bne.n	da94 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    daa2:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    daa6:	3ef4      	subs	r6, #244	; 0xf4
    daa8:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    daac:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    daae:	b11b      	cbz	r3, dab8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    dab0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    dab4:	2b00      	cmp	r3, #0
    dab6:	d0fb      	beq.n	dab0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    dab8:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    daba:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dabe:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    dac0:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dac4:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dac6:	f003 030f 	and.w	r3, r3, #15
    daca:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dace:	fa00 f303 	lsl.w	r3, r0, r3
    dad2:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    dad4:	4603      	mov	r3, r0
    return (m_mode == newMode);
    dad6:	1ae0      	subs	r0, r4, r3
    dad8:	4329      	orrs	r1, r5
    dada:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dade:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    dae2:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dae6:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    daea:	0940      	lsrs	r0, r0, #5
    daec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    daee:	2001      	movs	r0, #1
}
    daf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    daf2:	bf00      	nop
    daf4:	20001ac4 	.word	0x20001ac4
    daf8:	20001dfc 	.word	0x20001dfc

0000dafc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    dafc:	b570      	push	{r4, r5, r6, lr}
    dafe:	4604      	mov	r4, r0
    db00:	4616      	mov	r6, r2
      m_analogValid(false) {}
    db02:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    db04:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    db08:	f000 fd12 	bl	e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    db0c:	2300      	movs	r3, #0
    db0e:	4a05      	ldr	r2, [pc, #20]	; (db24 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    db10:	6326      	str	r6, [r4, #48]	; 0x30
    db12:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    db16:	6022      	str	r2, [r4, #0]
    db18:	63a3      	str	r3, [r4, #56]	; 0x38
    db1a:	63e3      	str	r3, [r4, #60]	; 0x3c
    db1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    db20:	4620      	mov	r0, r4
    db22:	bd70      	pop	{r4, r5, r6, pc}
    db24:	00023358 	.word	0x00023358

0000db28 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    db28:	7982      	ldrb	r2, [r0, #6]
    db2a:	2a01      	cmp	r2, #1
    db2c:	d004      	beq.n	db38 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    db2e:	2a02      	cmp	r2, #2
    db30:	d101      	bne.n	db36 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    db32:	f000 bc4d 	b.w	e3d0 <_ZN9ClearCore9DigitalIn7RefreshEv>
    db36:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    db38:	4a17      	ldr	r2, [pc, #92]	; (db98 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    db3a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    db3c:	6812      	ldr	r2, [r2, #0]
    db3e:	4603      	mov	r3, r0
    db40:	6e50      	ldr	r0, [r2, #100]	; 0x64
    db42:	4208      	tst	r0, r1
    db44:	d126      	bne.n	db94 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    db46:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    db4a:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    db4c:	b991      	cbnz	r1, db74 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    db4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    db50:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    db54:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    db56:	2c07      	cmp	r4, #7
    db58:	b280      	uxth	r0, r0
    db5a:	dc07      	bgt.n	db6c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    db5c:	0400      	lsls	r0, r0, #16
    db5e:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    db62:	3408      	adds	r4, #8
        return (m_z >> 16);
    db64:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    db66:	6270      	str	r0, [r6, #36]	; 0x24
    db68:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    db6c:	2201      	movs	r2, #1
    db6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    db72:	e000      	b.n	db76 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    db74:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    db76:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    db78:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    db7a:	4908      	ldr	r1, [pc, #32]	; (db9c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    db7c:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    db80:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    db84:	b2d8      	uxtb	r0, r3
    db86:	440a      	add	r2, r1
    db88:	2802      	cmp	r0, #2
    db8a:	bfd8      	it	le
    db8c:	2300      	movle	r3, #0
    db8e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    db92:	bc70      	pop	{r4, r5, r6}
    db94:	4770      	bx	lr
    db96:	bf00      	nop
    db98:	20001dfc 	.word	0x20001dfc
    db9c:	200019d0 	.word	0x200019d0

0000dba0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    dba0:	4b29      	ldr	r3, [pc, #164]	; (dc48 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    dba2:	b570      	push	{r4, r5, r6, lr}
    dba4:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    dba6:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    dba8:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    dbaa:	4628      	mov	r0, r5
    dbac:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    dbb0:	2301      	movs	r3, #1
    dbb2:	2202      	movs	r2, #2
    dbb4:	f7ff fc62 	bl	d47c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    dbb8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    dbbc:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    dbbe:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    dbc2:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    dbc4:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    dbc6:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    dbc8:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    dbca:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    dbcc:	4620      	mov	r0, r4
    dbce:	f000 fb99 	bl	e304 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    dbd2:	6823      	ldr	r3, [r4, #0]
    dbd4:	4a1d      	ldr	r2, [pc, #116]	; (dc4c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    dbd6:	685b      	ldr	r3, [r3, #4]
    dbd8:	4293      	cmp	r3, r2
    dbda:	d130      	bne.n	dc3e <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    dbdc:	79a3      	ldrb	r3, [r4, #6]
    dbde:	2b01      	cmp	r3, #1
    dbe0:	d02c      	beq.n	dc3c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    dbe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dbe4:	4a1a      	ldr	r2, [pc, #104]	; (dc50 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    dbe6:	f3bf 8f5b 	dmb	ish
    dbea:	43db      	mvns	r3, r3
    dbec:	e852 1f00 	ldrex	r1, [r2]
    dbf0:	4019      	ands	r1, r3
    dbf2:	e842 1000 	strex	r0, r1, [r2]
    dbf6:	2800      	cmp	r0, #0
    dbf8:	d1f8      	bne.n	dbec <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    dbfa:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    dbfe:	3af4      	subs	r2, #244	; 0xf4
    dc00:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    dc04:	2101      	movs	r1, #1
    dc06:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    dc08:	b11b      	cbz	r3, dc12 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    dc0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d0fb      	beq.n	dc0a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    dc12:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dc14:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dc18:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    dc1a:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc1e:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dc22:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc24:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dc28:	408b      	lsls	r3, r1
    dc2a:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    dc2c:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc2e:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dc32:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    dc36:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    dc3a:	bd70      	pop	{r4, r5, r6, pc}
    dc3c:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    dc3e:	4620      	mov	r0, r4
    dc40:	2101      	movs	r1, #1
}
    dc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    dc46:	4718      	bx	r3
    dc48:	20001dfc 	.word	0x20001dfc
    dc4c:	0000da01 	.word	0x0000da01
    dc50:	20001ac4 	.word	0x20001ac4

0000dc54 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    dc54:	7982      	ldrb	r2, [r0, #6]
    dc56:	2a01      	cmp	r2, #1
    dc58:	d005      	beq.n	dc66 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    dc5a:	2a02      	cmp	r2, #2
    dc5c:	d101      	bne.n	dc62 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    dc5e:	f000 bb3d 	b.w	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    dc62:	2000      	movs	r0, #0
    dc64:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    dc66:	4b0b      	ldr	r3, [pc, #44]	; (dc94 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    dc68:	b510      	push	{r4, lr}
    dc6a:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    dc6c:	6818      	ldr	r0, [r3, #0]
    dc6e:	f003 fd8d 	bl	1178c <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    dc72:	b958      	cbnz	r0, dc8c <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    dc74:	4b08      	ldr	r3, [pc, #32]	; (dc98 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    dc76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    dc78:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    dc7a:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    dc7c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    dc80:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    dc82:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    dc86:	4118      	asrs	r0, r3
    dc88:	b200      	sxth	r0, r0
    dc8a:	bd10      	pop	{r4, pc}
                state = -1;
    dc8c:	f04f 30ff 	mov.w	r0, #4294967295
}
    dc90:	bd10      	pop	{r4, pc}
    dc92:	bf00      	nop
    dc94:	20001f18 	.word	0x20001f18
    dc98:	20001dfc 	.word	0x20001dfc

0000dc9c <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    dc9c:	7980      	ldrb	r0, [r0, #6]
    dc9e:	4770      	bx	lr

0000dca0 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    dca0:	2001      	movs	r0, #1
    dca2:	4770      	bx	lr

0000dca4 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    dca4:	7980      	ldrb	r0, [r0, #6]
    dca6:	2804      	cmp	r0, #4
    dca8:	bf1d      	ittte	ne
    dcaa:	3806      	subne	r0, #6
    dcac:	fab0 f080 	clzne	r0, r0
    dcb0:	0940      	lsrne	r0, r0, #5
    dcb2:	2001      	moveq	r0, #1
    }
    dcb4:	4770      	bx	lr
    dcb6:	bf00      	nop

0000dcb8 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    dcb8:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    dcba:	2300      	movs	r3, #0
    switch (m_mode) {
    dcbc:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    dcbe:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    dcc2:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    dcc6:	d02a      	beq.n	dd1e <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    dcc8:	2a06      	cmp	r2, #6
    dcca:	d126      	bne.n	dd1a <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    dccc:	b28b      	uxth	r3, r1
    dcce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dcd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    dcd6:	bf28      	it	cs
    dcd8:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    dcda:	b470      	push	{r4, r5, r6}
    dcdc:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dcde:	2b00      	cmp	r3, #0
    dce0:	d040      	beq.n	dd64 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    dce2:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dce4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    dce6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    dcea:	18d6      	adds	r6, r2, r3
    dcec:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    dcf0:	42ac      	cmp	r4, r5
    dcf2:	d008      	beq.n	dd06 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	bf0c      	ite	eq
    dcf8:	2440      	moveq	r4, #64	; 0x40
    dcfa:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    dcfc:	6913      	ldr	r3, [r2, #16]
    dcfe:	4223      	tst	r3, r4
    dd00:	d1fc      	bne.n	dcfc <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    dd02:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    dd06:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dd08:	4b18      	ldr	r3, [pc, #96]	; (dd6c <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    dd0a:	f002 020f 	and.w	r2, r2, #15
    dd0e:	4413      	add	r3, r2
    dd10:	2001      	movs	r0, #1
    dd12:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    dd16:	bc70      	pop	{r4, r5, r6}
    dd18:	4770      	bx	lr
    bool success = false;
    dd1a:	4618      	mov	r0, r3
    dd1c:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    dd1e:	1c0b      	adds	r3, r1, #0
    dd20:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    dd24:	bf18      	it	ne
    dd26:	2301      	movne	r3, #1
    dd28:	429a      	cmp	r2, r3
    dd2a:	d004      	beq.n	dd36 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dd2c:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    dd2e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dd32:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    dd36:	b121      	cbz	r1, dd42 <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    dd38:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    dd3c:	fab1 f181 	clz	r1, r1
    dd40:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    dd42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    dd46:	6b82      	ldr	r2, [r0, #56]	; 0x38
    dd48:	428b      	cmp	r3, r1
    dd4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dd4c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    dd50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dd54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dd58:	f04f 0001 	mov.w	r0, #1
    dd5c:	bf14      	ite	ne
    dd5e:	619a      	strne	r2, [r3, #24]
    dd60:	615a      	streq	r2, [r3, #20]
    dd62:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dd64:	43cd      	mvns	r5, r1
    dd66:	b2ed      	uxtb	r5, r5
    dd68:	e7bc      	b.n	dce4 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    dd6a:	bf00      	nop
    dd6c:	200019d0 	.word	0x200019d0

0000dd70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    dd70:	7983      	ldrb	r3, [r0, #6]
    dd72:	428b      	cmp	r3, r1
    dd74:	f000 80cb 	beq.w	df0e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    dd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    dd7c:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    dd7e:	b082      	sub	sp, #8
    dd80:	4604      	mov	r4, r0
    dd82:	460d      	mov	r5, r1
    switch (newMode) {
    dd84:	f000 8087 	beq.w	de96 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    dd88:	2906      	cmp	r1, #6
    dd8a:	d008      	beq.n	dd9e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    dd8c:	2902      	cmp	r1, #2
    dd8e:	d033      	beq.n	ddf8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    dd90:	1ae8      	subs	r0, r5, r3
    dd92:	fab0 f080 	clz	r0, r0
    dd96:	0940      	lsrs	r0, r0, #5
}
    dd98:	b002      	add	sp, #8
    dd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    dd9e:	6803      	ldr	r3, [r0, #0]
    dda0:	4a79      	ldr	r2, [pc, #484]	; (df88 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    dda2:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    dda4:	71a1      	strb	r1, [r4, #6]
    dda6:	4293      	cmp	r3, r2
    dda8:	f040 80b3 	bne.w	df12 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ddac:	6c01      	ldr	r1, [r0, #64]	; 0x40
    ddae:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ddb2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    ddb6:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ddb8:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ddba:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    ddbe:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    ddc2:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ddc6:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ddc8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ddcc:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ddce:	429a      	cmp	r2, r3
    ddd0:	d008      	beq.n	dde4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    ddd2:	2e00      	cmp	r6, #0
    ddd4:	bf0c      	ite	eq
    ddd6:	2640      	moveq	r6, #64	; 0x40
    ddd8:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    ddda:	690a      	ldr	r2, [r1, #16]
    dddc:	4232      	tst	r2, r6
    ddde:	d1fc      	bne.n	ddda <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    dde0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    dde4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    dde8:	4e68      	ldr	r6, [pc, #416]	; (df8c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    ddea:	f001 020f 	and.w	r2, r1, #15
    ddee:	18b3      	adds	r3, r6, r2
    ddf0:	2000      	movs	r0, #0
    ddf2:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    ddf6:	e093      	b.n	df20 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    ddf8:	2300      	movs	r3, #0
    ddfa:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    ddfe:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    de00:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    de04:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    de08:	6b03      	ldr	r3, [r0, #48]	; 0x30
    de0a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    de0c:	01db      	lsls	r3, r3, #7
    de0e:	2a00      	cmp	r2, #0
    de10:	d177      	bne.n	df02 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    de12:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    de16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    de1a:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    de1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de20:	4e5a      	ldr	r6, [pc, #360]	; (df8c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    de22:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    de24:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    de28:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    de2c:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    de30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de34:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    de38:	f04f 0e01 	mov.w	lr, #1
    de3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    de40:	443b      	add	r3, r7
    de42:	fa0e f702 	lsl.w	r7, lr, r2
    de46:	ea28 0707 	bic.w	r7, r8, r7
    de4a:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de4e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    de52:	ea6f 070c 	mvn.w	r7, ip
    de56:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    de58:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    de5c:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    de60:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    de64:	f36f 0200 	bfc	r2, #0, #1
    de68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    de6c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    de70:	2b00      	cmp	r3, #0
    de72:	f000 8086 	beq.w	df82 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    de76:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    de7a:	4845      	ldr	r0, [pc, #276]	; (df90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    de7c:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    de80:	2200      	movs	r2, #0
    de82:	401f      	ands	r7, r3
    de84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    de88:	6800      	ldr	r0, [r0, #0]
    de8a:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    de8e:	f003 fe71 	bl	11b74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    de92:	79a3      	ldrb	r3, [r4, #6]
    de94:	e77c      	b.n	dd90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de96:	220c      	movs	r2, #12
            State(m_outState);
    de98:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de9a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    de9e:	2600      	movs	r6, #0
            m_mode = newMode;
    dea0:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    dea2:	695b      	ldr	r3, [r3, #20]
    dea4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    dea8:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    deac:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    deae:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    deb0:	4936      	ldr	r1, [pc, #216]	; (df8c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    deb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    deb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    deb6:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    deba:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    debe:	f04f 0e01 	mov.w	lr, #1
    dec2:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    dec6:	fa0e f002 	lsl.w	r0, lr, r2
    deca:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dece:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    ded2:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ded6:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    deda:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dede:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dee2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    dee6:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    deea:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    deee:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    def2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    def6:	f366 0200 	bfi	r2, r6, #0, #1
    defa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    defe:	79a3      	ldrb	r3, [r4, #6]
            break;
    df00:	e746      	b.n	dd90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    df02:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    df06:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    df0a:	6191      	str	r1, [r2, #24]
    df0c:	e786      	b.n	de1c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    df0e:	2001      	movs	r0, #1
    df10:	4770      	bx	lr
            State(0);
    df12:	2100      	movs	r1, #0
    df14:	4798      	blx	r3
    df16:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    df1a:	4e1c      	ldr	r6, [pc, #112]	; (df8c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    df1c:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    df20:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    df24:	6b60      	ldr	r0, [r4, #52]	; 0x34
    df26:	9301      	str	r3, [sp, #4]
    df28:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    df2a:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df2c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    df30:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    df34:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    df38:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df3a:	fa0c fe02 	lsl.w	lr, ip, r2
    df3e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df42:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    df46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df4a:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    df4e:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df50:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df54:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    df58:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    df5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    df60:	ea42 020c 	orr.w	r2, r2, ip
    df64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    df68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    df6c:	2b00      	cmp	r3, #0
    df6e:	d090      	beq.n	de92 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    df70:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    df74:	4806      	ldr	r0, [pc, #24]	; (df90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    df76:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    df7a:	2200      	movs	r2, #0
    df7c:	ea23 0707 	bic.w	r7, r3, r7
    df80:	e780      	b.n	de84 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    df82:	2302      	movs	r3, #2
    df84:	e704      	b.n	dd90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    df86:	bf00      	nop
    df88:	0000dcb9 	.word	0x0000dcb9
    df8c:	200019d0 	.word	0x200019d0
    df90:	20001f18 	.word	0x20001f18

0000df94 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    df94:	b570      	push	{r4, r5, r6, lr}
    df96:	461d      	mov	r5, r3
    df98:	4604      	mov	r4, r0
    df9a:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    df9e:	f000 fac7 	bl	e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    dfa2:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    dfa6:	4a14      	ldr	r2, [pc, #80]	; (dff8 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    dfa8:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    dfaa:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    dfac:	78aa      	ldrb	r2, [r5, #2]
    dfae:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    dfb0:	2301      	movs	r3, #1
    dfb2:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    dfb4:	2200      	movs	r2, #0
    dfb6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    dfba:	63a3      	str	r3, [r4, #56]	; 0x38
    dfbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    dfc0:	7aeb      	ldrb	r3, [r5, #11]
    dfc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dfc6:	230c      	movs	r3, #12
    dfc8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    dfcc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    dfd0:	64a2      	str	r2, [r4, #72]	; 0x48
    dfd2:	64e2      	str	r2, [r4, #76]	; 0x4c
    dfd4:	6522      	str	r2, [r4, #80]	; 0x50
    dfd6:	6562      	str	r2, [r4, #84]	; 0x54
    dfd8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    dfdc:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    dfe0:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    dfe4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    dfe8:	7aaa      	ldrb	r2, [r5, #10]
    dfea:	4b04      	ldr	r3, [pc, #16]	; (dffc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    dfec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    dff0:	6423      	str	r3, [r4, #64]	; 0x40
}
    dff2:	4620      	mov	r0, r4
    dff4:	bd70      	pop	{r4, r5, r6, pc}
    dff6:	bf00      	nop
    dff8:	00023388 	.word	0x00023388
    dffc:	000233b0 	.word	0x000233b0

0000e000 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e002:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e004:	f000 f9e4 	bl	e3d0 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e008:	79a3      	ldrb	r3, [r4, #6]
    e00a:	2b04      	cmp	r3, #4
    e00c:	d12d      	bne.n	e06a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e00e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e012:	bb5b      	cbnz	r3, e06c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    e014:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e018:	2b00      	cmp	r3, #0
    e01a:	f040 809d 	bne.w	e158 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    e01e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e022:	220c      	movs	r2, #12
    e024:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    e028:	b19b      	cbz	r3, e052 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e02a:	4d75      	ldr	r5, [pc, #468]	; (e200 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    e02c:	68a7      	ldr	r7, [r4, #8]
    e02e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e032:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e036:	4873      	ldr	r0, [pc, #460]	; (e204 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    e038:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e03a:	2601      	movs	r6, #1
    e03c:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    e040:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e044:	fa06 f101 	lsl.w	r1, r6, r1
    e048:	6800      	ldr	r0, [r0, #0]
    e04a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    e04e:	f003 fd91 	bl	11b74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    e052:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    e056:	b143      	cbz	r3, e06a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    e058:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    e05c:	b303      	cbz	r3, e0a0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    e05e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    e062:	429a      	cmp	r2, r3
    e064:	db1c      	blt.n	e0a0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    e066:	4293      	cmp	r3, r2
    e068:	d070      	beq.n	e14c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    e06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    e06c:	3b01      	subs	r3, #1
    e06e:	b29b      	uxth	r3, r3
    e070:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e074:	2b00      	cmp	r3, #0
    e076:	d1ec      	bne.n	e052 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e078:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    e07c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e080:	429a      	cmp	r2, r3
    e082:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e084:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e086:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e08a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e08e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e092:	bf14      	ite	ne
    e094:	619a      	strne	r2, [r3, #24]
    e096:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e098:	230c      	movs	r3, #12
    e09a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e09e:	e7d8      	b.n	e052 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e0a0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e0a4:	bb5b      	cbnz	r3, e0fe <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e0a6:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e0aa:	2b00      	cmp	r3, #0
    e0ac:	d14e      	bne.n	e14c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e0ae:	4a56      	ldr	r2, [pc, #344]	; (e208 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e0b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e0b2:	6813      	ldr	r3, [r2, #0]
    e0b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e0b6:	1a1b      	subs	r3, r3, r0
    e0b8:	428b      	cmp	r3, r1
    e0ba:	d3d6      	bcc.n	e06a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e0bc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e0c0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e0c4:	6812      	ldr	r2, [r2, #0]
    e0c6:	6522      	str	r2, [r4, #80]	; 0x50
    e0c8:	fab3 f383 	clz	r3, r3
    e0cc:	095b      	lsrs	r3, r3, #5
    e0ce:	428b      	cmp	r3, r1
    e0d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e0d2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e0d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e0da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e0de:	f04f 020c 	mov.w	r2, #12
    e0e2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e0e6:	f04f 0001 	mov.w	r0, #1
    e0ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e0ec:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e0f0:	bf14      	ite	ne
    e0f2:	619a      	strne	r2, [r3, #24]
    e0f4:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e0f6:	2301      	movs	r3, #1
    e0f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e0fe:	4a42      	ldr	r2, [pc, #264]	; (e208 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e100:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e102:	6813      	ldr	r3, [r2, #0]
    e104:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e106:	1a1b      	subs	r3, r3, r0
    e108:	428b      	cmp	r3, r1
    e10a:	d3ae      	bcc.n	e06a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e10c:	6812      	ldr	r2, [r2, #0]
    e10e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e112:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e114:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e116:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e118:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e11c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e120:	2b00      	cmp	r3, #0
    e122:	d15b      	bne.n	e1dc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e124:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e126:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e128:	01db      	lsls	r3, r3, #7
    e12a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e12e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e132:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e134:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e138:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e13c:	3301      	adds	r3, #1
                        m_outState = false;
    e13e:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e140:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e144:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e148:	2a00      	cmp	r2, #0
    e14a:	d08e      	beq.n	e06a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e14c:	2300      	movs	r3, #0
    e14e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e152:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e158:	4620      	mov	r0, r4
    e15a:	f000 fa0d 	bl	e578 <_ZN9ClearCore9DigitalIn7StateRTEv>
    e15e:	2800      	cmp	r0, #0
    e160:	f47f af5d 	bne.w	e01e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e164:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e168:	2b00      	cmp	r3, #0
    e16a:	f43f af72 	beq.w	e052 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e16e:	3b01      	subs	r3, #1
    e170:	b2db      	uxtb	r3, r3
    e172:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e176:	2b00      	cmp	r3, #0
    e178:	f47f af6b 	bne.w	e052 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e17c:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e180:	b9e6      	cbnz	r6, e1bc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e182:	4a1f      	ldr	r2, [pc, #124]	; (e200 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e184:	491f      	ldr	r1, [pc, #124]	; (e204 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e186:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e18a:	68a3      	ldr	r3, [r4, #8]
    e18c:	680f      	ldr	r7, [r1, #0]
    e18e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e192:	2501      	movs	r5, #1
    e194:	4303      	orrs	r3, r0
    e196:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e19a:	fa05 f101 	lsl.w	r1, r5, r1
    e19e:	4638      	mov	r0, r7
    e1a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e1a4:	462a      	mov	r2, r5
    e1a6:	f003 fce5 	bl	11b74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e1aa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e1ae:	fa05 f202 	lsl.w	r2, r5, r2
    e1b2:	4638      	mov	r0, r7
    e1b4:	4631      	mov	r1, r6
    e1b6:	b2d2      	uxtb	r2, r2
    e1b8:	f003 fb30 	bl	1181c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e1bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e1c0:	b9ab      	cbnz	r3, e1ee <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e1c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e1c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e1c6:	01db      	lsls	r3, r3, #7
    e1c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e1cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e1d0:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e1d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e1d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e1da:	e73a      	b.n	e052 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e1dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e1de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e1e0:	01db      	lsls	r3, r3, #7
    e1e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e1e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e1ea:	619a      	str	r2, [r3, #24]
    e1ec:	e7a2      	b.n	e134 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e1ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e1f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e1f2:	01db      	lsls	r3, r3, #7
    e1f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e1f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e1fc:	619a      	str	r2, [r3, #24]
    e1fe:	e7e8      	b.n	e1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e200:	200019d0 	.word	0x200019d0
    e204:	20001f18 	.word	0x20001f18
    e208:	20001be0 	.word	0x20001be0

0000e20c <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e20c:	7983      	ldrb	r3, [r0, #6]
    e20e:	2b04      	cmp	r3, #4
    e210:	d014      	beq.n	e23c <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e212:	2b06      	cmp	r3, #6
    e214:	d005      	beq.n	e222 <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e216:	2b02      	cmp	r3, #2
    e218:	d001      	beq.n	e21e <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e21a:	2000      	movs	r0, #0
    e21c:	4770      	bx	lr
            state = DigitalIn::State();
    e21e:	f000 b85d 	b.w	e2dc <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e222:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e224:	b173      	cbz	r3, e244 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e226:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e22a:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e22e:	4413      	add	r3, r2
    e230:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e234:	b929      	cbnz	r1, e242 <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e236:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e23a:	4770      	bx	lr
            state = m_outState;
    e23c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e240:	4770      	bx	lr
    e242:	4770      	bx	lr
    int16_t state = -1;
    e244:	f04f 30ff 	mov.w	r0, #4294967295
}
    e248:	4770      	bx	lr
    e24a:	bf00      	nop

0000e24c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e24c:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e24e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e250:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e252:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e254:	4604      	mov	r4, r0
    m_outState = false;
    e256:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e25a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e25e:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e262:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e266:	d41a      	bmi.n	e29e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e268:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e26a:	01d2      	lsls	r2, r2, #7
    e26c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e270:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e274:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e278:	2004      	movs	r0, #4
    e27a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e27e:	f360 0203 	bfi	r2, r0, #0, #4
    e282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e286:	4620      	mov	r0, r4
    e288:	f000 f83c 	bl	e304 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e28c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e28e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e290:	01db      	lsls	r3, r3, #7
    e292:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e296:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e29a:	609a      	str	r2, [r3, #8]
    e29c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e29e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e2a0:	01c0      	lsls	r0, r0, #7
    e2a2:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e2a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e2aa:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e2ae:	2004      	movs	r0, #4
    e2b0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e2b4:	f360 1307 	bfi	r3, r0, #4, #4
    e2b8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e2bc:	e7e3      	b.n	e286 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e2be:	bf00      	nop

0000e2c0 <_ZN9ClearCore9Connector4ModeEv>:
    }
    e2c0:	7980      	ldrb	r0, [r0, #6]
    e2c2:	4770      	bx	lr

0000e2c4 <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    e2c4:	7980      	ldrb	r0, [r0, #6]
    e2c6:	4770      	bx	lr

0000e2c8 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    e2c8:	2902      	cmp	r1, #2
            m_mode = newMode;
    e2ca:	bf06      	itte	eq
    e2cc:	7181      	strbeq	r1, [r0, #6]
            return true;
    e2ce:	2001      	moveq	r0, #1
            return false;
    e2d0:	2000      	movne	r0, #0
    }
    e2d2:	4770      	bx	lr

0000e2d4 <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    e2d4:	2000      	movs	r0, #0
    e2d6:	4770      	bx	lr

0000e2d8 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    e2d8:	2000      	movs	r0, #0
    e2da:	4770      	bx	lr

0000e2dc <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    e2dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e2de:	b113      	cbz	r3, e2e6 <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    e2e0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    e2e4:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e2e6:	4b06      	ldr	r3, [pc, #24]	; (e300 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    e2e8:	68c1      	ldr	r1, [r0, #12]
    e2ea:	681a      	ldr	r2, [r3, #0]
    e2ec:	6943      	ldr	r3, [r0, #20]
    e2ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e2f2:	6812      	ldr	r2, [r2, #0]
    e2f4:	421a      	tst	r2, r3
    e2f6:	bf0c      	ite	eq
    e2f8:	2001      	moveq	r0, #1
    e2fa:	2000      	movne	r0, #0
    e2fc:	4770      	bx	lr
    e2fe:	bf00      	nop
    e300:	20001f08 	.word	0x20001f08

0000e304 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    e304:	4b2e      	ldr	r3, [pc, #184]	; (e3c0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    e306:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    e308:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e30c:	68c3      	ldr	r3, [r0, #12]
    e30e:	6904      	ldr	r4, [r0, #16]
    e310:	01da      	lsls	r2, r3, #7
    e312:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    e316:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e318:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    e31c:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    e320:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    e322:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e326:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    e32a:	d034      	beq.n	e396 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    e32c:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    e330:	f366 1707 	bfi	r7, r6, #4, #4
    e334:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e338:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e33c:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e33e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e342:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e344:	2d00      	cmp	r5, #0
    e346:	d134      	bne.n	e3b2 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    e348:	2402      	movs	r4, #2
    e34a:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e34e:	4a1d      	ldr	r2, [pc, #116]	; (e3c4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e350:	6884      	ldr	r4, [r0, #8]
    e352:	6812      	ldr	r2, [r2, #0]
    e354:	4e1c      	ldr	r6, [pc, #112]	; (e3c8 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    e356:	3306      	adds	r3, #6
    e358:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e35a:	f1a3 050c 	sub.w	r5, r3, #12
    e35e:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e360:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e362:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e364:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e366:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e368:	6242      	str	r2, [r0, #36]	; 0x24
    e36a:	43e4      	mvns	r4, r4
    e36c:	f3bf 8f5b 	dmb	ish
    e370:	e856 3f00 	ldrex	r3, [r6]
    e374:	4023      	ands	r3, r4
    e376:	e846 3200 	strex	r2, r3, [r6]
    e37a:	2a00      	cmp	r2, #0
    e37c:	d1f8      	bne.n	e370 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    e37e:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    e382:	6803      	ldr	r3, [r0, #0]
    e384:	4a11      	ldr	r2, [pc, #68]	; (e3cc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    e386:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    e388:	8081      	strh	r1, [r0, #4]
    e38a:	4293      	cmp	r3, r2
    e38c:	d115      	bne.n	e3ba <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    e38e:	2302      	movs	r3, #2
    e390:	7183      	strb	r3, [r0, #6]
}
    e392:	bcf0      	pop	{r4, r5, r6, r7}
    e394:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e396:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    e39a:	f367 0603 	bfi	r6, r7, #0, #4
    e39e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e3a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e3a6:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e3a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e3ac:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e3ae:	2d00      	cmp	r5, #0
    e3b0:	d0ca      	beq.n	e348 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e3b2:	2403      	movs	r4, #3
    e3b4:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    e3b8:	e7c9      	b.n	e34e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    e3ba:	2102      	movs	r1, #2
}
    e3bc:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    e3be:	4718      	bx	r3
    e3c0:	00010003 	.word	0x00010003
    e3c4:	20001f08 	.word	0x20001f08
    e3c8:	20001ac4 	.word	0x20001ac4
    e3cc:	0000e2c9 	.word	0x0000e2c9

0000e3d0 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    e3d0:	69c2      	ldr	r2, [r0, #28]
    e3d2:	6943      	ldr	r3, [r0, #20]
    e3d4:	6812      	ldr	r2, [r2, #0]
    e3d6:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    e3d8:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    e3da:	d005      	beq.n	e3e8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    e3dc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    e3de:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    e3e0:	2a00      	cmp	r2, #0
    e3e2:	d039      	beq.n	e458 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    e3e4:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    e3e8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e3ea:	2a00      	cmp	r2, #0
    e3ec:	d0fa      	beq.n	e3e4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    e3ee:	3a01      	subs	r2, #1
    e3f0:	b292      	uxth	r2, r2
    e3f2:	8582      	strh	r2, [r0, #44]	; 0x2c
    e3f4:	2a00      	cmp	r2, #0
    e3f6:	d1f5      	bne.n	e3e4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e3f8:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e3fa:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e3fc:	6809      	ldr	r1, [r1, #0]
    e3fe:	400b      	ands	r3, r1
    e400:	2b00      	cmp	r3, #0
    e402:	bf0c      	ite	eq
    e404:	2301      	moveq	r3, #1
    e406:	2300      	movne	r3, #0
    e408:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e40c:	d053      	beq.n	e4b6 <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e40e:	f3bf 8f5b 	dmb	ish
    e412:	4b41      	ldr	r3, [pc, #260]	; (e518 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e414:	43d2      	mvns	r2, r2
    e416:	e853 1f00 	ldrex	r1, [r3]
    e41a:	4011      	ands	r1, r2
    e41c:	e843 1e00 	strex	lr, r1, [r3]
    e420:	f1be 0f00 	cmp.w	lr, #0
    e424:	d1f7      	bne.n	e416 <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    e426:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    e42a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e42e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e432:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e434:	2b00      	cmp	r3, #0
    e436:	d14a      	bne.n	e4ce <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e438:	f3bf 8f5b 	dmb	ish
    e43c:	2301      	movs	r3, #1
    e43e:	408b      	lsls	r3, r1
    e440:	43db      	mvns	r3, r3
    e442:	e852 1f00 	ldrex	r1, [r2]
    e446:	4019      	ands	r1, r3
    e448:	e842 1000 	strex	r0, r1, [r2]
    e44c:	2800      	cmp	r0, #0
    e44e:	d1f8      	bne.n	e442 <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    e450:	f3bf 8f5b 	dmb	ish
}
    e454:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e458:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e45a:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e45c:	6809      	ldr	r1, [r1, #0]
    e45e:	400b      	ands	r3, r1
    e460:	2b00      	cmp	r3, #0
    e462:	bf0c      	ite	eq
    e464:	2301      	moveq	r3, #1
    e466:	2300      	movne	r3, #0
    e468:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e46c:	d047      	beq.n	e4fe <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e46e:	f3bf 8f5b 	dmb	ish
    e472:	4b29      	ldr	r3, [pc, #164]	; (e518 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e474:	43d2      	mvns	r2, r2
    e476:	e853 1f00 	ldrex	r1, [r3]
    e47a:	4011      	ands	r1, r2
    e47c:	e843 1e00 	strex	lr, r1, [r3]
    e480:	f1be 0f00 	cmp.w	lr, #0
    e484:	d1f7      	bne.n	e476 <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    e486:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e48a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e48e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e492:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e494:	bb3b      	cbnz	r3, e4e6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e496:	f3bf 8f5b 	dmb	ish
    e49a:	2301      	movs	r3, #1
    e49c:	408b      	lsls	r3, r1
    e49e:	43db      	mvns	r3, r3
    e4a0:	e852 1f00 	ldrex	r1, [r2]
    e4a4:	4019      	ands	r1, r3
    e4a6:	e842 1000 	strex	r0, r1, [r2]
    e4aa:	2800      	cmp	r0, #0
    e4ac:	d1f8      	bne.n	e4a0 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    e4ae:	f3bf 8f5b 	dmb	ish
}
    e4b2:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e4b6:	4b18      	ldr	r3, [pc, #96]	; (e518 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e4b8:	f3bf 8f5b 	dmb	ish
    e4bc:	e853 1f00 	ldrex	r1, [r3]
    e4c0:	4311      	orrs	r1, r2
    e4c2:	e843 1e00 	strex	lr, r1, [r3]
    e4c6:	f1be 0f00 	cmp.w	lr, #0
    e4ca:	d0ac      	beq.n	e426 <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    e4cc:	e7f6      	b.n	e4bc <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e4ce:	2301      	movs	r3, #1
    e4d0:	408b      	lsls	r3, r1
    e4d2:	f3bf 8f5b 	dmb	ish
    e4d6:	e852 1f00 	ldrex	r1, [r2]
    e4da:	4319      	orrs	r1, r3
    e4dc:	e842 1000 	strex	r0, r1, [r2]
    e4e0:	2800      	cmp	r0, #0
    e4e2:	d0e4      	beq.n	e4ae <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e4e4:	e7f7      	b.n	e4d6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    e4e6:	2301      	movs	r3, #1
    e4e8:	408b      	lsls	r3, r1
    e4ea:	f3bf 8f5b 	dmb	ish
    e4ee:	e852 1f00 	ldrex	r1, [r2]
    e4f2:	4319      	orrs	r1, r3
    e4f4:	e842 1000 	strex	r0, r1, [r2]
    e4f8:	2800      	cmp	r0, #0
    e4fa:	d0d8      	beq.n	e4ae <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e4fc:	e7f7      	b.n	e4ee <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    e4fe:	4b06      	ldr	r3, [pc, #24]	; (e518 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e500:	f3bf 8f5b 	dmb	ish
    e504:	e853 1f00 	ldrex	r1, [r3]
    e508:	4311      	orrs	r1, r2
    e50a:	e843 1e00 	strex	lr, r1, [r3]
    e50e:	f1be 0f00 	cmp.w	lr, #0
    e512:	d0b8      	beq.n	e486 <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    e514:	e7f6      	b.n	e504 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    e516:	bf00      	nop
    e518:	20001ac4 	.word	0x20001ac4

0000e51c <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    e51c:	4a03      	ldr	r2, [pc, #12]	; (e52c <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    e51e:	6002      	str	r2, [r0, #0]
    e520:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e524:	2200      	movs	r2, #0
    e526:	8081      	strh	r1, [r0, #4]
    e528:	7182      	strb	r2, [r0, #6]
    e52a:	4770      	bx	lr
    e52c:	000233d8 	.word	0x000233d8

0000e530 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    e530:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    e532:	f992 4001 	ldrsb.w	r4, [r2, #1]
    e536:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    e538:	4d0d      	ldr	r5, [pc, #52]	; (e570 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    e53a:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    e53c:	2400      	movs	r4, #0
    e53e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e542:	8086      	strh	r6, [r0, #4]
    e544:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    e546:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    e548:	7895      	ldrb	r5, [r2, #2]
    e54a:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    e54c:	2101      	movs	r1, #1
    e54e:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    e550:	6141      	str	r1, [r0, #20]
    e552:	78d1      	ldrb	r1, [r2, #3]
    e554:	7601      	strb	r1, [r0, #24]
    e556:	7911      	ldrb	r1, [r2, #4]
    e558:	4a06      	ldr	r2, [pc, #24]	; (e574 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    e55a:	61c4      	str	r4, [r0, #28]
    e55c:	6204      	str	r4, [r0, #32]
    e55e:	6244      	str	r4, [r0, #36]	; 0x24
    e560:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    e564:	7641      	strb	r1, [r0, #25]
    e566:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    e56a:	bc70      	pop	{r4, r5, r6}
    e56c:	4770      	bx	lr
    e56e:	bf00      	nop
    e570:	00023408 	.word	0x00023408
    e574:	00010003 	.word	0x00010003

0000e578 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e578:	4b05      	ldr	r3, [pc, #20]	; (e590 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    e57a:	68c1      	ldr	r1, [r0, #12]
    e57c:	681a      	ldr	r2, [r3, #0]
    e57e:	6943      	ldr	r3, [r0, #20]
    e580:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e584:	6812      	ldr	r2, [r2, #0]
    e586:	421a      	tst	r2, r3
}
    e588:	bf0c      	ite	eq
    e58a:	2001      	moveq	r0, #1
    e58c:	2000      	movne	r0, #0
    e58e:	4770      	bx	lr
    e590:	20001f08 	.word	0x20001f08

0000e594 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e594:	6a03      	ldr	r3, [r0, #32]
    e596:	6941      	ldr	r1, [r0, #20]
    e598:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e59a:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e59c:	400b      	ands	r3, r1
    e59e:	2b00      	cmp	r3, #0
    e5a0:	bf0c      	ite	eq
    e5a2:	2301      	moveq	r3, #1
    e5a4:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    e5a6:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e5a8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e5ac:	d023      	beq.n	e5f6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e5ae:	f3bf 8f5b 	dmb	ish
    e5b2:	4b1e      	ldr	r3, [pc, #120]	; (e62c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e5b4:	43d2      	mvns	r2, r2
    e5b6:	e853 1f00 	ldrex	r1, [r3]
    e5ba:	4011      	ands	r1, r2
    e5bc:	e843 1e00 	strex	lr, r1, [r3]
    e5c0:	f1be 0f00 	cmp.w	lr, #0
    e5c4:	d1f7      	bne.n	e5b6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    e5c6:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e5ca:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e5ce:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e5d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e5d4:	b9db      	cbnz	r3, e60e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e5d6:	f3bf 8f5b 	dmb	ish
    e5da:	2301      	movs	r3, #1
    e5dc:	408b      	lsls	r3, r1
    e5de:	43db      	mvns	r3, r3
    e5e0:	e852 1f00 	ldrex	r1, [r2]
    e5e4:	4019      	ands	r1, r3
    e5e6:	e842 1000 	strex	r0, r1, [r2]
    e5ea:	2800      	cmp	r0, #0
    e5ec:	d1f8      	bne.n	e5e0 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    e5ee:	f3bf 8f5b 	dmb	ish
    e5f2:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e5f6:	4b0d      	ldr	r3, [pc, #52]	; (e62c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e5f8:	f3bf 8f5b 	dmb	ish
    e5fc:	e853 1f00 	ldrex	r1, [r3]
    e600:	4311      	orrs	r1, r2
    e602:	e843 1e00 	strex	lr, r1, [r3]
    e606:	f1be 0f00 	cmp.w	lr, #0
    e60a:	d0dc      	beq.n	e5c6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    e60c:	e7f6      	b.n	e5fc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e60e:	2301      	movs	r3, #1
    e610:	408b      	lsls	r3, r1
    e612:	f3bf 8f5b 	dmb	ish
    e616:	e852 1f00 	ldrex	r1, [r2]
    e61a:	4319      	orrs	r1, r3
    e61c:	e842 1000 	strex	r0, r1, [r2]
    e620:	2800      	cmp	r0, #0
    e622:	d1f8      	bne.n	e616 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e624:	f3bf 8f5b 	dmb	ish
    e628:	f85d fb04 	ldr.w	pc, [sp], #4
    e62c:	20001ac4 	.word	0x20001ac4

0000e630 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e630:	7980      	ldrb	r0, [r0, #6]
    e632:	4770      	bx	lr

0000e634 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e634:	2005      	movs	r0, #5
    e636:	4770      	bx	lr

0000e638 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e638:	7980      	ldrb	r0, [r0, #6]
    e63a:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e63c:	2804      	cmp	r0, #4
    e63e:	bf8c      	ite	hi
    e640:	2000      	movhi	r0, #0
    e642:	2001      	movls	r0, #1
    e644:	4770      	bx	lr
    e646:	bf00      	nop

0000e648 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e648:	b5f0      	push	{r4, r5, r6, r7, lr}
    e64a:	b083      	sub	sp, #12
    e64c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e650:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e652:	4604      	mov	r4, r0
    e654:	9d08      	ldr	r5, [sp, #32]
    e656:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e658:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e65c:	f7ff fc9a 	bl	df94 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e660:	2300      	movs	r3, #0
    e662:	490f      	ldr	r1, [pc, #60]	; (e6a0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e664:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e668:	f640 42cc 	movw	r2, #3276	; 0xccc
    e66c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e670:	6663      	str	r3, [r4, #100]	; 0x64
    e672:	66a3      	str	r3, [r4, #104]	; 0x68
    e674:	66e3      	str	r3, [r4, #108]	; 0x6c
    e676:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e67a:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e67e:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e682:	6765      	str	r5, [r4, #116]	; 0x74
    e684:	67a6      	str	r6, [r4, #120]	; 0x78
    e686:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e68a:	6021      	str	r1, [r4, #0]
    e68c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e690:	7b2a      	ldrb	r2, [r5, #12]
    e692:	4b04      	ldr	r3, [pc, #16]	; (e6a4 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e698:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e69a:	4620      	mov	r0, r4
    e69c:	b003      	add	sp, #12
    e69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6a0:	00023438 	.word	0x00023438
    e6a4:	00023460 	.word	0x00023460

0000e6a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e6a8:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e6aa:	6803      	ldr	r3, [r0, #0]
    e6ac:	4a12      	ldr	r2, [pc, #72]	; (e6f8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e6ae:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e6b0:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e6b4:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e6b6:	b082      	sub	sp, #8
    e6b8:	4604      	mov	r4, r0
    e6ba:	d115      	bne.n	e6e8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e6bc:	7980      	ldrb	r0, [r0, #6]
    e6be:	2808      	cmp	r0, #8
    e6c0:	d805      	bhi.n	e6ce <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e6c2:	2301      	movs	r3, #1
    e6c4:	fa03 f000 	lsl.w	r0, r3, r0
    e6c8:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e6cc:	d101      	bne.n	e6d2 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e6ce:	b002      	add	sp, #8
    e6d0:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e6d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e6d6:	01db      	lsls	r3, r3, #7
    e6d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e6dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e6e0:	b131      	cbz	r1, e6f0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e6e2:	615a      	str	r2, [r3, #20]
}
    e6e4:	b002      	add	sp, #8
    e6e6:	bd10      	pop	{r4, pc}
    e6e8:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e6ea:	4798      	blx	r3
    e6ec:	9901      	ldr	r1, [sp, #4]
    e6ee:	e7e6      	b.n	e6be <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e6f0:	619a      	str	r2, [r3, #24]
}
    e6f2:	b002      	add	sp, #8
    e6f4:	bd10      	pop	{r4, pc}
    e6f6:	bf00      	nop
    e6f8:	0000e631 	.word	0x0000e631

0000e6fc <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e6fc:	7982      	ldrb	r2, [r0, #6]
    e6fe:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e700:	4601      	mov	r1, r0
    e702:	d808      	bhi.n	e716 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e704:	2301      	movs	r3, #1
    e706:	4093      	lsls	r3, r2
    e708:	f013 0f54 	tst.w	r3, #84	; 0x54
    e70c:	d112      	bne.n	e734 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e70e:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e712:	d102      	bne.n	e71a <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e714:	4770      	bx	lr
            state = 0;
    e716:	2000      	movs	r0, #0
}
    e718:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e71a:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e71c:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e71e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e722:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e726:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e72a:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e72e:	f340 004f 	sbfx	r0, r0, #1, #16
    e732:	4770      	bx	lr
            state = DigitalInOut::State();
    e734:	f7ff bd6a 	b.w	e20c <_ZN9ClearCore12DigitalInOut5StateEv>

0000e738 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e738:	b510      	push	{r4, lr}
    switch (m_mode) {
    e73a:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e73c:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e73e:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e740:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e742:	2b05      	cmp	r3, #5
    e744:	d82a      	bhi.n	e79c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e746:	e8df f003 	tbb	[pc, r3]
    e74a:	2925      	.short	0x2925
    e74c:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    e750:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e752:	4b13      	ldr	r3, [pc, #76]	; (e7a0 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    e754:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    e758:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e75c:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e75e:	bf1b      	ittet	ne
    e760:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    e764:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    e768:	20ff      	moveq	r0, #255	; 0xff
    e76a:	11c0      	asrne	r0, r0, #7
    e76c:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e770:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e774:	4b0b      	ldr	r3, [pc, #44]	; (e7a4 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    e776:	fb01 f102 	mul.w	r1, r1, r2
    e77a:	fb83 0301 	smull	r0, r3, r3, r1
    e77e:	440b      	add	r3, r1
    e780:	139b      	asrs	r3, r3, #14
    e782:	17c9      	asrs	r1, r1, #31
    e784:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e786:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e788:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e78a:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e78c:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e78e:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    e790:	2001      	movs	r0, #1
            break;
    e792:	bd10      	pop	{r4, pc}
}
    e794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    e798:	f7ff ba8e 	b.w	dcb8 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e79c:	2000      	movs	r0, #0
}
    e79e:	bd10      	pop	{r4, pc}
    e7a0:	200019d0 	.word	0x200019d0
    e7a4:	80010003 	.word	0x80010003

0000e7a8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e7a8:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    e7ac:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e7b0:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    e7b4:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e7b6:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e7b8:	b302      	cbz	r2, e7fc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e7ba:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    e7be:	2a04      	cmp	r2, #4
    e7c0:	d01c      	beq.n	e7fc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e7c2:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    e7c4:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    e7c8:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    e7ca:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    e7ce:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    e7d0:	f004 fdee 	bl	133b0 <arm_sin_q15>
    e7d4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e7d8:	4b41      	ldr	r3, [pc, #260]	; (e8e0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e7da:	fb11 f100 	smulbb	r1, r1, r0
    e7de:	429d      	cmp	r5, r3
    e7e0:	f341 31cf 	sbfx	r1, r1, #15, #16
    e7e4:	d177      	bne.n	e8d6 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    e7e6:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e7e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    e7ea:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e7ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    e7ee:	2b05      	cmp	r3, #5
    e7f0:	d81e      	bhi.n	e830 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e7f2:	e8df f003 	tbb	[pc, r3]
    e7f6:	1d6b      	.short	0x1d6b
    e7f8:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e7fc:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e7fe:	2a07      	cmp	r2, #7
    e800:	d017      	beq.n	e832 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e802:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e804:	4c36      	ldr	r4, [pc, #216]	; (e8e0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e806:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e808:	f043 0301 	orr.w	r3, r3, #1
    e80c:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e80e:	6803      	ldr	r3, [r0, #0]
    e810:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e812:	2500      	movs	r5, #0
    e814:	42a3      	cmp	r3, r4
    e816:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    e81a:	d132      	bne.n	e882 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e81c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    e81e:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e820:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    e822:	2a04      	cmp	r2, #4
    e824:	d804      	bhi.n	e830 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e826:	e8df f002 	tbb	[pc, r2]
    e82a:	0327      	.short	0x0327
    e82c:	1b27      	.short	0x1b27
    e82e:	27          	.byte	0x27
    e82f:	00          	.byte	0x00
    e830:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e832:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    e836:	4293      	cmp	r3, r2
    e838:	ddc3      	ble.n	e7c2 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e83a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e83c:	4a28      	ldr	r2, [pc, #160]	; (e8e0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e83e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e840:	f043 0301 	orr.w	r3, r3, #1
    e844:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e846:	6803      	ldr	r3, [r0, #0]
    e848:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e84a:	2400      	movs	r4, #0
    e84c:	4293      	cmp	r3, r2
    e84e:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    e852:	d116      	bne.n	e882 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e856:	085b      	lsrs	r3, r3, #1
    e858:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e85a:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e85c:	674b      	str	r3, [r1, #116]	; 0x74
    e85e:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    e860:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e862:	4a20      	ldr	r2, [pc, #128]	; (e8e4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e864:	f000 000f 	and.w	r0, r0, #15
    e868:	4402      	add	r2, r0
    e86a:	b29b      	uxth	r3, r3
    e86c:	2000      	movs	r0, #0
    e86e:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e872:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e874:	674b      	str	r3, [r1, #116]	; 0x74
    e876:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e878:	2100      	movs	r1, #0
}
    e87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e87e:	f7ff ba1b 	b.w	dcb8 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    e882:	2100      	movs	r1, #0
}
    e884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    e888:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    e88a:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e88c:	4b15      	ldr	r3, [pc, #84]	; (e8e4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e88e:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    e892:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e896:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e898:	bf1b      	ittet	ne
    e89a:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    e89e:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    e8a2:	24ff      	moveq	r4, #255	; 0xff
    e8a4:	11e4      	asrne	r4, r4, #7
    e8a6:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e8aa:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e8ae:	4b0e      	ldr	r3, [pc, #56]	; (e8e8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    e8b0:	fb01 f102 	mul.w	r1, r1, r2
    e8b4:	fb83 4301 	smull	r4, r3, r3, r1
    e8b8:	440b      	add	r3, r1
    e8ba:	139b      	asrs	r3, r3, #14
    e8bc:	17c9      	asrs	r1, r1, #31
    e8be:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e8c0:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e8c2:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e8c4:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e8c6:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e8c8:	6741      	str	r1, [r0, #116]	; 0x74
    e8ca:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e8cc:	4620      	mov	r0, r4
}
    e8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e8d2:	f7ff b9f1 	b.w	dcb8 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    e8d6:	4620      	mov	r0, r4
    e8d8:	462b      	mov	r3, r5
}
    e8da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    e8de:	4718      	bx	r3
    e8e0:	0000e739 	.word	0x0000e739
    e8e4:	200019d0 	.word	0x200019d0
    e8e8:	80010003 	.word	0x80010003

0000e8ec <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    e8ec:	7983      	ldrb	r3, [r0, #6]
    e8ee:	3b02      	subs	r3, #2
    e8f0:	2b05      	cmp	r3, #5
    e8f2:	d804      	bhi.n	e8fe <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    e8f4:	e8df f003 	tbb	[pc, r3]
    e8f8:	03040304 	.word	0x03040304
    e8fc:	0604      	.short	0x0604
    e8fe:	4770      	bx	lr
            DigitalInOut::Refresh();
    e900:	f7ff bb7e 	b.w	e000 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    e904:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    e908:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    e90a:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    e90c:	d02c      	beq.n	e968 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    e90e:	2b04      	cmp	r3, #4
    e910:	d003      	beq.n	e91a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    e912:	2b02      	cmp	r3, #2
    e914:	d04c      	beq.n	e9b0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    e916:	bcf0      	pop	{r4, r5, r6, r7}
    e918:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    e91a:	4937      	ldr	r1, [pc, #220]	; (e9f8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e91c:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e91e:	680b      	ldr	r3, [r1, #0]
    e920:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    e922:	1b1b      	subs	r3, r3, r4
    e924:	4293      	cmp	r3, r2
    e926:	d9f6      	bls.n	e916 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    e928:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    e92a:	2303      	movs	r3, #3
    e92c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    e930:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e932:	4b32      	ldr	r3, [pc, #200]	; (e9fc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    e934:	f042 0201 	orr.w	r2, r2, #1
    e938:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    e93a:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    e93c:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e93e:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e940:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e944:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    e948:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e94a:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e94e:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e950:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e954:	408a      	lsls	r2, r1
    e956:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    e958:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e95a:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e95e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e962:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    e966:	e7d6      	b.n	e916 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    e968:	4923      	ldr	r1, [pc, #140]	; (e9f8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e96a:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e96c:	680b      	ldr	r3, [r1, #0]
    e96e:	6e82      	ldr	r2, [r0, #104]	; 0x68
    e970:	1b1b      	subs	r3, r3, r4
    e972:	4293      	cmp	r3, r2
    e974:	d9cf      	bls.n	e916 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e976:	4a21      	ldr	r2, [pc, #132]	; (e9fc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    e978:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    e97a:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e97c:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e97e:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    e982:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    e986:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e988:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e98c:	2101      	movs	r1, #1
    e98e:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e990:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e994:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    e998:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    e99a:	ea24 0406 	bic.w	r4, r4, r6
    e99e:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9a2:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9a6:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e9aa:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    e9ae:	e7b2      	b.n	e916 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    e9b0:	4b11      	ldr	r3, [pc, #68]	; (e9f8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e9b2:	6e41      	ldr	r1, [r0, #100]	; 0x64
    e9b4:	681b      	ldr	r3, [r3, #0]
    e9b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
    e9b8:	1a5b      	subs	r3, r3, r1
    e9ba:	4293      	cmp	r3, r2
    e9bc:	d9ab      	bls.n	e916 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9be:	4a0f      	ldr	r2, [pc, #60]	; (e9fc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    e9c0:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e9c2:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e9c4:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9c8:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9cc:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9d0:	2501      	movs	r5, #1
    e9d2:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9d8:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    e9dc:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    e9e0:	2500      	movs	r5, #0
    e9e2:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    e9e6:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e9ea:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e9ee:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e9f2:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    e9f6:	e78e      	b.n	e916 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    e9f8:	20001be0 	.word	0x20001be0
    e9fc:	200019d0 	.word	0x200019d0

0000ea00 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    ea00:	b570      	push	{r4, r5, r6, lr}
    ea02:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    ea04:	f7ff fc22 	bl	e24c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    ea08:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    ea0a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    ea0c:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    ea10:	6813      	ldr	r3, [r2, #0]
    ea12:	f043 0301 	orr.w	r3, r3, #1
    ea16:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    ea18:	6893      	ldr	r3, [r2, #8]
    ea1a:	f013 0301 	ands.w	r3, r3, #1
    ea1e:	d1fb      	bne.n	ea18 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ea20:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    ea22:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ea24:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ea26:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ea28:	4b24      	ldr	r3, [pc, #144]	; (eabc <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    ea2a:	4e25      	ldr	r6, [pc, #148]	; (eac0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ea2c:	4825      	ldr	r0, [pc, #148]	; (eac4 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ea2e:	f045 0502 	orr.w	r5, r5, #2
    ea32:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    ea34:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    ea36:	f045 0505 	orr.w	r5, r5, #5
    ea3a:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    ea3c:	6a55      	ldr	r5, [r2, #36]	; 0x24
    ea3e:	430d      	orrs	r5, r1
    ea40:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ea42:	681b      	ldr	r3, [r3, #0]
    ea44:	fba6 5303 	umull	r5, r3, r6, r3
    ea48:	0bdb      	lsrs	r3, r3, #15
    ea4a:	3b01      	subs	r3, #1
    ea4c:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    ea4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    ea50:	6453      	str	r3, [r2, #68]	; 0x44
    ea52:	6c13      	ldr	r3, [r2, #64]	; 0x40
    ea54:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ea56:	6f63      	ldr	r3, [r4, #116]	; 0x74
    ea58:	f993 2001 	ldrsb.w	r2, [r3, #1]
    ea5c:	789d      	ldrb	r5, [r3, #2]
    ea5e:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    ea62:	fa01 f605 	lsl.w	r6, r1, r5
    ea66:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    ea68:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    ea6a:	f994 3001 	ldrsb.w	r3, [r4, #1]
    ea6e:	78a4      	ldrb	r4, [r4, #2]
    ea70:	01db      	lsls	r3, r3, #7
    ea72:	4418      	add	r0, r3
    ea74:	40a1      	lsls	r1, r4
    ea76:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    ea78:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ea7a:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    ea7e:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ea80:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ea84:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ea88:	2005      	movs	r0, #5
    ea8a:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ea8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ea90:	bf4c      	ite	mi
    ea92:	f360 1107 	bfimi	r1, r0, #4, #4
    ea96:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ea9a:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ea9e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eaa2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    eaa6:	2105      	movs	r1, #5
    eaa8:	07e0      	lsls	r0, r4, #31
    eaaa:	bf4c      	ite	mi
    eaac:	f361 1207 	bfimi	r2, r1, #4, #4
    eab0:	f361 0203 	bfipl	r2, r1, #0, #4
    eab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    eab8:	bd70      	pop	{r4, r5, r6, pc}
    eaba:	bf00      	nop
    eabc:	200000e0 	.word	0x200000e0
    eac0:	be37c63b 	.word	0xbe37c63b
    eac4:	41008000 	.word	0x41008000

0000eac8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    eac8:	7982      	ldrb	r2, [r0, #6]
    eaca:	428a      	cmp	r2, r1
    eacc:	d07a      	beq.n	ebc4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    eace:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ead0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ead2:	460d      	mov	r5, r1
    ead4:	d867      	bhi.n	eba6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ead6:	2201      	movs	r2, #1
    ead8:	fa02 f301 	lsl.w	r3, r2, r1
    eadc:	f013 0f54 	tst.w	r3, #84	; 0x54
    eae0:	4604      	mov	r4, r0
    eae2:	d171      	bne.n	ebc8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    eae4:	f413 7f90 	tst.w	r3, #288	; 0x120
    eae8:	d05f      	beq.n	ebaa <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    eaea:	7901      	ldrb	r1, [r0, #4]
    eaec:	4a5d      	ldr	r2, [pc, #372]	; (ec64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    eaee:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    eaf2:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	f040 809e 	bne.w	ec38 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    eafc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eafe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    eb00:	01db      	lsls	r3, r3, #7
    eb02:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    eb06:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    eb0a:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    eb0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    eb12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    eb16:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb18:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    eb1c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    eb20:	f36f 0000 	bfc	r0, #0, #1
    eb24:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    eb28:	68a3      	ldr	r3, [r4, #8]
    eb2a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb2e:	2d05      	cmp	r5, #5
    eb30:	f000 808b 	beq.w	ec4a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    eb34:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb38:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb3c:	2701      	movs	r7, #1
    eb3e:	fa07 f101 	lsl.w	r1, r7, r1
    eb42:	ea20 0101 	bic.w	r1, r0, r1
    eb46:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb4a:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eb4e:	6f61      	ldr	r1, [r4, #116]	; 0x74
    eb50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    eb54:	f991 3001 	ldrsb.w	r3, [r1, #1]
    eb58:	4a43      	ldr	r2, [pc, #268]	; (ec68 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    eb5a:	7889      	ldrb	r1, [r1, #2]
    eb5c:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    eb60:	440b      	add	r3, r1
    eb62:	2101      	movs	r1, #1
    eb64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    eb68:	4308      	orrs	r0, r1
    eb6a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    eb6e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    eb70:	f990 3001 	ldrsb.w	r3, [r0, #1]
    eb74:	7880      	ldrb	r0, [r0, #2]
    eb76:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    eb7a:	4403      	add	r3, r0
    eb7c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eb80:	430a      	orrs	r2, r1
    eb82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    eb86:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    eb88:	6813      	ldr	r3, [r2, #0]
    eb8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    eb8e:	428b      	cmp	r3, r1
    eb90:	d006      	beq.n	eba0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    eb92:	6813      	ldr	r3, [r2, #0]
    eb94:	f361 0341 	bfi	r3, r1, #1, #1
    eb98:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    eb9a:	6893      	ldr	r3, [r2, #8]
    eb9c:	079b      	lsls	r3, r3, #30
    eb9e:	d4fc      	bmi.n	eb9a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    eba0:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    eba2:	2001      	movs	r0, #1
    eba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    eba6:	2000      	movs	r0, #0
    eba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ebaa:	061a      	lsls	r2, r3, #24
    ebac:	d5fb      	bpl.n	eba6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    ebae:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ebb0:	4a2c      	ldr	r2, [pc, #176]	; (ec64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    ebb2:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    ebb6:	f001 010f 	and.w	r1, r1, #15
    ebba:	1850      	adds	r0, r2, r1
    ebbc:	11db      	asrs	r3, r3, #7
    ebbe:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    ebc2:	e796      	b.n	eaf2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    ebc4:	2001      	movs	r0, #1
    ebc6:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebc8:	4f26      	ldr	r7, [pc, #152]	; (ec64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    ebca:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ebcc:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebd0:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebd4:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebd8:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebdc:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebde:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebe2:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebe6:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebea:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebee:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebf2:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    ebf6:	f7ff f8bb 	bl	dd70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    ebfa:	2800      	cmp	r0, #0
    ebfc:	d0d3      	beq.n	eba6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ebfe:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ec00:	4b19      	ldr	r3, [pc, #100]	; (ec68 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ec02:	f991 2001 	ldrsb.w	r2, [r1, #1]
    ec06:	7889      	ldrb	r1, [r1, #2]
    ec08:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    ec0c:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ec0e:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ec10:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    ec14:	f36f 0000 	bfc	r0, #0, #1
    ec18:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ec1c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    ec1e:	f992 0001 	ldrsb.w	r0, [r2, #1]
    ec22:	7892      	ldrb	r2, [r2, #2]
    ec24:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    ec28:	4413      	add	r3, r2
    ec2a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ec2e:	f36f 0200 	bfc	r2, #0, #1
    ec32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ec36:	e7a6      	b.n	eb86 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ec38:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ec3a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ec3c:	01db      	lsls	r3, r3, #7
    ec3e:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ec42:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ec46:	6146      	str	r6, [r0, #20]
    ec48:	e760      	b.n	eb0c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ec4a:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ec4e:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ec52:	2601      	movs	r6, #1
    ec54:	fa06 f101 	lsl.w	r1, r6, r1
    ec58:	4339      	orrs	r1, r7
    ec5a:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ec5e:	4303      	orrs	r3, r0
    ec60:	e775      	b.n	eb4e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ec62:	bf00      	nop
    ec64:	200019d0 	.word	0x200019d0
    ec68:	41008000 	.word	0x41008000

0000ec6c <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ec6c:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ec6e:	4c07      	ldr	r4, [pc, #28]	; (ec8c <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ec70:	6823      	ldr	r3, [r4, #0]
    ec72:	07db      	lsls	r3, r3, #31
    ec74:	d502      	bpl.n	ec7c <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ec76:	4b06      	ldr	r3, [pc, #24]	; (ec90 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ec78:	6818      	ldr	r0, [r3, #0]
    ec7a:	bd10      	pop	{r4, pc}
    ec7c:	2001      	movs	r0, #1
    ec7e:	f004 fbb3 	bl	133e8 <_Znwj>
    ec82:	4a03      	ldr	r2, [pc, #12]	; (ec90 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ec84:	2301      	movs	r3, #1
    ec86:	6010      	str	r0, [r2, #0]
    ec88:	6023      	str	r3, [r4, #0]
    return *instance;
}
    ec8a:	bd10      	pop	{r4, pc}
    ec8c:	20001e24 	.word	0x20001e24
    ec90:	20001ef4 	.word	0x20001ef4

0000ec94 <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    ec94:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ec96:	4a13      	ldr	r2, [pc, #76]	; (ece4 <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ec98:	4913      	ldr	r1, [pc, #76]	; (ece8 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ec9a:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ec9c:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ec9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    eca2:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    eca4:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eca6:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    eca8:	8813      	ldrh	r3, [r2, #0]
    ecaa:	b29b      	uxth	r3, r3
    ecac:	2b01      	cmp	r3, #1
    ecae:	d0fb      	beq.n	eca8 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ecb0:	4b0e      	ldr	r3, [pc, #56]	; (ecec <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ecb2:	4d0f      	ldr	r5, [pc, #60]	; (ecf0 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ecb4:	4c0f      	ldr	r4, [pc, #60]	; (ecf4 <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    ecb6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ecba:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ecbc:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ecc0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ecc4:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ecc8:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ecca:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    eccc:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    ecce:	7b51      	ldrb	r1, [r2, #13]
    ecd0:	f041 0101 	orr.w	r1, r1, #1
    ecd4:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ecd6:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    ecd8:	6913      	ldr	r3, [r2, #16]
    ecda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    ecde:	6113      	str	r3, [r2, #16]
}
    ece0:	bc70      	pop	{r4, r5, r6}
    ece2:	4770      	bx	lr
    ece4:	40000800 	.word	0x40000800
    ece8:	4100a000 	.word	0x4100a000
    ecec:	e000e100 	.word	0xe000e100
    ecf0:	20001e30 	.word	0x20001e30
    ecf4:	20001e90 	.word	0x20001e90

0000ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ecf8:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    ecfa:	bfda      	itte	le
    ecfc:	4b02      	ldrle	r3, [pc, #8]	; (ed08 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    ecfe:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ed02:	2000      	movgt	r0, #0
}
    ed04:	4770      	bx	lr
    ed06:	bf00      	nop
    ed08:	4100a040 	.word	0x4100a040

0000ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ed0c:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    ed0e:	bfda      	itte	le
    ed10:	4b02      	ldrle	r3, [pc, #8]	; (ed1c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    ed12:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ed16:	2000      	movgt	r0, #0
}
    ed18:	4770      	bx	lr
    ed1a:	bf00      	nop
    ed1c:	20001e30 	.word	0x20001e30

0000ed20 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    ed20:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    ed22:	f7ff ffa3 	bl	ec6c <_ZN9ClearCore10DmaManager8InstanceEv>
    ed26:	4b01      	ldr	r3, [pc, #4]	; (ed2c <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    ed28:	6018      	str	r0, [r3, #0]
    ed2a:	bd08      	pop	{r3, pc}
    ed2c:	20001ef0 	.word	0x20001ef0

0000ed30 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    ed30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed34:	4604      	mov	r4, r0
    ed36:	4267      	negs	r7, r4
    ed38:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    ed3c:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    ed40:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    ed44:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ed48:	4608      	mov	r0, r1
    ed4a:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ed4e:	2101      	movs	r1, #1
    ed50:	f002 f86e 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    ed54:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    ed58:	2600      	movs	r6, #0
    bool sendData = true;
    ed5a:	2201      	movs	r2, #1
    ed5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ed60:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    ed64:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    ed68:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    ed6a:	4690      	mov	r8, r2
    ed6c:	2b02      	cmp	r3, #2
    ed6e:	f000 821b 	beq.w	f1a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    ed72:	2d03      	cmp	r5, #3
    ed74:	f300 8159 	bgt.w	f02a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    ed78:	b1a3      	cbz	r3, eda4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    ed7a:	2b01      	cmp	r3, #1
    ed7c:	d1fc      	bne.n	ed78 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    ed7e:	b1da      	cbz	r2, edb8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    ed80:	2e00      	cmp	r6, #0
    ed82:	f040 808d 	bne.w	eea0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    ed86:	6026      	str	r6, [r4, #0]
    ed88:	6066      	str	r6, [r4, #4]
    ed8a:	60a6      	str	r6, [r4, #8]
    ed8c:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    ed8e:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    ed90:	f104 0212 	add.w	r2, r4, #18
    ed94:	4621      	mov	r1, r4
    ed96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ed98:	f002 f8f4 	bl	10f84 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    ed9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    eda0:	2200      	movs	r2, #0
    eda2:	e7e3      	b.n	ed6c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    eda4:	2a00      	cmp	r2, #0
    eda6:	d053      	beq.n	ee50 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    eda8:	f04f 33ff 	mov.w	r3, #4294967295
    edac:	6023      	str	r3, [r4, #0]
    edae:	6063      	str	r3, [r4, #4]
    edb0:	60a3      	str	r3, [r4, #8]
    edb2:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    edb4:	2310      	movs	r3, #16
    edb6:	e7eb      	b.n	ed90 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    edb8:	2e00      	cmp	r6, #0
    edba:	f040 80a2 	bne.w	ef02 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    edbe:	7ca2      	ldrb	r2, [r4, #18]
    edc0:	2aff      	cmp	r2, #255	; 0xff
    edc2:	f040 8128 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edc6:	7ce2      	ldrb	r2, [r4, #19]
    edc8:	2aff      	cmp	r2, #255	; 0xff
    edca:	f040 8124 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edce:	7d22      	ldrb	r2, [r4, #20]
    edd0:	2aff      	cmp	r2, #255	; 0xff
    edd2:	f040 8120 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edd6:	7d62      	ldrb	r2, [r4, #21]
    edd8:	2aff      	cmp	r2, #255	; 0xff
    edda:	f040 811c 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edde:	7da2      	ldrb	r2, [r4, #22]
    ede0:	2aff      	cmp	r2, #255	; 0xff
    ede2:	f040 8118 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ede6:	7de2      	ldrb	r2, [r4, #23]
    ede8:	2aff      	cmp	r2, #255	; 0xff
    edea:	f040 8114 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edee:	7e22      	ldrb	r2, [r4, #24]
    edf0:	2aff      	cmp	r2, #255	; 0xff
    edf2:	f040 8110 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edf6:	7e62      	ldrb	r2, [r4, #25]
    edf8:	2aff      	cmp	r2, #255	; 0xff
    edfa:	f040 810c 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    edfe:	7ea2      	ldrb	r2, [r4, #26]
    ee00:	2aff      	cmp	r2, #255	; 0xff
    ee02:	f040 8108 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee06:	7ee2      	ldrb	r2, [r4, #27]
    ee08:	2aff      	cmp	r2, #255	; 0xff
    ee0a:	f040 8104 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee0e:	7f22      	ldrb	r2, [r4, #28]
    ee10:	2aff      	cmp	r2, #255	; 0xff
    ee12:	f040 8100 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee16:	7f62      	ldrb	r2, [r4, #29]
    ee18:	2aff      	cmp	r2, #255	; 0xff
    ee1a:	f040 80fc 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee1e:	7fa2      	ldrb	r2, [r4, #30]
    ee20:	2aff      	cmp	r2, #255	; 0xff
    ee22:	f040 80f8 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee26:	7fe2      	ldrb	r2, [r4, #31]
    ee28:	2aff      	cmp	r2, #255	; 0xff
    ee2a:	f040 80f4 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee2e:	f894 2020 	ldrb.w	r2, [r4, #32]
    ee32:	2aff      	cmp	r2, #255	; 0xff
    ee34:	f040 80ef 	bne.w	f016 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ee38:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    ee3c:	3eff      	subs	r6, #255	; 0xff
    ee3e:	bf18      	it	ne
    ee40:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    ee42:	3501      	adds	r5, #1
    ee44:	b2ed      	uxtb	r5, r5
    ee46:	2d03      	cmp	r5, #3
    ee48:	f04f 0201 	mov.w	r2, #1
    ee4c:	dd94      	ble.n	ed78 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    ee4e:	e0ec      	b.n	f02a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    ee50:	7ca2      	ldrb	r2, [r4, #18]
    ee52:	bb02      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee54:	7ce2      	ldrb	r2, [r4, #19]
    ee56:	b9f2      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee58:	7d22      	ldrb	r2, [r4, #20]
    ee5a:	b9e2      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee5c:	7d62      	ldrb	r2, [r4, #21]
    ee5e:	b9d2      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee60:	7da2      	ldrb	r2, [r4, #22]
    ee62:	b9c2      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee64:	7de2      	ldrb	r2, [r4, #23]
    ee66:	b9b2      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee68:	7e22      	ldrb	r2, [r4, #24]
    ee6a:	b9a2      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee6c:	7e62      	ldrb	r2, [r4, #25]
    ee6e:	b992      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee70:	7ea2      	ldrb	r2, [r4, #26]
    ee72:	b982      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee74:	7ee2      	ldrb	r2, [r4, #27]
    ee76:	b972      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee78:	7f22      	ldrb	r2, [r4, #28]
    ee7a:	b962      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee7c:	7f62      	ldrb	r2, [r4, #29]
    ee7e:	b952      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee80:	7fa2      	ldrb	r2, [r4, #30]
    ee82:	b942      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee84:	7fe2      	ldrb	r2, [r4, #31]
    ee86:	b932      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee88:	f894 2020 	ldrb.w	r2, [r4, #32]
    ee8c:	b91a      	cbnz	r2, ee96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ee8e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    ee92:	2a00      	cmp	r2, #0
    ee94:	d0d5      	beq.n	ee42 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    ee96:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    ee9a:	2501      	movs	r5, #1
                        flush0Success = false;
    ee9c:	2600      	movs	r6, #0
    ee9e:	e772      	b.n	ed86 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    eea0:	2f00      	cmp	r7, #0
    eea2:	f000 80ba 	beq.w	f01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    eea6:	23aa      	movs	r3, #170	; 0xaa
    eea8:	2f01      	cmp	r7, #1
    eeaa:	7023      	strb	r3, [r4, #0]
    eeac:	f104 0101 	add.w	r1, r4, #1
    eeb0:	f000 80db 	beq.w	f06a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    eeb4:	2f02      	cmp	r7, #2
    eeb6:	7063      	strb	r3, [r4, #1]
    eeb8:	f104 0102 	add.w	r1, r4, #2
    eebc:	f000 80d3 	beq.w	f066 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    eec0:	70a3      	strb	r3, [r4, #2]
    eec2:	1ce1      	adds	r1, r4, #3
    eec4:	220e      	movs	r2, #14
    eec6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    eeca:	51e3      	str	r3, [r4, r7]
    eecc:	19e3      	adds	r3, r4, r7
    eece:	3304      	adds	r3, #4
    eed0:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    eed4:	f1b9 0f03 	cmp.w	r9, #3
    eed8:	6018      	str	r0, [r3, #0]
    eeda:	6058      	str	r0, [r3, #4]
    eedc:	d000      	beq.n	eee0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    eede:	6098      	str	r0, [r3, #8]
    eee0:	45d3      	cmp	fp, sl
    eee2:	eba2 020a 	sub.w	r2, r2, sl
    eee6:	eb01 000a 	add.w	r0, r1, sl
    eeea:	d008      	beq.n	eefe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    eeec:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    eeee:	2a01      	cmp	r2, #1
            *buf++ = val;
    eef0:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    eef4:	d003      	beq.n	eefe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    eef6:	2a02      	cmp	r2, #2
            *buf++ = val;
    eef8:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    eefa:	d000      	beq.n	eefe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    eefc:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    eefe:	2311      	movs	r3, #17
    ef00:	e746      	b.n	ed90 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    ef02:	7ca1      	ldrb	r1, [r4, #18]
    ef04:	29aa      	cmp	r1, #170	; 0xaa
    ef06:	f000 80aa 	beq.w	f05e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    ef0a:	7ce2      	ldrb	r2, [r4, #19]
    ef0c:	2aaa      	cmp	r2, #170	; 0xaa
    ef0e:	d040      	beq.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    ef10:	7d23      	ldrb	r3, [r4, #20]
    ef12:	2baa      	cmp	r3, #170	; 0xaa
    ef14:	f000 80a5 	beq.w	f062 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    ef18:	7d63      	ldrb	r3, [r4, #21]
    ef1a:	2baa      	cmp	r3, #170	; 0xaa
    ef1c:	f000 80a7 	beq.w	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    ef20:	7da3      	ldrb	r3, [r4, #22]
    ef22:	2baa      	cmp	r3, #170	; 0xaa
    ef24:	f000 8118 	beq.w	f158 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    ef28:	7de3      	ldrb	r3, [r4, #23]
    ef2a:	2baa      	cmp	r3, #170	; 0xaa
    ef2c:	f000 80a1 	beq.w	f072 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    ef30:	7e23      	ldrb	r3, [r4, #24]
    ef32:	2baa      	cmp	r3, #170	; 0xaa
    ef34:	f000 8112 	beq.w	f15c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    ef38:	7e63      	ldrb	r3, [r4, #25]
    ef3a:	2baa      	cmp	r3, #170	; 0xaa
    ef3c:	f000 8110 	beq.w	f160 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    ef40:	7ea3      	ldrb	r3, [r4, #26]
    ef42:	2baa      	cmp	r3, #170	; 0xaa
    ef44:	f000 810e 	beq.w	f164 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    ef48:	7ee3      	ldrb	r3, [r4, #27]
    ef4a:	2baa      	cmp	r3, #170	; 0xaa
    ef4c:	f000 8102 	beq.w	f154 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    ef50:	7f23      	ldrb	r3, [r4, #28]
    ef52:	2baa      	cmp	r3, #170	; 0xaa
    ef54:	f000 8108 	beq.w	f168 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    ef58:	7f63      	ldrb	r3, [r4, #29]
    ef5a:	2baa      	cmp	r3, #170	; 0xaa
    ef5c:	f000 811c 	beq.w	f198 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    ef60:	7fa3      	ldrb	r3, [r4, #30]
    ef62:	2baa      	cmp	r3, #170	; 0xaa
    ef64:	f000 811a 	beq.w	f19c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    ef68:	7fe3      	ldrb	r3, [r4, #31]
    ef6a:	2baa      	cmp	r3, #170	; 0xaa
    ef6c:	f000 8118 	beq.w	f1a0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    ef70:	f894 3020 	ldrb.w	r3, [r4, #32]
    ef74:	2baa      	cmp	r3, #170	; 0xaa
    ef76:	f000 8115 	beq.w	f1a4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    ef7a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ef7e:	2baa      	cmp	r3, #170	; 0xaa
    ef80:	f000 8108 	beq.w	f194 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    ef84:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    ef88:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    ef8a:	bf08      	it	eq
    ef8c:	2310      	moveq	r3, #16
                        if (!foundAA &&
    ef8e:	f040 80ed 	bne.w	f16c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    ef92:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    ef94:	2502      	movs	r5, #2
    ef96:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    ef9a:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    ef9c:	74e2      	strb	r2, [r4, #19]
    ef9e:	7522      	strb	r2, [r4, #20]
    efa0:	7562      	strb	r2, [r4, #21]
    efa2:	75a2      	strb	r2, [r4, #22]
    efa4:	75e2      	strb	r2, [r4, #23]
    efa6:	7622      	strb	r2, [r4, #24]
    efa8:	7662      	strb	r2, [r4, #25]
    efaa:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    efac:	76e2      	strb	r2, [r4, #27]
    efae:	7722      	strb	r2, [r4, #28]
    efb0:	7762      	strb	r2, [r4, #29]
    efb2:	77a2      	strb	r2, [r4, #30]
    efb4:	77e2      	strb	r2, [r4, #31]
    efb6:	f884 2020 	strb.w	r2, [r4, #32]
    efba:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    efbe:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    efc2:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    efc6:	105b      	asrs	r3, r3, #1
    efc8:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    efca:	2701      	movs	r7, #1
    efcc:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    efce:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    efd2:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    efd6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    efda:	3a01      	subs	r2, #1
    efdc:	4610      	mov	r0, r2
    efde:	17d1      	asrs	r1, r2, #31
    efe0:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    efe2:	42ba      	cmp	r2, r7
    efe4:	bfc8      	it	gt
    efe6:	fa42 f707 	asrgt.w	r7, r2, r7
    efea:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    efee:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    eff2:	2b00      	cmp	r3, #0
    eff4:	d13f      	bne.n	f076 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    eff6:	4b6d      	ldr	r3, [pc, #436]	; (f1ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    eff8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    effc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f000:	43c9      	mvns	r1, r1
    f002:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f004:	4a6a      	ldr	r2, [pc, #424]	; (f1b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f006:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f00a:	6813      	ldr	r3, [r2, #0]
    f00c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f010:	4628      	mov	r0, r5
    f012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f016:	2601      	movs	r6, #1
    f018:	e713      	b.n	ee42 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f01a:	4623      	mov	r3, r4
    f01c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f020:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f024:	4621      	mov	r1, r4
    f026:	2211      	movs	r2, #17
    f028:	e752      	b.n	eed0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f02a:	4a62      	ldr	r2, [pc, #392]	; (f1b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f02c:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f02e:	2301      	movs	r3, #1
    f030:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f034:	2208      	movs	r2, #8
    f036:	2102      	movs	r1, #2
    f038:	f002 fbf0 	bl	1181c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f03c:	4a5b      	ldr	r2, [pc, #364]	; (f1ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f03e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f042:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f046:	495a      	ldr	r1, [pc, #360]	; (f1b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f048:	ea23 0300 	bic.w	r3, r3, r0
    f04c:	6809      	ldr	r1, [r1, #0]
    f04e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f052:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f054:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f058:	4628      	mov	r0, r5
    f05a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f05e:	4613      	mov	r3, r2
    f060:	e797      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f062:	2302      	movs	r3, #2
    f064:	e795      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f066:	220f      	movs	r2, #15
    f068:	e72d      	b.n	eec6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f06a:	2210      	movs	r2, #16
    f06c:	e72b      	b.n	eec6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f06e:	2303      	movs	r3, #3
    f070:	e78f      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f072:	2305      	movs	r3, #5
    f074:	e78d      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f076:	f1c3 0108 	rsb	r1, r3, #8
    f07a:	00ce      	lsls	r6, r1, #3
    f07c:	f04f 30ff 	mov.w	r0, #4294967295
    f080:	f1c6 0220 	rsb	r2, r6, #32
    f084:	fa00 f202 	lsl.w	r2, r0, r2
    f088:	fa20 fe06 	lsr.w	lr, r0, r6
    f08c:	f1a6 0720 	sub.w	r7, r6, #32
    f090:	fa20 f707 	lsr.w	r7, r0, r7
    f094:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f098:	4622      	mov	r2, r4
    f09a:	ea4e 0e07 	orr.w	lr, lr, r7
    f09e:	40f0      	lsrs	r0, r6
    f0a0:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f0a2:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f0a6:	65e0      	str	r0, [r4, #92]	; 0x5c
    f0a8:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f0ac:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f0ae:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f0b0:	f104 0812 	add.w	r8, r4, #18
    f0b4:	7056      	strb	r6, [r2, #1]
    f0b6:	7096      	strb	r6, [r2, #2]
    f0b8:	70d6      	strb	r6, [r2, #3]
    f0ba:	7116      	strb	r6, [r2, #4]
    f0bc:	7156      	strb	r6, [r2, #5]
    f0be:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f0c0:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f0c4:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f0c6:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f0ca:	4442      	add	r2, r8
    f0cc:	3301      	adds	r3, #1
    f0ce:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f0d0:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f0d4:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f0d6:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f0d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f0da:	f001 ff53 	bl	10f84 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f0de:	4631      	mov	r1, r6
    f0e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f0e2:	f001 fea5 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f0e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f0ea:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f0ee:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f0f0:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f0f2:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f0f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f0f6:	f001 fe9b 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f0fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f0fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f100:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f104:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f108:	2701      	movs	r7, #1
    f10a:	4442      	add	r2, r8
    f10c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f110:	4421      	add	r1, r4
    f112:	f001 ff37 	bl	10f84 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f116:	4631      	mov	r1, r6
    f118:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f11a:	f001 fe89 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f11e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f122:	4b22      	ldr	r3, [pc, #136]	; (f1ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f124:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f128:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f12c:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f130:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f134:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f138:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f13c:	f04f 0800 	mov.w	r8, #0
    f140:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f144:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f148:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f14c:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f14e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f152:	e757      	b.n	f004 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f154:	2309      	movs	r3, #9
    f156:	e71c      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f158:	2304      	movs	r3, #4
    f15a:	e71a      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f15c:	2306      	movs	r3, #6
    f15e:	e718      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f160:	2307      	movs	r3, #7
    f162:	e716      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f164:	2308      	movs	r3, #8
    f166:	e714      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f168:	230a      	movs	r3, #10
    f16a:	e712      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f16c:	2300      	movs	r3, #0
    f16e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f172:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f176:	4a0f      	ldr	r2, [pc, #60]	; (f1b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f178:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f17a:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f17c:	f04f 0000 	mov.w	r0, #0
    f180:	f04f 0100 	mov.w	r1, #0
    f184:	bfcc      	ite	gt
    f186:	105b      	asrgt	r3, r3, #1
    f188:	2301      	movle	r3, #1
    f18a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f18e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f192:	e74b      	b.n	f02c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f194:	230f      	movs	r3, #15
    f196:	e6fc      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f198:	230b      	movs	r3, #11
    f19a:	e6fa      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f19c:	230c      	movs	r3, #12
    f19e:	e6f8      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f1a0:	230d      	movs	r3, #13
    f1a2:	e6f6      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f1a4:	230e      	movs	r3, #14
    f1a6:	e6f4      	b.n	ef92 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f1a8:	2300      	movs	r3, #0
    f1aa:	e70c      	b.n	efc6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f1ac:	200019d0 	.word	0x200019d0
    f1b0:	20001be0 	.word	0x20001be0
    f1b4:	20001f18 	.word	0x20001f18

0000f1b8 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f1bc:	4f42      	ldr	r7, [pc, #264]	; (f2c8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f1be:	683c      	ldr	r4, [r7, #0]
    f1c0:	f014 0401 	ands.w	r4, r4, #1
    f1c4:	d003      	beq.n	f1ce <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f1c6:	4b41      	ldr	r3, [pc, #260]	; (f2cc <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f1c8:	6818      	ldr	r0, [r3, #0]
    f1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f1ce:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f1d2:	f004 f909 	bl	133e8 <_Znwj>
            buf64.writeMarker = 0;
    f1d6:	4603      	mov	r3, r0
    f1d8:	4606      	mov	r6, r0
    f1da:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f1de:	f04f 38ff 	mov.w	r8, #4294967295
    f1e2:	f04f 39ff 	mov.w	r9, #4294967295
    f1e6:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f1e8:	7074      	strb	r4, [r6, #1]
    f1ea:	705c      	strb	r4, [r3, #1]
    f1ec:	709c      	strb	r4, [r3, #2]
    f1ee:	70dc      	strb	r4, [r3, #3]
    f1f0:	711c      	strb	r4, [r3, #4]
    f1f2:	715c      	strb	r4, [r3, #5]
    f1f4:	719c      	strb	r4, [r3, #6]
    f1f6:	71dc      	strb	r4, [r3, #7]
    f1f8:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f1fa:	7274      	strb	r4, [r6, #9]
    f1fc:	72b4      	strb	r4, [r6, #10]
    f1fe:	72f4      	strb	r4, [r6, #11]
    f200:	7334      	strb	r4, [r6, #12]
    f202:	7374      	strb	r4, [r6, #13]
    f204:	73b4      	strb	r4, [r6, #14]
    f206:	73f4      	strb	r4, [r6, #15]
    f208:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f20a:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f20c:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f20e:	74f4      	strb	r4, [r6, #19]
    f210:	7534      	strb	r4, [r6, #20]
    f212:	7574      	strb	r4, [r6, #21]
    f214:	75b4      	strb	r4, [r6, #22]
    f216:	75f4      	strb	r4, [r6, #23]
    f218:	7634      	strb	r4, [r6, #24]
    f21a:	7674      	strb	r4, [r6, #25]
    f21c:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f21e:	76f4      	strb	r4, [r6, #27]
    f220:	7734      	strb	r4, [r6, #28]
    f222:	7774      	strb	r4, [r6, #29]
    f224:	77b4      	strb	r4, [r6, #30]
    f226:	77f4      	strb	r4, [r6, #31]
    f228:	f886 4020 	strb.w	r4, [r6, #32]
    f22c:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f230:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f234:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f238:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f23c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f240:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f244:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f248:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f24c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f250:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f254:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f258:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f25c:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f260:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f264:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f268:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f26c:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f270:	2301      	movs	r3, #1
    f272:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f276:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f27a:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f27e:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f282:	62b4      	str	r4, [r6, #40]	; 0x28
    f284:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f288:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f28c:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f290:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f294:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f298:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f29c:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f2a0:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f2a4:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f2a8:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f2ac:	4620      	mov	r0, r4
    f2ae:	3428      	adds	r4, #40	; 0x28
    f2b0:	f000 fc8a 	bl	fbc8 <_ZN9ClearCore7CcioPinC1Ev>
    f2b4:	42ac      	cmp	r4, r5
    f2b6:	d1f9      	bne.n	f2ac <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f2b8:	4a04      	ldr	r2, [pc, #16]	; (f2cc <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f2ba:	2301      	movs	r3, #1
    f2bc:	6016      	str	r6, [r2, #0]
    f2be:	4630      	mov	r0, r6
    f2c0:	603b      	str	r3, [r7, #0]
}
    f2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2c6:	bf00      	nop
    f2c8:	20001ef8 	.word	0x20001ef8
    f2cc:	20001f00 	.word	0x20001f00

0000f2d0 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f2d0:	b570      	push	{r4, r5, r6, lr}
    f2d2:	4606      	mov	r6, r0
    f2d4:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f2d8:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f2da:	682b      	ldr	r3, [r5, #0]
    f2dc:	b221      	sxth	r1, r4
    f2de:	3401      	adds	r4, #1
    f2e0:	4628      	mov	r0, r5
    f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f2e4:	b2a4      	uxth	r4, r4
    f2e6:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f2e8:	2c80      	cmp	r4, #128	; 0x80
    f2ea:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f2ee:	d1f4      	bne.n	f2da <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f2f0:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f2f4:	2b02      	cmp	r3, #2
    f2f6:	d00b      	beq.n	f310 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f2f8:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f2fc:	2b00      	cmp	r3, #0
    f2fe:	d13c      	bne.n	f37a <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f300:	4a20      	ldr	r2, [pc, #128]	; (f384 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f302:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f304:	6812      	ldr	r2, [r2, #0]
    f306:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f30a:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f30c:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f310:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f312:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f314:	2200      	movs	r2, #0
    f316:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f318:	f04f 34ff 	mov.w	r4, #4294967295
    f31c:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f320:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f324:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f328:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f32c:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f330:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f334:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f338:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f33c:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f340:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f344:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f348:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f34c:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f350:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f354:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f358:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f35c:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f360:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f364:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f368:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f36c:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f370:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f374:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f378:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f37a:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f37e:	2b00      	cmp	r3, #0
    f380:	d1be      	bne.n	f300 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f382:	e7c5      	b.n	f310 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f384:	20001be0 	.word	0x20001be0

0000f388 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f388:	3940      	subs	r1, #64	; 0x40
    f38a:	b28b      	uxth	r3, r1
    f38c:	2b3f      	cmp	r3, #63	; 0x3f
    f38e:	d80f      	bhi.n	f3b0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f390:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f392:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f394:	b2c9      	uxtb	r1, r1
    f396:	f1c1 0320 	rsb	r3, r1, #32
    f39a:	fa02 f303 	lsl.w	r3, r2, r3
    f39e:	40c8      	lsrs	r0, r1
    f3a0:	3920      	subs	r1, #32
    f3a2:	4318      	orrs	r0, r3
    f3a4:	fa22 f101 	lsr.w	r1, r2, r1
    f3a8:	4308      	orrs	r0, r1
}
    f3aa:	f000 0001 	and.w	r0, r0, #1
    f3ae:	4770      	bx	lr
    f3b0:	2000      	movs	r0, #0
    f3b2:	f000 0001 	and.w	r0, r0, #1
    f3b6:	4770      	bx	lr

0000f3b8 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f3b8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f3ba:	2900      	cmp	r1, #0
    f3bc:	f000 8084 	beq.w	f4c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f3c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f3c4:	2b00      	cmp	r3, #0
    f3c6:	d07f      	beq.n	f4c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f3c8:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f3cc:	2a00      	cmp	r2, #0
    f3ce:	d17b      	bne.n	f4c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f3d4:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f3d8:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f3dc:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f3de:	f000 80a3 	beq.w	f528 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f3e2:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f3e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f3ea:	2400      	movs	r4, #0
    f3ec:	2500      	movs	r5, #0
    f3ee:	4690      	mov	r8, r2
    f3f0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f3f4:	4696      	mov	lr, r2
    f3f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f3fa:	e9cd 4500 	strd	r4, r5, [sp]
    f3fe:	2201      	movs	r2, #1
    f400:	2300      	movs	r3, #0
    f402:	4626      	mov	r6, r4
    f404:	462f      	mov	r7, r5
    f406:	9106      	str	r1, [sp, #24]
    f408:	e037      	b.n	f47a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f40a:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f40e:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f412:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f416:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f41a:	f108 0501 	add.w	r5, r8, #1
    f41e:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f420:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f422:	ea46 0602 	orr.w	r6, r6, r2
    f426:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f42a:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f42e:	db06      	blt.n	f43e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f430:	b12c      	cbz	r4, f43e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f432:	e9dd 4500 	ldrd	r4, r5, [sp]
    f436:	4314      	orrs	r4, r2
    f438:	431d      	orrs	r5, r3
    f43a:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f43e:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f442:	ea04 0802 	and.w	r8, r4, r2
    f446:	ea05 0903 	and.w	r9, r5, r3
    f44a:	ea58 0109 	orrs.w	r1, r8, r9
    f44e:	d00b      	beq.n	f468 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f450:	ea24 0402 	bic.w	r4, r4, r2
    f454:	ea25 0503 	bic.w	r5, r5, r3
    f458:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f45c:	e9dd 4500 	ldrd	r4, r5, [sp]
    f460:	4314      	orrs	r4, r2
    f462:	431d      	orrs	r5, r3
    f464:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f468:	f10e 0e01 	add.w	lr, lr, #1
    f46c:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f470:	1892      	adds	r2, r2, r2
    f472:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f474:	45e6      	cmp	lr, ip
    f476:	46f0      	mov	r8, lr
    f478:	da27      	bge.n	f4ca <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f47a:	ea0a 0402 	and.w	r4, sl, r2
    f47e:	ea0b 0503 	and.w	r5, fp, r3
    f482:	ea54 0105 	orrs.w	r1, r4, r5
    f486:	d0ef      	beq.n	f468 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f488:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f48c:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f490:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f494:	3c01      	subs	r4, #1
    f496:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f49a:	2c00      	cmp	r4, #0
    f49c:	d1e4      	bne.n	f468 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f49e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f4a2:	4014      	ands	r4, r2
    f4a4:	401d      	ands	r5, r3
    f4a6:	432c      	orrs	r4, r5
    f4a8:	d1af      	bne.n	f40a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f4aa:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f4ae:	ea04 0802 	and.w	r8, r4, r2
    f4b2:	ea05 0903 	and.w	r9, r5, r3
    f4b6:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f4ba:	ea58 0409 	orrs.w	r4, r8, r9
    f4be:	f000 8115 	beq.w	f6ec <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f4c2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f4c6:	e7c3      	b.n	f450 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f4c8:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f4ca:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f4ce:	9906      	ldr	r1, [sp, #24]
    f4d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f4d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f4d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f4dc:	4642      	mov	r2, r8
    f4de:	464b      	mov	r3, r9
    f4e0:	4322      	orrs	r2, r4
    f4e2:	432b      	orrs	r3, r5
    f4e4:	4614      	mov	r4, r2
    f4e6:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f4e8:	4642      	mov	r2, r8
    f4ea:	464b      	mov	r3, r9
    f4ec:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f4f0:	43f6      	mvns	r6, r6
    f4f2:	43ff      	mvns	r7, r7
    f4f4:	ea48 0802 	orr.w	r8, r8, r2
    f4f8:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f4fc:	ea04 0206 	and.w	r2, r4, r6
    f500:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f504:	e9dd 4500 	ldrd	r4, r5, [sp]
    f508:	ea2a 0404 	bic.w	r4, sl, r4
    f50c:	ea2b 0505 	bic.w	r5, fp, r5
    f510:	46a2      	mov	sl, r4
    f512:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f514:	ea08 0406 	and.w	r4, r8, r6
    f518:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f51c:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f520:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f524:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f528:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f52c:	3d01      	subs	r5, #1
    f52e:	b2ed      	uxtb	r5, r5
    f530:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f534:	b115      	cbz	r5, f53c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f536:	b011      	add	sp, #68	; 0x44
    f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f53c:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f53e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f542:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f546:	4608      	mov	r0, r1
    f548:	f001 fd9e 	bl	11088 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f54c:	4629      	mov	r1, r5
    f54e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f550:	f001 fc6e 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f554:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f558:	f10c 0309 	add.w	r3, ip, #9
    f55c:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f55e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f562:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f564:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f566:	2acc      	cmp	r2, #204	; 0xcc
    f568:	f000 814e 	beq.w	f808 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f56c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f570:	1c5a      	adds	r2, r3, #1
    f572:	b292      	uxth	r2, r2
    f574:	3b04      	subs	r3, #4
    f576:	4616      	mov	r6, r2
    f578:	920b      	str	r2, [sp, #44]	; 0x2c
    f57a:	b29b      	uxth	r3, r3
    f57c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f580:	4293      	cmp	r3, r2
    f582:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f586:	f240 81c6 	bls.w	f916 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f58a:	2200      	movs	r2, #0
    f58c:	2300      	movs	r3, #0
    f58e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f592:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f596:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f59a:	ea22 0000 	bic.w	r0, r2, r0
    f59e:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f5a2:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f5a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f5aa:	4610      	mov	r0, r2
    f5ac:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f5ae:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f5b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f5b6:	f1bc 0f00 	cmp.w	ip, #0
    f5ba:	f000 81d3 	beq.w	f964 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f5be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f5c2:	2200      	movs	r2, #0
    f5c4:	2000      	movs	r0, #0
    f5c6:	2100      	movs	r1, #0
    f5c8:	4613      	mov	r3, r2
    f5ca:	e9cd 0100 	strd	r0, r1, [sp]
    f5ce:	f04f 0801 	mov.w	r8, #1
    f5d2:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f5d6:	f04f 0a0c 	mov.w	sl, #12
    f5da:	e038      	b.n	f64e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f5dc:	0099      	lsls	r1, r3, #2
    f5de:	18c8      	adds	r0, r1, r3
    f5e0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f5e4:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f5e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    f5ec:	fa1f fb8b 	uxth.w	fp, fp
    f5f0:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f5f4:	f1bb 0f00 	cmp.w	fp, #0
    f5f8:	d107      	bne.n	f60a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f5fa:	ea26 0608 	bic.w	r6, r6, r8
    f5fe:	ea27 0709 	bic.w	r7, r7, r9
    f602:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f606:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f60a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f60e:	ea06 0608 	and.w	r6, r6, r8
    f612:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f616:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f618:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f61c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f620:	d04e      	beq.n	f6c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f622:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f626:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f62a:	b93b      	cbnz	r3, f63c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f62c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f630:	ea40 0008 	orr.w	r0, r0, r8
    f634:	ea41 0109 	orr.w	r1, r1, r9
    f638:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f63c:	3201      	adds	r2, #1
    f63e:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f640:	eb18 0808 	adds.w	r8, r8, r8
    f644:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f648:	4596      	cmp	lr, r2
    f64a:	4613      	mov	r3, r2
    f64c:	dd59      	ble.n	f702 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f64e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f652:	4606      	mov	r6, r0
    f654:	460f      	mov	r7, r1
    f656:	ea00 0008 	and.w	r0, r0, r8
    f65a:	ea01 0109 	and.w	r1, r1, r9
    f65e:	4301      	orrs	r1, r0
    f660:	d1bc      	bne.n	f5dc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f666:	ea00 0008 	and.w	r0, r0, r8
    f66a:	ea01 0109 	and.w	r1, r1, r9
    f66e:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f670:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f674:	eb01 0003 	add.w	r0, r1, r3
    f678:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f67c:	d02b      	beq.n	f6d6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f67e:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f682:	f1bb 0f00 	cmp.w	fp, #0
    f686:	d0c0      	beq.n	f60a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f688:	f10b 3bff 	add.w	fp, fp, #4294967295
    f68c:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f690:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f694:	f1bb 0f00 	cmp.w	fp, #0
    f698:	d1b7      	bne.n	f60a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f69a:	ea46 0608 	orr.w	r6, r6, r8
    f69e:	ea47 0709 	orr.w	r7, r7, r9
    f6a2:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f6a6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f6aa:	ea46 0608 	orr.w	r6, r6, r8
    f6ae:	ea47 0709 	orr.w	r7, r7, r9
    f6b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f6b6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f6ba:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f6be:	e7a4      	b.n	f60a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f6c0:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f6c4:	2800      	cmp	r0, #0
    f6c6:	d0b9      	beq.n	f63c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f6c8:	3801      	subs	r0, #1
    f6ca:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f6cc:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f6d0:	2800      	cmp	r0, #0
    f6d2:	d0ab      	beq.n	f62c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f6d4:	e7b2      	b.n	f63c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f6d6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f6da:	ea26 0608 	bic.w	r6, r6, r8
    f6de:	ea27 0709 	bic.w	r7, r7, r9
    f6e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f6e6:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f6ea:	e78e      	b.n	f60a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f6ec:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f6f0:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f6f4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f6f8:	4314      	orrs	r4, r2
    f6fa:	431d      	orrs	r5, r3
    f6fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f700:	e6b2      	b.n	f468 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f702:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f706:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f70a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f70e:	ea80 000a 	eor.w	r0, r0, sl
    f712:	ea81 010b 	eor.w	r1, r1, fp
    f716:	4002      	ands	r2, r0
    f718:	400b      	ands	r3, r1
    f71a:	ea82 080a 	eor.w	r8, r2, sl
    f71e:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f722:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f726:	ea28 000a 	bic.w	r0, r8, sl
    f72a:	ea29 010b 	bic.w	r1, r9, fp
    f72e:	ea40 0602 	orr.w	r6, r0, r2
    f732:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f736:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f73a:	e9cd 8900 	strd	r8, r9, [sp]
    f73e:	ea2a 0808 	bic.w	r8, sl, r8
    f742:	ea2b 0909 	bic.w	r9, fp, r9
    f746:	ea43 0109 	orr.w	r1, r3, r9
    f74a:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f74e:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    f752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f754:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f758:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f75c:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    f760:	2b00      	cmp	r3, #0
    f762:	f000 8083 	beq.w	f86c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    f766:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f76a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    f76e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f772:	ea03 0907 	and.w	r9, r3, r7
    f776:	ea29 0101 	bic.w	r1, r9, r1
    f77a:	ea02 0806 	and.w	r8, r2, r6
    f77e:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f780:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f784:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f786:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f78a:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f78c:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f78e:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f792:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f796:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f79a:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f79c:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f79e:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f7a2:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f7a6:	fa01 f505 	lsl.w	r5, r1, r5
    f7aa:	fa20 f203 	lsr.w	r2, r0, r3
    f7ae:	432a      	orrs	r2, r5
    f7b0:	f1a3 0520 	sub.w	r5, r3, #32
    f7b4:	fa21 f505 	lsr.w	r5, r1, r5
    f7b8:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    f7ba:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f7be:	f8d4 500d 	ldr.w	r5, [r4, #13]
    f7c2:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    f7c6:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f7ca:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f7ce:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    f7d0:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f7d4:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    f7d6:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f7da:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f7dc:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f7e0:	2101      	movs	r1, #1
    f7e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f7e4:	f001 fb24 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f7e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f7ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f7ee:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f7f0:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f7f4:	2501      	movs	r5, #1
    f7f6:	321b      	adds	r2, #27
    f7f8:	4421      	add	r1, r4
    f7fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    f7fe:	b011      	add	sp, #68	; 0x44
    f800:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f804:	f001 bbee 	b.w	10fe4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f808:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    f80c:	f8d4 701f 	ldr.w	r7, [r4, #31]
    f810:	f8d4 601b 	ldr.w	r6, [r4, #27]
    f814:	42bb      	cmp	r3, r7
    f816:	bf08      	it	eq
    f818:	42b2      	cmpeq	r2, r6
    f81a:	f47f aea7 	bne.w	f56c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f81e:	f8d4 2013 	ldr.w	r2, [r4, #19]
    f822:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    f826:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f82a:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    f82e:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f830:	ea6f 0903 	mvn.w	r9, r3
    f834:	ea6f 0802 	mvn.w	r8, r2
    f838:	f1c6 0720 	rsb	r7, r6, #32
    f83c:	fa28 f306 	lsr.w	r3, r8, r6
    f840:	fa09 f707 	lsl.w	r7, r9, r7
    f844:	f1a6 0220 	sub.w	r2, r6, #32
    f848:	fa29 f202 	lsr.w	r2, r9, r2
    f84c:	433b      	orrs	r3, r7
    f84e:	4313      	orrs	r3, r2
    f850:	9308      	str	r3, [sp, #32]
    f852:	fa29 f306 	lsr.w	r3, r9, r6
    f856:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    f858:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f85c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    f860:	4042      	eors	r2, r0
    f862:	404b      	eors	r3, r1
    f864:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f868:	950b      	str	r5, [sp, #44]	; 0x2c
    f86a:	e694      	b.n	f596 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f86c:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    f870:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    f874:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f878:	4016      	ands	r6, r2
    f87a:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    f87c:	ea40 0206 	orr.w	r2, r0, r6
    f880:	ea41 0307 	orr.w	r3, r1, r7
    f884:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    f888:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    f88c:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f88e:	46b0      	mov	r8, r6
    f890:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    f892:	bf08      	it	eq
    f894:	42b2      	cmpeq	r2, r6
    f896:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    f89a:	f43f af64 	beq.w	f766 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    f89e:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    f8a2:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    f8a6:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    f8aa:	d053      	beq.n	f954 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    f8ac:	f8df e0c8 	ldr.w	lr, [pc, #200]	; f978 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    f8b0:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f8b4:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    f8b8:	433e      	orrs	r6, r7
    f8ba:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    f8be:	ea29 0701 	bic.w	r7, r9, r1
    f8c2:	ea28 0600 	bic.w	r6, r8, r0
    f8c6:	ea56 0307 	orrs.w	r3, r6, r7
    f8ca:	f43f af4c 	beq.w	f766 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    f8ce:	ea48 0200 	orr.w	r2, r8, r0
    f8d2:	ea49 0301 	orr.w	r3, r9, r1
    f8d6:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f8da:	f1bc 0f00 	cmp.w	ip, #0
    f8de:	f43f af42 	beq.w	f766 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    f8e2:	4e24      	ldr	r6, [pc, #144]	; (f974 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f8e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f8e6:	2701      	movs	r7, #1
    f8e8:	e005      	b.n	f8f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f8ea:	3501      	adds	r5, #1
    f8ec:	b2ed      	uxtb	r5, r5
    f8ee:	4565      	cmp	r5, ip
    f8f0:	462a      	mov	r2, r5
    f8f2:	f6bf af38 	bge.w	f766 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    f8f6:	ab10      	add	r3, sp, #64	; 0x40
    f8f8:	442b      	add	r3, r5
    f8fa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    f8fe:	2b00      	cmp	r3, #0
    f900:	d0f3      	beq.n	f8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f902:	fa07 f202 	lsl.w	r2, r7, r2
    f906:	b2d2      	uxtb	r2, r2
    f908:	2103      	movs	r1, #3
    f90a:	6830      	ldr	r0, [r6, #0]
    f90c:	f001 ff86 	bl	1181c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f910:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f914:	e7e9      	b.n	f8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    f916:	2101      	movs	r1, #1
    f918:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f91c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f91e:	f001 fa87 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    f922:	4914      	ldr	r1, [pc, #80]	; (f974 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    f924:	2300      	movs	r3, #0
    f926:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f928:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    f92a:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f92e:	2102      	movs	r1, #2
    f930:	2208      	movs	r2, #8
    f932:	f001 ff73 	bl	1181c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f936:	4b10      	ldr	r3, [pc, #64]	; (f978 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    f938:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    f93c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f940:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f944:	43d2      	mvns	r2, r2
    f946:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    f948:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f94a:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f94e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    f952:	e5f0      	b.n	f536 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    f954:	4a08      	ldr	r2, [pc, #32]	; (f978 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f956:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    f95a:	ea23 0307 	bic.w	r3, r3, r7
    f95e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    f962:	e700      	b.n	f766 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f964:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    f968:	2200      	movs	r2, #0
    f96a:	2300      	movs	r3, #0
    f96c:	e9cd 2300 	strd	r2, r3, [sp]
    f970:	e6c9      	b.n	f706 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    f972:	bf00      	nop
    f974:	20001f18 	.word	0x20001f18
    f978:	200019d0 	.word	0x200019d0

0000f97c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f97c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f97e:	b1c1      	cbz	r1, f9b2 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    f980:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f984:	b1aa      	cbz	r2, f9b2 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    f986:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    f98a:	b192      	cbz	r2, f9b2 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f98c:	4a09      	ldr	r2, [pc, #36]	; (f9b4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    f98e:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f990:	6812      	ldr	r2, [r2, #0]
    f992:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f996:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    f99a:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    f99c:	42a2      	cmp	r2, r4
    f99e:	d907      	bls.n	f9b0 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    f9a0:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f9a2:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    f9a6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    f9aa:	bc30      	pop	{r4, r5}
    f9ac:	f7ff b9c0 	b.w	ed30 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    f9b0:	bc30      	pop	{r4, r5}
    f9b2:	4770      	bx	lr
    f9b4:	20001be0 	.word	0x20001be0

0000f9b8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    f9b8:	4a0e      	ldr	r2, [pc, #56]	; (f9f4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    f9ba:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    f9bc:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    f9c0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    f9c4:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    f9c8:	43f3      	mvns	r3, r6
    f9ca:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    f9cc:	2700      	movs	r7, #0
    f9ce:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    f9d2:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    f9d6:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f9da:	bf15      	itete	ne
    f9dc:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f9e0:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f9e4:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f9e6:	400b      	andeq	r3, r1
    f9e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    f9ec:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    f9ee:	f7ff bc6f 	b.w	f2d0 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    f9f2:	bf00      	nop
    f9f4:	200019d0 	.word	0x200019d0

0000f9f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f9f8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f9fc:	2b02      	cmp	r3, #2
    f9fe:	d005      	beq.n	fa0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    fa00:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    fa04:	b12b      	cbz	r3, fa12 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    fa06:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    fa0a:	b913      	cbnz	r3, fa12 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    fa0c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    fa10:	4770      	bx	lr
    m_serPort = comInstance;
    fa12:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    fa14:	b109      	cbz	r1, fa1a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    fa16:	f7ff b98b 	b.w	ed30 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    fa1a:	4b04      	ldr	r3, [pc, #16]	; (fa2c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fa1c:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    fa20:	681b      	ldr	r3, [r3, #0]
    fa22:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    fa26:	4608      	mov	r0, r1
    fa28:	4770      	bx	lr
    fa2a:	bf00      	nop
    fa2c:	20001be0 	.word	0x20001be0

0000fa30 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    fa30:	3940      	subs	r1, #64	; 0x40
    fa32:	b28b      	uxth	r3, r1
    fa34:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    fa36:	bf9d      	ittte	ls
    fa38:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fa3c:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fa40:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fa42:	2000      	movhi	r0, #0
    }
}
    fa44:	4770      	bx	lr
    fa46:	bf00      	nop

0000fa48 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    fa48:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    fa4a:	f7ff fbb5 	bl	f1b8 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    fa4e:	4b01      	ldr	r3, [pc, #4]	; (fa54 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    fa50:	6018      	str	r0, [r3, #0]
    fa52:	bd08      	pop	{r3, pc}
    fa54:	20001efc 	.word	0x20001efc

0000fa58 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    fa58:	7980      	ldrb	r0, [r0, #6]
    fa5a:	4770      	bx	lr

0000fa5c <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    fa5c:	2009      	movs	r0, #9
    fa5e:	4770      	bx	lr

0000fa60 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    fa60:	7980      	ldrb	r0, [r0, #6]
    }
    fa62:	f1a0 0004 	sub.w	r0, r0, #4
    fa66:	fab0 f080 	clz	r0, r0
    fa6a:	0940      	lsrs	r0, r0, #5
    fa6c:	4770      	bx	lr
    fa6e:	bf00      	nop

0000fa70 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    fa70:	4770      	bx	lr
    fa72:	bf00      	nop

0000fa74 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    fa74:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fa76:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    fa7a:	2201      	movs	r2, #1
    fa7c:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    fa80:	f1c5 0420 	rsb	r4, r5, #32
    fa84:	fa22 f404 	lsr.w	r4, r2, r4
    fa88:	fa02 f303 	lsl.w	r3, r2, r3
    fa8c:	4323      	orrs	r3, r4
    fa8e:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fa90:	2602      	movs	r6, #2
    m_filterLength = 3;
    fa92:	4d07      	ldr	r5, [pc, #28]	; (fab0 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    fa94:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    fa96:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fa98:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fa9a:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fa9c:	6105      	str	r5, [r0, #16]
    fa9e:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    faa0:	6082      	str	r2, [r0, #8]
    faa2:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    faa4:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    faa6:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    faa8:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    faaa:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    faac:	bc70      	pop	{r4, r5, r6}
    faae:	4770      	bx	lr
    fab0:	00010003 	.word	0x00010003

0000fab4 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fab4:	7983      	ldrb	r3, [r0, #6]
    fab6:	428b      	cmp	r3, r1
    fab8:	d02f      	beq.n	fb1a <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    faba:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fabc:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fac0:	d014      	beq.n	faec <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fac2:	2904      	cmp	r1, #4
    fac4:	d10b      	bne.n	fade <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fac6:	4b16      	ldr	r3, [pc, #88]	; (fb20 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fac8:	681e      	ldr	r6, [r3, #0]
    faca:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    face:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fad2:	432b      	orrs	r3, r5
    fad4:	4322      	orrs	r2, r4
    fad6:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fada:	460b      	mov	r3, r1
            m_mode = newMode;
    fadc:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fade:	1ac8      	subs	r0, r1, r3
    fae0:	fab0 f080 	clz	r0, r0
    fae4:	0940      	lsrs	r0, r0, #5
}
    fae6:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    faea:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    faec:	4b0c      	ldr	r3, [pc, #48]	; (fb20 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    faee:	681e      	ldr	r6, [r3, #0]
    faf0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    faf4:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    faf8:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fafc:	43d2      	mvns	r2, r2
    fafe:	43db      	mvns	r3, r3
    fb00:	4014      	ands	r4, r2
    fb02:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fb04:	ea02 0208 	and.w	r2, r2, r8
    fb08:	ea03 0309 	and.w	r3, r3, r9
    fb0c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fb10:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fb14:	460b      	mov	r3, r1
            m_mode = newMode;
    fb16:	7181      	strb	r1, [r0, #6]
            break;
    fb18:	e7e1      	b.n	fade <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fb1a:	2001      	movs	r0, #1
    fb1c:	4770      	bx	lr
    fb1e:	bf00      	nop
    fb20:	20001efc 	.word	0x20001efc

0000fb24 <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fb24:	7983      	ldrb	r3, [r0, #6]
    fb26:	2b02      	cmp	r3, #2
    fb28:	d010      	beq.n	fb4c <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fb2a:	2b04      	cmp	r3, #4
    fb2c:	d10c      	bne.n	fb48 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fb2e:	4b0b      	ldr	r3, [pc, #44]	; (fb5c <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fb30:	681b      	ldr	r3, [r3, #0]
    fb32:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fb36:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fb3a:	4002      	ands	r2, r0
    fb3c:	400b      	ands	r3, r1
    fb3e:	4313      	orrs	r3, r2
    fb40:	bf14      	ite	ne
    fb42:	2001      	movne	r0, #1
    fb44:	2000      	moveq	r0, #0
            break;
    fb46:	4770      	bx	lr
    switch (m_mode) {
    fb48:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fb4a:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fb4c:	4b03      	ldr	r3, [pc, #12]	; (fb5c <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fb4e:	681b      	ldr	r3, [r3, #0]
    fb50:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fb54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    fb58:	e7ef      	b.n	fb3a <_ZN9ClearCore7CcioPin5StateEv+0x16>
    fb5a:	bf00      	nop
    fb5c:	20001efc 	.word	0x20001efc

0000fb60 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    fb60:	4b06      	ldr	r3, [pc, #24]	; (fb7c <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    fb62:	681b      	ldr	r3, [r3, #0]
    fb64:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fb68:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fb6c:	4002      	ands	r2, r0
    fb6e:	400b      	ands	r3, r1
    fb70:	4313      	orrs	r3, r2
}
    fb72:	bf14      	ite	ne
    fb74:	2001      	movne	r0, #1
    fb76:	2000      	moveq	r0, #0
    fb78:	4770      	bx	lr
    fb7a:	bf00      	nop
    fb7c:	20001efc 	.word	0x20001efc

0000fb80 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fb80:	7983      	ldrb	r3, [r0, #6]
    fb82:	2b04      	cmp	r3, #4
    fb84:	d11c      	bne.n	fbc0 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    fb86:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    fb88:	4b0e      	ldr	r3, [pc, #56]	; (fbc4 <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    fb8a:	b969      	cbnz	r1, fba8 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fb8c:	6819      	ldr	r1, [r3, #0]
    fb8e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fb92:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    fb96:	ea24 0202 	bic.w	r2, r4, r2
    fb9a:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fb9e:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fba0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fba4:	bc30      	pop	{r4, r5}
    fba6:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    fba8:	6819      	ldr	r1, [r3, #0]
    fbaa:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fbae:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    fbb2:	4322      	orrs	r2, r4
    fbb4:	432b      	orrs	r3, r5
    fbb6:	2001      	movs	r0, #1
    fbb8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fbbc:	bc30      	pop	{r4, r5}
    fbbe:	4770      	bx	lr
    bool success = false;
    fbc0:	2000      	movs	r0, #0
    fbc2:	4770      	bx	lr
    fbc4:	20001efc 	.word	0x20001efc

0000fbc8 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    fbc8:	b5d0      	push	{r4, r6, r7, lr}
    fbca:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    fbcc:	f7fe fca6 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
    fbd0:	4b08      	ldr	r3, [pc, #32]	; (fbf4 <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    fbd2:	4909      	ldr	r1, [pc, #36]	; (fbf8 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    fbd4:	6023      	str	r3, [r4, #0]
    fbd6:	2600      	movs	r6, #0
    fbd8:	2300      	movs	r3, #0
    fbda:	2700      	movs	r7, #0
    fbdc:	220c      	movs	r2, #12
    fbde:	e9c4 6702 	strd	r6, r7, [r4, #8]
    fbe2:	6121      	str	r1, [r4, #16]
    fbe4:	6162      	str	r2, [r4, #20]
    fbe6:	61a3      	str	r3, [r4, #24]
    fbe8:	61e3      	str	r3, [r4, #28]
    fbea:	6223      	str	r3, [r4, #32]
    fbec:	6263      	str	r3, [r4, #36]	; 0x24
    fbee:	4620      	mov	r0, r4
    fbf0:	bdd0      	pop	{r4, r6, r7, pc}
    fbf2:	bf00      	nop
    fbf4:	0002347c 	.word	0x0002347c
    fbf8:	00010003 	.word	0x00010003

0000fbfc <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    fbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    fbfe:	4e14      	ldr	r6, [pc, #80]	; (fc50 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    fc00:	6834      	ldr	r4, [r6, #0]
    fc02:	f014 0401 	ands.w	r4, r4, #1
    fc06:	d002      	beq.n	fc0e <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    fc08:	4b12      	ldr	r3, [pc, #72]	; (fc54 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    fc0a:	6818      	ldr	r0, [r3, #0]
    fc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc0e:	2080      	movs	r0, #128	; 0x80
    fc10:	f003 fbea 	bl	133e8 <_Znwj>
    fc14:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    fc16:	2701      	movs	r7, #1
    fc18:	2240      	movs	r2, #64	; 0x40
    fc1a:	602c      	str	r4, [r5, #0]
    fc1c:	606c      	str	r4, [r5, #4]
    fc1e:	60ac      	str	r4, [r5, #8]
    fc20:	60ec      	str	r4, [r5, #12]
    fc22:	612c      	str	r4, [r5, #16]
    fc24:	616c      	str	r4, [r5, #20]
    fc26:	4621      	mov	r1, r4
    fc28:	61ac      	str	r4, [r5, #24]
    fc2a:	61ec      	str	r4, [r5, #28]
    fc2c:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fc2e:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    fc30:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fc32:	62ec      	str	r4, [r5, #44]	; 0x2c
    fc34:	632c      	str	r4, [r5, #48]	; 0x30
    fc36:	636c      	str	r4, [r5, #52]	; 0x34
    fc38:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    fc3c:	303c      	adds	r0, #60	; 0x3c
    fc3e:	f00e fc55 	bl	1e4ec <memset>
    static InputManager *instance = new InputManager();
    fc42:	4b04      	ldr	r3, [pc, #16]	; (fc54 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    fc44:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    fc48:	6037      	str	r7, [r6, #0]
    fc4a:	601d      	str	r5, [r3, #0]
    fc4c:	4628      	mov	r0, r5
}
    fc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc50:	20001f04 	.word	0x20001f04
    fc54:	20001f0c 	.word	0x20001f0c

0000fc58 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    fc58:	4902      	ldr	r1, [pc, #8]	; (fc64 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    fc5a:	4a03      	ldr	r2, [pc, #12]	; (fc68 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    fc5c:	4b03      	ldr	r3, [pc, #12]	; (fc6c <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    fc5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    fc62:	4770      	bx	lr
    fc64:	41008020 	.word	0x41008020
    fc68:	410080a0 	.word	0x410080a0
    fc6c:	41008120 	.word	0x41008120

0000fc70 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    fc70:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    fc72:	b2cc      	uxtb	r4, r1
    fc74:	2c0f      	cmp	r4, #15
    fc76:	d82e      	bhi.n	fcd6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    fc78:	b1b2      	cbz	r2, fca8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    fc7a:	bb6b      	cbnz	r3, fcd8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    fc7c:	2301      	movs	r3, #1
    fc7e:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    fc82:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fc86:	f3bf 8f5b 	dmb	ish
    fc8a:	e853 2f00 	ldrex	r2, [r3]
    fc8e:	430a      	orrs	r2, r1
    fc90:	e843 2400 	strex	r4, r2, [r3]
    fc94:	2c00      	cmp	r4, #0
    fc96:	d1f8      	bne.n	fc8a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    fc98:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fc9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fca0:	b1cb      	cbz	r3, fcd6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    fca2:	4b10      	ldr	r3, [pc, #64]	; (fce4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fca4:	6119      	str	r1, [r3, #16]
    fca6:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    fca8:	2301      	movs	r3, #1
    fcaa:	fa03 f101 	lsl.w	r1, r3, r1
    fcae:	43ca      	mvns	r2, r1
    fcb0:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fcb4:	f3bf 8f5b 	dmb	ish
    fcb8:	e853 4f00 	ldrex	r4, [r3]
    fcbc:	4014      	ands	r4, r2
    fcbe:	e843 4e00 	strex	lr, r4, [r3]
    fcc2:	f1be 0f00 	cmp.w	lr, #0
    fcc6:	d1f7      	bne.n	fcb8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    fcc8:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fccc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fcd0:	b10b      	cbz	r3, fcd6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    fcd2:	4b04      	ldr	r3, [pc, #16]	; (fce4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fcd4:	60d9      	str	r1, [r3, #12]
    fcd6:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    fcd8:	2201      	movs	r2, #1
    fcda:	4b02      	ldr	r3, [pc, #8]	; (fce4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fcdc:	fa02 f101 	lsl.w	r1, r2, r1
    fce0:	6159      	str	r1, [r3, #20]
    fce2:	e7ce      	b.n	fc82 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    fce4:	40002800 	.word	0x40002800

0000fce8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    fce8:	290f      	cmp	r1, #15
    fcea:	dc14      	bgt.n	fd16 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    fcec:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    fcf0:	40cb      	lsrs	r3, r1
    fcf2:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fcf6:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    fcfa:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fcfc:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    fd00:	d10a      	bne.n	fd18 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    fd02:	4a0f      	ldr	r2, [pc, #60]	; (fd40 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fd04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    fd08:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fd0a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    fd0c:	b113      	cbz	r3, fd14 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    fd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    fd12:	4718      	bx	r3
    fd14:	bd10      	pop	{r4, pc}
    fd16:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fd18:	43dc      	mvns	r4, r3
    fd1a:	f100 0234 	add.w	r2, r0, #52	; 0x34
    fd1e:	f3bf 8f5b 	dmb	ish
    fd22:	e852 ef00 	ldrex	lr, [r2]
    fd26:	ea0e 0e04 	and.w	lr, lr, r4
    fd2a:	e842 ec00 	strex	ip, lr, [r2]
    fd2e:	f1bc 0f00 	cmp.w	ip, #0
    fd32:	d1f6      	bne.n	fd22 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    fd34:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    fd38:	4a01      	ldr	r2, [pc, #4]	; (fd40 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    fd3a:	60d3      	str	r3, [r2, #12]
    fd3c:	e7e1      	b.n	fd02 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    fd3e:	bf00      	nop
    fd40:	40002800 	.word	0x40002800

0000fd44 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fd44:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fd46:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fd48:	681b      	ldr	r3, [r3, #0]
    fd4a:	60c3      	str	r3, [r0, #12]
    fd4c:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fd4e:	404b      	eors	r3, r1
    fd50:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fd52:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fd54:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fd56:	6881      	ldr	r1, [r0, #8]
    fd58:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fd5a:	4053      	eors	r3, r2
    fd5c:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fd5e:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fd60:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fd62:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fd64:	4053      	eors	r3, r2
    fd66:	6203      	str	r3, [r0, #32]
    fd68:	4770      	bx	lr
    fd6a:	bf00      	nop

0000fd6c <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    fd6c:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    fd6e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fd70:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fd72:	f3bf 8f5b 	dmb	ish
    fd76:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    fd7a:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fd7e:	e852 1f00 	ldrex	r1, [r2]
    fd82:	4319      	orrs	r1, r3
    fd84:	e842 1e00 	strex	lr, r1, [r2]
    fd88:	f1be 0f00 	cmp.w	lr, #0
    fd8c:	d1f7      	bne.n	fd7e <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    fd8e:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    fd92:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fd94:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fd96:	f3bf 8f5b 	dmb	ish
    fd9a:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    fd9e:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fda2:	e852 1f00 	ldrex	r1, [r2]
    fda6:	4319      	orrs	r1, r3
    fda8:	e842 1e00 	strex	lr, r1, [r2]
    fdac:	f1be 0f00 	cmp.w	lr, #0
    fdb0:	d1f7      	bne.n	fda2 <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    fdb2:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    fdb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fdb8:	6283      	str	r3, [r0, #40]	; 0x28
    fdba:	f85d fb04 	ldr.w	pc, [sp], #4
    fdbe:	bf00      	nop

0000fdc0 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    fdc0:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    fdc2:	f7ff ff1b 	bl	fbfc <_ZN9ClearCore12InputManager8InstanceEv>
    fdc6:	4b01      	ldr	r3, [pc, #4]	; (fdcc <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    fdc8:	6018      	str	r0, [r3, #0]
    fdca:	bd08      	pop	{r3, pc}
    fdcc:	20001f08 	.word	0x20001f08

0000fdd0 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fdd0:	b530      	push	{r4, r5, lr}
    fdd2:	b083      	sub	sp, #12
    fdd4:	9d06      	ldr	r5, [sp, #24]
    fdd6:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
    fdda:	9500      	str	r5, [sp, #0]
    fddc:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fdde:	4604      	mov	r4, r0
      m_errorCode(0) {
    fde0:	2500      	movs	r5, #0
    fde2:	f000 ffbb 	bl	10d5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
    fde6:	4b09      	ldr	r3, [pc, #36]	; (fe0c <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
    fde8:	6023      	str	r3, [r4, #0]
    fdea:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
    fdee:	4620      	mov	r0, r4
    fdf0:	2101      	movs	r1, #1
    fdf2:	f001 f811 	bl	10e18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
    fdf6:	462a      	mov	r2, r5
    fdf8:	4629      	mov	r1, r5
    fdfa:	4620      	mov	r0, r4
    fdfc:	f001 f852 	bl	10ea4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
    fe00:	4620      	mov	r0, r4
    fe02:	f000 ff9f 	bl	10d44 <_ZN9ClearCore10SerialBase8PortOpenEv>
}
    fe06:	4620      	mov	r0, r4
    fe08:	b003      	add	sp, #12
    fe0a:	bd30      	pop	{r4, r5, pc}
    fe0c:	00022dc0 	.word	0x00022dc0

0000fe10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
    fe10:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fe14:	4770      	bx	lr
    fe16:	bf00      	nop

0000fe18 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
    fe18:	2300      	movs	r3, #0
    m_outTail = 0;
    fe1a:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
    fe1e:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
    fe22:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    fe26:	4770      	bx	lr

0000fe28 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe28:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
    fe2a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe2c:	2104      	movs	r1, #4
    m_inTail = 0;
    fe2e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
    fe32:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
    fe34:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe38:	7591      	strb	r1, [r2, #22]
    fe3a:	4770      	bx	lr

0000fe3c <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
    fe3c:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    fe40:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    fe44:	4291      	cmp	r1, r2
    fe46:	d012      	beq.n	fe6e <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
    fe48:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
    fe4a:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
    fe4e:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe52:	6904      	ldr	r4, [r0, #16]
    fe54:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
    fe56:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
    fe58:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe5a:	2504      	movs	r5, #4
    fe5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
    fe60:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
    fe64:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe68:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
    fe6a:	bc30      	pop	{r4, r5}
    fe6c:	4770      	bx	lr
        return SerialBase::EOB;
    fe6e:	f04f 30ff 	mov.w	r0, #4294967295
    fe72:	4770      	bx	lr

0000fe74 <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
    fe74:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    fe78:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    fe7c:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
    fe7e:	bf1d      	ittte	ne
    fe80:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
    fe84:	3318      	addne	r3, #24
    fe86:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
    fe8a:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
    fe8e:	4770      	bx	lr

0000fe90 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
    fe90:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    fe94:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
    fe98:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
    fe9a:	bf48      	it	mi
    fe9c:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
    fe9e:	4770      	bx	lr

0000fea0 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
    fea0:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    fea4:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    fea8:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
    feaa:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
    feac:	bf48      	it	mi
    feae:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
    feb0:	4770      	bx	lr
    feb2:	bf00      	nop

0000feb4 <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
    feb4:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
    feb6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    feba:	b1b8      	cbz	r0, feec <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
    febc:	79d3      	ldrb	r3, [r2, #7]
    febe:	2b01      	cmp	r3, #1
    fec0:	d015      	beq.n	feee <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
    fec2:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
    fec4:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    fec8:	3401      	adds	r4, #1
    feca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
    fece:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    fed2:	429c      	cmp	r4, r3
    fed4:	d0fb      	beq.n	fece <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
    fed6:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    feda:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
    fedc:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fede:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
    fee0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
    fee4:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fee8:	75ae      	strb	r6, [r5, #22]
}
    feea:	bc70      	pop	{r4, r5, r6}
    feec:	4770      	bx	lr
        return false;
    feee:	2000      	movs	r0, #0
    fef0:	4770      	bx	lr
    fef2:	bf00      	nop

0000fef4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
    fef4:	79c3      	ldrb	r3, [r0, #7]
    fef6:	b113      	cbz	r3, fefe <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
    fef8:	2b01      	cmp	r3, #1
    fefa:	d00e      	beq.n	ff1a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
    fefc:	4770      	bx	lr
        while (m_outHead != m_outTail) {
    fefe:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
    ff02:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    ff06:	429a      	cmp	r2, r3
    ff08:	d1f9      	bne.n	fefe <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
    ff0a:	6902      	ldr	r2, [r0, #16]
    ff0c:	7e13      	ldrb	r3, [r2, #24]
    ff0e:	07d8      	lsls	r0, r3, #31
    ff10:	d4f4      	bmi.n	fefc <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
    ff12:	7e13      	ldrb	r3, [r2, #24]
    ff14:	0799      	lsls	r1, r3, #30
    ff16:	d5fc      	bpl.n	ff12 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
    ff18:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    ff1a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    ff1e:	2b07      	cmp	r3, #7
    ff20:	d0ec      	beq.n	fefc <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
    ff22:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    ff26:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
    ff28:	b510      	push	{r4, lr}
    ff2a:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    ff2c:	d005      	beq.n	ff3a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
    ff2e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    ff32:	b113      	cbz	r3, ff3a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    ff34:	79e3      	ldrb	r3, [r4, #7]
    ff36:	2b01      	cmp	r3, #1
    ff38:	d000      	beq.n	ff3c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
    ff3a:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    ff3c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    ff40:	f7fe feda 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    ff44:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    ff46:	079b      	lsls	r3, r3, #30
    ff48:	d4f1      	bmi.n	ff2e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
    ff4a:	e7f6      	b.n	ff3a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

0000ff4c <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    ff4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff50:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
    ff52:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff54:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    ff56:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff58:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ff5c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff5e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    ff62:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ff66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ff6a:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff6c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ff70:	f36f 0100 	bfc	r1, #0, #1
    ff74:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    ff78:	6813      	ldr	r3, [r2, #0]
    ff7a:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    ff7c:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ff7e:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    ff82:	d503      	bpl.n	ff8c <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    ff84:	6813      	ldr	r3, [r2, #0]
    ff86:	f36f 0341 	bfc	r3, #1, #1
    ff8a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    ff8c:	69d3      	ldr	r3, [r2, #28]
    ff8e:	f013 0302 	ands.w	r3, r3, #2
    ff92:	d1fb      	bne.n	ff8c <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
    ff94:	6822      	ldr	r2, [r4, #0]
    ff96:	483a      	ldr	r0, [pc, #232]	; (10080 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
    ff98:	6811      	ldr	r1, [r2, #0]
    ff9a:	4281      	cmp	r1, r0
    ff9c:	d165      	bne.n	1006a <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
    ff9e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    ffa2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    ffa6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    ffaa:	6853      	ldr	r3, [r2, #4]
    ffac:	4a35      	ldr	r2, [pc, #212]	; (10084 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    ffae:	4293      	cmp	r3, r2
    ffb0:	d162      	bne.n	10078 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ffb2:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
    ffb4:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ffb6:	2204      	movs	r2, #4
    m_inTail = 0;
    ffb8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
    ffbc:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
    ffbe:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ffc2:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
    ffc4:	79e0      	ldrb	r0, [r4, #7]
    ffc6:	2801      	cmp	r0, #1
    ffc8:	d124      	bne.n	10014 <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
    ffca:	4b2f      	ldr	r3, [pc, #188]	; (10088 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
    ffcc:	443b      	add	r3, r7
    ffce:	fbb3 f3f7 	udiv	r3, r3, r7
    ffd2:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
    ffd4:	2bff      	cmp	r3, #255	; 0xff
    ffd6:	bf92      	itee	ls
    ffd8:	b2db      	uxtbls	r3, r3
    ffda:	23ff      	movhi	r3, #255	; 0xff
                success = false;
    ffdc:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
    ffde:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
    ffe0:	b1b6      	cbz	r6, 10010 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
    ffe2:	682b      	ldr	r3, [r5, #0]
    ffe4:	f043 0302 	orr.w	r3, r3, #2
    ffe8:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    ffea:	69eb      	ldr	r3, [r5, #28]
    ffec:	079b      	lsls	r3, r3, #30
    ffee:	d4fc      	bmi.n	ffea <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fff0:	6a22      	ldr	r2, [r4, #32]
    fff2:	f992 1001 	ldrsb.w	r1, [r2, #1]
    fff6:	7893      	ldrb	r3, [r2, #2]
    fff8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    fffc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10000:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10004:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10008:	f042 0201 	orr.w	r2, r2, #1
   1000c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10014:	4638      	mov	r0, r7
   10016:	f00b fd3f 	bl	1ba98 <__aeabi_ui2d>
   1001a:	2200      	movs	r2, #0
   1001c:	4b1b      	ldr	r3, [pc, #108]	; (1008c <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   1001e:	f00b fdb1 	bl	1bb84 <__aeabi_dmul>
   10022:	4b1b      	ldr	r3, [pc, #108]	; (10090 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   10024:	4680      	mov	r8, r0
   10026:	6818      	ldr	r0, [r3, #0]
   10028:	4689      	mov	r9, r1
   1002a:	f00b fd35 	bl	1ba98 <__aeabi_ui2d>
   1002e:	4602      	mov	r2, r0
   10030:	460b      	mov	r3, r1
   10032:	4640      	mov	r0, r8
   10034:	4649      	mov	r1, r9
   10036:	f00b fecf 	bl	1bdd8 <__aeabi_ddiv>
   1003a:	4602      	mov	r2, r0
   1003c:	460b      	mov	r3, r1
   1003e:	2000      	movs	r0, #0
   10040:	4914      	ldr	r1, [pc, #80]	; (10094 <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   10042:	f00b fbeb 	bl	1b81c <__aeabi_dsub>
   10046:	2200      	movs	r2, #0
   10048:	4b13      	ldr	r3, [pc, #76]	; (10098 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   1004a:	f00b fd9b 	bl	1bb84 <__aeabi_dmul>
   1004e:	f00c f87b 	bl	1c148 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10052:	f00b fd43 	bl	1badc <__aeabi_f2d>
   10056:	2200      	movs	r2, #0
   10058:	4b10      	ldr	r3, [pc, #64]	; (1009c <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   1005a:	f00b fbe1 	bl	1b820 <__adddf3>
   1005e:	f00c f853 	bl	1c108 <__aeabi_d2uiz>
   10062:	b280      	uxth	r0, r0
   10064:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   10066:	2001      	movs	r0, #1
            break;
   10068:	e7ba      	b.n	ffe0 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   1006a:	4620      	mov	r0, r4
   1006c:	4788      	blx	r1
   1006e:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   10070:	6853      	ldr	r3, [r2, #4]
   10072:	4a04      	ldr	r2, [pc, #16]	; (10084 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10074:	4293      	cmp	r3, r2
   10076:	d09c      	beq.n	ffb2 <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   10078:	4620      	mov	r0, r4
   1007a:	4798      	blx	r3
   1007c:	6925      	ldr	r5, [r4, #16]
   1007e:	e7a1      	b.n	ffc4 <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   10080:	0000fe19 	.word	0x0000fe19
   10084:	0000fe29 	.word	0x0000fe29
   10088:	004c4b3f 	.word	0x004c4b3f
   1008c:	40300000 	.word	0x40300000
   10090:	200000e0 	.word	0x200000e0
   10094:	3ff00000 	.word	0x3ff00000
   10098:	40f00000 	.word	0x40f00000
   1009c:	3fe00000 	.word	0x3fe00000

000100a0 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   100a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   100a4:	b903      	cbnz	r3, 100a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   100a6:	4770      	bx	lr
void SerialBase::PortClose() {
   100a8:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   100aa:	6805      	ldr	r5, [r0, #0]
   100ac:	4a3e      	ldr	r2, [pc, #248]	; (101a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   100ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   100b0:	4293      	cmp	r3, r2
   100b2:	4604      	mov	r4, r0
   100b4:	d157      	bne.n	10166 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   100b6:	79c3      	ldrb	r3, [r0, #7]
   100b8:	2b00      	cmp	r3, #0
   100ba:	d03f      	beq.n	1013c <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   100bc:	2b01      	cmp	r3, #1
   100be:	d056      	beq.n	1016e <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   100c0:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   100c2:	69a0      	ldr	r0, [r4, #24]
   100c4:	4939      	ldr	r1, [pc, #228]	; (101ac <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   100c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
   100ca:	7886      	ldrb	r6, [r0, #2]
   100cc:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   100d0:	2001      	movs	r0, #1
   100d2:	40b0      	lsls	r0, r6
   100d4:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100d6:	6a20      	ldr	r0, [r4, #32]
   100d8:	f990 3001 	ldrsb.w	r3, [r0, #1]
   100dc:	7880      	ldrb	r0, [r0, #2]
   100de:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   100e2:	4403      	add	r3, r0
   100e4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   100e8:	f36f 0100 	bfc	r1, #0, #1
   100ec:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   100f0:	6813      	ldr	r3, [r2, #0]
   100f2:	079b      	lsls	r3, r3, #30
   100f4:	d503      	bpl.n	100fe <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   100f6:	6813      	ldr	r3, [r2, #0]
   100f8:	f36f 0341 	bfc	r3, #1, #1
   100fc:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   100fe:	69d3      	ldr	r3, [r2, #28]
   10100:	f013 0302 	ands.w	r3, r3, #2
   10104:	d1fb      	bne.n	100fe <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   10106:	682a      	ldr	r2, [r5, #0]
   10108:	4929      	ldr	r1, [pc, #164]	; (101b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   1010a:	428a      	cmp	r2, r1
   1010c:	d124      	bne.n	10158 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   1010e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10112:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10116:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1011a:	686b      	ldr	r3, [r5, #4]
   1011c:	4a25      	ldr	r2, [pc, #148]	; (101b4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   1011e:	4293      	cmp	r3, r2
   10120:	d11e      	bne.n	10160 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10122:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10124:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10126:	2104      	movs	r1, #4
    m_inTail = 0;
   10128:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1012c:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1012e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10132:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   10134:	2300      	movs	r3, #0
   10136:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1013a:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   1013c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10140:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10144:	429a      	cmp	r2, r3
   10146:	d1f9      	bne.n	1013c <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10148:	6922      	ldr	r2, [r4, #16]
   1014a:	7e13      	ldrb	r3, [r2, #24]
   1014c:	07d8      	lsls	r0, r3, #31
   1014e:	d4b8      	bmi.n	100c2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10150:	7e13      	ldrb	r3, [r2, #24]
   10152:	0799      	lsls	r1, r3, #30
   10154:	d5fc      	bpl.n	10150 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   10156:	e7b4      	b.n	100c2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   10158:	4620      	mov	r0, r4
   1015a:	4790      	blx	r2
   1015c:	6825      	ldr	r5, [r4, #0]
   1015e:	e7dc      	b.n	1011a <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   10160:	4620      	mov	r0, r4
   10162:	4798      	blx	r3
   10164:	e7e6      	b.n	10134 <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   10166:	4798      	blx	r3
   10168:	6922      	ldr	r2, [r4, #16]
   1016a:	6825      	ldr	r5, [r4, #0]
   1016c:	e7a9      	b.n	100c2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1016e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10172:	2807      	cmp	r0, #7
   10174:	d0a4      	beq.n	100c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   10176:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1017a:	2b07      	cmp	r3, #7
   1017c:	d0a0      	beq.n	100c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   1017e:	f7fe fdbb 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10182:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10184:	079a      	lsls	r2, r3, #30
   10186:	d5ef      	bpl.n	10168 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10188:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1018c:	2b00      	cmp	r3, #0
   1018e:	d0eb      	beq.n	10168 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10190:	79e3      	ldrb	r3, [r4, #7]
   10192:	2b01      	cmp	r3, #1
   10194:	d1e8      	bne.n	10168 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10196:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   1019a:	f7fe fdad 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1019e:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   101a0:	079a      	lsls	r2, r3, #30
   101a2:	d4f1      	bmi.n	10188 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   101a4:	e7e0      	b.n	10168 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   101a6:	bf00      	nop
   101a8:	0000fef5 	.word	0x0000fef5
   101ac:	41008000 	.word	0x41008000
   101b0:	0000fe19 	.word	0x0000fe19
   101b4:	0000fe29 	.word	0x0000fe29

000101b8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   101b8:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   101ba:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   101bc:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   101be:	2b01      	cmp	r3, #1
   101c0:	d101      	bne.n	101c6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   101c2:	2000      	movs	r0, #0
   101c4:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101c6:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   101c8:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101ca:	f991 4001 	ldrsb.w	r4, [r1, #1]
   101ce:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   101d0:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101d2:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   101d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   101da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   101de:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101e2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   101e6:	f36f 0100 	bfc	r1, #0, #1
   101ea:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   101ee:	6813      	ldr	r3, [r2, #0]
   101f0:	0799      	lsls	r1, r3, #30
   101f2:	d503      	bpl.n	101fc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   101f4:	6813      	ldr	r3, [r2, #0]
   101f6:	f36f 0341 	bfc	r3, #1, #1
   101fa:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   101fc:	69d3      	ldr	r3, [r2, #28]
   101fe:	f013 0302 	ands.w	r3, r3, #2
   10202:	d1fb      	bne.n	101fc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   10204:	6802      	ldr	r2, [r0, #0]
   10206:	4604      	mov	r4, r0
   10208:	6811      	ldr	r1, [r2, #0]
   1020a:	4825      	ldr	r0, [pc, #148]	; (102a0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   1020c:	4281      	cmp	r1, r0
   1020e:	d142      	bne.n	10296 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10210:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10214:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10218:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1021c:	6853      	ldr	r3, [r2, #4]
   1021e:	4a21      	ldr	r2, [pc, #132]	; (102a4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10220:	4293      	cmp	r3, r2
   10222:	d134      	bne.n	1028e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10224:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10226:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10228:	2104      	movs	r1, #4
    m_inTail = 0;
   1022a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1022e:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10230:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10234:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   10236:	7923      	ldrb	r3, [r4, #4]
   10238:	2b02      	cmp	r3, #2
   1023a:	d023      	beq.n	10284 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   1023c:	6811      	ldr	r1, [r2, #0]
   1023e:	2001      	movs	r0, #1
   10240:	f360 611b 	bfi	r1, r0, #24, #4
   10244:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   10246:	6851      	ldr	r1, [r2, #4]
   10248:	f363 314d 	bfi	r1, r3, #13, #1
   1024c:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   1024e:	b1bd      	cbz	r5, 10280 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10250:	6813      	ldr	r3, [r2, #0]
   10252:	f043 0302 	orr.w	r3, r3, #2
   10256:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10258:	69d3      	ldr	r3, [r2, #28]
   1025a:	079b      	lsls	r3, r3, #30
   1025c:	d4fc      	bmi.n	10258 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1025e:	6a22      	ldr	r2, [r4, #32]
   10260:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10264:	7893      	ldrb	r3, [r2, #2]
   10266:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1026a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1026e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10272:	2001      	movs	r0, #1
   10274:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10278:	4302      	orrs	r2, r0
   1027a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1027e:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10280:	2001      	movs	r0, #1
}
   10282:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   10284:	6813      	ldr	r3, [r2, #0]
   10286:	f36f 631b 	bfc	r3, #24, #4
   1028a:	6013      	str	r3, [r2, #0]
   1028c:	e7df      	b.n	1024e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   1028e:	4620      	mov	r0, r4
   10290:	4798      	blx	r3
   10292:	6922      	ldr	r2, [r4, #16]
   10294:	e7cf      	b.n	10236 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   10296:	4620      	mov	r0, r4
   10298:	4788      	blx	r1
   1029a:	6822      	ldr	r2, [r4, #0]
   1029c:	e7be      	b.n	1021c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   1029e:	bf00      	nop
   102a0:	0000fe19 	.word	0x0000fe19
   102a4:	0000fe29 	.word	0x0000fe29

000102a8 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   102a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   102aa:	1f4b      	subs	r3, r1, #5
   102ac:	2b04      	cmp	r3, #4
   102ae:	d85d      	bhi.n	1036c <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   102b0:	79c3      	ldrb	r3, [r0, #7]
   102b2:	2b01      	cmp	r3, #1
   102b4:	d056      	beq.n	10364 <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102b6:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   102b8:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102ba:	f992 4001 	ldrsb.w	r4, [r2, #1]
   102be:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102c0:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102c2:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   102c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102ce:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102d0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   102d4:	f36f 0400 	bfc	r4, #0, #1
   102d8:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102dc:	6813      	ldr	r3, [r2, #0]
   102de:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102e0:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102e4:	d503      	bpl.n	102ee <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   102e6:	6813      	ldr	r3, [r2, #0]
   102e8:	f36f 0341 	bfc	r3, #1, #1
   102ec:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102ee:	69d3      	ldr	r3, [r2, #28]
   102f0:	f013 0302 	ands.w	r3, r3, #2
   102f4:	d1fb      	bne.n	102ee <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   102f6:	6802      	ldr	r2, [r0, #0]
   102f8:	460f      	mov	r7, r1
   102fa:	6816      	ldr	r6, [r2, #0]
   102fc:	4921      	ldr	r1, [pc, #132]	; (10384 <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   102fe:	428e      	cmp	r6, r1
   10300:	4604      	mov	r4, r0
   10302:	d13b      	bne.n	1037c <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   10304:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10308:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   1030c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10310:	6853      	ldr	r3, [r2, #4]
   10312:	4a1d      	ldr	r2, [pc, #116]	; (10388 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   10314:	4293      	cmp	r3, r2
   10316:	d12d      	bne.n	10374 <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10318:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1031a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1031c:	2104      	movs	r1, #4
    m_inTail = 0;
   1031e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10322:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10324:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10328:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   1032a:	6853      	ldr	r3, [r2, #4]
   1032c:	f367 0302 	bfi	r3, r7, #0, #3
   10330:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10332:	b1ed      	cbz	r5, 10370 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10334:	6813      	ldr	r3, [r2, #0]
   10336:	f043 0302 	orr.w	r3, r3, #2
   1033a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1033c:	69d3      	ldr	r3, [r2, #28]
   1033e:	079b      	lsls	r3, r3, #30
   10340:	d4fc      	bmi.n	1033c <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10342:	6a22      	ldr	r2, [r4, #32]
   10344:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10348:	7893      	ldrb	r3, [r2, #2]
   1034a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1034e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10352:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10356:	2001      	movs	r0, #1
   10358:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1035c:	4302      	orrs	r2, r0
   1035e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10364:	f1a1 0308 	sub.w	r3, r1, #8
   10368:	2b01      	cmp	r3, #1
   1036a:	d9a4      	bls.n	102b6 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   1036c:	2000      	movs	r0, #0
   1036e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10370:	2001      	movs	r0, #1
}
   10372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   10374:	4620      	mov	r0, r4
   10376:	4798      	blx	r3
   10378:	6922      	ldr	r2, [r4, #16]
   1037a:	e7d6      	b.n	1032a <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   1037c:	47b0      	blx	r6
   1037e:	6822      	ldr	r2, [r4, #0]
   10380:	e7c6      	b.n	10310 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   10382:	bf00      	nop
   10384:	0000fe19 	.word	0x0000fe19
   10388:	0000fe29 	.word	0x0000fe29

0001038c <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   1038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   1038e:	1e4c      	subs	r4, r1, #1
   10390:	b2e4      	uxtb	r4, r4
   10392:	2c01      	cmp	r4, #1
   10394:	d901      	bls.n	1039a <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   10396:	2000      	movs	r0, #0
}
   10398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   1039a:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   1039c:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   1039e:	b10d      	cbz	r5, 103a4 <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   103a0:	2001      	movs	r0, #1
   103a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103a4:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103a6:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103a8:	f991 7001 	ldrsb.w	r7, [r1, #1]
   103ac:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103ae:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103b0:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   103b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   103b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103bc:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103c0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   103c4:	f365 0100 	bfi	r1, r5, #0, #1
   103c8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   103cc:	6813      	ldr	r3, [r2, #0]
   103ce:	0799      	lsls	r1, r3, #30
   103d0:	d503      	bpl.n	103da <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   103d2:	6813      	ldr	r3, [r2, #0]
   103d4:	f365 0341 	bfi	r3, r5, #1, #1
   103d8:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   103da:	69d3      	ldr	r3, [r2, #28]
   103dc:	f013 0302 	ands.w	r3, r3, #2
   103e0:	d1fb      	bne.n	103da <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   103e2:	6802      	ldr	r2, [r0, #0]
   103e4:	4605      	mov	r5, r0
   103e6:	6811      	ldr	r1, [r2, #0]
   103e8:	481d      	ldr	r0, [pc, #116]	; (10460 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   103ea:	4281      	cmp	r1, r0
   103ec:	d130      	bne.n	10450 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   103ee:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   103f2:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   103f6:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   103fa:	6853      	ldr	r3, [r2, #4]
   103fc:	4a19      	ldr	r2, [pc, #100]	; (10464 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   103fe:	4293      	cmp	r3, r2
   10400:	d12a      	bne.n	10458 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10402:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   10404:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10406:	2104      	movs	r1, #4
    m_inTail = 0;
   10408:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   1040c:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   1040e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10412:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   10414:	6853      	ldr	r3, [r2, #4]
   10416:	f364 1386 	bfi	r3, r4, #6, #1
   1041a:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1041c:	2e00      	cmp	r6, #0
   1041e:	d0bf      	beq.n	103a0 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10420:	6813      	ldr	r3, [r2, #0]
   10422:	f043 0302 	orr.w	r3, r3, #2
   10426:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10428:	69d3      	ldr	r3, [r2, #28]
   1042a:	079b      	lsls	r3, r3, #30
   1042c:	d4fc      	bmi.n	10428 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1042e:	6a2a      	ldr	r2, [r5, #32]
   10430:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10434:	7893      	ldrb	r3, [r2, #2]
   10436:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1043a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1043e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   10442:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10444:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10448:	4302      	orrs	r2, r0
   1044a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1044e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10450:	4628      	mov	r0, r5
   10452:	4788      	blx	r1
   10454:	682a      	ldr	r2, [r5, #0]
   10456:	e7d0      	b.n	103fa <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10458:	4628      	mov	r0, r5
   1045a:	4798      	blx	r3
   1045c:	692a      	ldr	r2, [r5, #16]
   1045e:	e7d9      	b.n	10414 <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10460:	0000fe19 	.word	0x0000fe19
   10464:	0000fe29 	.word	0x0000fe29

00010468 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   1046c:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   1046e:	682b      	ldr	r3, [r5, #0]
   10470:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   10474:	b089      	sub	sp, #36	; 0x24
   10476:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10478:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   1047a:	69eb      	ldr	r3, [r5, #28]
   1047c:	f013 0301 	ands.w	r3, r3, #1
   10480:	d1fb      	bne.n	1047a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   10482:	6822      	ldr	r2, [r4, #0]
   10484:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1055c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10488:	6811      	ldr	r1, [r2, #0]
   1048a:	4541      	cmp	r1, r8
   1048c:	d153      	bne.n	10536 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   1048e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10492:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10496:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1049a:	6853      	ldr	r3, [r2, #4]
   1049c:	4a28      	ldr	r2, [pc, #160]	; (10540 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   1049e:	4293      	cmp	r3, r2
   104a0:	d122      	bne.n	104e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   104a2:	2200      	movs	r2, #0
    m_inTail = 0;
   104a4:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104a8:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   104aa:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   104ac:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   104b0:	4a24      	ldr	r2, [pc, #144]	; (10544 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104b2:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   104b4:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104b6:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   104b8:	d01c      	beq.n	104f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   104ba:	4a23      	ldr	r2, [pc, #140]	; (10548 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   104bc:	4293      	cmp	r3, r2
   104be:	f000 8310 	beq.w	10ae2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   104c2:	4a22      	ldr	r2, [pc, #136]	; (1054c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   104c4:	4293      	cmp	r3, r2
   104c6:	f000 8341 	beq.w	10b4c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   104ca:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   104ce:	f000 839a 	beq.w	10c06 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   104d2:	4a1f      	ldr	r2, [pc, #124]	; (10550 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   104d4:	4293      	cmp	r3, r2
   104d6:	d043      	beq.n	10560 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   104d8:	4a1e      	ldr	r2, [pc, #120]	; (10554 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   104da:	4293      	cmp	r3, r2
   104dc:	f000 8372 	beq.w	10bc4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   104e0:	2000      	movs	r0, #0
}
   104e2:	b009      	add	sp, #36	; 0x24
   104e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   104e8:	4620      	mov	r0, r4
   104ea:	4798      	blx	r3
   104ec:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   104ee:	4a15      	ldr	r2, [pc, #84]	; (10544 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   104f0:	4293      	cmp	r3, r2
   104f2:	d1e2      	bne.n	104ba <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   104f4:	2203      	movs	r2, #3
   104f6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   104fa:	4a17      	ldr	r2, [pc, #92]	; (10558 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   104fc:	9207      	str	r2, [sp, #28]
   104fe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   10502:	9206      	str	r2, [sp, #24]
   10504:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10508:	9202      	str	r2, [sp, #8]
   1050a:	2231      	movs	r2, #49	; 0x31
   1050c:	9205      	str	r2, [sp, #20]
   1050e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10512:	9201      	str	r2, [sp, #4]
   10514:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10516:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10518:	2601      	movs	r6, #1
   1051a:	f04f 092e 	mov.w	r9, #46	; 0x2e
   1051e:	9204      	str	r2, [sp, #16]
   10520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10524:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10528:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   1052a:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1052e:	f04f 0a07 	mov.w	sl, #7
   10532:	9200      	str	r2, [sp, #0]
   10534:	e02f      	b.n	10596 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   10536:	4620      	mov	r0, r4
   10538:	4788      	blx	r1
   1053a:	6822      	ldr	r2, [r4, #0]
   1053c:	e7ad      	b.n	1049a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   1053e:	bf00      	nop
   10540:	0000fe29 	.word	0x0000fe29
   10544:	40003000 	.word	0x40003000
   10548:	41012000 	.word	0x41012000
   1054c:	41014000 	.word	0x41014000
   10550:	43000400 	.word	0x43000400
   10554:	43000c00 	.word	0x43000c00
   10558:	00200500 	.word	0x00200500
   1055c:	0000fe19 	.word	0x0000fe19
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10560:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10564:	9207      	str	r2, [sp, #28]
   10566:	9206      	str	r2, [sp, #24]
   10568:	2220      	movs	r2, #32
   1056a:	9202      	str	r2, [sp, #8]
   1056c:	2245      	movs	r2, #69	; 0x45
   1056e:	9205      	str	r2, [sp, #20]
   10570:	2210      	movs	r2, #16
   10572:	9201      	str	r2, [sp, #4]
   10574:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10576:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10578:	2602      	movs	r6, #2
   1057a:	f04f 0942 	mov.w	r9, #66	; 0x42
   1057e:	9204      	str	r2, [sp, #16]
   10580:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10582:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10586:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   1058a:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   1058c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10590:	f04f 0a23 	mov.w	sl, #35	; 0x23
   10594:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   10596:	6a21      	ldr	r1, [r4, #32]
   10598:	f991 2001 	ldrsb.w	r2, [r1, #1]
   1059c:	f891 b002 	ldrb.w	fp, [r1, #2]
   105a0:	01d2      	lsls	r2, r2, #7
   105a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   105a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   105aa:	f04f 0e01 	mov.w	lr, #1
   105ae:	fa0e fc0b 	lsl.w	ip, lr, fp
   105b2:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   105b6:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   105ba:	f894 c007 	ldrb.w	ip, [r4, #7]
   105be:	45f4      	cmp	ip, lr
   105c0:	f040 819d 	bne.w	108fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   105c4:	4dc4      	ldr	r5, [pc, #784]	; (108d8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   105c6:	4ac5      	ldr	r2, [pc, #788]	; (108dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   105c8:	f107 0e20 	add.w	lr, r7, #32
   105cc:	3620      	adds	r6, #32
   105ce:	9f00      	ldr	r7, [sp, #0]
   105d0:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   105d4:	9f01      	ldr	r7, [sp, #4]
   105d6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   105da:	9f02      	ldr	r7, [sp, #8]
   105dc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   105e0:	f10a 0e20 	add.w	lr, sl, #32
   105e4:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   105e8:	f36f 1586 	bfc	r5, #6, #1
   105ec:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   105f0:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   105f4:	066d      	lsls	r5, r5, #25
   105f6:	d4fb      	bmi.n	105f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   105f8:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   105fc:	4eb7      	ldr	r6, [pc, #732]	; (108dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   105fe:	f04f 0c07 	mov.w	ip, #7
   10602:	f36c 0503 	bfi	r5, ip, #0, #4
   10606:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1060a:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1060e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   10612:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10616:	6875      	ldr	r5, [r6, #4]
   10618:	f015 051c 	ands.w	r5, r5, #28
   1061c:	d1fb      	bne.n	10616 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   1061e:	681a      	ldr	r2, [r3, #0]
   10620:	2603      	movs	r6, #3
   10622:	f366 0284 	bfi	r2, r6, #2, #3
   10626:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10628:	681a      	ldr	r2, [r3, #0]
   1062a:	7a26      	ldrb	r6, [r4, #8]
   1062c:	f366 725d 	bfi	r2, r6, #29, #1
   10630:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10632:	681a      	ldr	r2, [r3, #0]
   10634:	7a66      	ldrb	r6, [r4, #9]
   10636:	f366 721c 	bfi	r2, r6, #28, #1
   1063a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   1063c:	681a      	ldr	r2, [r3, #0]
   1063e:	f365 621b 	bfi	r2, r5, #24, #4
   10642:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   10644:	6962      	ldr	r2, [r4, #20]
   10646:	681e      	ldr	r6, [r3, #0]
   10648:	7a52      	ldrb	r2, [r2, #9]
   1064a:	f362 5615 	bfi	r6, r2, #20, #2
   1064e:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10650:	7a49      	ldrb	r1, [r1, #9]
   10652:	681a      	ldr	r2, [r3, #0]
   10654:	2900      	cmp	r1, #0
   10656:	bf0c      	ite	eq
   10658:	2100      	moveq	r1, #0
   1065a:	2102      	movne	r1, #2
   1065c:	f361 4211 	bfi	r2, r1, #16, #2
   10660:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   10662:	685a      	ldr	r2, [r3, #4]
   10664:	79a1      	ldrb	r1, [r4, #6]
   10666:	f361 0202 	bfi	r2, r1, #0, #3
   1066a:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   1066c:	681a      	ldr	r2, [r3, #0]
   1066e:	f365 729e 	bfi	r2, r5, #30, #1
   10672:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   10674:	681a      	ldr	r2, [r3, #0]
   10676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1067a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   1067c:	685a      	ldr	r2, [r3, #4]
   1067e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10682:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   10684:	685a      	ldr	r2, [r3, #4]
   10686:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1068a:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   1068c:	69a3      	ldr	r3, [r4, #24]
   1068e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10692:	789a      	ldrb	r2, [r3, #2]
   10694:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10698:	01db      	lsls	r3, r3, #7
   1069a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   1069e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   106a2:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   106a6:	07d7      	lsls	r7, r2, #31
   106a8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   106ac:	bf4c      	ite	mi
   106ae:	f366 1507 	bfimi	r5, r6, #4, #4
   106b2:	f366 0503 	bfipl	r5, r6, #0, #4
   106b6:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   106ba:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   106bc:	2901      	cmp	r1, #1
   106be:	f240 822f 	bls.w	10b20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   106c2:	2902      	cmp	r1, #2
   106c4:	d10a      	bne.n	106dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   106c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   106ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   106ce:	4413      	add	r3, r2
   106d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   106d4:	f042 0201 	orr.w	r2, r2, #1
   106d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   106dc:	2807      	cmp	r0, #7
   106de:	d031      	beq.n	10744 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   106e0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   106e4:	2b07      	cmp	r3, #7
   106e6:	d02d      	beq.n	10744 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   106e8:	f7fe fb06 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   106ec:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   106ee:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   106f0:	f023 0302 	bic.w	r3, r3, #2
   106f4:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   106f6:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   106f8:	6803      	ldr	r3, [r0, #0]
   106fa:	2b01      	cmp	r3, #1
   106fc:	d0fc      	beq.n	106f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   106fe:	9b06      	ldr	r3, [sp, #24]
   10700:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10702:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10706:	f7fe fb01 	bl	ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   1070a:	2300      	movs	r3, #0
   1070c:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   1070e:	6923      	ldr	r3, [r4, #16]
   10710:	3328      	adds	r3, #40	; 0x28
   10712:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   10714:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10718:	f7fe faee 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   1071c:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1071e:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10720:	f023 0302 	bic.w	r3, r3, #2
   10724:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10726:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10728:	6803      	ldr	r3, [r0, #0]
   1072a:	2b01      	cmp	r3, #1
   1072c:	d0fc      	beq.n	10728 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   1072e:	9b07      	ldr	r3, [sp, #28]
   10730:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10732:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10736:	f7fe fae9 	bl	ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   1073a:	2300      	movs	r3, #0
   1073c:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   1073e:	6923      	ldr	r3, [r4, #16]
   10740:	3328      	adds	r3, #40	; 0x28
   10742:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   10744:	6820      	ldr	r0, [r4, #0]
   10746:	4a66      	ldr	r2, [pc, #408]	; (108e0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10748:	6903      	ldr	r3, [r0, #16]
   1074a:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   1074e:	4293      	cmp	r3, r2
   10750:	f040 81bd 	bne.w	10ace <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10754:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10756:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10758:	f991 5001 	ldrsb.w	r5, [r1, #1]
   1075c:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1075e:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10760:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10764:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10768:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1076c:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10770:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10774:	f36f 0100 	bfc	r1, #0, #1
   10778:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1077c:	6813      	ldr	r3, [r2, #0]
   1077e:	0799      	lsls	r1, r3, #30
   10780:	d503      	bpl.n	1078a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10782:	6813      	ldr	r3, [r2, #0]
   10784:	f36f 0341 	bfc	r3, #1, #1
   10788:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1078a:	69d3      	ldr	r3, [r2, #28]
   1078c:	f013 0302 	ands.w	r3, r3, #2
   10790:	d1fb      	bne.n	1078a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10792:	6802      	ldr	r2, [r0, #0]
   10794:	4542      	cmp	r2, r8
   10796:	f040 8211 	bne.w	10bbc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   1079a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1079e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   107a2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   107a6:	6843      	ldr	r3, [r0, #4]
   107a8:	4a4e      	ldr	r2, [pc, #312]	; (108e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   107aa:	4293      	cmp	r3, r2
   107ac:	f040 8202 	bne.w	10bb4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107b0:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   107b2:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107b4:	2204      	movs	r2, #4
    m_inTail = 0;
   107b6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   107ba:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   107bc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107c0:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   107c2:	79e3      	ldrb	r3, [r4, #7]
   107c4:	2b01      	cmp	r3, #1
   107c6:	f040 8150 	bne.w	10a6a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   107ca:	4b47      	ldr	r3, [pc, #284]	; (108e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   107cc:	444b      	add	r3, r9
   107ce:	fbb3 f3f9 	udiv	r3, r3, r9
   107d2:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   107d4:	2bff      	cmp	r3, #255	; 0xff
   107d6:	bf28      	it	cs
   107d8:	23ff      	movcs	r3, #255	; 0xff
   107da:	b2db      	uxtb	r3, r3
   107dc:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   107de:	2e00      	cmp	r6, #0
   107e0:	f000 816f 	beq.w	10ac2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   107e4:	682b      	ldr	r3, [r5, #0]
   107e6:	f043 0302 	orr.w	r3, r3, #2
   107ea:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   107ec:	69eb      	ldr	r3, [r5, #28]
   107ee:	079b      	lsls	r3, r3, #30
   107f0:	d4fc      	bmi.n	107ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   107f2:	6a22      	ldr	r2, [r4, #32]
   107f4:	f992 3001 	ldrsb.w	r3, [r2, #1]
   107f8:	7890      	ldrb	r0, [r2, #2]
   107fa:	01db      	lsls	r3, r3, #7
   107fc:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10800:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10804:	4402      	add	r2, r0
   10806:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   1080a:	f041 0101 	orr.w	r1, r1, #1
   1080e:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10812:	69a6      	ldr	r6, [r4, #24]
   10814:	4a35      	ldr	r2, [pc, #212]	; (108ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10816:	f996 1001 	ldrsb.w	r1, [r6, #1]
   1081a:	78b7      	ldrb	r7, [r6, #2]
   1081c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10820:	2601      	movs	r6, #1
   10822:	40be      	lsls	r6, r7
   10824:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10826:	6961      	ldr	r1, [r4, #20]
   10828:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   1082c:	f891 c002 	ldrb.w	ip, [r1, #2]
   10830:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10834:	f01c 0f01 	tst.w	ip, #1
   10838:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   1083c:	f000 8108 	beq.w	10a50 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10840:	4472      	add	r2, lr
   10842:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10846:	f006 060f 	and.w	r6, r6, #15
   1084a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   1084e:	f366 1107 	bfi	r1, r6, #4, #4
   10852:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10856:	4925      	ldr	r1, [pc, #148]	; (108ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10858:	eb01 020e 	add.w	r2, r1, lr
   1085c:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10860:	2701      	movs	r7, #1
   10862:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10866:	f04f 0803 	mov.w	r8, #3
   1086a:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   1086e:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10870:	69e2      	ldr	r2, [r4, #28]
   10872:	7894      	ldrb	r4, [r2, #2]
   10874:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10878:	01d2      	lsls	r2, r2, #7
   1087a:	4411      	add	r1, r2
   1087c:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10880:	f014 0f01 	tst.w	r4, #1
   10884:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10888:	bf14      	ite	ne
   1088a:	f366 1707 	bfine	r7, r6, #4, #4
   1088e:	f366 0703 	bfieq	r7, r6, #0, #4
   10892:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10896:	4915      	ldr	r1, [pc, #84]	; (108ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10898:	440a      	add	r2, r1
   1089a:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1089c:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   1089e:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108a0:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   108a4:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108a8:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108b0:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108b6:	bf4c      	ite	mi
   108b8:	f366 1207 	bfimi	r2, r6, #4, #4
   108bc:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108c0:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108c2:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108c6:	2201      	movs	r2, #1
   108c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   108cc:	682b      	ldr	r3, [r5, #0]
   108ce:	f043 0302 	orr.w	r3, r3, #2
   108d2:	602b      	str	r3, [r5, #0]
   108d4:	e00c      	b.n	108f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   108d6:	bf00      	nop
   108d8:	e000e100 	.word	0xe000e100
   108dc:	40001c00 	.word	0x40001c00
   108e0:	0000ff4d 	.word	0x0000ff4d
   108e4:	0000fe29 	.word	0x0000fe29
   108e8:	004c4b3f 	.word	0x004c4b3f
   108ec:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   108f0:	69eb      	ldr	r3, [r5, #28]
   108f2:	079b      	lsls	r3, r3, #30
   108f4:	d4fc      	bmi.n	108f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   108f6:	2001      	movs	r0, #1
}
   108f8:	b009      	add	sp, #36	; 0x24
   108fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   108fe:	6829      	ldr	r1, [r5, #0]
   10900:	f36e 0184 	bfi	r1, lr, #2, #3
   10904:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10906:	6829      	ldr	r1, [r5, #0]
   10908:	f36f 314f 	bfc	r1, #13, #3
   1090c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   1090e:	6829      	ldr	r1, [r5, #0]
   10910:	f36f 711c 	bfc	r1, #28, #1
   10914:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10916:	6829      	ldr	r1, [r5, #0]
   10918:	f36e 5115 	bfi	r1, lr, #20, #2
   1091c:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   1091e:	f1bc 0f00 	cmp.w	ip, #0
   10922:	d104      	bne.n	1092e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10924:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10928:	2900      	cmp	r1, #0
   1092a:	f040 81af 	bne.w	10c8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   1092e:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10930:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10932:	f362 0302 	bfi	r3, r2, #0, #3
   10936:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10938:	682b      	ldr	r3, [r5, #0]
   1093a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1093e:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10940:	7923      	ldrb	r3, [r4, #4]
   10942:	2b02      	cmp	r3, #2
   10944:	f000 817c 	beq.w	10c40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10948:	682a      	ldr	r2, [r5, #0]
   1094a:	2101      	movs	r1, #1
   1094c:	f361 621b 	bfi	r2, r1, #24, #4
   10950:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10952:	686a      	ldr	r2, [r5, #4]
   10954:	f363 324d 	bfi	r2, r3, #13, #1
   10958:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   1095a:	7963      	ldrb	r3, [r4, #5]
   1095c:	686a      	ldr	r2, [r5, #4]
   1095e:	3b01      	subs	r3, #1
   10960:	f363 1286 	bfi	r2, r3, #6, #1
   10964:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10966:	686b      	ldr	r3, [r5, #4]
   10968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1096c:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   1096e:	686b      	ldr	r3, [r5, #4]
   10970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10974:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10976:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10978:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   1097a:	f36f 2349 	bfc	r3, #9, #1
   1097e:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10980:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10982:	69eb      	ldr	r3, [r5, #28]
   10984:	075b      	lsls	r3, r3, #29
   10986:	d4fc      	bmi.n	10982 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10988:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1098c:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1098e:	4bb7      	ldr	r3, [pc, #732]	; (10c6c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10990:	9a04      	ldr	r2, [sp, #16]
   10992:	441a      	add	r2, r3
   10994:	4610      	mov	r0, r2
   10996:	9a05      	ldr	r2, [sp, #20]
   10998:	eb03 0109 	add.w	r1, r3, r9
   1099c:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1099e:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109a0:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109a2:	9f00      	ldr	r7, [sp, #0]
   109a4:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109a8:	2220      	movs	r2, #32
   109aa:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109ae:	9901      	ldr	r1, [sp, #4]
   109b0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109b4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109b8:	9a02      	ldr	r2, [sp, #8]
   109ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109be:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   109c2:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   109c6:	69a3      	ldr	r3, [r4, #24]
   109c8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   109cc:	789a      	ldrb	r2, [r3, #2]
   109ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
   109d2:	01db      	lsls	r3, r3, #7
   109d4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   109d8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   109dc:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   109e0:	07d6      	lsls	r6, r2, #31
   109e2:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   109e6:	bf4c      	ite	mi
   109e8:	f365 1007 	bfimi	r0, r5, #4, #4
   109ec:	f365 0003 	bfipl	r0, r5, #0, #4
   109f0:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   109f4:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   109f6:	2901      	cmp	r1, #1
   109f8:	f240 80c7 	bls.w	10b8a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   109fc:	2902      	cmp	r1, #2
   109fe:	d10a      	bne.n	10a16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10a00:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10a08:	4413      	add	r3, r2
   10a0a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10a0e:	f042 0201 	orr.w	r2, r2, #1
   10a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10a16:	f10a 0e20 	add.w	lr, sl, #32
   10a1a:	4a95      	ldr	r2, [pc, #596]	; (10c70 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10a1c:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10a20:	f36f 1386 	bfc	r3, #6, #1
   10a24:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10a28:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10a2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10a30:	2b00      	cmp	r3, #0
   10a32:	d1f9      	bne.n	10a28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10a34:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10a38:	f363 0103 	bfi	r1, r3, #0, #4
   10a3c:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10a40:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a48:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10a4c:	6853      	ldr	r3, [r2, #4]
   10a4e:	e679      	b.n	10744 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10a50:	eb02 010e 	add.w	r1, r2, lr
   10a54:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10a58:	f006 060f 	and.w	r6, r6, #15
   10a5c:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10a60:	f366 0203 	bfi	r2, r6, #0, #4
   10a64:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10a68:	e6f5      	b.n	10856 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10a6a:	4648      	mov	r0, r9
   10a6c:	f00b f814 	bl	1ba98 <__aeabi_ui2d>
   10a70:	2200      	movs	r2, #0
   10a72:	4b80      	ldr	r3, [pc, #512]	; (10c74 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10a74:	f00b f886 	bl	1bb84 <__aeabi_dmul>
   10a78:	4b7f      	ldr	r3, [pc, #508]	; (10c78 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10a7a:	4680      	mov	r8, r0
   10a7c:	6818      	ldr	r0, [r3, #0]
   10a7e:	4689      	mov	r9, r1
   10a80:	f00b f80a 	bl	1ba98 <__aeabi_ui2d>
   10a84:	4602      	mov	r2, r0
   10a86:	460b      	mov	r3, r1
   10a88:	4640      	mov	r0, r8
   10a8a:	4649      	mov	r1, r9
   10a8c:	f00b f9a4 	bl	1bdd8 <__aeabi_ddiv>
   10a90:	4602      	mov	r2, r0
   10a92:	460b      	mov	r3, r1
   10a94:	2000      	movs	r0, #0
   10a96:	4979      	ldr	r1, [pc, #484]	; (10c7c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10a98:	f00a fec0 	bl	1b81c <__aeabi_dsub>
   10a9c:	2200      	movs	r2, #0
   10a9e:	4b78      	ldr	r3, [pc, #480]	; (10c80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10aa0:	f00b f870 	bl	1bb84 <__aeabi_dmul>
   10aa4:	f00b fb50 	bl	1c148 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10aa8:	f00b f818 	bl	1badc <__aeabi_f2d>
   10aac:	2200      	movs	r2, #0
   10aae:	4b75      	ldr	r3, [pc, #468]	; (10c84 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10ab0:	f00a feb6 	bl	1b820 <__adddf3>
   10ab4:	f00b fb28 	bl	1c108 <__aeabi_d2uiz>
   10ab8:	b280      	uxth	r0, r0
   10aba:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10abc:	2e00      	cmp	r6, #0
   10abe:	f47f ae91 	bne.w	107e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10ac2:	6a22      	ldr	r2, [r4, #32]
   10ac4:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10ac8:	7890      	ldrb	r0, [r2, #2]
   10aca:	01db      	lsls	r3, r3, #7
   10acc:	e6a1      	b.n	10812 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10ace:	4649      	mov	r1, r9
   10ad0:	4620      	mov	r0, r4
   10ad2:	4798      	blx	r3
   10ad4:	6a22      	ldr	r2, [r4, #32]
   10ad6:	6925      	ldr	r5, [r4, #16]
   10ad8:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10adc:	7890      	ldrb	r0, [r2, #2]
   10ade:	01db      	lsls	r3, r3, #7
   10ae0:	e697      	b.n	10812 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10ae6:	9207      	str	r2, [sp, #28]
   10ae8:	9206      	str	r2, [sp, #24]
   10aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10aee:	9202      	str	r2, [sp, #8]
   10af0:	2239      	movs	r2, #57	; 0x39
   10af2:	9205      	str	r2, [sp, #20]
   10af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10af8:	9201      	str	r2, [sp, #4]
   10afa:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10afc:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10afe:	2601      	movs	r6, #1
   10b00:	f04f 0936 	mov.w	r9, #54	; 0x36
   10b04:	9204      	str	r2, [sp, #16]
   10b06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b0a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b0e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10b12:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10b14:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b18:	f04f 0a17 	mov.w	sl, #23
   10b1c:	9200      	str	r2, [sp, #0]
   10b1e:	e53a      	b.n	10596 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10b20:	2900      	cmp	r1, #0
   10b22:	f040 8092 	bne.w	10c4a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10b26:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10b2a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10b2e:	2501      	movs	r5, #1
   10b30:	4095      	lsls	r5, r2
   10b32:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10b34:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10b38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10b3c:	4413      	add	r3, r2
   10b3e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10b42:	f36f 0200 	bfc	r2, #0, #1
   10b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10b4a:	e5c7      	b.n	106dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b50:	9207      	str	r2, [sp, #28]
   10b52:	9206      	str	r2, [sp, #24]
   10b54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10b58:	9202      	str	r2, [sp, #8]
   10b5a:	223d      	movs	r2, #61	; 0x3d
   10b5c:	9205      	str	r2, [sp, #20]
   10b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10b62:	9201      	str	r2, [sp, #4]
   10b64:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b66:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b68:	2601      	movs	r6, #1
   10b6a:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10b6e:	9204      	str	r2, [sp, #16]
   10b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b74:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b78:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10b7c:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10b7e:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b82:	f04f 0a18 	mov.w	sl, #24
   10b86:	9200      	str	r2, [sp, #0]
   10b88:	e505      	b.n	10596 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10b8a:	2900      	cmp	r1, #0
   10b8c:	d165      	bne.n	10c5a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10b8e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10b92:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10b96:	2001      	movs	r0, #1
   10b98:	4090      	lsls	r0, r2
   10b9a:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10b9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ba0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10ba4:	4413      	add	r3, r2
   10ba6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10baa:	f36f 0200 	bfc	r2, #0, #1
   10bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10bb2:	e730      	b.n	10a16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10bb4:	4620      	mov	r0, r4
   10bb6:	4798      	blx	r3
   10bb8:	6925      	ldr	r5, [r4, #16]
   10bba:	e602      	b.n	107c2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10bbc:	4620      	mov	r0, r4
   10bbe:	4790      	blx	r2
   10bc0:	6820      	ldr	r0, [r4, #0]
   10bc2:	e5f0      	b.n	107a6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10bc4:	2205      	movs	r2, #5
   10bc6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10bce:	9202      	str	r2, [sp, #8]
   10bd0:	224d      	movs	r2, #77	; 0x4d
   10bd2:	492d      	ldr	r1, [pc, #180]	; (10c88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10bd4:	9205      	str	r2, [sp, #20]
   10bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10bda:	9201      	str	r2, [sp, #4]
   10bdc:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10bde:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10be0:	2602      	movs	r6, #2
   10be2:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10be6:	9107      	str	r1, [sp, #28]
   10be8:	9204      	str	r2, [sp, #16]
   10bea:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10bf2:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10bf4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10bf8:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10bfa:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10bfe:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10c02:	9200      	str	r2, [sp, #0]
   10c04:	e4c7      	b.n	10596 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10c0a:	9207      	str	r2, [sp, #28]
   10c0c:	9206      	str	r2, [sp, #24]
   10c0e:	2241      	movs	r2, #65	; 0x41
   10c10:	9205      	str	r2, [sp, #20]
   10c12:	2240      	movs	r2, #64	; 0x40
   10c14:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c16:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c18:	2102      	movs	r1, #2
   10c1a:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10c1e:	9204      	str	r2, [sp, #16]
   10c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10c24:	4637      	mov	r7, r6
   10c26:	9601      	str	r6, [sp, #4]
   10c28:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c2a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c2e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10c32:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10c34:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c38:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10c3c:	9200      	str	r2, [sp, #0]
   10c3e:	e4aa      	b.n	10596 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10c40:	682b      	ldr	r3, [r5, #0]
   10c42:	f36f 631b 	bfc	r3, #24, #4
   10c46:	602b      	str	r3, [r5, #0]
   10c48:	e687      	b.n	1095a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10c4a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c4e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c52:	2501      	movs	r5, #1
   10c54:	4095      	lsls	r5, r2
   10c56:	614d      	str	r5, [r1, #20]
   10c58:	e76c      	b.n	10b34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10c5a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c5e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c62:	2001      	movs	r0, #1
   10c64:	4090      	lsls	r0, r2
   10c66:	6148      	str	r0, [r1, #20]
   10c68:	e798      	b.n	10b9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10c6a:	bf00      	nop
   10c6c:	e000e100 	.word	0xe000e100
   10c70:	40001c00 	.word	0x40001c00
   10c74:	40300000 	.word	0x40300000
   10c78:	200000e0 	.word	0x200000e0
   10c7c:	3ff00000 	.word	0x3ff00000
   10c80:	40f00000 	.word	0x40f00000
   10c84:	3fe00000 	.word	0x3fe00000
   10c88:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c8c:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10c8e:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c90:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10c94:	f36c 0100 	bfi	r1, ip, #0, #1
   10c98:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10c9c:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10c9e:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ca2:	0790      	lsls	r0, r2, #30
   10ca4:	d503      	bpl.n	10cae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10ca6:	681a      	ldr	r2, [r3, #0]
   10ca8:	f36c 0241 	bfi	r2, ip, #1, #1
   10cac:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10cae:	69da      	ldr	r2, [r3, #28]
   10cb0:	f012 0202 	ands.w	r2, r2, #2
   10cb4:	d1fb      	bne.n	10cae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10cb6:	6821      	ldr	r1, [r4, #0]
   10cb8:	680b      	ldr	r3, [r1, #0]
   10cba:	4543      	cmp	r3, r8
   10cbc:	d13b      	bne.n	10d36 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10cbe:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10cc2:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10cc6:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10cca:	684b      	ldr	r3, [r1, #4]
   10ccc:	4a1c      	ldr	r2, [pc, #112]	; (10d40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10cce:	4293      	cmp	r3, r2
   10cd0:	d12d      	bne.n	10d2e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10cd2:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10cd4:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10cd6:	2104      	movs	r1, #4
    m_inTail = 0;
   10cd8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10cdc:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10cde:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10ce2:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10ce4:	7b21      	ldrb	r1, [r4, #12]
   10ce6:	6813      	ldr	r3, [r2, #0]
   10ce8:	2900      	cmp	r1, #0
   10cea:	bf0c      	ite	eq
   10cec:	2100      	moveq	r1, #0
   10cee:	2102      	movne	r1, #2
   10cf0:	f361 4311 	bfi	r3, r1, #16, #2
   10cf4:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10cf6:	f1bb 0f00 	cmp.w	fp, #0
   10cfa:	f43f ae18 	beq.w	1092e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10cfe:	6813      	ldr	r3, [r2, #0]
   10d00:	f043 0302 	orr.w	r3, r3, #2
   10d04:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10d06:	69d3      	ldr	r3, [r2, #28]
   10d08:	0799      	lsls	r1, r3, #30
   10d0a:	d4fc      	bmi.n	10d06 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d0c:	6a23      	ldr	r3, [r4, #32]
   10d0e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10d12:	789b      	ldrb	r3, [r3, #2]
   10d14:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10d18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d20:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d24:	f042 0201 	orr.w	r2, r2, #1
   10d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10d2c:	e5ff      	b.n	1092e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10d2e:	4620      	mov	r0, r4
   10d30:	4798      	blx	r3
   10d32:	6922      	ldr	r2, [r4, #16]
   10d34:	e7d6      	b.n	10ce4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10d36:	4620      	mov	r0, r4
   10d38:	4798      	blx	r3
   10d3a:	6821      	ldr	r1, [r4, #0]
   10d3c:	e7c5      	b.n	10cca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10d3e:	bf00      	nop
   10d40:	0000fe29 	.word	0x0000fe29

00010d44 <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10d44:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   10d48:	b92a      	cbnz	r2, 10d56 <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   10d4a:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   10d4c:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   10d4e:	428a      	cmp	r2, r1
        m_portOpen = true;
   10d50:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   10d54:	d900      	bls.n	10d58 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   10d56:	4770      	bx	lr
   10d58:	f7ff bb86 	b.w	10468 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00010d5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d5e:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   10d60:	4f20      	ldr	r7, [pc, #128]	; (10de4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   10d62:	6182      	str	r2, [r0, #24]
   10d64:	61c3      	str	r3, [r0, #28]
   10d66:	4d20      	ldr	r5, [pc, #128]	; (10de8 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   10d68:	60a7      	str	r7, [r4, #8]
   10d6a:	9f06      	ldr	r7, [sp, #24]
   10d6c:	f8df c080 	ldr.w	ip, [pc, #128]	; 10df0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10d70:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   10d74:	6065      	str	r5, [r4, #4]
   10d76:	2307      	movs	r3, #7
   10d78:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10d7a:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   10d7c:	6227      	str	r7, [r4, #32]
   10d7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   10d82:	2780      	movs	r7, #128	; 0x80
   10d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d88:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   10d8c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   10d90:	f8c4 c000 	str.w	ip, [r4]
   10d94:	6261      	str	r1, [r4, #36]	; 0x24
   10d96:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   10d9a:	85a2      	strh	r2, [r4, #44]	; 0x2c
   10d9c:	4629      	mov	r1, r5
   10d9e:	463a      	mov	r2, r7
   10da0:	6166      	str	r6, [r4, #20]
   10da2:	7325      	strb	r5, [r4, #12]
   10da4:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   10da8:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   10dac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10db0:	f00d fb9c 	bl	1e4ec <memset>
   10db4:	463a      	mov	r2, r7
   10db6:	4629      	mov	r1, r5
   10db8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10dbc:	f00d fb96 	bl	1e4ec <memset>
   10dc0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   10dc4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10dc8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10dcc:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   10dd0:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   10dd4:	7a32      	ldrb	r2, [r6, #8]
   10dd6:	4b05      	ldr	r3, [pc, #20]	; (10dec <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   10dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10ddc:	6123      	str	r3, [r4, #16]
}
   10dde:	4620      	mov	r0, r4
   10de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10de2:	bf00      	nop
   10de4:	02000100 	.word	0x02000100
   10de8:	00080102 	.word	0x00080102
   10dec:	000234f4 	.word	0x000234f4
   10df0:	000234ac 	.word	0x000234ac

00010df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10df4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   10df6:	4907      	ldr	r1, [pc, #28]	; (10e14 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10df8:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   10dfc:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   10dfe:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10e00:	fbb2 f2f3 	udiv	r2, r2, r3
   10e04:	2a02      	cmp	r2, #2
   10e06:	bf38      	it	cc
   10e08:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   10e0a:	680b      	ldr	r3, [r1, #0]
   10e0c:	1a1b      	subs	r3, r3, r0
   10e0e:	429a      	cmp	r2, r3
   10e10:	d8fb      	bhi.n	10e0a <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   10e12:	4770      	bx	lr
   10e14:	20001be0 	.word	0x20001be0

00010e18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   10e18:	2901      	cmp	r1, #1
   10e1a:	d901      	bls.n	10e20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   10e1c:	2000      	movs	r0, #0
   10e1e:	4770      	bx	lr
    if (!m_portOpen) {
   10e20:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   10e24:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   10e26:	b10a      	cbz	r2, 10e2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   10e28:	f7ff bb1e 	b.w	10468 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   10e2c:	2001      	movs	r0, #1
}
   10e2e:	4770      	bx	lr

00010e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   10e30:	2901      	cmp	r1, #1
    m_ssMode = mode;
   10e32:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   10e34:	d914      	bls.n	10e60 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   10e36:	2902      	cmp	r1, #2
   10e38:	d110      	bne.n	10e5c <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e3a:	6982      	ldr	r2, [r0, #24]
   10e3c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10e40:	7893      	ldrb	r3, [r2, #2]
   10e42:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10e46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   10e4e:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e54:	4302      	orrs	r2, r0
   10e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e5a:	4770      	bx	lr
            success = false;
   10e5c:	2000      	movs	r0, #0
}
   10e5e:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10e60:	6982      	ldr	r2, [r0, #24]
   10e62:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10e66:	7892      	ldrb	r2, [r2, #2]
   10e68:	01db      	lsls	r3, r3, #7
   10e6a:	b199      	cbz	r1, 10e94 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   10e6c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10e70:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10e74:	2001      	movs	r0, #1
   10e76:	4090      	lsls	r0, r2
   10e78:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e82:	4413      	add	r3, r2
   10e84:	2001      	movs	r0, #1
   10e86:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e8a:	f36f 0200 	bfc	r2, #0, #1
   10e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e92:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10e94:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10e98:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10e9c:	2001      	movs	r0, #1
   10e9e:	4090      	lsls	r0, r2
   10ea0:	6188      	str	r0, [r1, #24]
   10ea2:	e7ea      	b.n	10e7a <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00010ea4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   10ea4:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   10ea6:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   10ea8:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   10eaa:	2b01      	cmp	r3, #1
    m_phase = phase;
   10eac:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   10eae:	d000      	beq.n	10eb2 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   10eb0:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10eb2:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10eb4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10eb6:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10eba:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ebc:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ebe:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10ec2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ec6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10eca:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ece:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10ed2:	f36f 0100 	bfc	r1, #0, #1
   10ed6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10eda:	6813      	ldr	r3, [r2, #0]
   10edc:	0799      	lsls	r1, r3, #30
   10ede:	d503      	bpl.n	10ee8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10ee0:	6813      	ldr	r3, [r2, #0]
   10ee2:	f36f 0341 	bfc	r3, #1, #1
   10ee6:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10ee8:	69d3      	ldr	r3, [r2, #28]
   10eea:	f013 0302 	ands.w	r3, r3, #2
   10eee:	d1fb      	bne.n	10ee8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   10ef0:	6802      	ldr	r2, [r0, #0]
   10ef2:	4604      	mov	r4, r0
   10ef4:	6811      	ldr	r1, [r2, #0]
   10ef6:	4821      	ldr	r0, [pc, #132]	; (10f7c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   10ef8:	4281      	cmp	r1, r0
   10efa:	d136      	bne.n	10f6a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   10efc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10f00:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10f04:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10f08:	6853      	ldr	r3, [r2, #4]
   10f0a:	4a1d      	ldr	r2, [pc, #116]	; (10f80 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   10f0c:	4293      	cmp	r3, r2
   10f0e:	d130      	bne.n	10f72 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f10:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10f12:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f14:	2104      	movs	r1, #4
    m_inTail = 0;
   10f16:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10f1a:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10f1c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f20:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10f22:	7a21      	ldrb	r1, [r4, #8]
   10f24:	681a      	ldr	r2, [r3, #0]
   10f26:	f361 725d 	bfi	r2, r1, #29, #1
   10f2a:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10f2c:	7a61      	ldrb	r1, [r4, #9]
   10f2e:	681a      	ldr	r2, [r3, #0]
   10f30:	f361 721c 	bfi	r2, r1, #28, #1
   10f34:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   10f36:	2d00      	cmp	r5, #0
   10f38:	d0ba      	beq.n	10eb0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10f3a:	681a      	ldr	r2, [r3, #0]
   10f3c:	f042 0202 	orr.w	r2, r2, #2
   10f40:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10f42:	69da      	ldr	r2, [r3, #28]
   10f44:	0792      	lsls	r2, r2, #30
   10f46:	d4fc      	bmi.n	10f42 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f48:	6a22      	ldr	r2, [r4, #32]
   10f4a:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10f4e:	7893      	ldrb	r3, [r2, #2]
   10f50:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10f54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10f5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f60:	f042 0201 	orr.w	r2, r2, #1
   10f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f68:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   10f6a:	4620      	mov	r0, r4
   10f6c:	4788      	blx	r1
   10f6e:	6822      	ldr	r2, [r4, #0]
   10f70:	e7ca      	b.n	10f08 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   10f72:	4620      	mov	r0, r4
   10f74:	4798      	blx	r3
   10f76:	6923      	ldr	r3, [r4, #16]
   10f78:	e7d3      	b.n	10f22 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   10f7a:	bf00      	nop
   10f7c:	0000fe19 	.word	0x0000fe19
   10f80:	0000fe29 	.word	0x0000fe29

00010f84 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10f84:	b470      	push	{r4, r5, r6}
   10f86:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   10f88:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10f8c:	b120      	cbz	r0, 10f98 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   10f8e:	79e0      	ldrb	r0, [r4, #7]
   10f90:	2801      	cmp	r0, #1
        return 0;
   10f92:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   10f96:	d001      	beq.n	10f9c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   10f98:	bc70      	pop	{r4, r5, r6}
   10f9a:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   10f9c:	2b00      	cmp	r3, #0
   10f9e:	ddfb      	ble.n	10f98 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   10fa0:	6925      	ldr	r5, [r4, #16]
   10fa2:	b1b9      	cbz	r1, 10fd4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   10fa4:	1c4e      	adds	r6, r1, #1
   10fa6:	7809      	ldrb	r1, [r1, #0]
   10fa8:	62a9      	str	r1, [r5, #40]	; 0x28
   10faa:	e003      	b.n	10fb4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   10fac:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10fb0:	2900      	cmp	r1, #0
   10fb2:	d0f1      	beq.n	10f98 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10fb4:	7e29      	ldrb	r1, [r5, #24]
   10fb6:	0749      	lsls	r1, r1, #29
   10fb8:	d5f8      	bpl.n	10fac <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   10fba:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10fbc:	0789      	lsls	r1, r1, #30
   10fbe:	d5f5      	bpl.n	10fac <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   10fc0:	b152      	cbz	r2, 10fd8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   10fc2:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10fc4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10fc6:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   10fc8:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10fca:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   10fce:	d007      	beq.n	10fe0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   10fd0:	4631      	mov	r1, r6
   10fd2:	e7e5      	b.n	10fa0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   10fd4:	460e      	mov	r6, r1
   10fd6:	e7e7      	b.n	10fa8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   10fd8:	3001      	adds	r0, #1
   10fda:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   10fdc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   10fde:	d1f7      	bne.n	10fd0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   10fe0:	4618      	mov	r0, r3
   10fe2:	e7d9      	b.n	10f98 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

00010fe4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   10fe8:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   10fec:	b12d      	cbz	r5, 10ffa <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   10fee:	f890 8007 	ldrb.w	r8, [r0, #7]
   10ff2:	f1b8 0f01 	cmp.w	r8, #1
   10ff6:	d003      	beq.n	11000 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   10ff8:	2500      	movs	r5, #0
}
   10ffa:	4628      	mov	r0, r5
   10ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11000:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   11004:	f1be 0f07 	cmp.w	lr, #7
   11008:	d0f6      	beq.n	10ff8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   1100a:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   1100e:	2c07      	cmp	r4, #7
   11010:	d0f2      	beq.n	10ff8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11012:	4616      	mov	r6, r2
   11014:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   11016:	4670      	mov	r0, lr
   11018:	461f      	mov	r7, r3
   1101a:	4689      	mov	r9, r1
   1101c:	f7fd fe76 	bl	ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11020:	b336      	cbz	r6, 11070 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11022:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   11024:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11028:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   1102a:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   1102c:	b2be      	uxth	r6, r7
   1102e:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11030:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11034:	f7fd fe60 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11038:	6803      	ldr	r3, [r0, #0]
   1103a:	f043 0302 	orr.w	r3, r3, #2
   1103e:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11040:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11044:	f7fd fe62 	bl	ed0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   11048:	f1b9 0f00 	cmp.w	r9, #0
   1104c:	d015      	beq.n	1107a <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   1104e:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11050:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11054:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   11056:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11058:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   1105a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1105e:	f7fd fe4b 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11062:	6803      	ldr	r3, [r0, #0]
   11064:	f043 0302 	orr.w	r3, r3, #2
   11068:	6003      	str	r3, [r0, #0]
}
   1106a:	4628      	mov	r0, r5
   1106c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   11070:	4b04      	ldr	r3, [pc, #16]	; (11084 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11072:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11074:	f8a0 8000 	strh.w	r8, [r0]
   11078:	e7d8      	b.n	1102c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   1107a:	4b02      	ldr	r3, [pc, #8]	; (11084 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   1107c:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   1107e:	2301      	movs	r3, #1
   11080:	8003      	strh	r3, [r0, #0]
   11082:	e7e9      	b.n	11058 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   11084:	20001f10 	.word	0x20001f10

00011088 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11088:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   1108c:	2b07      	cmp	r3, #7
   1108e:	d016      	beq.n	110be <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   11090:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   11094:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   11096:	b510      	push	{r4, lr}
   11098:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1109a:	d005      	beq.n	110a8 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   1109c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   110a0:	b113      	cbz	r3, 110a8 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   110a2:	79e3      	ldrb	r3, [r4, #7]
   110a4:	2b01      	cmp	r3, #1
   110a6:	d001      	beq.n	110ac <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   110a8:	2001      	movs	r0, #1
   110aa:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   110ac:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   110b0:	f7fd fe22 	bl	ecf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   110b4:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   110b6:	079b      	lsls	r3, r3, #30
   110b8:	d4f0      	bmi.n	1109c <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   110ba:	2001      	movs	r0, #1
   110bc:	bd10      	pop	{r4, pc}
   110be:	2001      	movs	r0, #1
   110c0:	4770      	bx	lr
   110c2:	bf00      	nop

000110c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   110c4:	79c3      	ldrb	r3, [r0, #7]
   110c6:	2b01      	cmp	r3, #1
   110c8:	d022      	beq.n	11110 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   110ca:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   110ce:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   110d2:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   110d4:	429a      	cmp	r2, r3
   110d6:	d019      	beq.n	1110c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   110d8:	7e0b      	ldrb	r3, [r1, #24]
   110da:	07da      	lsls	r2, r3, #31
   110dc:	d403      	bmi.n	110e6 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   110de:	e018      	b.n	11112 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   110e0:	7e0b      	ldrb	r3, [r1, #24]
   110e2:	07db      	lsls	r3, r3, #31
   110e4:	d514      	bpl.n	11110 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   110e6:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   110ea:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   110ee:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   110f0:	3301      	adds	r3, #1
   110f2:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   110f6:	628a      	str	r2, [r1, #40]	; 0x28
   110f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   110fc:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11100:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11104:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11108:	429a      	cmp	r2, r3
   1110a:	d1e9      	bne.n	110e0 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   1110c:	2301      	movs	r3, #1
   1110e:	750b      	strb	r3, [r1, #20]
   11110:	4770      	bx	lr
   11112:	4770      	bx	lr

00011114 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   11114:	79c3      	ldrb	r3, [r0, #7]
   11116:	2b01      	cmp	r3, #1
   11118:	d100      	bne.n	1111c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   1111a:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   1111c:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   1111e:	6901      	ldr	r1, [r0, #16]
   11120:	f891 3020 	ldrb.w	r3, [r1, #32]
   11124:	b303      	cbz	r3, 11168 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   11126:	2300      	movs	r3, #0
   11128:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   1112c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11130:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   11134:	f103 0218 	add.w	r2, r3, #24
   11138:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   1113c:	3301      	adds	r3, #1
   1113e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   11142:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   11146:	7e0b      	ldrb	r3, [r1, #24]
   11148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1114c:	760b      	strb	r3, [r1, #24]
   1114e:	e00b      	b.n	11168 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11150:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11154:	429a      	cmp	r2, r3
   11156:	d00f      	beq.n	11178 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   11158:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   1115c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   1115e:	3218      	adds	r2, #24
   11160:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   11164:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   11168:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   1116c:	7e0a      	ldrb	r2, [r1, #24]
   1116e:	3301      	adds	r3, #1
   11170:	0752      	lsls	r2, r2, #29
   11172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11176:	d4eb      	bmi.n	11150 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   11178:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1117c:	429a      	cmp	r2, r3
   1117e:	d002      	beq.n	11186 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   11180:	f85d 4b04 	ldr.w	r4, [sp], #4
   11184:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   11186:	2304      	movs	r3, #4
   11188:	750b      	strb	r3, [r1, #20]
}
   1118a:	e7f9      	b.n	11180 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

0001118c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   1118c:	79c3      	ldrb	r3, [r0, #7]
   1118e:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11190:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   11192:	d022      	beq.n	111da <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   11194:	7e1a      	ldrb	r2, [r3, #24]
   11196:	09d2      	lsrs	r2, r2, #7
   11198:	d01e      	beq.n	111d8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   1119a:	2280      	movs	r2, #128	; 0x80
   1119c:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   1119e:	8b5a      	ldrh	r2, [r3, #26]
   111a0:	0792      	lsls	r2, r2, #30
   111a2:	d509      	bpl.n	111b8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   111a4:	8b5a      	ldrh	r2, [r3, #26]
   111a6:	f042 0202 	orr.w	r2, r2, #2
   111aa:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   111ac:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   111b0:	f042 0201 	orr.w	r2, r2, #1
   111b4:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   111b8:	8b5a      	ldrh	r2, [r3, #26]
   111ba:	07d1      	lsls	r1, r2, #31
   111bc:	d410      	bmi.n	111e0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   111be:	8b5a      	ldrh	r2, [r3, #26]
   111c0:	0752      	lsls	r2, r2, #29
   111c2:	d509      	bpl.n	111d8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   111c4:	8b5a      	ldrh	r2, [r3, #26]
   111c6:	f042 0204 	orr.w	r2, r2, #4
   111ca:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   111cc:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   111d0:	f043 0304 	orr.w	r3, r3, #4
   111d4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   111d8:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   111da:	2280      	movs	r2, #128	; 0x80
   111dc:	761a      	strb	r2, [r3, #24]
            break;
   111de:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   111e0:	8b5a      	ldrh	r2, [r3, #26]
   111e2:	f042 0201 	orr.w	r2, r2, #1
   111e6:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   111e8:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   111ec:	f042 0202 	orr.w	r2, r2, #2
   111f0:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   111f4:	e7e3      	b.n	111be <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   111f6:	bf00      	nop

000111f8 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   111f8:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   111fc:	4770      	bx	lr
   111fe:	bf00      	nop

00011200 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11200:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11204:	e7f8      	b.n	111f8 <_ZN9ClearCore12SerialDriver4ModeEv>
   11206:	bf00      	nop

00011208 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11208:	2007      	movs	r0, #7
   1120a:	4770      	bx	lr

0001120c <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   1120c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11210:	e7fa      	b.n	11208 <_ZN9ClearCore12SerialDriver4TypeEv>
   11212:	bf00      	nop

00011214 <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   11214:	6803      	ldr	r3, [r0, #0]
   11216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11218:	4718      	bx	r3
   1121a:	bf00      	nop

0001121c <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   1121c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11220:	e7f8      	b.n	11214 <_ZN9ClearCore12SerialDriver10IsWritableEv>
   11222:	bf00      	nop

00011224 <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   11224:	b508      	push	{r3, lr}
        return PortIsOpen();
   11226:	6803      	ldr	r3, [r0, #0]
   11228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1122a:	4798      	blx	r3
    }
   1122c:	b200      	sxth	r0, r0
   1122e:	bd08      	pop	{r3, pc}

00011230 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11230:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11234:	e7f6      	b.n	11224 <_ZN9ClearCore12SerialDriver5StateEv>
   11236:	bf00      	nop

00011238 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11238:	2000      	movs	r0, #0
   1123a:	4770      	bx	lr

0001123c <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   1123c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11240:	e7fa      	b.n	11238 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   11242:	bf00      	nop

00011244 <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   11244:	4770      	bx	lr
   11246:	bf00      	nop

00011248 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11248:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1124c:	e7fa      	b.n	11244 <_ZN9ClearCore12SerialDriver7RefreshEv>
   1124e:	bf00      	nop

00011250 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11254:	b082      	sub	sp, #8
   11256:	4688      	mov	r8, r1
   11258:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1125a:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   1125e:	9500      	str	r5, [sp, #0]
   11260:	9401      	str	r4, [sp, #4]
   11262:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   11264:	4604      	mov	r4, r0
   11266:	4617      	mov	r7, r2
   11268:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   1126a:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   1126c:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   1126e:	f7ff fd75 	bl	10d5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11272:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   11276:	f7fd f951 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
   1127a:	4b09      	ldr	r3, [pc, #36]	; (112a0 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   1127c:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11280:	f103 0208 	add.w	r2, r3, #8
   11284:	4620      	mov	r0, r4
   11286:	337c      	adds	r3, #124	; 0x7c
   11288:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   1128c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11290:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   11294:	6022      	str	r2, [r4, #0]
   11296:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1129a:	b002      	add	sp, #8
   1129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112a0:	00023514 	.word	0x00023514

000112a4 <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   112a4:	b538      	push	{r3, r4, r5, lr}
   112a6:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   112a8:	f7fe fe50 	bl	ff4c <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   112ac:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   112b0:	4605      	mov	r5, r0
        if (m_portOpen) {
   112b2:	b113      	cbz	r3, 112ba <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   112b4:	4620      	mov	r0, r4
   112b6:	f7ff fd9d 	bl	10df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   112ba:	4628      	mov	r0, r5
   112bc:	bd38      	pop	{r3, r4, r5, pc}
   112be:	bf00      	nop

000112c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   112c0:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   112c2:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   112c6:	428b      	cmp	r3, r1
   112c8:	d00d      	beq.n	112e6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   112ca:	2b10      	cmp	r3, #16
   112cc:	460d      	mov	r5, r1
   112ce:	4604      	mov	r4, r0
   112d0:	f000 808c 	beq.w	113ec <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   112d4:	f1a5 030d 	sub.w	r3, r5, #13
   112d8:	2b03      	cmp	r3, #3
   112da:	f200 808c 	bhi.w	113f6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   112de:	e8df f003 	tbb	[pc, r3]
   112e2:	3169      	.short	0x3169
   112e4:	4f06      	.short	0x4f06
        return true;
   112e6:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   112e8:	4628      	mov	r0, r5
   112ea:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   112ec:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   112ee:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   112f2:	4b42      	ldr	r3, [pc, #264]	; (113fc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   112f4:	f3bf 8f5b 	dmb	ish
   112f8:	43d2      	mvns	r2, r2
   112fa:	e853 1f00 	ldrex	r1, [r3]
   112fe:	4011      	ands	r1, r2
   11300:	e843 1000 	strex	r0, r1, [r3]
   11304:	2800      	cmp	r0, #0
   11306:	d1f8      	bne.n	112fa <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11308:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1130c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11310:	f3bf 8f5b 	dmb	ish
   11314:	e853 1f00 	ldrex	r1, [r3]
   11318:	4311      	orrs	r1, r2
   1131a:	e843 1000 	strex	r0, r1, [r3]
   1131e:	2800      	cmp	r0, #0
   11320:	d1f8      	bne.n	11314 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   11322:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   11326:	2101      	movs	r1, #1
    m_mode = newMode;
   11328:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   1132c:	4620      	mov	r0, r4
   1132e:	f7ff fd73 	bl	10e18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11332:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   11336:	2d00      	cmp	r5, #0
   11338:	d0d5      	beq.n	112e6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   1133a:	4620      	mov	r0, r4
   1133c:	f7ff fd5a 	bl	10df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11340:	4628      	mov	r0, r5
   11342:	bd38      	pop	{r3, r4, r5, pc}
   11344:	4b2d      	ldr	r3, [pc, #180]	; (113fc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11346:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1134a:	f3bf 8f5b 	dmb	ish
   1134e:	e853 1f00 	ldrex	r1, [r3]
   11352:	4311      	orrs	r1, r2
   11354:	e843 1000 	strex	r0, r1, [r3]
   11358:	2800      	cmp	r0, #0
   1135a:	d1f8      	bne.n	1134e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   1135c:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11360:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11364:	f3bf 8f5b 	dmb	ish
   11368:	43d2      	mvns	r2, r2
   1136a:	e853 1f00 	ldrex	r1, [r3]
   1136e:	4011      	ands	r1, r2
   11370:	e843 1000 	strex	r0, r1, [r3]
   11374:	2800      	cmp	r0, #0
   11376:	d1f8      	bne.n	1136a <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   11378:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   1137c:	2100      	movs	r1, #0
   1137e:	e7d3      	b.n	11328 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11380:	2201      	movs	r2, #1
   11382:	2100      	movs	r1, #0
   11384:	4620      	mov	r0, r4
   11386:	f7ff fd8d 	bl	10ea4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   1138a:	2101      	movs	r1, #1
   1138c:	4620      	mov	r0, r4
   1138e:	f7ff fd4f 	bl	10e30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11392:	6823      	ldr	r3, [r4, #0]
   11394:	4a1a      	ldr	r2, [pc, #104]	; (11400 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   11396:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11398:	491a      	ldr	r1, [pc, #104]	; (11404 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   1139a:	4293      	cmp	r3, r2
   1139c:	4620      	mov	r0, r4
   1139e:	d1a5      	bne.n	112ec <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   113a0:	f7fe fdd4 	bl	ff4c <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   113a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   113a8:	2b00      	cmp	r3, #0
   113aa:	d0a0      	beq.n	112ee <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   113ac:	4620      	mov	r0, r4
   113ae:	f7ff fd21 	bl	10df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   113b2:	e79c      	b.n	112ee <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   113b4:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   113b8:	4b10      	ldr	r3, [pc, #64]	; (113fc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   113ba:	f3bf 8f5b 	dmb	ish
   113be:	43d2      	mvns	r2, r2
   113c0:	e853 1f00 	ldrex	r1, [r3]
   113c4:	4011      	ands	r1, r2
   113c6:	e843 1000 	strex	r0, r1, [r3]
   113ca:	2800      	cmp	r0, #0
   113cc:	d1f8      	bne.n	113c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   113ce:	f3bf 8f5b 	dmb	ish
   113d2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   113d6:	f3bf 8f5b 	dmb	ish
   113da:	43d2      	mvns	r2, r2
   113dc:	e853 1f00 	ldrex	r1, [r3]
   113e0:	4011      	ands	r1, r2
   113e2:	e843 1000 	strex	r0, r1, [r3]
   113e6:	2800      	cmp	r0, #0
   113e8:	d0c6      	beq.n	11378 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   113ea:	e7f7      	b.n	113dc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   113ec:	4b06      	ldr	r3, [pc, #24]	; (11408 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   113ee:	6818      	ldr	r0, [r3, #0]
   113f0:	f7fe fae2 	bl	f9b8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   113f4:	e76e      	b.n	112d4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   113f6:	2500      	movs	r5, #0
   113f8:	e776      	b.n	112e8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   113fa:	bf00      	nop
   113fc:	20001ac4 	.word	0x20001ac4
   11400:	000112a5 	.word	0x000112a5
   11404:	0007a120 	.word	0x0007a120
   11408:	20001efc 	.word	0x20001efc

0001140c <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   1140c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11410:	f7ff bf56 	b.w	112c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

00011414 <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   11414:	b510      	push	{r4, lr}
   11416:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11418:	f7fe fcfa 	bl	fe10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1141c:	b100      	cbz	r0, 11420 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   1141e:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11420:	4620      	mov	r0, r4
   11422:	f7ff fc8f 	bl	10d44 <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   11426:	4620      	mov	r0, r4
   11428:	f7ff fce4 	bl	10df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1142c:	4b0c      	ldr	r3, [pc, #48]	; (11460 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   1142e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11432:	f3bf 8f5b 	dmb	ish
   11436:	e853 1f00 	ldrex	r1, [r3]
   1143a:	4311      	orrs	r1, r2
   1143c:	e843 1000 	strex	r0, r1, [r3]
   11440:	2800      	cmp	r0, #0
   11442:	d1f8      	bne.n	11436 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   11444:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11448:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1144c:	2b10      	cmp	r3, #16
   1144e:	d1e6      	bne.n	1141e <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11450:	4b04      	ldr	r3, [pc, #16]	; (11464 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   11452:	4621      	mov	r1, r4
   11454:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   11456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   1145a:	f7fe bacd 	b.w	f9f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1145e:	bf00      	nop
   11460:	20001ac4 	.word	0x20001ac4
   11464:	20001efc 	.word	0x20001efc

00011468 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11468:	b510      	push	{r4, lr}
   1146a:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   1146c:	f7fe fcd0 	bl	fe10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11470:	b1a8      	cbz	r0, 1149e <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   11472:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11476:	2b10      	cmp	r3, #16
   11478:	d012      	beq.n	114a0 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   1147a:	4620      	mov	r0, r4
   1147c:	f7fe fe10 	bl	100a0 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11480:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11484:	4a09      	ldr	r2, [pc, #36]	; (114ac <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   11486:	f3bf 8f5b 	dmb	ish
   1148a:	43db      	mvns	r3, r3
   1148c:	e852 1f00 	ldrex	r1, [r2]
   11490:	4019      	ands	r1, r3
   11492:	e842 1000 	strex	r0, r1, [r2]
   11496:	2800      	cmp	r0, #0
   11498:	d1f8      	bne.n	1148c <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   1149a:	f3bf 8f5b 	dmb	ish
   1149e:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   114a0:	4b03      	ldr	r3, [pc, #12]	; (114b0 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   114a2:	6818      	ldr	r0, [r3, #0]
   114a4:	f7fe fa88 	bl	f9b8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   114a8:	e7e7      	b.n	1147a <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   114aa:	bf00      	nop
   114ac:	20001ac4 	.word	0x20001ac4
   114b0:	20001efc 	.word	0x20001efc

000114b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   114b4:	6803      	ldr	r3, [r0, #0]
   114b6:	4a37      	ldr	r2, [pc, #220]	; (11594 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   114b8:	68db      	ldr	r3, [r3, #12]
   114ba:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   114bc:	b510      	push	{r4, lr}
   114be:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   114c0:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   114c4:	d150      	bne.n	11568 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   114c6:	f7fe fca3 	bl	fe10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   114ca:	b1a8      	cbz	r0, 114f8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   114cc:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   114d0:	2b10      	cmp	r3, #16
   114d2:	d059      	beq.n	11588 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   114d4:	4620      	mov	r0, r4
   114d6:	f7fe fde3 	bl	100a0 <_ZN9ClearCore10SerialBase9PortCloseEv>
   114da:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   114de:	4a2e      	ldr	r2, [pc, #184]	; (11598 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   114e0:	f3bf 8f5b 	dmb	ish
   114e4:	43db      	mvns	r3, r3
   114e6:	e852 1f00 	ldrex	r1, [r2]
   114ea:	4019      	ands	r1, r3
   114ec:	e842 1000 	strex	r0, r1, [r2]
   114f0:	2800      	cmp	r0, #0
   114f2:	d1f8      	bne.n	114e6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   114f4:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   114f8:	6823      	ldr	r3, [r4, #0]
   114fa:	4a28      	ldr	r2, [pc, #160]	; (1159c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   114fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   114fe:	4293      	cmp	r3, r2
   11500:	d138      	bne.n	11574 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   11502:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11506:	2b0d      	cmp	r3, #13
   11508:	d028      	beq.n	1155c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   1150a:	2b10      	cmp	r3, #16
   1150c:	d037      	beq.n	1157e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   1150e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11512:	4b21      	ldr	r3, [pc, #132]	; (11598 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11514:	f3bf 8f5b 	dmb	ish
   11518:	43d2      	mvns	r2, r2
   1151a:	e853 1f00 	ldrex	r1, [r3]
   1151e:	4011      	ands	r1, r2
   11520:	e843 1000 	strex	r0, r1, [r3]
   11524:	2800      	cmp	r0, #0
   11526:	d1f8      	bne.n	1151a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11528:	f3bf 8f5b 	dmb	ish
   1152c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11530:	f3bf 8f5b 	dmb	ish
   11534:	43d2      	mvns	r2, r2
   11536:	e853 1f00 	ldrex	r1, [r3]
   1153a:	4011      	ands	r1, r2
   1153c:	e843 1000 	strex	r0, r1, [r3]
   11540:	2800      	cmp	r0, #0
   11542:	d1f8      	bne.n	11536 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   11544:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11548:	230d      	movs	r3, #13
   1154a:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   1154e:	4620      	mov	r0, r4
   11550:	2100      	movs	r1, #0
   11552:	f7ff fc61 	bl	10e18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11556:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1155a:	b903      	cbnz	r3, 1155e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   1155c:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   1155e:	4620      	mov	r0, r4
}
   11560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   11564:	f7ff bc46 	b.w	10df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   11568:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   1156a:	6823      	ldr	r3, [r4, #0]
   1156c:	4a0b      	ldr	r2, [pc, #44]	; (1159c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   1156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11570:	4293      	cmp	r3, r2
   11572:	d0c6      	beq.n	11502 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   11574:	4620      	mov	r0, r4
   11576:	210d      	movs	r1, #13
}
   11578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   1157c:	4718      	bx	r3
        CcioMgr.LinkClose();
   1157e:	4b08      	ldr	r3, [pc, #32]	; (115a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11580:	6818      	ldr	r0, [r3, #0]
   11582:	f7fe fa19 	bl	f9b8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11586:	e7c2      	b.n	1150e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   11588:	4b05      	ldr	r3, [pc, #20]	; (115a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   1158a:	6818      	ldr	r0, [r3, #0]
   1158c:	f7fe fa14 	bl	f9b8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11590:	e7a0      	b.n	114d4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   11592:	bf00      	nop
   11594:	00011469 	.word	0x00011469
   11598:	20001ac4 	.word	0x20001ac4
   1159c:	000112c1 	.word	0x000112c1
   115a0:	20001efc 	.word	0x20001efc

000115a4 <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   115a4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   115a8:	f7ff bf84 	b.w	114b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

000115ac <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   115ac:	b510      	push	{r4, lr}
            PortOpen();
   115ae:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   115b0:	4604      	mov	r4, r0
        if (newState) {
   115b2:	bb09      	cbnz	r1, 115f8 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   115b4:	4a26      	ldr	r2, [pc, #152]	; (11650 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   115b6:	68db      	ldr	r3, [r3, #12]
   115b8:	4293      	cmp	r3, r2
   115ba:	d11a      	bne.n	115f2 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   115bc:	f7fe fc28 	bl	fe10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   115c0:	b1a8      	cbz	r0, 115ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   115c2:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   115c6:	2b10      	cmp	r3, #16
   115c8:	d03c      	beq.n	11644 <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   115ca:	4620      	mov	r0, r4
   115cc:	f7fe fd68 	bl	100a0 <_ZN9ClearCore10SerialBase9PortCloseEv>
   115d0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   115d4:	4a1f      	ldr	r2, [pc, #124]	; (11654 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   115d6:	f3bf 8f5b 	dmb	ish
   115da:	43db      	mvns	r3, r3
   115dc:	e852 1f00 	ldrex	r1, [r2]
   115e0:	4019      	ands	r1, r3
   115e2:	e842 1000 	strex	r0, r1, [r2]
   115e6:	2800      	cmp	r0, #0
   115e8:	d1f8      	bne.n	115dc <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   115ea:	f3bf 8f5b 	dmb	ish
    }
   115ee:	2001      	movs	r0, #1
   115f0:	bd10      	pop	{r4, pc}
            PortClose();
   115f2:	4798      	blx	r3
    }
   115f4:	2001      	movs	r0, #1
   115f6:	bd10      	pop	{r4, pc}
   115f8:	4a17      	ldr	r2, [pc, #92]	; (11658 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   115fa:	689b      	ldr	r3, [r3, #8]
   115fc:	4293      	cmp	r3, r2
   115fe:	d1f8      	bne.n	115f2 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11600:	f7fe fc06 	bl	fe10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11604:	2800      	cmp	r0, #0
   11606:	d1f2      	bne.n	115ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11608:	4620      	mov	r0, r4
   1160a:	f7ff fb9b 	bl	10d44 <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   1160e:	4620      	mov	r0, r4
   11610:	f7ff fbf0 	bl	10df4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11614:	4b0f      	ldr	r3, [pc, #60]	; (11654 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   11616:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1161a:	f3bf 8f5b 	dmb	ish
   1161e:	e853 1f00 	ldrex	r1, [r3]
   11622:	4311      	orrs	r1, r2
   11624:	e843 1000 	strex	r0, r1, [r3]
   11628:	2800      	cmp	r0, #0
   1162a:	d1f8      	bne.n	1161e <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   1162c:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11630:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11634:	2b10      	cmp	r3, #16
   11636:	d1da      	bne.n	115ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11638:	4b08      	ldr	r3, [pc, #32]	; (1165c <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1163a:	4621      	mov	r1, r4
   1163c:	6818      	ldr	r0, [r3, #0]
   1163e:	f7fe f9db 	bl	f9f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11642:	e7d4      	b.n	115ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   11644:	4b05      	ldr	r3, [pc, #20]	; (1165c <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11646:	6818      	ldr	r0, [r3, #0]
   11648:	f7fe f9b6 	bl	f9b8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1164c:	e7bd      	b.n	115ca <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   1164e:	bf00      	nop
   11650:	00011469 	.word	0x00011469
   11654:	20001ac4 	.word	0x20001ac4
   11658:	00011415 	.word	0x00011415
   1165c:	20001efc 	.word	0x20001efc

00011660 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11660:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11664:	e7a2      	b.n	115ac <_ZN9ClearCore12SerialDriver5StateEs>
   11666:	bf00      	nop

00011668 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11668:	7980      	ldrb	r0, [r0, #6]
   1166a:	4770      	bx	lr

0001166c <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   1166c:	f1a1 0004 	sub.w	r0, r1, #4
   11670:	fab0 f080 	clz	r0, r0
   11674:	0940      	lsrs	r0, r0, #5
   11676:	4770      	bx	lr

00011678 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11678:	2002      	movs	r0, #2
   1167a:	4770      	bx	lr

0001167c <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   1167c:	2001      	movs	r0, #1
   1167e:	4770      	bx	lr

00011680 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11680:	2000      	movs	r0, #0
   11682:	4770      	bx	lr

00011684 <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   11684:	4770      	bx	lr
   11686:	bf00      	nop

00011688 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11688:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   1168a:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   1168c:	7183      	strb	r3, [r0, #6]
   1168e:	4770      	bx	lr

00011690 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11690:	4b04      	ldr	r3, [pc, #16]	; (116a4 <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   11692:	681a      	ldr	r2, [r3, #0]
   11694:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11698:	6883      	ldr	r3, [r0, #8]
   1169a:	421a      	tst	r2, r3
}
   1169c:	bf14      	ite	ne
   1169e:	2001      	movne	r0, #1
   116a0:	2000      	moveq	r0, #0
   116a2:	4770      	bx	lr
   116a4:	20001ac4 	.word	0x20001ac4

000116a8 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   116a8:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   116aa:	b971      	cbnz	r1, 116ca <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   116ac:	f3bf 8f5b 	dmb	ish
   116b0:	4a0d      	ldr	r2, [pc, #52]	; (116e8 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   116b2:	43db      	mvns	r3, r3
   116b4:	e852 1f00 	ldrex	r1, [r2]
   116b8:	4019      	ands	r1, r3
   116ba:	e842 1000 	strex	r0, r1, [r2]
   116be:	2800      	cmp	r0, #0
   116c0:	d1f8      	bne.n	116b4 <_ZN9ClearCore9LedDriver5StateEs+0xc>
   116c2:	f3bf 8f5b 	dmb	ish
    return true;
}
   116c6:	2001      	movs	r0, #1
   116c8:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   116ca:	4a07      	ldr	r2, [pc, #28]	; (116e8 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   116cc:	f3bf 8f5b 	dmb	ish
   116d0:	e852 1f00 	ldrex	r1, [r2]
   116d4:	4319      	orrs	r1, r3
   116d6:	e842 1000 	strex	r0, r1, [r2]
   116da:	2800      	cmp	r0, #0
   116dc:	d1f8      	bne.n	116d0 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   116de:	f3bf 8f5b 	dmb	ish
   116e2:	2001      	movs	r0, #1
   116e4:	4770      	bx	lr
   116e6:	bf00      	nop
   116e8:	20001ac4 	.word	0x20001ac4

000116ec <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   116ec:	b538      	push	{r3, r4, r5, lr}
   116ee:	4604      	mov	r4, r0
   116f0:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   116f2:	f7fc ff13 	bl	e51c <_ZN9ClearCore9ConnectorC1Ev>
   116f6:	4b02      	ldr	r3, [pc, #8]	; (11700 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   116f8:	60a5      	str	r5, [r4, #8]
   116fa:	6023      	str	r3, [r4, #0]
   116fc:	4620      	mov	r0, r4
   116fe:	bd38      	pop	{r3, r4, r5, pc}
   11700:	000235c0 	.word	0x000235c0

00011704 <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   11704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   11706:	4d19      	ldr	r5, [pc, #100]	; (1176c <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11708:	682c      	ldr	r4, [r5, #0]
   1170a:	f014 0401 	ands.w	r4, r4, #1
   1170e:	d002      	beq.n	11716 <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11710:	4b17      	ldr	r3, [pc, #92]	; (11770 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   11712:	6818      	ldr	r0, [r3, #0]
   11714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11716:	2044      	movs	r0, #68	; 0x44
   11718:	f001 fe66 	bl	133e8 <_Znwj>
   1171c:	4a14      	ldr	r2, [pc, #80]	; (11770 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   1171e:	4f15      	ldr	r7, [pc, #84]	; (11774 <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11720:	4e15      	ldr	r6, [pc, #84]	; (11778 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   11722:	4916      	ldr	r1, [pc, #88]	; (1177c <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   11724:	6004      	str	r4, [r0, #0]
   11726:	2301      	movs	r3, #1
   11728:	6044      	str	r4, [r0, #4]
   1172a:	6084      	str	r4, [r0, #8]
   1172c:	60c4      	str	r4, [r0, #12]
   1172e:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11730:	6144      	str	r4, [r0, #20]
   11732:	6184      	str	r4, [r0, #24]
   11734:	61c4      	str	r4, [r0, #28]
   11736:	6244      	str	r4, [r0, #36]	; 0x24
   11738:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   1173c:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   11740:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   11744:	6204      	str	r4, [r0, #32]
   11746:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   1174a:	8584      	strh	r4, [r0, #44]	; 0x2c
   1174c:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1174e:	8604      	strh	r4, [r0, #48]	; 0x30
   11750:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   11754:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11758:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   1175c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11760:	6347      	str	r7, [r0, #52]	; 0x34
   11762:	6386      	str	r6, [r0, #56]	; 0x38
   11764:	63c1      	str	r1, [r0, #60]	; 0x3c
   11766:	6010      	str	r0, [r2, #0]
   11768:	602b      	str	r3, [r5, #0]
    return *instance;
}
   1176a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1176c:	20001f14 	.word	0x20001f14
   11770:	20001f1c 	.word	0x20001f1c
   11774:	09c400fa 	.word	0x09c400fa
   11778:	2cec1388 	.word	0x2cec1388
   1177c:	09c41388 	.word	0x09c41388

00011780 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11780:	6840      	ldr	r0, [r0, #4]
   11782:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   11786:	4008      	ands	r0, r1
   11788:	4770      	bx	lr
   1178a:	bf00      	nop

0001178c <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   1178c:	6840      	ldr	r0, [r0, #4]
   1178e:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   11792:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11796:	4770      	bx	lr

00011798 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11798:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   1179a:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   1179c:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   1179e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   117a2:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   117a4:	4802      	ldr	r0, [pc, #8]	; (117b0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   117a6:	f7f9 fa0d 	bl	abc4 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   117aa:	2001      	movs	r0, #1
   117ac:	bd08      	pop	{r3, pc}
   117ae:	bf00      	nop
   117b0:	200019d0 	.word	0x200019d0

000117b4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   117b4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   117b8:	b951      	cbnz	r1, 117d0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   117ba:	4b17      	ldr	r3, [pc, #92]	; (11818 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   117bc:	2204      	movs	r2, #4
   117be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   117c2:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   117c6:	f042 0201 	orr.w	r2, r2, #1
   117ca:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   117ce:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   117d0:	1d03      	adds	r3, r0, #4
   117d2:	f3bf 8f5b 	dmb	ish
   117d6:	e853 2f00 	ldrex	r2, [r3]
   117da:	f042 0208 	orr.w	r2, r2, #8
   117de:	e843 2100 	strex	r1, r2, [r3]
   117e2:	2900      	cmp	r1, #0
   117e4:	d1f7      	bne.n	117d6 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   117e6:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   117ea:	f3bf 8f5b 	dmb	ish
   117ee:	300c      	adds	r0, #12
   117f0:	e850 3f00 	ldrex	r3, [r0]
   117f4:	f043 0308 	orr.w	r3, r3, #8
   117f8:	e840 3200 	strex	r2, r3, [r0]
   117fc:	2a00      	cmp	r2, #0
   117fe:	d1f7      	bne.n	117f0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11800:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11804:	4b04      	ldr	r3, [pc, #16]	; (11818 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11806:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11808:	2102      	movs	r1, #2
   1180a:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   1180e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   11812:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11816:	4770      	bx	lr
   11818:	41008000 	.word	0x41008000

0001181c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   1181c:	4401      	add	r1, r0
   1181e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   11822:	431a      	orrs	r2, r3
   11824:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11828:	4770      	bx	lr
   1182a:	bf00      	nop

0001182c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   1182c:	b2cb      	uxtb	r3, r1
   1182e:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11830:	b510      	push	{r4, lr}
   11832:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   11834:	d505      	bpl.n	11842 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   11836:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   1183a:	f042 0202 	orr.w	r2, r2, #2
   1183e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   11842:	0798      	lsls	r0, r3, #30
   11844:	d505      	bpl.n	11852 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   11846:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1184a:	f042 0201 	orr.w	r2, r2, #1
   1184e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   11852:	075a      	lsls	r2, r3, #29
   11854:	d505      	bpl.n	11862 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   11856:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1185a:	f042 0201 	orr.w	r2, r2, #1
   1185e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   11862:	06d8      	lsls	r0, r3, #27
   11864:	d505      	bpl.n	11872 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   11866:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1186a:	f042 0204 	orr.w	r2, r2, #4
   1186e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   11872:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11876:	06ca      	lsls	r2, r1, #27
   11878:	d505      	bpl.n	11886 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   1187a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1187e:	f042 0202 	orr.w	r2, r2, #2
   11882:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   11886:	4a14      	ldr	r2, [pc, #80]	; (118d8 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11888:	6812      	ldr	r2, [r2, #0]
   1188a:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   1188e:	b112      	cbz	r2, 11896 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11890:	f011 0f0c 	tst.w	r1, #12
   11894:	d118      	bne.n	118c8 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   11896:	061b      	lsls	r3, r3, #24
   11898:	d505      	bpl.n	118a6 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   1189a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1189e:	f043 0308 	orr.w	r3, r3, #8
   118a2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   118a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   118aa:	f001 fc29 	bl	13100 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   118ae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   118b2:	4a0a      	ldr	r2, [pc, #40]	; (118dc <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   118b4:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   118b8:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   118bc:	3300      	adds	r3, #0
   118be:	bf18      	it	ne
   118c0:	2301      	movne	r3, #1
   118c2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   118c6:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   118c8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   118cc:	f042 0204 	orr.w	r2, r2, #4
   118d0:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   118d4:	e7df      	b.n	11896 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   118d6:	bf00      	nop
   118d8:	20001bf0 	.word	0x20001bf0
   118dc:	200019d0 	.word	0x200019d0

000118e0 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   118e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118e4:	b082      	sub	sp, #8
            reg = 0;
   118e6:	2300      	movs	r3, #0
   118e8:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   118ea:	4b98      	ldr	r3, [pc, #608]	; (11b4c <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   118ec:	6844      	ldr	r4, [r0, #4]
   118ee:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   118f2:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   118f4:	4f96      	ldr	r7, [pc, #600]	; (11b50 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   118f6:	8a13      	ldrh	r3, [r2, #16]
   118f8:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11b70 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   118fc:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   118fe:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11900:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11902:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11904:	bf4c      	ite	mi
   11906:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1190a:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   1190e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11910:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11914:	4e8f      	ldr	r6, [pc, #572]	; (11b54 <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11916:	bfd4      	ite	le
   11918:	2300      	movle	r3, #0
   1191a:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   1191c:	f363 0000 	bfi	r0, r3, #0, #1
   11920:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11924:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11926:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11928:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   1192a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1192c:	bf4c      	ite	mi
   1192e:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11932:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   11936:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11938:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1193c:	bfcc      	ite	gt
   1193e:	2300      	movgt	r3, #0
   11940:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   11942:	f363 0041 	bfi	r0, r3, #1, #1
   11946:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   1194a:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   1194c:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11950:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11952:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11954:	bf4c      	ite	mi
   11956:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   1195a:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   1195e:	428b      	cmp	r3, r1
   11960:	bfcc      	ite	gt
   11962:	2300      	movgt	r3, #0
   11964:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   11966:	f363 1004 	bfi	r0, r3, #4, #1
   1196a:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   1196e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11972:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11976:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   1197a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1197e:	4976      	ldr	r1, [pc, #472]	; (11b58 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11980:	4f76      	ldr	r7, [pc, #472]	; (11b5c <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11982:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11984:	43db      	mvns	r3, r3
   11986:	b2c0      	uxtb	r0, r0
   11988:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   1198c:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11990:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11992:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11996:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   1199a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   1199e:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   119a2:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   119a6:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   119aa:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   119ac:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   119b0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   119b4:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   119b8:	bf18      	it	ne
   119ba:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   119bc:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   119c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   119c4:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   119c8:	f083 0301 	eor.w	r3, r3, #1
   119cc:	f363 0241 	bfi	r2, r3, #1, #1
   119d0:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   119d4:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   119d6:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   119da:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   119de:	b2d2      	uxtb	r2, r2
   119e0:	f361 0282 	bfi	r2, r1, #2, #1
   119e4:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   119e8:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   119ec:	4a5c      	ldr	r2, [pc, #368]	; (11b60 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   119ee:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   119f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   119f6:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   119fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
   119fe:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11a00:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11a04:	4857      	ldr	r0, [pc, #348]	; (11b64 <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11a06:	f88d 1004 	strb.w	r1, [sp, #4]
   11a0a:	bf18      	it	ne
   11a0c:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11a0e:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   11a12:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11a16:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a18:	4e53      	ldr	r6, [pc, #332]	; (11b68 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11a1a:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11a1e:	f362 1345 	bfi	r3, r2, #5, #1
   11a22:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   11a26:	4628      	mov	r0, r5
   11a28:	9901      	ldr	r1, [sp, #4]
   11a2a:	f7ff feff 	bl	1182c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a2e:	6830      	ldr	r0, [r6, #0]
   11a30:	6803      	ldr	r3, [r0, #0]
   11a32:	681b      	ldr	r3, [r3, #0]
   11a34:	4543      	cmp	r3, r8
   11a36:	f040 8084 	bne.w	11b42 <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11a3a:	7980      	ldrb	r0, [r0, #6]
   11a3c:	2804      	cmp	r0, #4
   11a3e:	d00c      	beq.n	11a5a <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11a40:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11a44:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11a4c:	bf14      	ite	ne
   11a4e:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11a52:	f023 0308 	biceq.w	r3, r3, #8
   11a56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a5a:	6870      	ldr	r0, [r6, #4]
   11a5c:	6803      	ldr	r3, [r0, #0]
   11a5e:	681b      	ldr	r3, [r3, #0]
   11a60:	4543      	cmp	r3, r8
   11a62:	d170      	bne.n	11b46 <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   11a64:	7980      	ldrb	r0, [r0, #6]
   11a66:	2804      	cmp	r0, #4
   11a68:	d00c      	beq.n	11a84 <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11a6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11a6e:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11a76:	bf14      	ite	ne
   11a78:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11a7c:	f023 0304 	biceq.w	r3, r3, #4
   11a80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11a84:	9a01      	ldr	r2, [sp, #4]
   11a86:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11a8a:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11a8c:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11a8e:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   11a92:	f105 0210 	add.w	r2, r5, #16
   11a96:	f3bf 8f5b 	dmb	ish
   11a9a:	e852 1f00 	ldrex	r1, [r2]
   11a9e:	4319      	orrs	r1, r3
   11aa0:	e842 1000 	strex	r0, r1, [r2]
   11aa4:	2800      	cmp	r0, #0
   11aa6:	d1f8      	bne.n	11a9a <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11aa8:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11aac:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11aae:	f3bf 8f5b 	dmb	ish
   11ab2:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11ab6:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11aba:	e853 2f00 	ldrex	r2, [r3]
   11abe:	4322      	orrs	r2, r4
   11ac0:	e843 2100 	strex	r1, r2, [r3]
   11ac4:	2900      	cmp	r1, #0
   11ac6:	d1f8      	bne.n	11aba <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11ac8:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11acc:	f105 0308 	add.w	r3, r5, #8
   11ad0:	9a01      	ldr	r2, [sp, #4]
   11ad2:	f3bf 8f5b 	dmb	ish
   11ad6:	e853 1f00 	ldrex	r1, [r3]
   11ada:	4311      	orrs	r1, r2
   11adc:	e843 1000 	strex	r0, r1, [r3]
   11ae0:	2800      	cmp	r0, #0
   11ae2:	d1f8      	bne.n	11ad6 <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11ae4:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11ae8:	9b01      	ldr	r3, [sp, #4]
   11aea:	f3bf 8f5b 	dmb	ish
   11aee:	e855 2f00 	ldrex	r2, [r5]
   11af2:	431a      	orrs	r2, r3
   11af4:	e845 2100 	strex	r1, r2, [r5]
   11af8:	2900      	cmp	r1, #0
   11afa:	d1f8      	bne.n	11aee <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11afc:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11b00:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11b02:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11b06:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11b0a:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11b0e:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11b10:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11b14:	d012      	beq.n	11b3c <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11b16:	4c15      	ldr	r4, [pc, #84]	; (11b6c <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11b18:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11b1c:	f854 0b04 	ldr.w	r0, [r4], #4
   11b20:	f7f3 fa36 	bl	4f90 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11b24:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11b26:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11b2a:	d1f7      	bne.n	11b1c <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11b2c:	6830      	ldr	r0, [r6, #0]
   11b2e:	f7fc fdbb 	bl	e6a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11b32:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11b36:	6870      	ldr	r0, [r6, #4]
   11b38:	f7fc fdb6 	bl	e6a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11b3c:	b002      	add	sp, #8
   11b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b42:	4798      	blx	r3
   11b44:	e77a      	b.n	11a3c <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b46:	4798      	blx	r3
   11b48:	e78d      	b.n	11a66 <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11b4a:	bf00      	nop
   11b4c:	20001dfc 	.word	0x20001dfc
   11b50:	41008000 	.word	0x41008000
   11b54:	20001bf0 	.word	0x20001bf0
   11b58:	20001efc 	.word	0x20001efc
   11b5c:	200019d0 	.word	0x200019d0
   11b60:	20001884 	.word	0x20001884
   11b64:	20001f24 	.word	0x20001f24
   11b68:	00022e64 	.word	0x00022e64
   11b6c:	00022e6c 	.word	0x00022e6c
   11b70:	0000e631 	.word	0x0000e631

00011b74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11b74:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11b76:	b94a      	cbnz	r2, 11b8c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11b78:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11b7c:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11b7e:	6983      	ldr	r3, [r0, #24]
   11b80:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11b82:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11b84:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11b86:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11b88:	6181      	str	r1, [r0, #24]
   11b8a:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11b8c:	4319      	orrs	r1, r3
   11b8e:	e7f5      	b.n	11b7c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011b90 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11b90:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11b92:	f7ff fdb7 	bl	11704 <_ZN9ClearCore13StatusManager8InstanceEv>
   11b96:	4b01      	ldr	r3, [pc, #4]	; (11b9c <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11b98:	6018      	str	r0, [r3, #0]
   11b9a:	bd08      	pop	{r3, pc}
   11b9c:	20001f18 	.word	0x20001f18

00011ba0 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ba0:	b530      	push	{r4, r5, lr}
   11ba2:	b083      	sub	sp, #12
   11ba4:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11ba8:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11baa:	9401      	str	r4, [sp, #4]
   11bac:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11bae:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11bb0:	f7ff f8d4 	bl	10d5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11bb4:	4b04      	ldr	r3, [pc, #16]	; (11bc8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11bb6:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11bb8:	4620      	mov	r0, r4
   11bba:	2100      	movs	r1, #0
   11bbc:	f7ff f92c 	bl	10e18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11bc0:	4620      	mov	r0, r4
   11bc2:	b003      	add	sp, #12
   11bc4:	bd30      	pop	{r4, r5, pc}
   11bc6:	bf00      	nop
   11bc8:	00022e10 	.word	0x00022e10

00011bcc <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11bcc:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11bce:	4d0f      	ldr	r5, [pc, #60]	; (11c0c <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11bd0:	682b      	ldr	r3, [r5, #0]
   11bd2:	f013 0401 	ands.w	r4, r3, #1
   11bd6:	d002      	beq.n	11bde <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11bd8:	4b0d      	ldr	r3, [pc, #52]	; (11c10 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11bda:	6818      	ldr	r0, [r3, #0]
   11bdc:	bd38      	pop	{r3, r4, r5, pc}
   11bde:	f44f 7002 	mov.w	r0, #520	; 0x208
   11be2:	f001 fc01 	bl	133e8 <_Znwj>
   11be6:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11be8:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11bec:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11bf0:	4908      	ldr	r1, [pc, #32]	; (11c14 <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11bf2:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11bf6:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11bfa:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11bfe:	f00c fb77 	bl	1e2f0 <memcpy>
    static NvmManager *instance = new NvmManager();
   11c02:	4903      	ldr	r1, [pc, #12]	; (11c10 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11c04:	2201      	movs	r2, #1
   11c06:	6008      	str	r0, [r1, #0]
   11c08:	602a      	str	r2, [r5, #0]
}
   11c0a:	bd38      	pop	{r3, r4, r5, pc}
   11c0c:	20001f20 	.word	0x20001f20
   11c10:	20001f28 	.word	0x20001f28
   11c14:	00804000 	.word	0x00804000

00011c18 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11c18:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11c1c:	bf9a      	itte	ls
   11c1e:	1840      	addls	r0, r0, r1
   11c20:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11c24:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11c28:	4770      	bx	lr
   11c2a:	bf00      	nop

00011c2c <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11c2c:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11c2e:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11c32:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11c36:	2400      	movs	r4, #0
   11c38:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11c3c:	1c6b      	adds	r3, r5, #1
   11c3e:	bf08      	it	eq
   11c40:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11c44:	d005      	beq.n	11c52 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11c46:	0c2e      	lsrs	r6, r5, #16
   11c48:	4627      	mov	r7, r4
   11c4a:	ea56 0007 	orrs.w	r0, r6, r7
   11c4e:	462b      	mov	r3, r5
   11c50:	d002      	beq.n	11c58 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11c52:	4a07      	ldr	r2, [pc, #28]	; (11c70 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11c54:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11c58:	0a1e      	lsrs	r6, r3, #8
   11c5a:	0e15      	lsrs	r5, r2, #24
   11c5c:	0c14      	lsrs	r4, r2, #16
   11c5e:	0a10      	lsrs	r0, r2, #8
   11c60:	700e      	strb	r6, [r1, #0]
   11c62:	708d      	strb	r5, [r1, #2]
   11c64:	70cc      	strb	r4, [r1, #3]
   11c66:	704b      	strb	r3, [r1, #1]
   11c68:	714a      	strb	r2, [r1, #5]
   11c6a:	7108      	strb	r0, [r1, #4]
    }
}
   11c6c:	bcf0      	pop	{r4, r5, r6, r7}
   11c6e:	4770      	bx	lr
   11c70:	10b00000 	.word	0x10b00000

00011c74 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11c74:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11c76:	f7ff ffa9 	bl	11bcc <_ZN9ClearCore10NvmManager8InstanceEv>
   11c7a:	4b01      	ldr	r3, [pc, #4]	; (11c80 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11c7c:	6018      	str	r0, [r3, #0]
   11c7e:	bd08      	pop	{r3, pc}
   11c80:	20001f24 	.word	0x20001f24

00011c84 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11c84:	2000      	movs	r0, #0
   11c86:	4770      	bx	lr

00011c88 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c8c:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11c8e:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11c90:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11c92:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11c96:	2900      	cmp	r1, #0
   11c98:	d04f      	beq.n	11d3a <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11c9a:	4b55      	ldr	r3, [pc, #340]	; (11df0 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c9c:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ca0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ca4:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11ca8:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11caa:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11cac:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11cb0:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11cb2:	f000 8095 	beq.w	11de0 <_usb_d_dev_in_next+0x158>
   11cb6:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11cba:	f895 c013 	ldrb.w	ip, [r5, #19]
   11cbe:	401a      	ands	r2, r3
   11cc0:	b292      	uxth	r2, r2
   11cc2:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11cc6:	0163      	lsls	r3, r4, #5
   11cc8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11ccc:	2602      	movs	r6, #2
   11cce:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11cd2:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11cd4:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11cd6:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11cd8:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11cda:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11cdc:	d235      	bcs.n	11d4a <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11cde:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11ce0:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11ce4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11ce6:	d05e      	beq.n	11da6 <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11ce8:	682b      	ldr	r3, [r5, #0]
   11cea:	68e8      	ldr	r0, [r5, #12]
   11cec:	4576      	cmp	r6, lr
   11cee:	bf28      	it	cs
   11cf0:	4676      	movcs	r6, lr
   11cf2:	4419      	add	r1, r3
   11cf4:	4632      	mov	r2, r6
   11cf6:	f00c fafb 	bl	1e2f0 <memcpy>
	bank->ADDR.reg          = addr;
   11cfa:	4b3d      	ldr	r3, [pc, #244]	; (11df0 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11cfc:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11cfe:	0162      	lsls	r2, r4, #5
   11d00:	1899      	adds	r1, r3, r2
   11d02:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11d04:	4413      	add	r3, r2
   11d06:	6959      	ldr	r1, [r3, #20]
   11d08:	f366 010d 	bfi	r1, r6, #0, #14
   11d0c:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11d0e:	6959      	ldr	r1, [r3, #20]
   11d10:	f36f 319b 	bfc	r1, #14, #14
   11d14:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11d16:	b947      	cbnz	r7, 11d2a <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11d18:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11d1c:	f1b8 0f01 	cmp.w	r8, #1
   11d20:	bf14      	ite	ne
   11d22:	224a      	movne	r2, #74	; 0x4a
   11d24:	224e      	moveq	r2, #78	; 0x4e
   11d26:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11d2a:	0164      	lsls	r4, r4, #5
   11d2c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11d30:	2380      	movs	r3, #128	; 0x80
   11d32:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d3a:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d3e:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d42:	f00c 0807 	and.w	r8, ip, #7
   11d46:	460a      	mov	r2, r1
   11d48:	e7c3      	b.n	11cd2 <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11d4a:	f01c 0f10 	tst.w	ip, #16
   11d4e:	d11a      	bne.n	11d86 <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11d50:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11d52:	f1b8 0f01 	cmp.w	r8, #1
   11d56:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11d5a:	bf0c      	ite	eq
   11d5c:	234b      	moveq	r3, #75	; 0x4b
   11d5e:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11d60:	4596      	cmp	lr, r2
   11d62:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11d66:	d02c      	beq.n	11dc2 <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11d68:	28ff      	cmp	r0, #255	; 0xff
   11d6a:	d028      	beq.n	11dbe <_usb_d_dev_in_next+0x136>
   11d6c:	7ceb      	ldrb	r3, [r5, #19]
   11d6e:	065a      	lsls	r2, r3, #25
   11d70:	d525      	bpl.n	11dbe <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11d72:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11d76:	491f      	ldr	r1, [pc, #124]	; (11df4 <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11d78:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11d7a:	68aa      	ldr	r2, [r5, #8]
   11d7c:	690b      	ldr	r3, [r1, #16]
}
   11d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11d82:	2100      	movs	r1, #0
   11d84:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11d86:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11d88:	4b1b      	ldr	r3, [pc, #108]	; (11df8 <_usb_d_dev_in_next+0x170>)
   11d8a:	0162      	lsls	r2, r4, #5
   11d8c:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11d8e:	f36f 1104 	bfc	r1, #4, #1
   11d92:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11d94:	6859      	ldr	r1, [r3, #4]
   11d96:	f36f 010d 	bfc	r1, #0, #14
   11d9a:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11d9c:	6859      	ldr	r1, [r3, #4]
   11d9e:	f36f 319b 	bfc	r1, #14, #14
   11da2:	6059      	str	r1, [r3, #4]
   11da4:	e7b7      	b.n	11d16 <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11da6:	4b12      	ldr	r3, [pc, #72]	; (11df0 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11da8:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11daa:	0162      	lsls	r2, r4, #5
   11dac:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11dae:	4401      	add	r1, r0
   11db0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11db4:	bf28      	it	cs
   11db6:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11dba:	6129      	str	r1, [r5, #16]
   11dbc:	e7a2      	b.n	11d04 <_usb_d_dev_in_next+0x7c>
   11dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11dc2:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11dc4:	4a0b      	ldr	r2, [pc, #44]	; (11df4 <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11dc6:	f36f 1386 	bfc	r3, #6, #1
   11dca:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11dcc:	68d3      	ldr	r3, [r2, #12]
   11dce:	4798      	blx	r3
   11dd0:	2800      	cmp	r0, #0
   11dd2:	d1f4      	bne.n	11dbe <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11dd4:	7ceb      	ldrb	r3, [r5, #19]
   11dd6:	7ca8      	ldrb	r0, [r5, #18]
   11dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ddc:	74eb      	strb	r3, [r5, #19]
   11dde:	e7c3      	b.n	11d68 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11de0:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11de4:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11de8:	f00c 0807 	and.w	r8, ip, #7
   11dec:	e76b      	b.n	11cc6 <_usb_d_dev_in_next+0x3e>
   11dee:	bf00      	nop
   11df0:	2000221c 	.word	0x2000221c
   11df4:	20001fec 	.word	0x20001fec
   11df8:	2000222c 	.word	0x2000222c

00011dfc <_usb_d_dev_out_next>:
{
   11dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11e00:	7c85      	ldrb	r5, [r0, #18]
{
   11e02:	b083      	sub	sp, #12
   11e04:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e06:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11e08:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e0c:	2900      	cmp	r1, #0
   11e0e:	f000 8085 	beq.w	11f1c <_usb_d_dev_out_next+0x120>
   11e12:	4b76      	ldr	r3, [pc, #472]	; (11fec <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e14:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e16:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11e1a:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e20:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e22:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e24:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e26:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e2a:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e2e:	f000 80d7 	beq.w	11fe0 <_usb_d_dev_out_next+0x1e4>
   11e32:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e34:	7cc2      	ldrb	r2, [r0, #19]
   11e36:	b2b6      	uxth	r6, r6
   11e38:	ea09 0306 	and.w	r3, r9, r6
   11e3c:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11e40:	0169      	lsls	r1, r5, #5
   11e42:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11e46:	2001      	movs	r0, #1
   11e48:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11e4c:	0691      	lsls	r1, r2, #26
   11e4e:	d512      	bpl.n	11e76 <_usb_d_dev_out_next+0x7a>
   11e50:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11e54:	f1be 0f00 	cmp.w	lr, #0
   11e58:	d048      	beq.n	11eec <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11e5a:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11e5c:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11e5e:	ebae 0200 	sub.w	r2, lr, r0
   11e62:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11e64:	429a      	cmp	r2, r3
   11e66:	bf28      	it	cs
   11e68:	461a      	movcs	r2, r3
   11e6a:	6823      	ldr	r3, [r4, #0]
   11e6c:	68e1      	ldr	r1, [r4, #12]
   11e6e:	4418      	add	r0, r3
   11e70:	f00c fa3e 	bl	1e2f0 <memcpy>
   11e74:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11e76:	6862      	ldr	r2, [r4, #4]
   11e78:	2a00      	cmp	r2, #0
   11e7a:	d036      	beq.n	11eea <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11e7c:	2f00      	cmp	r7, #0
   11e7e:	d15b      	bne.n	11f38 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11e80:	68a3      	ldr	r3, [r4, #8]
   11e82:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11e84:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11e86:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11e88:	d960      	bls.n	11f4c <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11e8a:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11e8c:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11e8e:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11e90:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11e92:	f140 808b 	bpl.w	11fac <_usb_d_dev_out_next+0x1b0>
   11e96:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11e98:	4954      	ldr	r1, [pc, #336]	; (11fec <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11e9a:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11e9c:	f841 3008 	str.w	r3, [r1, r8]
   11ea0:	42b2      	cmp	r2, r6
   11ea2:	bf28      	it	cs
   11ea4:	4632      	movcs	r2, r6
   11ea6:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11eaa:	eb01 0308 	add.w	r3, r1, r8
   11eae:	6858      	ldr	r0, [r3, #4]
   11eb0:	f362 309b 	bfi	r0, r2, #14, #14
   11eb4:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11eb6:	685a      	ldr	r2, [r3, #4]
   11eb8:	f36f 020d 	bfc	r2, #0, #14
   11ebc:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11ebe:	b95f      	cbnz	r7, 11ed8 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11ec0:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11ec4:	bf08      	it	eq
   11ec6:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11ec8:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11ecc:	bf0a      	itet	eq
   11ece:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11ed0:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11ed2:	768f      	strbeq	r7, [r1, #26]
   11ed4:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11ed8:	016d      	lsls	r5, r5, #5
   11eda:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11ede:	2340      	movs	r3, #64	; 0x40
   11ee0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11ee4:	b003      	add	sp, #12
   11ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eea:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11eec:	06d6      	lsls	r6, r2, #27
   11eee:	d54b      	bpl.n	11f88 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11ef0:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11ef2:	493e      	ldr	r1, [pc, #248]	; (11fec <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11ef4:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11ef6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11efa:	f043 0320 	orr.w	r3, r3, #32
   11efe:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11f00:	f841 2008 	str.w	r2, [r1, r8]
   11f04:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11f08:	8a20      	ldrh	r0, [r4, #16]
   11f0a:	685a      	ldr	r2, [r3, #4]
   11f0c:	f360 329b 	bfi	r2, r0, #14, #14
   11f10:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11f12:	685a      	ldr	r2, [r3, #4]
   11f14:	f36f 020d 	bfc	r2, #0, #14
   11f18:	605a      	str	r2, [r3, #4]
   11f1a:	e7d0      	b.n	11ebe <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f1c:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f1e:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f20:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11f24:	429e      	cmp	r6, r3
   11f26:	d137      	bne.n	11f98 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f28:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f2a:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   11f2e:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f30:	46b9      	mov	r9, r7
   11f32:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11f36:	e789      	b.n	11e4c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   11f38:	8a21      	ldrh	r1, [r4, #16]
   11f3a:	4299      	cmp	r1, r3
   11f3c:	d9a0      	bls.n	11e80 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   11f3e:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11f40:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   11f42:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   11f46:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   11f48:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11f4a:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   11f4c:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f50:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   11f54:	bf0c      	ite	eq
   11f56:	232d      	moveq	r3, #45	; 0x2d
   11f58:	2325      	movne	r3, #37	; 0x25
   11f5a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   11f5e:	b915      	cbnz	r5, 11f66 <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   11f60:	4b22      	ldr	r3, [pc, #136]	; (11fec <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11f62:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   11f64:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11f66:	7ca0      	ldrb	r0, [r4, #18]
   11f68:	28ff      	cmp	r0, #255	; 0xff
   11f6a:	d0bb      	beq.n	11ee4 <_usb_d_dev_out_next+0xe8>
   11f6c:	7ce3      	ldrb	r3, [r4, #19]
   11f6e:	065a      	lsls	r2, r3, #25
   11f70:	d5b8      	bpl.n	11ee4 <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   11f72:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11f76:	491e      	ldr	r1, [pc, #120]	; (11ff0 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   11f78:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11f7a:	690b      	ldr	r3, [r1, #16]
   11f7c:	68a2      	ldr	r2, [r4, #8]
   11f7e:	2100      	movs	r1, #0
}
   11f80:	b003      	add	sp, #12
   11f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11f86:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   11f88:	b117      	cbz	r7, 11f90 <_usb_d_dev_out_next+0x194>
   11f8a:	8a22      	ldrh	r2, [r4, #16]
   11f8c:	429a      	cmp	r2, r3
   11f8e:	d8d6      	bhi.n	11f3e <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   11f90:	68a3      	ldr	r3, [r4, #8]
   11f92:	4453      	add	r3, sl
   11f94:	60a3      	str	r3, [r4, #8]
   11f96:	e7d9      	b.n	11f4c <_usb_d_dev_out_next+0x150>
   11f98:	3e01      	subs	r6, #1
   11f9a:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f9c:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11fa0:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11fa2:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11fa4:	4689      	mov	r9, r1
   11fa6:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11faa:	e74f      	b.n	11e4c <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   11fac:	8a20      	ldrh	r0, [r4, #16]
   11fae:	4282      	cmp	r2, r0
   11fb0:	d905      	bls.n	11fbe <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   11fb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11fb6:	d90e      	bls.n	11fd6 <_usb_d_dev_out_next+0x1da>
   11fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11fbc:	e005      	b.n	11fca <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   11fbe:	bf3c      	itt	cc
   11fc0:	f041 0120 	orrcc.w	r1, r1, #32
   11fc4:	74e1      	strbcc	r1, [r4, #19]
   11fc6:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11fca:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   11fcc:	4907      	ldr	r1, [pc, #28]	; (11fec <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11fce:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   11fd0:	f841 3008 	str.w	r3, [r1, r8]
   11fd4:	e769      	b.n	11eaa <_usb_d_dev_out_next+0xae>
   11fd6:	ea22 0206 	bic.w	r2, r2, r6
   11fda:	f3c2 020d 	ubfx	r2, r2, #0, #14
   11fde:	e7f4      	b.n	11fca <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11fe0:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   11fe2:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11fe6:	f002 0b07 	and.w	fp, r2, #7
   11fea:	e729      	b.n	11e40 <_usb_d_dev_out_next+0x44>
   11fec:	2000221c 	.word	0x2000221c
   11ff0:	20001fec 	.word	0x20001fec

00011ff4 <_usb_d_dev_handler>:
{
   11ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11ff8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   11ffc:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11ffe:	8c16      	ldrh	r6, [r2, #32]
   12000:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   12002:	2e00      	cmp	r6, #0
   12004:	f000 812c 	beq.w	12260 <_usb_d_dev_handler+0x26c>
   12008:	4dc4      	ldr	r5, [pc, #784]	; (1231c <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1200a:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   1200c:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   1200e:	7ca8      	ldrb	r0, [r5, #18]
   12010:	28ff      	cmp	r0, #255	; 0xff
   12012:	d030      	beq.n	12076 <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12014:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12018:	fa07 f203 	lsl.w	r2, r7, r3
   1201c:	4232      	tst	r2, r6
   1201e:	d02a      	beq.n	12076 <_usb_d_dev_handler+0x82>
   12020:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   12024:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12028:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   1202a:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   1202e:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   12032:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12034:	46c1      	mov	r9, r8
	if (flags) {
   12036:	d01e      	beq.n	12076 <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12038:	49b9      	ldr	r1, [pc, #740]	; (12320 <_usb_d_dev_handler+0x32c>)
   1203a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1203e:	eb0a 0c04 	add.w	ip, sl, r4
   12042:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   12046:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   1204a:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   1204e:	2901      	cmp	r1, #1
   12050:	f000 80f4 	beq.w	1223c <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   12054:	f01b 0f80 	tst.w	fp, #128	; 0x80
   12058:	d115      	bne.n	12086 <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   1205a:	f013 0120 	ands.w	r1, r3, #32
   1205e:	d15a      	bne.n	12116 <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12060:	f013 0f04 	tst.w	r3, #4
   12064:	f040 8098 	bne.w	12198 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   12068:	07d9      	lsls	r1, r3, #31
   1206a:	f100 80e2 	bmi.w	12232 <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1206e:	f00b 0107 	and.w	r1, fp, #7
   12072:	2901      	cmp	r1, #1
   12074:	d058      	beq.n	12128 <_usb_d_dev_handler+0x134>
   12076:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   12078:	2c1b      	cmp	r4, #27
   1207a:	f105 0514 	add.w	r5, r5, #20
   1207e:	d1c6      	bne.n	1200e <_usb_d_dev_handler+0x1a>
}
   12080:	b001      	add	sp, #4
   12082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12086:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   1208a:	f040 8143 	bne.w	12314 <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   1208e:	f013 0f08 	tst.w	r3, #8
   12092:	f040 8189 	bne.w	123a8 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   12096:	0799      	lsls	r1, r3, #30
   12098:	f100 8137 	bmi.w	1230a <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1209c:	f00b 0107 	and.w	r1, fp, #7
   120a0:	2901      	cmp	r1, #1
   120a2:	d1e8      	bne.n	12076 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   120a4:	0759      	lsls	r1, r3, #29
   120a6:	f100 8241 	bmi.w	1252c <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   120aa:	06db      	lsls	r3, r3, #27
   120ac:	d5e3      	bpl.n	12076 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   120ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
   120b2:	d011      	beq.n	120d8 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   120b4:	499a      	ldr	r1, [pc, #616]	; (12320 <_usb_d_dev_handler+0x32c>)
   120b6:	eb0a 0304 	add.w	r3, sl, r4
   120ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   120be:	f04f 0e80 	mov.w	lr, #128	; 0x80
   120c2:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   120c6:	f36f 1186 	bfc	r1, #6, #1
   120ca:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   120ce:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   120d0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   120d4:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   120d8:	4b91      	ldr	r3, [pc, #580]	; (12320 <_usb_d_dev_handler+0x32c>)
   120da:	eb0a 0104 	add.w	r1, sl, r4
   120de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   120e2:	4b90      	ldr	r3, [pc, #576]	; (12324 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   120e4:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   120e8:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   120ec:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120f0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   120f4:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   120f8:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120fc:	216f      	movs	r1, #111	; 0x6f
   120fe:	f88e c00a 	strb.w	ip, [lr, #10]
   12102:	f88e c01a 	strb.w	ip, [lr, #26]
   12106:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1210a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   1210e:	4b84      	ldr	r3, [pc, #528]	; (12320 <_usb_d_dev_handler+0x32c>)
   12110:	689b      	ldr	r3, [r3, #8]
   12112:	4798      	blx	r3
   12114:	e7af      	b.n	12076 <_usb_d_dev_handler+0x82>
   12116:	68aa      	ldr	r2, [r5, #8]
   12118:	2320      	movs	r3, #32
   1211a:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   1211e:	4b80      	ldr	r3, [pc, #512]	; (12320 <_usb_d_dev_handler+0x32c>)
   12120:	2101      	movs	r1, #1
   12122:	691b      	ldr	r3, [r3, #16]
   12124:	4798      	blx	r3
   12126:	e7a6      	b.n	12076 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12128:	0719      	lsls	r1, r3, #28
   1212a:	f100 80fd 	bmi.w	12328 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1212e:	06db      	lsls	r3, r3, #27
   12130:	d5a1      	bpl.n	12076 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12132:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12136:	d011      	beq.n	1215c <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12138:	4979      	ldr	r1, [pc, #484]	; (12320 <_usb_d_dev_handler+0x32c>)
   1213a:	eb0a 0304 	add.w	r3, sl, r4
   1213e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12142:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12146:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1214a:	f36f 1186 	bfc	r1, #6, #1
   1214e:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12152:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12154:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12158:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   1215c:	4b70      	ldr	r3, [pc, #448]	; (12320 <_usb_d_dev_handler+0x32c>)
   1215e:	eb0a 0104 	add.w	r1, sl, r4
   12162:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   12166:	4b6f      	ldr	r3, [pc, #444]	; (12324 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12168:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   1216c:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12170:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12174:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12178:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1217c:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   1217e:	2100      	movs	r1, #0
   12180:	f88e 100a 	strb.w	r1, [lr, #10]
   12184:	f88e 101a 	strb.w	r1, [lr, #26]
   12188:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1218c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12190:	4b63      	ldr	r3, [pc, #396]	; (12320 <_usb_d_dev_handler+0x32c>)
   12192:	689b      	ldr	r3, [r3, #8]
   12194:	4798      	blx	r3
   12196:	e76e      	b.n	12076 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12198:	4b62      	ldr	r3, [pc, #392]	; (12324 <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1219a:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   1219e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121a0:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   121a4:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121a8:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   121ac:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121ae:	d07c      	beq.n	122aa <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   121b0:	f013 0302 	ands.w	r3, r3, #2
   121b4:	d032      	beq.n	1221c <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   121b6:	f89e 100a 	ldrb.w	r1, [lr, #10]
   121ba:	f36f 0141 	bfc	r1, #1, #1
   121be:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121c2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   121c6:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121ca:	2204      	movs	r2, #4
   121cc:	2901      	cmp	r1, #1
   121ce:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121d2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   121d6:	f47f af4e 	bne.w	12076 <_usb_d_dev_handler+0x82>
   121da:	f01b 0f40 	tst.w	fp, #64	; 0x40
   121de:	f43f af4a 	beq.w	12076 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   121e2:	494f      	ldr	r1, [pc, #316]	; (12320 <_usb_d_dev_handler+0x32c>)
   121e4:	eb0a 0204 	add.w	r2, sl, r4
   121e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   121ec:	3220      	adds	r2, #32
   121ee:	79d1      	ldrb	r1, [r2, #7]
   121f0:	09c9      	lsrs	r1, r1, #7
   121f2:	f43f af40 	beq.w	12076 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121f6:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   121f8:	f04f 0e80 	mov.w	lr, #128	; 0x80
   121fc:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12200:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12204:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12208:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1220a:	4b45      	ldr	r3, [pc, #276]	; (12320 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   1220c:	f36f 1186 	bfc	r1, #6, #1
   12210:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12212:	691b      	ldr	r3, [r3, #16]
   12214:	68aa      	ldr	r2, [r5, #8]
   12216:	2100      	movs	r1, #0
   12218:	4798      	blx	r3
   1221a:	e72c      	b.n	12076 <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   1221c:	4941      	ldr	r1, [pc, #260]	; (12324 <_usb_d_dev_handler+0x330>)
   1221e:	1888      	adds	r0, r1, r2
   12220:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12224:	2104      	movs	r1, #4
   12226:	7283      	strb	r3, [r0, #10]
   12228:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1222c:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12230:	e721      	b.n	12076 <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   12232:	2101      	movs	r1, #1
   12234:	4628      	mov	r0, r5
   12236:	f7ff fde1 	bl	11dfc <_usb_d_dev_out_next>
   1223a:	e71c      	b.n	12076 <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1223c:	f013 0f10 	tst.w	r3, #16
   12240:	f040 80e0 	bne.w	12404 <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12244:	065a      	lsls	r2, r3, #25
   12246:	f100 80e7 	bmi.w	12418 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   1224a:	069b      	lsls	r3, r3, #26
   1224c:	f57f af13 	bpl.w	12076 <_usb_d_dev_handler+0x82>
   12250:	2320      	movs	r3, #32
   12252:	68aa      	ldr	r2, [r5, #8]
   12254:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12258:	4b31      	ldr	r3, [pc, #196]	; (12320 <_usb_d_dev_handler+0x32c>)
   1225a:	691b      	ldr	r3, [r3, #16]
   1225c:	4798      	blx	r3
   1225e:	e70a      	b.n	12076 <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12260:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   12262:	8b13      	ldrh	r3, [r2, #24]
   12264:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   12266:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12268:	f013 0004 	ands.w	r0, r3, #4
   1226c:	f040 80dc 	bne.w	12428 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12270:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   12274:	f040 80e0 	bne.w	12438 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12278:	0618      	lsls	r0, r3, #24
   1227a:	f100 8140 	bmi.w	124fe <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   1227e:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   12282:	f040 8191 	bne.w	125a8 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   12286:	f013 0108 	ands.w	r1, r3, #8
   1228a:	f040 819e 	bne.w	125ca <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   1228e:	07db      	lsls	r3, r3, #31
   12290:	f57f aeba 	bpl.w	12008 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12294:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12298:	4821      	ldr	r0, [pc, #132]	; (12320 <_usb_d_dev_handler+0x32c>)
   1229a:	8393      	strh	r3, [r2, #28]
   1229c:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1229e:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   122a0:	2570      	movs	r5, #112	; 0x70
   122a2:	2004      	movs	r0, #4
   122a4:	8315      	strh	r5, [r2, #24]
   122a6:	4623      	mov	r3, r4
   122a8:	e0de      	b.n	12468 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122aa:	f013 0f01 	tst.w	r3, #1
   122ae:	f43f af7f 	beq.w	121b0 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   122b2:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   122b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   122ba:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122be:	f04f 0104 	mov.w	r1, #4
   122c2:	f88e 300a 	strb.w	r3, [lr, #10]
   122c6:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122ca:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   122ce:	f43f aed2 	beq.w	12076 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   122d2:	4b13      	ldr	r3, [pc, #76]	; (12320 <_usb_d_dev_handler+0x32c>)
   122d4:	eb0a 0104 	add.w	r1, sl, r4
   122d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   122dc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122e0:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   122e4:	2240      	movs	r2, #64	; 0x40
   122e6:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122ea:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122ee:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   122f2:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122f6:	4b0a      	ldr	r3, [pc, #40]	; (12320 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   122f8:	f36f 1286 	bfc	r2, #6, #1
   122fc:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12300:	691b      	ldr	r3, [r3, #16]
   12302:	68aa      	ldr	r2, [r5, #8]
   12304:	2104      	movs	r1, #4
   12306:	4798      	blx	r3
   12308:	e6b5      	b.n	12076 <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   1230a:	2101      	movs	r1, #1
   1230c:	4628      	mov	r0, r5
   1230e:	f7ff fcbb 	bl	11c88 <_usb_d_dev_in_next>
   12312:	e6b0      	b.n	12076 <_usb_d_dev_handler+0x82>
   12314:	68aa      	ldr	r2, [r5, #8]
   12316:	2340      	movs	r3, #64	; 0x40
   12318:	e6ff      	b.n	1211a <_usb_d_dev_handler+0x126>
   1231a:	bf00      	nop
   1231c:	20002000 	.word	0x20002000
   12320:	20001fec 	.word	0x20001fec
   12324:	2000221c 	.word	0x2000221c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12328:	4bc3      	ldr	r3, [pc, #780]	; (12638 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1232a:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1232e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12330:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   12334:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12338:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1233a:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1233c:	f000 8098 	beq.w	12470 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12340:	f013 0302 	ands.w	r3, r3, #2
   12344:	d053      	beq.n	123ee <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12346:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1234a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1234e:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12352:	2208      	movs	r2, #8
   12354:	f88e 101a 	strb.w	r1, [lr, #26]
   12358:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1235c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12360:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12364:	f43f ae87 	beq.w	12076 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12368:	4ab4      	ldr	r2, [pc, #720]	; (1263c <_usb_d_dev_handler+0x648>)
   1236a:	eb0a 0e04 	add.w	lr, sl, r4
   1236e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   12372:	f10e 0e20 	add.w	lr, lr, #32
   12376:	f89e 1007 	ldrb.w	r1, [lr, #7]
   1237a:	09c9      	lsrs	r1, r1, #7
   1237c:	f47f ae7b 	bne.w	12076 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12380:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12382:	f04f 0c40 	mov.w	ip, #64	; 0x40
   12386:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1238a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1238e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12392:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12396:	4ba9      	ldr	r3, [pc, #676]	; (1263c <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12398:	f361 1286 	bfi	r2, r1, #6, #1
   1239c:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123a0:	691b      	ldr	r3, [r3, #16]
   123a2:	68aa      	ldr	r2, [r5, #8]
   123a4:	4798      	blx	r3
   123a6:	e666      	b.n	12076 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   123a8:	4ba3      	ldr	r3, [pc, #652]	; (12638 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   123aa:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   123ae:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123b0:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   123b4:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123b8:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   123bc:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123be:	d07a      	beq.n	124b6 <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   123c0:	f013 0302 	ands.w	r3, r3, #2
   123c4:	d013      	beq.n	123ee <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   123c6:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123ca:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   123ce:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123d2:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   123d6:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   123da:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   123dc:	f88e 101a 	strb.w	r1, [lr, #26]
   123e0:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123e4:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   123e8:	f47f ae45 	bne.w	12076 <_usb_d_dev_handler+0x82>
   123ec:	e7b8      	b.n	12360 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   123ee:	4992      	ldr	r1, [pc, #584]	; (12638 <_usb_d_dev_handler+0x644>)
   123f0:	1888      	adds	r0, r1, r2
   123f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123f6:	2108      	movs	r1, #8
   123f8:	7683      	strb	r3, [r0, #26]
   123fa:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123fe:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12402:	e638      	b.n	12076 <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   12404:	f00b 0307 	and.w	r3, fp, #7
   12408:	2b01      	cmp	r3, #1
   1240a:	d07e      	beq.n	1250a <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1240c:	2310      	movs	r3, #16
   1240e:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   12412:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   12416:	e62e      	b.n	12076 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12418:	2340      	movs	r3, #64	; 0x40
   1241a:	68aa      	ldr	r2, [r5, #8]
   1241c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12420:	4b86      	ldr	r3, [pc, #536]	; (1263c <_usb_d_dev_handler+0x648>)
   12422:	691b      	ldr	r3, [r3, #16]
   12424:	4798      	blx	r3
   12426:	e626      	b.n	12076 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12428:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   1242a:	4b84      	ldr	r3, [pc, #528]	; (1263c <_usb_d_dev_handler+0x648>)
   1242c:	8391      	strh	r1, [r2, #28]
   1242e:	681b      	ldr	r3, [r3, #0]
}
   12430:	b001      	add	sp, #4
   12432:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   12436:	4718      	bx	r3
   12438:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1243c:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   1243e:	4b7e      	ldr	r3, [pc, #504]	; (12638 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12440:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12442:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12444:	8314      	strh	r4, [r2, #24]
   12446:	891a      	ldrh	r2, [r3, #8]
   12448:	f002 020f 	and.w	r2, r2, #15
   1244c:	2a03      	cmp	r2, #3
   1244e:	f000 8128 	beq.w	126a2 <_usb_d_dev_handler+0x6ae>
   12452:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   12454:	f002 020f 	and.w	r2, r2, #15
   12458:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   1245a:	bf18      	it	ne
   1245c:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   1245e:	f000 811f 	beq.w	126a0 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   12462:	4b76      	ldr	r3, [pc, #472]	; (1263c <_usb_d_dev_handler+0x648>)
   12464:	685b      	ldr	r3, [r3, #4]
   12466:	2003      	movs	r0, #3
}
   12468:	b001      	add	sp, #4
   1246a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   1246e:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12470:	07d9      	lsls	r1, r3, #31
   12472:	f57f af65 	bpl.w	12340 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12476:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1247a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1247e:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12482:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12484:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12488:	f88e 101a 	strb.w	r1, [lr, #26]
   1248c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12490:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12494:	f43f adef 	beq.w	12076 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12498:	4a68      	ldr	r2, [pc, #416]	; (1263c <_usb_d_dev_handler+0x648>)
   1249a:	eb0a 0104 	add.w	r1, sl, r4
   1249e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124a2:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124a6:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124a8:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124ac:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124b0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   124b4:	e71d      	b.n	122f2 <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124b6:	f013 0f01 	tst.w	r3, #1
   124ba:	d081      	beq.n	123c0 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   124bc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124c0:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   124c4:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124c8:	f04f 0108 	mov.w	r1, #8
   124cc:	f88e 301a 	strb.w	r3, [lr, #26]
   124d0:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124d4:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124d8:	f43f adcd 	beq.w	12076 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   124dc:	4b57      	ldr	r3, [pc, #348]	; (1263c <_usb_d_dev_handler+0x648>)
   124de:	eb0a 0104 	add.w	r1, sl, r4
   124e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   124e6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124ea:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124ee:	2280      	movs	r2, #128	; 0x80
   124f0:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124f4:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124f8:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   124fc:	e6f9      	b.n	122f2 <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   124fe:	4b4f      	ldr	r3, [pc, #316]	; (1263c <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12500:	2080      	movs	r0, #128	; 0x80
   12502:	685b      	ldr	r3, [r3, #4]
   12504:	8390      	strh	r0, [r2, #28]
   12506:	2005      	movs	r0, #5
   12508:	e7ae      	b.n	12468 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1250a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1250e:	f43f ade3 	beq.w	120d8 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   12512:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   12516:	f36f 1386 	bfc	r3, #6, #1
   1251a:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1251e:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12520:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12522:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12526:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   1252a:	e5d5      	b.n	120d8 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   1252c:	4b42      	ldr	r3, [pc, #264]	; (12638 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1252e:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12532:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12534:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12538:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1253c:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1253e:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12540:	f000 8080 	beq.w	12644 <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   12544:	f013 0302 	ands.w	r3, r3, #2
   12548:	f43f ae68 	beq.w	1221c <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1254c:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12550:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12554:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12558:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1255a:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1255e:	f88e 100a 	strb.w	r1, [lr, #10]
   12562:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12566:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1256a:	f43f ad84 	beq.w	12076 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1256e:	4a33      	ldr	r2, [pc, #204]	; (1263c <_usb_d_dev_handler+0x648>)
   12570:	eb0a 0104 	add.w	r1, sl, r4
   12574:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12578:	3120      	adds	r1, #32
   1257a:	79ca      	ldrb	r2, [r1, #7]
   1257c:	09d2      	lsrs	r2, r2, #7
   1257e:	f43f ad7a 	beq.w	12076 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12582:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12584:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12588:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1258c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12590:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12594:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12596:	4b29      	ldr	r3, [pc, #164]	; (1263c <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12598:	f36f 1286 	bfc	r2, #6, #1
   1259c:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1259e:	691b      	ldr	r3, [r3, #16]
   125a0:	68aa      	ldr	r2, [r5, #8]
   125a2:	2100      	movs	r1, #0
   125a4:	4798      	blx	r3
   125a6:	e566      	b.n	12076 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125a8:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125aa:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   125ae:	4924      	ldr	r1, [pc, #144]	; (12640 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125b0:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   125b2:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125b4:	8310      	strh	r0, [r2, #24]
   125b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   125b8:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   125bc:	2b03      	cmp	r3, #3
   125be:	d1fa      	bne.n	125b6 <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   125c0:	4b1e      	ldr	r3, [pc, #120]	; (1263c <_usb_d_dev_handler+0x648>)
   125c2:	2100      	movs	r1, #0
   125c4:	685b      	ldr	r3, [r3, #4]
   125c6:	2002      	movs	r0, #2
   125c8:	e74e      	b.n	12468 <_usb_d_dev_handler+0x474>
   125ca:	4e1c      	ldr	r6, [pc, #112]	; (1263c <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   125cc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125d0:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   125d2:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125d4:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125d8:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   125da:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   125dc:	8291      	strh	r1, [r2, #20]
   125de:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125e0:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   125e2:	f04f 08ff 	mov.w	r8, #255	; 0xff
   125e6:	e007      	b.n	125f8 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   125e8:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   125ea:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   125ee:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   125f2:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   125f6:	d016      	beq.n	12626 <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125f8:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   125fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12600:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12604:	28ff      	cmp	r0, #255	; 0xff
   12606:	f103 0320 	add.w	r3, r3, #32
   1260a:	f104 0401 	add.w	r4, r4, #1
   1260e:	d0eb      	beq.n	125e8 <_usb_d_dev_handler+0x5f4>
   12610:	79da      	ldrb	r2, [r3, #7]
   12612:	0651      	lsls	r1, r2, #25
   12614:	d5e8      	bpl.n	125e8 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   12616:	f36f 1286 	bfc	r2, #6, #1
   1261a:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1261c:	69ea      	ldr	r2, [r5, #28]
   1261e:	6933      	ldr	r3, [r6, #16]
   12620:	2103      	movs	r1, #3
   12622:	4798      	blx	r3
   12624:	e7e0      	b.n	125e8 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12626:	2100      	movs	r1, #0
   12628:	2260      	movs	r2, #96	; 0x60
   1262a:	4803      	ldr	r0, [pc, #12]	; (12638 <_usb_d_dev_handler+0x644>)
   1262c:	f00b ff5e 	bl	1e4ec <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12630:	6873      	ldr	r3, [r6, #4]
   12632:	2100      	movs	r1, #0
   12634:	2001      	movs	r0, #1
   12636:	e717      	b.n	12468 <_usb_d_dev_handler+0x474>
   12638:	2000221c 	.word	0x2000221c
   1263c:	20001fec 	.word	0x20001fec
   12640:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12644:	07d9      	lsls	r1, r3, #31
   12646:	f57f af7d 	bpl.w	12544 <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1264a:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1264e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12652:	460a      	mov	r2, r1
   12654:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12658:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1265a:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1265e:	f88e 200a 	strb.w	r2, [lr, #10]
   12662:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12666:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1266a:	f43f ad04 	beq.w	12076 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1266e:	4a11      	ldr	r2, [pc, #68]	; (126b4 <_usb_d_dev_handler+0x6c0>)
   12670:	eb0a 0e04 	add.w	lr, sl, r4
   12674:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12678:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1267c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1267e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12682:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12686:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1268a:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1268e:	4b09      	ldr	r3, [pc, #36]	; (126b4 <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12690:	f36f 1286 	bfc	r2, #6, #1
   12694:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12698:	691b      	ldr	r3, [r3, #16]
   1269a:	68aa      	ldr	r2, [r5, #8]
   1269c:	4798      	blx	r3
   1269e:	e4ea      	b.n	12076 <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   126a0:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   126a2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   126a6:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   126a8:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   126aa:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   126ac:	f3c1 110a 	ubfx	r1, r1, #4, #11
   126b0:	e6d7      	b.n	12462 <_usb_d_dev_handler+0x46e>
   126b2:	bf00      	nop
   126b4:	20001fec 	.word	0x20001fec

000126b8 <_usb_d_dev_init>:
{
   126b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   126bc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126c0:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   126c2:	07db      	lsls	r3, r3, #31
   126c4:	d551      	bpl.n	1276a <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   126c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   126ca:	789c      	ldrb	r4, [r3, #2]
   126cc:	f014 0401 	ands.w	r4, r4, #1
   126d0:	d1fb      	bne.n	126ca <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   126d2:	4b45      	ldr	r3, [pc, #276]	; (127e8 <_usb_d_dev_init+0x130>)
   126d4:	4a45      	ldr	r2, [pc, #276]	; (127ec <_usb_d_dev_init+0x134>)
   126d6:	601a      	str	r2, [r3, #0]
   126d8:	461e      	mov	r6, r3
   126da:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   126dc:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   126de:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   126e0:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   126e2:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   126e4:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   126e6:	27ff      	movs	r7, #255	; 0xff
   126e8:	e007      	b.n	126fa <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   126ea:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   126ec:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   126f0:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   126f4:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   126f8:	d01d      	beq.n	12736 <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   126fa:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   126fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12702:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12706:	28ff      	cmp	r0, #255	; 0xff
   12708:	f103 0320 	add.w	r3, r3, #32
   1270c:	f104 0401 	add.w	r4, r4, #1
   12710:	d0eb      	beq.n	126ea <_usb_d_dev_init+0x32>
   12712:	79da      	ldrb	r2, [r3, #7]
   12714:	0651      	lsls	r1, r2, #25
   12716:	d5e8      	bpl.n	126ea <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12718:	f36f 1286 	bfc	r2, #6, #1
   1271c:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1271e:	69ea      	ldr	r2, [r5, #28]
   12720:	6933      	ldr	r3, [r6, #16]
   12722:	2103      	movs	r1, #3
   12724:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   12726:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12728:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   1272c:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12730:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12734:	d1e1      	bne.n	126fa <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12736:	2260      	movs	r2, #96	; 0x60
   12738:	2100      	movs	r1, #0
   1273a:	482d      	ldr	r0, [pc, #180]	; (127f0 <_usb_d_dev_init+0x138>)
   1273c:	f00b fed6 	bl	1e4ec <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12740:	4b2c      	ldr	r3, [pc, #176]	; (127f4 <_usb_d_dev_init+0x13c>)
   12742:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   12744:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12748:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   1274c:	f013 031f 	ands.w	r3, r3, #31
   12750:	d027      	beq.n	127a2 <_usb_d_dev_init+0xea>
   12752:	2b1f      	cmp	r3, #31
   12754:	d025      	beq.n	127a2 <_usb_d_dev_init+0xea>
   12756:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12758:	b338      	cbz	r0, 127aa <_usb_d_dev_init+0xf2>
   1275a:	281f      	cmp	r0, #31
   1275c:	d025      	beq.n	127aa <_usb_d_dev_init+0xf2>
   1275e:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12760:	b332      	cbz	r2, 127b0 <_usb_d_dev_init+0xf8>
   12762:	2a07      	cmp	r2, #7
   12764:	d024      	beq.n	127b0 <_usb_d_dev_init+0xf8>
   12766:	0311      	lsls	r1, r2, #12
   12768:	e024      	b.n	127b4 <_usb_d_dev_init+0xfc>
   1276a:	7893      	ldrb	r3, [r2, #2]
   1276c:	079f      	lsls	r7, r3, #30
   1276e:	d1fc      	bne.n	1276a <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12770:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12772:	079e      	lsls	r6, r3, #30
   12774:	d50d      	bpl.n	12792 <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12776:	7813      	ldrb	r3, [r2, #0]
   12778:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1277c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1277e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12782:	7893      	ldrb	r3, [r2, #2]
   12784:	079d      	lsls	r5, r3, #30
   12786:	d1fc      	bne.n	12782 <_usb_d_dev_init+0xca>
   12788:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1278c:	7893      	ldrb	r3, [r2, #2]
   1278e:	079c      	lsls	r4, r3, #30
   12790:	d4fc      	bmi.n	1278c <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12792:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12796:	2301      	movs	r3, #1
   12798:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1279a:	7893      	ldrb	r3, [r2, #2]
   1279c:	0798      	lsls	r0, r3, #30
   1279e:	d1fc      	bne.n	1279a <_usb_d_dev_init+0xe2>
   127a0:	e791      	b.n	126c6 <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   127a2:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   127a6:	2800      	cmp	r0, #0
   127a8:	d1d7      	bne.n	1275a <_usb_d_dev_init+0xa2>
   127aa:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   127ac:	2a00      	cmp	r2, #0
   127ae:	d1d8      	bne.n	12762 <_usb_d_dev_init+0xaa>
   127b0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   127b4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127b8:	4303      	orrs	r3, r0
   127ba:	430b      	orrs	r3, r1
   127bc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   127be:	78d3      	ldrb	r3, [r2, #3]
   127c0:	f043 0303 	orr.w	r3, r3, #3
   127c4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   127c6:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   127c8:	2104      	movs	r1, #4
   127ca:	f043 030c 	orr.w	r3, r3, #12
   127ce:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   127d0:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   127d2:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   127d4:	7898      	ldrb	r0, [r3, #2]
   127d6:	f010 0003 	ands.w	r0, r0, #3
   127da:	d1fb      	bne.n	127d4 <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   127dc:	4a04      	ldr	r2, [pc, #16]	; (127f0 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   127de:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   127e0:	2201      	movs	r2, #1
   127e2:	811a      	strh	r2, [r3, #8]
}
   127e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127e8:	20001fec 	.word	0x20001fec
   127ec:	00011c85 	.word	0x00011c85
   127f0:	2000221c 	.word	0x2000221c
   127f4:	00800084 	.word	0x00800084

000127f8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   127f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127fc:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   127fe:	079b      	lsls	r3, r3, #30
   12800:	d124      	bne.n	1284c <_usb_d_dev_enable+0x54>
{
   12802:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12804:	7893      	ldrb	r3, [r2, #2]
   12806:	0798      	lsls	r0, r3, #30
   12808:	d1fc      	bne.n	12804 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   1280a:	7813      	ldrb	r3, [r2, #0]
   1280c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   1280e:	0799      	lsls	r1, r3, #30
   12810:	d407      	bmi.n	12822 <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   12812:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12816:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12818:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1281c:	7893      	ldrb	r3, [r2, #2]
   1281e:	079b      	lsls	r3, r3, #30
   12820:	d1fc      	bne.n	1281c <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12822:	4b0c      	ldr	r3, [pc, #48]	; (12854 <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12824:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12828:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1282c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12830:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   12834:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12838:	f240 218d 	movw	r1, #653	; 0x28d
   1283c:	6098      	str	r0, [r3, #8]
   1283e:	609e      	str	r6, [r3, #8]
   12840:	609d      	str	r5, [r3, #8]
   12842:	609c      	str	r4, [r3, #8]
   12844:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   12846:	2000      	movs	r0, #0
}
   12848:	bc70      	pop	{r4, r5, r6}
   1284a:	4770      	bx	lr
		return -USB_ERR_DENIED;
   1284c:	f06f 0010 	mvn.w	r0, #16
   12850:	4770      	bx	lr
   12852:	bf00      	nop
   12854:	e000e100 	.word	0xe000e100

00012858 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12858:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1285c:	8913      	ldrh	r3, [r2, #8]
   1285e:	f023 0301 	bic.w	r3, r3, #1
   12862:	041b      	lsls	r3, r3, #16
   12864:	0c1b      	lsrs	r3, r3, #16
   12866:	8113      	strh	r3, [r2, #8]
   12868:	4770      	bx	lr
   1286a:	bf00      	nop

0001286c <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   1286c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12870:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12874:	7298      	strb	r0, [r3, #10]
   12876:	4770      	bx	lr

00012878 <_usb_d_dev_ep_init>:
{
   12878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1287c:	f010 050f 	ands.w	r5, r0, #15
   12880:	fa4f fc80 	sxtb.w	ip, r0
   12884:	d02a      	beq.n	128dc <_usb_d_dev_ep_init+0x64>
   12886:	f1bc 0f00 	cmp.w	ip, #0
   1288a:	bfb4      	ite	lt
   1288c:	1cab      	addlt	r3, r5, #2
   1288e:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12890:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12892:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12896:	d859      	bhi.n	1294c <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12898:	009c      	lsls	r4, r3, #2
   1289a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 12954 <_usb_d_dev_ep_init+0xdc>
   1289e:	18e6      	adds	r6, r4, r3
   128a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   128a4:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   128a8:	2eff      	cmp	r6, #255	; 0xff
   128aa:	d14b      	bne.n	12944 <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   128ac:	b1d1      	cbz	r1, 128e4 <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   128ae:	f1bc 0f00 	cmp.w	ip, #0
   128b2:	db3a      	blt.n	1292a <_usb_d_dev_ep_init+0xb2>
   128b4:	006f      	lsls	r7, r5, #1
   128b6:	197e      	adds	r6, r7, r5
   128b8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12958 <_usb_d_dev_ep_init+0xe0>
   128bc:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   128c0:	bb4e      	cbnz	r6, 12916 <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   128c2:	4423      	add	r3, r4
   128c4:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   128c8:	3101      	adds	r1, #1
   128ca:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   128ce:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   128d2:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   128d4:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   128d6:	2000      	movs	r0, #0
   128d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   128dc:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   128e0:	462b      	mov	r3, r5
   128e2:	e7d9      	b.n	12898 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   128e4:	b125      	cbz	r5, 128f0 <_usb_d_dev_ep_init+0x78>
   128e6:	f1bc 0f00 	cmp.w	ip, #0
   128ea:	db01      	blt.n	128f0 <_usb_d_dev_ep_init+0x78>
   128ec:	1cae      	adds	r6, r5, #2
   128ee:	e000      	b.n	128f2 <_usb_d_dev_ep_init+0x7a>
   128f0:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   128f2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   128f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   128fa:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   128fe:	2eff      	cmp	r6, #255	; 0xff
   12900:	d120      	bne.n	12944 <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   12902:	006f      	lsls	r7, r5, #1
   12904:	197e      	adds	r6, r7, r5
   12906:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12958 <_usb_d_dev_ep_init+0xe0>
   1290a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   1290e:	b146      	cbz	r6, 12922 <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12910:	f1bc 0f00 	cmp.w	ip, #0
   12914:	db0c      	blt.n	12930 <_usb_d_dev_ep_init+0xb8>
   12916:	443d      	add	r5, r7
   12918:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   1291c:	892d      	ldrh	r5, [r5, #8]
   1291e:	4295      	cmp	r5, r2
   12920:	dacf      	bge.n	128c2 <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   12922:	f06f 0012 	mvn.w	r0, #18
   12926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1292a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12958 <_usb_d_dev_ep_init+0xe0>
   1292e:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12930:	442f      	add	r7, r5
   12932:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   12936:	687d      	ldr	r5, [r7, #4]
   12938:	b115      	cbz	r5, 12940 <_usb_d_dev_ep_init+0xc8>
   1293a:	897e      	ldrh	r6, [r7, #10]
   1293c:	4296      	cmp	r6, r2
   1293e:	dbf0      	blt.n	12922 <_usb_d_dev_ep_init+0xaa>
   12940:	462e      	mov	r6, r5
   12942:	e7be      	b.n	128c2 <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   12944:	f06f 0013 	mvn.w	r0, #19
   12948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   1294c:	f06f 0011 	mvn.w	r0, #17
   12950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12954:	20001fec 	.word	0x20001fec
   12958:	000235e8 	.word	0x000235e8

0001295c <_usb_d_dev_ep_deinit>:
{
   1295c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12960:	f010 070f 	ands.w	r7, r0, #15
{
   12964:	b082      	sub	sp, #8
   12966:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1296a:	d009      	beq.n	12980 <_usb_d_dev_ep_deinit+0x24>
   1296c:	f1b9 0f00 	cmp.w	r9, #0
   12970:	bfb4      	ite	lt
   12972:	1cbe      	addlt	r6, r7, #2
   12974:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12976:	2f02      	cmp	r7, #2
   12978:	d903      	bls.n	12982 <_usb_d_dev_ep_deinit+0x26>
}
   1297a:	b002      	add	sp, #8
   1297c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12980:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12982:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12986:	4d3d      	ldr	r5, [pc, #244]	; (12a7c <_usb_d_dev_ep_deinit+0x120>)
   12988:	eb08 0306 	add.w	r3, r8, r6
   1298c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12990:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12994:	29ff      	cmp	r1, #255	; 0xff
   12996:	d0f0      	beq.n	1297a <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12998:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   1299c:	224a      	movs	r2, #74	; 0x4a
   1299e:	4604      	mov	r4, r0
   129a0:	f88d 2005 	strb.w	r2, [sp, #5]
   129a4:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129a6:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   129a8:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129ac:	d41b      	bmi.n	129e6 <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   129ae:	f003 0307 	and.w	r3, r3, #7
   129b2:	2b01      	cmp	r3, #1
   129b4:	d050      	beq.n	12a58 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   129b6:	f1b9 0f00 	cmp.w	r9, #0
   129ba:	db54      	blt.n	12a66 <_usb_d_dev_ep_deinit+0x10a>
   129bc:	0160      	lsls	r0, r4, #5
   129be:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   129c2:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   129c6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   129ca:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   129ce:	4446      	add	r6, r8
   129d0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   129d4:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   129d6:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   129d8:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   129dc:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   129e0:	b002      	add	sp, #8
   129e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   129e6:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   129ea:	f103 0208 	add.w	r2, r3, #8
   129ee:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   129f0:	f1b9 0f00 	cmp.w	r9, #0
   129f4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   129f8:	bfb5      	itete	lt
   129fa:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   129fe:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a02:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a06:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12a0a:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12a0e:	0150      	lsls	r0, r2, #5
   12a10:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a14:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12a16:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a1a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12a1e:	eb08 0306 	add.w	r3, r8, r6
   12a22:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12a26:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12a2a:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a2e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12a32:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a36:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12a38:	f103 0a20 	add.w	sl, r3, #32
   12a3c:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a40:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12a42:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a46:	4608      	mov	r0, r1
   12a48:	2103      	movs	r1, #3
   12a4a:	4798      	blx	r3
   12a4c:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12a50:	f003 0307 	and.w	r3, r3, #7
   12a54:	2b01      	cmp	r3, #1
   12a56:	d1ae      	bne.n	129b6 <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12a58:	0160      	lsls	r0, r4, #5
   12a5a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12a5e:	2300      	movs	r3, #0
   12a60:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12a64:	e7b3      	b.n	129ce <_usb_d_dev_ep_deinit+0x72>
   12a66:	017f      	lsls	r7, r7, #5
   12a68:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12a6c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12a70:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12a74:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12a78:	e7a9      	b.n	129ce <_usb_d_dev_ep_deinit+0x72>
   12a7a:	bf00      	nop
   12a7c:	20001fec 	.word	0x20001fec

00012a80 <_usb_d_dev_ep_enable>:
{
   12a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a82:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a84:	f010 000f 	ands.w	r0, r0, #15
   12a88:	d045      	beq.n	12b16 <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12a8a:	0142      	lsls	r2, r0, #5
   12a8c:	2e00      	cmp	r6, #0
   12a8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12a92:	bfb4      	ite	lt
   12a94:	1c83      	addlt	r3, r0, #2
   12a96:	4603      	movge	r3, r0
   12a98:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12a9c:	4a84      	ldr	r2, [pc, #528]	; (12cb0 <_usb_d_dev_ep_enable+0x230>)
   12a9e:	1c59      	adds	r1, r3, #1
   12aa0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12aa4:	2802      	cmp	r0, #2
   12aa6:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12aa8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12aac:	f200 809f 	bhi.w	12bee <_usb_d_dev_ep_enable+0x16e>
   12ab0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12ab8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12abc:	2aff      	cmp	r2, #255	; 0xff
   12abe:	f000 8096 	beq.w	12bee <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12ac2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12ac6:	4d7b      	ldr	r5, [pc, #492]	; (12cb4 <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12ac8:	f002 0e07 	and.w	lr, r2, #7
   12acc:	0140      	lsls	r0, r0, #5
   12ace:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12ad2:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12ad6:	d028      	beq.n	12b2a <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12ad8:	2e00      	cmp	r6, #0
   12ada:	db65      	blt.n	12ba8 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12adc:	0761      	lsls	r1, r4, #29
   12ade:	f040 80a4 	bne.w	12c2a <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12ae2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12ae4:	4b74      	ldr	r3, [pc, #464]	; (12cb8 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12ae6:	f002 0207 	and.w	r2, r2, #7
   12aea:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12aee:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12af0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12af4:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12af8:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12afc:	d97a      	bls.n	12bf4 <_usb_d_dev_ep_enable+0x174>
   12afe:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12b02:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b04:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12b06:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12b08:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b0a:	607a      	str	r2, [r7, #4]
   12b0c:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12b10:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12b12:	4608      	mov	r0, r1
   12b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12b16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12b1a:	4968      	ldr	r1, [pc, #416]	; (12cbc <_usb_d_dev_ep_enable+0x23c>)
   12b1c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12b20:	f1a1 0214 	sub.w	r2, r1, #20
   12b24:	b2e4      	uxtb	r4, r4
   12b26:	4603      	mov	r3, r0
   12b28:	e7c2      	b.n	12ab0 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12b2a:	f014 0f77 	tst.w	r4, #119	; 0x77
   12b2e:	d17c      	bne.n	12c2a <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12b32:	4a61      	ldr	r2, [pc, #388]	; (12cb8 <_usb_d_dev_ep_enable+0x238>)
   12b34:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12b38:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b3e:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12b42:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b46:	d94c      	bls.n	12be2 <_usb_d_dev_ep_enable+0x162>
   12b48:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12b50:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b52:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b54:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12b58:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b5a:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b5c:	617b      	str	r3, [r7, #20]
   12b5e:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b62:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12b66:	7c8a      	ldrb	r2, [r1, #18]
   12b68:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12b6a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12b6e:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12b72:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12b74:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12b76:	2000      	movs	r0, #0
   12b78:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12b7a:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12b7c:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12b7e:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12b82:	6873      	ldr	r3, [r6, #4]
   12b84:	f367 339b 	bfi	r3, r7, #14, #14
   12b88:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12b8a:	6872      	ldr	r2, [r6, #4]
   12b8c:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12b90:	f360 020d 	bfi	r2, r0, #0, #14
   12b94:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12b96:	2510      	movs	r5, #16
   12b98:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b9a:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12b9e:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12ba2:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12ba8:	f014 0f70 	tst.w	r4, #112	; 0x70
   12bac:	d13d      	bne.n	12c2a <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12bae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12bb0:	0112      	lsls	r2, r2, #4
   12bb2:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12bb6:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12bba:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12bc0:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12bc4:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12bc8:	d91a      	bls.n	12c00 <_usb_d_dev_ep_enable+0x180>
   12bca:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12bce:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12bd0:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12bd2:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12bd4:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12bd6:	617a      	str	r2, [r7, #20]
   12bd8:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12bdc:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12bde:	4608      	mov	r0, r1
   12be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12be6:	d923      	bls.n	12c30 <_usb_d_dev_ep_enable+0x1b0>
   12be8:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12bec:	e7ae      	b.n	12b4c <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12bee:	f06f 0011 	mvn.w	r0, #17
   12bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12bf4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12bf8:	d908      	bls.n	12c0c <_usb_d_dev_ep_enable+0x18c>
   12bfa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12bfe:	e780      	b.n	12b02 <_usb_d_dev_ep_enable+0x82>
   12c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12c04:	d907      	bls.n	12c16 <_usb_d_dev_ep_enable+0x196>
   12c06:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12c0a:	e7e0      	b.n	12bce <_usb_d_dev_ep_enable+0x14e>
   12c0c:	2980      	cmp	r1, #128	; 0x80
   12c0e:	d907      	bls.n	12c20 <_usb_d_dev_ep_enable+0x1a0>
   12c10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12c14:	e775      	b.n	12b02 <_usb_d_dev_ep_enable+0x82>
   12c16:	2b80      	cmp	r3, #128	; 0x80
   12c18:	d914      	bls.n	12c44 <_usb_d_dev_ep_enable+0x1c4>
   12c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12c1e:	e7d6      	b.n	12bce <_usb_d_dev_ep_enable+0x14e>
   12c20:	2940      	cmp	r1, #64	; 0x40
   12c22:	d914      	bls.n	12c4e <_usb_d_dev_ep_enable+0x1ce>
   12c24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12c28:	e76b      	b.n	12b02 <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12c2a:	f06f 0013 	mvn.w	r0, #19
   12c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c30:	2b80      	cmp	r3, #128	; 0x80
   12c32:	d902      	bls.n	12c3a <_usb_d_dev_ep_enable+0x1ba>
   12c34:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12c38:	e788      	b.n	12b4c <_usb_d_dev_ep_enable+0xcc>
   12c3a:	2b40      	cmp	r3, #64	; 0x40
   12c3c:	d90c      	bls.n	12c58 <_usb_d_dev_ep_enable+0x1d8>
   12c3e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12c42:	e783      	b.n	12b4c <_usb_d_dev_ep_enable+0xcc>
   12c44:	2b40      	cmp	r3, #64	; 0x40
   12c46:	d90c      	bls.n	12c62 <_usb_d_dev_ep_enable+0x1e2>
   12c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12c4c:	e7bf      	b.n	12bce <_usb_d_dev_ep_enable+0x14e>
   12c4e:	2920      	cmp	r1, #32
   12c50:	d90c      	bls.n	12c6c <_usb_d_dev_ep_enable+0x1ec>
   12c52:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12c56:	e754      	b.n	12b02 <_usb_d_dev_ep_enable+0x82>
   12c58:	2b20      	cmp	r3, #32
   12c5a:	d90c      	bls.n	12c76 <_usb_d_dev_ep_enable+0x1f6>
   12c5c:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12c60:	e774      	b.n	12b4c <_usb_d_dev_ep_enable+0xcc>
   12c62:	2b20      	cmp	r3, #32
   12c64:	d90c      	bls.n	12c80 <_usb_d_dev_ep_enable+0x200>
   12c66:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12c6a:	e7b0      	b.n	12bce <_usb_d_dev_ep_enable+0x14e>
   12c6c:	2910      	cmp	r1, #16
   12c6e:	d90c      	bls.n	12c8a <_usb_d_dev_ep_enable+0x20a>
   12c70:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12c74:	e745      	b.n	12b02 <_usb_d_dev_ep_enable+0x82>
   12c76:	2b10      	cmp	r3, #16
   12c78:	d90d      	bls.n	12c96 <_usb_d_dev_ep_enable+0x216>
   12c7a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12c7e:	e765      	b.n	12b4c <_usb_d_dev_ep_enable+0xcc>
   12c80:	2b10      	cmp	r3, #16
   12c82:	d90e      	bls.n	12ca2 <_usb_d_dev_ep_enable+0x222>
   12c84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12c88:	e7a1      	b.n	12bce <_usb_d_dev_ep_enable+0x14e>
   12c8a:	2908      	cmp	r1, #8
   12c8c:	bf94      	ite	ls
   12c8e:	2100      	movls	r1, #0
   12c90:	2101      	movhi	r1, #1
   12c92:	0709      	lsls	r1, r1, #28
   12c94:	e735      	b.n	12b02 <_usb_d_dev_ep_enable+0x82>
   12c96:	2b08      	cmp	r3, #8
   12c98:	bf94      	ite	ls
   12c9a:	2400      	movls	r4, #0
   12c9c:	2401      	movhi	r4, #1
   12c9e:	0724      	lsls	r4, r4, #28
   12ca0:	e754      	b.n	12b4c <_usb_d_dev_ep_enable+0xcc>
   12ca2:	2b08      	cmp	r3, #8
   12ca4:	bf94      	ite	ls
   12ca6:	2300      	movls	r3, #0
   12ca8:	2301      	movhi	r3, #1
   12caa:	071a      	lsls	r2, r3, #28
   12cac:	e78f      	b.n	12bce <_usb_d_dev_ep_enable+0x14e>
   12cae:	bf00      	nop
   12cb0:	20001fec 	.word	0x20001fec
   12cb4:	2000221c 	.word	0x2000221c
   12cb8:	0fffc000 	.word	0x0fffc000
   12cbc:	20002000 	.word	0x20002000

00012cc0 <_usb_d_dev_ep_stall>:
{
   12cc0:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12cc2:	f010 000f 	ands.w	r0, r0, #15
{
   12cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12cc8:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12ccc:	d01e      	beq.n	12d0c <_usb_d_dev_ep_stall+0x4c>
   12cce:	2b00      	cmp	r3, #0
   12cd0:	bfb4      	ite	lt
   12cd2:	1c83      	addlt	r3, r0, #2
   12cd4:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12cd6:	1c5c      	adds	r4, r3, #1
   12cd8:	4a40      	ldr	r2, [pc, #256]	; (12ddc <_usb_d_dev_ep_stall+0x11c>)
   12cda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12cde:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12ce0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12ce4:	d86d      	bhi.n	12dc2 <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12ce6:	2901      	cmp	r1, #1
   12ce8:	d014      	beq.n	12d14 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12cea:	b389      	cbz	r1, 12d50 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12cec:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12cee:	f003 030f 	and.w	r3, r3, #15
   12cf2:	015b      	lsls	r3, r3, #5
   12cf4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12cf8:	2210      	movs	r2, #16
   12cfa:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12cfe:	fa02 f305 	lsl.w	r3, r2, r5
   12d02:	420b      	tst	r3, r1
   12d04:	bf14      	ite	ne
   12d06:	2001      	movne	r0, #1
   12d08:	2000      	moveq	r0, #0
   12d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12d0c:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12d0e:	4a34      	ldr	r2, [pc, #208]	; (12de0 <_usb_d_dev_ep_stall+0x120>)
   12d10:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12d12:	d1ea      	bne.n	12cea <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d14:	4931      	ldr	r1, [pc, #196]	; (12ddc <_usb_d_dev_ep_stall+0x11c>)
   12d16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12d1a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d1e:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d20:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12d24:	f002 020f 	and.w	r2, r2, #15
   12d28:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12d2a:	2320      	movs	r3, #32
   12d2c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d30:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12d32:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d34:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12d36:	b2db      	uxtb	r3, r3
   12d38:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12d3c:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12d40:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12d44:	f043 0308 	orr.w	r3, r3, #8
   12d48:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12d4c:	2000      	movs	r0, #0
   12d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12d50:	009e      	lsls	r6, r3, #2
   12d52:	4c22      	ldr	r4, [pc, #136]	; (12ddc <_usb_d_dev_ep_stall+0x11c>)
   12d54:	18f2      	adds	r2, r6, r3
   12d56:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d5a:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12d5c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12d60:	f002 020f 	and.w	r2, r2, #15
   12d64:	0151      	lsls	r1, r2, #5
   12d66:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d6a:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12d6c:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12d70:	4207      	tst	r7, r0
   12d72:	d01b      	beq.n	12dac <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d74:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12d76:	2720      	movs	r7, #32
   12d78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12d7c:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d7e:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12d80:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d84:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d88:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12d8c:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12d90:	423a      	tst	r2, r7
   12d92:	d10d      	bne.n	12db0 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12d94:	4433      	add	r3, r6
   12d96:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12d9a:	3420      	adds	r4, #32
   12d9c:	79e3      	ldrb	r3, [r4, #7]
   12d9e:	f003 0207 	and.w	r2, r3, #7
   12da2:	2a01      	cmp	r2, #1
   12da4:	d010      	beq.n	12dc8 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12da6:	f36f 03c3 	bfc	r3, #3, #1
   12daa:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12dac:	2000      	movs	r0, #0
   12dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12db0:	2201      	movs	r2, #1
   12db2:	fa02 f505 	lsl.w	r5, r2, r5
   12db6:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12db8:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12dbc:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12dc0:	e7e8      	b.n	12d94 <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12dc2:	f06f 0011 	mvn.w	r0, #17
}
   12dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12dc8:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12dcc:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12dd0:	d1ec      	bne.n	12dac <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12dd2:	f360 03c3 	bfi	r3, r0, #3, #1
   12dd6:	71e3      	strb	r3, [r4, #7]
   12dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dda:	bf00      	nop
   12ddc:	20001fec 	.word	0x20001fec
   12de0:	20002000 	.word	0x20002000

00012de4 <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12de4:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12de6:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12dea:	4a12      	ldr	r2, [pc, #72]	; (12e34 <_usb_d_dev_ep_read_req+0x50>)
   12dec:	0143      	lsls	r3, r0, #5
   12dee:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12df0:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12df2:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12df4:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12df6:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12dfa:	d818      	bhi.n	12e2e <_usb_d_dev_ep_read_req+0x4a>
   12dfc:	b1b9      	cbz	r1, 12e2e <_usb_d_dev_ep_read_req+0x4a>
   12dfe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12e02:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12e06:	2a11      	cmp	r2, #17
   12e08:	d10e      	bne.n	12e28 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12e0a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12e0e:	f012 0010 	ands.w	r0, r2, #16
   12e12:	d007      	beq.n	12e24 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12e14:	686a      	ldr	r2, [r5, #4]
   12e16:	682e      	ldr	r6, [r5, #0]
   12e18:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e1a:	2210      	movs	r2, #16
   12e1c:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12e1e:	4620      	mov	r0, r4
   12e20:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12e24:	bc70      	pop	{r4, r5, r6}
   12e26:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12e28:	f06f 0012 	mvn.w	r0, #18
   12e2c:	e7fa      	b.n	12e24 <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12e2e:	f06f 0011 	mvn.w	r0, #17
   12e32:	e7f7      	b.n	12e24 <_usb_d_dev_ep_read_req+0x40>
   12e34:	2000221c 	.word	0x2000221c

00012e38 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12e3c:	7a03      	ldrb	r3, [r0, #8]
   12e3e:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12e42:	f013 030f 	ands.w	r3, r3, #15
{
   12e46:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12e48:	d03a      	beq.n	12ec0 <_usb_d_dev_ep_trans+0x88>
   12e4a:	f1b9 0f00 	cmp.w	r9, #0
   12e4e:	bfb4      	ite	lt
   12e50:	1c9d      	addlt	r5, r3, #2
   12e52:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12e54:	4e5d      	ldr	r6, [pc, #372]	; (12fcc <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12e56:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12e5a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12e5e:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12e62:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12e64:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12e68:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12e6c:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12e6e:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12e72:	d050      	beq.n	12f16 <_usb_d_dev_ep_trans+0xde>
   12e74:	1e57      	subs	r7, r2, #1
   12e76:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12e78:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12e7a:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12e7c:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12e80:	f200 8091 	bhi.w	12fa6 <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12e84:	6803      	ldr	r3, [r0, #0]
   12e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12e8a:	d223      	bcs.n	12ed4 <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12e8c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12e90:	eb0b 0305 	add.w	r3, fp, r5
   12e94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12e98:	6a1b      	ldr	r3, [r3, #32]
   12e9a:	2b00      	cmp	r3, #0
   12e9c:	f000 8092 	beq.w	12fc4 <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12ea0:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12ea4:	eb0b 0405 	add.w	r4, fp, r5
   12ea8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12eac:	f104 0220 	add.w	r2, r4, #32
   12eb0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12eb4:	071b      	lsls	r3, r3, #28
   12eb6:	d530      	bpl.n	12f1a <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12eb8:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12eba:	b007      	add	sp, #28
   12ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12ec0:	4e42      	ldr	r6, [pc, #264]	; (12fcc <_usb_d_dev_ep_trans+0x194>)
   12ec2:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12ec4:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12ec8:	428a      	cmp	r2, r1
   12eca:	d01d      	beq.n	12f08 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12ecc:	f106 0814 	add.w	r8, r6, #20
   12ed0:	461d      	mov	r5, r3
   12ed2:	e7cf      	b.n	12e74 <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12ed4:	4c3e      	ldr	r4, [pc, #248]	; (12fd0 <_usb_d_dev_ep_trans+0x198>)
   12ed6:	eb03 0e01 	add.w	lr, r3, r1
   12eda:	45a6      	cmp	lr, r4
   12edc:	d8d6      	bhi.n	12e8c <_usb_d_dev_ep_trans+0x54>
   12ede:	f013 0303 	ands.w	r3, r3, #3
   12ee2:	d1d3      	bne.n	12e8c <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12ee4:	f1b9 0f00 	cmp.w	r9, #0
   12ee8:	db60      	blt.n	12fac <_usb_d_dev_ep_trans+0x174>
   12eea:	428a      	cmp	r2, r1
   12eec:	d8ce      	bhi.n	12e8c <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12eee:	2f00      	cmp	r7, #0
   12ef0:	d060      	beq.n	12fb4 <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12ef2:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12ef6:	eb0b 0205 	add.w	r2, fp, r5
   12efa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12efe:	6a12      	ldr	r2, [r2, #32]
   12f00:	2a00      	cmp	r2, #0
   12f02:	d050      	beq.n	12fa6 <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12f04:	469a      	mov	sl, r3
   12f06:	e7cd      	b.n	12ea4 <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12f08:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12f0a:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12f0c:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   12f10:	f106 0814 	add.w	r8, r6, #20
   12f14:	e7b6      	b.n	12e84 <_usb_d_dev_ep_trans+0x4c>
   12f16:	4617      	mov	r7, r2
   12f18:	e7ae      	b.n	12e78 <_usb_d_dev_ep_trans+0x40>
   12f1a:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   12f1c:	a805      	add	r0, sp, #20
   12f1e:	9202      	str	r2, [sp, #8]
   12f20:	f000 f8e0 	bl	130e4 <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12f24:	9a02      	ldr	r2, [sp, #8]
   12f26:	9b01      	ldr	r3, [sp, #4]
   12f28:	79d0      	ldrb	r0, [r2, #7]
   12f2a:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   12f2e:	d131      	bne.n	12f94 <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   12f30:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   12f34:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   12f38:	a805      	add	r0, sp, #20
   12f3a:	9303      	str	r3, [sp, #12]
   12f3c:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   12f3e:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   12f40:	f000 f8d8 	bl	130f4 <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   12f44:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   12f46:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   12f48:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   12f4a:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   12f4e:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   12f50:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   12f54:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   12f58:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   12f5c:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   12f5e:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   12f60:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   12f62:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   12f66:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12f68:	7a5b      	ldrb	r3, [r3, #9]
   12f6a:	b9c3      	cbnz	r3, 12f9e <_usb_d_dev_ep_trans+0x166>
   12f6c:	461f      	mov	r7, r3
   12f6e:	445d      	add	r5, fp
   12f70:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   12f74:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12f78:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   12f7c:	f367 1304 	bfi	r3, r7, #4, #1
   12f80:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   12f84:	4640      	mov	r0, r8
   12f86:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   12f8a:	db17      	blt.n	12fbc <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   12f8c:	f7fe ff36 	bl	11dfc <_usb_d_dev_out_next>
	return ERR_NONE;
   12f90:	2000      	movs	r0, #0
   12f92:	e792      	b.n	12eba <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   12f94:	a805      	add	r0, sp, #20
   12f96:	f000 f8ad 	bl	130f4 <atomic_leave_critical>
		return USB_BUSY;
   12f9a:	2001      	movs	r0, #1
   12f9c:	e78d      	b.n	12eba <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12f9e:	fab7 f787 	clz	r7, r7
   12fa2:	097f      	lsrs	r7, r7, #5
   12fa4:	e7e3      	b.n	12f6e <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   12fa6:	f06f 0011 	mvn.w	r0, #17
   12faa:	e786      	b.n	12eba <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   12fac:	469a      	mov	sl, r3
   12fae:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12fb2:	e777      	b.n	12ea4 <_usb_d_dev_ep_trans+0x6c>
   12fb4:	46ba      	mov	sl, r7
   12fb6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12fba:	e773      	b.n	12ea4 <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   12fbc:	f7fe fe64 	bl	11c88 <_usb_d_dev_in_next>
	return ERR_NONE;
   12fc0:	2000      	movs	r0, #0
   12fc2:	e77a      	b.n	12eba <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   12fc4:	f06f 0012 	mvn.w	r0, #18
   12fc8:	e777      	b.n	12eba <_usb_d_dev_ep_trans+0x82>
   12fca:	bf00      	nop
   12fcc:	20001fec 	.word	0x20001fec
   12fd0:	20031fff 	.word	0x20031fff

00012fd4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   12fd4:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12fd6:	f010 000f 	ands.w	r0, r0, #15
   12fda:	d117      	bne.n	1300c <_usb_d_dev_ep_abort+0x38>
{
   12fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12fde:	0081      	lsls	r1, r0, #2
   12fe0:	4d27      	ldr	r5, [pc, #156]	; (13080 <_usb_d_dev_ep_abort+0xac>)
   12fe2:	180a      	adds	r2, r1, r0
   12fe4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   12fe8:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12fea:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12fee:	2625      	movs	r6, #37	; 0x25
   12ff0:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12ff4:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12ff6:	f04f 064a 	mov.w	r6, #74	; 0x4a
   12ffa:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12ffe:	d003      	beq.n	13008 <_usb_d_dev_ep_abort+0x34>
   13000:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   13004:	0652      	lsls	r2, r2, #25
   13006:	d408      	bmi.n	1301a <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   13008:	b003      	add	sp, #12
   1300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1300c:	2b00      	cmp	r3, #0
   1300e:	bfb4      	ite	lt
   13010:	1c82      	addlt	r2, r0, #2
   13012:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   13014:	2802      	cmp	r0, #2
   13016:	d931      	bls.n	1307c <_usb_d_dev_ep_abort+0xa8>
   13018:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1301a:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1301e:	f102 0608 	add.w	r6, r2, #8
   13022:	0177      	lsls	r7, r6, #5
	if (dir) {
   13024:	2b00      	cmp	r3, #0
   13026:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   1302a:	bfb5      	itete	lt
   1302c:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13030:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13034:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13038:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   1303c:	af02      	add	r7, sp, #8
   1303e:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13042:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13044:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   13046:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13048:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1304c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13050:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   13054:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13058:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1305a:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1305e:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13062:	692d      	ldr	r5, [r5, #16]
   13064:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   13066:	f36f 1686 	bfc	r6, #6, #1
   1306a:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1306e:	4620      	mov	r0, r4
   13070:	2102      	movs	r1, #2
   13072:	462b      	mov	r3, r5
}
   13074:	b003      	add	sp, #12
   13076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1307a:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   1307c:	4610      	mov	r0, r2
   1307e:	e7ad      	b.n	12fdc <_usb_d_dev_ep_abort+0x8>
   13080:	20001fec 	.word	0x20001fec

00013084 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13084:	4b06      	ldr	r3, [pc, #24]	; (130a0 <_usb_d_dev_register_callback+0x1c>)
   13086:	2900      	cmp	r1, #0
   13088:	bf08      	it	eq
   1308a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   1308c:	2801      	cmp	r0, #1
   1308e:	d003      	beq.n	13098 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   13090:	b908      	cbnz	r0, 13096 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   13092:	4b04      	ldr	r3, [pc, #16]	; (130a4 <_usb_d_dev_register_callback+0x20>)
   13094:	6019      	str	r1, [r3, #0]
   13096:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   13098:	4b02      	ldr	r3, [pc, #8]	; (130a4 <_usb_d_dev_register_callback+0x20>)
   1309a:	6059      	str	r1, [r3, #4]
   1309c:	4770      	bx	lr
   1309e:	bf00      	nop
   130a0:	00011c85 	.word	0x00011c85
   130a4:	20001fec 	.word	0x20001fec

000130a8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   130a8:	4b08      	ldr	r3, [pc, #32]	; (130cc <_usb_d_dev_register_ep_callback+0x24>)
   130aa:	2900      	cmp	r1, #0
   130ac:	bf08      	it	eq
   130ae:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   130b0:	b130      	cbz	r0, 130c0 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   130b2:	2801      	cmp	r0, #1
   130b4:	d007      	beq.n	130c6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   130b6:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   130b8:	bf04      	itt	eq
   130ba:	4b05      	ldreq	r3, [pc, #20]	; (130d0 <_usb_d_dev_register_ep_callback+0x28>)
   130bc:	6119      	streq	r1, [r3, #16]
   130be:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   130c0:	4b03      	ldr	r3, [pc, #12]	; (130d0 <_usb_d_dev_register_ep_callback+0x28>)
   130c2:	6099      	str	r1, [r3, #8]
   130c4:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   130c6:	4b02      	ldr	r3, [pc, #8]	; (130d0 <_usb_d_dev_register_ep_callback+0x28>)
   130c8:	60d9      	str	r1, [r3, #12]
   130ca:	4770      	bx	lr
   130cc:	00011c85 	.word	0x00011c85
   130d0:	20001fec 	.word	0x20001fec

000130d4 <USB_0_Handler>:
   130d4:	f7fe bf8e 	b.w	11ff4 <_usb_d_dev_handler>

000130d8 <USB_1_Handler>:
   130d8:	f7fe bf8c 	b.w	11ff4 <_usb_d_dev_handler>

000130dc <USB_2_Handler>:
   130dc:	f7fe bf8a 	b.w	11ff4 <_usb_d_dev_handler>

000130e0 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   130e0:	f7fe bf88 	b.w	11ff4 <_usb_d_dev_handler>

000130e4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   130e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   130e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   130ea:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   130ec:	f3bf 8f5f 	dmb	sy
   130f0:	4770      	bx	lr
   130f2:	bf00      	nop

000130f4 <atomic_leave_critical>:
   130f4:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   130f8:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   130fa:	f383 8810 	msr	PRIMASK, r3
   130fe:	4770      	bx	lr

00013100 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13100:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   13102:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   13104:	2b08      	cmp	r3, #8
   13106:	d810      	bhi.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13108:	e8df f003 	tbb	[pc, r3]
   1310c:	604d3b25 	.word	0x604d3b25
   13110:	05a18a74 	.word	0x05a18a74
   13114:	11          	.byte	0x11
   13115:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   13116:	8903      	ldrh	r3, [r0, #8]
   13118:	3b01      	subs	r3, #1
   1311a:	b29b      	uxth	r3, r3
   1311c:	8103      	strh	r3, [r0, #8]
   1311e:	b923      	cbnz	r3, 1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13120:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   13122:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   13124:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   13126:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13128:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   1312a:	bc30      	pop	{r4, r5}
   1312c:	4770      	bx	lr
            if (--m_timer) {
   1312e:	8903      	ldrh	r3, [r0, #8]
   13130:	3b01      	subs	r3, #1
   13132:	b29b      	uxth	r3, r3
   13134:	8103      	strh	r3, [r0, #8]
   13136:	2b00      	cmp	r3, #0
   13138:	d1f7      	bne.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   1313a:	8981      	ldrh	r1, [r0, #12]
   1313c:	3901      	subs	r1, #1
   1313e:	b289      	uxth	r1, r1
   13140:	8181      	strh	r1, [r0, #12]
   13142:	2900      	cmp	r1, #0
   13144:	f000 80b3 	beq.w	132ae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13148:	8a43      	ldrh	r3, [r0, #18]
   1314a:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   1314c:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   1314e:	2307      	movs	r3, #7
                m_ledOn = true;
   13150:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   13152:	7143      	strb	r3, [r0, #5]
                break;
   13154:	e7e9      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   13156:	7801      	ldrb	r1, [r0, #0]
   13158:	2900      	cmp	r1, #0
   1315a:	f040 8089 	bne.w	13270 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   1315e:	7841      	ldrb	r1, [r0, #1]
   13160:	2900      	cmp	r1, #0
   13162:	f040 80cb 	bne.w	132fc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   13166:	7883      	ldrb	r3, [r0, #2]
   13168:	2b00      	cmp	r3, #0
   1316a:	f040 811a 	bne.w	133a2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   1316e:	78c3      	ldrb	r3, [r0, #3]
   13170:	2b00      	cmp	r3, #0
   13172:	f040 8118 	bne.w	133a6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   13176:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13178:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   1317a:	2b00      	cmp	r3, #0
   1317c:	d0d5      	beq.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   1317e:	5d41      	ldrb	r1, [r0, r5]
   13180:	e077      	b.n	13272 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   13182:	8903      	ldrh	r3, [r0, #8]
   13184:	3b01      	subs	r3, #1
   13186:	b29b      	uxth	r3, r3
   13188:	8103      	strh	r3, [r0, #8]
   1318a:	2b00      	cmp	r3, #0
   1318c:	d1cd      	bne.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1318e:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   13190:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   13192:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   13194:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13196:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   13198:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1319a:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   1319e:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   131a0:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   131a2:	8143      	strh	r3, [r0, #10]
            break;
   131a4:	e7c1      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   131a6:	8903      	ldrh	r3, [r0, #8]
   131a8:	3b01      	subs	r3, #1
   131aa:	b29b      	uxth	r3, r3
   131ac:	8103      	strh	r3, [r0, #8]
   131ae:	2b00      	cmp	r3, #0
   131b0:	d1bb      	bne.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   131b2:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   131b4:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   131b6:	3b01      	subs	r3, #1
   131b8:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   131ba:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   131be:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   131c0:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   131c2:	2b00      	cmp	r3, #0
   131c4:	d06d      	beq.n	132a2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   131c6:	8a03      	ldrh	r3, [r0, #16]
   131c8:	8103      	strh	r3, [r0, #8]
                break;
   131ca:	e7ae      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   131cc:	8903      	ldrh	r3, [r0, #8]
   131ce:	3b01      	subs	r3, #1
   131d0:	b29b      	uxth	r3, r3
   131d2:	8103      	strh	r3, [r0, #8]
   131d4:	2b00      	cmp	r3, #0
   131d6:	d1a8      	bne.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   131d8:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   131da:	8a01      	ldrh	r1, [r0, #16]
   131dc:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   131de:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   131e0:	3201      	adds	r2, #1
            m_ledOn = true;
   131e2:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   131e4:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   131e6:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   131ea:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   131ec:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   131ee:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   131f0:	8143      	strh	r3, [r0, #10]
            break;
   131f2:	e79a      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   131f4:	8903      	ldrh	r3, [r0, #8]
   131f6:	3b01      	subs	r3, #1
   131f8:	b29b      	uxth	r3, r3
   131fa:	8103      	strh	r3, [r0, #8]
   131fc:	2b00      	cmp	r3, #0
   131fe:	d194      	bne.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13200:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13202:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13204:	3b01      	subs	r3, #1
   13206:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13208:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   1320c:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1320e:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13210:	2b00      	cmp	r3, #0
   13212:	d1d8      	bne.n	131c6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   13214:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   13216:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13218:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   1321a:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   1321c:	7143      	strb	r3, [r0, #5]
            break;
   1321e:	e784      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13220:	8903      	ldrh	r3, [r0, #8]
   13222:	3b01      	subs	r3, #1
   13224:	b29b      	uxth	r3, r3
   13226:	8103      	strh	r3, [r0, #8]
   13228:	2b00      	cmp	r3, #0
   1322a:	f47f af7e 	bne.w	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   1322e:	8983      	ldrh	r3, [r0, #12]
   13230:	3b01      	subs	r3, #1
   13232:	b29b      	uxth	r3, r3
   13234:	8183      	strh	r3, [r0, #12]
   13236:	b373      	cbz	r3, 13296 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13238:	8a02      	ldrh	r2, [r0, #16]
   1323a:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   1323c:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   1323e:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13240:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13242:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   13246:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13248:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1324a:	8143      	strh	r3, [r0, #10]
                break;
   1324c:	e76d      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1324e:	8903      	ldrh	r3, [r0, #8]
   13250:	3b01      	subs	r3, #1
   13252:	b29b      	uxth	r3, r3
   13254:	8103      	strh	r3, [r0, #8]
   13256:	2b00      	cmp	r3, #0
   13258:	f47f af67 	bne.w	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   1325c:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   1325e:	8a42      	ldrh	r2, [r0, #18]
   13260:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   13262:	3301      	adds	r3, #1
            m_ledOn = true;
   13264:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   13266:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   13268:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   1326a:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   1326c:	7142      	strb	r2, [r0, #5]
            break;
   1326e:	e75c      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   13270:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   13272:	f011 0301 	ands.w	r3, r1, #1
   13276:	d149      	bne.n	1330c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   13278:	3301      	adds	r3, #1
   1327a:	b2db      	uxtb	r3, r3
   1327c:	fa41 f203 	asr.w	r2, r1, r3
   13280:	07d4      	lsls	r4, r2, #31
   13282:	d5f9      	bpl.n	13278 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   13284:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   13286:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   13288:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   1328a:	2201      	movs	r2, #1
    m_currentCode = code;
   1328c:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   1328e:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   13290:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   13292:	7142      	strb	r2, [r0, #5]
            break;
   13294:	e749      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   13296:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   13298:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   1329a:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   1329c:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   1329e:	7143      	strb	r3, [r0, #5]
            break;
   132a0:	e743      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   132a2:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   132a4:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   132a6:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   132a8:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   132aa:	7143      	strb	r3, [r0, #5]
            break;
   132ac:	e73d      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   132ae:	7983      	ldrb	r3, [r0, #6]
   132b0:	79c2      	ldrb	r2, [r0, #7]
   132b2:	3301      	adds	r3, #1
   132b4:	b2db      	uxtb	r3, r3
    if (code > 7) {
   132b6:	2b07      	cmp	r3, #7
        group++;
   132b8:	bf85      	ittet	hi
   132ba:	3201      	addhi	r2, #1
   132bc:	b2d2      	uxtbhi	r2, r2
   132be:	4619      	movls	r1, r3
        code = 0;
   132c0:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   132c2:	2a04      	cmp	r2, #4
   132c4:	4615      	mov	r5, r2
   132c6:	dd1b      	ble.n	13300 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   132c8:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   132ca:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   132cc:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   132d0:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   132d2:	d01d      	beq.n	13310 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   132d4:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   132d6:	07e9      	lsls	r1, r5, #31
   132d8:	d452      	bmi.n	13380 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   132da:	2501      	movs	r5, #1
   132dc:	3301      	adds	r3, #1
   132de:	b2db      	uxtb	r3, r3
   132e0:	fa44 f103 	asr.w	r1, r4, r3
   132e4:	07c9      	lsls	r1, r1, #31
   132e6:	d5f9      	bpl.n	132dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   132e8:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   132ea:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   132ec:	2d00      	cmp	r5, #0
   132ee:	d149      	bne.n	13384 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   132f0:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   132f2:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   132f4:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   132f6:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   132f8:	7143      	strb	r3, [r0, #5]
}
   132fa:	e716      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   132fc:	2501      	movs	r5, #1
   132fe:	e7b8      	b.n	13272 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13300:	5c84      	ldrb	r4, [r0, r2]
   13302:	fa54 f101 	asrs.w	r1, r4, r1
   13306:	d029      	beq.n	1335c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13308:	7bc5      	ldrb	r5, [r0, #15]
   1330a:	e7eb      	b.n	132e4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   1330c:	2300      	movs	r3, #0
   1330e:	e7b9      	b.n	13284 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13310:	7843      	ldrb	r3, [r0, #1]
   13312:	bb83      	cbnz	r3, 13376 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13314:	2102      	movs	r1, #2
   13316:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13318:	5cc3      	ldrb	r3, [r0, r3]
   1331a:	2b00      	cmp	r3, #0
   1331c:	d145      	bne.n	133aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1331e:	1c4a      	adds	r2, r1, #1
   13320:	b2d2      	uxtb	r2, r2
   13322:	2a05      	cmp	r2, #5
   13324:	d00d      	beq.n	13342 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13326:	5c83      	ldrb	r3, [r0, r2]
   13328:	bb2b      	cbnz	r3, 13376 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1332a:	1c8a      	adds	r2, r1, #2
   1332c:	b2d2      	uxtb	r2, r2
   1332e:	2a05      	cmp	r2, #5
   13330:	d007      	beq.n	13342 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13332:	5c83      	ldrb	r3, [r0, r2]
   13334:	b9fb      	cbnz	r3, 13376 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13336:	1ccb      	adds	r3, r1, #3
   13338:	b2db      	uxtb	r3, r3
   1333a:	2b05      	cmp	r3, #5
   1333c:	d001      	beq.n	13342 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1333e:	5cc3      	ldrb	r3, [r0, r3]
   13340:	b9c3      	cbnz	r3, 13374 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   13342:	7802      	ldrb	r2, [r0, #0]
   13344:	b112      	cbz	r2, 1334c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   13346:	e024      	b.n	13392 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13348:	5c83      	ldrb	r3, [r0, r2]
   1334a:	bb23      	cbnz	r3, 13396 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   1334c:	3201      	adds	r2, #1
   1334e:	b2d2      	uxtb	r2, r2
   13350:	42aa      	cmp	r2, r5
   13352:	ddf9      	ble.n	13348 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   13354:	2300      	movs	r3, #0
   13356:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   13358:	7143      	strb	r3, [r0, #5]
   1335a:	e6e6      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1335c:	3201      	adds	r2, #1
   1335e:	b2d2      	uxtb	r2, r2
   13360:	2a04      	cmp	r2, #4
   13362:	d8ee      	bhi.n	13342 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13364:	5c83      	ldrb	r3, [r0, r2]
   13366:	b933      	cbnz	r3, 13376 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13368:	1ca9      	adds	r1, r5, #2
   1336a:	b2c9      	uxtb	r1, r1
   1336c:	2905      	cmp	r1, #5
   1336e:	460b      	mov	r3, r1
   13370:	d1d2      	bne.n	13318 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   13372:	e7e6      	b.n	13342 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13374:	2204      	movs	r2, #4
   13376:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13378:	461c      	mov	r4, r3
   1337a:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   1337c:	2300      	movs	r3, #0
   1337e:	e7b1      	b.n	132e4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   13380:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13382:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   13384:	8a83      	ldrh	r3, [r0, #20]
   13386:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   13388:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   1338a:	2301      	movs	r3, #1
                m_ledOn = false;
   1338c:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   1338e:	7143      	strb	r3, [r0, #5]
   13390:	e6cb      	b.n	1312a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   13392:	4613      	mov	r3, r2
   13394:	2200      	movs	r2, #0
   13396:	461d      	mov	r5, r3
            m_patternWrap = true;
   13398:	2301      	movs	r3, #1
   1339a:	73c3      	strb	r3, [r0, #15]
   1339c:	462c      	mov	r4, r5
        code = 0;
   1339e:	2300      	movs	r3, #0
   133a0:	e799      	b.n	132d6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   133a2:	2502      	movs	r5, #2
   133a4:	e6eb      	b.n	1317e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   133a6:	2503      	movs	r5, #3
   133a8:	e6e9      	b.n	1317e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   133aa:	460a      	mov	r2, r1
   133ac:	e7e3      	b.n	13376 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   133ae:	bf00      	nop

000133b0 <arm_sin_q15>:
   133b0:	0982      	lsrs	r2, r0, #6
   133b2:	490c      	ldr	r1, [pc, #48]	; (133e4 <arm_sin_q15+0x34>)
   133b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   133b8:	0240      	lsls	r0, r0, #9
   133ba:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   133be:	b410      	push	{r4}
   133c0:	3201      	adds	r2, #1
   133c2:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   133c6:	fb03 f304 	mul.w	r3, r3, r4
   133ca:	0c1b      	lsrs	r3, r3, #16
   133cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   133d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   133d4:	041b      	lsls	r3, r3, #16
   133d6:	fb10 3002 	smlabb	r0, r0, r2, r3
   133da:	f340 30cf 	sbfx	r0, r0, #15, #16
   133de:	f020 0001 	bic.w	r0, r0, #1
   133e2:	4770      	bx	lr
   133e4:	0002360c 	.word	0x0002360c

000133e8 <_Znwj>:
   133e8:	b510      	push	{r4, lr}
   133ea:	2800      	cmp	r0, #0
   133ec:	bf14      	ite	ne
   133ee:	4604      	movne	r4, r0
   133f0:	2401      	moveq	r4, #1
   133f2:	4620      	mov	r0, r4
   133f4:	f00a fc26 	bl	1dc44 <malloc>
   133f8:	b100      	cbz	r0, 133fc <_Znwj+0x14>
   133fa:	bd10      	pop	{r4, pc}
   133fc:	f000 f9c8 	bl	13790 <_ZSt15get_new_handlerv>
   13400:	b108      	cbz	r0, 13406 <_Znwj+0x1e>
   13402:	4780      	blx	r0
   13404:	e7f5      	b.n	133f2 <_Znwj+0xa>
   13406:	2004      	movs	r0, #4
   13408:	f000 f8a2 	bl	13550 <__cxa_allocate_exception>
   1340c:	4b02      	ldr	r3, [pc, #8]	; (13418 <_Znwj+0x30>)
   1340e:	6003      	str	r3, [r0, #0]
   13410:	4a02      	ldr	r2, [pc, #8]	; (1341c <_Znwj+0x34>)
   13412:	4903      	ldr	r1, [pc, #12]	; (13420 <_Znwj+0x38>)
   13414:	f000 f946 	bl	136a4 <__cxa_throw>
   13418:	00023a60 	.word	0x00023a60
   1341c:	00013441 	.word	0x00013441
   13420:	00023a3c 	.word	0x00023a3c

00013424 <__cxa_pure_virtual>:
   13424:	b508      	push	{r3, lr}
   13426:	221b      	movs	r2, #27
   13428:	4902      	ldr	r1, [pc, #8]	; (13434 <__cxa_pure_virtual+0x10>)
   1342a:	2002      	movs	r0, #2
   1342c:	f00c ffb2 	bl	20394 <write>
   13430:	f000 f8ee 	bl	13610 <_ZSt9terminatev>
   13434:	00023a10 	.word	0x00023a10

00013438 <_ZNKSt9bad_alloc4whatEv>:
   13438:	4800      	ldr	r0, [pc, #0]	; (1343c <_ZNKSt9bad_alloc4whatEv+0x4>)
   1343a:	4770      	bx	lr
   1343c:	00023a2c 	.word	0x00023a2c

00013440 <_ZNSt9bad_allocD1Ev>:
   13440:	b510      	push	{r4, lr}
   13442:	4b03      	ldr	r3, [pc, #12]	; (13450 <_ZNSt9bad_allocD1Ev+0x10>)
   13444:	6003      	str	r3, [r0, #0]
   13446:	4604      	mov	r4, r0
   13448:	f000 f8be 	bl	135c8 <_ZNSt9exceptionD1Ev>
   1344c:	4620      	mov	r0, r4
   1344e:	bd10      	pop	{r4, pc}
   13450:	00023a60 	.word	0x00023a60

00013454 <_ZNSt9bad_allocD0Ev>:
   13454:	b510      	push	{r4, lr}
   13456:	4b05      	ldr	r3, [pc, #20]	; (1346c <_ZNSt9bad_allocD0Ev+0x18>)
   13458:	6003      	str	r3, [r0, #0]
   1345a:	4604      	mov	r4, r0
   1345c:	f000 f8b4 	bl	135c8 <_ZNSt9exceptionD1Ev>
   13460:	4620      	mov	r0, r4
   13462:	2104      	movs	r1, #4
   13464:	f000 f804 	bl	13470 <_ZdlPvj>
   13468:	4620      	mov	r0, r4
   1346a:	bd10      	pop	{r4, pc}
   1346c:	00023a60 	.word	0x00023a60

00013470 <_ZdlPvj>:
   13470:	f000 bac0 	b.w	139f4 <_ZdlPv>

00013474 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   13474:	b4f0      	push	{r4, r5, r6, r7}
   13476:	4c1b      	ldr	r4, [pc, #108]	; (134e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13478:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1347c:	6861      	ldr	r1, [r4, #4]
   1347e:	f1a0 0608 	sub.w	r6, r0, #8
   13482:	b1c9      	cbz	r1, 134b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   13484:	19f5      	adds	r5, r6, r7
   13486:	42a9      	cmp	r1, r5
   13488:	d01b      	beq.n	134c2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   1348a:	684a      	ldr	r2, [r1, #4]
   1348c:	b32a      	cbz	r2, 134da <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1348e:	4295      	cmp	r5, r2
   13490:	d303      	bcc.n	1349a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   13492:	e022      	b.n	134da <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13494:	429d      	cmp	r5, r3
   13496:	d205      	bcs.n	134a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13498:	461a      	mov	r2, r3
   1349a:	6853      	ldr	r3, [r2, #4]
   1349c:	1d0c      	adds	r4, r1, #4
   1349e:	4611      	mov	r1, r2
   134a0:	2b00      	cmp	r3, #0
   134a2:	d1f7      	bne.n	13494 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   134a4:	6811      	ldr	r1, [r2, #0]
   134a6:	1855      	adds	r5, r2, r1
   134a8:	42ae      	cmp	r6, r5
   134aa:	d013      	beq.n	134d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   134ac:	f840 3c04 	str.w	r3, [r0, #-4]
   134b0:	6823      	ldr	r3, [r4, #0]
   134b2:	605e      	str	r6, [r3, #4]
   134b4:	bcf0      	pop	{r4, r5, r6, r7}
   134b6:	4770      	bx	lr
   134b8:	f840 1c04 	str.w	r1, [r0, #-4]
   134bc:	6066      	str	r6, [r4, #4]
   134be:	bcf0      	pop	{r4, r5, r6, r7}
   134c0:	4770      	bx	lr
   134c2:	680b      	ldr	r3, [r1, #0]
   134c4:	684a      	ldr	r2, [r1, #4]
   134c6:	f840 2c04 	str.w	r2, [r0, #-4]
   134ca:	441f      	add	r7, r3
   134cc:	f840 7c08 	str.w	r7, [r0, #-8]
   134d0:	6066      	str	r6, [r4, #4]
   134d2:	e7ef      	b.n	134b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   134d4:	440f      	add	r7, r1
   134d6:	6017      	str	r7, [r2, #0]
   134d8:	e7ec      	b.n	134b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   134da:	4613      	mov	r3, r2
   134dc:	3404      	adds	r4, #4
   134de:	460a      	mov	r2, r1
   134e0:	e7e0      	b.n	134a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   134e2:	bf00      	nop
   134e4:	2000227c 	.word	0x2000227c

000134e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   134e8:	b430      	push	{r4, r5}
   134ea:	4c18      	ldr	r4, [pc, #96]	; (1354c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   134ec:	f100 0108 	add.w	r1, r0, #8
   134f0:	6863      	ldr	r3, [r4, #4]
   134f2:	2908      	cmp	r1, #8
   134f4:	bf38      	it	cc
   134f6:	2108      	movcc	r1, #8
   134f8:	b313      	cbz	r3, 13540 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   134fa:	3107      	adds	r1, #7
   134fc:	681a      	ldr	r2, [r3, #0]
   134fe:	f021 0107 	bic.w	r1, r1, #7
   13502:	4291      	cmp	r1, r2
   13504:	d804      	bhi.n	13510 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   13506:	e01d      	b.n	13544 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13508:	6802      	ldr	r2, [r0, #0]
   1350a:	4291      	cmp	r1, r2
   1350c:	d905      	bls.n	1351a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   1350e:	4603      	mov	r3, r0
   13510:	6858      	ldr	r0, [r3, #4]
   13512:	2800      	cmp	r0, #0
   13514:	d1f8      	bne.n	13508 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   13516:	bc30      	pop	{r4, r5}
   13518:	4770      	bx	lr
   1351a:	3304      	adds	r3, #4
   1351c:	1a52      	subs	r2, r2, r1
   1351e:	2a07      	cmp	r2, #7
   13520:	d90a      	bls.n	13538 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   13522:	1845      	adds	r5, r0, r1
   13524:	6844      	ldr	r4, [r0, #4]
   13526:	606c      	str	r4, [r5, #4]
   13528:	681c      	ldr	r4, [r3, #0]
   1352a:	5042      	str	r2, [r0, r1]
   1352c:	6021      	str	r1, [r4, #0]
   1352e:	601d      	str	r5, [r3, #0]
   13530:	f104 0008 	add.w	r0, r4, #8
   13534:	bc30      	pop	{r4, r5}
   13536:	4770      	bx	lr
   13538:	6842      	ldr	r2, [r0, #4]
   1353a:	601a      	str	r2, [r3, #0]
   1353c:	4604      	mov	r4, r0
   1353e:	e7f7      	b.n	13530 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13540:	4618      	mov	r0, r3
   13542:	e7e8      	b.n	13516 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   13544:	4618      	mov	r0, r3
   13546:	1d23      	adds	r3, r4, #4
   13548:	e7e8      	b.n	1351c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   1354a:	bf00      	nop
   1354c:	2000227c 	.word	0x2000227c

00013550 <__cxa_allocate_exception>:
   13550:	b538      	push	{r3, r4, r5, lr}
   13552:	f100 0580 	add.w	r5, r0, #128	; 0x80
   13556:	4628      	mov	r0, r5
   13558:	f00a fb74 	bl	1dc44 <malloc>
   1355c:	4604      	mov	r4, r0
   1355e:	b138      	cbz	r0, 13570 <__cxa_allocate_exception+0x20>
   13560:	2280      	movs	r2, #128	; 0x80
   13562:	2100      	movs	r1, #0
   13564:	4620      	mov	r0, r4
   13566:	f00a ffc1 	bl	1e4ec <memset>
   1356a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   1356e:	bd38      	pop	{r3, r4, r5, pc}
   13570:	4628      	mov	r0, r5
   13572:	f7ff ffb9 	bl	134e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   13576:	4604      	mov	r4, r0
   13578:	2800      	cmp	r0, #0
   1357a:	d1f1      	bne.n	13560 <__cxa_allocate_exception+0x10>
   1357c:	f000 f848 	bl	13610 <_ZSt9terminatev>

00013580 <__cxa_free_exception>:
   13580:	4a06      	ldr	r2, [pc, #24]	; (1359c <__cxa_free_exception+0x1c>)
   13582:	6893      	ldr	r3, [r2, #8]
   13584:	3880      	subs	r0, #128	; 0x80
   13586:	4298      	cmp	r0, r3
   13588:	d905      	bls.n	13596 <__cxa_free_exception+0x16>
   1358a:	68d2      	ldr	r2, [r2, #12]
   1358c:	4413      	add	r3, r2
   1358e:	4298      	cmp	r0, r3
   13590:	d201      	bcs.n	13596 <__cxa_free_exception+0x16>
   13592:	f7ff bf6f 	b.w	13474 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   13596:	f00a bb5d 	b.w	1dc54 <free>
   1359a:	bf00      	nop
   1359c:	2000227c 	.word	0x2000227c

000135a0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   135a0:	b538      	push	{r3, r4, r5, lr}
   135a2:	4c08      	ldr	r4, [pc, #32]	; (135c4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   135a4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   135a8:	4628      	mov	r0, r5
   135aa:	60e5      	str	r5, [r4, #12]
   135ac:	f00a fb4a 	bl	1dc44 <malloc>
   135b0:	60a0      	str	r0, [r4, #8]
   135b2:	b120      	cbz	r0, 135be <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   135b4:	2300      	movs	r3, #0
   135b6:	6060      	str	r0, [r4, #4]
   135b8:	6005      	str	r5, [r0, #0]
   135ba:	6043      	str	r3, [r0, #4]
   135bc:	bd38      	pop	{r3, r4, r5, pc}
   135be:	60e0      	str	r0, [r4, #12]
   135c0:	6060      	str	r0, [r4, #4]
   135c2:	bd38      	pop	{r3, r4, r5, pc}
   135c4:	2000227c 	.word	0x2000227c

000135c8 <_ZNSt9exceptionD1Ev>:
   135c8:	4770      	bx	lr
   135ca:	bf00      	nop

000135cc <_ZNSt13bad_exceptionD1Ev>:
   135cc:	4770      	bx	lr
   135ce:	bf00      	nop

000135d0 <_ZGTtNKSt13bad_exception4whatEv>:
   135d0:	4800      	ldr	r0, [pc, #0]	; (135d4 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   135d2:	4770      	bx	lr
   135d4:	00023a6c 	.word	0x00023a6c

000135d8 <_ZNSt13bad_exceptionD0Ev>:
   135d8:	b510      	push	{r4, lr}
   135da:	2104      	movs	r1, #4
   135dc:	4604      	mov	r4, r0
   135de:	f7ff ff47 	bl	13470 <_ZdlPvj>
   135e2:	4620      	mov	r0, r4
   135e4:	bd10      	pop	{r4, pc}
   135e6:	bf00      	nop

000135e8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   135e8:	b508      	push	{r3, lr}
   135ea:	4780      	blx	r0
   135ec:	f00a f896 	bl	1d71c <abort>
   135f0:	f000 fb6c 	bl	13ccc <__cxa_begin_catch>
   135f4:	f00a f892 	bl	1d71c <abort>
   135f8:	460d      	mov	r5, r1
   135fa:	4604      	mov	r4, r0
   135fc:	f000 fba4 	bl	13d48 <__cxa_end_catch>
   13600:	3501      	adds	r5, #1
   13602:	d001      	beq.n	13608 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   13604:	f000 f9f8 	bl	139f8 <__cxa_end_cleanup>
   13608:	4620      	mov	r0, r4
   1360a:	f000 faef 	bl	13bec <__cxa_call_unexpected>
   1360e:	bf00      	nop

00013610 <_ZSt9terminatev>:
   13610:	b508      	push	{r3, lr}
   13612:	4b03      	ldr	r3, [pc, #12]	; (13620 <_ZSt9terminatev+0x10>)
   13614:	6818      	ldr	r0, [r3, #0]
   13616:	f3bf 8f5b 	dmb	ish
   1361a:	f7ff ffe5 	bl	135e8 <_ZN10__cxxabiv111__terminateEPFvvE>
   1361e:	bf00      	nop
   13620:	200000f0 	.word	0x200000f0

00013624 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   13624:	b508      	push	{r3, lr}
   13626:	4780      	blx	r0
   13628:	f7ff fff2 	bl	13610 <_ZSt9terminatev>

0001362c <_ZSt10unexpectedv>:
   1362c:	b508      	push	{r3, lr}
   1362e:	4b03      	ldr	r3, [pc, #12]	; (1363c <_ZSt10unexpectedv+0x10>)
   13630:	6818      	ldr	r0, [r3, #0]
   13632:	f3bf 8f5b 	dmb	ish
   13636:	f7ff fff5 	bl	13624 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1363a:	bf00      	nop
   1363c:	200000ec 	.word	0x200000ec

00013640 <_ZSt13get_terminatev>:
   13640:	4b02      	ldr	r3, [pc, #8]	; (1364c <_ZSt13get_terminatev+0xc>)
   13642:	6818      	ldr	r0, [r3, #0]
   13644:	f3bf 8f5b 	dmb	ish
   13648:	4770      	bx	lr
   1364a:	bf00      	nop
   1364c:	200000f0 	.word	0x200000f0

00013650 <_ZSt14get_unexpectedv>:
   13650:	4b02      	ldr	r3, [pc, #8]	; (1365c <_ZSt14get_unexpectedv+0xc>)
   13652:	6818      	ldr	r0, [r3, #0]
   13654:	f3bf 8f5b 	dmb	ish
   13658:	4770      	bx	lr
   1365a:	bf00      	nop
   1365c:	200000ec 	.word	0x200000ec

00013660 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   13660:	2801      	cmp	r0, #1
   13662:	b510      	push	{r4, lr}
   13664:	d81a      	bhi.n	1369c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   13666:	f3bf 8f5b 	dmb	ish
   1366a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1366e:	e853 2f00 	ldrex	r2, [r3]
   13672:	3a01      	subs	r2, #1
   13674:	e843 2000 	strex	r0, r2, [r3]
   13678:	2800      	cmp	r0, #0
   1367a:	d1f8      	bne.n	1366e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   1367c:	f3bf 8f5b 	dmb	ish
   13680:	b95a      	cbnz	r2, 1369a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   13682:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   13686:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1368a:	b10b      	cbz	r3, 13690 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   1368c:	4620      	mov	r0, r4
   1368e:	4798      	blx	r3
   13690:	4620      	mov	r0, r4
   13692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13696:	f7ff bf73 	b.w	13580 <__cxa_free_exception>
   1369a:	bd10      	pop	{r4, pc}
   1369c:	f851 0c14 	ldr.w	r0, [r1, #-20]
   136a0:	f7ff ffa2 	bl	135e8 <_ZN10__cxxabiv111__terminateEPFvvE>

000136a4 <__cxa_throw>:
   136a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136a6:	4604      	mov	r4, r0
   136a8:	460f      	mov	r7, r1
   136aa:	4616      	mov	r6, r2
   136ac:	f000 fb96 	bl	13ddc <__cxa_get_globals>
   136b0:	6843      	ldr	r3, [r0, #4]
   136b2:	2501      	movs	r5, #1
   136b4:	442b      	add	r3, r5
   136b6:	6043      	str	r3, [r0, #4]
   136b8:	f844 7c78 	str.w	r7, [r4, #-120]
   136bc:	f844 6c74 	str.w	r6, [r4, #-116]
   136c0:	f844 5c80 	str.w	r5, [r4, #-128]
   136c4:	f7ff ffc4 	bl	13650 <_ZSt14get_unexpectedv>
   136c8:	f844 0c70 	str.w	r0, [r4, #-112]
   136cc:	f7ff ffb8 	bl	13640 <_ZSt13get_terminatev>
   136d0:	2347      	movs	r3, #71	; 0x47
   136d2:	2243      	movs	r2, #67	; 0x43
   136d4:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   136d8:	4910      	ldr	r1, [pc, #64]	; (1371c <__cxa_throw+0x78>)
   136da:	f804 3c58 	strb.w	r3, [r4, #-88]
   136de:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   136e2:	232b      	movs	r3, #43	; 0x2b
   136e4:	2755      	movs	r7, #85	; 0x55
   136e6:	2600      	movs	r6, #0
   136e8:	f844 0c6c 	str.w	r0, [r4, #-108]
   136ec:	f804 ec57 	strb.w	lr, [r4, #-87]
   136f0:	f844 1c50 	str.w	r1, [r4, #-80]
   136f4:	f804 2c55 	strb.w	r2, [r4, #-85]
   136f8:	f804 2c54 	strb.w	r2, [r4, #-84]
   136fc:	f804 3c53 	strb.w	r3, [r4, #-83]
   13700:	f804 3c52 	strb.w	r3, [r4, #-82]
   13704:	f804 7c56 	strb.w	r7, [r4, #-86]
   13708:	f804 6c51 	strb.w	r6, [r4, #-81]
   1370c:	4628      	mov	r0, r5
   1370e:	f009 fde9 	bl	1d2e4 <_Unwind_RaiseException>
   13712:	4628      	mov	r0, r5
   13714:	f000 fada 	bl	13ccc <__cxa_begin_catch>
   13718:	f7ff ff7a 	bl	13610 <_ZSt9terminatev>
   1371c:	00013661 	.word	0x00013661

00013720 <__cxa_rethrow>:
   13720:	b510      	push	{r4, lr}
   13722:	f000 fb5b 	bl	13ddc <__cxa_get_globals>
   13726:	6842      	ldr	r2, [r0, #4]
   13728:	6804      	ldr	r4, [r0, #0]
   1372a:	3201      	adds	r2, #1
   1372c:	6042      	str	r2, [r0, #4]
   1372e:	b164      	cbz	r4, 1374a <__cxa_rethrow+0x2a>
   13730:	f894 2020 	ldrb.w	r2, [r4, #32]
   13734:	2a47      	cmp	r2, #71	; 0x47
   13736:	d00a      	beq.n	1374e <__cxa_rethrow+0x2e>
   13738:	2200      	movs	r2, #0
   1373a:	6002      	str	r2, [r0, #0]
   1373c:	3420      	adds	r4, #32
   1373e:	4620      	mov	r0, r4
   13740:	f009 fdf4 	bl	1d32c <_Unwind_Resume_or_Rethrow>
   13744:	4620      	mov	r0, r4
   13746:	f000 fac1 	bl	13ccc <__cxa_begin_catch>
   1374a:	f7ff ff61 	bl	13610 <_ZSt9terminatev>
   1374e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13752:	2a4e      	cmp	r2, #78	; 0x4e
   13754:	d1f0      	bne.n	13738 <__cxa_rethrow+0x18>
   13756:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1375a:	2a55      	cmp	r2, #85	; 0x55
   1375c:	d1ec      	bne.n	13738 <__cxa_rethrow+0x18>
   1375e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   13762:	2a43      	cmp	r2, #67	; 0x43
   13764:	d1e8      	bne.n	13738 <__cxa_rethrow+0x18>
   13766:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1376a:	2a43      	cmp	r2, #67	; 0x43
   1376c:	d1e4      	bne.n	13738 <__cxa_rethrow+0x18>
   1376e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   13772:	2a2b      	cmp	r2, #43	; 0x2b
   13774:	d1e0      	bne.n	13738 <__cxa_rethrow+0x18>
   13776:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1377a:	2a2b      	cmp	r2, #43	; 0x2b
   1377c:	d1dc      	bne.n	13738 <__cxa_rethrow+0x18>
   1377e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   13782:	2a01      	cmp	r2, #1
   13784:	d8d8      	bhi.n	13738 <__cxa_rethrow+0x18>
   13786:	6962      	ldr	r2, [r4, #20]
   13788:	4252      	negs	r2, r2
   1378a:	6162      	str	r2, [r4, #20]
   1378c:	e7d6      	b.n	1373c <__cxa_rethrow+0x1c>
   1378e:	bf00      	nop

00013790 <_ZSt15get_new_handlerv>:
   13790:	4b02      	ldr	r3, [pc, #8]	; (1379c <_ZSt15get_new_handlerv+0xc>)
   13792:	6818      	ldr	r0, [r3, #0]
   13794:	f3bf 8f5b 	dmb	ish
   13798:	4770      	bx	lr
   1379a:	bf00      	nop
   1379c:	2000228c 	.word	0x2000228c

000137a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   137a0:	b510      	push	{r4, lr}
   137a2:	4b03      	ldr	r3, [pc, #12]	; (137b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   137a4:	6003      	str	r3, [r0, #0]
   137a6:	4604      	mov	r4, r0
   137a8:	f000 f8ca 	bl	13940 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   137ac:	4620      	mov	r0, r4
   137ae:	bd10      	pop	{r4, pc}
   137b0:	00023b5c 	.word	0x00023b5c

000137b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   137b4:	b510      	push	{r4, lr}
   137b6:	4b05      	ldr	r3, [pc, #20]	; (137cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   137b8:	6003      	str	r3, [r0, #0]
   137ba:	4604      	mov	r4, r0
   137bc:	f000 f8c0 	bl	13940 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   137c0:	4620      	mov	r0, r4
   137c2:	210c      	movs	r1, #12
   137c4:	f7ff fe54 	bl	13470 <_ZdlPvj>
   137c8:	4620      	mov	r0, r4
   137ca:	bd10      	pop	{r4, pc}
   137cc:	00023b5c 	.word	0x00023b5c

000137d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   137d0:	b570      	push	{r4, r5, r6, lr}
   137d2:	b082      	sub	sp, #8
   137d4:	460d      	mov	r5, r1
   137d6:	9c06      	ldr	r4, [sp, #24]
   137d8:	4294      	cmp	r4, r2
   137da:	4606      	mov	r6, r0
   137dc:	d009      	beq.n	137f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   137de:	68b0      	ldr	r0, [r6, #8]
   137e0:	6806      	ldr	r6, [r0, #0]
   137e2:	9406      	str	r4, [sp, #24]
   137e4:	6a34      	ldr	r4, [r6, #32]
   137e6:	4629      	mov	r1, r5
   137e8:	46a4      	mov	ip, r4
   137ea:	b002      	add	sp, #8
   137ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   137f0:	4760      	bx	ip
   137f2:	4619      	mov	r1, r3
   137f4:	9201      	str	r2, [sp, #4]
   137f6:	9300      	str	r3, [sp, #0]
   137f8:	f000 f86a 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   137fc:	9b00      	ldr	r3, [sp, #0]
   137fe:	9a01      	ldr	r2, [sp, #4]
   13800:	2800      	cmp	r0, #0
   13802:	d0ec      	beq.n	137de <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   13804:	2006      	movs	r0, #6
   13806:	b002      	add	sp, #8
   13808:	bd70      	pop	{r4, r5, r6, pc}
   1380a:	bf00      	nop

0001380c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13810:	b081      	sub	sp, #4
   13812:	460e      	mov	r6, r1
   13814:	4619      	mov	r1, r3
   13816:	461f      	mov	r7, r3
   13818:	4691      	mov	r9, r2
   1381a:	4683      	mov	fp, r0
   1381c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1381e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   13822:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13826:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13828:	f000 f852 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   1382c:	b170      	cbz	r0, 1384c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   1382e:	2e00      	cmp	r6, #0
   13830:	602c      	str	r4, [r5, #0]
   13832:	f885 9004 	strb.w	r9, [r5, #4]
   13836:	db1f      	blt.n	13878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13838:	4434      	add	r4, r6
   1383a:	45a0      	cmp	r8, r4
   1383c:	bf0c      	ite	eq
   1383e:	2406      	moveq	r4, #6
   13840:	2401      	movne	r4, #1
   13842:	71ac      	strb	r4, [r5, #6]
   13844:	2000      	movs	r0, #0
   13846:	b001      	add	sp, #4
   13848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1384c:	4544      	cmp	r4, r8
   1384e:	d018      	beq.n	13882 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13850:	f8db 0008 	ldr.w	r0, [fp, #8]
   13854:	f8d0 e000 	ldr.w	lr, [r0]
   13858:	950d      	str	r5, [sp, #52]	; 0x34
   1385a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1385e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   13862:	940a      	str	r4, [sp, #40]	; 0x28
   13864:	f8de 401c 	ldr.w	r4, [lr, #28]
   13868:	463b      	mov	r3, r7
   1386a:	464a      	mov	r2, r9
   1386c:	4631      	mov	r1, r6
   1386e:	46a4      	mov	ip, r4
   13870:	b001      	add	sp, #4
   13872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13876:	4760      	bx	ip
   13878:	3602      	adds	r6, #2
   1387a:	d1e3      	bne.n	13844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1387c:	2301      	movs	r3, #1
   1387e:	71ab      	strb	r3, [r5, #6]
   13880:	e7e0      	b.n	13844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13882:	4651      	mov	r1, sl
   13884:	4658      	mov	r0, fp
   13886:	f000 f823 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   1388a:	2800      	cmp	r0, #0
   1388c:	d0e0      	beq.n	13850 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1388e:	2000      	movs	r0, #0
   13890:	f885 9005 	strb.w	r9, [r5, #5]
   13894:	b001      	add	sp, #4
   13896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1389a:	bf00      	nop

0001389c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138a0:	4607      	mov	r7, r0
   138a2:	460c      	mov	r4, r1
   138a4:	4615      	mov	r5, r2
   138a6:	461e      	mov	r6, r3
   138a8:	f000 f862 	bl	13970 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   138ac:	b108      	cbz	r0, 138b2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   138ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138b2:	68b8      	ldr	r0, [r7, #8]
   138b4:	6807      	ldr	r7, [r0, #0]
   138b6:	4621      	mov	r1, r4
   138b8:	69bc      	ldr	r4, [r7, #24]
   138ba:	4633      	mov	r3, r6
   138bc:	462a      	mov	r2, r5
   138be:	46a4      	mov	ip, r4
   138c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   138c4:	4760      	bx	ip
   138c6:	bf00      	nop

000138c8 <_ZNSt9type_infoD1Ev>:
   138c8:	4770      	bx	lr
   138ca:	bf00      	nop

000138cc <_ZNKSt9type_info14__is_pointer_pEv>:
   138cc:	2000      	movs	r0, #0
   138ce:	4770      	bx	lr

000138d0 <_ZNKSt9type_infoeqERKS_>:
   138d0:	4281      	cmp	r1, r0
   138d2:	d011      	beq.n	138f8 <_ZNKSt9type_infoeqERKS_+0x28>
   138d4:	b508      	push	{r3, lr}
   138d6:	6840      	ldr	r0, [r0, #4]
   138d8:	7803      	ldrb	r3, [r0, #0]
   138da:	2b2a      	cmp	r3, #42	; 0x2a
   138dc:	d00a      	beq.n	138f4 <_ZNKSt9type_infoeqERKS_+0x24>
   138de:	6849      	ldr	r1, [r1, #4]
   138e0:	780b      	ldrb	r3, [r1, #0]
   138e2:	2b2a      	cmp	r3, #42	; 0x2a
   138e4:	bf08      	it	eq
   138e6:	3101      	addeq	r1, #1
   138e8:	f00b f8ce 	bl	1ea88 <strcmp>
   138ec:	fab0 f080 	clz	r0, r0
   138f0:	0940      	lsrs	r0, r0, #5
   138f2:	bd08      	pop	{r3, pc}
   138f4:	2000      	movs	r0, #0
   138f6:	bd08      	pop	{r3, pc}
   138f8:	2001      	movs	r0, #1
   138fa:	4770      	bx	lr

000138fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   138fc:	b570      	push	{r4, r5, r6, lr}
   138fe:	6803      	ldr	r3, [r0, #0]
   13900:	b084      	sub	sp, #16
   13902:	2400      	movs	r4, #0
   13904:	699e      	ldr	r6, [r3, #24]
   13906:	9400      	str	r4, [sp, #0]
   13908:	2310      	movs	r3, #16
   1390a:	4615      	mov	r5, r2
   1390c:	9302      	str	r3, [sp, #8]
   1390e:	6812      	ldr	r2, [r2, #0]
   13910:	f88d 4004 	strb.w	r4, [sp, #4]
   13914:	466b      	mov	r3, sp
   13916:	9403      	str	r4, [sp, #12]
   13918:	47b0      	blx	r6
   1391a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1391e:	f003 0306 	and.w	r3, r3, #6
   13922:	2b06      	cmp	r3, #6
   13924:	bf03      	ittte	eq
   13926:	9b00      	ldreq	r3, [sp, #0]
   13928:	602b      	streq	r3, [r5, #0]
   1392a:	2001      	moveq	r0, #1
   1392c:	4620      	movne	r0, r4
   1392e:	b004      	add	sp, #16
   13930:	bd70      	pop	{r4, r5, r6, pc}
   13932:	bf00      	nop

00013934 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13934:	9800      	ldr	r0, [sp, #0]
   13936:	4290      	cmp	r0, r2
   13938:	bf0c      	ite	eq
   1393a:	2006      	moveq	r0, #6
   1393c:	2001      	movne	r0, #1
   1393e:	4770      	bx	lr

00013940 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13940:	b510      	push	{r4, lr}
   13942:	4b03      	ldr	r3, [pc, #12]	; (13950 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   13944:	6003      	str	r3, [r0, #0]
   13946:	4604      	mov	r4, r0
   13948:	f7ff ffbe 	bl	138c8 <_ZNSt9type_infoD1Ev>
   1394c:	4620      	mov	r0, r4
   1394e:	bd10      	pop	{r4, pc}
   13950:	00023bd0 	.word	0x00023bd0

00013954 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   13954:	b510      	push	{r4, lr}
   13956:	4b05      	ldr	r3, [pc, #20]	; (1396c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13958:	6003      	str	r3, [r0, #0]
   1395a:	4604      	mov	r4, r0
   1395c:	f7ff ffb4 	bl	138c8 <_ZNSt9type_infoD1Ev>
   13960:	4620      	mov	r0, r4
   13962:	2108      	movs	r1, #8
   13964:	f7ff fd84 	bl	13470 <_ZdlPvj>
   13968:	4620      	mov	r0, r4
   1396a:	bd10      	pop	{r4, pc}
   1396c:	00023bd0 	.word	0x00023bd0

00013970 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13970:	b538      	push	{r3, r4, r5, lr}
   13972:	4615      	mov	r5, r2
   13974:	461c      	mov	r4, r3
   13976:	f7ff ffab 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   1397a:	b120      	cbz	r0, 13986 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   1397c:	2208      	movs	r2, #8
   1397e:	2306      	movs	r3, #6
   13980:	6025      	str	r5, [r4, #0]
   13982:	60e2      	str	r2, [r4, #12]
   13984:	7123      	strb	r3, [r4, #4]
   13986:	bd38      	pop	{r3, r4, r5, pc}

00013988 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1398c:	4617      	mov	r7, r2
   1398e:	461c      	mov	r4, r3
   13990:	4606      	mov	r6, r0
   13992:	460d      	mov	r5, r1
   13994:	f7ff ff9c 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   13998:	b908      	cbnz	r0, 1399e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1399a:	2c03      	cmp	r4, #3
   1399c:	d901      	bls.n	139a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   139a2:	682b      	ldr	r3, [r5, #0]
   139a4:	463a      	mov	r2, r7
   139a6:	4631      	mov	r1, r6
   139a8:	4628      	mov	r0, r5
   139aa:	695b      	ldr	r3, [r3, #20]
   139ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   139b0:	4718      	bx	r3
   139b2:	bf00      	nop

000139b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   139b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   139b6:	b083      	sub	sp, #12
   139b8:	4617      	mov	r7, r2
   139ba:	9d08      	ldr	r5, [sp, #32]
   139bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   139be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   139c0:	428d      	cmp	r5, r1
   139c2:	4606      	mov	r6, r0
   139c4:	d00b      	beq.n	139de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   139c6:	4619      	mov	r1, r3
   139c8:	4630      	mov	r0, r6
   139ca:	f7ff ff81 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   139ce:	b118      	cbz	r0, 139d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   139d0:	2301      	movs	r3, #1
   139d2:	6025      	str	r5, [r4, #0]
   139d4:	7127      	strb	r7, [r4, #4]
   139d6:	71a3      	strb	r3, [r4, #6]
   139d8:	2000      	movs	r0, #0
   139da:	b003      	add	sp, #12
   139dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139de:	9909      	ldr	r1, [sp, #36]	; 0x24
   139e0:	9301      	str	r3, [sp, #4]
   139e2:	f7ff ff75 	bl	138d0 <_ZNKSt9type_infoeqERKS_>
   139e6:	b118      	cbz	r0, 139f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   139e8:	2000      	movs	r0, #0
   139ea:	7167      	strb	r7, [r4, #5]
   139ec:	b003      	add	sp, #12
   139ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139f0:	9b01      	ldr	r3, [sp, #4]
   139f2:	e7e8      	b.n	139c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

000139f4 <_ZdlPv>:
   139f4:	f00a b92e 	b.w	1dc54 <free>

000139f8 <__cxa_end_cleanup>:
   139f8:	b41e      	push	{r1, r2, r3, r4}
   139fa:	f000 f891 	bl	13b20 <__gnu_end_cleanup>
   139fe:	bc1e      	pop	{r1, r2, r3, r4}
   13a00:	f009 fc82 	bl	1d308 <_Unwind_Resume>

00013a04 <__cxa_type_match>:
   13a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a06:	7802      	ldrb	r2, [r0, #0]
   13a08:	2a47      	cmp	r2, #71	; 0x47
   13a0a:	b083      	sub	sp, #12
   13a0c:	460d      	mov	r5, r1
   13a0e:	461f      	mov	r7, r3
   13a10:	d01e      	beq.n	13a50 <__cxa_type_match+0x4c>
   13a12:	2300      	movs	r3, #0
   13a14:	4c27      	ldr	r4, [pc, #156]	; (13ab4 <__cxa_type_match+0xb0>)
   13a16:	9301      	str	r3, [sp, #4]
   13a18:	6823      	ldr	r3, [r4, #0]
   13a1a:	4620      	mov	r0, r4
   13a1c:	689b      	ldr	r3, [r3, #8]
   13a1e:	4798      	blx	r3
   13a20:	b180      	cbz	r0, 13a44 <__cxa_type_match+0x40>
   13a22:	9b01      	ldr	r3, [sp, #4]
   13a24:	681b      	ldr	r3, [r3, #0]
   13a26:	9301      	str	r3, [sp, #4]
   13a28:	2602      	movs	r6, #2
   13a2a:	682b      	ldr	r3, [r5, #0]
   13a2c:	4621      	mov	r1, r4
   13a2e:	4628      	mov	r0, r5
   13a30:	691c      	ldr	r4, [r3, #16]
   13a32:	aa01      	add	r2, sp, #4
   13a34:	2301      	movs	r3, #1
   13a36:	47a0      	blx	r4
   13a38:	b130      	cbz	r0, 13a48 <__cxa_type_match+0x44>
   13a3a:	9b01      	ldr	r3, [sp, #4]
   13a3c:	603b      	str	r3, [r7, #0]
   13a3e:	4630      	mov	r0, r6
   13a40:	b003      	add	sp, #12
   13a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a44:	2601      	movs	r6, #1
   13a46:	e7f0      	b.n	13a2a <__cxa_type_match+0x26>
   13a48:	4606      	mov	r6, r0
   13a4a:	4630      	mov	r0, r6
   13a4c:	b003      	add	sp, #12
   13a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a50:	7843      	ldrb	r3, [r0, #1]
   13a52:	2b4e      	cmp	r3, #78	; 0x4e
   13a54:	d1dd      	bne.n	13a12 <__cxa_type_match+0xe>
   13a56:	7883      	ldrb	r3, [r0, #2]
   13a58:	2b55      	cmp	r3, #85	; 0x55
   13a5a:	d1da      	bne.n	13a12 <__cxa_type_match+0xe>
   13a5c:	78c3      	ldrb	r3, [r0, #3]
   13a5e:	2b43      	cmp	r3, #67	; 0x43
   13a60:	d019      	beq.n	13a96 <__cxa_type_match+0x92>
   13a62:	78c3      	ldrb	r3, [r0, #3]
   13a64:	2b43      	cmp	r3, #67	; 0x43
   13a66:	d1d4      	bne.n	13a12 <__cxa_type_match+0xe>
   13a68:	7903      	ldrb	r3, [r0, #4]
   13a6a:	2b43      	cmp	r3, #67	; 0x43
   13a6c:	d1d1      	bne.n	13a12 <__cxa_type_match+0xe>
   13a6e:	7943      	ldrb	r3, [r0, #5]
   13a70:	2b2b      	cmp	r3, #43	; 0x2b
   13a72:	d1ce      	bne.n	13a12 <__cxa_type_match+0xe>
   13a74:	7983      	ldrb	r3, [r0, #6]
   13a76:	2b2b      	cmp	r3, #43	; 0x2b
   13a78:	d1cb      	bne.n	13a12 <__cxa_type_match+0xe>
   13a7a:	79c3      	ldrb	r3, [r0, #7]
   13a7c:	2b01      	cmp	r3, #1
   13a7e:	d8c8      	bhi.n	13a12 <__cxa_type_match+0xe>
   13a80:	d004      	beq.n	13a8c <__cxa_type_match+0x88>
   13a82:	f850 4c20 	ldr.w	r4, [r0, #-32]
   13a86:	3058      	adds	r0, #88	; 0x58
   13a88:	9001      	str	r0, [sp, #4]
   13a8a:	e7c5      	b.n	13a18 <__cxa_type_match+0x14>
   13a8c:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13a90:	f850 4c78 	ldr.w	r4, [r0, #-120]
   13a94:	e7f8      	b.n	13a88 <__cxa_type_match+0x84>
   13a96:	7903      	ldrb	r3, [r0, #4]
   13a98:	2b46      	cmp	r3, #70	; 0x46
   13a9a:	d1e2      	bne.n	13a62 <__cxa_type_match+0x5e>
   13a9c:	7943      	ldrb	r3, [r0, #5]
   13a9e:	2b4f      	cmp	r3, #79	; 0x4f
   13aa0:	d1df      	bne.n	13a62 <__cxa_type_match+0x5e>
   13aa2:	7983      	ldrb	r3, [r0, #6]
   13aa4:	2b52      	cmp	r3, #82	; 0x52
   13aa6:	d1dc      	bne.n	13a62 <__cxa_type_match+0x5e>
   13aa8:	79c3      	ldrb	r3, [r0, #7]
   13aaa:	2b00      	cmp	r3, #0
   13aac:	d1d9      	bne.n	13a62 <__cxa_type_match+0x5e>
   13aae:	9301      	str	r3, [sp, #4]
   13ab0:	4c01      	ldr	r4, [pc, #4]	; (13ab8 <__cxa_type_match+0xb4>)
   13ab2:	e7b1      	b.n	13a18 <__cxa_type_match+0x14>
   13ab4:	00023a88 	.word	0x00023a88
   13ab8:	00023a80 	.word	0x00023a80

00013abc <__cxa_begin_cleanup>:
   13abc:	b510      	push	{r4, lr}
   13abe:	4604      	mov	r4, r0
   13ac0:	f000 f98c 	bl	13ddc <__cxa_get_globals>
   13ac4:	7823      	ldrb	r3, [r4, #0]
   13ac6:	2b47      	cmp	r3, #71	; 0x47
   13ac8:	f1a4 0220 	sub.w	r2, r4, #32
   13acc:	d004      	beq.n	13ad8 <__cxa_begin_cleanup+0x1c>
   13ace:	6883      	ldr	r3, [r0, #8]
   13ad0:	bb23      	cbnz	r3, 13b1c <__cxa_begin_cleanup+0x60>
   13ad2:	6082      	str	r2, [r0, #8]
   13ad4:	2001      	movs	r0, #1
   13ad6:	bd10      	pop	{r4, pc}
   13ad8:	7863      	ldrb	r3, [r4, #1]
   13ada:	2b4e      	cmp	r3, #78	; 0x4e
   13adc:	d1f7      	bne.n	13ace <__cxa_begin_cleanup+0x12>
   13ade:	78a3      	ldrb	r3, [r4, #2]
   13ae0:	2b55      	cmp	r3, #85	; 0x55
   13ae2:	d1f4      	bne.n	13ace <__cxa_begin_cleanup+0x12>
   13ae4:	78e3      	ldrb	r3, [r4, #3]
   13ae6:	2b43      	cmp	r3, #67	; 0x43
   13ae8:	d1f1      	bne.n	13ace <__cxa_begin_cleanup+0x12>
   13aea:	7923      	ldrb	r3, [r4, #4]
   13aec:	2b43      	cmp	r3, #67	; 0x43
   13aee:	d1ee      	bne.n	13ace <__cxa_begin_cleanup+0x12>
   13af0:	7963      	ldrb	r3, [r4, #5]
   13af2:	2b2b      	cmp	r3, #43	; 0x2b
   13af4:	d1eb      	bne.n	13ace <__cxa_begin_cleanup+0x12>
   13af6:	79a3      	ldrb	r3, [r4, #6]
   13af8:	2b2b      	cmp	r3, #43	; 0x2b
   13afa:	d1e8      	bne.n	13ace <__cxa_begin_cleanup+0x12>
   13afc:	79e3      	ldrb	r3, [r4, #7]
   13afe:	2b01      	cmp	r3, #1
   13b00:	d8e5      	bhi.n	13ace <__cxa_begin_cleanup+0x12>
   13b02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13b06:	3301      	adds	r3, #1
   13b08:	2b01      	cmp	r3, #1
   13b0a:	f844 3c04 	str.w	r3, [r4, #-4]
   13b0e:	d1e1      	bne.n	13ad4 <__cxa_begin_cleanup+0x18>
   13b10:	6883      	ldr	r3, [r0, #8]
   13b12:	f844 3c08 	str.w	r3, [r4, #-8]
   13b16:	6082      	str	r2, [r0, #8]
   13b18:	2001      	movs	r0, #1
   13b1a:	bd10      	pop	{r4, pc}
   13b1c:	f7ff fd78 	bl	13610 <_ZSt9terminatev>

00013b20 <__gnu_end_cleanup>:
   13b20:	b508      	push	{r3, lr}
   13b22:	f000 f95b 	bl	13ddc <__cxa_get_globals>
   13b26:	6883      	ldr	r3, [r0, #8]
   13b28:	b383      	cbz	r3, 13b8c <__gnu_end_cleanup+0x6c>
   13b2a:	f893 2020 	ldrb.w	r2, [r3, #32]
   13b2e:	2a47      	cmp	r2, #71	; 0x47
   13b30:	d004      	beq.n	13b3c <__gnu_end_cleanup+0x1c>
   13b32:	2200      	movs	r2, #0
   13b34:	6082      	str	r2, [r0, #8]
   13b36:	f103 0020 	add.w	r0, r3, #32
   13b3a:	bd08      	pop	{r3, pc}
   13b3c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13b40:	2a4e      	cmp	r2, #78	; 0x4e
   13b42:	d1f6      	bne.n	13b32 <__gnu_end_cleanup+0x12>
   13b44:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13b48:	2a55      	cmp	r2, #85	; 0x55
   13b4a:	d1f2      	bne.n	13b32 <__gnu_end_cleanup+0x12>
   13b4c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13b50:	2a43      	cmp	r2, #67	; 0x43
   13b52:	d1ee      	bne.n	13b32 <__gnu_end_cleanup+0x12>
   13b54:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13b58:	2a43      	cmp	r2, #67	; 0x43
   13b5a:	d1ea      	bne.n	13b32 <__gnu_end_cleanup+0x12>
   13b5c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13b60:	2a2b      	cmp	r2, #43	; 0x2b
   13b62:	d1e6      	bne.n	13b32 <__gnu_end_cleanup+0x12>
   13b64:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13b68:	2a2b      	cmp	r2, #43	; 0x2b
   13b6a:	d1e2      	bne.n	13b32 <__gnu_end_cleanup+0x12>
   13b6c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13b70:	2a01      	cmp	r2, #1
   13b72:	d8de      	bhi.n	13b32 <__gnu_end_cleanup+0x12>
   13b74:	69da      	ldr	r2, [r3, #28]
   13b76:	3a01      	subs	r2, #1
   13b78:	61da      	str	r2, [r3, #28]
   13b7a:	2a00      	cmp	r2, #0
   13b7c:	d1db      	bne.n	13b36 <__gnu_end_cleanup+0x16>
   13b7e:	699a      	ldr	r2, [r3, #24]
   13b80:	6082      	str	r2, [r0, #8]
   13b82:	2200      	movs	r2, #0
   13b84:	619a      	str	r2, [r3, #24]
   13b86:	f103 0020 	add.w	r0, r3, #32
   13b8a:	bd08      	pop	{r3, pc}
   13b8c:	f7ff fd40 	bl	13610 <_ZSt9terminatev>

00013b90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13b90:	7803      	ldrb	r3, [r0, #0]
   13b92:	2b47      	cmp	r3, #71	; 0x47
   13b94:	d001      	beq.n	13b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13b96:	2000      	movs	r0, #0
   13b98:	4770      	bx	lr
   13b9a:	7843      	ldrb	r3, [r0, #1]
   13b9c:	2b4e      	cmp	r3, #78	; 0x4e
   13b9e:	d1fa      	bne.n	13b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ba0:	7883      	ldrb	r3, [r0, #2]
   13ba2:	2b55      	cmp	r3, #85	; 0x55
   13ba4:	d1f7      	bne.n	13b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ba6:	78c3      	ldrb	r3, [r0, #3]
   13ba8:	2b43      	cmp	r3, #67	; 0x43
   13baa:	d1f4      	bne.n	13b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bac:	7903      	ldrb	r3, [r0, #4]
   13bae:	2b43      	cmp	r3, #67	; 0x43
   13bb0:	d1f1      	bne.n	13b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bb2:	7943      	ldrb	r3, [r0, #5]
   13bb4:	2b2b      	cmp	r3, #43	; 0x2b
   13bb6:	d1ee      	bne.n	13b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bb8:	7983      	ldrb	r3, [r0, #6]
   13bba:	2b2b      	cmp	r3, #43	; 0x2b
   13bbc:	d1eb      	bne.n	13b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bbe:	79c0      	ldrb	r0, [r0, #7]
   13bc0:	2801      	cmp	r0, #1
   13bc2:	bf8c      	ite	hi
   13bc4:	2000      	movhi	r0, #0
   13bc6:	2001      	movls	r0, #1
   13bc8:	4770      	bx	lr
   13bca:	bf00      	nop

00013bcc <__cxa_call_terminate>:
   13bcc:	b510      	push	{r4, lr}
   13bce:	b130      	cbz	r0, 13bde <__cxa_call_terminate+0x12>
   13bd0:	4604      	mov	r4, r0
   13bd2:	f000 f87b 	bl	13ccc <__cxa_begin_catch>
   13bd6:	4620      	mov	r0, r4
   13bd8:	f7ff ffda 	bl	13b90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13bdc:	b908      	cbnz	r0, 13be2 <__cxa_call_terminate+0x16>
   13bde:	f7ff fd17 	bl	13610 <_ZSt9terminatev>
   13be2:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13be6:	f7ff fcff 	bl	135e8 <_ZN10__cxxabiv111__terminateEPFvvE>
   13bea:	bf00      	nop

00013bec <__cxa_call_unexpected>:
   13bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bf0:	b085      	sub	sp, #20
   13bf2:	4602      	mov	r2, r0
   13bf4:	f7ff ffcc 	bl	13b90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13bf8:	b160      	cbz	r0, 13c14 <__cxa_call_unexpected+0x28>
   13bfa:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13bfe:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13c02:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13c04:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13c06:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13c08:	4610      	mov	r0, r2
   13c0a:	f000 f85f 	bl	13ccc <__cxa_begin_catch>
   13c0e:	4640      	mov	r0, r8
   13c10:	f7ff fd08 	bl	13624 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13c14:	4610      	mov	r0, r2
   13c16:	f000 f859 	bl	13ccc <__cxa_begin_catch>
   13c1a:	f7ff fd07 	bl	1362c <_ZSt10unexpectedv>
   13c1e:	f000 f855 	bl	13ccc <__cxa_begin_catch>
   13c22:	f7ff fcf5 	bl	13610 <_ZSt9terminatev>
   13c26:	f000 f851 	bl	13ccc <__cxa_begin_catch>
   13c2a:	f000 f8d3 	bl	13dd4 <__cxa_get_globals_fast>
   13c2e:	6803      	ldr	r3, [r0, #0]
   13c30:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13c34:	2a01      	cmp	r2, #1
   13c36:	d036      	beq.n	13ca6 <__cxa_call_unexpected+0xba>
   13c38:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13c3c:	f10d 0a10 	add.w	sl, sp, #16
   13c40:	f04f 0800 	mov.w	r8, #0
   13c44:	3320      	adds	r3, #32
   13c46:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13c4a:	f027 0b03 	bic.w	fp, r7, #3
   13c4e:	9301      	str	r3, [sp, #4]
   13c50:	46c1      	mov	r9, r8
   13c52:	45b1      	cmp	r9, r6
   13c54:	da1b      	bge.n	13c8e <__cxa_call_unexpected+0xa2>
   13c56:	6827      	ldr	r7, [r4, #0]
   13c58:	b107      	cbz	r7, 13c5c <__cxa_call_unexpected+0x70>
   13c5a:	4427      	add	r7, r4
   13c5c:	4653      	mov	r3, sl
   13c5e:	2200      	movs	r2, #0
   13c60:	4639      	mov	r1, r7
   13c62:	9801      	ldr	r0, [sp, #4]
   13c64:	f7ff fece 	bl	13a04 <__cxa_type_match>
   13c68:	bb10      	cbnz	r0, 13cb0 <__cxa_call_unexpected+0xc4>
   13c6a:	683b      	ldr	r3, [r7, #0]
   13c6c:	4914      	ldr	r1, [pc, #80]	; (13cc0 <__cxa_call_unexpected+0xd4>)
   13c6e:	691b      	ldr	r3, [r3, #16]
   13c70:	9300      	str	r3, [sp, #0]
   13c72:	aa04      	add	r2, sp, #16
   13c74:	2301      	movs	r3, #1
   13c76:	f842 0d04 	str.w	r0, [r2, #-4]!
   13c7a:	4638      	mov	r0, r7
   13c7c:	9f00      	ldr	r7, [sp, #0]
   13c7e:	47b8      	blx	r7
   13c80:	2800      	cmp	r0, #0
   13c82:	bf18      	it	ne
   13c84:	4680      	movne	r8, r0
   13c86:	f109 0901 	add.w	r9, r9, #1
   13c8a:	445c      	add	r4, fp
   13c8c:	e7e1      	b.n	13c52 <__cxa_call_unexpected+0x66>
   13c8e:	f1b8 0f00 	cmp.w	r8, #0
   13c92:	d00a      	beq.n	13caa <__cxa_call_unexpected+0xbe>
   13c94:	2004      	movs	r0, #4
   13c96:	f7ff fc5b 	bl	13550 <__cxa_allocate_exception>
   13c9a:	4b0a      	ldr	r3, [pc, #40]	; (13cc4 <__cxa_call_unexpected+0xd8>)
   13c9c:	6003      	str	r3, [r0, #0]
   13c9e:	4a0a      	ldr	r2, [pc, #40]	; (13cc8 <__cxa_call_unexpected+0xdc>)
   13ca0:	4907      	ldr	r1, [pc, #28]	; (13cc0 <__cxa_call_unexpected+0xd4>)
   13ca2:	f7ff fcff 	bl	136a4 <__cxa_throw>
   13ca6:	681a      	ldr	r2, [r3, #0]
   13ca8:	e7c8      	b.n	13c3c <__cxa_call_unexpected+0x50>
   13caa:	4628      	mov	r0, r5
   13cac:	f7ff fc9c 	bl	135e8 <_ZN10__cxxabiv111__terminateEPFvvE>
   13cb0:	f7ff fd36 	bl	13720 <__cxa_rethrow>
   13cb4:	f000 f848 	bl	13d48 <__cxa_end_catch>
   13cb8:	f000 f846 	bl	13d48 <__cxa_end_catch>
   13cbc:	f7ff fe9c 	bl	139f8 <__cxa_end_cleanup>
   13cc0:	00023a90 	.word	0x00023a90
   13cc4:	00023b14 	.word	0x00023b14
   13cc8:	000135cd 	.word	0x000135cd

00013ccc <__cxa_begin_catch>:
   13ccc:	b538      	push	{r3, r4, r5, lr}
   13cce:	4604      	mov	r4, r0
   13cd0:	f000 f884 	bl	13ddc <__cxa_get_globals>
   13cd4:	7822      	ldrb	r2, [r4, #0]
   13cd6:	6803      	ldr	r3, [r0, #0]
   13cd8:	2a47      	cmp	r2, #71	; 0x47
   13cda:	f1a4 0120 	sub.w	r1, r4, #32
   13cde:	d004      	beq.n	13cea <__cxa_begin_catch+0x1e>
   13ce0:	bb83      	cbnz	r3, 13d44 <__cxa_begin_catch+0x78>
   13ce2:	461c      	mov	r4, r3
   13ce4:	6001      	str	r1, [r0, #0]
   13ce6:	4620      	mov	r0, r4
   13ce8:	bd38      	pop	{r3, r4, r5, pc}
   13cea:	7862      	ldrb	r2, [r4, #1]
   13cec:	2a4e      	cmp	r2, #78	; 0x4e
   13cee:	d1f7      	bne.n	13ce0 <__cxa_begin_catch+0x14>
   13cf0:	78a2      	ldrb	r2, [r4, #2]
   13cf2:	2a55      	cmp	r2, #85	; 0x55
   13cf4:	d1f4      	bne.n	13ce0 <__cxa_begin_catch+0x14>
   13cf6:	78e2      	ldrb	r2, [r4, #3]
   13cf8:	2a43      	cmp	r2, #67	; 0x43
   13cfa:	d1f1      	bne.n	13ce0 <__cxa_begin_catch+0x14>
   13cfc:	7922      	ldrb	r2, [r4, #4]
   13cfe:	2a43      	cmp	r2, #67	; 0x43
   13d00:	d1ee      	bne.n	13ce0 <__cxa_begin_catch+0x14>
   13d02:	7962      	ldrb	r2, [r4, #5]
   13d04:	2a2b      	cmp	r2, #43	; 0x2b
   13d06:	d1eb      	bne.n	13ce0 <__cxa_begin_catch+0x14>
   13d08:	79a2      	ldrb	r2, [r4, #6]
   13d0a:	2a2b      	cmp	r2, #43	; 0x2b
   13d0c:	d1e8      	bne.n	13ce0 <__cxa_begin_catch+0x14>
   13d0e:	79e2      	ldrb	r2, [r4, #7]
   13d10:	2a01      	cmp	r2, #1
   13d12:	d8e5      	bhi.n	13ce0 <__cxa_begin_catch+0x14>
   13d14:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13d18:	2a00      	cmp	r2, #0
   13d1a:	db10      	blt.n	13d3e <__cxa_begin_catch+0x72>
   13d1c:	3201      	adds	r2, #1
   13d1e:	6845      	ldr	r5, [r0, #4]
   13d20:	f844 2c0c 	str.w	r2, [r4, #-12]
   13d24:	3d01      	subs	r5, #1
   13d26:	6045      	str	r5, [r0, #4]
   13d28:	428b      	cmp	r3, r1
   13d2a:	bf1c      	itt	ne
   13d2c:	f844 3c10 	strne.w	r3, [r4, #-16]
   13d30:	6001      	strne	r1, [r0, #0]
   13d32:	4620      	mov	r0, r4
   13d34:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13d36:	f008 ff39 	bl	1cbac <_Unwind_Complete>
   13d3a:	4620      	mov	r0, r4
   13d3c:	bd38      	pop	{r3, r4, r5, pc}
   13d3e:	f1c2 0201 	rsb	r2, r2, #1
   13d42:	e7ec      	b.n	13d1e <__cxa_begin_catch+0x52>
   13d44:	f7ff fc64 	bl	13610 <_ZSt9terminatev>

00013d48 <__cxa_end_catch>:
   13d48:	b508      	push	{r3, lr}
   13d4a:	f000 f843 	bl	13dd4 <__cxa_get_globals_fast>
   13d4e:	4602      	mov	r2, r0
   13d50:	6800      	ldr	r0, [r0, #0]
   13d52:	2800      	cmp	r0, #0
   13d54:	d03d      	beq.n	13dd2 <__cxa_end_catch+0x8a>
   13d56:	f890 3020 	ldrb.w	r3, [r0, #32]
   13d5a:	2b47      	cmp	r3, #71	; 0x47
   13d5c:	d006      	beq.n	13d6c <__cxa_end_catch+0x24>
   13d5e:	2300      	movs	r3, #0
   13d60:	6013      	str	r3, [r2, #0]
   13d62:	3020      	adds	r0, #32
   13d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13d68:	f008 bf22 	b.w	1cbb0 <_Unwind_DeleteException>
   13d6c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13d70:	2b4e      	cmp	r3, #78	; 0x4e
   13d72:	d1f4      	bne.n	13d5e <__cxa_end_catch+0x16>
   13d74:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13d78:	2b55      	cmp	r3, #85	; 0x55
   13d7a:	d1f0      	bne.n	13d5e <__cxa_end_catch+0x16>
   13d7c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13d80:	2b43      	cmp	r3, #67	; 0x43
   13d82:	d1ec      	bne.n	13d5e <__cxa_end_catch+0x16>
   13d84:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13d88:	2b43      	cmp	r3, #67	; 0x43
   13d8a:	d1e8      	bne.n	13d5e <__cxa_end_catch+0x16>
   13d8c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13d90:	2b2b      	cmp	r3, #43	; 0x2b
   13d92:	d1e4      	bne.n	13d5e <__cxa_end_catch+0x16>
   13d94:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13d98:	2b2b      	cmp	r3, #43	; 0x2b
   13d9a:	d1e0      	bne.n	13d5e <__cxa_end_catch+0x16>
   13d9c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13da0:	2b01      	cmp	r3, #1
   13da2:	d8dc      	bhi.n	13d5e <__cxa_end_catch+0x16>
   13da4:	6943      	ldr	r3, [r0, #20]
   13da6:	2b00      	cmp	r3, #0
   13da8:	db05      	blt.n	13db6 <__cxa_end_catch+0x6e>
   13daa:	3b01      	subs	r3, #1
   13dac:	d008      	beq.n	13dc0 <__cxa_end_catch+0x78>
   13dae:	1c5a      	adds	r2, r3, #1
   13db0:	d00d      	beq.n	13dce <__cxa_end_catch+0x86>
   13db2:	6143      	str	r3, [r0, #20]
   13db4:	bd08      	pop	{r3, pc}
   13db6:	3301      	adds	r3, #1
   13db8:	d1fb      	bne.n	13db2 <__cxa_end_catch+0x6a>
   13dba:	6901      	ldr	r1, [r0, #16]
   13dbc:	6011      	str	r1, [r2, #0]
   13dbe:	e7f8      	b.n	13db2 <__cxa_end_catch+0x6a>
   13dc0:	6903      	ldr	r3, [r0, #16]
   13dc2:	6013      	str	r3, [r2, #0]
   13dc4:	3020      	adds	r0, #32
   13dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13dca:	f008 bef1 	b.w	1cbb0 <_Unwind_DeleteException>
   13dce:	f7ff fc1f 	bl	13610 <_ZSt9terminatev>
   13dd2:	bd08      	pop	{r3, pc}

00013dd4 <__cxa_get_globals_fast>:
   13dd4:	4800      	ldr	r0, [pc, #0]	; (13dd8 <__cxa_get_globals_fast+0x4>)
   13dd6:	4770      	bx	lr
   13dd8:	20002290 	.word	0x20002290

00013ddc <__cxa_get_globals>:
   13ddc:	4800      	ldr	r0, [pc, #0]	; (13de0 <__cxa_get_globals+0x4>)
   13dde:	4770      	bx	lr
   13de0:	20002290 	.word	0x20002290

00013de4 <_ZL28read_encoded_value_with_basehjPKhPj>:
   13de4:	2850      	cmp	r0, #80	; 0x50
   13de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13de8:	d054      	beq.n	13e94 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13dea:	f000 040f 	and.w	r4, r0, #15
   13dee:	2c0c      	cmp	r4, #12
   13df0:	d84e      	bhi.n	13e90 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13df2:	e8df f004 	tbb	[pc, r4]
   13df6:	3907      	.short	0x3907
   13df8:	4d170749 	.word	0x4d170749
   13dfc:	1f4d4d4d 	.word	0x1f4d4d4d
   13e00:	071b      	.short	0x071b
   13e02:	17          	.byte	0x17
   13e03:	00          	.byte	0x00
   13e04:	4615      	mov	r5, r2
   13e06:	f855 4b04 	ldr.w	r4, [r5], #4
   13e0a:	b144      	cbz	r4, 13e1e <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13e0c:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13e10:	2e10      	cmp	r6, #16
   13e12:	bf08      	it	eq
   13e14:	4611      	moveq	r1, r2
   13e16:	440c      	add	r4, r1
   13e18:	0602      	lsls	r2, r0, #24
   13e1a:	bf48      	it	mi
   13e1c:	6824      	ldrmi	r4, [r4, #0]
   13e1e:	601c      	str	r4, [r3, #0]
   13e20:	4628      	mov	r0, r5
   13e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e24:	4615      	mov	r5, r2
   13e26:	f855 4b08 	ldr.w	r4, [r5], #8
   13e2a:	e7ee      	b.n	13e0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e2c:	4615      	mov	r5, r2
   13e2e:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13e32:	e7ea      	b.n	13e0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e34:	2400      	movs	r4, #0
   13e36:	4627      	mov	r7, r4
   13e38:	4615      	mov	r5, r2
   13e3a:	f815 eb01 	ldrb.w	lr, [r5], #1
   13e3e:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13e42:	40be      	lsls	r6, r7
   13e44:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13e48:	ea44 0406 	orr.w	r4, r4, r6
   13e4c:	f107 0707 	add.w	r7, r7, #7
   13e50:	d1f3      	bne.n	13e3a <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13e52:	2f1f      	cmp	r7, #31
   13e54:	d8d9      	bhi.n	13e0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e56:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13e5a:	d0d6      	beq.n	13e0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e5c:	f04f 36ff 	mov.w	r6, #4294967295
   13e60:	fa06 f707 	lsl.w	r7, r6, r7
   13e64:	433c      	orrs	r4, r7
   13e66:	e7d1      	b.n	13e0c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13e68:	2400      	movs	r4, #0
   13e6a:	4627      	mov	r7, r4
   13e6c:	4615      	mov	r5, r2
   13e6e:	f815 eb01 	ldrb.w	lr, [r5], #1
   13e72:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13e76:	40be      	lsls	r6, r7
   13e78:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13e7c:	ea44 0406 	orr.w	r4, r4, r6
   13e80:	f107 0707 	add.w	r7, r7, #7
   13e84:	d1f3      	bne.n	13e6e <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13e86:	e7c0      	b.n	13e0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e88:	4615      	mov	r5, r2
   13e8a:	f835 4b02 	ldrh.w	r4, [r5], #2
   13e8e:	e7bc      	b.n	13e0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e90:	f009 fc44 	bl	1d71c <abort>
   13e94:	3203      	adds	r2, #3
   13e96:	f022 0503 	bic.w	r5, r2, #3
   13e9a:	f855 4b04 	ldr.w	r4, [r5], #4
   13e9e:	601c      	str	r4, [r3, #0]
   13ea0:	4628      	mov	r0, r5
   13ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13ea4:	28ff      	cmp	r0, #255	; 0xff
   13ea6:	d00d      	beq.n	13ec4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13ea8:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13eac:	2820      	cmp	r0, #32
   13eae:	d015      	beq.n	13edc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13eb0:	d90a      	bls.n	13ec8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13eb2:	2840      	cmp	r0, #64	; 0x40
   13eb4:	d00f      	beq.n	13ed6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13eb6:	2850      	cmp	r0, #80	; 0x50
   13eb8:	d004      	beq.n	13ec4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13eba:	2830      	cmp	r0, #48	; 0x30
   13ebc:	d108      	bne.n	13ed0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13ebe:	4608      	mov	r0, r1
   13ec0:	f009 bc26 	b.w	1d710 <_Unwind_GetDataRelBase>
   13ec4:	2000      	movs	r0, #0
   13ec6:	4770      	bx	lr
   13ec8:	2800      	cmp	r0, #0
   13eca:	d0fb      	beq.n	13ec4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13ecc:	2810      	cmp	r0, #16
   13ece:	d0f9      	beq.n	13ec4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13ed0:	b508      	push	{r3, lr}
   13ed2:	f009 fc23 	bl	1d71c <abort>
   13ed6:	4608      	mov	r0, r1
   13ed8:	f009 bc06 	b.w	1d6e8 <_Unwind_GetRegionStart>
   13edc:	4608      	mov	r0, r1
   13ede:	f009 bc13 	b.w	1d708 <_Unwind_GetTextRelBase>
   13ee2:	bf00      	nop

00013ee4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ee6:	460c      	mov	r4, r1
   13ee8:	4615      	mov	r5, r2
   13eea:	4607      	mov	r7, r0
   13eec:	2800      	cmp	r0, #0
   13eee:	d044      	beq.n	13f7a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13ef0:	f009 fbfa 	bl	1d6e8 <_Unwind_GetRegionStart>
   13ef4:	6028      	str	r0, [r5, #0]
   13ef6:	7826      	ldrb	r6, [r4, #0]
   13ef8:	2eff      	cmp	r6, #255	; 0xff
   13efa:	f104 0401 	add.w	r4, r4, #1
   13efe:	d032      	beq.n	13f66 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13f00:	4639      	mov	r1, r7
   13f02:	4630      	mov	r0, r6
   13f04:	f7ff ffce 	bl	13ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f08:	4622      	mov	r2, r4
   13f0a:	4601      	mov	r1, r0
   13f0c:	1d2b      	adds	r3, r5, #4
   13f0e:	4630      	mov	r0, r6
   13f10:	f7ff ff68 	bl	13de4 <_ZL28read_encoded_value_with_basehjPKhPj>
   13f14:	4604      	mov	r4, r0
   13f16:	1c60      	adds	r0, r4, #1
   13f18:	7823      	ldrb	r3, [r4, #0]
   13f1a:	752b      	strb	r3, [r5, #20]
   13f1c:	2bff      	cmp	r3, #255	; 0xff
   13f1e:	d029      	beq.n	13f74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13f20:	2310      	movs	r3, #16
   13f22:	2400      	movs	r4, #0
   13f24:	752b      	strb	r3, [r5, #20]
   13f26:	4622      	mov	r2, r4
   13f28:	f810 1b01 	ldrb.w	r1, [r0], #1
   13f2c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13f30:	4093      	lsls	r3, r2
   13f32:	0609      	lsls	r1, r1, #24
   13f34:	ea44 0403 	orr.w	r4, r4, r3
   13f38:	f102 0207 	add.w	r2, r2, #7
   13f3c:	d4f4      	bmi.n	13f28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13f3e:	4404      	add	r4, r0
   13f40:	60ec      	str	r4, [r5, #12]
   13f42:	7803      	ldrb	r3, [r0, #0]
   13f44:	756b      	strb	r3, [r5, #21]
   13f46:	2400      	movs	r4, #0
   13f48:	3001      	adds	r0, #1
   13f4a:	4622      	mov	r2, r4
   13f4c:	f810 1b01 	ldrb.w	r1, [r0], #1
   13f50:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13f54:	4093      	lsls	r3, r2
   13f56:	431c      	orrs	r4, r3
   13f58:	060b      	lsls	r3, r1, #24
   13f5a:	f102 0207 	add.w	r2, r2, #7
   13f5e:	d4f5      	bmi.n	13f4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13f60:	4404      	add	r4, r0
   13f62:	612c      	str	r4, [r5, #16]
   13f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f66:	6068      	str	r0, [r5, #4]
   13f68:	7823      	ldrb	r3, [r4, #0]
   13f6a:	752b      	strb	r3, [r5, #20]
   13f6c:	2bff      	cmp	r3, #255	; 0xff
   13f6e:	f104 0001 	add.w	r0, r4, #1
   13f72:	d1d5      	bne.n	13f20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13f74:	2300      	movs	r3, #0
   13f76:	60eb      	str	r3, [r5, #12]
   13f78:	e7e3      	b.n	13f42 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13f7a:	e7bb      	b.n	13ef4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013f7c <__gxx_personality_v0>:
   13f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f80:	f000 0403 	and.w	r4, r0, #3
   13f84:	b097      	sub	sp, #92	; 0x5c
   13f86:	2300      	movs	r3, #0
   13f88:	2c01      	cmp	r4, #1
   13f8a:	4689      	mov	r9, r1
   13f8c:	4617      	mov	r7, r2
   13f8e:	930a      	str	r3, [sp, #40]	; 0x28
   13f90:	d01e      	beq.n	13fd0 <__gxx_personality_v0+0x54>
   13f92:	d30e      	bcc.n	13fb2 <__gxx_personality_v0+0x36>
   13f94:	2c02      	cmp	r4, #2
   13f96:	d10a      	bne.n	13fae <__gxx_personality_v0+0x32>
   13f98:	4639      	mov	r1, r7
   13f9a:	4648      	mov	r0, r9
   13f9c:	f009 fb90 	bl	1d6c0 <__gnu_unwind_frame>
   13fa0:	2800      	cmp	r0, #0
   13fa2:	f000 80a5 	beq.w	140f0 <__gxx_personality_v0+0x174>
   13fa6:	2009      	movs	r0, #9
   13fa8:	b017      	add	sp, #92	; 0x5c
   13faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fae:	f009 fbb5 	bl	1d71c <abort>
   13fb2:	0700      	lsls	r0, r0, #28
   13fb4:	d4f0      	bmi.n	13f98 <__gxx_personality_v0+0x1c>
   13fb6:	2301      	movs	r3, #1
   13fb8:	9303      	str	r3, [sp, #12]
   13fba:	aa16      	add	r2, sp, #88	; 0x58
   13fbc:	2300      	movs	r3, #0
   13fbe:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13fc2:	4619      	mov	r1, r3
   13fc4:	9200      	str	r2, [sp, #0]
   13fc6:	4638      	mov	r0, r7
   13fc8:	220c      	movs	r2, #12
   13fca:	f008 fe1d 	bl	1cc08 <_Unwind_VRS_Set>
   13fce:	e00f      	b.n	13ff0 <__gxx_personality_v0+0x74>
   13fd0:	f010 0408 	ands.w	r4, r0, #8
   13fd4:	f000 8090 	beq.w	140f8 <__gxx_personality_v0+0x17c>
   13fd8:	aa16      	add	r2, sp, #88	; 0x58
   13fda:	f044 0402 	orr.w	r4, r4, #2
   13fde:	f842 1d2c 	str.w	r1, [r2, #-44]!
   13fe2:	4638      	mov	r0, r7
   13fe4:	9200      	str	r2, [sp, #0]
   13fe6:	4619      	mov	r1, r3
   13fe8:	220c      	movs	r2, #12
   13fea:	9403      	str	r4, [sp, #12]
   13fec:	f008 fe0c 	bl	1cc08 <_Unwind_VRS_Set>
   13ff0:	4638      	mov	r0, r7
   13ff2:	f009 fb7f 	bl	1d6f4 <_Unwind_GetLanguageSpecificData>
   13ff6:	9005      	str	r0, [sp, #20]
   13ff8:	2800      	cmp	r0, #0
   13ffa:	d0cd      	beq.n	13f98 <__gxx_personality_v0+0x1c>
   13ffc:	ab10      	add	r3, sp, #64	; 0x40
   13ffe:	461a      	mov	r2, r3
   14000:	9905      	ldr	r1, [sp, #20]
   14002:	9306      	str	r3, [sp, #24]
   14004:	4638      	mov	r0, r7
   14006:	f7ff ff6d 	bl	13ee4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1400a:	4639      	mov	r1, r7
   1400c:	4604      	mov	r4, r0
   1400e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14012:	f7ff ff47 	bl	13ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14016:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1401a:	2300      	movs	r3, #0
   1401c:	9012      	str	r0, [sp, #72]	; 0x48
   1401e:	4619      	mov	r1, r3
   14020:	220f      	movs	r2, #15
   14022:	f8cd b000 	str.w	fp, [sp]
   14026:	4638      	mov	r0, r7
   14028:	f008 fdc8 	bl	1cbbc <_Unwind_VRS_Get>
   1402c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1402e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14030:	f023 0301 	bic.w	r3, r3, #1
   14034:	42a2      	cmp	r2, r4
   14036:	f103 36ff 	add.w	r6, r3, #4294967295
   1403a:	d975      	bls.n	14128 <__gxx_personality_v0+0x1ac>
   1403c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14040:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14044:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   14048:	2100      	movs	r1, #0
   1404a:	4628      	mov	r0, r5
   1404c:	f7ff ff2a 	bl	13ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14050:	4622      	mov	r2, r4
   14052:	4653      	mov	r3, sl
   14054:	4601      	mov	r1, r0
   14056:	4628      	mov	r0, r5
   14058:	f7ff fec4 	bl	13de4 <_ZL28read_encoded_value_with_basehjPKhPj>
   1405c:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   14060:	4605      	mov	r5, r0
   14062:	2100      	movs	r1, #0
   14064:	4620      	mov	r0, r4
   14066:	f7ff ff1d 	bl	13ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1406a:	462a      	mov	r2, r5
   1406c:	4643      	mov	r3, r8
   1406e:	4601      	mov	r1, r0
   14070:	4620      	mov	r0, r4
   14072:	f7ff feb7 	bl	13de4 <_ZL28read_encoded_value_with_basehjPKhPj>
   14076:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   1407a:	4605      	mov	r5, r0
   1407c:	2100      	movs	r1, #0
   1407e:	4620      	mov	r0, r4
   14080:	f7ff ff10 	bl	13ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14084:	462a      	mov	r2, r5
   14086:	4601      	mov	r1, r0
   14088:	465b      	mov	r3, fp
   1408a:	4620      	mov	r0, r4
   1408c:	f7ff feaa 	bl	13de4 <_ZL28read_encoded_value_with_basehjPKhPj>
   14090:	4604      	mov	r4, r0
   14092:	2000      	movs	r0, #0
   14094:	4602      	mov	r2, r0
   14096:	f814 1b01 	ldrb.w	r1, [r4], #1
   1409a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1409e:	4093      	lsls	r3, r2
   140a0:	0609      	lsls	r1, r1, #24
   140a2:	ea40 0003 	orr.w	r0, r0, r3
   140a6:	f102 0207 	add.w	r2, r2, #7
   140aa:	d4f4      	bmi.n	14096 <__gxx_personality_v0+0x11a>
   140ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   140ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   140b0:	4413      	add	r3, r2
   140b2:	429e      	cmp	r6, r3
   140b4:	d231      	bcs.n	1411a <__gxx_personality_v0+0x19e>
   140b6:	9b03      	ldr	r3, [sp, #12]
   140b8:	07db      	lsls	r3, r3, #31
   140ba:	d539      	bpl.n	14130 <__gxx_personality_v0+0x1b4>
   140bc:	2500      	movs	r5, #0
   140be:	9504      	str	r5, [sp, #16]
   140c0:	2300      	movs	r3, #0
   140c2:	4619      	mov	r1, r3
   140c4:	220d      	movs	r2, #13
   140c6:	f8cd 8000 	str.w	r8, [sp]
   140ca:	4638      	mov	r0, r7
   140cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   140ce:	f008 fd75 	bl	1cbbc <_Unwind_VRS_Get>
   140d2:	9a05      	ldr	r2, [sp, #20]
   140d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   140d6:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   140da:	9a04      	ldr	r2, [sp, #16]
   140dc:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   140e0:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   140e4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   140e8:	f8c9 3020 	str.w	r3, [r9, #32]
   140ec:	2006      	movs	r0, #6
   140ee:	e75b      	b.n	13fa8 <__gxx_personality_v0+0x2c>
   140f0:	2008      	movs	r0, #8
   140f2:	b017      	add	sp, #92	; 0x5c
   140f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f8:	ab10      	add	r3, sp, #64	; 0x40
   140fa:	9300      	str	r3, [sp, #0]
   140fc:	9306      	str	r3, [sp, #24]
   140fe:	220d      	movs	r2, #13
   14100:	4623      	mov	r3, r4
   14102:	4621      	mov	r1, r4
   14104:	4638      	mov	r0, r7
   14106:	f8d9 5020 	ldr.w	r5, [r9, #32]
   1410a:	f008 fd57 	bl	1cbbc <_Unwind_VRS_Get>
   1410e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14110:	429d      	cmp	r5, r3
   14112:	d012      	beq.n	1413a <__gxx_personality_v0+0x1be>
   14114:	2302      	movs	r3, #2
   14116:	9303      	str	r3, [sp, #12]
   14118:	e74f      	b.n	13fba <__gxx_personality_v0+0x3e>
   1411a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1411c:	4413      	add	r3, r2
   1411e:	429e      	cmp	r6, r3
   14120:	d359      	bcc.n	141d6 <__gxx_personality_v0+0x25a>
   14122:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14124:	42a3      	cmp	r3, r4
   14126:	d88d      	bhi.n	14044 <__gxx_personality_v0+0xc8>
   14128:	2500      	movs	r5, #0
   1412a:	9504      	str	r5, [sp, #16]
   1412c:	2401      	movs	r4, #1
   1412e:	e105      	b.n	1433c <__gxx_personality_v0+0x3c0>
   14130:	9b03      	ldr	r3, [sp, #12]
   14132:	071b      	lsls	r3, r3, #28
   14134:	d54c      	bpl.n	141d0 <__gxx_personality_v0+0x254>
   14136:	f7ff fa6b 	bl	13610 <_ZSt9terminatev>
   1413a:	aa16      	add	r2, sp, #88	; 0x58
   1413c:	4623      	mov	r3, r4
   1413e:	f842 9d2c 	str.w	r9, [r2, #-44]!
   14142:	4621      	mov	r1, r4
   14144:	9200      	str	r2, [sp, #0]
   14146:	4638      	mov	r0, r7
   14148:	220c      	movs	r2, #12
   1414a:	f008 fd5d 	bl	1cc08 <_Unwind_VRS_Set>
   1414e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   14152:	9304      	str	r3, [sp, #16]
   14154:	2b00      	cmp	r3, #0
   14156:	d03b      	beq.n	141d0 <__gxx_personality_v0+0x254>
   14158:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   1415c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   14160:	2403      	movs	r4, #3
   14162:	2d00      	cmp	r5, #0
   14164:	f2c0 8106 	blt.w	14374 <__gxx_personality_v0+0x3f8>
   14168:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   1416c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14170:	a916      	add	r1, sp, #88	; 0x58
   14172:	2300      	movs	r3, #0
   14174:	f841 9d28 	str.w	r9, [r1, #-40]!
   14178:	461a      	mov	r2, r3
   1417a:	9100      	str	r1, [sp, #0]
   1417c:	4638      	mov	r0, r7
   1417e:	4619      	mov	r1, r3
   14180:	f008 fd42 	bl	1cc08 <_Unwind_VRS_Set>
   14184:	2300      	movs	r3, #0
   14186:	4619      	mov	r1, r3
   14188:	2201      	movs	r2, #1
   1418a:	f8cd a000 	str.w	sl, [sp]
   1418e:	4638      	mov	r0, r7
   14190:	950d      	str	r5, [sp, #52]	; 0x34
   14192:	f008 fd39 	bl	1cc08 <_Unwind_VRS_Set>
   14196:	2300      	movs	r3, #0
   14198:	4619      	mov	r1, r3
   1419a:	220f      	movs	r2, #15
   1419c:	f8cd 8000 	str.w	r8, [sp]
   141a0:	4638      	mov	r0, r7
   141a2:	f008 fd0b 	bl	1cbbc <_Unwind_VRS_Get>
   141a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141a8:	9a04      	ldr	r2, [sp, #16]
   141aa:	f8cd 8000 	str.w	r8, [sp]
   141ae:	f003 0501 	and.w	r5, r3, #1
   141b2:	2300      	movs	r3, #0
   141b4:	4315      	orrs	r5, r2
   141b6:	4638      	mov	r0, r7
   141b8:	4619      	mov	r1, r3
   141ba:	220f      	movs	r2, #15
   141bc:	950e      	str	r5, [sp, #56]	; 0x38
   141be:	f008 fd23 	bl	1cc08 <_Unwind_VRS_Set>
   141c2:	2c02      	cmp	r4, #2
   141c4:	f000 8080 	beq.w	142c8 <__gxx_personality_v0+0x34c>
   141c8:	2007      	movs	r0, #7
   141ca:	b017      	add	sp, #92	; 0x5c
   141cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d0:	4648      	mov	r0, r9
   141d2:	f7ff fcfb 	bl	13bcc <__cxa_call_terminate>
   141d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   141d8:	9304      	str	r3, [sp, #16]
   141da:	461a      	mov	r2, r3
   141dc:	2b00      	cmp	r3, #0
   141de:	d178      	bne.n	142d2 <__gxx_personality_v0+0x356>
   141e0:	2800      	cmp	r0, #0
   141e2:	f43f aed9 	beq.w	13f98 <__gxx_personality_v0+0x1c>
   141e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   141e8:	9a04      	ldr	r2, [sp, #16]
   141ea:	3801      	subs	r0, #1
   141ec:	4403      	add	r3, r0
   141ee:	2a00      	cmp	r2, #0
   141f0:	f43f aed2 	beq.w	13f98 <__gxx_personality_v0+0x1c>
   141f4:	2b00      	cmp	r3, #0
   141f6:	d075      	beq.n	142e4 <__gxx_personality_v0+0x368>
   141f8:	9a03      	ldr	r2, [sp, #12]
   141fa:	f012 0208 	ands.w	r2, r2, #8
   141fe:	9209      	str	r2, [sp, #36]	; 0x24
   14200:	f000 80f6 	beq.w	143f0 <__gxx_personality_v0+0x474>
   14204:	2147      	movs	r1, #71	; 0x47
   14206:	224e      	movs	r2, #78	; 0x4e
   14208:	f889 1000 	strb.w	r1, [r9]
   1420c:	f889 2001 	strb.w	r2, [r9, #1]
   14210:	2155      	movs	r1, #85	; 0x55
   14212:	2243      	movs	r2, #67	; 0x43
   14214:	f889 1002 	strb.w	r1, [r9, #2]
   14218:	f889 2003 	strb.w	r2, [r9, #3]
   1421c:	2146      	movs	r1, #70	; 0x46
   1421e:	224f      	movs	r2, #79	; 0x4f
   14220:	f889 1004 	strb.w	r1, [r9, #4]
   14224:	f889 2005 	strb.w	r2, [r9, #5]
   14228:	2152      	movs	r1, #82	; 0x52
   1422a:	2200      	movs	r2, #0
   1422c:	f889 1006 	strb.w	r1, [r9, #6]
   14230:	f889 2007 	strb.w	r2, [r9, #7]
   14234:	2200      	movs	r2, #0
   14236:	9208      	str	r2, [sp, #32]
   14238:	9707      	str	r7, [sp, #28]
   1423a:	2500      	movs	r5, #0
   1423c:	4629      	mov	r1, r5
   1423e:	e000      	b.n	14242 <__gxx_personality_v0+0x2c6>
   14240:	4623      	mov	r3, r4
   14242:	461c      	mov	r4, r3
   14244:	f814 0b01 	ldrb.w	r0, [r4], #1
   14248:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1424c:	408a      	lsls	r2, r1
   1424e:	0606      	lsls	r6, r0, #24
   14250:	ea45 0502 	orr.w	r5, r5, r2
   14254:	f101 0107 	add.w	r1, r1, #7
   14258:	d4f2      	bmi.n	14240 <__gxx_personality_v0+0x2c4>
   1425a:	291f      	cmp	r1, #31
   1425c:	d805      	bhi.n	1426a <__gxx_personality_v0+0x2ee>
   1425e:	0642      	lsls	r2, r0, #25
   14260:	d503      	bpl.n	1426a <__gxx_personality_v0+0x2ee>
   14262:	2201      	movs	r2, #1
   14264:	408a      	lsls	r2, r1
   14266:	4252      	negs	r2, r2
   14268:	4315      	orrs	r5, r2
   1426a:	2600      	movs	r6, #0
   1426c:	4631      	mov	r1, r6
   1426e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   14272:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14276:	408a      	lsls	r2, r1
   14278:	0607      	lsls	r7, r0, #24
   1427a:	ea46 0602 	orr.w	r6, r6, r2
   1427e:	f101 0107 	add.w	r1, r1, #7
   14282:	d4f4      	bmi.n	1426e <__gxx_personality_v0+0x2f2>
   14284:	291f      	cmp	r1, #31
   14286:	d805      	bhi.n	14294 <__gxx_personality_v0+0x318>
   14288:	0640      	lsls	r0, r0, #25
   1428a:	d503      	bpl.n	14294 <__gxx_personality_v0+0x318>
   1428c:	2301      	movs	r3, #1
   1428e:	408b      	lsls	r3, r1
   14290:	425b      	negs	r3, r3
   14292:	431e      	orrs	r6, r3
   14294:	2d00      	cmp	r5, #0
   14296:	d05c      	beq.n	14352 <__gxx_personality_v0+0x3d6>
   14298:	dd5e      	ble.n	14358 <__gxx_personality_v0+0x3dc>
   1429a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1429e:	28ff      	cmp	r0, #255	; 0xff
   142a0:	f000 80a4 	beq.w	143ec <__gxx_personality_v0+0x470>
   142a4:	f000 0307 	and.w	r3, r0, #7
   142a8:	2b04      	cmp	r3, #4
   142aa:	f63f ae80 	bhi.w	13fae <__gxx_personality_v0+0x32>
   142ae:	a201      	add	r2, pc, #4	; (adr r2, 142b4 <__gxx_personality_v0+0x338>)
   142b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   142b4:	0001431f 	.word	0x0001431f
   142b8:	00013faf 	.word	0x00013faf
   142bc:	00014325 	.word	0x00014325
   142c0:	0001431f 	.word	0x0001431f
   142c4:	000142fd 	.word	0x000142fd
   142c8:	4648      	mov	r0, r9
   142ca:	f7ff fbf7 	bl	13abc <__cxa_begin_cleanup>
   142ce:	2007      	movs	r0, #7
   142d0:	e66a      	b.n	13fa8 <__gxx_personality_v0+0x2c>
   142d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   142d4:	441a      	add	r2, r3
   142d6:	9204      	str	r2, [sp, #16]
   142d8:	2800      	cmp	r0, #0
   142da:	d184      	bne.n	141e6 <__gxx_personality_v0+0x26a>
   142dc:	9b04      	ldr	r3, [sp, #16]
   142de:	2b00      	cmp	r3, #0
   142e0:	f43f ae5a 	beq.w	13f98 <__gxx_personality_v0+0x1c>
   142e4:	9b03      	ldr	r3, [sp, #12]
   142e6:	f013 0301 	ands.w	r3, r3, #1
   142ea:	f47f ae55 	bne.w	13f98 <__gxx_personality_v0+0x1c>
   142ee:	9a03      	ldr	r2, [sp, #12]
   142f0:	f012 0508 	ands.w	r5, r2, #8
   142f4:	f040 8097 	bne.w	14426 <__gxx_personality_v0+0x4aa>
   142f8:	2402      	movs	r4, #2
   142fa:	e739      	b.n	14170 <__gxx_personality_v0+0x1f4>
   142fc:	00eb      	lsls	r3, r5, #3
   142fe:	425b      	negs	r3, r3
   14300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14302:	9912      	ldr	r1, [sp, #72]	; 0x48
   14304:	441a      	add	r2, r3
   14306:	4643      	mov	r3, r8
   14308:	f7ff fd6c 	bl	13de4 <_ZL28read_encoded_value_with_basehjPKhPj>
   1430c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1430e:	b199      	cbz	r1, 14338 <__gxx_personality_v0+0x3bc>
   14310:	f1b9 0f00 	cmp.w	r9, #0
   14314:	d109      	bne.n	1432a <__gxx_personality_v0+0x3ae>
   14316:	2e00      	cmp	r6, #0
   14318:	d077      	beq.n	1440a <__gxx_personality_v0+0x48e>
   1431a:	19a3      	adds	r3, r4, r6
   1431c:	e78d      	b.n	1423a <__gxx_personality_v0+0x2be>
   1431e:	00ab      	lsls	r3, r5, #2
   14320:	425b      	negs	r3, r3
   14322:	e7ed      	b.n	14300 <__gxx_personality_v0+0x384>
   14324:	006b      	lsls	r3, r5, #1
   14326:	425b      	negs	r3, r3
   14328:	e7ea      	b.n	14300 <__gxx_personality_v0+0x384>
   1432a:	ab0a      	add	r3, sp, #40	; 0x28
   1432c:	2200      	movs	r2, #0
   1432e:	4648      	mov	r0, r9
   14330:	f7ff fb68 	bl	13a04 <__cxa_type_match>
   14334:	2800      	cmp	r0, #0
   14336:	d0ee      	beq.n	14316 <__gxx_personality_v0+0x39a>
   14338:	9f07      	ldr	r7, [sp, #28]
   1433a:	2403      	movs	r4, #3
   1433c:	9b03      	ldr	r3, [sp, #12]
   1433e:	07da      	lsls	r2, r3, #31
   14340:	d460      	bmi.n	14404 <__gxx_personality_v0+0x488>
   14342:	9b03      	ldr	r3, [sp, #12]
   14344:	0719      	lsls	r1, r3, #28
   14346:	d466      	bmi.n	14416 <__gxx_personality_v0+0x49a>
   14348:	2c01      	cmp	r4, #1
   1434a:	f43f af41 	beq.w	141d0 <__gxx_personality_v0+0x254>
   1434e:	9905      	ldr	r1, [sp, #20]
   14350:	e707      	b.n	14162 <__gxx_personality_v0+0x1e6>
   14352:	2301      	movs	r3, #1
   14354:	9308      	str	r3, [sp, #32]
   14356:	e7de      	b.n	14316 <__gxx_personality_v0+0x39a>
   14358:	f1b9 0f00 	cmp.w	r9, #0
   1435c:	d001      	beq.n	14362 <__gxx_personality_v0+0x3e6>
   1435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14360:	b35b      	cbz	r3, 143ba <__gxx_personality_v0+0x43e>
   14362:	1c6b      	adds	r3, r5, #1
   14364:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1436a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1436e:	2b00      	cmp	r3, #0
   14370:	d1d1      	bne.n	14316 <__gxx_personality_v0+0x39a>
   14372:	e7e1      	b.n	14338 <__gxx_personality_v0+0x3bc>
   14374:	9a06      	ldr	r2, [sp, #24]
   14376:	4638      	mov	r0, r7
   14378:	f7ff fdb4 	bl	13ee4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1437c:	4639      	mov	r1, r7
   1437e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14382:	f7ff fd8f 	bl	13ea4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14386:	00aa      	lsls	r2, r5, #2
   14388:	f082 0203 	eor.w	r2, r2, #3
   1438c:	43d2      	mvns	r2, r2
   1438e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14390:	9012      	str	r0, [sp, #72]	; 0x48
   14392:	58b3      	ldr	r3, [r6, r2]
   14394:	4416      	add	r6, r2
   14396:	b133      	cbz	r3, 143a6 <__gxx_personality_v0+0x42a>
   14398:	4632      	mov	r2, r6
   1439a:	2300      	movs	r3, #0
   1439c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   143a0:	3301      	adds	r3, #1
   143a2:	2900      	cmp	r1, #0
   143a4:	d1fa      	bne.n	1439c <__gxx_personality_v0+0x420>
   143a6:	2204      	movs	r2, #4
   143a8:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   143ac:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   143b0:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   143b4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   143b8:	e6d6      	b.n	14168 <__gxx_personality_v0+0x1ec>
   143ba:	1c6f      	adds	r7, r5, #1
   143bc:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   143c0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   143c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   143c4:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   143c8:	920f      	str	r2, [sp, #60]	; 0x3c
   143ca:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   143ce:	b921      	cbnz	r1, 143da <__gxx_personality_v0+0x45e>
   143d0:	e7b2      	b.n	14338 <__gxx_personality_v0+0x3bc>
   143d2:	f857 1f04 	ldr.w	r1, [r7, #4]!
   143d6:	2900      	cmp	r1, #0
   143d8:	d0ae      	beq.n	14338 <__gxx_personality_v0+0x3bc>
   143da:	4439      	add	r1, r7
   143dc:	465b      	mov	r3, fp
   143de:	2200      	movs	r2, #0
   143e0:	4648      	mov	r0, r9
   143e2:	f7ff fb0f 	bl	13a04 <__cxa_type_match>
   143e6:	2800      	cmp	r0, #0
   143e8:	d0f3      	beq.n	143d2 <__gxx_personality_v0+0x456>
   143ea:	e794      	b.n	14316 <__gxx_personality_v0+0x39a>
   143ec:	2300      	movs	r3, #0
   143ee:	e787      	b.n	14300 <__gxx_personality_v0+0x384>
   143f0:	f899 2007 	ldrb.w	r2, [r9, #7]
   143f4:	2a01      	cmp	r2, #1
   143f6:	bf0c      	ite	eq
   143f8:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   143fc:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14400:	920a      	str	r2, [sp, #40]	; 0x28
   14402:	e717      	b.n	14234 <__gxx_personality_v0+0x2b8>
   14404:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14408:	e65a      	b.n	140c0 <__gxx_personality_v0+0x144>
   1440a:	9b08      	ldr	r3, [sp, #32]
   1440c:	9f07      	ldr	r7, [sp, #28]
   1440e:	2b00      	cmp	r3, #0
   14410:	f47f af68 	bne.w	142e4 <__gxx_personality_v0+0x368>
   14414:	e5c0      	b.n	13f98 <__gxx_personality_v0+0x1c>
   14416:	2c01      	cmp	r4, #1
   14418:	f43f ae8d 	beq.w	14136 <__gxx_personality_v0+0x1ba>
   1441c:	2d00      	cmp	r5, #0
   1441e:	f6bf aea3 	bge.w	14168 <__gxx_personality_v0+0x1ec>
   14422:	f7ff f903 	bl	1362c <_ZSt10unexpectedv>
   14426:	461d      	mov	r5, r3
   14428:	2402      	movs	r4, #2
   1442a:	e6a1      	b.n	14170 <__gxx_personality_v0+0x1f4>
   1442c:	f7ff fc4e 	bl	13ccc <__cxa_begin_catch>
   14430:	e681      	b.n	14136 <__gxx_personality_v0+0x1ba>
   14432:	bf00      	nop

00014434 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   14434:	b570      	push	{r4, r5, r6, lr}
   14436:	4b3c      	ldr	r3, [pc, #240]	; (14528 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14438:	781a      	ldrb	r2, [r3, #0]
   1443a:	b082      	sub	sp, #8
   1443c:	2a00      	cmp	r2, #0
   1443e:	d135      	bne.n	144ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14440:	2401      	movs	r4, #1
   14442:	701c      	strb	r4, [r3, #0]
   14444:	f006 fbd2 	bl	1abec <__cxa_current_exception_type>
   14448:	2800      	cmp	r0, #0
   1444a:	d05b      	beq.n	14504 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   1444c:	6844      	ldr	r4, [r0, #4]
   1444e:	4d37      	ldr	r5, [pc, #220]	; (1452c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14450:	7823      	ldrb	r3, [r4, #0]
   14452:	2b2a      	cmp	r3, #42	; 0x2a
   14454:	ab02      	add	r3, sp, #8
   14456:	f04f 32ff 	mov.w	r2, #4294967295
   1445a:	bf08      	it	eq
   1445c:	3401      	addeq	r4, #1
   1445e:	f843 2d04 	str.w	r2, [r3, #-4]!
   14462:	2200      	movs	r2, #0
   14464:	4611      	mov	r1, r2
   14466:	4620      	mov	r0, r4
   14468:	f006 fb52 	bl	1ab10 <__cxa_demangle>
   1446c:	682b      	ldr	r3, [r5, #0]
   1446e:	4606      	mov	r6, r0
   14470:	68db      	ldr	r3, [r3, #12]
   14472:	482f      	ldr	r0, [pc, #188]	; (14530 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   14474:	2230      	movs	r2, #48	; 0x30
   14476:	2101      	movs	r1, #1
   14478:	f009 fba4 	bl	1dbc4 <fwrite>
   1447c:	9b01      	ldr	r3, [sp, #4]
   1447e:	b17b      	cbz	r3, 144a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14480:	682b      	ldr	r3, [r5, #0]
   14482:	4620      	mov	r0, r4
   14484:	68d9      	ldr	r1, [r3, #12]
   14486:	f009 f9c7 	bl	1d818 <fputs>
   1448a:	682b      	ldr	r3, [r5, #0]
   1448c:	4829      	ldr	r0, [pc, #164]	; (14534 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1448e:	68db      	ldr	r3, [r3, #12]
   14490:	2202      	movs	r2, #2
   14492:	2101      	movs	r1, #1
   14494:	f009 fb96 	bl	1dbc4 <fwrite>
   14498:	9b01      	ldr	r3, [sp, #4]
   1449a:	b18b      	cbz	r3, 144c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1449c:	f7ff f940 	bl	13720 <__cxa_rethrow>
   144a0:	682b      	ldr	r3, [r5, #0]
   144a2:	4630      	mov	r0, r6
   144a4:	68d9      	ldr	r1, [r3, #12]
   144a6:	f009 f9b7 	bl	1d818 <fputs>
   144aa:	e7ee      	b.n	1448a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   144ac:	4b1f      	ldr	r3, [pc, #124]	; (1452c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   144ae:	4822      	ldr	r0, [pc, #136]	; (14538 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   144b0:	681b      	ldr	r3, [r3, #0]
   144b2:	221d      	movs	r2, #29
   144b4:	68db      	ldr	r3, [r3, #12]
   144b6:	2101      	movs	r1, #1
   144b8:	f009 fb84 	bl	1dbc4 <fwrite>
   144bc:	f009 f92e 	bl	1d71c <abort>
   144c0:	4630      	mov	r0, r6
   144c2:	f009 fbc7 	bl	1dc54 <free>
   144c6:	e7e9      	b.n	1449c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   144c8:	2901      	cmp	r1, #1
   144ca:	460c      	mov	r4, r1
   144cc:	d127      	bne.n	1451e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   144ce:	f7ff fbfd 	bl	13ccc <__cxa_begin_catch>
   144d2:	6803      	ldr	r3, [r0, #0]
   144d4:	689b      	ldr	r3, [r3, #8]
   144d6:	4798      	blx	r3
   144d8:	682b      	ldr	r3, [r5, #0]
   144da:	4606      	mov	r6, r0
   144dc:	68db      	ldr	r3, [r3, #12]
   144de:	4817      	ldr	r0, [pc, #92]	; (1453c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   144e0:	4621      	mov	r1, r4
   144e2:	220b      	movs	r2, #11
   144e4:	f009 fb6e 	bl	1dbc4 <fwrite>
   144e8:	682b      	ldr	r3, [r5, #0]
   144ea:	4630      	mov	r0, r6
   144ec:	68d9      	ldr	r1, [r3, #12]
   144ee:	f009 f993 	bl	1d818 <fputs>
   144f2:	682b      	ldr	r3, [r5, #0]
   144f4:	200a      	movs	r0, #10
   144f6:	68d9      	ldr	r1, [r3, #12]
   144f8:	f009 f91e 	bl	1d738 <fputc>
   144fc:	f7ff fc24 	bl	13d48 <__cxa_end_catch>
   14500:	f009 f90c 	bl	1d71c <abort>
   14504:	4b09      	ldr	r3, [pc, #36]	; (1452c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14506:	480e      	ldr	r0, [pc, #56]	; (14540 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14508:	681b      	ldr	r3, [r3, #0]
   1450a:	4621      	mov	r1, r4
   1450c:	68db      	ldr	r3, [r3, #12]
   1450e:	222d      	movs	r2, #45	; 0x2d
   14510:	f009 fb58 	bl	1dbc4 <fwrite>
   14514:	e7f4      	b.n	14500 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14516:	f7ff fc17 	bl	13d48 <__cxa_end_catch>
   1451a:	f7ff fa6d 	bl	139f8 <__cxa_end_cleanup>
   1451e:	f7ff fbd5 	bl	13ccc <__cxa_begin_catch>
   14522:	f7ff fc11 	bl	13d48 <__cxa_end_catch>
   14526:	e7eb      	b.n	14500 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14528:	2000229c 	.word	0x2000229c
   1452c:	200000f8 	.word	0x200000f8
   14530:	00023c14 	.word	0x00023c14
   14534:	00023c48 	.word	0x00023c48
   14538:	00023bf4 	.word	0x00023bf4
   1453c:	00023c7c 	.word	0x00023c7c
   14540:	00023c4c 	.word	0x00023c4c

00014544 <d_make_comp>:
   14544:	b470      	push	{r4, r5, r6}
   14546:	1e4c      	subs	r4, r1, #1
   14548:	2c4c      	cmp	r4, #76	; 0x4c
   1454a:	d82d      	bhi.n	145a8 <d_make_comp+0x64>
   1454c:	e8df f004 	tbb	[pc, r4]
   14550:	3c3c3c3c 	.word	0x3c3c3c3c
   14554:	2c2c2c2c 	.word	0x2c2c2c2c
   14558:	273c2727 	.word	0x273c2727
   1455c:	27272727 	.word	0x27272727
   14560:	27272727 	.word	0x27272727
   14564:	2c272727 	.word	0x2c272727
   14568:	28282828 	.word	0x28282828
   1456c:	28282828 	.word	0x28282828
   14570:	2727273c 	.word	0x2727273c
   14574:	272c2727 	.word	0x272c2727
   14578:	2c3c3e28 	.word	0x2c3c3e28
   1457c:	3e28283c 	.word	0x3e28283c
   14580:	27272c2c 	.word	0x27272c2c
   14584:	3c3c3c27 	.word	0x3c3c3c27
   14588:	3c273c3c 	.word	0x3c273c3c
   1458c:	2c3c273c 	.word	0x2c3c273c
   14590:	2727272c 	.word	0x2727272c
   14594:	272c2c2c 	.word	0x272c2c2c
   14598:	283c2727 	.word	0x283c2727
   1459c:	3c          	.byte	0x3c
   1459d:	00          	.byte	0x00
   1459e:	b11a      	cbz	r2, 145a8 <d_make_comp+0x64>
   145a0:	6944      	ldr	r4, [r0, #20]
   145a2:	6985      	ldr	r5, [r0, #24]
   145a4:	42ac      	cmp	r4, r5
   145a6:	db02      	blt.n	145ae <d_make_comp+0x6a>
   145a8:	2000      	movs	r0, #0
   145aa:	bc70      	pop	{r4, r5, r6}
   145ac:	4770      	bx	lr
   145ae:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   145b2:	6906      	ldr	r6, [r0, #16]
   145b4:	00ad      	lsls	r5, r5, #2
   145b6:	3401      	adds	r4, #1
   145b8:	6144      	str	r4, [r0, #20]
   145ba:	1970      	adds	r0, r6, r5
   145bc:	d0f5      	beq.n	145aa <d_make_comp+0x66>
   145be:	5571      	strb	r1, [r6, r5]
   145c0:	6042      	str	r2, [r0, #4]
   145c2:	6083      	str	r3, [r0, #8]
   145c4:	bc70      	pop	{r4, r5, r6}
   145c6:	4770      	bx	lr
   145c8:	2a00      	cmp	r2, #0
   145ca:	d0ed      	beq.n	145a8 <d_make_comp+0x64>
   145cc:	2b00      	cmp	r3, #0
   145ce:	d0eb      	beq.n	145a8 <d_make_comp+0x64>
   145d0:	6944      	ldr	r4, [r0, #20]
   145d2:	6985      	ldr	r5, [r0, #24]
   145d4:	42ac      	cmp	r4, r5
   145d6:	dae7      	bge.n	145a8 <d_make_comp+0x64>
   145d8:	e7e9      	b.n	145ae <d_make_comp+0x6a>
   145da:	bf00      	nop

000145dc <d_cv_qualifiers>:
   145dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   145e0:	68c3      	ldr	r3, [r0, #12]
   145e2:	f1b2 0a00 	subs.w	sl, r2, #0
   145e6:	4604      	mov	r4, r0
   145e8:	460e      	mov	r6, r1
   145ea:	781a      	ldrb	r2, [r3, #0]
   145ec:	bf15      	itete	ne
   145ee:	f04f 091e 	movne.w	r9, #30
   145f2:	f04f 091b 	moveq.w	r9, #27
   145f6:	f04f 081d 	movne.w	r8, #29
   145fa:	f04f 081a 	moveq.w	r8, #26
   145fe:	bf14      	ite	ne
   14600:	271c      	movne	r7, #28
   14602:	2719      	moveq	r7, #25
   14604:	460d      	mov	r5, r1
   14606:	e018      	b.n	1463a <d_cv_qualifiers+0x5e>
   14608:	2a56      	cmp	r2, #86	; 0x56
   1460a:	d01f      	beq.n	1464c <d_cv_qualifiers+0x70>
   1460c:	2a4b      	cmp	r2, #75	; 0x4b
   1460e:	d024      	beq.n	1465a <d_cv_qualifiers+0x7e>
   14610:	2a44      	cmp	r2, #68	; 0x44
   14612:	d12d      	bne.n	14670 <d_cv_qualifiers+0x94>
   14614:	785a      	ldrb	r2, [r3, #1]
   14616:	2a78      	cmp	r2, #120	; 0x78
   14618:	d127      	bne.n	1466a <d_cv_qualifiers+0x8e>
   1461a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1461c:	3302      	adds	r3, #2
   1461e:	3211      	adds	r2, #17
   14620:	60e3      	str	r3, [r4, #12]
   14622:	6322      	str	r2, [r4, #48]	; 0x30
   14624:	214c      	movs	r1, #76	; 0x4c
   14626:	2300      	movs	r3, #0
   14628:	461a      	mov	r2, r3
   1462a:	4620      	mov	r0, r4
   1462c:	f7ff ff8a 	bl	14544 <d_make_comp>
   14630:	6028      	str	r0, [r5, #0]
   14632:	b1c8      	cbz	r0, 14668 <d_cv_qualifiers+0x8c>
   14634:	68e3      	ldr	r3, [r4, #12]
   14636:	781a      	ldrb	r2, [r3, #0]
   14638:	1d05      	adds	r5, r0, #4
   1463a:	2a72      	cmp	r2, #114	; 0x72
   1463c:	d1e4      	bne.n	14608 <d_cv_qualifiers+0x2c>
   1463e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14640:	3301      	adds	r3, #1
   14642:	3209      	adds	r2, #9
   14644:	60e3      	str	r3, [r4, #12]
   14646:	6322      	str	r2, [r4, #48]	; 0x30
   14648:	4639      	mov	r1, r7
   1464a:	e7ec      	b.n	14626 <d_cv_qualifiers+0x4a>
   1464c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1464e:	3301      	adds	r3, #1
   14650:	3209      	adds	r2, #9
   14652:	60e3      	str	r3, [r4, #12]
   14654:	6322      	str	r2, [r4, #48]	; 0x30
   14656:	4641      	mov	r1, r8
   14658:	e7e5      	b.n	14626 <d_cv_qualifiers+0x4a>
   1465a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1465c:	3301      	adds	r3, #1
   1465e:	3206      	adds	r2, #6
   14660:	60e3      	str	r3, [r4, #12]
   14662:	6322      	str	r2, [r4, #48]	; 0x30
   14664:	4649      	mov	r1, r9
   14666:	e7de      	b.n	14626 <d_cv_qualifiers+0x4a>
   14668:	4605      	mov	r5, r0
   1466a:	4628      	mov	r0, r5
   1466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14670:	f1ba 0f00 	cmp.w	sl, #0
   14674:	d1f9      	bne.n	1466a <d_cv_qualifiers+0x8e>
   14676:	2a46      	cmp	r2, #70	; 0x46
   14678:	d1f7      	bne.n	1466a <d_cv_qualifiers+0x8e>
   1467a:	42b5      	cmp	r5, r6
   1467c:	d0f5      	beq.n	1466a <d_cv_qualifiers+0x8e>
   1467e:	201d      	movs	r0, #29
   14680:	211e      	movs	r1, #30
   14682:	221c      	movs	r2, #28
   14684:	e007      	b.n	14696 <d_cv_qualifiers+0xba>
   14686:	2b1b      	cmp	r3, #27
   14688:	d00b      	beq.n	146a2 <d_cv_qualifiers+0xc6>
   1468a:	2b19      	cmp	r3, #25
   1468c:	d100      	bne.n	14690 <d_cv_qualifiers+0xb4>
   1468e:	7032      	strb	r2, [r6, #0]
   14690:	3604      	adds	r6, #4
   14692:	42b5      	cmp	r5, r6
   14694:	d0e9      	beq.n	1466a <d_cv_qualifiers+0x8e>
   14696:	6836      	ldr	r6, [r6, #0]
   14698:	7833      	ldrb	r3, [r6, #0]
   1469a:	2b1a      	cmp	r3, #26
   1469c:	d1f3      	bne.n	14686 <d_cv_qualifiers+0xaa>
   1469e:	7030      	strb	r0, [r6, #0]
   146a0:	e7f6      	b.n	14690 <d_cv_qualifiers+0xb4>
   146a2:	7031      	strb	r1, [r6, #0]
   146a4:	e7f4      	b.n	14690 <d_cv_qualifiers+0xb4>
   146a6:	bf00      	nop

000146a8 <d_ref_qualifier>:
   146a8:	b410      	push	{r4}
   146aa:	68c3      	ldr	r3, [r0, #12]
   146ac:	781c      	ldrb	r4, [r3, #0]
   146ae:	2c52      	cmp	r4, #82	; 0x52
   146b0:	460a      	mov	r2, r1
   146b2:	d00f      	beq.n	146d4 <d_ref_qualifier+0x2c>
   146b4:	2c4f      	cmp	r4, #79	; 0x4f
   146b6:	d003      	beq.n	146c0 <d_ref_qualifier+0x18>
   146b8:	4608      	mov	r0, r1
   146ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   146be:	4770      	bx	lr
   146c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
   146c2:	3103      	adds	r1, #3
   146c4:	6301      	str	r1, [r0, #48]	; 0x30
   146c6:	2120      	movs	r1, #32
   146c8:	3301      	adds	r3, #1
   146ca:	60c3      	str	r3, [r0, #12]
   146cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   146d0:	2300      	movs	r3, #0
   146d2:	e737      	b.n	14544 <d_make_comp>
   146d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   146d6:	3102      	adds	r1, #2
   146d8:	6301      	str	r1, [r0, #48]	; 0x30
   146da:	211f      	movs	r1, #31
   146dc:	e7f4      	b.n	146c8 <d_ref_qualifier+0x20>
   146de:	bf00      	nop

000146e0 <d_count_templates_scopes>:
   146e0:	2a00      	cmp	r2, #0
   146e2:	d04d      	beq.n	14780 <d_count_templates_scopes+0xa0>
   146e4:	b570      	push	{r4, r5, r6, lr}
   146e6:	4605      	mov	r5, r0
   146e8:	460e      	mov	r6, r1
   146ea:	4614      	mov	r4, r2
   146ec:	7823      	ldrb	r3, [r4, #0]
   146ee:	3b01      	subs	r3, #1
   146f0:	2b4c      	cmp	r3, #76	; 0x4c
   146f2:	d82b      	bhi.n	1474c <d_count_templates_scopes+0x6c>
   146f4:	e8df f003 	tbb	[pc, r3]
   146f8:	3f363636 	.word	0x3f363636
   146fc:	27272a2a 	.word	0x27272a2a
   14700:	36363636 	.word	0x36363636
   14704:	36363636 	.word	0x36363636
   14708:	36363636 	.word	0x36363636
   1470c:	2a363636 	.word	0x2a363636
   14710:	36363636 	.word	0x36363636
   14714:	36363636 	.word	0x36363636
   14718:	2f2f3636 	.word	0x2f2f3636
   1471c:	362a3636 	.word	0x362a3636
   14720:	2b363636 	.word	0x2b363636
   14724:	36363636 	.word	0x36363636
   14728:	3636272a 	.word	0x3636272a
   1472c:	36363636 	.word	0x36363636
   14730:	36363636 	.word	0x36363636
   14734:	2a363636 	.word	0x2a363636
   14738:	2b2b362a 	.word	0x2b2b362a
   1473c:	362a2b2b 	.word	0x362a2b2b
   14740:	36363636 	.word	0x36363636
   14744:	36          	.byte	0x36
   14745:	00          	.byte	0x00
   14746:	68a4      	ldr	r4, [r4, #8]
   14748:	2c00      	cmp	r4, #0
   1474a:	d1cf      	bne.n	146ec <d_count_templates_scopes+0xc>
   1474c:	bd70      	pop	{r4, r5, r6, pc}
   1474e:	6864      	ldr	r4, [r4, #4]
   14750:	2c00      	cmp	r4, #0
   14752:	d1cb      	bne.n	146ec <d_count_templates_scopes+0xc>
   14754:	e7fa      	b.n	1474c <d_count_templates_scopes+0x6c>
   14756:	6862      	ldr	r2, [r4, #4]
   14758:	7813      	ldrb	r3, [r2, #0]
   1475a:	2b05      	cmp	r3, #5
   1475c:	d103      	bne.n	14766 <d_count_templates_scopes+0x86>
   1475e:	6833      	ldr	r3, [r6, #0]
   14760:	3301      	adds	r3, #1
   14762:	6033      	str	r3, [r6, #0]
   14764:	6862      	ldr	r2, [r4, #4]
   14766:	4631      	mov	r1, r6
   14768:	4628      	mov	r0, r5
   1476a:	f7ff ffb9 	bl	146e0 <d_count_templates_scopes>
   1476e:	68a4      	ldr	r4, [r4, #8]
   14770:	2c00      	cmp	r4, #0
   14772:	d1bb      	bne.n	146ec <d_count_templates_scopes+0xc>
   14774:	e7ea      	b.n	1474c <d_count_templates_scopes+0x6c>
   14776:	682b      	ldr	r3, [r5, #0]
   14778:	3301      	adds	r3, #1
   1477a:	602b      	str	r3, [r5, #0]
   1477c:	6862      	ldr	r2, [r4, #4]
   1477e:	e7f2      	b.n	14766 <d_count_templates_scopes+0x86>
   14780:	4770      	bx	lr
   14782:	bf00      	nop

00014784 <d_append_buffer>:
   14784:	b37a      	cbz	r2, 147e6 <d_append_buffer+0x62>
   14786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1478a:	460d      	mov	r5, r1
   1478c:	4604      	mov	r4, r0
   1478e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14792:	18af      	adds	r7, r5, r2
   14794:	f04f 0800 	mov.w	r8, #0
   14798:	e009      	b.n	147ae <d_append_buffer+0x2a>
   1479a:	460b      	mov	r3, r1
   1479c:	42bd      	cmp	r5, r7
   1479e:	f101 0101 	add.w	r1, r1, #1
   147a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   147a6:	54e6      	strb	r6, [r4, r3]
   147a8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   147ac:	d019      	beq.n	147e2 <d_append_buffer+0x5e>
   147ae:	29ff      	cmp	r1, #255	; 0xff
   147b0:	f815 6b01 	ldrb.w	r6, [r5], #1
   147b4:	d1f1      	bne.n	1479a <d_append_buffer+0x16>
   147b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   147ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   147be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   147c2:	4620      	mov	r0, r4
   147c4:	4798      	blx	r3
   147c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   147ca:	3301      	adds	r3, #1
   147cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   147d0:	2300      	movs	r3, #0
   147d2:	2101      	movs	r1, #1
   147d4:	42bd      	cmp	r5, r7
   147d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   147da:	54e6      	strb	r6, [r4, r3]
   147dc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   147e0:	d1e5      	bne.n	147ae <d_append_buffer+0x2a>
   147e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   147e6:	4770      	bx	lr

000147e8 <d_number.isra.0>:
   147e8:	b470      	push	{r4, r5, r6}
   147ea:	6802      	ldr	r2, [r0, #0]
   147ec:	7811      	ldrb	r1, [r2, #0]
   147ee:	296e      	cmp	r1, #110	; 0x6e
   147f0:	d018      	beq.n	14824 <d_number.isra.0+0x3c>
   147f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   147f6:	2b09      	cmp	r3, #9
   147f8:	d81e      	bhi.n	14838 <d_number.isra.0+0x50>
   147fa:	2600      	movs	r6, #0
   147fc:	2300      	movs	r3, #0
   147fe:	3201      	adds	r2, #1
   14800:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14804:	6002      	str	r2, [r0, #0]
   14806:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   1480a:	7811      	ldrb	r1, [r2, #0]
   1480c:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14810:	2d09      	cmp	r5, #9
   14812:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   14816:	d9f2      	bls.n	147fe <d_number.isra.0+0x16>
   14818:	b10e      	cbz	r6, 1481e <d_number.isra.0+0x36>
   1481a:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   1481e:	4618      	mov	r0, r3
   14820:	bc70      	pop	{r4, r5, r6}
   14822:	4770      	bx	lr
   14824:	1c53      	adds	r3, r2, #1
   14826:	6003      	str	r3, [r0, #0]
   14828:	7851      	ldrb	r1, [r2, #1]
   1482a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1482e:	2a09      	cmp	r2, #9
   14830:	d802      	bhi.n	14838 <d_number.isra.0+0x50>
   14832:	461a      	mov	r2, r3
   14834:	2601      	movs	r6, #1
   14836:	e7e1      	b.n	147fc <d_number.isra.0+0x14>
   14838:	2300      	movs	r3, #0
   1483a:	e7f0      	b.n	1481e <d_number.isra.0+0x36>

0001483c <d_number_component>:
   1483c:	6943      	ldr	r3, [r0, #20]
   1483e:	6982      	ldr	r2, [r0, #24]
   14840:	4293      	cmp	r3, r2
   14842:	b510      	push	{r4, lr}
   14844:	da0f      	bge.n	14866 <d_number_component+0x2a>
   14846:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1484a:	6901      	ldr	r1, [r0, #16]
   1484c:	0092      	lsls	r2, r2, #2
   1484e:	3301      	adds	r3, #1
   14850:	188c      	adds	r4, r1, r2
   14852:	6143      	str	r3, [r0, #20]
   14854:	d005      	beq.n	14862 <d_number_component+0x26>
   14856:	2341      	movs	r3, #65	; 0x41
   14858:	300c      	adds	r0, #12
   1485a:	548b      	strb	r3, [r1, r2]
   1485c:	f7ff ffc4 	bl	147e8 <d_number.isra.0>
   14860:	6060      	str	r0, [r4, #4]
   14862:	4620      	mov	r0, r4
   14864:	bd10      	pop	{r4, pc}
   14866:	2400      	movs	r4, #0
   14868:	4620      	mov	r0, r4
   1486a:	bd10      	pop	{r4, pc}

0001486c <d_compact_number>:
   1486c:	b510      	push	{r4, lr}
   1486e:	68c3      	ldr	r3, [r0, #12]
   14870:	781a      	ldrb	r2, [r3, #0]
   14872:	2a5f      	cmp	r2, #95	; 0x5f
   14874:	4604      	mov	r4, r0
   14876:	d00d      	beq.n	14894 <d_compact_number+0x28>
   14878:	2a6e      	cmp	r2, #110	; 0x6e
   1487a:	d00f      	beq.n	1489c <d_compact_number+0x30>
   1487c:	300c      	adds	r0, #12
   1487e:	f7ff ffb3 	bl	147e8 <d_number.isra.0>
   14882:	3001      	adds	r0, #1
   14884:	d40a      	bmi.n	1489c <d_compact_number+0x30>
   14886:	68e3      	ldr	r3, [r4, #12]
   14888:	781a      	ldrb	r2, [r3, #0]
   1488a:	2a5f      	cmp	r2, #95	; 0x5f
   1488c:	d106      	bne.n	1489c <d_compact_number+0x30>
   1488e:	3301      	adds	r3, #1
   14890:	60e3      	str	r3, [r4, #12]
   14892:	bd10      	pop	{r4, pc}
   14894:	3301      	adds	r3, #1
   14896:	2000      	movs	r0, #0
   14898:	60e3      	str	r3, [r4, #12]
   1489a:	bd10      	pop	{r4, pc}
   1489c:	f04f 30ff 	mov.w	r0, #4294967295
   148a0:	bd10      	pop	{r4, pc}
   148a2:	bf00      	nop

000148a4 <d_template_param>:
   148a4:	b538      	push	{r3, r4, r5, lr}
   148a6:	68c3      	ldr	r3, [r0, #12]
   148a8:	781a      	ldrb	r2, [r3, #0]
   148aa:	2a54      	cmp	r2, #84	; 0x54
   148ac:	d001      	beq.n	148b2 <d_template_param+0xe>
   148ae:	2000      	movs	r0, #0
   148b0:	bd38      	pop	{r3, r4, r5, pc}
   148b2:	3301      	adds	r3, #1
   148b4:	60c3      	str	r3, [r0, #12]
   148b6:	4604      	mov	r4, r0
   148b8:	f7ff ffd8 	bl	1486c <d_compact_number>
   148bc:	1e05      	subs	r5, r0, #0
   148be:	dbf6      	blt.n	148ae <d_template_param+0xa>
   148c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   148c2:	6963      	ldr	r3, [r4, #20]
   148c4:	69a1      	ldr	r1, [r4, #24]
   148c6:	3201      	adds	r2, #1
   148c8:	428b      	cmp	r3, r1
   148ca:	62a2      	str	r2, [r4, #40]	; 0x28
   148cc:	daef      	bge.n	148ae <d_template_param+0xa>
   148ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   148d2:	6921      	ldr	r1, [r4, #16]
   148d4:	0092      	lsls	r2, r2, #2
   148d6:	3301      	adds	r3, #1
   148d8:	1888      	adds	r0, r1, r2
   148da:	6163      	str	r3, [r4, #20]
   148dc:	d002      	beq.n	148e4 <d_template_param+0x40>
   148de:	2305      	movs	r3, #5
   148e0:	548b      	strb	r3, [r1, r2]
   148e2:	6045      	str	r5, [r0, #4]
   148e4:	bd38      	pop	{r3, r4, r5, pc}
   148e6:	bf00      	nop

000148e8 <d_source_name>:
   148e8:	b570      	push	{r4, r5, r6, lr}
   148ea:	4604      	mov	r4, r0
   148ec:	300c      	adds	r0, #12
   148ee:	f7ff ff7b 	bl	147e8 <d_number.isra.0>
   148f2:	1e06      	subs	r6, r0, #0
   148f4:	dd4d      	ble.n	14992 <d_source_name+0xaa>
   148f6:	68e5      	ldr	r5, [r4, #12]
   148f8:	6863      	ldr	r3, [r4, #4]
   148fa:	1b5b      	subs	r3, r3, r5
   148fc:	429e      	cmp	r6, r3
   148fe:	dc2b      	bgt.n	14958 <d_source_name+0x70>
   14900:	68a2      	ldr	r2, [r4, #8]
   14902:	19ab      	adds	r3, r5, r6
   14904:	0752      	lsls	r2, r2, #29
   14906:	60e3      	str	r3, [r4, #12]
   14908:	d504      	bpl.n	14914 <d_source_name+0x2c>
   1490a:	5daa      	ldrb	r2, [r5, r6]
   1490c:	2a24      	cmp	r2, #36	; 0x24
   1490e:	bf04      	itt	eq
   14910:	3301      	addeq	r3, #1
   14912:	60e3      	streq	r3, [r4, #12]
   14914:	2e09      	cmp	r6, #9
   14916:	dd0c      	ble.n	14932 <d_source_name+0x4a>
   14918:	2208      	movs	r2, #8
   1491a:	491f      	ldr	r1, [pc, #124]	; (14998 <d_source_name+0xb0>)
   1491c:	4628      	mov	r0, r5
   1491e:	f009 fcb7 	bl	1e290 <memcmp>
   14922:	b930      	cbnz	r0, 14932 <d_source_name+0x4a>
   14924:	7a2b      	ldrb	r3, [r5, #8]
   14926:	2b2e      	cmp	r3, #46	; 0x2e
   14928:	d019      	beq.n	1495e <d_source_name+0x76>
   1492a:	2b5f      	cmp	r3, #95	; 0x5f
   1492c:	d017      	beq.n	1495e <d_source_name+0x76>
   1492e:	2b24      	cmp	r3, #36	; 0x24
   14930:	d015      	beq.n	1495e <d_source_name+0x76>
   14932:	6963      	ldr	r3, [r4, #20]
   14934:	69a2      	ldr	r2, [r4, #24]
   14936:	4293      	cmp	r3, r2
   14938:	da0e      	bge.n	14958 <d_source_name+0x70>
   1493a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1493e:	6921      	ldr	r1, [r4, #16]
   14940:	0092      	lsls	r2, r2, #2
   14942:	3301      	adds	r3, #1
   14944:	1888      	adds	r0, r1, r2
   14946:	6163      	str	r3, [r4, #20]
   14948:	d006      	beq.n	14958 <d_source_name+0x70>
   1494a:	b12d      	cbz	r5, 14958 <d_source_name+0x70>
   1494c:	2300      	movs	r3, #0
   1494e:	548b      	strb	r3, [r1, r2]
   14950:	6045      	str	r5, [r0, #4]
   14952:	6086      	str	r6, [r0, #8]
   14954:	62e0      	str	r0, [r4, #44]	; 0x2c
   14956:	bd70      	pop	{r4, r5, r6, pc}
   14958:	2000      	movs	r0, #0
   1495a:	62e0      	str	r0, [r4, #44]	; 0x2c
   1495c:	bd70      	pop	{r4, r5, r6, pc}
   1495e:	7a6b      	ldrb	r3, [r5, #9]
   14960:	2b4e      	cmp	r3, #78	; 0x4e
   14962:	d1e6      	bne.n	14932 <d_source_name+0x4a>
   14964:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14966:	6962      	ldr	r2, [r4, #20]
   14968:	69a1      	ldr	r1, [r4, #24]
   1496a:	3316      	adds	r3, #22
   1496c:	1b9e      	subs	r6, r3, r6
   1496e:	428a      	cmp	r2, r1
   14970:	6326      	str	r6, [r4, #48]	; 0x30
   14972:	daf1      	bge.n	14958 <d_source_name+0x70>
   14974:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14978:	6921      	ldr	r1, [r4, #16]
   1497a:	009b      	lsls	r3, r3, #2
   1497c:	3201      	adds	r2, #1
   1497e:	18c8      	adds	r0, r1, r3
   14980:	6162      	str	r2, [r4, #20]
   14982:	d0ea      	beq.n	1495a <d_source_name+0x72>
   14984:	2500      	movs	r5, #0
   14986:	54cd      	strb	r5, [r1, r3]
   14988:	4a04      	ldr	r2, [pc, #16]	; (1499c <d_source_name+0xb4>)
   1498a:	6042      	str	r2, [r0, #4]
   1498c:	2315      	movs	r3, #21
   1498e:	6083      	str	r3, [r0, #8]
   14990:	e7e3      	b.n	1495a <d_source_name+0x72>
   14992:	2000      	movs	r0, #0
   14994:	bd70      	pop	{r4, r5, r6, pc}
   14996:	bf00      	nop
   14998:	00024420 	.word	0x00024420
   1499c:	0002442c 	.word	0x0002442c

000149a0 <d_abi_tags>:
   149a0:	b570      	push	{r4, r5, r6, lr}
   149a2:	68c3      	ldr	r3, [r0, #12]
   149a4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   149a6:	781a      	ldrb	r2, [r3, #0]
   149a8:	2a42      	cmp	r2, #66	; 0x42
   149aa:	4604      	mov	r4, r0
   149ac:	460d      	mov	r5, r1
   149ae:	d10f      	bne.n	149d0 <d_abi_tags+0x30>
   149b0:	3301      	adds	r3, #1
   149b2:	60e3      	str	r3, [r4, #12]
   149b4:	4620      	mov	r0, r4
   149b6:	f7ff ff97 	bl	148e8 <d_source_name>
   149ba:	462a      	mov	r2, r5
   149bc:	4603      	mov	r3, r0
   149be:	214b      	movs	r1, #75	; 0x4b
   149c0:	4620      	mov	r0, r4
   149c2:	f7ff fdbf 	bl	14544 <d_make_comp>
   149c6:	68e3      	ldr	r3, [r4, #12]
   149c8:	781a      	ldrb	r2, [r3, #0]
   149ca:	2a42      	cmp	r2, #66	; 0x42
   149cc:	4605      	mov	r5, r0
   149ce:	d0ef      	beq.n	149b0 <d_abi_tags+0x10>
   149d0:	62e6      	str	r6, [r4, #44]	; 0x2c
   149d2:	4628      	mov	r0, r5
   149d4:	bd70      	pop	{r4, r5, r6, pc}
   149d6:	bf00      	nop

000149d8 <d_substitution>:
   149d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149dc:	4605      	mov	r5, r0
   149de:	68c0      	ldr	r0, [r0, #12]
   149e0:	7803      	ldrb	r3, [r0, #0]
   149e2:	2b53      	cmp	r3, #83	; 0x53
   149e4:	d002      	beq.n	149ec <d_substitution+0x14>
   149e6:	2000      	movs	r0, #0
   149e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149ec:	1c43      	adds	r3, r0, #1
   149ee:	60eb      	str	r3, [r5, #12]
   149f0:	7842      	ldrb	r2, [r0, #1]
   149f2:	b1a2      	cbz	r2, 14a1e <d_substitution+0x46>
   149f4:	1c83      	adds	r3, r0, #2
   149f6:	60eb      	str	r3, [r5, #12]
   149f8:	7842      	ldrb	r2, [r0, #1]
   149fa:	2a5f      	cmp	r2, #95	; 0x5f
   149fc:	d15a      	bne.n	14ab4 <d_substitution+0xdc>
   149fe:	2300      	movs	r3, #0
   14a00:	6a2a      	ldr	r2, [r5, #32]
   14a02:	4293      	cmp	r3, r2
   14a04:	d2ef      	bcs.n	149e6 <d_substitution+0xe>
   14a06:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a08:	69e9      	ldr	r1, [r5, #28]
   14a0a:	3201      	adds	r2, #1
   14a0c:	62aa      	str	r2, [r5, #40]	; 0x28
   14a0e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a16:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14a1a:	2b19      	cmp	r3, #25
   14a1c:	d94f      	bls.n	14abe <d_substitution+0xe6>
   14a1e:	68ab      	ldr	r3, [r5, #8]
   14a20:	f003 0308 	and.w	r3, r3, #8
   14a24:	2b00      	cmp	r3, #0
   14a26:	bf14      	ite	ne
   14a28:	2401      	movne	r4, #1
   14a2a:	2400      	moveq	r4, #0
   14a2c:	d101      	bne.n	14a32 <d_substitution+0x5a>
   14a2e:	2900      	cmp	r1, #0
   14a30:	d169      	bne.n	14b06 <d_substitution+0x12e>
   14a32:	4b46      	ldr	r3, [pc, #280]	; (14b4c <d_substitution+0x174>)
   14a34:	2174      	movs	r1, #116	; 0x74
   14a36:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   14a3a:	e003      	b.n	14a44 <d_substitution+0x6c>
   14a3c:	331c      	adds	r3, #28
   14a3e:	4283      	cmp	r3, r0
   14a40:	d2d1      	bcs.n	149e6 <d_substitution+0xe>
   14a42:	7819      	ldrb	r1, [r3, #0]
   14a44:	428a      	cmp	r2, r1
   14a46:	d1f9      	bne.n	14a3c <d_substitution+0x64>
   14a48:	695e      	ldr	r6, [r3, #20]
   14a4a:	2e00      	cmp	r6, #0
   14a4c:	d07b      	beq.n	14b46 <d_substitution+0x16e>
   14a4e:	696a      	ldr	r2, [r5, #20]
   14a50:	69a9      	ldr	r1, [r5, #24]
   14a52:	428a      	cmp	r2, r1
   14a54:	da63      	bge.n	14b1e <d_substitution+0x146>
   14a56:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14a5a:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14a5e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   14a62:	00bf      	lsls	r7, r7, #2
   14a64:	3201      	adds	r2, #1
   14a66:	eb1e 0007 	adds.w	r0, lr, r7
   14a6a:	616a      	str	r2, [r5, #20]
   14a6c:	d006      	beq.n	14a7c <d_substitution+0xa4>
   14a6e:	f04f 0c18 	mov.w	ip, #24
   14a72:	f80e c007 	strb.w	ip, [lr, r7]
   14a76:	6046      	str	r6, [r0, #4]
   14a78:	f8c0 8008 	str.w	r8, [r0, #8]
   14a7c:	62e8      	str	r0, [r5, #44]	; 0x2c
   14a7e:	2c00      	cmp	r4, #0
   14a80:	d04a      	beq.n	14b18 <d_substitution+0x140>
   14a82:	68de      	ldr	r6, [r3, #12]
   14a84:	691c      	ldr	r4, [r3, #16]
   14a86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14a88:	4291      	cmp	r1, r2
   14a8a:	4423      	add	r3, r4
   14a8c:	632b      	str	r3, [r5, #48]	; 0x30
   14a8e:	dd41      	ble.n	14b14 <d_substitution+0x13c>
   14a90:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14a94:	6929      	ldr	r1, [r5, #16]
   14a96:	009b      	lsls	r3, r3, #2
   14a98:	3201      	adds	r2, #1
   14a9a:	18c8      	adds	r0, r1, r3
   14a9c:	616a      	str	r2, [r5, #20]
   14a9e:	d003      	beq.n	14aa8 <d_substitution+0xd0>
   14aa0:	2218      	movs	r2, #24
   14aa2:	54ca      	strb	r2, [r1, r3]
   14aa4:	6046      	str	r6, [r0, #4]
   14aa6:	6084      	str	r4, [r0, #8]
   14aa8:	68eb      	ldr	r3, [r5, #12]
   14aaa:	781b      	ldrb	r3, [r3, #0]
   14aac:	2b42      	cmp	r3, #66	; 0x42
   14aae:	d038      	beq.n	14b22 <d_substitution+0x14a>
   14ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ab4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14ab8:	b2e3      	uxtb	r3, r4
   14aba:	2b09      	cmp	r3, #9
   14abc:	d8ab      	bhi.n	14a16 <d_substitution+0x3e>
   14abe:	2100      	movs	r1, #0
   14ac0:	e00d      	b.n	14ade <d_substitution+0x106>
   14ac2:	3b30      	subs	r3, #48	; 0x30
   14ac4:	4299      	cmp	r1, r3
   14ac6:	d88e      	bhi.n	149e6 <d_substitution+0xe>
   14ac8:	68e9      	ldr	r1, [r5, #12]
   14aca:	780a      	ldrb	r2, [r1, #0]
   14acc:	1c48      	adds	r0, r1, #1
   14ace:	b11a      	cbz	r2, 14ad8 <d_substitution+0x100>
   14ad0:	60e8      	str	r0, [r5, #12]
   14ad2:	780a      	ldrb	r2, [r1, #0]
   14ad4:	2a5f      	cmp	r2, #95	; 0x5f
   14ad6:	d014      	beq.n	14b02 <d_substitution+0x12a>
   14ad8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14adc:	4619      	mov	r1, r3
   14ade:	b2e4      	uxtb	r4, r4
   14ae0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14ae4:	2c09      	cmp	r4, #9
   14ae6:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14aea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14aee:	d9e8      	bls.n	14ac2 <d_substitution+0xea>
   14af0:	2819      	cmp	r0, #25
   14af2:	f63f af78 	bhi.w	149e6 <d_substitution+0xe>
   14af6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14afa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14afe:	3b37      	subs	r3, #55	; 0x37
   14b00:	e7e0      	b.n	14ac4 <d_substitution+0xec>
   14b02:	3301      	adds	r3, #1
   14b04:	e77c      	b.n	14a00 <d_substitution+0x28>
   14b06:	68eb      	ldr	r3, [r5, #12]
   14b08:	781b      	ldrb	r3, [r3, #0]
   14b0a:	3b43      	subs	r3, #67	; 0x43
   14b0c:	2b01      	cmp	r3, #1
   14b0e:	bf98      	it	ls
   14b10:	2401      	movls	r4, #1
   14b12:	e78e      	b.n	14a32 <d_substitution+0x5a>
   14b14:	2000      	movs	r0, #0
   14b16:	e7c7      	b.n	14aa8 <d_substitution+0xd0>
   14b18:	685e      	ldr	r6, [r3, #4]
   14b1a:	689c      	ldr	r4, [r3, #8]
   14b1c:	e7b3      	b.n	14a86 <d_substitution+0xae>
   14b1e:	2000      	movs	r0, #0
   14b20:	e7ac      	b.n	14a7c <d_substitution+0xa4>
   14b22:	4601      	mov	r1, r0
   14b24:	4628      	mov	r0, r5
   14b26:	f7ff ff3b 	bl	149a0 <d_abi_tags>
   14b2a:	2800      	cmp	r0, #0
   14b2c:	f43f af5b 	beq.w	149e6 <d_substitution+0xe>
   14b30:	6a2b      	ldr	r3, [r5, #32]
   14b32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14b34:	4293      	cmp	r3, r2
   14b36:	dabb      	bge.n	14ab0 <d_substitution+0xd8>
   14b38:	69e9      	ldr	r1, [r5, #28]
   14b3a:	1c5a      	adds	r2, r3, #1
   14b3c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14b40:	622a      	str	r2, [r5, #32]
   14b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b46:	69a9      	ldr	r1, [r5, #24]
   14b48:	696a      	ldr	r2, [r5, #20]
   14b4a:	e798      	b.n	14a7e <d_substitution+0xa6>
   14b4c:	00023c88 	.word	0x00023c88

00014b50 <d_call_offset>:
   14b50:	b538      	push	{r3, r4, r5, lr}
   14b52:	4604      	mov	r4, r0
   14b54:	b929      	cbnz	r1, 14b62 <d_call_offset+0x12>
   14b56:	68c3      	ldr	r3, [r0, #12]
   14b58:	781a      	ldrb	r2, [r3, #0]
   14b5a:	b132      	cbz	r2, 14b6a <d_call_offset+0x1a>
   14b5c:	1c5a      	adds	r2, r3, #1
   14b5e:	60c2      	str	r2, [r0, #12]
   14b60:	7819      	ldrb	r1, [r3, #0]
   14b62:	2968      	cmp	r1, #104	; 0x68
   14b64:	d019      	beq.n	14b9a <d_call_offset+0x4a>
   14b66:	2976      	cmp	r1, #118	; 0x76
   14b68:	d001      	beq.n	14b6e <d_call_offset+0x1e>
   14b6a:	2000      	movs	r0, #0
   14b6c:	bd38      	pop	{r3, r4, r5, pc}
   14b6e:	f104 050c 	add.w	r5, r4, #12
   14b72:	4628      	mov	r0, r5
   14b74:	f7ff fe38 	bl	147e8 <d_number.isra.0>
   14b78:	68e3      	ldr	r3, [r4, #12]
   14b7a:	781a      	ldrb	r2, [r3, #0]
   14b7c:	2a5f      	cmp	r2, #95	; 0x5f
   14b7e:	d1f4      	bne.n	14b6a <d_call_offset+0x1a>
   14b80:	3301      	adds	r3, #1
   14b82:	60e3      	str	r3, [r4, #12]
   14b84:	4628      	mov	r0, r5
   14b86:	f7ff fe2f 	bl	147e8 <d_number.isra.0>
   14b8a:	68e3      	ldr	r3, [r4, #12]
   14b8c:	781a      	ldrb	r2, [r3, #0]
   14b8e:	2a5f      	cmp	r2, #95	; 0x5f
   14b90:	d1eb      	bne.n	14b6a <d_call_offset+0x1a>
   14b92:	3301      	adds	r3, #1
   14b94:	60e3      	str	r3, [r4, #12]
   14b96:	2001      	movs	r0, #1
   14b98:	bd38      	pop	{r3, r4, r5, pc}
   14b9a:	f104 000c 	add.w	r0, r4, #12
   14b9e:	f7ff fe23 	bl	147e8 <d_number.isra.0>
   14ba2:	e7f2      	b.n	14b8a <d_call_offset+0x3a>

00014ba4 <d_lookup_template_argument.isra.6>:
   14ba4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14ba8:	b19b      	cbz	r3, 14bd2 <d_lookup_template_argument.isra.6+0x2e>
   14baa:	680a      	ldr	r2, [r1, #0]
   14bac:	685b      	ldr	r3, [r3, #4]
   14bae:	2a00      	cmp	r2, #0
   14bb0:	689b      	ldr	r3, [r3, #8]
   14bb2:	db09      	blt.n	14bc8 <d_lookup_template_argument.isra.6+0x24>
   14bb4:	b923      	cbnz	r3, 14bc0 <d_lookup_template_argument.isra.6+0x1c>
   14bb6:	e007      	b.n	14bc8 <d_lookup_template_argument.isra.6+0x24>
   14bb8:	b142      	cbz	r2, 14bcc <d_lookup_template_argument.isra.6+0x28>
   14bba:	689b      	ldr	r3, [r3, #8]
   14bbc:	3a01      	subs	r2, #1
   14bbe:	b11b      	cbz	r3, 14bc8 <d_lookup_template_argument.isra.6+0x24>
   14bc0:	7819      	ldrb	r1, [r3, #0]
   14bc2:	292f      	cmp	r1, #47	; 0x2f
   14bc4:	d0f8      	beq.n	14bb8 <d_lookup_template_argument.isra.6+0x14>
   14bc6:	2300      	movs	r3, #0
   14bc8:	4618      	mov	r0, r3
   14bca:	4770      	bx	lr
   14bcc:	685b      	ldr	r3, [r3, #4]
   14bce:	4618      	mov	r0, r3
   14bd0:	4770      	bx	lr
   14bd2:	2201      	movs	r2, #1
   14bd4:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14bd8:	e7f6      	b.n	14bc8 <d_lookup_template_argument.isra.6+0x24>
   14bda:	bf00      	nop

00014bdc <d_find_pack>:
   14bdc:	2900      	cmp	r1, #0
   14bde:	d041      	beq.n	14c64 <d_find_pack+0x88>
   14be0:	b538      	push	{r3, r4, r5, lr}
   14be2:	4605      	mov	r5, r0
   14be4:	460c      	mov	r4, r1
   14be6:	7823      	ldrb	r3, [r4, #0]
   14be8:	2b4b      	cmp	r3, #75	; 0x4b
   14bea:	d827      	bhi.n	14c3c <d_find_pack+0x60>
   14bec:	e8df f003 	tbb	[pc, r3]
   14bf0:	2626262e 	.word	0x2626262e
   14bf4:	2b2e3026 	.word	0x2b2e3026
   14bf8:	2626262b 	.word	0x2626262b
   14bfc:	26262626 	.word	0x26262626
   14c00:	26262626 	.word	0x26262626
   14c04:	26262626 	.word	0x26262626
   14c08:	2626262e 	.word	0x2626262e
   14c0c:	26262626 	.word	0x26262626
   14c10:	26262626 	.word	0x26262626
   14c14:	2e262626 	.word	0x2e262626
   14c18:	26262626 	.word	0x26262626
   14c1c:	2626262e 	.word	0x2626262e
   14c20:	262b2e26 	.word	0x262b2e26
   14c24:	26262626 	.word	0x26262626
   14c28:	26262626 	.word	0x26262626
   14c2c:	26262626 	.word	0x26262626
   14c30:	26262e2e 	.word	0x26262e2e
   14c34:	2e2e2e26 	.word	0x2e2e2e26
   14c38:	2e2e2626 	.word	0x2e2e2626
   14c3c:	6861      	ldr	r1, [r4, #4]
   14c3e:	4628      	mov	r0, r5
   14c40:	f7ff ffcc 	bl	14bdc <d_find_pack>
   14c44:	b918      	cbnz	r0, 14c4e <d_find_pack+0x72>
   14c46:	68a4      	ldr	r4, [r4, #8]
   14c48:	2c00      	cmp	r4, #0
   14c4a:	d1cc      	bne.n	14be6 <d_find_pack+0xa>
   14c4c:	2000      	movs	r0, #0
   14c4e:	bd38      	pop	{r3, r4, r5, pc}
   14c50:	1d21      	adds	r1, r4, #4
   14c52:	4628      	mov	r0, r5
   14c54:	f7ff ffa6 	bl	14ba4 <d_lookup_template_argument.isra.6>
   14c58:	2800      	cmp	r0, #0
   14c5a:	d0f7      	beq.n	14c4c <d_find_pack+0x70>
   14c5c:	7803      	ldrb	r3, [r0, #0]
   14c5e:	2b2f      	cmp	r3, #47	; 0x2f
   14c60:	d1f4      	bne.n	14c4c <d_find_pack+0x70>
   14c62:	bd38      	pop	{r3, r4, r5, pc}
   14c64:	2000      	movs	r0, #0
   14c66:	4770      	bx	lr

00014c68 <d_growable_string_callback_adapter>:
   14c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c6a:	4615      	mov	r5, r2
   14c6c:	6852      	ldr	r2, [r2, #4]
   14c6e:	68ac      	ldr	r4, [r5, #8]
   14c70:	1c4b      	adds	r3, r1, #1
   14c72:	4413      	add	r3, r2
   14c74:	42a3      	cmp	r3, r4
   14c76:	b083      	sub	sp, #12
   14c78:	460e      	mov	r6, r1
   14c7a:	4607      	mov	r7, r0
   14c7c:	d813      	bhi.n	14ca6 <d_growable_string_callback_adapter+0x3e>
   14c7e:	68ec      	ldr	r4, [r5, #12]
   14c80:	b10c      	cbz	r4, 14c86 <d_growable_string_callback_adapter+0x1e>
   14c82:	b003      	add	sp, #12
   14c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c86:	e895 0009 	ldmia.w	r5, {r0, r3}
   14c8a:	4632      	mov	r2, r6
   14c8c:	4639      	mov	r1, r7
   14c8e:	4418      	add	r0, r3
   14c90:	f009 fb2e 	bl	1e2f0 <memcpy>
   14c94:	682b      	ldr	r3, [r5, #0]
   14c96:	686a      	ldr	r2, [r5, #4]
   14c98:	4433      	add	r3, r6
   14c9a:	549c      	strb	r4, [r3, r2]
   14c9c:	686b      	ldr	r3, [r5, #4]
   14c9e:	441e      	add	r6, r3
   14ca0:	606e      	str	r6, [r5, #4]
   14ca2:	b003      	add	sp, #12
   14ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ca6:	68ea      	ldr	r2, [r5, #12]
   14ca8:	2a00      	cmp	r2, #0
   14caa:	d1ea      	bne.n	14c82 <d_growable_string_callback_adapter+0x1a>
   14cac:	b91c      	cbnz	r4, 14cb6 <d_growable_string_callback_adapter+0x4e>
   14cae:	2b02      	cmp	r3, #2
   14cb0:	f04f 0402 	mov.w	r4, #2
   14cb4:	d902      	bls.n	14cbc <d_growable_string_callback_adapter+0x54>
   14cb6:	0064      	lsls	r4, r4, #1
   14cb8:	42a3      	cmp	r3, r4
   14cba:	d8fc      	bhi.n	14cb6 <d_growable_string_callback_adapter+0x4e>
   14cbc:	4621      	mov	r1, r4
   14cbe:	6828      	ldr	r0, [r5, #0]
   14cc0:	f009 fca6 	bl	1e610 <realloc>
   14cc4:	b110      	cbz	r0, 14ccc <d_growable_string_callback_adapter+0x64>
   14cc6:	6028      	str	r0, [r5, #0]
   14cc8:	60ac      	str	r4, [r5, #8]
   14cca:	e7d8      	b.n	14c7e <d_growable_string_callback_adapter+0x16>
   14ccc:	9001      	str	r0, [sp, #4]
   14cce:	6828      	ldr	r0, [r5, #0]
   14cd0:	f008 ffc0 	bl	1dc54 <free>
   14cd4:	9b01      	ldr	r3, [sp, #4]
   14cd6:	602b      	str	r3, [r5, #0]
   14cd8:	2201      	movs	r2, #1
   14cda:	606b      	str	r3, [r5, #4]
   14cdc:	60ab      	str	r3, [r5, #8]
   14cde:	60ea      	str	r2, [r5, #12]
   14ce0:	e7cf      	b.n	14c82 <d_growable_string_callback_adapter+0x1a>
   14ce2:	bf00      	nop

00014ce4 <d_append_num>:
   14ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ce8:	b088      	sub	sp, #32
   14cea:	460a      	mov	r2, r1
   14cec:	4604      	mov	r4, r0
   14cee:	491b      	ldr	r1, [pc, #108]	; (14d5c <d_append_num+0x78>)
   14cf0:	a801      	add	r0, sp, #4
   14cf2:	f009 fe9b 	bl	1ea2c <sprintf>
   14cf6:	a801      	add	r0, sp, #4
   14cf8:	f00a f842 	bl	1ed80 <strlen>
   14cfc:	b350      	cbz	r0, 14d54 <d_append_num+0x70>
   14cfe:	ad01      	add	r5, sp, #4
   14d00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14d04:	182f      	adds	r7, r5, r0
   14d06:	f04f 0800 	mov.w	r8, #0
   14d0a:	e009      	b.n	14d20 <d_append_num+0x3c>
   14d0c:	460b      	mov	r3, r1
   14d0e:	42bd      	cmp	r5, r7
   14d10:	f101 0101 	add.w	r1, r1, #1
   14d14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d18:	54e6      	strb	r6, [r4, r3]
   14d1a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14d1e:	d019      	beq.n	14d54 <d_append_num+0x70>
   14d20:	29ff      	cmp	r1, #255	; 0xff
   14d22:	f815 6b01 	ldrb.w	r6, [r5], #1
   14d26:	d1f1      	bne.n	14d0c <d_append_num+0x28>
   14d28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14d2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14d34:	4620      	mov	r0, r4
   14d36:	4798      	blx	r3
   14d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14d3c:	3301      	adds	r3, #1
   14d3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14d42:	2300      	movs	r3, #0
   14d44:	2101      	movs	r1, #1
   14d46:	42bd      	cmp	r5, r7
   14d48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d4c:	54e6      	strb	r6, [r4, r3]
   14d4e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14d52:	d1e5      	bne.n	14d20 <d_append_num+0x3c>
   14d54:	b008      	add	sp, #32
   14d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d5a:	bf00      	nop
   14d5c:	00024444 	.word	0x00024444

00014d60 <d_exprlist>:
   14d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d64:	68c3      	ldr	r3, [r0, #12]
   14d66:	781d      	ldrb	r5, [r3, #0]
   14d68:	b083      	sub	sp, #12
   14d6a:	2200      	movs	r2, #0
   14d6c:	428d      	cmp	r5, r1
   14d6e:	4604      	mov	r4, r0
   14d70:	9201      	str	r2, [sp, #4]
   14d72:	f000 81c6 	beq.w	15102 <d_exprlist+0x3a2>
   14d76:	4688      	mov	r8, r1
   14d78:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15218 <d_exprlist+0x4b8>
   14d7c:	ae01      	add	r6, sp, #4
   14d7e:	e023      	b.n	14dc8 <d_exprlist+0x68>
   14d80:	2a66      	cmp	r2, #102	; 0x66
   14d82:	d04c      	beq.n	14e1e <d_exprlist+0xbe>
   14d84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14d88:	2909      	cmp	r1, #9
   14d8a:	f200 8217 	bhi.w	151bc <d_exprlist+0x45c>
   14d8e:	4620      	mov	r0, r4
   14d90:	f001 fb10 	bl	163b4 <d_unqualified_name>
   14d94:	4605      	mov	r5, r0
   14d96:	2800      	cmp	r0, #0
   14d98:	f000 8170 	beq.w	1507c <d_exprlist+0x31c>
   14d9c:	68e3      	ldr	r3, [r4, #12]
   14d9e:	781b      	ldrb	r3, [r3, #0]
   14da0:	2b49      	cmp	r3, #73	; 0x49
   14da2:	f000 8092 	beq.w	14eca <d_exprlist+0x16a>
   14da6:	6367      	str	r7, [r4, #52]	; 0x34
   14da8:	462a      	mov	r2, r5
   14daa:	2300      	movs	r3, #0
   14dac:	212e      	movs	r1, #46	; 0x2e
   14dae:	4620      	mov	r0, r4
   14db0:	f7ff fbc8 	bl	14544 <d_make_comp>
   14db4:	6030      	str	r0, [r6, #0]
   14db6:	2800      	cmp	r0, #0
   14db8:	d05b      	beq.n	14e72 <d_exprlist+0x112>
   14dba:	68e3      	ldr	r3, [r4, #12]
   14dbc:	781a      	ldrb	r2, [r3, #0]
   14dbe:	4542      	cmp	r2, r8
   14dc0:	f100 0608 	add.w	r6, r0, #8
   14dc4:	f000 8107 	beq.w	14fd6 <d_exprlist+0x276>
   14dc8:	2501      	movs	r5, #1
   14dca:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14dcc:	6365      	str	r5, [r4, #52]	; 0x34
   14dce:	781a      	ldrb	r2, [r3, #0]
   14dd0:	2a4c      	cmp	r2, #76	; 0x4c
   14dd2:	d047      	beq.n	14e64 <d_exprlist+0x104>
   14dd4:	2a54      	cmp	r2, #84	; 0x54
   14dd6:	d051      	beq.n	14e7c <d_exprlist+0x11c>
   14dd8:	2a73      	cmp	r2, #115	; 0x73
   14dda:	d1d1      	bne.n	14d80 <d_exprlist+0x20>
   14ddc:	785a      	ldrb	r2, [r3, #1]
   14dde:	2a72      	cmp	r2, #114	; 0x72
   14de0:	f000 80e2 	beq.w	14fa8 <d_exprlist+0x248>
   14de4:	2a70      	cmp	r2, #112	; 0x70
   14de6:	f000 80fd 	beq.w	14fe4 <d_exprlist+0x284>
   14dea:	4620      	mov	r0, r4
   14dec:	f001 fa22 	bl	16234 <d_operator_name>
   14df0:	4605      	mov	r5, r0
   14df2:	2800      	cmp	r0, #0
   14df4:	f000 8142 	beq.w	1507c <d_exprlist+0x31c>
   14df8:	782b      	ldrb	r3, [r5, #0]
   14dfa:	2b31      	cmp	r3, #49	; 0x31
   14dfc:	d043      	beq.n	14e86 <d_exprlist+0x126>
   14dfe:	2b32      	cmp	r3, #50	; 0x32
   14e00:	d05c      	beq.n	14ebc <d_exprlist+0x15c>
   14e02:	2b33      	cmp	r3, #51	; 0x33
   14e04:	d17b      	bne.n	14efe <d_exprlist+0x19e>
   14e06:	68e3      	ldr	r3, [r4, #12]
   14e08:	781a      	ldrb	r2, [r3, #0]
   14e0a:	2a5f      	cmp	r2, #95	; 0x5f
   14e0c:	f040 80c1 	bne.w	14f92 <d_exprlist+0x232>
   14e10:	3301      	adds	r3, #1
   14e12:	60e3      	str	r3, [r4, #12]
   14e14:	2145      	movs	r1, #69	; 0x45
   14e16:	4620      	mov	r0, r4
   14e18:	f7ff ffa2 	bl	14d60 <d_exprlist>
   14e1c:	e0bc      	b.n	14f98 <d_exprlist+0x238>
   14e1e:	785a      	ldrb	r2, [r3, #1]
   14e20:	2a70      	cmp	r2, #112	; 0x70
   14e22:	d1e2      	bne.n	14dea <d_exprlist+0x8a>
   14e24:	1c9a      	adds	r2, r3, #2
   14e26:	60e2      	str	r2, [r4, #12]
   14e28:	789a      	ldrb	r2, [r3, #2]
   14e2a:	2a54      	cmp	r2, #84	; 0x54
   14e2c:	d069      	beq.n	14f02 <d_exprlist+0x1a2>
   14e2e:	4620      	mov	r0, r4
   14e30:	f7ff fd1c 	bl	1486c <d_compact_number>
   14e34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14e38:	4298      	cmp	r0, r3
   14e3a:	d060      	beq.n	14efe <d_exprlist+0x19e>
   14e3c:	1c43      	adds	r3, r0, #1
   14e3e:	d05e      	beq.n	14efe <d_exprlist+0x19e>
   14e40:	3001      	adds	r0, #1
   14e42:	6963      	ldr	r3, [r4, #20]
   14e44:	69a2      	ldr	r2, [r4, #24]
   14e46:	4293      	cmp	r3, r2
   14e48:	da59      	bge.n	14efe <d_exprlist+0x19e>
   14e4a:	6922      	ldr	r2, [r4, #16]
   14e4c:	1c59      	adds	r1, r3, #1
   14e4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14e52:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14e56:	6161      	str	r1, [r4, #20]
   14e58:	d051      	beq.n	14efe <d_exprlist+0x19e>
   14e5a:	2106      	movs	r1, #6
   14e5c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14e60:	6068      	str	r0, [r5, #4]
   14e62:	e7a0      	b.n	14da6 <d_exprlist+0x46>
   14e64:	4620      	mov	r0, r4
   14e66:	f001 fef3 	bl	16c50 <d_expr_primary>
   14e6a:	4605      	mov	r5, r0
   14e6c:	6367      	str	r7, [r4, #52]	; 0x34
   14e6e:	2d00      	cmp	r5, #0
   14e70:	d19a      	bne.n	14da8 <d_exprlist+0x48>
   14e72:	2500      	movs	r5, #0
   14e74:	4628      	mov	r0, r5
   14e76:	b003      	add	sp, #12
   14e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e7c:	4620      	mov	r0, r4
   14e7e:	f7ff fd11 	bl	148a4 <d_template_param>
   14e82:	4605      	mov	r5, r0
   14e84:	e7f2      	b.n	14e6c <d_exprlist+0x10c>
   14e86:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14e8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14e8c:	f8db 2008 	ldr.w	r2, [fp, #8]
   14e90:	f8db a000 	ldr.w	sl, [fp]
   14e94:	3a02      	subs	r2, #2
   14e96:	4413      	add	r3, r2
   14e98:	6323      	str	r3, [r4, #48]	; 0x30
   14e9a:	4650      	mov	r0, sl
   14e9c:	4649      	mov	r1, r9
   14e9e:	f009 fdf3 	bl	1ea88 <strcmp>
   14ea2:	2800      	cmp	r0, #0
   14ea4:	f000 80e6 	beq.w	15074 <d_exprlist+0x314>
   14ea8:	f8db 300c 	ldr.w	r3, [fp, #12]
   14eac:	2b03      	cmp	r3, #3
   14eae:	d826      	bhi.n	14efe <d_exprlist+0x19e>
   14eb0:	e8df f013 	tbh	[pc, r3, lsl #1]
   14eb4:	0135002b 	.word	0x0135002b
   14eb8:	00a50033 	.word	0x00a50033
   14ebc:	686b      	ldr	r3, [r5, #4]
   14ebe:	2b03      	cmp	r3, #3
   14ec0:	d81d      	bhi.n	14efe <d_exprlist+0x19e>
   14ec2:	e8df f003 	tbb	[pc, r3]
   14ec6:	6622      	.short	0x6622
   14ec8:	1c1c      	.short	0x1c1c
   14eca:	4620      	mov	r0, r4
   14ecc:	f000 fc04 	bl	156d8 <d_template_args>
   14ed0:	462a      	mov	r2, r5
   14ed2:	4603      	mov	r3, r0
   14ed4:	2104      	movs	r1, #4
   14ed6:	4620      	mov	r0, r4
   14ed8:	f7ff fb34 	bl	14544 <d_make_comp>
   14edc:	4605      	mov	r5, r0
   14ede:	e7c5      	b.n	14e6c <d_exprlist+0x10c>
   14ee0:	2a74      	cmp	r2, #116	; 0x74
   14ee2:	d182      	bne.n	14dea <d_exprlist+0x8a>
   14ee4:	785b      	ldrb	r3, [r3, #1]
   14ee6:	2b6c      	cmp	r3, #108	; 0x6c
   14ee8:	f47f af7f 	bne.w	14dea <d_exprlist+0x8a>
   14eec:	4620      	mov	r0, r4
   14eee:	f000 fdb9 	bl	15a64 <d_type>
   14ef2:	68e3      	ldr	r3, [r4, #12]
   14ef4:	785a      	ldrb	r2, [r3, #1]
   14ef6:	4605      	mov	r5, r0
   14ef8:	2a00      	cmp	r2, #0
   14efa:	f040 8169 	bne.w	151d0 <d_exprlist+0x470>
   14efe:	6367      	str	r7, [r4, #52]	; 0x34
   14f00:	e7b7      	b.n	14e72 <d_exprlist+0x112>
   14f02:	3303      	adds	r3, #3
   14f04:	60e3      	str	r3, [r4, #12]
   14f06:	2000      	movs	r0, #0
   14f08:	e79b      	b.n	14e42 <d_exprlist+0xe2>
   14f0a:	462a      	mov	r2, r5
   14f0c:	2300      	movs	r3, #0
   14f0e:	2135      	movs	r1, #53	; 0x35
   14f10:	4620      	mov	r0, r4
   14f12:	f7ff fb17 	bl	14544 <d_make_comp>
   14f16:	4605      	mov	r5, r0
   14f18:	e7a8      	b.n	14e6c <d_exprlist+0x10c>
   14f1a:	f1ba 0f00 	cmp.w	sl, #0
   14f1e:	d0ee      	beq.n	14efe <d_exprlist+0x19e>
   14f20:	686b      	ldr	r3, [r5, #4]
   14f22:	681b      	ldr	r3, [r3, #0]
   14f24:	785a      	ldrb	r2, [r3, #1]
   14f26:	2a63      	cmp	r2, #99	; 0x63
   14f28:	f000 80d2 	beq.w	150d0 <d_exprlist+0x370>
   14f2c:	f89a 3000 	ldrb.w	r3, [sl]
   14f30:	2b66      	cmp	r3, #102	; 0x66
   14f32:	f000 80ef 	beq.w	15114 <d_exprlist+0x3b4>
   14f36:	4620      	mov	r0, r4
   14f38:	f000 f970 	bl	1521c <d_expression_1>
   14f3c:	4683      	mov	fp, r0
   14f3e:	49b1      	ldr	r1, [pc, #708]	; (15204 <d_exprlist+0x4a4>)
   14f40:	4650      	mov	r0, sl
   14f42:	f009 fda1 	bl	1ea88 <strcmp>
   14f46:	2800      	cmp	r0, #0
   14f48:	f000 809d 	beq.w	15086 <d_exprlist+0x326>
   14f4c:	49ae      	ldr	r1, [pc, #696]	; (15208 <d_exprlist+0x4a8>)
   14f4e:	4650      	mov	r0, sl
   14f50:	f009 fd9a 	bl	1ea88 <strcmp>
   14f54:	b130      	cbz	r0, 14f64 <d_exprlist+0x204>
   14f56:	4650      	mov	r0, sl
   14f58:	49ac      	ldr	r1, [pc, #688]	; (1520c <d_exprlist+0x4ac>)
   14f5a:	f009 fd95 	bl	1ea88 <strcmp>
   14f5e:	2800      	cmp	r0, #0
   14f60:	f040 8083 	bne.w	1506a <d_exprlist+0x30a>
   14f64:	4620      	mov	r0, r4
   14f66:	f001 fa25 	bl	163b4 <d_unqualified_name>
   14f6a:	68e3      	ldr	r3, [r4, #12]
   14f6c:	781b      	ldrb	r3, [r3, #0]
   14f6e:	2b49      	cmp	r3, #73	; 0x49
   14f70:	4682      	mov	sl, r0
   14f72:	f000 80e9 	beq.w	15148 <d_exprlist+0x3e8>
   14f76:	4653      	mov	r3, sl
   14f78:	465a      	mov	r2, fp
   14f7a:	2138      	movs	r1, #56	; 0x38
   14f7c:	4620      	mov	r0, r4
   14f7e:	f7ff fae1 	bl	14544 <d_make_comp>
   14f82:	462a      	mov	r2, r5
   14f84:	4603      	mov	r3, r0
   14f86:	2137      	movs	r1, #55	; 0x37
   14f88:	4620      	mov	r0, r4
   14f8a:	f7ff fadb 	bl	14544 <d_make_comp>
   14f8e:	4605      	mov	r5, r0
   14f90:	e76c      	b.n	14e6c <d_exprlist+0x10c>
   14f92:	4620      	mov	r0, r4
   14f94:	f000 f942 	bl	1521c <d_expression_1>
   14f98:	4603      	mov	r3, r0
   14f9a:	462a      	mov	r2, r5
   14f9c:	2136      	movs	r1, #54	; 0x36
   14f9e:	4620      	mov	r0, r4
   14fa0:	f7ff fad0 	bl	14544 <d_make_comp>
   14fa4:	4605      	mov	r5, r0
   14fa6:	e761      	b.n	14e6c <d_exprlist+0x10c>
   14fa8:	3302      	adds	r3, #2
   14faa:	60e3      	str	r3, [r4, #12]
   14fac:	4620      	mov	r0, r4
   14fae:	f000 fd59 	bl	15a64 <d_type>
   14fb2:	4682      	mov	sl, r0
   14fb4:	4620      	mov	r0, r4
   14fb6:	f001 f9fd 	bl	163b4 <d_unqualified_name>
   14fba:	68e3      	ldr	r3, [r4, #12]
   14fbc:	781b      	ldrb	r3, [r3, #0]
   14fbe:	2b49      	cmp	r3, #73	; 0x49
   14fc0:	4683      	mov	fp, r0
   14fc2:	f000 8093 	beq.w	150ec <d_exprlist+0x38c>
   14fc6:	4603      	mov	r3, r0
   14fc8:	4629      	mov	r1, r5
   14fca:	4652      	mov	r2, sl
   14fcc:	4620      	mov	r0, r4
   14fce:	f7ff fab9 	bl	14544 <d_make_comp>
   14fd2:	4605      	mov	r5, r0
   14fd4:	e74a      	b.n	14e6c <d_exprlist+0x10c>
   14fd6:	9d01      	ldr	r5, [sp, #4]
   14fd8:	3301      	adds	r3, #1
   14fda:	4628      	mov	r0, r5
   14fdc:	60e3      	str	r3, [r4, #12]
   14fde:	b003      	add	sp, #12
   14fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe4:	3302      	adds	r3, #2
   14fe6:	60e3      	str	r3, [r4, #12]
   14fe8:	4620      	mov	r0, r4
   14fea:	f000 f917 	bl	1521c <d_expression_1>
   14fee:	2300      	movs	r3, #0
   14ff0:	4602      	mov	r2, r0
   14ff2:	214a      	movs	r1, #74	; 0x4a
   14ff4:	4620      	mov	r0, r4
   14ff6:	f7ff faa5 	bl	14544 <d_make_comp>
   14ffa:	4605      	mov	r5, r0
   14ffc:	e736      	b.n	14e6c <d_exprlist+0x10c>
   14ffe:	f1ba 0f00 	cmp.w	sl, #0
   15002:	f43f af7c 	beq.w	14efe <d_exprlist+0x19e>
   15006:	4982      	ldr	r1, [pc, #520]	; (15210 <d_exprlist+0x4b0>)
   15008:	4650      	mov	r0, sl
   1500a:	f009 fd3d 	bl	1ea88 <strcmp>
   1500e:	2800      	cmp	r0, #0
   15010:	d03f      	beq.n	15092 <d_exprlist+0x332>
   15012:	f89a 3000 	ldrb.w	r3, [sl]
   15016:	2b66      	cmp	r3, #102	; 0x66
   15018:	f000 80bd 	beq.w	15196 <d_exprlist+0x436>
   1501c:	2b6e      	cmp	r3, #110	; 0x6e
   1501e:	f47f af6e 	bne.w	14efe <d_exprlist+0x19e>
   15022:	f89a 3001 	ldrb.w	r3, [sl, #1]
   15026:	2b77      	cmp	r3, #119	; 0x77
   15028:	d002      	beq.n	15030 <d_exprlist+0x2d0>
   1502a:	2b61      	cmp	r3, #97	; 0x61
   1502c:	f47f af67 	bne.w	14efe <d_exprlist+0x19e>
   15030:	215f      	movs	r1, #95	; 0x5f
   15032:	4620      	mov	r0, r4
   15034:	f7ff fe94 	bl	14d60 <d_exprlist>
   15038:	4682      	mov	sl, r0
   1503a:	4620      	mov	r0, r4
   1503c:	f000 fd12 	bl	15a64 <d_type>
   15040:	68e3      	ldr	r3, [r4, #12]
   15042:	781a      	ldrb	r2, [r3, #0]
   15044:	2a45      	cmp	r2, #69	; 0x45
   15046:	4683      	mov	fp, r0
   15048:	f000 80a1 	beq.w	1518e <d_exprlist+0x42e>
   1504c:	2a70      	cmp	r2, #112	; 0x70
   1504e:	f000 80a6 	beq.w	1519e <d_exprlist+0x43e>
   15052:	2a69      	cmp	r2, #105	; 0x69
   15054:	f47f af53 	bne.w	14efe <d_exprlist+0x19e>
   15058:	785b      	ldrb	r3, [r3, #1]
   1505a:	2b6c      	cmp	r3, #108	; 0x6c
   1505c:	f47f af4f 	bne.w	14efe <d_exprlist+0x19e>
   15060:	4620      	mov	r0, r4
   15062:	f000 f8db 	bl	1521c <d_expression_1>
   15066:	4603      	mov	r3, r0
   15068:	e01f      	b.n	150aa <d_exprlist+0x34a>
   1506a:	4620      	mov	r0, r4
   1506c:	f000 f8d6 	bl	1521c <d_expression_1>
   15070:	4682      	mov	sl, r0
   15072:	e780      	b.n	14f76 <d_exprlist+0x216>
   15074:	4620      	mov	r0, r4
   15076:	f000 fcf5 	bl	15a64 <d_type>
   1507a:	e78d      	b.n	14f98 <d_exprlist+0x238>
   1507c:	4628      	mov	r0, r5
   1507e:	6367      	str	r7, [r4, #52]	; 0x34
   15080:	b003      	add	sp, #12
   15082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15086:	2145      	movs	r1, #69	; 0x45
   15088:	4620      	mov	r0, r4
   1508a:	f7ff fe69 	bl	14d60 <d_exprlist>
   1508e:	4682      	mov	sl, r0
   15090:	e771      	b.n	14f76 <d_exprlist+0x216>
   15092:	4620      	mov	r0, r4
   15094:	f000 f8c2 	bl	1521c <d_expression_1>
   15098:	4682      	mov	sl, r0
   1509a:	4620      	mov	r0, r4
   1509c:	f000 f8be 	bl	1521c <d_expression_1>
   150a0:	4683      	mov	fp, r0
   150a2:	4620      	mov	r0, r4
   150a4:	f000 f8ba 	bl	1521c <d_expression_1>
   150a8:	4603      	mov	r3, r0
   150aa:	465a      	mov	r2, fp
   150ac:	213b      	movs	r1, #59	; 0x3b
   150ae:	4620      	mov	r0, r4
   150b0:	f7ff fa48 	bl	14544 <d_make_comp>
   150b4:	4652      	mov	r2, sl
   150b6:	4603      	mov	r3, r0
   150b8:	213a      	movs	r1, #58	; 0x3a
   150ba:	4620      	mov	r0, r4
   150bc:	f7ff fa42 	bl	14544 <d_make_comp>
   150c0:	462a      	mov	r2, r5
   150c2:	4603      	mov	r3, r0
   150c4:	2139      	movs	r1, #57	; 0x39
   150c6:	4620      	mov	r0, r4
   150c8:	f7ff fa3c 	bl	14544 <d_make_comp>
   150cc:	4605      	mov	r5, r0
   150ce:	e6cd      	b.n	14e6c <d_exprlist+0x10c>
   150d0:	781b      	ldrb	r3, [r3, #0]
   150d2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   150d6:	2a01      	cmp	r2, #1
   150d8:	d903      	bls.n	150e2 <d_exprlist+0x382>
   150da:	3b72      	subs	r3, #114	; 0x72
   150dc:	2b01      	cmp	r3, #1
   150de:	f63f af25 	bhi.w	14f2c <d_exprlist+0x1cc>
   150e2:	4620      	mov	r0, r4
   150e4:	f000 fcbe 	bl	15a64 <d_type>
   150e8:	4683      	mov	fp, r0
   150ea:	e728      	b.n	14f3e <d_exprlist+0x1de>
   150ec:	4620      	mov	r0, r4
   150ee:	f000 faf3 	bl	156d8 <d_template_args>
   150f2:	465a      	mov	r2, fp
   150f4:	4603      	mov	r3, r0
   150f6:	2104      	movs	r1, #4
   150f8:	4620      	mov	r0, r4
   150fa:	f7ff fa23 	bl	14544 <d_make_comp>
   150fe:	4603      	mov	r3, r0
   15100:	e762      	b.n	14fc8 <d_exprlist+0x268>
   15102:	3301      	adds	r3, #1
   15104:	60c3      	str	r3, [r0, #12]
   15106:	212e      	movs	r1, #46	; 0x2e
   15108:	4613      	mov	r3, r2
   1510a:	b003      	add	sp, #12
   1510c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15110:	f7ff ba18 	b.w	14544 <d_make_comp>
   15114:	4620      	mov	r0, r4
   15116:	f001 f88d 	bl	16234 <d_operator_name>
   1511a:	4683      	mov	fp, r0
   1511c:	e70f      	b.n	14f3e <d_exprlist+0x1de>
   1511e:	f1ba 0f00 	cmp.w	sl, #0
   15122:	f43f af36 	beq.w	14f92 <d_exprlist+0x232>
   15126:	f89a 3000 	ldrb.w	r3, [sl]
   1512a:	2b70      	cmp	r3, #112	; 0x70
   1512c:	d017      	beq.n	1515e <d_exprlist+0x3fe>
   1512e:	2b6d      	cmp	r3, #109	; 0x6d
   15130:	d015      	beq.n	1515e <d_exprlist+0x3fe>
   15132:	4650      	mov	r0, sl
   15134:	4937      	ldr	r1, [pc, #220]	; (15214 <d_exprlist+0x4b4>)
   15136:	f009 fca7 	bl	1ea88 <strcmp>
   1513a:	2800      	cmp	r0, #0
   1513c:	f47f af29 	bne.w	14f92 <d_exprlist+0x232>
   15140:	4620      	mov	r0, r4
   15142:	f000 fa65 	bl	15610 <d_template_args_1>
   15146:	e727      	b.n	14f98 <d_exprlist+0x238>
   15148:	4620      	mov	r0, r4
   1514a:	f000 fac5 	bl	156d8 <d_template_args>
   1514e:	4652      	mov	r2, sl
   15150:	4603      	mov	r3, r0
   15152:	2104      	movs	r1, #4
   15154:	4620      	mov	r0, r4
   15156:	f7ff f9f5 	bl	14544 <d_make_comp>
   1515a:	4682      	mov	sl, r0
   1515c:	e70b      	b.n	14f76 <d_exprlist+0x216>
   1515e:	f89a 2001 	ldrb.w	r2, [sl, #1]
   15162:	429a      	cmp	r2, r3
   15164:	d1e5      	bne.n	15132 <d_exprlist+0x3d2>
   15166:	68e3      	ldr	r3, [r4, #12]
   15168:	781a      	ldrb	r2, [r3, #0]
   1516a:	2a5f      	cmp	r2, #95	; 0x5f
   1516c:	d023      	beq.n	151b6 <d_exprlist+0x456>
   1516e:	4650      	mov	r0, sl
   15170:	4928      	ldr	r1, [pc, #160]	; (15214 <d_exprlist+0x4b4>)
   15172:	f009 fc89 	bl	1ea88 <strcmp>
   15176:	2800      	cmp	r0, #0
   15178:	d03f      	beq.n	151fa <d_exprlist+0x49a>
   1517a:	4620      	mov	r0, r4
   1517c:	f000 f84e 	bl	1521c <d_expression_1>
   15180:	4603      	mov	r3, r0
   15182:	461a      	mov	r2, r3
   15184:	2138      	movs	r1, #56	; 0x38
   15186:	4620      	mov	r0, r4
   15188:	f7ff f9dc 	bl	14544 <d_make_comp>
   1518c:	e704      	b.n	14f98 <d_exprlist+0x238>
   1518e:	3301      	adds	r3, #1
   15190:	60e3      	str	r3, [r4, #12]
   15192:	2300      	movs	r3, #0
   15194:	e789      	b.n	150aa <d_exprlist+0x34a>
   15196:	4620      	mov	r0, r4
   15198:	f001 f84c 	bl	16234 <d_operator_name>
   1519c:	e77c      	b.n	15098 <d_exprlist+0x338>
   1519e:	785a      	ldrb	r2, [r3, #1]
   151a0:	2a69      	cmp	r2, #105	; 0x69
   151a2:	f47f aeac 	bne.w	14efe <d_exprlist+0x19e>
   151a6:	3302      	adds	r3, #2
   151a8:	60e3      	str	r3, [r4, #12]
   151aa:	2145      	movs	r1, #69	; 0x45
   151ac:	4620      	mov	r0, r4
   151ae:	f7ff fdd7 	bl	14d60 <d_exprlist>
   151b2:	4603      	mov	r3, r0
   151b4:	e779      	b.n	150aa <d_exprlist+0x34a>
   151b6:	3301      	adds	r3, #1
   151b8:	60e3      	str	r3, [r4, #12]
   151ba:	e7ba      	b.n	15132 <d_exprlist+0x3d2>
   151bc:	2a6f      	cmp	r2, #111	; 0x6f
   151be:	d015      	beq.n	151ec <d_exprlist+0x48c>
   151c0:	2a69      	cmp	r2, #105	; 0x69
   151c2:	f47f ae8d 	bne.w	14ee0 <d_exprlist+0x180>
   151c6:	785a      	ldrb	r2, [r3, #1]
   151c8:	2a6c      	cmp	r2, #108	; 0x6c
   151ca:	f47f ae0e 	bne.w	14dea <d_exprlist+0x8a>
   151ce:	2500      	movs	r5, #0
   151d0:	3302      	adds	r3, #2
   151d2:	60e3      	str	r3, [r4, #12]
   151d4:	2145      	movs	r1, #69	; 0x45
   151d6:	4620      	mov	r0, r4
   151d8:	f7ff fdc2 	bl	14d60 <d_exprlist>
   151dc:	462a      	mov	r2, r5
   151de:	4603      	mov	r3, r0
   151e0:	2130      	movs	r1, #48	; 0x30
   151e2:	4620      	mov	r0, r4
   151e4:	f7ff f9ae 	bl	14544 <d_make_comp>
   151e8:	4605      	mov	r5, r0
   151ea:	e63f      	b.n	14e6c <d_exprlist+0x10c>
   151ec:	785a      	ldrb	r2, [r3, #1]
   151ee:	2a6e      	cmp	r2, #110	; 0x6e
   151f0:	f47f adfb 	bne.w	14dea <d_exprlist+0x8a>
   151f4:	3302      	adds	r3, #2
   151f6:	60e3      	str	r3, [r4, #12]
   151f8:	e5c9      	b.n	14d8e <d_exprlist+0x2e>
   151fa:	4620      	mov	r0, r4
   151fc:	f000 fa08 	bl	15610 <d_template_args_1>
   15200:	4603      	mov	r3, r0
   15202:	e7be      	b.n	15182 <d_exprlist+0x422>
   15204:	0002444c 	.word	0x0002444c
   15208:	00024450 	.word	0x00024450
   1520c:	00024454 	.word	0x00024454
   15210:	00024458 	.word	0x00024458
   15214:	00024448 	.word	0x00024448
   15218:	0002494c 	.word	0x0002494c

0001521c <d_expression_1>:
   1521c:	68c1      	ldr	r1, [r0, #12]
   1521e:	780b      	ldrb	r3, [r1, #0]
   15220:	2b4c      	cmp	r3, #76	; 0x4c
   15222:	f000 8087 	beq.w	15334 <d_expression_1+0x118>
   15226:	2b54      	cmp	r3, #84	; 0x54
   15228:	f000 8086 	beq.w	15338 <d_expression_1+0x11c>
   1522c:	2b73      	cmp	r3, #115	; 0x73
   1522e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15232:	4604      	mov	r4, r0
   15234:	d037      	beq.n	152a6 <d_expression_1+0x8a>
   15236:	2b66      	cmp	r3, #102	; 0x66
   15238:	d012      	beq.n	15260 <d_expression_1+0x44>
   1523a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1523e:	2a09      	cmp	r2, #9
   15240:	f200 81b8 	bhi.w	155b4 <d_expression_1+0x398>
   15244:	4620      	mov	r0, r4
   15246:	f001 f8b5 	bl	163b4 <d_unqualified_name>
   1524a:	4605      	mov	r5, r0
   1524c:	2800      	cmp	r0, #0
   1524e:	d06d      	beq.n	1532c <d_expression_1+0x110>
   15250:	68e3      	ldr	r3, [r4, #12]
   15252:	781b      	ldrb	r3, [r3, #0]
   15254:	2b49      	cmp	r3, #73	; 0x49
   15256:	f000 8088 	beq.w	1536a <d_expression_1+0x14e>
   1525a:	4628      	mov	r0, r5
   1525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15260:	784b      	ldrb	r3, [r1, #1]
   15262:	2b70      	cmp	r3, #112	; 0x70
   15264:	d039      	beq.n	152da <d_expression_1+0xbe>
   15266:	4620      	mov	r0, r4
   15268:	f000 ffe4 	bl	16234 <d_operator_name>
   1526c:	4605      	mov	r5, r0
   1526e:	2800      	cmp	r0, #0
   15270:	d05c      	beq.n	1532c <d_expression_1+0x110>
   15272:	7803      	ldrb	r3, [r0, #0]
   15274:	2b31      	cmp	r3, #49	; 0x31
   15276:	d061      	beq.n	1533c <d_expression_1+0x120>
   15278:	2b32      	cmp	r3, #50	; 0x32
   1527a:	d025      	beq.n	152c8 <d_expression_1+0xac>
   1527c:	2b33      	cmp	r3, #51	; 0x33
   1527e:	d155      	bne.n	1532c <d_expression_1+0x110>
   15280:	68e3      	ldr	r3, [r4, #12]
   15282:	781a      	ldrb	r2, [r3, #0]
   15284:	2a5f      	cmp	r2, #95	; 0x5f
   15286:	f040 81b4 	bne.w	155f2 <d_expression_1+0x3d6>
   1528a:	3301      	adds	r3, #1
   1528c:	60e3      	str	r3, [r4, #12]
   1528e:	2145      	movs	r1, #69	; 0x45
   15290:	4620      	mov	r0, r4
   15292:	f7ff fd65 	bl	14d60 <d_exprlist>
   15296:	4603      	mov	r3, r0
   15298:	462a      	mov	r2, r5
   1529a:	4620      	mov	r0, r4
   1529c:	2136      	movs	r1, #54	; 0x36
   1529e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152a2:	f7ff b94f 	b.w	14544 <d_make_comp>
   152a6:	784b      	ldrb	r3, [r1, #1]
   152a8:	2b72      	cmp	r3, #114	; 0x72
   152aa:	d069      	beq.n	15380 <d_expression_1+0x164>
   152ac:	2b70      	cmp	r3, #112	; 0x70
   152ae:	d1da      	bne.n	15266 <d_expression_1+0x4a>
   152b0:	3102      	adds	r1, #2
   152b2:	60c1      	str	r1, [r0, #12]
   152b4:	f7ff ffb2 	bl	1521c <d_expression_1>
   152b8:	2300      	movs	r3, #0
   152ba:	4602      	mov	r2, r0
   152bc:	214a      	movs	r1, #74	; 0x4a
   152be:	4620      	mov	r0, r4
   152c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152c4:	f7ff b93e 	b.w	14544 <d_make_comp>
   152c8:	6843      	ldr	r3, [r0, #4]
   152ca:	2b03      	cmp	r3, #3
   152cc:	d82e      	bhi.n	1532c <d_expression_1+0x110>
   152ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   152d2:	0071      	.short	0x0071
   152d4:	002d0190 	.word	0x002d0190
   152d8:	002d      	.short	0x002d
   152da:	1c8b      	adds	r3, r1, #2
   152dc:	60c3      	str	r3, [r0, #12]
   152de:	788b      	ldrb	r3, [r1, #2]
   152e0:	2b54      	cmp	r3, #84	; 0x54
   152e2:	d063      	beq.n	153ac <d_expression_1+0x190>
   152e4:	f7ff fac2 	bl	1486c <d_compact_number>
   152e8:	43c3      	mvns	r3, r0
   152ea:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   152ee:	d01d      	beq.n	1532c <d_expression_1+0x110>
   152f0:	3001      	adds	r0, #1
   152f2:	6963      	ldr	r3, [r4, #20]
   152f4:	69a2      	ldr	r2, [r4, #24]
   152f6:	4293      	cmp	r3, r2
   152f8:	da18      	bge.n	1532c <d_expression_1+0x110>
   152fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   152fe:	6921      	ldr	r1, [r4, #16]
   15300:	0092      	lsls	r2, r2, #2
   15302:	3301      	adds	r3, #1
   15304:	188d      	adds	r5, r1, r2
   15306:	6163      	str	r3, [r4, #20]
   15308:	d0a7      	beq.n	1525a <d_expression_1+0x3e>
   1530a:	2306      	movs	r3, #6
   1530c:	548b      	strb	r3, [r1, r2]
   1530e:	6068      	str	r0, [r5, #4]
   15310:	e7a3      	b.n	1525a <d_expression_1+0x3e>
   15312:	2b74      	cmp	r3, #116	; 0x74
   15314:	d1a7      	bne.n	15266 <d_expression_1+0x4a>
   15316:	784b      	ldrb	r3, [r1, #1]
   15318:	2b6c      	cmp	r3, #108	; 0x6c
   1531a:	d1a4      	bne.n	15266 <d_expression_1+0x4a>
   1531c:	f000 fba2 	bl	15a64 <d_type>
   15320:	68e1      	ldr	r1, [r4, #12]
   15322:	784b      	ldrb	r3, [r1, #1]
   15324:	4605      	mov	r5, r0
   15326:	2b00      	cmp	r3, #0
   15328:	f040 814e 	bne.w	155c8 <d_expression_1+0x3ac>
   1532c:	2500      	movs	r5, #0
   1532e:	4628      	mov	r0, r5
   15330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15334:	f001 bc8c 	b.w	16c50 <d_expr_primary>
   15338:	f7ff bab4 	b.w	148a4 <d_template_param>
   1533c:	6847      	ldr	r7, [r0, #4]
   1533e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15340:	68ba      	ldr	r2, [r7, #8]
   15342:	683e      	ldr	r6, [r7, #0]
   15344:	49ac      	ldr	r1, [pc, #688]	; (155f8 <d_expression_1+0x3dc>)
   15346:	3a02      	subs	r2, #2
   15348:	4413      	add	r3, r2
   1534a:	6323      	str	r3, [r4, #48]	; 0x30
   1534c:	4630      	mov	r0, r6
   1534e:	f009 fb9b 	bl	1ea88 <strcmp>
   15352:	2800      	cmp	r0, #0
   15354:	f000 80ab 	beq.w	154ae <d_expression_1+0x292>
   15358:	68ff      	ldr	r7, [r7, #12]
   1535a:	2f03      	cmp	r7, #3
   1535c:	d8e6      	bhi.n	1532c <d_expression_1+0x110>
   1535e:	e8df f017 	tbh	[pc, r7, lsl #1]
   15362:	0029      	.short	0x0029
   15364:	007100ff 	.word	0x007100ff
   15368:	0031      	.short	0x0031
   1536a:	4620      	mov	r0, r4
   1536c:	f000 f9b4 	bl	156d8 <d_template_args>
   15370:	462a      	mov	r2, r5
   15372:	4603      	mov	r3, r0
   15374:	2104      	movs	r1, #4
   15376:	4620      	mov	r0, r4
   15378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1537c:	f7ff b8e2 	b.w	14544 <d_make_comp>
   15380:	3102      	adds	r1, #2
   15382:	60c1      	str	r1, [r0, #12]
   15384:	f000 fb6e 	bl	15a64 <d_type>
   15388:	4605      	mov	r5, r0
   1538a:	4620      	mov	r0, r4
   1538c:	f001 f812 	bl	163b4 <d_unqualified_name>
   15390:	68e3      	ldr	r3, [r4, #12]
   15392:	781b      	ldrb	r3, [r3, #0]
   15394:	2b49      	cmp	r3, #73	; 0x49
   15396:	4606      	mov	r6, r0
   15398:	f000 80ae 	beq.w	154f8 <d_expression_1+0x2dc>
   1539c:	4603      	mov	r3, r0
   1539e:	462a      	mov	r2, r5
   153a0:	4620      	mov	r0, r4
   153a2:	2101      	movs	r1, #1
   153a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153a8:	f7ff b8cc 	b.w	14544 <d_make_comp>
   153ac:	3103      	adds	r1, #3
   153ae:	60c1      	str	r1, [r0, #12]
   153b0:	2000      	movs	r0, #0
   153b2:	e79e      	b.n	152f2 <d_expression_1+0xd6>
   153b4:	462a      	mov	r2, r5
   153b6:	4620      	mov	r0, r4
   153b8:	2300      	movs	r3, #0
   153ba:	2135      	movs	r1, #53	; 0x35
   153bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153c0:	f7ff b8c0 	b.w	14544 <d_make_comp>
   153c4:	2e00      	cmp	r6, #0
   153c6:	d0b1      	beq.n	1532c <d_expression_1+0x110>
   153c8:	498c      	ldr	r1, [pc, #560]	; (155fc <d_expression_1+0x3e0>)
   153ca:	4630      	mov	r0, r6
   153cc:	f009 fb5c 	bl	1ea88 <strcmp>
   153d0:	2800      	cmp	r0, #0
   153d2:	d071      	beq.n	154b8 <d_expression_1+0x29c>
   153d4:	7833      	ldrb	r3, [r6, #0]
   153d6:	2b66      	cmp	r3, #102	; 0x66
   153d8:	f000 80b2 	beq.w	15540 <d_expression_1+0x324>
   153dc:	2b6e      	cmp	r3, #110	; 0x6e
   153de:	d1a5      	bne.n	1532c <d_expression_1+0x110>
   153e0:	7873      	ldrb	r3, [r6, #1]
   153e2:	2b77      	cmp	r3, #119	; 0x77
   153e4:	d001      	beq.n	153ea <d_expression_1+0x1ce>
   153e6:	2b61      	cmp	r3, #97	; 0x61
   153e8:	d1a0      	bne.n	1532c <d_expression_1+0x110>
   153ea:	215f      	movs	r1, #95	; 0x5f
   153ec:	4620      	mov	r0, r4
   153ee:	f7ff fcb7 	bl	14d60 <d_exprlist>
   153f2:	4606      	mov	r6, r0
   153f4:	4620      	mov	r0, r4
   153f6:	f000 fb35 	bl	15a64 <d_type>
   153fa:	68e3      	ldr	r3, [r4, #12]
   153fc:	781a      	ldrb	r2, [r3, #0]
   153fe:	2a45      	cmp	r2, #69	; 0x45
   15400:	4607      	mov	r7, r0
   15402:	f000 8099 	beq.w	15538 <d_expression_1+0x31c>
   15406:	2a70      	cmp	r2, #112	; 0x70
   15408:	f000 809e 	beq.w	15548 <d_expression_1+0x32c>
   1540c:	2a69      	cmp	r2, #105	; 0x69
   1540e:	d18d      	bne.n	1532c <d_expression_1+0x110>
   15410:	785b      	ldrb	r3, [r3, #1]
   15412:	2b6c      	cmp	r3, #108	; 0x6c
   15414:	d18a      	bne.n	1532c <d_expression_1+0x110>
   15416:	4620      	mov	r0, r4
   15418:	f7ff ff00 	bl	1521c <d_expression_1>
   1541c:	4603      	mov	r3, r0
   1541e:	463a      	mov	r2, r7
   15420:	213b      	movs	r1, #59	; 0x3b
   15422:	4620      	mov	r0, r4
   15424:	f7ff f88e 	bl	14544 <d_make_comp>
   15428:	4632      	mov	r2, r6
   1542a:	4603      	mov	r3, r0
   1542c:	213a      	movs	r1, #58	; 0x3a
   1542e:	4620      	mov	r0, r4
   15430:	f7ff f888 	bl	14544 <d_make_comp>
   15434:	462a      	mov	r2, r5
   15436:	4603      	mov	r3, r0
   15438:	2139      	movs	r1, #57	; 0x39
   1543a:	4620      	mov	r0, r4
   1543c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15440:	f7ff b880 	b.w	14544 <d_make_comp>
   15444:	2e00      	cmp	r6, #0
   15446:	f43f af71 	beq.w	1532c <d_expression_1+0x110>
   1544a:	686b      	ldr	r3, [r5, #4]
   1544c:	681b      	ldr	r3, [r3, #0]
   1544e:	785a      	ldrb	r2, [r3, #1]
   15450:	2a63      	cmp	r2, #99	; 0x63
   15452:	d044      	beq.n	154de <d_expression_1+0x2c2>
   15454:	7833      	ldrb	r3, [r6, #0]
   15456:	2b66      	cmp	r3, #102	; 0x66
   15458:	d059      	beq.n	1550e <d_expression_1+0x2f2>
   1545a:	4620      	mov	r0, r4
   1545c:	f7ff fede 	bl	1521c <d_expression_1>
   15460:	4607      	mov	r7, r0
   15462:	4967      	ldr	r1, [pc, #412]	; (15600 <d_expression_1+0x3e4>)
   15464:	4630      	mov	r0, r6
   15466:	f009 fb0f 	bl	1ea88 <strcmp>
   1546a:	b390      	cbz	r0, 154d2 <d_expression_1+0x2b6>
   1546c:	4965      	ldr	r1, [pc, #404]	; (15604 <d_expression_1+0x3e8>)
   1546e:	4630      	mov	r0, r6
   15470:	f009 fb0a 	bl	1ea88 <strcmp>
   15474:	b128      	cbz	r0, 15482 <d_expression_1+0x266>
   15476:	4630      	mov	r0, r6
   15478:	4963      	ldr	r1, [pc, #396]	; (15608 <d_expression_1+0x3ec>)
   1547a:	f009 fb05 	bl	1ea88 <strcmp>
   1547e:	2800      	cmp	r0, #0
   15480:	d14a      	bne.n	15518 <d_expression_1+0x2fc>
   15482:	4620      	mov	r0, r4
   15484:	f000 ff96 	bl	163b4 <d_unqualified_name>
   15488:	68e3      	ldr	r3, [r4, #12]
   1548a:	781b      	ldrb	r3, [r3, #0]
   1548c:	2b49      	cmp	r3, #73	; 0x49
   1548e:	4606      	mov	r6, r0
   15490:	d047      	beq.n	15522 <d_expression_1+0x306>
   15492:	4633      	mov	r3, r6
   15494:	463a      	mov	r2, r7
   15496:	2138      	movs	r1, #56	; 0x38
   15498:	4620      	mov	r0, r4
   1549a:	f7ff f853 	bl	14544 <d_make_comp>
   1549e:	462a      	mov	r2, r5
   154a0:	4603      	mov	r3, r0
   154a2:	2137      	movs	r1, #55	; 0x37
   154a4:	4620      	mov	r0, r4
   154a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   154aa:	f7ff b84b 	b.w	14544 <d_make_comp>
   154ae:	4620      	mov	r0, r4
   154b0:	f000 fad8 	bl	15a64 <d_type>
   154b4:	4603      	mov	r3, r0
   154b6:	e6ef      	b.n	15298 <d_expression_1+0x7c>
   154b8:	4620      	mov	r0, r4
   154ba:	f7ff feaf 	bl	1521c <d_expression_1>
   154be:	4606      	mov	r6, r0
   154c0:	4620      	mov	r0, r4
   154c2:	f7ff feab 	bl	1521c <d_expression_1>
   154c6:	4607      	mov	r7, r0
   154c8:	4620      	mov	r0, r4
   154ca:	f7ff fea7 	bl	1521c <d_expression_1>
   154ce:	4603      	mov	r3, r0
   154d0:	e7a5      	b.n	1541e <d_expression_1+0x202>
   154d2:	2145      	movs	r1, #69	; 0x45
   154d4:	4620      	mov	r0, r4
   154d6:	f7ff fc43 	bl	14d60 <d_exprlist>
   154da:	4606      	mov	r6, r0
   154dc:	e7d9      	b.n	15492 <d_expression_1+0x276>
   154de:	781b      	ldrb	r3, [r3, #0]
   154e0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   154e4:	2a01      	cmp	r2, #1
   154e6:	d902      	bls.n	154ee <d_expression_1+0x2d2>
   154e8:	3b72      	subs	r3, #114	; 0x72
   154ea:	2b01      	cmp	r3, #1
   154ec:	d8b2      	bhi.n	15454 <d_expression_1+0x238>
   154ee:	4620      	mov	r0, r4
   154f0:	f000 fab8 	bl	15a64 <d_type>
   154f4:	4607      	mov	r7, r0
   154f6:	e7b4      	b.n	15462 <d_expression_1+0x246>
   154f8:	4620      	mov	r0, r4
   154fa:	f000 f8ed 	bl	156d8 <d_template_args>
   154fe:	4632      	mov	r2, r6
   15500:	4603      	mov	r3, r0
   15502:	2104      	movs	r1, #4
   15504:	4620      	mov	r0, r4
   15506:	f7ff f81d 	bl	14544 <d_make_comp>
   1550a:	4603      	mov	r3, r0
   1550c:	e747      	b.n	1539e <d_expression_1+0x182>
   1550e:	4620      	mov	r0, r4
   15510:	f000 fe90 	bl	16234 <d_operator_name>
   15514:	4607      	mov	r7, r0
   15516:	e7a4      	b.n	15462 <d_expression_1+0x246>
   15518:	4620      	mov	r0, r4
   1551a:	f7ff fe7f 	bl	1521c <d_expression_1>
   1551e:	4606      	mov	r6, r0
   15520:	e7b7      	b.n	15492 <d_expression_1+0x276>
   15522:	4620      	mov	r0, r4
   15524:	f000 f8d8 	bl	156d8 <d_template_args>
   15528:	4632      	mov	r2, r6
   1552a:	4603      	mov	r3, r0
   1552c:	2104      	movs	r1, #4
   1552e:	4620      	mov	r0, r4
   15530:	f7ff f808 	bl	14544 <d_make_comp>
   15534:	4606      	mov	r6, r0
   15536:	e7ac      	b.n	15492 <d_expression_1+0x276>
   15538:	3301      	adds	r3, #1
   1553a:	60e3      	str	r3, [r4, #12]
   1553c:	2300      	movs	r3, #0
   1553e:	e76e      	b.n	1541e <d_expression_1+0x202>
   15540:	4620      	mov	r0, r4
   15542:	f000 fe77 	bl	16234 <d_operator_name>
   15546:	e7ba      	b.n	154be <d_expression_1+0x2a2>
   15548:	785a      	ldrb	r2, [r3, #1]
   1554a:	2a69      	cmp	r2, #105	; 0x69
   1554c:	f47f aeee 	bne.w	1532c <d_expression_1+0x110>
   15550:	3302      	adds	r3, #2
   15552:	60e3      	str	r3, [r4, #12]
   15554:	2145      	movs	r1, #69	; 0x45
   15556:	4620      	mov	r0, r4
   15558:	f7ff fc02 	bl	14d60 <d_exprlist>
   1555c:	4603      	mov	r3, r0
   1555e:	e75e      	b.n	1541e <d_expression_1+0x202>
   15560:	2e00      	cmp	r6, #0
   15562:	d046      	beq.n	155f2 <d_expression_1+0x3d6>
   15564:	7833      	ldrb	r3, [r6, #0]
   15566:	2b70      	cmp	r3, #112	; 0x70
   15568:	d015      	beq.n	15596 <d_expression_1+0x37a>
   1556a:	2b6d      	cmp	r3, #109	; 0x6d
   1556c:	d013      	beq.n	15596 <d_expression_1+0x37a>
   1556e:	2700      	movs	r7, #0
   15570:	4630      	mov	r0, r6
   15572:	4926      	ldr	r1, [pc, #152]	; (1560c <d_expression_1+0x3f0>)
   15574:	f009 fa88 	bl	1ea88 <strcmp>
   15578:	b1b8      	cbz	r0, 155aa <d_expression_1+0x38e>
   1557a:	4620      	mov	r0, r4
   1557c:	f7ff fe4e 	bl	1521c <d_expression_1>
   15580:	4603      	mov	r3, r0
   15582:	2f00      	cmp	r7, #0
   15584:	f43f ae88 	beq.w	15298 <d_expression_1+0x7c>
   15588:	461a      	mov	r2, r3
   1558a:	2138      	movs	r1, #56	; 0x38
   1558c:	4620      	mov	r0, r4
   1558e:	f7fe ffd9 	bl	14544 <d_make_comp>
   15592:	4603      	mov	r3, r0
   15594:	e680      	b.n	15298 <d_expression_1+0x7c>
   15596:	7872      	ldrb	r2, [r6, #1]
   15598:	429a      	cmp	r2, r3
   1559a:	d1e8      	bne.n	1556e <d_expression_1+0x352>
   1559c:	68e3      	ldr	r3, [r4, #12]
   1559e:	781a      	ldrb	r2, [r3, #0]
   155a0:	2a5f      	cmp	r2, #95	; 0x5f
   155a2:	d1e5      	bne.n	15570 <d_expression_1+0x354>
   155a4:	3301      	adds	r3, #1
   155a6:	60e3      	str	r3, [r4, #12]
   155a8:	e7e1      	b.n	1556e <d_expression_1+0x352>
   155aa:	4620      	mov	r0, r4
   155ac:	f000 f830 	bl	15610 <d_template_args_1>
   155b0:	4603      	mov	r3, r0
   155b2:	e7e6      	b.n	15582 <d_expression_1+0x366>
   155b4:	2b6f      	cmp	r3, #111	; 0x6f
   155b6:	d015      	beq.n	155e4 <d_expression_1+0x3c8>
   155b8:	2b69      	cmp	r3, #105	; 0x69
   155ba:	f47f aeaa 	bne.w	15312 <d_expression_1+0xf6>
   155be:	784b      	ldrb	r3, [r1, #1]
   155c0:	2b6c      	cmp	r3, #108	; 0x6c
   155c2:	f47f ae50 	bne.w	15266 <d_expression_1+0x4a>
   155c6:	2500      	movs	r5, #0
   155c8:	3102      	adds	r1, #2
   155ca:	60e1      	str	r1, [r4, #12]
   155cc:	4620      	mov	r0, r4
   155ce:	2145      	movs	r1, #69	; 0x45
   155d0:	f7ff fbc6 	bl	14d60 <d_exprlist>
   155d4:	462a      	mov	r2, r5
   155d6:	4603      	mov	r3, r0
   155d8:	2130      	movs	r1, #48	; 0x30
   155da:	4620      	mov	r0, r4
   155dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   155e0:	f7fe bfb0 	b.w	14544 <d_make_comp>
   155e4:	784b      	ldrb	r3, [r1, #1]
   155e6:	2b6e      	cmp	r3, #110	; 0x6e
   155e8:	f47f ae3d 	bne.w	15266 <d_expression_1+0x4a>
   155ec:	3102      	adds	r1, #2
   155ee:	60c1      	str	r1, [r0, #12]
   155f0:	e628      	b.n	15244 <d_expression_1+0x28>
   155f2:	2700      	movs	r7, #0
   155f4:	e7c1      	b.n	1557a <d_expression_1+0x35e>
   155f6:	bf00      	nop
   155f8:	0002494c 	.word	0x0002494c
   155fc:	00024458 	.word	0x00024458
   15600:	0002444c 	.word	0x0002444c
   15604:	00024450 	.word	0x00024450
   15608:	00024454 	.word	0x00024454
   1560c:	00024448 	.word	0x00024448

00015610 <d_template_args_1>:
   15610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15614:	68c2      	ldr	r2, [r0, #12]
   15616:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   1561a:	7813      	ldrb	r3, [r2, #0]
   1561c:	2b45      	cmp	r3, #69	; 0x45
   1561e:	b083      	sub	sp, #12
   15620:	4604      	mov	r4, r0
   15622:	d04e      	beq.n	156c2 <d_template_args_1+0xb2>
   15624:	ae02      	add	r6, sp, #8
   15626:	2100      	movs	r1, #0
   15628:	f846 1d04 	str.w	r1, [r6, #-4]!
   1562c:	2701      	movs	r7, #1
   1562e:	3b49      	subs	r3, #73	; 0x49
   15630:	2b0f      	cmp	r3, #15
   15632:	d83e      	bhi.n	156b2 <d_template_args_1+0xa2>
   15634:	e8df f003 	tbb	[pc, r3]
   15638:	1b3d3838 	.word	0x1b3d3838
   1563c:	3d3d3d3d 	.word	0x3d3d3d3d
   15640:	3d3d3d3d 	.word	0x3d3d3d3d
   15644:	083d3d3d 	.word	0x083d3d3d
   15648:	3201      	adds	r2, #1
   1564a:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1564e:	60e2      	str	r2, [r4, #12]
   15650:	6367      	str	r7, [r4, #52]	; 0x34
   15652:	4620      	mov	r0, r4
   15654:	f7ff fde2 	bl	1521c <d_expression_1>
   15658:	68e3      	ldr	r3, [r4, #12]
   1565a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   1565e:	781a      	ldrb	r2, [r3, #0]
   15660:	2a45      	cmp	r2, #69	; 0x45
   15662:	4605      	mov	r5, r0
   15664:	d02a      	beq.n	156bc <d_template_args_1+0xac>
   15666:	2000      	movs	r0, #0
   15668:	b003      	add	sp, #12
   1566a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1566e:	4620      	mov	r0, r4
   15670:	f001 faee 	bl	16c50 <d_expr_primary>
   15674:	4605      	mov	r5, r0
   15676:	2300      	movs	r3, #0
   15678:	212f      	movs	r1, #47	; 0x2f
   1567a:	462a      	mov	r2, r5
   1567c:	4620      	mov	r0, r4
   1567e:	2d00      	cmp	r5, #0
   15680:	d0f1      	beq.n	15666 <d_template_args_1+0x56>
   15682:	f7fe ff5f 	bl	14544 <d_make_comp>
   15686:	6030      	str	r0, [r6, #0]
   15688:	f100 0608 	add.w	r6, r0, #8
   1568c:	2800      	cmp	r0, #0
   1568e:	d0ea      	beq.n	15666 <d_template_args_1+0x56>
   15690:	68e2      	ldr	r2, [r4, #12]
   15692:	7813      	ldrb	r3, [r2, #0]
   15694:	2b45      	cmp	r3, #69	; 0x45
   15696:	d1ca      	bne.n	1562e <d_template_args_1+0x1e>
   15698:	9801      	ldr	r0, [sp, #4]
   1569a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   1569e:	3201      	adds	r2, #1
   156a0:	60e2      	str	r2, [r4, #12]
   156a2:	b003      	add	sp, #12
   156a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156a8:	4620      	mov	r0, r4
   156aa:	f000 f815 	bl	156d8 <d_template_args>
   156ae:	4605      	mov	r5, r0
   156b0:	e7e1      	b.n	15676 <d_template_args_1+0x66>
   156b2:	4620      	mov	r0, r4
   156b4:	f000 f9d6 	bl	15a64 <d_type>
   156b8:	4605      	mov	r5, r0
   156ba:	e7dc      	b.n	15676 <d_template_args_1+0x66>
   156bc:	3301      	adds	r3, #1
   156be:	60e3      	str	r3, [r4, #12]
   156c0:	e7d9      	b.n	15676 <d_template_args_1+0x66>
   156c2:	3201      	adds	r2, #1
   156c4:	2300      	movs	r3, #0
   156c6:	60c2      	str	r2, [r0, #12]
   156c8:	212f      	movs	r1, #47	; 0x2f
   156ca:	461a      	mov	r2, r3
   156cc:	b003      	add	sp, #12
   156ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156d2:	f7fe bf37 	b.w	14544 <d_make_comp>
   156d6:	bf00      	nop

000156d8 <d_template_args>:
   156d8:	68c2      	ldr	r2, [r0, #12]
   156da:	7813      	ldrb	r3, [r2, #0]
   156dc:	3b49      	subs	r3, #73	; 0x49
   156de:	2b01      	cmp	r3, #1
   156e0:	d802      	bhi.n	156e8 <d_template_args+0x10>
   156e2:	3201      	adds	r2, #1
   156e4:	60c2      	str	r2, [r0, #12]
   156e6:	e793      	b.n	15610 <d_template_args_1>
   156e8:	2000      	movs	r0, #0
   156ea:	4770      	bx	lr

000156ec <d_name>:
   156ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156f0:	68c2      	ldr	r2, [r0, #12]
   156f2:	7813      	ldrb	r3, [r2, #0]
   156f4:	3b4e      	subs	r3, #78	; 0x4e
   156f6:	b085      	sub	sp, #20
   156f8:	4605      	mov	r5, r0
   156fa:	2b0c      	cmp	r3, #12
   156fc:	d870      	bhi.n	157e0 <d_name+0xf4>
   156fe:	e8df f003 	tbb	[pc, r3]
   15702:	6f1e      	.short	0x6f1e
   15704:	5b6f6f6f 	.word	0x5b6f6f6f
   15708:	6f6f176f 	.word	0x6f6f176f
   1570c:	6f6f      	.short	0x6f6f
   1570e:	07          	.byte	0x07
   1570f:	00          	.byte	0x00
   15710:	3201      	adds	r2, #1
   15712:	2100      	movs	r1, #0
   15714:	60c2      	str	r2, [r0, #12]
   15716:	f000 ffbd 	bl	16694 <d_encoding>
   1571a:	68eb      	ldr	r3, [r5, #12]
   1571c:	7819      	ldrb	r1, [r3, #0]
   1571e:	2945      	cmp	r1, #69	; 0x45
   15720:	4606      	mov	r6, r0
   15722:	f000 8099 	beq.w	15858 <d_name+0x16c>
   15726:	2200      	movs	r2, #0
   15728:	4610      	mov	r0, r2
   1572a:	b005      	add	sp, #20
   1572c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15730:	f000 fe40 	bl	163b4 <d_unqualified_name>
   15734:	4602      	mov	r2, r0
   15736:	4610      	mov	r0, r2
   15738:	b005      	add	sp, #20
   1573a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1573e:	3201      	adds	r2, #1
   15740:	60c2      	str	r2, [r0, #12]
   15742:	a903      	add	r1, sp, #12
   15744:	2201      	movs	r2, #1
   15746:	f7fe ff49 	bl	145dc <d_cv_qualifiers>
   1574a:	4681      	mov	r9, r0
   1574c:	2800      	cmp	r0, #0
   1574e:	d0ea      	beq.n	15726 <d_name+0x3a>
   15750:	2100      	movs	r1, #0
   15752:	4628      	mov	r0, r5
   15754:	f7fe ffa8 	bl	146a8 <d_ref_qualifier>
   15758:	68ea      	ldr	r2, [r5, #12]
   1575a:	4eb4      	ldr	r6, [pc, #720]	; (15a2c <d_name+0x340>)
   1575c:	7814      	ldrb	r4, [r2, #0]
   1575e:	4680      	mov	r8, r0
   15760:	2700      	movs	r7, #0
   15762:	2c00      	cmp	r4, #0
   15764:	f000 80e8 	beq.w	15938 <d_name+0x24c>
   15768:	2c44      	cmp	r4, #68	; 0x44
   1576a:	f000 80d1 	beq.w	15910 <d_name+0x224>
   1576e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   15772:	b2db      	uxtb	r3, r3
   15774:	2b1c      	cmp	r3, #28
   15776:	f240 80a8 	bls.w	158ca <d_name+0x1de>
   1577a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1577e:	2b19      	cmp	r3, #25
   15780:	f240 80a8 	bls.w	158d4 <d_name+0x1e8>
   15784:	2c55      	cmp	r4, #85	; 0x55
   15786:	f000 80de 	beq.w	15946 <d_name+0x25a>
   1578a:	2c53      	cmp	r4, #83	; 0x53
   1578c:	f000 80f1 	beq.w	15972 <d_name+0x286>
   15790:	2c49      	cmp	r4, #73	; 0x49
   15792:	f000 80da 	beq.w	1594a <d_name+0x25e>
   15796:	2c54      	cmp	r4, #84	; 0x54
   15798:	f000 811f 	beq.w	159da <d_name+0x2ee>
   1579c:	2c45      	cmp	r4, #69	; 0x45
   1579e:	f000 814b 	beq.w	15a38 <d_name+0x34c>
   157a2:	2c4d      	cmp	r4, #77	; 0x4d
   157a4:	f040 80c8 	bne.w	15938 <d_name+0x24c>
   157a8:	2f00      	cmp	r7, #0
   157aa:	f000 80c5 	beq.w	15938 <d_name+0x24c>
   157ae:	1c53      	adds	r3, r2, #1
   157b0:	60eb      	str	r3, [r5, #12]
   157b2:	7854      	ldrb	r4, [r2, #1]
   157b4:	461a      	mov	r2, r3
   157b6:	e7d4      	b.n	15762 <d_name+0x76>
   157b8:	7853      	ldrb	r3, [r2, #1]
   157ba:	2b74      	cmp	r3, #116	; 0x74
   157bc:	d031      	beq.n	15822 <d_name+0x136>
   157be:	2100      	movs	r1, #0
   157c0:	f7ff f90a 	bl	149d8 <d_substitution>
   157c4:	68eb      	ldr	r3, [r5, #12]
   157c6:	7819      	ldrb	r1, [r3, #0]
   157c8:	2949      	cmp	r1, #73	; 0x49
   157ca:	4602      	mov	r2, r0
   157cc:	d1b3      	bne.n	15736 <d_name+0x4a>
   157ce:	3301      	adds	r3, #1
   157d0:	60eb      	str	r3, [r5, #12]
   157d2:	4628      	mov	r0, r5
   157d4:	9201      	str	r2, [sp, #4]
   157d6:	f7ff ff1b 	bl	15610 <d_template_args_1>
   157da:	9a01      	ldr	r2, [sp, #4]
   157dc:	4603      	mov	r3, r0
   157de:	e017      	b.n	15810 <d_name+0x124>
   157e0:	f000 fde8 	bl	163b4 <d_unqualified_name>
   157e4:	68eb      	ldr	r3, [r5, #12]
   157e6:	7819      	ldrb	r1, [r3, #0]
   157e8:	2949      	cmp	r1, #73	; 0x49
   157ea:	4602      	mov	r2, r0
   157ec:	d1a3      	bne.n	15736 <d_name+0x4a>
   157ee:	2a00      	cmp	r2, #0
   157f0:	d099      	beq.n	15726 <d_name+0x3a>
   157f2:	6a29      	ldr	r1, [r5, #32]
   157f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   157f6:	4281      	cmp	r1, r0
   157f8:	da95      	bge.n	15726 <d_name+0x3a>
   157fa:	69ec      	ldr	r4, [r5, #28]
   157fc:	1c48      	adds	r0, r1, #1
   157fe:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   15802:	6228      	str	r0, [r5, #32]
   15804:	7819      	ldrb	r1, [r3, #0]
   15806:	3949      	subs	r1, #73	; 0x49
   15808:	2901      	cmp	r1, #1
   1580a:	bf88      	it	hi
   1580c:	2300      	movhi	r3, #0
   1580e:	d9de      	bls.n	157ce <d_name+0xe2>
   15810:	4628      	mov	r0, r5
   15812:	2104      	movs	r1, #4
   15814:	f7fe fe96 	bl	14544 <d_make_comp>
   15818:	4602      	mov	r2, r0
   1581a:	4610      	mov	r0, r2
   1581c:	b005      	add	sp, #20
   1581e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15822:	6943      	ldr	r3, [r0, #20]
   15824:	6981      	ldr	r1, [r0, #24]
   15826:	3202      	adds	r2, #2
   15828:	428b      	cmp	r3, r1
   1582a:	60c2      	str	r2, [r0, #12]
   1582c:	f2c0 80ab 	blt.w	15986 <d_name+0x29a>
   15830:	2400      	movs	r4, #0
   15832:	4628      	mov	r0, r5
   15834:	f000 fdbe 	bl	163b4 <d_unqualified_name>
   15838:	4622      	mov	r2, r4
   1583a:	4603      	mov	r3, r0
   1583c:	2101      	movs	r1, #1
   1583e:	4628      	mov	r0, r5
   15840:	f7fe fe80 	bl	14544 <d_make_comp>
   15844:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15846:	68eb      	ldr	r3, [r5, #12]
   15848:	3103      	adds	r1, #3
   1584a:	6329      	str	r1, [r5, #48]	; 0x30
   1584c:	7819      	ldrb	r1, [r3, #0]
   1584e:	2949      	cmp	r1, #73	; 0x49
   15850:	4602      	mov	r2, r0
   15852:	f47f af70 	bne.w	15736 <d_name+0x4a>
   15856:	e7ca      	b.n	157ee <d_name+0x102>
   15858:	1c5a      	adds	r2, r3, #1
   1585a:	60ea      	str	r2, [r5, #12]
   1585c:	7859      	ldrb	r1, [r3, #1]
   1585e:	2973      	cmp	r1, #115	; 0x73
   15860:	f000 80a3 	beq.w	159aa <d_name+0x2be>
   15864:	2964      	cmp	r1, #100	; 0x64
   15866:	f000 80bc 	beq.w	159e2 <d_name+0x2f6>
   1586a:	4628      	mov	r0, r5
   1586c:	f7ff ff3e 	bl	156ec <d_name>
   15870:	4604      	mov	r4, r0
   15872:	2800      	cmp	r0, #0
   15874:	d072      	beq.n	1595c <d_name+0x270>
   15876:	7803      	ldrb	r3, [r0, #0]
   15878:	2b45      	cmp	r3, #69	; 0x45
   1587a:	f000 8094 	beq.w	159a6 <d_name+0x2ba>
   1587e:	2b47      	cmp	r3, #71	; 0x47
   15880:	f000 8091 	beq.w	159a6 <d_name+0x2ba>
   15884:	68eb      	ldr	r3, [r5, #12]
   15886:	781a      	ldrb	r2, [r3, #0]
   15888:	2a5f      	cmp	r2, #95	; 0x5f
   1588a:	f040 808c 	bne.w	159a6 <d_name+0x2ba>
   1588e:	f04f 37ff 	mov.w	r7, #4294967295
   15892:	4628      	mov	r0, r5
   15894:	3301      	adds	r3, #1
   15896:	f840 3f0c 	str.w	r3, [r0, #12]!
   1589a:	f7fe ffa5 	bl	147e8 <d_number.isra.0>
   1589e:	2800      	cmp	r0, #0
   158a0:	f6ff af41 	blt.w	15726 <d_name+0x3a>
   158a4:	1c7b      	adds	r3, r7, #1
   158a6:	d07e      	beq.n	159a6 <d_name+0x2ba>
   158a8:	696b      	ldr	r3, [r5, #20]
   158aa:	69aa      	ldr	r2, [r5, #24]
   158ac:	4293      	cmp	r3, r2
   158ae:	da55      	bge.n	1595c <d_name+0x270>
   158b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   158b4:	6929      	ldr	r1, [r5, #16]
   158b6:	3301      	adds	r3, #1
   158b8:	0092      	lsls	r2, r2, #2
   158ba:	616b      	str	r3, [r5, #20]
   158bc:	188b      	adds	r3, r1, r2
   158be:	d04e      	beq.n	1595e <d_name+0x272>
   158c0:	2046      	movs	r0, #70	; 0x46
   158c2:	5488      	strb	r0, [r1, r2]
   158c4:	609f      	str	r7, [r3, #8]
   158c6:	605c      	str	r4, [r3, #4]
   158c8:	e049      	b.n	1595e <d_name+0x272>
   158ca:	fa26 f303 	lsr.w	r3, r6, r3
   158ce:	07d9      	lsls	r1, r3, #31
   158d0:	f57f af53 	bpl.w	1577a <d_name+0x8e>
   158d4:	4628      	mov	r0, r5
   158d6:	f000 fd6d 	bl	163b4 <d_unqualified_name>
   158da:	b347      	cbz	r7, 1592e <d_name+0x242>
   158dc:	2101      	movs	r1, #1
   158de:	4603      	mov	r3, r0
   158e0:	463a      	mov	r2, r7
   158e2:	4628      	mov	r0, r5
   158e4:	f7fe fe2e 	bl	14544 <d_make_comp>
   158e8:	4607      	mov	r7, r0
   158ea:	2c53      	cmp	r4, #83	; 0x53
   158ec:	d01c      	beq.n	15928 <d_name+0x23c>
   158ee:	68ea      	ldr	r2, [r5, #12]
   158f0:	7814      	ldrb	r4, [r2, #0]
   158f2:	2c45      	cmp	r4, #69	; 0x45
   158f4:	f43f af3b 	beq.w	1576e <d_name+0x82>
   158f8:	b1f7      	cbz	r7, 15938 <d_name+0x24c>
   158fa:	6a2b      	ldr	r3, [r5, #32]
   158fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   158fe:	428b      	cmp	r3, r1
   15900:	da1a      	bge.n	15938 <d_name+0x24c>
   15902:	69e9      	ldr	r1, [r5, #28]
   15904:	1c58      	adds	r0, r3, #1
   15906:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   1590a:	6228      	str	r0, [r5, #32]
   1590c:	7814      	ldrb	r4, [r2, #0]
   1590e:	e728      	b.n	15762 <d_name+0x76>
   15910:	7853      	ldrb	r3, [r2, #1]
   15912:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15916:	2b54      	cmp	r3, #84	; 0x54
   15918:	4628      	mov	r0, r5
   1591a:	d00a      	beq.n	15932 <d_name+0x246>
   1591c:	f000 fd4a 	bl	163b4 <d_unqualified_name>
   15920:	2f00      	cmp	r7, #0
   15922:	d1db      	bne.n	158dc <d_name+0x1f0>
   15924:	4607      	mov	r7, r0
   15926:	e7e2      	b.n	158ee <d_name+0x202>
   15928:	68ea      	ldr	r2, [r5, #12]
   1592a:	7814      	ldrb	r4, [r2, #0]
   1592c:	e719      	b.n	15762 <d_name+0x76>
   1592e:	4607      	mov	r7, r0
   15930:	e7db      	b.n	158ea <d_name+0x1fe>
   15932:	f000 f897 	bl	15a64 <d_type>
   15936:	e7f3      	b.n	15920 <d_name+0x234>
   15938:	2200      	movs	r2, #0
   1593a:	4610      	mov	r0, r2
   1593c:	f8c9 2000 	str.w	r2, [r9]
   15940:	b005      	add	sp, #20
   15942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15946:	4628      	mov	r0, r5
   15948:	e7e8      	b.n	1591c <d_name+0x230>
   1594a:	2f00      	cmp	r7, #0
   1594c:	d0f4      	beq.n	15938 <d_name+0x24c>
   1594e:	3201      	adds	r2, #1
   15950:	60ea      	str	r2, [r5, #12]
   15952:	4628      	mov	r0, r5
   15954:	f7ff fe5c 	bl	15610 <d_template_args_1>
   15958:	2104      	movs	r1, #4
   1595a:	e7c0      	b.n	158de <d_name+0x1f2>
   1595c:	2300      	movs	r3, #0
   1595e:	4632      	mov	r2, r6
   15960:	4628      	mov	r0, r5
   15962:	2102      	movs	r1, #2
   15964:	f7fe fdee 	bl	14544 <d_make_comp>
   15968:	4602      	mov	r2, r0
   1596a:	4610      	mov	r0, r2
   1596c:	b005      	add	sp, #20
   1596e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15972:	2101      	movs	r1, #1
   15974:	4628      	mov	r0, r5
   15976:	f7ff f82f 	bl	149d8 <d_substitution>
   1597a:	2f00      	cmp	r7, #0
   1597c:	d1ae      	bne.n	158dc <d_name+0x1f0>
   1597e:	68ea      	ldr	r2, [r5, #12]
   15980:	4607      	mov	r7, r0
   15982:	7814      	ldrb	r4, [r2, #0]
   15984:	e6ed      	b.n	15762 <d_name+0x76>
   15986:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1598a:	6901      	ldr	r1, [r0, #16]
   1598c:	0092      	lsls	r2, r2, #2
   1598e:	3301      	adds	r3, #1
   15990:	188c      	adds	r4, r1, r2
   15992:	6143      	str	r3, [r0, #20]
   15994:	f43f af4d 	beq.w	15832 <d_name+0x146>
   15998:	2300      	movs	r3, #0
   1599a:	548b      	strb	r3, [r1, r2]
   1599c:	4824      	ldr	r0, [pc, #144]	; (15a30 <d_name+0x344>)
   1599e:	6060      	str	r0, [r4, #4]
   159a0:	2303      	movs	r3, #3
   159a2:	60a3      	str	r3, [r4, #8]
   159a4:	e745      	b.n	15832 <d_name+0x146>
   159a6:	4623      	mov	r3, r4
   159a8:	e7d9      	b.n	1595e <d_name+0x272>
   159aa:	1c9a      	adds	r2, r3, #2
   159ac:	60ea      	str	r2, [r5, #12]
   159ae:	789a      	ldrb	r2, [r3, #2]
   159b0:	2a5f      	cmp	r2, #95	; 0x5f
   159b2:	d032      	beq.n	15a1a <d_name+0x32e>
   159b4:	696b      	ldr	r3, [r5, #20]
   159b6:	69aa      	ldr	r2, [r5, #24]
   159b8:	4293      	cmp	r3, r2
   159ba:	dacf      	bge.n	1595c <d_name+0x270>
   159bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   159c0:	6929      	ldr	r1, [r5, #16]
   159c2:	3301      	adds	r3, #1
   159c4:	0092      	lsls	r2, r2, #2
   159c6:	616b      	str	r3, [r5, #20]
   159c8:	188b      	adds	r3, r1, r2
   159ca:	d0c8      	beq.n	1595e <d_name+0x272>
   159cc:	2400      	movs	r4, #0
   159ce:	548c      	strb	r4, [r1, r2]
   159d0:	4818      	ldr	r0, [pc, #96]	; (15a34 <d_name+0x348>)
   159d2:	6058      	str	r0, [r3, #4]
   159d4:	220e      	movs	r2, #14
   159d6:	609a      	str	r2, [r3, #8]
   159d8:	e7c1      	b.n	1595e <d_name+0x272>
   159da:	4628      	mov	r0, r5
   159dc:	f7fe ff62 	bl	148a4 <d_template_param>
   159e0:	e79e      	b.n	15920 <d_name+0x234>
   159e2:	3302      	adds	r3, #2
   159e4:	60eb      	str	r3, [r5, #12]
   159e6:	4628      	mov	r0, r5
   159e8:	f7fe ff40 	bl	1486c <d_compact_number>
   159ec:	1e07      	subs	r7, r0, #0
   159ee:	f6ff ae9a 	blt.w	15726 <d_name+0x3a>
   159f2:	4628      	mov	r0, r5
   159f4:	f7ff fe7a 	bl	156ec <d_name>
   159f8:	4604      	mov	r4, r0
   159fa:	2800      	cmp	r0, #0
   159fc:	f43f af54 	beq.w	158a8 <d_name+0x1bc>
   15a00:	7803      	ldrb	r3, [r0, #0]
   15a02:	2b45      	cmp	r3, #69	; 0x45
   15a04:	f43f af50 	beq.w	158a8 <d_name+0x1bc>
   15a08:	2b47      	cmp	r3, #71	; 0x47
   15a0a:	f43f af4d 	beq.w	158a8 <d_name+0x1bc>
   15a0e:	68eb      	ldr	r3, [r5, #12]
   15a10:	781a      	ldrb	r2, [r3, #0]
   15a12:	2a5f      	cmp	r2, #95	; 0x5f
   15a14:	f47f af48 	bne.w	158a8 <d_name+0x1bc>
   15a18:	e73b      	b.n	15892 <d_name+0x1a6>
   15a1a:	4628      	mov	r0, r5
   15a1c:	3303      	adds	r3, #3
   15a1e:	f840 3f0c 	str.w	r3, [r0, #12]!
   15a22:	f7fe fee1 	bl	147e8 <d_number.isra.0>
   15a26:	2800      	cmp	r0, #0
   15a28:	dac4      	bge.n	159b4 <d_name+0x2c8>
   15a2a:	e67c      	b.n	15726 <d_name+0x3a>
   15a2c:	100803ff 	.word	0x100803ff
   15a30:	0002446c 	.word	0x0002446c
   15a34:	0002445c 	.word	0x0002445c
   15a38:	f8c9 7000 	str.w	r7, [r9]
   15a3c:	2f00      	cmp	r7, #0
   15a3e:	f43f ae72 	beq.w	15726 <d_name+0x3a>
   15a42:	f1b8 0f00 	cmp.w	r8, #0
   15a46:	d004      	beq.n	15a52 <d_name+0x366>
   15a48:	9b03      	ldr	r3, [sp, #12]
   15a4a:	f8c8 3004 	str.w	r3, [r8, #4]
   15a4e:	f8cd 800c 	str.w	r8, [sp, #12]
   15a52:	7813      	ldrb	r3, [r2, #0]
   15a54:	2b45      	cmp	r3, #69	; 0x45
   15a56:	f47f ae66 	bne.w	15726 <d_name+0x3a>
   15a5a:	3201      	adds	r2, #1
   15a5c:	60ea      	str	r2, [r5, #12]
   15a5e:	9a03      	ldr	r2, [sp, #12]
   15a60:	e669      	b.n	15736 <d_name+0x4a>
   15a62:	bf00      	nop

00015a64 <d_type>:
   15a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a68:	68c2      	ldr	r2, [r0, #12]
   15a6a:	7813      	ldrb	r3, [r2, #0]
   15a6c:	2b72      	cmp	r3, #114	; 0x72
   15a6e:	b083      	sub	sp, #12
   15a70:	4604      	mov	r4, r0
   15a72:	d058      	beq.n	15b26 <d_type+0xc2>
   15a74:	2b56      	cmp	r3, #86	; 0x56
   15a76:	d056      	beq.n	15b26 <d_type+0xc2>
   15a78:	2b4b      	cmp	r3, #75	; 0x4b
   15a7a:	d054      	beq.n	15b26 <d_type+0xc2>
   15a7c:	2b44      	cmp	r3, #68	; 0x44
   15a7e:	f000 809f 	beq.w	15bc0 <d_type+0x15c>
   15a82:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15a86:	294a      	cmp	r1, #74	; 0x4a
   15a88:	f200 808a 	bhi.w	15ba0 <d_type+0x13c>
   15a8c:	e8df f011 	tbh	[pc, r1, lsl #1]
   15a90:	012a012a 	.word	0x012a012a
   15a94:	012a012a 	.word	0x012a012a
   15a98:	012a012a 	.word	0x012a012a
   15a9c:	012a012a 	.word	0x012a012a
   15aa0:	012a012a 	.word	0x012a012a
   15aa4:	00880088 	.word	0x00880088
   15aa8:	00880088 	.word	0x00880088
   15aac:	00880088 	.word	0x00880088
   15ab0:	020b0088 	.word	0x020b0088
   15ab4:	01520088 	.word	0x01520088
   15ab8:	00880088 	.word	0x00880088
   15abc:	0160014c 	.word	0x0160014c
   15ac0:	00880088 	.word	0x00880088
   15ac4:	00880088 	.word	0x00880088
   15ac8:	016e0088 	.word	0x016e0088
   15acc:	0186012a 	.word	0x0186012a
   15ad0:	008801c3 	.word	0x008801c3
   15ad4:	01a20194 	.word	0x01a20194
   15ad8:	01f301d1 	.word	0x01f301d1
   15adc:	00880088 	.word	0x00880088
   15ae0:	00880088 	.word	0x00880088
   15ae4:	0088012a 	.word	0x0088012a
   15ae8:	00880088 	.word	0x00880088
   15aec:	00880088 	.word	0x00880088
   15af0:	010c0088 	.word	0x010c0088
   15af4:	010c010c 	.word	0x010c010c
   15af8:	010c010c 	.word	0x010c010c
   15afc:	010c010c 	.word	0x010c010c
   15b00:	010c010c 	.word	0x010c010c
   15b04:	0088010c 	.word	0x0088010c
   15b08:	010c010c 	.word	0x010c010c
   15b0c:	010c010c 	.word	0x010c010c
   15b10:	00880088 	.word	0x00880088
   15b14:	010c0088 	.word	0x010c0088
   15b18:	013e010c 	.word	0x013e010c
   15b1c:	010c010c 	.word	0x010c010c
   15b20:	010c010c 	.word	0x010c010c
   15b24:	010c      	.short	0x010c
   15b26:	2200      	movs	r2, #0
   15b28:	a901      	add	r1, sp, #4
   15b2a:	4620      	mov	r0, r4
   15b2c:	f7fe fd56 	bl	145dc <d_cv_qualifiers>
   15b30:	4605      	mov	r5, r0
   15b32:	2800      	cmp	r0, #0
   15b34:	d034      	beq.n	15ba0 <d_type+0x13c>
   15b36:	68e3      	ldr	r3, [r4, #12]
   15b38:	781b      	ldrb	r3, [r3, #0]
   15b3a:	2b46      	cmp	r3, #70	; 0x46
   15b3c:	4620      	mov	r0, r4
   15b3e:	d034      	beq.n	15baa <d_type+0x146>
   15b40:	f7ff ff90 	bl	15a64 <d_type>
   15b44:	6028      	str	r0, [r5, #0]
   15b46:	b358      	cbz	r0, 15ba0 <d_type+0x13c>
   15b48:	7803      	ldrb	r3, [r0, #0]
   15b4a:	3b1f      	subs	r3, #31
   15b4c:	2b01      	cmp	r3, #1
   15b4e:	d930      	bls.n	15bb2 <d_type+0x14e>
   15b50:	9a01      	ldr	r2, [sp, #4]
   15b52:	b32a      	cbz	r2, 15ba0 <d_type+0x13c>
   15b54:	6a23      	ldr	r3, [r4, #32]
   15b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15b58:	428b      	cmp	r3, r1
   15b5a:	da21      	bge.n	15ba0 <d_type+0x13c>
   15b5c:	69e0      	ldr	r0, [r4, #28]
   15b5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15b62:	9d01      	ldr	r5, [sp, #4]
   15b64:	1c59      	adds	r1, r3, #1
   15b66:	4628      	mov	r0, r5
   15b68:	6221      	str	r1, [r4, #32]
   15b6a:	b003      	add	sp, #12
   15b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15b70:	2301      	movs	r3, #1
   15b72:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15b74:	6343      	str	r3, [r0, #52]	; 0x34
   15b76:	f7ff fb51 	bl	1521c <d_expression_1>
   15b7a:	6365      	str	r5, [r4, #52]	; 0x34
   15b7c:	4602      	mov	r2, r0
   15b7e:	2300      	movs	r3, #0
   15b80:	2142      	movs	r1, #66	; 0x42
   15b82:	4620      	mov	r0, r4
   15b84:	f7fe fcde 	bl	14544 <d_make_comp>
   15b88:	4605      	mov	r5, r0
   15b8a:	9001      	str	r0, [sp, #4]
   15b8c:	b140      	cbz	r0, 15ba0 <d_type+0x13c>
   15b8e:	68e3      	ldr	r3, [r4, #12]
   15b90:	781a      	ldrb	r2, [r3, #0]
   15b92:	b12a      	cbz	r2, 15ba0 <d_type+0x13c>
   15b94:	1c5a      	adds	r2, r3, #1
   15b96:	60e2      	str	r2, [r4, #12]
   15b98:	781b      	ldrb	r3, [r3, #0]
   15b9a:	2b45      	cmp	r3, #69	; 0x45
   15b9c:	f000 80aa 	beq.w	15cf4 <d_type+0x290>
   15ba0:	2500      	movs	r5, #0
   15ba2:	4628      	mov	r0, r5
   15ba4:	b003      	add	sp, #12
   15ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15baa:	f000 fd53 	bl	16654 <d_function_type>
   15bae:	6028      	str	r0, [r5, #0]
   15bb0:	e7c9      	b.n	15b46 <d_type+0xe2>
   15bb2:	9a01      	ldr	r2, [sp, #4]
   15bb4:	6843      	ldr	r3, [r0, #4]
   15bb6:	6042      	str	r2, [r0, #4]
   15bb8:	682a      	ldr	r2, [r5, #0]
   15bba:	9201      	str	r2, [sp, #4]
   15bbc:	602b      	str	r3, [r5, #0]
   15bbe:	e7c7      	b.n	15b50 <d_type+0xec>
   15bc0:	7853      	ldrb	r3, [r2, #1]
   15bc2:	2b78      	cmp	r3, #120	; 0x78
   15bc4:	d0af      	beq.n	15b26 <d_type+0xc2>
   15bc6:	1c53      	adds	r3, r2, #1
   15bc8:	60c3      	str	r3, [r0, #12]
   15bca:	7853      	ldrb	r3, [r2, #1]
   15bcc:	2b00      	cmp	r3, #0
   15bce:	d0e7      	beq.n	15ba0 <d_type+0x13c>
   15bd0:	1c93      	adds	r3, r2, #2
   15bd2:	60c3      	str	r3, [r0, #12]
   15bd4:	7853      	ldrb	r3, [r2, #1]
   15bd6:	3b46      	subs	r3, #70	; 0x46
   15bd8:	2b30      	cmp	r3, #48	; 0x30
   15bda:	d8e1      	bhi.n	15ba0 <d_type+0x13c>
   15bdc:	a101      	add	r1, pc, #4	; (adr r1, 15be4 <d_type+0x180>)
   15bde:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15be2:	bf00      	nop
   15be4:	000160cf 	.word	0x000160cf
   15be8:	00015ba1 	.word	0x00015ba1
   15bec:	00015ba1 	.word	0x00015ba1
   15bf0:	00015ba1 	.word	0x00015ba1
   15bf4:	00015ba1 	.word	0x00015ba1
   15bf8:	00015ba1 	.word	0x00015ba1
   15bfc:	00015ba1 	.word	0x00015ba1
   15c00:	00015ba1 	.word	0x00015ba1
   15c04:	00015ba1 	.word	0x00015ba1
   15c08:	00015ba1 	.word	0x00015ba1
   15c0c:	00015ba1 	.word	0x00015ba1
   15c10:	00015ba1 	.word	0x00015ba1
   15c14:	00015ba1 	.word	0x00015ba1
   15c18:	00015ba1 	.word	0x00015ba1
   15c1c:	00015b71 	.word	0x00015b71
   15c20:	00015ba1 	.word	0x00015ba1
   15c24:	00015ba1 	.word	0x00015ba1
   15c28:	00015ba1 	.word	0x00015ba1
   15c2c:	00015ba1 	.word	0x00015ba1
   15c30:	00015ba1 	.word	0x00015ba1
   15c34:	00015ba1 	.word	0x00015ba1
   15c38:	00015ba1 	.word	0x00015ba1
   15c3c:	00015ba1 	.word	0x00015ba1
   15c40:	00015ba1 	.word	0x00015ba1
   15c44:	00015ba1 	.word	0x00015ba1
   15c48:	00015ba1 	.word	0x00015ba1
   15c4c:	00015ba1 	.word	0x00015ba1
   15c50:	000160a3 	.word	0x000160a3
   15c54:	00015ba1 	.word	0x00015ba1
   15c58:	00016077 	.word	0x00016077
   15c5c:	00016057 	.word	0x00016057
   15c60:	0001602d 	.word	0x0001602d
   15c64:	00015fff 	.word	0x00015fff
   15c68:	00015ba1 	.word	0x00015ba1
   15c6c:	00015fd1 	.word	0x00015fd1
   15c70:	00015fad 	.word	0x00015fad
   15c74:	00015ba1 	.word	0x00015ba1
   15c78:	00015ba1 	.word	0x00015ba1
   15c7c:	00015ba1 	.word	0x00015ba1
   15c80:	00015ba1 	.word	0x00015ba1
   15c84:	00015f73 	.word	0x00015f73
   15c88:	00015ba1 	.word	0x00015ba1
   15c8c:	00015f5d 	.word	0x00015f5d
   15c90:	00015ba1 	.word	0x00015ba1
   15c94:	00015ba1 	.word	0x00015ba1
   15c98:	00015f2f 	.word	0x00015f2f
   15c9c:	00015b71 	.word	0x00015b71
   15ca0:	00015ba1 	.word	0x00015ba1
   15ca4:	00015ef9 	.word	0x00015ef9
   15ca8:	6960      	ldr	r0, [r4, #20]
   15caa:	69a5      	ldr	r5, [r4, #24]
   15cac:	49bc      	ldr	r1, [pc, #752]	; (15fa0 <d_type+0x53c>)
   15cae:	3b61      	subs	r3, #97	; 0x61
   15cb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15cb4:	42a8      	cmp	r0, r5
   15cb6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15cba:	f280 823a 	bge.w	16132 <d_type+0x6ce>
   15cbe:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15cc2:	6926      	ldr	r6, [r4, #16]
   15cc4:	0089      	lsls	r1, r1, #2
   15cc6:	3001      	adds	r0, #1
   15cc8:	1875      	adds	r5, r6, r1
   15cca:	6160      	str	r0, [r4, #20]
   15ccc:	f000 8231 	beq.w	16132 <d_type+0x6ce>
   15cd0:	2027      	movs	r0, #39	; 0x27
   15cd2:	5470      	strb	r0, [r6, r1]
   15cd4:	606b      	str	r3, [r5, #4]
   15cd6:	6859      	ldr	r1, [r3, #4]
   15cd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15cda:	3201      	adds	r2, #1
   15cdc:	440b      	add	r3, r1
   15cde:	60e2      	str	r2, [r4, #12]
   15ce0:	6323      	str	r3, [r4, #48]	; 0x30
   15ce2:	e75e      	b.n	15ba2 <d_type+0x13e>
   15ce4:	4620      	mov	r0, r4
   15ce6:	f7ff fd01 	bl	156ec <d_name>
   15cea:	4605      	mov	r5, r0
   15cec:	9001      	str	r0, [sp, #4]
   15cee:	2d00      	cmp	r5, #0
   15cf0:	f43f af56 	beq.w	15ba0 <d_type+0x13c>
   15cf4:	6a23      	ldr	r3, [r4, #32]
   15cf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15cf8:	4293      	cmp	r3, r2
   15cfa:	f6bf af51 	bge.w	15ba0 <d_type+0x13c>
   15cfe:	69e1      	ldr	r1, [r4, #28]
   15d00:	1c5a      	adds	r2, r3, #1
   15d02:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15d06:	9d01      	ldr	r5, [sp, #4]
   15d08:	6222      	str	r2, [r4, #32]
   15d0a:	e74a      	b.n	15ba2 <d_type+0x13e>
   15d0c:	3201      	adds	r2, #1
   15d0e:	60e2      	str	r2, [r4, #12]
   15d10:	4620      	mov	r0, r4
   15d12:	f7fe fde9 	bl	148e8 <d_source_name>
   15d16:	2300      	movs	r3, #0
   15d18:	4602      	mov	r2, r0
   15d1a:	2128      	movs	r1, #40	; 0x28
   15d1c:	4620      	mov	r0, r4
   15d1e:	f7fe fc11 	bl	14544 <d_make_comp>
   15d22:	4605      	mov	r5, r0
   15d24:	9001      	str	r0, [sp, #4]
   15d26:	e7e2      	b.n	15cee <d_type+0x28a>
   15d28:	4620      	mov	r0, r4
   15d2a:	f000 fc93 	bl	16654 <d_function_type>
   15d2e:	4605      	mov	r5, r0
   15d30:	9001      	str	r0, [sp, #4]
   15d32:	e7dc      	b.n	15cee <d_type+0x28a>
   15d34:	3201      	adds	r2, #1
   15d36:	60e2      	str	r2, [r4, #12]
   15d38:	4620      	mov	r0, r4
   15d3a:	f7ff fe93 	bl	15a64 <d_type>
   15d3e:	2300      	movs	r3, #0
   15d40:	4602      	mov	r2, r0
   15d42:	2125      	movs	r1, #37	; 0x25
   15d44:	4620      	mov	r0, r4
   15d46:	f7fe fbfd 	bl	14544 <d_make_comp>
   15d4a:	4605      	mov	r5, r0
   15d4c:	9001      	str	r0, [sp, #4]
   15d4e:	e7ce      	b.n	15cee <d_type+0x28a>
   15d50:	3201      	adds	r2, #1
   15d52:	60e2      	str	r2, [r4, #12]
   15d54:	4620      	mov	r0, r4
   15d56:	f7ff fe85 	bl	15a64 <d_type>
   15d5a:	2300      	movs	r3, #0
   15d5c:	4602      	mov	r2, r0
   15d5e:	2126      	movs	r1, #38	; 0x26
   15d60:	4620      	mov	r0, r4
   15d62:	f7fe fbef 	bl	14544 <d_make_comp>
   15d66:	4605      	mov	r5, r0
   15d68:	9001      	str	r0, [sp, #4]
   15d6a:	e7c0      	b.n	15cee <d_type+0x28a>
   15d6c:	3201      	adds	r2, #1
   15d6e:	60e2      	str	r2, [r4, #12]
   15d70:	4620      	mov	r0, r4
   15d72:	f7ff fe77 	bl	15a64 <d_type>
   15d76:	4605      	mov	r5, r0
   15d78:	2800      	cmp	r0, #0
   15d7a:	f000 80bb 	beq.w	15ef4 <d_type+0x490>
   15d7e:	4620      	mov	r0, r4
   15d80:	f7ff fe70 	bl	15a64 <d_type>
   15d84:	2800      	cmp	r0, #0
   15d86:	f000 80b5 	beq.w	15ef4 <d_type+0x490>
   15d8a:	4603      	mov	r3, r0
   15d8c:	462a      	mov	r2, r5
   15d8e:	212b      	movs	r1, #43	; 0x2b
   15d90:	4620      	mov	r0, r4
   15d92:	f7fe fbd7 	bl	14544 <d_make_comp>
   15d96:	4605      	mov	r5, r0
   15d98:	9501      	str	r5, [sp, #4]
   15d9a:	e7a8      	b.n	15cee <d_type+0x28a>
   15d9c:	3201      	adds	r2, #1
   15d9e:	60e2      	str	r2, [r4, #12]
   15da0:	4620      	mov	r0, r4
   15da2:	f7ff fe5f 	bl	15a64 <d_type>
   15da6:	2300      	movs	r3, #0
   15da8:	4602      	mov	r2, r0
   15daa:	2124      	movs	r1, #36	; 0x24
   15dac:	4620      	mov	r0, r4
   15dae:	f7fe fbc9 	bl	14544 <d_make_comp>
   15db2:	4605      	mov	r5, r0
   15db4:	9001      	str	r0, [sp, #4]
   15db6:	e79a      	b.n	15cee <d_type+0x28a>
   15db8:	3201      	adds	r2, #1
   15dba:	60e2      	str	r2, [r4, #12]
   15dbc:	4620      	mov	r0, r4
   15dbe:	f7ff fe51 	bl	15a64 <d_type>
   15dc2:	2300      	movs	r3, #0
   15dc4:	4602      	mov	r2, r0
   15dc6:	2123      	movs	r1, #35	; 0x23
   15dc8:	4620      	mov	r0, r4
   15dca:	f7fe fbbb 	bl	14544 <d_make_comp>
   15dce:	4605      	mov	r5, r0
   15dd0:	9001      	str	r0, [sp, #4]
   15dd2:	e78c      	b.n	15cee <d_type+0x28a>
   15dd4:	7853      	ldrb	r3, [r2, #1]
   15dd6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15dda:	2a09      	cmp	r2, #9
   15ddc:	d905      	bls.n	15dea <d_type+0x386>
   15dde:	2b5f      	cmp	r3, #95	; 0x5f
   15de0:	d003      	beq.n	15dea <d_type+0x386>
   15de2:	3b41      	subs	r3, #65	; 0x41
   15de4:	2b19      	cmp	r3, #25
   15de6:	f200 81c3 	bhi.w	16170 <d_type+0x70c>
   15dea:	2100      	movs	r1, #0
   15dec:	4620      	mov	r0, r4
   15dee:	f7fe fdf3 	bl	149d8 <d_substitution>
   15df2:	68e3      	ldr	r3, [r4, #12]
   15df4:	9001      	str	r0, [sp, #4]
   15df6:	781b      	ldrb	r3, [r3, #0]
   15df8:	2b49      	cmp	r3, #73	; 0x49
   15dfa:	4605      	mov	r5, r0
   15dfc:	f47f aed1 	bne.w	15ba2 <d_type+0x13e>
   15e00:	4620      	mov	r0, r4
   15e02:	f7ff fc69 	bl	156d8 <d_template_args>
   15e06:	462a      	mov	r2, r5
   15e08:	4603      	mov	r3, r0
   15e0a:	2104      	movs	r1, #4
   15e0c:	4620      	mov	r0, r4
   15e0e:	f7fe fb99 	bl	14544 <d_make_comp>
   15e12:	4605      	mov	r5, r0
   15e14:	e7c0      	b.n	15d98 <d_type+0x334>
   15e16:	3201      	adds	r2, #1
   15e18:	60e2      	str	r2, [r4, #12]
   15e1a:	4620      	mov	r0, r4
   15e1c:	f7ff fe22 	bl	15a64 <d_type>
   15e20:	2300      	movs	r3, #0
   15e22:	4602      	mov	r2, r0
   15e24:	2122      	movs	r1, #34	; 0x22
   15e26:	4620      	mov	r0, r4
   15e28:	f7fe fb8c 	bl	14544 <d_make_comp>
   15e2c:	4605      	mov	r5, r0
   15e2e:	9001      	str	r0, [sp, #4]
   15e30:	e75d      	b.n	15cee <d_type+0x28a>
   15e32:	4620      	mov	r0, r4
   15e34:	f7fe fd36 	bl	148a4 <d_template_param>
   15e38:	68e6      	ldr	r6, [r4, #12]
   15e3a:	9001      	str	r0, [sp, #4]
   15e3c:	7833      	ldrb	r3, [r6, #0]
   15e3e:	2b49      	cmp	r3, #73	; 0x49
   15e40:	4605      	mov	r5, r0
   15e42:	f47f af54 	bne.w	15cee <d_type+0x28a>
   15e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15e48:	2b00      	cmp	r3, #0
   15e4a:	f040 81a9 	bne.w	161a0 <d_type+0x73c>
   15e4e:	2800      	cmp	r0, #0
   15e50:	f43f aea6 	beq.w	15ba0 <d_type+0x13c>
   15e54:	6a23      	ldr	r3, [r4, #32]
   15e56:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15e58:	4293      	cmp	r3, r2
   15e5a:	f6bf aea1 	bge.w	15ba0 <d_type+0x13c>
   15e5e:	69e1      	ldr	r1, [r4, #28]
   15e60:	1c5a      	adds	r2, r3, #1
   15e62:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15e66:	6222      	str	r2, [r4, #32]
   15e68:	4620      	mov	r0, r4
   15e6a:	9d01      	ldr	r5, [sp, #4]
   15e6c:	f7ff fc34 	bl	156d8 <d_template_args>
   15e70:	462a      	mov	r2, r5
   15e72:	4603      	mov	r3, r0
   15e74:	e7c9      	b.n	15e0a <d_type+0x3a6>
   15e76:	3201      	adds	r2, #1
   15e78:	60e2      	str	r2, [r4, #12]
   15e7a:	4620      	mov	r0, r4
   15e7c:	f7fe fd34 	bl	148e8 <d_source_name>
   15e80:	68e3      	ldr	r3, [r4, #12]
   15e82:	9001      	str	r0, [sp, #4]
   15e84:	781b      	ldrb	r3, [r3, #0]
   15e86:	2b49      	cmp	r3, #73	; 0x49
   15e88:	4605      	mov	r5, r0
   15e8a:	f000 817e 	beq.w	1618a <d_type+0x726>
   15e8e:	4620      	mov	r0, r4
   15e90:	f7ff fde8 	bl	15a64 <d_type>
   15e94:	9b01      	ldr	r3, [sp, #4]
   15e96:	4602      	mov	r2, r0
   15e98:	2121      	movs	r1, #33	; 0x21
   15e9a:	4620      	mov	r0, r4
   15e9c:	f7fe fb52 	bl	14544 <d_make_comp>
   15ea0:	4605      	mov	r5, r0
   15ea2:	9001      	str	r0, [sp, #4]
   15ea4:	e723      	b.n	15cee <d_type+0x28a>
   15ea6:	1c51      	adds	r1, r2, #1
   15ea8:	60e1      	str	r1, [r4, #12]
   15eaa:	7853      	ldrb	r3, [r2, #1]
   15eac:	2b5f      	cmp	r3, #95	; 0x5f
   15eae:	f000 8144 	beq.w	1613a <d_type+0x6d6>
   15eb2:	3b30      	subs	r3, #48	; 0x30
   15eb4:	2b09      	cmp	r3, #9
   15eb6:	f200 814e 	bhi.w	16156 <d_type+0x6f2>
   15eba:	460b      	mov	r3, r1
   15ebc:	3301      	adds	r3, #1
   15ebe:	60e3      	str	r3, [r4, #12]
   15ec0:	781a      	ldrb	r2, [r3, #0]
   15ec2:	3a30      	subs	r2, #48	; 0x30
   15ec4:	2a09      	cmp	r2, #9
   15ec6:	d9f9      	bls.n	15ebc <d_type+0x458>
   15ec8:	6962      	ldr	r2, [r4, #20]
   15eca:	69a0      	ldr	r0, [r4, #24]
   15ecc:	4282      	cmp	r2, r0
   15ece:	da11      	bge.n	15ef4 <d_type+0x490>
   15ed0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15ed4:	6926      	ldr	r6, [r4, #16]
   15ed6:	0080      	lsls	r0, r0, #2
   15ed8:	3201      	adds	r2, #1
   15eda:	1835      	adds	r5, r6, r0
   15edc:	6162      	str	r2, [r4, #20]
   15ede:	d009      	beq.n	15ef4 <d_type+0x490>
   15ee0:	1a5a      	subs	r2, r3, r1
   15ee2:	d007      	beq.n	15ef4 <d_type+0x490>
   15ee4:	2700      	movs	r7, #0
   15ee6:	5437      	strb	r7, [r6, r0]
   15ee8:	6069      	str	r1, [r5, #4]
   15eea:	60aa      	str	r2, [r5, #8]
   15eec:	781a      	ldrb	r2, [r3, #0]
   15eee:	2a5f      	cmp	r2, #95	; 0x5f
   15ef0:	f000 8190 	beq.w	16214 <d_type+0x7b0>
   15ef4:	2500      	movs	r5, #0
   15ef6:	e74f      	b.n	15d98 <d_type+0x334>
   15ef8:	7893      	ldrb	r3, [r2, #2]
   15efa:	2b5f      	cmp	r3, #95	; 0x5f
   15efc:	f000 8180 	beq.w	16200 <d_type+0x79c>
   15f00:	f7fe fc9c 	bl	1483c <d_number_component>
   15f04:	4605      	mov	r5, r0
   15f06:	2d00      	cmp	r5, #0
   15f08:	f43f af46 	beq.w	15d98 <d_type+0x334>
   15f0c:	68e3      	ldr	r3, [r4, #12]
   15f0e:	781a      	ldrb	r2, [r3, #0]
   15f10:	2a5f      	cmp	r2, #95	; 0x5f
   15f12:	d1ef      	bne.n	15ef4 <d_type+0x490>
   15f14:	3301      	adds	r3, #1
   15f16:	60e3      	str	r3, [r4, #12]
   15f18:	4620      	mov	r0, r4
   15f1a:	f7ff fda3 	bl	15a64 <d_type>
   15f1e:	462a      	mov	r2, r5
   15f20:	4603      	mov	r3, r0
   15f22:	212d      	movs	r1, #45	; 0x2d
   15f24:	4620      	mov	r0, r4
   15f26:	f7fe fb0d 	bl	14544 <d_make_comp>
   15f2a:	4605      	mov	r5, r0
   15f2c:	e734      	b.n	15d98 <d_type+0x334>
   15f2e:	6942      	ldr	r2, [r0, #20]
   15f30:	6983      	ldr	r3, [r0, #24]
   15f32:	429a      	cmp	r2, r3
   15f34:	f280 80fd 	bge.w	16132 <d_type+0x6ce>
   15f38:	230c      	movs	r3, #12
   15f3a:	6901      	ldr	r1, [r0, #16]
   15f3c:	fb03 f302 	mul.w	r3, r3, r2
   15f40:	18cd      	adds	r5, r1, r3
   15f42:	f102 0201 	add.w	r2, r2, #1
   15f46:	6142      	str	r2, [r0, #20]
   15f48:	f000 80f3 	beq.w	16132 <d_type+0x6ce>
   15f4c:	4a15      	ldr	r2, [pc, #84]	; (15fa4 <d_type+0x540>)
   15f4e:	2027      	movs	r0, #39	; 0x27
   15f50:	54c8      	strb	r0, [r1, r3]
   15f52:	606a      	str	r2, [r5, #4]
   15f54:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f56:	3308      	adds	r3, #8
   15f58:	6323      	str	r3, [r4, #48]	; 0x30
   15f5a:	e622      	b.n	15ba2 <d_type+0x13e>
   15f5c:	f7ff fd82 	bl	15a64 <d_type>
   15f60:	2300      	movs	r3, #0
   15f62:	4602      	mov	r2, r0
   15f64:	214a      	movs	r1, #74	; 0x4a
   15f66:	4620      	mov	r0, r4
   15f68:	f7fe faec 	bl	14544 <d_make_comp>
   15f6c:	4605      	mov	r5, r0
   15f6e:	9001      	str	r0, [sp, #4]
   15f70:	e6bd      	b.n	15cee <d_type+0x28a>
   15f72:	6942      	ldr	r2, [r0, #20]
   15f74:	6983      	ldr	r3, [r0, #24]
   15f76:	429a      	cmp	r2, r3
   15f78:	f280 80db 	bge.w	16132 <d_type+0x6ce>
   15f7c:	230c      	movs	r3, #12
   15f7e:	6901      	ldr	r1, [r0, #16]
   15f80:	fb03 f302 	mul.w	r3, r3, r2
   15f84:	18cd      	adds	r5, r1, r3
   15f86:	f102 0201 	add.w	r2, r2, #1
   15f8a:	6142      	str	r2, [r0, #20]
   15f8c:	f000 80d1 	beq.w	16132 <d_type+0x6ce>
   15f90:	2027      	movs	r0, #39	; 0x27
   15f92:	4a05      	ldr	r2, [pc, #20]	; (15fa8 <d_type+0x544>)
   15f94:	54c8      	strb	r0, [r1, r3]
   15f96:	606a      	str	r2, [r5, #4]
   15f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f9a:	3311      	adds	r3, #17
   15f9c:	6323      	str	r3, [r4, #48]	; 0x30
   15f9e:	e600      	b.n	15ba2 <d_type+0x13e>
   15fa0:	00023d4c 	.word	0x00023d4c
   15fa4:	00023fa4 	.word	0x00023fa4
   15fa8:	00023fcc 	.word	0x00023fcc
   15fac:	6942      	ldr	r2, [r0, #20]
   15fae:	6983      	ldr	r3, [r0, #24]
   15fb0:	429a      	cmp	r2, r3
   15fb2:	f280 80be 	bge.w	16132 <d_type+0x6ce>
   15fb6:	230c      	movs	r3, #12
   15fb8:	6901      	ldr	r1, [r0, #16]
   15fba:	fb03 f302 	mul.w	r3, r3, r2
   15fbe:	18cd      	adds	r5, r1, r3
   15fc0:	f102 0201 	add.w	r2, r2, #1
   15fc4:	6142      	str	r2, [r0, #20]
   15fc6:	f000 80b4 	beq.w	16132 <d_type+0x6ce>
   15fca:	2027      	movs	r0, #39	; 0x27
   15fcc:	4a92      	ldr	r2, [pc, #584]	; (16218 <d_type+0x7b4>)
   15fce:	e7bf      	b.n	15f50 <d_type+0x4ec>
   15fd0:	6942      	ldr	r2, [r0, #20]
   15fd2:	6983      	ldr	r3, [r0, #24]
   15fd4:	429a      	cmp	r2, r3
   15fd6:	f280 80ac 	bge.w	16132 <d_type+0x6ce>
   15fda:	230c      	movs	r3, #12
   15fdc:	6901      	ldr	r1, [r0, #16]
   15fde:	fb03 f302 	mul.w	r3, r3, r2
   15fe2:	18cd      	adds	r5, r1, r3
   15fe4:	f102 0201 	add.w	r2, r2, #1
   15fe8:	6142      	str	r2, [r0, #20]
   15fea:	f000 80a2 	beq.w	16132 <d_type+0x6ce>
   15fee:	2027      	movs	r0, #39	; 0x27
   15ff0:	4a8a      	ldr	r2, [pc, #552]	; (1621c <d_type+0x7b8>)
   15ff2:	54c8      	strb	r0, [r1, r3]
   15ff4:	606a      	str	r2, [r5, #4]
   15ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15ff8:	3304      	adds	r3, #4
   15ffa:	6323      	str	r3, [r4, #48]	; 0x30
   15ffc:	e5d1      	b.n	15ba2 <d_type+0x13e>
   15ffe:	6942      	ldr	r2, [r0, #20]
   16000:	6983      	ldr	r3, [r0, #24]
   16002:	429a      	cmp	r2, r3
   16004:	f280 8095 	bge.w	16132 <d_type+0x6ce>
   16008:	230c      	movs	r3, #12
   1600a:	6901      	ldr	r1, [r0, #16]
   1600c:	fb03 f302 	mul.w	r3, r3, r2
   16010:	18cd      	adds	r5, r1, r3
   16012:	f102 0201 	add.w	r2, r2, #1
   16016:	6142      	str	r2, [r0, #20]
   16018:	f000 808b 	beq.w	16132 <d_type+0x6ce>
   1601c:	4a80      	ldr	r2, [pc, #512]	; (16220 <d_type+0x7bc>)
   1601e:	2027      	movs	r0, #39	; 0x27
   16020:	54c8      	strb	r0, [r1, r3]
   16022:	606a      	str	r2, [r5, #4]
   16024:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16026:	3309      	adds	r3, #9
   16028:	6323      	str	r3, [r4, #48]	; 0x30
   1602a:	e5ba      	b.n	15ba2 <d_type+0x13e>
   1602c:	6942      	ldr	r2, [r0, #20]
   1602e:	6983      	ldr	r3, [r0, #24]
   16030:	429a      	cmp	r2, r3
   16032:	da7e      	bge.n	16132 <d_type+0x6ce>
   16034:	230c      	movs	r3, #12
   16036:	6901      	ldr	r1, [r0, #16]
   16038:	fb03 f302 	mul.w	r3, r3, r2
   1603c:	18cd      	adds	r5, r1, r3
   1603e:	f102 0201 	add.w	r2, r2, #1
   16042:	6142      	str	r2, [r0, #20]
   16044:	d075      	beq.n	16132 <d_type+0x6ce>
   16046:	2027      	movs	r0, #39	; 0x27
   16048:	4a76      	ldr	r2, [pc, #472]	; (16224 <d_type+0x7c0>)
   1604a:	54c8      	strb	r0, [r1, r3]
   1604c:	606a      	str	r2, [r5, #4]
   1604e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16050:	330a      	adds	r3, #10
   16052:	6323      	str	r3, [r4, #48]	; 0x30
   16054:	e5a5      	b.n	15ba2 <d_type+0x13e>
   16056:	6942      	ldr	r2, [r0, #20]
   16058:	6983      	ldr	r3, [r0, #24]
   1605a:	429a      	cmp	r2, r3
   1605c:	da69      	bge.n	16132 <d_type+0x6ce>
   1605e:	230c      	movs	r3, #12
   16060:	6901      	ldr	r1, [r0, #16]
   16062:	fb03 f302 	mul.w	r3, r3, r2
   16066:	18cd      	adds	r5, r1, r3
   16068:	f102 0201 	add.w	r2, r2, #1
   1606c:	6142      	str	r2, [r0, #20]
   1606e:	d060      	beq.n	16132 <d_type+0x6ce>
   16070:	2027      	movs	r0, #39	; 0x27
   16072:	4a6d      	ldr	r2, [pc, #436]	; (16228 <d_type+0x7c4>)
   16074:	e7d4      	b.n	16020 <d_type+0x5bc>
   16076:	6942      	ldr	r2, [r0, #20]
   16078:	6983      	ldr	r3, [r0, #24]
   1607a:	429a      	cmp	r2, r3
   1607c:	f6bf ad90 	bge.w	15ba0 <d_type+0x13c>
   16080:	230c      	movs	r3, #12
   16082:	6901      	ldr	r1, [r0, #16]
   16084:	fb03 f302 	mul.w	r3, r3, r2
   16088:	18cd      	adds	r5, r1, r3
   1608a:	f102 0201 	add.w	r2, r2, #1
   1608e:	6142      	str	r2, [r0, #20]
   16090:	f43f ad87 	beq.w	15ba2 <d_type+0x13e>
   16094:	2000      	movs	r0, #0
   16096:	54c8      	strb	r0, [r1, r3]
   16098:	4a64      	ldr	r2, [pc, #400]	; (1622c <d_type+0x7c8>)
   1609a:	606a      	str	r2, [r5, #4]
   1609c:	230e      	movs	r3, #14
   1609e:	60ab      	str	r3, [r5, #8]
   160a0:	e57f      	b.n	15ba2 <d_type+0x13e>
   160a2:	6942      	ldr	r2, [r0, #20]
   160a4:	6983      	ldr	r3, [r0, #24]
   160a6:	429a      	cmp	r2, r3
   160a8:	f6bf ad7a 	bge.w	15ba0 <d_type+0x13c>
   160ac:	230c      	movs	r3, #12
   160ae:	6901      	ldr	r1, [r0, #16]
   160b0:	fb03 f302 	mul.w	r3, r3, r2
   160b4:	18cd      	adds	r5, r1, r3
   160b6:	f102 0201 	add.w	r2, r2, #1
   160ba:	6142      	str	r2, [r0, #20]
   160bc:	f43f ad71 	beq.w	15ba2 <d_type+0x13e>
   160c0:	2000      	movs	r0, #0
   160c2:	54c8      	strb	r0, [r1, r3]
   160c4:	4a5a      	ldr	r2, [pc, #360]	; (16230 <d_type+0x7cc>)
   160c6:	606a      	str	r2, [r5, #4]
   160c8:	2304      	movs	r3, #4
   160ca:	60ab      	str	r3, [r5, #8]
   160cc:	e569      	b.n	15ba2 <d_type+0x13e>
   160ce:	6943      	ldr	r3, [r0, #20]
   160d0:	6981      	ldr	r1, [r0, #24]
   160d2:	428b      	cmp	r3, r1
   160d4:	da7a      	bge.n	161cc <d_type+0x768>
   160d6:	6900      	ldr	r0, [r0, #16]
   160d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   160dc:	0089      	lsls	r1, r1, #2
   160de:	3301      	adds	r3, #1
   160e0:	1845      	adds	r5, r0, r1
   160e2:	262c      	movs	r6, #44	; 0x2c
   160e4:	6163      	str	r3, [r4, #20]
   160e6:	9501      	str	r5, [sp, #4]
   160e8:	5446      	strb	r6, [r0, r1]
   160ea:	7893      	ldrb	r3, [r2, #2]
   160ec:	3b30      	subs	r3, #48	; 0x30
   160ee:	b2db      	uxtb	r3, r3
   160f0:	2b09      	cmp	r3, #9
   160f2:	bf94      	ite	ls
   160f4:	2301      	movls	r3, #1
   160f6:	2300      	movhi	r3, #0
   160f8:	812b      	strh	r3, [r5, #8]
   160fa:	d97b      	bls.n	161f4 <d_type+0x790>
   160fc:	4620      	mov	r0, r4
   160fe:	f7ff fcb1 	bl	15a64 <d_type>
   16102:	9b01      	ldr	r3, [sp, #4]
   16104:	6068      	str	r0, [r5, #4]
   16106:	685b      	ldr	r3, [r3, #4]
   16108:	2b00      	cmp	r3, #0
   1610a:	f43f ad49 	beq.w	15ba0 <d_type+0x13c>
   1610e:	f104 000c 	add.w	r0, r4, #12
   16112:	f7fe fb69 	bl	147e8 <d_number.isra.0>
   16116:	68e2      	ldr	r2, [r4, #12]
   16118:	7813      	ldrb	r3, [r2, #0]
   1611a:	b113      	cbz	r3, 16122 <d_type+0x6be>
   1611c:	1c53      	adds	r3, r2, #1
   1611e:	60e3      	str	r3, [r4, #12]
   16120:	7813      	ldrb	r3, [r2, #0]
   16122:	9d01      	ldr	r5, [sp, #4]
   16124:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16128:	fab3 f383 	clz	r3, r3
   1612c:	095b      	lsrs	r3, r3, #5
   1612e:	816b      	strh	r3, [r5, #10]
   16130:	e537      	b.n	15ba2 <d_type+0x13e>
   16132:	2300      	movs	r3, #0
   16134:	9301      	str	r3, [sp, #4]
   16136:	685b      	ldr	r3, [r3, #4]
   16138:	deff      	udf	#255	; 0xff
   1613a:	2500      	movs	r5, #0
   1613c:	3101      	adds	r1, #1
   1613e:	60e1      	str	r1, [r4, #12]
   16140:	4620      	mov	r0, r4
   16142:	f7ff fc8f 	bl	15a64 <d_type>
   16146:	462a      	mov	r2, r5
   16148:	4603      	mov	r3, r0
   1614a:	212a      	movs	r1, #42	; 0x2a
   1614c:	4620      	mov	r0, r4
   1614e:	f7fe f9f9 	bl	14544 <d_make_comp>
   16152:	4605      	mov	r5, r0
   16154:	e620      	b.n	15d98 <d_type+0x334>
   16156:	2301      	movs	r3, #1
   16158:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1615a:	6363      	str	r3, [r4, #52]	; 0x34
   1615c:	4620      	mov	r0, r4
   1615e:	f7ff f85d 	bl	1521c <d_expression_1>
   16162:	6365      	str	r5, [r4, #52]	; 0x34
   16164:	4605      	mov	r5, r0
   16166:	2800      	cmp	r0, #0
   16168:	f43f aec4 	beq.w	15ef4 <d_type+0x490>
   1616c:	68e3      	ldr	r3, [r4, #12]
   1616e:	e6bd      	b.n	15eec <d_type+0x488>
   16170:	4620      	mov	r0, r4
   16172:	f7ff fabb 	bl	156ec <d_name>
   16176:	4605      	mov	r5, r0
   16178:	9001      	str	r0, [sp, #4]
   1617a:	2800      	cmp	r0, #0
   1617c:	f43f ad10 	beq.w	15ba0 <d_type+0x13c>
   16180:	7803      	ldrb	r3, [r0, #0]
   16182:	2b18      	cmp	r3, #24
   16184:	f47f adb6 	bne.w	15cf4 <d_type+0x290>
   16188:	e50b      	b.n	15ba2 <d_type+0x13e>
   1618a:	4620      	mov	r0, r4
   1618c:	f7ff faa4 	bl	156d8 <d_template_args>
   16190:	462a      	mov	r2, r5
   16192:	4603      	mov	r3, r0
   16194:	2104      	movs	r1, #4
   16196:	4620      	mov	r0, r4
   16198:	f7fe f9d4 	bl	14544 <d_make_comp>
   1619c:	9001      	str	r0, [sp, #4]
   1619e:	e676      	b.n	15e8e <d_type+0x42a>
   161a0:	4620      	mov	r0, r4
   161a2:	f8d4 9014 	ldr.w	r9, [r4, #20]
   161a6:	f8d4 8020 	ldr.w	r8, [r4, #32]
   161aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   161ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
   161ae:	f7ff fa93 	bl	156d8 <d_template_args>
   161b2:	68e2      	ldr	r2, [r4, #12]
   161b4:	7812      	ldrb	r2, [r2, #0]
   161b6:	2a49      	cmp	r2, #73	; 0x49
   161b8:	d00b      	beq.n	161d2 <d_type+0x76e>
   161ba:	6325      	str	r5, [r4, #48]	; 0x30
   161bc:	60e6      	str	r6, [r4, #12]
   161be:	f8c4 9014 	str.w	r9, [r4, #20]
   161c2:	f8c4 8020 	str.w	r8, [r4, #32]
   161c6:	62a7      	str	r7, [r4, #40]	; 0x28
   161c8:	9d01      	ldr	r5, [sp, #4]
   161ca:	e590      	b.n	15cee <d_type+0x28a>
   161cc:	2300      	movs	r3, #0
   161ce:	701b      	strb	r3, [r3, #0]
   161d0:	deff      	udf	#255	; 0xff
   161d2:	9b01      	ldr	r3, [sp, #4]
   161d4:	2b00      	cmp	r3, #0
   161d6:	f43f ace3 	beq.w	15ba0 <d_type+0x13c>
   161da:	6a22      	ldr	r2, [r4, #32]
   161dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   161de:	428a      	cmp	r2, r1
   161e0:	f6bf acde 	bge.w	15ba0 <d_type+0x13c>
   161e4:	69e5      	ldr	r5, [r4, #28]
   161e6:	1c51      	adds	r1, r2, #1
   161e8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   161ec:	9a01      	ldr	r2, [sp, #4]
   161ee:	6221      	str	r1, [r4, #32]
   161f0:	4603      	mov	r3, r0
   161f2:	e60a      	b.n	15e0a <d_type+0x3a6>
   161f4:	f104 000c 	add.w	r0, r4, #12
   161f8:	f7fe faf6 	bl	147e8 <d_number.isra.0>
   161fc:	9d01      	ldr	r5, [sp, #4]
   161fe:	e77d      	b.n	160fc <d_type+0x698>
   16200:	3203      	adds	r2, #3
   16202:	2301      	movs	r3, #1
   16204:	6b46      	ldr	r6, [r0, #52]	; 0x34
   16206:	60c2      	str	r2, [r0, #12]
   16208:	6343      	str	r3, [r0, #52]	; 0x34
   1620a:	f7ff f807 	bl	1521c <d_expression_1>
   1620e:	6366      	str	r6, [r4, #52]	; 0x34
   16210:	4605      	mov	r5, r0
   16212:	e678      	b.n	15f06 <d_type+0x4a2>
   16214:	4619      	mov	r1, r3
   16216:	e791      	b.n	1613c <d_type+0x6d8>
   16218:	00023fb8 	.word	0x00023fb8
   1621c:	00023f90 	.word	0x00023f90
   16220:	00023f54 	.word	0x00023f54
   16224:	00023f7c 	.word	0x00023f7c
   16228:	00023f68 	.word	0x00023f68
   1622c:	00024478 	.word	0x00024478
   16230:	00024470 	.word	0x00024470

00016234 <d_operator_name>:
   16234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16236:	68c3      	ldr	r3, [r0, #12]
   16238:	781e      	ldrb	r6, [r3, #0]
   1623a:	4684      	mov	ip, r0
   1623c:	b326      	cbz	r6, 16288 <d_operator_name+0x54>
   1623e:	1c5a      	adds	r2, r3, #1
   16240:	60c2      	str	r2, [r0, #12]
   16242:	785a      	ldrb	r2, [r3, #1]
   16244:	781e      	ldrb	r6, [r3, #0]
   16246:	2a00      	cmp	r2, #0
   16248:	d058      	beq.n	162fc <d_operator_name+0xc8>
   1624a:	1c9a      	adds	r2, r3, #2
   1624c:	60c2      	str	r2, [r0, #12]
   1624e:	2e76      	cmp	r6, #118	; 0x76
   16250:	4604      	mov	r4, r0
   16252:	f893 e001 	ldrb.w	lr, [r3, #1]
   16256:	d043      	beq.n	162e0 <d_operator_name+0xac>
   16258:	2e63      	cmp	r6, #99	; 0x63
   1625a:	d116      	bne.n	1628a <d_operator_name+0x56>
   1625c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   16260:	d113      	bne.n	1628a <d_operator_name+0x56>
   16262:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16264:	6b85      	ldr	r5, [r0, #56]	; 0x38
   16266:	fab3 f383 	clz	r3, r3
   1626a:	095b      	lsrs	r3, r3, #5
   1626c:	6383      	str	r3, [r0, #56]	; 0x38
   1626e:	f7ff fbf9 	bl	15a64 <d_type>
   16272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16274:	4602      	mov	r2, r0
   16276:	2b00      	cmp	r3, #0
   16278:	d052      	beq.n	16320 <d_operator_name+0xec>
   1627a:	2300      	movs	r3, #0
   1627c:	2134      	movs	r1, #52	; 0x34
   1627e:	4620      	mov	r0, r4
   16280:	f7fe f960 	bl	14544 <d_make_comp>
   16284:	63a5      	str	r5, [r4, #56]	; 0x38
   16286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16288:	46b6      	mov	lr, r6
   1628a:	4c28      	ldr	r4, [pc, #160]	; (1632c <d_operator_name+0xf8>)
   1628c:	2043      	movs	r0, #67	; 0x43
   1628e:	2200      	movs	r2, #0
   16290:	e004      	b.n	1629c <d_operator_name+0x68>
   16292:	bf94      	ite	ls
   16294:	1c5a      	addls	r2, r3, #1
   16296:	4618      	movhi	r0, r3
   16298:	4282      	cmp	r2, r0
   1629a:	d02d      	beq.n	162f8 <d_operator_name+0xc4>
   1629c:	1a83      	subs	r3, r0, r2
   1629e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   162a2:	eb02 0363 	add.w	r3, r2, r3, asr #1
   162a6:	0119      	lsls	r1, r3, #4
   162a8:	1867      	adds	r7, r4, r1
   162aa:	5861      	ldr	r1, [r4, r1]
   162ac:	780d      	ldrb	r5, [r1, #0]
   162ae:	42b5      	cmp	r5, r6
   162b0:	d1ef      	bne.n	16292 <d_operator_name+0x5e>
   162b2:	7849      	ldrb	r1, [r1, #1]
   162b4:	4571      	cmp	r1, lr
   162b6:	d1ec      	bne.n	16292 <d_operator_name+0x5e>
   162b8:	f8dc 3014 	ldr.w	r3, [ip, #20]
   162bc:	f8dc 2018 	ldr.w	r2, [ip, #24]
   162c0:	4293      	cmp	r3, r2
   162c2:	da19      	bge.n	162f8 <d_operator_name+0xc4>
   162c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   162c8:	f8dc 1010 	ldr.w	r1, [ip, #16]
   162cc:	0092      	lsls	r2, r2, #2
   162ce:	3301      	adds	r3, #1
   162d0:	1888      	adds	r0, r1, r2
   162d2:	f8cc 3014 	str.w	r3, [ip, #20]
   162d6:	d013      	beq.n	16300 <d_operator_name+0xcc>
   162d8:	2331      	movs	r3, #49	; 0x31
   162da:	548b      	strb	r3, [r1, r2]
   162dc:	6047      	str	r7, [r0, #4]
   162de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   162e0:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   162e4:	b2eb      	uxtb	r3, r5
   162e6:	2b09      	cmp	r3, #9
   162e8:	d8cf      	bhi.n	1628a <d_operator_name+0x56>
   162ea:	f7fe fafd 	bl	148e8 <d_source_name>
   162ee:	6963      	ldr	r3, [r4, #20]
   162f0:	69a2      	ldr	r2, [r4, #24]
   162f2:	4293      	cmp	r3, r2
   162f4:	4601      	mov	r1, r0
   162f6:	db04      	blt.n	16302 <d_operator_name+0xce>
   162f8:	2000      	movs	r0, #0
   162fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   162fc:	4696      	mov	lr, r2
   162fe:	e7c4      	b.n	1628a <d_operator_name+0x56>
   16300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16302:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16306:	6926      	ldr	r6, [r4, #16]
   16308:	0092      	lsls	r2, r2, #2
   1630a:	3301      	adds	r3, #1
   1630c:	18b0      	adds	r0, r6, r2
   1630e:	6163      	str	r3, [r4, #20]
   16310:	d0f2      	beq.n	162f8 <d_operator_name+0xc4>
   16312:	2900      	cmp	r1, #0
   16314:	d0f0      	beq.n	162f8 <d_operator_name+0xc4>
   16316:	2332      	movs	r3, #50	; 0x32
   16318:	54b3      	strb	r3, [r6, r2]
   1631a:	6045      	str	r5, [r0, #4]
   1631c:	6081      	str	r1, [r0, #8]
   1631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16320:	2133      	movs	r1, #51	; 0x33
   16322:	4620      	mov	r0, r4
   16324:	f7fe f90e 	bl	14544 <d_make_comp>
   16328:	e7ac      	b.n	16284 <d_operator_name+0x50>
   1632a:	bf00      	nop
   1632c:	00023fe0 	.word	0x00023fe0

00016330 <d_parmlist>:
   16330:	b530      	push	{r4, r5, lr}
   16332:	68c2      	ldr	r2, [r0, #12]
   16334:	b083      	sub	sp, #12
   16336:	2300      	movs	r3, #0
   16338:	9301      	str	r3, [sp, #4]
   1633a:	7813      	ldrb	r3, [r2, #0]
   1633c:	b343      	cbz	r3, 16390 <d_parmlist+0x60>
   1633e:	2b45      	cmp	r3, #69	; 0x45
   16340:	d026      	beq.n	16390 <d_parmlist+0x60>
   16342:	2b2e      	cmp	r3, #46	; 0x2e
   16344:	d024      	beq.n	16390 <d_parmlist+0x60>
   16346:	4604      	mov	r4, r0
   16348:	ad01      	add	r5, sp, #4
   1634a:	e015      	b.n	16378 <d_parmlist+0x48>
   1634c:	2b4f      	cmp	r3, #79	; 0x4f
   1634e:	d016      	beq.n	1637e <d_parmlist+0x4e>
   16350:	f7ff fb88 	bl	15a64 <d_type>
   16354:	2300      	movs	r3, #0
   16356:	4602      	mov	r2, r0
   16358:	212e      	movs	r1, #46	; 0x2e
   1635a:	b1c8      	cbz	r0, 16390 <d_parmlist+0x60>
   1635c:	4620      	mov	r0, r4
   1635e:	f7fe f8f1 	bl	14544 <d_make_comp>
   16362:	6028      	str	r0, [r5, #0]
   16364:	b1a0      	cbz	r0, 16390 <d_parmlist+0x60>
   16366:	68e2      	ldr	r2, [r4, #12]
   16368:	7813      	ldrb	r3, [r2, #0]
   1636a:	f100 0508 	add.w	r5, r0, #8
   1636e:	b14b      	cbz	r3, 16384 <d_parmlist+0x54>
   16370:	2b45      	cmp	r3, #69	; 0x45
   16372:	d007      	beq.n	16384 <d_parmlist+0x54>
   16374:	2b2e      	cmp	r3, #46	; 0x2e
   16376:	d005      	beq.n	16384 <d_parmlist+0x54>
   16378:	2b52      	cmp	r3, #82	; 0x52
   1637a:	4620      	mov	r0, r4
   1637c:	d1e6      	bne.n	1634c <d_parmlist+0x1c>
   1637e:	7853      	ldrb	r3, [r2, #1]
   16380:	2b45      	cmp	r3, #69	; 0x45
   16382:	d1e5      	bne.n	16350 <d_parmlist+0x20>
   16384:	9801      	ldr	r0, [sp, #4]
   16386:	b118      	cbz	r0, 16390 <d_parmlist+0x60>
   16388:	6883      	ldr	r3, [r0, #8]
   1638a:	b123      	cbz	r3, 16396 <d_parmlist+0x66>
   1638c:	b003      	add	sp, #12
   1638e:	bd30      	pop	{r4, r5, pc}
   16390:	2000      	movs	r0, #0
   16392:	b003      	add	sp, #12
   16394:	bd30      	pop	{r4, r5, pc}
   16396:	6842      	ldr	r2, [r0, #4]
   16398:	7811      	ldrb	r1, [r2, #0]
   1639a:	2927      	cmp	r1, #39	; 0x27
   1639c:	d1f6      	bne.n	1638c <d_parmlist+0x5c>
   1639e:	6852      	ldr	r2, [r2, #4]
   163a0:	7c11      	ldrb	r1, [r2, #16]
   163a2:	2909      	cmp	r1, #9
   163a4:	d1f2      	bne.n	1638c <d_parmlist+0x5c>
   163a6:	6851      	ldr	r1, [r2, #4]
   163a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   163aa:	1a52      	subs	r2, r2, r1
   163ac:	6322      	str	r2, [r4, #48]	; 0x30
   163ae:	6043      	str	r3, [r0, #4]
   163b0:	e7ec      	b.n	1638c <d_parmlist+0x5c>
   163b2:	bf00      	nop

000163b4 <d_unqualified_name>:
   163b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163b6:	68c1      	ldr	r1, [r0, #12]
   163b8:	780b      	ldrb	r3, [r1, #0]
   163ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   163be:	2a09      	cmp	r2, #9
   163c0:	4604      	mov	r4, r0
   163c2:	d920      	bls.n	16406 <d_unqualified_name+0x52>
   163c4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   163c8:	2a19      	cmp	r2, #25
   163ca:	d925      	bls.n	16418 <d_unqualified_name+0x64>
   163cc:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   163d0:	2a01      	cmp	r2, #1
   163d2:	d92c      	bls.n	1642e <d_unqualified_name+0x7a>
   163d4:	2b4c      	cmp	r3, #76	; 0x4c
   163d6:	f000 8088 	beq.w	164ea <d_unqualified_name+0x136>
   163da:	2b55      	cmp	r3, #85	; 0x55
   163dc:	d133      	bne.n	16446 <d_unqualified_name+0x92>
   163de:	784b      	ldrb	r3, [r1, #1]
   163e0:	2b6c      	cmp	r3, #108	; 0x6c
   163e2:	d033      	beq.n	1644c <d_unqualified_name+0x98>
   163e4:	2b74      	cmp	r3, #116	; 0x74
   163e6:	d12e      	bne.n	16446 <d_unqualified_name+0x92>
   163e8:	1c4b      	adds	r3, r1, #1
   163ea:	60c3      	str	r3, [r0, #12]
   163ec:	784b      	ldrb	r3, [r1, #1]
   163ee:	2b74      	cmp	r3, #116	; 0x74
   163f0:	d05a      	beq.n	164a8 <d_unqualified_name+0xf4>
   163f2:	2b42      	cmp	r3, #66	; 0x42
   163f4:	f04f 0500 	mov.w	r5, #0
   163f8:	d10c      	bne.n	16414 <d_unqualified_name+0x60>
   163fa:	4629      	mov	r1, r5
   163fc:	4620      	mov	r0, r4
   163fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16402:	f7fe bacd 	b.w	149a0 <d_abi_tags>
   16406:	f7fe fa6f 	bl	148e8 <d_source_name>
   1640a:	68e3      	ldr	r3, [r4, #12]
   1640c:	781b      	ldrb	r3, [r3, #0]
   1640e:	4605      	mov	r5, r0
   16410:	2b42      	cmp	r3, #66	; 0x42
   16412:	d0f2      	beq.n	163fa <d_unqualified_name+0x46>
   16414:	4628      	mov	r0, r5
   16416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16418:	f7ff ff0c 	bl	16234 <d_operator_name>
   1641c:	4605      	mov	r5, r0
   1641e:	b118      	cbz	r0, 16428 <d_unqualified_name+0x74>
   16420:	7803      	ldrb	r3, [r0, #0]
   16422:	2b31      	cmp	r3, #49	; 0x31
   16424:	f000 80b2 	beq.w	1658c <d_unqualified_name+0x1d8>
   16428:	68e3      	ldr	r3, [r4, #12]
   1642a:	781b      	ldrb	r3, [r3, #0]
   1642c:	e7f0      	b.n	16410 <d_unqualified_name+0x5c>
   1642e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16430:	b125      	cbz	r5, 1643c <d_unqualified_name+0x88>
   16432:	782a      	ldrb	r2, [r5, #0]
   16434:	2a00      	cmp	r2, #0
   16436:	d06c      	beq.n	16512 <d_unqualified_name+0x15e>
   16438:	2a18      	cmp	r2, #24
   1643a:	d06a      	beq.n	16512 <d_unqualified_name+0x15e>
   1643c:	2b43      	cmp	r3, #67	; 0x43
   1643e:	f000 80bf 	beq.w	165c0 <d_unqualified_name+0x20c>
   16442:	2b44      	cmp	r3, #68	; 0x44
   16444:	d06f      	beq.n	16526 <d_unqualified_name+0x172>
   16446:	2500      	movs	r5, #0
   16448:	4628      	mov	r0, r5
   1644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1644c:	1c4b      	adds	r3, r1, #1
   1644e:	60c3      	str	r3, [r0, #12]
   16450:	784b      	ldrb	r3, [r1, #1]
   16452:	2b6c      	cmp	r3, #108	; 0x6c
   16454:	d1cd      	bne.n	163f2 <d_unqualified_name+0x3e>
   16456:	3102      	adds	r1, #2
   16458:	60c1      	str	r1, [r0, #12]
   1645a:	f7ff ff69 	bl	16330 <d_parmlist>
   1645e:	4606      	mov	r6, r0
   16460:	b1f0      	cbz	r0, 164a0 <d_unqualified_name+0xec>
   16462:	68e2      	ldr	r2, [r4, #12]
   16464:	7813      	ldrb	r3, [r2, #0]
   16466:	2b45      	cmp	r3, #69	; 0x45
   16468:	d1c3      	bne.n	163f2 <d_unqualified_name+0x3e>
   1646a:	3201      	adds	r2, #1
   1646c:	60e2      	str	r2, [r4, #12]
   1646e:	4620      	mov	r0, r4
   16470:	f7fe f9fc 	bl	1486c <d_compact_number>
   16474:	2800      	cmp	r0, #0
   16476:	db13      	blt.n	164a0 <d_unqualified_name+0xec>
   16478:	6963      	ldr	r3, [r4, #20]
   1647a:	69a2      	ldr	r2, [r4, #24]
   1647c:	4293      	cmp	r3, r2
   1647e:	da0f      	bge.n	164a0 <d_unqualified_name+0xec>
   16480:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16484:	6921      	ldr	r1, [r4, #16]
   16486:	0092      	lsls	r2, r2, #2
   16488:	3301      	adds	r3, #1
   1648a:	188d      	adds	r5, r1, r2
   1648c:	6163      	str	r3, [r4, #20]
   1648e:	d0cb      	beq.n	16428 <d_unqualified_name+0x74>
   16490:	2345      	movs	r3, #69	; 0x45
   16492:	548b      	strb	r3, [r1, r2]
   16494:	606e      	str	r6, [r5, #4]
   16496:	60a8      	str	r0, [r5, #8]
   16498:	6a23      	ldr	r3, [r4, #32]
   1649a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1649c:	4293      	cmp	r3, r2
   1649e:	db1c      	blt.n	164da <d_unqualified_name+0x126>
   164a0:	68e3      	ldr	r3, [r4, #12]
   164a2:	2500      	movs	r5, #0
   164a4:	781b      	ldrb	r3, [r3, #0]
   164a6:	e7b3      	b.n	16410 <d_unqualified_name+0x5c>
   164a8:	3102      	adds	r1, #2
   164aa:	60c1      	str	r1, [r0, #12]
   164ac:	f7fe f9de 	bl	1486c <d_compact_number>
   164b0:	2800      	cmp	r0, #0
   164b2:	dbf5      	blt.n	164a0 <d_unqualified_name+0xec>
   164b4:	6963      	ldr	r3, [r4, #20]
   164b6:	69a2      	ldr	r2, [r4, #24]
   164b8:	4293      	cmp	r3, r2
   164ba:	daf1      	bge.n	164a0 <d_unqualified_name+0xec>
   164bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   164c0:	6921      	ldr	r1, [r4, #16]
   164c2:	0092      	lsls	r2, r2, #2
   164c4:	3301      	adds	r3, #1
   164c6:	188d      	adds	r5, r1, r2
   164c8:	6163      	str	r3, [r4, #20]
   164ca:	d0ad      	beq.n	16428 <d_unqualified_name+0x74>
   164cc:	2347      	movs	r3, #71	; 0x47
   164ce:	548b      	strb	r3, [r1, r2]
   164d0:	6068      	str	r0, [r5, #4]
   164d2:	6a23      	ldr	r3, [r4, #32]
   164d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   164d6:	4293      	cmp	r3, r2
   164d8:	dae2      	bge.n	164a0 <d_unqualified_name+0xec>
   164da:	69e1      	ldr	r1, [r4, #28]
   164dc:	68e2      	ldr	r2, [r4, #12]
   164de:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   164e2:	3301      	adds	r3, #1
   164e4:	6223      	str	r3, [r4, #32]
   164e6:	7813      	ldrb	r3, [r2, #0]
   164e8:	e792      	b.n	16410 <d_unqualified_name+0x5c>
   164ea:	3101      	adds	r1, #1
   164ec:	60c1      	str	r1, [r0, #12]
   164ee:	f7fe f9fb 	bl	148e8 <d_source_name>
   164f2:	4605      	mov	r5, r0
   164f4:	2800      	cmp	r0, #0
   164f6:	d0a6      	beq.n	16446 <d_unqualified_name+0x92>
   164f8:	68e2      	ldr	r2, [r4, #12]
   164fa:	7813      	ldrb	r3, [r2, #0]
   164fc:	2b5f      	cmp	r3, #95	; 0x5f
   164fe:	d187      	bne.n	16410 <d_unqualified_name+0x5c>
   16500:	4620      	mov	r0, r4
   16502:	3201      	adds	r2, #1
   16504:	f840 2f0c 	str.w	r2, [r0, #12]!
   16508:	f7fe f96e 	bl	147e8 <d_number.isra.0>
   1650c:	2800      	cmp	r0, #0
   1650e:	da8b      	bge.n	16428 <d_unqualified_name+0x74>
   16510:	e799      	b.n	16446 <d_unqualified_name+0x92>
   16512:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16514:	68aa      	ldr	r2, [r5, #8]
   16516:	4413      	add	r3, r2
   16518:	6323      	str	r3, [r4, #48]	; 0x30
   1651a:	780b      	ldrb	r3, [r1, #0]
   1651c:	2b43      	cmp	r3, #67	; 0x43
   1651e:	d04f      	beq.n	165c0 <d_unqualified_name+0x20c>
   16520:	2b44      	cmp	r3, #68	; 0x44
   16522:	f47f af66 	bne.w	163f2 <d_unqualified_name+0x3e>
   16526:	784b      	ldrb	r3, [r1, #1]
   16528:	3b30      	subs	r3, #48	; 0x30
   1652a:	2b05      	cmp	r3, #5
   1652c:	d88b      	bhi.n	16446 <d_unqualified_name+0x92>
   1652e:	a201      	add	r2, pc, #4	; (adr r2, 16534 <d_unqualified_name+0x180>)
   16530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16534:	00016589 	.word	0x00016589
   16538:	0001654d 	.word	0x0001654d
   1653c:	00016585 	.word	0x00016585
   16540:	00016447 	.word	0x00016447
   16544:	00016581 	.word	0x00016581
   16548:	0001657d 	.word	0x0001657d
   1654c:	2702      	movs	r7, #2
   1654e:	6963      	ldr	r3, [r4, #20]
   16550:	69a2      	ldr	r2, [r4, #24]
   16552:	1c88      	adds	r0, r1, #2
   16554:	4293      	cmp	r3, r2
   16556:	60e0      	str	r0, [r4, #12]
   16558:	da56      	bge.n	16608 <d_unqualified_name+0x254>
   1655a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1655e:	6920      	ldr	r0, [r4, #16]
   16560:	0092      	lsls	r2, r2, #2
   16562:	3301      	adds	r3, #1
   16564:	1886      	adds	r6, r0, r2
   16566:	6163      	str	r3, [r4, #20]
   16568:	d005      	beq.n	16576 <d_unqualified_name+0x1c2>
   1656a:	2d00      	cmp	r5, #0
   1656c:	d04f      	beq.n	1660e <d_unqualified_name+0x25a>
   1656e:	2308      	movs	r3, #8
   16570:	5483      	strb	r3, [r0, r2]
   16572:	7137      	strb	r7, [r6, #4]
   16574:	60b5      	str	r5, [r6, #8]
   16576:	788b      	ldrb	r3, [r1, #2]
   16578:	4635      	mov	r5, r6
   1657a:	e749      	b.n	16410 <d_unqualified_name+0x5c>
   1657c:	2705      	movs	r7, #5
   1657e:	e7e6      	b.n	1654e <d_unqualified_name+0x19a>
   16580:	2704      	movs	r7, #4
   16582:	e7e4      	b.n	1654e <d_unqualified_name+0x19a>
   16584:	2703      	movs	r7, #3
   16586:	e7e2      	b.n	1654e <d_unqualified_name+0x19a>
   16588:	2701      	movs	r7, #1
   1658a:	e7e0      	b.n	1654e <d_unqualified_name+0x19a>
   1658c:	6842      	ldr	r2, [r0, #4]
   1658e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16590:	6896      	ldr	r6, [r2, #8]
   16592:	6810      	ldr	r0, [r2, #0]
   16594:	491f      	ldr	r1, [pc, #124]	; (16614 <d_unqualified_name+0x260>)
   16596:	3307      	adds	r3, #7
   16598:	4433      	add	r3, r6
   1659a:	6323      	str	r3, [r4, #48]	; 0x30
   1659c:	f008 fa74 	bl	1ea88 <strcmp>
   165a0:	2800      	cmp	r0, #0
   165a2:	f47f af41 	bne.w	16428 <d_unqualified_name+0x74>
   165a6:	4620      	mov	r0, r4
   165a8:	f7fe f99e 	bl	148e8 <d_source_name>
   165ac:	462a      	mov	r2, r5
   165ae:	4603      	mov	r3, r0
   165b0:	2136      	movs	r1, #54	; 0x36
   165b2:	4620      	mov	r0, r4
   165b4:	f7fd ffc6 	bl	14544 <d_make_comp>
   165b8:	68e3      	ldr	r3, [r4, #12]
   165ba:	4605      	mov	r5, r0
   165bc:	781b      	ldrb	r3, [r3, #0]
   165be:	e727      	b.n	16410 <d_unqualified_name+0x5c>
   165c0:	784b      	ldrb	r3, [r1, #1]
   165c2:	3b31      	subs	r3, #49	; 0x31
   165c4:	2b04      	cmp	r3, #4
   165c6:	f63f af3e 	bhi.w	16446 <d_unqualified_name+0x92>
   165ca:	e8df f003 	tbb	[pc, r3]
   165ce:	0315      	.short	0x0315
   165d0:	191b      	.short	0x191b
   165d2:	17          	.byte	0x17
   165d3:	00          	.byte	0x00
   165d4:	2702      	movs	r7, #2
   165d6:	6963      	ldr	r3, [r4, #20]
   165d8:	69a2      	ldr	r2, [r4, #24]
   165da:	1c88      	adds	r0, r1, #2
   165dc:	4293      	cmp	r3, r2
   165de:	60e0      	str	r0, [r4, #12]
   165e0:	da12      	bge.n	16608 <d_unqualified_name+0x254>
   165e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   165e6:	6920      	ldr	r0, [r4, #16]
   165e8:	0092      	lsls	r2, r2, #2
   165ea:	3301      	adds	r3, #1
   165ec:	1886      	adds	r6, r0, r2
   165ee:	6163      	str	r3, [r4, #20]
   165f0:	d0c1      	beq.n	16576 <d_unqualified_name+0x1c2>
   165f2:	b165      	cbz	r5, 1660e <d_unqualified_name+0x25a>
   165f4:	2307      	movs	r3, #7
   165f6:	e7bb      	b.n	16570 <d_unqualified_name+0x1bc>
   165f8:	2701      	movs	r7, #1
   165fa:	e7ec      	b.n	165d6 <d_unqualified_name+0x222>
   165fc:	2705      	movs	r7, #5
   165fe:	e7ea      	b.n	165d6 <d_unqualified_name+0x222>
   16600:	2704      	movs	r7, #4
   16602:	e7e8      	b.n	165d6 <d_unqualified_name+0x222>
   16604:	2703      	movs	r7, #3
   16606:	e7e6      	b.n	165d6 <d_unqualified_name+0x222>
   16608:	788b      	ldrb	r3, [r1, #2]
   1660a:	2500      	movs	r5, #0
   1660c:	e700      	b.n	16410 <d_unqualified_name+0x5c>
   1660e:	788b      	ldrb	r3, [r1, #2]
   16610:	e6fe      	b.n	16410 <d_unqualified_name+0x5c>
   16612:	bf00      	nop
   16614:	00024488 	.word	0x00024488

00016618 <d_bare_function_type>:
   16618:	b570      	push	{r4, r5, r6, lr}
   1661a:	68c3      	ldr	r3, [r0, #12]
   1661c:	781a      	ldrb	r2, [r3, #0]
   1661e:	2a4a      	cmp	r2, #74	; 0x4a
   16620:	4604      	mov	r4, r0
   16622:	d00d      	beq.n	16640 <d_bare_function_type+0x28>
   16624:	b971      	cbnz	r1, 16644 <d_bare_function_type+0x2c>
   16626:	460d      	mov	r5, r1
   16628:	4620      	mov	r0, r4
   1662a:	f7ff fe81 	bl	16330 <d_parmlist>
   1662e:	b178      	cbz	r0, 16650 <d_bare_function_type+0x38>
   16630:	4603      	mov	r3, r0
   16632:	462a      	mov	r2, r5
   16634:	4620      	mov	r0, r4
   16636:	2129      	movs	r1, #41	; 0x29
   16638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1663c:	f7fd bf82 	b.w	14544 <d_make_comp>
   16640:	3301      	adds	r3, #1
   16642:	60c3      	str	r3, [r0, #12]
   16644:	4620      	mov	r0, r4
   16646:	f7ff fa0d 	bl	15a64 <d_type>
   1664a:	4605      	mov	r5, r0
   1664c:	2800      	cmp	r0, #0
   1664e:	d1eb      	bne.n	16628 <d_bare_function_type+0x10>
   16650:	2000      	movs	r0, #0
   16652:	bd70      	pop	{r4, r5, r6, pc}

00016654 <d_function_type>:
   16654:	68c3      	ldr	r3, [r0, #12]
   16656:	781a      	ldrb	r2, [r3, #0]
   16658:	2a46      	cmp	r2, #70	; 0x46
   1665a:	d001      	beq.n	16660 <d_function_type+0xc>
   1665c:	2000      	movs	r0, #0
   1665e:	4770      	bx	lr
   16660:	b510      	push	{r4, lr}
   16662:	1c5a      	adds	r2, r3, #1
   16664:	60c2      	str	r2, [r0, #12]
   16666:	785a      	ldrb	r2, [r3, #1]
   16668:	2a59      	cmp	r2, #89	; 0x59
   1666a:	bf04      	itt	eq
   1666c:	3302      	addeq	r3, #2
   1666e:	60c3      	streq	r3, [r0, #12]
   16670:	2101      	movs	r1, #1
   16672:	4604      	mov	r4, r0
   16674:	f7ff ffd0 	bl	16618 <d_bare_function_type>
   16678:	4601      	mov	r1, r0
   1667a:	4620      	mov	r0, r4
   1667c:	f7fe f814 	bl	146a8 <d_ref_qualifier>
   16680:	68e3      	ldr	r3, [r4, #12]
   16682:	781a      	ldrb	r2, [r3, #0]
   16684:	2a45      	cmp	r2, #69	; 0x45
   16686:	d001      	beq.n	1668c <d_function_type+0x38>
   16688:	2000      	movs	r0, #0
   1668a:	bd10      	pop	{r4, pc}
   1668c:	3301      	adds	r3, #1
   1668e:	60e3      	str	r3, [r4, #12]
   16690:	bd10      	pop	{r4, pc}
   16692:	bf00      	nop

00016694 <d_encoding>:
   16694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16698:	68c3      	ldr	r3, [r0, #12]
   1669a:	781a      	ldrb	r2, [r3, #0]
   1669c:	2a47      	cmp	r2, #71	; 0x47
   1669e:	4605      	mov	r5, r0
   166a0:	d01f      	beq.n	166e2 <d_encoding+0x4e>
   166a2:	2a54      	cmp	r2, #84	; 0x54
   166a4:	d01d      	beq.n	166e2 <d_encoding+0x4e>
   166a6:	460e      	mov	r6, r1
   166a8:	f7ff f820 	bl	156ec <d_name>
   166ac:	4604      	mov	r4, r0
   166ae:	b310      	cbz	r0, 166f6 <d_encoding+0x62>
   166b0:	b32e      	cbz	r6, 166fe <d_encoding+0x6a>
   166b2:	68ab      	ldr	r3, [r5, #8]
   166b4:	07db      	lsls	r3, r3, #31
   166b6:	d422      	bmi.n	166fe <d_encoding+0x6a>
   166b8:	7823      	ldrb	r3, [r4, #0]
   166ba:	f1a3 021c 	sub.w	r2, r3, #28
   166be:	2a04      	cmp	r2, #4
   166c0:	d940      	bls.n	16744 <d_encoding+0xb0>
   166c2:	2b4c      	cmp	r3, #76	; 0x4c
   166c4:	d03e      	beq.n	16744 <d_encoding+0xb0>
   166c6:	2b02      	cmp	r3, #2
   166c8:	d116      	bne.n	166f8 <d_encoding+0x64>
   166ca:	68a3      	ldr	r3, [r4, #8]
   166cc:	781a      	ldrb	r2, [r3, #0]
   166ce:	f1a2 011c 	sub.w	r1, r2, #28
   166d2:	2904      	cmp	r1, #4
   166d4:	f240 8283 	bls.w	16bde <d_encoding+0x54a>
   166d8:	2a4c      	cmp	r2, #76	; 0x4c
   166da:	f000 8280 	beq.w	16bde <d_encoding+0x54a>
   166de:	60a3      	str	r3, [r4, #8]
   166e0:	e00a      	b.n	166f8 <d_encoding+0x64>
   166e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   166e4:	f101 0214 	add.w	r2, r1, #20
   166e8:	632a      	str	r2, [r5, #48]	; 0x30
   166ea:	781a      	ldrb	r2, [r3, #0]
   166ec:	2a54      	cmp	r2, #84	; 0x54
   166ee:	d02b      	beq.n	16748 <d_encoding+0xb4>
   166f0:	2a47      	cmp	r2, #71	; 0x47
   166f2:	f000 809f 	beq.w	16834 <d_encoding+0x1a0>
   166f6:	2400      	movs	r4, #0
   166f8:	4620      	mov	r0, r4
   166fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   166fe:	68eb      	ldr	r3, [r5, #12]
   16700:	781b      	ldrb	r3, [r3, #0]
   16702:	2b00      	cmp	r3, #0
   16704:	d0f8      	beq.n	166f8 <d_encoding+0x64>
   16706:	2b45      	cmp	r3, #69	; 0x45
   16708:	d0f6      	beq.n	166f8 <d_encoding+0x64>
   1670a:	4621      	mov	r1, r4
   1670c:	780a      	ldrb	r2, [r1, #0]
   1670e:	2a20      	cmp	r2, #32
   16710:	f200 8113 	bhi.w	1693a <d_encoding+0x2a6>
   16714:	2a1c      	cmp	r2, #28
   16716:	f080 8112 	bcs.w	1693e <d_encoding+0x2aa>
   1671a:	2a04      	cmp	r2, #4
   1671c:	f040 8101 	bne.w	16922 <d_encoding+0x28e>
   16720:	684a      	ldr	r2, [r1, #4]
   16722:	b16a      	cbz	r2, 16740 <d_encoding+0xac>
   16724:	7813      	ldrb	r3, [r2, #0]
   16726:	2b08      	cmp	r3, #8
   16728:	f103 31ff 	add.w	r1, r3, #4294967295
   1672c:	f200 80f6 	bhi.w	1691c <d_encoding+0x288>
   16730:	2b07      	cmp	r3, #7
   16732:	f080 80f6 	bcs.w	16922 <d_encoding+0x28e>
   16736:	2901      	cmp	r1, #1
   16738:	d802      	bhi.n	16740 <d_encoding+0xac>
   1673a:	6892      	ldr	r2, [r2, #8]
   1673c:	2a00      	cmp	r2, #0
   1673e:	d1f1      	bne.n	16724 <d_encoding+0x90>
   16740:	2101      	movs	r1, #1
   16742:	e0ef      	b.n	16924 <d_encoding+0x290>
   16744:	6864      	ldr	r4, [r4, #4]
   16746:	e7b7      	b.n	166b8 <d_encoding+0x24>
   16748:	1c5a      	adds	r2, r3, #1
   1674a:	60ea      	str	r2, [r5, #12]
   1674c:	785a      	ldrb	r2, [r3, #1]
   1674e:	2a00      	cmp	r2, #0
   16750:	d0d1      	beq.n	166f6 <d_encoding+0x62>
   16752:	1c9a      	adds	r2, r3, #2
   16754:	60ea      	str	r2, [r5, #12]
   16756:	785b      	ldrb	r3, [r3, #1]
   16758:	3b43      	subs	r3, #67	; 0x43
   1675a:	2b33      	cmp	r3, #51	; 0x33
   1675c:	d8cb      	bhi.n	166f6 <d_encoding+0x62>
   1675e:	a201      	add	r2, pc, #4	; (adr r2, 16764 <d_encoding+0xd0>)
   16760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16764:	00016b9f 	.word	0x00016b9f
   16768:	000166f7 	.word	0x000166f7
   1676c:	000166f7 	.word	0x000166f7
   16770:	00016b89 	.word	0x00016b89
   16774:	000166f7 	.word	0x000166f7
   16778:	00016b73 	.word	0x00016b73
   1677c:	00016b5d 	.word	0x00016b5d
   16780:	00016b47 	.word	0x00016b47
   16784:	000166f7 	.word	0x000166f7
   16788:	000166f7 	.word	0x000166f7
   1678c:	000166f7 	.word	0x000166f7
   16790:	000166f7 	.word	0x000166f7
   16794:	000166f7 	.word	0x000166f7
   16798:	000166f7 	.word	0x000166f7
   1679c:	000166f7 	.word	0x000166f7
   167a0:	000166f7 	.word	0x000166f7
   167a4:	00016b31 	.word	0x00016b31
   167a8:	00016b17 	.word	0x00016b17
   167ac:	000166f7 	.word	0x000166f7
   167b0:	00016afd 	.word	0x00016afd
   167b4:	00016ae7 	.word	0x00016ae7
   167b8:	000166f7 	.word	0x000166f7
   167bc:	000166f7 	.word	0x000166f7
   167c0:	000166f7 	.word	0x000166f7
   167c4:	000166f7 	.word	0x000166f7
   167c8:	000166f7 	.word	0x000166f7
   167cc:	000166f7 	.word	0x000166f7
   167d0:	000166f7 	.word	0x000166f7
   167d4:	000166f7 	.word	0x000166f7
   167d8:	000166f7 	.word	0x000166f7
   167dc:	000166f7 	.word	0x000166f7
   167e0:	000166f7 	.word	0x000166f7
   167e4:	00016ab3 	.word	0x00016ab3
   167e8:	000166f7 	.word	0x000166f7
   167ec:	000166f7 	.word	0x000166f7
   167f0:	000166f7 	.word	0x000166f7
   167f4:	000166f7 	.word	0x000166f7
   167f8:	00016a8d 	.word	0x00016a8d
   167fc:	000166f7 	.word	0x000166f7
   16800:	000166f7 	.word	0x000166f7
   16804:	000166f7 	.word	0x000166f7
   16808:	000166f7 	.word	0x000166f7
   1680c:	000166f7 	.word	0x000166f7
   16810:	000166f7 	.word	0x000166f7
   16814:	000166f7 	.word	0x000166f7
   16818:	000166f7 	.word	0x000166f7
   1681c:	000166f7 	.word	0x000166f7
   16820:	000166f7 	.word	0x000166f7
   16824:	000166f7 	.word	0x000166f7
   16828:	000166f7 	.word	0x000166f7
   1682c:	000166f7 	.word	0x000166f7
   16830:	00016a67 	.word	0x00016a67
   16834:	1c5a      	adds	r2, r3, #1
   16836:	60ea      	str	r2, [r5, #12]
   16838:	785a      	ldrb	r2, [r3, #1]
   1683a:	2a00      	cmp	r2, #0
   1683c:	f43f af5b 	beq.w	166f6 <d_encoding+0x62>
   16840:	1c9a      	adds	r2, r3, #2
   16842:	60ea      	str	r2, [r5, #12]
   16844:	785a      	ldrb	r2, [r3, #1]
   16846:	3a41      	subs	r2, #65	; 0x41
   16848:	2a31      	cmp	r2, #49	; 0x31
   1684a:	f63f af54 	bhi.w	166f6 <d_encoding+0x62>
   1684e:	a101      	add	r1, pc, #4	; (adr r1, 16854 <d_encoding+0x1c0>)
   16850:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16854:	00016949 	.word	0x00016949
   16858:	000166f7 	.word	0x000166f7
   1685c:	000166f7 	.word	0x000166f7
   16860:	000166f7 	.word	0x000166f7
   16864:	000166f7 	.word	0x000166f7
   16868:	000166f7 	.word	0x000166f7
   1686c:	000166f7 	.word	0x000166f7
   16870:	000166f7 	.word	0x000166f7
   16874:	000166f7 	.word	0x000166f7
   16878:	000166f7 	.word	0x000166f7
   1687c:	000166f7 	.word	0x000166f7
   16880:	000166f7 	.word	0x000166f7
   16884:	000166f7 	.word	0x000166f7
   16888:	000166f7 	.word	0x000166f7
   1688c:	000166f7 	.word	0x000166f7
   16890:	000166f7 	.word	0x000166f7
   16894:	000166f7 	.word	0x000166f7
   16898:	00016a49 	.word	0x00016a49
   1689c:	000166f7 	.word	0x000166f7
   168a0:	00016a1d 	.word	0x00016a1d
   168a4:	000166f7 	.word	0x000166f7
   168a8:	00016a07 	.word	0x00016a07
   168ac:	000166f7 	.word	0x000166f7
   168b0:	000166f7 	.word	0x000166f7
   168b4:	000166f7 	.word	0x000166f7
   168b8:	000166f7 	.word	0x000166f7
   168bc:	000166f7 	.word	0x000166f7
   168c0:	000166f7 	.word	0x000166f7
   168c4:	000166f7 	.word	0x000166f7
   168c8:	000166f7 	.word	0x000166f7
   168cc:	000166f7 	.word	0x000166f7
   168d0:	000166f7 	.word	0x000166f7
   168d4:	000166f7 	.word	0x000166f7
   168d8:	000166f7 	.word	0x000166f7
   168dc:	000166f7 	.word	0x000166f7
   168e0:	000166f7 	.word	0x000166f7
   168e4:	000166f7 	.word	0x000166f7
   168e8:	000166f7 	.word	0x000166f7
   168ec:	000166f7 	.word	0x000166f7
   168f0:	000166f7 	.word	0x000166f7
   168f4:	000166f7 	.word	0x000166f7
   168f8:	000166f7 	.word	0x000166f7
   168fc:	000166f7 	.word	0x000166f7
   16900:	000166f7 	.word	0x000166f7
   16904:	000166f7 	.word	0x000166f7
   16908:	000166f7 	.word	0x000166f7
   1690c:	000166f7 	.word	0x000166f7
   16910:	000166f7 	.word	0x000166f7
   16914:	000166f7 	.word	0x000166f7
   16918:	00016961 	.word	0x00016961
   1691c:	2b34      	cmp	r3, #52	; 0x34
   1691e:	f47f af0f 	bne.w	16740 <d_encoding+0xac>
   16922:	2100      	movs	r1, #0
   16924:	4628      	mov	r0, r5
   16926:	f7ff fe77 	bl	16618 <d_bare_function_type>
   1692a:	4622      	mov	r2, r4
   1692c:	4603      	mov	r3, r0
   1692e:	2103      	movs	r1, #3
   16930:	4628      	mov	r0, r5
   16932:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16936:	f7fd be05 	b.w	14544 <d_make_comp>
   1693a:	2a4c      	cmp	r2, #76	; 0x4c
   1693c:	d1f1      	bne.n	16922 <d_encoding+0x28e>
   1693e:	6849      	ldr	r1, [r1, #4]
   16940:	2900      	cmp	r1, #0
   16942:	f47f aee3 	bne.w	1670c <d_encoding+0x78>
   16946:	e7ed      	b.n	16924 <d_encoding+0x290>
   16948:	2100      	movs	r1, #0
   1694a:	4628      	mov	r0, r5
   1694c:	f7ff fea2 	bl	16694 <d_encoding>
   16950:	2300      	movs	r3, #0
   16952:	4602      	mov	r2, r0
   16954:	2117      	movs	r1, #23
   16956:	4628      	mov	r0, r5
   16958:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1695c:	f7fd bdf2 	b.w	14544 <d_make_comp>
   16960:	f105 000c 	add.w	r0, r5, #12
   16964:	f7fd ff40 	bl	147e8 <d_number.isra.0>
   16968:	2801      	cmp	r0, #1
   1696a:	f77f aec4 	ble.w	166f6 <d_encoding+0x62>
   1696e:	68eb      	ldr	r3, [r5, #12]
   16970:	781a      	ldrb	r2, [r3, #0]
   16972:	2a00      	cmp	r2, #0
   16974:	f43f aebf 	beq.w	166f6 <d_encoding+0x62>
   16978:	1c5f      	adds	r7, r3, #1
   1697a:	60ef      	str	r7, [r5, #12]
   1697c:	781b      	ldrb	r3, [r3, #0]
   1697e:	2b5f      	cmp	r3, #95	; 0x5f
   16980:	f47f aeb9 	bne.w	166f6 <d_encoding+0x62>
   16984:	2200      	movs	r2, #0
   16986:	1e46      	subs	r6, r0, #1
   16988:	4690      	mov	r8, r2
   1698a:	f04f 0940 	mov.w	r9, #64	; 0x40
   1698e:	783b      	ldrb	r3, [r7, #0]
   16990:	2b00      	cmp	r3, #0
   16992:	f43f aeb0 	beq.w	166f6 <d_encoding+0x62>
   16996:	2b24      	cmp	r3, #36	; 0x24
   16998:	f000 8128 	beq.w	16bec <d_encoding+0x558>
   1699c:	463c      	mov	r4, r7
   1699e:	2100      	movs	r1, #0
   169a0:	e004      	b.n	169ac <d_encoding+0x318>
   169a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   169a6:	b123      	cbz	r3, 169b2 <d_encoding+0x31e>
   169a8:	2b24      	cmp	r3, #36	; 0x24
   169aa:	d002      	beq.n	169b2 <d_encoding+0x31e>
   169ac:	3101      	adds	r1, #1
   169ae:	42b1      	cmp	r1, r6
   169b0:	dbf7      	blt.n	169a2 <d_encoding+0x30e>
   169b2:	696c      	ldr	r4, [r5, #20]
   169b4:	69a8      	ldr	r0, [r5, #24]
   169b6:	4284      	cmp	r4, r0
   169b8:	f280 8113 	bge.w	16be2 <d_encoding+0x54e>
   169bc:	6928      	ldr	r0, [r5, #16]
   169be:	1c63      	adds	r3, r4, #1
   169c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   169c4:	616b      	str	r3, [r5, #20]
   169c6:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   169ca:	f000 810a 	beq.w	16be2 <d_encoding+0x54e>
   169ce:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   169d2:	605f      	str	r7, [r3, #4]
   169d4:	6099      	str	r1, [r3, #8]
   169d6:	68ef      	ldr	r7, [r5, #12]
   169d8:	440f      	add	r7, r1
   169da:	1a76      	subs	r6, r6, r1
   169dc:	60ef      	str	r7, [r5, #12]
   169de:	2a00      	cmp	r2, #0
   169e0:	f000 8121 	beq.w	16c26 <d_encoding+0x592>
   169e4:	213f      	movs	r1, #63	; 0x3f
   169e6:	4628      	mov	r0, r5
   169e8:	f7fd fdac 	bl	14544 <d_make_comp>
   169ec:	4602      	mov	r2, r0
   169ee:	2800      	cmp	r0, #0
   169f0:	f43f ae81 	beq.w	166f6 <d_encoding+0x62>
   169f4:	2e00      	cmp	r6, #0
   169f6:	dcca      	bgt.n	1698e <d_encoding+0x2fa>
   169f8:	4628      	mov	r0, r5
   169fa:	2300      	movs	r3, #0
   169fc:	213e      	movs	r1, #62	; 0x3e
   169fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a02:	f7fd bd9f 	b.w	14544 <d_make_comp>
   16a06:	4628      	mov	r0, r5
   16a08:	f7fe fe70 	bl	156ec <d_name>
   16a0c:	2300      	movs	r3, #0
   16a0e:	4602      	mov	r2, r0
   16a10:	2113      	movs	r1, #19
   16a12:	4628      	mov	r0, r5
   16a14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a18:	f7fd bd94 	b.w	14544 <d_make_comp>
   16a1c:	789a      	ldrb	r2, [r3, #2]
   16a1e:	2100      	movs	r1, #0
   16a20:	4628      	mov	r0, r5
   16a22:	2a00      	cmp	r2, #0
   16a24:	f000 8101 	beq.w	16c2a <d_encoding+0x596>
   16a28:	1cda      	adds	r2, r3, #3
   16a2a:	60ea      	str	r2, [r5, #12]
   16a2c:	789b      	ldrb	r3, [r3, #2]
   16a2e:	2b6e      	cmp	r3, #110	; 0x6e
   16a30:	f040 80fb 	bne.w	16c2a <d_encoding+0x596>
   16a34:	f7ff fe2e 	bl	16694 <d_encoding>
   16a38:	2300      	movs	r3, #0
   16a3a:	4602      	mov	r2, r0
   16a3c:	2149      	movs	r1, #73	; 0x49
   16a3e:	4628      	mov	r0, r5
   16a40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a44:	f7fd bd7e 	b.w	14544 <d_make_comp>
   16a48:	4628      	mov	r0, r5
   16a4a:	f7fe fe4f 	bl	156ec <d_name>
   16a4e:	4604      	mov	r4, r0
   16a50:	4628      	mov	r0, r5
   16a52:	f7fd fef3 	bl	1483c <d_number_component>
   16a56:	4622      	mov	r2, r4
   16a58:	4603      	mov	r3, r0
   16a5a:	2116      	movs	r1, #22
   16a5c:	4628      	mov	r0, r5
   16a5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a62:	f7fd bd6f 	b.w	14544 <d_make_comp>
   16a66:	2176      	movs	r1, #118	; 0x76
   16a68:	4628      	mov	r0, r5
   16a6a:	f7fe f871 	bl	14b50 <d_call_offset>
   16a6e:	2800      	cmp	r0, #0
   16a70:	f43f ae41 	beq.w	166f6 <d_encoding+0x62>
   16a74:	2100      	movs	r1, #0
   16a76:	4628      	mov	r0, r5
   16a78:	f7ff fe0c 	bl	16694 <d_encoding>
   16a7c:	2300      	movs	r3, #0
   16a7e:	4602      	mov	r2, r0
   16a80:	2110      	movs	r1, #16
   16a82:	4628      	mov	r0, r5
   16a84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a88:	f7fd bd5c 	b.w	14544 <d_make_comp>
   16a8c:	2168      	movs	r1, #104	; 0x68
   16a8e:	4628      	mov	r0, r5
   16a90:	f7fe f85e 	bl	14b50 <d_call_offset>
   16a94:	2800      	cmp	r0, #0
   16a96:	f43f ae2e 	beq.w	166f6 <d_encoding+0x62>
   16a9a:	2100      	movs	r1, #0
   16a9c:	4628      	mov	r0, r5
   16a9e:	f7ff fdf9 	bl	16694 <d_encoding>
   16aa2:	2300      	movs	r3, #0
   16aa4:	4602      	mov	r2, r0
   16aa6:	210f      	movs	r1, #15
   16aa8:	4628      	mov	r0, r5
   16aaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aae:	f7fd bd49 	b.w	14544 <d_make_comp>
   16ab2:	2100      	movs	r1, #0
   16ab4:	4628      	mov	r0, r5
   16ab6:	f7fe f84b 	bl	14b50 <d_call_offset>
   16aba:	2800      	cmp	r0, #0
   16abc:	f43f ae1b 	beq.w	166f6 <d_encoding+0x62>
   16ac0:	2100      	movs	r1, #0
   16ac2:	4628      	mov	r0, r5
   16ac4:	f7fe f844 	bl	14b50 <d_call_offset>
   16ac8:	2800      	cmp	r0, #0
   16aca:	f43f ae14 	beq.w	166f6 <d_encoding+0x62>
   16ace:	2100      	movs	r1, #0
   16ad0:	4628      	mov	r0, r5
   16ad2:	f7ff fddf 	bl	16694 <d_encoding>
   16ad6:	2300      	movs	r3, #0
   16ad8:	4602      	mov	r2, r0
   16ada:	2111      	movs	r1, #17
   16adc:	4628      	mov	r0, r5
   16ade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ae2:	f7fd bd2f 	b.w	14544 <d_make_comp>
   16ae6:	4628      	mov	r0, r5
   16ae8:	f7fe fe00 	bl	156ec <d_name>
   16aec:	2300      	movs	r3, #0
   16aee:	4602      	mov	r2, r0
   16af0:	2115      	movs	r1, #21
   16af2:	4628      	mov	r0, r5
   16af4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16af8:	f7fd bd24 	b.w	14544 <d_make_comp>
   16afc:	310f      	adds	r1, #15
   16afe:	6329      	str	r1, [r5, #48]	; 0x30
   16b00:	4628      	mov	r0, r5
   16b02:	f7fe ffaf 	bl	15a64 <d_type>
   16b06:	2300      	movs	r3, #0
   16b08:	4602      	mov	r2, r0
   16b0a:	2109      	movs	r1, #9
   16b0c:	4628      	mov	r0, r5
   16b0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b12:	f7fd bd17 	b.w	14544 <d_make_comp>
   16b16:	310a      	adds	r1, #10
   16b18:	6329      	str	r1, [r5, #48]	; 0x30
   16b1a:	4628      	mov	r0, r5
   16b1c:	f7fe ffa2 	bl	15a64 <d_type>
   16b20:	2300      	movs	r3, #0
   16b22:	4602      	mov	r2, r0
   16b24:	210a      	movs	r1, #10
   16b26:	4628      	mov	r0, r5
   16b28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b2c:	f7fd bd0a 	b.w	14544 <d_make_comp>
   16b30:	4628      	mov	r0, r5
   16b32:	f7fe ff97 	bl	15a64 <d_type>
   16b36:	2300      	movs	r3, #0
   16b38:	4602      	mov	r2, r0
   16b3a:	210d      	movs	r1, #13
   16b3c:	4628      	mov	r0, r5
   16b3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b42:	f7fd bcff 	b.w	14544 <d_make_comp>
   16b46:	4628      	mov	r0, r5
   16b48:	f7fe ff8c 	bl	15a64 <d_type>
   16b4c:	2300      	movs	r3, #0
   16b4e:	4602      	mov	r2, r0
   16b50:	2112      	movs	r1, #18
   16b52:	4628      	mov	r0, r5
   16b54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b58:	f7fd bcf4 	b.w	14544 <d_make_comp>
   16b5c:	4628      	mov	r0, r5
   16b5e:	f7fe ff81 	bl	15a64 <d_type>
   16b62:	2300      	movs	r3, #0
   16b64:	4602      	mov	r2, r0
   16b66:	210c      	movs	r1, #12
   16b68:	4628      	mov	r0, r5
   16b6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b6e:	f7fd bce9 	b.w	14544 <d_make_comp>
   16b72:	4628      	mov	r0, r5
   16b74:	f7fe fdba 	bl	156ec <d_name>
   16b78:	2300      	movs	r3, #0
   16b7a:	4602      	mov	r2, r0
   16b7c:	2114      	movs	r1, #20
   16b7e:	4628      	mov	r0, r5
   16b80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b84:	f7fd bcde 	b.w	14544 <d_make_comp>
   16b88:	4628      	mov	r0, r5
   16b8a:	f7fe ff6b 	bl	15a64 <d_type>
   16b8e:	2300      	movs	r3, #0
   16b90:	4602      	mov	r2, r0
   16b92:	210e      	movs	r1, #14
   16b94:	4628      	mov	r0, r5
   16b96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b9a:	f7fd bcd3 	b.w	14544 <d_make_comp>
   16b9e:	4628      	mov	r0, r5
   16ba0:	f7fe ff60 	bl	15a64 <d_type>
   16ba4:	4604      	mov	r4, r0
   16ba6:	f105 000c 	add.w	r0, r5, #12
   16baa:	f7fd fe1d 	bl	147e8 <d_number.isra.0>
   16bae:	2800      	cmp	r0, #0
   16bb0:	f6ff ada1 	blt.w	166f6 <d_encoding+0x62>
   16bb4:	68eb      	ldr	r3, [r5, #12]
   16bb6:	781a      	ldrb	r2, [r3, #0]
   16bb8:	2a5f      	cmp	r2, #95	; 0x5f
   16bba:	f47f ad9c 	bne.w	166f6 <d_encoding+0x62>
   16bbe:	3301      	adds	r3, #1
   16bc0:	60eb      	str	r3, [r5, #12]
   16bc2:	4628      	mov	r0, r5
   16bc4:	f7fe ff4e 	bl	15a64 <d_type>
   16bc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16bca:	1d59      	adds	r1, r3, #5
   16bcc:	6329      	str	r1, [r5, #48]	; 0x30
   16bce:	4602      	mov	r2, r0
   16bd0:	4623      	mov	r3, r4
   16bd2:	4628      	mov	r0, r5
   16bd4:	210b      	movs	r1, #11
   16bd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bda:	f7fd bcb3 	b.w	14544 <d_make_comp>
   16bde:	685b      	ldr	r3, [r3, #4]
   16be0:	e574      	b.n	166cc <d_encoding+0x38>
   16be2:	68eb      	ldr	r3, [r5, #12]
   16be4:	440b      	add	r3, r1
   16be6:	60eb      	str	r3, [r5, #12]
   16be8:	2400      	movs	r4, #0
   16bea:	e585      	b.n	166f8 <d_encoding+0x64>
   16bec:	787b      	ldrb	r3, [r7, #1]
   16bee:	2b53      	cmp	r3, #83	; 0x53
   16bf0:	d027      	beq.n	16c42 <d_encoding+0x5ae>
   16bf2:	2b5f      	cmp	r3, #95	; 0x5f
   16bf4:	d023      	beq.n	16c3e <d_encoding+0x5aa>
   16bf6:	2b24      	cmp	r3, #36	; 0x24
   16bf8:	f47f ad7d 	bne.w	166f6 <d_encoding+0x62>
   16bfc:	4618      	mov	r0, r3
   16bfe:	6969      	ldr	r1, [r5, #20]
   16c00:	69ab      	ldr	r3, [r5, #24]
   16c02:	4299      	cmp	r1, r3
   16c04:	da1f      	bge.n	16c46 <d_encoding+0x5b2>
   16c06:	692c      	ldr	r4, [r5, #16]
   16c08:	1c4f      	adds	r7, r1, #1
   16c0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16c0e:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16c12:	616f      	str	r7, [r5, #20]
   16c14:	d017      	beq.n	16c46 <d_encoding+0x5b2>
   16c16:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16c1a:	6058      	str	r0, [r3, #4]
   16c1c:	68ef      	ldr	r7, [r5, #12]
   16c1e:	3702      	adds	r7, #2
   16c20:	3e02      	subs	r6, #2
   16c22:	60ef      	str	r7, [r5, #12]
   16c24:	e6db      	b.n	169de <d_encoding+0x34a>
   16c26:	461a      	mov	r2, r3
   16c28:	e6e4      	b.n	169f4 <d_encoding+0x360>
   16c2a:	f7ff fd33 	bl	16694 <d_encoding>
   16c2e:	2300      	movs	r3, #0
   16c30:	4602      	mov	r2, r0
   16c32:	2148      	movs	r1, #72	; 0x48
   16c34:	4628      	mov	r0, r5
   16c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c3a:	f7fd bc83 	b.w	14544 <d_make_comp>
   16c3e:	202e      	movs	r0, #46	; 0x2e
   16c40:	e7dd      	b.n	16bfe <d_encoding+0x56a>
   16c42:	202f      	movs	r0, #47	; 0x2f
   16c44:	e7db      	b.n	16bfe <d_encoding+0x56a>
   16c46:	68eb      	ldr	r3, [r5, #12]
   16c48:	3302      	adds	r3, #2
   16c4a:	60eb      	str	r3, [r5, #12]
   16c4c:	2400      	movs	r4, #0
   16c4e:	e553      	b.n	166f8 <d_encoding+0x64>

00016c50 <d_expr_primary>:
   16c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c52:	68c2      	ldr	r2, [r0, #12]
   16c54:	7813      	ldrb	r3, [r2, #0]
   16c56:	2b4c      	cmp	r3, #76	; 0x4c
   16c58:	d001      	beq.n	16c5e <d_expr_primary+0xe>
   16c5a:	2000      	movs	r0, #0
   16c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c5e:	1c53      	adds	r3, r2, #1
   16c60:	60c3      	str	r3, [r0, #12]
   16c62:	7851      	ldrb	r1, [r2, #1]
   16c64:	295f      	cmp	r1, #95	; 0x5f
   16c66:	4605      	mov	r5, r0
   16c68:	d03a      	beq.n	16ce0 <d_expr_primary+0x90>
   16c6a:	295a      	cmp	r1, #90	; 0x5a
   16c6c:	d03f      	beq.n	16cee <d_expr_primary+0x9e>
   16c6e:	f7fe fef9 	bl	15a64 <d_type>
   16c72:	2800      	cmp	r0, #0
   16c74:	d0f1      	beq.n	16c5a <d_expr_primary+0xa>
   16c76:	7803      	ldrb	r3, [r0, #0]
   16c78:	2b27      	cmp	r3, #39	; 0x27
   16c7a:	d046      	beq.n	16d0a <d_expr_primary+0xba>
   16c7c:	68ee      	ldr	r6, [r5, #12]
   16c7e:	7833      	ldrb	r3, [r6, #0]
   16c80:	2b6e      	cmp	r3, #110	; 0x6e
   16c82:	d04b      	beq.n	16d1c <d_expr_primary+0xcc>
   16c84:	213c      	movs	r1, #60	; 0x3c
   16c86:	2b45      	cmp	r3, #69	; 0x45
   16c88:	d04e      	beq.n	16d28 <d_expr_primary+0xd8>
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	d0e5      	beq.n	16c5a <d_expr_primary+0xa>
   16c8e:	4633      	mov	r3, r6
   16c90:	e001      	b.n	16c96 <d_expr_primary+0x46>
   16c92:	2c00      	cmp	r4, #0
   16c94:	d0e1      	beq.n	16c5a <d_expr_primary+0xa>
   16c96:	3301      	adds	r3, #1
   16c98:	60eb      	str	r3, [r5, #12]
   16c9a:	781c      	ldrb	r4, [r3, #0]
   16c9c:	2c45      	cmp	r4, #69	; 0x45
   16c9e:	d1f8      	bne.n	16c92 <d_expr_primary+0x42>
   16ca0:	1b9c      	subs	r4, r3, r6
   16ca2:	696b      	ldr	r3, [r5, #20]
   16ca4:	69aa      	ldr	r2, [r5, #24]
   16ca6:	4293      	cmp	r3, r2
   16ca8:	da2d      	bge.n	16d06 <d_expr_primary+0xb6>
   16caa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16cae:	692f      	ldr	r7, [r5, #16]
   16cb0:	3301      	adds	r3, #1
   16cb2:	0092      	lsls	r2, r2, #2
   16cb4:	616b      	str	r3, [r5, #20]
   16cb6:	18bb      	adds	r3, r7, r2
   16cb8:	d025      	beq.n	16d06 <d_expr_primary+0xb6>
   16cba:	b326      	cbz	r6, 16d06 <d_expr_primary+0xb6>
   16cbc:	b31c      	cbz	r4, 16d06 <d_expr_primary+0xb6>
   16cbe:	f04f 0e00 	mov.w	lr, #0
   16cc2:	f807 e002 	strb.w	lr, [r7, r2]
   16cc6:	605e      	str	r6, [r3, #4]
   16cc8:	609c      	str	r4, [r3, #8]
   16cca:	4602      	mov	r2, r0
   16ccc:	4628      	mov	r0, r5
   16cce:	f7fd fc39 	bl	14544 <d_make_comp>
   16cd2:	68eb      	ldr	r3, [r5, #12]
   16cd4:	781a      	ldrb	r2, [r3, #0]
   16cd6:	2a45      	cmp	r2, #69	; 0x45
   16cd8:	d1bf      	bne.n	16c5a <d_expr_primary+0xa>
   16cda:	3301      	adds	r3, #1
   16cdc:	60eb      	str	r3, [r5, #12]
   16cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ce0:	1c93      	adds	r3, r2, #2
   16ce2:	60c3      	str	r3, [r0, #12]
   16ce4:	7892      	ldrb	r2, [r2, #2]
   16ce6:	2a5a      	cmp	r2, #90	; 0x5a
   16ce8:	bf18      	it	ne
   16cea:	2000      	movne	r0, #0
   16cec:	d107      	bne.n	16cfe <d_expr_primary+0xae>
   16cee:	3301      	adds	r3, #1
   16cf0:	60eb      	str	r3, [r5, #12]
   16cf2:	2100      	movs	r1, #0
   16cf4:	4628      	mov	r0, r5
   16cf6:	f7ff fccd 	bl	16694 <d_encoding>
   16cfa:	68eb      	ldr	r3, [r5, #12]
   16cfc:	781a      	ldrb	r2, [r3, #0]
   16cfe:	2a45      	cmp	r2, #69	; 0x45
   16d00:	d0eb      	beq.n	16cda <d_expr_primary+0x8a>
   16d02:	2000      	movs	r0, #0
   16d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d06:	2300      	movs	r3, #0
   16d08:	e7df      	b.n	16cca <d_expr_primary+0x7a>
   16d0a:	6843      	ldr	r3, [r0, #4]
   16d0c:	7c1a      	ldrb	r2, [r3, #16]
   16d0e:	2a00      	cmp	r2, #0
   16d10:	d0b4      	beq.n	16c7c <d_expr_primary+0x2c>
   16d12:	685a      	ldr	r2, [r3, #4]
   16d14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16d16:	1a9b      	subs	r3, r3, r2
   16d18:	632b      	str	r3, [r5, #48]	; 0x30
   16d1a:	e7af      	b.n	16c7c <d_expr_primary+0x2c>
   16d1c:	1c72      	adds	r2, r6, #1
   16d1e:	60ea      	str	r2, [r5, #12]
   16d20:	7873      	ldrb	r3, [r6, #1]
   16d22:	213d      	movs	r1, #61	; 0x3d
   16d24:	4616      	mov	r6, r2
   16d26:	e7ae      	b.n	16c86 <d_expr_primary+0x36>
   16d28:	2400      	movs	r4, #0
   16d2a:	e7ba      	b.n	16ca2 <d_expr_primary+0x52>

00016d2c <d_print_comp_inner>:
   16d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d30:	4604      	mov	r4, r0
   16d32:	b095      	sub	sp, #84	; 0x54
   16d34:	2a00      	cmp	r2, #0
   16d36:	f000 80db 	beq.w	16ef0 <d_print_comp_inner+0x1c4>
   16d3a:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16d3e:	2f00      	cmp	r7, #0
   16d40:	f040 80c2 	bne.w	16ec8 <d_print_comp_inner+0x19c>
   16d44:	7813      	ldrb	r3, [r2, #0]
   16d46:	4688      	mov	r8, r1
   16d48:	4615      	mov	r5, r2
   16d4a:	2b4d      	cmp	r3, #77	; 0x4d
   16d4c:	f201 81e6 	bhi.w	1811c <d_print_comp_inner+0x13f0>
   16d50:	e8df f013 	tbh	[pc, r3, lsl #1]
   16d54:	043c045a 	.word	0x043c045a
   16d58:	03a4043c 	.word	0x03a4043c
   16d5c:	048904a5 	.word	0x048904a5
   16d60:	038e04ea 	.word	0x038e04ea
   16d64:	0330037c 	.word	0x0330037c
   16d68:	030a0356 	.word	0x030a0356
   16d6c:	029802e4 	.word	0x029802e4
   16d70:	027202be 	.word	0x027202be
   16d74:	01f0024c 	.word	0x01f0024c
   16d78:	01ca0226 	.word	0x01ca0226
   16d7c:	015801a4 	.word	0x015801a4
   16d80:	0132017e 	.word	0x0132017e
   16d84:	00f2010b 	.word	0x00f2010b
   16d88:	00f200f2 	.word	0x00f200f2
   16d8c:	00d400d4 	.word	0x00d400d4
   16d90:	00d400d4 	.word	0x00d400d4
   16d94:	00d400d4 	.word	0x00d400d4
   16d98:	06d500d4 	.word	0x06d500d4
   16d9c:	00d406d5 	.word	0x00d406d5
   16da0:	06a900d4 	.word	0x06a900d4
   16da4:	069306fc 	.word	0x069306fc
   16da8:	0701071d 	.word	0x0701071d
   16dac:	07010788 	.word	0x07010788
   16db0:	057b057b 	.word	0x057b057b
   16db4:	06060630 	.word	0x06060630
   16db8:	09e405e0 	.word	0x09e405e0
   16dbc:	068e05ad 	.word	0x068e05ad
   16dc0:	004e0654 	.word	0x004e0654
   16dc4:	094c0485 	.word	0x094c0485
   16dc8:	08df08df 	.word	0x08df08df
   16dcc:	08ae08ae 	.word	0x08ae08ae
   16dd0:	05480888 	.word	0x05480888
   16dd4:	08e4053a 	.word	0x08e4053a
   16dd8:	09be0514 	.word	0x09be0514
   16ddc:	09980914 	.word	0x09980914
   16de0:	07cb09e4 	.word	0x07cb09e4
   16de4:	07f10862 	.word	0x07f10862
   16de8:	04130817 	.word	0x04130817
   16dec:	055200d4 	.word	0x055200d4
   16df0:	68ab      	ldr	r3, [r5, #8]
   16df2:	781b      	ldrb	r3, [r3, #0]
   16df4:	2b38      	cmp	r3, #56	; 0x38
   16df6:	d17b      	bne.n	16ef0 <d_print_comp_inner+0x1c4>
   16df8:	686a      	ldr	r2, [r5, #4]
   16dfa:	6853      	ldr	r3, [r2, #4]
   16dfc:	681b      	ldr	r3, [r3, #0]
   16dfe:	7859      	ldrb	r1, [r3, #1]
   16e00:	2963      	cmp	r1, #99	; 0x63
   16e02:	f002 814a 	beq.w	1909a <d_print_comp_inner+0x236e>
   16e06:	f105 0308 	add.w	r3, r5, #8
   16e0a:	4641      	mov	r1, r8
   16e0c:	4620      	mov	r0, r4
   16e0e:	f003 fbbb 	bl	1a588 <d_maybe_print_fold_expression.isra.15>
   16e12:	4606      	mov	r6, r0
   16e14:	2800      	cmp	r0, #0
   16e16:	d157      	bne.n	16ec8 <d_print_comp_inner+0x19c>
   16e18:	686b      	ldr	r3, [r5, #4]
   16e1a:	781a      	ldrb	r2, [r3, #0]
   16e1c:	2a31      	cmp	r2, #49	; 0x31
   16e1e:	f002 836b 	beq.w	194f8 <d_print_comp_inner+0x27cc>
   16e22:	685b      	ldr	r3, [r3, #4]
   16e24:	49c7      	ldr	r1, [pc, #796]	; (17144 <d_print_comp_inner+0x418>)
   16e26:	6818      	ldr	r0, [r3, #0]
   16e28:	f007 fe2e 	bl	1ea88 <strcmp>
   16e2c:	68ab      	ldr	r3, [r5, #8]
   16e2e:	b920      	cbnz	r0, 16e3a <d_print_comp_inner+0x10e>
   16e30:	685a      	ldr	r2, [r3, #4]
   16e32:	7811      	ldrb	r1, [r2, #0]
   16e34:	2903      	cmp	r1, #3
   16e36:	f002 83a5 	beq.w	19584 <d_print_comp_inner+0x2858>
   16e3a:	685a      	ldr	r2, [r3, #4]
   16e3c:	4641      	mov	r1, r8
   16e3e:	4620      	mov	r0, r4
   16e40:	f003 fb3e 	bl	1a4c0 <d_print_subexpr>
   16e44:	686f      	ldr	r7, [r5, #4]
   16e46:	49c0      	ldr	r1, [pc, #768]	; (17148 <d_print_comp_inner+0x41c>)
   16e48:	687b      	ldr	r3, [r7, #4]
   16e4a:	f8d3 9000 	ldr.w	r9, [r3]
   16e4e:	4648      	mov	r0, r9
   16e50:	f007 fe1a 	bl	1ea88 <strcmp>
   16e54:	4606      	mov	r6, r0
   16e56:	2800      	cmp	r0, #0
   16e58:	f042 826f 	bne.w	1933a <d_print_comp_inner+0x260e>
   16e5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16e60:	29ff      	cmp	r1, #255	; 0xff
   16e62:	f002 844a 	beq.w	196fa <d_print_comp_inner+0x29ce>
   16e66:	1c4a      	adds	r2, r1, #1
   16e68:	235b      	movs	r3, #91	; 0x5b
   16e6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16e6e:	5463      	strb	r3, [r4, r1]
   16e70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16e74:	68ab      	ldr	r3, [r5, #8]
   16e76:	4641      	mov	r1, r8
   16e78:	689a      	ldr	r2, [r3, #8]
   16e7a:	4620      	mov	r0, r4
   16e7c:	f002 fcfa 	bl	19874 <d_print_comp>
   16e80:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16e84:	29ff      	cmp	r1, #255	; 0xff
   16e86:	f002 8425 	beq.w	196d4 <d_print_comp_inner+0x29a8>
   16e8a:	235d      	movs	r3, #93	; 0x5d
   16e8c:	1c4a      	adds	r2, r1, #1
   16e8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16e92:	5463      	strb	r3, [r4, r1]
   16e94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16e98:	686b      	ldr	r3, [r5, #4]
   16e9a:	781a      	ldrb	r2, [r3, #0]
   16e9c:	2a31      	cmp	r2, #49	; 0x31
   16e9e:	d113      	bne.n	16ec8 <d_print_comp_inner+0x19c>
   16ea0:	685b      	ldr	r3, [r3, #4]
   16ea2:	689a      	ldr	r2, [r3, #8]
   16ea4:	2a01      	cmp	r2, #1
   16ea6:	d10f      	bne.n	16ec8 <d_print_comp_inner+0x19c>
   16ea8:	685b      	ldr	r3, [r3, #4]
   16eaa:	781b      	ldrb	r3, [r3, #0]
   16eac:	2b3e      	cmp	r3, #62	; 0x3e
   16eae:	d10b      	bne.n	16ec8 <d_print_comp_inner+0x19c>
   16eb0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16eb4:	29ff      	cmp	r1, #255	; 0xff
   16eb6:	f002 8482 	beq.w	197be <d_print_comp_inner+0x2a92>
   16eba:	2329      	movs	r3, #41	; 0x29
   16ebc:	1c4a      	adds	r2, r1, #1
   16ebe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16ec2:	5463      	strb	r3, [r4, r1]
   16ec4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16ec8:	b015      	add	sp, #84	; 0x54
   16eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ece:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16ed2:	2b00      	cmp	r3, #0
   16ed4:	f2c1 84a4 	blt.w	18820 <d_print_comp_inner+0x1af4>
   16ed8:	2b00      	cmp	r3, #0
   16eda:	f002 8432 	beq.w	19742 <d_print_comp_inner+0x2a16>
   16ede:	6880      	ldr	r0, [r0, #8]
   16ee0:	3b01      	subs	r3, #1
   16ee2:	b110      	cbz	r0, 16eea <d_print_comp_inner+0x1be>
   16ee4:	7802      	ldrb	r2, [r0, #0]
   16ee6:	2a2f      	cmp	r2, #47	; 0x2f
   16ee8:	d0f6      	beq.n	16ed8 <d_print_comp_inner+0x1ac>
   16eea:	b10f      	cbz	r7, 16ef0 <d_print_comp_inner+0x1c4>
   16eec:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16ef0:	2301      	movs	r3, #1
   16ef2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16ef6:	b015      	add	sp, #84	; 0x54
   16ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16efc:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16f00:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16f04:	9505      	str	r5, [sp, #20]
   16f06:	ab14      	add	r3, sp, #80	; 0x50
   16f08:	2100      	movs	r1, #0
   16f0a:	f843 cd40 	str.w	ip, [r3, #-64]!
   16f0e:	9106      	str	r1, [sp, #24]
   16f10:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16f14:	9207      	str	r2, [sp, #28]
   16f16:	686a      	ldr	r2, [r5, #4]
   16f18:	4641      	mov	r1, r8
   16f1a:	4620      	mov	r0, r4
   16f1c:	f002 fcaa 	bl	19874 <d_print_comp>
   16f20:	9b06      	ldr	r3, [sp, #24]
   16f22:	2b00      	cmp	r3, #0
   16f24:	f001 8389 	beq.w	1863a <d_print_comp_inner+0x190e>
   16f28:	9b04      	ldr	r3, [sp, #16]
   16f2a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16f2e:	2f00      	cmp	r7, #0
   16f30:	d0ca      	beq.n	16ec8 <d_print_comp_inner+0x19c>
   16f32:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16f36:	e7c7      	b.n	16ec8 <d_print_comp_inner+0x19c>
   16f38:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16f3c:	f1bc 0f00 	cmp.w	ip, #0
   16f40:	d0de      	beq.n	16f00 <d_print_comp_inner+0x1d4>
   16f42:	4662      	mov	r2, ip
   16f44:	e005      	b.n	16f52 <d_print_comp_inner+0x226>
   16f46:	428b      	cmp	r3, r1
   16f48:	f001 86b8 	beq.w	18cbc <d_print_comp_inner+0x1f90>
   16f4c:	6812      	ldr	r2, [r2, #0]
   16f4e:	2a00      	cmp	r2, #0
   16f50:	d0d6      	beq.n	16f00 <d_print_comp_inner+0x1d4>
   16f52:	6890      	ldr	r0, [r2, #8]
   16f54:	2800      	cmp	r0, #0
   16f56:	d1f9      	bne.n	16f4c <d_print_comp_inner+0x220>
   16f58:	6851      	ldr	r1, [r2, #4]
   16f5a:	7809      	ldrb	r1, [r1, #0]
   16f5c:	f1a1 0e19 	sub.w	lr, r1, #25
   16f60:	f1be 0f02 	cmp.w	lr, #2
   16f64:	d9ef      	bls.n	16f46 <d_print_comp_inner+0x21a>
   16f66:	4607      	mov	r7, r0
   16f68:	e7ca      	b.n	16f00 <d_print_comp_inner+0x1d4>
   16f6a:	68af      	ldr	r7, [r5, #8]
   16f6c:	686d      	ldr	r5, [r5, #4]
   16f6e:	2f00      	cmp	r7, #0
   16f70:	d0aa      	beq.n	16ec8 <d_print_comp_inner+0x19c>
   16f72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f76:	442f      	add	r7, r5
   16f78:	f04f 0800 	mov.w	r8, #0
   16f7c:	e008      	b.n	16f90 <d_print_comp_inner+0x264>
   16f7e:	460b      	mov	r3, r1
   16f80:	3101      	adds	r1, #1
   16f82:	42bd      	cmp	r5, r7
   16f84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f88:	54e6      	strb	r6, [r4, r3]
   16f8a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16f8e:	d09b      	beq.n	16ec8 <d_print_comp_inner+0x19c>
   16f90:	29ff      	cmp	r1, #255	; 0xff
   16f92:	f815 6b01 	ldrb.w	r6, [r5], #1
   16f96:	d1f2      	bne.n	16f7e <d_print_comp_inner+0x252>
   16f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f9c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16fa0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fa4:	4620      	mov	r0, r4
   16fa6:	4798      	blx	r3
   16fa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16fac:	3301      	adds	r3, #1
   16fae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16fb2:	2101      	movs	r1, #1
   16fb4:	2300      	movs	r3, #0
   16fb6:	e7e4      	b.n	16f82 <d_print_comp_inner+0x256>
   16fb8:	4e64      	ldr	r6, [pc, #400]	; (1714c <d_print_comp_inner+0x420>)
   16fba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16fbe:	f106 0a11 	add.w	sl, r6, #17
   16fc2:	f04f 0900 	mov.w	r9, #0
   16fc6:	e009      	b.n	16fdc <d_print_comp_inner+0x2b0>
   16fc8:	460b      	mov	r3, r1
   16fca:	3101      	adds	r1, #1
   16fcc:	4556      	cmp	r6, sl
   16fce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fd2:	54e7      	strb	r7, [r4, r3]
   16fd4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16fd8:	f001 8296 	beq.w	18508 <d_print_comp_inner+0x17dc>
   16fdc:	29ff      	cmp	r1, #255	; 0xff
   16fde:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16fe2:	d1f1      	bne.n	16fc8 <d_print_comp_inner+0x29c>
   16fe4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fe8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16ff0:	4620      	mov	r0, r4
   16ff2:	4798      	blx	r3
   16ff4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ff8:	3301      	adds	r3, #1
   16ffa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16ffe:	2101      	movs	r1, #1
   17000:	2300      	movs	r3, #0
   17002:	e7e3      	b.n	16fcc <d_print_comp_inner+0x2a0>
   17004:	4e52      	ldr	r6, [pc, #328]	; (17150 <d_print_comp_inner+0x424>)
   17006:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1700a:	f106 0a19 	add.w	sl, r6, #25
   1700e:	f04f 0900 	mov.w	r9, #0
   17012:	e009      	b.n	17028 <d_print_comp_inner+0x2fc>
   17014:	460b      	mov	r3, r1
   17016:	3101      	adds	r1, #1
   17018:	4556      	cmp	r6, sl
   1701a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1701e:	54e7      	strb	r7, [r4, r3]
   17020:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17024:	f001 82a8 	beq.w	18578 <d_print_comp_inner+0x184c>
   17028:	29ff      	cmp	r1, #255	; 0xff
   1702a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1702e:	d1f1      	bne.n	17014 <d_print_comp_inner+0x2e8>
   17030:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17034:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1703c:	4620      	mov	r0, r4
   1703e:	4798      	blx	r3
   17040:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17044:	3301      	adds	r3, #1
   17046:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1704a:	2101      	movs	r1, #1
   1704c:	2300      	movs	r3, #0
   1704e:	e7e3      	b.n	17018 <d_print_comp_inner+0x2ec>
   17050:	4e40      	ldr	r6, [pc, #256]	; (17154 <d_print_comp_inner+0x428>)
   17052:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17056:	f106 0a15 	add.w	sl, r6, #21
   1705a:	f04f 0900 	mov.w	r9, #0
   1705e:	e009      	b.n	17074 <d_print_comp_inner+0x348>
   17060:	460b      	mov	r3, r1
   17062:	3101      	adds	r1, #1
   17064:	4556      	cmp	r6, sl
   17066:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1706a:	54e7      	strb	r7, [r4, r3]
   1706c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17070:	f001 8251 	beq.w	18516 <d_print_comp_inner+0x17ea>
   17074:	29ff      	cmp	r1, #255	; 0xff
   17076:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1707a:	d1f1      	bne.n	17060 <d_print_comp_inner+0x334>
   1707c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17080:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17084:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17088:	4620      	mov	r0, r4
   1708a:	4798      	blx	r3
   1708c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17090:	3301      	adds	r3, #1
   17092:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17096:	2101      	movs	r1, #1
   17098:	2300      	movs	r3, #0
   1709a:	e7e3      	b.n	17064 <d_print_comp_inner+0x338>
   1709c:	4e2e      	ldr	r6, [pc, #184]	; (17158 <d_print_comp_inner+0x42c>)
   1709e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170a2:	f106 0a16 	add.w	sl, r6, #22
   170a6:	f04f 0900 	mov.w	r9, #0
   170aa:	e009      	b.n	170c0 <d_print_comp_inner+0x394>
   170ac:	460b      	mov	r3, r1
   170ae:	3101      	adds	r1, #1
   170b0:	4556      	cmp	r6, sl
   170b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170b6:	54e7      	strb	r7, [r4, r3]
   170b8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170bc:	f001 8263 	beq.w	18586 <d_print_comp_inner+0x185a>
   170c0:	29ff      	cmp	r1, #255	; 0xff
   170c2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170c6:	d1f1      	bne.n	170ac <d_print_comp_inner+0x380>
   170c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170cc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170d4:	4620      	mov	r0, r4
   170d6:	4798      	blx	r3
   170d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170dc:	3301      	adds	r3, #1
   170de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170e2:	2101      	movs	r1, #1
   170e4:	2300      	movs	r3, #0
   170e6:	e7e3      	b.n	170b0 <d_print_comp_inner+0x384>
   170e8:	4e1c      	ldr	r6, [pc, #112]	; (1715c <d_print_comp_inner+0x430>)
   170ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170ee:	f106 0a13 	add.w	sl, r6, #19
   170f2:	f04f 0900 	mov.w	r9, #0
   170f6:	e009      	b.n	1710c <d_print_comp_inner+0x3e0>
   170f8:	460b      	mov	r3, r1
   170fa:	3101      	adds	r1, #1
   170fc:	45b2      	cmp	sl, r6
   170fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17102:	54e7      	strb	r7, [r4, r3]
   17104:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17108:	f001 8077 	beq.w	181fa <d_print_comp_inner+0x14ce>
   1710c:	29ff      	cmp	r1, #255	; 0xff
   1710e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17112:	d1f1      	bne.n	170f8 <d_print_comp_inner+0x3cc>
   17114:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17118:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1711c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17120:	4620      	mov	r0, r4
   17122:	4798      	blx	r3
   17124:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17128:	3301      	adds	r3, #1
   1712a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1712e:	2101      	movs	r1, #1
   17130:	2300      	movs	r3, #0
   17132:	e7e3      	b.n	170fc <d_print_comp_inner+0x3d0>
   17134:	4e0a      	ldr	r6, [pc, #40]	; (17160 <d_print_comp_inner+0x434>)
   17136:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1713a:	f106 0a1a 	add.w	sl, r6, #26
   1713e:	f04f 0900 	mov.w	r9, #0
   17142:	e019      	b.n	17178 <d_print_comp_inner+0x44c>
   17144:	0002444c 	.word	0x0002444c
   17148:	00024648 	.word	0x00024648
   1714c:	000245d7 	.word	0x000245d7
   17150:	000245a3 	.word	0x000245a3
   17154:	000245bf 	.word	0x000245bf
   17158:	0002458b 	.word	0x0002458b
   1715c:	00024577 	.word	0x00024577
   17160:	0002454b 	.word	0x0002454b
   17164:	460b      	mov	r3, r1
   17166:	3101      	adds	r1, #1
   17168:	4556      	cmp	r6, sl
   1716a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1716e:	54e7      	strb	r7, [r4, r3]
   17170:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17174:	f001 804f 	beq.w	18216 <d_print_comp_inner+0x14ea>
   17178:	29ff      	cmp	r1, #255	; 0xff
   1717a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1717e:	d1f1      	bne.n	17164 <d_print_comp_inner+0x438>
   17180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17184:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17188:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1718c:	4620      	mov	r0, r4
   1718e:	4798      	blx	r3
   17190:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17194:	3301      	adds	r3, #1
   17196:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1719a:	2101      	movs	r1, #1
   1719c:	2300      	movs	r3, #0
   1719e:	e7e3      	b.n	17168 <d_print_comp_inner+0x43c>
   171a0:	4eb5      	ldr	r6, [pc, #724]	; (17478 <d_print_comp_inner+0x74c>)
   171a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171a6:	f106 0a0f 	add.w	sl, r6, #15
   171aa:	f04f 0900 	mov.w	r9, #0
   171ae:	e009      	b.n	171c4 <d_print_comp_inner+0x498>
   171b0:	460b      	mov	r3, r1
   171b2:	3101      	adds	r1, #1
   171b4:	4556      	cmp	r6, sl
   171b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171ba:	54e7      	strb	r7, [r4, r3]
   171bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171c0:	f001 8022 	beq.w	18208 <d_print_comp_inner+0x14dc>
   171c4:	29ff      	cmp	r1, #255	; 0xff
   171c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171ca:	d1f1      	bne.n	171b0 <d_print_comp_inner+0x484>
   171cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171d8:	4620      	mov	r0, r4
   171da:	4798      	blx	r3
   171dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171e0:	3301      	adds	r3, #1
   171e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171e6:	2101      	movs	r1, #1
   171e8:	2300      	movs	r3, #0
   171ea:	e7e3      	b.n	171b4 <d_print_comp_inner+0x488>
   171ec:	4ea3      	ldr	r6, [pc, #652]	; (1747c <d_print_comp_inner+0x750>)
   171ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171f2:	f106 0a11 	add.w	sl, r6, #17
   171f6:	f04f 0900 	mov.w	r9, #0
   171fa:	e009      	b.n	17210 <d_print_comp_inner+0x4e4>
   171fc:	460b      	mov	r3, r1
   171fe:	3101      	adds	r1, #1
   17200:	4556      	cmp	r6, sl
   17202:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17206:	54e7      	strb	r7, [r4, r3]
   17208:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1720c:	f001 800a 	beq.w	18224 <d_print_comp_inner+0x14f8>
   17210:	29ff      	cmp	r1, #255	; 0xff
   17212:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17216:	d1f1      	bne.n	171fc <d_print_comp_inner+0x4d0>
   17218:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1721c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17220:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17224:	4620      	mov	r0, r4
   17226:	4798      	blx	r3
   17228:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1722c:	3301      	adds	r3, #1
   1722e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17232:	2101      	movs	r1, #1
   17234:	2300      	movs	r3, #0
   17236:	e7e3      	b.n	17200 <d_print_comp_inner+0x4d4>
   17238:	4e91      	ldr	r6, [pc, #580]	; (17480 <d_print_comp_inner+0x754>)
   1723a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1723e:	f106 0a15 	add.w	sl, r6, #21
   17242:	f04f 0900 	mov.w	r9, #0
   17246:	e009      	b.n	1725c <d_print_comp_inner+0x530>
   17248:	460b      	mov	r3, r1
   1724a:	3101      	adds	r1, #1
   1724c:	4556      	cmp	r6, sl
   1724e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17252:	54e7      	strb	r7, [r4, r3]
   17254:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17258:	f000 87b3 	beq.w	181c2 <d_print_comp_inner+0x1496>
   1725c:	29ff      	cmp	r1, #255	; 0xff
   1725e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17262:	d1f1      	bne.n	17248 <d_print_comp_inner+0x51c>
   17264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17268:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1726c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17270:	4620      	mov	r0, r4
   17272:	4798      	blx	r3
   17274:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17278:	3301      	adds	r3, #1
   1727a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1727e:	2101      	movs	r1, #1
   17280:	2300      	movs	r3, #0
   17282:	e7e3      	b.n	1724c <d_print_comp_inner+0x520>
   17284:	4e7f      	ldr	r6, [pc, #508]	; (17484 <d_print_comp_inner+0x758>)
   17286:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1728a:	f106 0a12 	add.w	sl, r6, #18
   1728e:	f04f 0900 	mov.w	r9, #0
   17292:	e009      	b.n	172a8 <d_print_comp_inner+0x57c>
   17294:	460b      	mov	r3, r1
   17296:	3101      	adds	r1, #1
   17298:	45b2      	cmp	sl, r6
   1729a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1729e:	54e7      	strb	r7, [r4, r3]
   172a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172a4:	f000 879b 	beq.w	181de <d_print_comp_inner+0x14b2>
   172a8:	29ff      	cmp	r1, #255	; 0xff
   172aa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172ae:	d1f1      	bne.n	17294 <d_print_comp_inner+0x568>
   172b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172bc:	4620      	mov	r0, r4
   172be:	4798      	blx	r3
   172c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172c4:	3301      	adds	r3, #1
   172c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   172ca:	2101      	movs	r1, #1
   172cc:	2300      	movs	r3, #0
   172ce:	e7e3      	b.n	17298 <d_print_comp_inner+0x56c>
   172d0:	4e6d      	ldr	r6, [pc, #436]	; (17488 <d_print_comp_inner+0x75c>)
   172d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172d6:	f106 0a10 	add.w	sl, r6, #16
   172da:	f04f 0900 	mov.w	r9, #0
   172de:	e009      	b.n	172f4 <d_print_comp_inner+0x5c8>
   172e0:	460b      	mov	r3, r1
   172e2:	3101      	adds	r1, #1
   172e4:	4556      	cmp	r6, sl
   172e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172ea:	54e7      	strb	r7, [r4, r3]
   172ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172f0:	f000 876e 	beq.w	181d0 <d_print_comp_inner+0x14a4>
   172f4:	29ff      	cmp	r1, #255	; 0xff
   172f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172fa:	d1f1      	bne.n	172e0 <d_print_comp_inner+0x5b4>
   172fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17300:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17304:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17308:	4620      	mov	r0, r4
   1730a:	4798      	blx	r3
   1730c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17310:	3301      	adds	r3, #1
   17312:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17316:	2101      	movs	r1, #1
   17318:	2300      	movs	r3, #0
   1731a:	e7e3      	b.n	172e4 <d_print_comp_inner+0x5b8>
   1731c:	4e5b      	ldr	r6, [pc, #364]	; (1748c <d_print_comp_inner+0x760>)
   1731e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17322:	f106 0a0d 	add.w	sl, r6, #13
   17326:	f04f 0900 	mov.w	r9, #0
   1732a:	e009      	b.n	17340 <d_print_comp_inner+0x614>
   1732c:	460b      	mov	r3, r1
   1732e:	3101      	adds	r1, #1
   17330:	4556      	cmp	r6, sl
   17332:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17336:	54e7      	strb	r7, [r4, r3]
   17338:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1733c:	f000 8756 	beq.w	181ec <d_print_comp_inner+0x14c0>
   17340:	29ff      	cmp	r1, #255	; 0xff
   17342:	f816 7b01 	ldrb.w	r7, [r6], #1
   17346:	d1f1      	bne.n	1732c <d_print_comp_inner+0x600>
   17348:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1734c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17350:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17354:	4620      	mov	r0, r4
   17356:	4798      	blx	r3
   17358:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1735c:	3301      	adds	r3, #1
   1735e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17362:	2101      	movs	r1, #1
   17364:	2300      	movs	r3, #0
   17366:	e7e3      	b.n	17330 <d_print_comp_inner+0x604>
   17368:	4e49      	ldr	r6, [pc, #292]	; (17490 <d_print_comp_inner+0x764>)
   1736a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1736e:	f106 0a18 	add.w	sl, r6, #24
   17372:	f04f 0900 	mov.w	r9, #0
   17376:	e009      	b.n	1738c <d_print_comp_inner+0x660>
   17378:	460b      	mov	r3, r1
   1737a:	3101      	adds	r1, #1
   1737c:	45b2      	cmp	sl, r6
   1737e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17382:	54e7      	strb	r7, [r4, r3]
   17384:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17388:	f000 86e3 	beq.w	18152 <d_print_comp_inner+0x1426>
   1738c:	29ff      	cmp	r1, #255	; 0xff
   1738e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17392:	d1f1      	bne.n	17378 <d_print_comp_inner+0x64c>
   17394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17398:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1739c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173a0:	4620      	mov	r0, r4
   173a2:	4798      	blx	r3
   173a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173a8:	3301      	adds	r3, #1
   173aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173ae:	2101      	movs	r1, #1
   173b0:	2300      	movs	r3, #0
   173b2:	e7e3      	b.n	1737c <d_print_comp_inner+0x650>
   173b4:	4e37      	ldr	r6, [pc, #220]	; (17494 <d_print_comp_inner+0x768>)
   173b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173ba:	f106 0a0b 	add.w	sl, r6, #11
   173be:	f04f 0900 	mov.w	r9, #0
   173c2:	e009      	b.n	173d8 <d_print_comp_inner+0x6ac>
   173c4:	460b      	mov	r3, r1
   173c6:	3101      	adds	r1, #1
   173c8:	45b2      	cmp	sl, r6
   173ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173ce:	54e7      	strb	r7, [r4, r3]
   173d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173d4:	f000 87ca 	beq.w	1836c <d_print_comp_inner+0x1640>
   173d8:	29ff      	cmp	r1, #255	; 0xff
   173da:	f816 7b01 	ldrb.w	r7, [r6], #1
   173de:	d1f1      	bne.n	173c4 <d_print_comp_inner+0x698>
   173e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   173e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173ec:	4620      	mov	r0, r4
   173ee:	4798      	blx	r3
   173f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173f4:	3301      	adds	r3, #1
   173f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173fa:	2101      	movs	r1, #1
   173fc:	2300      	movs	r3, #0
   173fe:	e7e3      	b.n	173c8 <d_print_comp_inner+0x69c>
   17400:	4e25      	ldr	r6, [pc, #148]	; (17498 <d_print_comp_inner+0x76c>)
   17402:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17406:	f106 0a08 	add.w	sl, r6, #8
   1740a:	f04f 0900 	mov.w	r9, #0
   1740e:	e009      	b.n	17424 <d_print_comp_inner+0x6f8>
   17410:	460b      	mov	r3, r1
   17412:	3101      	adds	r1, #1
   17414:	45b2      	cmp	sl, r6
   17416:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1741a:	54e7      	strb	r7, [r4, r3]
   1741c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17420:	f000 86c8 	beq.w	181b4 <d_print_comp_inner+0x1488>
   17424:	29ff      	cmp	r1, #255	; 0xff
   17426:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1742a:	d1f1      	bne.n	17410 <d_print_comp_inner+0x6e4>
   1742c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17430:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17434:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17438:	4620      	mov	r0, r4
   1743a:	4798      	blx	r3
   1743c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17440:	3301      	adds	r3, #1
   17442:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17446:	2101      	movs	r1, #1
   17448:	2300      	movs	r3, #0
   1744a:	e7e3      	b.n	17414 <d_print_comp_inner+0x6e8>
   1744c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17450:	29ff      	cmp	r1, #255	; 0xff
   17452:	f001 847c 	beq.w	18d4e <d_print_comp_inner+0x2022>
   17456:	1c4a      	adds	r2, r1, #1
   17458:	237e      	movs	r3, #126	; 0x7e
   1745a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1745e:	5463      	strb	r3, [r4, r1]
   17460:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17464:	4641      	mov	r1, r8
   17466:	68aa      	ldr	r2, [r5, #8]
   17468:	4620      	mov	r0, r4
   1746a:	f002 fa03 	bl	19874 <d_print_comp>
   1746e:	e52b      	b.n	16ec8 <d_print_comp_inner+0x19c>
   17470:	68aa      	ldr	r2, [r5, #8]
   17472:	f002 f9ff 	bl	19874 <d_print_comp>
   17476:	e527      	b.n	16ec8 <d_print_comp_inner+0x19c>
   17478:	00024567 	.word	0x00024567
   1747c:	00024537 	.word	0x00024537
   17480:	00024533 	.word	0x00024533
   17484:	0002450b 	.word	0x0002450b
   17488:	0002451f 	.word	0x0002451f
   1748c:	000244fc 	.word	0x000244fc
   17490:	000244d7 	.word	0x000244d7
   17494:	000244c0 	.word	0x000244c0
   17498:	000244cb 	.word	0x000244cb
   1749c:	2200      	movs	r2, #0
   1749e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   174a2:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   174a6:	686e      	ldr	r6, [r5, #4]
   174a8:	9300      	str	r3, [sp, #0]
   174aa:	2e00      	cmp	r6, #0
   174ac:	f000 864c 	beq.w	18148 <d_print_comp_inner+0x141c>
   174b0:	f10d 0910 	add.w	r9, sp, #16
   174b4:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   174b8:	4617      	mov	r7, r2
   174ba:	4696      	mov	lr, r2
   174bc:	464b      	mov	r3, r9
   174be:	7831      	ldrb	r1, [r6, #0]
   174c0:	601a      	str	r2, [r3, #0]
   174c2:	f1a1 021c 	sub.w	r2, r1, #28
   174c6:	2a04      	cmp	r2, #4
   174c8:	605e      	str	r6, [r3, #4]
   174ca:	f8c3 e008 	str.w	lr, [r3, #8]
   174ce:	f8c3 c00c 	str.w	ip, [r3, #12]
   174d2:	f107 0701 	add.w	r7, r7, #1
   174d6:	4618      	mov	r0, r3
   174d8:	461a      	mov	r2, r3
   174da:	f240 862a 	bls.w	18132 <d_print_comp_inner+0x1406>
   174de:	294c      	cmp	r1, #76	; 0x4c
   174e0:	f000 8627 	beq.w	18132 <d_print_comp_inner+0x1406>
   174e4:	2904      	cmp	r1, #4
   174e6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   174ea:	f001 87bb 	beq.w	19464 <d_print_comp_inner+0x2738>
   174ee:	2902      	cmp	r1, #2
   174f0:	d11a      	bne.n	17528 <d_print_comp_inner+0x7fc>
   174f2:	f8d6 b008 	ldr.w	fp, [r6, #8]
   174f6:	f89b 3000 	ldrb.w	r3, [fp]
   174fa:	2b46      	cmp	r3, #70	; 0x46
   174fc:	f002 8035 	beq.w	1956a <d_print_comp_inner+0x283e>
   17500:	462b      	mov	r3, r5
   17502:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   17506:	9601      	str	r6, [sp, #4]
   17508:	465d      	mov	r5, fp
   1750a:	4676      	mov	r6, lr
   1750c:	46a2      	mov	sl, r4
   1750e:	469b      	mov	fp, r3
   17510:	782b      	ldrb	r3, [r5, #0]
   17512:	f1a3 021c 	sub.w	r2, r3, #28
   17516:	2a04      	cmp	r2, #4
   17518:	f241 805d 	bls.w	185d6 <d_print_comp_inner+0x18aa>
   1751c:	2b4c      	cmp	r3, #76	; 0x4c
   1751e:	f001 805a 	beq.w	185d6 <d_print_comp_inner+0x18aa>
   17522:	9e01      	ldr	r6, [sp, #4]
   17524:	4654      	mov	r4, sl
   17526:	465d      	mov	r5, fp
   17528:	68aa      	ldr	r2, [r5, #8]
   1752a:	4641      	mov	r1, r8
   1752c:	4620      	mov	r0, r4
   1752e:	f002 f9a1 	bl	19874 <d_print_comp>
   17532:	7833      	ldrb	r3, [r6, #0]
   17534:	2b04      	cmp	r3, #4
   17536:	f002 8020 	beq.w	1957a <d_print_comp_inner+0x284e>
   1753a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   1753e:	2620      	movs	r6, #32
   17540:	f859 5c08 	ldr.w	r5, [r9, #-8]
   17544:	3f01      	subs	r7, #1
   17546:	b985      	cbnz	r5, 1756a <d_print_comp_inner+0x83e>
   17548:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1754c:	29ff      	cmp	r1, #255	; 0xff
   1754e:	f002 8043 	beq.w	195d8 <d_print_comp_inner+0x28ac>
   17552:	1c4b      	adds	r3, r1, #1
   17554:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17558:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   1755c:	5466      	strb	r6, [r4, r1]
   1755e:	4620      	mov	r0, r4
   17560:	4641      	mov	r1, r8
   17562:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17566:	f002 f995 	bl	19894 <d_print_mod>
   1756a:	f1a9 0910 	sub.w	r9, r9, #16
   1756e:	2f00      	cmp	r7, #0
   17570:	d1e6      	bne.n	17540 <d_print_comp_inner+0x814>
   17572:	9b00      	ldr	r3, [sp, #0]
   17574:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17578:	e4a6      	b.n	16ec8 <d_print_comp_inner+0x19c>
   1757a:	4ed1      	ldr	r6, [pc, #836]	; (178c0 <d_print_comp_inner+0xb94>)
   1757c:	686a      	ldr	r2, [r5, #4]
   1757e:	f002 f979 	bl	19874 <d_print_comp>
   17582:	f106 0a05 	add.w	sl, r6, #5
   17586:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1758a:	f04f 0900 	mov.w	r9, #0
   1758e:	e009      	b.n	175a4 <d_print_comp_inner+0x878>
   17590:	460b      	mov	r3, r1
   17592:	3101      	adds	r1, #1
   17594:	45b2      	cmp	sl, r6
   17596:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1759a:	54e7      	strb	r7, [r4, r3]
   1759c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175a0:	f000 86d1 	beq.w	18346 <d_print_comp_inner+0x161a>
   175a4:	29ff      	cmp	r1, #255	; 0xff
   175a6:	f816 7b01 	ldrb.w	r7, [r6], #1
   175aa:	d1f1      	bne.n	17590 <d_print_comp_inner+0x864>
   175ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175b0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   175b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175b8:	4620      	mov	r0, r4
   175ba:	4798      	blx	r3
   175bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175c0:	3301      	adds	r3, #1
   175c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   175c6:	2101      	movs	r1, #1
   175c8:	2300      	movs	r3, #0
   175ca:	e7e3      	b.n	17594 <d_print_comp_inner+0x868>
   175cc:	686a      	ldr	r2, [r5, #4]
   175ce:	f002 f951 	bl	19874 <d_print_comp>
   175d2:	f018 0904 	ands.w	r9, r8, #4
   175d6:	f001 82aa 	beq.w	18b2e <d_print_comp_inner+0x1e02>
   175da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   175de:	29ff      	cmp	r1, #255	; 0xff
   175e0:	f001 859a 	beq.w	19118 <d_print_comp_inner+0x23ec>
   175e4:	1c4a      	adds	r2, r1, #1
   175e6:	232e      	movs	r3, #46	; 0x2e
   175e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   175ec:	5463      	strb	r3, [r4, r1]
   175ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   175f2:	68ad      	ldr	r5, [r5, #8]
   175f4:	782b      	ldrb	r3, [r5, #0]
   175f6:	2b46      	cmp	r3, #70	; 0x46
   175f8:	f001 83cc 	beq.w	18d94 <d_print_comp_inner+0x2068>
   175fc:	462a      	mov	r2, r5
   175fe:	4641      	mov	r1, r8
   17600:	4620      	mov	r0, r4
   17602:	f002 f937 	bl	19874 <d_print_comp>
   17606:	e45f      	b.n	16ec8 <d_print_comp_inner+0x19c>
   17608:	f011 0804 	ands.w	r8, r1, #4
   1760c:	f041 808b 	bne.w	18726 <d_print_comp_inner+0x19fa>
   17610:	68af      	ldr	r7, [r5, #8]
   17612:	686d      	ldr	r5, [r5, #4]
   17614:	2f00      	cmp	r7, #0
   17616:	f43f ac57 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   1761a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1761e:	442f      	add	r7, r5
   17620:	e009      	b.n	17636 <d_print_comp_inner+0x90a>
   17622:	460b      	mov	r3, r1
   17624:	3101      	adds	r1, #1
   17626:	42bd      	cmp	r5, r7
   17628:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1762c:	54e6      	strb	r6, [r4, r3]
   1762e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17632:	f43f ac49 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   17636:	29ff      	cmp	r1, #255	; 0xff
   17638:	f815 6b01 	ldrb.w	r6, [r5], #1
   1763c:	d1f1      	bne.n	17622 <d_print_comp_inner+0x8f6>
   1763e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17642:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17646:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1764a:	4620      	mov	r0, r4
   1764c:	4798      	blx	r3
   1764e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17652:	3301      	adds	r3, #1
   17654:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17658:	2101      	movs	r1, #1
   1765a:	2300      	movs	r3, #0
   1765c:	e7e3      	b.n	17626 <d_print_comp_inner+0x8fa>
   1765e:	2301      	movs	r3, #1
   17660:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17664:	e430      	b.n	16ec8 <d_print_comp_inner+0x19c>
   17666:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1766a:	2b00      	cmp	r3, #0
   1766c:	f041 8106 	bne.w	1887c <d_print_comp_inner+0x1b50>
   17670:	1d29      	adds	r1, r5, #4
   17672:	f7fd fa97 	bl	14ba4 <d_lookup_template_argument.isra.6>
   17676:	2800      	cmp	r0, #0
   17678:	f43f ac3a 	beq.w	16ef0 <d_print_comp_inner+0x1c4>
   1767c:	7803      	ldrb	r3, [r0, #0]
   1767e:	2b2f      	cmp	r3, #47	; 0x2f
   17680:	f001 83fc 	beq.w	18e7c <d_print_comp_inner+0x2150>
   17684:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   17688:	682b      	ldr	r3, [r5, #0]
   1768a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1768e:	4602      	mov	r2, r0
   17690:	4641      	mov	r1, r8
   17692:	4620      	mov	r0, r4
   17694:	f002 f8ee 	bl	19874 <d_print_comp>
   17698:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1769c:	e414      	b.n	16ec8 <d_print_comp_inner+0x19c>
   1769e:	2300      	movs	r3, #0
   176a0:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   176a4:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   176a8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   176ac:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   176b0:	f011 0f04 	tst.w	r1, #4
   176b4:	686e      	ldr	r6, [r5, #4]
   176b6:	d005      	beq.n	176c4 <d_print_comp_inner+0x998>
   176b8:	7833      	ldrb	r3, [r6, #0]
   176ba:	b91b      	cbnz	r3, 176c4 <d_print_comp_inner+0x998>
   176bc:	68b2      	ldr	r2, [r6, #8]
   176be:	2a06      	cmp	r2, #6
   176c0:	f001 853c 	beq.w	1913c <d_print_comp_inner+0x2410>
   176c4:	4632      	mov	r2, r6
   176c6:	4641      	mov	r1, r8
   176c8:	4620      	mov	r0, r4
   176ca:	f002 f8d3 	bl	19874 <d_print_comp>
   176ce:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   176d2:	2b3c      	cmp	r3, #60	; 0x3c
   176d4:	f001 8274 	beq.w	18bc0 <d_print_comp_inner+0x1e94>
   176d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   176dc:	2bff      	cmp	r3, #255	; 0xff
   176de:	f001 8489 	beq.w	18ff4 <d_print_comp_inner+0x22c8>
   176e2:	1c59      	adds	r1, r3, #1
   176e4:	223c      	movs	r2, #60	; 0x3c
   176e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176ea:	54e2      	strb	r2, [r4, r3]
   176ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   176f0:	4641      	mov	r1, r8
   176f2:	68aa      	ldr	r2, [r5, #8]
   176f4:	4620      	mov	r0, r4
   176f6:	f002 f8bd 	bl	19874 <d_print_comp>
   176fa:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   176fe:	2b3e      	cmp	r3, #62	; 0x3e
   17700:	f001 8239 	beq.w	18b76 <d_print_comp_inner+0x1e4a>
   17704:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17708:	2bff      	cmp	r3, #255	; 0xff
   1770a:	f001 8460 	beq.w	18fce <d_print_comp_inner+0x22a2>
   1770e:	1c59      	adds	r1, r3, #1
   17710:	223e      	movs	r2, #62	; 0x3e
   17712:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17716:	54e2      	strb	r2, [r4, r3]
   17718:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1771c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17720:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   17724:	f7ff bbd0 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17728:	686f      	ldr	r7, [r5, #4]
   1772a:	2f00      	cmp	r7, #0
   1772c:	f001 8082 	beq.w	18834 <d_print_comp_inner+0x1b08>
   17730:	4d64      	ldr	r5, [pc, #400]	; (178c4 <d_print_comp_inner+0xb98>)
   17732:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17736:	f105 0906 	add.w	r9, r5, #6
   1773a:	f04f 0800 	mov.w	r8, #0
   1773e:	e009      	b.n	17754 <d_print_comp_inner+0xa28>
   17740:	460b      	mov	r3, r1
   17742:	3101      	adds	r1, #1
   17744:	45a9      	cmp	r9, r5
   17746:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1774a:	54e6      	strb	r6, [r4, r3]
   1774c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17750:	f000 8782 	beq.w	18658 <d_print_comp_inner+0x192c>
   17754:	29ff      	cmp	r1, #255	; 0xff
   17756:	f815 6b01 	ldrb.w	r6, [r5], #1
   1775a:	d1f1      	bne.n	17740 <d_print_comp_inner+0xa14>
   1775c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17760:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17764:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17768:	4620      	mov	r0, r4
   1776a:	4798      	blx	r3
   1776c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17770:	3301      	adds	r3, #1
   17772:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17776:	2101      	movs	r1, #1
   17778:	2300      	movs	r3, #0
   1777a:	e7e3      	b.n	17744 <d_print_comp_inner+0xa18>
   1777c:	4e52      	ldr	r6, [pc, #328]	; (178c8 <d_print_comp_inner+0xb9c>)
   1777e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17782:	f106 0a0a 	add.w	sl, r6, #10
   17786:	f04f 0900 	mov.w	r9, #0
   1778a:	e009      	b.n	177a0 <d_print_comp_inner+0xa74>
   1778c:	460b      	mov	r3, r1
   1778e:	3101      	adds	r1, #1
   17790:	4556      	cmp	r6, sl
   17792:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17796:	54e7      	strb	r7, [r4, r3]
   17798:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1779c:	f000 8701 	beq.w	185a2 <d_print_comp_inner+0x1876>
   177a0:	29ff      	cmp	r1, #255	; 0xff
   177a2:	f816 7b01 	ldrb.w	r7, [r6], #1
   177a6:	d1f1      	bne.n	1778c <d_print_comp_inner+0xa60>
   177a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   177b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   177b4:	4620      	mov	r0, r4
   177b6:	4798      	blx	r3
   177b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177bc:	3301      	adds	r3, #1
   177be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   177c2:	2101      	movs	r1, #1
   177c4:	2300      	movs	r3, #0
   177c6:	e7e3      	b.n	17790 <d_print_comp_inner+0xa64>
   177c8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   177cc:	792d      	ldrb	r5, [r5, #4]
   177ce:	29ff      	cmp	r1, #255	; 0xff
   177d0:	f001 82ab 	beq.w	18d2a <d_print_comp_inner+0x1ffe>
   177d4:	1c4b      	adds	r3, r1, #1
   177d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   177da:	5465      	strb	r5, [r4, r1]
   177dc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   177e0:	f7ff bb72 	b.w	16ec8 <d_print_comp_inner+0x19c>
   177e4:	686a      	ldr	r2, [r5, #4]
   177e6:	f002 f845 	bl	19874 <d_print_comp>
   177ea:	68aa      	ldr	r2, [r5, #8]
   177ec:	4641      	mov	r1, r8
   177ee:	4620      	mov	r0, r4
   177f0:	f002 f840 	bl	19874 <d_print_comp>
   177f4:	f7ff bb68 	b.w	16ec8 <d_print_comp_inner+0x19c>
   177f8:	4e34      	ldr	r6, [pc, #208]	; (178cc <d_print_comp_inner+0xba0>)
   177fa:	686a      	ldr	r2, [r5, #4]
   177fc:	f002 f83a 	bl	19874 <d_print_comp>
   17800:	f106 0a08 	add.w	sl, r6, #8
   17804:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17808:	f04f 0900 	mov.w	r9, #0
   1780c:	e009      	b.n	17822 <d_print_comp_inner+0xaf6>
   1780e:	460b      	mov	r3, r1
   17810:	3101      	adds	r1, #1
   17812:	4556      	cmp	r6, sl
   17814:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17818:	54e7      	strb	r7, [r4, r3]
   1781a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1781e:	f000 8508 	beq.w	18232 <d_print_comp_inner+0x1506>
   17822:	29ff      	cmp	r1, #255	; 0xff
   17824:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17828:	d1f1      	bne.n	1780e <d_print_comp_inner+0xae2>
   1782a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1782e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17832:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17836:	4620      	mov	r0, r4
   17838:	4798      	blx	r3
   1783a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1783e:	3301      	adds	r3, #1
   17840:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17844:	2101      	movs	r1, #1
   17846:	2300      	movs	r3, #0
   17848:	e7e3      	b.n	17812 <d_print_comp_inner+0xae6>
   1784a:	686a      	ldr	r2, [r5, #4]
   1784c:	b10a      	cbz	r2, 17852 <d_print_comp_inner+0xb26>
   1784e:	f002 f811 	bl	19874 <d_print_comp>
   17852:	68ab      	ldr	r3, [r5, #8]
   17854:	2b00      	cmp	r3, #0
   17856:	f43f ab37 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   1785a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   1785e:	2efd      	cmp	r6, #253	; 0xfd
   17860:	f201 81bc 	bhi.w	18bdc <d_print_comp_inner+0x1eb0>
   17864:	4f1a      	ldr	r7, [pc, #104]	; (178d0 <d_print_comp_inner+0xba4>)
   17866:	f04f 0a00 	mov.w	sl, #0
   1786a:	f107 0b02 	add.w	fp, r7, #2
   1786e:	4631      	mov	r1, r6
   17870:	e009      	b.n	17886 <d_print_comp_inner+0xb5a>
   17872:	460b      	mov	r3, r1
   17874:	3101      	adds	r1, #1
   17876:	455f      	cmp	r7, fp
   17878:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1787c:	54e6      	strb	r6, [r4, r3]
   1787e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17882:	f000 86c1 	beq.w	18608 <d_print_comp_inner+0x18dc>
   17886:	29ff      	cmp	r1, #255	; 0xff
   17888:	f817 6b01 	ldrb.w	r6, [r7], #1
   1788c:	d1f1      	bne.n	17872 <d_print_comp_inner+0xb46>
   1788e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17892:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17896:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1789a:	4620      	mov	r0, r4
   1789c:	4798      	blx	r3
   1789e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   178a2:	3301      	adds	r3, #1
   178a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178a8:	2101      	movs	r1, #1
   178aa:	2300      	movs	r3, #0
   178ac:	e7e3      	b.n	17876 <d_print_comp_inner+0xb4a>
   178ae:	4e09      	ldr	r6, [pc, #36]	; (178d4 <d_print_comp_inner+0xba8>)
   178b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178b4:	f106 0a09 	add.w	sl, r6, #9
   178b8:	f04f 0900 	mov.w	r9, #0
   178bc:	e016      	b.n	178ec <d_print_comp_inner+0xbc0>
   178be:	bf00      	nop
   178c0:	0002448c 	.word	0x0002448c
   178c4:	00024698 	.word	0x00024698
   178c8:	00024684 	.word	0x00024684
   178cc:	000246ff 	.word	0x000246ff
   178d0:	00024620 	.word	0x00024620
   178d4:	0002462f 	.word	0x0002462f
   178d8:	460b      	mov	r3, r1
   178da:	3101      	adds	r1, #1
   178dc:	4556      	cmp	r6, sl
   178de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   178e2:	54e7      	strb	r7, [r4, r3]
   178e4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   178e8:	f000 8594 	beq.w	18414 <d_print_comp_inner+0x16e8>
   178ec:	29ff      	cmp	r1, #255	; 0xff
   178ee:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   178f2:	d1f1      	bne.n	178d8 <d_print_comp_inner+0xbac>
   178f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   178fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17900:	4620      	mov	r0, r4
   17902:	4798      	blx	r3
   17904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17908:	3301      	adds	r3, #1
   1790a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1790e:	2101      	movs	r1, #1
   17910:	2300      	movs	r3, #0
   17912:	e7e3      	b.n	178dc <d_print_comp_inner+0xbb0>
   17914:	4ed1      	ldr	r6, [pc, #836]	; (17c5c <d_print_comp_inner+0xf30>)
   17916:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1791a:	f106 0a09 	add.w	sl, r6, #9
   1791e:	f04f 0900 	mov.w	r9, #0
   17922:	e009      	b.n	17938 <d_print_comp_inner+0xc0c>
   17924:	460b      	mov	r3, r1
   17926:	3101      	adds	r1, #1
   17928:	4556      	cmp	r6, sl
   1792a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1792e:	54e7      	strb	r7, [r4, r3]
   17930:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17934:	f000 8597 	beq.w	18466 <d_print_comp_inner+0x173a>
   17938:	29ff      	cmp	r1, #255	; 0xff
   1793a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1793e:	d1f1      	bne.n	17924 <d_print_comp_inner+0xbf8>
   17940:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17944:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17948:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1794c:	4620      	mov	r0, r4
   1794e:	4798      	blx	r3
   17950:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17954:	3301      	adds	r3, #1
   17956:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1795a:	2101      	movs	r1, #1
   1795c:	2300      	movs	r3, #0
   1795e:	e7e3      	b.n	17928 <d_print_comp_inner+0xbfc>
   17960:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17964:	4dbe      	ldr	r5, [pc, #760]	; (17c60 <d_print_comp_inner+0xf34>)
   17966:	f8da 7008 	ldr.w	r7, [sl, #8]
   1796a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1796e:	f105 0808 	add.w	r8, r5, #8
   17972:	f04f 0900 	mov.w	r9, #0
   17976:	e009      	b.n	1798c <d_print_comp_inner+0xc60>
   17978:	460b      	mov	r3, r1
   1797a:	3101      	adds	r1, #1
   1797c:	45a8      	cmp	r8, r5
   1797e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17982:	54e6      	strb	r6, [r4, r3]
   17984:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17988:	f000 8506 	beq.w	18398 <d_print_comp_inner+0x166c>
   1798c:	29ff      	cmp	r1, #255	; 0xff
   1798e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   17992:	d1f1      	bne.n	17978 <d_print_comp_inner+0xc4c>
   17994:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17998:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1799c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   179a0:	4620      	mov	r0, r4
   179a2:	4798      	blx	r3
   179a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179a8:	3301      	adds	r3, #1
   179aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   179ae:	2101      	movs	r1, #1
   179b0:	2300      	movs	r3, #0
   179b2:	e7e3      	b.n	1797c <d_print_comp_inner+0xc50>
   179b4:	686a      	ldr	r2, [r5, #4]
   179b6:	68ae      	ldr	r6, [r5, #8]
   179b8:	b10a      	cbz	r2, 179be <d_print_comp_inner+0xc92>
   179ba:	f001 ff5b 	bl	19874 <d_print_comp>
   179be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   179c2:	2bff      	cmp	r3, #255	; 0xff
   179c4:	f001 82b1 	beq.w	18f2a <d_print_comp_inner+0x21fe>
   179c8:	1c5a      	adds	r2, r3, #1
   179ca:	257b      	movs	r5, #123	; 0x7b
   179cc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   179d0:	4641      	mov	r1, r8
   179d2:	54e5      	strb	r5, [r4, r3]
   179d4:	4632      	mov	r2, r6
   179d6:	4620      	mov	r0, r4
   179d8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   179dc:	f001 ff4a 	bl	19874 <d_print_comp>
   179e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   179e4:	29ff      	cmp	r1, #255	; 0xff
   179e6:	f001 81e7 	beq.w	18db8 <d_print_comp_inner+0x208c>
   179ea:	1c4a      	adds	r2, r1, #1
   179ec:	237d      	movs	r3, #125	; 0x7d
   179ee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   179f2:	5463      	strb	r3, [r4, r1]
   179f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   179f8:	f7ff ba66 	b.w	16ec8 <d_print_comp_inner+0x19c>
   179fc:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17a00:	68ae      	ldr	r6, [r5, #8]
   17a02:	f899 3000 	ldrb.w	r3, [r9]
   17a06:	2b31      	cmp	r3, #49	; 0x31
   17a08:	f000 87cb 	beq.w	189a2 <d_print_comp_inner+0x1c76>
   17a0c:	2b33      	cmp	r3, #51	; 0x33
   17a0e:	f041 86d3 	bne.w	197b8 <d_print_comp_inner+0x2a8c>
   17a12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a16:	29ff      	cmp	r1, #255	; 0xff
   17a18:	f001 84c3 	beq.w	193a2 <d_print_comp_inner+0x2676>
   17a1c:	1c4a      	adds	r2, r1, #1
   17a1e:	2328      	movs	r3, #40	; 0x28
   17a20:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17a24:	5463      	strb	r3, [r4, r1]
   17a26:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17a2a:	a904      	add	r1, sp, #16
   17a2c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17a30:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17a34:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17a38:	4620      	mov	r0, r4
   17a3a:	4641      	mov	r1, r8
   17a3c:	9305      	str	r3, [sp, #20]
   17a3e:	9204      	str	r2, [sp, #16]
   17a40:	f7ff f974 	bl	16d2c <d_print_comp_inner>
   17a44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17a48:	9b05      	ldr	r3, [sp, #20]
   17a4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   17a4e:	29ff      	cmp	r1, #255	; 0xff
   17a50:	f001 8496 	beq.w	19380 <d_print_comp_inner+0x2654>
   17a54:	2329      	movs	r3, #41	; 0x29
   17a56:	1c4a      	adds	r2, r1, #1
   17a58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17a5c:	5463      	strb	r3, [r4, r1]
   17a5e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17a62:	4632      	mov	r2, r6
   17a64:	4641      	mov	r1, r8
   17a66:	4620      	mov	r0, r4
   17a68:	f002 fd2a 	bl	1a4c0 <d_print_subexpr>
   17a6c:	f7ff ba2c 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17a70:	686a      	ldr	r2, [r5, #4]
   17a72:	f002 fce7 	bl	1a444 <d_print_expr_op>
   17a76:	f7ff ba27 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17a7a:	f011 0f20 	tst.w	r1, #32
   17a7e:	f040 8753 	bne.w	18928 <d_print_comp_inner+0x1bfc>
   17a82:	686a      	ldr	r2, [r5, #4]
   17a84:	b11a      	cbz	r2, 17a8e <d_print_comp_inner+0xd62>
   17a86:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17a8a:	f001 81d0 	beq.w	18e2e <d_print_comp_inner+0x2102>
   17a8e:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   17a92:	f105 0208 	add.w	r2, r5, #8
   17a96:	4641      	mov	r1, r8
   17a98:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17a9c:	4620      	mov	r0, r4
   17a9e:	f002 fbdd 	bl	1a25c <d_print_function_type.isra.11>
   17aa2:	f7ff ba11 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17aa6:	f011 0804 	ands.w	r8, r1, #4
   17aaa:	686b      	ldr	r3, [r5, #4]
   17aac:	f040 8612 	bne.w	186d4 <d_print_comp_inner+0x19a8>
   17ab0:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17ab4:	2f00      	cmp	r7, #0
   17ab6:	f43f aa07 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   17aba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17abe:	442f      	add	r7, r5
   17ac0:	e009      	b.n	17ad6 <d_print_comp_inner+0xdaa>
   17ac2:	460b      	mov	r3, r1
   17ac4:	3101      	adds	r1, #1
   17ac6:	42bd      	cmp	r5, r7
   17ac8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17acc:	54e6      	strb	r6, [r4, r3]
   17ace:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17ad2:	f43f a9f9 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   17ad6:	29ff      	cmp	r1, #255	; 0xff
   17ad8:	f815 6b01 	ldrb.w	r6, [r5], #1
   17adc:	d1f1      	bne.n	17ac2 <d_print_comp_inner+0xd96>
   17ade:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ae2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17ae6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17aea:	4620      	mov	r0, r4
   17aec:	4798      	blx	r3
   17aee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17af2:	3301      	adds	r3, #1
   17af4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17af8:	2101      	movs	r1, #1
   17afa:	2300      	movs	r3, #0
   17afc:	e7e3      	b.n	17ac6 <d_print_comp_inner+0xd9a>
   17afe:	6869      	ldr	r1, [r5, #4]
   17b00:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17b04:	780b      	ldrb	r3, [r1, #0]
   17b06:	2f00      	cmp	r7, #0
   17b08:	f040 85e1 	bne.w	186ce <d_print_comp_inner+0x19a2>
   17b0c:	2b05      	cmp	r3, #5
   17b0e:	f001 81c7 	beq.w	18ea0 <d_print_comp_inner+0x2174>
   17b12:	2b23      	cmp	r3, #35	; 0x23
   17b14:	f000 8689 	beq.w	1882a <d_print_comp_inner+0x1afe>
   17b18:	782a      	ldrb	r2, [r5, #0]
   17b1a:	429a      	cmp	r2, r3
   17b1c:	f000 8685 	beq.w	1882a <d_print_comp_inner+0x1afe>
   17b20:	2b24      	cmp	r3, #36	; 0x24
   17b22:	f47f a9eb 	bne.w	16efc <d_print_comp_inner+0x1d0>
   17b26:	a814      	add	r0, sp, #80	; 0x50
   17b28:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17b2c:	684a      	ldr	r2, [r1, #4]
   17b2e:	f840 3d40 	str.w	r3, [r0, #-64]!
   17b32:	2100      	movs	r1, #0
   17b34:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17b38:	9505      	str	r5, [sp, #20]
   17b3a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17b3e:	9106      	str	r1, [sp, #24]
   17b40:	9307      	str	r3, [sp, #28]
   17b42:	2a00      	cmp	r2, #0
   17b44:	f47f a9e8 	bne.w	16f18 <d_print_comp_inner+0x1ec>
   17b48:	f7ff b9e5 	b.w	16f16 <d_print_comp_inner+0x1ea>
   17b4c:	686a      	ldr	r2, [r5, #4]
   17b4e:	f001 fe91 	bl	19874 <d_print_comp>
   17b52:	f7ff b9b9 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17b56:	ab14      	add	r3, sp, #80	; 0x50
   17b58:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17b5c:	f843 2d40 	str.w	r2, [r3, #-64]!
   17b60:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17b64:	68aa      	ldr	r2, [r5, #8]
   17b66:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17b6a:	9307      	str	r3, [sp, #28]
   17b6c:	2600      	movs	r6, #0
   17b6e:	9505      	str	r5, [sp, #20]
   17b70:	9606      	str	r6, [sp, #24]
   17b72:	f001 fe7f 	bl	19874 <d_print_comp>
   17b76:	9b06      	ldr	r3, [sp, #24]
   17b78:	b923      	cbnz	r3, 17b84 <d_print_comp_inner+0xe58>
   17b7a:	462a      	mov	r2, r5
   17b7c:	4641      	mov	r1, r8
   17b7e:	4620      	mov	r0, r4
   17b80:	f001 fe88 	bl	19894 <d_print_mod>
   17b84:	9b04      	ldr	r3, [sp, #16]
   17b86:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17b8a:	f7ff b99d 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17b8e:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17b92:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17b96:	f849 bd40 	str.w	fp, [r9, #-64]!
   17b9a:	2200      	movs	r2, #0
   17b9c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17ba0:	f8cd b000 	str.w	fp, [sp]
   17ba4:	4659      	mov	r1, fp
   17ba6:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17baa:	9505      	str	r5, [sp, #20]
   17bac:	9206      	str	r2, [sp, #24]
   17bae:	9307      	str	r3, [sp, #28]
   17bb0:	2900      	cmp	r1, #0
   17bb2:	f001 83a0 	beq.w	192f6 <d_print_comp_inner+0x25ca>
   17bb6:	684b      	ldr	r3, [r1, #4]
   17bb8:	781b      	ldrb	r3, [r3, #0]
   17bba:	3b19      	subs	r3, #25
   17bbc:	2b02      	cmp	r3, #2
   17bbe:	f201 839a 	bhi.w	192f6 <d_print_comp_inner+0x25ca>
   17bc2:	46ac      	mov	ip, r5
   17bc4:	2701      	movs	r7, #1
   17bc6:	460e      	mov	r6, r1
   17bc8:	464d      	mov	r5, r9
   17bca:	e004      	b.n	17bd6 <d_print_comp_inner+0xeaa>
   17bcc:	6873      	ldr	r3, [r6, #4]
   17bce:	781b      	ldrb	r3, [r3, #0]
   17bd0:	3b19      	subs	r3, #25
   17bd2:	2b02      	cmp	r3, #2
   17bd4:	d81b      	bhi.n	17c0e <d_print_comp_inner+0xee2>
   17bd6:	68b3      	ldr	r3, [r6, #8]
   17bd8:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17bdc:	aa14      	add	r2, sp, #80	; 0x50
   17bde:	eb02 0b0e 	add.w	fp, r2, lr
   17be2:	b98b      	cbnz	r3, 17c08 <d_print_comp_inner+0xedc>
   17be4:	2f03      	cmp	r7, #3
   17be6:	f201 80f9 	bhi.w	18ddc <d_print_comp_inner+0x20b0>
   17bea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17bee:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17bf2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17bf6:	f84b 5c40 	str.w	r5, [fp, #-64]
   17bfa:	2301      	movs	r3, #1
   17bfc:	eb09 050e 	add.w	r5, r9, lr
   17c00:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17c04:	3701      	adds	r7, #1
   17c06:	60b3      	str	r3, [r6, #8]
   17c08:	6836      	ldr	r6, [r6, #0]
   17c0a:	2e00      	cmp	r6, #0
   17c0c:	d1de      	bne.n	17bcc <d_print_comp_inner+0xea0>
   17c0e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17c12:	4641      	mov	r1, r8
   17c14:	4620      	mov	r0, r4
   17c16:	4665      	mov	r5, ip
   17c18:	f001 fe2c 	bl	19874 <d_print_comp>
   17c1c:	9b06      	ldr	r3, [sp, #24]
   17c1e:	9a00      	ldr	r2, [sp, #0]
   17c20:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17c24:	2b00      	cmp	r3, #0
   17c26:	f47f a94f 	bne.w	16ec8 <d_print_comp_inner+0x19c>
   17c2a:	2f01      	cmp	r7, #1
   17c2c:	d00c      	beq.n	17c48 <d_print_comp_inner+0xf1c>
   17c2e:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17c32:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17c36:	3f01      	subs	r7, #1
   17c38:	4641      	mov	r1, r8
   17c3a:	4620      	mov	r0, r4
   17c3c:	f001 fe2a 	bl	19894 <d_print_mod>
   17c40:	2f01      	cmp	r7, #1
   17c42:	f1a9 0910 	sub.w	r9, r9, #16
   17c46:	d1f4      	bne.n	17c32 <d_print_comp_inner+0xf06>
   17c48:	1d2a      	adds	r2, r5, #4
   17c4a:	4641      	mov	r1, r8
   17c4c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17c50:	4620      	mov	r0, r4
   17c52:	f002 fa27 	bl	1a0a4 <d_print_array_type.isra.10>
   17c56:	f7ff b937 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17c5a:	bf00      	nop
   17c5c:	0002462f 	.word	0x0002462f
   17c60:	00024623 	.word	0x00024623
   17c64:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17c68:	2b00      	cmp	r3, #0
   17c6a:	f040 8674 	bne.w	18956 <d_print_comp_inner+0x1c2a>
   17c6e:	686a      	ldr	r2, [r5, #4]
   17c70:	4bd5      	ldr	r3, [pc, #852]	; (17fc8 <d_print_comp_inner+0x129c>)
   17c72:	6851      	ldr	r1, [r2, #4]
   17c74:	4299      	cmp	r1, r3
   17c76:	f000 866a 	beq.w	1894e <d_print_comp_inner+0x1c22>
   17c7a:	4641      	mov	r1, r8
   17c7c:	4620      	mov	r0, r4
   17c7e:	f001 fdf9 	bl	19874 <d_print_comp>
   17c82:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17c86:	2bff      	cmp	r3, #255	; 0xff
   17c88:	f001 82b2 	beq.w	191f0 <d_print_comp_inner+0x24c4>
   17c8c:	1c59      	adds	r1, r3, #1
   17c8e:	2220      	movs	r2, #32
   17c90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c94:	54e2      	strb	r2, [r4, r3]
   17c96:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17c9a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	f000 8595 	beq.w	187ce <d_print_comp_inner+0x1aa2>
   17ca4:	4dc9      	ldr	r5, [pc, #804]	; (17fcc <d_print_comp_inner+0x12a0>)
   17ca6:	f04f 0800 	mov.w	r8, #0
   17caa:	1daf      	adds	r7, r5, #6
   17cac:	e009      	b.n	17cc2 <d_print_comp_inner+0xf96>
   17cae:	460b      	mov	r3, r1
   17cb0:	3101      	adds	r1, #1
   17cb2:	42bd      	cmp	r5, r7
   17cb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cb8:	54e6      	strb	r6, [r4, r3]
   17cba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17cbe:	f43f a903 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   17cc2:	29ff      	cmp	r1, #255	; 0xff
   17cc4:	f815 6b01 	ldrb.w	r6, [r5], #1
   17cc8:	d1f1      	bne.n	17cae <d_print_comp_inner+0xf82>
   17cca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17cce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17cd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17cd6:	4620      	mov	r0, r4
   17cd8:	4798      	blx	r3
   17cda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17cde:	3301      	adds	r3, #1
   17ce0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ce4:	2101      	movs	r1, #1
   17ce6:	2300      	movs	r3, #0
   17ce8:	e7e3      	b.n	17cb2 <d_print_comp_inner+0xf86>
   17cea:	4eb9      	ldr	r6, [pc, #740]	; (17fd0 <d_print_comp_inner+0x12a4>)
   17cec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17cf0:	f106 090e 	add.w	r9, r6, #14
   17cf4:	f04f 0800 	mov.w	r8, #0
   17cf8:	e009      	b.n	17d0e <d_print_comp_inner+0xfe2>
   17cfa:	460b      	mov	r3, r1
   17cfc:	3101      	adds	r1, #1
   17cfe:	45b1      	cmp	r9, r6
   17d00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d04:	54e7      	strb	r7, [r4, r3]
   17d06:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d0a:	f000 83b3 	beq.w	18474 <d_print_comp_inner+0x1748>
   17d0e:	29ff      	cmp	r1, #255	; 0xff
   17d10:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d14:	d1f1      	bne.n	17cfa <d_print_comp_inner+0xfce>
   17d16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17d1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d22:	4620      	mov	r0, r4
   17d24:	4798      	blx	r3
   17d26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d2a:	3301      	adds	r3, #1
   17d2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d30:	2101      	movs	r1, #1
   17d32:	2300      	movs	r3, #0
   17d34:	e7e3      	b.n	17cfe <d_print_comp_inner+0xfd2>
   17d36:	4ea7      	ldr	r6, [pc, #668]	; (17fd4 <d_print_comp_inner+0x12a8>)
   17d38:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d3c:	f106 0a1a 	add.w	sl, r6, #26
   17d40:	f04f 0900 	mov.w	r9, #0
   17d44:	e009      	b.n	17d5a <d_print_comp_inner+0x102e>
   17d46:	460b      	mov	r3, r1
   17d48:	3101      	adds	r1, #1
   17d4a:	4556      	cmp	r6, sl
   17d4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d50:	54e7      	strb	r7, [r4, r3]
   17d52:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d56:	f000 82ef 	beq.w	18338 <d_print_comp_inner+0x160c>
   17d5a:	29ff      	cmp	r1, #255	; 0xff
   17d5c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d60:	d1f1      	bne.n	17d46 <d_print_comp_inner+0x101a>
   17d62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d66:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17d6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d6e:	4620      	mov	r0, r4
   17d70:	4798      	blx	r3
   17d72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d76:	3301      	adds	r3, #1
   17d78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d7c:	2101      	movs	r1, #1
   17d7e:	2300      	movs	r3, #0
   17d80:	e7e3      	b.n	17d4a <d_print_comp_inner+0x101e>
   17d82:	6869      	ldr	r1, [r5, #4]
   17d84:	f7fc ff2a 	bl	14bdc <d_find_pack>
   17d88:	f04f 0900 	mov.w	r9, #0
   17d8c:	2800      	cmp	r0, #0
   17d8e:	f001 835d 	beq.w	1944c <d_print_comp_inner+0x2720>
   17d92:	7803      	ldrb	r3, [r0, #0]
   17d94:	2b2f      	cmp	r3, #47	; 0x2f
   17d96:	f040 8457 	bne.w	18648 <d_print_comp_inner+0x191c>
   17d9a:	6843      	ldr	r3, [r0, #4]
   17d9c:	2b00      	cmp	r3, #0
   17d9e:	f000 8453 	beq.w	18648 <d_print_comp_inner+0x191c>
   17da2:	6880      	ldr	r0, [r0, #8]
   17da4:	f109 0901 	add.w	r9, r9, #1
   17da8:	2800      	cmp	r0, #0
   17daa:	d1f2      	bne.n	17d92 <d_print_comp_inner+0x1066>
   17dac:	686b      	ldr	r3, [r5, #4]
   17dae:	9300      	str	r3, [sp, #0]
   17db0:	f109 33ff 	add.w	r3, r9, #4294967295
   17db4:	9301      	str	r3, [sp, #4]
   17db6:	f04f 0a00 	mov.w	sl, #0
   17dba:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17dbe:	9a00      	ldr	r2, [sp, #0]
   17dc0:	4641      	mov	r1, r8
   17dc2:	4620      	mov	r0, r4
   17dc4:	f001 fd56 	bl	19874 <d_print_comp>
   17dc8:	9b01      	ldr	r3, [sp, #4]
   17dca:	42bb      	cmp	r3, r7
   17dcc:	f340 81ab 	ble.w	18126 <d_print_comp_inner+0x13fa>
   17dd0:	4d81      	ldr	r5, [pc, #516]	; (17fd8 <d_print_comp_inner+0x12ac>)
   17dd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17dd6:	f105 0b02 	add.w	fp, r5, #2
   17dda:	e009      	b.n	17df0 <d_print_comp_inner+0x10c4>
   17ddc:	460b      	mov	r3, r1
   17dde:	3101      	adds	r1, #1
   17de0:	45ab      	cmp	fp, r5
   17de2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17de6:	54e6      	strb	r6, [r4, r3]
   17de8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17dec:	f000 819b 	beq.w	18126 <d_print_comp_inner+0x13fa>
   17df0:	29ff      	cmp	r1, #255	; 0xff
   17df2:	f815 6b01 	ldrb.w	r6, [r5], #1
   17df6:	d1f1      	bne.n	17ddc <d_print_comp_inner+0x10b0>
   17df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17dfc:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17e00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e04:	4620      	mov	r0, r4
   17e06:	4798      	blx	r3
   17e08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e0c:	3301      	adds	r3, #1
   17e0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e12:	2101      	movs	r1, #1
   17e14:	2300      	movs	r3, #0
   17e16:	e7e3      	b.n	17de0 <d_print_comp_inner+0x10b4>
   17e18:	4e70      	ldr	r6, [pc, #448]	; (17fdc <d_print_comp_inner+0x12b0>)
   17e1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e1e:	f106 0a16 	add.w	sl, r6, #22
   17e22:	f04f 0900 	mov.w	r9, #0
   17e26:	e009      	b.n	17e3c <d_print_comp_inner+0x1110>
   17e28:	460b      	mov	r3, r1
   17e2a:	3101      	adds	r1, #1
   17e2c:	45b2      	cmp	sl, r6
   17e2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e32:	54e7      	strb	r7, [r4, r3]
   17e34:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e38:	f000 835f 	beq.w	184fa <d_print_comp_inner+0x17ce>
   17e3c:	29ff      	cmp	r1, #255	; 0xff
   17e3e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e42:	d1f1      	bne.n	17e28 <d_print_comp_inner+0x10fc>
   17e44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e50:	4620      	mov	r0, r4
   17e52:	4798      	blx	r3
   17e54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e58:	3301      	adds	r3, #1
   17e5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e5e:	2101      	movs	r1, #1
   17e60:	2300      	movs	r3, #0
   17e62:	e7e3      	b.n	17e2c <d_print_comp_inner+0x1100>
   17e64:	4e5e      	ldr	r6, [pc, #376]	; (17fe0 <d_print_comp_inner+0x12b4>)
   17e66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e6a:	f106 0a0e 	add.w	sl, r6, #14
   17e6e:	f04f 0900 	mov.w	r9, #0
   17e72:	e009      	b.n	17e88 <d_print_comp_inner+0x115c>
   17e74:	460b      	mov	r3, r1
   17e76:	3101      	adds	r1, #1
   17e78:	4556      	cmp	r6, sl
   17e7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e7e:	54e7      	strb	r7, [r4, r3]
   17e80:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e84:	f000 83a0 	beq.w	185c8 <d_print_comp_inner+0x189c>
   17e88:	29ff      	cmp	r1, #255	; 0xff
   17e8a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e8e:	d1f1      	bne.n	17e74 <d_print_comp_inner+0x1148>
   17e90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e94:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e9c:	4620      	mov	r0, r4
   17e9e:	4798      	blx	r3
   17ea0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ea4:	3301      	adds	r3, #1
   17ea6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17eaa:	2101      	movs	r1, #1
   17eac:	2300      	movs	r3, #0
   17eae:	e7e3      	b.n	17e78 <d_print_comp_inner+0x114c>
   17eb0:	686a      	ldr	r2, [r5, #4]
   17eb2:	7811      	ldrb	r1, [r2, #0]
   17eb4:	2927      	cmp	r1, #39	; 0x27
   17eb6:	f000 8615 	beq.w	18ae4 <d_print_comp_inner+0x1db8>
   17eba:	2600      	movs	r6, #0
   17ebc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17ec0:	29ff      	cmp	r1, #255	; 0xff
   17ec2:	f001 80c5 	beq.w	19050 <d_print_comp_inner+0x2324>
   17ec6:	2328      	movs	r3, #40	; 0x28
   17ec8:	1c4a      	adds	r2, r1, #1
   17eca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17ece:	5463      	strb	r3, [r4, r1]
   17ed0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17ed4:	686a      	ldr	r2, [r5, #4]
   17ed6:	4641      	mov	r1, r8
   17ed8:	4620      	mov	r0, r4
   17eda:	f001 fccb 	bl	19874 <d_print_comp>
   17ede:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17ee2:	2bff      	cmp	r3, #255	; 0xff
   17ee4:	f001 8099 	beq.w	1901a <d_print_comp_inner+0x22ee>
   17ee8:	1c59      	adds	r1, r3, #1
   17eea:	2229      	movs	r2, #41	; 0x29
   17eec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ef0:	54e2      	strb	r2, [r4, r3]
   17ef2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ef6:	782b      	ldrb	r3, [r5, #0]
   17ef8:	2b3d      	cmp	r3, #61	; 0x3d
   17efa:	f000 86e6 	beq.w	18cca <d_print_comp_inner+0x1f9e>
   17efe:	2e08      	cmp	r6, #8
   17f00:	f000 867f 	beq.w	18c02 <d_print_comp_inner+0x1ed6>
   17f04:	68aa      	ldr	r2, [r5, #8]
   17f06:	4641      	mov	r1, r8
   17f08:	4620      	mov	r0, r4
   17f0a:	f001 fcb3 	bl	19874 <d_print_comp>
   17f0e:	f7fe bfdb 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17f12:	2301      	movs	r3, #1
   17f14:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17f18:	f7fe bfd6 	b.w	16ec8 <d_print_comp_inner+0x19c>
   17f1c:	686a      	ldr	r2, [r5, #4]
   17f1e:	4931      	ldr	r1, [pc, #196]	; (17fe4 <d_print_comp_inner+0x12b8>)
   17f20:	a804      	add	r0, sp, #16
   17f22:	f006 fd83 	bl	1ea2c <sprintf>
   17f26:	a804      	add	r0, sp, #16
   17f28:	f006 ff2a 	bl	1ed80 <strlen>
   17f2c:	2800      	cmp	r0, #0
   17f2e:	f43e afcb 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   17f32:	ad04      	add	r5, sp, #16
   17f34:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f38:	182f      	adds	r7, r5, r0
   17f3a:	f04f 0800 	mov.w	r8, #0
   17f3e:	e009      	b.n	17f54 <d_print_comp_inner+0x1228>
   17f40:	460b      	mov	r3, r1
   17f42:	3101      	adds	r1, #1
   17f44:	42bd      	cmp	r5, r7
   17f46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f4a:	54e6      	strb	r6, [r4, r3]
   17f4c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17f50:	f43e afba 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   17f54:	29ff      	cmp	r1, #255	; 0xff
   17f56:	f815 6b01 	ldrb.w	r6, [r5], #1
   17f5a:	d1f1      	bne.n	17f40 <d_print_comp_inner+0x1214>
   17f5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f60:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17f64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f68:	4620      	mov	r0, r4
   17f6a:	4798      	blx	r3
   17f6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f70:	3301      	adds	r3, #1
   17f72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f76:	2101      	movs	r1, #1
   17f78:	2300      	movs	r3, #0
   17f7a:	e7e3      	b.n	17f44 <d_print_comp_inner+0x1218>
   17f7c:	4e1a      	ldr	r6, [pc, #104]	; (17fe8 <d_print_comp_inner+0x12bc>)
   17f7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f82:	f106 0a1c 	add.w	sl, r6, #28
   17f86:	f04f 0900 	mov.w	r9, #0
   17f8a:	e009      	b.n	17fa0 <d_print_comp_inner+0x1274>
   17f8c:	460b      	mov	r3, r1
   17f8e:	3101      	adds	r1, #1
   17f90:	4556      	cmp	r6, sl
   17f92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f96:	54e7      	strb	r7, [r4, r3]
   17f98:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f9c:	f000 82fa 	beq.w	18594 <d_print_comp_inner+0x1868>
   17fa0:	29ff      	cmp	r1, #255	; 0xff
   17fa2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17fa6:	d1f1      	bne.n	17f8c <d_print_comp_inner+0x1260>
   17fa8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17fb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17fb4:	4620      	mov	r0, r4
   17fb6:	4798      	blx	r3
   17fb8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fbc:	3301      	adds	r3, #1
   17fbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17fc2:	2101      	movs	r1, #1
   17fc4:	2300      	movs	r3, #0
   17fc6:	e7e3      	b.n	17f90 <d_print_comp_inner+0x1264>
   17fc8:	00023dec 	.word	0x00023dec
   17fcc:	00024610 	.word	0x00024610
   17fd0:	000246ef 	.word	0x000246ef
   17fd4:	000245eb 	.word	0x000245eb
   17fd8:	00024620 	.word	0x00024620
   17fdc:	000245ef 	.word	0x000245ef
   17fe0:	00024673 	.word	0x00024673
   17fe4:	00024444 	.word	0x00024444
   17fe8:	000246bf 	.word	0x000246bf
   17fec:	68ab      	ldr	r3, [r5, #8]
   17fee:	781a      	ldrb	r2, [r3, #0]
   17ff0:	2a3a      	cmp	r2, #58	; 0x3a
   17ff2:	f47e af7d 	bne.w	16ef0 <d_print_comp_inner+0x1c4>
   17ff6:	689b      	ldr	r3, [r3, #8]
   17ff8:	781b      	ldrb	r3, [r3, #0]
   17ffa:	2b3b      	cmp	r3, #59	; 0x3b
   17ffc:	f47e af78 	bne.w	16ef0 <d_print_comp_inner+0x1c4>
   18000:	f105 0308 	add.w	r3, r5, #8
   18004:	686a      	ldr	r2, [r5, #4]
   18006:	f002 fabf 	bl	1a588 <d_maybe_print_fold_expression.isra.15>
   1800a:	4606      	mov	r6, r0
   1800c:	2800      	cmp	r0, #0
   1800e:	f47e af5b 	bne.w	16ec8 <d_print_comp_inner+0x19c>
   18012:	f8d5 a004 	ldr.w	sl, [r5, #4]
   18016:	68aa      	ldr	r2, [r5, #8]
   18018:	f8da 1004 	ldr.w	r1, [sl, #4]
   1801c:	6893      	ldr	r3, [r2, #8]
   1801e:	6808      	ldr	r0, [r1, #0]
   18020:	49d6      	ldr	r1, [pc, #856]	; (1837c <d_print_comp_inner+0x1650>)
   18022:	f8d2 9004 	ldr.w	r9, [r2, #4]
   18026:	685f      	ldr	r7, [r3, #4]
   18028:	689d      	ldr	r5, [r3, #8]
   1802a:	f006 fd2d 	bl	1ea88 <strcmp>
   1802e:	2800      	cmp	r0, #0
   18030:	f001 82e2 	beq.w	195f8 <d_print_comp_inner+0x28cc>
   18034:	2204      	movs	r2, #4
   18036:	49d2      	ldr	r1, [pc, #840]	; (18380 <d_print_comp_inner+0x1654>)
   18038:	4620      	mov	r0, r4
   1803a:	f7fc fba3 	bl	14784 <d_append_buffer>
   1803e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18042:	b183      	cbz	r3, 18066 <d_print_comp_inner+0x133a>
   18044:	4641      	mov	r1, r8
   18046:	464a      	mov	r2, r9
   18048:	4620      	mov	r0, r4
   1804a:	f002 fa39 	bl	1a4c0 <d_print_subexpr>
   1804e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18052:	29ff      	cmp	r1, #255	; 0xff
   18054:	f001 83ec 	beq.w	19830 <d_print_comp_inner+0x2b04>
   18058:	2320      	movs	r3, #32
   1805a:	1c4a      	adds	r2, r1, #1
   1805c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18060:	5463      	strb	r3, [r4, r1]
   18062:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18066:	463a      	mov	r2, r7
   18068:	4641      	mov	r1, r8
   1806a:	4620      	mov	r0, r4
   1806c:	f001 fc02 	bl	19874 <d_print_comp>
   18070:	2d00      	cmp	r5, #0
   18072:	f43e af29 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   18076:	462a      	mov	r2, r5
   18078:	4641      	mov	r1, r8
   1807a:	4620      	mov	r0, r4
   1807c:	f002 fa20 	bl	1a4c0 <d_print_subexpr>
   18080:	f7fe bf22 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18084:	4ebf      	ldr	r6, [pc, #764]	; (18384 <d_print_comp_inner+0x1658>)
   18086:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1808a:	f106 0a08 	add.w	sl, r6, #8
   1808e:	f04f 0900 	mov.w	r9, #0
   18092:	e009      	b.n	180a8 <d_print_comp_inner+0x137c>
   18094:	460b      	mov	r3, r1
   18096:	3101      	adds	r1, #1
   18098:	4556      	cmp	r6, sl
   1809a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1809e:	54e7      	strb	r7, [r4, r3]
   180a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180a4:	f000 80d8 	beq.w	18258 <d_print_comp_inner+0x152c>
   180a8:	29ff      	cmp	r1, #255	; 0xff
   180aa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   180ae:	d1f1      	bne.n	18094 <d_print_comp_inner+0x1368>
   180b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   180b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180bc:	4620      	mov	r0, r4
   180be:	4798      	blx	r3
   180c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180c4:	3301      	adds	r3, #1
   180c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180ca:	2101      	movs	r1, #1
   180cc:	2300      	movs	r3, #0
   180ce:	e7e3      	b.n	18098 <d_print_comp_inner+0x136c>
   180d0:	4ead      	ldr	r6, [pc, #692]	; (18388 <d_print_comp_inner+0x165c>)
   180d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   180d6:	f106 0a1d 	add.w	sl, r6, #29
   180da:	f04f 0900 	mov.w	r9, #0
   180de:	e009      	b.n	180f4 <d_print_comp_inner+0x13c8>
   180e0:	460b      	mov	r3, r1
   180e2:	3101      	adds	r1, #1
   180e4:	45b2      	cmp	sl, r6
   180e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180ea:	54e7      	strb	r7, [r4, r3]
   180ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180f0:	f000 81fc 	beq.w	184ec <d_print_comp_inner+0x17c0>
   180f4:	29ff      	cmp	r1, #255	; 0xff
   180f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   180fa:	d1f1      	bne.n	180e0 <d_print_comp_inner+0x13b4>
   180fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18100:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18104:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18108:	4620      	mov	r0, r4
   1810a:	4798      	blx	r3
   1810c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18110:	3301      	adds	r3, #1
   18112:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18116:	2101      	movs	r1, #1
   18118:	2300      	movs	r3, #0
   1811a:	e7e3      	b.n	180e4 <d_print_comp_inner+0x13b8>
   1811c:	2301      	movs	r3, #1
   1811e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   18122:	f7fe bed1 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18126:	3701      	adds	r7, #1
   18128:	454f      	cmp	r7, r9
   1812a:	f47f ae46 	bne.w	17dba <d_print_comp_inner+0x108e>
   1812e:	f7fe becb 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18132:	6876      	ldr	r6, [r6, #4]
   18134:	2e00      	cmp	r6, #0
   18136:	f001 806e 	beq.w	19216 <d_print_comp_inner+0x24ea>
   1813a:	2f04      	cmp	r7, #4
   1813c:	f103 0310 	add.w	r3, r3, #16
   18140:	f47f a9bd 	bne.w	174be <d_print_comp_inner+0x792>
   18144:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18148:	2301      	movs	r3, #1
   1814a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1814e:	f7fe bebb 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18152:	4e8e      	ldr	r6, [pc, #568]	; (1838c <d_print_comp_inner+0x1660>)
   18154:	686a      	ldr	r2, [r5, #4]
   18156:	4641      	mov	r1, r8
   18158:	4620      	mov	r0, r4
   1815a:	f001 fb8b 	bl	19874 <d_print_comp>
   1815e:	f106 0a04 	add.w	sl, r6, #4
   18162:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18166:	f04f 0900 	mov.w	r9, #0
   1816a:	e008      	b.n	1817e <d_print_comp_inner+0x1452>
   1816c:	460b      	mov	r3, r1
   1816e:	3101      	adds	r1, #1
   18170:	45b2      	cmp	sl, r6
   18172:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18176:	54e7      	strb	r7, [r4, r3]
   18178:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1817c:	d013      	beq.n	181a6 <d_print_comp_inner+0x147a>
   1817e:	29ff      	cmp	r1, #255	; 0xff
   18180:	f816 7b01 	ldrb.w	r7, [r6], #1
   18184:	d1f2      	bne.n	1816c <d_print_comp_inner+0x1440>
   18186:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1818a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1818e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18192:	4620      	mov	r0, r4
   18194:	4798      	blx	r3
   18196:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1819a:	3301      	adds	r3, #1
   1819c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   181a0:	2101      	movs	r1, #1
   181a2:	2300      	movs	r3, #0
   181a4:	e7e4      	b.n	18170 <d_print_comp_inner+0x1444>
   181a6:	68aa      	ldr	r2, [r5, #8]
   181a8:	4641      	mov	r1, r8
   181aa:	4620      	mov	r0, r4
   181ac:	f001 fb62 	bl	19874 <d_print_comp>
   181b0:	f7fe be8a 	b.w	16ec8 <d_print_comp_inner+0x19c>
   181b4:	686a      	ldr	r2, [r5, #4]
   181b6:	4641      	mov	r1, r8
   181b8:	4620      	mov	r0, r4
   181ba:	f001 fb5b 	bl	19874 <d_print_comp>
   181be:	f7fe be83 	b.w	16ec8 <d_print_comp_inner+0x19c>
   181c2:	686a      	ldr	r2, [r5, #4]
   181c4:	4641      	mov	r1, r8
   181c6:	4620      	mov	r0, r4
   181c8:	f001 fb54 	bl	19874 <d_print_comp>
   181cc:	f7fe be7c 	b.w	16ec8 <d_print_comp_inner+0x19c>
   181d0:	686a      	ldr	r2, [r5, #4]
   181d2:	4641      	mov	r1, r8
   181d4:	4620      	mov	r0, r4
   181d6:	f001 fb4d 	bl	19874 <d_print_comp>
   181da:	f7fe be75 	b.w	16ec8 <d_print_comp_inner+0x19c>
   181de:	686a      	ldr	r2, [r5, #4]
   181e0:	4641      	mov	r1, r8
   181e2:	4620      	mov	r0, r4
   181e4:	f001 fb46 	bl	19874 <d_print_comp>
   181e8:	f7fe be6e 	b.w	16ec8 <d_print_comp_inner+0x19c>
   181ec:	686a      	ldr	r2, [r5, #4]
   181ee:	4641      	mov	r1, r8
   181f0:	4620      	mov	r0, r4
   181f2:	f001 fb3f 	bl	19874 <d_print_comp>
   181f6:	f7fe be67 	b.w	16ec8 <d_print_comp_inner+0x19c>
   181fa:	686a      	ldr	r2, [r5, #4]
   181fc:	4641      	mov	r1, r8
   181fe:	4620      	mov	r0, r4
   18200:	f001 fb38 	bl	19874 <d_print_comp>
   18204:	f7fe be60 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18208:	686a      	ldr	r2, [r5, #4]
   1820a:	4641      	mov	r1, r8
   1820c:	4620      	mov	r0, r4
   1820e:	f001 fb31 	bl	19874 <d_print_comp>
   18212:	f7fe be59 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18216:	686a      	ldr	r2, [r5, #4]
   18218:	4641      	mov	r1, r8
   1821a:	4620      	mov	r0, r4
   1821c:	f001 fb2a 	bl	19874 <d_print_comp>
   18220:	f7fe be52 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18224:	686a      	ldr	r2, [r5, #4]
   18226:	4641      	mov	r1, r8
   18228:	4620      	mov	r0, r4
   1822a:	f001 fb23 	bl	19874 <d_print_comp>
   1822e:	f7fe be4b 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18232:	4641      	mov	r1, r8
   18234:	68aa      	ldr	r2, [r5, #8]
   18236:	4620      	mov	r0, r4
   18238:	f001 fb1c 	bl	19874 <d_print_comp>
   1823c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18240:	29ff      	cmp	r1, #255	; 0xff
   18242:	f000 8560 	beq.w	18d06 <d_print_comp_inner+0x1fda>
   18246:	1c4a      	adds	r2, r1, #1
   18248:	235d      	movs	r3, #93	; 0x5d
   1824a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1824e:	5463      	strb	r3, [r4, r1]
   18250:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18254:	f7fe be38 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18258:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1825c:	4e4c      	ldr	r6, [pc, #304]	; (18390 <d_print_comp_inner+0x1664>)
   1825e:	3301      	adds	r3, #1
   18260:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18264:	4641      	mov	r1, r8
   18266:	686a      	ldr	r2, [r5, #4]
   18268:	4620      	mov	r0, r4
   1826a:	f001 fb03 	bl	19874 <d_print_comp>
   1826e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18272:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18276:	3b01      	subs	r3, #1
   18278:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1827c:	f106 0902 	add.w	r9, r6, #2
   18280:	f04f 0800 	mov.w	r8, #0
   18284:	e008      	b.n	18298 <d_print_comp_inner+0x156c>
   18286:	460b      	mov	r3, r1
   18288:	3101      	adds	r1, #1
   1828a:	454e      	cmp	r6, r9
   1828c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18290:	54e7      	strb	r7, [r4, r3]
   18292:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18296:	d013      	beq.n	182c0 <d_print_comp_inner+0x1594>
   18298:	29ff      	cmp	r1, #255	; 0xff
   1829a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1829e:	d1f2      	bne.n	18286 <d_print_comp_inner+0x155a>
   182a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   182a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182ac:	4620      	mov	r0, r4
   182ae:	4798      	blx	r3
   182b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182b4:	3301      	adds	r3, #1
   182b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   182ba:	2101      	movs	r1, #1
   182bc:	2300      	movs	r3, #0
   182be:	e7e4      	b.n	1828a <d_print_comp_inner+0x155e>
   182c0:	68aa      	ldr	r2, [r5, #8]
   182c2:	4934      	ldr	r1, [pc, #208]	; (18394 <d_print_comp_inner+0x1668>)
   182c4:	3201      	adds	r2, #1
   182c6:	a804      	add	r0, sp, #16
   182c8:	f006 fbb0 	bl	1ea2c <sprintf>
   182cc:	a804      	add	r0, sp, #16
   182ce:	f006 fd57 	bl	1ed80 <strlen>
   182d2:	b318      	cbz	r0, 1831c <d_print_comp_inner+0x15f0>
   182d4:	ad04      	add	r5, sp, #16
   182d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   182da:	182f      	adds	r7, r5, r0
   182dc:	f04f 0800 	mov.w	r8, #0
   182e0:	e008      	b.n	182f4 <d_print_comp_inner+0x15c8>
   182e2:	460b      	mov	r3, r1
   182e4:	3101      	adds	r1, #1
   182e6:	42af      	cmp	r7, r5
   182e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182ec:	54e6      	strb	r6, [r4, r3]
   182ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   182f2:	d015      	beq.n	18320 <d_print_comp_inner+0x15f4>
   182f4:	29ff      	cmp	r1, #255	; 0xff
   182f6:	f815 6b01 	ldrb.w	r6, [r5], #1
   182fa:	d1f2      	bne.n	182e2 <d_print_comp_inner+0x15b6>
   182fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18300:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18304:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18308:	4620      	mov	r0, r4
   1830a:	4798      	blx	r3
   1830c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18310:	3301      	adds	r3, #1
   18312:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18316:	2101      	movs	r1, #1
   18318:	2300      	movs	r3, #0
   1831a:	e7e4      	b.n	182e6 <d_print_comp_inner+0x15ba>
   1831c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18320:	29ff      	cmp	r1, #255	; 0xff
   18322:	f000 8560 	beq.w	18de6 <d_print_comp_inner+0x20ba>
   18326:	1c4a      	adds	r2, r1, #1
   18328:	237d      	movs	r3, #125	; 0x7d
   1832a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1832e:	5463      	strb	r3, [r4, r1]
   18330:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18334:	f7fe bdc8 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18338:	686a      	ldr	r2, [r5, #4]
   1833a:	4641      	mov	r1, r8
   1833c:	4620      	mov	r0, r4
   1833e:	f001 fa99 	bl	19874 <d_print_comp>
   18342:	f7fe bdc1 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18346:	4641      	mov	r1, r8
   18348:	68aa      	ldr	r2, [r5, #8]
   1834a:	4620      	mov	r0, r4
   1834c:	f001 fa92 	bl	19874 <d_print_comp>
   18350:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18354:	29ff      	cmp	r1, #255	; 0xff
   18356:	f000 850b 	beq.w	18d70 <d_print_comp_inner+0x2044>
   1835a:	1c4a      	adds	r2, r1, #1
   1835c:	235d      	movs	r3, #93	; 0x5d
   1835e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18362:	5463      	strb	r3, [r4, r1]
   18364:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18368:	f7fe bdae 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1836c:	686a      	ldr	r2, [r5, #4]
   1836e:	4641      	mov	r1, r8
   18370:	4620      	mov	r0, r4
   18372:	f001 fa7f 	bl	19874 <d_print_comp>
   18376:	f7fe bda7 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1837a:	bf00      	nop
   1837c:	00024458 	.word	0x00024458
   18380:	00024650 	.word	0x00024650
   18384:	000246df 	.word	0x000246df
   18388:	0002469f 	.word	0x0002469f
   1838c:	000244f4 	.word	0x000244f4
   18390:	000246ec 	.word	0x000246ec
   18394:	00024444 	.word	0x00024444
   18398:	f8da 5004 	ldr.w	r5, [sl, #4]
   1839c:	782b      	ldrb	r3, [r5, #0]
   1839e:	3b61      	subs	r3, #97	; 0x61
   183a0:	2b19      	cmp	r3, #25
   183a2:	d809      	bhi.n	183b8 <d_print_comp_inner+0x168c>
   183a4:	29ff      	cmp	r1, #255	; 0xff
   183a6:	f000 8793 	beq.w	192d0 <d_print_comp_inner+0x25a4>
   183aa:	2320      	movs	r3, #32
   183ac:	1c4a      	adds	r2, r1, #1
   183ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   183b2:	5463      	strb	r3, [r4, r1]
   183b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   183b8:	19eb      	adds	r3, r5, r7
   183ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   183be:	2b20      	cmp	r3, #32
   183c0:	bf08      	it	eq
   183c2:	f107 37ff 	addeq.w	r7, r7, #4294967295
   183c6:	2f00      	cmp	r7, #0
   183c8:	f43e ad7e 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   183cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   183d0:	442f      	add	r7, r5
   183d2:	f04f 0800 	mov.w	r8, #0
   183d6:	e009      	b.n	183ec <d_print_comp_inner+0x16c0>
   183d8:	460b      	mov	r3, r1
   183da:	3101      	adds	r1, #1
   183dc:	42af      	cmp	r7, r5
   183de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183e2:	54e6      	strb	r6, [r4, r3]
   183e4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   183e8:	f43e ad6e 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   183ec:	29ff      	cmp	r1, #255	; 0xff
   183ee:	f815 6b01 	ldrb.w	r6, [r5], #1
   183f2:	d1f1      	bne.n	183d8 <d_print_comp_inner+0x16ac>
   183f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183f8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   183fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18400:	4620      	mov	r0, r4
   18402:	4798      	blx	r3
   18404:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18408:	3301      	adds	r3, #1
   1840a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1840e:	2101      	movs	r1, #1
   18410:	2300      	movs	r3, #0
   18412:	e7e3      	b.n	183dc <d_print_comp_inner+0x16b0>
   18414:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18418:	b13a      	cbz	r2, 1842a <d_print_comp_inner+0x16fe>
   1841a:	ab14      	add	r3, sp, #80	; 0x50
   1841c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18420:	f843 1d48 	str.w	r1, [r3, #-72]!
   18424:	9203      	str	r2, [sp, #12]
   18426:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1842a:	686b      	ldr	r3, [r5, #4]
   1842c:	781a      	ldrb	r2, [r3, #0]
   1842e:	2a04      	cmp	r2, #4
   18430:	f000 830e 	beq.w	18a50 <d_print_comp_inner+0x1d24>
   18434:	a804      	add	r0, sp, #16
   18436:	461a      	mov	r2, r3
   18438:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   1843c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18440:	4641      	mov	r1, r8
   18442:	4620      	mov	r0, r4
   18444:	9304      	str	r3, [sp, #16]
   18446:	9505      	str	r5, [sp, #20]
   18448:	f7fe fc70 	bl	16d2c <d_print_comp_inner>
   1844c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18450:	9a05      	ldr	r2, [sp, #20]
   18452:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18456:	2b00      	cmp	r3, #0
   18458:	f43e ad36 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   1845c:	9b02      	ldr	r3, [sp, #8]
   1845e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18462:	f7fe bd31 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18466:	68aa      	ldr	r2, [r5, #8]
   18468:	4641      	mov	r1, r8
   1846a:	4620      	mov	r0, r4
   1846c:	f001 fa02 	bl	19874 <d_print_comp>
   18470:	f7fe bd2a 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18474:	686a      	ldr	r2, [r5, #4]
   18476:	49d8      	ldr	r1, [pc, #864]	; (187d8 <d_print_comp_inner+0x1aac>)
   18478:	3201      	adds	r2, #1
   1847a:	a804      	add	r0, sp, #16
   1847c:	f006 fad6 	bl	1ea2c <sprintf>
   18480:	a804      	add	r0, sp, #16
   18482:	f006 fc7d 	bl	1ed80 <strlen>
   18486:	b318      	cbz	r0, 184d0 <d_print_comp_inner+0x17a4>
   18488:	ad04      	add	r5, sp, #16
   1848a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1848e:	182f      	adds	r7, r5, r0
   18490:	f04f 0800 	mov.w	r8, #0
   18494:	e008      	b.n	184a8 <d_print_comp_inner+0x177c>
   18496:	460b      	mov	r3, r1
   18498:	3101      	adds	r1, #1
   1849a:	42bd      	cmp	r5, r7
   1849c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184a0:	54e6      	strb	r6, [r4, r3]
   184a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184a6:	d015      	beq.n	184d4 <d_print_comp_inner+0x17a8>
   184a8:	29ff      	cmp	r1, #255	; 0xff
   184aa:	f815 6b01 	ldrb.w	r6, [r5], #1
   184ae:	d1f2      	bne.n	18496 <d_print_comp_inner+0x176a>
   184b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184b4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   184b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184bc:	4620      	mov	r0, r4
   184be:	4798      	blx	r3
   184c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184c4:	3301      	adds	r3, #1
   184c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184ca:	2101      	movs	r1, #1
   184cc:	2300      	movs	r3, #0
   184ce:	e7e4      	b.n	1849a <d_print_comp_inner+0x176e>
   184d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184d4:	29ff      	cmp	r1, #255	; 0xff
   184d6:	f000 8404 	beq.w	18ce2 <d_print_comp_inner+0x1fb6>
   184da:	1c4a      	adds	r2, r1, #1
   184dc:	237d      	movs	r3, #125	; 0x7d
   184de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   184e2:	5463      	strb	r3, [r4, r1]
   184e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   184e8:	f7fe bcee 	b.w	16ec8 <d_print_comp_inner+0x19c>
   184ec:	686a      	ldr	r2, [r5, #4]
   184ee:	4641      	mov	r1, r8
   184f0:	4620      	mov	r0, r4
   184f2:	f001 f9bf 	bl	19874 <d_print_comp>
   184f6:	f7fe bce7 	b.w	16ec8 <d_print_comp_inner+0x19c>
   184fa:	686a      	ldr	r2, [r5, #4]
   184fc:	4641      	mov	r1, r8
   184fe:	4620      	mov	r0, r4
   18500:	f001 f9b8 	bl	19874 <d_print_comp>
   18504:	f7fe bce0 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18508:	686a      	ldr	r2, [r5, #4]
   1850a:	4641      	mov	r1, r8
   1850c:	4620      	mov	r0, r4
   1850e:	f001 f9b1 	bl	19874 <d_print_comp>
   18512:	f7fe bcd9 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18516:	4eb1      	ldr	r6, [pc, #708]	; (187dc <d_print_comp_inner+0x1ab0>)
   18518:	68aa      	ldr	r2, [r5, #8]
   1851a:	4641      	mov	r1, r8
   1851c:	4620      	mov	r0, r4
   1851e:	f001 f9a9 	bl	19874 <d_print_comp>
   18522:	f106 0a05 	add.w	sl, r6, #5
   18526:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1852a:	f04f 0900 	mov.w	r9, #0
   1852e:	e008      	b.n	18542 <d_print_comp_inner+0x1816>
   18530:	460b      	mov	r3, r1
   18532:	3101      	adds	r1, #1
   18534:	4556      	cmp	r6, sl
   18536:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1853a:	54e7      	strb	r7, [r4, r3]
   1853c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18540:	d013      	beq.n	1856a <d_print_comp_inner+0x183e>
   18542:	29ff      	cmp	r1, #255	; 0xff
   18544:	f816 7b01 	ldrb.w	r7, [r6], #1
   18548:	d1f2      	bne.n	18530 <d_print_comp_inner+0x1804>
   1854a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1854e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18552:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18556:	4620      	mov	r0, r4
   18558:	4798      	blx	r3
   1855a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1855e:	3301      	adds	r3, #1
   18560:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18564:	2101      	movs	r1, #1
   18566:	2300      	movs	r3, #0
   18568:	e7e4      	b.n	18534 <d_print_comp_inner+0x1808>
   1856a:	686a      	ldr	r2, [r5, #4]
   1856c:	4641      	mov	r1, r8
   1856e:	4620      	mov	r0, r4
   18570:	f001 f980 	bl	19874 <d_print_comp>
   18574:	f7fe bca8 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18578:	686a      	ldr	r2, [r5, #4]
   1857a:	4641      	mov	r1, r8
   1857c:	4620      	mov	r0, r4
   1857e:	f001 f979 	bl	19874 <d_print_comp>
   18582:	f7fe bca1 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18586:	686a      	ldr	r2, [r5, #4]
   18588:	4641      	mov	r1, r8
   1858a:	4620      	mov	r0, r4
   1858c:	f001 f972 	bl	19874 <d_print_comp>
   18590:	f7fe bc9a 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18594:	686a      	ldr	r2, [r5, #4]
   18596:	4641      	mov	r1, r8
   18598:	4620      	mov	r0, r4
   1859a:	f001 f96b 	bl	19874 <d_print_comp>
   1859e:	f7fe bc93 	b.w	16ec8 <d_print_comp_inner+0x19c>
   185a2:	4641      	mov	r1, r8
   185a4:	686a      	ldr	r2, [r5, #4]
   185a6:	4620      	mov	r0, r4
   185a8:	f001 f964 	bl	19874 <d_print_comp>
   185ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185b0:	29ff      	cmp	r1, #255	; 0xff
   185b2:	f000 842a 	beq.w	18e0a <d_print_comp_inner+0x20de>
   185b6:	1c4a      	adds	r2, r1, #1
   185b8:	2329      	movs	r3, #41	; 0x29
   185ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   185be:	5463      	strb	r3, [r4, r1]
   185c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   185c4:	f7fe bc80 	b.w	16ec8 <d_print_comp_inner+0x19c>
   185c8:	686a      	ldr	r2, [r5, #4]
   185ca:	4641      	mov	r1, r8
   185cc:	4620      	mov	r0, r4
   185ce:	f001 f951 	bl	19874 <d_print_comp>
   185d2:	f7fe bc79 	b.w	16ec8 <d_print_comp_inner+0x19c>
   185d6:	2f04      	cmp	r7, #4
   185d8:	f1a6 0410 	sub.w	r4, r6, #16
   185dc:	f106 0e10 	add.w	lr, r6, #16
   185e0:	f000 8722 	beq.w	19428 <d_print_comp_inner+0x26fc>
   185e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   185e8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   185ec:	2300      	movs	r3, #0
   185ee:	f84e 4c10 	str.w	r4, [lr, #-16]
   185f2:	e906 1008 	stmdb	r6, {r3, ip}
   185f6:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   185fa:	f846 5c0c 	str.w	r5, [r6, #-12]
   185fe:	686d      	ldr	r5, [r5, #4]
   18600:	3701      	adds	r7, #1
   18602:	4676      	mov	r6, lr
   18604:	f7fe bf84 	b.w	17510 <d_print_comp_inner+0x7e4>
   18608:	68aa      	ldr	r2, [r5, #8]
   1860a:	9300      	str	r3, [sp, #0]
   1860c:	460e      	mov	r6, r1
   1860e:	4620      	mov	r0, r4
   18610:	4641      	mov	r1, r8
   18612:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   18616:	f001 f92d 	bl	19874 <d_print_comp>
   1861a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1861e:	9b00      	ldr	r3, [sp, #0]
   18620:	4295      	cmp	r5, r2
   18622:	f47e ac51 	bne.w	16ec8 <d_print_comp_inner+0x19c>
   18626:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1862a:	42b2      	cmp	r2, r6
   1862c:	f47e ac4c 	bne.w	16ec8 <d_print_comp_inner+0x19c>
   18630:	3b01      	subs	r3, #1
   18632:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18636:	f7fe bc47 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1863a:	462a      	mov	r2, r5
   1863c:	4641      	mov	r1, r8
   1863e:	4620      	mov	r0, r4
   18640:	f001 f928 	bl	19894 <d_print_mod>
   18644:	f7fe bc70 	b.w	16f28 <d_print_comp_inner+0x1fc>
   18648:	686b      	ldr	r3, [r5, #4]
   1864a:	9300      	str	r3, [sp, #0]
   1864c:	f1b9 0f00 	cmp.w	r9, #0
   18650:	f47f abae 	bne.w	17db0 <d_print_comp_inner+0x1084>
   18654:	f7fe bc38 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18658:	463a      	mov	r2, r7
   1865a:	a804      	add	r0, sp, #16
   1865c:	495e      	ldr	r1, [pc, #376]	; (187d8 <d_print_comp_inner+0x1aac>)
   1865e:	f006 f9e5 	bl	1ea2c <sprintf>
   18662:	a804      	add	r0, sp, #16
   18664:	f006 fb8c 	bl	1ed80 <strlen>
   18668:	b318      	cbz	r0, 186b2 <d_print_comp_inner+0x1986>
   1866a:	ad04      	add	r5, sp, #16
   1866c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18670:	182f      	adds	r7, r5, r0
   18672:	f04f 0800 	mov.w	r8, #0
   18676:	e008      	b.n	1868a <d_print_comp_inner+0x195e>
   18678:	460b      	mov	r3, r1
   1867a:	3101      	adds	r1, #1
   1867c:	42af      	cmp	r7, r5
   1867e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18682:	54e6      	strb	r6, [r4, r3]
   18684:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18688:	d015      	beq.n	186b6 <d_print_comp_inner+0x198a>
   1868a:	29ff      	cmp	r1, #255	; 0xff
   1868c:	f815 6b01 	ldrb.w	r6, [r5], #1
   18690:	d1f2      	bne.n	18678 <d_print_comp_inner+0x194c>
   18692:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18696:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1869a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1869e:	4620      	mov	r0, r4
   186a0:	4798      	blx	r3
   186a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186a6:	3301      	adds	r3, #1
   186a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   186ac:	2101      	movs	r1, #1
   186ae:	2300      	movs	r3, #0
   186b0:	e7e4      	b.n	1867c <d_print_comp_inner+0x1950>
   186b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186b6:	29ff      	cmp	r1, #255	; 0xff
   186b8:	f000 84dd 	beq.w	19076 <d_print_comp_inner+0x234a>
   186bc:	1c4a      	adds	r2, r1, #1
   186be:	237d      	movs	r3, #125	; 0x7d
   186c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   186c4:	5463      	strb	r3, [r4, r1]
   186c6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   186ca:	f7fe bbfd 	b.w	16ec8 <d_print_comp_inner+0x19c>
   186ce:	2700      	movs	r7, #0
   186d0:	f7ff ba1f 	b.w	17b12 <d_print_comp_inner+0xde6>
   186d4:	68df      	ldr	r7, [r3, #12]
   186d6:	689d      	ldr	r5, [r3, #8]
   186d8:	2f00      	cmp	r7, #0
   186da:	f43e abf5 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   186de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   186e2:	442f      	add	r7, r5
   186e4:	f04f 0800 	mov.w	r8, #0
   186e8:	e009      	b.n	186fe <d_print_comp_inner+0x19d2>
   186ea:	460b      	mov	r3, r1
   186ec:	3101      	adds	r1, #1
   186ee:	42bd      	cmp	r5, r7
   186f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   186f4:	54e6      	strb	r6, [r4, r3]
   186f6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   186fa:	f43e abe5 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   186fe:	29ff      	cmp	r1, #255	; 0xff
   18700:	f815 6b01 	ldrb.w	r6, [r5], #1
   18704:	d1f1      	bne.n	186ea <d_print_comp_inner+0x19be>
   18706:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1870a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1870e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18712:	4620      	mov	r0, r4
   18714:	4798      	blx	r3
   18716:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1871a:	3301      	adds	r3, #1
   1871c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18720:	2101      	movs	r1, #1
   18722:	2300      	movs	r3, #0
   18724:	e7e3      	b.n	186ee <d_print_comp_inner+0x19c2>
   18726:	686e      	ldr	r6, [r5, #4]
   18728:	68af      	ldr	r7, [r5, #8]
   1872a:	4437      	add	r7, r6
   1872c:	42be      	cmp	r6, r7
   1872e:	f4be abcb 	bcs.w	16ec8 <d_print_comp_inner+0x19c>
   18732:	f04f 0800 	mov.w	r8, #0
   18736:	e00d      	b.n	18754 <d_print_comp_inner+0x1a28>
   18738:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1873c:	29ff      	cmp	r1, #255	; 0xff
   1873e:	d036      	beq.n	187ae <d_print_comp_inner+0x1a82>
   18740:	1c4b      	adds	r3, r1, #1
   18742:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18746:	5465      	strb	r5, [r4, r1]
   18748:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1874c:	3601      	adds	r6, #1
   1874e:	42b7      	cmp	r7, r6
   18750:	f67e abba 	bls.w	16ec8 <d_print_comp_inner+0x19c>
   18754:	1bbb      	subs	r3, r7, r6
   18756:	2b03      	cmp	r3, #3
   18758:	7835      	ldrb	r5, [r6, #0]
   1875a:	dded      	ble.n	18738 <d_print_comp_inner+0x1a0c>
   1875c:	2d5f      	cmp	r5, #95	; 0x5f
   1875e:	d1eb      	bne.n	18738 <d_print_comp_inner+0x1a0c>
   18760:	7873      	ldrb	r3, [r6, #1]
   18762:	2b5f      	cmp	r3, #95	; 0x5f
   18764:	d1e8      	bne.n	18738 <d_print_comp_inner+0x1a0c>
   18766:	78b3      	ldrb	r3, [r6, #2]
   18768:	2b55      	cmp	r3, #85	; 0x55
   1876a:	d1e5      	bne.n	18738 <d_print_comp_inner+0x1a0c>
   1876c:	1cf3      	adds	r3, r6, #3
   1876e:	429f      	cmp	r7, r3
   18770:	d9e2      	bls.n	18738 <d_print_comp_inner+0x1a0c>
   18772:	2000      	movs	r0, #0
   18774:	e006      	b.n	18784 <d_print_comp_inner+0x1a58>
   18776:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   1877a:	429f      	cmp	r7, r3
   1877c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18780:	f000 85c7 	beq.w	19312 <d_print_comp_inner+0x25e6>
   18784:	4699      	mov	r9, r3
   18786:	f813 5b01 	ldrb.w	r5, [r3], #1
   1878a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   1878e:	b2d1      	uxtb	r1, r2
   18790:	2909      	cmp	r1, #9
   18792:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   18796:	d9f0      	bls.n	1877a <d_print_comp_inner+0x1a4e>
   18798:	f1be 0f05 	cmp.w	lr, #5
   1879c:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   187a0:	d9e9      	bls.n	18776 <d_print_comp_inner+0x1a4a>
   187a2:	2a05      	cmp	r2, #5
   187a4:	f200 8743 	bhi.w	1962e <d_print_comp_inner+0x2902>
   187a8:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   187ac:	e7e5      	b.n	1877a <d_print_comp_inner+0x1a4e>
   187ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   187b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   187ba:	4620      	mov	r0, r4
   187bc:	4798      	blx	r3
   187be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187c2:	3301      	adds	r3, #1
   187c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187c8:	2100      	movs	r1, #0
   187ca:	2301      	movs	r3, #1
   187cc:	e7b9      	b.n	18742 <d_print_comp_inner+0x1a16>
   187ce:	4d04      	ldr	r5, [pc, #16]	; (187e0 <d_print_comp_inner+0x1ab4>)
   187d0:	4698      	mov	r8, r3
   187d2:	1daf      	adds	r7, r5, #6
   187d4:	e010      	b.n	187f8 <d_print_comp_inner+0x1acc>
   187d6:	bf00      	nop
   187d8:	00024444 	.word	0x00024444
   187dc:	000245b8 	.word	0x000245b8
   187e0:	00024618 	.word	0x00024618
   187e4:	460b      	mov	r3, r1
   187e6:	3101      	adds	r1, #1
   187e8:	42bd      	cmp	r5, r7
   187ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187ee:	54e6      	strb	r6, [r4, r3]
   187f0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   187f4:	f43e ab68 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   187f8:	29ff      	cmp	r1, #255	; 0xff
   187fa:	f815 6b01 	ldrb.w	r6, [r5], #1
   187fe:	d1f1      	bne.n	187e4 <d_print_comp_inner+0x1ab8>
   18800:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18804:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18808:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1880c:	4620      	mov	r0, r4
   1880e:	4798      	blx	r3
   18810:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18814:	3301      	adds	r3, #1
   18816:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1881a:	2101      	movs	r1, #1
   1881c:	2300      	movs	r3, #0
   1881e:	e7e3      	b.n	187e8 <d_print_comp_inner+0x1abc>
   18820:	782b      	ldrb	r3, [r5, #0]
   18822:	2b2f      	cmp	r3, #47	; 0x2f
   18824:	f47e ab6a 	bne.w	16efc <d_print_comp_inner+0x1d0>
   18828:	4601      	mov	r1, r0
   1882a:	460d      	mov	r5, r1
   1882c:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18830:	f7fe bb66 	b.w	16f00 <d_print_comp_inner+0x1d4>
   18834:	4dd7      	ldr	r5, [pc, #860]	; (18b94 <d_print_comp_inner+0x1e68>)
   18836:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1883a:	f105 0804 	add.w	r8, r5, #4
   1883e:	e009      	b.n	18854 <d_print_comp_inner+0x1b28>
   18840:	460b      	mov	r3, r1
   18842:	3101      	adds	r1, #1
   18844:	45a8      	cmp	r8, r5
   18846:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1884a:	54e6      	strb	r6, [r4, r3]
   1884c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18850:	f43e ab3a 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   18854:	29ff      	cmp	r1, #255	; 0xff
   18856:	f815 6b01 	ldrb.w	r6, [r5], #1
   1885a:	d1f1      	bne.n	18840 <d_print_comp_inner+0x1b14>
   1885c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18860:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18868:	4620      	mov	r0, r4
   1886a:	4798      	blx	r3
   1886c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18870:	3301      	adds	r3, #1
   18872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18876:	2101      	movs	r1, #1
   18878:	2300      	movs	r3, #0
   1887a:	e7e3      	b.n	18844 <d_print_comp_inner+0x1b18>
   1887c:	4ec6      	ldr	r6, [pc, #792]	; (18b98 <d_print_comp_inner+0x1e6c>)
   1887e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18882:	f106 0905 	add.w	r9, r6, #5
   18886:	f04f 0800 	mov.w	r8, #0
   1888a:	e008      	b.n	1889e <d_print_comp_inner+0x1b72>
   1888c:	460b      	mov	r3, r1
   1888e:	3101      	adds	r1, #1
   18890:	45b1      	cmp	r9, r6
   18892:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18896:	54e7      	strb	r7, [r4, r3]
   18898:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1889c:	d013      	beq.n	188c6 <d_print_comp_inner+0x1b9a>
   1889e:	29ff      	cmp	r1, #255	; 0xff
   188a0:	f816 7b01 	ldrb.w	r7, [r6], #1
   188a4:	d1f2      	bne.n	1888c <d_print_comp_inner+0x1b60>
   188a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   188ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188b2:	4620      	mov	r0, r4
   188b4:	4798      	blx	r3
   188b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188ba:	3301      	adds	r3, #1
   188bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   188c0:	2101      	movs	r1, #1
   188c2:	2300      	movs	r3, #0
   188c4:	e7e4      	b.n	18890 <d_print_comp_inner+0x1b64>
   188c6:	686a      	ldr	r2, [r5, #4]
   188c8:	49b4      	ldr	r1, [pc, #720]	; (18b9c <d_print_comp_inner+0x1e70>)
   188ca:	3201      	adds	r2, #1
   188cc:	a804      	add	r0, sp, #16
   188ce:	f006 f8ad 	bl	1ea2c <sprintf>
   188d2:	a804      	add	r0, sp, #16
   188d4:	f006 fa54 	bl	1ed80 <strlen>
   188d8:	2800      	cmp	r0, #0
   188da:	f43e aaf5 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   188de:	ad04      	add	r5, sp, #16
   188e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   188e4:	182f      	adds	r7, r5, r0
   188e6:	f04f 0800 	mov.w	r8, #0
   188ea:	e009      	b.n	18900 <d_print_comp_inner+0x1bd4>
   188ec:	460b      	mov	r3, r1
   188ee:	3101      	adds	r1, #1
   188f0:	42af      	cmp	r7, r5
   188f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   188f6:	54e6      	strb	r6, [r4, r3]
   188f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   188fc:	f43e aae4 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   18900:	29ff      	cmp	r1, #255	; 0xff
   18902:	f815 6b01 	ldrb.w	r6, [r5], #1
   18906:	d1f1      	bne.n	188ec <d_print_comp_inner+0x1bc0>
   18908:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1890c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18910:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18914:	4620      	mov	r0, r4
   18916:	4798      	blx	r3
   18918:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1891c:	3301      	adds	r3, #1
   1891e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18922:	2101      	movs	r1, #1
   18924:	2300      	movs	r3, #0
   18926:	e7e3      	b.n	188f0 <d_print_comp_inner+0x1bc4>
   18928:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   1892c:	f105 0208 	add.w	r2, r5, #8
   18930:	4641      	mov	r1, r8
   18932:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   18936:	f001 fc91 	bl	1a25c <d_print_function_type.isra.11>
   1893a:	686a      	ldr	r2, [r5, #4]
   1893c:	2a00      	cmp	r2, #0
   1893e:	f43e aac3 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   18942:	4641      	mov	r1, r8
   18944:	4620      	mov	r0, r4
   18946:	f000 ff95 	bl	19874 <d_print_comp>
   1894a:	f7fe babd 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1894e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18952:	f7ff b9a2 	b.w	17c9a <d_print_comp_inner+0xf6e>
   18956:	4e92      	ldr	r6, [pc, #584]	; (18ba0 <d_print_comp_inner+0x1e74>)
   18958:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1895c:	f106 0a05 	add.w	sl, r6, #5
   18960:	f04f 0900 	mov.w	r9, #0
   18964:	e009      	b.n	1897a <d_print_comp_inner+0x1c4e>
   18966:	460b      	mov	r3, r1
   18968:	3101      	adds	r1, #1
   1896a:	45b2      	cmp	sl, r6
   1896c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18970:	54e7      	strb	r7, [r4, r3]
   18972:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18976:	f43f a97a 	beq.w	17c6e <d_print_comp_inner+0xf42>
   1897a:	29ff      	cmp	r1, #255	; 0xff
   1897c:	f816 7b01 	ldrb.w	r7, [r6], #1
   18980:	d1f1      	bne.n	18966 <d_print_comp_inner+0x1c3a>
   18982:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18986:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1898a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1898e:	4620      	mov	r0, r4
   18990:	4798      	blx	r3
   18992:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18996:	3301      	adds	r3, #1
   18998:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1899c:	2101      	movs	r1, #1
   1899e:	2300      	movs	r3, #0
   189a0:	e7e3      	b.n	1896a <d_print_comp_inner+0x1c3e>
   189a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   189a6:	497f      	ldr	r1, [pc, #508]	; (18ba4 <d_print_comp_inner+0x1e78>)
   189a8:	681f      	ldr	r7, [r3, #0]
   189aa:	4638      	mov	r0, r7
   189ac:	f006 f86c 	bl	1ea88 <strcmp>
   189b0:	f896 a000 	ldrb.w	sl, [r6]
   189b4:	b918      	cbnz	r0, 189be <d_print_comp_inner+0x1c92>
   189b6:	f1ba 0f03 	cmp.w	sl, #3
   189ba:	f000 851b 	beq.w	193f4 <d_print_comp_inner+0x26c8>
   189be:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   189c2:	f000 85fd 	beq.w	195c0 <d_print_comp_inner+0x2894>
   189c6:	4978      	ldr	r1, [pc, #480]	; (18ba8 <d_print_comp_inner+0x1e7c>)
   189c8:	4638      	mov	r0, r7
   189ca:	f006 f85d 	bl	1ea88 <strcmp>
   189ce:	4605      	mov	r5, r0
   189d0:	2800      	cmp	r0, #0
   189d2:	f000 8135 	beq.w	18c40 <d_print_comp_inner+0x1f14>
   189d6:	4975      	ldr	r1, [pc, #468]	; (18bac <d_print_comp_inner+0x1e80>)
   189d8:	4638      	mov	r0, r7
   189da:	f006 f855 	bl	1ea88 <strcmp>
   189de:	2800      	cmp	r0, #0
   189e0:	f000 82b6 	beq.w	18f50 <d_print_comp_inner+0x2224>
   189e4:	464a      	mov	r2, r9
   189e6:	4641      	mov	r1, r8
   189e8:	4620      	mov	r0, r4
   189ea:	f001 fd2b 	bl	1a444 <d_print_expr_op>
   189ee:	2f00      	cmp	r7, #0
   189f0:	f43f a837 	beq.w	17a62 <d_print_comp_inner+0xd36>
   189f4:	496e      	ldr	r1, [pc, #440]	; (18bb0 <d_print_comp_inner+0x1e84>)
   189f6:	4638      	mov	r0, r7
   189f8:	f006 f846 	bl	1ea88 <strcmp>
   189fc:	2800      	cmp	r0, #0
   189fe:	f000 8384 	beq.w	1910a <d_print_comp_inner+0x23de>
   18a02:	4638      	mov	r0, r7
   18a04:	496b      	ldr	r1, [pc, #428]	; (18bb4 <d_print_comp_inner+0x1e88>)
   18a06:	f006 f83f 	bl	1ea88 <strcmp>
   18a0a:	4605      	mov	r5, r0
   18a0c:	2800      	cmp	r0, #0
   18a0e:	f47f a828 	bne.w	17a62 <d_print_comp_inner+0xd36>
   18a12:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18a16:	2bff      	cmp	r3, #255	; 0xff
   18a18:	f000 84db 	beq.w	193d2 <d_print_comp_inner+0x26a6>
   18a1c:	1c58      	adds	r0, r3, #1
   18a1e:	2528      	movs	r5, #40	; 0x28
   18a20:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18a24:	4641      	mov	r1, r8
   18a26:	54e5      	strb	r5, [r4, r3]
   18a28:	4632      	mov	r2, r6
   18a2a:	4620      	mov	r0, r4
   18a2c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18a30:	f000 ff20 	bl	19874 <d_print_comp>
   18a34:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a38:	29ff      	cmp	r1, #255	; 0xff
   18a3a:	f000 846d 	beq.w	19318 <d_print_comp_inner+0x25ec>
   18a3e:	2329      	movs	r3, #41	; 0x29
   18a40:	1c4a      	adds	r2, r1, #1
   18a42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a46:	5463      	strb	r3, [r4, r1]
   18a48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a4c:	f7fe ba3c 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18a50:	f10d 0910 	add.w	r9, sp, #16
   18a54:	685a      	ldr	r2, [r3, #4]
   18a56:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18a5a:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18a5e:	4641      	mov	r1, r8
   18a60:	4620      	mov	r0, r4
   18a62:	9204      	str	r2, [sp, #16]
   18a64:	9305      	str	r3, [sp, #20]
   18a66:	f7fe f961 	bl	16d2c <d_print_comp_inner>
   18a6a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18a6e:	9a05      	ldr	r2, [sp, #20]
   18a70:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18a74:	b113      	cbz	r3, 18a7c <d_print_comp_inner+0x1d50>
   18a76:	9b02      	ldr	r3, [sp, #8]
   18a78:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18a7c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18a80:	2b3c      	cmp	r3, #60	; 0x3c
   18a82:	f000 83d9 	beq.w	19238 <d_print_comp_inner+0x250c>
   18a86:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a8a:	29ff      	cmp	r1, #255	; 0xff
   18a8c:	f000 8467 	beq.w	1935e <d_print_comp_inner+0x2632>
   18a90:	1c4a      	adds	r2, r1, #1
   18a92:	233c      	movs	r3, #60	; 0x3c
   18a94:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a98:	5463      	strb	r3, [r4, r1]
   18a9a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a9e:	686b      	ldr	r3, [r5, #4]
   18aa0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18aa4:	689b      	ldr	r3, [r3, #8]
   18aa6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18aaa:	461a      	mov	r2, r3
   18aac:	4641      	mov	r1, r8
   18aae:	4620      	mov	r0, r4
   18ab0:	9304      	str	r3, [sp, #16]
   18ab2:	9505      	str	r5, [sp, #20]
   18ab4:	f7fe f93a 	bl	16d2c <d_print_comp_inner>
   18ab8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18abc:	9a05      	ldr	r2, [sp, #20]
   18abe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18ac2:	2b3e      	cmp	r3, #62	; 0x3e
   18ac4:	f000 83ab 	beq.w	1921e <d_print_comp_inner+0x24f2>
   18ac8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18acc:	29ff      	cmp	r1, #255	; 0xff
   18ace:	f000 849a 	beq.w	19406 <d_print_comp_inner+0x26da>
   18ad2:	233e      	movs	r3, #62	; 0x3e
   18ad4:	1c4a      	adds	r2, r1, #1
   18ad6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ada:	5463      	strb	r3, [r4, r1]
   18adc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ae0:	f7fe b9f2 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18ae4:	6852      	ldr	r2, [r2, #4]
   18ae6:	7c16      	ldrb	r6, [r2, #16]
   18ae8:	2e00      	cmp	r6, #0
   18aea:	f43f a9e7 	beq.w	17ebc <d_print_comp_inner+0x1190>
   18aee:	2e06      	cmp	r6, #6
   18af0:	f240 8337 	bls.w	19162 <d_print_comp_inner+0x2436>
   18af4:	2e07      	cmp	r6, #7
   18af6:	f47f a9e1 	bne.w	17ebc <d_print_comp_inner+0x1190>
   18afa:	68aa      	ldr	r2, [r5, #8]
   18afc:	7811      	ldrb	r1, [r2, #0]
   18afe:	2900      	cmp	r1, #0
   18b00:	f47f a9dc 	bne.w	17ebc <d_print_comp_inner+0x1190>
   18b04:	6891      	ldr	r1, [r2, #8]
   18b06:	2901      	cmp	r1, #1
   18b08:	f47f a9d8 	bne.w	17ebc <d_print_comp_inner+0x1190>
   18b0c:	2b3c      	cmp	r3, #60	; 0x3c
   18b0e:	f47f a9d5 	bne.w	17ebc <d_print_comp_inner+0x1190>
   18b12:	6853      	ldr	r3, [r2, #4]
   18b14:	781b      	ldrb	r3, [r3, #0]
   18b16:	2b30      	cmp	r3, #48	; 0x30
   18b18:	f000 8626 	beq.w	19768 <d_print_comp_inner+0x2a3c>
   18b1c:	2b31      	cmp	r3, #49	; 0x31
   18b1e:	f47f a9cd 	bne.w	17ebc <d_print_comp_inner+0x1190>
   18b22:	2204      	movs	r2, #4
   18b24:	4924      	ldr	r1, [pc, #144]	; (18bb8 <d_print_comp_inner+0x1e8c>)
   18b26:	f7fb fe2d 	bl	14784 <d_append_buffer>
   18b2a:	f7fe b9cd 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18b2e:	4e23      	ldr	r6, [pc, #140]	; (18bbc <d_print_comp_inner+0x1e90>)
   18b30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b34:	f106 0a02 	add.w	sl, r6, #2
   18b38:	e009      	b.n	18b4e <d_print_comp_inner+0x1e22>
   18b3a:	460b      	mov	r3, r1
   18b3c:	3101      	adds	r1, #1
   18b3e:	45b2      	cmp	sl, r6
   18b40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18b44:	54e7      	strb	r7, [r4, r3]
   18b46:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18b4a:	f43e ad52 	beq.w	175f2 <d_print_comp_inner+0x8c6>
   18b4e:	29ff      	cmp	r1, #255	; 0xff
   18b50:	f816 7b01 	ldrb.w	r7, [r6], #1
   18b54:	d1f1      	bne.n	18b3a <d_print_comp_inner+0x1e0e>
   18b56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b5a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18b5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b62:	4620      	mov	r0, r4
   18b64:	4798      	blx	r3
   18b66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b6a:	3301      	adds	r3, #1
   18b6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b70:	2101      	movs	r1, #1
   18b72:	2300      	movs	r3, #0
   18b74:	e7e3      	b.n	18b3e <d_print_comp_inner+0x1e12>
   18b76:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b7a:	29ff      	cmp	r1, #255	; 0xff
   18b7c:	f000 84e4 	beq.w	19548 <d_print_comp_inner+0x281c>
   18b80:	2220      	movs	r2, #32
   18b82:	1c4b      	adds	r3, r1, #1
   18b84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18b88:	5462      	strb	r2, [r4, r1]
   18b8a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18b8e:	f7fe bdbb 	b.w	17708 <d_print_comp_inner+0x9dc>
   18b92:	bf00      	nop
   18b94:	00024690 	.word	0x00024690
   18b98:	000244b8 	.word	0x000244b8
   18b9c:	00024444 	.word	0x00024444
   18ba0:	00024608 	.word	0x00024608
   18ba4:	0002463c 	.word	0x0002463c
   18ba8:	0002470c 	.word	0x0002470c
   18bac:	00024448 	.word	0x00024448
   18bb0:	00024640 	.word	0x00024640
   18bb4:	0002494c 	.word	0x0002494c
   18bb8:	0002466c 	.word	0x0002466c
   18bbc:	00024494 	.word	0x00024494
   18bc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18bc4:	29ff      	cmp	r1, #255	; 0xff
   18bc6:	f000 8465 	beq.w	19494 <d_print_comp_inner+0x2768>
   18bca:	2220      	movs	r2, #32
   18bcc:	1c4b      	adds	r3, r1, #1
   18bce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18bd2:	5462      	strb	r2, [r4, r1]
   18bd4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18bd8:	f7fe bd80 	b.w	176dc <d_print_comp_inner+0x9b0>
   18bdc:	2700      	movs	r7, #0
   18bde:	55a7      	strb	r7, [r4, r6]
   18be0:	4631      	mov	r1, r6
   18be2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18be6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bea:	4620      	mov	r0, r4
   18bec:	4798      	blx	r3
   18bee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bf2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18bf6:	3301      	adds	r3, #1
   18bf8:	463e      	mov	r6, r7
   18bfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bfe:	f7fe be31 	b.w	17864 <d_print_comp_inner+0xb38>
   18c02:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c06:	29ff      	cmp	r1, #255	; 0xff
   18c08:	f000 8465 	beq.w	194d6 <d_print_comp_inner+0x27aa>
   18c0c:	1c4a      	adds	r2, r1, #1
   18c0e:	235b      	movs	r3, #91	; 0x5b
   18c10:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18c14:	5463      	strb	r3, [r4, r1]
   18c16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c1a:	4641      	mov	r1, r8
   18c1c:	68aa      	ldr	r2, [r5, #8]
   18c1e:	4620      	mov	r0, r4
   18c20:	f000 fe28 	bl	19874 <d_print_comp>
   18c24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c28:	29ff      	cmp	r1, #255	; 0xff
   18c2a:	f000 8312 	beq.w	19252 <d_print_comp_inner+0x2526>
   18c2e:	235d      	movs	r3, #93	; 0x5d
   18c30:	1c4a      	adds	r2, r1, #1
   18c32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18c36:	5463      	strb	r3, [r4, r1]
   18c38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c3c:	f7fe b944 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18c40:	4631      	mov	r1, r6
   18c42:	4620      	mov	r0, r4
   18c44:	f7fb ffca 	bl	14bdc <d_find_pack>
   18c48:	b928      	cbnz	r0, 18c56 <d_print_comp_inner+0x1f2a>
   18c4a:	e007      	b.n	18c5c <d_print_comp_inner+0x1f30>
   18c4c:	6843      	ldr	r3, [r0, #4]
   18c4e:	b12b      	cbz	r3, 18c5c <d_print_comp_inner+0x1f30>
   18c50:	6880      	ldr	r0, [r0, #8]
   18c52:	3501      	adds	r5, #1
   18c54:	b110      	cbz	r0, 18c5c <d_print_comp_inner+0x1f30>
   18c56:	7803      	ldrb	r3, [r0, #0]
   18c58:	2b2f      	cmp	r3, #47	; 0x2f
   18c5a:	d0f7      	beq.n	18c4c <d_print_comp_inner+0x1f20>
   18c5c:	462a      	mov	r2, r5
   18c5e:	a804      	add	r0, sp, #16
   18c60:	49d4      	ldr	r1, [pc, #848]	; (18fb4 <d_print_comp_inner+0x2288>)
   18c62:	f005 fee3 	bl	1ea2c <sprintf>
   18c66:	a804      	add	r0, sp, #16
   18c68:	f006 f88a 	bl	1ed80 <strlen>
   18c6c:	2800      	cmp	r0, #0
   18c6e:	f43e a92b 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   18c72:	ad04      	add	r5, sp, #16
   18c74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c78:	182f      	adds	r7, r5, r0
   18c7a:	f04f 0800 	mov.w	r8, #0
   18c7e:	e009      	b.n	18c94 <d_print_comp_inner+0x1f68>
   18c80:	460b      	mov	r3, r1
   18c82:	3101      	adds	r1, #1
   18c84:	42bd      	cmp	r5, r7
   18c86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c8a:	54e6      	strb	r6, [r4, r3]
   18c8c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18c90:	f43e a91a 	beq.w	16ec8 <d_print_comp_inner+0x19c>
   18c94:	29ff      	cmp	r1, #255	; 0xff
   18c96:	f815 6b01 	ldrb.w	r6, [r5], #1
   18c9a:	d1f1      	bne.n	18c80 <d_print_comp_inner+0x1f54>
   18c9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ca0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18ca4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ca8:	4620      	mov	r0, r4
   18caa:	4798      	blx	r3
   18cac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cb0:	3301      	adds	r3, #1
   18cb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cb6:	2101      	movs	r1, #1
   18cb8:	2300      	movs	r3, #0
   18cba:	e7e3      	b.n	18c84 <d_print_comp_inner+0x1f58>
   18cbc:	686a      	ldr	r2, [r5, #4]
   18cbe:	4641      	mov	r1, r8
   18cc0:	4620      	mov	r0, r4
   18cc2:	f000 fdd7 	bl	19874 <d_print_comp>
   18cc6:	f7fe b8ff 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18cca:	29ff      	cmp	r1, #255	; 0xff
   18ccc:	f000 83d2 	beq.w	19474 <d_print_comp_inner+0x2748>
   18cd0:	232d      	movs	r3, #45	; 0x2d
   18cd2:	1c4a      	adds	r2, r1, #1
   18cd4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18cd8:	5463      	strb	r3, [r4, r1]
   18cda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18cde:	f7ff b90e 	b.w	17efe <d_print_comp_inner+0x11d2>
   18ce2:	2500      	movs	r5, #0
   18ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ce8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18cec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18cf0:	4620      	mov	r0, r4
   18cf2:	4798      	blx	r3
   18cf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cf8:	3301      	adds	r3, #1
   18cfa:	4629      	mov	r1, r5
   18cfc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d00:	2201      	movs	r2, #1
   18d02:	f7ff bbeb 	b.w	184dc <d_print_comp_inner+0x17b0>
   18d06:	2500      	movs	r5, #0
   18d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d10:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d14:	4620      	mov	r0, r4
   18d16:	4798      	blx	r3
   18d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d1c:	3301      	adds	r3, #1
   18d1e:	4629      	mov	r1, r5
   18d20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d24:	2201      	movs	r2, #1
   18d26:	f7ff ba8f 	b.w	18248 <d_print_comp_inner+0x151c>
   18d2a:	2600      	movs	r6, #0
   18d2c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18d30:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18d34:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18d38:	4798      	blx	r3
   18d3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d3e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18d42:	3301      	adds	r3, #1
   18d44:	4631      	mov	r1, r6
   18d46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d4a:	f7fe bd43 	b.w	177d4 <d_print_comp_inner+0xaa8>
   18d4e:	2600      	movs	r6, #0
   18d50:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18d54:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18d58:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18d5c:	4798      	blx	r3
   18d5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d62:	3301      	adds	r3, #1
   18d64:	4631      	mov	r1, r6
   18d66:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d6a:	2201      	movs	r2, #1
   18d6c:	f7fe bb74 	b.w	17458 <d_print_comp_inner+0x72c>
   18d70:	2500      	movs	r5, #0
   18d72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d7a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d7e:	4620      	mov	r0, r4
   18d80:	4798      	blx	r3
   18d82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d86:	3301      	adds	r3, #1
   18d88:	4629      	mov	r1, r5
   18d8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d8e:	2201      	movs	r2, #1
   18d90:	f7ff bae4 	b.w	1835c <d_print_comp_inner+0x1630>
   18d94:	220d      	movs	r2, #13
   18d96:	4988      	ldr	r1, [pc, #544]	; (18fb8 <d_print_comp_inner+0x228c>)
   18d98:	4620      	mov	r0, r4
   18d9a:	f7fb fcf3 	bl	14784 <d_append_buffer>
   18d9e:	68a9      	ldr	r1, [r5, #8]
   18da0:	4620      	mov	r0, r4
   18da2:	3101      	adds	r1, #1
   18da4:	f7fb ff9e 	bl	14ce4 <d_append_num>
   18da8:	2203      	movs	r2, #3
   18daa:	4984      	ldr	r1, [pc, #528]	; (18fbc <d_print_comp_inner+0x2290>)
   18dac:	4620      	mov	r0, r4
   18dae:	f7fb fce9 	bl	14784 <d_append_buffer>
   18db2:	686d      	ldr	r5, [r5, #4]
   18db4:	f7fe bc22 	b.w	175fc <d_print_comp_inner+0x8d0>
   18db8:	2500      	movs	r5, #0
   18dba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18dc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18dc6:	4620      	mov	r0, r4
   18dc8:	4798      	blx	r3
   18dca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18dce:	3301      	adds	r3, #1
   18dd0:	4629      	mov	r1, r5
   18dd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18dd6:	2201      	movs	r2, #1
   18dd8:	f7fe be08 	b.w	179ec <d_print_comp_inner+0xcc0>
   18ddc:	2301      	movs	r3, #1
   18dde:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18de2:	f7fe b871 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18de6:	2500      	movs	r5, #0
   18de8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18dec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18df0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18df4:	4620      	mov	r0, r4
   18df6:	4798      	blx	r3
   18df8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18dfc:	3301      	adds	r3, #1
   18dfe:	4629      	mov	r1, r5
   18e00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e04:	2201      	movs	r2, #1
   18e06:	f7ff ba8f 	b.w	18328 <d_print_comp_inner+0x15fc>
   18e0a:	2500      	movs	r5, #0
   18e0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e14:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e18:	4620      	mov	r0, r4
   18e1a:	4798      	blx	r3
   18e1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e20:	3301      	adds	r3, #1
   18e22:	4629      	mov	r1, r5
   18e24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e28:	2201      	movs	r2, #1
   18e2a:	f7ff bbc5 	b.w	185b8 <d_print_comp_inner+0x188c>
   18e2e:	a914      	add	r1, sp, #80	; 0x50
   18e30:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18e34:	f841 0d40 	str.w	r0, [r1, #-64]!
   18e38:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18e3c:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18e40:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18e44:	4620      	mov	r0, r4
   18e46:	4641      	mov	r1, r8
   18e48:	9306      	str	r3, [sp, #24]
   18e4a:	9607      	str	r6, [sp, #28]
   18e4c:	9505      	str	r5, [sp, #20]
   18e4e:	f000 fd11 	bl	19874 <d_print_comp>
   18e52:	9e06      	ldr	r6, [sp, #24]
   18e54:	9b04      	ldr	r3, [sp, #16]
   18e56:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18e5a:	2e00      	cmp	r6, #0
   18e5c:	f47e a834 	bne.w	16ec8 <d_print_comp_inner+0x19c>
   18e60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e64:	29ff      	cmp	r1, #255	; 0xff
   18e66:	f000 8409 	beq.w	1967c <d_print_comp_inner+0x2950>
   18e6a:	2320      	movs	r3, #32
   18e6c:	1c4a      	adds	r2, r1, #1
   18e6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e72:	5463      	strb	r3, [r4, r1]
   18e74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e78:	f7fe be0b 	b.w	17a92 <d_print_comp_inner+0xd66>
   18e7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18e80:	2b00      	cmp	r3, #0
   18e82:	f6fe abff 	blt.w	17684 <d_print_comp_inner+0x958>
   18e86:	2b00      	cmp	r3, #0
   18e88:	f000 829d 	beq.w	193c6 <d_print_comp_inner+0x269a>
   18e8c:	6880      	ldr	r0, [r0, #8]
   18e8e:	3b01      	subs	r3, #1
   18e90:	2800      	cmp	r0, #0
   18e92:	f43e a82d 	beq.w	16ef0 <d_print_comp_inner+0x1c4>
   18e96:	7802      	ldrb	r2, [r0, #0]
   18e98:	2a2f      	cmp	r2, #47	; 0x2f
   18e9a:	d0f4      	beq.n	18e86 <d_print_comp_inner+0x215a>
   18e9c:	f7fe b828 	b.w	16ef0 <d_print_comp_inner+0x1c4>
   18ea0:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18ea4:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18ea8:	f1be 0f00 	cmp.w	lr, #0
   18eac:	dd14      	ble.n	18ed8 <d_print_comp_inner+0x21ac>
   18eae:	6813      	ldr	r3, [r2, #0]
   18eb0:	4299      	cmp	r1, r3
   18eb2:	f000 83f5 	beq.w	196a0 <d_print_comp_inner+0x2974>
   18eb6:	f102 0008 	add.w	r0, r2, #8
   18eba:	463b      	mov	r3, r7
   18ebc:	46a4      	mov	ip, r4
   18ebe:	e004      	b.n	18eca <d_print_comp_inner+0x219e>
   18ec0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18ec4:	42a1      	cmp	r1, r4
   18ec6:	f000 81d4 	beq.w	19272 <d_print_comp_inner+0x2546>
   18eca:	3301      	adds	r3, #1
   18ecc:	459e      	cmp	lr, r3
   18ece:	4681      	mov	r9, r0
   18ed0:	f100 0008 	add.w	r0, r0, #8
   18ed4:	d1f4      	bne.n	18ec0 <d_print_comp_inner+0x2194>
   18ed6:	4664      	mov	r4, ip
   18ed8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18edc:	459e      	cmp	lr, r3
   18ede:	f280 84b9 	bge.w	19854 <d_print_comp_inner+0x2b28>
   18ee2:	f10e 0301 	add.w	r3, lr, #1
   18ee6:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18eea:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18eee:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18ef2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18ef6:	3004      	adds	r0, #4
   18ef8:	468e      	mov	lr, r1
   18efa:	2a00      	cmp	r2, #0
   18efc:	f000 848d 	beq.w	1981a <d_print_comp_inner+0x2aee>
   18f00:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18f04:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18f08:	428b      	cmp	r3, r1
   18f0a:	f103 0c01 	add.w	ip, r3, #1
   18f0e:	f280 84a1 	bge.w	19854 <d_print_comp_inner+0x2b28>
   18f12:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18f16:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18f1a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18f1e:	6851      	ldr	r1, [r2, #4]
   18f20:	6059      	str	r1, [r3, #4]
   18f22:	6003      	str	r3, [r0, #0]
   18f24:	6812      	ldr	r2, [r2, #0]
   18f26:	4618      	mov	r0, r3
   18f28:	e7e7      	b.n	18efa <d_print_comp_inner+0x21ce>
   18f2a:	2500      	movs	r5, #0
   18f2c:	4619      	mov	r1, r3
   18f2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f36:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f3a:	4620      	mov	r0, r4
   18f3c:	4798      	blx	r3
   18f3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f42:	1c5a      	adds	r2, r3, #1
   18f44:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f48:	462b      	mov	r3, r5
   18f4a:	2201      	movs	r2, #1
   18f4c:	f7fe bd3d 	b.w	179ca <d_print_comp_inner+0xc9e>
   18f50:	2e00      	cmp	r6, #0
   18f52:	f000 844d 	beq.w	197f0 <d_print_comp_inner+0x2ac4>
   18f56:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18f5a:	f040 8488 	bne.w	1986e <d_print_comp_inner+0x2b42>
   18f5e:	6873      	ldr	r3, [r6, #4]
   18f60:	b373      	cbz	r3, 18fc0 <d_print_comp_inner+0x2294>
   18f62:	4607      	mov	r7, r0
   18f64:	e007      	b.n	18f76 <d_print_comp_inner+0x224a>
   18f66:	3701      	adds	r7, #1
   18f68:	68b6      	ldr	r6, [r6, #8]
   18f6a:	b356      	cbz	r6, 18fc2 <d_print_comp_inner+0x2296>
   18f6c:	7833      	ldrb	r3, [r6, #0]
   18f6e:	2b2f      	cmp	r3, #47	; 0x2f
   18f70:	d127      	bne.n	18fc2 <d_print_comp_inner+0x2296>
   18f72:	6873      	ldr	r3, [r6, #4]
   18f74:	b32b      	cbz	r3, 18fc2 <d_print_comp_inner+0x2296>
   18f76:	781a      	ldrb	r2, [r3, #0]
   18f78:	2a4a      	cmp	r2, #74	; 0x4a
   18f7a:	d1f4      	bne.n	18f66 <d_print_comp_inner+0x223a>
   18f7c:	6859      	ldr	r1, [r3, #4]
   18f7e:	4620      	mov	r0, r4
   18f80:	f7fb fe2c 	bl	14bdc <d_find_pack>
   18f84:	b198      	cbz	r0, 18fae <d_print_comp_inner+0x2282>
   18f86:	7803      	ldrb	r3, [r0, #0]
   18f88:	2b2f      	cmp	r3, #47	; 0x2f
   18f8a:	f040 846c 	bne.w	19866 <d_print_comp_inner+0x2b3a>
   18f8e:	6843      	ldr	r3, [r0, #4]
   18f90:	2b00      	cmp	r3, #0
   18f92:	f000 8464 	beq.w	1985e <d_print_comp_inner+0x2b32>
   18f96:	4603      	mov	r3, r0
   18f98:	2000      	movs	r0, #0
   18f9a:	e004      	b.n	18fa6 <d_print_comp_inner+0x227a>
   18f9c:	781a      	ldrb	r2, [r3, #0]
   18f9e:	2a2f      	cmp	r2, #47	; 0x2f
   18fa0:	d105      	bne.n	18fae <d_print_comp_inner+0x2282>
   18fa2:	685a      	ldr	r2, [r3, #4]
   18fa4:	b11a      	cbz	r2, 18fae <d_print_comp_inner+0x2282>
   18fa6:	689b      	ldr	r3, [r3, #8]
   18fa8:	3001      	adds	r0, #1
   18faa:	2b00      	cmp	r3, #0
   18fac:	d1f6      	bne.n	18f9c <d_print_comp_inner+0x2270>
   18fae:	4407      	add	r7, r0
   18fb0:	e7da      	b.n	18f68 <d_print_comp_inner+0x223c>
   18fb2:	bf00      	nop
   18fb4:	00024444 	.word	0x00024444
   18fb8:	00024498 	.word	0x00024498
   18fbc:	000244a8 	.word	0x000244a8
   18fc0:	461f      	mov	r7, r3
   18fc2:	4639      	mov	r1, r7
   18fc4:	4620      	mov	r0, r4
   18fc6:	f7fb fe8d 	bl	14ce4 <d_append_num>
   18fca:	f7fd bf7d 	b.w	16ec8 <d_print_comp_inner+0x19c>
   18fce:	2500      	movs	r5, #0
   18fd0:	4619      	mov	r1, r3
   18fd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fda:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18fde:	4620      	mov	r0, r4
   18fe0:	4798      	blx	r3
   18fe2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fe6:	1c5a      	adds	r2, r3, #1
   18fe8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18fec:	462b      	mov	r3, r5
   18fee:	2101      	movs	r1, #1
   18ff0:	f7fe bb8e 	b.w	17710 <d_print_comp_inner+0x9e4>
   18ff4:	2600      	movs	r6, #0
   18ff6:	4619      	mov	r1, r3
   18ff8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ffc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19000:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19004:	4620      	mov	r0, r4
   19006:	4798      	blx	r3
   19008:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1900c:	1c5a      	adds	r2, r3, #1
   1900e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19012:	4633      	mov	r3, r6
   19014:	2101      	movs	r1, #1
   19016:	f7fe bb65 	b.w	176e4 <d_print_comp_inner+0x9b8>
   1901a:	2200      	movs	r2, #0
   1901c:	4619      	mov	r1, r3
   1901e:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   19022:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19026:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1902a:	4620      	mov	r0, r4
   1902c:	4798      	blx	r3
   1902e:	2329      	movs	r3, #41	; 0x29
   19030:	7023      	strb	r3, [r4, #0]
   19032:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19036:	782a      	ldrb	r2, [r5, #0]
   19038:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1903c:	2101      	movs	r1, #1
   1903e:	3301      	adds	r3, #1
   19040:	2a3d      	cmp	r2, #61	; 0x3d
   19042:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19046:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1904a:	f47e af58 	bne.w	17efe <d_print_comp_inner+0x11d2>
   1904e:	e63f      	b.n	18cd0 <d_print_comp_inner+0x1fa4>
   19050:	2700      	movs	r7, #0
   19052:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19056:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1905a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1905e:	4620      	mov	r0, r4
   19060:	4798      	blx	r3
   19062:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19066:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1906a:	3301      	adds	r3, #1
   1906c:	4639      	mov	r1, r7
   1906e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19072:	f7fe bf28 	b.w	17ec6 <d_print_comp_inner+0x119a>
   19076:	2500      	movs	r5, #0
   19078:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1907c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19080:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19084:	4620      	mov	r0, r4
   19086:	4798      	blx	r3
   19088:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1908c:	3301      	adds	r3, #1
   1908e:	4629      	mov	r1, r5
   19090:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19094:	2201      	movs	r2, #1
   19096:	f7ff bb12 	b.w	186be <d_print_comp_inner+0x1992>
   1909a:	781b      	ldrb	r3, [r3, #0]
   1909c:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   190a0:	2901      	cmp	r1, #1
   190a2:	d903      	bls.n	190ac <d_print_comp_inner+0x2380>
   190a4:	3b72      	subs	r3, #114	; 0x72
   190a6:	2b01      	cmp	r3, #1
   190a8:	f63d aead 	bhi.w	16e06 <d_print_comp_inner+0xda>
   190ac:	4641      	mov	r1, r8
   190ae:	4620      	mov	r0, r4
   190b0:	f001 f9c8 	bl	1a444 <d_print_expr_op>
   190b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   190b8:	29ff      	cmp	r1, #255	; 0xff
   190ba:	f000 8271 	beq.w	195a0 <d_print_comp_inner+0x2874>
   190be:	1c4a      	adds	r2, r1, #1
   190c0:	233c      	movs	r3, #60	; 0x3c
   190c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   190c6:	5463      	strb	r3, [r4, r1]
   190c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   190cc:	68ab      	ldr	r3, [r5, #8]
   190ce:	4641      	mov	r1, r8
   190d0:	685a      	ldr	r2, [r3, #4]
   190d2:	4620      	mov	r0, r4
   190d4:	f000 fbce 	bl	19874 <d_print_comp>
   190d8:	2202      	movs	r2, #2
   190da:	49d5      	ldr	r1, [pc, #852]	; (19430 <d_print_comp_inner+0x2704>)
   190dc:	4620      	mov	r0, r4
   190de:	f7fb fb51 	bl	14784 <d_append_buffer>
   190e2:	68ab      	ldr	r3, [r5, #8]
   190e4:	4641      	mov	r1, r8
   190e6:	689a      	ldr	r2, [r3, #8]
   190e8:	4620      	mov	r0, r4
   190ea:	f000 fbc3 	bl	19874 <d_print_comp>
   190ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   190f2:	29ff      	cmp	r1, #255	; 0xff
   190f4:	f000 81df 	beq.w	194b6 <d_print_comp_inner+0x278a>
   190f8:	2329      	movs	r3, #41	; 0x29
   190fa:	1c4a      	adds	r2, r1, #1
   190fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19100:	5463      	strb	r3, [r4, r1]
   19102:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19106:	f7fd bedf 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1910a:	4632      	mov	r2, r6
   1910c:	4641      	mov	r1, r8
   1910e:	4620      	mov	r0, r4
   19110:	f000 fbb0 	bl	19874 <d_print_comp>
   19114:	f7fd bed8 	b.w	16ec8 <d_print_comp_inner+0x19c>
   19118:	2600      	movs	r6, #0
   1911a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1911e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19122:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19126:	4620      	mov	r0, r4
   19128:	4798      	blx	r3
   1912a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1912e:	3301      	adds	r3, #1
   19130:	4631      	mov	r1, r6
   19132:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19136:	2201      	movs	r2, #1
   19138:	f7fe ba55 	b.w	175e6 <d_print_comp_inner+0x8ba>
   1913c:	49bd      	ldr	r1, [pc, #756]	; (19434 <d_print_comp_inner+0x2708>)
   1913e:	6870      	ldr	r0, [r6, #4]
   19140:	f005 fe8c 	bl	1ee5c <strncmp>
   19144:	2800      	cmp	r0, #0
   19146:	f47e aabd 	bne.w	176c4 <d_print_comp_inner+0x998>
   1914a:	68aa      	ldr	r2, [r5, #8]
   1914c:	4641      	mov	r1, r8
   1914e:	4620      	mov	r0, r4
   19150:	f000 fb90 	bl	19874 <d_print_comp>
   19154:	2202      	movs	r2, #2
   19156:	49b8      	ldr	r1, [pc, #736]	; (19438 <d_print_comp_inner+0x270c>)
   19158:	4620      	mov	r0, r4
   1915a:	f7fb fb13 	bl	14784 <d_append_buffer>
   1915e:	f7fe badd 	b.w	1771c <d_print_comp_inner+0x9f0>
   19162:	68aa      	ldr	r2, [r5, #8]
   19164:	7817      	ldrb	r7, [r2, #0]
   19166:	2f00      	cmp	r7, #0
   19168:	f47e aea8 	bne.w	17ebc <d_print_comp_inner+0x1190>
   1916c:	2b3d      	cmp	r3, #61	; 0x3d
   1916e:	f000 82ef 	beq.w	19750 <d_print_comp_inner+0x2a24>
   19172:	68aa      	ldr	r2, [r5, #8]
   19174:	4641      	mov	r1, r8
   19176:	4620      	mov	r0, r4
   19178:	3e02      	subs	r6, #2
   1917a:	f000 fb7b 	bl	19874 <d_print_comp>
   1917e:	2e04      	cmp	r6, #4
   19180:	f63d aea2 	bhi.w	16ec8 <d_print_comp_inner+0x19c>
   19184:	e8df f006 	tbb	[pc, r6]
   19188:	0a111826 	.word	0x0a111826
   1918c:	03          	.byte	0x03
   1918d:	00          	.byte	0x00
   1918e:	4620      	mov	r0, r4
   19190:	2203      	movs	r2, #3
   19192:	49aa      	ldr	r1, [pc, #680]	; (1943c <d_print_comp_inner+0x2710>)
   19194:	f7fb faf6 	bl	14784 <d_append_buffer>
   19198:	f7fd be96 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1919c:	4620      	mov	r0, r4
   1919e:	2202      	movs	r2, #2
   191a0:	49a7      	ldr	r1, [pc, #668]	; (19440 <d_print_comp_inner+0x2714>)
   191a2:	f7fb faef 	bl	14784 <d_append_buffer>
   191a6:	f7fd be8f 	b.w	16ec8 <d_print_comp_inner+0x19c>
   191aa:	4620      	mov	r0, r4
   191ac:	2202      	movs	r2, #2
   191ae:	49a5      	ldr	r1, [pc, #660]	; (19444 <d_print_comp_inner+0x2718>)
   191b0:	f7fb fae8 	bl	14784 <d_append_buffer>
   191b4:	f7fd be88 	b.w	16ec8 <d_print_comp_inner+0x19c>
   191b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191bc:	29ff      	cmp	r1, #255	; 0xff
   191be:	f000 831a 	beq.w	197f6 <d_print_comp_inner+0x2aca>
   191c2:	236c      	movs	r3, #108	; 0x6c
   191c4:	1c4a      	adds	r2, r1, #1
   191c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   191ca:	5463      	strb	r3, [r4, r1]
   191cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   191d0:	f7fd be7a 	b.w	16ec8 <d_print_comp_inner+0x19c>
   191d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191d8:	29ff      	cmp	r1, #255	; 0xff
   191da:	f000 82db 	beq.w	19794 <d_print_comp_inner+0x2a68>
   191de:	2375      	movs	r3, #117	; 0x75
   191e0:	1c4a      	adds	r2, r1, #1
   191e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   191e6:	5463      	strb	r3, [r4, r1]
   191e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   191ec:	f7fd be6c 	b.w	16ec8 <d_print_comp_inner+0x19c>
   191f0:	2600      	movs	r6, #0
   191f2:	4619      	mov	r1, r3
   191f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191fc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19200:	4620      	mov	r0, r4
   19202:	4798      	blx	r3
   19204:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19208:	1c5a      	adds	r2, r3, #1
   1920a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1920e:	4633      	mov	r3, r6
   19210:	2101      	movs	r1, #1
   19212:	f7fe bd3c 	b.w	17c8e <d_print_comp_inner+0xf62>
   19216:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1921a:	f7fe bf95 	b.w	18148 <d_print_comp_inner+0x141c>
   1921e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19222:	29ff      	cmp	r1, #255	; 0xff
   19224:	f000 8244 	beq.w	196b0 <d_print_comp_inner+0x2984>
   19228:	2320      	movs	r3, #32
   1922a:	1c4a      	adds	r2, r1, #1
   1922c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19230:	5463      	strb	r3, [r4, r1]
   19232:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19236:	e447      	b.n	18ac8 <d_print_comp_inner+0x1d9c>
   19238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1923c:	29ff      	cmp	r1, #255	; 0xff
   1923e:	f000 826e 	beq.w	1971e <d_print_comp_inner+0x29f2>
   19242:	2320      	movs	r3, #32
   19244:	1c4a      	adds	r2, r1, #1
   19246:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1924a:	5463      	strb	r3, [r4, r1]
   1924c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19250:	e419      	b.n	18a86 <d_print_comp_inner+0x1d5a>
   19252:	2500      	movs	r5, #0
   19254:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19258:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1925c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19260:	4620      	mov	r0, r4
   19262:	4798      	blx	r3
   19264:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19268:	3301      	adds	r3, #1
   1926a:	4629      	mov	r1, r5
   1926c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19270:	e4dd      	b.n	18c2e <d_print_comp_inner+0x1f02>
   19272:	4664      	mov	r4, ip
   19274:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   19278:	b1d8      	cbz	r0, 192b2 <d_print_comp_inner+0x2586>
   1927a:	6802      	ldr	r2, [r0, #0]
   1927c:	4291      	cmp	r1, r2
   1927e:	d00a      	beq.n	19296 <d_print_comp_inner+0x256a>
   19280:	4603      	mov	r3, r0
   19282:	e004      	b.n	1928e <d_print_comp_inner+0x2562>
   19284:	685b      	ldr	r3, [r3, #4]
   19286:	b1a3      	cbz	r3, 192b2 <d_print_comp_inner+0x2586>
   19288:	681a      	ldr	r2, [r3, #0]
   1928a:	4291      	cmp	r1, r2
   1928c:	d003      	beq.n	19296 <d_print_comp_inner+0x256a>
   1928e:	4295      	cmp	r5, r2
   19290:	d1f8      	bne.n	19284 <d_print_comp_inner+0x2558>
   19292:	4298      	cmp	r0, r3
   19294:	d0f6      	beq.n	19284 <d_print_comp_inner+0x2558>
   19296:	3104      	adds	r1, #4
   19298:	4620      	mov	r0, r4
   1929a:	f7fb fc83 	bl	14ba4 <d_lookup_template_argument.isra.6>
   1929e:	2800      	cmp	r0, #0
   192a0:	f43d ae26 	beq.w	16ef0 <d_print_comp_inner+0x1c4>
   192a4:	7803      	ldrb	r3, [r0, #0]
   192a6:	2b2f      	cmp	r3, #47	; 0x2f
   192a8:	f43d ae11 	beq.w	16ece <d_print_comp_inner+0x1a2>
   192ac:	4601      	mov	r1, r0
   192ae:	f7fe bc30 	b.w	17b12 <d_print_comp_inner+0xde6>
   192b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   192b6:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   192ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   192be:	3104      	adds	r1, #4
   192c0:	4620      	mov	r0, r4
   192c2:	f7fb fc6f 	bl	14ba4 <d_lookup_template_argument.isra.6>
   192c6:	2800      	cmp	r0, #0
   192c8:	f43d ae10 	beq.w	16eec <d_print_comp_inner+0x1c0>
   192cc:	2701      	movs	r7, #1
   192ce:	e7e9      	b.n	192a4 <d_print_comp_inner+0x2578>
   192d0:	2600      	movs	r6, #0
   192d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192d6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   192da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192de:	4620      	mov	r0, r4
   192e0:	4798      	blx	r3
   192e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192e6:	f8da 5004 	ldr.w	r5, [sl, #4]
   192ea:	3301      	adds	r3, #1
   192ec:	4631      	mov	r1, r6
   192ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192f2:	f7ff b85a 	b.w	183aa <d_print_comp_inner+0x167e>
   192f6:	68aa      	ldr	r2, [r5, #8]
   192f8:	4641      	mov	r1, r8
   192fa:	4620      	mov	r0, r4
   192fc:	f000 faba 	bl	19874 <d_print_comp>
   19300:	9b06      	ldr	r3, [sp, #24]
   19302:	9a00      	ldr	r2, [sp, #0]
   19304:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19308:	2b00      	cmp	r3, #0
   1930a:	f43e ac9d 	beq.w	17c48 <d_print_comp_inner+0xf1c>
   1930e:	f7fd bddb 	b.w	16ec8 <d_print_comp_inner+0x19c>
   19312:	255f      	movs	r5, #95	; 0x5f
   19314:	f7ff ba10 	b.w	18738 <d_print_comp_inner+0x1a0c>
   19318:	2500      	movs	r5, #0
   1931a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1931e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19322:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19326:	4620      	mov	r0, r4
   19328:	4798      	blx	r3
   1932a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1932e:	3301      	adds	r3, #1
   19330:	4629      	mov	r1, r5
   19332:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19336:	f7ff bb82 	b.w	18a3e <d_print_comp_inner+0x1d12>
   1933a:	4648      	mov	r0, r9
   1933c:	4942      	ldr	r1, [pc, #264]	; (19448 <d_print_comp_inner+0x271c>)
   1933e:	f005 fba3 	bl	1ea88 <strcmp>
   19342:	b120      	cbz	r0, 1934e <d_print_comp_inner+0x2622>
   19344:	463a      	mov	r2, r7
   19346:	4641      	mov	r1, r8
   19348:	4620      	mov	r0, r4
   1934a:	f001 f87b 	bl	1a444 <d_print_expr_op>
   1934e:	68ab      	ldr	r3, [r5, #8]
   19350:	4641      	mov	r1, r8
   19352:	689a      	ldr	r2, [r3, #8]
   19354:	4620      	mov	r0, r4
   19356:	f001 f8b3 	bl	1a4c0 <d_print_subexpr>
   1935a:	f7fd bd9d 	b.w	16e98 <d_print_comp_inner+0x16c>
   1935e:	2600      	movs	r6, #0
   19360:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19364:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19368:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1936c:	4620      	mov	r0, r4
   1936e:	4798      	blx	r3
   19370:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19374:	3301      	adds	r3, #1
   19376:	4631      	mov	r1, r6
   19378:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1937c:	f7ff bb88 	b.w	18a90 <d_print_comp_inner+0x1d64>
   19380:	2500      	movs	r5, #0
   19382:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19386:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1938a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1938e:	4620      	mov	r0, r4
   19390:	4798      	blx	r3
   19392:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19396:	3301      	adds	r3, #1
   19398:	4629      	mov	r1, r5
   1939a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1939e:	f7fe bb59 	b.w	17a54 <d_print_comp_inner+0xd28>
   193a2:	2500      	movs	r5, #0
   193a4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   193a8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   193ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   193b0:	4798      	blx	r3
   193b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193b6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   193ba:	3301      	adds	r3, #1
   193bc:	4629      	mov	r1, r5
   193be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193c2:	f7fe bb2b 	b.w	17a1c <d_print_comp_inner+0xcf0>
   193c6:	6840      	ldr	r0, [r0, #4]
   193c8:	2800      	cmp	r0, #0
   193ca:	f43d ad91 	beq.w	16ef0 <d_print_comp_inner+0x1c4>
   193ce:	f7fe b959 	b.w	17684 <d_print_comp_inner+0x958>
   193d2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   193d6:	4619      	mov	r1, r3
   193d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193e0:	4620      	mov	r0, r4
   193e2:	4798      	blx	r3
   193e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193e8:	1c5a      	adds	r2, r3, #1
   193ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   193ee:	462b      	mov	r3, r5
   193f0:	f7ff bb14 	b.w	18a1c <d_print_comp_inner+0x1cf0>
   193f4:	6873      	ldr	r3, [r6, #4]
   193f6:	781a      	ldrb	r2, [r3, #0]
   193f8:	2a01      	cmp	r2, #1
   193fa:	f000 8153 	beq.w	196a4 <d_print_comp_inner+0x2978>
   193fe:	f896 a000 	ldrb.w	sl, [r6]
   19402:	f7ff bae0 	b.w	189c6 <d_print_comp_inner+0x1c9a>
   19406:	2500      	movs	r5, #0
   19408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1940c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19414:	4620      	mov	r0, r4
   19416:	4798      	blx	r3
   19418:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1941c:	3301      	adds	r3, #1
   1941e:	4629      	mov	r1, r5
   19420:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19424:	f7ff bb55 	b.w	18ad2 <d_print_comp_inner+0x1da6>
   19428:	4654      	mov	r4, sl
   1942a:	f7fe be8d 	b.w	18148 <d_print_comp_inner+0x141c>
   1942e:	bf00      	nop
   19430:	00024644 	.word	0x00024644
   19434:	000244ac 	.word	0x000244ac
   19438:	000244b4 	.word	0x000244b4
   1943c:	00024660 	.word	0x00024660
   19440:	0002465c 	.word	0x0002465c
   19444:	00024658 	.word	0x00024658
   19448:	0002444c 	.word	0x0002444c
   1944c:	686a      	ldr	r2, [r5, #4]
   1944e:	4641      	mov	r1, r8
   19450:	4620      	mov	r0, r4
   19452:	f001 f835 	bl	1a4c0 <d_print_subexpr>
   19456:	4620      	mov	r0, r4
   19458:	2203      	movs	r2, #3
   1945a:	49e2      	ldr	r1, [pc, #904]	; (197e4 <d_print_comp_inner+0x2ab8>)
   1945c:	f7fb f992 	bl	14784 <d_append_buffer>
   19460:	f7fd bd32 	b.w	16ec8 <d_print_comp_inner+0x19c>
   19464:	ab14      	add	r3, sp, #80	; 0x50
   19466:	9603      	str	r6, [sp, #12]
   19468:	f843 cd48 	str.w	ip, [r3, #-72]!
   1946c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19470:	f7fe b85a 	b.w	17528 <d_print_comp_inner+0x7fc>
   19474:	2700      	movs	r7, #0
   19476:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1947a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1947e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19482:	4620      	mov	r0, r4
   19484:	4798      	blx	r3
   19486:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1948a:	3301      	adds	r3, #1
   1948c:	4639      	mov	r1, r7
   1948e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19492:	e41d      	b.n	18cd0 <d_print_comp_inner+0x1fa4>
   19494:	2600      	movs	r6, #0
   19496:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1949a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1949e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194a2:	4620      	mov	r0, r4
   194a4:	4798      	blx	r3
   194a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194aa:	3301      	adds	r3, #1
   194ac:	4631      	mov	r1, r6
   194ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194b2:	f7ff bb8a 	b.w	18bca <d_print_comp_inner+0x1e9e>
   194b6:	2500      	movs	r5, #0
   194b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194bc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   194c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194c4:	4620      	mov	r0, r4
   194c6:	4798      	blx	r3
   194c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194cc:	3301      	adds	r3, #1
   194ce:	4629      	mov	r1, r5
   194d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194d4:	e610      	b.n	190f8 <d_print_comp_inner+0x23cc>
   194d6:	2600      	movs	r6, #0
   194d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194dc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   194e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194e4:	4620      	mov	r0, r4
   194e6:	4798      	blx	r3
   194e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194ec:	3301      	adds	r3, #1
   194ee:	4631      	mov	r1, r6
   194f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194f4:	f7ff bb8a 	b.w	18c0c <d_print_comp_inner+0x1ee0>
   194f8:	685a      	ldr	r2, [r3, #4]
   194fa:	6891      	ldr	r1, [r2, #8]
   194fc:	2901      	cmp	r1, #1
   194fe:	f47d ac90 	bne.w	16e22 <d_print_comp_inner+0xf6>
   19502:	6852      	ldr	r2, [r2, #4]
   19504:	7812      	ldrb	r2, [r2, #0]
   19506:	2a3e      	cmp	r2, #62	; 0x3e
   19508:	f47d ac8b 	bne.w	16e22 <d_print_comp_inner+0xf6>
   1950c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19510:	29ff      	cmp	r1, #255	; 0xff
   19512:	d10f      	bne.n	19534 <d_print_comp_inner+0x2808>
   19514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19518:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1951c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19520:	4620      	mov	r0, r4
   19522:	4798      	blx	r3
   19524:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19528:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1952c:	3301      	adds	r3, #1
   1952e:	4631      	mov	r1, r6
   19530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19534:	2328      	movs	r3, #40	; 0x28
   19536:	1c4a      	adds	r2, r1, #1
   19538:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1953c:	5463      	strb	r3, [r4, r1]
   1953e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19542:	686b      	ldr	r3, [r5, #4]
   19544:	f7fd bc6d 	b.w	16e22 <d_print_comp_inner+0xf6>
   19548:	2500      	movs	r5, #0
   1954a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1954e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19552:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19556:	4620      	mov	r0, r4
   19558:	4798      	blx	r3
   1955a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1955e:	3301      	adds	r3, #1
   19560:	4629      	mov	r1, r5
   19562:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19566:	f7ff bb0b 	b.w	18b80 <d_print_comp_inner+0x1e54>
   1956a:	f8db b004 	ldr.w	fp, [fp, #4]
   1956e:	f1bb 0f00 	cmp.w	fp, #0
   19572:	f43e ade9 	beq.w	18148 <d_print_comp_inner+0x141c>
   19576:	f7fd bfc3 	b.w	17500 <d_print_comp_inner+0x7d4>
   1957a:	9b02      	ldr	r3, [sp, #8]
   1957c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19580:	f7fd bfdb 	b.w	1753a <d_print_comp_inner+0x80e>
   19584:	6893      	ldr	r3, [r2, #8]
   19586:	781b      	ldrb	r3, [r3, #0]
   19588:	2b29      	cmp	r3, #41	; 0x29
   1958a:	bf1c      	itt	ne
   1958c:	2301      	movne	r3, #1
   1958e:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   19592:	6852      	ldr	r2, [r2, #4]
   19594:	4641      	mov	r1, r8
   19596:	4620      	mov	r0, r4
   19598:	f000 ff92 	bl	1a4c0 <d_print_subexpr>
   1959c:	f7fd bc52 	b.w	16e44 <d_print_comp_inner+0x118>
   195a0:	2600      	movs	r6, #0
   195a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195a6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   195aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195ae:	4620      	mov	r0, r4
   195b0:	4798      	blx	r3
   195b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195b6:	3301      	adds	r3, #1
   195b8:	4631      	mov	r1, r6
   195ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195be:	e57e      	b.n	190be <d_print_comp_inner+0x2392>
   195c0:	6872      	ldr	r2, [r6, #4]
   195c2:	4641      	mov	r1, r8
   195c4:	4620      	mov	r0, r4
   195c6:	f000 ff7b 	bl	1a4c0 <d_print_subexpr>
   195ca:	464a      	mov	r2, r9
   195cc:	4641      	mov	r1, r8
   195ce:	4620      	mov	r0, r4
   195d0:	f000 ff38 	bl	1a444 <d_print_expr_op>
   195d4:	f7fd bc78 	b.w	16ec8 <d_print_comp_inner+0x19c>
   195d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195dc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195e4:	4620      	mov	r0, r4
   195e6:	4798      	blx	r3
   195e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195ec:	3301      	adds	r3, #1
   195ee:	4629      	mov	r1, r5
   195f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195f4:	f7fd bfad 	b.w	17552 <d_print_comp_inner+0x826>
   195f8:	464a      	mov	r2, r9
   195fa:	4641      	mov	r1, r8
   195fc:	4620      	mov	r0, r4
   195fe:	f000 ff5f 	bl	1a4c0 <d_print_subexpr>
   19602:	4652      	mov	r2, sl
   19604:	4641      	mov	r1, r8
   19606:	4620      	mov	r0, r4
   19608:	f000 ff1c 	bl	1a444 <d_print_expr_op>
   1960c:	463a      	mov	r2, r7
   1960e:	4641      	mov	r1, r8
   19610:	4620      	mov	r0, r4
   19612:	f000 ff55 	bl	1a4c0 <d_print_subexpr>
   19616:	4620      	mov	r0, r4
   19618:	2203      	movs	r2, #3
   1961a:	4973      	ldr	r1, [pc, #460]	; (197e8 <d_print_comp_inner+0x2abc>)
   1961c:	f7fb f8b2 	bl	14784 <d_append_buffer>
   19620:	462a      	mov	r2, r5
   19622:	4641      	mov	r1, r8
   19624:	4620      	mov	r0, r4
   19626:	f000 ff4b 	bl	1a4c0 <d_print_subexpr>
   1962a:	f7fd bc4d 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1962e:	454f      	cmp	r7, r9
   19630:	f67f ae6f 	bls.w	19312 <d_print_comp_inner+0x25e6>
   19634:	2d5f      	cmp	r5, #95	; 0x5f
   19636:	f47f ae6c 	bne.w	19312 <d_print_comp_inner+0x25e6>
   1963a:	28ff      	cmp	r0, #255	; 0xff
   1963c:	f63f a87c 	bhi.w	18738 <d_print_comp_inner+0x1a0c>
   19640:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19644:	29ff      	cmp	r1, #255	; 0xff
   19646:	b2c5      	uxtb	r5, r0
   19648:	d10f      	bne.n	1966a <d_print_comp_inner+0x293e>
   1964a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1964e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19652:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19656:	4620      	mov	r0, r4
   19658:	4798      	blx	r3
   1965a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1965e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   19662:	3301      	adds	r3, #1
   19664:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19668:	2100      	movs	r1, #0
   1966a:	1c4b      	adds	r3, r1, #1
   1966c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19670:	464e      	mov	r6, r9
   19672:	5465      	strb	r5, [r4, r1]
   19674:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19678:	f7ff b868 	b.w	1874c <d_print_comp_inner+0x1a20>
   1967c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19680:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19684:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19688:	4620      	mov	r0, r4
   1968a:	4798      	blx	r3
   1968c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19690:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19694:	3301      	adds	r3, #1
   19696:	4631      	mov	r1, r6
   19698:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1969c:	f7ff bbe5 	b.w	18e6a <d_print_comp_inner+0x213e>
   196a0:	4691      	mov	r9, r2
   196a2:	e5e7      	b.n	19274 <d_print_comp_inner+0x2548>
   196a4:	68b2      	ldr	r2, [r6, #8]
   196a6:	7812      	ldrb	r2, [r2, #0]
   196a8:	2a29      	cmp	r2, #41	; 0x29
   196aa:	bf08      	it	eq
   196ac:	461e      	moveq	r6, r3
   196ae:	e6a6      	b.n	193fe <d_print_comp_inner+0x26d2>
   196b0:	2500      	movs	r5, #0
   196b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196b6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   196ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196be:	4620      	mov	r0, r4
   196c0:	4798      	blx	r3
   196c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196c6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   196ca:	3301      	adds	r3, #1
   196cc:	4629      	mov	r1, r5
   196ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196d2:	e5a9      	b.n	19228 <d_print_comp_inner+0x24fc>
   196d4:	2600      	movs	r6, #0
   196d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196da:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   196de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196e2:	4620      	mov	r0, r4
   196e4:	4798      	blx	r3
   196e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196ea:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   196ee:	3301      	adds	r3, #1
   196f0:	4631      	mov	r1, r6
   196f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196f6:	f7fd bbc8 	b.w	16e8a <d_print_comp_inner+0x15e>
   196fa:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   196fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19702:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19706:	4620      	mov	r0, r4
   19708:	4798      	blx	r3
   1970a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1970e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19712:	3301      	adds	r3, #1
   19714:	4631      	mov	r1, r6
   19716:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1971a:	f7fd bba4 	b.w	16e66 <d_print_comp_inner+0x13a>
   1971e:	2600      	movs	r6, #0
   19720:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19724:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19728:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1972c:	4620      	mov	r0, r4
   1972e:	4798      	blx	r3
   19730:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19734:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19738:	3301      	adds	r3, #1
   1973a:	4631      	mov	r1, r6
   1973c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19740:	e57f      	b.n	19242 <d_print_comp_inner+0x2516>
   19742:	6841      	ldr	r1, [r0, #4]
   19744:	2900      	cmp	r1, #0
   19746:	f43d abd0 	beq.w	16eea <d_print_comp_inner+0x1be>
   1974a:	780b      	ldrb	r3, [r1, #0]
   1974c:	f7fe b9e1 	b.w	17b12 <d_print_comp_inner+0xde6>
   19750:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19754:	29ff      	cmp	r1, #255	; 0xff
   19756:	d00d      	beq.n	19774 <d_print_comp_inner+0x2a48>
   19758:	232d      	movs	r3, #45	; 0x2d
   1975a:	1c4a      	adds	r2, r1, #1
   1975c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19760:	5463      	strb	r3, [r4, r1]
   19762:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19766:	e504      	b.n	19172 <d_print_comp_inner+0x2446>
   19768:	2205      	movs	r2, #5
   1976a:	4920      	ldr	r1, [pc, #128]	; (197ec <d_print_comp_inner+0x2ac0>)
   1976c:	f7fb f80a 	bl	14784 <d_append_buffer>
   19770:	f7fd bbaa 	b.w	16ec8 <d_print_comp_inner+0x19c>
   19774:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19778:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   1977c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19780:	4798      	blx	r3
   19782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19786:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1978a:	3301      	adds	r3, #1
   1978c:	4639      	mov	r1, r7
   1978e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19792:	e7e1      	b.n	19758 <d_print_comp_inner+0x2a2c>
   19794:	2500      	movs	r5, #0
   19796:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1979a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1979e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197a2:	4620      	mov	r0, r4
   197a4:	4798      	blx	r3
   197a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197aa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   197ae:	3301      	adds	r3, #1
   197b0:	4629      	mov	r1, r5
   197b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197b6:	e512      	b.n	191de <d_print_comp_inner+0x24b2>
   197b8:	2700      	movs	r7, #0
   197ba:	f7ff b913 	b.w	189e4 <d_print_comp_inner+0x1cb8>
   197be:	2500      	movs	r5, #0
   197c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   197c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197cc:	4620      	mov	r0, r4
   197ce:	4798      	blx	r3
   197d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197d4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   197d8:	3301      	adds	r3, #1
   197da:	4629      	mov	r1, r5
   197dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197e0:	f7fd bb6b 	b.w	16eba <d_print_comp_inner+0x18e>
   197e4:	00022bd4 	.word	0x00022bd4
   197e8:	0002464c 	.word	0x0002464c
   197ec:	00024664 	.word	0x00024664
   197f0:	4637      	mov	r7, r6
   197f2:	f7ff bbe6 	b.w	18fc2 <d_print_comp_inner+0x2296>
   197f6:	2500      	movs	r5, #0
   197f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19800:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19804:	4620      	mov	r0, r4
   19806:	4798      	blx	r3
   19808:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1980c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19810:	3301      	adds	r3, #1
   19812:	4629      	mov	r1, r5
   19814:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19818:	e4d3      	b.n	191c2 <d_print_comp_inner+0x2496>
   1981a:	4671      	mov	r1, lr
   1981c:	6002      	str	r2, [r0, #0]
   1981e:	3104      	adds	r1, #4
   19820:	4620      	mov	r0, r4
   19822:	f7fb f9bf 	bl	14ba4 <d_lookup_template_argument.isra.6>
   19826:	2800      	cmp	r0, #0
   19828:	f47f ad3c 	bne.w	192a4 <d_print_comp_inner+0x2578>
   1982c:	f7fd bb60 	b.w	16ef0 <d_print_comp_inner+0x1c4>
   19830:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19834:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19838:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1983c:	4620      	mov	r0, r4
   1983e:	4798      	blx	r3
   19840:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19844:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19848:	3301      	adds	r3, #1
   1984a:	4631      	mov	r1, r6
   1984c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19850:	f7fe bc02 	b.w	18058 <d_print_comp_inner+0x132c>
   19854:	2301      	movs	r3, #1
   19856:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1985a:	f7fd bb35 	b.w	16ec8 <d_print_comp_inner+0x19c>
   1985e:	4618      	mov	r0, r3
   19860:	4407      	add	r7, r0
   19862:	f7ff bb81 	b.w	18f68 <d_print_comp_inner+0x223c>
   19866:	2000      	movs	r0, #0
   19868:	4407      	add	r7, r0
   1986a:	f7ff bb7d 	b.w	18f68 <d_print_comp_inner+0x223c>
   1986e:	4607      	mov	r7, r0
   19870:	f7ff bba7 	b.w	18fc2 <d_print_comp_inner+0x2296>

00019874 <d_print_comp>:
   19874:	b510      	push	{r4, lr}
   19876:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1987a:	b082      	sub	sp, #8
   1987c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19880:	4604      	mov	r4, r0
   19882:	e88d 000c 	stmia.w	sp, {r2, r3}
   19886:	f7fd fa51 	bl	16d2c <d_print_comp_inner>
   1988a:	9b01      	ldr	r3, [sp, #4]
   1988c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19890:	b002      	add	sp, #8
   19892:	bd10      	pop	{r4, pc}

00019894 <d_print_mod>:
   19894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19898:	7813      	ldrb	r3, [r2, #0]
   1989a:	3b03      	subs	r3, #3
   1989c:	b082      	sub	sp, #8
   1989e:	4615      	mov	r5, r2
   198a0:	4604      	mov	r4, r0
   198a2:	4688      	mov	r8, r1
   198a4:	2b49      	cmp	r3, #73	; 0x49
   198a6:	f200 8223 	bhi.w	19cf0 <d_print_mod+0x45c>
   198aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   198ae:	01e7      	.short	0x01e7
   198b0:	02210221 	.word	0x02210221
   198b4:	02210221 	.word	0x02210221
   198b8:	02210221 	.word	0x02210221
   198bc:	02210221 	.word	0x02210221
   198c0:	02210221 	.word	0x02210221
   198c4:	02210221 	.word	0x02210221
   198c8:	02210221 	.word	0x02210221
   198cc:	02210221 	.word	0x02210221
   198d0:	02210221 	.word	0x02210221
   198d4:	02210221 	.word	0x02210221
   198d8:	01e90221 	.word	0x01e90221
   198dc:	01a80182 	.word	0x01a80182
   198e0:	018201e9 	.word	0x018201e9
   198e4:	01cd01a8 	.word	0x01cd01a8
   198e8:	006f01da 	.word	0x006f01da
   198ec:	009c008c 	.word	0x009c008c
   198f0:	00cf00ab 	.word	0x00cf00ab
   198f4:	022100f4 	.word	0x022100f4
   198f8:	02210221 	.word	0x02210221
   198fc:	01190221 	.word	0x01190221
   19900:	015c0221 	.word	0x015c0221
   19904:	02210221 	.word	0x02210221
   19908:	02210221 	.word	0x02210221
   1990c:	02210221 	.word	0x02210221
   19910:	02210221 	.word	0x02210221
   19914:	02210221 	.word	0x02210221
   19918:	02210221 	.word	0x02210221
   1991c:	02210221 	.word	0x02210221
   19920:	02210221 	.word	0x02210221
   19924:	02210221 	.word	0x02210221
   19928:	02210221 	.word	0x02210221
   1992c:	02210221 	.word	0x02210221
   19930:	02210221 	.word	0x02210221
   19934:	02210221 	.word	0x02210221
   19938:	02210221 	.word	0x02210221
   1993c:	02210221 	.word	0x02210221
   19940:	004a      	.short	0x004a
   19942:	4dd3      	ldr	r5, [pc, #844]	; (19c90 <d_print_mod+0x3fc>)
   19944:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19948:	f105 0711 	add.w	r7, r5, #17
   1994c:	f04f 0800 	mov.w	r8, #0
   19950:	e008      	b.n	19964 <d_print_mod+0xd0>
   19952:	460b      	mov	r3, r1
   19954:	3101      	adds	r1, #1
   19956:	42bd      	cmp	r5, r7
   19958:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1995c:	54e6      	strb	r6, [r4, r3]
   1995e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19962:	d02d      	beq.n	199c0 <d_print_mod+0x12c>
   19964:	29ff      	cmp	r1, #255	; 0xff
   19966:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1996a:	d1f2      	bne.n	19952 <d_print_mod+0xbe>
   1996c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19970:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19974:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19978:	4620      	mov	r0, r4
   1997a:	4798      	blx	r3
   1997c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19980:	3301      	adds	r3, #1
   19982:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19986:	2101      	movs	r1, #1
   19988:	2300      	movs	r3, #0
   1998a:	e7e4      	b.n	19956 <d_print_mod+0xc2>
   1998c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19990:	29ff      	cmp	r1, #255	; 0xff
   19992:	f000 81f7 	beq.w	19d84 <d_print_mod+0x4f0>
   19996:	1c4a      	adds	r2, r1, #1
   19998:	2320      	movs	r3, #32
   1999a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1999e:	5463      	strb	r3, [r4, r1]
   199a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   199a4:	68aa      	ldr	r2, [r5, #8]
   199a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   199aa:	9200      	str	r2, [sp, #0]
   199ac:	4641      	mov	r1, r8
   199ae:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   199b2:	4620      	mov	r0, r4
   199b4:	9301      	str	r3, [sp, #4]
   199b6:	f7fd f9b9 	bl	16d2c <d_print_comp_inner>
   199ba:	9b01      	ldr	r3, [sp, #4]
   199bc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   199c0:	b002      	add	sp, #8
   199c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   199c6:	f011 0504 	ands.w	r5, r1, #4
   199ca:	d1f9      	bne.n	199c0 <d_print_mod+0x12c>
   199cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   199d0:	2bff      	cmp	r3, #255	; 0xff
   199d2:	f000 821c 	beq.w	19e0e <d_print_mod+0x57a>
   199d6:	222a      	movs	r2, #42	; 0x2a
   199d8:	1c59      	adds	r1, r3, #1
   199da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199de:	54e2      	strb	r2, [r4, r3]
   199e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   199e4:	e7ec      	b.n	199c0 <d_print_mod+0x12c>
   199e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199ea:	29ff      	cmp	r1, #255	; 0xff
   199ec:	f000 81b9 	beq.w	19d62 <d_print_mod+0x4ce>
   199f0:	1c4a      	adds	r2, r1, #1
   199f2:	2326      	movs	r3, #38	; 0x26
   199f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   199f8:	5463      	strb	r3, [r4, r1]
   199fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   199fe:	b002      	add	sp, #8
   19a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a08:	4da2      	ldr	r5, [pc, #648]	; (19c94 <d_print_mod+0x400>)
   19a0a:	f04f 0800 	mov.w	r8, #0
   19a0e:	1caf      	adds	r7, r5, #2
   19a10:	e008      	b.n	19a24 <d_print_mod+0x190>
   19a12:	460b      	mov	r3, r1
   19a14:	3101      	adds	r1, #1
   19a16:	42bd      	cmp	r5, r7
   19a18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a1c:	54e6      	strb	r6, [r4, r3]
   19a1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a22:	d0cd      	beq.n	199c0 <d_print_mod+0x12c>
   19a24:	29ff      	cmp	r1, #255	; 0xff
   19a26:	f815 6b01 	ldrb.w	r6, [r5], #1
   19a2a:	d1f2      	bne.n	19a12 <d_print_mod+0x17e>
   19a2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a38:	4620      	mov	r0, r4
   19a3a:	4798      	blx	r3
   19a3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a40:	3301      	adds	r3, #1
   19a42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a46:	2101      	movs	r1, #1
   19a48:	2300      	movs	r3, #0
   19a4a:	e7e4      	b.n	19a16 <d_print_mod+0x182>
   19a4c:	4d92      	ldr	r5, [pc, #584]	; (19c98 <d_print_mod+0x404>)
   19a4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a52:	f105 0708 	add.w	r7, r5, #8
   19a56:	f04f 0800 	mov.w	r8, #0
   19a5a:	e008      	b.n	19a6e <d_print_mod+0x1da>
   19a5c:	460b      	mov	r3, r1
   19a5e:	3101      	adds	r1, #1
   19a60:	42bd      	cmp	r5, r7
   19a62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a66:	54e6      	strb	r6, [r4, r3]
   19a68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a6c:	d0a8      	beq.n	199c0 <d_print_mod+0x12c>
   19a6e:	29ff      	cmp	r1, #255	; 0xff
   19a70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19a74:	d1f2      	bne.n	19a5c <d_print_mod+0x1c8>
   19a76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a82:	4620      	mov	r0, r4
   19a84:	4798      	blx	r3
   19a86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a8a:	3301      	adds	r3, #1
   19a8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a90:	2101      	movs	r1, #1
   19a92:	2300      	movs	r3, #0
   19a94:	e7e4      	b.n	19a60 <d_print_mod+0x1cc>
   19a96:	4d81      	ldr	r5, [pc, #516]	; (19c9c <d_print_mod+0x408>)
   19a98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a9c:	f105 070a 	add.w	r7, r5, #10
   19aa0:	f04f 0800 	mov.w	r8, #0
   19aa4:	e008      	b.n	19ab8 <d_print_mod+0x224>
   19aa6:	460b      	mov	r3, r1
   19aa8:	3101      	adds	r1, #1
   19aaa:	42bd      	cmp	r5, r7
   19aac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ab0:	54e6      	strb	r6, [r4, r3]
   19ab2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19ab6:	d083      	beq.n	199c0 <d_print_mod+0x12c>
   19ab8:	29ff      	cmp	r1, #255	; 0xff
   19aba:	f815 6b01 	ldrb.w	r6, [r5], #1
   19abe:	d1f2      	bne.n	19aa6 <d_print_mod+0x212>
   19ac0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ac4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ac8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19acc:	4620      	mov	r0, r4
   19ace:	4798      	blx	r3
   19ad0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ad4:	3301      	adds	r3, #1
   19ad6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ada:	2101      	movs	r1, #1
   19adc:	2300      	movs	r3, #0
   19ade:	e7e4      	b.n	19aaa <d_print_mod+0x216>
   19ae0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19ae4:	2b28      	cmp	r3, #40	; 0x28
   19ae6:	d00b      	beq.n	19b00 <d_print_mod+0x26c>
   19ae8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19aec:	2bff      	cmp	r3, #255	; 0xff
   19aee:	f000 8126 	beq.w	19d3e <d_print_mod+0x4aa>
   19af2:	2220      	movs	r2, #32
   19af4:	1c59      	adds	r1, r3, #1
   19af6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19afa:	54e2      	strb	r2, [r4, r3]
   19afc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19b00:	686a      	ldr	r2, [r5, #4]
   19b02:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19b06:	4d66      	ldr	r5, [pc, #408]	; (19ca0 <d_print_mod+0x40c>)
   19b08:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19b0c:	4641      	mov	r1, r8
   19b0e:	4620      	mov	r0, r4
   19b10:	9301      	str	r3, [sp, #4]
   19b12:	9200      	str	r2, [sp, #0]
   19b14:	f7fd f90a 	bl	16d2c <d_print_comp_inner>
   19b18:	9b01      	ldr	r3, [sp, #4]
   19b1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19b1e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19b22:	1cef      	adds	r7, r5, #3
   19b24:	f04f 0800 	mov.w	r8, #0
   19b28:	e009      	b.n	19b3e <d_print_mod+0x2aa>
   19b2a:	460b      	mov	r3, r1
   19b2c:	3101      	adds	r1, #1
   19b2e:	42bd      	cmp	r5, r7
   19b30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b34:	54e6      	strb	r6, [r4, r3]
   19b36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b3a:	f43f af41 	beq.w	199c0 <d_print_mod+0x12c>
   19b3e:	29ff      	cmp	r1, #255	; 0xff
   19b40:	f815 6b01 	ldrb.w	r6, [r5], #1
   19b44:	d1f1      	bne.n	19b2a <d_print_mod+0x296>
   19b46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b52:	4620      	mov	r0, r4
   19b54:	4798      	blx	r3
   19b56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b5a:	3301      	adds	r3, #1
   19b5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b60:	2101      	movs	r1, #1
   19b62:	2300      	movs	r3, #0
   19b64:	e7e3      	b.n	19b2e <d_print_mod+0x29a>
   19b66:	4e4f      	ldr	r6, [pc, #316]	; (19ca4 <d_print_mod+0x410>)
   19b68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b6c:	f106 0a0a 	add.w	sl, r6, #10
   19b70:	f04f 0900 	mov.w	r9, #0
   19b74:	e009      	b.n	19b8a <d_print_mod+0x2f6>
   19b76:	460b      	mov	r3, r1
   19b78:	3101      	adds	r1, #1
   19b7a:	4556      	cmp	r6, sl
   19b7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b80:	54e7      	strb	r7, [r4, r3]
   19b82:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19b86:	f000 80c0 	beq.w	19d0a <d_print_mod+0x476>
   19b8a:	29ff      	cmp	r1, #255	; 0xff
   19b8c:	f816 7b01 	ldrb.w	r7, [r6], #1
   19b90:	d1f1      	bne.n	19b76 <d_print_mod+0x2e2>
   19b92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b96:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19b9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b9e:	4620      	mov	r0, r4
   19ba0:	4798      	blx	r3
   19ba2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ba6:	3301      	adds	r3, #1
   19ba8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bac:	2101      	movs	r1, #1
   19bae:	2300      	movs	r3, #0
   19bb0:	e7e3      	b.n	19b7a <d_print_mod+0x2e6>
   19bb2:	4d3d      	ldr	r5, [pc, #244]	; (19ca8 <d_print_mod+0x414>)
   19bb4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19bb8:	f105 0709 	add.w	r7, r5, #9
   19bbc:	f04f 0800 	mov.w	r8, #0
   19bc0:	e009      	b.n	19bd6 <d_print_mod+0x342>
   19bc2:	460b      	mov	r3, r1
   19bc4:	3101      	adds	r1, #1
   19bc6:	42bd      	cmp	r5, r7
   19bc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bcc:	54e6      	strb	r6, [r4, r3]
   19bce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19bd2:	f43f aef5 	beq.w	199c0 <d_print_mod+0x12c>
   19bd6:	29ff      	cmp	r1, #255	; 0xff
   19bd8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19bdc:	d1f1      	bne.n	19bc2 <d_print_mod+0x32e>
   19bde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19be2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19be6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19bea:	4620      	mov	r0, r4
   19bec:	4798      	blx	r3
   19bee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bf2:	3301      	adds	r3, #1
   19bf4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bf8:	2101      	movs	r1, #1
   19bfa:	2300      	movs	r3, #0
   19bfc:	e7e3      	b.n	19bc6 <d_print_mod+0x332>
   19bfe:	4d2b      	ldr	r5, [pc, #172]	; (19cac <d_print_mod+0x418>)
   19c00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c04:	1daf      	adds	r7, r5, #6
   19c06:	f04f 0800 	mov.w	r8, #0
   19c0a:	e009      	b.n	19c20 <d_print_mod+0x38c>
   19c0c:	460b      	mov	r3, r1
   19c0e:	3101      	adds	r1, #1
   19c10:	42bd      	cmp	r5, r7
   19c12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c16:	54e6      	strb	r6, [r4, r3]
   19c18:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19c1c:	f43f aed0 	beq.w	199c0 <d_print_mod+0x12c>
   19c20:	29ff      	cmp	r1, #255	; 0xff
   19c22:	f815 6b01 	ldrb.w	r6, [r5], #1
   19c26:	d1f1      	bne.n	19c0c <d_print_mod+0x378>
   19c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19c30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c34:	4620      	mov	r0, r4
   19c36:	4798      	blx	r3
   19c38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c3c:	3301      	adds	r3, #1
   19c3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c42:	2101      	movs	r1, #1
   19c44:	2300      	movs	r3, #0
   19c46:	e7e3      	b.n	19c10 <d_print_mod+0x37c>
   19c48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19c4c:	2bff      	cmp	r3, #255	; 0xff
   19c4e:	f000 80cc 	beq.w	19dea <d_print_mod+0x556>
   19c52:	2220      	movs	r2, #32
   19c54:	1c59      	adds	r1, r3, #1
   19c56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c5a:	54e2      	strb	r2, [r4, r3]
   19c5c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19c60:	e6c3      	b.n	199ea <d_print_mod+0x156>
   19c62:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19c66:	2bff      	cmp	r3, #255	; 0xff
   19c68:	f000 80ad 	beq.w	19dc6 <d_print_mod+0x532>
   19c6c:	2220      	movs	r2, #32
   19c6e:	1c59      	adds	r1, r3, #1
   19c70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c74:	54e2      	strb	r2, [r4, r3]
   19c76:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19c7a:	e6c5      	b.n	19a08 <d_print_mod+0x174>
   19c7c:	686a      	ldr	r2, [r5, #4]
   19c7e:	e692      	b.n	199a6 <d_print_mod+0x112>
   19c80:	4d0b      	ldr	r5, [pc, #44]	; (19cb0 <d_print_mod+0x41c>)
   19c82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c86:	f105 0709 	add.w	r7, r5, #9
   19c8a:	f04f 0800 	mov.w	r8, #0
   19c8e:	e01b      	b.n	19cc8 <d_print_mod+0x434>
   19c90:	0002472f 	.word	0x0002472f
   19c94:	00024744 	.word	0x00024744
   19c98:	00024747 	.word	0x00024747
   19c9c:	00024754 	.word	0x00024754
   19ca0:	00024760 	.word	0x00024760
   19ca4:	00024764 	.word	0x00024764
   19ca8:	0002471b 	.word	0x0002471b
   19cac:	00024728 	.word	0x00024728
   19cb0:	0002470f 	.word	0x0002470f
   19cb4:	460b      	mov	r3, r1
   19cb6:	3101      	adds	r1, #1
   19cb8:	42af      	cmp	r7, r5
   19cba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19cbe:	54e6      	strb	r6, [r4, r3]
   19cc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19cc4:	f43f ae7c 	beq.w	199c0 <d_print_mod+0x12c>
   19cc8:	29ff      	cmp	r1, #255	; 0xff
   19cca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19cce:	d1f1      	bne.n	19cb4 <d_print_mod+0x420>
   19cd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19cd4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19cd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19cdc:	4620      	mov	r0, r4
   19cde:	4798      	blx	r3
   19ce0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ce4:	3301      	adds	r3, #1
   19ce6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cea:	2101      	movs	r1, #1
   19cec:	2300      	movs	r3, #0
   19cee:	e7e3      	b.n	19cb8 <d_print_mod+0x424>
   19cf0:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19cf4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19cf8:	462a      	mov	r2, r5
   19cfa:	9301      	str	r3, [sp, #4]
   19cfc:	9500      	str	r5, [sp, #0]
   19cfe:	f7fd f815 	bl	16d2c <d_print_comp_inner>
   19d02:	9b01      	ldr	r3, [sp, #4]
   19d04:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19d08:	e65a      	b.n	199c0 <d_print_mod+0x12c>
   19d0a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19d0e:	686a      	ldr	r2, [r5, #4]
   19d10:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19d14:	4641      	mov	r1, r8
   19d16:	4620      	mov	r0, r4
   19d18:	9301      	str	r3, [sp, #4]
   19d1a:	9200      	str	r2, [sp, #0]
   19d1c:	f7fd f806 	bl	16d2c <d_print_comp_inner>
   19d20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19d24:	9b01      	ldr	r3, [sp, #4]
   19d26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19d2a:	29ff      	cmp	r1, #255	; 0xff
   19d2c:	d03a      	beq.n	19da4 <d_print_mod+0x510>
   19d2e:	1c4a      	adds	r2, r1, #1
   19d30:	2329      	movs	r3, #41	; 0x29
   19d32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19d36:	5463      	strb	r3, [r4, r1]
   19d38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19d3c:	e640      	b.n	199c0 <d_print_mod+0x12c>
   19d3e:	2600      	movs	r6, #0
   19d40:	4619      	mov	r1, r3
   19d42:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d46:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d4a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19d4e:	4798      	blx	r3
   19d50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d54:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19d58:	1c5a      	adds	r2, r3, #1
   19d5a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d5e:	4633      	mov	r3, r6
   19d60:	e6c7      	b.n	19af2 <d_print_mod+0x25e>
   19d62:	2500      	movs	r5, #0
   19d64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d6c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19d70:	4620      	mov	r0, r4
   19d72:	4798      	blx	r3
   19d74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d78:	3301      	adds	r3, #1
   19d7a:	4629      	mov	r1, r5
   19d7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d80:	2201      	movs	r2, #1
   19d82:	e636      	b.n	199f2 <d_print_mod+0x15e>
   19d84:	2600      	movs	r6, #0
   19d86:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d8a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d8e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19d92:	4798      	blx	r3
   19d94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d98:	3301      	adds	r3, #1
   19d9a:	4631      	mov	r1, r6
   19d9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19da0:	2201      	movs	r2, #1
   19da2:	e5f9      	b.n	19998 <d_print_mod+0x104>
   19da4:	2500      	movs	r5, #0
   19da6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19dae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19db2:	4620      	mov	r0, r4
   19db4:	4798      	blx	r3
   19db6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19dba:	3301      	adds	r3, #1
   19dbc:	4629      	mov	r1, r5
   19dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19dc2:	2201      	movs	r2, #1
   19dc4:	e7b4      	b.n	19d30 <d_print_mod+0x49c>
   19dc6:	2500      	movs	r5, #0
   19dc8:	4619      	mov	r1, r3
   19dca:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19dce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19dd2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19dd6:	4798      	blx	r3
   19dd8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ddc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19de0:	1c5a      	adds	r2, r3, #1
   19de2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19de6:	462b      	mov	r3, r5
   19de8:	e740      	b.n	19c6c <d_print_mod+0x3d8>
   19dea:	2500      	movs	r5, #0
   19dec:	4619      	mov	r1, r3
   19dee:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19df2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19df6:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19dfa:	4798      	blx	r3
   19dfc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e00:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19e04:	1c5a      	adds	r2, r3, #1
   19e06:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e0a:	462b      	mov	r3, r5
   19e0c:	e721      	b.n	19c52 <d_print_mod+0x3be>
   19e0e:	4619      	mov	r1, r3
   19e10:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19e14:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19e18:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19e1c:	4798      	blx	r3
   19e1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e22:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19e26:	1c5a      	adds	r2, r3, #1
   19e28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e2c:	462b      	mov	r3, r5
   19e2e:	e5d2      	b.n	199d6 <d_print_mod+0x142>

00019e30 <d_print_mod_list>:
   19e30:	2a00      	cmp	r2, #0
   19e32:	f000 80a1 	beq.w	19f78 <d_print_mod_list+0x148>
   19e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e3a:	461e      	mov	r6, r3
   19e3c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19e40:	b089      	sub	sp, #36	; 0x24
   19e42:	4605      	mov	r5, r0
   19e44:	bb43      	cbnz	r3, 19e98 <d_print_mod_list+0x68>
   19e46:	460f      	mov	r7, r1
   19e48:	4614      	mov	r4, r2
   19e4a:	f04f 0801 	mov.w	r8, #1
   19e4e:	e002      	b.n	19e56 <d_print_mod_list+0x26>
   19e50:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19e54:	bb03      	cbnz	r3, 19e98 <d_print_mod_list+0x68>
   19e56:	68a3      	ldr	r3, [r4, #8]
   19e58:	b9db      	cbnz	r3, 19e92 <d_print_mod_list+0x62>
   19e5a:	6862      	ldr	r2, [r4, #4]
   19e5c:	7813      	ldrb	r3, [r2, #0]
   19e5e:	b92e      	cbnz	r6, 19e6c <d_print_mod_list+0x3c>
   19e60:	f1a3 011c 	sub.w	r1, r3, #28
   19e64:	2904      	cmp	r1, #4
   19e66:	d914      	bls.n	19e92 <d_print_mod_list+0x62>
   19e68:	2b4c      	cmp	r3, #76	; 0x4c
   19e6a:	d012      	beq.n	19e92 <d_print_mod_list+0x62>
   19e6c:	68e1      	ldr	r1, [r4, #12]
   19e6e:	f8c4 8008 	str.w	r8, [r4, #8]
   19e72:	2b29      	cmp	r3, #41	; 0x29
   19e74:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19e78:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19e7c:	d00f      	beq.n	19e9e <d_print_mod_list+0x6e>
   19e7e:	2b2a      	cmp	r3, #42	; 0x2a
   19e80:	d018      	beq.n	19eb4 <d_print_mod_list+0x84>
   19e82:	2b02      	cmp	r3, #2
   19e84:	d021      	beq.n	19eca <d_print_mod_list+0x9a>
   19e86:	4639      	mov	r1, r7
   19e88:	4628      	mov	r0, r5
   19e8a:	f7ff fd03 	bl	19894 <d_print_mod>
   19e8e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19e92:	6824      	ldr	r4, [r4, #0]
   19e94:	2c00      	cmp	r4, #0
   19e96:	d1db      	bne.n	19e50 <d_print_mod_list+0x20>
   19e98:	b009      	add	sp, #36	; 0x24
   19e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e9e:	6823      	ldr	r3, [r4, #0]
   19ea0:	3208      	adds	r2, #8
   19ea2:	4639      	mov	r1, r7
   19ea4:	4628      	mov	r0, r5
   19ea6:	f000 f9d9 	bl	1a25c <d_print_function_type.isra.11>
   19eaa:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19eae:	b009      	add	sp, #36	; 0x24
   19eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb4:	6823      	ldr	r3, [r4, #0]
   19eb6:	3204      	adds	r2, #4
   19eb8:	4639      	mov	r1, r7
   19eba:	4628      	mov	r0, r5
   19ebc:	f000 f8f2 	bl	1a0a4 <d_print_array_type.isra.10>
   19ec0:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19ec4:	b009      	add	sp, #36	; 0x24
   19ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eca:	2600      	movs	r6, #0
   19ecc:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19ed0:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19ed4:	6852      	ldr	r2, [r2, #4]
   19ed6:	4639      	mov	r1, r7
   19ed8:	4628      	mov	r0, r5
   19eda:	f7ff fccb 	bl	19874 <d_print_comp>
   19ede:	f017 0a04 	ands.w	sl, r7, #4
   19ee2:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19ee6:	d023      	beq.n	19f30 <d_print_mod_list+0x100>
   19ee8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19eec:	29ff      	cmp	r1, #255	; 0xff
   19eee:	f000 80c1 	beq.w	1a074 <d_print_mod_list+0x244>
   19ef2:	1c4a      	adds	r2, r1, #1
   19ef4:	232e      	movs	r3, #46	; 0x2e
   19ef6:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19efa:	546b      	strb	r3, [r5, r1]
   19efc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19f00:	6863      	ldr	r3, [r4, #4]
   19f02:	689c      	ldr	r4, [r3, #8]
   19f04:	7823      	ldrb	r3, [r4, #0]
   19f06:	2b46      	cmp	r3, #70	; 0x46
   19f08:	d037      	beq.n	19f7a <d_print_mod_list+0x14a>
   19f0a:	f1a3 021c 	sub.w	r2, r3, #28
   19f0e:	2a04      	cmp	r2, #4
   19f10:	d90b      	bls.n	19f2a <d_print_mod_list+0xfa>
   19f12:	2b4c      	cmp	r3, #76	; 0x4c
   19f14:	d009      	beq.n	19f2a <d_print_mod_list+0xfa>
   19f16:	4622      	mov	r2, r4
   19f18:	4639      	mov	r1, r7
   19f1a:	4628      	mov	r0, r5
   19f1c:	f7ff fcaa 	bl	19874 <d_print_comp>
   19f20:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19f24:	b009      	add	sp, #36	; 0x24
   19f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f2a:	6864      	ldr	r4, [r4, #4]
   19f2c:	7823      	ldrb	r3, [r4, #0]
   19f2e:	e7ec      	b.n	19f0a <d_print_mod_list+0xda>
   19f30:	4e58      	ldr	r6, [pc, #352]	; (1a094 <d_print_mod_list+0x264>)
   19f32:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f36:	f106 0b02 	add.w	fp, r6, #2
   19f3a:	e009      	b.n	19f50 <d_print_mod_list+0x120>
   19f3c:	460b      	mov	r3, r1
   19f3e:	3101      	adds	r1, #1
   19f40:	455e      	cmp	r6, fp
   19f42:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19f46:	f805 8003 	strb.w	r8, [r5, r3]
   19f4a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f4e:	d0d7      	beq.n	19f00 <d_print_mod_list+0xd0>
   19f50:	29ff      	cmp	r1, #255	; 0xff
   19f52:	f816 8b01 	ldrb.w	r8, [r6], #1
   19f56:	d1f1      	bne.n	19f3c <d_print_mod_list+0x10c>
   19f58:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19f5c:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19f60:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19f64:	4628      	mov	r0, r5
   19f66:	4798      	blx	r3
   19f68:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19f6c:	3301      	adds	r3, #1
   19f6e:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19f72:	2101      	movs	r1, #1
   19f74:	2300      	movs	r3, #0
   19f76:	e7e3      	b.n	19f40 <d_print_mod_list+0x110>
   19f78:	4770      	bx	lr
   19f7a:	4e47      	ldr	r6, [pc, #284]	; (1a098 <d_print_mod_list+0x268>)
   19f7c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f80:	f106 0a0d 	add.w	sl, r6, #13
   19f84:	f04f 0b00 	mov.w	fp, #0
   19f88:	e009      	b.n	19f9e <d_print_mod_list+0x16e>
   19f8a:	460b      	mov	r3, r1
   19f8c:	3101      	adds	r1, #1
   19f8e:	45b2      	cmp	sl, r6
   19f90:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19f94:	f805 8003 	strb.w	r8, [r5, r3]
   19f98:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f9c:	d013      	beq.n	19fc6 <d_print_mod_list+0x196>
   19f9e:	29ff      	cmp	r1, #255	; 0xff
   19fa0:	f816 8b01 	ldrb.w	r8, [r6], #1
   19fa4:	d1f1      	bne.n	19f8a <d_print_mod_list+0x15a>
   19fa6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19faa:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19fae:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19fb2:	4628      	mov	r0, r5
   19fb4:	4798      	blx	r3
   19fb6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19fba:	3301      	adds	r3, #1
   19fbc:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19fc0:	2101      	movs	r1, #1
   19fc2:	2300      	movs	r3, #0
   19fc4:	e7e3      	b.n	19f8e <d_print_mod_list+0x15e>
   19fc6:	68a2      	ldr	r2, [r4, #8]
   19fc8:	4934      	ldr	r1, [pc, #208]	; (1a09c <d_print_mod_list+0x26c>)
   19fca:	3201      	adds	r2, #1
   19fcc:	a801      	add	r0, sp, #4
   19fce:	f004 fd2d 	bl	1ea2c <sprintf>
   19fd2:	a801      	add	r0, sp, #4
   19fd4:	f004 fed4 	bl	1ed80 <strlen>
   19fd8:	b328      	cbz	r0, 1a026 <d_print_mod_list+0x1f6>
   19fda:	ae01      	add	r6, sp, #4
   19fdc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19fe0:	eb06 0a00 	add.w	sl, r6, r0
   19fe4:	f04f 0b00 	mov.w	fp, #0
   19fe8:	e009      	b.n	19ffe <d_print_mod_list+0x1ce>
   19fea:	460b      	mov	r3, r1
   19fec:	3101      	adds	r1, #1
   19fee:	45b2      	cmp	sl, r6
   19ff0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19ff4:	f805 8003 	strb.w	r8, [r5, r3]
   19ff8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19ffc:	d015      	beq.n	1a02a <d_print_mod_list+0x1fa>
   19ffe:	29ff      	cmp	r1, #255	; 0xff
   1a000:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a004:	d1f1      	bne.n	19fea <d_print_mod_list+0x1ba>
   1a006:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a00a:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a00e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a012:	4628      	mov	r0, r5
   1a014:	4798      	blx	r3
   1a016:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a01a:	3301      	adds	r3, #1
   1a01c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a020:	2101      	movs	r1, #1
   1a022:	2300      	movs	r3, #0
   1a024:	e7e3      	b.n	19fee <d_print_mod_list+0x1be>
   1a026:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a02a:	4e1d      	ldr	r6, [pc, #116]	; (1a0a0 <d_print_mod_list+0x270>)
   1a02c:	f04f 0b00 	mov.w	fp, #0
   1a030:	f106 0a03 	add.w	sl, r6, #3
   1a034:	e00a      	b.n	1a04c <d_print_mod_list+0x21c>
   1a036:	460b      	mov	r3, r1
   1a038:	3101      	adds	r1, #1
   1a03a:	45b2      	cmp	sl, r6
   1a03c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a040:	f805 8003 	strb.w	r8, [r5, r3]
   1a044:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a048:	f43f af6f 	beq.w	19f2a <d_print_mod_list+0xfa>
   1a04c:	29ff      	cmp	r1, #255	; 0xff
   1a04e:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a052:	d1f0      	bne.n	1a036 <d_print_mod_list+0x206>
   1a054:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a058:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a05c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a060:	4628      	mov	r0, r5
   1a062:	4798      	blx	r3
   1a064:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a068:	3301      	adds	r3, #1
   1a06a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a06e:	2101      	movs	r1, #1
   1a070:	2300      	movs	r3, #0
   1a072:	e7e2      	b.n	1a03a <d_print_mod_list+0x20a>
   1a074:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a078:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a07c:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1a080:	4628      	mov	r0, r5
   1a082:	4798      	blx	r3
   1a084:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a088:	3301      	adds	r3, #1
   1a08a:	4631      	mov	r1, r6
   1a08c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a090:	2201      	movs	r2, #1
   1a092:	e72f      	b.n	19ef4 <d_print_mod_list+0xc4>
   1a094:	00024494 	.word	0x00024494
   1a098:	00024498 	.word	0x00024498
   1a09c:	00024444 	.word	0x00024444
   1a0a0:	000244a8 	.word	0x000244a8

0001a0a4 <d_print_array_type.isra.10>:
   1a0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0a8:	4604      	mov	r4, r0
   1a0aa:	460f      	mov	r7, r1
   1a0ac:	4690      	mov	r8, r2
   1a0ae:	b163      	cbz	r3, 1a0ca <d_print_array_type.isra.10+0x26>
   1a0b0:	461e      	mov	r6, r3
   1a0b2:	461a      	mov	r2, r3
   1a0b4:	6893      	ldr	r3, [r2, #8]
   1a0b6:	b393      	cbz	r3, 1a11e <d_print_array_type.isra.10+0x7a>
   1a0b8:	6812      	ldr	r2, [r2, #0]
   1a0ba:	2a00      	cmp	r2, #0
   1a0bc:	d1fa      	bne.n	1a0b4 <d_print_array_type.isra.10+0x10>
   1a0be:	4613      	mov	r3, r2
   1a0c0:	4639      	mov	r1, r7
   1a0c2:	4632      	mov	r2, r6
   1a0c4:	4620      	mov	r0, r4
   1a0c6:	f7ff feb3 	bl	19e30 <d_print_mod_list>
   1a0ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a0ce:	29ff      	cmp	r1, #255	; 0xff
   1a0d0:	f000 808d 	beq.w	1a1ee <d_print_array_type.isra.10+0x14a>
   1a0d4:	1c4b      	adds	r3, r1, #1
   1a0d6:	2220      	movs	r2, #32
   1a0d8:	2bff      	cmp	r3, #255	; 0xff
   1a0da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a0de:	5462      	strb	r2, [r4, r1]
   1a0e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a0e4:	d068      	beq.n	1a1b8 <d_print_array_type.isra.10+0x114>
   1a0e6:	225b      	movs	r2, #91	; 0x5b
   1a0e8:	1c59      	adds	r1, r3, #1
   1a0ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a0ee:	54e2      	strb	r2, [r4, r3]
   1a0f0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a0f4:	f8d8 2000 	ldr.w	r2, [r8]
   1a0f8:	b12a      	cbz	r2, 1a106 <d_print_array_type.isra.10+0x62>
   1a0fa:	4639      	mov	r1, r7
   1a0fc:	4620      	mov	r0, r4
   1a0fe:	f7ff fbb9 	bl	19874 <d_print_comp>
   1a102:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a106:	29ff      	cmp	r1, #255	; 0xff
   1a108:	f000 8082 	beq.w	1a210 <d_print_array_type.isra.10+0x16c>
   1a10c:	1c4a      	adds	r2, r1, #1
   1a10e:	235d      	movs	r3, #93	; 0x5d
   1a110:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a114:	5463      	strb	r3, [r4, r1]
   1a116:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a11e:	6852      	ldr	r2, [r2, #4]
   1a120:	7812      	ldrb	r2, [r2, #0]
   1a122:	2a2a      	cmp	r2, #42	; 0x2a
   1a124:	d03f      	beq.n	1a1a6 <d_print_array_type.isra.10+0x102>
   1a126:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a258 <d_print_array_type.isra.10+0x1b4>
   1a12a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a12e:	461d      	mov	r5, r3
   1a130:	f109 0b02 	add.w	fp, r9, #2
   1a134:	e00a      	b.n	1a14c <d_print_array_type.isra.10+0xa8>
   1a136:	460b      	mov	r3, r1
   1a138:	45cb      	cmp	fp, r9
   1a13a:	f101 0101 	add.w	r1, r1, #1
   1a13e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a142:	f804 a003 	strb.w	sl, [r4, r3]
   1a146:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a14a:	d01a      	beq.n	1a182 <d_print_array_type.isra.10+0xde>
   1a14c:	29ff      	cmp	r1, #255	; 0xff
   1a14e:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a152:	d1f0      	bne.n	1a136 <d_print_array_type.isra.10+0x92>
   1a154:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a158:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a15c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a160:	4620      	mov	r0, r4
   1a162:	4798      	blx	r3
   1a164:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a168:	3301      	adds	r3, #1
   1a16a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a16e:	2300      	movs	r3, #0
   1a170:	2101      	movs	r1, #1
   1a172:	45cb      	cmp	fp, r9
   1a174:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a178:	f804 a003 	strb.w	sl, [r4, r3]
   1a17c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a180:	d1e4      	bne.n	1a14c <d_print_array_type.isra.10+0xa8>
   1a182:	2300      	movs	r3, #0
   1a184:	4632      	mov	r2, r6
   1a186:	4639      	mov	r1, r7
   1a188:	4620      	mov	r0, r4
   1a18a:	f7ff fe51 	bl	19e30 <d_print_mod_list>
   1a18e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a192:	2bff      	cmp	r3, #255	; 0xff
   1a194:	d04d      	beq.n	1a232 <d_print_array_type.isra.10+0x18e>
   1a196:	1c59      	adds	r1, r3, #1
   1a198:	2229      	movs	r2, #41	; 0x29
   1a19a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a19e:	54e2      	strb	r2, [r4, r3]
   1a1a0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1a4:	e793      	b.n	1a0ce <d_print_array_type.isra.10+0x2a>
   1a1a6:	4632      	mov	r2, r6
   1a1a8:	4639      	mov	r1, r7
   1a1aa:	4620      	mov	r0, r4
   1a1ac:	f7ff fe40 	bl	19e30 <d_print_mod_list>
   1a1b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a1b4:	2bff      	cmp	r3, #255	; 0xff
   1a1b6:	d196      	bne.n	1a0e6 <d_print_array_type.isra.10+0x42>
   1a1b8:	2200      	movs	r2, #0
   1a1ba:	4619      	mov	r1, r3
   1a1bc:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a1c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1c8:	4620      	mov	r0, r4
   1a1ca:	4798      	blx	r3
   1a1cc:	235b      	movs	r3, #91	; 0x5b
   1a1ce:	7023      	strb	r3, [r4, #0]
   1a1d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a1d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1d8:	f8d8 2000 	ldr.w	r2, [r8]
   1a1dc:	3301      	adds	r3, #1
   1a1de:	2101      	movs	r1, #1
   1a1e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1e8:	2a00      	cmp	r2, #0
   1a1ea:	d186      	bne.n	1a0fa <d_print_array_type.isra.10+0x56>
   1a1ec:	e78e      	b.n	1a10c <d_print_array_type.isra.10+0x68>
   1a1ee:	2500      	movs	r5, #0
   1a1f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a1f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1fc:	4620      	mov	r0, r4
   1a1fe:	4798      	blx	r3
   1a200:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a204:	3301      	adds	r3, #1
   1a206:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a20a:	4629      	mov	r1, r5
   1a20c:	2301      	movs	r3, #1
   1a20e:	e762      	b.n	1a0d6 <d_print_array_type.isra.10+0x32>
   1a210:	2500      	movs	r5, #0
   1a212:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a216:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a21a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a21e:	4620      	mov	r0, r4
   1a220:	4798      	blx	r3
   1a222:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a226:	3301      	adds	r3, #1
   1a228:	4629      	mov	r1, r5
   1a22a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a22e:	2201      	movs	r2, #1
   1a230:	e76d      	b.n	1a10e <d_print_array_type.isra.10+0x6a>
   1a232:	2500      	movs	r5, #0
   1a234:	4619      	mov	r1, r3
   1a236:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a23a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a23e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a242:	4620      	mov	r0, r4
   1a244:	4798      	blx	r3
   1a246:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a24a:	1c5a      	adds	r2, r3, #1
   1a24c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a250:	462b      	mov	r3, r5
   1a252:	2101      	movs	r1, #1
   1a254:	e7a0      	b.n	1a198 <d_print_array_type.isra.10+0xf4>
   1a256:	bf00      	nop
   1a258:	0002468c 	.word	0x0002468c

0001a25c <d_print_function_type.isra.11>:
   1a25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a260:	4604      	mov	r4, r0
   1a262:	b083      	sub	sp, #12
   1a264:	460e      	mov	r6, r1
   1a266:	4617      	mov	r7, r2
   1a268:	461d      	mov	r5, r3
   1a26a:	b34b      	cbz	r3, 1a2c0 <d_print_function_type.isra.11+0x64>
   1a26c:	689b      	ldr	r3, [r3, #8]
   1a26e:	bb3b      	cbnz	r3, 1a2c0 <d_print_function_type.isra.11+0x64>
   1a270:	462a      	mov	r2, r5
   1a272:	2001      	movs	r0, #1
   1a274:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a440 <d_print_function_type.isra.11+0x1e4>
   1a278:	e006      	b.n	1a288 <d_print_function_type.isra.11+0x2c>
   1a27a:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a27e:	d15a      	bne.n	1a336 <d_print_function_type.isra.11+0xda>
   1a280:	6812      	ldr	r2, [r2, #0]
   1a282:	b1ea      	cbz	r2, 1a2c0 <d_print_function_type.isra.11+0x64>
   1a284:	6893      	ldr	r3, [r2, #8]
   1a286:	b9db      	cbnz	r3, 1a2c0 <d_print_function_type.isra.11+0x64>
   1a288:	6853      	ldr	r3, [r2, #4]
   1a28a:	781b      	ldrb	r3, [r3, #0]
   1a28c:	3b19      	subs	r3, #25
   1a28e:	b2db      	uxtb	r3, r3
   1a290:	2b12      	cmp	r3, #18
   1a292:	fa00 f103 	lsl.w	r1, r0, r3
   1a296:	d8f3      	bhi.n	1a280 <d_print_function_type.isra.11+0x24>
   1a298:	ea11 0f0e 	tst.w	r1, lr
   1a29c:	d0ed      	beq.n	1a27a <d_print_function_type.isra.11+0x1e>
   1a29e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a2a2:	2b20      	cmp	r3, #32
   1a2a4:	d04d      	beq.n	1a342 <d_print_function_type.isra.11+0xe6>
   1a2a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a2aa:	2bff      	cmp	r3, #255	; 0xff
   1a2ac:	f000 80b4 	beq.w	1a418 <d_print_function_type.isra.11+0x1bc>
   1a2b0:	1c59      	adds	r1, r3, #1
   1a2b2:	2220      	movs	r2, #32
   1a2b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2b8:	54e2      	strb	r2, [r4, r3]
   1a2ba:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a2be:	e042      	b.n	1a346 <d_print_function_type.isra.11+0xea>
   1a2c0:	2300      	movs	r3, #0
   1a2c2:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a2c6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a2ca:	4631      	mov	r1, r6
   1a2cc:	462a      	mov	r2, r5
   1a2ce:	4620      	mov	r0, r4
   1a2d0:	f7ff fdae 	bl	19e30 <d_print_mod_list>
   1a2d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a2d8:	29ff      	cmp	r1, #255	; 0xff
   1a2da:	d056      	beq.n	1a38a <d_print_function_type.isra.11+0x12e>
   1a2dc:	1c4b      	adds	r3, r1, #1
   1a2de:	2228      	movs	r2, #40	; 0x28
   1a2e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a2e4:	5462      	strb	r2, [r4, r1]
   1a2e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a2ea:	6838      	ldr	r0, [r7, #0]
   1a2ec:	b178      	cbz	r0, 1a30e <d_print_function_type.isra.11+0xb2>
   1a2ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a2f2:	9000      	str	r0, [sp, #0]
   1a2f4:	4602      	mov	r2, r0
   1a2f6:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a2fa:	4631      	mov	r1, r6
   1a2fc:	4620      	mov	r0, r4
   1a2fe:	9301      	str	r3, [sp, #4]
   1a300:	f7fc fd14 	bl	16d2c <d_print_comp_inner>
   1a304:	9a01      	ldr	r2, [sp, #4]
   1a306:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a30a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a30e:	2bff      	cmp	r3, #255	; 0xff
   1a310:	d04d      	beq.n	1a3ae <d_print_function_type.isra.11+0x152>
   1a312:	1c5a      	adds	r2, r3, #1
   1a314:	2029      	movs	r0, #41	; 0x29
   1a316:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a31a:	4631      	mov	r1, r6
   1a31c:	54e0      	strb	r0, [r4, r3]
   1a31e:	462a      	mov	r2, r5
   1a320:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a324:	2301      	movs	r3, #1
   1a326:	4620      	mov	r0, r4
   1a328:	f7ff fd82 	bl	19e30 <d_print_mod_list>
   1a32c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a330:	b003      	add	sp, #12
   1a332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a336:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a33a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a33e:	2a28      	cmp	r2, #40	; 0x28
   1a340:	d1af      	bne.n	1a2a2 <d_print_function_type.isra.11+0x46>
   1a342:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a346:	29ff      	cmp	r1, #255	; 0xff
   1a348:	d054      	beq.n	1a3f4 <d_print_function_type.isra.11+0x198>
   1a34a:	1c4a      	adds	r2, r1, #1
   1a34c:	2328      	movs	r3, #40	; 0x28
   1a34e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a352:	5463      	strb	r3, [r4, r1]
   1a354:	f04f 0900 	mov.w	r9, #0
   1a358:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a35c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a360:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a364:	464b      	mov	r3, r9
   1a366:	462a      	mov	r2, r5
   1a368:	4631      	mov	r1, r6
   1a36a:	4620      	mov	r0, r4
   1a36c:	f7ff fd60 	bl	19e30 <d_print_mod_list>
   1a370:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a374:	2bff      	cmp	r3, #255	; 0xff
   1a376:	d02c      	beq.n	1a3d2 <d_print_function_type.isra.11+0x176>
   1a378:	1c59      	adds	r1, r3, #1
   1a37a:	2229      	movs	r2, #41	; 0x29
   1a37c:	29ff      	cmp	r1, #255	; 0xff
   1a37e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a382:	54e2      	strb	r2, [r4, r3]
   1a384:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a388:	d1a8      	bne.n	1a2dc <d_print_function_type.isra.11+0x80>
   1a38a:	f04f 0900 	mov.w	r9, #0
   1a38e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a392:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a39a:	4620      	mov	r0, r4
   1a39c:	4798      	blx	r3
   1a39e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3a2:	3301      	adds	r3, #1
   1a3a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3a8:	4649      	mov	r1, r9
   1a3aa:	2301      	movs	r3, #1
   1a3ac:	e797      	b.n	1a2de <d_print_function_type.isra.11+0x82>
   1a3ae:	2700      	movs	r7, #0
   1a3b0:	4619      	mov	r1, r3
   1a3b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a3b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a3ba:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a3be:	4620      	mov	r0, r4
   1a3c0:	4798      	blx	r3
   1a3c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3c6:	1c5a      	adds	r2, r3, #1
   1a3c8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a3cc:	463b      	mov	r3, r7
   1a3ce:	2201      	movs	r2, #1
   1a3d0:	e7a0      	b.n	1a314 <d_print_function_type.isra.11+0xb8>
   1a3d2:	4619      	mov	r1, r3
   1a3d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a3d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a3dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a3e0:	4620      	mov	r0, r4
   1a3e2:	4798      	blx	r3
   1a3e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3e8:	1c5a      	adds	r2, r3, #1
   1a3ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a3ee:	464b      	mov	r3, r9
   1a3f0:	2101      	movs	r1, #1
   1a3f2:	e7c2      	b.n	1a37a <d_print_function_type.isra.11+0x11e>
   1a3f4:	f04f 0800 	mov.w	r8, #0
   1a3f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a3fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a400:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a404:	4620      	mov	r0, r4
   1a406:	4798      	blx	r3
   1a408:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a40c:	3301      	adds	r3, #1
   1a40e:	4641      	mov	r1, r8
   1a410:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a414:	2201      	movs	r2, #1
   1a416:	e799      	b.n	1a34c <d_print_function_type.isra.11+0xf0>
   1a418:	f04f 0800 	mov.w	r8, #0
   1a41c:	4619      	mov	r1, r3
   1a41e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a422:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a426:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a42a:	4620      	mov	r0, r4
   1a42c:	4798      	blx	r3
   1a42e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a432:	1c5a      	adds	r2, r3, #1
   1a434:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a438:	4643      	mov	r3, r8
   1a43a:	2101      	movs	r1, #1
   1a43c:	e739      	b.n	1a2b2 <d_print_function_type.isra.11+0x56>
   1a43e:	bf00      	nop
   1a440:	00043107 	.word	0x00043107

0001a444 <d_print_expr_op>:
   1a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a448:	7815      	ldrb	r5, [r2, #0]
   1a44a:	2d31      	cmp	r5, #49	; 0x31
   1a44c:	b082      	sub	sp, #8
   1a44e:	4613      	mov	r3, r2
   1a450:	4604      	mov	r4, r0
   1a452:	d00d      	beq.n	1a470 <d_print_expr_op+0x2c>
   1a454:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a458:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a45c:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a460:	f7fc fc64 	bl	16d2c <d_print_comp_inner>
   1a464:	9b01      	ldr	r3, [sp, #4]
   1a466:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a46a:	b002      	add	sp, #8
   1a46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a470:	6853      	ldr	r3, [r2, #4]
   1a472:	689f      	ldr	r7, [r3, #8]
   1a474:	685d      	ldr	r5, [r3, #4]
   1a476:	2f00      	cmp	r7, #0
   1a478:	d0f7      	beq.n	1a46a <d_print_expr_op+0x26>
   1a47a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a47e:	442f      	add	r7, r5
   1a480:	f04f 0800 	mov.w	r8, #0
   1a484:	e008      	b.n	1a498 <d_print_expr_op+0x54>
   1a486:	460b      	mov	r3, r1
   1a488:	3101      	adds	r1, #1
   1a48a:	42bd      	cmp	r5, r7
   1a48c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a490:	54e6      	strb	r6, [r4, r3]
   1a492:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a496:	d0e8      	beq.n	1a46a <d_print_expr_op+0x26>
   1a498:	29ff      	cmp	r1, #255	; 0xff
   1a49a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a49e:	d1f2      	bne.n	1a486 <d_print_expr_op+0x42>
   1a4a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a4a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4ac:	4620      	mov	r0, r4
   1a4ae:	4798      	blx	r3
   1a4b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4b4:	3301      	adds	r3, #1
   1a4b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4ba:	2101      	movs	r1, #1
   1a4bc:	2300      	movs	r3, #0
   1a4be:	e7e4      	b.n	1a48a <d_print_expr_op+0x46>

0001a4c0 <d_print_subexpr>:
   1a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4c2:	7813      	ldrb	r3, [r2, #0]
   1a4c4:	2b01      	cmp	r3, #1
   1a4c6:	b083      	sub	sp, #12
   1a4c8:	4615      	mov	r5, r2
   1a4ca:	460e      	mov	r6, r1
   1a4cc:	4604      	mov	r4, r0
   1a4ce:	d929      	bls.n	1a524 <d_print_subexpr+0x64>
   1a4d0:	2b30      	cmp	r3, #48	; 0x30
   1a4d2:	d027      	beq.n	1a524 <d_print_subexpr+0x64>
   1a4d4:	2b06      	cmp	r3, #6
   1a4d6:	d025      	beq.n	1a524 <d_print_subexpr+0x64>
   1a4d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a4dc:	29ff      	cmp	r1, #255	; 0xff
   1a4de:	d031      	beq.n	1a544 <d_print_subexpr+0x84>
   1a4e0:	1c4a      	adds	r2, r1, #1
   1a4e2:	2328      	movs	r3, #40	; 0x28
   1a4e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a4e8:	5463      	strb	r3, [r4, r1]
   1a4ea:	462a      	mov	r2, r5
   1a4ec:	4631      	mov	r1, r6
   1a4ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a4f2:	4620      	mov	r0, r4
   1a4f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a4f8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a4fc:	9301      	str	r3, [sp, #4]
   1a4fe:	9500      	str	r5, [sp, #0]
   1a500:	f7fc fc14 	bl	16d2c <d_print_comp_inner>
   1a504:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a508:	9b01      	ldr	r3, [sp, #4]
   1a50a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a50e:	29ff      	cmp	r1, #255	; 0xff
   1a510:	d028      	beq.n	1a564 <d_print_subexpr+0xa4>
   1a512:	1c4a      	adds	r2, r1, #1
   1a514:	2329      	movs	r3, #41	; 0x29
   1a516:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a51a:	5463      	strb	r3, [r4, r1]
   1a51c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a520:	b003      	add	sp, #12
   1a522:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a524:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a528:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a52c:	4631      	mov	r1, r6
   1a52e:	462a      	mov	r2, r5
   1a530:	4620      	mov	r0, r4
   1a532:	9301      	str	r3, [sp, #4]
   1a534:	9500      	str	r5, [sp, #0]
   1a536:	f7fc fbf9 	bl	16d2c <d_print_comp_inner>
   1a53a:	9b01      	ldr	r3, [sp, #4]
   1a53c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a540:	b003      	add	sp, #12
   1a542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a544:	2700      	movs	r7, #0
   1a546:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a54a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a54e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a552:	4798      	blx	r3
   1a554:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a558:	3301      	adds	r3, #1
   1a55a:	4639      	mov	r1, r7
   1a55c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a560:	2201      	movs	r2, #1
   1a562:	e7be      	b.n	1a4e2 <d_print_subexpr+0x22>
   1a564:	2500      	movs	r5, #0
   1a566:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a56a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a56e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a572:	4620      	mov	r0, r4
   1a574:	4798      	blx	r3
   1a576:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a57a:	3301      	adds	r3, #1
   1a57c:	4629      	mov	r1, r5
   1a57e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a582:	2201      	movs	r2, #1
   1a584:	e7c6      	b.n	1a514 <d_print_subexpr+0x54>
   1a586:	bf00      	nop

0001a588 <d_maybe_print_fold_expression.isra.15>:
   1a588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a58c:	6852      	ldr	r2, [r2, #4]
   1a58e:	6812      	ldr	r2, [r2, #0]
   1a590:	7815      	ldrb	r5, [r2, #0]
   1a592:	2d66      	cmp	r5, #102	; 0x66
   1a594:	d002      	beq.n	1a59c <d_maybe_print_fold_expression.isra.15+0x14>
   1a596:	2000      	movs	r0, #0
   1a598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a59c:	681b      	ldr	r3, [r3, #0]
   1a59e:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a5a2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a5a6:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a5aa:	f899 3000 	ldrb.w	r3, [r9]
   1a5ae:	2b3b      	cmp	r3, #59	; 0x3b
   1a5b0:	f04f 33ff 	mov.w	r3, #4294967295
   1a5b4:	bf04      	itt	eq
   1a5b6:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a5ba:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a5be:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a5c2:	7853      	ldrb	r3, [r2, #1]
   1a5c4:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a5c8:	bf18      	it	ne
   1a5ca:	2500      	movne	r5, #0
   1a5cc:	460e      	mov	r6, r1
   1a5ce:	4604      	mov	r4, r0
   1a5d0:	2b26      	cmp	r3, #38	; 0x26
   1a5d2:	d82b      	bhi.n	1a62c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a5d4:	e8df f003 	tbb	[pc, r3]
   1a5d8:	2a2a2a90 	.word	0x2a2a2a90
   1a5dc:	2a902a2a 	.word	0x2a902a2a
   1a5e0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a5e4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a5e8:	2a2a2a2a 	.word	0x2a2a2a2a
   1a5ec:	2a2a2a2a 	.word	0x2a2a2a2a
   1a5f0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a5f4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a5f8:	2a2a2a6a 	.word	0x2a2a2a6a
   1a5fc:	2a2a      	.short	0x2a2a
   1a5fe:	2f          	.byte	0x2f
   1a5ff:	00          	.byte	0x00
   1a600:	4642      	mov	r2, r8
   1a602:	4631      	mov	r1, r6
   1a604:	4620      	mov	r0, r4
   1a606:	f7ff ff1d 	bl	1a444 <d_print_expr_op>
   1a60a:	464a      	mov	r2, r9
   1a60c:	4631      	mov	r1, r6
   1a60e:	4620      	mov	r0, r4
   1a610:	f7ff ff56 	bl	1a4c0 <d_print_subexpr>
   1a614:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a618:	29ff      	cmp	r1, #255	; 0xff
   1a61a:	f000 80b2 	beq.w	1a782 <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a61e:	1c4a      	adds	r2, r1, #1
   1a620:	2329      	movs	r3, #41	; 0x29
   1a622:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a626:	5463      	strb	r3, [r4, r1]
   1a628:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a62c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a630:	2001      	movs	r0, #1
   1a632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a636:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a63a:	29ff      	cmp	r1, #255	; 0xff
   1a63c:	f000 80c5 	beq.w	1a7ca <d_maybe_print_fold_expression.isra.15+0x242>
   1a640:	1c4a      	adds	r2, r1, #1
   1a642:	2328      	movs	r3, #40	; 0x28
   1a644:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a648:	4620      	mov	r0, r4
   1a64a:	5463      	strb	r3, [r4, r1]
   1a64c:	464a      	mov	r2, r9
   1a64e:	4631      	mov	r1, r6
   1a650:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a654:	4d65      	ldr	r5, [pc, #404]	; (1a7ec <d_maybe_print_fold_expression.isra.15+0x264>)
   1a656:	f7ff ff33 	bl	1a4c0 <d_print_subexpr>
   1a65a:	4642      	mov	r2, r8
   1a65c:	4631      	mov	r1, r6
   1a65e:	4620      	mov	r0, r4
   1a660:	f7ff fef0 	bl	1a444 <d_print_expr_op>
   1a664:	f105 0904 	add.w	r9, r5, #4
   1a668:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a66c:	f04f 0800 	mov.w	r8, #0
   1a670:	e008      	b.n	1a684 <d_maybe_print_fold_expression.isra.15+0xfc>
   1a672:	460b      	mov	r3, r1
   1a674:	3101      	adds	r1, #1
   1a676:	45a9      	cmp	r9, r5
   1a678:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a67c:	54e6      	strb	r6, [r4, r3]
   1a67e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a682:	d0d3      	beq.n	1a62c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a684:	29ff      	cmp	r1, #255	; 0xff
   1a686:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a68a:	d1f2      	bne.n	1a672 <d_maybe_print_fold_expression.isra.15+0xea>
   1a68c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a690:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a694:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a698:	4620      	mov	r0, r4
   1a69a:	4798      	blx	r3
   1a69c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6a0:	3301      	adds	r3, #1
   1a6a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6a6:	2101      	movs	r1, #1
   1a6a8:	2300      	movs	r3, #0
   1a6aa:	e7e4      	b.n	1a676 <d_maybe_print_fold_expression.isra.15+0xee>
   1a6ac:	4d50      	ldr	r5, [pc, #320]	; (1a7f0 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a6ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a6b2:	f105 0b04 	add.w	fp, r5, #4
   1a6b6:	e009      	b.n	1a6cc <d_maybe_print_fold_expression.isra.15+0x144>
   1a6b8:	460b      	mov	r3, r1
   1a6ba:	3101      	adds	r1, #1
   1a6bc:	455d      	cmp	r5, fp
   1a6be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a6c2:	f804 a003 	strb.w	sl, [r4, r3]
   1a6c6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a6ca:	d099      	beq.n	1a600 <d_maybe_print_fold_expression.isra.15+0x78>
   1a6cc:	29ff      	cmp	r1, #255	; 0xff
   1a6ce:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a6d2:	d1f1      	bne.n	1a6b8 <d_maybe_print_fold_expression.isra.15+0x130>
   1a6d4:	f04f 0300 	mov.w	r3, #0
   1a6d8:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a6dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6e4:	4620      	mov	r0, r4
   1a6e6:	4798      	blx	r3
   1a6e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6ec:	3301      	adds	r3, #1
   1a6ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6f2:	2101      	movs	r1, #1
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	e7e1      	b.n	1a6bc <d_maybe_print_fold_expression.isra.15+0x134>
   1a6f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a6fc:	2bff      	cmp	r3, #255	; 0xff
   1a6fe:	d051      	beq.n	1a7a4 <d_maybe_print_fold_expression.isra.15+0x21c>
   1a700:	1c59      	adds	r1, r3, #1
   1a702:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a706:	464a      	mov	r2, r9
   1a708:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a70c:	4620      	mov	r0, r4
   1a70e:	f804 e003 	strb.w	lr, [r4, r3]
   1a712:	4631      	mov	r1, r6
   1a714:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a718:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a7f4 <d_maybe_print_fold_expression.isra.15+0x26c>
   1a71c:	f7ff fed0 	bl	1a4c0 <d_print_subexpr>
   1a720:	4631      	mov	r1, r6
   1a722:	4642      	mov	r2, r8
   1a724:	4620      	mov	r0, r4
   1a726:	f7ff fe8d 	bl	1a444 <d_print_expr_op>
   1a72a:	f109 0b03 	add.w	fp, r9, #3
   1a72e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a732:	e009      	b.n	1a748 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a734:	460b      	mov	r3, r1
   1a736:	3101      	adds	r1, #1
   1a738:	45cb      	cmp	fp, r9
   1a73a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a73e:	f804 a003 	strb.w	sl, [r4, r3]
   1a742:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a746:	d015      	beq.n	1a774 <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a748:	29ff      	cmp	r1, #255	; 0xff
   1a74a:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a74e:	d1f1      	bne.n	1a734 <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a750:	f04f 0300 	mov.w	r3, #0
   1a754:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a758:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a75c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a760:	4620      	mov	r0, r4
   1a762:	4798      	blx	r3
   1a764:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a768:	3301      	adds	r3, #1
   1a76a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a76e:	2101      	movs	r1, #1
   1a770:	2300      	movs	r3, #0
   1a772:	e7e1      	b.n	1a738 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a774:	4642      	mov	r2, r8
   1a776:	4631      	mov	r1, r6
   1a778:	4620      	mov	r0, r4
   1a77a:	f7ff fe63 	bl	1a444 <d_print_expr_op>
   1a77e:	462a      	mov	r2, r5
   1a780:	e744      	b.n	1a60c <d_maybe_print_fold_expression.isra.15+0x84>
   1a782:	2500      	movs	r5, #0
   1a784:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a788:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a78c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a790:	4620      	mov	r0, r4
   1a792:	4798      	blx	r3
   1a794:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a798:	3301      	adds	r3, #1
   1a79a:	4629      	mov	r1, r5
   1a79c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a7a0:	2201      	movs	r2, #1
   1a7a2:	e73d      	b.n	1a620 <d_maybe_print_fold_expression.isra.15+0x98>
   1a7a4:	f04f 0a00 	mov.w	sl, #0
   1a7a8:	4619      	mov	r1, r3
   1a7aa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a7ae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a7b2:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a7b6:	4798      	blx	r3
   1a7b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7bc:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a7c0:	1c5a      	adds	r2, r3, #1
   1a7c2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a7c6:	4653      	mov	r3, sl
   1a7c8:	e79a      	b.n	1a700 <d_maybe_print_fold_expression.isra.15+0x178>
   1a7ca:	2500      	movs	r5, #0
   1a7cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a7d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a7d4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a7d8:	4798      	blx	r3
   1a7da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7de:	3301      	adds	r3, #1
   1a7e0:	4629      	mov	r1, r5
   1a7e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a7e6:	2201      	movs	r2, #1
   1a7e8:	e72b      	b.n	1a642 <d_maybe_print_fold_expression.isra.15+0xba>
   1a7ea:	bf00      	nop
   1a7ec:	00024778 	.word	0x00024778
   1a7f0:	00024770 	.word	0x00024770
   1a7f4:	00022bd4 	.word	0x00022bd4

0001a7f8 <d_demangle_callback.constprop.17>:
   1a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7fc:	b0e7      	sub	sp, #412	; 0x19c
   1a7fe:	f890 9000 	ldrb.w	r9, [r0]
   1a802:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a806:	af00      	add	r7, sp, #0
   1a808:	4605      	mov	r5, r0
   1a80a:	4688      	mov	r8, r1
   1a80c:	4616      	mov	r6, r2
   1a80e:	f000 80f1 	beq.w	1a9f4 <d_demangle_callback.constprop.17+0x1fc>
   1a812:	2208      	movs	r2, #8
   1a814:	49bd      	ldr	r1, [pc, #756]	; (1ab0c <d_demangle_callback.constprop.17+0x314>)
   1a816:	4628      	mov	r0, r5
   1a818:	f004 fb20 	bl	1ee5c <strncmp>
   1a81c:	b948      	cbnz	r0, 1a832 <d_demangle_callback.constprop.17+0x3a>
   1a81e:	7a2b      	ldrb	r3, [r5, #8]
   1a820:	2b2e      	cmp	r3, #46	; 0x2e
   1a822:	f000 80d6 	beq.w	1a9d2 <d_demangle_callback.constprop.17+0x1da>
   1a826:	2b5f      	cmp	r3, #95	; 0x5f
   1a828:	f000 80d3 	beq.w	1a9d2 <d_demangle_callback.constprop.17+0x1da>
   1a82c:	2b24      	cmp	r3, #36	; 0x24
   1a82e:	f000 80d0 	beq.w	1a9d2 <d_demangle_callback.constprop.17+0x1da>
   1a832:	f04f 0a00 	mov.w	sl, #0
   1a836:	4628      	mov	r0, r5
   1a838:	f004 faa2 	bl	1ed80 <strlen>
   1a83c:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a840:	0083      	lsls	r3, r0, #2
   1a842:	eb03 020b 	add.w	r2, r3, fp
   1a846:	0092      	lsls	r2, r2, #2
   1a848:	3208      	adds	r2, #8
   1a84a:	330a      	adds	r3, #10
   1a84c:	ebad 0d02 	sub.w	sp, sp, r2
   1a850:	f023 0307 	bic.w	r3, r3, #7
   1a854:	2400      	movs	r4, #0
   1a856:	466a      	mov	r2, sp
   1a858:	1829      	adds	r1, r5, r0
   1a85a:	ebad 0d03 	sub.w	sp, sp, r3
   1a85e:	f1ba 0f01 	cmp.w	sl, #1
   1a862:	f04f 0311 	mov.w	r3, #17
   1a866:	627a      	str	r2, [r7, #36]	; 0x24
   1a868:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a86c:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a870:	617d      	str	r5, [r7, #20]
   1a872:	623d      	str	r5, [r7, #32]
   1a874:	63b8      	str	r0, [r7, #56]	; 0x38
   1a876:	61b9      	str	r1, [r7, #24]
   1a878:	61fb      	str	r3, [r7, #28]
   1a87a:	62bc      	str	r4, [r7, #40]	; 0x28
   1a87c:	637c      	str	r4, [r7, #52]	; 0x34
   1a87e:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a880:	643c      	str	r4, [r7, #64]	; 0x40
   1a882:	647c      	str	r4, [r7, #68]	; 0x44
   1a884:	64bc      	str	r4, [r7, #72]	; 0x48
   1a886:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a888:	f000 80bb 	beq.w	1aa02 <d_demangle_callback.constprop.17+0x20a>
   1a88c:	f0c0 80cf 	bcc.w	1aa2e <d_demangle_callback.constprop.17+0x236>
   1a890:	7aeb      	ldrb	r3, [r5, #11]
   1a892:	f1ba 0f02 	cmp.w	sl, #2
   1a896:	bf18      	it	ne
   1a898:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a89c:	f105 0a0b 	add.w	sl, r5, #11
   1a8a0:	bf08      	it	eq
   1a8a2:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a8a6:	2b5f      	cmp	r3, #95	; 0x5f
   1a8a8:	f8c7 a020 	str.w	sl, [r7, #32]
   1a8ac:	f000 80b2 	beq.w	1aa14 <d_demangle_callback.constprop.17+0x21c>
   1a8b0:	4650      	mov	r0, sl
   1a8b2:	607a      	str	r2, [r7, #4]
   1a8b4:	f004 fa64 	bl	1ed80 <strlen>
   1a8b8:	f1bb 0f00 	cmp.w	fp, #0
   1a8bc:	687a      	ldr	r2, [r7, #4]
   1a8be:	f340 80bf 	ble.w	1aa40 <d_demangle_callback.constprop.17+0x248>
   1a8c2:	2301      	movs	r3, #1
   1a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a8c6:	2800      	cmp	r0, #0
   1a8c8:	f000 80ba 	beq.w	1aa40 <d_demangle_callback.constprop.17+0x248>
   1a8cc:	2300      	movs	r3, #0
   1a8ce:	f8c2 a004 	str.w	sl, [r2, #4]
   1a8d2:	6090      	str	r0, [r2, #8]
   1a8d4:	7013      	strb	r3, [r2, #0]
   1a8d6:	4649      	mov	r1, r9
   1a8d8:	2300      	movs	r3, #0
   1a8da:	f107 0014 	add.w	r0, r7, #20
   1a8de:	f7f9 fe31 	bl	14544 <d_make_comp>
   1a8e2:	6a3c      	ldr	r4, [r7, #32]
   1a8e4:	4605      	mov	r5, r0
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	f004 fa4a 	bl	1ed80 <strlen>
   1a8ec:	1823      	adds	r3, r4, r0
   1a8ee:	623b      	str	r3, [r7, #32]
   1a8f0:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a8f4:	f1b9 0f00 	cmp.w	r9, #0
   1a8f8:	f040 8086 	bne.w	1aa08 <d_demangle_callback.constprop.17+0x210>
   1a8fc:	2d00      	cmp	r5, #0
   1a8fe:	f000 8083 	beq.w	1aa08 <d_demangle_callback.constprop.17+0x210>
   1a902:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a906:	462a      	mov	r2, r5
   1a908:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a90c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a910:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a914:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a918:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a91c:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a920:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a924:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a928:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a92c:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a930:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a934:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a938:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a93c:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a940:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a944:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a948:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a94c:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a950:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a954:	f7f9 fec4 	bl	146e0 <d_count_templates_scopes>
   1a958:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a95c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a960:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a964:	613b      	str	r3, [r7, #16]
   1a966:	00d0      	lsls	r0, r2, #3
   1a968:	fb01 f102 	mul.w	r1, r1, r2
   1a96c:	3008      	adds	r0, #8
   1a96e:	46e8      	mov	r8, sp
   1a970:	00ca      	lsls	r2, r1, #3
   1a972:	ebad 0d00 	sub.w	sp, sp, r0
   1a976:	4668      	mov	r0, sp
   1a978:	3208      	adds	r2, #8
   1a97a:	ebad 0d02 	sub.w	sp, sp, r2
   1a97e:	f107 060c 	add.w	r6, r7, #12
   1a982:	462a      	mov	r2, r5
   1a984:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a988:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a98c:	4620      	mov	r0, r4
   1a98e:	2111      	movs	r1, #17
   1a990:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a994:	60fd      	str	r5, [r7, #12]
   1a996:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a99a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a99e:	f7fc f9c5 	bl	16d2c <d_print_comp_inner>
   1a9a2:	693b      	ldr	r3, [r7, #16]
   1a9a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a9a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a9ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a9b0:	f804 9001 	strb.w	r9, [r4, r1]
   1a9b4:	4620      	mov	r0, r4
   1a9b6:	46c5      	mov	sp, r8
   1a9b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a9bc:	4798      	blx	r3
   1a9be:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1a9c2:	fab0 f080 	clz	r0, r0
   1a9c6:	0940      	lsrs	r0, r0, #5
   1a9c8:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a9cc:	46bd      	mov	sp, r7
   1a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9d2:	7a6b      	ldrb	r3, [r5, #9]
   1a9d4:	2b44      	cmp	r3, #68	; 0x44
   1a9d6:	d002      	beq.n	1a9de <d_demangle_callback.constprop.17+0x1e6>
   1a9d8:	2b49      	cmp	r3, #73	; 0x49
   1a9da:	f47f af2a 	bne.w	1a832 <d_demangle_callback.constprop.17+0x3a>
   1a9de:	7aaa      	ldrb	r2, [r5, #10]
   1a9e0:	2a5f      	cmp	r2, #95	; 0x5f
   1a9e2:	f47f af26 	bne.w	1a832 <d_demangle_callback.constprop.17+0x3a>
   1a9e6:	2b49      	cmp	r3, #73	; 0x49
   1a9e8:	bf14      	ite	ne
   1a9ea:	f04f 0a03 	movne.w	sl, #3
   1a9ee:	f04f 0a02 	moveq.w	sl, #2
   1a9f2:	e720      	b.n	1a836 <d_demangle_callback.constprop.17+0x3e>
   1a9f4:	7843      	ldrb	r3, [r0, #1]
   1a9f6:	2b5a      	cmp	r3, #90	; 0x5a
   1a9f8:	f47f af0b 	bne.w	1a812 <d_demangle_callback.constprop.17+0x1a>
   1a9fc:	f04f 0a01 	mov.w	sl, #1
   1aa00:	e719      	b.n	1a836 <d_demangle_callback.constprop.17+0x3e>
   1aa02:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1aa06:	d01d      	beq.n	1aa44 <d_demangle_callback.constprop.17+0x24c>
   1aa08:	2000      	movs	r0, #0
   1aa0a:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1aa0e:	46bd      	mov	sp, r7
   1aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa14:	7b2b      	ldrb	r3, [r5, #12]
   1aa16:	2b5a      	cmp	r3, #90	; 0x5a
   1aa18:	f47f af4a 	bne.w	1a8b0 <d_demangle_callback.constprop.17+0xb8>
   1aa1c:	350d      	adds	r5, #13
   1aa1e:	4621      	mov	r1, r4
   1aa20:	f107 0014 	add.w	r0, r7, #20
   1aa24:	623d      	str	r5, [r7, #32]
   1aa26:	f7fb fe35 	bl	16694 <d_encoding>
   1aa2a:	4602      	mov	r2, r0
   1aa2c:	e753      	b.n	1a8d6 <d_demangle_callback.constprop.17+0xde>
   1aa2e:	f107 0014 	add.w	r0, r7, #20
   1aa32:	f7fb f817 	bl	15a64 <d_type>
   1aa36:	6a3b      	ldr	r3, [r7, #32]
   1aa38:	4605      	mov	r5, r0
   1aa3a:	f893 9000 	ldrb.w	r9, [r3]
   1aa3e:	e759      	b.n	1a8f4 <d_demangle_callback.constprop.17+0xfc>
   1aa40:	2200      	movs	r2, #0
   1aa42:	e748      	b.n	1a8d6 <d_demangle_callback.constprop.17+0xde>
   1aa44:	786b      	ldrb	r3, [r5, #1]
   1aa46:	2b5a      	cmp	r3, #90	; 0x5a
   1aa48:	d1de      	bne.n	1aa08 <d_demangle_callback.constprop.17+0x210>
   1aa4a:	3502      	adds	r5, #2
   1aa4c:	4651      	mov	r1, sl
   1aa4e:	f107 0014 	add.w	r0, r7, #20
   1aa52:	623d      	str	r5, [r7, #32]
   1aa54:	f7fb fe1e 	bl	16694 <d_encoding>
   1aa58:	69fb      	ldr	r3, [r7, #28]
   1aa5a:	07db      	lsls	r3, r3, #31
   1aa5c:	4605      	mov	r5, r0
   1aa5e:	d551      	bpl.n	1ab04 <d_demangle_callback.constprop.17+0x30c>
   1aa60:	6a38      	ldr	r0, [r7, #32]
   1aa62:	f890 9000 	ldrb.w	r9, [r0]
   1aa66:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1aa6a:	f47f af43 	bne.w	1a8f4 <d_demangle_callback.constprop.17+0xfc>
   1aa6e:	7843      	ldrb	r3, [r0, #1]
   1aa70:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1aa74:	2a19      	cmp	r2, #25
   1aa76:	d939      	bls.n	1aaec <d_demangle_callback.constprop.17+0x2f4>
   1aa78:	2b5f      	cmp	r3, #95	; 0x5f
   1aa7a:	d037      	beq.n	1aaec <d_demangle_callback.constprop.17+0x2f4>
   1aa7c:	3b30      	subs	r3, #48	; 0x30
   1aa7e:	2b09      	cmp	r3, #9
   1aa80:	d840      	bhi.n	1ab04 <d_demangle_callback.constprop.17+0x30c>
   1aa82:	7803      	ldrb	r3, [r0, #0]
   1aa84:	4602      	mov	r2, r0
   1aa86:	2b2e      	cmp	r3, #46	; 0x2e
   1aa88:	d112      	bne.n	1aab0 <d_demangle_callback.constprop.17+0x2b8>
   1aa8a:	7853      	ldrb	r3, [r2, #1]
   1aa8c:	3b30      	subs	r3, #48	; 0x30
   1aa8e:	2b09      	cmp	r3, #9
   1aa90:	d80e      	bhi.n	1aab0 <d_demangle_callback.constprop.17+0x2b8>
   1aa92:	7893      	ldrb	r3, [r2, #2]
   1aa94:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aa98:	2909      	cmp	r1, #9
   1aa9a:	f102 0202 	add.w	r2, r2, #2
   1aa9e:	d8f2      	bhi.n	1aa86 <d_demangle_callback.constprop.17+0x28e>
   1aaa0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1aaa4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aaa8:	2909      	cmp	r1, #9
   1aaaa:	d9f9      	bls.n	1aaa0 <d_demangle_callback.constprop.17+0x2a8>
   1aaac:	2b2e      	cmp	r3, #46	; 0x2e
   1aaae:	d0ec      	beq.n	1aa8a <d_demangle_callback.constprop.17+0x292>
   1aab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aab4:	623a      	str	r2, [r7, #32]
   1aab6:	4299      	cmp	r1, r3
   1aab8:	da16      	bge.n	1aae8 <d_demangle_callback.constprop.17+0x2f0>
   1aaba:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1aabe:	1c4b      	adds	r3, r1, #1
   1aac0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1aac4:	62bb      	str	r3, [r7, #40]	; 0x28
   1aac6:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1aaca:	d00d      	beq.n	1aae8 <d_demangle_callback.constprop.17+0x2f0>
   1aacc:	1a12      	subs	r2, r2, r0
   1aace:	d00b      	beq.n	1aae8 <d_demangle_callback.constprop.17+0x2f0>
   1aad0:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1aad4:	6058      	str	r0, [r3, #4]
   1aad6:	609a      	str	r2, [r3, #8]
   1aad8:	462a      	mov	r2, r5
   1aada:	214d      	movs	r1, #77	; 0x4d
   1aadc:	f107 0014 	add.w	r0, r7, #20
   1aae0:	f7f9 fd30 	bl	14544 <d_make_comp>
   1aae4:	4605      	mov	r5, r0
   1aae6:	e7bb      	b.n	1aa60 <d_demangle_callback.constprop.17+0x268>
   1aae8:	2300      	movs	r3, #0
   1aaea:	e7f5      	b.n	1aad8 <d_demangle_callback.constprop.17+0x2e0>
   1aaec:	1c81      	adds	r1, r0, #2
   1aaee:	460a      	mov	r2, r1
   1aaf0:	f811 3b01 	ldrb.w	r3, [r1], #1
   1aaf4:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1aaf8:	f1be 0f19 	cmp.w	lr, #25
   1aafc:	d9f7      	bls.n	1aaee <d_demangle_callback.constprop.17+0x2f6>
   1aafe:	2b5f      	cmp	r3, #95	; 0x5f
   1ab00:	d0f5      	beq.n	1aaee <d_demangle_callback.constprop.17+0x2f6>
   1ab02:	e7c0      	b.n	1aa86 <d_demangle_callback.constprop.17+0x28e>
   1ab04:	6a3b      	ldr	r3, [r7, #32]
   1ab06:	f893 9000 	ldrb.w	r9, [r3]
   1ab0a:	e6f3      	b.n	1a8f4 <d_demangle_callback.constprop.17+0xfc>
   1ab0c:	00024420 	.word	0x00024420

0001ab10 <__cxa_demangle>:
   1ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab14:	b084      	sub	sp, #16
   1ab16:	b378      	cbz	r0, 1ab78 <__cxa_demangle+0x68>
   1ab18:	b101      	cbz	r1, 1ab1c <__cxa_demangle+0xc>
   1ab1a:	b36a      	cbz	r2, 1ab78 <__cxa_demangle+0x68>
   1ab1c:	2400      	movs	r4, #0
   1ab1e:	4616      	mov	r6, r2
   1ab20:	460d      	mov	r5, r1
   1ab22:	466a      	mov	r2, sp
   1ab24:	4927      	ldr	r1, [pc, #156]	; (1abc4 <__cxa_demangle+0xb4>)
   1ab26:	9400      	str	r4, [sp, #0]
   1ab28:	461f      	mov	r7, r3
   1ab2a:	9401      	str	r4, [sp, #4]
   1ab2c:	9402      	str	r4, [sp, #8]
   1ab2e:	9403      	str	r4, [sp, #12]
   1ab30:	f7ff fe62 	bl	1a7f8 <d_demangle_callback.constprop.17>
   1ab34:	2800      	cmp	r0, #0
   1ab36:	d03f      	beq.n	1abb8 <__cxa_demangle+0xa8>
   1ab38:	9b03      	ldr	r3, [sp, #12]
   1ab3a:	b1d3      	cbz	r3, 1ab72 <__cxa_demangle+0x62>
   1ab3c:	f04f 0801 	mov.w	r8, #1
   1ab40:	9c00      	ldr	r4, [sp, #0]
   1ab42:	b35c      	cbz	r4, 1ab9c <__cxa_demangle+0x8c>
   1ab44:	b33d      	cbz	r5, 1ab96 <__cxa_demangle+0x86>
   1ab46:	4620      	mov	r0, r4
   1ab48:	f004 f91a 	bl	1ed80 <strlen>
   1ab4c:	6833      	ldr	r3, [r6, #0]
   1ab4e:	4298      	cmp	r0, r3
   1ab50:	d21b      	bcs.n	1ab8a <__cxa_demangle+0x7a>
   1ab52:	1c42      	adds	r2, r0, #1
   1ab54:	4621      	mov	r1, r4
   1ab56:	4628      	mov	r0, r5
   1ab58:	f003 fbca 	bl	1e2f0 <memcpy>
   1ab5c:	4620      	mov	r0, r4
   1ab5e:	f003 f879 	bl	1dc54 <free>
   1ab62:	462c      	mov	r4, r5
   1ab64:	b10f      	cbz	r7, 1ab6a <__cxa_demangle+0x5a>
   1ab66:	2300      	movs	r3, #0
   1ab68:	603b      	str	r3, [r7, #0]
   1ab6a:	4620      	mov	r0, r4
   1ab6c:	b004      	add	sp, #16
   1ab6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab72:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1ab76:	e7e3      	b.n	1ab40 <__cxa_demangle+0x30>
   1ab78:	b113      	cbz	r3, 1ab80 <__cxa_demangle+0x70>
   1ab7a:	f06f 0202 	mvn.w	r2, #2
   1ab7e:	601a      	str	r2, [r3, #0]
   1ab80:	2400      	movs	r4, #0
   1ab82:	4620      	mov	r0, r4
   1ab84:	b004      	add	sp, #16
   1ab86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab8a:	4628      	mov	r0, r5
   1ab8c:	f003 f862 	bl	1dc54 <free>
   1ab90:	f8c6 8000 	str.w	r8, [r6]
   1ab94:	e7e6      	b.n	1ab64 <__cxa_demangle+0x54>
   1ab96:	2e00      	cmp	r6, #0
   1ab98:	d1fa      	bne.n	1ab90 <__cxa_demangle+0x80>
   1ab9a:	e7e3      	b.n	1ab64 <__cxa_demangle+0x54>
   1ab9c:	2f00      	cmp	r7, #0
   1ab9e:	d0ef      	beq.n	1ab80 <__cxa_demangle+0x70>
   1aba0:	f1b8 0f01 	cmp.w	r8, #1
   1aba4:	d004      	beq.n	1abb0 <__cxa_demangle+0xa0>
   1aba6:	f06f 0301 	mvn.w	r3, #1
   1abaa:	603b      	str	r3, [r7, #0]
   1abac:	2400      	movs	r4, #0
   1abae:	e7dc      	b.n	1ab6a <__cxa_demangle+0x5a>
   1abb0:	f04f 33ff 	mov.w	r3, #4294967295
   1abb4:	603b      	str	r3, [r7, #0]
   1abb6:	e7d8      	b.n	1ab6a <__cxa_demangle+0x5a>
   1abb8:	9800      	ldr	r0, [sp, #0]
   1abba:	f003 f84b 	bl	1dc54 <free>
   1abbe:	2f00      	cmp	r7, #0
   1abc0:	d1f1      	bne.n	1aba6 <__cxa_demangle+0x96>
   1abc2:	e7dd      	b.n	1ab80 <__cxa_demangle+0x70>
   1abc4:	00014c69 	.word	0x00014c69

0001abc8 <__gcclibcxx_demangle_callback>:
   1abc8:	b160      	cbz	r0, 1abe4 <__gcclibcxx_demangle_callback+0x1c>
   1abca:	b508      	push	{r3, lr}
   1abcc:	b139      	cbz	r1, 1abde <__gcclibcxx_demangle_callback+0x16>
   1abce:	f7ff fe13 	bl	1a7f8 <d_demangle_callback.constprop.17>
   1abd2:	2800      	cmp	r0, #0
   1abd4:	bf0c      	ite	eq
   1abd6:	f06f 0001 	mvneq.w	r0, #1
   1abda:	2000      	movne	r0, #0
   1abdc:	bd08      	pop	{r3, pc}
   1abde:	f06f 0002 	mvn.w	r0, #2
   1abe2:	bd08      	pop	{r3, pc}
   1abe4:	f06f 0002 	mvn.w	r0, #2
   1abe8:	4770      	bx	lr
   1abea:	bf00      	nop

0001abec <__cxa_current_exception_type>:
   1abec:	b508      	push	{r3, lr}
   1abee:	f7f9 f8f5 	bl	13ddc <__cxa_get_globals>
   1abf2:	6800      	ldr	r0, [r0, #0]
   1abf4:	b130      	cbz	r0, 1ac04 <__cxa_current_exception_type+0x18>
   1abf6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1abfa:	2b01      	cmp	r3, #1
   1abfc:	bf04      	itt	eq
   1abfe:	6800      	ldreq	r0, [r0, #0]
   1ac00:	3878      	subeq	r0, #120	; 0x78
   1ac02:	6800      	ldr	r0, [r0, #0]
   1ac04:	bd08      	pop	{r3, pc}
   1ac06:	bf00      	nop

0001ac08 <powf>:
   1ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac0a:	ed2d 8b04 	vpush	{d8-d9}
   1ac0e:	4db3      	ldr	r5, [pc, #716]	; (1aedc <powf+0x2d4>)
   1ac10:	b08b      	sub	sp, #44	; 0x2c
   1ac12:	eef0 8a40 	vmov.f32	s17, s0
   1ac16:	eeb0 8a60 	vmov.f32	s16, s1
   1ac1a:	f000 f9df 	bl	1afdc <__ieee754_powf>
   1ac1e:	f995 4000 	ldrsb.w	r4, [r5]
   1ac22:	1c63      	adds	r3, r4, #1
   1ac24:	eeb0 9a40 	vmov.f32	s18, s0
   1ac28:	d02e      	beq.n	1ac88 <powf+0x80>
   1ac2a:	eeb4 8a48 	vcmp.f32	s16, s16
   1ac2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac32:	d629      	bvs.n	1ac88 <powf+0x80>
   1ac34:	eef4 8a68 	vcmp.f32	s17, s17
   1ac38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac3c:	f180 80a2 	bvs.w	1ad84 <powf+0x17c>
   1ac40:	eef5 8a40 	vcmp.f32	s17, #0.0
   1ac44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac48:	d124      	bne.n	1ac94 <powf+0x8c>
   1ac4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ac4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac52:	d159      	bne.n	1ad08 <powf+0x100>
   1ac54:	2301      	movs	r3, #1
   1ac56:	4aa2      	ldr	r2, [pc, #648]	; (1aee0 <powf+0x2d8>)
   1ac58:	9300      	str	r3, [sp, #0]
   1ac5a:	ee18 0a90 	vmov	r0, s17
   1ac5e:	2300      	movs	r3, #0
   1ac60:	9201      	str	r2, [sp, #4]
   1ac62:	9308      	str	r3, [sp, #32]
   1ac64:	f000 ff3a 	bl	1badc <__aeabi_f2d>
   1ac68:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac6c:	ee18 0a10 	vmov	r0, s16
   1ac70:	f000 ff34 	bl	1badc <__aeabi_f2d>
   1ac74:	2200      	movs	r2, #0
   1ac76:	2300      	movs	r3, #0
   1ac78:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ac80:	2c00      	cmp	r4, #0
   1ac82:	d067      	beq.n	1ad54 <powf+0x14c>
   1ac84:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1ac88:	eeb0 0a49 	vmov.f32	s0, s18
   1ac8c:	b00b      	add	sp, #44	; 0x2c
   1ac8e:	ecbd 8b04 	vpop	{d8-d9}
   1ac92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac94:	f000 fd3a 	bl	1b70c <finitef>
   1ac98:	4604      	mov	r4, r0
   1ac9a:	2800      	cmp	r0, #0
   1ac9c:	f000 8091 	beq.w	1adc2 <powf+0x1ba>
   1aca0:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1aca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aca8:	d1ee      	bne.n	1ac88 <powf+0x80>
   1acaa:	eeb0 0a68 	vmov.f32	s0, s17
   1acae:	f000 fd2d 	bl	1b70c <finitef>
   1acb2:	2800      	cmp	r0, #0
   1acb4:	d0e8      	beq.n	1ac88 <powf+0x80>
   1acb6:	eeb0 0a48 	vmov.f32	s0, s16
   1acba:	f000 fd27 	bl	1b70c <finitef>
   1acbe:	2800      	cmp	r0, #0
   1acc0:	d0e2      	beq.n	1ac88 <powf+0x80>
   1acc2:	2304      	movs	r3, #4
   1acc4:	4a86      	ldr	r2, [pc, #536]	; (1aee0 <powf+0x2d8>)
   1acc6:	9300      	str	r3, [sp, #0]
   1acc8:	ee18 0a90 	vmov	r0, s17
   1accc:	2300      	movs	r3, #0
   1acce:	9308      	str	r3, [sp, #32]
   1acd0:	9201      	str	r2, [sp, #4]
   1acd2:	f000 ff03 	bl	1badc <__aeabi_f2d>
   1acd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1acda:	ee18 0a10 	vmov	r0, s16
   1acde:	f000 fefd 	bl	1badc <__aeabi_f2d>
   1ace2:	2600      	movs	r6, #0
   1ace4:	2700      	movs	r7, #0
   1ace6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acea:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1acee:	f995 3000 	ldrsb.w	r3, [r5]
   1acf2:	2b02      	cmp	r3, #2
   1acf4:	d003      	beq.n	1acfe <powf+0xf6>
   1acf6:	4668      	mov	r0, sp
   1acf8:	f000 fc6c 	bl	1b5d4 <matherr>
   1acfc:	bb80      	cbnz	r0, 1ad60 <powf+0x158>
   1acfe:	f002 fd15 	bl	1d72c <__errno>
   1ad02:	2322      	movs	r3, #34	; 0x22
   1ad04:	6003      	str	r3, [r0, #0]
   1ad06:	e02b      	b.n	1ad60 <powf+0x158>
   1ad08:	eeb0 0a48 	vmov.f32	s0, s16
   1ad0c:	f000 fcfe 	bl	1b70c <finitef>
   1ad10:	2800      	cmp	r0, #0
   1ad12:	d0b9      	beq.n	1ac88 <powf+0x80>
   1ad14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ad18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad1c:	d5b4      	bpl.n	1ac88 <powf+0x80>
   1ad1e:	2301      	movs	r3, #1
   1ad20:	4a6f      	ldr	r2, [pc, #444]	; (1aee0 <powf+0x2d8>)
   1ad22:	9300      	str	r3, [sp, #0]
   1ad24:	ee18 0a90 	vmov	r0, s17
   1ad28:	2300      	movs	r3, #0
   1ad2a:	9308      	str	r3, [sp, #32]
   1ad2c:	9201      	str	r2, [sp, #4]
   1ad2e:	f000 fed5 	bl	1badc <__aeabi_f2d>
   1ad32:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad36:	ee18 0a10 	vmov	r0, s16
   1ad3a:	f000 fecf 	bl	1badc <__aeabi_f2d>
   1ad3e:	f995 3000 	ldrsb.w	r3, [r5]
   1ad42:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad46:	2b00      	cmp	r3, #0
   1ad48:	f040 809b 	bne.w	1ae82 <powf+0x27a>
   1ad4c:	2200      	movs	r2, #0
   1ad4e:	2300      	movs	r3, #0
   1ad50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad54:	4668      	mov	r0, sp
   1ad56:	f000 fc3d 	bl	1b5d4 <matherr>
   1ad5a:	2800      	cmp	r0, #0
   1ad5c:	f000 808c 	beq.w	1ae78 <powf+0x270>
   1ad60:	9b08      	ldr	r3, [sp, #32]
   1ad62:	b11b      	cbz	r3, 1ad6c <powf+0x164>
   1ad64:	f002 fce2 	bl	1d72c <__errno>
   1ad68:	9b08      	ldr	r3, [sp, #32]
   1ad6a:	6003      	str	r3, [r0, #0]
   1ad6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ad70:	f001 f9ea 	bl	1c148 <__aeabi_d2f>
   1ad74:	ee09 0a10 	vmov	s18, r0
   1ad78:	eeb0 0a49 	vmov.f32	s0, s18
   1ad7c:	b00b      	add	sp, #44	; 0x2c
   1ad7e:	ecbd 8b04 	vpop	{d8-d9}
   1ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad84:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ad88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad8c:	f47f af7c 	bne.w	1ac88 <powf+0x80>
   1ad90:	2301      	movs	r3, #1
   1ad92:	4a53      	ldr	r2, [pc, #332]	; (1aee0 <powf+0x2d8>)
   1ad94:	9300      	str	r3, [sp, #0]
   1ad96:	ee18 0a90 	vmov	r0, s17
   1ad9a:	2300      	movs	r3, #0
   1ad9c:	9201      	str	r2, [sp, #4]
   1ad9e:	9308      	str	r3, [sp, #32]
   1ada0:	f000 fe9c 	bl	1badc <__aeabi_f2d>
   1ada4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ada8:	ee18 0a10 	vmov	r0, s16
   1adac:	f000 fe96 	bl	1badc <__aeabi_f2d>
   1adb0:	4b4c      	ldr	r3, [pc, #304]	; (1aee4 <powf+0x2dc>)
   1adb2:	2200      	movs	r2, #0
   1adb4:	2c02      	cmp	r4, #2
   1adb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1adba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1adbe:	d1c9      	bne.n	1ad54 <powf+0x14c>
   1adc0:	e760      	b.n	1ac84 <powf+0x7c>
   1adc2:	eeb0 0a68 	vmov.f32	s0, s17
   1adc6:	f000 fca1 	bl	1b70c <finitef>
   1adca:	2800      	cmp	r0, #0
   1adcc:	f43f af68 	beq.w	1aca0 <powf+0x98>
   1add0:	eeb0 0a48 	vmov.f32	s0, s16
   1add4:	f000 fc9a 	bl	1b70c <finitef>
   1add8:	2800      	cmp	r0, #0
   1adda:	f43f af61 	beq.w	1aca0 <powf+0x98>
   1adde:	eeb4 9a49 	vcmp.f32	s18, s18
   1ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ade6:	f180 8087 	bvs.w	1aef8 <powf+0x2f0>
   1adea:	4b3d      	ldr	r3, [pc, #244]	; (1aee0 <powf+0x2d8>)
   1adec:	9408      	str	r4, [sp, #32]
   1adee:	2203      	movs	r2, #3
   1adf0:	ee18 0a90 	vmov	r0, s17
   1adf4:	e88d 000c 	stmia.w	sp, {r2, r3}
   1adf8:	f000 fe70 	bl	1badc <__aeabi_f2d>
   1adfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae00:	ee18 0a10 	vmov	r0, s16
   1ae04:	f000 fe6a 	bl	1badc <__aeabi_f2d>
   1ae08:	f995 3000 	ldrsb.w	r3, [r5]
   1ae0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae10:	2b00      	cmp	r3, #0
   1ae12:	d13d      	bne.n	1ae90 <powf+0x288>
   1ae14:	4b34      	ldr	r3, [pc, #208]	; (1aee8 <powf+0x2e0>)
   1ae16:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ae1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ae1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae22:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae26:	f57f af66 	bpl.w	1acf6 <powf+0xee>
   1ae2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ae2e:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ae32:	ee17 0a90 	vmov	r0, s15
   1ae36:	f000 fe51 	bl	1badc <__aeabi_f2d>
   1ae3a:	4606      	mov	r6, r0
   1ae3c:	460f      	mov	r7, r1
   1ae3e:	ec47 6b10 	vmov	d0, r6, r7
   1ae42:	f000 fbc9 	bl	1b5d8 <rint>
   1ae46:	4630      	mov	r0, r6
   1ae48:	ec53 2b10 	vmov	r2, r3, d0
   1ae4c:	4639      	mov	r1, r7
   1ae4e:	f001 f901 	bl	1c054 <__aeabi_dcmpeq>
   1ae52:	2800      	cmp	r0, #0
   1ae54:	d13f      	bne.n	1aed6 <powf+0x2ce>
   1ae56:	4925      	ldr	r1, [pc, #148]	; (1aeec <powf+0x2e4>)
   1ae58:	f995 3000 	ldrsb.w	r3, [r5]
   1ae5c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1ae60:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ae64:	e745      	b.n	1acf2 <powf+0xea>
   1ae66:	4610      	mov	r0, r2
   1ae68:	4619      	mov	r1, r3
   1ae6a:	f000 ffb5 	bl	1bdd8 <__aeabi_ddiv>
   1ae6e:	2c02      	cmp	r4, #2
   1ae70:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ae74:	f47f af6e 	bne.w	1ad54 <powf+0x14c>
   1ae78:	f002 fc58 	bl	1d72c <__errno>
   1ae7c:	2321      	movs	r3, #33	; 0x21
   1ae7e:	6003      	str	r3, [r0, #0]
   1ae80:	e76e      	b.n	1ad60 <powf+0x158>
   1ae82:	491b      	ldr	r1, [pc, #108]	; (1aef0 <powf+0x2e8>)
   1ae84:	2000      	movs	r0, #0
   1ae86:	2b02      	cmp	r3, #2
   1ae88:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ae8c:	d0f4      	beq.n	1ae78 <powf+0x270>
   1ae8e:	e761      	b.n	1ad54 <powf+0x14c>
   1ae90:	4918      	ldr	r1, [pc, #96]	; (1aef4 <powf+0x2ec>)
   1ae92:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ae96:	2000      	movs	r0, #0
   1ae98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aea0:	f57f af27 	bpl.w	1acf2 <powf+0xea>
   1aea4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1aea8:	ee68 7a27 	vmul.f32	s15, s16, s15
   1aeac:	ee17 0a90 	vmov	r0, s15
   1aeb0:	f000 fe14 	bl	1badc <__aeabi_f2d>
   1aeb4:	4606      	mov	r6, r0
   1aeb6:	460f      	mov	r7, r1
   1aeb8:	ec47 6b10 	vmov	d0, r6, r7
   1aebc:	f000 fb8c 	bl	1b5d8 <rint>
   1aec0:	4630      	mov	r0, r6
   1aec2:	ec53 2b10 	vmov	r2, r3, d0
   1aec6:	4639      	mov	r1, r7
   1aec8:	f001 f8c4 	bl	1c054 <__aeabi_dcmpeq>
   1aecc:	b918      	cbnz	r0, 1aed6 <powf+0x2ce>
   1aece:	4b08      	ldr	r3, [pc, #32]	; (1aef0 <powf+0x2e8>)
   1aed0:	2200      	movs	r2, #0
   1aed2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aed6:	f995 3000 	ldrsb.w	r3, [r5]
   1aeda:	e70a      	b.n	1acf2 <powf+0xea>
   1aedc:	200000f4 	.word	0x200000f4
   1aee0:	00024c6c 	.word	0x00024c6c
   1aee4:	3ff00000 	.word	0x3ff00000
   1aee8:	47efffff 	.word	0x47efffff
   1aeec:	c7efffff 	.word	0xc7efffff
   1aef0:	fff00000 	.word	0xfff00000
   1aef4:	7ff00000 	.word	0x7ff00000
   1aef8:	4b0c      	ldr	r3, [pc, #48]	; (1af2c <powf+0x324>)
   1aefa:	9408      	str	r4, [sp, #32]
   1aefc:	2201      	movs	r2, #1
   1aefe:	ee18 0a90 	vmov	r0, s17
   1af02:	e88d 000c 	stmia.w	sp, {r2, r3}
   1af06:	f000 fde9 	bl	1badc <__aeabi_f2d>
   1af0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1af0e:	ee18 0a10 	vmov	r0, s16
   1af12:	f000 fde3 	bl	1badc <__aeabi_f2d>
   1af16:	f995 4000 	ldrsb.w	r4, [r5]
   1af1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1af1e:	2200      	movs	r2, #0
   1af20:	2300      	movs	r3, #0
   1af22:	2c00      	cmp	r4, #0
   1af24:	d19f      	bne.n	1ae66 <powf+0x25e>
   1af26:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af2a:	e713      	b.n	1ad54 <powf+0x14c>
   1af2c:	00024c6c 	.word	0x00024c6c

0001af30 <sqrtf>:
   1af30:	b510      	push	{r4, lr}
   1af32:	ed2d 8b02 	vpush	{d8}
   1af36:	b08a      	sub	sp, #40	; 0x28
   1af38:	eeb0 8a40 	vmov.f32	s16, s0
   1af3c:	f000 fb46 	bl	1b5cc <__ieee754_sqrtf>
   1af40:	4b24      	ldr	r3, [pc, #144]	; (1afd4 <sqrtf+0xa4>)
   1af42:	f993 4000 	ldrsb.w	r4, [r3]
   1af46:	1c63      	adds	r3, r4, #1
   1af48:	d009      	beq.n	1af5e <sqrtf+0x2e>
   1af4a:	eeb4 8a48 	vcmp.f32	s16, s16
   1af4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af52:	d604      	bvs.n	1af5e <sqrtf+0x2e>
   1af54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1af58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af5c:	d403      	bmi.n	1af66 <sqrtf+0x36>
   1af5e:	b00a      	add	sp, #40	; 0x28
   1af60:	ecbd 8b02 	vpop	{d8}
   1af64:	bd10      	pop	{r4, pc}
   1af66:	2301      	movs	r3, #1
   1af68:	4a1b      	ldr	r2, [pc, #108]	; (1afd8 <sqrtf+0xa8>)
   1af6a:	9300      	str	r3, [sp, #0]
   1af6c:	ee18 0a10 	vmov	r0, s16
   1af70:	2300      	movs	r3, #0
   1af72:	9201      	str	r2, [sp, #4]
   1af74:	9308      	str	r3, [sp, #32]
   1af76:	f000 fdb1 	bl	1badc <__aeabi_f2d>
   1af7a:	2200      	movs	r2, #0
   1af7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1af80:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1af84:	2300      	movs	r3, #0
   1af86:	b1bc      	cbz	r4, 1afb8 <sqrtf+0x88>
   1af88:	4610      	mov	r0, r2
   1af8a:	4619      	mov	r1, r3
   1af8c:	f000 ff24 	bl	1bdd8 <__aeabi_ddiv>
   1af90:	2c02      	cmp	r4, #2
   1af92:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1af96:	d111      	bne.n	1afbc <sqrtf+0x8c>
   1af98:	f002 fbc8 	bl	1d72c <__errno>
   1af9c:	2321      	movs	r3, #33	; 0x21
   1af9e:	6003      	str	r3, [r0, #0]
   1afa0:	9b08      	ldr	r3, [sp, #32]
   1afa2:	b98b      	cbnz	r3, 1afc8 <sqrtf+0x98>
   1afa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1afa8:	f001 f8ce 	bl	1c148 <__aeabi_d2f>
   1afac:	ee00 0a10 	vmov	s0, r0
   1afb0:	b00a      	add	sp, #40	; 0x28
   1afb2:	ecbd 8b02 	vpop	{d8}
   1afb6:	bd10      	pop	{r4, pc}
   1afb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1afbc:	4668      	mov	r0, sp
   1afbe:	f000 fb09 	bl	1b5d4 <matherr>
   1afc2:	2800      	cmp	r0, #0
   1afc4:	d1ec      	bne.n	1afa0 <sqrtf+0x70>
   1afc6:	e7e7      	b.n	1af98 <sqrtf+0x68>
   1afc8:	f002 fbb0 	bl	1d72c <__errno>
   1afcc:	9b08      	ldr	r3, [sp, #32]
   1afce:	6003      	str	r3, [r0, #0]
   1afd0:	e7e8      	b.n	1afa4 <sqrtf+0x74>
   1afd2:	bf00      	nop
   1afd4:	200000f4 	.word	0x200000f4
   1afd8:	00024c74 	.word	0x00024c74

0001afdc <__ieee754_powf>:
   1afdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1afe0:	ed2d 8b02 	vpush	{d8}
   1afe4:	b082      	sub	sp, #8
   1afe6:	edcd 0a00 	vstr	s1, [sp]
   1afea:	9c00      	ldr	r4, [sp, #0]
   1afec:	ed8d 0a01 	vstr	s0, [sp, #4]
   1aff0:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1aff4:	d014      	beq.n	1b020 <__ieee754_powf+0x44>
   1aff6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1affa:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1affe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b002:	dd07      	ble.n	1b014 <__ieee754_powf+0x38>
   1b004:	4858      	ldr	r0, [pc, #352]	; (1b168 <__ieee754_powf+0x18c>)
   1b006:	b002      	add	sp, #8
   1b008:	ecbd 8b02 	vpop	{d8}
   1b00c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b010:	f000 bb86 	b.w	1b720 <nanf>
   1b014:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b018:	dd09      	ble.n	1b02e <__ieee754_powf+0x52>
   1b01a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b01e:	d1f1      	bne.n	1b004 <__ieee754_powf+0x28>
   1b020:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1b024:	b002      	add	sp, #8
   1b026:	ecbd 8b02 	vpop	{d8}
   1b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b02e:	f1b8 0f00 	cmp.w	r8, #0
   1b032:	db4d      	blt.n	1b0d0 <__ieee754_powf+0xf4>
   1b034:	f04f 0a00 	mov.w	sl, #0
   1b038:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b03c:	d03f      	beq.n	1b0be <__ieee754_powf+0xe2>
   1b03e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b042:	d058      	beq.n	1b0f6 <__ieee754_powf+0x11a>
   1b044:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b048:	d06e      	beq.n	1b128 <__ieee754_powf+0x14c>
   1b04a:	9d01      	ldr	r5, [sp, #4]
   1b04c:	f8dd 9000 	ldr.w	r9, [sp]
   1b050:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1b054:	ee00 5a10 	vmov	s0, r5
   1b058:	d01c      	beq.n	1b094 <__ieee754_powf+0xb8>
   1b05a:	f000 fb4f 	bl	1b6fc <fabsf>
   1b05e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b062:	d04d      	beq.n	1b100 <__ieee754_powf+0x124>
   1b064:	2f00      	cmp	r7, #0
   1b066:	d04b      	beq.n	1b100 <__ieee754_powf+0x124>
   1b068:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b06c:	d048      	beq.n	1b100 <__ieee754_powf+0x124>
   1b06e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1b072:	3b01      	subs	r3, #1
   1b074:	ea5a 0203 	orrs.w	r2, sl, r3
   1b078:	d06e      	beq.n	1b158 <__ieee754_powf+0x17c>
   1b07a:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1b07e:	dd7b      	ble.n	1b178 <__ieee754_powf+0x19c>
   1b080:	4a3a      	ldr	r2, [pc, #232]	; (1b16c <__ieee754_powf+0x190>)
   1b082:	4297      	cmp	r7, r2
   1b084:	f300 81c8 	bgt.w	1b418 <__ieee754_powf+0x43c>
   1b088:	2c00      	cmp	r4, #0
   1b08a:	f2c0 81cb 	blt.w	1b424 <__ieee754_powf+0x448>
   1b08e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b170 <__ieee754_powf+0x194>
   1b092:	e7c7      	b.n	1b024 <__ieee754_powf+0x48>
   1b094:	f1b8 0f00 	cmp.w	r8, #0
   1b098:	da4b      	bge.n	1b132 <__ieee754_powf+0x156>
   1b09a:	f000 fb2f 	bl	1b6fc <fabsf>
   1b09e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b0a2:	d001      	beq.n	1b0a8 <__ieee754_powf+0xcc>
   1b0a4:	2f00      	cmp	r7, #0
   1b0a6:	d1df      	bne.n	1b068 <__ieee754_powf+0x8c>
   1b0a8:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1b0ac:	ea57 030a 	orrs.w	r3, r7, sl
   1b0b0:	d04d      	beq.n	1b14e <__ieee754_powf+0x172>
   1b0b2:	f1ba 0f01 	cmp.w	sl, #1
   1b0b6:	d1b5      	bne.n	1b024 <__ieee754_powf+0x48>
   1b0b8:	eeb1 0a40 	vneg.f32	s0, s0
   1b0bc:	e7b2      	b.n	1b024 <__ieee754_powf+0x48>
   1b0be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b0c2:	d0ad      	beq.n	1b020 <__ieee754_powf+0x44>
   1b0c4:	dd29      	ble.n	1b11a <__ieee754_powf+0x13e>
   1b0c6:	2c00      	cmp	r4, #0
   1b0c8:	dbe1      	blt.n	1b08e <__ieee754_powf+0xb2>
   1b0ca:	ed9d 0a00 	vldr	s0, [sp]
   1b0ce:	e7a9      	b.n	1b024 <__ieee754_powf+0x48>
   1b0d0:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1b0d4:	da1e      	bge.n	1b114 <__ieee754_powf+0x138>
   1b0d6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b0da:	db09      	blt.n	1b0f0 <__ieee754_powf+0x114>
   1b0dc:	15f3      	asrs	r3, r6, #23
   1b0de:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1b0e2:	fa46 f203 	asr.w	r2, r6, r3
   1b0e6:	fa02 f303 	lsl.w	r3, r2, r3
   1b0ea:	429e      	cmp	r6, r3
   1b0ec:	f000 818f 	beq.w	1b40e <__ieee754_powf+0x432>
   1b0f0:	f04f 0a00 	mov.w	sl, #0
   1b0f4:	e7a3      	b.n	1b03e <__ieee754_powf+0x62>
   1b0f6:	2c00      	cmp	r4, #0
   1b0f8:	db22      	blt.n	1b140 <__ieee754_powf+0x164>
   1b0fa:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b0fe:	e791      	b.n	1b024 <__ieee754_powf+0x48>
   1b100:	2c00      	cmp	r4, #0
   1b102:	bfbc      	itt	lt
   1b104:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b108:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b10c:	f1b8 0f00 	cmp.w	r8, #0
   1b110:	da88      	bge.n	1b024 <__ieee754_powf+0x48>
   1b112:	e7c9      	b.n	1b0a8 <__ieee754_powf+0xcc>
   1b114:	f04f 0a02 	mov.w	sl, #2
   1b118:	e78e      	b.n	1b038 <__ieee754_powf+0x5c>
   1b11a:	2c00      	cmp	r4, #0
   1b11c:	dab7      	bge.n	1b08e <__ieee754_powf+0xb2>
   1b11e:	eddd 7a00 	vldr	s15, [sp]
   1b122:	eeb1 0a67 	vneg.f32	s0, s15
   1b126:	e77d      	b.n	1b024 <__ieee754_powf+0x48>
   1b128:	eddd 7a01 	vldr	s15, [sp, #4]
   1b12c:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b130:	e778      	b.n	1b024 <__ieee754_powf+0x48>
   1b132:	b002      	add	sp, #8
   1b134:	ecbd 8b02 	vpop	{d8}
   1b138:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b13c:	f000 ba46 	b.w	1b5cc <__ieee754_sqrtf>
   1b140:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b144:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b148:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b14c:	e76a      	b.n	1b024 <__ieee754_powf+0x48>
   1b14e:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b152:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b156:	e765      	b.n	1b024 <__ieee754_powf+0x48>
   1b158:	ee07 5a90 	vmov	s15, r5
   1b15c:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b160:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b164:	e75e      	b.n	1b024 <__ieee754_powf+0x48>
   1b166:	bf00      	nop
   1b168:	00024708 	.word	0x00024708
   1b16c:	3f7ffff7 	.word	0x3f7ffff7
   1b170:	00000000 	.word	0x00000000
   1b174:	4b800000 	.word	0x4b800000
   1b178:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b17c:	f280 815f 	bge.w	1b43e <__ieee754_powf+0x462>
   1b180:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b174 <__ieee754_powf+0x198>
   1b184:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b188:	f06f 0217 	mvn.w	r2, #23
   1b18c:	ee17 7a90 	vmov	r7, s15
   1b190:	48ee      	ldr	r0, [pc, #952]	; (1b54c <__ieee754_powf+0x570>)
   1b192:	15f9      	asrs	r1, r7, #23
   1b194:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b198:	397f      	subs	r1, #127	; 0x7f
   1b19a:	4287      	cmp	r7, r0
   1b19c:	4411      	add	r1, r2
   1b19e:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b1a2:	f340 8144 	ble.w	1b42e <__ieee754_powf+0x452>
   1b1a6:	48ea      	ldr	r0, [pc, #936]	; (1b550 <__ieee754_powf+0x574>)
   1b1a8:	4287      	cmp	r7, r0
   1b1aa:	f340 8191 	ble.w	1b4d0 <__ieee754_powf+0x4f4>
   1b1ae:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b554 <__ieee754_powf+0x578>
   1b1b2:	3101      	adds	r1, #1
   1b1b4:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b1b8:	eef0 3a64 	vmov.f32	s7, s9
   1b1bc:	2500      	movs	r5, #0
   1b1be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b1c2:	ee06 2a90 	vmov	s13, r2
   1b1c6:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b1ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b1ce:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b1d2:	1052      	asrs	r2, r2, #1
   1b1d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b1d8:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b1dc:	442a      	add	r2, r5
   1b1de:	48de      	ldr	r0, [pc, #888]	; (1b558 <__ieee754_powf+0x57c>)
   1b1e0:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b1e4:	ee07 2a90 	vmov	s15, r2
   1b1e8:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b1ec:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b1f0:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b55c <__ieee754_powf+0x580>
   1b1f4:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b560 <__ieee754_powf+0x584>
   1b1f8:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b564 <__ieee754_powf+0x588>
   1b1fc:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b568 <__ieee754_powf+0x58c>
   1b200:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b56c <__ieee754_powf+0x590>
   1b204:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b570 <__ieee754_powf+0x594>
   1b208:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b574 <__ieee754_powf+0x598>
   1b20c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b578 <__ieee754_powf+0x59c>
   1b210:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b214:	ee14 2a10 	vmov	r2, s8
   1b218:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b21c:	4002      	ands	r2, r0
   1b21e:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b222:	eeb0 5a61 	vmov.f32	s10, s3
   1b226:	ee05 2a90 	vmov	s11, r2
   1b22a:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b22e:	eef1 1a65 	vneg.f32	s3, s11
   1b232:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b236:	eef0 7a60 	vmov.f32	s15, s1
   1b23a:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b23e:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b242:	eeb0 5a41 	vmov.f32	s10, s2
   1b246:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b24a:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b24e:	eeb0 7a42 	vmov.f32	s14, s4
   1b252:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b256:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b25a:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b25e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b262:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b266:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b26a:	eeb0 7a45 	vmov.f32	s14, s10
   1b26e:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b272:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b57c <__ieee754_powf+0x5a0>
   1b276:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b27a:	ee07 1a10 	vmov	s14, r1
   1b27e:	ee16 2a10 	vmov	r2, s12
   1b282:	4002      	ands	r2, r0
   1b284:	ee06 2a10 	vmov	s12, r2
   1b288:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b28c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b290:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b294:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b298:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b29c:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b2a0:	eef0 6a67 	vmov.f32	s13, s15
   1b2a4:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b2a8:	ee16 2a90 	vmov	r2, s13
   1b2ac:	4002      	ands	r2, r0
   1b2ae:	ee06 2a90 	vmov	s13, r2
   1b2b2:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b2b6:	ee05 2a90 	vmov	s11, r2
   1b2ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b2be:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b2c2:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b2c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b2ca:	eef0 6a67 	vmov.f32	s13, s15
   1b2ce:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b2d2:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b2d6:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b2da:	ee16 2a90 	vmov	r2, s13
   1b2de:	4002      	ands	r2, r0
   1b2e0:	ee06 2a90 	vmov	s13, r2
   1b2e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b2e8:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b2ec:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b2f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b2f4:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b2f8:	f024 040f 	bic.w	r4, r4, #15
   1b2fc:	ee07 9a10 	vmov	s14, r9
   1b300:	ee06 4a10 	vmov	s12, r4
   1b304:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b308:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b30c:	ee07 4a10 	vmov	s14, r4
   1b310:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b314:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b318:	ea5a 0303 	orrs.w	r3, sl, r3
   1b31c:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b320:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b324:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b328:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b32c:	ee16 2a90 	vmov	r2, s13
   1b330:	bf14      	ite	ne
   1b332:	eeb0 8a46 	vmovne.f32	s16, s12
   1b336:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b33a:	2a00      	cmp	r2, #0
   1b33c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b340:	f340 80b3 	ble.w	1b4aa <__ieee754_powf+0x4ce>
   1b344:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b348:	f300 8086 	bgt.w	1b458 <__ieee754_powf+0x47c>
   1b34c:	d079      	beq.n	1b442 <__ieee754_powf+0x466>
   1b34e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b352:	f300 8088 	bgt.w	1b466 <__ieee754_powf+0x48a>
   1b356:	2100      	movs	r1, #0
   1b358:	4608      	mov	r0, r1
   1b35a:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b35e:	f023 030f 	bic.w	r3, r3, #15
   1b362:	ee06 3a10 	vmov	s12, r3
   1b366:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b580 <__ieee754_powf+0x5a4>
   1b36a:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b584 <__ieee754_powf+0x5a8>
   1b36e:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b588 <__ieee754_powf+0x5ac>
   1b372:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b58c <__ieee754_powf+0x5b0>
   1b376:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b590 <__ieee754_powf+0x5b4>
   1b37a:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b594 <__ieee754_powf+0x5b8>
   1b37e:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b598 <__ieee754_powf+0x5bc>
   1b382:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b59c <__ieee754_powf+0x5c0>
   1b386:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b38a:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b38e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b392:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b396:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b39a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b39e:	eef0 7a47 	vmov.f32	s15, s14
   1b3a2:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b3a6:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b3aa:	eef0 1a47 	vmov.f32	s3, s14
   1b3ae:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b3b2:	eeb0 6a63 	vmov.f32	s12, s7
   1b3b6:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b3ba:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b3be:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b3c2:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b3c6:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b3ca:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b3ce:	eeb0 6a45 	vmov.f32	s12, s10
   1b3d2:	eeb0 5a47 	vmov.f32	s10, s14
   1b3d6:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b3da:	eef0 6a45 	vmov.f32	s13, s10
   1b3de:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b3e2:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b3e6:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b3ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b3ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b3f2:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b3f6:	ee10 3a10 	vmov	r3, s0
   1b3fa:	440b      	add	r3, r1
   1b3fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b400:	f2c0 80a0 	blt.w	1b544 <__ieee754_powf+0x568>
   1b404:	ee00 3a10 	vmov	s0, r3
   1b408:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b40c:	e60a      	b.n	1b024 <__ieee754_powf+0x48>
   1b40e:	f002 0201 	and.w	r2, r2, #1
   1b412:	f1c2 0a02 	rsb	sl, r2, #2
   1b416:	e612      	b.n	1b03e <__ieee754_powf+0x62>
   1b418:	4a61      	ldr	r2, [pc, #388]	; (1b5a0 <__ieee754_powf+0x5c4>)
   1b41a:	4297      	cmp	r7, r2
   1b41c:	dd61      	ble.n	1b4e2 <__ieee754_powf+0x506>
   1b41e:	2c00      	cmp	r4, #0
   1b420:	f77f ae35 	ble.w	1b08e <__ieee754_powf+0xb2>
   1b424:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b5a4 <__ieee754_powf+0x5c8>
   1b428:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b42c:	e5fa      	b.n	1b024 <__ieee754_powf+0x48>
   1b42e:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b554 <__ieee754_powf+0x578>
   1b432:	2500      	movs	r5, #0
   1b434:	eef0 3a64 	vmov.f32	s7, s9
   1b438:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b43c:	e6c1      	b.n	1b1c2 <__ieee754_powf+0x1e6>
   1b43e:	2200      	movs	r2, #0
   1b440:	e6a6      	b.n	1b190 <__ieee754_powf+0x1b4>
   1b442:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b5a8 <__ieee754_powf+0x5cc>
   1b446:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b44a:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b44e:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b456:	dd06      	ble.n	1b466 <__ieee754_powf+0x48a>
   1b458:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b5a4 <__ieee754_powf+0x5c8>
   1b45c:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b460:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b464:	e5de      	b.n	1b024 <__ieee754_powf+0x48>
   1b466:	15db      	asrs	r3, r3, #23
   1b468:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b46c:	3b7e      	subs	r3, #126	; 0x7e
   1b46e:	fa41 f303 	asr.w	r3, r1, r3
   1b472:	4413      	add	r3, r2
   1b474:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b478:	4c4c      	ldr	r4, [pc, #304]	; (1b5ac <__ieee754_powf+0x5d0>)
   1b47a:	397f      	subs	r1, #127	; 0x7f
   1b47c:	410c      	asrs	r4, r1
   1b47e:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b482:	ea23 0304 	bic.w	r3, r3, r4
   1b486:	ee06 3a90 	vmov	s13, r3
   1b48a:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b48e:	f1c1 0117 	rsb	r1, r1, #23
   1b492:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b496:	4108      	asrs	r0, r1
   1b498:	2a00      	cmp	r2, #0
   1b49a:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b49e:	bfb8      	it	lt
   1b4a0:	4240      	neglt	r0, r0
   1b4a2:	05c1      	lsls	r1, r0, #23
   1b4a4:	ee16 2a90 	vmov	r2, s13
   1b4a8:	e757      	b.n	1b35a <__ieee754_powf+0x37e>
   1b4aa:	4941      	ldr	r1, [pc, #260]	; (1b5b0 <__ieee754_powf+0x5d4>)
   1b4ac:	428b      	cmp	r3, r1
   1b4ae:	dc08      	bgt.n	1b4c2 <__ieee754_powf+0x4e6>
   1b4b0:	f47f af4d 	bne.w	1b34e <__ieee754_powf+0x372>
   1b4b4:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b4b8:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b4c0:	d8d1      	bhi.n	1b466 <__ieee754_powf+0x48a>
   1b4c2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b5b4 <__ieee754_powf+0x5d8>
   1b4c6:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b4ca:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b4ce:	e5a9      	b.n	1b024 <__ieee754_powf+0x48>
   1b4d0:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b5b8 <__ieee754_powf+0x5dc>
   1b4d4:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b5bc <__ieee754_powf+0x5e0>
   1b4d8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b4dc:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b4e0:	e66f      	b.n	1b1c2 <__ieee754_powf+0x1e6>
   1b4e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b4e6:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b4ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b568 <__ieee754_powf+0x58c>
   1b4ee:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b5c0 <__ieee754_powf+0x5e4>
   1b4f2:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b5c4 <__ieee754_powf+0x5e8>
   1b4f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b5c8 <__ieee754_powf+0x5ec>
   1b4fa:	eeb1 6a40 	vneg.f32	s12, s0
   1b4fe:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b502:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b506:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b50a:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b50e:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b512:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b516:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b51a:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b51e:	eef0 6a67 	vmov.f32	s13, s15
   1b522:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b526:	ee16 2a90 	vmov	r2, s13
   1b52a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b52e:	f022 020f 	bic.w	r2, r2, #15
   1b532:	ee07 2a10 	vmov	s14, r2
   1b536:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b53a:	ee06 2a90 	vmov	s13, r2
   1b53e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b542:	e6d7      	b.n	1b2f4 <__ieee754_powf+0x318>
   1b544:	f000 f8f2 	bl	1b72c <scalbnf>
   1b548:	e75e      	b.n	1b408 <__ieee754_powf+0x42c>
   1b54a:	bf00      	nop
   1b54c:	001cc471 	.word	0x001cc471
   1b550:	005db3d6 	.word	0x005db3d6
   1b554:	00000000 	.word	0x00000000
   1b558:	fffff000 	.word	0xfffff000
   1b55c:	3e53f142 	.word	0x3e53f142
   1b560:	3e6c3255 	.word	0x3e6c3255
   1b564:	3e8ba305 	.word	0x3e8ba305
   1b568:	3eaaaaab 	.word	0x3eaaaaab
   1b56c:	3edb6db7 	.word	0x3edb6db7
   1b570:	3f19999a 	.word	0x3f19999a
   1b574:	3f76384f 	.word	0x3f76384f
   1b578:	369dc3a0 	.word	0x369dc3a0
   1b57c:	3f763800 	.word	0x3f763800
   1b580:	35bfbe8c 	.word	0x35bfbe8c
   1b584:	3f317218 	.word	0x3f317218
   1b588:	3f317200 	.word	0x3f317200
   1b58c:	b5ddea0e 	.word	0xb5ddea0e
   1b590:	3331bb4c 	.word	0x3331bb4c
   1b594:	388ab355 	.word	0x388ab355
   1b598:	bb360b61 	.word	0xbb360b61
   1b59c:	3e2aaaab 	.word	0x3e2aaaab
   1b5a0:	3f800007 	.word	0x3f800007
   1b5a4:	7149f2ca 	.word	0x7149f2ca
   1b5a8:	3338aa3c 	.word	0x3338aa3c
   1b5ac:	007fffff 	.word	0x007fffff
   1b5b0:	43160000 	.word	0x43160000
   1b5b4:	0da24260 	.word	0x0da24260
   1b5b8:	3f15c000 	.word	0x3f15c000
   1b5bc:	35d1cfdc 	.word	0x35d1cfdc
   1b5c0:	3fb8aa3b 	.word	0x3fb8aa3b
   1b5c4:	36eca570 	.word	0x36eca570
   1b5c8:	3fb8aa00 	.word	0x3fb8aa00

0001b5cc <__ieee754_sqrtf>:
   1b5cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b5d0:	4770      	bx	lr
   1b5d2:	bf00      	nop

0001b5d4 <matherr>:
   1b5d4:	2000      	movs	r0, #0
   1b5d6:	4770      	bx	lr

0001b5d8 <rint>:
   1b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5da:	ec53 2b10 	vmov	r2, r3, d0
   1b5de:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b5e2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b5e6:	2813      	cmp	r0, #19
   1b5e8:	b083      	sub	sp, #12
   1b5ea:	4619      	mov	r1, r3
   1b5ec:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b5f0:	ee10 5a10 	vmov	r5, s0
   1b5f4:	dc2f      	bgt.n	1b656 <rint+0x7e>
   1b5f6:	2800      	cmp	r0, #0
   1b5f8:	db49      	blt.n	1b68e <rint+0xb6>
   1b5fa:	4e3e      	ldr	r6, [pc, #248]	; (1b6f4 <rint+0x11c>)
   1b5fc:	4106      	asrs	r6, r0
   1b5fe:	ea03 0706 	and.w	r7, r3, r6
   1b602:	4317      	orrs	r7, r2
   1b604:	d02c      	beq.n	1b660 <rint+0x88>
   1b606:	0876      	lsrs	r6, r6, #1
   1b608:	4033      	ands	r3, r6
   1b60a:	431d      	orrs	r5, r3
   1b60c:	d00c      	beq.n	1b628 <rint+0x50>
   1b60e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b612:	2813      	cmp	r0, #19
   1b614:	ea21 0606 	bic.w	r6, r1, r6
   1b618:	fa43 f100 	asr.w	r1, r3, r0
   1b61c:	ea41 0106 	orr.w	r1, r1, r6
   1b620:	bf0c      	ite	eq
   1b622:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b626:	2500      	movne	r5, #0
   1b628:	4833      	ldr	r0, [pc, #204]	; (1b6f8 <rint+0x120>)
   1b62a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b62e:	462a      	mov	r2, r5
   1b630:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b634:	4610      	mov	r0, r2
   1b636:	462b      	mov	r3, r5
   1b638:	4622      	mov	r2, r4
   1b63a:	f000 f8f1 	bl	1b820 <__adddf3>
   1b63e:	e9cd 0100 	strd	r0, r1, [sp]
   1b642:	4622      	mov	r2, r4
   1b644:	462b      	mov	r3, r5
   1b646:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b64a:	f000 f8e7 	bl	1b81c <__aeabi_dsub>
   1b64e:	ec41 0b10 	vmov	d0, r0, r1
   1b652:	b003      	add	sp, #12
   1b654:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b656:	2833      	cmp	r0, #51	; 0x33
   1b658:	dd06      	ble.n	1b668 <rint+0x90>
   1b65a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b65e:	d040      	beq.n	1b6e2 <rint+0x10a>
   1b660:	ec43 2b10 	vmov	d0, r2, r3
   1b664:	b003      	add	sp, #12
   1b666:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b668:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b66c:	f04f 30ff 	mov.w	r0, #4294967295
   1b670:	40f0      	lsrs	r0, r6
   1b672:	4202      	tst	r2, r0
   1b674:	d0f4      	beq.n	1b660 <rint+0x88>
   1b676:	0840      	lsrs	r0, r0, #1
   1b678:	4202      	tst	r2, r0
   1b67a:	d0d5      	beq.n	1b628 <rint+0x50>
   1b67c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b680:	ea25 0000 	bic.w	r0, r5, r0
   1b684:	fa43 f606 	asr.w	r6, r3, r6
   1b688:	ea46 0500 	orr.w	r5, r6, r0
   1b68c:	e7cc      	b.n	1b628 <rint+0x50>
   1b68e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b692:	4310      	orrs	r0, r2
   1b694:	d0e4      	beq.n	1b660 <rint+0x88>
   1b696:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b69a:	4310      	orrs	r0, r2
   1b69c:	4247      	negs	r7, r0
   1b69e:	4307      	orrs	r7, r0
   1b6a0:	4d15      	ldr	r5, [pc, #84]	; (1b6f8 <rint+0x120>)
   1b6a2:	0c5e      	lsrs	r6, r3, #17
   1b6a4:	0b3f      	lsrs	r7, r7, #12
   1b6a6:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b6aa:	0476      	lsls	r6, r6, #17
   1b6ac:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b6b0:	ea43 0106 	orr.w	r1, r3, r6
   1b6b4:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b6b8:	ee10 0a10 	vmov	r0, s0
   1b6bc:	4632      	mov	r2, r6
   1b6be:	463b      	mov	r3, r7
   1b6c0:	f000 f8ae 	bl	1b820 <__adddf3>
   1b6c4:	e9cd 0100 	strd	r0, r1, [sp]
   1b6c8:	463b      	mov	r3, r7
   1b6ca:	4632      	mov	r2, r6
   1b6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b6d0:	f000 f8a4 	bl	1b81c <__aeabi_dsub>
   1b6d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b6d8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b6dc:	ec41 0b10 	vmov	d0, r0, r1
   1b6e0:	e7c0      	b.n	1b664 <rint+0x8c>
   1b6e2:	ee10 0a10 	vmov	r0, s0
   1b6e6:	4619      	mov	r1, r3
   1b6e8:	f000 f89a 	bl	1b820 <__adddf3>
   1b6ec:	ec41 0b10 	vmov	d0, r0, r1
   1b6f0:	e7b8      	b.n	1b664 <rint+0x8c>
   1b6f2:	bf00      	nop
   1b6f4:	000fffff 	.word	0x000fffff
   1b6f8:	00024c80 	.word	0x00024c80

0001b6fc <fabsf>:
   1b6fc:	ee10 3a10 	vmov	r3, s0
   1b700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b704:	ee00 3a10 	vmov	s0, r3
   1b708:	4770      	bx	lr
   1b70a:	bf00      	nop

0001b70c <finitef>:
   1b70c:	ee10 3a10 	vmov	r3, s0
   1b710:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b714:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b718:	bfac      	ite	ge
   1b71a:	2000      	movge	r0, #0
   1b71c:	2001      	movlt	r0, #1
   1b71e:	4770      	bx	lr

0001b720 <nanf>:
   1b720:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b728 <nanf+0x8>
   1b724:	4770      	bx	lr
   1b726:	bf00      	nop
   1b728:	7fc00000 	.word	0x7fc00000

0001b72c <scalbnf>:
   1b72c:	b508      	push	{r3, lr}
   1b72e:	ee10 3a10 	vmov	r3, s0
   1b732:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b736:	ed2d 8b02 	vpush	{d8}
   1b73a:	d011      	beq.n	1b760 <scalbnf+0x34>
   1b73c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b740:	d211      	bcs.n	1b766 <scalbnf+0x3a>
   1b742:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b746:	d313      	bcc.n	1b770 <scalbnf+0x44>
   1b748:	0dd2      	lsrs	r2, r2, #23
   1b74a:	4402      	add	r2, r0
   1b74c:	2afe      	cmp	r2, #254	; 0xfe
   1b74e:	dc2e      	bgt.n	1b7ae <scalbnf+0x82>
   1b750:	2a00      	cmp	r2, #0
   1b752:	dd1a      	ble.n	1b78a <scalbnf+0x5e>
   1b754:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b758:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b75c:	ee00 3a10 	vmov	s0, r3
   1b760:	ecbd 8b02 	vpop	{d8}
   1b764:	bd08      	pop	{r3, pc}
   1b766:	ecbd 8b02 	vpop	{d8}
   1b76a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b76e:	bd08      	pop	{r3, pc}
   1b770:	4b1d      	ldr	r3, [pc, #116]	; (1b7e8 <scalbnf+0xbc>)
   1b772:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b7ec <scalbnf+0xc0>
   1b776:	4298      	cmp	r0, r3
   1b778:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b77c:	db22      	blt.n	1b7c4 <scalbnf+0x98>
   1b77e:	ee10 3a10 	vmov	r3, s0
   1b782:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b786:	3a19      	subs	r2, #25
   1b788:	e7df      	b.n	1b74a <scalbnf+0x1e>
   1b78a:	f112 0f16 	cmn.w	r2, #22
   1b78e:	da1e      	bge.n	1b7ce <scalbnf+0xa2>
   1b790:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b794:	4298      	cmp	r0, r3
   1b796:	dc0a      	bgt.n	1b7ae <scalbnf+0x82>
   1b798:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b7f0 <scalbnf+0xc4>
   1b79c:	eef0 0a40 	vmov.f32	s1, s0
   1b7a0:	eeb0 0a48 	vmov.f32	s0, s16
   1b7a4:	f000 f82a 	bl	1b7fc <copysignf>
   1b7a8:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b7ac:	e7d8      	b.n	1b760 <scalbnf+0x34>
   1b7ae:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b7f4 <scalbnf+0xc8>
   1b7b2:	eef0 0a40 	vmov.f32	s1, s0
   1b7b6:	eeb0 0a48 	vmov.f32	s0, s16
   1b7ba:	f000 f81f 	bl	1b7fc <copysignf>
   1b7be:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b7c2:	e7cd      	b.n	1b760 <scalbnf+0x34>
   1b7c4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b7f0 <scalbnf+0xc4>
   1b7c8:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b7cc:	e7c8      	b.n	1b760 <scalbnf+0x34>
   1b7ce:	3219      	adds	r2, #25
   1b7d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b7d4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b7d8:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b7f8 <scalbnf+0xcc>
   1b7dc:	ee00 3a10 	vmov	s0, r3
   1b7e0:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b7e4:	e7bc      	b.n	1b760 <scalbnf+0x34>
   1b7e6:	bf00      	nop
   1b7e8:	ffff3cb0 	.word	0xffff3cb0
   1b7ec:	4c000000 	.word	0x4c000000
   1b7f0:	0da24260 	.word	0x0da24260
   1b7f4:	7149f2ca 	.word	0x7149f2ca
   1b7f8:	33000000 	.word	0x33000000

0001b7fc <copysignf>:
   1b7fc:	ee10 3a10 	vmov	r3, s0
   1b800:	ee10 2a90 	vmov	r2, s1
   1b804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b808:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b80c:	4313      	orrs	r3, r2
   1b80e:	ee00 3a10 	vmov	s0, r3
   1b812:	4770      	bx	lr

0001b814 <__aeabi_drsub>:
   1b814:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b818:	e002      	b.n	1b820 <__adddf3>
   1b81a:	bf00      	nop

0001b81c <__aeabi_dsub>:
   1b81c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b820 <__adddf3>:
   1b820:	b530      	push	{r4, r5, lr}
   1b822:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b826:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b82a:	ea94 0f05 	teq	r4, r5
   1b82e:	bf08      	it	eq
   1b830:	ea90 0f02 	teqeq	r0, r2
   1b834:	bf1f      	itttt	ne
   1b836:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b83a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b83e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b842:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b846:	f000 80e2 	beq.w	1ba0e <__adddf3+0x1ee>
   1b84a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b84e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b852:	bfb8      	it	lt
   1b854:	426d      	neglt	r5, r5
   1b856:	dd0c      	ble.n	1b872 <__adddf3+0x52>
   1b858:	442c      	add	r4, r5
   1b85a:	ea80 0202 	eor.w	r2, r0, r2
   1b85e:	ea81 0303 	eor.w	r3, r1, r3
   1b862:	ea82 0000 	eor.w	r0, r2, r0
   1b866:	ea83 0101 	eor.w	r1, r3, r1
   1b86a:	ea80 0202 	eor.w	r2, r0, r2
   1b86e:	ea81 0303 	eor.w	r3, r1, r3
   1b872:	2d36      	cmp	r5, #54	; 0x36
   1b874:	bf88      	it	hi
   1b876:	bd30      	pophi	{r4, r5, pc}
   1b878:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b87c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b880:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b884:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b888:	d002      	beq.n	1b890 <__adddf3+0x70>
   1b88a:	4240      	negs	r0, r0
   1b88c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b890:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b894:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b898:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b89c:	d002      	beq.n	1b8a4 <__adddf3+0x84>
   1b89e:	4252      	negs	r2, r2
   1b8a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b8a4:	ea94 0f05 	teq	r4, r5
   1b8a8:	f000 80a7 	beq.w	1b9fa <__adddf3+0x1da>
   1b8ac:	f1a4 0401 	sub.w	r4, r4, #1
   1b8b0:	f1d5 0e20 	rsbs	lr, r5, #32
   1b8b4:	db0d      	blt.n	1b8d2 <__adddf3+0xb2>
   1b8b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b8ba:	fa22 f205 	lsr.w	r2, r2, r5
   1b8be:	1880      	adds	r0, r0, r2
   1b8c0:	f141 0100 	adc.w	r1, r1, #0
   1b8c4:	fa03 f20e 	lsl.w	r2, r3, lr
   1b8c8:	1880      	adds	r0, r0, r2
   1b8ca:	fa43 f305 	asr.w	r3, r3, r5
   1b8ce:	4159      	adcs	r1, r3
   1b8d0:	e00e      	b.n	1b8f0 <__adddf3+0xd0>
   1b8d2:	f1a5 0520 	sub.w	r5, r5, #32
   1b8d6:	f10e 0e20 	add.w	lr, lr, #32
   1b8da:	2a01      	cmp	r2, #1
   1b8dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b8e0:	bf28      	it	cs
   1b8e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b8e6:	fa43 f305 	asr.w	r3, r3, r5
   1b8ea:	18c0      	adds	r0, r0, r3
   1b8ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b8f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b8f4:	d507      	bpl.n	1b906 <__adddf3+0xe6>
   1b8f6:	f04f 0e00 	mov.w	lr, #0
   1b8fa:	f1dc 0c00 	rsbs	ip, ip, #0
   1b8fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b902:	eb6e 0101 	sbc.w	r1, lr, r1
   1b906:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b90a:	d31b      	bcc.n	1b944 <__adddf3+0x124>
   1b90c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b910:	d30c      	bcc.n	1b92c <__adddf3+0x10c>
   1b912:	0849      	lsrs	r1, r1, #1
   1b914:	ea5f 0030 	movs.w	r0, r0, rrx
   1b918:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b91c:	f104 0401 	add.w	r4, r4, #1
   1b920:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b924:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b928:	f080 809a 	bcs.w	1ba60 <__adddf3+0x240>
   1b92c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b930:	bf08      	it	eq
   1b932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b936:	f150 0000 	adcs.w	r0, r0, #0
   1b93a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b93e:	ea41 0105 	orr.w	r1, r1, r5
   1b942:	bd30      	pop	{r4, r5, pc}
   1b944:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b948:	4140      	adcs	r0, r0
   1b94a:	eb41 0101 	adc.w	r1, r1, r1
   1b94e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b952:	f1a4 0401 	sub.w	r4, r4, #1
   1b956:	d1e9      	bne.n	1b92c <__adddf3+0x10c>
   1b958:	f091 0f00 	teq	r1, #0
   1b95c:	bf04      	itt	eq
   1b95e:	4601      	moveq	r1, r0
   1b960:	2000      	moveq	r0, #0
   1b962:	fab1 f381 	clz	r3, r1
   1b966:	bf08      	it	eq
   1b968:	3320      	addeq	r3, #32
   1b96a:	f1a3 030b 	sub.w	r3, r3, #11
   1b96e:	f1b3 0220 	subs.w	r2, r3, #32
   1b972:	da0c      	bge.n	1b98e <__adddf3+0x16e>
   1b974:	320c      	adds	r2, #12
   1b976:	dd08      	ble.n	1b98a <__adddf3+0x16a>
   1b978:	f102 0c14 	add.w	ip, r2, #20
   1b97c:	f1c2 020c 	rsb	r2, r2, #12
   1b980:	fa01 f00c 	lsl.w	r0, r1, ip
   1b984:	fa21 f102 	lsr.w	r1, r1, r2
   1b988:	e00c      	b.n	1b9a4 <__adddf3+0x184>
   1b98a:	f102 0214 	add.w	r2, r2, #20
   1b98e:	bfd8      	it	le
   1b990:	f1c2 0c20 	rsble	ip, r2, #32
   1b994:	fa01 f102 	lsl.w	r1, r1, r2
   1b998:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b99c:	bfdc      	itt	le
   1b99e:	ea41 010c 	orrle.w	r1, r1, ip
   1b9a2:	4090      	lslle	r0, r2
   1b9a4:	1ae4      	subs	r4, r4, r3
   1b9a6:	bfa2      	ittt	ge
   1b9a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b9ac:	4329      	orrge	r1, r5
   1b9ae:	bd30      	popge	{r4, r5, pc}
   1b9b0:	ea6f 0404 	mvn.w	r4, r4
   1b9b4:	3c1f      	subs	r4, #31
   1b9b6:	da1c      	bge.n	1b9f2 <__adddf3+0x1d2>
   1b9b8:	340c      	adds	r4, #12
   1b9ba:	dc0e      	bgt.n	1b9da <__adddf3+0x1ba>
   1b9bc:	f104 0414 	add.w	r4, r4, #20
   1b9c0:	f1c4 0220 	rsb	r2, r4, #32
   1b9c4:	fa20 f004 	lsr.w	r0, r0, r4
   1b9c8:	fa01 f302 	lsl.w	r3, r1, r2
   1b9cc:	ea40 0003 	orr.w	r0, r0, r3
   1b9d0:	fa21 f304 	lsr.w	r3, r1, r4
   1b9d4:	ea45 0103 	orr.w	r1, r5, r3
   1b9d8:	bd30      	pop	{r4, r5, pc}
   1b9da:	f1c4 040c 	rsb	r4, r4, #12
   1b9de:	f1c4 0220 	rsb	r2, r4, #32
   1b9e2:	fa20 f002 	lsr.w	r0, r0, r2
   1b9e6:	fa01 f304 	lsl.w	r3, r1, r4
   1b9ea:	ea40 0003 	orr.w	r0, r0, r3
   1b9ee:	4629      	mov	r1, r5
   1b9f0:	bd30      	pop	{r4, r5, pc}
   1b9f2:	fa21 f004 	lsr.w	r0, r1, r4
   1b9f6:	4629      	mov	r1, r5
   1b9f8:	bd30      	pop	{r4, r5, pc}
   1b9fa:	f094 0f00 	teq	r4, #0
   1b9fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1ba02:	bf06      	itte	eq
   1ba04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1ba08:	3401      	addeq	r4, #1
   1ba0a:	3d01      	subne	r5, #1
   1ba0c:	e74e      	b.n	1b8ac <__adddf3+0x8c>
   1ba0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1ba12:	bf18      	it	ne
   1ba14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1ba18:	d029      	beq.n	1ba6e <__adddf3+0x24e>
   1ba1a:	ea94 0f05 	teq	r4, r5
   1ba1e:	bf08      	it	eq
   1ba20:	ea90 0f02 	teqeq	r0, r2
   1ba24:	d005      	beq.n	1ba32 <__adddf3+0x212>
   1ba26:	ea54 0c00 	orrs.w	ip, r4, r0
   1ba2a:	bf04      	itt	eq
   1ba2c:	4619      	moveq	r1, r3
   1ba2e:	4610      	moveq	r0, r2
   1ba30:	bd30      	pop	{r4, r5, pc}
   1ba32:	ea91 0f03 	teq	r1, r3
   1ba36:	bf1e      	ittt	ne
   1ba38:	2100      	movne	r1, #0
   1ba3a:	2000      	movne	r0, #0
   1ba3c:	bd30      	popne	{r4, r5, pc}
   1ba3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1ba42:	d105      	bne.n	1ba50 <__adddf3+0x230>
   1ba44:	0040      	lsls	r0, r0, #1
   1ba46:	4149      	adcs	r1, r1
   1ba48:	bf28      	it	cs
   1ba4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1ba4e:	bd30      	pop	{r4, r5, pc}
   1ba50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1ba54:	bf3c      	itt	cc
   1ba56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1ba5a:	bd30      	popcc	{r4, r5, pc}
   1ba5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1ba60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1ba64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ba68:	f04f 0000 	mov.w	r0, #0
   1ba6c:	bd30      	pop	{r4, r5, pc}
   1ba6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1ba72:	bf1a      	itte	ne
   1ba74:	4619      	movne	r1, r3
   1ba76:	4610      	movne	r0, r2
   1ba78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1ba7c:	bf1c      	itt	ne
   1ba7e:	460b      	movne	r3, r1
   1ba80:	4602      	movne	r2, r0
   1ba82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ba86:	bf06      	itte	eq
   1ba88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1ba8c:	ea91 0f03 	teqeq	r1, r3
   1ba90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1ba94:	bd30      	pop	{r4, r5, pc}
   1ba96:	bf00      	nop

0001ba98 <__aeabi_ui2d>:
   1ba98:	f090 0f00 	teq	r0, #0
   1ba9c:	bf04      	itt	eq
   1ba9e:	2100      	moveq	r1, #0
   1baa0:	4770      	bxeq	lr
   1baa2:	b530      	push	{r4, r5, lr}
   1baa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1baa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1baac:	f04f 0500 	mov.w	r5, #0
   1bab0:	f04f 0100 	mov.w	r1, #0
   1bab4:	e750      	b.n	1b958 <__adddf3+0x138>
   1bab6:	bf00      	nop

0001bab8 <__aeabi_i2d>:
   1bab8:	f090 0f00 	teq	r0, #0
   1babc:	bf04      	itt	eq
   1babe:	2100      	moveq	r1, #0
   1bac0:	4770      	bxeq	lr
   1bac2:	b530      	push	{r4, r5, lr}
   1bac4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bac8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bacc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1bad0:	bf48      	it	mi
   1bad2:	4240      	negmi	r0, r0
   1bad4:	f04f 0100 	mov.w	r1, #0
   1bad8:	e73e      	b.n	1b958 <__adddf3+0x138>
   1bada:	bf00      	nop

0001badc <__aeabi_f2d>:
   1badc:	0042      	lsls	r2, r0, #1
   1bade:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1bae2:	ea4f 0131 	mov.w	r1, r1, rrx
   1bae6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1baea:	bf1f      	itttt	ne
   1baec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1baf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1baf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1baf8:	4770      	bxne	lr
   1bafa:	f092 0f00 	teq	r2, #0
   1bafe:	bf14      	ite	ne
   1bb00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bb04:	4770      	bxeq	lr
   1bb06:	b530      	push	{r4, r5, lr}
   1bb08:	f44f 7460 	mov.w	r4, #896	; 0x380
   1bb0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bb10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bb14:	e720      	b.n	1b958 <__adddf3+0x138>
   1bb16:	bf00      	nop

0001bb18 <__aeabi_ul2d>:
   1bb18:	ea50 0201 	orrs.w	r2, r0, r1
   1bb1c:	bf08      	it	eq
   1bb1e:	4770      	bxeq	lr
   1bb20:	b530      	push	{r4, r5, lr}
   1bb22:	f04f 0500 	mov.w	r5, #0
   1bb26:	e00a      	b.n	1bb3e <__aeabi_l2d+0x16>

0001bb28 <__aeabi_l2d>:
   1bb28:	ea50 0201 	orrs.w	r2, r0, r1
   1bb2c:	bf08      	it	eq
   1bb2e:	4770      	bxeq	lr
   1bb30:	b530      	push	{r4, r5, lr}
   1bb32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1bb36:	d502      	bpl.n	1bb3e <__aeabi_l2d+0x16>
   1bb38:	4240      	negs	r0, r0
   1bb3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bb3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bb42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bb46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1bb4a:	f43f aedc 	beq.w	1b906 <__adddf3+0xe6>
   1bb4e:	f04f 0203 	mov.w	r2, #3
   1bb52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bb56:	bf18      	it	ne
   1bb58:	3203      	addne	r2, #3
   1bb5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bb5e:	bf18      	it	ne
   1bb60:	3203      	addne	r2, #3
   1bb62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1bb66:	f1c2 0320 	rsb	r3, r2, #32
   1bb6a:	fa00 fc03 	lsl.w	ip, r0, r3
   1bb6e:	fa20 f002 	lsr.w	r0, r0, r2
   1bb72:	fa01 fe03 	lsl.w	lr, r1, r3
   1bb76:	ea40 000e 	orr.w	r0, r0, lr
   1bb7a:	fa21 f102 	lsr.w	r1, r1, r2
   1bb7e:	4414      	add	r4, r2
   1bb80:	e6c1      	b.n	1b906 <__adddf3+0xe6>
   1bb82:	bf00      	nop

0001bb84 <__aeabi_dmul>:
   1bb84:	b570      	push	{r4, r5, r6, lr}
   1bb86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bb8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bb8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bb92:	bf1d      	ittte	ne
   1bb94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bb98:	ea94 0f0c 	teqne	r4, ip
   1bb9c:	ea95 0f0c 	teqne	r5, ip
   1bba0:	f000 f8de 	bleq	1bd60 <__aeabi_dmul+0x1dc>
   1bba4:	442c      	add	r4, r5
   1bba6:	ea81 0603 	eor.w	r6, r1, r3
   1bbaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1bbae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1bbb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1bbb6:	bf18      	it	ne
   1bbb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1bbbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bbc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bbc4:	d038      	beq.n	1bc38 <__aeabi_dmul+0xb4>
   1bbc6:	fba0 ce02 	umull	ip, lr, r0, r2
   1bbca:	f04f 0500 	mov.w	r5, #0
   1bbce:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bbd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bbd6:	fbe0 e503 	umlal	lr, r5, r0, r3
   1bbda:	f04f 0600 	mov.w	r6, #0
   1bbde:	fbe1 5603 	umlal	r5, r6, r1, r3
   1bbe2:	f09c 0f00 	teq	ip, #0
   1bbe6:	bf18      	it	ne
   1bbe8:	f04e 0e01 	orrne.w	lr, lr, #1
   1bbec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bbf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bbf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1bbf8:	d204      	bcs.n	1bc04 <__aeabi_dmul+0x80>
   1bbfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1bbfe:	416d      	adcs	r5, r5
   1bc00:	eb46 0606 	adc.w	r6, r6, r6
   1bc04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1bc08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bc0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bc10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1bc14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bc18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bc1c:	bf88      	it	hi
   1bc1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bc22:	d81e      	bhi.n	1bc62 <__aeabi_dmul+0xde>
   1bc24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bc28:	bf08      	it	eq
   1bc2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bc2e:	f150 0000 	adcs.w	r0, r0, #0
   1bc32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bc36:	bd70      	pop	{r4, r5, r6, pc}
   1bc38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bc3c:	ea46 0101 	orr.w	r1, r6, r1
   1bc40:	ea40 0002 	orr.w	r0, r0, r2
   1bc44:	ea81 0103 	eor.w	r1, r1, r3
   1bc48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bc4c:	bfc2      	ittt	gt
   1bc4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bc52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bc56:	bd70      	popgt	{r4, r5, r6, pc}
   1bc58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bc5c:	f04f 0e00 	mov.w	lr, #0
   1bc60:	3c01      	subs	r4, #1
   1bc62:	f300 80ab 	bgt.w	1bdbc <__aeabi_dmul+0x238>
   1bc66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bc6a:	bfde      	ittt	le
   1bc6c:	2000      	movle	r0, #0
   1bc6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bc72:	bd70      	pople	{r4, r5, r6, pc}
   1bc74:	f1c4 0400 	rsb	r4, r4, #0
   1bc78:	3c20      	subs	r4, #32
   1bc7a:	da35      	bge.n	1bce8 <__aeabi_dmul+0x164>
   1bc7c:	340c      	adds	r4, #12
   1bc7e:	dc1b      	bgt.n	1bcb8 <__aeabi_dmul+0x134>
   1bc80:	f104 0414 	add.w	r4, r4, #20
   1bc84:	f1c4 0520 	rsb	r5, r4, #32
   1bc88:	fa00 f305 	lsl.w	r3, r0, r5
   1bc8c:	fa20 f004 	lsr.w	r0, r0, r4
   1bc90:	fa01 f205 	lsl.w	r2, r1, r5
   1bc94:	ea40 0002 	orr.w	r0, r0, r2
   1bc98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bc9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bca0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bca4:	fa21 f604 	lsr.w	r6, r1, r4
   1bca8:	eb42 0106 	adc.w	r1, r2, r6
   1bcac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bcb0:	bf08      	it	eq
   1bcb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bcb6:	bd70      	pop	{r4, r5, r6, pc}
   1bcb8:	f1c4 040c 	rsb	r4, r4, #12
   1bcbc:	f1c4 0520 	rsb	r5, r4, #32
   1bcc0:	fa00 f304 	lsl.w	r3, r0, r4
   1bcc4:	fa20 f005 	lsr.w	r0, r0, r5
   1bcc8:	fa01 f204 	lsl.w	r2, r1, r4
   1bccc:	ea40 0002 	orr.w	r0, r0, r2
   1bcd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bcd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bcd8:	f141 0100 	adc.w	r1, r1, #0
   1bcdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bce0:	bf08      	it	eq
   1bce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bce6:	bd70      	pop	{r4, r5, r6, pc}
   1bce8:	f1c4 0520 	rsb	r5, r4, #32
   1bcec:	fa00 f205 	lsl.w	r2, r0, r5
   1bcf0:	ea4e 0e02 	orr.w	lr, lr, r2
   1bcf4:	fa20 f304 	lsr.w	r3, r0, r4
   1bcf8:	fa01 f205 	lsl.w	r2, r1, r5
   1bcfc:	ea43 0302 	orr.w	r3, r3, r2
   1bd00:	fa21 f004 	lsr.w	r0, r1, r4
   1bd04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bd08:	fa21 f204 	lsr.w	r2, r1, r4
   1bd0c:	ea20 0002 	bic.w	r0, r0, r2
   1bd10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1bd14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bd18:	bf08      	it	eq
   1bd1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bd1e:	bd70      	pop	{r4, r5, r6, pc}
   1bd20:	f094 0f00 	teq	r4, #0
   1bd24:	d10f      	bne.n	1bd46 <__aeabi_dmul+0x1c2>
   1bd26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bd2a:	0040      	lsls	r0, r0, #1
   1bd2c:	eb41 0101 	adc.w	r1, r1, r1
   1bd30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bd34:	bf08      	it	eq
   1bd36:	3c01      	subeq	r4, #1
   1bd38:	d0f7      	beq.n	1bd2a <__aeabi_dmul+0x1a6>
   1bd3a:	ea41 0106 	orr.w	r1, r1, r6
   1bd3e:	f095 0f00 	teq	r5, #0
   1bd42:	bf18      	it	ne
   1bd44:	4770      	bxne	lr
   1bd46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1bd4a:	0052      	lsls	r2, r2, #1
   1bd4c:	eb43 0303 	adc.w	r3, r3, r3
   1bd50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bd54:	bf08      	it	eq
   1bd56:	3d01      	subeq	r5, #1
   1bd58:	d0f7      	beq.n	1bd4a <__aeabi_dmul+0x1c6>
   1bd5a:	ea43 0306 	orr.w	r3, r3, r6
   1bd5e:	4770      	bx	lr
   1bd60:	ea94 0f0c 	teq	r4, ip
   1bd64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bd68:	bf18      	it	ne
   1bd6a:	ea95 0f0c 	teqne	r5, ip
   1bd6e:	d00c      	beq.n	1bd8a <__aeabi_dmul+0x206>
   1bd70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bd74:	bf18      	it	ne
   1bd76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bd7a:	d1d1      	bne.n	1bd20 <__aeabi_dmul+0x19c>
   1bd7c:	ea81 0103 	eor.w	r1, r1, r3
   1bd80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bd84:	f04f 0000 	mov.w	r0, #0
   1bd88:	bd70      	pop	{r4, r5, r6, pc}
   1bd8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bd8e:	bf06      	itte	eq
   1bd90:	4610      	moveq	r0, r2
   1bd92:	4619      	moveq	r1, r3
   1bd94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bd98:	d019      	beq.n	1bdce <__aeabi_dmul+0x24a>
   1bd9a:	ea94 0f0c 	teq	r4, ip
   1bd9e:	d102      	bne.n	1bda6 <__aeabi_dmul+0x222>
   1bda0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bda4:	d113      	bne.n	1bdce <__aeabi_dmul+0x24a>
   1bda6:	ea95 0f0c 	teq	r5, ip
   1bdaa:	d105      	bne.n	1bdb8 <__aeabi_dmul+0x234>
   1bdac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bdb0:	bf1c      	itt	ne
   1bdb2:	4610      	movne	r0, r2
   1bdb4:	4619      	movne	r1, r3
   1bdb6:	d10a      	bne.n	1bdce <__aeabi_dmul+0x24a>
   1bdb8:	ea81 0103 	eor.w	r1, r1, r3
   1bdbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bdc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bdc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bdc8:	f04f 0000 	mov.w	r0, #0
   1bdcc:	bd70      	pop	{r4, r5, r6, pc}
   1bdce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bdd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bdd6:	bd70      	pop	{r4, r5, r6, pc}

0001bdd8 <__aeabi_ddiv>:
   1bdd8:	b570      	push	{r4, r5, r6, lr}
   1bdda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bdde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bde2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bde6:	bf1d      	ittte	ne
   1bde8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bdec:	ea94 0f0c 	teqne	r4, ip
   1bdf0:	ea95 0f0c 	teqne	r5, ip
   1bdf4:	f000 f8a7 	bleq	1bf46 <__aeabi_ddiv+0x16e>
   1bdf8:	eba4 0405 	sub.w	r4, r4, r5
   1bdfc:	ea81 0e03 	eor.w	lr, r1, r3
   1be00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1be04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1be08:	f000 8088 	beq.w	1bf1c <__aeabi_ddiv+0x144>
   1be0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1be10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1be14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1be18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1be1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1be20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1be24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1be28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1be2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1be30:	429d      	cmp	r5, r3
   1be32:	bf08      	it	eq
   1be34:	4296      	cmpeq	r6, r2
   1be36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1be3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1be3e:	d202      	bcs.n	1be46 <__aeabi_ddiv+0x6e>
   1be40:	085b      	lsrs	r3, r3, #1
   1be42:	ea4f 0232 	mov.w	r2, r2, rrx
   1be46:	1ab6      	subs	r6, r6, r2
   1be48:	eb65 0503 	sbc.w	r5, r5, r3
   1be4c:	085b      	lsrs	r3, r3, #1
   1be4e:	ea4f 0232 	mov.w	r2, r2, rrx
   1be52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1be56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1be5a:	ebb6 0e02 	subs.w	lr, r6, r2
   1be5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1be62:	bf22      	ittt	cs
   1be64:	1ab6      	subcs	r6, r6, r2
   1be66:	4675      	movcs	r5, lr
   1be68:	ea40 000c 	orrcs.w	r0, r0, ip
   1be6c:	085b      	lsrs	r3, r3, #1
   1be6e:	ea4f 0232 	mov.w	r2, r2, rrx
   1be72:	ebb6 0e02 	subs.w	lr, r6, r2
   1be76:	eb75 0e03 	sbcs.w	lr, r5, r3
   1be7a:	bf22      	ittt	cs
   1be7c:	1ab6      	subcs	r6, r6, r2
   1be7e:	4675      	movcs	r5, lr
   1be80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1be84:	085b      	lsrs	r3, r3, #1
   1be86:	ea4f 0232 	mov.w	r2, r2, rrx
   1be8a:	ebb6 0e02 	subs.w	lr, r6, r2
   1be8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1be92:	bf22      	ittt	cs
   1be94:	1ab6      	subcs	r6, r6, r2
   1be96:	4675      	movcs	r5, lr
   1be98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1be9c:	085b      	lsrs	r3, r3, #1
   1be9e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bea2:	ebb6 0e02 	subs.w	lr, r6, r2
   1bea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1beaa:	bf22      	ittt	cs
   1beac:	1ab6      	subcs	r6, r6, r2
   1beae:	4675      	movcs	r5, lr
   1beb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1beb4:	ea55 0e06 	orrs.w	lr, r5, r6
   1beb8:	d018      	beq.n	1beec <__aeabi_ddiv+0x114>
   1beba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bebe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bec2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bec6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1beca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bece:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bed2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bed6:	d1c0      	bne.n	1be5a <__aeabi_ddiv+0x82>
   1bed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bedc:	d10b      	bne.n	1bef6 <__aeabi_ddiv+0x11e>
   1bede:	ea41 0100 	orr.w	r1, r1, r0
   1bee2:	f04f 0000 	mov.w	r0, #0
   1bee6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1beea:	e7b6      	b.n	1be5a <__aeabi_ddiv+0x82>
   1beec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bef0:	bf04      	itt	eq
   1bef2:	4301      	orreq	r1, r0
   1bef4:	2000      	moveq	r0, #0
   1bef6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1befa:	bf88      	it	hi
   1befc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bf00:	f63f aeaf 	bhi.w	1bc62 <__aeabi_dmul+0xde>
   1bf04:	ebb5 0c03 	subs.w	ip, r5, r3
   1bf08:	bf04      	itt	eq
   1bf0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1bf0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bf12:	f150 0000 	adcs.w	r0, r0, #0
   1bf16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bf1a:	bd70      	pop	{r4, r5, r6, pc}
   1bf1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1bf20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1bf24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1bf28:	bfc2      	ittt	gt
   1bf2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bf2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bf32:	bd70      	popgt	{r4, r5, r6, pc}
   1bf34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bf38:	f04f 0e00 	mov.w	lr, #0
   1bf3c:	3c01      	subs	r4, #1
   1bf3e:	e690      	b.n	1bc62 <__aeabi_dmul+0xde>
   1bf40:	ea45 0e06 	orr.w	lr, r5, r6
   1bf44:	e68d      	b.n	1bc62 <__aeabi_dmul+0xde>
   1bf46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bf4a:	ea94 0f0c 	teq	r4, ip
   1bf4e:	bf08      	it	eq
   1bf50:	ea95 0f0c 	teqeq	r5, ip
   1bf54:	f43f af3b 	beq.w	1bdce <__aeabi_dmul+0x24a>
   1bf58:	ea94 0f0c 	teq	r4, ip
   1bf5c:	d10a      	bne.n	1bf74 <__aeabi_ddiv+0x19c>
   1bf5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bf62:	f47f af34 	bne.w	1bdce <__aeabi_dmul+0x24a>
   1bf66:	ea95 0f0c 	teq	r5, ip
   1bf6a:	f47f af25 	bne.w	1bdb8 <__aeabi_dmul+0x234>
   1bf6e:	4610      	mov	r0, r2
   1bf70:	4619      	mov	r1, r3
   1bf72:	e72c      	b.n	1bdce <__aeabi_dmul+0x24a>
   1bf74:	ea95 0f0c 	teq	r5, ip
   1bf78:	d106      	bne.n	1bf88 <__aeabi_ddiv+0x1b0>
   1bf7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bf7e:	f43f aefd 	beq.w	1bd7c <__aeabi_dmul+0x1f8>
   1bf82:	4610      	mov	r0, r2
   1bf84:	4619      	mov	r1, r3
   1bf86:	e722      	b.n	1bdce <__aeabi_dmul+0x24a>
   1bf88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bf8c:	bf18      	it	ne
   1bf8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bf92:	f47f aec5 	bne.w	1bd20 <__aeabi_dmul+0x19c>
   1bf96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bf9a:	f47f af0d 	bne.w	1bdb8 <__aeabi_dmul+0x234>
   1bf9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1bfa2:	f47f aeeb 	bne.w	1bd7c <__aeabi_dmul+0x1f8>
   1bfa6:	e712      	b.n	1bdce <__aeabi_dmul+0x24a>

0001bfa8 <__gedf2>:
   1bfa8:	f04f 3cff 	mov.w	ip, #4294967295
   1bfac:	e006      	b.n	1bfbc <__cmpdf2+0x4>
   1bfae:	bf00      	nop

0001bfb0 <__ledf2>:
   1bfb0:	f04f 0c01 	mov.w	ip, #1
   1bfb4:	e002      	b.n	1bfbc <__cmpdf2+0x4>
   1bfb6:	bf00      	nop

0001bfb8 <__cmpdf2>:
   1bfb8:	f04f 0c01 	mov.w	ip, #1
   1bfbc:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bfc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bfc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bfc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bfcc:	bf18      	it	ne
   1bfce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1bfd2:	d01b      	beq.n	1c00c <__cmpdf2+0x54>
   1bfd4:	b001      	add	sp, #4
   1bfd6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1bfda:	bf0c      	ite	eq
   1bfdc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bfe0:	ea91 0f03 	teqne	r1, r3
   1bfe4:	bf02      	ittt	eq
   1bfe6:	ea90 0f02 	teqeq	r0, r2
   1bfea:	2000      	moveq	r0, #0
   1bfec:	4770      	bxeq	lr
   1bfee:	f110 0f00 	cmn.w	r0, #0
   1bff2:	ea91 0f03 	teq	r1, r3
   1bff6:	bf58      	it	pl
   1bff8:	4299      	cmppl	r1, r3
   1bffa:	bf08      	it	eq
   1bffc:	4290      	cmpeq	r0, r2
   1bffe:	bf2c      	ite	cs
   1c000:	17d8      	asrcs	r0, r3, #31
   1c002:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c006:	f040 0001 	orr.w	r0, r0, #1
   1c00a:	4770      	bx	lr
   1c00c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c014:	d102      	bne.n	1c01c <__cmpdf2+0x64>
   1c016:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c01a:	d107      	bne.n	1c02c <__cmpdf2+0x74>
   1c01c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c024:	d1d6      	bne.n	1bfd4 <__cmpdf2+0x1c>
   1c026:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c02a:	d0d3      	beq.n	1bfd4 <__cmpdf2+0x1c>
   1c02c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c030:	4770      	bx	lr
   1c032:	bf00      	nop

0001c034 <__aeabi_cdrcmple>:
   1c034:	4684      	mov	ip, r0
   1c036:	4610      	mov	r0, r2
   1c038:	4662      	mov	r2, ip
   1c03a:	468c      	mov	ip, r1
   1c03c:	4619      	mov	r1, r3
   1c03e:	4663      	mov	r3, ip
   1c040:	e000      	b.n	1c044 <__aeabi_cdcmpeq>
   1c042:	bf00      	nop

0001c044 <__aeabi_cdcmpeq>:
   1c044:	b501      	push	{r0, lr}
   1c046:	f7ff ffb7 	bl	1bfb8 <__cmpdf2>
   1c04a:	2800      	cmp	r0, #0
   1c04c:	bf48      	it	mi
   1c04e:	f110 0f00 	cmnmi.w	r0, #0
   1c052:	bd01      	pop	{r0, pc}

0001c054 <__aeabi_dcmpeq>:
   1c054:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c058:	f7ff fff4 	bl	1c044 <__aeabi_cdcmpeq>
   1c05c:	bf0c      	ite	eq
   1c05e:	2001      	moveq	r0, #1
   1c060:	2000      	movne	r0, #0
   1c062:	f85d fb08 	ldr.w	pc, [sp], #8
   1c066:	bf00      	nop

0001c068 <__aeabi_dcmplt>:
   1c068:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c06c:	f7ff ffea 	bl	1c044 <__aeabi_cdcmpeq>
   1c070:	bf34      	ite	cc
   1c072:	2001      	movcc	r0, #1
   1c074:	2000      	movcs	r0, #0
   1c076:	f85d fb08 	ldr.w	pc, [sp], #8
   1c07a:	bf00      	nop

0001c07c <__aeabi_dcmple>:
   1c07c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c080:	f7ff ffe0 	bl	1c044 <__aeabi_cdcmpeq>
   1c084:	bf94      	ite	ls
   1c086:	2001      	movls	r0, #1
   1c088:	2000      	movhi	r0, #0
   1c08a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c08e:	bf00      	nop

0001c090 <__aeabi_dcmpge>:
   1c090:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c094:	f7ff ffce 	bl	1c034 <__aeabi_cdrcmple>
   1c098:	bf94      	ite	ls
   1c09a:	2001      	movls	r0, #1
   1c09c:	2000      	movhi	r0, #0
   1c09e:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0a2:	bf00      	nop

0001c0a4 <__aeabi_dcmpgt>:
   1c0a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c0a8:	f7ff ffc4 	bl	1c034 <__aeabi_cdrcmple>
   1c0ac:	bf34      	ite	cc
   1c0ae:	2001      	movcc	r0, #1
   1c0b0:	2000      	movcs	r0, #0
   1c0b2:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0b6:	bf00      	nop

0001c0b8 <__aeabi_d2iz>:
   1c0b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c0bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c0c0:	d215      	bcs.n	1c0ee <__aeabi_d2iz+0x36>
   1c0c2:	d511      	bpl.n	1c0e8 <__aeabi_d2iz+0x30>
   1c0c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c0c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c0cc:	d912      	bls.n	1c0f4 <__aeabi_d2iz+0x3c>
   1c0ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c0d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c0d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c0da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c0de:	fa23 f002 	lsr.w	r0, r3, r2
   1c0e2:	bf18      	it	ne
   1c0e4:	4240      	negne	r0, r0
   1c0e6:	4770      	bx	lr
   1c0e8:	f04f 0000 	mov.w	r0, #0
   1c0ec:	4770      	bx	lr
   1c0ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c0f2:	d105      	bne.n	1c100 <__aeabi_d2iz+0x48>
   1c0f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c0f8:	bf08      	it	eq
   1c0fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c0fe:	4770      	bx	lr
   1c100:	f04f 0000 	mov.w	r0, #0
   1c104:	4770      	bx	lr
   1c106:	bf00      	nop

0001c108 <__aeabi_d2uiz>:
   1c108:	004a      	lsls	r2, r1, #1
   1c10a:	d211      	bcs.n	1c130 <__aeabi_d2uiz+0x28>
   1c10c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c110:	d211      	bcs.n	1c136 <__aeabi_d2uiz+0x2e>
   1c112:	d50d      	bpl.n	1c130 <__aeabi_d2uiz+0x28>
   1c114:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c118:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c11c:	d40e      	bmi.n	1c13c <__aeabi_d2uiz+0x34>
   1c11e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c126:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c12a:	fa23 f002 	lsr.w	r0, r3, r2
   1c12e:	4770      	bx	lr
   1c130:	f04f 0000 	mov.w	r0, #0
   1c134:	4770      	bx	lr
   1c136:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c13a:	d102      	bne.n	1c142 <__aeabi_d2uiz+0x3a>
   1c13c:	f04f 30ff 	mov.w	r0, #4294967295
   1c140:	4770      	bx	lr
   1c142:	f04f 0000 	mov.w	r0, #0
   1c146:	4770      	bx	lr

0001c148 <__aeabi_d2f>:
   1c148:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c14c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c150:	bf24      	itt	cs
   1c152:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c156:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c15a:	d90d      	bls.n	1c178 <__aeabi_d2f+0x30>
   1c15c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c160:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c164:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c168:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c16c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c170:	bf08      	it	eq
   1c172:	f020 0001 	biceq.w	r0, r0, #1
   1c176:	4770      	bx	lr
   1c178:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c17c:	d121      	bne.n	1c1c2 <__aeabi_d2f+0x7a>
   1c17e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c182:	bfbc      	itt	lt
   1c184:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c188:	4770      	bxlt	lr
   1c18a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c18e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c192:	f1c2 0218 	rsb	r2, r2, #24
   1c196:	f1c2 0c20 	rsb	ip, r2, #32
   1c19a:	fa10 f30c 	lsls.w	r3, r0, ip
   1c19e:	fa20 f002 	lsr.w	r0, r0, r2
   1c1a2:	bf18      	it	ne
   1c1a4:	f040 0001 	orrne.w	r0, r0, #1
   1c1a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c1ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c1b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c1b4:	ea40 000c 	orr.w	r0, r0, ip
   1c1b8:	fa23 f302 	lsr.w	r3, r3, r2
   1c1bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c1c0:	e7cc      	b.n	1c15c <__aeabi_d2f+0x14>
   1c1c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c1c6:	d107      	bne.n	1c1d8 <__aeabi_d2f+0x90>
   1c1c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c1cc:	bf1e      	ittt	ne
   1c1ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c1d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c1d6:	4770      	bxne	lr
   1c1d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c1dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c1e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c1e4:	4770      	bx	lr
   1c1e6:	bf00      	nop

0001c1e8 <__aeabi_frsub>:
   1c1e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c1ec:	e002      	b.n	1c1f4 <__addsf3>
   1c1ee:	bf00      	nop

0001c1f0 <__aeabi_fsub>:
   1c1f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c1f4 <__addsf3>:
   1c1f4:	0042      	lsls	r2, r0, #1
   1c1f6:	bf1f      	itttt	ne
   1c1f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c1fc:	ea92 0f03 	teqne	r2, r3
   1c200:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c204:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c208:	d06a      	beq.n	1c2e0 <__addsf3+0xec>
   1c20a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c20e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c212:	bfc1      	itttt	gt
   1c214:	18d2      	addgt	r2, r2, r3
   1c216:	4041      	eorgt	r1, r0
   1c218:	4048      	eorgt	r0, r1
   1c21a:	4041      	eorgt	r1, r0
   1c21c:	bfb8      	it	lt
   1c21e:	425b      	neglt	r3, r3
   1c220:	2b19      	cmp	r3, #25
   1c222:	bf88      	it	hi
   1c224:	4770      	bxhi	lr
   1c226:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c22a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c22e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c232:	bf18      	it	ne
   1c234:	4240      	negne	r0, r0
   1c236:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c23a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c23e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c242:	bf18      	it	ne
   1c244:	4249      	negne	r1, r1
   1c246:	ea92 0f03 	teq	r2, r3
   1c24a:	d03f      	beq.n	1c2cc <__addsf3+0xd8>
   1c24c:	f1a2 0201 	sub.w	r2, r2, #1
   1c250:	fa41 fc03 	asr.w	ip, r1, r3
   1c254:	eb10 000c 	adds.w	r0, r0, ip
   1c258:	f1c3 0320 	rsb	r3, r3, #32
   1c25c:	fa01 f103 	lsl.w	r1, r1, r3
   1c260:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c264:	d502      	bpl.n	1c26c <__addsf3+0x78>
   1c266:	4249      	negs	r1, r1
   1c268:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c26c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c270:	d313      	bcc.n	1c29a <__addsf3+0xa6>
   1c272:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c276:	d306      	bcc.n	1c286 <__addsf3+0x92>
   1c278:	0840      	lsrs	r0, r0, #1
   1c27a:	ea4f 0131 	mov.w	r1, r1, rrx
   1c27e:	f102 0201 	add.w	r2, r2, #1
   1c282:	2afe      	cmp	r2, #254	; 0xfe
   1c284:	d251      	bcs.n	1c32a <__addsf3+0x136>
   1c286:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c28a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c28e:	bf08      	it	eq
   1c290:	f020 0001 	biceq.w	r0, r0, #1
   1c294:	ea40 0003 	orr.w	r0, r0, r3
   1c298:	4770      	bx	lr
   1c29a:	0049      	lsls	r1, r1, #1
   1c29c:	eb40 0000 	adc.w	r0, r0, r0
   1c2a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c2a4:	f1a2 0201 	sub.w	r2, r2, #1
   1c2a8:	d1ed      	bne.n	1c286 <__addsf3+0x92>
   1c2aa:	fab0 fc80 	clz	ip, r0
   1c2ae:	f1ac 0c08 	sub.w	ip, ip, #8
   1c2b2:	ebb2 020c 	subs.w	r2, r2, ip
   1c2b6:	fa00 f00c 	lsl.w	r0, r0, ip
   1c2ba:	bfaa      	itet	ge
   1c2bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c2c0:	4252      	neglt	r2, r2
   1c2c2:	4318      	orrge	r0, r3
   1c2c4:	bfbc      	itt	lt
   1c2c6:	40d0      	lsrlt	r0, r2
   1c2c8:	4318      	orrlt	r0, r3
   1c2ca:	4770      	bx	lr
   1c2cc:	f092 0f00 	teq	r2, #0
   1c2d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c2d4:	bf06      	itte	eq
   1c2d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c2da:	3201      	addeq	r2, #1
   1c2dc:	3b01      	subne	r3, #1
   1c2de:	e7b5      	b.n	1c24c <__addsf3+0x58>
   1c2e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c2e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c2e8:	bf18      	it	ne
   1c2ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c2ee:	d021      	beq.n	1c334 <__addsf3+0x140>
   1c2f0:	ea92 0f03 	teq	r2, r3
   1c2f4:	d004      	beq.n	1c300 <__addsf3+0x10c>
   1c2f6:	f092 0f00 	teq	r2, #0
   1c2fa:	bf08      	it	eq
   1c2fc:	4608      	moveq	r0, r1
   1c2fe:	4770      	bx	lr
   1c300:	ea90 0f01 	teq	r0, r1
   1c304:	bf1c      	itt	ne
   1c306:	2000      	movne	r0, #0
   1c308:	4770      	bxne	lr
   1c30a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c30e:	d104      	bne.n	1c31a <__addsf3+0x126>
   1c310:	0040      	lsls	r0, r0, #1
   1c312:	bf28      	it	cs
   1c314:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c318:	4770      	bx	lr
   1c31a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c31e:	bf3c      	itt	cc
   1c320:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c324:	4770      	bxcc	lr
   1c326:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c32a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c32e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c332:	4770      	bx	lr
   1c334:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c338:	bf16      	itet	ne
   1c33a:	4608      	movne	r0, r1
   1c33c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c340:	4601      	movne	r1, r0
   1c342:	0242      	lsls	r2, r0, #9
   1c344:	bf06      	itte	eq
   1c346:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c34a:	ea90 0f01 	teqeq	r0, r1
   1c34e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c352:	4770      	bx	lr

0001c354 <__aeabi_ui2f>:
   1c354:	f04f 0300 	mov.w	r3, #0
   1c358:	e004      	b.n	1c364 <__aeabi_i2f+0x8>
   1c35a:	bf00      	nop

0001c35c <__aeabi_i2f>:
   1c35c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c360:	bf48      	it	mi
   1c362:	4240      	negmi	r0, r0
   1c364:	ea5f 0c00 	movs.w	ip, r0
   1c368:	bf08      	it	eq
   1c36a:	4770      	bxeq	lr
   1c36c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c370:	4601      	mov	r1, r0
   1c372:	f04f 0000 	mov.w	r0, #0
   1c376:	e01c      	b.n	1c3b2 <__aeabi_l2f+0x2a>

0001c378 <__aeabi_ul2f>:
   1c378:	ea50 0201 	orrs.w	r2, r0, r1
   1c37c:	bf08      	it	eq
   1c37e:	4770      	bxeq	lr
   1c380:	f04f 0300 	mov.w	r3, #0
   1c384:	e00a      	b.n	1c39c <__aeabi_l2f+0x14>
   1c386:	bf00      	nop

0001c388 <__aeabi_l2f>:
   1c388:	ea50 0201 	orrs.w	r2, r0, r1
   1c38c:	bf08      	it	eq
   1c38e:	4770      	bxeq	lr
   1c390:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c394:	d502      	bpl.n	1c39c <__aeabi_l2f+0x14>
   1c396:	4240      	negs	r0, r0
   1c398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c39c:	ea5f 0c01 	movs.w	ip, r1
   1c3a0:	bf02      	ittt	eq
   1c3a2:	4684      	moveq	ip, r0
   1c3a4:	4601      	moveq	r1, r0
   1c3a6:	2000      	moveq	r0, #0
   1c3a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c3ac:	bf08      	it	eq
   1c3ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c3b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c3b6:	fabc f28c 	clz	r2, ip
   1c3ba:	3a08      	subs	r2, #8
   1c3bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c3c0:	db10      	blt.n	1c3e4 <__aeabi_l2f+0x5c>
   1c3c2:	fa01 fc02 	lsl.w	ip, r1, r2
   1c3c6:	4463      	add	r3, ip
   1c3c8:	fa00 fc02 	lsl.w	ip, r0, r2
   1c3cc:	f1c2 0220 	rsb	r2, r2, #32
   1c3d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c3d4:	fa20 f202 	lsr.w	r2, r0, r2
   1c3d8:	eb43 0002 	adc.w	r0, r3, r2
   1c3dc:	bf08      	it	eq
   1c3de:	f020 0001 	biceq.w	r0, r0, #1
   1c3e2:	4770      	bx	lr
   1c3e4:	f102 0220 	add.w	r2, r2, #32
   1c3e8:	fa01 fc02 	lsl.w	ip, r1, r2
   1c3ec:	f1c2 0220 	rsb	r2, r2, #32
   1c3f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c3f4:	fa21 f202 	lsr.w	r2, r1, r2
   1c3f8:	eb43 0002 	adc.w	r0, r3, r2
   1c3fc:	bf08      	it	eq
   1c3fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c402:	4770      	bx	lr

0001c404 <__aeabi_ldivmod>:
   1c404:	b97b      	cbnz	r3, 1c426 <__aeabi_ldivmod+0x22>
   1c406:	b972      	cbnz	r2, 1c426 <__aeabi_ldivmod+0x22>
   1c408:	2900      	cmp	r1, #0
   1c40a:	bfbe      	ittt	lt
   1c40c:	2000      	movlt	r0, #0
   1c40e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c412:	e006      	blt.n	1c422 <__aeabi_ldivmod+0x1e>
   1c414:	bf08      	it	eq
   1c416:	2800      	cmpeq	r0, #0
   1c418:	bf1c      	itt	ne
   1c41a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c41e:	f04f 30ff 	movne.w	r0, #4294967295
   1c422:	f001 b979 	b.w	1d718 <__aeabi_idiv0>
   1c426:	f1ad 0c08 	sub.w	ip, sp, #8
   1c42a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c42e:	2900      	cmp	r1, #0
   1c430:	db09      	blt.n	1c446 <__aeabi_ldivmod+0x42>
   1c432:	2b00      	cmp	r3, #0
   1c434:	db1a      	blt.n	1c46c <__aeabi_ldivmod+0x68>
   1c436:	f000 f885 	bl	1c544 <__udivmoddi4>
   1c43a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c43e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c442:	b004      	add	sp, #16
   1c444:	4770      	bx	lr
   1c446:	4240      	negs	r0, r0
   1c448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c44c:	2b00      	cmp	r3, #0
   1c44e:	db1b      	blt.n	1c488 <__aeabi_ldivmod+0x84>
   1c450:	f000 f878 	bl	1c544 <__udivmoddi4>
   1c454:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c45c:	b004      	add	sp, #16
   1c45e:	4240      	negs	r0, r0
   1c460:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c464:	4252      	negs	r2, r2
   1c466:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c46a:	4770      	bx	lr
   1c46c:	4252      	negs	r2, r2
   1c46e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c472:	f000 f867 	bl	1c544 <__udivmoddi4>
   1c476:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c47a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c47e:	b004      	add	sp, #16
   1c480:	4240      	negs	r0, r0
   1c482:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c486:	4770      	bx	lr
   1c488:	4252      	negs	r2, r2
   1c48a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c48e:	f000 f859 	bl	1c544 <__udivmoddi4>
   1c492:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c49a:	b004      	add	sp, #16
   1c49c:	4252      	negs	r2, r2
   1c49e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4a2:	4770      	bx	lr

0001c4a4 <__aeabi_uldivmod>:
   1c4a4:	b953      	cbnz	r3, 1c4bc <__aeabi_uldivmod+0x18>
   1c4a6:	b94a      	cbnz	r2, 1c4bc <__aeabi_uldivmod+0x18>
   1c4a8:	2900      	cmp	r1, #0
   1c4aa:	bf08      	it	eq
   1c4ac:	2800      	cmpeq	r0, #0
   1c4ae:	bf1c      	itt	ne
   1c4b0:	f04f 31ff 	movne.w	r1, #4294967295
   1c4b4:	f04f 30ff 	movne.w	r0, #4294967295
   1c4b8:	f001 b92e 	b.w	1d718 <__aeabi_idiv0>
   1c4bc:	f1ad 0c08 	sub.w	ip, sp, #8
   1c4c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c4c4:	f000 f83e 	bl	1c544 <__udivmoddi4>
   1c4c8:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c4cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c4d0:	b004      	add	sp, #16
   1c4d2:	4770      	bx	lr

0001c4d4 <__aeabi_f2lz>:
   1c4d4:	ee07 0a90 	vmov	s15, r0
   1c4d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c4e0:	d401      	bmi.n	1c4e6 <__aeabi_f2lz+0x12>
   1c4e2:	f000 b809 	b.w	1c4f8 <__aeabi_f2ulz>
   1c4e6:	b508      	push	{r3, lr}
   1c4e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c4ec:	f000 f804 	bl	1c4f8 <__aeabi_f2ulz>
   1c4f0:	4240      	negs	r0, r0
   1c4f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4f6:	bd08      	pop	{r3, pc}

0001c4f8 <__aeabi_f2ulz>:
   1c4f8:	b5d0      	push	{r4, r6, r7, lr}
   1c4fa:	f7ff faef 	bl	1badc <__aeabi_f2d>
   1c4fe:	2200      	movs	r2, #0
   1c500:	4b0e      	ldr	r3, [pc, #56]	; (1c53c <__aeabi_f2ulz+0x44>)
   1c502:	4606      	mov	r6, r0
   1c504:	460f      	mov	r7, r1
   1c506:	f7ff fb3d 	bl	1bb84 <__aeabi_dmul>
   1c50a:	f7ff fdfd 	bl	1c108 <__aeabi_d2uiz>
   1c50e:	4604      	mov	r4, r0
   1c510:	f7ff fac2 	bl	1ba98 <__aeabi_ui2d>
   1c514:	2200      	movs	r2, #0
   1c516:	4b0a      	ldr	r3, [pc, #40]	; (1c540 <__aeabi_f2ulz+0x48>)
   1c518:	f7ff fb34 	bl	1bb84 <__aeabi_dmul>
   1c51c:	4602      	mov	r2, r0
   1c51e:	460b      	mov	r3, r1
   1c520:	4630      	mov	r0, r6
   1c522:	4639      	mov	r1, r7
   1c524:	f7ff f97a 	bl	1b81c <__aeabi_dsub>
   1c528:	f7ff fdee 	bl	1c108 <__aeabi_d2uiz>
   1c52c:	4623      	mov	r3, r4
   1c52e:	2200      	movs	r2, #0
   1c530:	ea42 0200 	orr.w	r2, r2, r0
   1c534:	4610      	mov	r0, r2
   1c536:	4619      	mov	r1, r3
   1c538:	bdd0      	pop	{r4, r6, r7, pc}
   1c53a:	bf00      	nop
   1c53c:	3df00000 	.word	0x3df00000
   1c540:	41f00000 	.word	0x41f00000

0001c544 <__udivmoddi4>:
   1c544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c548:	468c      	mov	ip, r1
   1c54a:	460d      	mov	r5, r1
   1c54c:	4604      	mov	r4, r0
   1c54e:	9e08      	ldr	r6, [sp, #32]
   1c550:	2b00      	cmp	r3, #0
   1c552:	d151      	bne.n	1c5f8 <__udivmoddi4+0xb4>
   1c554:	428a      	cmp	r2, r1
   1c556:	4617      	mov	r7, r2
   1c558:	d96d      	bls.n	1c636 <__udivmoddi4+0xf2>
   1c55a:	fab2 fe82 	clz	lr, r2
   1c55e:	f1be 0f00 	cmp.w	lr, #0
   1c562:	d00b      	beq.n	1c57c <__udivmoddi4+0x38>
   1c564:	f1ce 0c20 	rsb	ip, lr, #32
   1c568:	fa01 f50e 	lsl.w	r5, r1, lr
   1c56c:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c570:	fa02 f70e 	lsl.w	r7, r2, lr
   1c574:	ea4c 0c05 	orr.w	ip, ip, r5
   1c578:	fa00 f40e 	lsl.w	r4, r0, lr
   1c57c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c580:	0c25      	lsrs	r5, r4, #16
   1c582:	fbbc f8fa 	udiv	r8, ip, sl
   1c586:	fa1f f987 	uxth.w	r9, r7
   1c58a:	fb0a cc18 	mls	ip, sl, r8, ip
   1c58e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c592:	fb08 f309 	mul.w	r3, r8, r9
   1c596:	42ab      	cmp	r3, r5
   1c598:	d90a      	bls.n	1c5b0 <__udivmoddi4+0x6c>
   1c59a:	19ed      	adds	r5, r5, r7
   1c59c:	f108 32ff 	add.w	r2, r8, #4294967295
   1c5a0:	f080 8123 	bcs.w	1c7ea <__udivmoddi4+0x2a6>
   1c5a4:	42ab      	cmp	r3, r5
   1c5a6:	f240 8120 	bls.w	1c7ea <__udivmoddi4+0x2a6>
   1c5aa:	f1a8 0802 	sub.w	r8, r8, #2
   1c5ae:	443d      	add	r5, r7
   1c5b0:	1aed      	subs	r5, r5, r3
   1c5b2:	b2a4      	uxth	r4, r4
   1c5b4:	fbb5 f0fa 	udiv	r0, r5, sl
   1c5b8:	fb0a 5510 	mls	r5, sl, r0, r5
   1c5bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c5c0:	fb00 f909 	mul.w	r9, r0, r9
   1c5c4:	45a1      	cmp	r9, r4
   1c5c6:	d909      	bls.n	1c5dc <__udivmoddi4+0x98>
   1c5c8:	19e4      	adds	r4, r4, r7
   1c5ca:	f100 33ff 	add.w	r3, r0, #4294967295
   1c5ce:	f080 810a 	bcs.w	1c7e6 <__udivmoddi4+0x2a2>
   1c5d2:	45a1      	cmp	r9, r4
   1c5d4:	f240 8107 	bls.w	1c7e6 <__udivmoddi4+0x2a2>
   1c5d8:	3802      	subs	r0, #2
   1c5da:	443c      	add	r4, r7
   1c5dc:	eba4 0409 	sub.w	r4, r4, r9
   1c5e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c5e4:	2100      	movs	r1, #0
   1c5e6:	2e00      	cmp	r6, #0
   1c5e8:	d061      	beq.n	1c6ae <__udivmoddi4+0x16a>
   1c5ea:	fa24 f40e 	lsr.w	r4, r4, lr
   1c5ee:	2300      	movs	r3, #0
   1c5f0:	6034      	str	r4, [r6, #0]
   1c5f2:	6073      	str	r3, [r6, #4]
   1c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c5f8:	428b      	cmp	r3, r1
   1c5fa:	d907      	bls.n	1c60c <__udivmoddi4+0xc8>
   1c5fc:	2e00      	cmp	r6, #0
   1c5fe:	d054      	beq.n	1c6aa <__udivmoddi4+0x166>
   1c600:	2100      	movs	r1, #0
   1c602:	e886 0021 	stmia.w	r6, {r0, r5}
   1c606:	4608      	mov	r0, r1
   1c608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c60c:	fab3 f183 	clz	r1, r3
   1c610:	2900      	cmp	r1, #0
   1c612:	f040 808e 	bne.w	1c732 <__udivmoddi4+0x1ee>
   1c616:	42ab      	cmp	r3, r5
   1c618:	d302      	bcc.n	1c620 <__udivmoddi4+0xdc>
   1c61a:	4282      	cmp	r2, r0
   1c61c:	f200 80fa 	bhi.w	1c814 <__udivmoddi4+0x2d0>
   1c620:	1a84      	subs	r4, r0, r2
   1c622:	eb65 0503 	sbc.w	r5, r5, r3
   1c626:	2001      	movs	r0, #1
   1c628:	46ac      	mov	ip, r5
   1c62a:	2e00      	cmp	r6, #0
   1c62c:	d03f      	beq.n	1c6ae <__udivmoddi4+0x16a>
   1c62e:	e886 1010 	stmia.w	r6, {r4, ip}
   1c632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c636:	b912      	cbnz	r2, 1c63e <__udivmoddi4+0xfa>
   1c638:	2701      	movs	r7, #1
   1c63a:	fbb7 f7f2 	udiv	r7, r7, r2
   1c63e:	fab7 fe87 	clz	lr, r7
   1c642:	f1be 0f00 	cmp.w	lr, #0
   1c646:	d134      	bne.n	1c6b2 <__udivmoddi4+0x16e>
   1c648:	1beb      	subs	r3, r5, r7
   1c64a:	0c3a      	lsrs	r2, r7, #16
   1c64c:	fa1f fc87 	uxth.w	ip, r7
   1c650:	2101      	movs	r1, #1
   1c652:	fbb3 f8f2 	udiv	r8, r3, r2
   1c656:	0c25      	lsrs	r5, r4, #16
   1c658:	fb02 3318 	mls	r3, r2, r8, r3
   1c65c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c660:	fb0c f308 	mul.w	r3, ip, r8
   1c664:	42ab      	cmp	r3, r5
   1c666:	d907      	bls.n	1c678 <__udivmoddi4+0x134>
   1c668:	19ed      	adds	r5, r5, r7
   1c66a:	f108 30ff 	add.w	r0, r8, #4294967295
   1c66e:	d202      	bcs.n	1c676 <__udivmoddi4+0x132>
   1c670:	42ab      	cmp	r3, r5
   1c672:	f200 80d1 	bhi.w	1c818 <__udivmoddi4+0x2d4>
   1c676:	4680      	mov	r8, r0
   1c678:	1aed      	subs	r5, r5, r3
   1c67a:	b2a3      	uxth	r3, r4
   1c67c:	fbb5 f0f2 	udiv	r0, r5, r2
   1c680:	fb02 5510 	mls	r5, r2, r0, r5
   1c684:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c688:	fb0c fc00 	mul.w	ip, ip, r0
   1c68c:	45a4      	cmp	ip, r4
   1c68e:	d907      	bls.n	1c6a0 <__udivmoddi4+0x15c>
   1c690:	19e4      	adds	r4, r4, r7
   1c692:	f100 33ff 	add.w	r3, r0, #4294967295
   1c696:	d202      	bcs.n	1c69e <__udivmoddi4+0x15a>
   1c698:	45a4      	cmp	ip, r4
   1c69a:	f200 80b8 	bhi.w	1c80e <__udivmoddi4+0x2ca>
   1c69e:	4618      	mov	r0, r3
   1c6a0:	eba4 040c 	sub.w	r4, r4, ip
   1c6a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c6a8:	e79d      	b.n	1c5e6 <__udivmoddi4+0xa2>
   1c6aa:	4631      	mov	r1, r6
   1c6ac:	4630      	mov	r0, r6
   1c6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6b2:	f1ce 0420 	rsb	r4, lr, #32
   1c6b6:	fa05 f30e 	lsl.w	r3, r5, lr
   1c6ba:	fa07 f70e 	lsl.w	r7, r7, lr
   1c6be:	fa20 f804 	lsr.w	r8, r0, r4
   1c6c2:	0c3a      	lsrs	r2, r7, #16
   1c6c4:	fa25 f404 	lsr.w	r4, r5, r4
   1c6c8:	ea48 0803 	orr.w	r8, r8, r3
   1c6cc:	fbb4 f1f2 	udiv	r1, r4, r2
   1c6d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c6d4:	fb02 4411 	mls	r4, r2, r1, r4
   1c6d8:	fa1f fc87 	uxth.w	ip, r7
   1c6dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c6e0:	fb01 f30c 	mul.w	r3, r1, ip
   1c6e4:	42ab      	cmp	r3, r5
   1c6e6:	fa00 f40e 	lsl.w	r4, r0, lr
   1c6ea:	d909      	bls.n	1c700 <__udivmoddi4+0x1bc>
   1c6ec:	19ed      	adds	r5, r5, r7
   1c6ee:	f101 30ff 	add.w	r0, r1, #4294967295
   1c6f2:	f080 808a 	bcs.w	1c80a <__udivmoddi4+0x2c6>
   1c6f6:	42ab      	cmp	r3, r5
   1c6f8:	f240 8087 	bls.w	1c80a <__udivmoddi4+0x2c6>
   1c6fc:	3902      	subs	r1, #2
   1c6fe:	443d      	add	r5, r7
   1c700:	1aeb      	subs	r3, r5, r3
   1c702:	fa1f f588 	uxth.w	r5, r8
   1c706:	fbb3 f0f2 	udiv	r0, r3, r2
   1c70a:	fb02 3310 	mls	r3, r2, r0, r3
   1c70e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c712:	fb00 f30c 	mul.w	r3, r0, ip
   1c716:	42ab      	cmp	r3, r5
   1c718:	d907      	bls.n	1c72a <__udivmoddi4+0x1e6>
   1c71a:	19ed      	adds	r5, r5, r7
   1c71c:	f100 38ff 	add.w	r8, r0, #4294967295
   1c720:	d26f      	bcs.n	1c802 <__udivmoddi4+0x2be>
   1c722:	42ab      	cmp	r3, r5
   1c724:	d96d      	bls.n	1c802 <__udivmoddi4+0x2be>
   1c726:	3802      	subs	r0, #2
   1c728:	443d      	add	r5, r7
   1c72a:	1aeb      	subs	r3, r5, r3
   1c72c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c730:	e78f      	b.n	1c652 <__udivmoddi4+0x10e>
   1c732:	f1c1 0720 	rsb	r7, r1, #32
   1c736:	fa22 f807 	lsr.w	r8, r2, r7
   1c73a:	408b      	lsls	r3, r1
   1c73c:	fa05 f401 	lsl.w	r4, r5, r1
   1c740:	ea48 0303 	orr.w	r3, r8, r3
   1c744:	fa20 fe07 	lsr.w	lr, r0, r7
   1c748:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c74c:	40fd      	lsrs	r5, r7
   1c74e:	ea4e 0e04 	orr.w	lr, lr, r4
   1c752:	fbb5 f9fc 	udiv	r9, r5, ip
   1c756:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c75a:	fb0c 5519 	mls	r5, ip, r9, r5
   1c75e:	fa1f f883 	uxth.w	r8, r3
   1c762:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c766:	fb09 f408 	mul.w	r4, r9, r8
   1c76a:	42ac      	cmp	r4, r5
   1c76c:	fa02 f201 	lsl.w	r2, r2, r1
   1c770:	fa00 fa01 	lsl.w	sl, r0, r1
   1c774:	d908      	bls.n	1c788 <__udivmoddi4+0x244>
   1c776:	18ed      	adds	r5, r5, r3
   1c778:	f109 30ff 	add.w	r0, r9, #4294967295
   1c77c:	d243      	bcs.n	1c806 <__udivmoddi4+0x2c2>
   1c77e:	42ac      	cmp	r4, r5
   1c780:	d941      	bls.n	1c806 <__udivmoddi4+0x2c2>
   1c782:	f1a9 0902 	sub.w	r9, r9, #2
   1c786:	441d      	add	r5, r3
   1c788:	1b2d      	subs	r5, r5, r4
   1c78a:	fa1f fe8e 	uxth.w	lr, lr
   1c78e:	fbb5 f0fc 	udiv	r0, r5, ip
   1c792:	fb0c 5510 	mls	r5, ip, r0, r5
   1c796:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c79a:	fb00 f808 	mul.w	r8, r0, r8
   1c79e:	45a0      	cmp	r8, r4
   1c7a0:	d907      	bls.n	1c7b2 <__udivmoddi4+0x26e>
   1c7a2:	18e4      	adds	r4, r4, r3
   1c7a4:	f100 35ff 	add.w	r5, r0, #4294967295
   1c7a8:	d229      	bcs.n	1c7fe <__udivmoddi4+0x2ba>
   1c7aa:	45a0      	cmp	r8, r4
   1c7ac:	d927      	bls.n	1c7fe <__udivmoddi4+0x2ba>
   1c7ae:	3802      	subs	r0, #2
   1c7b0:	441c      	add	r4, r3
   1c7b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c7b6:	eba4 0408 	sub.w	r4, r4, r8
   1c7ba:	fba0 8902 	umull	r8, r9, r0, r2
   1c7be:	454c      	cmp	r4, r9
   1c7c0:	46c6      	mov	lr, r8
   1c7c2:	464d      	mov	r5, r9
   1c7c4:	d315      	bcc.n	1c7f2 <__udivmoddi4+0x2ae>
   1c7c6:	d012      	beq.n	1c7ee <__udivmoddi4+0x2aa>
   1c7c8:	b156      	cbz	r6, 1c7e0 <__udivmoddi4+0x29c>
   1c7ca:	ebba 030e 	subs.w	r3, sl, lr
   1c7ce:	eb64 0405 	sbc.w	r4, r4, r5
   1c7d2:	fa04 f707 	lsl.w	r7, r4, r7
   1c7d6:	40cb      	lsrs	r3, r1
   1c7d8:	431f      	orrs	r7, r3
   1c7da:	40cc      	lsrs	r4, r1
   1c7dc:	6037      	str	r7, [r6, #0]
   1c7de:	6074      	str	r4, [r6, #4]
   1c7e0:	2100      	movs	r1, #0
   1c7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c7e6:	4618      	mov	r0, r3
   1c7e8:	e6f8      	b.n	1c5dc <__udivmoddi4+0x98>
   1c7ea:	4690      	mov	r8, r2
   1c7ec:	e6e0      	b.n	1c5b0 <__udivmoddi4+0x6c>
   1c7ee:	45c2      	cmp	sl, r8
   1c7f0:	d2ea      	bcs.n	1c7c8 <__udivmoddi4+0x284>
   1c7f2:	ebb8 0e02 	subs.w	lr, r8, r2
   1c7f6:	eb69 0503 	sbc.w	r5, r9, r3
   1c7fa:	3801      	subs	r0, #1
   1c7fc:	e7e4      	b.n	1c7c8 <__udivmoddi4+0x284>
   1c7fe:	4628      	mov	r0, r5
   1c800:	e7d7      	b.n	1c7b2 <__udivmoddi4+0x26e>
   1c802:	4640      	mov	r0, r8
   1c804:	e791      	b.n	1c72a <__udivmoddi4+0x1e6>
   1c806:	4681      	mov	r9, r0
   1c808:	e7be      	b.n	1c788 <__udivmoddi4+0x244>
   1c80a:	4601      	mov	r1, r0
   1c80c:	e778      	b.n	1c700 <__udivmoddi4+0x1bc>
   1c80e:	3802      	subs	r0, #2
   1c810:	443c      	add	r4, r7
   1c812:	e745      	b.n	1c6a0 <__udivmoddi4+0x15c>
   1c814:	4608      	mov	r0, r1
   1c816:	e708      	b.n	1c62a <__udivmoddi4+0xe6>
   1c818:	f1a8 0802 	sub.w	r8, r8, #2
   1c81c:	443d      	add	r5, r7
   1c81e:	e72b      	b.n	1c678 <__udivmoddi4+0x134>

0001c820 <selfrel_offset31>:
   1c820:	6803      	ldr	r3, [r0, #0]
   1c822:	005a      	lsls	r2, r3, #1
   1c824:	bf4c      	ite	mi
   1c826:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c82a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c82e:	4418      	add	r0, r3
   1c830:	4770      	bx	lr
   1c832:	bf00      	nop

0001c834 <search_EIT_table>:
   1c834:	b361      	cbz	r1, 1c890 <search_EIT_table+0x5c>
   1c836:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c83a:	f101 3aff 	add.w	sl, r1, #4294967295
   1c83e:	4690      	mov	r8, r2
   1c840:	4606      	mov	r6, r0
   1c842:	46d1      	mov	r9, sl
   1c844:	2700      	movs	r7, #0
   1c846:	eb07 0409 	add.w	r4, r7, r9
   1c84a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c84e:	1064      	asrs	r4, r4, #1
   1c850:	00e5      	lsls	r5, r4, #3
   1c852:	1971      	adds	r1, r6, r5
   1c854:	4608      	mov	r0, r1
   1c856:	f7ff ffe3 	bl	1c820 <selfrel_offset31>
   1c85a:	45a2      	cmp	sl, r4
   1c85c:	4683      	mov	fp, r0
   1c85e:	f105 0008 	add.w	r0, r5, #8
   1c862:	4430      	add	r0, r6
   1c864:	d009      	beq.n	1c87a <search_EIT_table+0x46>
   1c866:	f7ff ffdb 	bl	1c820 <selfrel_offset31>
   1c86a:	45c3      	cmp	fp, r8
   1c86c:	f100 30ff 	add.w	r0, r0, #4294967295
   1c870:	d805      	bhi.n	1c87e <search_EIT_table+0x4a>
   1c872:	4540      	cmp	r0, r8
   1c874:	d209      	bcs.n	1c88a <search_EIT_table+0x56>
   1c876:	1c67      	adds	r7, r4, #1
   1c878:	e7e5      	b.n	1c846 <search_EIT_table+0x12>
   1c87a:	45c3      	cmp	fp, r8
   1c87c:	d905      	bls.n	1c88a <search_EIT_table+0x56>
   1c87e:	42a7      	cmp	r7, r4
   1c880:	d002      	beq.n	1c888 <search_EIT_table+0x54>
   1c882:	f104 39ff 	add.w	r9, r4, #4294967295
   1c886:	e7de      	b.n	1c846 <search_EIT_table+0x12>
   1c888:	2100      	movs	r1, #0
   1c88a:	4608      	mov	r0, r1
   1c88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c890:	4608      	mov	r0, r1
   1c892:	4770      	bx	lr

0001c894 <__gnu_unwind_get_pr_addr>:
   1c894:	2801      	cmp	r0, #1
   1c896:	d007      	beq.n	1c8a8 <__gnu_unwind_get_pr_addr+0x14>
   1c898:	2802      	cmp	r0, #2
   1c89a:	d007      	beq.n	1c8ac <__gnu_unwind_get_pr_addr+0x18>
   1c89c:	4b04      	ldr	r3, [pc, #16]	; (1c8b0 <__gnu_unwind_get_pr_addr+0x1c>)
   1c89e:	2800      	cmp	r0, #0
   1c8a0:	bf0c      	ite	eq
   1c8a2:	4618      	moveq	r0, r3
   1c8a4:	2000      	movne	r0, #0
   1c8a6:	4770      	bx	lr
   1c8a8:	4802      	ldr	r0, [pc, #8]	; (1c8b4 <__gnu_unwind_get_pr_addr+0x20>)
   1c8aa:	4770      	bx	lr
   1c8ac:	4802      	ldr	r0, [pc, #8]	; (1c8b8 <__gnu_unwind_get_pr_addr+0x24>)
   1c8ae:	4770      	bx	lr
   1c8b0:	0001cf99 	.word	0x0001cf99
   1c8b4:	0001cf9d 	.word	0x0001cf9d
   1c8b8:	0001cfa1 	.word	0x0001cfa1

0001c8bc <get_eit_entry>:
   1c8bc:	b530      	push	{r4, r5, lr}
   1c8be:	4b24      	ldr	r3, [pc, #144]	; (1c950 <get_eit_entry+0x94>)
   1c8c0:	b083      	sub	sp, #12
   1c8c2:	4604      	mov	r4, r0
   1c8c4:	1e8d      	subs	r5, r1, #2
   1c8c6:	b37b      	cbz	r3, 1c928 <get_eit_entry+0x6c>
   1c8c8:	a901      	add	r1, sp, #4
   1c8ca:	4628      	mov	r0, r5
   1c8cc:	f3af 8000 	nop.w
   1c8d0:	b320      	cbz	r0, 1c91c <get_eit_entry+0x60>
   1c8d2:	9901      	ldr	r1, [sp, #4]
   1c8d4:	462a      	mov	r2, r5
   1c8d6:	f7ff ffad 	bl	1c834 <search_EIT_table>
   1c8da:	4601      	mov	r1, r0
   1c8dc:	b1f0      	cbz	r0, 1c91c <get_eit_entry+0x60>
   1c8de:	f7ff ff9f 	bl	1c820 <selfrel_offset31>
   1c8e2:	684b      	ldr	r3, [r1, #4]
   1c8e4:	64a0      	str	r0, [r4, #72]	; 0x48
   1c8e6:	2b01      	cmp	r3, #1
   1c8e8:	d012      	beq.n	1c910 <get_eit_entry+0x54>
   1c8ea:	2b00      	cmp	r3, #0
   1c8ec:	f101 0004 	add.w	r0, r1, #4
   1c8f0:	db20      	blt.n	1c934 <get_eit_entry+0x78>
   1c8f2:	f7ff ff95 	bl	1c820 <selfrel_offset31>
   1c8f6:	2300      	movs	r3, #0
   1c8f8:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c8fa:	6523      	str	r3, [r4, #80]	; 0x50
   1c8fc:	6803      	ldr	r3, [r0, #0]
   1c8fe:	2b00      	cmp	r3, #0
   1c900:	db1c      	blt.n	1c93c <get_eit_entry+0x80>
   1c902:	f7ff ff8d 	bl	1c820 <selfrel_offset31>
   1c906:	2300      	movs	r3, #0
   1c908:	6120      	str	r0, [r4, #16]
   1c90a:	4618      	mov	r0, r3
   1c90c:	b003      	add	sp, #12
   1c90e:	bd30      	pop	{r4, r5, pc}
   1c910:	2300      	movs	r3, #0
   1c912:	6123      	str	r3, [r4, #16]
   1c914:	2305      	movs	r3, #5
   1c916:	4618      	mov	r0, r3
   1c918:	b003      	add	sp, #12
   1c91a:	bd30      	pop	{r4, r5, pc}
   1c91c:	2300      	movs	r3, #0
   1c91e:	6123      	str	r3, [r4, #16]
   1c920:	2309      	movs	r3, #9
   1c922:	4618      	mov	r0, r3
   1c924:	b003      	add	sp, #12
   1c926:	bd30      	pop	{r4, r5, pc}
   1c928:	490a      	ldr	r1, [pc, #40]	; (1c954 <get_eit_entry+0x98>)
   1c92a:	480b      	ldr	r0, [pc, #44]	; (1c958 <get_eit_entry+0x9c>)
   1c92c:	1a09      	subs	r1, r1, r0
   1c92e:	10c9      	asrs	r1, r1, #3
   1c930:	9101      	str	r1, [sp, #4]
   1c932:	e7cf      	b.n	1c8d4 <get_eit_entry+0x18>
   1c934:	2301      	movs	r3, #1
   1c936:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c938:	6523      	str	r3, [r4, #80]	; 0x50
   1c93a:	e7df      	b.n	1c8fc <get_eit_entry+0x40>
   1c93c:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c940:	f7ff ffa8 	bl	1c894 <__gnu_unwind_get_pr_addr>
   1c944:	2800      	cmp	r0, #0
   1c946:	6120      	str	r0, [r4, #16]
   1c948:	bf14      	ite	ne
   1c94a:	2300      	movne	r3, #0
   1c94c:	2309      	moveq	r3, #9
   1c94e:	e7dc      	b.n	1c90a <get_eit_entry+0x4e>
   1c950:	00000000 	.word	0x00000000
   1c954:	000251c4 	.word	0x000251c4
   1c958:	0002503c 	.word	0x0002503c

0001c95c <restore_non_core_regs>:
   1c95c:	6803      	ldr	r3, [r0, #0]
   1c95e:	07da      	lsls	r2, r3, #31
   1c960:	b510      	push	{r4, lr}
   1c962:	4604      	mov	r4, r0
   1c964:	d406      	bmi.n	1c974 <restore_non_core_regs+0x18>
   1c966:	079b      	lsls	r3, r3, #30
   1c968:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c96c:	d509      	bpl.n	1c982 <restore_non_core_regs+0x26>
   1c96e:	f000 fc51 	bl	1d214 <__gnu_Unwind_Restore_VFP_D>
   1c972:	6823      	ldr	r3, [r4, #0]
   1c974:	0759      	lsls	r1, r3, #29
   1c976:	d509      	bpl.n	1c98c <restore_non_core_regs+0x30>
   1c978:	071a      	lsls	r2, r3, #28
   1c97a:	d50e      	bpl.n	1c99a <restore_non_core_regs+0x3e>
   1c97c:	06db      	lsls	r3, r3, #27
   1c97e:	d513      	bpl.n	1c9a8 <restore_non_core_regs+0x4c>
   1c980:	bd10      	pop	{r4, pc}
   1c982:	f000 fc3f 	bl	1d204 <__gnu_Unwind_Restore_VFP>
   1c986:	6823      	ldr	r3, [r4, #0]
   1c988:	0759      	lsls	r1, r3, #29
   1c98a:	d4f5      	bmi.n	1c978 <restore_non_core_regs+0x1c>
   1c98c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c990:	f000 fc48 	bl	1d224 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c994:	6823      	ldr	r3, [r4, #0]
   1c996:	071a      	lsls	r2, r3, #28
   1c998:	d4f0      	bmi.n	1c97c <restore_non_core_regs+0x20>
   1c99a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c99e:	f000 fc49 	bl	1d234 <__gnu_Unwind_Restore_WMMXD>
   1c9a2:	6823      	ldr	r3, [r4, #0]
   1c9a4:	06db      	lsls	r3, r3, #27
   1c9a6:	d4eb      	bmi.n	1c980 <restore_non_core_regs+0x24>
   1c9a8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c9b0:	f000 bc84 	b.w	1d2bc <__gnu_Unwind_Restore_WMMXC>

0001c9b4 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c9b4:	6803      	ldr	r3, [r0, #0]
   1c9b6:	b103      	cbz	r3, 1c9ba <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1c9b8:	4403      	add	r3, r0
   1c9ba:	4618      	mov	r0, r3
   1c9bc:	4770      	bx	lr
   1c9be:	bf00      	nop

0001c9c0 <__gnu_unwind_24bit.isra.1>:
   1c9c0:	2009      	movs	r0, #9
   1c9c2:	4770      	bx	lr

0001c9c4 <_Unwind_DebugHook>:
   1c9c4:	4770      	bx	lr
   1c9c6:	bf00      	nop

0001c9c8 <unwind_phase2>:
   1c9c8:	b570      	push	{r4, r5, r6, lr}
   1c9ca:	4604      	mov	r4, r0
   1c9cc:	460d      	mov	r5, r1
   1c9ce:	e008      	b.n	1c9e2 <unwind_phase2+0x1a>
   1c9d0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1c9d2:	6163      	str	r3, [r4, #20]
   1c9d4:	462a      	mov	r2, r5
   1c9d6:	6923      	ldr	r3, [r4, #16]
   1c9d8:	4621      	mov	r1, r4
   1c9da:	2001      	movs	r0, #1
   1c9dc:	4798      	blx	r3
   1c9de:	2808      	cmp	r0, #8
   1c9e0:	d108      	bne.n	1c9f4 <unwind_phase2+0x2c>
   1c9e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c9e4:	4620      	mov	r0, r4
   1c9e6:	f7ff ff69 	bl	1c8bc <get_eit_entry>
   1c9ea:	4606      	mov	r6, r0
   1c9ec:	2800      	cmp	r0, #0
   1c9ee:	d0ef      	beq.n	1c9d0 <unwind_phase2+0x8>
   1c9f0:	f000 fe94 	bl	1d71c <abort>
   1c9f4:	2807      	cmp	r0, #7
   1c9f6:	d1fb      	bne.n	1c9f0 <unwind_phase2+0x28>
   1c9f8:	4630      	mov	r0, r6
   1c9fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c9fc:	f7ff ffe2 	bl	1c9c4 <_Unwind_DebugHook>
   1ca00:	1d28      	adds	r0, r5, #4
   1ca02:	f000 fbf3 	bl	1d1ec <__restore_core_regs>
   1ca06:	bf00      	nop

0001ca08 <unwind_phase2_forced>:
   1ca08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ca0c:	1d0c      	adds	r4, r1, #4
   1ca0e:	4605      	mov	r5, r0
   1ca10:	4692      	mov	sl, r2
   1ca12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ca14:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1ca18:	ae03      	add	r6, sp, #12
   1ca1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ca1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ca1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ca20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ca22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ca24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ca28:	ac02      	add	r4, sp, #8
   1ca2a:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1ca2e:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1ca32:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1ca36:	2300      	movs	r3, #0
   1ca38:	4628      	mov	r0, r5
   1ca3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1ca3c:	6023      	str	r3, [r4, #0]
   1ca3e:	f7ff ff3d 	bl	1c8bc <get_eit_entry>
   1ca42:	f1ba 0f00 	cmp.w	sl, #0
   1ca46:	4607      	mov	r7, r0
   1ca48:	bf14      	ite	ne
   1ca4a:	260a      	movne	r6, #10
   1ca4c:	2609      	moveq	r6, #9
   1ca4e:	b17f      	cbz	r7, 1ca70 <unwind_phase2_forced+0x68>
   1ca50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ca52:	f046 0110 	orr.w	r1, r6, #16
   1ca56:	e88d 0210 	stmia.w	sp, {r4, r9}
   1ca5a:	462a      	mov	r2, r5
   1ca5c:	6463      	str	r3, [r4, #68]	; 0x44
   1ca5e:	2001      	movs	r0, #1
   1ca60:	462b      	mov	r3, r5
   1ca62:	47c0      	blx	r8
   1ca64:	bb78      	cbnz	r0, 1cac6 <unwind_phase2_forced+0xbe>
   1ca66:	4638      	mov	r0, r7
   1ca68:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1ca6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca70:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ca72:	616b      	str	r3, [r5, #20]
   1ca74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ca78:	4621      	mov	r1, r4
   1ca7a:	a87a      	add	r0, sp, #488	; 0x1e8
   1ca7c:	f001 fc38 	bl	1e2f0 <memcpy>
   1ca80:	692b      	ldr	r3, [r5, #16]
   1ca82:	aa7a      	add	r2, sp, #488	; 0x1e8
   1ca84:	4629      	mov	r1, r5
   1ca86:	4630      	mov	r0, r6
   1ca88:	4798      	blx	r3
   1ca8a:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1ca8c:	4682      	mov	sl, r0
   1ca8e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1ca92:	4631      	mov	r1, r6
   1ca94:	6463      	str	r3, [r4, #68]	; 0x44
   1ca96:	462a      	mov	r2, r5
   1ca98:	462b      	mov	r3, r5
   1ca9a:	2001      	movs	r0, #1
   1ca9c:	47c0      	blx	r8
   1ca9e:	b990      	cbnz	r0, 1cac6 <unwind_phase2_forced+0xbe>
   1caa0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1caa4:	a97a      	add	r1, sp, #488	; 0x1e8
   1caa6:	4620      	mov	r0, r4
   1caa8:	f001 fc22 	bl	1e2f0 <memcpy>
   1caac:	f1ba 0f08 	cmp.w	sl, #8
   1cab0:	d106      	bne.n	1cac0 <unwind_phase2_forced+0xb8>
   1cab2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cab4:	4628      	mov	r0, r5
   1cab6:	f7ff ff01 	bl	1c8bc <get_eit_entry>
   1caba:	2609      	movs	r6, #9
   1cabc:	4607      	mov	r7, r0
   1cabe:	e7c6      	b.n	1ca4e <unwind_phase2_forced+0x46>
   1cac0:	f1ba 0f07 	cmp.w	sl, #7
   1cac4:	d005      	beq.n	1cad2 <unwind_phase2_forced+0xca>
   1cac6:	2709      	movs	r7, #9
   1cac8:	4638      	mov	r0, r7
   1caca:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cad2:	4638      	mov	r0, r7
   1cad4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cad6:	f7ff ff75 	bl	1c9c4 <_Unwind_DebugHook>
   1cada:	a803      	add	r0, sp, #12
   1cadc:	f000 fb86 	bl	1d1ec <__restore_core_regs>

0001cae0 <_Unwind_GetCFA>:
   1cae0:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1cae2:	4770      	bx	lr

0001cae4 <__gnu_Unwind_RaiseException>:
   1cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cae6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1cae8:	640b      	str	r3, [r1, #64]	; 0x40
   1caea:	1d0e      	adds	r6, r1, #4
   1caec:	460f      	mov	r7, r1
   1caee:	4604      	mov	r4, r0
   1caf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1caf2:	b0f9      	sub	sp, #484	; 0x1e4
   1caf4:	ad01      	add	r5, sp, #4
   1caf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1caf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cafa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cafc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cafe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cb00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cb04:	f04f 36ff 	mov.w	r6, #4294967295
   1cb08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1cb0c:	9600      	str	r6, [sp, #0]
   1cb0e:	e006      	b.n	1cb1e <__gnu_Unwind_RaiseException+0x3a>
   1cb10:	6923      	ldr	r3, [r4, #16]
   1cb12:	466a      	mov	r2, sp
   1cb14:	4621      	mov	r1, r4
   1cb16:	4798      	blx	r3
   1cb18:	2808      	cmp	r0, #8
   1cb1a:	4605      	mov	r5, r0
   1cb1c:	d108      	bne.n	1cb30 <__gnu_Unwind_RaiseException+0x4c>
   1cb1e:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cb20:	4620      	mov	r0, r4
   1cb22:	f7ff fecb 	bl	1c8bc <get_eit_entry>
   1cb26:	2800      	cmp	r0, #0
   1cb28:	d0f2      	beq.n	1cb10 <__gnu_Unwind_RaiseException+0x2c>
   1cb2a:	2009      	movs	r0, #9
   1cb2c:	b079      	add	sp, #484	; 0x1e4
   1cb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb30:	4668      	mov	r0, sp
   1cb32:	f7ff ff13 	bl	1c95c <restore_non_core_regs>
   1cb36:	2d06      	cmp	r5, #6
   1cb38:	d1f7      	bne.n	1cb2a <__gnu_Unwind_RaiseException+0x46>
   1cb3a:	4639      	mov	r1, r7
   1cb3c:	4620      	mov	r0, r4
   1cb3e:	f7ff ff43 	bl	1c9c8 <unwind_phase2>
   1cb42:	bf00      	nop

0001cb44 <__gnu_Unwind_ForcedUnwind>:
   1cb44:	b430      	push	{r4, r5}
   1cb46:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1cb48:	60c1      	str	r1, [r0, #12]
   1cb4a:	6182      	str	r2, [r0, #24]
   1cb4c:	4619      	mov	r1, r3
   1cb4e:	641d      	str	r5, [r3, #64]	; 0x40
   1cb50:	2200      	movs	r2, #0
   1cb52:	bc30      	pop	{r4, r5}
   1cb54:	e758      	b.n	1ca08 <unwind_phase2_forced>
   1cb56:	bf00      	nop

0001cb58 <__gnu_Unwind_Resume>:
   1cb58:	b570      	push	{r4, r5, r6, lr}
   1cb5a:	68c6      	ldr	r6, [r0, #12]
   1cb5c:	6943      	ldr	r3, [r0, #20]
   1cb5e:	640b      	str	r3, [r1, #64]	; 0x40
   1cb60:	b126      	cbz	r6, 1cb6c <__gnu_Unwind_Resume+0x14>
   1cb62:	2201      	movs	r2, #1
   1cb64:	f7ff ff50 	bl	1ca08 <unwind_phase2_forced>
   1cb68:	f000 fdd8 	bl	1d71c <abort>
   1cb6c:	6903      	ldr	r3, [r0, #16]
   1cb6e:	460a      	mov	r2, r1
   1cb70:	4604      	mov	r4, r0
   1cb72:	460d      	mov	r5, r1
   1cb74:	4601      	mov	r1, r0
   1cb76:	2002      	movs	r0, #2
   1cb78:	4798      	blx	r3
   1cb7a:	2807      	cmp	r0, #7
   1cb7c:	d007      	beq.n	1cb8e <__gnu_Unwind_Resume+0x36>
   1cb7e:	2808      	cmp	r0, #8
   1cb80:	d103      	bne.n	1cb8a <__gnu_Unwind_Resume+0x32>
   1cb82:	4629      	mov	r1, r5
   1cb84:	4620      	mov	r0, r4
   1cb86:	f7ff ff1f 	bl	1c9c8 <unwind_phase2>
   1cb8a:	f000 fdc7 	bl	1d71c <abort>
   1cb8e:	4630      	mov	r0, r6
   1cb90:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cb92:	f7ff ff17 	bl	1c9c4 <_Unwind_DebugHook>
   1cb96:	1d28      	adds	r0, r5, #4
   1cb98:	f000 fb28 	bl	1d1ec <__restore_core_regs>

0001cb9c <__gnu_Unwind_Resume_or_Rethrow>:
   1cb9c:	68c2      	ldr	r2, [r0, #12]
   1cb9e:	b11a      	cbz	r2, 1cba8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1cba0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1cba2:	640a      	str	r2, [r1, #64]	; 0x40
   1cba4:	2200      	movs	r2, #0
   1cba6:	e72f      	b.n	1ca08 <unwind_phase2_forced>
   1cba8:	e79c      	b.n	1cae4 <__gnu_Unwind_RaiseException>
   1cbaa:	bf00      	nop

0001cbac <_Unwind_Complete>:
   1cbac:	4770      	bx	lr
   1cbae:	bf00      	nop

0001cbb0 <_Unwind_DeleteException>:
   1cbb0:	6883      	ldr	r3, [r0, #8]
   1cbb2:	b113      	cbz	r3, 1cbba <_Unwind_DeleteException+0xa>
   1cbb4:	4601      	mov	r1, r0
   1cbb6:	2001      	movs	r0, #1
   1cbb8:	4718      	bx	r3
   1cbba:	4770      	bx	lr

0001cbbc <_Unwind_VRS_Get>:
   1cbbc:	b500      	push	{lr}
   1cbbe:	2904      	cmp	r1, #4
   1cbc0:	d807      	bhi.n	1cbd2 <_Unwind_VRS_Get+0x16>
   1cbc2:	e8df f001 	tbb	[pc, r1]
   1cbc6:	0903      	.short	0x0903
   1cbc8:	0906      	.short	0x0906
   1cbca:	09          	.byte	0x09
   1cbcb:	00          	.byte	0x00
   1cbcc:	b90b      	cbnz	r3, 1cbd2 <_Unwind_VRS_Get+0x16>
   1cbce:	2a0f      	cmp	r2, #15
   1cbd0:	d905      	bls.n	1cbde <_Unwind_VRS_Get+0x22>
   1cbd2:	2002      	movs	r0, #2
   1cbd4:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbd8:	2001      	movs	r0, #1
   1cbda:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbde:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cbe2:	4618      	mov	r0, r3
   1cbe4:	6853      	ldr	r3, [r2, #4]
   1cbe6:	9a01      	ldr	r2, [sp, #4]
   1cbe8:	6013      	str	r3, [r2, #0]
   1cbea:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbee:	bf00      	nop

0001cbf0 <_Unwind_GetGR>:
   1cbf0:	b510      	push	{r4, lr}
   1cbf2:	b084      	sub	sp, #16
   1cbf4:	2300      	movs	r3, #0
   1cbf6:	ac03      	add	r4, sp, #12
   1cbf8:	460a      	mov	r2, r1
   1cbfa:	9400      	str	r4, [sp, #0]
   1cbfc:	4619      	mov	r1, r3
   1cbfe:	f7ff ffdd 	bl	1cbbc <_Unwind_VRS_Get>
   1cc02:	9803      	ldr	r0, [sp, #12]
   1cc04:	b004      	add	sp, #16
   1cc06:	bd10      	pop	{r4, pc}

0001cc08 <_Unwind_VRS_Set>:
   1cc08:	b500      	push	{lr}
   1cc0a:	2904      	cmp	r1, #4
   1cc0c:	d807      	bhi.n	1cc1e <_Unwind_VRS_Set+0x16>
   1cc0e:	e8df f001 	tbb	[pc, r1]
   1cc12:	0903      	.short	0x0903
   1cc14:	0906      	.short	0x0906
   1cc16:	09          	.byte	0x09
   1cc17:	00          	.byte	0x00
   1cc18:	b90b      	cbnz	r3, 1cc1e <_Unwind_VRS_Set+0x16>
   1cc1a:	2a0f      	cmp	r2, #15
   1cc1c:	d905      	bls.n	1cc2a <_Unwind_VRS_Set+0x22>
   1cc1e:	2002      	movs	r0, #2
   1cc20:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc24:	2001      	movs	r0, #1
   1cc26:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc2a:	9901      	ldr	r1, [sp, #4]
   1cc2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cc30:	6809      	ldr	r1, [r1, #0]
   1cc32:	6051      	str	r1, [r2, #4]
   1cc34:	4618      	mov	r0, r3
   1cc36:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc3a:	bf00      	nop

0001cc3c <_Unwind_SetGR>:
   1cc3c:	b510      	push	{r4, lr}
   1cc3e:	b084      	sub	sp, #16
   1cc40:	ac04      	add	r4, sp, #16
   1cc42:	2300      	movs	r3, #0
   1cc44:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cc48:	460a      	mov	r2, r1
   1cc4a:	9400      	str	r4, [sp, #0]
   1cc4c:	4619      	mov	r1, r3
   1cc4e:	f7ff ffdb 	bl	1cc08 <_Unwind_VRS_Set>
   1cc52:	b004      	add	sp, #16
   1cc54:	bd10      	pop	{r4, pc}
   1cc56:	bf00      	nop

0001cc58 <__gnu_Unwind_Backtrace>:
   1cc58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc5a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cc5c:	6413      	str	r3, [r2, #64]	; 0x40
   1cc5e:	1d15      	adds	r5, r2, #4
   1cc60:	4607      	mov	r7, r0
   1cc62:	460e      	mov	r6, r1
   1cc64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cc66:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1cc6a:	ac17      	add	r4, sp, #92	; 0x5c
   1cc6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cc6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cc70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cc72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cc74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cc76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cc7a:	f04f 35ff 	mov.w	r5, #4294967295
   1cc7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cc82:	9516      	str	r5, [sp, #88]	; 0x58
   1cc84:	e010      	b.n	1cca8 <__gnu_Unwind_Backtrace+0x50>
   1cc86:	a816      	add	r0, sp, #88	; 0x58
   1cc88:	f7ff ffd8 	bl	1cc3c <_Unwind_SetGR>
   1cc8c:	4631      	mov	r1, r6
   1cc8e:	a816      	add	r0, sp, #88	; 0x58
   1cc90:	47b8      	blx	r7
   1cc92:	aa16      	add	r2, sp, #88	; 0x58
   1cc94:	4669      	mov	r1, sp
   1cc96:	b978      	cbnz	r0, 1ccb8 <__gnu_Unwind_Backtrace+0x60>
   1cc98:	9b04      	ldr	r3, [sp, #16]
   1cc9a:	2008      	movs	r0, #8
   1cc9c:	4798      	blx	r3
   1cc9e:	2805      	cmp	r0, #5
   1cca0:	4604      	mov	r4, r0
   1cca2:	d00a      	beq.n	1ccba <__gnu_Unwind_Backtrace+0x62>
   1cca4:	2809      	cmp	r0, #9
   1cca6:	d007      	beq.n	1ccb8 <__gnu_Unwind_Backtrace+0x60>
   1cca8:	9926      	ldr	r1, [sp, #152]	; 0x98
   1ccaa:	4668      	mov	r0, sp
   1ccac:	f7ff fe06 	bl	1c8bc <get_eit_entry>
   1ccb0:	466a      	mov	r2, sp
   1ccb2:	210c      	movs	r1, #12
   1ccb4:	2800      	cmp	r0, #0
   1ccb6:	d0e6      	beq.n	1cc86 <__gnu_Unwind_Backtrace+0x2e>
   1ccb8:	2409      	movs	r4, #9
   1ccba:	a816      	add	r0, sp, #88	; 0x58
   1ccbc:	f7ff fe4e 	bl	1c95c <restore_non_core_regs>
   1ccc0:	4620      	mov	r0, r4
   1ccc2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1ccc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ccc8 <__gnu_unwind_pr_common>:
   1ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cccc:	460d      	mov	r5, r1
   1ccce:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1ccd0:	b08b      	sub	sp, #44	; 0x2c
   1ccd2:	1d0c      	adds	r4, r1, #4
   1ccd4:	6809      	ldr	r1, [r1, #0]
   1ccd6:	9107      	str	r1, [sp, #28]
   1ccd8:	4691      	mov	r9, r2
   1ccda:	9408      	str	r4, [sp, #32]
   1ccdc:	f000 0b03 	and.w	fp, r0, #3
   1cce0:	461e      	mov	r6, r3
   1cce2:	2b00      	cmp	r3, #0
   1cce4:	d160      	bne.n	1cda8 <__gnu_unwind_pr_common+0xe0>
   1cce6:	0209      	lsls	r1, r1, #8
   1cce8:	2303      	movs	r3, #3
   1ccea:	9107      	str	r1, [sp, #28]
   1ccec:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1ccf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ccf4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ccf6:	f1bb 0f02 	cmp.w	fp, #2
   1ccfa:	bf08      	it	eq
   1ccfc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1ccfe:	f013 0301 	ands.w	r3, r3, #1
   1cd02:	d140      	bne.n	1cd86 <__gnu_unwind_pr_common+0xbe>
   1cd04:	9301      	str	r3, [sp, #4]
   1cd06:	f000 0308 	and.w	r3, r0, #8
   1cd0a:	9303      	str	r3, [sp, #12]
   1cd0c:	f8d4 8000 	ldr.w	r8, [r4]
   1cd10:	f1b8 0f00 	cmp.w	r8, #0
   1cd14:	d039      	beq.n	1cd8a <__gnu_unwind_pr_common+0xc2>
   1cd16:	2e02      	cmp	r6, #2
   1cd18:	d043      	beq.n	1cda2 <__gnu_unwind_pr_common+0xda>
   1cd1a:	f8b4 8000 	ldrh.w	r8, [r4]
   1cd1e:	8867      	ldrh	r7, [r4, #2]
   1cd20:	3404      	adds	r4, #4
   1cd22:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cd24:	f027 0a01 	bic.w	sl, r7, #1
   1cd28:	210f      	movs	r1, #15
   1cd2a:	4648      	mov	r0, r9
   1cd2c:	449a      	add	sl, r3
   1cd2e:	f7ff ff5f 	bl	1cbf0 <_Unwind_GetGR>
   1cd32:	4582      	cmp	sl, r0
   1cd34:	d833      	bhi.n	1cd9e <__gnu_unwind_pr_common+0xd6>
   1cd36:	f028 0301 	bic.w	r3, r8, #1
   1cd3a:	449a      	add	sl, r3
   1cd3c:	4550      	cmp	r0, sl
   1cd3e:	bf2c      	ite	cs
   1cd40:	2000      	movcs	r0, #0
   1cd42:	2001      	movcc	r0, #1
   1cd44:	007f      	lsls	r7, r7, #1
   1cd46:	f007 0702 	and.w	r7, r7, #2
   1cd4a:	f008 0801 	and.w	r8, r8, #1
   1cd4e:	ea47 0708 	orr.w	r7, r7, r8
   1cd52:	2f01      	cmp	r7, #1
   1cd54:	d03e      	beq.n	1cdd4 <__gnu_unwind_pr_common+0x10c>
   1cd56:	d335      	bcc.n	1cdc4 <__gnu_unwind_pr_common+0xfc>
   1cd58:	2f02      	cmp	r7, #2
   1cd5a:	d11c      	bne.n	1cd96 <__gnu_unwind_pr_common+0xce>
   1cd5c:	6823      	ldr	r3, [r4, #0]
   1cd5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1cd62:	9202      	str	r2, [sp, #8]
   1cd64:	f1bb 0f00 	cmp.w	fp, #0
   1cd68:	d176      	bne.n	1ce58 <__gnu_unwind_pr_common+0x190>
   1cd6a:	b128      	cbz	r0, 1cd78 <__gnu_unwind_pr_common+0xb0>
   1cd6c:	9903      	ldr	r1, [sp, #12]
   1cd6e:	2900      	cmp	r1, #0
   1cd70:	d07e      	beq.n	1ce70 <__gnu_unwind_pr_common+0x1a8>
   1cd72:	2a00      	cmp	r2, #0
   1cd74:	f000 80a6 	beq.w	1cec4 <__gnu_unwind_pr_common+0x1fc>
   1cd78:	2b00      	cmp	r3, #0
   1cd7a:	db77      	blt.n	1ce6c <__gnu_unwind_pr_common+0x1a4>
   1cd7c:	9b02      	ldr	r3, [sp, #8]
   1cd7e:	3301      	adds	r3, #1
   1cd80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1cd84:	e7c2      	b.n	1cd0c <__gnu_unwind_pr_common+0x44>
   1cd86:	2300      	movs	r3, #0
   1cd88:	9301      	str	r3, [sp, #4]
   1cd8a:	2e02      	cmp	r6, #2
   1cd8c:	dd3e      	ble.n	1ce0c <__gnu_unwind_pr_common+0x144>
   1cd8e:	f7ff fe17 	bl	1c9c0 <__gnu_unwind_24bit.isra.1>
   1cd92:	2800      	cmp	r0, #0
   1cd94:	d040      	beq.n	1ce18 <__gnu_unwind_pr_common+0x150>
   1cd96:	2009      	movs	r0, #9
   1cd98:	b00b      	add	sp, #44	; 0x2c
   1cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd9e:	2000      	movs	r0, #0
   1cda0:	e7d0      	b.n	1cd44 <__gnu_unwind_pr_common+0x7c>
   1cda2:	6867      	ldr	r7, [r4, #4]
   1cda4:	3408      	adds	r4, #8
   1cda6:	e7bc      	b.n	1cd22 <__gnu_unwind_pr_common+0x5a>
   1cda8:	2b02      	cmp	r3, #2
   1cdaa:	dca3      	bgt.n	1ccf4 <__gnu_unwind_pr_common+0x2c>
   1cdac:	0c0b      	lsrs	r3, r1, #16
   1cdae:	b2da      	uxtb	r2, r3
   1cdb0:	0409      	lsls	r1, r1, #16
   1cdb2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1cdb6:	2302      	movs	r3, #2
   1cdb8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1cdbc:	9107      	str	r1, [sp, #28]
   1cdbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cdc2:	e797      	b.n	1ccf4 <__gnu_unwind_pr_common+0x2c>
   1cdc4:	f1bb 0f00 	cmp.w	fp, #0
   1cdc8:	d002      	beq.n	1cdd0 <__gnu_unwind_pr_common+0x108>
   1cdca:	2800      	cmp	r0, #0
   1cdcc:	f040 80bd 	bne.w	1cf4a <__gnu_unwind_pr_common+0x282>
   1cdd0:	3404      	adds	r4, #4
   1cdd2:	e79b      	b.n	1cd0c <__gnu_unwind_pr_common+0x44>
   1cdd4:	f1bb 0f00 	cmp.w	fp, #0
   1cdd8:	d125      	bne.n	1ce26 <__gnu_unwind_pr_common+0x15e>
   1cdda:	b1a8      	cbz	r0, 1ce08 <__gnu_unwind_pr_common+0x140>
   1cddc:	e894 000c 	ldmia.w	r4, {r2, r3}
   1cde0:	1c99      	adds	r1, r3, #2
   1cde2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1cde6:	d0d6      	beq.n	1cd96 <__gnu_unwind_pr_common+0xce>
   1cde8:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1cdec:	3301      	adds	r3, #1
   1cdee:	9106      	str	r1, [sp, #24]
   1cdf0:	f000 80a3 	beq.w	1cf3a <__gnu_unwind_pr_common+0x272>
   1cdf4:	1d20      	adds	r0, r4, #4
   1cdf6:	f7ff fddd 	bl	1c9b4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1cdfa:	ab06      	add	r3, sp, #24
   1cdfc:	4601      	mov	r1, r0
   1cdfe:	4628      	mov	r0, r5
   1ce00:	f7f6 fe00 	bl	13a04 <__cxa_type_match>
   1ce04:	2800      	cmp	r0, #0
   1ce06:	d177      	bne.n	1cef8 <__gnu_unwind_pr_common+0x230>
   1ce08:	3408      	adds	r4, #8
   1ce0a:	e77f      	b.n	1cd0c <__gnu_unwind_pr_common+0x44>
   1ce0c:	a907      	add	r1, sp, #28
   1ce0e:	4648      	mov	r0, r9
   1ce10:	f000 faee 	bl	1d3f0 <__gnu_unwind_execute>
   1ce14:	2800      	cmp	r0, #0
   1ce16:	d1be      	bne.n	1cd96 <__gnu_unwind_pr_common+0xce>
   1ce18:	9b01      	ldr	r3, [sp, #4]
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	d15c      	bne.n	1ced8 <__gnu_unwind_pr_common+0x210>
   1ce1e:	2008      	movs	r0, #8
   1ce20:	b00b      	add	sp, #44	; 0x2c
   1ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce26:	210d      	movs	r1, #13
   1ce28:	4648      	mov	r0, r9
   1ce2a:	6a2f      	ldr	r7, [r5, #32]
   1ce2c:	f7ff fee0 	bl	1cbf0 <_Unwind_GetGR>
   1ce30:	4287      	cmp	r7, r0
   1ce32:	d1e9      	bne.n	1ce08 <__gnu_unwind_pr_common+0x140>
   1ce34:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ce36:	429c      	cmp	r4, r3
   1ce38:	d1e6      	bne.n	1ce08 <__gnu_unwind_pr_common+0x140>
   1ce3a:	4620      	mov	r0, r4
   1ce3c:	f7ff fcf0 	bl	1c820 <selfrel_offset31>
   1ce40:	210f      	movs	r1, #15
   1ce42:	4602      	mov	r2, r0
   1ce44:	4648      	mov	r0, r9
   1ce46:	f7ff fef9 	bl	1cc3c <_Unwind_SetGR>
   1ce4a:	4648      	mov	r0, r9
   1ce4c:	462a      	mov	r2, r5
   1ce4e:	2100      	movs	r1, #0
   1ce50:	f7ff fef4 	bl	1cc3c <_Unwind_SetGR>
   1ce54:	2007      	movs	r0, #7
   1ce56:	e79f      	b.n	1cd98 <__gnu_unwind_pr_common+0xd0>
   1ce58:	210d      	movs	r1, #13
   1ce5a:	4648      	mov	r0, r9
   1ce5c:	6a2f      	ldr	r7, [r5, #32]
   1ce5e:	f7ff fec7 	bl	1cbf0 <_Unwind_GetGR>
   1ce62:	4287      	cmp	r7, r0
   1ce64:	d058      	beq.n	1cf18 <__gnu_unwind_pr_common+0x250>
   1ce66:	6823      	ldr	r3, [r4, #0]
   1ce68:	2b00      	cmp	r3, #0
   1ce6a:	da87      	bge.n	1cd7c <__gnu_unwind_pr_common+0xb4>
   1ce6c:	3404      	adds	r4, #4
   1ce6e:	e785      	b.n	1cd7c <__gnu_unwind_pr_common+0xb4>
   1ce70:	9b02      	ldr	r3, [sp, #8]
   1ce72:	b33b      	cbz	r3, 1cec4 <__gnu_unwind_pr_common+0x1fc>
   1ce74:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1ce78:	1d27      	adds	r7, r4, #4
   1ce7a:	f8cd b010 	str.w	fp, [sp, #16]
   1ce7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1ce82:	f8dd a008 	ldr.w	sl, [sp, #8]
   1ce86:	9605      	str	r6, [sp, #20]
   1ce88:	46a3      	mov	fp, r4
   1ce8a:	461c      	mov	r4, r3
   1ce8c:	e002      	b.n	1ce94 <__gnu_unwind_pr_common+0x1cc>
   1ce8e:	45b2      	cmp	sl, r6
   1ce90:	46b0      	mov	r8, r6
   1ce92:	d016      	beq.n	1cec2 <__gnu_unwind_pr_common+0x1fa>
   1ce94:	4638      	mov	r0, r7
   1ce96:	9406      	str	r4, [sp, #24]
   1ce98:	f7ff fd8c 	bl	1c9b4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1ce9c:	ab06      	add	r3, sp, #24
   1ce9e:	4601      	mov	r1, r0
   1cea0:	2200      	movs	r2, #0
   1cea2:	4628      	mov	r0, r5
   1cea4:	f7f6 fdae 	bl	13a04 <__cxa_type_match>
   1cea8:	f108 0601 	add.w	r6, r8, #1
   1ceac:	3704      	adds	r7, #4
   1ceae:	2800      	cmp	r0, #0
   1ceb0:	d0ed      	beq.n	1ce8e <__gnu_unwind_pr_common+0x1c6>
   1ceb2:	9b02      	ldr	r3, [sp, #8]
   1ceb4:	9e05      	ldr	r6, [sp, #20]
   1ceb6:	4543      	cmp	r3, r8
   1ceb8:	465c      	mov	r4, fp
   1ceba:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cebe:	d1d2      	bne.n	1ce66 <__gnu_unwind_pr_common+0x19e>
   1cec0:	e000      	b.n	1cec4 <__gnu_unwind_pr_common+0x1fc>
   1cec2:	465c      	mov	r4, fp
   1cec4:	4648      	mov	r0, r9
   1cec6:	210d      	movs	r1, #13
   1cec8:	f7ff fe92 	bl	1cbf0 <_Unwind_GetGR>
   1cecc:	9b06      	ldr	r3, [sp, #24]
   1cece:	6228      	str	r0, [r5, #32]
   1ced0:	62ac      	str	r4, [r5, #40]	; 0x28
   1ced2:	626b      	str	r3, [r5, #36]	; 0x24
   1ced4:	2006      	movs	r0, #6
   1ced6:	e75f      	b.n	1cd98 <__gnu_unwind_pr_common+0xd0>
   1ced8:	210f      	movs	r1, #15
   1ceda:	4648      	mov	r0, r9
   1cedc:	f7ff fe88 	bl	1cbf0 <_Unwind_GetGR>
   1cee0:	210e      	movs	r1, #14
   1cee2:	4602      	mov	r2, r0
   1cee4:	4648      	mov	r0, r9
   1cee6:	f7ff fea9 	bl	1cc3c <_Unwind_SetGR>
   1ceea:	4648      	mov	r0, r9
   1ceec:	4a29      	ldr	r2, [pc, #164]	; (1cf94 <__gnu_unwind_pr_common+0x2cc>)
   1ceee:	210f      	movs	r1, #15
   1cef0:	f7ff fea4 	bl	1cc3c <_Unwind_SetGR>
   1cef4:	2007      	movs	r0, #7
   1cef6:	e74f      	b.n	1cd98 <__gnu_unwind_pr_common+0xd0>
   1cef8:	4607      	mov	r7, r0
   1cefa:	210d      	movs	r1, #13
   1cefc:	4648      	mov	r0, r9
   1cefe:	f7ff fe77 	bl	1cbf0 <_Unwind_GetGR>
   1cf02:	2f02      	cmp	r7, #2
   1cf04:	6228      	str	r0, [r5, #32]
   1cf06:	d11d      	bne.n	1cf44 <__gnu_unwind_pr_common+0x27c>
   1cf08:	462b      	mov	r3, r5
   1cf0a:	9a06      	ldr	r2, [sp, #24]
   1cf0c:	f843 2f2c 	str.w	r2, [r3, #44]!
   1cf10:	626b      	str	r3, [r5, #36]	; 0x24
   1cf12:	62ac      	str	r4, [r5, #40]	; 0x28
   1cf14:	2006      	movs	r0, #6
   1cf16:	e73f      	b.n	1cd98 <__gnu_unwind_pr_common+0xd0>
   1cf18:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cf1a:	429c      	cmp	r4, r3
   1cf1c:	d1a3      	bne.n	1ce66 <__gnu_unwind_pr_common+0x19e>
   1cf1e:	2204      	movs	r2, #4
   1cf20:	2700      	movs	r7, #0
   1cf22:	18a3      	adds	r3, r4, r2
   1cf24:	9902      	ldr	r1, [sp, #8]
   1cf26:	62a9      	str	r1, [r5, #40]	; 0x28
   1cf28:	62ef      	str	r7, [r5, #44]	; 0x2c
   1cf2a:	632a      	str	r2, [r5, #48]	; 0x30
   1cf2c:	636b      	str	r3, [r5, #52]	; 0x34
   1cf2e:	6823      	ldr	r3, [r4, #0]
   1cf30:	42bb      	cmp	r3, r7
   1cf32:	db1d      	blt.n	1cf70 <__gnu_unwind_pr_common+0x2a8>
   1cf34:	2301      	movs	r3, #1
   1cf36:	9301      	str	r3, [sp, #4]
   1cf38:	e720      	b.n	1cd7c <__gnu_unwind_pr_common+0xb4>
   1cf3a:	4648      	mov	r0, r9
   1cf3c:	210d      	movs	r1, #13
   1cf3e:	f7ff fe57 	bl	1cbf0 <_Unwind_GetGR>
   1cf42:	6228      	str	r0, [r5, #32]
   1cf44:	9b06      	ldr	r3, [sp, #24]
   1cf46:	626b      	str	r3, [r5, #36]	; 0x24
   1cf48:	e7e3      	b.n	1cf12 <__gnu_unwind_pr_common+0x24a>
   1cf4a:	4620      	mov	r0, r4
   1cf4c:	f7ff fc68 	bl	1c820 <selfrel_offset31>
   1cf50:	3404      	adds	r4, #4
   1cf52:	4606      	mov	r6, r0
   1cf54:	63ac      	str	r4, [r5, #56]	; 0x38
   1cf56:	4628      	mov	r0, r5
   1cf58:	f7f6 fdb0 	bl	13abc <__cxa_begin_cleanup>
   1cf5c:	2800      	cmp	r0, #0
   1cf5e:	f43f af1a 	beq.w	1cd96 <__gnu_unwind_pr_common+0xce>
   1cf62:	4648      	mov	r0, r9
   1cf64:	4632      	mov	r2, r6
   1cf66:	210f      	movs	r1, #15
   1cf68:	f7ff fe68 	bl	1cc3c <_Unwind_SetGR>
   1cf6c:	2007      	movs	r0, #7
   1cf6e:	e713      	b.n	1cd98 <__gnu_unwind_pr_common+0xd0>
   1cf70:	4608      	mov	r0, r1
   1cf72:	3001      	adds	r0, #1
   1cf74:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1cf78:	f7ff fc52 	bl	1c820 <selfrel_offset31>
   1cf7c:	210f      	movs	r1, #15
   1cf7e:	4602      	mov	r2, r0
   1cf80:	4648      	mov	r0, r9
   1cf82:	f7ff fe5b 	bl	1cc3c <_Unwind_SetGR>
   1cf86:	4648      	mov	r0, r9
   1cf88:	462a      	mov	r2, r5
   1cf8a:	4639      	mov	r1, r7
   1cf8c:	f7ff fe56 	bl	1cc3c <_Unwind_SetGR>
   1cf90:	2007      	movs	r0, #7
   1cf92:	e701      	b.n	1cd98 <__gnu_unwind_pr_common+0xd0>
   1cf94:	00013bed 	.word	0x00013bed

0001cf98 <__aeabi_unwind_cpp_pr0>:
   1cf98:	2300      	movs	r3, #0
   1cf9a:	e695      	b.n	1ccc8 <__gnu_unwind_pr_common>

0001cf9c <__aeabi_unwind_cpp_pr1>:
   1cf9c:	2301      	movs	r3, #1
   1cf9e:	e693      	b.n	1ccc8 <__gnu_unwind_pr_common>

0001cfa0 <__aeabi_unwind_cpp_pr2>:
   1cfa0:	2302      	movs	r3, #2
   1cfa2:	e691      	b.n	1ccc8 <__gnu_unwind_pr_common>

0001cfa4 <_Unwind_VRS_Pop>:
   1cfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfa6:	4604      	mov	r4, r0
   1cfa8:	b0c5      	sub	sp, #276	; 0x114
   1cfaa:	2904      	cmp	r1, #4
   1cfac:	d80d      	bhi.n	1cfca <_Unwind_VRS_Pop+0x26>
   1cfae:	e8df f001 	tbb	[pc, r1]
   1cfb2:	0353      	.short	0x0353
   1cfb4:	310c      	.short	0x310c
   1cfb6:	0f          	.byte	0x0f
   1cfb7:	00          	.byte	0x00
   1cfb8:	2b01      	cmp	r3, #1
   1cfba:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1cfbe:	b295      	uxth	r5, r2
   1cfc0:	d162      	bne.n	1d088 <_Unwind_VRS_Pop+0xe4>
   1cfc2:	1972      	adds	r2, r6, r5
   1cfc4:	2a10      	cmp	r2, #16
   1cfc6:	f240 809b 	bls.w	1d100 <_Unwind_VRS_Pop+0x15c>
   1cfca:	2002      	movs	r0, #2
   1cfcc:	b045      	add	sp, #276	; 0x114
   1cfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cfd0:	2b00      	cmp	r3, #0
   1cfd2:	d1fa      	bne.n	1cfca <_Unwind_VRS_Pop+0x26>
   1cfd4:	2a10      	cmp	r2, #16
   1cfd6:	d8f8      	bhi.n	1cfca <_Unwind_VRS_Pop+0x26>
   1cfd8:	6823      	ldr	r3, [r4, #0]
   1cfda:	06d8      	lsls	r0, r3, #27
   1cfdc:	f100 80c6 	bmi.w	1d16c <_Unwind_VRS_Pop+0x1c8>
   1cfe0:	ae22      	add	r6, sp, #136	; 0x88
   1cfe2:	4630      	mov	r0, r6
   1cfe4:	9201      	str	r2, [sp, #4]
   1cfe6:	f000 f973 	bl	1d2d0 <__gnu_Unwind_Save_WMMXC>
   1cfea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cfec:	9a01      	ldr	r2, [sp, #4]
   1cfee:	2300      	movs	r3, #0
   1cff0:	2501      	movs	r5, #1
   1cff2:	fa05 f103 	lsl.w	r1, r5, r3
   1cff6:	4211      	tst	r1, r2
   1cff8:	d003      	beq.n	1d002 <_Unwind_VRS_Pop+0x5e>
   1cffa:	6801      	ldr	r1, [r0, #0]
   1cffc:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1d000:	3004      	adds	r0, #4
   1d002:	3301      	adds	r3, #1
   1d004:	2b04      	cmp	r3, #4
   1d006:	d1f4      	bne.n	1cff2 <_Unwind_VRS_Pop+0x4e>
   1d008:	63a0      	str	r0, [r4, #56]	; 0x38
   1d00a:	4630      	mov	r0, r6
   1d00c:	f000 f956 	bl	1d2bc <__gnu_Unwind_Restore_WMMXC>
   1d010:	2000      	movs	r0, #0
   1d012:	e7db      	b.n	1cfcc <_Unwind_VRS_Pop+0x28>
   1d014:	2b03      	cmp	r3, #3
   1d016:	d1d8      	bne.n	1cfca <_Unwind_VRS_Pop+0x26>
   1d018:	0c15      	lsrs	r5, r2, #16
   1d01a:	b297      	uxth	r7, r2
   1d01c:	19eb      	adds	r3, r5, r7
   1d01e:	2b10      	cmp	r3, #16
   1d020:	d8d3      	bhi.n	1cfca <_Unwind_VRS_Pop+0x26>
   1d022:	6823      	ldr	r3, [r4, #0]
   1d024:	071e      	lsls	r6, r3, #28
   1d026:	f100 80b5 	bmi.w	1d194 <_Unwind_VRS_Pop+0x1f0>
   1d02a:	ae22      	add	r6, sp, #136	; 0x88
   1d02c:	4630      	mov	r0, r6
   1d02e:	f000 f923 	bl	1d278 <__gnu_Unwind_Save_WMMXD>
   1d032:	00ed      	lsls	r5, r5, #3
   1d034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d036:	b14f      	cbz	r7, 1d04c <_Unwind_VRS_Pop+0xa8>
   1d038:	3d04      	subs	r5, #4
   1d03a:	1971      	adds	r1, r6, r5
   1d03c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1d040:	f853 2b04 	ldr.w	r2, [r3], #4
   1d044:	f841 2f04 	str.w	r2, [r1, #4]!
   1d048:	4283      	cmp	r3, r0
   1d04a:	d1f9      	bne.n	1d040 <_Unwind_VRS_Pop+0x9c>
   1d04c:	4630      	mov	r0, r6
   1d04e:	63a3      	str	r3, [r4, #56]	; 0x38
   1d050:	f000 f8f0 	bl	1d234 <__gnu_Unwind_Restore_WMMXD>
   1d054:	2000      	movs	r0, #0
   1d056:	e7b9      	b.n	1cfcc <_Unwind_VRS_Pop+0x28>
   1d058:	2b00      	cmp	r3, #0
   1d05a:	d1b6      	bne.n	1cfca <_Unwind_VRS_Pop+0x26>
   1d05c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1d05e:	b297      	uxth	r7, r2
   1d060:	1d20      	adds	r0, r4, #4
   1d062:	2601      	movs	r6, #1
   1d064:	fa06 f103 	lsl.w	r1, r6, r3
   1d068:	4239      	tst	r1, r7
   1d06a:	f103 0301 	add.w	r3, r3, #1
   1d06e:	d002      	beq.n	1d076 <_Unwind_VRS_Pop+0xd2>
   1d070:	6829      	ldr	r1, [r5, #0]
   1d072:	6001      	str	r1, [r0, #0]
   1d074:	3504      	adds	r5, #4
   1d076:	2b10      	cmp	r3, #16
   1d078:	f100 0004 	add.w	r0, r0, #4
   1d07c:	d1f2      	bne.n	1d064 <_Unwind_VRS_Pop+0xc0>
   1d07e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1d082:	d13b      	bne.n	1d0fc <_Unwind_VRS_Pop+0x158>
   1d084:	63a5      	str	r5, [r4, #56]	; 0x38
   1d086:	e7a1      	b.n	1cfcc <_Unwind_VRS_Pop+0x28>
   1d088:	2b05      	cmp	r3, #5
   1d08a:	d19e      	bne.n	1cfca <_Unwind_VRS_Pop+0x26>
   1d08c:	1977      	adds	r7, r6, r5
   1d08e:	2f20      	cmp	r7, #32
   1d090:	d89b      	bhi.n	1cfca <_Unwind_VRS_Pop+0x26>
   1d092:	2e0f      	cmp	r6, #15
   1d094:	d966      	bls.n	1d164 <_Unwind_VRS_Pop+0x1c0>
   1d096:	462f      	mov	r7, r5
   1d098:	2d00      	cmp	r5, #0
   1d09a:	d13a      	bne.n	1d112 <_Unwind_VRS_Pop+0x16e>
   1d09c:	462a      	mov	r2, r5
   1d09e:	2700      	movs	r7, #0
   1d0a0:	2a00      	cmp	r2, #0
   1d0a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d0a4:	dd72      	ble.n	1d18c <_Unwind_VRS_Pop+0x1e8>
   1d0a6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1d0aa:	4601      	mov	r1, r0
   1d0ac:	a844      	add	r0, sp, #272	; 0x110
   1d0ae:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d0b2:	388c      	subs	r0, #140	; 0x8c
   1d0b4:	f851 5b04 	ldr.w	r5, [r1], #4
   1d0b8:	f840 5f04 	str.w	r5, [r0, #4]!
   1d0bc:	4291      	cmp	r1, r2
   1d0be:	d1f9      	bne.n	1d0b4 <_Unwind_VRS_Pop+0x110>
   1d0c0:	4608      	mov	r0, r1
   1d0c2:	b197      	cbz	r7, 1d0ea <_Unwind_VRS_Pop+0x146>
   1d0c4:	2e10      	cmp	r6, #16
   1d0c6:	4632      	mov	r2, r6
   1d0c8:	a944      	add	r1, sp, #272	; 0x110
   1d0ca:	bf38      	it	cc
   1d0cc:	2210      	movcc	r2, #16
   1d0ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1d0d2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1d0d6:	0079      	lsls	r1, r7, #1
   1d0d8:	3a04      	subs	r2, #4
   1d0da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d0de:	f850 5b04 	ldr.w	r5, [r0], #4
   1d0e2:	f842 5f04 	str.w	r5, [r2, #4]!
   1d0e6:	4288      	cmp	r0, r1
   1d0e8:	d1f9      	bne.n	1d0de <_Unwind_VRS_Pop+0x13a>
   1d0ea:	2b01      	cmp	r3, #1
   1d0ec:	d048      	beq.n	1d180 <_Unwind_VRS_Pop+0x1dc>
   1d0ee:	2e0f      	cmp	r6, #15
   1d0f0:	63a1      	str	r1, [r4, #56]	; 0x38
   1d0f2:	d933      	bls.n	1d15c <_Unwind_VRS_Pop+0x1b8>
   1d0f4:	b117      	cbz	r7, 1d0fc <_Unwind_VRS_Pop+0x158>
   1d0f6:	a802      	add	r0, sp, #8
   1d0f8:	f000 f894 	bl	1d224 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	e765      	b.n	1cfcc <_Unwind_VRS_Pop+0x28>
   1d100:	2e0f      	cmp	r6, #15
   1d102:	f63f af62 	bhi.w	1cfca <_Unwind_VRS_Pop+0x26>
   1d106:	2700      	movs	r7, #0
   1d108:	6822      	ldr	r2, [r4, #0]
   1d10a:	07d1      	lsls	r1, r2, #31
   1d10c:	d417      	bmi.n	1d13e <_Unwind_VRS_Pop+0x19a>
   1d10e:	2f00      	cmp	r7, #0
   1d110:	d060      	beq.n	1d1d4 <_Unwind_VRS_Pop+0x230>
   1d112:	6822      	ldr	r2, [r4, #0]
   1d114:	0751      	lsls	r1, r2, #29
   1d116:	d445      	bmi.n	1d1a4 <_Unwind_VRS_Pop+0x200>
   1d118:	2b01      	cmp	r3, #1
   1d11a:	d04d      	beq.n	1d1b8 <_Unwind_VRS_Pop+0x214>
   1d11c:	2e0f      	cmp	r6, #15
   1d11e:	d806      	bhi.n	1d12e <_Unwind_VRS_Pop+0x18a>
   1d120:	a822      	add	r0, sp, #136	; 0x88
   1d122:	9301      	str	r3, [sp, #4]
   1d124:	f000 f87a 	bl	1d21c <__gnu_Unwind_Save_VFP_D>
   1d128:	9b01      	ldr	r3, [sp, #4]
   1d12a:	2f00      	cmp	r7, #0
   1d12c:	d0b6      	beq.n	1d09c <_Unwind_VRS_Pop+0xf8>
   1d12e:	a802      	add	r0, sp, #8
   1d130:	9301      	str	r3, [sp, #4]
   1d132:	f000 f87b 	bl	1d22c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d136:	9b01      	ldr	r3, [sp, #4]
   1d138:	f1c6 0210 	rsb	r2, r6, #16
   1d13c:	e7b0      	b.n	1d0a0 <_Unwind_VRS_Pop+0xfc>
   1d13e:	f022 0101 	bic.w	r1, r2, #1
   1d142:	2b05      	cmp	r3, #5
   1d144:	6021      	str	r1, [r4, #0]
   1d146:	9301      	str	r3, [sp, #4]
   1d148:	4620      	mov	r0, r4
   1d14a:	d03b      	beq.n	1d1c4 <_Unwind_VRS_Pop+0x220>
   1d14c:	f022 0203 	bic.w	r2, r2, #3
   1d150:	f840 2b48 	str.w	r2, [r0], #72
   1d154:	f000 f85a 	bl	1d20c <__gnu_Unwind_Save_VFP>
   1d158:	9b01      	ldr	r3, [sp, #4]
   1d15a:	e7d8      	b.n	1d10e <_Unwind_VRS_Pop+0x16a>
   1d15c:	a822      	add	r0, sp, #136	; 0x88
   1d15e:	f000 f859 	bl	1d214 <__gnu_Unwind_Restore_VFP_D>
   1d162:	e7c7      	b.n	1d0f4 <_Unwind_VRS_Pop+0x150>
   1d164:	2f10      	cmp	r7, #16
   1d166:	d9ce      	bls.n	1d106 <_Unwind_VRS_Pop+0x162>
   1d168:	3f10      	subs	r7, #16
   1d16a:	e7cd      	b.n	1d108 <_Unwind_VRS_Pop+0x164>
   1d16c:	f023 0310 	bic.w	r3, r3, #16
   1d170:	6023      	str	r3, [r4, #0]
   1d172:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d176:	9201      	str	r2, [sp, #4]
   1d178:	f000 f8aa 	bl	1d2d0 <__gnu_Unwind_Save_WMMXC>
   1d17c:	9a01      	ldr	r2, [sp, #4]
   1d17e:	e72f      	b.n	1cfe0 <_Unwind_VRS_Pop+0x3c>
   1d180:	3104      	adds	r1, #4
   1d182:	63a1      	str	r1, [r4, #56]	; 0x38
   1d184:	a822      	add	r0, sp, #136	; 0x88
   1d186:	f000 f83d 	bl	1d204 <__gnu_Unwind_Restore_VFP>
   1d18a:	e7b7      	b.n	1d0fc <_Unwind_VRS_Pop+0x158>
   1d18c:	2f00      	cmp	r7, #0
   1d18e:	d199      	bne.n	1d0c4 <_Unwind_VRS_Pop+0x120>
   1d190:	4601      	mov	r1, r0
   1d192:	e7aa      	b.n	1d0ea <_Unwind_VRS_Pop+0x146>
   1d194:	f023 0308 	bic.w	r3, r3, #8
   1d198:	6023      	str	r3, [r4, #0]
   1d19a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d19e:	f000 f86b 	bl	1d278 <__gnu_Unwind_Save_WMMXD>
   1d1a2:	e742      	b.n	1d02a <_Unwind_VRS_Pop+0x86>
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	f022 0204 	bic.w	r2, r2, #4
   1d1aa:	f840 2bd0 	str.w	r2, [r0], #208
   1d1ae:	9301      	str	r3, [sp, #4]
   1d1b0:	f000 f83c 	bl	1d22c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d1b4:	9b01      	ldr	r3, [sp, #4]
   1d1b6:	e7af      	b.n	1d118 <_Unwind_VRS_Pop+0x174>
   1d1b8:	a822      	add	r0, sp, #136	; 0x88
   1d1ba:	9301      	str	r3, [sp, #4]
   1d1bc:	f000 f826 	bl	1d20c <__gnu_Unwind_Save_VFP>
   1d1c0:	9b01      	ldr	r3, [sp, #4]
   1d1c2:	e7b9      	b.n	1d138 <_Unwind_VRS_Pop+0x194>
   1d1c4:	f041 0102 	orr.w	r1, r1, #2
   1d1c8:	f840 1b48 	str.w	r1, [r0], #72
   1d1cc:	f000 f826 	bl	1d21c <__gnu_Unwind_Save_VFP_D>
   1d1d0:	9b01      	ldr	r3, [sp, #4]
   1d1d2:	e79c      	b.n	1d10e <_Unwind_VRS_Pop+0x16a>
   1d1d4:	2b01      	cmp	r3, #1
   1d1d6:	d003      	beq.n	1d1e0 <_Unwind_VRS_Pop+0x23c>
   1d1d8:	2e0f      	cmp	r6, #15
   1d1da:	f63f af5f 	bhi.w	1d09c <_Unwind_VRS_Pop+0xf8>
   1d1de:	e79f      	b.n	1d120 <_Unwind_VRS_Pop+0x17c>
   1d1e0:	a822      	add	r0, sp, #136	; 0x88
   1d1e2:	9301      	str	r3, [sp, #4]
   1d1e4:	f000 f812 	bl	1d20c <__gnu_Unwind_Save_VFP>
   1d1e8:	9b01      	ldr	r3, [sp, #4]
   1d1ea:	e757      	b.n	1d09c <_Unwind_VRS_Pop+0xf8>

0001d1ec <__restore_core_regs>:
   1d1ec:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d1f0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d1f4:	469c      	mov	ip, r3
   1d1f6:	46a6      	mov	lr, r4
   1d1f8:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d1fc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d200:	46e5      	mov	sp, ip
   1d202:	bd00      	pop	{pc}

0001d204 <__gnu_Unwind_Restore_VFP>:
   1d204:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d208:	4770      	bx	lr
   1d20a:	bf00      	nop

0001d20c <__gnu_Unwind_Save_VFP>:
   1d20c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d210:	4770      	bx	lr
   1d212:	bf00      	nop

0001d214 <__gnu_Unwind_Restore_VFP_D>:
   1d214:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d218:	4770      	bx	lr
   1d21a:	bf00      	nop

0001d21c <__gnu_Unwind_Save_VFP_D>:
   1d21c:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d220:	4770      	bx	lr
   1d222:	bf00      	nop

0001d224 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d224:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d228:	4770      	bx	lr
   1d22a:	bf00      	nop

0001d22c <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d22c:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d230:	4770      	bx	lr
   1d232:	bf00      	nop

0001d234 <__gnu_Unwind_Restore_WMMXD>:
   1d234:	ecf0 0102 	ldfe	f0, [r0], #8
   1d238:	ecf0 1102 	ldfe	f1, [r0], #8
   1d23c:	ecf0 2102 	ldfe	f2, [r0], #8
   1d240:	ecf0 3102 	ldfe	f3, [r0], #8
   1d244:	ecf0 4102 	ldfe	f4, [r0], #8
   1d248:	ecf0 5102 	ldfe	f5, [r0], #8
   1d24c:	ecf0 6102 	ldfe	f6, [r0], #8
   1d250:	ecf0 7102 	ldfe	f7, [r0], #8
   1d254:	ecf0 8102 	ldfp	f0, [r0], #8
   1d258:	ecf0 9102 	ldfp	f1, [r0], #8
   1d25c:	ecf0 a102 	ldfp	f2, [r0], #8
   1d260:	ecf0 b102 	ldfp	f3, [r0], #8
   1d264:	ecf0 c102 	ldfp	f4, [r0], #8
   1d268:	ecf0 d102 	ldfp	f5, [r0], #8
   1d26c:	ecf0 e102 	ldfp	f6, [r0], #8
   1d270:	ecf0 f102 	ldfp	f7, [r0], #8
   1d274:	4770      	bx	lr
   1d276:	bf00      	nop

0001d278 <__gnu_Unwind_Save_WMMXD>:
   1d278:	ece0 0102 	stfe	f0, [r0], #8
   1d27c:	ece0 1102 	stfe	f1, [r0], #8
   1d280:	ece0 2102 	stfe	f2, [r0], #8
   1d284:	ece0 3102 	stfe	f3, [r0], #8
   1d288:	ece0 4102 	stfe	f4, [r0], #8
   1d28c:	ece0 5102 	stfe	f5, [r0], #8
   1d290:	ece0 6102 	stfe	f6, [r0], #8
   1d294:	ece0 7102 	stfe	f7, [r0], #8
   1d298:	ece0 8102 	stfp	f0, [r0], #8
   1d29c:	ece0 9102 	stfp	f1, [r0], #8
   1d2a0:	ece0 a102 	stfp	f2, [r0], #8
   1d2a4:	ece0 b102 	stfp	f3, [r0], #8
   1d2a8:	ece0 c102 	stfp	f4, [r0], #8
   1d2ac:	ece0 d102 	stfp	f5, [r0], #8
   1d2b0:	ece0 e102 	stfp	f6, [r0], #8
   1d2b4:	ece0 f102 	stfp	f7, [r0], #8
   1d2b8:	4770      	bx	lr
   1d2ba:	bf00      	nop

0001d2bc <__gnu_Unwind_Restore_WMMXC>:
   1d2bc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d2c0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d2c4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d2c8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d2cc:	4770      	bx	lr
   1d2ce:	bf00      	nop

0001d2d0 <__gnu_Unwind_Save_WMMXC>:
   1d2d0:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d2d4:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d2d8:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d2dc:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d2e0:	4770      	bx	lr
   1d2e2:	bf00      	nop

0001d2e4 <_Unwind_RaiseException>:
   1d2e4:	46ec      	mov	ip, sp
   1d2e6:	b500      	push	{lr}
   1d2e8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d2ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d2f0:	f04f 0300 	mov.w	r3, #0
   1d2f4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d2f8:	a901      	add	r1, sp, #4
   1d2fa:	f7ff fbf3 	bl	1cae4 <__gnu_Unwind_RaiseException>
   1d2fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d302:	b012      	add	sp, #72	; 0x48
   1d304:	4770      	bx	lr
   1d306:	bf00      	nop

0001d308 <_Unwind_Resume>:
   1d308:	46ec      	mov	ip, sp
   1d30a:	b500      	push	{lr}
   1d30c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d310:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d314:	f04f 0300 	mov.w	r3, #0
   1d318:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d31c:	a901      	add	r1, sp, #4
   1d31e:	f7ff fc1b 	bl	1cb58 <__gnu_Unwind_Resume>
   1d322:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d326:	b012      	add	sp, #72	; 0x48
   1d328:	4770      	bx	lr
   1d32a:	bf00      	nop

0001d32c <_Unwind_Resume_or_Rethrow>:
   1d32c:	46ec      	mov	ip, sp
   1d32e:	b500      	push	{lr}
   1d330:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d334:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d338:	f04f 0300 	mov.w	r3, #0
   1d33c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d340:	a901      	add	r1, sp, #4
   1d342:	f7ff fc2b 	bl	1cb9c <__gnu_Unwind_Resume_or_Rethrow>
   1d346:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d34a:	b012      	add	sp, #72	; 0x48
   1d34c:	4770      	bx	lr
   1d34e:	bf00      	nop

0001d350 <_Unwind_ForcedUnwind>:
   1d350:	46ec      	mov	ip, sp
   1d352:	b500      	push	{lr}
   1d354:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d358:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d35c:	f04f 0300 	mov.w	r3, #0
   1d360:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d364:	ab01      	add	r3, sp, #4
   1d366:	f7ff fbed 	bl	1cb44 <__gnu_Unwind_ForcedUnwind>
   1d36a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d36e:	b012      	add	sp, #72	; 0x48
   1d370:	4770      	bx	lr
   1d372:	bf00      	nop

0001d374 <_Unwind_Backtrace>:
   1d374:	46ec      	mov	ip, sp
   1d376:	b500      	push	{lr}
   1d378:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d37c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d380:	f04f 0300 	mov.w	r3, #0
   1d384:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d388:	aa01      	add	r2, sp, #4
   1d38a:	f7ff fc65 	bl	1cc58 <__gnu_Unwind_Backtrace>
   1d38e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d392:	b012      	add	sp, #72	; 0x48
   1d394:	4770      	bx	lr
   1d396:	bf00      	nop

0001d398 <next_unwind_byte>:
   1d398:	7a02      	ldrb	r2, [r0, #8]
   1d39a:	b91a      	cbnz	r2, 1d3a4 <next_unwind_byte+0xc>
   1d39c:	7a43      	ldrb	r3, [r0, #9]
   1d39e:	b943      	cbnz	r3, 1d3b2 <next_unwind_byte+0x1a>
   1d3a0:	20b0      	movs	r0, #176	; 0xb0
   1d3a2:	4770      	bx	lr
   1d3a4:	6803      	ldr	r3, [r0, #0]
   1d3a6:	3a01      	subs	r2, #1
   1d3a8:	7202      	strb	r2, [r0, #8]
   1d3aa:	021a      	lsls	r2, r3, #8
   1d3ac:	6002      	str	r2, [r0, #0]
   1d3ae:	0e18      	lsrs	r0, r3, #24
   1d3b0:	4770      	bx	lr
   1d3b2:	6842      	ldr	r2, [r0, #4]
   1d3b4:	3b01      	subs	r3, #1
   1d3b6:	b410      	push	{r4}
   1d3b8:	7243      	strb	r3, [r0, #9]
   1d3ba:	6813      	ldr	r3, [r2, #0]
   1d3bc:	2103      	movs	r1, #3
   1d3be:	1d14      	adds	r4, r2, #4
   1d3c0:	7201      	strb	r1, [r0, #8]
   1d3c2:	021a      	lsls	r2, r3, #8
   1d3c4:	6044      	str	r4, [r0, #4]
   1d3c6:	6002      	str	r2, [r0, #0]
   1d3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d3cc:	0e18      	lsrs	r0, r3, #24
   1d3ce:	4770      	bx	lr

0001d3d0 <_Unwind_GetGR.constprop.0>:
   1d3d0:	b500      	push	{lr}
   1d3d2:	b085      	sub	sp, #20
   1d3d4:	aa03      	add	r2, sp, #12
   1d3d6:	2300      	movs	r3, #0
   1d3d8:	9200      	str	r2, [sp, #0]
   1d3da:	4619      	mov	r1, r3
   1d3dc:	220c      	movs	r2, #12
   1d3de:	f7ff fbed 	bl	1cbbc <_Unwind_VRS_Get>
   1d3e2:	9803      	ldr	r0, [sp, #12]
   1d3e4:	b005      	add	sp, #20
   1d3e6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d3ea:	bf00      	nop

0001d3ec <unwind_UCB_from_context>:
   1d3ec:	e7f0      	b.n	1d3d0 <_Unwind_GetGR.constprop.0>
   1d3ee:	bf00      	nop

0001d3f0 <__gnu_unwind_execute>:
   1d3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d3f4:	4606      	mov	r6, r0
   1d3f6:	b085      	sub	sp, #20
   1d3f8:	460f      	mov	r7, r1
   1d3fa:	f04f 0800 	mov.w	r8, #0
   1d3fe:	4638      	mov	r0, r7
   1d400:	f7ff ffca 	bl	1d398 <next_unwind_byte>
   1d404:	28b0      	cmp	r0, #176	; 0xb0
   1d406:	4604      	mov	r4, r0
   1d408:	d023      	beq.n	1d452 <__gnu_unwind_execute+0x62>
   1d40a:	0605      	lsls	r5, r0, #24
   1d40c:	d427      	bmi.n	1d45e <__gnu_unwind_execute+0x6e>
   1d40e:	2300      	movs	r3, #0
   1d410:	f10d 090c 	add.w	r9, sp, #12
   1d414:	4619      	mov	r1, r3
   1d416:	0085      	lsls	r5, r0, #2
   1d418:	220d      	movs	r2, #13
   1d41a:	f8cd 9000 	str.w	r9, [sp]
   1d41e:	4630      	mov	r0, r6
   1d420:	f7ff fbcc 	bl	1cbbc <_Unwind_VRS_Get>
   1d424:	b2ed      	uxtb	r5, r5
   1d426:	9b03      	ldr	r3, [sp, #12]
   1d428:	f8cd 9000 	str.w	r9, [sp]
   1d42c:	0660      	lsls	r0, r4, #25
   1d42e:	f105 0504 	add.w	r5, r5, #4
   1d432:	bf4c      	ite	mi
   1d434:	1b5d      	submi	r5, r3, r5
   1d436:	18ed      	addpl	r5, r5, r3
   1d438:	2300      	movs	r3, #0
   1d43a:	4619      	mov	r1, r3
   1d43c:	220d      	movs	r2, #13
   1d43e:	4630      	mov	r0, r6
   1d440:	9503      	str	r5, [sp, #12]
   1d442:	f7ff fbe1 	bl	1cc08 <_Unwind_VRS_Set>
   1d446:	4638      	mov	r0, r7
   1d448:	f7ff ffa6 	bl	1d398 <next_unwind_byte>
   1d44c:	28b0      	cmp	r0, #176	; 0xb0
   1d44e:	4604      	mov	r4, r0
   1d450:	d1db      	bne.n	1d40a <__gnu_unwind_execute+0x1a>
   1d452:	f1b8 0f00 	cmp.w	r8, #0
   1d456:	f000 8095 	beq.w	1d584 <__gnu_unwind_execute+0x194>
   1d45a:	2000      	movs	r0, #0
   1d45c:	e01c      	b.n	1d498 <__gnu_unwind_execute+0xa8>
   1d45e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d462:	2b80      	cmp	r3, #128	; 0x80
   1d464:	d05d      	beq.n	1d522 <__gnu_unwind_execute+0x132>
   1d466:	2b90      	cmp	r3, #144	; 0x90
   1d468:	d019      	beq.n	1d49e <__gnu_unwind_execute+0xae>
   1d46a:	2ba0      	cmp	r3, #160	; 0xa0
   1d46c:	d02c      	beq.n	1d4c8 <__gnu_unwind_execute+0xd8>
   1d46e:	2bb0      	cmp	r3, #176	; 0xb0
   1d470:	d03f      	beq.n	1d4f2 <__gnu_unwind_execute+0x102>
   1d472:	2bc0      	cmp	r3, #192	; 0xc0
   1d474:	d06c      	beq.n	1d550 <__gnu_unwind_execute+0x160>
   1d476:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d47a:	2bd0      	cmp	r3, #208	; 0xd0
   1d47c:	d10b      	bne.n	1d496 <__gnu_unwind_execute+0xa6>
   1d47e:	f000 0207 	and.w	r2, r0, #7
   1d482:	3201      	adds	r2, #1
   1d484:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d488:	2305      	movs	r3, #5
   1d48a:	2101      	movs	r1, #1
   1d48c:	4630      	mov	r0, r6
   1d48e:	f7ff fd89 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d492:	2800      	cmp	r0, #0
   1d494:	d0b3      	beq.n	1d3fe <__gnu_unwind_execute+0xe>
   1d496:	2009      	movs	r0, #9
   1d498:	b005      	add	sp, #20
   1d49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d49e:	f000 030d 	and.w	r3, r0, #13
   1d4a2:	2b0d      	cmp	r3, #13
   1d4a4:	d0f7      	beq.n	1d496 <__gnu_unwind_execute+0xa6>
   1d4a6:	ad03      	add	r5, sp, #12
   1d4a8:	2300      	movs	r3, #0
   1d4aa:	f000 020f 	and.w	r2, r0, #15
   1d4ae:	4619      	mov	r1, r3
   1d4b0:	9500      	str	r5, [sp, #0]
   1d4b2:	4630      	mov	r0, r6
   1d4b4:	f7ff fb82 	bl	1cbbc <_Unwind_VRS_Get>
   1d4b8:	2300      	movs	r3, #0
   1d4ba:	9500      	str	r5, [sp, #0]
   1d4bc:	4619      	mov	r1, r3
   1d4be:	220d      	movs	r2, #13
   1d4c0:	4630      	mov	r0, r6
   1d4c2:	f7ff fba1 	bl	1cc08 <_Unwind_VRS_Set>
   1d4c6:	e79a      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d4c8:	43c2      	mvns	r2, r0
   1d4ca:	f002 0307 	and.w	r3, r2, #7
   1d4ce:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d4d2:	411a      	asrs	r2, r3
   1d4d4:	0701      	lsls	r1, r0, #28
   1d4d6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d4da:	f04f 0300 	mov.w	r3, #0
   1d4de:	bf48      	it	mi
   1d4e0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d4e4:	4619      	mov	r1, r3
   1d4e6:	4630      	mov	r0, r6
   1d4e8:	f7ff fd5c 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d4ec:	2800      	cmp	r0, #0
   1d4ee:	d1d2      	bne.n	1d496 <__gnu_unwind_execute+0xa6>
   1d4f0:	e785      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d4f2:	28b1      	cmp	r0, #177	; 0xb1
   1d4f4:	d057      	beq.n	1d5a6 <__gnu_unwind_execute+0x1b6>
   1d4f6:	28b2      	cmp	r0, #178	; 0xb2
   1d4f8:	d068      	beq.n	1d5cc <__gnu_unwind_execute+0x1dc>
   1d4fa:	28b3      	cmp	r0, #179	; 0xb3
   1d4fc:	f000 8095 	beq.w	1d62a <__gnu_unwind_execute+0x23a>
   1d500:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d504:	2bb4      	cmp	r3, #180	; 0xb4
   1d506:	d0c6      	beq.n	1d496 <__gnu_unwind_execute+0xa6>
   1d508:	f000 0207 	and.w	r2, r0, #7
   1d50c:	3201      	adds	r2, #1
   1d50e:	2301      	movs	r3, #1
   1d510:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d514:	4619      	mov	r1, r3
   1d516:	4630      	mov	r0, r6
   1d518:	f7ff fd44 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d51c:	2800      	cmp	r0, #0
   1d51e:	d1ba      	bne.n	1d496 <__gnu_unwind_execute+0xa6>
   1d520:	e76d      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d522:	4638      	mov	r0, r7
   1d524:	f7ff ff38 	bl	1d398 <next_unwind_byte>
   1d528:	0224      	lsls	r4, r4, #8
   1d52a:	4304      	orrs	r4, r0
   1d52c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d530:	d0b1      	beq.n	1d496 <__gnu_unwind_execute+0xa6>
   1d532:	0124      	lsls	r4, r4, #4
   1d534:	2300      	movs	r3, #0
   1d536:	b2a2      	uxth	r2, r4
   1d538:	4619      	mov	r1, r3
   1d53a:	4630      	mov	r0, r6
   1d53c:	f7ff fd32 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d540:	2800      	cmp	r0, #0
   1d542:	d1a8      	bne.n	1d496 <__gnu_unwind_execute+0xa6>
   1d544:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d548:	bf18      	it	ne
   1d54a:	f04f 0801 	movne.w	r8, #1
   1d54e:	e756      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d550:	28c6      	cmp	r0, #198	; 0xc6
   1d552:	d07d      	beq.n	1d650 <__gnu_unwind_execute+0x260>
   1d554:	28c7      	cmp	r0, #199	; 0xc7
   1d556:	f000 8086 	beq.w	1d666 <__gnu_unwind_execute+0x276>
   1d55a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d55e:	2bc0      	cmp	r3, #192	; 0xc0
   1d560:	f000 8094 	beq.w	1d68c <__gnu_unwind_execute+0x29c>
   1d564:	28c8      	cmp	r0, #200	; 0xc8
   1d566:	f000 809f 	beq.w	1d6a8 <__gnu_unwind_execute+0x2b8>
   1d56a:	28c9      	cmp	r0, #201	; 0xc9
   1d56c:	d193      	bne.n	1d496 <__gnu_unwind_execute+0xa6>
   1d56e:	4638      	mov	r0, r7
   1d570:	f7ff ff12 	bl	1d398 <next_unwind_byte>
   1d574:	0302      	lsls	r2, r0, #12
   1d576:	f000 000f 	and.w	r0, r0, #15
   1d57a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d57e:	3001      	adds	r0, #1
   1d580:	4302      	orrs	r2, r0
   1d582:	e781      	b.n	1d488 <__gnu_unwind_execute+0x98>
   1d584:	ac03      	add	r4, sp, #12
   1d586:	4643      	mov	r3, r8
   1d588:	220e      	movs	r2, #14
   1d58a:	4641      	mov	r1, r8
   1d58c:	9400      	str	r4, [sp, #0]
   1d58e:	4630      	mov	r0, r6
   1d590:	f7ff fb14 	bl	1cbbc <_Unwind_VRS_Get>
   1d594:	9400      	str	r4, [sp, #0]
   1d596:	4630      	mov	r0, r6
   1d598:	4643      	mov	r3, r8
   1d59a:	220f      	movs	r2, #15
   1d59c:	4641      	mov	r1, r8
   1d59e:	f7ff fb33 	bl	1cc08 <_Unwind_VRS_Set>
   1d5a2:	4640      	mov	r0, r8
   1d5a4:	e778      	b.n	1d498 <__gnu_unwind_execute+0xa8>
   1d5a6:	4638      	mov	r0, r7
   1d5a8:	f7ff fef6 	bl	1d398 <next_unwind_byte>
   1d5ac:	2800      	cmp	r0, #0
   1d5ae:	f43f af72 	beq.w	1d496 <__gnu_unwind_execute+0xa6>
   1d5b2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d5b6:	f47f af6e 	bne.w	1d496 <__gnu_unwind_execute+0xa6>
   1d5ba:	4602      	mov	r2, r0
   1d5bc:	4619      	mov	r1, r3
   1d5be:	4630      	mov	r0, r6
   1d5c0:	f7ff fcf0 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d5c4:	2800      	cmp	r0, #0
   1d5c6:	f47f af66 	bne.w	1d496 <__gnu_unwind_execute+0xa6>
   1d5ca:	e718      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d5cc:	2300      	movs	r3, #0
   1d5ce:	f10d 090c 	add.w	r9, sp, #12
   1d5d2:	220d      	movs	r2, #13
   1d5d4:	4619      	mov	r1, r3
   1d5d6:	f8cd 9000 	str.w	r9, [sp]
   1d5da:	4630      	mov	r0, r6
   1d5dc:	f7ff faee 	bl	1cbbc <_Unwind_VRS_Get>
   1d5e0:	4638      	mov	r0, r7
   1d5e2:	f7ff fed9 	bl	1d398 <next_unwind_byte>
   1d5e6:	0602      	lsls	r2, r0, #24
   1d5e8:	f04f 0402 	mov.w	r4, #2
   1d5ec:	d50c      	bpl.n	1d608 <__gnu_unwind_execute+0x218>
   1d5ee:	9b03      	ldr	r3, [sp, #12]
   1d5f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d5f4:	40a0      	lsls	r0, r4
   1d5f6:	4403      	add	r3, r0
   1d5f8:	4638      	mov	r0, r7
   1d5fa:	9303      	str	r3, [sp, #12]
   1d5fc:	f7ff fecc 	bl	1d398 <next_unwind_byte>
   1d600:	0603      	lsls	r3, r0, #24
   1d602:	f104 0407 	add.w	r4, r4, #7
   1d606:	d4f2      	bmi.n	1d5ee <__gnu_unwind_execute+0x1fe>
   1d608:	9b03      	ldr	r3, [sp, #12]
   1d60a:	f8cd 9000 	str.w	r9, [sp]
   1d60e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d612:	40a2      	lsls	r2, r4
   1d614:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d618:	2300      	movs	r3, #0
   1d61a:	4414      	add	r4, r2
   1d61c:	4619      	mov	r1, r3
   1d61e:	220d      	movs	r2, #13
   1d620:	4630      	mov	r0, r6
   1d622:	9403      	str	r4, [sp, #12]
   1d624:	f7ff faf0 	bl	1cc08 <_Unwind_VRS_Set>
   1d628:	e6e9      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d62a:	4638      	mov	r0, r7
   1d62c:	f7ff feb4 	bl	1d398 <next_unwind_byte>
   1d630:	0301      	lsls	r1, r0, #12
   1d632:	f000 000f 	and.w	r0, r0, #15
   1d636:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d63a:	1c42      	adds	r2, r0, #1
   1d63c:	2301      	movs	r3, #1
   1d63e:	430a      	orrs	r2, r1
   1d640:	4630      	mov	r0, r6
   1d642:	4619      	mov	r1, r3
   1d644:	f7ff fcae 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d648:	2800      	cmp	r0, #0
   1d64a:	f47f af24 	bne.w	1d496 <__gnu_unwind_execute+0xa6>
   1d64e:	e6d6      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d650:	4638      	mov	r0, r7
   1d652:	f7ff fea1 	bl	1d398 <next_unwind_byte>
   1d656:	0301      	lsls	r1, r0, #12
   1d658:	f000 000f 	and.w	r0, r0, #15
   1d65c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d660:	1c42      	adds	r2, r0, #1
   1d662:	2303      	movs	r3, #3
   1d664:	e7eb      	b.n	1d63e <__gnu_unwind_execute+0x24e>
   1d666:	4638      	mov	r0, r7
   1d668:	f7ff fe96 	bl	1d398 <next_unwind_byte>
   1d66c:	2800      	cmp	r0, #0
   1d66e:	f43f af12 	beq.w	1d496 <__gnu_unwind_execute+0xa6>
   1d672:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d676:	f47f af0e 	bne.w	1d496 <__gnu_unwind_execute+0xa6>
   1d67a:	4602      	mov	r2, r0
   1d67c:	2104      	movs	r1, #4
   1d67e:	4630      	mov	r0, r6
   1d680:	f7ff fc90 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d684:	2800      	cmp	r0, #0
   1d686:	f47f af06 	bne.w	1d496 <__gnu_unwind_execute+0xa6>
   1d68a:	e6b8      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d68c:	f000 020f 	and.w	r2, r0, #15
   1d690:	3201      	adds	r2, #1
   1d692:	2303      	movs	r3, #3
   1d694:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d698:	4619      	mov	r1, r3
   1d69a:	4630      	mov	r0, r6
   1d69c:	f7ff fc82 	bl	1cfa4 <_Unwind_VRS_Pop>
   1d6a0:	2800      	cmp	r0, #0
   1d6a2:	f47f aef8 	bne.w	1d496 <__gnu_unwind_execute+0xa6>
   1d6a6:	e6aa      	b.n	1d3fe <__gnu_unwind_execute+0xe>
   1d6a8:	4638      	mov	r0, r7
   1d6aa:	f7ff fe75 	bl	1d398 <next_unwind_byte>
   1d6ae:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d6b2:	f000 030f 	and.w	r3, r0, #15
   1d6b6:	3210      	adds	r2, #16
   1d6b8:	3301      	adds	r3, #1
   1d6ba:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d6be:	e6e3      	b.n	1d488 <__gnu_unwind_execute+0x98>

0001d6c0 <__gnu_unwind_frame>:
   1d6c0:	b510      	push	{r4, lr}
   1d6c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d6c4:	b084      	sub	sp, #16
   1d6c6:	685a      	ldr	r2, [r3, #4]
   1d6c8:	2003      	movs	r0, #3
   1d6ca:	f88d 000c 	strb.w	r0, [sp, #12]
   1d6ce:	79dc      	ldrb	r4, [r3, #7]
   1d6d0:	f88d 400d 	strb.w	r4, [sp, #13]
   1d6d4:	0212      	lsls	r2, r2, #8
   1d6d6:	3308      	adds	r3, #8
   1d6d8:	4608      	mov	r0, r1
   1d6da:	a901      	add	r1, sp, #4
   1d6dc:	9201      	str	r2, [sp, #4]
   1d6de:	9302      	str	r3, [sp, #8]
   1d6e0:	f7ff fe86 	bl	1d3f0 <__gnu_unwind_execute>
   1d6e4:	b004      	add	sp, #16
   1d6e6:	bd10      	pop	{r4, pc}

0001d6e8 <_Unwind_GetRegionStart>:
   1d6e8:	b508      	push	{r3, lr}
   1d6ea:	f7ff fe7f 	bl	1d3ec <unwind_UCB_from_context>
   1d6ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d6f0:	bd08      	pop	{r3, pc}
   1d6f2:	bf00      	nop

0001d6f4 <_Unwind_GetLanguageSpecificData>:
   1d6f4:	b508      	push	{r3, lr}
   1d6f6:	f7ff fe79 	bl	1d3ec <unwind_UCB_from_context>
   1d6fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d6fc:	79c3      	ldrb	r3, [r0, #7]
   1d6fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d702:	3008      	adds	r0, #8
   1d704:	bd08      	pop	{r3, pc}
   1d706:	bf00      	nop

0001d708 <_Unwind_GetTextRelBase>:
   1d708:	b508      	push	{r3, lr}
   1d70a:	f000 f807 	bl	1d71c <abort>
   1d70e:	bf00      	nop

0001d710 <_Unwind_GetDataRelBase>:
   1d710:	b508      	push	{r3, lr}
   1d712:	f7ff fff9 	bl	1d708 <_Unwind_GetTextRelBase>
   1d716:	bf00      	nop

0001d718 <__aeabi_idiv0>:
   1d718:	4770      	bx	lr
   1d71a:	bf00      	nop

0001d71c <abort>:
   1d71c:	b508      	push	{r3, lr}
   1d71e:	2006      	movs	r0, #6
   1d720:	f001 f966 	bl	1e9f0 <raise>
   1d724:	2001      	movs	r0, #1
   1d726:	f005 f90b 	bl	22940 <_exit>
   1d72a:	bf00      	nop

0001d72c <__errno>:
   1d72c:	4b01      	ldr	r3, [pc, #4]	; (1d734 <__errno+0x8>)
   1d72e:	6818      	ldr	r0, [r3, #0]
   1d730:	4770      	bx	lr
   1d732:	bf00      	nop
   1d734:	200000f8 	.word	0x200000f8

0001d738 <fputc>:
   1d738:	4b14      	ldr	r3, [pc, #80]	; (1d78c <fputc+0x54>)
   1d73a:	b570      	push	{r4, r5, r6, lr}
   1d73c:	681d      	ldr	r5, [r3, #0]
   1d73e:	4606      	mov	r6, r0
   1d740:	460c      	mov	r4, r1
   1d742:	b10d      	cbz	r5, 1d748 <fputc+0x10>
   1d744:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d746:	b1c3      	cbz	r3, 1d77a <fputc+0x42>
   1d748:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d74a:	07d8      	lsls	r0, r3, #31
   1d74c:	d402      	bmi.n	1d754 <fputc+0x1c>
   1d74e:	89a3      	ldrh	r3, [r4, #12]
   1d750:	0599      	lsls	r1, r3, #22
   1d752:	d516      	bpl.n	1d782 <fputc+0x4a>
   1d754:	4628      	mov	r0, r5
   1d756:	4622      	mov	r2, r4
   1d758:	4631      	mov	r1, r6
   1d75a:	f000 ff21 	bl	1e5a0 <_putc_r>
   1d75e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d760:	07da      	lsls	r2, r3, #31
   1d762:	4605      	mov	r5, r0
   1d764:	d402      	bmi.n	1d76c <fputc+0x34>
   1d766:	89a3      	ldrh	r3, [r4, #12]
   1d768:	059b      	lsls	r3, r3, #22
   1d76a:	d501      	bpl.n	1d770 <fputc+0x38>
   1d76c:	4628      	mov	r0, r5
   1d76e:	bd70      	pop	{r4, r5, r6, pc}
   1d770:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d772:	f000 fa65 	bl	1dc40 <__retarget_lock_release_recursive>
   1d776:	4628      	mov	r0, r5
   1d778:	bd70      	pop	{r4, r5, r6, pc}
   1d77a:	4628      	mov	r0, r5
   1d77c:	f003 fffa 	bl	21774 <__sinit>
   1d780:	e7e2      	b.n	1d748 <fputc+0x10>
   1d782:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d784:	f000 fa5a 	bl	1dc3c <__retarget_lock_acquire_recursive>
   1d788:	e7e4      	b.n	1d754 <fputc+0x1c>
   1d78a:	bf00      	nop
   1d78c:	200000f8 	.word	0x200000f8

0001d790 <_fputs_r>:
   1d790:	b530      	push	{r4, r5, lr}
   1d792:	b087      	sub	sp, #28
   1d794:	4605      	mov	r5, r0
   1d796:	4608      	mov	r0, r1
   1d798:	4614      	mov	r4, r2
   1d79a:	9101      	str	r1, [sp, #4]
   1d79c:	f001 faf0 	bl	1ed80 <strlen>
   1d7a0:	aa01      	add	r2, sp, #4
   1d7a2:	2301      	movs	r3, #1
   1d7a4:	9005      	str	r0, [sp, #20]
   1d7a6:	9002      	str	r0, [sp, #8]
   1d7a8:	9203      	str	r2, [sp, #12]
   1d7aa:	9304      	str	r3, [sp, #16]
   1d7ac:	b10d      	cbz	r5, 1d7b2 <_fputs_r+0x22>
   1d7ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d7b0:	b333      	cbz	r3, 1d800 <_fputs_r+0x70>
   1d7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d7b4:	f013 0f01 	tst.w	r3, #1
   1d7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d7bc:	b29a      	uxth	r2, r3
   1d7be:	d101      	bne.n	1d7c4 <_fputs_r+0x34>
   1d7c0:	0590      	lsls	r0, r2, #22
   1d7c2:	d521      	bpl.n	1d808 <_fputs_r+0x78>
   1d7c4:	0491      	lsls	r1, r2, #18
   1d7c6:	d406      	bmi.n	1d7d6 <_fputs_r+0x46>
   1d7c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d7ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d7ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d7d2:	81a3      	strh	r3, [r4, #12]
   1d7d4:	6662      	str	r2, [r4, #100]	; 0x64
   1d7d6:	4628      	mov	r0, r5
   1d7d8:	aa03      	add	r2, sp, #12
   1d7da:	4621      	mov	r1, r4
   1d7dc:	f000 f824 	bl	1d828 <__sfvwrite_r>
   1d7e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d7e2:	07da      	lsls	r2, r3, #31
   1d7e4:	4605      	mov	r5, r0
   1d7e6:	d402      	bmi.n	1d7ee <_fputs_r+0x5e>
   1d7e8:	89a3      	ldrh	r3, [r4, #12]
   1d7ea:	059b      	lsls	r3, r3, #22
   1d7ec:	d502      	bpl.n	1d7f4 <_fputs_r+0x64>
   1d7ee:	4628      	mov	r0, r5
   1d7f0:	b007      	add	sp, #28
   1d7f2:	bd30      	pop	{r4, r5, pc}
   1d7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d7f6:	f000 fa23 	bl	1dc40 <__retarget_lock_release_recursive>
   1d7fa:	4628      	mov	r0, r5
   1d7fc:	b007      	add	sp, #28
   1d7fe:	bd30      	pop	{r4, r5, pc}
   1d800:	4628      	mov	r0, r5
   1d802:	f003 ffb7 	bl	21774 <__sinit>
   1d806:	e7d4      	b.n	1d7b2 <_fputs_r+0x22>
   1d808:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d80a:	f000 fa17 	bl	1dc3c <__retarget_lock_acquire_recursive>
   1d80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d812:	b29a      	uxth	r2, r3
   1d814:	e7d6      	b.n	1d7c4 <_fputs_r+0x34>
   1d816:	bf00      	nop

0001d818 <fputs>:
   1d818:	4b02      	ldr	r3, [pc, #8]	; (1d824 <fputs+0xc>)
   1d81a:	460a      	mov	r2, r1
   1d81c:	4601      	mov	r1, r0
   1d81e:	6818      	ldr	r0, [r3, #0]
   1d820:	f7ff bfb6 	b.w	1d790 <_fputs_r>
   1d824:	200000f8 	.word	0x200000f8

0001d828 <__sfvwrite_r>:
   1d828:	6893      	ldr	r3, [r2, #8]
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d073      	beq.n	1d916 <__sfvwrite_r+0xee>
   1d82e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d832:	898b      	ldrh	r3, [r1, #12]
   1d834:	b083      	sub	sp, #12
   1d836:	460c      	mov	r4, r1
   1d838:	0719      	lsls	r1, r3, #28
   1d83a:	9000      	str	r0, [sp, #0]
   1d83c:	4616      	mov	r6, r2
   1d83e:	d526      	bpl.n	1d88e <__sfvwrite_r+0x66>
   1d840:	6922      	ldr	r2, [r4, #16]
   1d842:	b322      	cbz	r2, 1d88e <__sfvwrite_r+0x66>
   1d844:	f013 0002 	ands.w	r0, r3, #2
   1d848:	6835      	ldr	r5, [r6, #0]
   1d84a:	d02c      	beq.n	1d8a6 <__sfvwrite_r+0x7e>
   1d84c:	f04f 0900 	mov.w	r9, #0
   1d850:	4fb0      	ldr	r7, [pc, #704]	; (1db14 <__sfvwrite_r+0x2ec>)
   1d852:	46c8      	mov	r8, r9
   1d854:	46b2      	mov	sl, r6
   1d856:	45b8      	cmp	r8, r7
   1d858:	4643      	mov	r3, r8
   1d85a:	464a      	mov	r2, r9
   1d85c:	bf28      	it	cs
   1d85e:	463b      	movcs	r3, r7
   1d860:	9800      	ldr	r0, [sp, #0]
   1d862:	f1b8 0f00 	cmp.w	r8, #0
   1d866:	d050      	beq.n	1d90a <__sfvwrite_r+0xe2>
   1d868:	69e1      	ldr	r1, [r4, #28]
   1d86a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d86c:	47b0      	blx	r6
   1d86e:	2800      	cmp	r0, #0
   1d870:	dd58      	ble.n	1d924 <__sfvwrite_r+0xfc>
   1d872:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d876:	1a1b      	subs	r3, r3, r0
   1d878:	4481      	add	r9, r0
   1d87a:	eba8 0800 	sub.w	r8, r8, r0
   1d87e:	f8ca 3008 	str.w	r3, [sl, #8]
   1d882:	2b00      	cmp	r3, #0
   1d884:	d1e7      	bne.n	1d856 <__sfvwrite_r+0x2e>
   1d886:	2000      	movs	r0, #0
   1d888:	b003      	add	sp, #12
   1d88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d88e:	4621      	mov	r1, r4
   1d890:	9800      	ldr	r0, [sp, #0]
   1d892:	f002 fe49 	bl	20528 <__swsetup_r>
   1d896:	2800      	cmp	r0, #0
   1d898:	f040 8133 	bne.w	1db02 <__sfvwrite_r+0x2da>
   1d89c:	89a3      	ldrh	r3, [r4, #12]
   1d89e:	6835      	ldr	r5, [r6, #0]
   1d8a0:	f013 0002 	ands.w	r0, r3, #2
   1d8a4:	d1d2      	bne.n	1d84c <__sfvwrite_r+0x24>
   1d8a6:	f013 0901 	ands.w	r9, r3, #1
   1d8aa:	d145      	bne.n	1d938 <__sfvwrite_r+0x110>
   1d8ac:	464f      	mov	r7, r9
   1d8ae:	9601      	str	r6, [sp, #4]
   1d8b0:	b337      	cbz	r7, 1d900 <__sfvwrite_r+0xd8>
   1d8b2:	059a      	lsls	r2, r3, #22
   1d8b4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d8b8:	f140 8083 	bpl.w	1d9c2 <__sfvwrite_r+0x19a>
   1d8bc:	4547      	cmp	r7, r8
   1d8be:	46c3      	mov	fp, r8
   1d8c0:	f0c0 80ab 	bcc.w	1da1a <__sfvwrite_r+0x1f2>
   1d8c4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d8c8:	f040 80ac 	bne.w	1da24 <__sfvwrite_r+0x1fc>
   1d8cc:	6820      	ldr	r0, [r4, #0]
   1d8ce:	46ba      	mov	sl, r7
   1d8d0:	465a      	mov	r2, fp
   1d8d2:	4649      	mov	r1, r9
   1d8d4:	f000 fda6 	bl	1e424 <memmove>
   1d8d8:	68a2      	ldr	r2, [r4, #8]
   1d8da:	6823      	ldr	r3, [r4, #0]
   1d8dc:	eba2 0208 	sub.w	r2, r2, r8
   1d8e0:	445b      	add	r3, fp
   1d8e2:	60a2      	str	r2, [r4, #8]
   1d8e4:	6023      	str	r3, [r4, #0]
   1d8e6:	9a01      	ldr	r2, [sp, #4]
   1d8e8:	6893      	ldr	r3, [r2, #8]
   1d8ea:	eba3 030a 	sub.w	r3, r3, sl
   1d8ee:	44d1      	add	r9, sl
   1d8f0:	eba7 070a 	sub.w	r7, r7, sl
   1d8f4:	6093      	str	r3, [r2, #8]
   1d8f6:	2b00      	cmp	r3, #0
   1d8f8:	d0c5      	beq.n	1d886 <__sfvwrite_r+0x5e>
   1d8fa:	89a3      	ldrh	r3, [r4, #12]
   1d8fc:	2f00      	cmp	r7, #0
   1d8fe:	d1d8      	bne.n	1d8b2 <__sfvwrite_r+0x8a>
   1d900:	f8d5 9000 	ldr.w	r9, [r5]
   1d904:	686f      	ldr	r7, [r5, #4]
   1d906:	3508      	adds	r5, #8
   1d908:	e7d2      	b.n	1d8b0 <__sfvwrite_r+0x88>
   1d90a:	f8d5 9000 	ldr.w	r9, [r5]
   1d90e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d912:	3508      	adds	r5, #8
   1d914:	e79f      	b.n	1d856 <__sfvwrite_r+0x2e>
   1d916:	2000      	movs	r0, #0
   1d918:	4770      	bx	lr
   1d91a:	4621      	mov	r1, r4
   1d91c:	9800      	ldr	r0, [sp, #0]
   1d91e:	f003 fed1 	bl	216c4 <_fflush_r>
   1d922:	b370      	cbz	r0, 1d982 <__sfvwrite_r+0x15a>
   1d924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d92c:	f04f 30ff 	mov.w	r0, #4294967295
   1d930:	81a3      	strh	r3, [r4, #12]
   1d932:	b003      	add	sp, #12
   1d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d938:	4681      	mov	r9, r0
   1d93a:	4633      	mov	r3, r6
   1d93c:	464e      	mov	r6, r9
   1d93e:	46a8      	mov	r8, r5
   1d940:	469a      	mov	sl, r3
   1d942:	464d      	mov	r5, r9
   1d944:	b34e      	cbz	r6, 1d99a <__sfvwrite_r+0x172>
   1d946:	b380      	cbz	r0, 1d9aa <__sfvwrite_r+0x182>
   1d948:	6820      	ldr	r0, [r4, #0]
   1d94a:	6923      	ldr	r3, [r4, #16]
   1d94c:	6962      	ldr	r2, [r4, #20]
   1d94e:	45b1      	cmp	r9, r6
   1d950:	46cb      	mov	fp, r9
   1d952:	bf28      	it	cs
   1d954:	46b3      	movcs	fp, r6
   1d956:	4298      	cmp	r0, r3
   1d958:	465f      	mov	r7, fp
   1d95a:	d904      	bls.n	1d966 <__sfvwrite_r+0x13e>
   1d95c:	68a3      	ldr	r3, [r4, #8]
   1d95e:	4413      	add	r3, r2
   1d960:	459b      	cmp	fp, r3
   1d962:	f300 80a6 	bgt.w	1dab2 <__sfvwrite_r+0x28a>
   1d966:	4593      	cmp	fp, r2
   1d968:	db4b      	blt.n	1da02 <__sfvwrite_r+0x1da>
   1d96a:	4613      	mov	r3, r2
   1d96c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d96e:	69e1      	ldr	r1, [r4, #28]
   1d970:	9800      	ldr	r0, [sp, #0]
   1d972:	462a      	mov	r2, r5
   1d974:	47b8      	blx	r7
   1d976:	1e07      	subs	r7, r0, #0
   1d978:	ddd4      	ble.n	1d924 <__sfvwrite_r+0xfc>
   1d97a:	ebb9 0907 	subs.w	r9, r9, r7
   1d97e:	d0cc      	beq.n	1d91a <__sfvwrite_r+0xf2>
   1d980:	2001      	movs	r0, #1
   1d982:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d986:	1bdb      	subs	r3, r3, r7
   1d988:	443d      	add	r5, r7
   1d98a:	1bf6      	subs	r6, r6, r7
   1d98c:	f8ca 3008 	str.w	r3, [sl, #8]
   1d990:	2b00      	cmp	r3, #0
   1d992:	f43f af78 	beq.w	1d886 <__sfvwrite_r+0x5e>
   1d996:	2e00      	cmp	r6, #0
   1d998:	d1d5      	bne.n	1d946 <__sfvwrite_r+0x11e>
   1d99a:	f108 0308 	add.w	r3, r8, #8
   1d99e:	e913 0060 	ldmdb	r3, {r5, r6}
   1d9a2:	4698      	mov	r8, r3
   1d9a4:	3308      	adds	r3, #8
   1d9a6:	2e00      	cmp	r6, #0
   1d9a8:	d0f9      	beq.n	1d99e <__sfvwrite_r+0x176>
   1d9aa:	4632      	mov	r2, r6
   1d9ac:	210a      	movs	r1, #10
   1d9ae:	4628      	mov	r0, r5
   1d9b0:	f000 fc1e 	bl	1e1f0 <memchr>
   1d9b4:	2800      	cmp	r0, #0
   1d9b6:	f000 80a1 	beq.w	1dafc <__sfvwrite_r+0x2d4>
   1d9ba:	3001      	adds	r0, #1
   1d9bc:	eba0 0905 	sub.w	r9, r0, r5
   1d9c0:	e7c2      	b.n	1d948 <__sfvwrite_r+0x120>
   1d9c2:	6820      	ldr	r0, [r4, #0]
   1d9c4:	6923      	ldr	r3, [r4, #16]
   1d9c6:	4298      	cmp	r0, r3
   1d9c8:	d802      	bhi.n	1d9d0 <__sfvwrite_r+0x1a8>
   1d9ca:	6963      	ldr	r3, [r4, #20]
   1d9cc:	429f      	cmp	r7, r3
   1d9ce:	d25d      	bcs.n	1da8c <__sfvwrite_r+0x264>
   1d9d0:	45b8      	cmp	r8, r7
   1d9d2:	bf28      	it	cs
   1d9d4:	46b8      	movcs	r8, r7
   1d9d6:	4642      	mov	r2, r8
   1d9d8:	4649      	mov	r1, r9
   1d9da:	f000 fd23 	bl	1e424 <memmove>
   1d9de:	68a3      	ldr	r3, [r4, #8]
   1d9e0:	6822      	ldr	r2, [r4, #0]
   1d9e2:	eba3 0308 	sub.w	r3, r3, r8
   1d9e6:	4442      	add	r2, r8
   1d9e8:	60a3      	str	r3, [r4, #8]
   1d9ea:	6022      	str	r2, [r4, #0]
   1d9ec:	b10b      	cbz	r3, 1d9f2 <__sfvwrite_r+0x1ca>
   1d9ee:	46c2      	mov	sl, r8
   1d9f0:	e779      	b.n	1d8e6 <__sfvwrite_r+0xbe>
   1d9f2:	4621      	mov	r1, r4
   1d9f4:	9800      	ldr	r0, [sp, #0]
   1d9f6:	f003 fe65 	bl	216c4 <_fflush_r>
   1d9fa:	2800      	cmp	r0, #0
   1d9fc:	d192      	bne.n	1d924 <__sfvwrite_r+0xfc>
   1d9fe:	46c2      	mov	sl, r8
   1da00:	e771      	b.n	1d8e6 <__sfvwrite_r+0xbe>
   1da02:	465a      	mov	r2, fp
   1da04:	4629      	mov	r1, r5
   1da06:	f000 fd0d 	bl	1e424 <memmove>
   1da0a:	68a2      	ldr	r2, [r4, #8]
   1da0c:	6823      	ldr	r3, [r4, #0]
   1da0e:	eba2 020b 	sub.w	r2, r2, fp
   1da12:	445b      	add	r3, fp
   1da14:	60a2      	str	r2, [r4, #8]
   1da16:	6023      	str	r3, [r4, #0]
   1da18:	e7af      	b.n	1d97a <__sfvwrite_r+0x152>
   1da1a:	6820      	ldr	r0, [r4, #0]
   1da1c:	46b8      	mov	r8, r7
   1da1e:	46ba      	mov	sl, r7
   1da20:	46bb      	mov	fp, r7
   1da22:	e755      	b.n	1d8d0 <__sfvwrite_r+0xa8>
   1da24:	6962      	ldr	r2, [r4, #20]
   1da26:	6820      	ldr	r0, [r4, #0]
   1da28:	6921      	ldr	r1, [r4, #16]
   1da2a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1da2e:	eba0 0a01 	sub.w	sl, r0, r1
   1da32:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1da36:	f10a 0001 	add.w	r0, sl, #1
   1da3a:	ea4f 0868 	mov.w	r8, r8, asr #1
   1da3e:	4438      	add	r0, r7
   1da40:	4540      	cmp	r0, r8
   1da42:	4642      	mov	r2, r8
   1da44:	bf84      	itt	hi
   1da46:	4680      	movhi	r8, r0
   1da48:	4642      	movhi	r2, r8
   1da4a:	055b      	lsls	r3, r3, #21
   1da4c:	d544      	bpl.n	1dad8 <__sfvwrite_r+0x2b0>
   1da4e:	4611      	mov	r1, r2
   1da50:	9800      	ldr	r0, [sp, #0]
   1da52:	f000 f907 	bl	1dc64 <_malloc_r>
   1da56:	4683      	mov	fp, r0
   1da58:	2800      	cmp	r0, #0
   1da5a:	d055      	beq.n	1db08 <__sfvwrite_r+0x2e0>
   1da5c:	4652      	mov	r2, sl
   1da5e:	6921      	ldr	r1, [r4, #16]
   1da60:	f000 fc46 	bl	1e2f0 <memcpy>
   1da64:	89a3      	ldrh	r3, [r4, #12]
   1da66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1da6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1da6e:	81a3      	strh	r3, [r4, #12]
   1da70:	eb0b 000a 	add.w	r0, fp, sl
   1da74:	eba8 030a 	sub.w	r3, r8, sl
   1da78:	f8c4 b010 	str.w	fp, [r4, #16]
   1da7c:	f8c4 8014 	str.w	r8, [r4, #20]
   1da80:	6020      	str	r0, [r4, #0]
   1da82:	60a3      	str	r3, [r4, #8]
   1da84:	46b8      	mov	r8, r7
   1da86:	46ba      	mov	sl, r7
   1da88:	46bb      	mov	fp, r7
   1da8a:	e721      	b.n	1d8d0 <__sfvwrite_r+0xa8>
   1da8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1da90:	42b9      	cmp	r1, r7
   1da92:	bf28      	it	cs
   1da94:	4639      	movcs	r1, r7
   1da96:	464a      	mov	r2, r9
   1da98:	fb91 f1f3 	sdiv	r1, r1, r3
   1da9c:	9800      	ldr	r0, [sp, #0]
   1da9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1daa0:	fb03 f301 	mul.w	r3, r3, r1
   1daa4:	69e1      	ldr	r1, [r4, #28]
   1daa6:	47b0      	blx	r6
   1daa8:	f1b0 0a00 	subs.w	sl, r0, #0
   1daac:	f73f af1b 	bgt.w	1d8e6 <__sfvwrite_r+0xbe>
   1dab0:	e738      	b.n	1d924 <__sfvwrite_r+0xfc>
   1dab2:	461a      	mov	r2, r3
   1dab4:	4629      	mov	r1, r5
   1dab6:	9301      	str	r3, [sp, #4]
   1dab8:	f000 fcb4 	bl	1e424 <memmove>
   1dabc:	6822      	ldr	r2, [r4, #0]
   1dabe:	9b01      	ldr	r3, [sp, #4]
   1dac0:	9800      	ldr	r0, [sp, #0]
   1dac2:	441a      	add	r2, r3
   1dac4:	6022      	str	r2, [r4, #0]
   1dac6:	4621      	mov	r1, r4
   1dac8:	f003 fdfc 	bl	216c4 <_fflush_r>
   1dacc:	9b01      	ldr	r3, [sp, #4]
   1dace:	2800      	cmp	r0, #0
   1dad0:	f47f af28 	bne.w	1d924 <__sfvwrite_r+0xfc>
   1dad4:	461f      	mov	r7, r3
   1dad6:	e750      	b.n	1d97a <__sfvwrite_r+0x152>
   1dad8:	9800      	ldr	r0, [sp, #0]
   1dada:	f000 fda1 	bl	1e620 <_realloc_r>
   1dade:	4683      	mov	fp, r0
   1dae0:	2800      	cmp	r0, #0
   1dae2:	d1c5      	bne.n	1da70 <__sfvwrite_r+0x248>
   1dae4:	9d00      	ldr	r5, [sp, #0]
   1dae6:	6921      	ldr	r1, [r4, #16]
   1dae8:	4628      	mov	r0, r5
   1daea:	f003 fee5 	bl	218b8 <_free_r>
   1daee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1daf2:	220c      	movs	r2, #12
   1daf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1daf8:	602a      	str	r2, [r5, #0]
   1dafa:	e715      	b.n	1d928 <__sfvwrite_r+0x100>
   1dafc:	f106 0901 	add.w	r9, r6, #1
   1db00:	e722      	b.n	1d948 <__sfvwrite_r+0x120>
   1db02:	f04f 30ff 	mov.w	r0, #4294967295
   1db06:	e6bf      	b.n	1d888 <__sfvwrite_r+0x60>
   1db08:	9a00      	ldr	r2, [sp, #0]
   1db0a:	230c      	movs	r3, #12
   1db0c:	6013      	str	r3, [r2, #0]
   1db0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1db12:	e709      	b.n	1d928 <__sfvwrite_r+0x100>
   1db14:	7ffffc00 	.word	0x7ffffc00

0001db18 <_fwrite_r>:
   1db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db1c:	b086      	sub	sp, #24
   1db1e:	fb02 f503 	mul.w	r5, r2, r3
   1db22:	4690      	mov	r8, r2
   1db24:	461e      	mov	r6, r3
   1db26:	aa01      	add	r2, sp, #4
   1db28:	2301      	movs	r3, #1
   1db2a:	9101      	str	r1, [sp, #4]
   1db2c:	9502      	str	r5, [sp, #8]
   1db2e:	9505      	str	r5, [sp, #20]
   1db30:	9203      	str	r2, [sp, #12]
   1db32:	9304      	str	r3, [sp, #16]
   1db34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1db36:	4607      	mov	r7, r0
   1db38:	b110      	cbz	r0, 1db40 <_fwrite_r+0x28>
   1db3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1db3c:	2b00      	cmp	r3, #0
   1db3e:	d031      	beq.n	1dba4 <_fwrite_r+0x8c>
   1db40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1db42:	f013 0f01 	tst.w	r3, #1
   1db46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1db4a:	b29a      	uxth	r2, r3
   1db4c:	d101      	bne.n	1db52 <_fwrite_r+0x3a>
   1db4e:	0591      	lsls	r1, r2, #22
   1db50:	d52b      	bpl.n	1dbaa <_fwrite_r+0x92>
   1db52:	0492      	lsls	r2, r2, #18
   1db54:	d406      	bmi.n	1db64 <_fwrite_r+0x4c>
   1db56:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1db58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1db5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1db60:	81a3      	strh	r3, [r4, #12]
   1db62:	6662      	str	r2, [r4, #100]	; 0x64
   1db64:	4638      	mov	r0, r7
   1db66:	aa03      	add	r2, sp, #12
   1db68:	4621      	mov	r1, r4
   1db6a:	f7ff fe5d 	bl	1d828 <__sfvwrite_r>
   1db6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1db70:	b940      	cbnz	r0, 1db84 <_fwrite_r+0x6c>
   1db72:	07d8      	lsls	r0, r3, #31
   1db74:	d402      	bmi.n	1db7c <_fwrite_r+0x64>
   1db76:	89a3      	ldrh	r3, [r4, #12]
   1db78:	0599      	lsls	r1, r3, #22
   1db7a:	d51d      	bpl.n	1dbb8 <_fwrite_r+0xa0>
   1db7c:	4630      	mov	r0, r6
   1db7e:	b006      	add	sp, #24
   1db80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db84:	07da      	lsls	r2, r3, #31
   1db86:	d506      	bpl.n	1db96 <_fwrite_r+0x7e>
   1db88:	9805      	ldr	r0, [sp, #20]
   1db8a:	1a2d      	subs	r5, r5, r0
   1db8c:	fbb5 f0f8 	udiv	r0, r5, r8
   1db90:	b006      	add	sp, #24
   1db92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db96:	89a3      	ldrh	r3, [r4, #12]
   1db98:	059b      	lsls	r3, r3, #22
   1db9a:	d4f5      	bmi.n	1db88 <_fwrite_r+0x70>
   1db9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1db9e:	f000 f84f 	bl	1dc40 <__retarget_lock_release_recursive>
   1dba2:	e7f1      	b.n	1db88 <_fwrite_r+0x70>
   1dba4:	f003 fde6 	bl	21774 <__sinit>
   1dba8:	e7ca      	b.n	1db40 <_fwrite_r+0x28>
   1dbaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dbac:	f000 f846 	bl	1dc3c <__retarget_lock_acquire_recursive>
   1dbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dbb4:	b29a      	uxth	r2, r3
   1dbb6:	e7cc      	b.n	1db52 <_fwrite_r+0x3a>
   1dbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dbba:	f000 f841 	bl	1dc40 <__retarget_lock_release_recursive>
   1dbbe:	4630      	mov	r0, r6
   1dbc0:	e7e6      	b.n	1db90 <_fwrite_r+0x78>
   1dbc2:	bf00      	nop

0001dbc4 <fwrite>:
   1dbc4:	b510      	push	{r4, lr}
   1dbc6:	b082      	sub	sp, #8
   1dbc8:	4c05      	ldr	r4, [pc, #20]	; (1dbe0 <fwrite+0x1c>)
   1dbca:	9300      	str	r3, [sp, #0]
   1dbcc:	6824      	ldr	r4, [r4, #0]
   1dbce:	4613      	mov	r3, r2
   1dbd0:	460a      	mov	r2, r1
   1dbd2:	4601      	mov	r1, r0
   1dbd4:	4620      	mov	r0, r4
   1dbd6:	f7ff ff9f 	bl	1db18 <_fwrite_r>
   1dbda:	b002      	add	sp, #8
   1dbdc:	bd10      	pop	{r4, pc}
   1dbde:	bf00      	nop
   1dbe0:	200000f8 	.word	0x200000f8

0001dbe4 <__libc_init_array>:
   1dbe4:	b570      	push	{r4, r5, r6, lr}
   1dbe6:	4e0f      	ldr	r6, [pc, #60]	; (1dc24 <__libc_init_array+0x40>)
   1dbe8:	4d0f      	ldr	r5, [pc, #60]	; (1dc28 <__libc_init_array+0x44>)
   1dbea:	1b76      	subs	r6, r6, r5
   1dbec:	10b6      	asrs	r6, r6, #2
   1dbee:	bf18      	it	ne
   1dbf0:	2400      	movne	r4, #0
   1dbf2:	d005      	beq.n	1dc00 <__libc_init_array+0x1c>
   1dbf4:	3401      	adds	r4, #1
   1dbf6:	f855 3b04 	ldr.w	r3, [r5], #4
   1dbfa:	4798      	blx	r3
   1dbfc:	42a6      	cmp	r6, r4
   1dbfe:	d1f9      	bne.n	1dbf4 <__libc_init_array+0x10>
   1dc00:	4e0a      	ldr	r6, [pc, #40]	; (1dc2c <__libc_init_array+0x48>)
   1dc02:	4d0b      	ldr	r5, [pc, #44]	; (1dc30 <__libc_init_array+0x4c>)
   1dc04:	1b76      	subs	r6, r6, r5
   1dc06:	f004 feaf 	bl	22968 <_init>
   1dc0a:	10b6      	asrs	r6, r6, #2
   1dc0c:	bf18      	it	ne
   1dc0e:	2400      	movne	r4, #0
   1dc10:	d006      	beq.n	1dc20 <__libc_init_array+0x3c>
   1dc12:	3401      	adds	r4, #1
   1dc14:	f855 3b04 	ldr.w	r3, [r5], #4
   1dc18:	4798      	blx	r3
   1dc1a:	42a6      	cmp	r6, r4
   1dc1c:	d1f9      	bne.n	1dc12 <__libc_init_array+0x2e>
   1dc1e:	bd70      	pop	{r4, r5, r6, pc}
   1dc20:	bd70      	pop	{r4, r5, r6, pc}
   1dc22:	bf00      	nop
   1dc24:	00022980 	.word	0x00022980
   1dc28:	00022980 	.word	0x00022980
   1dc2c:	000229b8 	.word	0x000229b8
   1dc30:	00022980 	.word	0x00022980

0001dc34 <__retarget_lock_init_recursive>:
   1dc34:	4770      	bx	lr
   1dc36:	bf00      	nop

0001dc38 <__retarget_lock_close_recursive>:
   1dc38:	4770      	bx	lr
   1dc3a:	bf00      	nop

0001dc3c <__retarget_lock_acquire_recursive>:
   1dc3c:	4770      	bx	lr
   1dc3e:	bf00      	nop

0001dc40 <__retarget_lock_release_recursive>:
   1dc40:	4770      	bx	lr
   1dc42:	bf00      	nop

0001dc44 <malloc>:
   1dc44:	4b02      	ldr	r3, [pc, #8]	; (1dc50 <malloc+0xc>)
   1dc46:	4601      	mov	r1, r0
   1dc48:	6818      	ldr	r0, [r3, #0]
   1dc4a:	f000 b80b 	b.w	1dc64 <_malloc_r>
   1dc4e:	bf00      	nop
   1dc50:	200000f8 	.word	0x200000f8

0001dc54 <free>:
   1dc54:	4b02      	ldr	r3, [pc, #8]	; (1dc60 <free+0xc>)
   1dc56:	4601      	mov	r1, r0
   1dc58:	6818      	ldr	r0, [r3, #0]
   1dc5a:	f003 be2d 	b.w	218b8 <_free_r>
   1dc5e:	bf00      	nop
   1dc60:	200000f8 	.word	0x200000f8

0001dc64 <_malloc_r>:
   1dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc68:	f101 060b 	add.w	r6, r1, #11
   1dc6c:	2e16      	cmp	r6, #22
   1dc6e:	b083      	sub	sp, #12
   1dc70:	4605      	mov	r5, r0
   1dc72:	f240 809e 	bls.w	1ddb2 <_malloc_r+0x14e>
   1dc76:	f036 0607 	bics.w	r6, r6, #7
   1dc7a:	f100 80bd 	bmi.w	1ddf8 <_malloc_r+0x194>
   1dc7e:	42b1      	cmp	r1, r6
   1dc80:	f200 80ba 	bhi.w	1ddf8 <_malloc_r+0x194>
   1dc84:	f000 fc80 	bl	1e588 <__malloc_lock>
   1dc88:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1dc8c:	f0c0 8293 	bcc.w	1e1b6 <_malloc_r+0x552>
   1dc90:	0a73      	lsrs	r3, r6, #9
   1dc92:	f000 80b8 	beq.w	1de06 <_malloc_r+0x1a2>
   1dc96:	2b04      	cmp	r3, #4
   1dc98:	f200 8179 	bhi.w	1df8e <_malloc_r+0x32a>
   1dc9c:	09b3      	lsrs	r3, r6, #6
   1dc9e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1dca2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1dca6:	00c3      	lsls	r3, r0, #3
   1dca8:	4fbf      	ldr	r7, [pc, #764]	; (1dfa8 <_malloc_r+0x344>)
   1dcaa:	443b      	add	r3, r7
   1dcac:	f1a3 0108 	sub.w	r1, r3, #8
   1dcb0:	685c      	ldr	r4, [r3, #4]
   1dcb2:	42a1      	cmp	r1, r4
   1dcb4:	d106      	bne.n	1dcc4 <_malloc_r+0x60>
   1dcb6:	e00c      	b.n	1dcd2 <_malloc_r+0x6e>
   1dcb8:	2a00      	cmp	r2, #0
   1dcba:	f280 80aa 	bge.w	1de12 <_malloc_r+0x1ae>
   1dcbe:	68e4      	ldr	r4, [r4, #12]
   1dcc0:	42a1      	cmp	r1, r4
   1dcc2:	d006      	beq.n	1dcd2 <_malloc_r+0x6e>
   1dcc4:	6863      	ldr	r3, [r4, #4]
   1dcc6:	f023 0303 	bic.w	r3, r3, #3
   1dcca:	1b9a      	subs	r2, r3, r6
   1dccc:	2a0f      	cmp	r2, #15
   1dcce:	ddf3      	ble.n	1dcb8 <_malloc_r+0x54>
   1dcd0:	4670      	mov	r0, lr
   1dcd2:	693c      	ldr	r4, [r7, #16]
   1dcd4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1dfbc <_malloc_r+0x358>
   1dcd8:	4574      	cmp	r4, lr
   1dcda:	f000 81ab 	beq.w	1e034 <_malloc_r+0x3d0>
   1dcde:	6863      	ldr	r3, [r4, #4]
   1dce0:	f023 0303 	bic.w	r3, r3, #3
   1dce4:	1b9a      	subs	r2, r3, r6
   1dce6:	2a0f      	cmp	r2, #15
   1dce8:	f300 8190 	bgt.w	1e00c <_malloc_r+0x3a8>
   1dcec:	2a00      	cmp	r2, #0
   1dcee:	f8c7 e014 	str.w	lr, [r7, #20]
   1dcf2:	f8c7 e010 	str.w	lr, [r7, #16]
   1dcf6:	f280 809d 	bge.w	1de34 <_malloc_r+0x1d0>
   1dcfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dcfe:	f080 8161 	bcs.w	1dfc4 <_malloc_r+0x360>
   1dd02:	08db      	lsrs	r3, r3, #3
   1dd04:	f103 0c01 	add.w	ip, r3, #1
   1dd08:	1099      	asrs	r1, r3, #2
   1dd0a:	687a      	ldr	r2, [r7, #4]
   1dd0c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dd10:	f8c4 8008 	str.w	r8, [r4, #8]
   1dd14:	2301      	movs	r3, #1
   1dd16:	408b      	lsls	r3, r1
   1dd18:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1dd1c:	4313      	orrs	r3, r2
   1dd1e:	3908      	subs	r1, #8
   1dd20:	60e1      	str	r1, [r4, #12]
   1dd22:	607b      	str	r3, [r7, #4]
   1dd24:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1dd28:	f8c8 400c 	str.w	r4, [r8, #12]
   1dd2c:	1082      	asrs	r2, r0, #2
   1dd2e:	2401      	movs	r4, #1
   1dd30:	4094      	lsls	r4, r2
   1dd32:	429c      	cmp	r4, r3
   1dd34:	f200 808b 	bhi.w	1de4e <_malloc_r+0x1ea>
   1dd38:	421c      	tst	r4, r3
   1dd3a:	d106      	bne.n	1dd4a <_malloc_r+0xe6>
   1dd3c:	f020 0003 	bic.w	r0, r0, #3
   1dd40:	0064      	lsls	r4, r4, #1
   1dd42:	421c      	tst	r4, r3
   1dd44:	f100 0004 	add.w	r0, r0, #4
   1dd48:	d0fa      	beq.n	1dd40 <_malloc_r+0xdc>
   1dd4a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1dd4e:	46cc      	mov	ip, r9
   1dd50:	4680      	mov	r8, r0
   1dd52:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1dd56:	459c      	cmp	ip, r3
   1dd58:	d107      	bne.n	1dd6a <_malloc_r+0x106>
   1dd5a:	e16d      	b.n	1e038 <_malloc_r+0x3d4>
   1dd5c:	2a00      	cmp	r2, #0
   1dd5e:	f280 817b 	bge.w	1e058 <_malloc_r+0x3f4>
   1dd62:	68db      	ldr	r3, [r3, #12]
   1dd64:	459c      	cmp	ip, r3
   1dd66:	f000 8167 	beq.w	1e038 <_malloc_r+0x3d4>
   1dd6a:	6859      	ldr	r1, [r3, #4]
   1dd6c:	f021 0103 	bic.w	r1, r1, #3
   1dd70:	1b8a      	subs	r2, r1, r6
   1dd72:	2a0f      	cmp	r2, #15
   1dd74:	ddf2      	ble.n	1dd5c <_malloc_r+0xf8>
   1dd76:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1dd7a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1dd7e:	9300      	str	r3, [sp, #0]
   1dd80:	199c      	adds	r4, r3, r6
   1dd82:	4628      	mov	r0, r5
   1dd84:	f046 0601 	orr.w	r6, r6, #1
   1dd88:	f042 0501 	orr.w	r5, r2, #1
   1dd8c:	605e      	str	r6, [r3, #4]
   1dd8e:	f8c8 c00c 	str.w	ip, [r8, #12]
   1dd92:	f8cc 8008 	str.w	r8, [ip, #8]
   1dd96:	617c      	str	r4, [r7, #20]
   1dd98:	613c      	str	r4, [r7, #16]
   1dd9a:	f8c4 e00c 	str.w	lr, [r4, #12]
   1dd9e:	f8c4 e008 	str.w	lr, [r4, #8]
   1dda2:	6065      	str	r5, [r4, #4]
   1dda4:	505a      	str	r2, [r3, r1]
   1dda6:	f000 fbf5 	bl	1e594 <__malloc_unlock>
   1ddaa:	9b00      	ldr	r3, [sp, #0]
   1ddac:	f103 0408 	add.w	r4, r3, #8
   1ddb0:	e01e      	b.n	1ddf0 <_malloc_r+0x18c>
   1ddb2:	2910      	cmp	r1, #16
   1ddb4:	d820      	bhi.n	1ddf8 <_malloc_r+0x194>
   1ddb6:	f000 fbe7 	bl	1e588 <__malloc_lock>
   1ddba:	2610      	movs	r6, #16
   1ddbc:	2318      	movs	r3, #24
   1ddbe:	2002      	movs	r0, #2
   1ddc0:	4f79      	ldr	r7, [pc, #484]	; (1dfa8 <_malloc_r+0x344>)
   1ddc2:	443b      	add	r3, r7
   1ddc4:	f1a3 0208 	sub.w	r2, r3, #8
   1ddc8:	685c      	ldr	r4, [r3, #4]
   1ddca:	4294      	cmp	r4, r2
   1ddcc:	f000 813d 	beq.w	1e04a <_malloc_r+0x3e6>
   1ddd0:	6863      	ldr	r3, [r4, #4]
   1ddd2:	68e1      	ldr	r1, [r4, #12]
   1ddd4:	68a6      	ldr	r6, [r4, #8]
   1ddd6:	f023 0303 	bic.w	r3, r3, #3
   1ddda:	4423      	add	r3, r4
   1dddc:	4628      	mov	r0, r5
   1ddde:	685a      	ldr	r2, [r3, #4]
   1dde0:	60f1      	str	r1, [r6, #12]
   1dde2:	f042 0201 	orr.w	r2, r2, #1
   1dde6:	608e      	str	r6, [r1, #8]
   1dde8:	605a      	str	r2, [r3, #4]
   1ddea:	f000 fbd3 	bl	1e594 <__malloc_unlock>
   1ddee:	3408      	adds	r4, #8
   1ddf0:	4620      	mov	r0, r4
   1ddf2:	b003      	add	sp, #12
   1ddf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddf8:	2400      	movs	r4, #0
   1ddfa:	230c      	movs	r3, #12
   1ddfc:	4620      	mov	r0, r4
   1ddfe:	602b      	str	r3, [r5, #0]
   1de00:	b003      	add	sp, #12
   1de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de06:	2040      	movs	r0, #64	; 0x40
   1de08:	f44f 7300 	mov.w	r3, #512	; 0x200
   1de0c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1de10:	e74a      	b.n	1dca8 <_malloc_r+0x44>
   1de12:	4423      	add	r3, r4
   1de14:	68e1      	ldr	r1, [r4, #12]
   1de16:	685a      	ldr	r2, [r3, #4]
   1de18:	68a6      	ldr	r6, [r4, #8]
   1de1a:	f042 0201 	orr.w	r2, r2, #1
   1de1e:	60f1      	str	r1, [r6, #12]
   1de20:	4628      	mov	r0, r5
   1de22:	608e      	str	r6, [r1, #8]
   1de24:	605a      	str	r2, [r3, #4]
   1de26:	f000 fbb5 	bl	1e594 <__malloc_unlock>
   1de2a:	3408      	adds	r4, #8
   1de2c:	4620      	mov	r0, r4
   1de2e:	b003      	add	sp, #12
   1de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de34:	4423      	add	r3, r4
   1de36:	4628      	mov	r0, r5
   1de38:	685a      	ldr	r2, [r3, #4]
   1de3a:	f042 0201 	orr.w	r2, r2, #1
   1de3e:	605a      	str	r2, [r3, #4]
   1de40:	f000 fba8 	bl	1e594 <__malloc_unlock>
   1de44:	3408      	adds	r4, #8
   1de46:	4620      	mov	r0, r4
   1de48:	b003      	add	sp, #12
   1de4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de4e:	68bc      	ldr	r4, [r7, #8]
   1de50:	6863      	ldr	r3, [r4, #4]
   1de52:	f023 0803 	bic.w	r8, r3, #3
   1de56:	45b0      	cmp	r8, r6
   1de58:	d304      	bcc.n	1de64 <_malloc_r+0x200>
   1de5a:	eba8 0306 	sub.w	r3, r8, r6
   1de5e:	2b0f      	cmp	r3, #15
   1de60:	f300 8085 	bgt.w	1df6e <_malloc_r+0x30a>
   1de64:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1dfc0 <_malloc_r+0x35c>
   1de68:	4b50      	ldr	r3, [pc, #320]	; (1dfac <_malloc_r+0x348>)
   1de6a:	f8d9 2000 	ldr.w	r2, [r9]
   1de6e:	681b      	ldr	r3, [r3, #0]
   1de70:	3201      	adds	r2, #1
   1de72:	4433      	add	r3, r6
   1de74:	eb04 0a08 	add.w	sl, r4, r8
   1de78:	f000 8155 	beq.w	1e126 <_malloc_r+0x4c2>
   1de7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1de80:	330f      	adds	r3, #15
   1de82:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1de86:	f02b 0b0f 	bic.w	fp, fp, #15
   1de8a:	4659      	mov	r1, fp
   1de8c:	4628      	mov	r0, r5
   1de8e:	f000 fd6d 	bl	1e96c <_sbrk_r>
   1de92:	1c41      	adds	r1, r0, #1
   1de94:	4602      	mov	r2, r0
   1de96:	f000 80fc 	beq.w	1e092 <_malloc_r+0x42e>
   1de9a:	4582      	cmp	sl, r0
   1de9c:	f200 80f7 	bhi.w	1e08e <_malloc_r+0x42a>
   1dea0:	4b43      	ldr	r3, [pc, #268]	; (1dfb0 <_malloc_r+0x34c>)
   1dea2:	6819      	ldr	r1, [r3, #0]
   1dea4:	4459      	add	r1, fp
   1dea6:	6019      	str	r1, [r3, #0]
   1dea8:	f000 814d 	beq.w	1e146 <_malloc_r+0x4e2>
   1deac:	f8d9 0000 	ldr.w	r0, [r9]
   1deb0:	3001      	adds	r0, #1
   1deb2:	bf1b      	ittet	ne
   1deb4:	eba2 0a0a 	subne.w	sl, r2, sl
   1deb8:	4451      	addne	r1, sl
   1deba:	f8c9 2000 	streq.w	r2, [r9]
   1debe:	6019      	strne	r1, [r3, #0]
   1dec0:	f012 0107 	ands.w	r1, r2, #7
   1dec4:	f000 8115 	beq.w	1e0f2 <_malloc_r+0x48e>
   1dec8:	f1c1 0008 	rsb	r0, r1, #8
   1decc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1ded0:	4402      	add	r2, r0
   1ded2:	3108      	adds	r1, #8
   1ded4:	eb02 090b 	add.w	r9, r2, fp
   1ded8:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1dedc:	eba1 0909 	sub.w	r9, r1, r9
   1dee0:	4649      	mov	r1, r9
   1dee2:	4628      	mov	r0, r5
   1dee4:	9301      	str	r3, [sp, #4]
   1dee6:	9200      	str	r2, [sp, #0]
   1dee8:	f000 fd40 	bl	1e96c <_sbrk_r>
   1deec:	1c43      	adds	r3, r0, #1
   1deee:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1def2:	f000 8143 	beq.w	1e17c <_malloc_r+0x518>
   1def6:	1a80      	subs	r0, r0, r2
   1def8:	4448      	add	r0, r9
   1defa:	f040 0001 	orr.w	r0, r0, #1
   1defe:	6819      	ldr	r1, [r3, #0]
   1df00:	60ba      	str	r2, [r7, #8]
   1df02:	4449      	add	r1, r9
   1df04:	42bc      	cmp	r4, r7
   1df06:	6050      	str	r0, [r2, #4]
   1df08:	6019      	str	r1, [r3, #0]
   1df0a:	d017      	beq.n	1df3c <_malloc_r+0x2d8>
   1df0c:	f1b8 0f0f 	cmp.w	r8, #15
   1df10:	f240 80fb 	bls.w	1e10a <_malloc_r+0x4a6>
   1df14:	6860      	ldr	r0, [r4, #4]
   1df16:	f1a8 020c 	sub.w	r2, r8, #12
   1df1a:	f022 0207 	bic.w	r2, r2, #7
   1df1e:	eb04 0e02 	add.w	lr, r4, r2
   1df22:	f000 0001 	and.w	r0, r0, #1
   1df26:	f04f 0c05 	mov.w	ip, #5
   1df2a:	4310      	orrs	r0, r2
   1df2c:	2a0f      	cmp	r2, #15
   1df2e:	6060      	str	r0, [r4, #4]
   1df30:	f8ce c004 	str.w	ip, [lr, #4]
   1df34:	f8ce c008 	str.w	ip, [lr, #8]
   1df38:	f200 8117 	bhi.w	1e16a <_malloc_r+0x506>
   1df3c:	4b1d      	ldr	r3, [pc, #116]	; (1dfb4 <_malloc_r+0x350>)
   1df3e:	68bc      	ldr	r4, [r7, #8]
   1df40:	681a      	ldr	r2, [r3, #0]
   1df42:	4291      	cmp	r1, r2
   1df44:	bf88      	it	hi
   1df46:	6019      	strhi	r1, [r3, #0]
   1df48:	4b1b      	ldr	r3, [pc, #108]	; (1dfb8 <_malloc_r+0x354>)
   1df4a:	681a      	ldr	r2, [r3, #0]
   1df4c:	4291      	cmp	r1, r2
   1df4e:	6862      	ldr	r2, [r4, #4]
   1df50:	bf88      	it	hi
   1df52:	6019      	strhi	r1, [r3, #0]
   1df54:	f022 0203 	bic.w	r2, r2, #3
   1df58:	4296      	cmp	r6, r2
   1df5a:	eba2 0306 	sub.w	r3, r2, r6
   1df5e:	d801      	bhi.n	1df64 <_malloc_r+0x300>
   1df60:	2b0f      	cmp	r3, #15
   1df62:	dc04      	bgt.n	1df6e <_malloc_r+0x30a>
   1df64:	4628      	mov	r0, r5
   1df66:	f000 fb15 	bl	1e594 <__malloc_unlock>
   1df6a:	2400      	movs	r4, #0
   1df6c:	e740      	b.n	1ddf0 <_malloc_r+0x18c>
   1df6e:	19a2      	adds	r2, r4, r6
   1df70:	f043 0301 	orr.w	r3, r3, #1
   1df74:	f046 0601 	orr.w	r6, r6, #1
   1df78:	6066      	str	r6, [r4, #4]
   1df7a:	4628      	mov	r0, r5
   1df7c:	60ba      	str	r2, [r7, #8]
   1df7e:	6053      	str	r3, [r2, #4]
   1df80:	f000 fb08 	bl	1e594 <__malloc_unlock>
   1df84:	3408      	adds	r4, #8
   1df86:	4620      	mov	r0, r4
   1df88:	b003      	add	sp, #12
   1df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df8e:	2b14      	cmp	r3, #20
   1df90:	d971      	bls.n	1e076 <_malloc_r+0x412>
   1df92:	2b54      	cmp	r3, #84	; 0x54
   1df94:	f200 80a3 	bhi.w	1e0de <_malloc_r+0x47a>
   1df98:	0b33      	lsrs	r3, r6, #12
   1df9a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1df9e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1dfa2:	00c3      	lsls	r3, r0, #3
   1dfa4:	e680      	b.n	1dca8 <_malloc_r+0x44>
   1dfa6:	bf00      	nop
   1dfa8:	20000694 	.word	0x20000694
   1dfac:	200022d0 	.word	0x200022d0
   1dfb0:	200022a0 	.word	0x200022a0
   1dfb4:	200022c8 	.word	0x200022c8
   1dfb8:	200022cc 	.word	0x200022cc
   1dfbc:	2000069c 	.word	0x2000069c
   1dfc0:	20000a9c 	.word	0x20000a9c
   1dfc4:	0a5a      	lsrs	r2, r3, #9
   1dfc6:	2a04      	cmp	r2, #4
   1dfc8:	d95b      	bls.n	1e082 <_malloc_r+0x41e>
   1dfca:	2a14      	cmp	r2, #20
   1dfcc:	f200 80ae 	bhi.w	1e12c <_malloc_r+0x4c8>
   1dfd0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1dfd4:	00c9      	lsls	r1, r1, #3
   1dfd6:	325b      	adds	r2, #91	; 0x5b
   1dfd8:	eb07 0c01 	add.w	ip, r7, r1
   1dfdc:	5879      	ldr	r1, [r7, r1]
   1dfde:	f1ac 0c08 	sub.w	ip, ip, #8
   1dfe2:	458c      	cmp	ip, r1
   1dfe4:	f000 8088 	beq.w	1e0f8 <_malloc_r+0x494>
   1dfe8:	684a      	ldr	r2, [r1, #4]
   1dfea:	f022 0203 	bic.w	r2, r2, #3
   1dfee:	4293      	cmp	r3, r2
   1dff0:	d273      	bcs.n	1e0da <_malloc_r+0x476>
   1dff2:	6889      	ldr	r1, [r1, #8]
   1dff4:	458c      	cmp	ip, r1
   1dff6:	d1f7      	bne.n	1dfe8 <_malloc_r+0x384>
   1dff8:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1dffc:	687b      	ldr	r3, [r7, #4]
   1dffe:	60e2      	str	r2, [r4, #12]
   1e000:	f8c4 c008 	str.w	ip, [r4, #8]
   1e004:	6094      	str	r4, [r2, #8]
   1e006:	f8cc 400c 	str.w	r4, [ip, #12]
   1e00a:	e68f      	b.n	1dd2c <_malloc_r+0xc8>
   1e00c:	19a1      	adds	r1, r4, r6
   1e00e:	f046 0c01 	orr.w	ip, r6, #1
   1e012:	f042 0601 	orr.w	r6, r2, #1
   1e016:	f8c4 c004 	str.w	ip, [r4, #4]
   1e01a:	4628      	mov	r0, r5
   1e01c:	6179      	str	r1, [r7, #20]
   1e01e:	6139      	str	r1, [r7, #16]
   1e020:	f8c1 e00c 	str.w	lr, [r1, #12]
   1e024:	f8c1 e008 	str.w	lr, [r1, #8]
   1e028:	604e      	str	r6, [r1, #4]
   1e02a:	50e2      	str	r2, [r4, r3]
   1e02c:	f000 fab2 	bl	1e594 <__malloc_unlock>
   1e030:	3408      	adds	r4, #8
   1e032:	e6dd      	b.n	1ddf0 <_malloc_r+0x18c>
   1e034:	687b      	ldr	r3, [r7, #4]
   1e036:	e679      	b.n	1dd2c <_malloc_r+0xc8>
   1e038:	f108 0801 	add.w	r8, r8, #1
   1e03c:	f018 0f03 	tst.w	r8, #3
   1e040:	f10c 0c08 	add.w	ip, ip, #8
   1e044:	f47f ae85 	bne.w	1dd52 <_malloc_r+0xee>
   1e048:	e02d      	b.n	1e0a6 <_malloc_r+0x442>
   1e04a:	68dc      	ldr	r4, [r3, #12]
   1e04c:	42a3      	cmp	r3, r4
   1e04e:	bf08      	it	eq
   1e050:	3002      	addeq	r0, #2
   1e052:	f43f ae3e 	beq.w	1dcd2 <_malloc_r+0x6e>
   1e056:	e6bb      	b.n	1ddd0 <_malloc_r+0x16c>
   1e058:	4419      	add	r1, r3
   1e05a:	461c      	mov	r4, r3
   1e05c:	684a      	ldr	r2, [r1, #4]
   1e05e:	68db      	ldr	r3, [r3, #12]
   1e060:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e064:	f042 0201 	orr.w	r2, r2, #1
   1e068:	604a      	str	r2, [r1, #4]
   1e06a:	4628      	mov	r0, r5
   1e06c:	60f3      	str	r3, [r6, #12]
   1e06e:	609e      	str	r6, [r3, #8]
   1e070:	f000 fa90 	bl	1e594 <__malloc_unlock>
   1e074:	e6bc      	b.n	1ddf0 <_malloc_r+0x18c>
   1e076:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e07a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e07e:	00c3      	lsls	r3, r0, #3
   1e080:	e612      	b.n	1dca8 <_malloc_r+0x44>
   1e082:	099a      	lsrs	r2, r3, #6
   1e084:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e088:	00c9      	lsls	r1, r1, #3
   1e08a:	3238      	adds	r2, #56	; 0x38
   1e08c:	e7a4      	b.n	1dfd8 <_malloc_r+0x374>
   1e08e:	42bc      	cmp	r4, r7
   1e090:	d054      	beq.n	1e13c <_malloc_r+0x4d8>
   1e092:	68bc      	ldr	r4, [r7, #8]
   1e094:	6862      	ldr	r2, [r4, #4]
   1e096:	f022 0203 	bic.w	r2, r2, #3
   1e09a:	e75d      	b.n	1df58 <_malloc_r+0x2f4>
   1e09c:	f859 3908 	ldr.w	r3, [r9], #-8
   1e0a0:	4599      	cmp	r9, r3
   1e0a2:	f040 8086 	bne.w	1e1b2 <_malloc_r+0x54e>
   1e0a6:	f010 0f03 	tst.w	r0, #3
   1e0aa:	f100 30ff 	add.w	r0, r0, #4294967295
   1e0ae:	d1f5      	bne.n	1e09c <_malloc_r+0x438>
   1e0b0:	687b      	ldr	r3, [r7, #4]
   1e0b2:	ea23 0304 	bic.w	r3, r3, r4
   1e0b6:	607b      	str	r3, [r7, #4]
   1e0b8:	0064      	lsls	r4, r4, #1
   1e0ba:	429c      	cmp	r4, r3
   1e0bc:	f63f aec7 	bhi.w	1de4e <_malloc_r+0x1ea>
   1e0c0:	2c00      	cmp	r4, #0
   1e0c2:	f43f aec4 	beq.w	1de4e <_malloc_r+0x1ea>
   1e0c6:	421c      	tst	r4, r3
   1e0c8:	4640      	mov	r0, r8
   1e0ca:	f47f ae3e 	bne.w	1dd4a <_malloc_r+0xe6>
   1e0ce:	0064      	lsls	r4, r4, #1
   1e0d0:	421c      	tst	r4, r3
   1e0d2:	f100 0004 	add.w	r0, r0, #4
   1e0d6:	d0fa      	beq.n	1e0ce <_malloc_r+0x46a>
   1e0d8:	e637      	b.n	1dd4a <_malloc_r+0xe6>
   1e0da:	468c      	mov	ip, r1
   1e0dc:	e78c      	b.n	1dff8 <_malloc_r+0x394>
   1e0de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e0e2:	d815      	bhi.n	1e110 <_malloc_r+0x4ac>
   1e0e4:	0bf3      	lsrs	r3, r6, #15
   1e0e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e0ea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e0ee:	00c3      	lsls	r3, r0, #3
   1e0f0:	e5da      	b.n	1dca8 <_malloc_r+0x44>
   1e0f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e0f6:	e6ed      	b.n	1ded4 <_malloc_r+0x270>
   1e0f8:	687b      	ldr	r3, [r7, #4]
   1e0fa:	1092      	asrs	r2, r2, #2
   1e0fc:	2101      	movs	r1, #1
   1e0fe:	fa01 f202 	lsl.w	r2, r1, r2
   1e102:	4313      	orrs	r3, r2
   1e104:	607b      	str	r3, [r7, #4]
   1e106:	4662      	mov	r2, ip
   1e108:	e779      	b.n	1dffe <_malloc_r+0x39a>
   1e10a:	2301      	movs	r3, #1
   1e10c:	6053      	str	r3, [r2, #4]
   1e10e:	e729      	b.n	1df64 <_malloc_r+0x300>
   1e110:	f240 5254 	movw	r2, #1364	; 0x554
   1e114:	4293      	cmp	r3, r2
   1e116:	d822      	bhi.n	1e15e <_malloc_r+0x4fa>
   1e118:	0cb3      	lsrs	r3, r6, #18
   1e11a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e11e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e122:	00c3      	lsls	r3, r0, #3
   1e124:	e5c0      	b.n	1dca8 <_malloc_r+0x44>
   1e126:	f103 0b10 	add.w	fp, r3, #16
   1e12a:	e6ae      	b.n	1de8a <_malloc_r+0x226>
   1e12c:	2a54      	cmp	r2, #84	; 0x54
   1e12e:	d829      	bhi.n	1e184 <_malloc_r+0x520>
   1e130:	0b1a      	lsrs	r2, r3, #12
   1e132:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e136:	00c9      	lsls	r1, r1, #3
   1e138:	326e      	adds	r2, #110	; 0x6e
   1e13a:	e74d      	b.n	1dfd8 <_malloc_r+0x374>
   1e13c:	4b20      	ldr	r3, [pc, #128]	; (1e1c0 <_malloc_r+0x55c>)
   1e13e:	6819      	ldr	r1, [r3, #0]
   1e140:	4459      	add	r1, fp
   1e142:	6019      	str	r1, [r3, #0]
   1e144:	e6b2      	b.n	1deac <_malloc_r+0x248>
   1e146:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e14a:	2800      	cmp	r0, #0
   1e14c:	f47f aeae 	bne.w	1deac <_malloc_r+0x248>
   1e150:	eb08 030b 	add.w	r3, r8, fp
   1e154:	68ba      	ldr	r2, [r7, #8]
   1e156:	f043 0301 	orr.w	r3, r3, #1
   1e15a:	6053      	str	r3, [r2, #4]
   1e15c:	e6ee      	b.n	1df3c <_malloc_r+0x2d8>
   1e15e:	207f      	movs	r0, #127	; 0x7f
   1e160:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e164:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e168:	e59e      	b.n	1dca8 <_malloc_r+0x44>
   1e16a:	f104 0108 	add.w	r1, r4, #8
   1e16e:	4628      	mov	r0, r5
   1e170:	9300      	str	r3, [sp, #0]
   1e172:	f003 fba1 	bl	218b8 <_free_r>
   1e176:	9b00      	ldr	r3, [sp, #0]
   1e178:	6819      	ldr	r1, [r3, #0]
   1e17a:	e6df      	b.n	1df3c <_malloc_r+0x2d8>
   1e17c:	2001      	movs	r0, #1
   1e17e:	f04f 0900 	mov.w	r9, #0
   1e182:	e6bc      	b.n	1defe <_malloc_r+0x29a>
   1e184:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e188:	d805      	bhi.n	1e196 <_malloc_r+0x532>
   1e18a:	0bda      	lsrs	r2, r3, #15
   1e18c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e190:	00c9      	lsls	r1, r1, #3
   1e192:	3277      	adds	r2, #119	; 0x77
   1e194:	e720      	b.n	1dfd8 <_malloc_r+0x374>
   1e196:	f240 5154 	movw	r1, #1364	; 0x554
   1e19a:	428a      	cmp	r2, r1
   1e19c:	d805      	bhi.n	1e1aa <_malloc_r+0x546>
   1e19e:	0c9a      	lsrs	r2, r3, #18
   1e1a0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e1a4:	00c9      	lsls	r1, r1, #3
   1e1a6:	327c      	adds	r2, #124	; 0x7c
   1e1a8:	e716      	b.n	1dfd8 <_malloc_r+0x374>
   1e1aa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e1ae:	227e      	movs	r2, #126	; 0x7e
   1e1b0:	e712      	b.n	1dfd8 <_malloc_r+0x374>
   1e1b2:	687b      	ldr	r3, [r7, #4]
   1e1b4:	e780      	b.n	1e0b8 <_malloc_r+0x454>
   1e1b6:	08f0      	lsrs	r0, r6, #3
   1e1b8:	f106 0308 	add.w	r3, r6, #8
   1e1bc:	e600      	b.n	1ddc0 <_malloc_r+0x15c>
   1e1be:	bf00      	nop
   1e1c0:	200022a0 	.word	0x200022a0

0001e1c4 <__ascii_mbtowc>:
   1e1c4:	b082      	sub	sp, #8
   1e1c6:	b149      	cbz	r1, 1e1dc <__ascii_mbtowc+0x18>
   1e1c8:	b15a      	cbz	r2, 1e1e2 <__ascii_mbtowc+0x1e>
   1e1ca:	b16b      	cbz	r3, 1e1e8 <__ascii_mbtowc+0x24>
   1e1cc:	7813      	ldrb	r3, [r2, #0]
   1e1ce:	600b      	str	r3, [r1, #0]
   1e1d0:	7812      	ldrb	r2, [r2, #0]
   1e1d2:	1c10      	adds	r0, r2, #0
   1e1d4:	bf18      	it	ne
   1e1d6:	2001      	movne	r0, #1
   1e1d8:	b002      	add	sp, #8
   1e1da:	4770      	bx	lr
   1e1dc:	a901      	add	r1, sp, #4
   1e1de:	2a00      	cmp	r2, #0
   1e1e0:	d1f3      	bne.n	1e1ca <__ascii_mbtowc+0x6>
   1e1e2:	4610      	mov	r0, r2
   1e1e4:	b002      	add	sp, #8
   1e1e6:	4770      	bx	lr
   1e1e8:	f06f 0001 	mvn.w	r0, #1
   1e1ec:	e7f4      	b.n	1e1d8 <__ascii_mbtowc+0x14>
   1e1ee:	bf00      	nop

0001e1f0 <memchr>:
   1e1f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e1f4:	2a10      	cmp	r2, #16
   1e1f6:	db2b      	blt.n	1e250 <memchr+0x60>
   1e1f8:	f010 0f07 	tst.w	r0, #7
   1e1fc:	d008      	beq.n	1e210 <memchr+0x20>
   1e1fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e202:	3a01      	subs	r2, #1
   1e204:	428b      	cmp	r3, r1
   1e206:	d02d      	beq.n	1e264 <memchr+0x74>
   1e208:	f010 0f07 	tst.w	r0, #7
   1e20c:	b342      	cbz	r2, 1e260 <memchr+0x70>
   1e20e:	d1f6      	bne.n	1e1fe <memchr+0xe>
   1e210:	b4f0      	push	{r4, r5, r6, r7}
   1e212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e21a:	f022 0407 	bic.w	r4, r2, #7
   1e21e:	f07f 0700 	mvns.w	r7, #0
   1e222:	2300      	movs	r3, #0
   1e224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e228:	3c08      	subs	r4, #8
   1e22a:	ea85 0501 	eor.w	r5, r5, r1
   1e22e:	ea86 0601 	eor.w	r6, r6, r1
   1e232:	fa85 f547 	uadd8	r5, r5, r7
   1e236:	faa3 f587 	sel	r5, r3, r7
   1e23a:	fa86 f647 	uadd8	r6, r6, r7
   1e23e:	faa5 f687 	sel	r6, r5, r7
   1e242:	b98e      	cbnz	r6, 1e268 <memchr+0x78>
   1e244:	d1ee      	bne.n	1e224 <memchr+0x34>
   1e246:	bcf0      	pop	{r4, r5, r6, r7}
   1e248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e24c:	f002 0207 	and.w	r2, r2, #7
   1e250:	b132      	cbz	r2, 1e260 <memchr+0x70>
   1e252:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e256:	3a01      	subs	r2, #1
   1e258:	ea83 0301 	eor.w	r3, r3, r1
   1e25c:	b113      	cbz	r3, 1e264 <memchr+0x74>
   1e25e:	d1f8      	bne.n	1e252 <memchr+0x62>
   1e260:	2000      	movs	r0, #0
   1e262:	4770      	bx	lr
   1e264:	3801      	subs	r0, #1
   1e266:	4770      	bx	lr
   1e268:	2d00      	cmp	r5, #0
   1e26a:	bf06      	itte	eq
   1e26c:	4635      	moveq	r5, r6
   1e26e:	3803      	subeq	r0, #3
   1e270:	3807      	subne	r0, #7
   1e272:	f015 0f01 	tst.w	r5, #1
   1e276:	d107      	bne.n	1e288 <memchr+0x98>
   1e278:	3001      	adds	r0, #1
   1e27a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e27e:	bf02      	ittt	eq
   1e280:	3001      	addeq	r0, #1
   1e282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e286:	3001      	addeq	r0, #1
   1e288:	bcf0      	pop	{r4, r5, r6, r7}
   1e28a:	3801      	subs	r0, #1
   1e28c:	4770      	bx	lr
   1e28e:	bf00      	nop

0001e290 <memcmp>:
   1e290:	2a03      	cmp	r2, #3
   1e292:	b470      	push	{r4, r5, r6}
   1e294:	d922      	bls.n	1e2dc <memcmp+0x4c>
   1e296:	ea40 0301 	orr.w	r3, r0, r1
   1e29a:	079b      	lsls	r3, r3, #30
   1e29c:	d011      	beq.n	1e2c2 <memcmp+0x32>
   1e29e:	7803      	ldrb	r3, [r0, #0]
   1e2a0:	780c      	ldrb	r4, [r1, #0]
   1e2a2:	42a3      	cmp	r3, r4
   1e2a4:	d11d      	bne.n	1e2e2 <memcmp+0x52>
   1e2a6:	440a      	add	r2, r1
   1e2a8:	3101      	adds	r1, #1
   1e2aa:	e005      	b.n	1e2b8 <memcmp+0x28>
   1e2ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e2b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e2b4:	42a3      	cmp	r3, r4
   1e2b6:	d114      	bne.n	1e2e2 <memcmp+0x52>
   1e2b8:	4291      	cmp	r1, r2
   1e2ba:	d1f7      	bne.n	1e2ac <memcmp+0x1c>
   1e2bc:	2000      	movs	r0, #0
   1e2be:	bc70      	pop	{r4, r5, r6}
   1e2c0:	4770      	bx	lr
   1e2c2:	680d      	ldr	r5, [r1, #0]
   1e2c4:	6806      	ldr	r6, [r0, #0]
   1e2c6:	42ae      	cmp	r6, r5
   1e2c8:	460c      	mov	r4, r1
   1e2ca:	4603      	mov	r3, r0
   1e2cc:	f101 0104 	add.w	r1, r1, #4
   1e2d0:	f100 0004 	add.w	r0, r0, #4
   1e2d4:	d108      	bne.n	1e2e8 <memcmp+0x58>
   1e2d6:	3a04      	subs	r2, #4
   1e2d8:	2a03      	cmp	r2, #3
   1e2da:	d8f2      	bhi.n	1e2c2 <memcmp+0x32>
   1e2dc:	2a00      	cmp	r2, #0
   1e2de:	d1de      	bne.n	1e29e <memcmp+0xe>
   1e2e0:	e7ec      	b.n	1e2bc <memcmp+0x2c>
   1e2e2:	1b18      	subs	r0, r3, r4
   1e2e4:	bc70      	pop	{r4, r5, r6}
   1e2e6:	4770      	bx	lr
   1e2e8:	4621      	mov	r1, r4
   1e2ea:	4618      	mov	r0, r3
   1e2ec:	e7d7      	b.n	1e29e <memcmp+0xe>
   1e2ee:	bf00      	nop

0001e2f0 <memcpy>:
   1e2f0:	4684      	mov	ip, r0
   1e2f2:	ea41 0300 	orr.w	r3, r1, r0
   1e2f6:	f013 0303 	ands.w	r3, r3, #3
   1e2fa:	d16d      	bne.n	1e3d8 <memcpy+0xe8>
   1e2fc:	3a40      	subs	r2, #64	; 0x40
   1e2fe:	d341      	bcc.n	1e384 <memcpy+0x94>
   1e300:	f851 3b04 	ldr.w	r3, [r1], #4
   1e304:	f840 3b04 	str.w	r3, [r0], #4
   1e308:	f851 3b04 	ldr.w	r3, [r1], #4
   1e30c:	f840 3b04 	str.w	r3, [r0], #4
   1e310:	f851 3b04 	ldr.w	r3, [r1], #4
   1e314:	f840 3b04 	str.w	r3, [r0], #4
   1e318:	f851 3b04 	ldr.w	r3, [r1], #4
   1e31c:	f840 3b04 	str.w	r3, [r0], #4
   1e320:	f851 3b04 	ldr.w	r3, [r1], #4
   1e324:	f840 3b04 	str.w	r3, [r0], #4
   1e328:	f851 3b04 	ldr.w	r3, [r1], #4
   1e32c:	f840 3b04 	str.w	r3, [r0], #4
   1e330:	f851 3b04 	ldr.w	r3, [r1], #4
   1e334:	f840 3b04 	str.w	r3, [r0], #4
   1e338:	f851 3b04 	ldr.w	r3, [r1], #4
   1e33c:	f840 3b04 	str.w	r3, [r0], #4
   1e340:	f851 3b04 	ldr.w	r3, [r1], #4
   1e344:	f840 3b04 	str.w	r3, [r0], #4
   1e348:	f851 3b04 	ldr.w	r3, [r1], #4
   1e34c:	f840 3b04 	str.w	r3, [r0], #4
   1e350:	f851 3b04 	ldr.w	r3, [r1], #4
   1e354:	f840 3b04 	str.w	r3, [r0], #4
   1e358:	f851 3b04 	ldr.w	r3, [r1], #4
   1e35c:	f840 3b04 	str.w	r3, [r0], #4
   1e360:	f851 3b04 	ldr.w	r3, [r1], #4
   1e364:	f840 3b04 	str.w	r3, [r0], #4
   1e368:	f851 3b04 	ldr.w	r3, [r1], #4
   1e36c:	f840 3b04 	str.w	r3, [r0], #4
   1e370:	f851 3b04 	ldr.w	r3, [r1], #4
   1e374:	f840 3b04 	str.w	r3, [r0], #4
   1e378:	f851 3b04 	ldr.w	r3, [r1], #4
   1e37c:	f840 3b04 	str.w	r3, [r0], #4
   1e380:	3a40      	subs	r2, #64	; 0x40
   1e382:	d2bd      	bcs.n	1e300 <memcpy+0x10>
   1e384:	3230      	adds	r2, #48	; 0x30
   1e386:	d311      	bcc.n	1e3ac <memcpy+0xbc>
   1e388:	f851 3b04 	ldr.w	r3, [r1], #4
   1e38c:	f840 3b04 	str.w	r3, [r0], #4
   1e390:	f851 3b04 	ldr.w	r3, [r1], #4
   1e394:	f840 3b04 	str.w	r3, [r0], #4
   1e398:	f851 3b04 	ldr.w	r3, [r1], #4
   1e39c:	f840 3b04 	str.w	r3, [r0], #4
   1e3a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3a4:	f840 3b04 	str.w	r3, [r0], #4
   1e3a8:	3a10      	subs	r2, #16
   1e3aa:	d2ed      	bcs.n	1e388 <memcpy+0x98>
   1e3ac:	320c      	adds	r2, #12
   1e3ae:	d305      	bcc.n	1e3bc <memcpy+0xcc>
   1e3b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3b4:	f840 3b04 	str.w	r3, [r0], #4
   1e3b8:	3a04      	subs	r2, #4
   1e3ba:	d2f9      	bcs.n	1e3b0 <memcpy+0xc0>
   1e3bc:	3204      	adds	r2, #4
   1e3be:	d008      	beq.n	1e3d2 <memcpy+0xe2>
   1e3c0:	07d2      	lsls	r2, r2, #31
   1e3c2:	bf1c      	itt	ne
   1e3c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e3c8:	f800 3b01 	strbne.w	r3, [r0], #1
   1e3cc:	d301      	bcc.n	1e3d2 <memcpy+0xe2>
   1e3ce:	880b      	ldrh	r3, [r1, #0]
   1e3d0:	8003      	strh	r3, [r0, #0]
   1e3d2:	4660      	mov	r0, ip
   1e3d4:	4770      	bx	lr
   1e3d6:	bf00      	nop
   1e3d8:	2a08      	cmp	r2, #8
   1e3da:	d313      	bcc.n	1e404 <memcpy+0x114>
   1e3dc:	078b      	lsls	r3, r1, #30
   1e3de:	d08d      	beq.n	1e2fc <memcpy+0xc>
   1e3e0:	f010 0303 	ands.w	r3, r0, #3
   1e3e4:	d08a      	beq.n	1e2fc <memcpy+0xc>
   1e3e6:	f1c3 0304 	rsb	r3, r3, #4
   1e3ea:	1ad2      	subs	r2, r2, r3
   1e3ec:	07db      	lsls	r3, r3, #31
   1e3ee:	bf1c      	itt	ne
   1e3f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e3f4:	f800 3b01 	strbne.w	r3, [r0], #1
   1e3f8:	d380      	bcc.n	1e2fc <memcpy+0xc>
   1e3fa:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e3fe:	f820 3b02 	strh.w	r3, [r0], #2
   1e402:	e77b      	b.n	1e2fc <memcpy+0xc>
   1e404:	3a04      	subs	r2, #4
   1e406:	d3d9      	bcc.n	1e3bc <memcpy+0xcc>
   1e408:	3a01      	subs	r2, #1
   1e40a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e40e:	f800 3b01 	strb.w	r3, [r0], #1
   1e412:	d2f9      	bcs.n	1e408 <memcpy+0x118>
   1e414:	780b      	ldrb	r3, [r1, #0]
   1e416:	7003      	strb	r3, [r0, #0]
   1e418:	784b      	ldrb	r3, [r1, #1]
   1e41a:	7043      	strb	r3, [r0, #1]
   1e41c:	788b      	ldrb	r3, [r1, #2]
   1e41e:	7083      	strb	r3, [r0, #2]
   1e420:	4660      	mov	r0, ip
   1e422:	4770      	bx	lr

0001e424 <memmove>:
   1e424:	4288      	cmp	r0, r1
   1e426:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e428:	d90d      	bls.n	1e446 <memmove+0x22>
   1e42a:	188b      	adds	r3, r1, r2
   1e42c:	4298      	cmp	r0, r3
   1e42e:	d20a      	bcs.n	1e446 <memmove+0x22>
   1e430:	1884      	adds	r4, r0, r2
   1e432:	2a00      	cmp	r2, #0
   1e434:	d051      	beq.n	1e4da <memmove+0xb6>
   1e436:	4622      	mov	r2, r4
   1e438:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e43c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e440:	4299      	cmp	r1, r3
   1e442:	d1f9      	bne.n	1e438 <memmove+0x14>
   1e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e446:	2a0f      	cmp	r2, #15
   1e448:	d948      	bls.n	1e4dc <memmove+0xb8>
   1e44a:	ea41 0300 	orr.w	r3, r1, r0
   1e44e:	079b      	lsls	r3, r3, #30
   1e450:	d146      	bne.n	1e4e0 <memmove+0xbc>
   1e452:	f100 0410 	add.w	r4, r0, #16
   1e456:	f101 0310 	add.w	r3, r1, #16
   1e45a:	4615      	mov	r5, r2
   1e45c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e460:	f844 6c10 	str.w	r6, [r4, #-16]
   1e464:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e468:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e46c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e470:	f844 6c08 	str.w	r6, [r4, #-8]
   1e474:	3d10      	subs	r5, #16
   1e476:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e47a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e47e:	2d0f      	cmp	r5, #15
   1e480:	f103 0310 	add.w	r3, r3, #16
   1e484:	f104 0410 	add.w	r4, r4, #16
   1e488:	d8e8      	bhi.n	1e45c <memmove+0x38>
   1e48a:	f1a2 0310 	sub.w	r3, r2, #16
   1e48e:	f023 030f 	bic.w	r3, r3, #15
   1e492:	f002 0e0f 	and.w	lr, r2, #15
   1e496:	3310      	adds	r3, #16
   1e498:	f1be 0f03 	cmp.w	lr, #3
   1e49c:	4419      	add	r1, r3
   1e49e:	4403      	add	r3, r0
   1e4a0:	d921      	bls.n	1e4e6 <memmove+0xc2>
   1e4a2:	1f1e      	subs	r6, r3, #4
   1e4a4:	460d      	mov	r5, r1
   1e4a6:	4674      	mov	r4, lr
   1e4a8:	3c04      	subs	r4, #4
   1e4aa:	f855 7b04 	ldr.w	r7, [r5], #4
   1e4ae:	f846 7f04 	str.w	r7, [r6, #4]!
   1e4b2:	2c03      	cmp	r4, #3
   1e4b4:	d8f8      	bhi.n	1e4a8 <memmove+0x84>
   1e4b6:	f1ae 0404 	sub.w	r4, lr, #4
   1e4ba:	f024 0403 	bic.w	r4, r4, #3
   1e4be:	3404      	adds	r4, #4
   1e4c0:	4421      	add	r1, r4
   1e4c2:	4423      	add	r3, r4
   1e4c4:	f002 0203 	and.w	r2, r2, #3
   1e4c8:	b162      	cbz	r2, 1e4e4 <memmove+0xc0>
   1e4ca:	3b01      	subs	r3, #1
   1e4cc:	440a      	add	r2, r1
   1e4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e4d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e4d6:	428a      	cmp	r2, r1
   1e4d8:	d1f9      	bne.n	1e4ce <memmove+0xaa>
   1e4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4dc:	4603      	mov	r3, r0
   1e4de:	e7f3      	b.n	1e4c8 <memmove+0xa4>
   1e4e0:	4603      	mov	r3, r0
   1e4e2:	e7f2      	b.n	1e4ca <memmove+0xa6>
   1e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4e6:	4672      	mov	r2, lr
   1e4e8:	e7ee      	b.n	1e4c8 <memmove+0xa4>
   1e4ea:	bf00      	nop

0001e4ec <memset>:
   1e4ec:	b470      	push	{r4, r5, r6}
   1e4ee:	0786      	lsls	r6, r0, #30
   1e4f0:	d046      	beq.n	1e580 <memset+0x94>
   1e4f2:	1e54      	subs	r4, r2, #1
   1e4f4:	2a00      	cmp	r2, #0
   1e4f6:	d041      	beq.n	1e57c <memset+0x90>
   1e4f8:	b2ca      	uxtb	r2, r1
   1e4fa:	4603      	mov	r3, r0
   1e4fc:	e002      	b.n	1e504 <memset+0x18>
   1e4fe:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e502:	d33b      	bcc.n	1e57c <memset+0x90>
   1e504:	f803 2b01 	strb.w	r2, [r3], #1
   1e508:	079d      	lsls	r5, r3, #30
   1e50a:	d1f8      	bne.n	1e4fe <memset+0x12>
   1e50c:	2c03      	cmp	r4, #3
   1e50e:	d92e      	bls.n	1e56e <memset+0x82>
   1e510:	b2cd      	uxtb	r5, r1
   1e512:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e516:	2c0f      	cmp	r4, #15
   1e518:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e51c:	d919      	bls.n	1e552 <memset+0x66>
   1e51e:	f103 0210 	add.w	r2, r3, #16
   1e522:	4626      	mov	r6, r4
   1e524:	3e10      	subs	r6, #16
   1e526:	2e0f      	cmp	r6, #15
   1e528:	f842 5c10 	str.w	r5, [r2, #-16]
   1e52c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e530:	f842 5c08 	str.w	r5, [r2, #-8]
   1e534:	f842 5c04 	str.w	r5, [r2, #-4]
   1e538:	f102 0210 	add.w	r2, r2, #16
   1e53c:	d8f2      	bhi.n	1e524 <memset+0x38>
   1e53e:	f1a4 0210 	sub.w	r2, r4, #16
   1e542:	f022 020f 	bic.w	r2, r2, #15
   1e546:	f004 040f 	and.w	r4, r4, #15
   1e54a:	3210      	adds	r2, #16
   1e54c:	2c03      	cmp	r4, #3
   1e54e:	4413      	add	r3, r2
   1e550:	d90d      	bls.n	1e56e <memset+0x82>
   1e552:	461e      	mov	r6, r3
   1e554:	4622      	mov	r2, r4
   1e556:	3a04      	subs	r2, #4
   1e558:	2a03      	cmp	r2, #3
   1e55a:	f846 5b04 	str.w	r5, [r6], #4
   1e55e:	d8fa      	bhi.n	1e556 <memset+0x6a>
   1e560:	1f22      	subs	r2, r4, #4
   1e562:	f022 0203 	bic.w	r2, r2, #3
   1e566:	3204      	adds	r2, #4
   1e568:	4413      	add	r3, r2
   1e56a:	f004 0403 	and.w	r4, r4, #3
   1e56e:	b12c      	cbz	r4, 1e57c <memset+0x90>
   1e570:	b2c9      	uxtb	r1, r1
   1e572:	441c      	add	r4, r3
   1e574:	f803 1b01 	strb.w	r1, [r3], #1
   1e578:	429c      	cmp	r4, r3
   1e57a:	d1fb      	bne.n	1e574 <memset+0x88>
   1e57c:	bc70      	pop	{r4, r5, r6}
   1e57e:	4770      	bx	lr
   1e580:	4614      	mov	r4, r2
   1e582:	4603      	mov	r3, r0
   1e584:	e7c2      	b.n	1e50c <memset+0x20>
   1e586:	bf00      	nop

0001e588 <__malloc_lock>:
   1e588:	4801      	ldr	r0, [pc, #4]	; (1e590 <__malloc_lock+0x8>)
   1e58a:	f7ff bb57 	b.w	1dc3c <__retarget_lock_acquire_recursive>
   1e58e:	bf00      	nop
   1e590:	20002388 	.word	0x20002388

0001e594 <__malloc_unlock>:
   1e594:	4801      	ldr	r0, [pc, #4]	; (1e59c <__malloc_unlock+0x8>)
   1e596:	f7ff bb53 	b.w	1dc40 <__retarget_lock_release_recursive>
   1e59a:	bf00      	nop
   1e59c:	20002388 	.word	0x20002388

0001e5a0 <_putc_r>:
   1e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5a2:	460e      	mov	r6, r1
   1e5a4:	4614      	mov	r4, r2
   1e5a6:	4607      	mov	r7, r0
   1e5a8:	b108      	cbz	r0, 1e5ae <_putc_r+0xe>
   1e5aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e5ac:	b34b      	cbz	r3, 1e602 <_putc_r+0x62>
   1e5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e5b0:	07d8      	lsls	r0, r3, #31
   1e5b2:	d402      	bmi.n	1e5ba <_putc_r+0x1a>
   1e5b4:	89a3      	ldrh	r3, [r4, #12]
   1e5b6:	0599      	lsls	r1, r3, #22
   1e5b8:	d526      	bpl.n	1e608 <_putc_r+0x68>
   1e5ba:	68a3      	ldr	r3, [r4, #8]
   1e5bc:	3b01      	subs	r3, #1
   1e5be:	2b00      	cmp	r3, #0
   1e5c0:	60a3      	str	r3, [r4, #8]
   1e5c2:	db11      	blt.n	1e5e8 <_putc_r+0x48>
   1e5c4:	b2f5      	uxtb	r5, r6
   1e5c6:	6823      	ldr	r3, [r4, #0]
   1e5c8:	1c5a      	adds	r2, r3, #1
   1e5ca:	6022      	str	r2, [r4, #0]
   1e5cc:	701e      	strb	r6, [r3, #0]
   1e5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e5d0:	07da      	lsls	r2, r3, #31
   1e5d2:	d402      	bmi.n	1e5da <_putc_r+0x3a>
   1e5d4:	89a3      	ldrh	r3, [r4, #12]
   1e5d6:	059b      	lsls	r3, r3, #22
   1e5d8:	d501      	bpl.n	1e5de <_putc_r+0x3e>
   1e5da:	4628      	mov	r0, r5
   1e5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e5de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e5e0:	f7ff fb2e 	bl	1dc40 <__retarget_lock_release_recursive>
   1e5e4:	4628      	mov	r0, r5
   1e5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e5e8:	69a2      	ldr	r2, [r4, #24]
   1e5ea:	4293      	cmp	r3, r2
   1e5ec:	db02      	blt.n	1e5f4 <_putc_r+0x54>
   1e5ee:	b2f5      	uxtb	r5, r6
   1e5f0:	2d0a      	cmp	r5, #10
   1e5f2:	d1e8      	bne.n	1e5c6 <_putc_r+0x26>
   1e5f4:	4631      	mov	r1, r6
   1e5f6:	4638      	mov	r0, r7
   1e5f8:	4622      	mov	r2, r4
   1e5fa:	f001 ff19 	bl	20430 <__swbuf_r>
   1e5fe:	4605      	mov	r5, r0
   1e600:	e7e5      	b.n	1e5ce <_putc_r+0x2e>
   1e602:	f003 f8b7 	bl	21774 <__sinit>
   1e606:	e7d2      	b.n	1e5ae <_putc_r+0xe>
   1e608:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e60a:	f7ff fb17 	bl	1dc3c <__retarget_lock_acquire_recursive>
   1e60e:	e7d4      	b.n	1e5ba <_putc_r+0x1a>

0001e610 <realloc>:
   1e610:	4b02      	ldr	r3, [pc, #8]	; (1e61c <realloc+0xc>)
   1e612:	460a      	mov	r2, r1
   1e614:	4601      	mov	r1, r0
   1e616:	6818      	ldr	r0, [r3, #0]
   1e618:	f000 b802 	b.w	1e620 <_realloc_r>
   1e61c:	200000f8 	.word	0x200000f8

0001e620 <_realloc_r>:
   1e620:	2900      	cmp	r1, #0
   1e622:	f000 8095 	beq.w	1e750 <_realloc_r+0x130>
   1e626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e62a:	460d      	mov	r5, r1
   1e62c:	4616      	mov	r6, r2
   1e62e:	b083      	sub	sp, #12
   1e630:	4680      	mov	r8, r0
   1e632:	f106 070b 	add.w	r7, r6, #11
   1e636:	f7ff ffa7 	bl	1e588 <__malloc_lock>
   1e63a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e63e:	2f16      	cmp	r7, #22
   1e640:	f02e 0403 	bic.w	r4, lr, #3
   1e644:	f1a5 0908 	sub.w	r9, r5, #8
   1e648:	d83c      	bhi.n	1e6c4 <_realloc_r+0xa4>
   1e64a:	2210      	movs	r2, #16
   1e64c:	4617      	mov	r7, r2
   1e64e:	42be      	cmp	r6, r7
   1e650:	d83d      	bhi.n	1e6ce <_realloc_r+0xae>
   1e652:	4294      	cmp	r4, r2
   1e654:	da43      	bge.n	1e6de <_realloc_r+0xbe>
   1e656:	4bc4      	ldr	r3, [pc, #784]	; (1e968 <_realloc_r+0x348>)
   1e658:	6899      	ldr	r1, [r3, #8]
   1e65a:	eb09 0004 	add.w	r0, r9, r4
   1e65e:	4288      	cmp	r0, r1
   1e660:	f000 80b4 	beq.w	1e7cc <_realloc_r+0x1ac>
   1e664:	6843      	ldr	r3, [r0, #4]
   1e666:	f023 0101 	bic.w	r1, r3, #1
   1e66a:	4401      	add	r1, r0
   1e66c:	6849      	ldr	r1, [r1, #4]
   1e66e:	07c9      	lsls	r1, r1, #31
   1e670:	d54c      	bpl.n	1e70c <_realloc_r+0xec>
   1e672:	f01e 0f01 	tst.w	lr, #1
   1e676:	f000 809b 	beq.w	1e7b0 <_realloc_r+0x190>
   1e67a:	4631      	mov	r1, r6
   1e67c:	4640      	mov	r0, r8
   1e67e:	f7ff faf1 	bl	1dc64 <_malloc_r>
   1e682:	4606      	mov	r6, r0
   1e684:	2800      	cmp	r0, #0
   1e686:	d03a      	beq.n	1e6fe <_realloc_r+0xde>
   1e688:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e68c:	f023 0301 	bic.w	r3, r3, #1
   1e690:	444b      	add	r3, r9
   1e692:	f1a0 0208 	sub.w	r2, r0, #8
   1e696:	429a      	cmp	r2, r3
   1e698:	f000 8121 	beq.w	1e8de <_realloc_r+0x2be>
   1e69c:	1f22      	subs	r2, r4, #4
   1e69e:	2a24      	cmp	r2, #36	; 0x24
   1e6a0:	f200 8107 	bhi.w	1e8b2 <_realloc_r+0x292>
   1e6a4:	2a13      	cmp	r2, #19
   1e6a6:	f200 80db 	bhi.w	1e860 <_realloc_r+0x240>
   1e6aa:	4603      	mov	r3, r0
   1e6ac:	462a      	mov	r2, r5
   1e6ae:	6811      	ldr	r1, [r2, #0]
   1e6b0:	6019      	str	r1, [r3, #0]
   1e6b2:	6851      	ldr	r1, [r2, #4]
   1e6b4:	6059      	str	r1, [r3, #4]
   1e6b6:	6892      	ldr	r2, [r2, #8]
   1e6b8:	609a      	str	r2, [r3, #8]
   1e6ba:	4629      	mov	r1, r5
   1e6bc:	4640      	mov	r0, r8
   1e6be:	f003 f8fb 	bl	218b8 <_free_r>
   1e6c2:	e01c      	b.n	1e6fe <_realloc_r+0xde>
   1e6c4:	f027 0707 	bic.w	r7, r7, #7
   1e6c8:	2f00      	cmp	r7, #0
   1e6ca:	463a      	mov	r2, r7
   1e6cc:	dabf      	bge.n	1e64e <_realloc_r+0x2e>
   1e6ce:	2600      	movs	r6, #0
   1e6d0:	230c      	movs	r3, #12
   1e6d2:	4630      	mov	r0, r6
   1e6d4:	f8c8 3000 	str.w	r3, [r8]
   1e6d8:	b003      	add	sp, #12
   1e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6de:	462e      	mov	r6, r5
   1e6e0:	1be3      	subs	r3, r4, r7
   1e6e2:	2b0f      	cmp	r3, #15
   1e6e4:	d81e      	bhi.n	1e724 <_realloc_r+0x104>
   1e6e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e6ea:	f003 0301 	and.w	r3, r3, #1
   1e6ee:	4323      	orrs	r3, r4
   1e6f0:	444c      	add	r4, r9
   1e6f2:	f8c9 3004 	str.w	r3, [r9, #4]
   1e6f6:	6863      	ldr	r3, [r4, #4]
   1e6f8:	f043 0301 	orr.w	r3, r3, #1
   1e6fc:	6063      	str	r3, [r4, #4]
   1e6fe:	4640      	mov	r0, r8
   1e700:	f7ff ff48 	bl	1e594 <__malloc_unlock>
   1e704:	4630      	mov	r0, r6
   1e706:	b003      	add	sp, #12
   1e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e70c:	f023 0303 	bic.w	r3, r3, #3
   1e710:	18e1      	adds	r1, r4, r3
   1e712:	4291      	cmp	r1, r2
   1e714:	db1f      	blt.n	1e756 <_realloc_r+0x136>
   1e716:	68c3      	ldr	r3, [r0, #12]
   1e718:	6882      	ldr	r2, [r0, #8]
   1e71a:	462e      	mov	r6, r5
   1e71c:	60d3      	str	r3, [r2, #12]
   1e71e:	460c      	mov	r4, r1
   1e720:	609a      	str	r2, [r3, #8]
   1e722:	e7dd      	b.n	1e6e0 <_realloc_r+0xc0>
   1e724:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e728:	eb09 0107 	add.w	r1, r9, r7
   1e72c:	f002 0201 	and.w	r2, r2, #1
   1e730:	444c      	add	r4, r9
   1e732:	f043 0301 	orr.w	r3, r3, #1
   1e736:	4317      	orrs	r7, r2
   1e738:	f8c9 7004 	str.w	r7, [r9, #4]
   1e73c:	604b      	str	r3, [r1, #4]
   1e73e:	6863      	ldr	r3, [r4, #4]
   1e740:	f043 0301 	orr.w	r3, r3, #1
   1e744:	3108      	adds	r1, #8
   1e746:	6063      	str	r3, [r4, #4]
   1e748:	4640      	mov	r0, r8
   1e74a:	f003 f8b5 	bl	218b8 <_free_r>
   1e74e:	e7d6      	b.n	1e6fe <_realloc_r+0xde>
   1e750:	4611      	mov	r1, r2
   1e752:	f7ff ba87 	b.w	1dc64 <_malloc_r>
   1e756:	f01e 0f01 	tst.w	lr, #1
   1e75a:	d18e      	bne.n	1e67a <_realloc_r+0x5a>
   1e75c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e760:	eba9 0a01 	sub.w	sl, r9, r1
   1e764:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e768:	f021 0103 	bic.w	r1, r1, #3
   1e76c:	440b      	add	r3, r1
   1e76e:	4423      	add	r3, r4
   1e770:	4293      	cmp	r3, r2
   1e772:	db25      	blt.n	1e7c0 <_realloc_r+0x1a0>
   1e774:	68c2      	ldr	r2, [r0, #12]
   1e776:	6881      	ldr	r1, [r0, #8]
   1e778:	4656      	mov	r6, sl
   1e77a:	60ca      	str	r2, [r1, #12]
   1e77c:	6091      	str	r1, [r2, #8]
   1e77e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e782:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e786:	1f22      	subs	r2, r4, #4
   1e788:	2a24      	cmp	r2, #36	; 0x24
   1e78a:	60c1      	str	r1, [r0, #12]
   1e78c:	6088      	str	r0, [r1, #8]
   1e78e:	f200 8094 	bhi.w	1e8ba <_realloc_r+0x29a>
   1e792:	2a13      	cmp	r2, #19
   1e794:	d96f      	bls.n	1e876 <_realloc_r+0x256>
   1e796:	6829      	ldr	r1, [r5, #0]
   1e798:	f8ca 1008 	str.w	r1, [sl, #8]
   1e79c:	6869      	ldr	r1, [r5, #4]
   1e79e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e7a2:	2a1b      	cmp	r2, #27
   1e7a4:	f200 80a2 	bhi.w	1e8ec <_realloc_r+0x2cc>
   1e7a8:	3508      	adds	r5, #8
   1e7aa:	f10a 0210 	add.w	r2, sl, #16
   1e7ae:	e063      	b.n	1e878 <_realloc_r+0x258>
   1e7b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e7b4:	eba9 0a03 	sub.w	sl, r9, r3
   1e7b8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e7bc:	f021 0103 	bic.w	r1, r1, #3
   1e7c0:	1863      	adds	r3, r4, r1
   1e7c2:	4293      	cmp	r3, r2
   1e7c4:	f6ff af59 	blt.w	1e67a <_realloc_r+0x5a>
   1e7c8:	4656      	mov	r6, sl
   1e7ca:	e7d8      	b.n	1e77e <_realloc_r+0x15e>
   1e7cc:	6841      	ldr	r1, [r0, #4]
   1e7ce:	f021 0b03 	bic.w	fp, r1, #3
   1e7d2:	44a3      	add	fp, r4
   1e7d4:	f107 0010 	add.w	r0, r7, #16
   1e7d8:	4583      	cmp	fp, r0
   1e7da:	da56      	bge.n	1e88a <_realloc_r+0x26a>
   1e7dc:	f01e 0f01 	tst.w	lr, #1
   1e7e0:	f47f af4b 	bne.w	1e67a <_realloc_r+0x5a>
   1e7e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e7e8:	eba9 0a01 	sub.w	sl, r9, r1
   1e7ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e7f0:	f021 0103 	bic.w	r1, r1, #3
   1e7f4:	448b      	add	fp, r1
   1e7f6:	4558      	cmp	r0, fp
   1e7f8:	dce2      	bgt.n	1e7c0 <_realloc_r+0x1a0>
   1e7fa:	4656      	mov	r6, sl
   1e7fc:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e800:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e804:	1f22      	subs	r2, r4, #4
   1e806:	2a24      	cmp	r2, #36	; 0x24
   1e808:	60c1      	str	r1, [r0, #12]
   1e80a:	6088      	str	r0, [r1, #8]
   1e80c:	f200 808f 	bhi.w	1e92e <_realloc_r+0x30e>
   1e810:	2a13      	cmp	r2, #19
   1e812:	f240 808a 	bls.w	1e92a <_realloc_r+0x30a>
   1e816:	6829      	ldr	r1, [r5, #0]
   1e818:	f8ca 1008 	str.w	r1, [sl, #8]
   1e81c:	6869      	ldr	r1, [r5, #4]
   1e81e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e822:	2a1b      	cmp	r2, #27
   1e824:	f200 808a 	bhi.w	1e93c <_realloc_r+0x31c>
   1e828:	3508      	adds	r5, #8
   1e82a:	f10a 0210 	add.w	r2, sl, #16
   1e82e:	6829      	ldr	r1, [r5, #0]
   1e830:	6011      	str	r1, [r2, #0]
   1e832:	6869      	ldr	r1, [r5, #4]
   1e834:	6051      	str	r1, [r2, #4]
   1e836:	68a9      	ldr	r1, [r5, #8]
   1e838:	6091      	str	r1, [r2, #8]
   1e83a:	eb0a 0107 	add.w	r1, sl, r7
   1e83e:	ebab 0207 	sub.w	r2, fp, r7
   1e842:	f042 0201 	orr.w	r2, r2, #1
   1e846:	6099      	str	r1, [r3, #8]
   1e848:	604a      	str	r2, [r1, #4]
   1e84a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e84e:	f003 0301 	and.w	r3, r3, #1
   1e852:	431f      	orrs	r7, r3
   1e854:	4640      	mov	r0, r8
   1e856:	f8ca 7004 	str.w	r7, [sl, #4]
   1e85a:	f7ff fe9b 	bl	1e594 <__malloc_unlock>
   1e85e:	e751      	b.n	1e704 <_realloc_r+0xe4>
   1e860:	682b      	ldr	r3, [r5, #0]
   1e862:	6003      	str	r3, [r0, #0]
   1e864:	686b      	ldr	r3, [r5, #4]
   1e866:	6043      	str	r3, [r0, #4]
   1e868:	2a1b      	cmp	r2, #27
   1e86a:	d82d      	bhi.n	1e8c8 <_realloc_r+0x2a8>
   1e86c:	f100 0308 	add.w	r3, r0, #8
   1e870:	f105 0208 	add.w	r2, r5, #8
   1e874:	e71b      	b.n	1e6ae <_realloc_r+0x8e>
   1e876:	4632      	mov	r2, r6
   1e878:	6829      	ldr	r1, [r5, #0]
   1e87a:	6011      	str	r1, [r2, #0]
   1e87c:	6869      	ldr	r1, [r5, #4]
   1e87e:	6051      	str	r1, [r2, #4]
   1e880:	68a9      	ldr	r1, [r5, #8]
   1e882:	6091      	str	r1, [r2, #8]
   1e884:	461c      	mov	r4, r3
   1e886:	46d1      	mov	r9, sl
   1e888:	e72a      	b.n	1e6e0 <_realloc_r+0xc0>
   1e88a:	eb09 0107 	add.w	r1, r9, r7
   1e88e:	ebab 0b07 	sub.w	fp, fp, r7
   1e892:	f04b 0201 	orr.w	r2, fp, #1
   1e896:	6099      	str	r1, [r3, #8]
   1e898:	604a      	str	r2, [r1, #4]
   1e89a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e89e:	f003 0301 	and.w	r3, r3, #1
   1e8a2:	431f      	orrs	r7, r3
   1e8a4:	4640      	mov	r0, r8
   1e8a6:	f845 7c04 	str.w	r7, [r5, #-4]
   1e8aa:	f7ff fe73 	bl	1e594 <__malloc_unlock>
   1e8ae:	462e      	mov	r6, r5
   1e8b0:	e728      	b.n	1e704 <_realloc_r+0xe4>
   1e8b2:	4629      	mov	r1, r5
   1e8b4:	f7ff fdb6 	bl	1e424 <memmove>
   1e8b8:	e6ff      	b.n	1e6ba <_realloc_r+0x9a>
   1e8ba:	4629      	mov	r1, r5
   1e8bc:	4630      	mov	r0, r6
   1e8be:	461c      	mov	r4, r3
   1e8c0:	46d1      	mov	r9, sl
   1e8c2:	f7ff fdaf 	bl	1e424 <memmove>
   1e8c6:	e70b      	b.n	1e6e0 <_realloc_r+0xc0>
   1e8c8:	68ab      	ldr	r3, [r5, #8]
   1e8ca:	6083      	str	r3, [r0, #8]
   1e8cc:	68eb      	ldr	r3, [r5, #12]
   1e8ce:	60c3      	str	r3, [r0, #12]
   1e8d0:	2a24      	cmp	r2, #36	; 0x24
   1e8d2:	d017      	beq.n	1e904 <_realloc_r+0x2e4>
   1e8d4:	f100 0310 	add.w	r3, r0, #16
   1e8d8:	f105 0210 	add.w	r2, r5, #16
   1e8dc:	e6e7      	b.n	1e6ae <_realloc_r+0x8e>
   1e8de:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e8e2:	f023 0303 	bic.w	r3, r3, #3
   1e8e6:	441c      	add	r4, r3
   1e8e8:	462e      	mov	r6, r5
   1e8ea:	e6f9      	b.n	1e6e0 <_realloc_r+0xc0>
   1e8ec:	68a9      	ldr	r1, [r5, #8]
   1e8ee:	f8ca 1010 	str.w	r1, [sl, #16]
   1e8f2:	68e9      	ldr	r1, [r5, #12]
   1e8f4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e8f8:	2a24      	cmp	r2, #36	; 0x24
   1e8fa:	d00c      	beq.n	1e916 <_realloc_r+0x2f6>
   1e8fc:	3510      	adds	r5, #16
   1e8fe:	f10a 0218 	add.w	r2, sl, #24
   1e902:	e7b9      	b.n	1e878 <_realloc_r+0x258>
   1e904:	692b      	ldr	r3, [r5, #16]
   1e906:	6103      	str	r3, [r0, #16]
   1e908:	696b      	ldr	r3, [r5, #20]
   1e90a:	6143      	str	r3, [r0, #20]
   1e90c:	f105 0218 	add.w	r2, r5, #24
   1e910:	f100 0318 	add.w	r3, r0, #24
   1e914:	e6cb      	b.n	1e6ae <_realloc_r+0x8e>
   1e916:	692a      	ldr	r2, [r5, #16]
   1e918:	f8ca 2018 	str.w	r2, [sl, #24]
   1e91c:	696a      	ldr	r2, [r5, #20]
   1e91e:	f8ca 201c 	str.w	r2, [sl, #28]
   1e922:	3518      	adds	r5, #24
   1e924:	f10a 0220 	add.w	r2, sl, #32
   1e928:	e7a6      	b.n	1e878 <_realloc_r+0x258>
   1e92a:	4632      	mov	r2, r6
   1e92c:	e77f      	b.n	1e82e <_realloc_r+0x20e>
   1e92e:	4629      	mov	r1, r5
   1e930:	4630      	mov	r0, r6
   1e932:	9301      	str	r3, [sp, #4]
   1e934:	f7ff fd76 	bl	1e424 <memmove>
   1e938:	9b01      	ldr	r3, [sp, #4]
   1e93a:	e77e      	b.n	1e83a <_realloc_r+0x21a>
   1e93c:	68a9      	ldr	r1, [r5, #8]
   1e93e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e942:	68e9      	ldr	r1, [r5, #12]
   1e944:	f8ca 1014 	str.w	r1, [sl, #20]
   1e948:	2a24      	cmp	r2, #36	; 0x24
   1e94a:	d003      	beq.n	1e954 <_realloc_r+0x334>
   1e94c:	3510      	adds	r5, #16
   1e94e:	f10a 0218 	add.w	r2, sl, #24
   1e952:	e76c      	b.n	1e82e <_realloc_r+0x20e>
   1e954:	692a      	ldr	r2, [r5, #16]
   1e956:	f8ca 2018 	str.w	r2, [sl, #24]
   1e95a:	696a      	ldr	r2, [r5, #20]
   1e95c:	f8ca 201c 	str.w	r2, [sl, #28]
   1e960:	3518      	adds	r5, #24
   1e962:	f10a 0220 	add.w	r2, sl, #32
   1e966:	e762      	b.n	1e82e <_realloc_r+0x20e>
   1e968:	20000694 	.word	0x20000694

0001e96c <_sbrk_r>:
   1e96c:	b538      	push	{r3, r4, r5, lr}
   1e96e:	4c07      	ldr	r4, [pc, #28]	; (1e98c <_sbrk_r+0x20>)
   1e970:	2300      	movs	r3, #0
   1e972:	4605      	mov	r5, r0
   1e974:	4608      	mov	r0, r1
   1e976:	6023      	str	r3, [r4, #0]
   1e978:	f003 ff6c 	bl	22854 <_sbrk>
   1e97c:	1c43      	adds	r3, r0, #1
   1e97e:	d000      	beq.n	1e982 <_sbrk_r+0x16>
   1e980:	bd38      	pop	{r3, r4, r5, pc}
   1e982:	6823      	ldr	r3, [r4, #0]
   1e984:	2b00      	cmp	r3, #0
   1e986:	d0fb      	beq.n	1e980 <_sbrk_r+0x14>
   1e988:	602b      	str	r3, [r5, #0]
   1e98a:	bd38      	pop	{r3, r4, r5, pc}
   1e98c:	2000239c 	.word	0x2000239c

0001e990 <_raise_r>:
   1e990:	291f      	cmp	r1, #31
   1e992:	d828      	bhi.n	1e9e6 <_raise_r+0x56>
   1e994:	b520      	push	{r5, lr}
   1e996:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1e99a:	b082      	sub	sp, #8
   1e99c:	4605      	mov	r5, r0
   1e99e:	b1aa      	cbz	r2, 1e9cc <_raise_r+0x3c>
   1e9a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e9a4:	b193      	cbz	r3, 1e9cc <_raise_r+0x3c>
   1e9a6:	2b01      	cmp	r3, #1
   1e9a8:	d00e      	beq.n	1e9c8 <_raise_r+0x38>
   1e9aa:	1c58      	adds	r0, r3, #1
   1e9ac:	d007      	beq.n	1e9be <_raise_r+0x2e>
   1e9ae:	2500      	movs	r5, #0
   1e9b0:	4608      	mov	r0, r1
   1e9b2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e9b6:	4798      	blx	r3
   1e9b8:	4628      	mov	r0, r5
   1e9ba:	b002      	add	sp, #8
   1e9bc:	bd20      	pop	{r5, pc}
   1e9be:	2316      	movs	r3, #22
   1e9c0:	2001      	movs	r0, #1
   1e9c2:	602b      	str	r3, [r5, #0]
   1e9c4:	b002      	add	sp, #8
   1e9c6:	bd20      	pop	{r5, pc}
   1e9c8:	2000      	movs	r0, #0
   1e9ca:	e7f6      	b.n	1e9ba <_raise_r+0x2a>
   1e9cc:	4628      	mov	r0, r5
   1e9ce:	9101      	str	r1, [sp, #4]
   1e9d0:	f000 f82a 	bl	1ea28 <_getpid_r>
   1e9d4:	9901      	ldr	r1, [sp, #4]
   1e9d6:	460a      	mov	r2, r1
   1e9d8:	4601      	mov	r1, r0
   1e9da:	4628      	mov	r0, r5
   1e9dc:	b002      	add	sp, #8
   1e9de:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1e9e2:	f000 b80d 	b.w	1ea00 <_kill_r>
   1e9e6:	2316      	movs	r3, #22
   1e9e8:	6003      	str	r3, [r0, #0]
   1e9ea:	f04f 30ff 	mov.w	r0, #4294967295
   1e9ee:	4770      	bx	lr

0001e9f0 <raise>:
   1e9f0:	4b02      	ldr	r3, [pc, #8]	; (1e9fc <raise+0xc>)
   1e9f2:	4601      	mov	r1, r0
   1e9f4:	6818      	ldr	r0, [r3, #0]
   1e9f6:	f7ff bfcb 	b.w	1e990 <_raise_r>
   1e9fa:	bf00      	nop
   1e9fc:	200000f8 	.word	0x200000f8

0001ea00 <_kill_r>:
   1ea00:	b538      	push	{r3, r4, r5, lr}
   1ea02:	460b      	mov	r3, r1
   1ea04:	4c07      	ldr	r4, [pc, #28]	; (1ea24 <_kill_r+0x24>)
   1ea06:	4605      	mov	r5, r0
   1ea08:	4611      	mov	r1, r2
   1ea0a:	4618      	mov	r0, r3
   1ea0c:	2300      	movs	r3, #0
   1ea0e:	6023      	str	r3, [r4, #0]
   1ea10:	f003 ff9a 	bl	22948 <_kill>
   1ea14:	1c43      	adds	r3, r0, #1
   1ea16:	d000      	beq.n	1ea1a <_kill_r+0x1a>
   1ea18:	bd38      	pop	{r3, r4, r5, pc}
   1ea1a:	6823      	ldr	r3, [r4, #0]
   1ea1c:	2b00      	cmp	r3, #0
   1ea1e:	d0fb      	beq.n	1ea18 <_kill_r+0x18>
   1ea20:	602b      	str	r3, [r5, #0]
   1ea22:	bd38      	pop	{r3, r4, r5, pc}
   1ea24:	2000239c 	.word	0x2000239c

0001ea28 <_getpid_r>:
   1ea28:	f003 bf12 	b.w	22850 <_getpid>

0001ea2c <sprintf>:
   1ea2c:	b40e      	push	{r1, r2, r3}
   1ea2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea30:	b09c      	sub	sp, #112	; 0x70
   1ea32:	ab21      	add	r3, sp, #132	; 0x84
   1ea34:	490f      	ldr	r1, [pc, #60]	; (1ea74 <sprintf+0x48>)
   1ea36:	f853 2b04 	ldr.w	r2, [r3], #4
   1ea3a:	9301      	str	r3, [sp, #4]
   1ea3c:	4605      	mov	r5, r0
   1ea3e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1ea42:	6808      	ldr	r0, [r1, #0]
   1ea44:	9502      	str	r5, [sp, #8]
   1ea46:	f44f 7702 	mov.w	r7, #520	; 0x208
   1ea4a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1ea4e:	a902      	add	r1, sp, #8
   1ea50:	9506      	str	r5, [sp, #24]
   1ea52:	f8ad 7014 	strh.w	r7, [sp, #20]
   1ea56:	9404      	str	r4, [sp, #16]
   1ea58:	9407      	str	r4, [sp, #28]
   1ea5a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1ea5e:	f000 fa4f 	bl	1ef00 <_svfprintf_r>
   1ea62:	9b02      	ldr	r3, [sp, #8]
   1ea64:	2200      	movs	r2, #0
   1ea66:	701a      	strb	r2, [r3, #0]
   1ea68:	b01c      	add	sp, #112	; 0x70
   1ea6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ea6e:	b003      	add	sp, #12
   1ea70:	4770      	bx	lr
   1ea72:	bf00      	nop
   1ea74:	200000f8 	.word	0x200000f8
	...
   1ea80:	eba2 0003 	sub.w	r0, r2, r3
   1ea84:	4770      	bx	lr
   1ea86:	bf00      	nop

0001ea88 <strcmp>:
   1ea88:	7802      	ldrb	r2, [r0, #0]
   1ea8a:	780b      	ldrb	r3, [r1, #0]
   1ea8c:	2a01      	cmp	r2, #1
   1ea8e:	bf28      	it	cs
   1ea90:	429a      	cmpcs	r2, r3
   1ea92:	d1f5      	bne.n	1ea80 <sprintf+0x54>
   1ea94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1ea98:	ea40 0401 	orr.w	r4, r0, r1
   1ea9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1eaa0:	f06f 0c00 	mvn.w	ip, #0
   1eaa4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1eaa8:	b312      	cbz	r2, 1eaf0 <strcmp+0x68>
   1eaaa:	ea80 0401 	eor.w	r4, r0, r1
   1eaae:	f014 0f07 	tst.w	r4, #7
   1eab2:	d16a      	bne.n	1eb8a <strcmp+0x102>
   1eab4:	f000 0407 	and.w	r4, r0, #7
   1eab8:	f020 0007 	bic.w	r0, r0, #7
   1eabc:	f004 0503 	and.w	r5, r4, #3
   1eac0:	f021 0107 	bic.w	r1, r1, #7
   1eac4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1eac8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1eacc:	f014 0f04 	tst.w	r4, #4
   1ead0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ead4:	fa0c f405 	lsl.w	r4, ip, r5
   1ead8:	ea62 0204 	orn	r2, r2, r4
   1eadc:	ea66 0604 	orn	r6, r6, r4
   1eae0:	d00a      	beq.n	1eaf8 <strcmp+0x70>
   1eae2:	ea63 0304 	orn	r3, r3, r4
   1eae6:	4662      	mov	r2, ip
   1eae8:	ea67 0704 	orn	r7, r7, r4
   1eaec:	4666      	mov	r6, ip
   1eaee:	e003      	b.n	1eaf8 <strcmp+0x70>
   1eaf0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1eaf4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1eaf8:	fa82 f54c 	uadd8	r5, r2, ip
   1eafc:	ea82 0406 	eor.w	r4, r2, r6
   1eb00:	faa4 f48c 	sel	r4, r4, ip
   1eb04:	bb6c      	cbnz	r4, 1eb62 <strcmp+0xda>
   1eb06:	fa83 f54c 	uadd8	r5, r3, ip
   1eb0a:	ea83 0507 	eor.w	r5, r3, r7
   1eb0e:	faa5 f58c 	sel	r5, r5, ip
   1eb12:	b995      	cbnz	r5, 1eb3a <strcmp+0xb2>
   1eb14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1eb18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1eb1c:	fa82 f54c 	uadd8	r5, r2, ip
   1eb20:	ea82 0406 	eor.w	r4, r2, r6
   1eb24:	faa4 f48c 	sel	r4, r4, ip
   1eb28:	fa83 f54c 	uadd8	r5, r3, ip
   1eb2c:	ea83 0507 	eor.w	r5, r3, r7
   1eb30:	faa5 f58c 	sel	r5, r5, ip
   1eb34:	4325      	orrs	r5, r4
   1eb36:	d0db      	beq.n	1eaf0 <strcmp+0x68>
   1eb38:	b99c      	cbnz	r4, 1eb62 <strcmp+0xda>
   1eb3a:	ba2d      	rev	r5, r5
   1eb3c:	fab5 f485 	clz	r4, r5
   1eb40:	f024 0407 	bic.w	r4, r4, #7
   1eb44:	fa27 f104 	lsr.w	r1, r7, r4
   1eb48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1eb4c:	fa23 f304 	lsr.w	r3, r3, r4
   1eb50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1eb54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eb58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb5c:	eba0 0001 	sub.w	r0, r0, r1
   1eb60:	4770      	bx	lr
   1eb62:	ba24      	rev	r4, r4
   1eb64:	fab4 f484 	clz	r4, r4
   1eb68:	f024 0407 	bic.w	r4, r4, #7
   1eb6c:	fa26 f104 	lsr.w	r1, r6, r4
   1eb70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1eb74:	fa22 f204 	lsr.w	r2, r2, r4
   1eb78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1eb7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eb80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb84:	eba0 0001 	sub.w	r0, r0, r1
   1eb88:	4770      	bx	lr
   1eb8a:	f014 0f03 	tst.w	r4, #3
   1eb8e:	d13c      	bne.n	1ec0a <strcmp+0x182>
   1eb90:	f010 0403 	ands.w	r4, r0, #3
   1eb94:	d128      	bne.n	1ebe8 <strcmp+0x160>
   1eb96:	f850 2b08 	ldr.w	r2, [r0], #8
   1eb9a:	f851 3b08 	ldr.w	r3, [r1], #8
   1eb9e:	fa82 f54c 	uadd8	r5, r2, ip
   1eba2:	ea82 0503 	eor.w	r5, r2, r3
   1eba6:	faa5 f58c 	sel	r5, r5, ip
   1ebaa:	b95d      	cbnz	r5, 1ebc4 <strcmp+0x13c>
   1ebac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1ebb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ebb4:	fa82 f54c 	uadd8	r5, r2, ip
   1ebb8:	ea82 0503 	eor.w	r5, r2, r3
   1ebbc:	faa5 f58c 	sel	r5, r5, ip
   1ebc0:	2d00      	cmp	r5, #0
   1ebc2:	d0e8      	beq.n	1eb96 <strcmp+0x10e>
   1ebc4:	ba2d      	rev	r5, r5
   1ebc6:	fab5 f485 	clz	r4, r5
   1ebca:	f024 0407 	bic.w	r4, r4, #7
   1ebce:	fa23 f104 	lsr.w	r1, r3, r4
   1ebd2:	fa22 f204 	lsr.w	r2, r2, r4
   1ebd6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ebda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ebde:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ebe2:	eba0 0001 	sub.w	r0, r0, r1
   1ebe6:	4770      	bx	lr
   1ebe8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1ebec:	f020 0003 	bic.w	r0, r0, #3
   1ebf0:	f850 2b08 	ldr.w	r2, [r0], #8
   1ebf4:	f021 0103 	bic.w	r1, r1, #3
   1ebf8:	f851 3b08 	ldr.w	r3, [r1], #8
   1ebfc:	fa0c f404 	lsl.w	r4, ip, r4
   1ec00:	ea62 0204 	orn	r2, r2, r4
   1ec04:	ea63 0304 	orn	r3, r3, r4
   1ec08:	e7c9      	b.n	1eb9e <strcmp+0x116>
   1ec0a:	f010 0403 	ands.w	r4, r0, #3
   1ec0e:	d01a      	beq.n	1ec46 <strcmp+0x1be>
   1ec10:	eba1 0104 	sub.w	r1, r1, r4
   1ec14:	f020 0003 	bic.w	r0, r0, #3
   1ec18:	07e4      	lsls	r4, r4, #31
   1ec1a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec1e:	d006      	beq.n	1ec2e <strcmp+0x1a6>
   1ec20:	d20f      	bcs.n	1ec42 <strcmp+0x1ba>
   1ec22:	788b      	ldrb	r3, [r1, #2]
   1ec24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1ec28:	1ae4      	subs	r4, r4, r3
   1ec2a:	d106      	bne.n	1ec3a <strcmp+0x1b2>
   1ec2c:	b12b      	cbz	r3, 1ec3a <strcmp+0x1b2>
   1ec2e:	78cb      	ldrb	r3, [r1, #3]
   1ec30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1ec34:	1ae4      	subs	r4, r4, r3
   1ec36:	d100      	bne.n	1ec3a <strcmp+0x1b2>
   1ec38:	b91b      	cbnz	r3, 1ec42 <strcmp+0x1ba>
   1ec3a:	4620      	mov	r0, r4
   1ec3c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1ec40:	4770      	bx	lr
   1ec42:	f101 0104 	add.w	r1, r1, #4
   1ec46:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec4a:	07cc      	lsls	r4, r1, #31
   1ec4c:	f021 0103 	bic.w	r1, r1, #3
   1ec50:	f851 3b04 	ldr.w	r3, [r1], #4
   1ec54:	d848      	bhi.n	1ece8 <strcmp+0x260>
   1ec56:	d224      	bcs.n	1eca2 <strcmp+0x21a>
   1ec58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1ec5c:	fa82 f54c 	uadd8	r5, r2, ip
   1ec60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1ec64:	faa5 f58c 	sel	r5, r5, ip
   1ec68:	d10a      	bne.n	1ec80 <strcmp+0x1f8>
   1ec6a:	b965      	cbnz	r5, 1ec86 <strcmp+0x1fe>
   1ec6c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ec70:	ea84 0402 	eor.w	r4, r4, r2
   1ec74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1ec78:	d10e      	bne.n	1ec98 <strcmp+0x210>
   1ec7a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec7e:	e7eb      	b.n	1ec58 <strcmp+0x1d0>
   1ec80:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1ec84:	e055      	b.n	1ed32 <strcmp+0x2aa>
   1ec86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1ec8a:	d14d      	bne.n	1ed28 <strcmp+0x2a0>
   1ec8c:	7808      	ldrb	r0, [r1, #0]
   1ec8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec92:	f1c0 0000 	rsb	r0, r0, #0
   1ec96:	4770      	bx	lr
   1ec98:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ec9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1eca0:	e047      	b.n	1ed32 <strcmp+0x2aa>
   1eca2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1eca6:	fa82 f54c 	uadd8	r5, r2, ip
   1ecaa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1ecae:	faa5 f58c 	sel	r5, r5, ip
   1ecb2:	d10a      	bne.n	1ecca <strcmp+0x242>
   1ecb4:	b965      	cbnz	r5, 1ecd0 <strcmp+0x248>
   1ecb6:	f851 3b04 	ldr.w	r3, [r1], #4
   1ecba:	ea84 0402 	eor.w	r4, r4, r2
   1ecbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ecc2:	d10c      	bne.n	1ecde <strcmp+0x256>
   1ecc4:	f850 2b04 	ldr.w	r2, [r0], #4
   1ecc8:	e7eb      	b.n	1eca2 <strcmp+0x21a>
   1ecca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ecce:	e030      	b.n	1ed32 <strcmp+0x2aa>
   1ecd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ecd4:	d128      	bne.n	1ed28 <strcmp+0x2a0>
   1ecd6:	880b      	ldrh	r3, [r1, #0]
   1ecd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ecdc:	e029      	b.n	1ed32 <strcmp+0x2aa>
   1ecde:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ece2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1ece6:	e024      	b.n	1ed32 <strcmp+0x2aa>
   1ece8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1ecec:	fa82 f54c 	uadd8	r5, r2, ip
   1ecf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1ecf4:	faa5 f58c 	sel	r5, r5, ip
   1ecf8:	d10a      	bne.n	1ed10 <strcmp+0x288>
   1ecfa:	b965      	cbnz	r5, 1ed16 <strcmp+0x28e>
   1ecfc:	f851 3b04 	ldr.w	r3, [r1], #4
   1ed00:	ea84 0402 	eor.w	r4, r4, r2
   1ed04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1ed08:	d109      	bne.n	1ed1e <strcmp+0x296>
   1ed0a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ed0e:	e7eb      	b.n	1ece8 <strcmp+0x260>
   1ed10:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ed14:	e00d      	b.n	1ed32 <strcmp+0x2aa>
   1ed16:	f015 0fff 	tst.w	r5, #255	; 0xff
   1ed1a:	d105      	bne.n	1ed28 <strcmp+0x2a0>
   1ed1c:	680b      	ldr	r3, [r1, #0]
   1ed1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1ed22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ed26:	e004      	b.n	1ed32 <strcmp+0x2aa>
   1ed28:	f04f 0000 	mov.w	r0, #0
   1ed2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ed30:	4770      	bx	lr
   1ed32:	ba12      	rev	r2, r2
   1ed34:	ba1b      	rev	r3, r3
   1ed36:	fa82 f44c 	uadd8	r4, r2, ip
   1ed3a:	ea82 0403 	eor.w	r4, r2, r3
   1ed3e:	faa4 f58c 	sel	r5, r4, ip
   1ed42:	fab5 f485 	clz	r4, r5
   1ed46:	fa02 f204 	lsl.w	r2, r2, r4
   1ed4a:	fa03 f304 	lsl.w	r3, r3, r4
   1ed4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1ed52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ed56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1ed5a:	4770      	bx	lr
	...

0001ed80 <strlen>:
   1ed80:	f890 f000 	pld	[r0]
   1ed84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1ed88:	f020 0107 	bic.w	r1, r0, #7
   1ed8c:	f06f 0c00 	mvn.w	ip, #0
   1ed90:	f010 0407 	ands.w	r4, r0, #7
   1ed94:	f891 f020 	pld	[r1, #32]
   1ed98:	f040 8049 	bne.w	1ee2e <strlen+0xae>
   1ed9c:	f04f 0400 	mov.w	r4, #0
   1eda0:	f06f 0007 	mvn.w	r0, #7
   1eda4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eda8:	f891 f040 	pld	[r1, #64]	; 0x40
   1edac:	f100 0008 	add.w	r0, r0, #8
   1edb0:	fa82 f24c 	uadd8	r2, r2, ip
   1edb4:	faa4 f28c 	sel	r2, r4, ip
   1edb8:	fa83 f34c 	uadd8	r3, r3, ip
   1edbc:	faa2 f38c 	sel	r3, r2, ip
   1edc0:	bb4b      	cbnz	r3, 1ee16 <strlen+0x96>
   1edc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1edc6:	fa82 f24c 	uadd8	r2, r2, ip
   1edca:	f100 0008 	add.w	r0, r0, #8
   1edce:	faa4 f28c 	sel	r2, r4, ip
   1edd2:	fa83 f34c 	uadd8	r3, r3, ip
   1edd6:	faa2 f38c 	sel	r3, r2, ip
   1edda:	b9e3      	cbnz	r3, 1ee16 <strlen+0x96>
   1eddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1ede0:	fa82 f24c 	uadd8	r2, r2, ip
   1ede4:	f100 0008 	add.w	r0, r0, #8
   1ede8:	faa4 f28c 	sel	r2, r4, ip
   1edec:	fa83 f34c 	uadd8	r3, r3, ip
   1edf0:	faa2 f38c 	sel	r3, r2, ip
   1edf4:	b97b      	cbnz	r3, 1ee16 <strlen+0x96>
   1edf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1edfa:	f101 0120 	add.w	r1, r1, #32
   1edfe:	fa82 f24c 	uadd8	r2, r2, ip
   1ee02:	f100 0008 	add.w	r0, r0, #8
   1ee06:	faa4 f28c 	sel	r2, r4, ip
   1ee0a:	fa83 f34c 	uadd8	r3, r3, ip
   1ee0e:	faa2 f38c 	sel	r3, r2, ip
   1ee12:	2b00      	cmp	r3, #0
   1ee14:	d0c6      	beq.n	1eda4 <strlen+0x24>
   1ee16:	2a00      	cmp	r2, #0
   1ee18:	bf04      	itt	eq
   1ee1a:	3004      	addeq	r0, #4
   1ee1c:	461a      	moveq	r2, r3
   1ee1e:	ba12      	rev	r2, r2
   1ee20:	fab2 f282 	clz	r2, r2
   1ee24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1ee28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1ee2c:	4770      	bx	lr
   1ee2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ee32:	f004 0503 	and.w	r5, r4, #3
   1ee36:	f1c4 0000 	rsb	r0, r4, #0
   1ee3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ee3e:	f014 0f04 	tst.w	r4, #4
   1ee42:	f891 f040 	pld	[r1, #64]	; 0x40
   1ee46:	fa0c f505 	lsl.w	r5, ip, r5
   1ee4a:	ea62 0205 	orn	r2, r2, r5
   1ee4e:	bf1c      	itt	ne
   1ee50:	ea63 0305 	ornne	r3, r3, r5
   1ee54:	4662      	movne	r2, ip
   1ee56:	f04f 0400 	mov.w	r4, #0
   1ee5a:	e7a9      	b.n	1edb0 <strlen+0x30>

0001ee5c <strncmp>:
   1ee5c:	2a00      	cmp	r2, #0
   1ee5e:	d041      	beq.n	1eee4 <strncmp+0x88>
   1ee60:	ea40 0301 	orr.w	r3, r0, r1
   1ee64:	f013 0303 	ands.w	r3, r3, #3
   1ee68:	b4f0      	push	{r4, r5, r6, r7}
   1ee6a:	d125      	bne.n	1eeb8 <strncmp+0x5c>
   1ee6c:	2a03      	cmp	r2, #3
   1ee6e:	d923      	bls.n	1eeb8 <strncmp+0x5c>
   1ee70:	6804      	ldr	r4, [r0, #0]
   1ee72:	680d      	ldr	r5, [r1, #0]
   1ee74:	42ac      	cmp	r4, r5
   1ee76:	d11f      	bne.n	1eeb8 <strncmp+0x5c>
   1ee78:	3a04      	subs	r2, #4
   1ee7a:	d038      	beq.n	1eeee <strncmp+0x92>
   1ee7c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ee80:	ea25 0404 	bic.w	r4, r5, r4
   1ee84:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ee88:	d12e      	bne.n	1eee8 <strncmp+0x8c>
   1ee8a:	3004      	adds	r0, #4
   1ee8c:	3104      	adds	r1, #4
   1ee8e:	e00f      	b.n	1eeb0 <strncmp+0x54>
   1ee90:	f850 3b04 	ldr.w	r3, [r0], #4
   1ee94:	680e      	ldr	r6, [r1, #0]
   1ee96:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ee9a:	42b3      	cmp	r3, r6
   1ee9c:	ea24 0403 	bic.w	r4, r4, r3
   1eea0:	f101 0104 	add.w	r1, r1, #4
   1eea4:	d126      	bne.n	1eef4 <strncmp+0x98>
   1eea6:	3a04      	subs	r2, #4
   1eea8:	d021      	beq.n	1eeee <strncmp+0x92>
   1eeaa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1eeae:	d11b      	bne.n	1eee8 <strncmp+0x8c>
   1eeb0:	2a03      	cmp	r2, #3
   1eeb2:	4607      	mov	r7, r0
   1eeb4:	460d      	mov	r5, r1
   1eeb6:	d8eb      	bhi.n	1ee90 <strncmp+0x34>
   1eeb8:	7805      	ldrb	r5, [r0, #0]
   1eeba:	780c      	ldrb	r4, [r1, #0]
   1eebc:	42ac      	cmp	r4, r5
   1eebe:	f102 33ff 	add.w	r3, r2, #4294967295
   1eec2:	d11a      	bne.n	1eefa <strncmp+0x9e>
   1eec4:	b183      	cbz	r3, 1eee8 <strncmp+0x8c>
   1eec6:	b914      	cbnz	r4, 1eece <strncmp+0x72>
   1eec8:	e00e      	b.n	1eee8 <strncmp+0x8c>
   1eeca:	b16b      	cbz	r3, 1eee8 <strncmp+0x8c>
   1eecc:	b17a      	cbz	r2, 1eeee <strncmp+0x92>
   1eece:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1eed2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1eed6:	42a2      	cmp	r2, r4
   1eed8:	f103 33ff 	add.w	r3, r3, #4294967295
   1eedc:	d0f5      	beq.n	1eeca <strncmp+0x6e>
   1eede:	1b10      	subs	r0, r2, r4
   1eee0:	bcf0      	pop	{r4, r5, r6, r7}
   1eee2:	4770      	bx	lr
   1eee4:	4610      	mov	r0, r2
   1eee6:	4770      	bx	lr
   1eee8:	2000      	movs	r0, #0
   1eeea:	bcf0      	pop	{r4, r5, r6, r7}
   1eeec:	4770      	bx	lr
   1eeee:	4610      	mov	r0, r2
   1eef0:	bcf0      	pop	{r4, r5, r6, r7}
   1eef2:	4770      	bx	lr
   1eef4:	4629      	mov	r1, r5
   1eef6:	4638      	mov	r0, r7
   1eef8:	e7de      	b.n	1eeb8 <strncmp+0x5c>
   1eefa:	462a      	mov	r2, r5
   1eefc:	e7ef      	b.n	1eede <strncmp+0x82>
   1eefe:	bf00      	nop

0001ef00 <_svfprintf_r>:
   1ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef04:	b0c1      	sub	sp, #260	; 0x104
   1ef06:	460c      	mov	r4, r1
   1ef08:	9107      	str	r1, [sp, #28]
   1ef0a:	4692      	mov	sl, r2
   1ef0c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ef0e:	9008      	str	r0, [sp, #32]
   1ef10:	f002 fde2 	bl	21ad8 <_localeconv_r>
   1ef14:	6803      	ldr	r3, [r0, #0]
   1ef16:	9314      	str	r3, [sp, #80]	; 0x50
   1ef18:	4618      	mov	r0, r3
   1ef1a:	f7ff ff31 	bl	1ed80 <strlen>
   1ef1e:	89a3      	ldrh	r3, [r4, #12]
   1ef20:	9013      	str	r0, [sp, #76]	; 0x4c
   1ef22:	0619      	lsls	r1, r3, #24
   1ef24:	d503      	bpl.n	1ef2e <_svfprintf_r+0x2e>
   1ef26:	6923      	ldr	r3, [r4, #16]
   1ef28:	2b00      	cmp	r3, #0
   1ef2a:	f001 801b 	beq.w	1ff64 <_svfprintf_r+0x1064>
   1ef2e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f180 <_svfprintf_r+0x280>
   1ef32:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ef36:	2300      	movs	r3, #0
   1ef38:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1ef3c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ef3e:	9325      	str	r3, [sp, #148]	; 0x94
   1ef40:	9324      	str	r3, [sp, #144]	; 0x90
   1ef42:	9312      	str	r3, [sp, #72]	; 0x48
   1ef44:	9315      	str	r3, [sp, #84]	; 0x54
   1ef46:	9305      	str	r3, [sp, #20]
   1ef48:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1ef4c:	46c8      	mov	r8, r9
   1ef4e:	f89a 3000 	ldrb.w	r3, [sl]
   1ef52:	4654      	mov	r4, sl
   1ef54:	b1e3      	cbz	r3, 1ef90 <_svfprintf_r+0x90>
   1ef56:	2b25      	cmp	r3, #37	; 0x25
   1ef58:	d102      	bne.n	1ef60 <_svfprintf_r+0x60>
   1ef5a:	e019      	b.n	1ef90 <_svfprintf_r+0x90>
   1ef5c:	2b25      	cmp	r3, #37	; 0x25
   1ef5e:	d003      	beq.n	1ef68 <_svfprintf_r+0x68>
   1ef60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ef64:	2b00      	cmp	r3, #0
   1ef66:	d1f9      	bne.n	1ef5c <_svfprintf_r+0x5c>
   1ef68:	eba4 050a 	sub.w	r5, r4, sl
   1ef6c:	b185      	cbz	r5, 1ef90 <_svfprintf_r+0x90>
   1ef6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ef70:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ef72:	f8c8 a000 	str.w	sl, [r8]
   1ef76:	3301      	adds	r3, #1
   1ef78:	442a      	add	r2, r5
   1ef7a:	2b07      	cmp	r3, #7
   1ef7c:	f8c8 5004 	str.w	r5, [r8, #4]
   1ef80:	9225      	str	r2, [sp, #148]	; 0x94
   1ef82:	9324      	str	r3, [sp, #144]	; 0x90
   1ef84:	dc7f      	bgt.n	1f086 <_svfprintf_r+0x186>
   1ef86:	f108 0808 	add.w	r8, r8, #8
   1ef8a:	9b05      	ldr	r3, [sp, #20]
   1ef8c:	442b      	add	r3, r5
   1ef8e:	9305      	str	r3, [sp, #20]
   1ef90:	7823      	ldrb	r3, [r4, #0]
   1ef92:	2b00      	cmp	r3, #0
   1ef94:	d07f      	beq.n	1f096 <_svfprintf_r+0x196>
   1ef96:	2300      	movs	r3, #0
   1ef98:	461a      	mov	r2, r3
   1ef9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1ef9e:	4619      	mov	r1, r3
   1efa0:	9309      	str	r3, [sp, #36]	; 0x24
   1efa2:	469b      	mov	fp, r3
   1efa4:	f04f 30ff 	mov.w	r0, #4294967295
   1efa8:	7863      	ldrb	r3, [r4, #1]
   1efaa:	9006      	str	r0, [sp, #24]
   1efac:	f104 0a01 	add.w	sl, r4, #1
   1efb0:	f10a 0a01 	add.w	sl, sl, #1
   1efb4:	f1a3 0020 	sub.w	r0, r3, #32
   1efb8:	2858      	cmp	r0, #88	; 0x58
   1efba:	f200 83d3 	bhi.w	1f764 <_svfprintf_r+0x864>
   1efbe:	e8df f010 	tbh	[pc, r0, lsl #1]
   1efc2:	023f      	.short	0x023f
   1efc4:	03d103d1 	.word	0x03d103d1
   1efc8:	03d10247 	.word	0x03d10247
   1efcc:	03d103d1 	.word	0x03d103d1
   1efd0:	03d103d1 	.word	0x03d103d1
   1efd4:	024c03d1 	.word	0x024c03d1
   1efd8:	03d1020a 	.word	0x03d1020a
   1efdc:	0273005d 	.word	0x0273005d
   1efe0:	028e03d1 	.word	0x028e03d1
   1efe4:	03c103c1 	.word	0x03c103c1
   1efe8:	03c103c1 	.word	0x03c103c1
   1efec:	03c103c1 	.word	0x03c103c1
   1eff0:	03c103c1 	.word	0x03c103c1
   1eff4:	03d103c1 	.word	0x03d103c1
   1eff8:	03d103d1 	.word	0x03d103d1
   1effc:	03d103d1 	.word	0x03d103d1
   1f000:	03d103d1 	.word	0x03d103d1
   1f004:	03d103d1 	.word	0x03d103d1
   1f008:	033f03d1 	.word	0x033f03d1
   1f00c:	03d1035f 	.word	0x03d1035f
   1f010:	03d1035f 	.word	0x03d1035f
   1f014:	03d103d1 	.word	0x03d103d1
   1f018:	03aa03d1 	.word	0x03aa03d1
   1f01c:	03d103d1 	.word	0x03d103d1
   1f020:	03d103af 	.word	0x03d103af
   1f024:	03d103d1 	.word	0x03d103d1
   1f028:	03d103d1 	.word	0x03d103d1
   1f02c:	03d10261 	.word	0x03d10261
   1f030:	032603d1 	.word	0x032603d1
   1f034:	03d103d1 	.word	0x03d103d1
   1f038:	03d103d1 	.word	0x03d103d1
   1f03c:	03d103d1 	.word	0x03d103d1
   1f040:	03d103d1 	.word	0x03d103d1
   1f044:	03d103d1 	.word	0x03d103d1
   1f048:	02e302ce 	.word	0x02e302ce
   1f04c:	035f035f 	.word	0x035f035f
   1f050:	0293035f 	.word	0x0293035f
   1f054:	03d102e3 	.word	0x03d102e3
   1f058:	029803d1 	.word	0x029803d1
   1f05c:	02a503d1 	.word	0x02a503d1
   1f060:	02bc01d3 	.word	0x02bc01d3
   1f064:	03d1020f 	.word	0x03d1020f
   1f068:	03d101e8 	.word	0x03d101e8
   1f06c:	03d1007e 	.word	0x03d1007e
   1f070:	021403d1 	.word	0x021403d1
   1f074:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f076:	930b      	str	r3, [sp, #44]	; 0x2c
   1f078:	4240      	negs	r0, r0
   1f07a:	9009      	str	r0, [sp, #36]	; 0x24
   1f07c:	f04b 0b04 	orr.w	fp, fp, #4
   1f080:	f89a 3000 	ldrb.w	r3, [sl]
   1f084:	e794      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f086:	aa23      	add	r2, sp, #140	; 0x8c
   1f088:	9907      	ldr	r1, [sp, #28]
   1f08a:	9808      	ldr	r0, [sp, #32]
   1f08c:	f003 f8ea 	bl	22264 <__ssprint_r>
   1f090:	b940      	cbnz	r0, 1f0a4 <_svfprintf_r+0x1a4>
   1f092:	46c8      	mov	r8, r9
   1f094:	e779      	b.n	1ef8a <_svfprintf_r+0x8a>
   1f096:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f098:	b123      	cbz	r3, 1f0a4 <_svfprintf_r+0x1a4>
   1f09a:	9808      	ldr	r0, [sp, #32]
   1f09c:	9907      	ldr	r1, [sp, #28]
   1f09e:	aa23      	add	r2, sp, #140	; 0x8c
   1f0a0:	f003 f8e0 	bl	22264 <__ssprint_r>
   1f0a4:	9b07      	ldr	r3, [sp, #28]
   1f0a6:	899b      	ldrh	r3, [r3, #12]
   1f0a8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f0ac:	9b05      	ldr	r3, [sp, #20]
   1f0ae:	bf18      	it	ne
   1f0b0:	f04f 33ff 	movne.w	r3, #4294967295
   1f0b4:	9305      	str	r3, [sp, #20]
   1f0b6:	9805      	ldr	r0, [sp, #20]
   1f0b8:	b041      	add	sp, #260	; 0x104
   1f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0be:	f01b 0f20 	tst.w	fp, #32
   1f0c2:	930d      	str	r3, [sp, #52]	; 0x34
   1f0c4:	f040 81e5 	bne.w	1f492 <_svfprintf_r+0x592>
   1f0c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f0ca:	f01b 0f10 	tst.w	fp, #16
   1f0ce:	4613      	mov	r3, r2
   1f0d0:	f040 8588 	bne.w	1fbe4 <_svfprintf_r+0xce4>
   1f0d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f0d8:	f000 8584 	beq.w	1fbe4 <_svfprintf_r+0xce4>
   1f0dc:	8814      	ldrh	r4, [r2, #0]
   1f0de:	3204      	adds	r2, #4
   1f0e0:	2500      	movs	r5, #0
   1f0e2:	2301      	movs	r3, #1
   1f0e4:	920b      	str	r2, [sp, #44]	; 0x2c
   1f0e6:	2700      	movs	r7, #0
   1f0e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f0ec:	9906      	ldr	r1, [sp, #24]
   1f0ee:	1c4a      	adds	r2, r1, #1
   1f0f0:	f000 826d 	beq.w	1f5ce <_svfprintf_r+0x6ce>
   1f0f4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1f0f8:	9203      	str	r2, [sp, #12]
   1f0fa:	ea54 0205 	orrs.w	r2, r4, r5
   1f0fe:	f040 826c 	bne.w	1f5da <_svfprintf_r+0x6da>
   1f102:	2900      	cmp	r1, #0
   1f104:	f040 8451 	bne.w	1f9aa <_svfprintf_r+0xaaa>
   1f108:	2b00      	cmp	r3, #0
   1f10a:	f040 850b 	bne.w	1fb24 <_svfprintf_r+0xc24>
   1f10e:	f01b 0301 	ands.w	r3, fp, #1
   1f112:	930a      	str	r3, [sp, #40]	; 0x28
   1f114:	f000 861a 	beq.w	1fd4c <_svfprintf_r+0xe4c>
   1f118:	ae40      	add	r6, sp, #256	; 0x100
   1f11a:	2330      	movs	r3, #48	; 0x30
   1f11c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f120:	9b06      	ldr	r3, [sp, #24]
   1f122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f124:	4293      	cmp	r3, r2
   1f126:	bfb8      	it	lt
   1f128:	4613      	movlt	r3, r2
   1f12a:	9304      	str	r3, [sp, #16]
   1f12c:	2300      	movs	r3, #0
   1f12e:	930e      	str	r3, [sp, #56]	; 0x38
   1f130:	b117      	cbz	r7, 1f138 <_svfprintf_r+0x238>
   1f132:	9b04      	ldr	r3, [sp, #16]
   1f134:	3301      	adds	r3, #1
   1f136:	9304      	str	r3, [sp, #16]
   1f138:	9b03      	ldr	r3, [sp, #12]
   1f13a:	f013 0302 	ands.w	r3, r3, #2
   1f13e:	930c      	str	r3, [sp, #48]	; 0x30
   1f140:	d002      	beq.n	1f148 <_svfprintf_r+0x248>
   1f142:	9b04      	ldr	r3, [sp, #16]
   1f144:	3302      	adds	r3, #2
   1f146:	9304      	str	r3, [sp, #16]
   1f148:	9b03      	ldr	r3, [sp, #12]
   1f14a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f14e:	f040 8320 	bne.w	1f792 <_svfprintf_r+0x892>
   1f152:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f154:	9a04      	ldr	r2, [sp, #16]
   1f156:	eba3 0b02 	sub.w	fp, r3, r2
   1f15a:	f1bb 0f00 	cmp.w	fp, #0
   1f15e:	f340 8318 	ble.w	1f792 <_svfprintf_r+0x892>
   1f162:	f1bb 0f10 	cmp.w	fp, #16
   1f166:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f168:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f16a:	dd30      	ble.n	1f1ce <_svfprintf_r+0x2ce>
   1f16c:	4643      	mov	r3, r8
   1f16e:	4621      	mov	r1, r4
   1f170:	46a8      	mov	r8, r5
   1f172:	2710      	movs	r7, #16
   1f174:	9c08      	ldr	r4, [sp, #32]
   1f176:	9d07      	ldr	r5, [sp, #28]
   1f178:	e00d      	b.n	1f196 <_svfprintf_r+0x296>
   1f17a:	bf00      	nop
   1f17c:	f3af 8000 	nop.w
	...
   1f188:	f1ab 0b10 	sub.w	fp, fp, #16
   1f18c:	f1bb 0f10 	cmp.w	fp, #16
   1f190:	f103 0308 	add.w	r3, r3, #8
   1f194:	dd18      	ble.n	1f1c8 <_svfprintf_r+0x2c8>
   1f196:	3201      	adds	r2, #1
   1f198:	48b7      	ldr	r0, [pc, #732]	; (1f478 <_svfprintf_r+0x578>)
   1f19a:	9224      	str	r2, [sp, #144]	; 0x90
   1f19c:	3110      	adds	r1, #16
   1f19e:	2a07      	cmp	r2, #7
   1f1a0:	9125      	str	r1, [sp, #148]	; 0x94
   1f1a2:	e883 0081 	stmia.w	r3, {r0, r7}
   1f1a6:	ddef      	ble.n	1f188 <_svfprintf_r+0x288>
   1f1a8:	aa23      	add	r2, sp, #140	; 0x8c
   1f1aa:	4629      	mov	r1, r5
   1f1ac:	4620      	mov	r0, r4
   1f1ae:	f003 f859 	bl	22264 <__ssprint_r>
   1f1b2:	2800      	cmp	r0, #0
   1f1b4:	f47f af76 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f1b8:	f1ab 0b10 	sub.w	fp, fp, #16
   1f1bc:	f1bb 0f10 	cmp.w	fp, #16
   1f1c0:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f1c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f1c4:	464b      	mov	r3, r9
   1f1c6:	dce6      	bgt.n	1f196 <_svfprintf_r+0x296>
   1f1c8:	4645      	mov	r5, r8
   1f1ca:	460c      	mov	r4, r1
   1f1cc:	4698      	mov	r8, r3
   1f1ce:	3201      	adds	r2, #1
   1f1d0:	4ba9      	ldr	r3, [pc, #676]	; (1f478 <_svfprintf_r+0x578>)
   1f1d2:	9224      	str	r2, [sp, #144]	; 0x90
   1f1d4:	445c      	add	r4, fp
   1f1d6:	2a07      	cmp	r2, #7
   1f1d8:	9425      	str	r4, [sp, #148]	; 0x94
   1f1da:	e888 0808 	stmia.w	r8, {r3, fp}
   1f1de:	f300 84a6 	bgt.w	1fb2e <_svfprintf_r+0xc2e>
   1f1e2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f1e6:	f108 0808 	add.w	r8, r8, #8
   1f1ea:	b177      	cbz	r7, 1f20a <_svfprintf_r+0x30a>
   1f1ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f1ee:	3301      	adds	r3, #1
   1f1f0:	3401      	adds	r4, #1
   1f1f2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f1f6:	2201      	movs	r2, #1
   1f1f8:	2b07      	cmp	r3, #7
   1f1fa:	9425      	str	r4, [sp, #148]	; 0x94
   1f1fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f1fe:	e888 0006 	stmia.w	r8, {r1, r2}
   1f202:	f300 83f4 	bgt.w	1f9ee <_svfprintf_r+0xaee>
   1f206:	f108 0808 	add.w	r8, r8, #8
   1f20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f20c:	b16b      	cbz	r3, 1f22a <_svfprintf_r+0x32a>
   1f20e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f210:	3301      	adds	r3, #1
   1f212:	3402      	adds	r4, #2
   1f214:	a91c      	add	r1, sp, #112	; 0x70
   1f216:	2202      	movs	r2, #2
   1f218:	2b07      	cmp	r3, #7
   1f21a:	9425      	str	r4, [sp, #148]	; 0x94
   1f21c:	9324      	str	r3, [sp, #144]	; 0x90
   1f21e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f222:	f300 83d9 	bgt.w	1f9d8 <_svfprintf_r+0xad8>
   1f226:	f108 0808 	add.w	r8, r8, #8
   1f22a:	2d80      	cmp	r5, #128	; 0x80
   1f22c:	f000 8322 	beq.w	1f874 <_svfprintf_r+0x974>
   1f230:	9b06      	ldr	r3, [sp, #24]
   1f232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f234:	1a9f      	subs	r7, r3, r2
   1f236:	2f00      	cmp	r7, #0
   1f238:	dd36      	ble.n	1f2a8 <_svfprintf_r+0x3a8>
   1f23a:	2f10      	cmp	r7, #16
   1f23c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f23e:	4d8f      	ldr	r5, [pc, #572]	; (1f47c <_svfprintf_r+0x57c>)
   1f240:	dd27      	ble.n	1f292 <_svfprintf_r+0x392>
   1f242:	4642      	mov	r2, r8
   1f244:	4621      	mov	r1, r4
   1f246:	46b0      	mov	r8, r6
   1f248:	f04f 0b10 	mov.w	fp, #16
   1f24c:	462e      	mov	r6, r5
   1f24e:	9c08      	ldr	r4, [sp, #32]
   1f250:	9d07      	ldr	r5, [sp, #28]
   1f252:	e004      	b.n	1f25e <_svfprintf_r+0x35e>
   1f254:	3f10      	subs	r7, #16
   1f256:	2f10      	cmp	r7, #16
   1f258:	f102 0208 	add.w	r2, r2, #8
   1f25c:	dd15      	ble.n	1f28a <_svfprintf_r+0x38a>
   1f25e:	3301      	adds	r3, #1
   1f260:	3110      	adds	r1, #16
   1f262:	2b07      	cmp	r3, #7
   1f264:	9125      	str	r1, [sp, #148]	; 0x94
   1f266:	9324      	str	r3, [sp, #144]	; 0x90
   1f268:	e882 0840 	stmia.w	r2, {r6, fp}
   1f26c:	ddf2      	ble.n	1f254 <_svfprintf_r+0x354>
   1f26e:	aa23      	add	r2, sp, #140	; 0x8c
   1f270:	4629      	mov	r1, r5
   1f272:	4620      	mov	r0, r4
   1f274:	f002 fff6 	bl	22264 <__ssprint_r>
   1f278:	2800      	cmp	r0, #0
   1f27a:	f47f af13 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f27e:	3f10      	subs	r7, #16
   1f280:	2f10      	cmp	r7, #16
   1f282:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f284:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f286:	464a      	mov	r2, r9
   1f288:	dce9      	bgt.n	1f25e <_svfprintf_r+0x35e>
   1f28a:	4635      	mov	r5, r6
   1f28c:	460c      	mov	r4, r1
   1f28e:	4646      	mov	r6, r8
   1f290:	4690      	mov	r8, r2
   1f292:	3301      	adds	r3, #1
   1f294:	443c      	add	r4, r7
   1f296:	2b07      	cmp	r3, #7
   1f298:	9425      	str	r4, [sp, #148]	; 0x94
   1f29a:	9324      	str	r3, [sp, #144]	; 0x90
   1f29c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f2a0:	f300 838f 	bgt.w	1f9c2 <_svfprintf_r+0xac2>
   1f2a4:	f108 0808 	add.w	r8, r8, #8
   1f2a8:	9b03      	ldr	r3, [sp, #12]
   1f2aa:	05df      	lsls	r7, r3, #23
   1f2ac:	f100 8273 	bmi.w	1f796 <_svfprintf_r+0x896>
   1f2b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f2b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f2b4:	f8c8 6000 	str.w	r6, [r8]
   1f2b8:	3301      	adds	r3, #1
   1f2ba:	440c      	add	r4, r1
   1f2bc:	2b07      	cmp	r3, #7
   1f2be:	9425      	str	r4, [sp, #148]	; 0x94
   1f2c0:	f8c8 1004 	str.w	r1, [r8, #4]
   1f2c4:	9324      	str	r3, [sp, #144]	; 0x90
   1f2c6:	f300 835b 	bgt.w	1f980 <_svfprintf_r+0xa80>
   1f2ca:	f108 0808 	add.w	r8, r8, #8
   1f2ce:	9b03      	ldr	r3, [sp, #12]
   1f2d0:	075b      	lsls	r3, r3, #29
   1f2d2:	d53a      	bpl.n	1f34a <_svfprintf_r+0x44a>
   1f2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f2d6:	9a04      	ldr	r2, [sp, #16]
   1f2d8:	1a9d      	subs	r5, r3, r2
   1f2da:	2d00      	cmp	r5, #0
   1f2dc:	dd35      	ble.n	1f34a <_svfprintf_r+0x44a>
   1f2de:	2d10      	cmp	r5, #16
   1f2e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f2e2:	dd20      	ble.n	1f326 <_svfprintf_r+0x426>
   1f2e4:	2610      	movs	r6, #16
   1f2e6:	9f08      	ldr	r7, [sp, #32]
   1f2e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f2ec:	e004      	b.n	1f2f8 <_svfprintf_r+0x3f8>
   1f2ee:	3d10      	subs	r5, #16
   1f2f0:	2d10      	cmp	r5, #16
   1f2f2:	f108 0808 	add.w	r8, r8, #8
   1f2f6:	dd16      	ble.n	1f326 <_svfprintf_r+0x426>
   1f2f8:	3301      	adds	r3, #1
   1f2fa:	4a5f      	ldr	r2, [pc, #380]	; (1f478 <_svfprintf_r+0x578>)
   1f2fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f2fe:	3410      	adds	r4, #16
   1f300:	2b07      	cmp	r3, #7
   1f302:	9425      	str	r4, [sp, #148]	; 0x94
   1f304:	e888 0044 	stmia.w	r8, {r2, r6}
   1f308:	ddf1      	ble.n	1f2ee <_svfprintf_r+0x3ee>
   1f30a:	aa23      	add	r2, sp, #140	; 0x8c
   1f30c:	4659      	mov	r1, fp
   1f30e:	4638      	mov	r0, r7
   1f310:	f002 ffa8 	bl	22264 <__ssprint_r>
   1f314:	2800      	cmp	r0, #0
   1f316:	f47f aec5 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f31a:	3d10      	subs	r5, #16
   1f31c:	2d10      	cmp	r5, #16
   1f31e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f320:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f322:	46c8      	mov	r8, r9
   1f324:	dce8      	bgt.n	1f2f8 <_svfprintf_r+0x3f8>
   1f326:	3301      	adds	r3, #1
   1f328:	4a53      	ldr	r2, [pc, #332]	; (1f478 <_svfprintf_r+0x578>)
   1f32a:	9324      	str	r3, [sp, #144]	; 0x90
   1f32c:	442c      	add	r4, r5
   1f32e:	2b07      	cmp	r3, #7
   1f330:	9425      	str	r4, [sp, #148]	; 0x94
   1f332:	e888 0024 	stmia.w	r8, {r2, r5}
   1f336:	dd08      	ble.n	1f34a <_svfprintf_r+0x44a>
   1f338:	aa23      	add	r2, sp, #140	; 0x8c
   1f33a:	9907      	ldr	r1, [sp, #28]
   1f33c:	9808      	ldr	r0, [sp, #32]
   1f33e:	f002 ff91 	bl	22264 <__ssprint_r>
   1f342:	2800      	cmp	r0, #0
   1f344:	f47f aeae 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f348:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f34a:	9b05      	ldr	r3, [sp, #20]
   1f34c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f34e:	9904      	ldr	r1, [sp, #16]
   1f350:	428a      	cmp	r2, r1
   1f352:	bfac      	ite	ge
   1f354:	189b      	addge	r3, r3, r2
   1f356:	185b      	addlt	r3, r3, r1
   1f358:	9305      	str	r3, [sp, #20]
   1f35a:	2c00      	cmp	r4, #0
   1f35c:	f040 831b 	bne.w	1f996 <_svfprintf_r+0xa96>
   1f360:	2300      	movs	r3, #0
   1f362:	9324      	str	r3, [sp, #144]	; 0x90
   1f364:	46c8      	mov	r8, r9
   1f366:	e5f2      	b.n	1ef4e <_svfprintf_r+0x4e>
   1f368:	930d      	str	r3, [sp, #52]	; 0x34
   1f36a:	f01b 0320 	ands.w	r3, fp, #32
   1f36e:	f040 81de 	bne.w	1f72e <_svfprintf_r+0x82e>
   1f372:	f01b 0210 	ands.w	r2, fp, #16
   1f376:	f040 842d 	bne.w	1fbd4 <_svfprintf_r+0xcd4>
   1f37a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f37e:	f000 8429 	beq.w	1fbd4 <_svfprintf_r+0xcd4>
   1f382:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f384:	4613      	mov	r3, r2
   1f386:	460a      	mov	r2, r1
   1f388:	3204      	adds	r2, #4
   1f38a:	880c      	ldrh	r4, [r1, #0]
   1f38c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f38e:	2500      	movs	r5, #0
   1f390:	e6a9      	b.n	1f0e6 <_svfprintf_r+0x1e6>
   1f392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f394:	930d      	str	r3, [sp, #52]	; 0x34
   1f396:	6816      	ldr	r6, [r2, #0]
   1f398:	2400      	movs	r4, #0
   1f39a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f39e:	1d15      	adds	r5, r2, #4
   1f3a0:	2e00      	cmp	r6, #0
   1f3a2:	f000 86b5 	beq.w	20110 <_svfprintf_r+0x1210>
   1f3a6:	9a06      	ldr	r2, [sp, #24]
   1f3a8:	1c53      	adds	r3, r2, #1
   1f3aa:	f000 8617 	beq.w	1ffdc <_svfprintf_r+0x10dc>
   1f3ae:	4621      	mov	r1, r4
   1f3b0:	4630      	mov	r0, r6
   1f3b2:	f7fe ff1d 	bl	1e1f0 <memchr>
   1f3b6:	2800      	cmp	r0, #0
   1f3b8:	f000 8708 	beq.w	201cc <_svfprintf_r+0x12cc>
   1f3bc:	1b83      	subs	r3, r0, r6
   1f3be:	930a      	str	r3, [sp, #40]	; 0x28
   1f3c0:	9406      	str	r4, [sp, #24]
   1f3c2:	950b      	str	r5, [sp, #44]	; 0x2c
   1f3c4:	f8cd b00c 	str.w	fp, [sp, #12]
   1f3c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f3cc:	9304      	str	r3, [sp, #16]
   1f3ce:	940e      	str	r4, [sp, #56]	; 0x38
   1f3d0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f3d4:	e6ac      	b.n	1f130 <_svfprintf_r+0x230>
   1f3d6:	f89a 3000 	ldrb.w	r3, [sl]
   1f3da:	2201      	movs	r2, #1
   1f3dc:	212b      	movs	r1, #43	; 0x2b
   1f3de:	e5e7      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f3e0:	f04b 0b20 	orr.w	fp, fp, #32
   1f3e4:	f89a 3000 	ldrb.w	r3, [sl]
   1f3e8:	e5e2      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f3ea:	930d      	str	r3, [sp, #52]	; 0x34
   1f3ec:	2a00      	cmp	r2, #0
   1f3ee:	f040 87aa 	bne.w	20346 <_svfprintf_r+0x1446>
   1f3f2:	4b23      	ldr	r3, [pc, #140]	; (1f480 <_svfprintf_r+0x580>)
   1f3f4:	9312      	str	r3, [sp, #72]	; 0x48
   1f3f6:	f01b 0f20 	tst.w	fp, #32
   1f3fa:	f040 8112 	bne.w	1f622 <_svfprintf_r+0x722>
   1f3fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f400:	f01b 0f10 	tst.w	fp, #16
   1f404:	4613      	mov	r3, r2
   1f406:	f040 83e0 	bne.w	1fbca <_svfprintf_r+0xcca>
   1f40a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f40e:	f000 83dc 	beq.w	1fbca <_svfprintf_r+0xcca>
   1f412:	3304      	adds	r3, #4
   1f414:	8814      	ldrh	r4, [r2, #0]
   1f416:	930b      	str	r3, [sp, #44]	; 0x2c
   1f418:	2500      	movs	r5, #0
   1f41a:	f01b 0f01 	tst.w	fp, #1
   1f41e:	f000 810d 	beq.w	1f63c <_svfprintf_r+0x73c>
   1f422:	ea54 0305 	orrs.w	r3, r4, r5
   1f426:	f000 8109 	beq.w	1f63c <_svfprintf_r+0x73c>
   1f42a:	2330      	movs	r3, #48	; 0x30
   1f42c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f430:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f434:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f438:	f04b 0b02 	orr.w	fp, fp, #2
   1f43c:	2302      	movs	r3, #2
   1f43e:	e652      	b.n	1f0e6 <_svfprintf_r+0x1e6>
   1f440:	f89a 3000 	ldrb.w	r3, [sl]
   1f444:	2900      	cmp	r1, #0
   1f446:	f47f adb3 	bne.w	1efb0 <_svfprintf_r+0xb0>
   1f44a:	2201      	movs	r2, #1
   1f44c:	2120      	movs	r1, #32
   1f44e:	e5af      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f450:	f04b 0b01 	orr.w	fp, fp, #1
   1f454:	f89a 3000 	ldrb.w	r3, [sl]
   1f458:	e5aa      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f45a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f45c:	6823      	ldr	r3, [r4, #0]
   1f45e:	9309      	str	r3, [sp, #36]	; 0x24
   1f460:	4618      	mov	r0, r3
   1f462:	2800      	cmp	r0, #0
   1f464:	4623      	mov	r3, r4
   1f466:	f103 0304 	add.w	r3, r3, #4
   1f46a:	f6ff ae03 	blt.w	1f074 <_svfprintf_r+0x174>
   1f46e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f470:	f89a 3000 	ldrb.w	r3, [sl]
   1f474:	e59c      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f476:	bf00      	nop
   1f478:	00024ce4 	.word	0x00024ce4
   1f47c:	00024cf4 	.word	0x00024cf4
   1f480:	00024cc4 	.word	0x00024cc4
   1f484:	f04b 0b10 	orr.w	fp, fp, #16
   1f488:	f01b 0f20 	tst.w	fp, #32
   1f48c:	930d      	str	r3, [sp, #52]	; 0x34
   1f48e:	f43f ae1b 	beq.w	1f0c8 <_svfprintf_r+0x1c8>
   1f492:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f494:	3507      	adds	r5, #7
   1f496:	f025 0307 	bic.w	r3, r5, #7
   1f49a:	f103 0208 	add.w	r2, r3, #8
   1f49e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f4a2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f4a4:	2301      	movs	r3, #1
   1f4a6:	e61e      	b.n	1f0e6 <_svfprintf_r+0x1e6>
   1f4a8:	f89a 3000 	ldrb.w	r3, [sl]
   1f4ac:	2b2a      	cmp	r3, #42	; 0x2a
   1f4ae:	f10a 0401 	add.w	r4, sl, #1
   1f4b2:	f000 873b 	beq.w	2032c <_svfprintf_r+0x142c>
   1f4b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f4ba:	2809      	cmp	r0, #9
   1f4bc:	46a2      	mov	sl, r4
   1f4be:	f200 8691 	bhi.w	201e4 <_svfprintf_r+0x12e4>
   1f4c2:	2300      	movs	r3, #0
   1f4c4:	461c      	mov	r4, r3
   1f4c6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f4ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f4ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f4d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f4d6:	2809      	cmp	r0, #9
   1f4d8:	d9f5      	bls.n	1f4c6 <_svfprintf_r+0x5c6>
   1f4da:	9406      	str	r4, [sp, #24]
   1f4dc:	e56a      	b.n	1efb4 <_svfprintf_r+0xb4>
   1f4de:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f4e2:	f89a 3000 	ldrb.w	r3, [sl]
   1f4e6:	e563      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f4e8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f4ec:	f89a 3000 	ldrb.w	r3, [sl]
   1f4f0:	e55e      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f4f2:	f89a 3000 	ldrb.w	r3, [sl]
   1f4f6:	2b6c      	cmp	r3, #108	; 0x6c
   1f4f8:	bf03      	ittte	eq
   1f4fa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f4fe:	f04b 0b20 	orreq.w	fp, fp, #32
   1f502:	f10a 0a01 	addeq.w	sl, sl, #1
   1f506:	f04b 0b10 	orrne.w	fp, fp, #16
   1f50a:	e551      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f50c:	2a00      	cmp	r2, #0
   1f50e:	f040 871e 	bne.w	2034e <_svfprintf_r+0x144e>
   1f512:	f01b 0f20 	tst.w	fp, #32
   1f516:	f040 8509 	bne.w	1ff2c <_svfprintf_r+0x102c>
   1f51a:	f01b 0f10 	tst.w	fp, #16
   1f51e:	f040 84bc 	bne.w	1fe9a <_svfprintf_r+0xf9a>
   1f522:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f526:	f000 84b8 	beq.w	1fe9a <_svfprintf_r+0xf9a>
   1f52a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f52c:	6813      	ldr	r3, [r2, #0]
   1f52e:	3204      	adds	r2, #4
   1f530:	920b      	str	r2, [sp, #44]	; 0x2c
   1f532:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f536:	801a      	strh	r2, [r3, #0]
   1f538:	e509      	b.n	1ef4e <_svfprintf_r+0x4e>
   1f53a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f53c:	4bb9      	ldr	r3, [pc, #740]	; (1f824 <_svfprintf_r+0x924>)
   1f53e:	680c      	ldr	r4, [r1, #0]
   1f540:	9312      	str	r3, [sp, #72]	; 0x48
   1f542:	2230      	movs	r2, #48	; 0x30
   1f544:	2378      	movs	r3, #120	; 0x78
   1f546:	3104      	adds	r1, #4
   1f548:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f54c:	930d      	str	r3, [sp, #52]	; 0x34
   1f54e:	f04b 0b02 	orr.w	fp, fp, #2
   1f552:	910b      	str	r1, [sp, #44]	; 0x2c
   1f554:	2500      	movs	r5, #0
   1f556:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f55a:	2302      	movs	r3, #2
   1f55c:	e5c3      	b.n	1f0e6 <_svfprintf_r+0x1e6>
   1f55e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f560:	930d      	str	r3, [sp, #52]	; 0x34
   1f562:	680a      	ldr	r2, [r1, #0]
   1f564:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f568:	2300      	movs	r3, #0
   1f56a:	460a      	mov	r2, r1
   1f56c:	461f      	mov	r7, r3
   1f56e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f572:	3204      	adds	r2, #4
   1f574:	2301      	movs	r3, #1
   1f576:	9304      	str	r3, [sp, #16]
   1f578:	f8cd b00c 	str.w	fp, [sp, #12]
   1f57c:	9706      	str	r7, [sp, #24]
   1f57e:	970e      	str	r7, [sp, #56]	; 0x38
   1f580:	920b      	str	r2, [sp, #44]	; 0x2c
   1f582:	930a      	str	r3, [sp, #40]	; 0x28
   1f584:	ae26      	add	r6, sp, #152	; 0x98
   1f586:	e5d7      	b.n	1f138 <_svfprintf_r+0x238>
   1f588:	930d      	str	r3, [sp, #52]	; 0x34
   1f58a:	2a00      	cmp	r2, #0
   1f58c:	f040 86fe 	bne.w	2038c <_svfprintf_r+0x148c>
   1f590:	f01b 0f20 	tst.w	fp, #32
   1f594:	d15d      	bne.n	1f652 <_svfprintf_r+0x752>
   1f596:	f01b 0f10 	tst.w	fp, #16
   1f59a:	f040 8335 	bne.w	1fc08 <_svfprintf_r+0xd08>
   1f59e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f5a2:	f000 8331 	beq.w	1fc08 <_svfprintf_r+0xd08>
   1f5a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f5a8:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f5ac:	3104      	adds	r1, #4
   1f5ae:	17e5      	asrs	r5, r4, #31
   1f5b0:	4622      	mov	r2, r4
   1f5b2:	462b      	mov	r3, r5
   1f5b4:	910b      	str	r1, [sp, #44]	; 0x2c
   1f5b6:	2a00      	cmp	r2, #0
   1f5b8:	f173 0300 	sbcs.w	r3, r3, #0
   1f5bc:	db58      	blt.n	1f670 <_svfprintf_r+0x770>
   1f5be:	9906      	ldr	r1, [sp, #24]
   1f5c0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f5c4:	1c4a      	adds	r2, r1, #1
   1f5c6:	f04f 0301 	mov.w	r3, #1
   1f5ca:	f47f ad93 	bne.w	1f0f4 <_svfprintf_r+0x1f4>
   1f5ce:	ea54 0205 	orrs.w	r2, r4, r5
   1f5d2:	f000 81ec 	beq.w	1f9ae <_svfprintf_r+0xaae>
   1f5d6:	f8cd b00c 	str.w	fp, [sp, #12]
   1f5da:	2b01      	cmp	r3, #1
   1f5dc:	f000 8283 	beq.w	1fae6 <_svfprintf_r+0xbe6>
   1f5e0:	2b02      	cmp	r3, #2
   1f5e2:	f040 8213 	bne.w	1fa0c <_svfprintf_r+0xb0c>
   1f5e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f5e8:	464e      	mov	r6, r9
   1f5ea:	0923      	lsrs	r3, r4, #4
   1f5ec:	f004 010f 	and.w	r1, r4, #15
   1f5f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f5f4:	092a      	lsrs	r2, r5, #4
   1f5f6:	461c      	mov	r4, r3
   1f5f8:	4615      	mov	r5, r2
   1f5fa:	5c43      	ldrb	r3, [r0, r1]
   1f5fc:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f600:	ea54 0305 	orrs.w	r3, r4, r5
   1f604:	d1f1      	bne.n	1f5ea <_svfprintf_r+0x6ea>
   1f606:	eba9 0306 	sub.w	r3, r9, r6
   1f60a:	930a      	str	r3, [sp, #40]	; 0x28
   1f60c:	e588      	b.n	1f120 <_svfprintf_r+0x220>
   1f60e:	930d      	str	r3, [sp, #52]	; 0x34
   1f610:	2a00      	cmp	r2, #0
   1f612:	f040 86b7 	bne.w	20384 <_svfprintf_r+0x1484>
   1f616:	4b84      	ldr	r3, [pc, #528]	; (1f828 <_svfprintf_r+0x928>)
   1f618:	9312      	str	r3, [sp, #72]	; 0x48
   1f61a:	f01b 0f20 	tst.w	fp, #32
   1f61e:	f43f aeee 	beq.w	1f3fe <_svfprintf_r+0x4fe>
   1f622:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f624:	3507      	adds	r5, #7
   1f626:	f025 0307 	bic.w	r3, r5, #7
   1f62a:	f103 0208 	add.w	r2, r3, #8
   1f62e:	f01b 0f01 	tst.w	fp, #1
   1f632:	920b      	str	r2, [sp, #44]	; 0x2c
   1f634:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f638:	f47f aef3 	bne.w	1f422 <_svfprintf_r+0x522>
   1f63c:	2302      	movs	r3, #2
   1f63e:	e552      	b.n	1f0e6 <_svfprintf_r+0x1e6>
   1f640:	930d      	str	r3, [sp, #52]	; 0x34
   1f642:	2a00      	cmp	r2, #0
   1f644:	f040 869a 	bne.w	2037c <_svfprintf_r+0x147c>
   1f648:	f04b 0b10 	orr.w	fp, fp, #16
   1f64c:	f01b 0f20 	tst.w	fp, #32
   1f650:	d0a1      	beq.n	1f596 <_svfprintf_r+0x696>
   1f652:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f654:	3507      	adds	r5, #7
   1f656:	f025 0507 	bic.w	r5, r5, #7
   1f65a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f65e:	2a00      	cmp	r2, #0
   1f660:	f105 0108 	add.w	r1, r5, #8
   1f664:	461d      	mov	r5, r3
   1f666:	f173 0300 	sbcs.w	r3, r3, #0
   1f66a:	910b      	str	r1, [sp, #44]	; 0x2c
   1f66c:	4614      	mov	r4, r2
   1f66e:	daa6      	bge.n	1f5be <_svfprintf_r+0x6be>
   1f670:	272d      	movs	r7, #45	; 0x2d
   1f672:	4264      	negs	r4, r4
   1f674:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f678:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f67c:	2301      	movs	r3, #1
   1f67e:	e535      	b.n	1f0ec <_svfprintf_r+0x1ec>
   1f680:	930d      	str	r3, [sp, #52]	; 0x34
   1f682:	2a00      	cmp	r2, #0
   1f684:	f040 8676 	bne.w	20374 <_svfprintf_r+0x1474>
   1f688:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f68a:	f01b 0f08 	tst.w	fp, #8
   1f68e:	f105 0507 	add.w	r5, r5, #7
   1f692:	f000 83e8 	beq.w	1fe66 <_svfprintf_r+0xf66>
   1f696:	f025 0307 	bic.w	r3, r5, #7
   1f69a:	ed93 7b00 	vldr	d7, [r3]
   1f69e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f6a2:	f103 0208 	add.w	r2, r3, #8
   1f6a6:	920b      	str	r2, [sp, #44]	; 0x2c
   1f6a8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f6ac:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f6b0:	9116      	str	r1, [sp, #88]	; 0x58
   1f6b2:	9317      	str	r3, [sp, #92]	; 0x5c
   1f6b4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f6b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f6bc:	4620      	mov	r0, r4
   1f6be:	4629      	mov	r1, r5
   1f6c0:	4b5a      	ldr	r3, [pc, #360]	; (1f82c <_svfprintf_r+0x92c>)
   1f6c2:	f002 ffa5 	bl	22610 <__aeabi_dcmpun>
   1f6c6:	2800      	cmp	r0, #0
   1f6c8:	f040 834f 	bne.w	1fd6a <_svfprintf_r+0xe6a>
   1f6cc:	f04f 32ff 	mov.w	r2, #4294967295
   1f6d0:	4b56      	ldr	r3, [pc, #344]	; (1f82c <_svfprintf_r+0x92c>)
   1f6d2:	4620      	mov	r0, r4
   1f6d4:	4629      	mov	r1, r5
   1f6d6:	f7fc fcd1 	bl	1c07c <__aeabi_dcmple>
   1f6da:	2800      	cmp	r0, #0
   1f6dc:	f040 8345 	bne.w	1fd6a <_svfprintf_r+0xe6a>
   1f6e0:	2200      	movs	r2, #0
   1f6e2:	2300      	movs	r3, #0
   1f6e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f6e8:	f7fc fcbe 	bl	1c068 <__aeabi_dcmplt>
   1f6ec:	2800      	cmp	r0, #0
   1f6ee:	f040 8533 	bne.w	20158 <_svfprintf_r+0x1258>
   1f6f2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f6f6:	4e4e      	ldr	r6, [pc, #312]	; (1f830 <_svfprintf_r+0x930>)
   1f6f8:	4b4e      	ldr	r3, [pc, #312]	; (1f834 <_svfprintf_r+0x934>)
   1f6fa:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f6fe:	9003      	str	r0, [sp, #12]
   1f700:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f702:	2203      	movs	r2, #3
   1f704:	2100      	movs	r1, #0
   1f706:	9204      	str	r2, [sp, #16]
   1f708:	9106      	str	r1, [sp, #24]
   1f70a:	2847      	cmp	r0, #71	; 0x47
   1f70c:	bfd8      	it	le
   1f70e:	461e      	movle	r6, r3
   1f710:	920a      	str	r2, [sp, #40]	; 0x28
   1f712:	910e      	str	r1, [sp, #56]	; 0x38
   1f714:	e50c      	b.n	1f130 <_svfprintf_r+0x230>
   1f716:	f04b 0b08 	orr.w	fp, fp, #8
   1f71a:	f89a 3000 	ldrb.w	r3, [sl]
   1f71e:	e447      	b.n	1efb0 <_svfprintf_r+0xb0>
   1f720:	f04b 0b10 	orr.w	fp, fp, #16
   1f724:	930d      	str	r3, [sp, #52]	; 0x34
   1f726:	f01b 0320 	ands.w	r3, fp, #32
   1f72a:	f43f ae22 	beq.w	1f372 <_svfprintf_r+0x472>
   1f72e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f730:	3507      	adds	r5, #7
   1f732:	f025 0307 	bic.w	r3, r5, #7
   1f736:	f103 0208 	add.w	r2, r3, #8
   1f73a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f73e:	920b      	str	r2, [sp, #44]	; 0x2c
   1f740:	2300      	movs	r3, #0
   1f742:	e4d0      	b.n	1f0e6 <_svfprintf_r+0x1e6>
   1f744:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f748:	2300      	movs	r3, #0
   1f74a:	461c      	mov	r4, r3
   1f74c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f750:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f754:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f758:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f75c:	2809      	cmp	r0, #9
   1f75e:	d9f5      	bls.n	1f74c <_svfprintf_r+0x84c>
   1f760:	9409      	str	r4, [sp, #36]	; 0x24
   1f762:	e427      	b.n	1efb4 <_svfprintf_r+0xb4>
   1f764:	930d      	str	r3, [sp, #52]	; 0x34
   1f766:	2a00      	cmp	r2, #0
   1f768:	f040 85f5 	bne.w	20356 <_svfprintf_r+0x1456>
   1f76c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f76e:	2a00      	cmp	r2, #0
   1f770:	f43f ac91 	beq.w	1f096 <_svfprintf_r+0x196>
   1f774:	2300      	movs	r3, #0
   1f776:	2101      	movs	r1, #1
   1f778:	461f      	mov	r7, r3
   1f77a:	9104      	str	r1, [sp, #16]
   1f77c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f780:	f8cd b00c 	str.w	fp, [sp, #12]
   1f784:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f788:	9306      	str	r3, [sp, #24]
   1f78a:	930e      	str	r3, [sp, #56]	; 0x38
   1f78c:	910a      	str	r1, [sp, #40]	; 0x28
   1f78e:	ae26      	add	r6, sp, #152	; 0x98
   1f790:	e4d2      	b.n	1f138 <_svfprintf_r+0x238>
   1f792:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f794:	e529      	b.n	1f1ea <_svfprintf_r+0x2ea>
   1f796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f798:	2b65      	cmp	r3, #101	; 0x65
   1f79a:	f340 80a9 	ble.w	1f8f0 <_svfprintf_r+0x9f0>
   1f79e:	2200      	movs	r2, #0
   1f7a0:	2300      	movs	r3, #0
   1f7a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f7a6:	f7fc fc55 	bl	1c054 <__aeabi_dcmpeq>
   1f7aa:	2800      	cmp	r0, #0
   1f7ac:	f000 8152 	beq.w	1fa54 <_svfprintf_r+0xb54>
   1f7b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7b2:	4a21      	ldr	r2, [pc, #132]	; (1f838 <_svfprintf_r+0x938>)
   1f7b4:	f8c8 2000 	str.w	r2, [r8]
   1f7b8:	3301      	adds	r3, #1
   1f7ba:	3401      	adds	r4, #1
   1f7bc:	2201      	movs	r2, #1
   1f7be:	2b07      	cmp	r3, #7
   1f7c0:	9425      	str	r4, [sp, #148]	; 0x94
   1f7c2:	9324      	str	r3, [sp, #144]	; 0x90
   1f7c4:	f8c8 2004 	str.w	r2, [r8, #4]
   1f7c8:	f300 836f 	bgt.w	1feaa <_svfprintf_r+0xfaa>
   1f7cc:	f108 0808 	add.w	r8, r8, #8
   1f7d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f7d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f7d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f7d6:	4293      	cmp	r3, r2
   1f7d8:	db03      	blt.n	1f7e2 <_svfprintf_r+0x8e2>
   1f7da:	9b03      	ldr	r3, [sp, #12]
   1f7dc:	07dd      	lsls	r5, r3, #31
   1f7de:	f57f ad76 	bpl.w	1f2ce <_svfprintf_r+0x3ce>
   1f7e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f7e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f7e8:	f8c8 2000 	str.w	r2, [r8]
   1f7ec:	3301      	adds	r3, #1
   1f7ee:	440c      	add	r4, r1
   1f7f0:	2b07      	cmp	r3, #7
   1f7f2:	f8c8 1004 	str.w	r1, [r8, #4]
   1f7f6:	9425      	str	r4, [sp, #148]	; 0x94
   1f7f8:	9324      	str	r3, [sp, #144]	; 0x90
   1f7fa:	f300 83a3 	bgt.w	1ff44 <_svfprintf_r+0x1044>
   1f7fe:	f108 0808 	add.w	r8, r8, #8
   1f802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f804:	1e5e      	subs	r6, r3, #1
   1f806:	2e00      	cmp	r6, #0
   1f808:	f77f ad61 	ble.w	1f2ce <_svfprintf_r+0x3ce>
   1f80c:	2e10      	cmp	r6, #16
   1f80e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f810:	4d0a      	ldr	r5, [pc, #40]	; (1f83c <_svfprintf_r+0x93c>)
   1f812:	f340 81ef 	ble.w	1fbf4 <_svfprintf_r+0xcf4>
   1f816:	4622      	mov	r2, r4
   1f818:	2710      	movs	r7, #16
   1f81a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f81e:	9c07      	ldr	r4, [sp, #28]
   1f820:	e014      	b.n	1f84c <_svfprintf_r+0x94c>
   1f822:	bf00      	nop
   1f824:	00024cc4 	.word	0x00024cc4
   1f828:	00024cb0 	.word	0x00024cb0
   1f82c:	7fefffff 	.word	0x7fefffff
   1f830:	00024ca4 	.word	0x00024ca4
   1f834:	00024ca0 	.word	0x00024ca0
   1f838:	00024ce0 	.word	0x00024ce0
   1f83c:	00024cf4 	.word	0x00024cf4
   1f840:	f108 0808 	add.w	r8, r8, #8
   1f844:	3e10      	subs	r6, #16
   1f846:	2e10      	cmp	r6, #16
   1f848:	f340 81d3 	ble.w	1fbf2 <_svfprintf_r+0xcf2>
   1f84c:	3301      	adds	r3, #1
   1f84e:	3210      	adds	r2, #16
   1f850:	2b07      	cmp	r3, #7
   1f852:	9225      	str	r2, [sp, #148]	; 0x94
   1f854:	9324      	str	r3, [sp, #144]	; 0x90
   1f856:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f85a:	ddf1      	ble.n	1f840 <_svfprintf_r+0x940>
   1f85c:	aa23      	add	r2, sp, #140	; 0x8c
   1f85e:	4621      	mov	r1, r4
   1f860:	4658      	mov	r0, fp
   1f862:	f002 fcff 	bl	22264 <__ssprint_r>
   1f866:	2800      	cmp	r0, #0
   1f868:	f47f ac1c 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f86c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f86e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f870:	46c8      	mov	r8, r9
   1f872:	e7e7      	b.n	1f844 <_svfprintf_r+0x944>
   1f874:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f876:	9a04      	ldr	r2, [sp, #16]
   1f878:	1a9f      	subs	r7, r3, r2
   1f87a:	2f00      	cmp	r7, #0
   1f87c:	f77f acd8 	ble.w	1f230 <_svfprintf_r+0x330>
   1f880:	2f10      	cmp	r7, #16
   1f882:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f884:	4db7      	ldr	r5, [pc, #732]	; (1fb64 <_svfprintf_r+0xc64>)
   1f886:	dd27      	ble.n	1f8d8 <_svfprintf_r+0x9d8>
   1f888:	4642      	mov	r2, r8
   1f88a:	4621      	mov	r1, r4
   1f88c:	46b0      	mov	r8, r6
   1f88e:	f04f 0b10 	mov.w	fp, #16
   1f892:	462e      	mov	r6, r5
   1f894:	9c08      	ldr	r4, [sp, #32]
   1f896:	9d07      	ldr	r5, [sp, #28]
   1f898:	e004      	b.n	1f8a4 <_svfprintf_r+0x9a4>
   1f89a:	3f10      	subs	r7, #16
   1f89c:	2f10      	cmp	r7, #16
   1f89e:	f102 0208 	add.w	r2, r2, #8
   1f8a2:	dd15      	ble.n	1f8d0 <_svfprintf_r+0x9d0>
   1f8a4:	3301      	adds	r3, #1
   1f8a6:	3110      	adds	r1, #16
   1f8a8:	2b07      	cmp	r3, #7
   1f8aa:	9125      	str	r1, [sp, #148]	; 0x94
   1f8ac:	9324      	str	r3, [sp, #144]	; 0x90
   1f8ae:	e882 0840 	stmia.w	r2, {r6, fp}
   1f8b2:	ddf2      	ble.n	1f89a <_svfprintf_r+0x99a>
   1f8b4:	aa23      	add	r2, sp, #140	; 0x8c
   1f8b6:	4629      	mov	r1, r5
   1f8b8:	4620      	mov	r0, r4
   1f8ba:	f002 fcd3 	bl	22264 <__ssprint_r>
   1f8be:	2800      	cmp	r0, #0
   1f8c0:	f47f abf0 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f8c4:	3f10      	subs	r7, #16
   1f8c6:	2f10      	cmp	r7, #16
   1f8c8:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f8ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f8cc:	464a      	mov	r2, r9
   1f8ce:	dce9      	bgt.n	1f8a4 <_svfprintf_r+0x9a4>
   1f8d0:	4635      	mov	r5, r6
   1f8d2:	460c      	mov	r4, r1
   1f8d4:	4646      	mov	r6, r8
   1f8d6:	4690      	mov	r8, r2
   1f8d8:	3301      	adds	r3, #1
   1f8da:	443c      	add	r4, r7
   1f8dc:	2b07      	cmp	r3, #7
   1f8de:	9425      	str	r4, [sp, #148]	; 0x94
   1f8e0:	9324      	str	r3, [sp, #144]	; 0x90
   1f8e2:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f8e6:	f300 8234 	bgt.w	1fd52 <_svfprintf_r+0xe52>
   1f8ea:	f108 0808 	add.w	r8, r8, #8
   1f8ee:	e49f      	b.n	1f230 <_svfprintf_r+0x330>
   1f8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f8f2:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f8f4:	2b01      	cmp	r3, #1
   1f8f6:	f340 8200 	ble.w	1fcfa <_svfprintf_r+0xdfa>
   1f8fa:	3701      	adds	r7, #1
   1f8fc:	3401      	adds	r4, #1
   1f8fe:	2301      	movs	r3, #1
   1f900:	2f07      	cmp	r7, #7
   1f902:	9425      	str	r4, [sp, #148]	; 0x94
   1f904:	9724      	str	r7, [sp, #144]	; 0x90
   1f906:	f8c8 6000 	str.w	r6, [r8]
   1f90a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f90e:	f300 8205 	bgt.w	1fd1c <_svfprintf_r+0xe1c>
   1f912:	f108 0808 	add.w	r8, r8, #8
   1f916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f918:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f91a:	f8c8 3000 	str.w	r3, [r8]
   1f91e:	3701      	adds	r7, #1
   1f920:	4414      	add	r4, r2
   1f922:	2f07      	cmp	r7, #7
   1f924:	9425      	str	r4, [sp, #148]	; 0x94
   1f926:	9724      	str	r7, [sp, #144]	; 0x90
   1f928:	f8c8 2004 	str.w	r2, [r8, #4]
   1f92c:	f300 8202 	bgt.w	1fd34 <_svfprintf_r+0xe34>
   1f930:	f108 0808 	add.w	r8, r8, #8
   1f934:	2300      	movs	r3, #0
   1f936:	2200      	movs	r2, #0
   1f938:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f93c:	f7fc fb8a 	bl	1c054 <__aeabi_dcmpeq>
   1f940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f942:	2800      	cmp	r0, #0
   1f944:	f040 8101 	bne.w	1fb4a <_svfprintf_r+0xc4a>
   1f948:	3b01      	subs	r3, #1
   1f94a:	3701      	adds	r7, #1
   1f94c:	3601      	adds	r6, #1
   1f94e:	441c      	add	r4, r3
   1f950:	2f07      	cmp	r7, #7
   1f952:	9724      	str	r7, [sp, #144]	; 0x90
   1f954:	9425      	str	r4, [sp, #148]	; 0x94
   1f956:	f8c8 6000 	str.w	r6, [r8]
   1f95a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f95e:	f300 8128 	bgt.w	1fbb2 <_svfprintf_r+0xcb2>
   1f962:	f108 0808 	add.w	r8, r8, #8
   1f966:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f968:	f8c8 2004 	str.w	r2, [r8, #4]
   1f96c:	3701      	adds	r7, #1
   1f96e:	4414      	add	r4, r2
   1f970:	ab1f      	add	r3, sp, #124	; 0x7c
   1f972:	2f07      	cmp	r7, #7
   1f974:	9425      	str	r4, [sp, #148]	; 0x94
   1f976:	9724      	str	r7, [sp, #144]	; 0x90
   1f978:	f8c8 3000 	str.w	r3, [r8]
   1f97c:	f77f aca5 	ble.w	1f2ca <_svfprintf_r+0x3ca>
   1f980:	aa23      	add	r2, sp, #140	; 0x8c
   1f982:	9907      	ldr	r1, [sp, #28]
   1f984:	9808      	ldr	r0, [sp, #32]
   1f986:	f002 fc6d 	bl	22264 <__ssprint_r>
   1f98a:	2800      	cmp	r0, #0
   1f98c:	f47f ab8a 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f990:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f992:	46c8      	mov	r8, r9
   1f994:	e49b      	b.n	1f2ce <_svfprintf_r+0x3ce>
   1f996:	aa23      	add	r2, sp, #140	; 0x8c
   1f998:	9907      	ldr	r1, [sp, #28]
   1f99a:	9808      	ldr	r0, [sp, #32]
   1f99c:	f002 fc62 	bl	22264 <__ssprint_r>
   1f9a0:	2800      	cmp	r0, #0
   1f9a2:	f43f acdd 	beq.w	1f360 <_svfprintf_r+0x460>
   1f9a6:	f7ff bb7d 	b.w	1f0a4 <_svfprintf_r+0x1a4>
   1f9aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f9ae:	2b01      	cmp	r3, #1
   1f9b0:	f000 8135 	beq.w	1fc1e <_svfprintf_r+0xd1e>
   1f9b4:	2b02      	cmp	r3, #2
   1f9b6:	d125      	bne.n	1fa04 <_svfprintf_r+0xb04>
   1f9b8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f9bc:	2400      	movs	r4, #0
   1f9be:	2500      	movs	r5, #0
   1f9c0:	e611      	b.n	1f5e6 <_svfprintf_r+0x6e6>
   1f9c2:	aa23      	add	r2, sp, #140	; 0x8c
   1f9c4:	9907      	ldr	r1, [sp, #28]
   1f9c6:	9808      	ldr	r0, [sp, #32]
   1f9c8:	f002 fc4c 	bl	22264 <__ssprint_r>
   1f9cc:	2800      	cmp	r0, #0
   1f9ce:	f47f ab69 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f9d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f9d4:	46c8      	mov	r8, r9
   1f9d6:	e467      	b.n	1f2a8 <_svfprintf_r+0x3a8>
   1f9d8:	aa23      	add	r2, sp, #140	; 0x8c
   1f9da:	9907      	ldr	r1, [sp, #28]
   1f9dc:	9808      	ldr	r0, [sp, #32]
   1f9de:	f002 fc41 	bl	22264 <__ssprint_r>
   1f9e2:	2800      	cmp	r0, #0
   1f9e4:	f47f ab5e 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f9e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f9ea:	46c8      	mov	r8, r9
   1f9ec:	e41d      	b.n	1f22a <_svfprintf_r+0x32a>
   1f9ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f9f0:	9907      	ldr	r1, [sp, #28]
   1f9f2:	9808      	ldr	r0, [sp, #32]
   1f9f4:	f002 fc36 	bl	22264 <__ssprint_r>
   1f9f8:	2800      	cmp	r0, #0
   1f9fa:	f47f ab53 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1f9fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa00:	46c8      	mov	r8, r9
   1fa02:	e402      	b.n	1f20a <_svfprintf_r+0x30a>
   1fa04:	f8cd b00c 	str.w	fp, [sp, #12]
   1fa08:	2400      	movs	r4, #0
   1fa0a:	2500      	movs	r5, #0
   1fa0c:	4649      	mov	r1, r9
   1fa0e:	e000      	b.n	1fa12 <_svfprintf_r+0xb12>
   1fa10:	4631      	mov	r1, r6
   1fa12:	08e2      	lsrs	r2, r4, #3
   1fa14:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1fa18:	08e8      	lsrs	r0, r5, #3
   1fa1a:	f004 0307 	and.w	r3, r4, #7
   1fa1e:	4605      	mov	r5, r0
   1fa20:	4614      	mov	r4, r2
   1fa22:	3330      	adds	r3, #48	; 0x30
   1fa24:	ea54 0205 	orrs.w	r2, r4, r5
   1fa28:	f801 3c01 	strb.w	r3, [r1, #-1]
   1fa2c:	f101 36ff 	add.w	r6, r1, #4294967295
   1fa30:	d1ee      	bne.n	1fa10 <_svfprintf_r+0xb10>
   1fa32:	9a03      	ldr	r2, [sp, #12]
   1fa34:	07d2      	lsls	r2, r2, #31
   1fa36:	f57f ade6 	bpl.w	1f606 <_svfprintf_r+0x706>
   1fa3a:	2b30      	cmp	r3, #48	; 0x30
   1fa3c:	f43f ade3 	beq.w	1f606 <_svfprintf_r+0x706>
   1fa40:	3902      	subs	r1, #2
   1fa42:	2330      	movs	r3, #48	; 0x30
   1fa44:	f806 3c01 	strb.w	r3, [r6, #-1]
   1fa48:	eba9 0301 	sub.w	r3, r9, r1
   1fa4c:	930a      	str	r3, [sp, #40]	; 0x28
   1fa4e:	460e      	mov	r6, r1
   1fa50:	f7ff bb66 	b.w	1f120 <_svfprintf_r+0x220>
   1fa54:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fa56:	2900      	cmp	r1, #0
   1fa58:	f340 8231 	ble.w	1febe <_svfprintf_r+0xfbe>
   1fa5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fa5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fa60:	4293      	cmp	r3, r2
   1fa62:	bfa8      	it	ge
   1fa64:	4613      	movge	r3, r2
   1fa66:	2b00      	cmp	r3, #0
   1fa68:	461f      	mov	r7, r3
   1fa6a:	dd0d      	ble.n	1fa88 <_svfprintf_r+0xb88>
   1fa6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa6e:	f8c8 6000 	str.w	r6, [r8]
   1fa72:	3301      	adds	r3, #1
   1fa74:	443c      	add	r4, r7
   1fa76:	2b07      	cmp	r3, #7
   1fa78:	9425      	str	r4, [sp, #148]	; 0x94
   1fa7a:	f8c8 7004 	str.w	r7, [r8, #4]
   1fa7e:	9324      	str	r3, [sp, #144]	; 0x90
   1fa80:	f300 8321 	bgt.w	200c6 <_svfprintf_r+0x11c6>
   1fa84:	f108 0808 	add.w	r8, r8, #8
   1fa88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fa8a:	2f00      	cmp	r7, #0
   1fa8c:	bfa8      	it	ge
   1fa8e:	1bdb      	subge	r3, r3, r7
   1fa90:	2b00      	cmp	r3, #0
   1fa92:	461f      	mov	r7, r3
   1fa94:	f340 80d7 	ble.w	1fc46 <_svfprintf_r+0xd46>
   1fa98:	2f10      	cmp	r7, #16
   1fa9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa9c:	4d31      	ldr	r5, [pc, #196]	; (1fb64 <_svfprintf_r+0xc64>)
   1fa9e:	f340 81f0 	ble.w	1fe82 <_svfprintf_r+0xf82>
   1faa2:	4642      	mov	r2, r8
   1faa4:	4621      	mov	r1, r4
   1faa6:	46b0      	mov	r8, r6
   1faa8:	f04f 0b10 	mov.w	fp, #16
   1faac:	462e      	mov	r6, r5
   1faae:	9c08      	ldr	r4, [sp, #32]
   1fab0:	9d07      	ldr	r5, [sp, #28]
   1fab2:	e004      	b.n	1fabe <_svfprintf_r+0xbbe>
   1fab4:	3208      	adds	r2, #8
   1fab6:	3f10      	subs	r7, #16
   1fab8:	2f10      	cmp	r7, #16
   1faba:	f340 81de 	ble.w	1fe7a <_svfprintf_r+0xf7a>
   1fabe:	3301      	adds	r3, #1
   1fac0:	3110      	adds	r1, #16
   1fac2:	2b07      	cmp	r3, #7
   1fac4:	9125      	str	r1, [sp, #148]	; 0x94
   1fac6:	9324      	str	r3, [sp, #144]	; 0x90
   1fac8:	e882 0840 	stmia.w	r2, {r6, fp}
   1facc:	ddf2      	ble.n	1fab4 <_svfprintf_r+0xbb4>
   1face:	aa23      	add	r2, sp, #140	; 0x8c
   1fad0:	4629      	mov	r1, r5
   1fad2:	4620      	mov	r0, r4
   1fad4:	f002 fbc6 	bl	22264 <__ssprint_r>
   1fad8:	2800      	cmp	r0, #0
   1fada:	f47f aae3 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fade:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fae2:	464a      	mov	r2, r9
   1fae4:	e7e7      	b.n	1fab6 <_svfprintf_r+0xbb6>
   1fae6:	2d00      	cmp	r5, #0
   1fae8:	bf08      	it	eq
   1faea:	2c0a      	cmpeq	r4, #10
   1faec:	f0c0 8095 	bcc.w	1fc1a <_svfprintf_r+0xd1a>
   1faf0:	464e      	mov	r6, r9
   1faf2:	4620      	mov	r0, r4
   1faf4:	4629      	mov	r1, r5
   1faf6:	220a      	movs	r2, #10
   1faf8:	2300      	movs	r3, #0
   1fafa:	f7fc fcd3 	bl	1c4a4 <__aeabi_uldivmod>
   1fafe:	3230      	adds	r2, #48	; 0x30
   1fb00:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fb04:	4620      	mov	r0, r4
   1fb06:	4629      	mov	r1, r5
   1fb08:	2300      	movs	r3, #0
   1fb0a:	220a      	movs	r2, #10
   1fb0c:	f7fc fcca 	bl	1c4a4 <__aeabi_uldivmod>
   1fb10:	4604      	mov	r4, r0
   1fb12:	460d      	mov	r5, r1
   1fb14:	ea54 0305 	orrs.w	r3, r4, r5
   1fb18:	d1eb      	bne.n	1faf2 <_svfprintf_r+0xbf2>
   1fb1a:	eba9 0306 	sub.w	r3, r9, r6
   1fb1e:	930a      	str	r3, [sp, #40]	; 0x28
   1fb20:	f7ff bafe 	b.w	1f120 <_svfprintf_r+0x220>
   1fb24:	9b06      	ldr	r3, [sp, #24]
   1fb26:	930a      	str	r3, [sp, #40]	; 0x28
   1fb28:	464e      	mov	r6, r9
   1fb2a:	f7ff baf9 	b.w	1f120 <_svfprintf_r+0x220>
   1fb2e:	aa23      	add	r2, sp, #140	; 0x8c
   1fb30:	9907      	ldr	r1, [sp, #28]
   1fb32:	9808      	ldr	r0, [sp, #32]
   1fb34:	f002 fb96 	bl	22264 <__ssprint_r>
   1fb38:	2800      	cmp	r0, #0
   1fb3a:	f47f aab3 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fb3e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fb42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb44:	46c8      	mov	r8, r9
   1fb46:	f7ff bb50 	b.w	1f1ea <_svfprintf_r+0x2ea>
   1fb4a:	1e5e      	subs	r6, r3, #1
   1fb4c:	2e00      	cmp	r6, #0
   1fb4e:	f77f af0a 	ble.w	1f966 <_svfprintf_r+0xa66>
   1fb52:	2e10      	cmp	r6, #16
   1fb54:	4d03      	ldr	r5, [pc, #12]	; (1fb64 <_svfprintf_r+0xc64>)
   1fb56:	dd23      	ble.n	1fba0 <_svfprintf_r+0xca0>
   1fb58:	4622      	mov	r2, r4
   1fb5a:	f04f 0b10 	mov.w	fp, #16
   1fb5e:	9c08      	ldr	r4, [sp, #32]
   1fb60:	e007      	b.n	1fb72 <_svfprintf_r+0xc72>
   1fb62:	bf00      	nop
   1fb64:	00024cf4 	.word	0x00024cf4
   1fb68:	3e10      	subs	r6, #16
   1fb6a:	2e10      	cmp	r6, #16
   1fb6c:	f108 0808 	add.w	r8, r8, #8
   1fb70:	dd15      	ble.n	1fb9e <_svfprintf_r+0xc9e>
   1fb72:	3701      	adds	r7, #1
   1fb74:	3210      	adds	r2, #16
   1fb76:	2f07      	cmp	r7, #7
   1fb78:	9225      	str	r2, [sp, #148]	; 0x94
   1fb7a:	9724      	str	r7, [sp, #144]	; 0x90
   1fb7c:	e888 0820 	stmia.w	r8, {r5, fp}
   1fb80:	ddf2      	ble.n	1fb68 <_svfprintf_r+0xc68>
   1fb82:	aa23      	add	r2, sp, #140	; 0x8c
   1fb84:	9907      	ldr	r1, [sp, #28]
   1fb86:	4620      	mov	r0, r4
   1fb88:	f002 fb6c 	bl	22264 <__ssprint_r>
   1fb8c:	2800      	cmp	r0, #0
   1fb8e:	f47f aa89 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fb92:	3e10      	subs	r6, #16
   1fb94:	2e10      	cmp	r6, #16
   1fb96:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fb98:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fb9a:	46c8      	mov	r8, r9
   1fb9c:	dce9      	bgt.n	1fb72 <_svfprintf_r+0xc72>
   1fb9e:	4614      	mov	r4, r2
   1fba0:	3701      	adds	r7, #1
   1fba2:	4434      	add	r4, r6
   1fba4:	2f07      	cmp	r7, #7
   1fba6:	9425      	str	r4, [sp, #148]	; 0x94
   1fba8:	9724      	str	r7, [sp, #144]	; 0x90
   1fbaa:	e888 0060 	stmia.w	r8, {r5, r6}
   1fbae:	f77f aed8 	ble.w	1f962 <_svfprintf_r+0xa62>
   1fbb2:	aa23      	add	r2, sp, #140	; 0x8c
   1fbb4:	9907      	ldr	r1, [sp, #28]
   1fbb6:	9808      	ldr	r0, [sp, #32]
   1fbb8:	f002 fb54 	bl	22264 <__ssprint_r>
   1fbbc:	2800      	cmp	r0, #0
   1fbbe:	f47f aa71 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fbc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fbc4:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fbc6:	46c8      	mov	r8, r9
   1fbc8:	e6cd      	b.n	1f966 <_svfprintf_r+0xa66>
   1fbca:	681c      	ldr	r4, [r3, #0]
   1fbcc:	3304      	adds	r3, #4
   1fbce:	930b      	str	r3, [sp, #44]	; 0x2c
   1fbd0:	2500      	movs	r5, #0
   1fbd2:	e422      	b.n	1f41a <_svfprintf_r+0x51a>
   1fbd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fbd6:	460a      	mov	r2, r1
   1fbd8:	3204      	adds	r2, #4
   1fbda:	680c      	ldr	r4, [r1, #0]
   1fbdc:	920b      	str	r2, [sp, #44]	; 0x2c
   1fbde:	2500      	movs	r5, #0
   1fbe0:	f7ff ba81 	b.w	1f0e6 <_svfprintf_r+0x1e6>
   1fbe4:	3204      	adds	r2, #4
   1fbe6:	681c      	ldr	r4, [r3, #0]
   1fbe8:	920b      	str	r2, [sp, #44]	; 0x2c
   1fbea:	2301      	movs	r3, #1
   1fbec:	2500      	movs	r5, #0
   1fbee:	f7ff ba7a 	b.w	1f0e6 <_svfprintf_r+0x1e6>
   1fbf2:	4614      	mov	r4, r2
   1fbf4:	3301      	adds	r3, #1
   1fbf6:	4434      	add	r4, r6
   1fbf8:	2b07      	cmp	r3, #7
   1fbfa:	9425      	str	r4, [sp, #148]	; 0x94
   1fbfc:	9324      	str	r3, [sp, #144]	; 0x90
   1fbfe:	e888 0060 	stmia.w	r8, {r5, r6}
   1fc02:	f77f ab62 	ble.w	1f2ca <_svfprintf_r+0x3ca>
   1fc06:	e6bb      	b.n	1f980 <_svfprintf_r+0xa80>
   1fc08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fc0a:	6814      	ldr	r4, [r2, #0]
   1fc0c:	4613      	mov	r3, r2
   1fc0e:	3304      	adds	r3, #4
   1fc10:	17e5      	asrs	r5, r4, #31
   1fc12:	930b      	str	r3, [sp, #44]	; 0x2c
   1fc14:	4622      	mov	r2, r4
   1fc16:	462b      	mov	r3, r5
   1fc18:	e4cd      	b.n	1f5b6 <_svfprintf_r+0x6b6>
   1fc1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fc1e:	f8cd b00c 	str.w	fp, [sp, #12]
   1fc22:	ae40      	add	r6, sp, #256	; 0x100
   1fc24:	3430      	adds	r4, #48	; 0x30
   1fc26:	2301      	movs	r3, #1
   1fc28:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1fc2c:	930a      	str	r3, [sp, #40]	; 0x28
   1fc2e:	f7ff ba77 	b.w	1f120 <_svfprintf_r+0x220>
   1fc32:	aa23      	add	r2, sp, #140	; 0x8c
   1fc34:	9907      	ldr	r1, [sp, #28]
   1fc36:	9808      	ldr	r0, [sp, #32]
   1fc38:	f002 fb14 	bl	22264 <__ssprint_r>
   1fc3c:	2800      	cmp	r0, #0
   1fc3e:	f47f aa31 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fc42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc44:	46c8      	mov	r8, r9
   1fc46:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fc48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fc4a:	429a      	cmp	r2, r3
   1fc4c:	db44      	blt.n	1fcd8 <_svfprintf_r+0xdd8>
   1fc4e:	9b03      	ldr	r3, [sp, #12]
   1fc50:	07d9      	lsls	r1, r3, #31
   1fc52:	d441      	bmi.n	1fcd8 <_svfprintf_r+0xdd8>
   1fc54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fc56:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fc58:	1a9a      	subs	r2, r3, r2
   1fc5a:	1a1d      	subs	r5, r3, r0
   1fc5c:	4295      	cmp	r5, r2
   1fc5e:	bfa8      	it	ge
   1fc60:	4615      	movge	r5, r2
   1fc62:	2d00      	cmp	r5, #0
   1fc64:	dd0e      	ble.n	1fc84 <_svfprintf_r+0xd84>
   1fc66:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fc68:	f8c8 5004 	str.w	r5, [r8, #4]
   1fc6c:	3101      	adds	r1, #1
   1fc6e:	4406      	add	r6, r0
   1fc70:	442c      	add	r4, r5
   1fc72:	2907      	cmp	r1, #7
   1fc74:	f8c8 6000 	str.w	r6, [r8]
   1fc78:	9425      	str	r4, [sp, #148]	; 0x94
   1fc7a:	9124      	str	r1, [sp, #144]	; 0x90
   1fc7c:	f300 823a 	bgt.w	200f4 <_svfprintf_r+0x11f4>
   1fc80:	f108 0808 	add.w	r8, r8, #8
   1fc84:	2d00      	cmp	r5, #0
   1fc86:	bfac      	ite	ge
   1fc88:	1b56      	subge	r6, r2, r5
   1fc8a:	4616      	movlt	r6, r2
   1fc8c:	2e00      	cmp	r6, #0
   1fc8e:	f77f ab1e 	ble.w	1f2ce <_svfprintf_r+0x3ce>
   1fc92:	2e10      	cmp	r6, #16
   1fc94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc96:	4db1      	ldr	r5, [pc, #708]	; (1ff5c <_svfprintf_r+0x105c>)
   1fc98:	ddac      	ble.n	1fbf4 <_svfprintf_r+0xcf4>
   1fc9a:	4622      	mov	r2, r4
   1fc9c:	2710      	movs	r7, #16
   1fc9e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fca2:	9c07      	ldr	r4, [sp, #28]
   1fca4:	e004      	b.n	1fcb0 <_svfprintf_r+0xdb0>
   1fca6:	f108 0808 	add.w	r8, r8, #8
   1fcaa:	3e10      	subs	r6, #16
   1fcac:	2e10      	cmp	r6, #16
   1fcae:	dda0      	ble.n	1fbf2 <_svfprintf_r+0xcf2>
   1fcb0:	3301      	adds	r3, #1
   1fcb2:	3210      	adds	r2, #16
   1fcb4:	2b07      	cmp	r3, #7
   1fcb6:	9225      	str	r2, [sp, #148]	; 0x94
   1fcb8:	9324      	str	r3, [sp, #144]	; 0x90
   1fcba:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fcbe:	ddf2      	ble.n	1fca6 <_svfprintf_r+0xda6>
   1fcc0:	aa23      	add	r2, sp, #140	; 0x8c
   1fcc2:	4621      	mov	r1, r4
   1fcc4:	4658      	mov	r0, fp
   1fcc6:	f002 facd 	bl	22264 <__ssprint_r>
   1fcca:	2800      	cmp	r0, #0
   1fccc:	f47f a9ea 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fcd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fcd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fcd4:	46c8      	mov	r8, r9
   1fcd6:	e7e8      	b.n	1fcaa <_svfprintf_r+0xdaa>
   1fcd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fcda:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fcdc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fcde:	f8c8 1000 	str.w	r1, [r8]
   1fce2:	3301      	adds	r3, #1
   1fce4:	4404      	add	r4, r0
   1fce6:	2b07      	cmp	r3, #7
   1fce8:	9425      	str	r4, [sp, #148]	; 0x94
   1fcea:	f8c8 0004 	str.w	r0, [r8, #4]
   1fcee:	9324      	str	r3, [sp, #144]	; 0x90
   1fcf0:	f300 81f4 	bgt.w	200dc <_svfprintf_r+0x11dc>
   1fcf4:	f108 0808 	add.w	r8, r8, #8
   1fcf8:	e7ac      	b.n	1fc54 <_svfprintf_r+0xd54>
   1fcfa:	9b03      	ldr	r3, [sp, #12]
   1fcfc:	07da      	lsls	r2, r3, #31
   1fcfe:	f53f adfc 	bmi.w	1f8fa <_svfprintf_r+0x9fa>
   1fd02:	3701      	adds	r7, #1
   1fd04:	3401      	adds	r4, #1
   1fd06:	2301      	movs	r3, #1
   1fd08:	2f07      	cmp	r7, #7
   1fd0a:	9425      	str	r4, [sp, #148]	; 0x94
   1fd0c:	9724      	str	r7, [sp, #144]	; 0x90
   1fd0e:	f8c8 6000 	str.w	r6, [r8]
   1fd12:	f8c8 3004 	str.w	r3, [r8, #4]
   1fd16:	f77f ae24 	ble.w	1f962 <_svfprintf_r+0xa62>
   1fd1a:	e74a      	b.n	1fbb2 <_svfprintf_r+0xcb2>
   1fd1c:	aa23      	add	r2, sp, #140	; 0x8c
   1fd1e:	9907      	ldr	r1, [sp, #28]
   1fd20:	9808      	ldr	r0, [sp, #32]
   1fd22:	f002 fa9f 	bl	22264 <__ssprint_r>
   1fd26:	2800      	cmp	r0, #0
   1fd28:	f47f a9bc 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fd2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd2e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fd30:	46c8      	mov	r8, r9
   1fd32:	e5f0      	b.n	1f916 <_svfprintf_r+0xa16>
   1fd34:	aa23      	add	r2, sp, #140	; 0x8c
   1fd36:	9907      	ldr	r1, [sp, #28]
   1fd38:	9808      	ldr	r0, [sp, #32]
   1fd3a:	f002 fa93 	bl	22264 <__ssprint_r>
   1fd3e:	2800      	cmp	r0, #0
   1fd40:	f47f a9b0 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fd44:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd46:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fd48:	46c8      	mov	r8, r9
   1fd4a:	e5f3      	b.n	1f934 <_svfprintf_r+0xa34>
   1fd4c:	464e      	mov	r6, r9
   1fd4e:	f7ff b9e7 	b.w	1f120 <_svfprintf_r+0x220>
   1fd52:	aa23      	add	r2, sp, #140	; 0x8c
   1fd54:	9907      	ldr	r1, [sp, #28]
   1fd56:	9808      	ldr	r0, [sp, #32]
   1fd58:	f002 fa84 	bl	22264 <__ssprint_r>
   1fd5c:	2800      	cmp	r0, #0
   1fd5e:	f47f a9a1 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1fd62:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd64:	46c8      	mov	r8, r9
   1fd66:	f7ff ba63 	b.w	1f230 <_svfprintf_r+0x330>
   1fd6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fd6e:	4602      	mov	r2, r0
   1fd70:	460b      	mov	r3, r1
   1fd72:	f002 fc4d 	bl	22610 <__aeabi_dcmpun>
   1fd76:	2800      	cmp	r0, #0
   1fd78:	f040 8298 	bne.w	202ac <_svfprintf_r+0x13ac>
   1fd7c:	9b06      	ldr	r3, [sp, #24]
   1fd7e:	3301      	adds	r3, #1
   1fd80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd82:	f023 0720 	bic.w	r7, r3, #32
   1fd86:	f000 81d2 	beq.w	2012e <_svfprintf_r+0x122e>
   1fd8a:	2f47      	cmp	r7, #71	; 0x47
   1fd8c:	f000 8120 	beq.w	1ffd0 <_svfprintf_r+0x10d0>
   1fd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fd92:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fd96:	2b00      	cmp	r3, #0
   1fd98:	9203      	str	r2, [sp, #12]
   1fd9a:	f2c0 81f0 	blt.w	2017e <_svfprintf_r+0x127e>
   1fd9e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fda2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fda6:	2300      	movs	r3, #0
   1fda8:	930c      	str	r3, [sp, #48]	; 0x30
   1fdaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fdac:	2b66      	cmp	r3, #102	; 0x66
   1fdae:	f000 81c1 	beq.w	20134 <_svfprintf_r+0x1234>
   1fdb2:	2b46      	cmp	r3, #70	; 0x46
   1fdb4:	f000 80f1 	beq.w	1ff9a <_svfprintf_r+0x109a>
   1fdb8:	2f45      	cmp	r7, #69	; 0x45
   1fdba:	bf0c      	ite	eq
   1fdbc:	9b06      	ldreq	r3, [sp, #24]
   1fdbe:	9d06      	ldrne	r5, [sp, #24]
   1fdc0:	9808      	ldr	r0, [sp, #32]
   1fdc2:	bf08      	it	eq
   1fdc4:	1c5d      	addeq	r5, r3, #1
   1fdc6:	aa21      	add	r2, sp, #132	; 0x84
   1fdc8:	ab1e      	add	r3, sp, #120	; 0x78
   1fdca:	9201      	str	r2, [sp, #4]
   1fdcc:	9300      	str	r3, [sp, #0]
   1fdce:	462a      	mov	r2, r5
   1fdd0:	ab1d      	add	r3, sp, #116	; 0x74
   1fdd2:	2102      	movs	r1, #2
   1fdd4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fdd8:	f000 fcae 	bl	20738 <_dtoa_r>
   1fddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fdde:	2b67      	cmp	r3, #103	; 0x67
   1fde0:	4606      	mov	r6, r0
   1fde2:	f040 81d5 	bne.w	20190 <_svfprintf_r+0x1290>
   1fde6:	f01b 0f01 	tst.w	fp, #1
   1fdea:	f000 824e 	beq.w	2028a <_svfprintf_r+0x138a>
   1fdee:	1974      	adds	r4, r6, r5
   1fdf0:	2200      	movs	r2, #0
   1fdf2:	2300      	movs	r3, #0
   1fdf4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fdf8:	f7fc f92c 	bl	1c054 <__aeabi_dcmpeq>
   1fdfc:	2800      	cmp	r0, #0
   1fdfe:	f040 8160 	bne.w	200c2 <_svfprintf_r+0x11c2>
   1fe02:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fe04:	42a3      	cmp	r3, r4
   1fe06:	d206      	bcs.n	1fe16 <_svfprintf_r+0xf16>
   1fe08:	2130      	movs	r1, #48	; 0x30
   1fe0a:	1c5a      	adds	r2, r3, #1
   1fe0c:	9221      	str	r2, [sp, #132]	; 0x84
   1fe0e:	7019      	strb	r1, [r3, #0]
   1fe10:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fe12:	429c      	cmp	r4, r3
   1fe14:	d8f9      	bhi.n	1fe0a <_svfprintf_r+0xf0a>
   1fe16:	1b9b      	subs	r3, r3, r6
   1fe18:	2f47      	cmp	r7, #71	; 0x47
   1fe1a:	930f      	str	r3, [sp, #60]	; 0x3c
   1fe1c:	f000 80f0 	beq.w	20000 <_svfprintf_r+0x1100>
   1fe20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe22:	2b65      	cmp	r3, #101	; 0x65
   1fe24:	f340 81c3 	ble.w	201ae <_svfprintf_r+0x12ae>
   1fe28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe2a:	2b66      	cmp	r3, #102	; 0x66
   1fe2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fe2e:	930e      	str	r3, [sp, #56]	; 0x38
   1fe30:	f000 81c0 	beq.w	201b4 <_svfprintf_r+0x12b4>
   1fe34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fe36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fe38:	4619      	mov	r1, r3
   1fe3a:	4291      	cmp	r1, r2
   1fe3c:	f300 8191 	bgt.w	20162 <_svfprintf_r+0x1262>
   1fe40:	f01b 0f01 	tst.w	fp, #1
   1fe44:	f040 8223 	bne.w	2028e <_svfprintf_r+0x138e>
   1fe48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fe4c:	9304      	str	r3, [sp, #16]
   1fe4e:	2367      	movs	r3, #103	; 0x67
   1fe50:	920a      	str	r2, [sp, #40]	; 0x28
   1fe52:	930d      	str	r3, [sp, #52]	; 0x34
   1fe54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fe56:	2b00      	cmp	r3, #0
   1fe58:	f040 80cb 	bne.w	1fff2 <_svfprintf_r+0x10f2>
   1fe5c:	9306      	str	r3, [sp, #24]
   1fe5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fe62:	f7ff b965 	b.w	1f130 <_svfprintf_r+0x230>
   1fe66:	f025 0507 	bic.w	r5, r5, #7
   1fe6a:	ed95 7b00 	vldr	d7, [r5]
   1fe6e:	f105 0308 	add.w	r3, r5, #8
   1fe72:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fe76:	930b      	str	r3, [sp, #44]	; 0x2c
   1fe78:	e416      	b.n	1f6a8 <_svfprintf_r+0x7a8>
   1fe7a:	4635      	mov	r5, r6
   1fe7c:	460c      	mov	r4, r1
   1fe7e:	4646      	mov	r6, r8
   1fe80:	4690      	mov	r8, r2
   1fe82:	3301      	adds	r3, #1
   1fe84:	443c      	add	r4, r7
   1fe86:	2b07      	cmp	r3, #7
   1fe88:	9425      	str	r4, [sp, #148]	; 0x94
   1fe8a:	9324      	str	r3, [sp, #144]	; 0x90
   1fe8c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fe90:	f73f aecf 	bgt.w	1fc32 <_svfprintf_r+0xd32>
   1fe94:	f108 0808 	add.w	r8, r8, #8
   1fe98:	e6d5      	b.n	1fc46 <_svfprintf_r+0xd46>
   1fe9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fe9c:	6813      	ldr	r3, [r2, #0]
   1fe9e:	3204      	adds	r2, #4
   1fea0:	920b      	str	r2, [sp, #44]	; 0x2c
   1fea2:	9a05      	ldr	r2, [sp, #20]
   1fea4:	601a      	str	r2, [r3, #0]
   1fea6:	f7ff b852 	b.w	1ef4e <_svfprintf_r+0x4e>
   1feaa:	aa23      	add	r2, sp, #140	; 0x8c
   1feac:	9907      	ldr	r1, [sp, #28]
   1feae:	9808      	ldr	r0, [sp, #32]
   1feb0:	f002 f9d8 	bl	22264 <__ssprint_r>
   1feb4:	2800      	cmp	r0, #0
   1feb6:	f47f a8f5 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1feba:	46c8      	mov	r8, r9
   1febc:	e488      	b.n	1f7d0 <_svfprintf_r+0x8d0>
   1febe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fec0:	4a27      	ldr	r2, [pc, #156]	; (1ff60 <_svfprintf_r+0x1060>)
   1fec2:	f8c8 2000 	str.w	r2, [r8]
   1fec6:	3301      	adds	r3, #1
   1fec8:	3401      	adds	r4, #1
   1feca:	2201      	movs	r2, #1
   1fecc:	2b07      	cmp	r3, #7
   1fece:	9425      	str	r4, [sp, #148]	; 0x94
   1fed0:	9324      	str	r3, [sp, #144]	; 0x90
   1fed2:	f8c8 2004 	str.w	r2, [r8, #4]
   1fed6:	dc54      	bgt.n	1ff82 <_svfprintf_r+0x1082>
   1fed8:	f108 0808 	add.w	r8, r8, #8
   1fedc:	b929      	cbnz	r1, 1feea <_svfprintf_r+0xfea>
   1fede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fee0:	b91b      	cbnz	r3, 1feea <_svfprintf_r+0xfea>
   1fee2:	9b03      	ldr	r3, [sp, #12]
   1fee4:	07d8      	lsls	r0, r3, #31
   1fee6:	f57f a9f2 	bpl.w	1f2ce <_svfprintf_r+0x3ce>
   1feea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1feec:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1feee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fef0:	f8c8 2000 	str.w	r2, [r8]
   1fef4:	3301      	adds	r3, #1
   1fef6:	4602      	mov	r2, r0
   1fef8:	4422      	add	r2, r4
   1fefa:	2b07      	cmp	r3, #7
   1fefc:	9225      	str	r2, [sp, #148]	; 0x94
   1fefe:	f8c8 0004 	str.w	r0, [r8, #4]
   1ff02:	9324      	str	r3, [sp, #144]	; 0x90
   1ff04:	f300 8195 	bgt.w	20232 <_svfprintf_r+0x1332>
   1ff08:	f108 0808 	add.w	r8, r8, #8
   1ff0c:	2900      	cmp	r1, #0
   1ff0e:	f2c0 816d 	blt.w	201ec <_svfprintf_r+0x12ec>
   1ff12:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1ff14:	f8c8 6000 	str.w	r6, [r8]
   1ff18:	3301      	adds	r3, #1
   1ff1a:	188c      	adds	r4, r1, r2
   1ff1c:	2b07      	cmp	r3, #7
   1ff1e:	9425      	str	r4, [sp, #148]	; 0x94
   1ff20:	9324      	str	r3, [sp, #144]	; 0x90
   1ff22:	f8c8 1004 	str.w	r1, [r8, #4]
   1ff26:	f77f a9d0 	ble.w	1f2ca <_svfprintf_r+0x3ca>
   1ff2a:	e529      	b.n	1f980 <_svfprintf_r+0xa80>
   1ff2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ff2e:	9905      	ldr	r1, [sp, #20]
   1ff30:	6813      	ldr	r3, [r2, #0]
   1ff32:	17cd      	asrs	r5, r1, #31
   1ff34:	4608      	mov	r0, r1
   1ff36:	3204      	adds	r2, #4
   1ff38:	4629      	mov	r1, r5
   1ff3a:	920b      	str	r2, [sp, #44]	; 0x2c
   1ff3c:	e9c3 0100 	strd	r0, r1, [r3]
   1ff40:	f7ff b805 	b.w	1ef4e <_svfprintf_r+0x4e>
   1ff44:	aa23      	add	r2, sp, #140	; 0x8c
   1ff46:	9907      	ldr	r1, [sp, #28]
   1ff48:	9808      	ldr	r0, [sp, #32]
   1ff4a:	f002 f98b 	bl	22264 <__ssprint_r>
   1ff4e:	2800      	cmp	r0, #0
   1ff50:	f47f a8a8 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1ff54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ff56:	46c8      	mov	r8, r9
   1ff58:	e453      	b.n	1f802 <_svfprintf_r+0x902>
   1ff5a:	bf00      	nop
   1ff5c:	00024cf4 	.word	0x00024cf4
   1ff60:	00024ce0 	.word	0x00024ce0
   1ff64:	2140      	movs	r1, #64	; 0x40
   1ff66:	9808      	ldr	r0, [sp, #32]
   1ff68:	f7fd fe7c 	bl	1dc64 <_malloc_r>
   1ff6c:	9a07      	ldr	r2, [sp, #28]
   1ff6e:	6010      	str	r0, [r2, #0]
   1ff70:	6110      	str	r0, [r2, #16]
   1ff72:	2800      	cmp	r0, #0
   1ff74:	f000 81f6 	beq.w	20364 <_svfprintf_r+0x1464>
   1ff78:	9a07      	ldr	r2, [sp, #28]
   1ff7a:	2340      	movs	r3, #64	; 0x40
   1ff7c:	6153      	str	r3, [r2, #20]
   1ff7e:	f7fe bfd6 	b.w	1ef2e <_svfprintf_r+0x2e>
   1ff82:	aa23      	add	r2, sp, #140	; 0x8c
   1ff84:	9907      	ldr	r1, [sp, #28]
   1ff86:	9808      	ldr	r0, [sp, #32]
   1ff88:	f002 f96c 	bl	22264 <__ssprint_r>
   1ff8c:	2800      	cmp	r0, #0
   1ff8e:	f47f a889 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   1ff92:	991d      	ldr	r1, [sp, #116]	; 0x74
   1ff94:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ff96:	46c8      	mov	r8, r9
   1ff98:	e7a0      	b.n	1fedc <_svfprintf_r+0xfdc>
   1ff9a:	9d06      	ldr	r5, [sp, #24]
   1ff9c:	9808      	ldr	r0, [sp, #32]
   1ff9e:	aa21      	add	r2, sp, #132	; 0x84
   1ffa0:	ab1e      	add	r3, sp, #120	; 0x78
   1ffa2:	9201      	str	r2, [sp, #4]
   1ffa4:	9300      	str	r3, [sp, #0]
   1ffa6:	462a      	mov	r2, r5
   1ffa8:	ab1d      	add	r3, sp, #116	; 0x74
   1ffaa:	2103      	movs	r1, #3
   1ffac:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1ffb0:	f000 fbc2 	bl	20738 <_dtoa_r>
   1ffb4:	4606      	mov	r6, r0
   1ffb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ffb8:	2b46      	cmp	r3, #70	; 0x46
   1ffba:	eb06 0405 	add.w	r4, r6, r5
   1ffbe:	f47f af17 	bne.w	1fdf0 <_svfprintf_r+0xef0>
   1ffc2:	7833      	ldrb	r3, [r6, #0]
   1ffc4:	2b30      	cmp	r3, #48	; 0x30
   1ffc6:	f000 817d 	beq.w	202c4 <_svfprintf_r+0x13c4>
   1ffca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1ffcc:	442c      	add	r4, r5
   1ffce:	e70f      	b.n	1fdf0 <_svfprintf_r+0xef0>
   1ffd0:	9b06      	ldr	r3, [sp, #24]
   1ffd2:	2b00      	cmp	r3, #0
   1ffd4:	bf08      	it	eq
   1ffd6:	2301      	moveq	r3, #1
   1ffd8:	9306      	str	r3, [sp, #24]
   1ffda:	e6d9      	b.n	1fd90 <_svfprintf_r+0xe90>
   1ffdc:	4630      	mov	r0, r6
   1ffde:	9406      	str	r4, [sp, #24]
   1ffe0:	f7fe fece 	bl	1ed80 <strlen>
   1ffe4:	950b      	str	r5, [sp, #44]	; 0x2c
   1ffe6:	900a      	str	r0, [sp, #40]	; 0x28
   1ffe8:	f8cd b00c 	str.w	fp, [sp, #12]
   1ffec:	4603      	mov	r3, r0
   1ffee:	f7ff b9eb 	b.w	1f3c8 <_svfprintf_r+0x4c8>
   1fff2:	272d      	movs	r7, #45	; 0x2d
   1fff4:	2300      	movs	r3, #0
   1fff6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fffa:	9306      	str	r3, [sp, #24]
   1fffc:	f7ff b899 	b.w	1f132 <_svfprintf_r+0x232>
   20000:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20002:	930e      	str	r3, [sp, #56]	; 0x38
   20004:	461a      	mov	r2, r3
   20006:	3303      	adds	r3, #3
   20008:	db04      	blt.n	20014 <_svfprintf_r+0x1114>
   2000a:	9b06      	ldr	r3, [sp, #24]
   2000c:	4619      	mov	r1, r3
   2000e:	4291      	cmp	r1, r2
   20010:	f6bf af10 	bge.w	1fe34 <_svfprintf_r+0xf34>
   20014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20016:	3b02      	subs	r3, #2
   20018:	930d      	str	r3, [sp, #52]	; 0x34
   2001a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2001e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   20022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20024:	3b01      	subs	r3, #1
   20026:	2b00      	cmp	r3, #0
   20028:	931d      	str	r3, [sp, #116]	; 0x74
   2002a:	bfbd      	ittte	lt
   2002c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   2002e:	f1c3 0301 	rsblt	r3, r3, #1
   20032:	222d      	movlt	r2, #45	; 0x2d
   20034:	222b      	movge	r2, #43	; 0x2b
   20036:	2b09      	cmp	r3, #9
   20038:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   2003c:	f340 811d 	ble.w	2027a <_svfprintf_r+0x137a>
   20040:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   20044:	4620      	mov	r0, r4
   20046:	4daf      	ldr	r5, [pc, #700]	; (20304 <_svfprintf_r+0x1404>)
   20048:	e000      	b.n	2004c <_svfprintf_r+0x114c>
   2004a:	4610      	mov	r0, r2
   2004c:	fb85 1203 	smull	r1, r2, r5, r3
   20050:	17d9      	asrs	r1, r3, #31
   20052:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   20056:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2005a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2005e:	3230      	adds	r2, #48	; 0x30
   20060:	2909      	cmp	r1, #9
   20062:	f800 2c01 	strb.w	r2, [r0, #-1]
   20066:	460b      	mov	r3, r1
   20068:	f100 32ff 	add.w	r2, r0, #4294967295
   2006c:	dced      	bgt.n	2004a <_svfprintf_r+0x114a>
   2006e:	3330      	adds	r3, #48	; 0x30
   20070:	3802      	subs	r0, #2
   20072:	b2d9      	uxtb	r1, r3
   20074:	4284      	cmp	r4, r0
   20076:	f802 1c01 	strb.w	r1, [r2, #-1]
   2007a:	f240 8170 	bls.w	2035e <_svfprintf_r+0x145e>
   2007e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   20082:	4613      	mov	r3, r2
   20084:	e001      	b.n	2008a <_svfprintf_r+0x118a>
   20086:	f813 1b01 	ldrb.w	r1, [r3], #1
   2008a:	f800 1b01 	strb.w	r1, [r0], #1
   2008e:	42a3      	cmp	r3, r4
   20090:	d1f9      	bne.n	20086 <_svfprintf_r+0x1186>
   20092:	3301      	adds	r3, #1
   20094:	1a9b      	subs	r3, r3, r2
   20096:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   2009a:	4413      	add	r3, r2
   2009c:	aa1f      	add	r2, sp, #124	; 0x7c
   2009e:	1a9b      	subs	r3, r3, r2
   200a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   200a2:	9315      	str	r3, [sp, #84]	; 0x54
   200a4:	2a01      	cmp	r2, #1
   200a6:	4413      	add	r3, r2
   200a8:	930a      	str	r3, [sp, #40]	; 0x28
   200aa:	f340 8120 	ble.w	202ee <_svfprintf_r+0x13ee>
   200ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   200b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   200b2:	4413      	add	r3, r2
   200b4:	930a      	str	r3, [sp, #40]	; 0x28
   200b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   200ba:	9304      	str	r3, [sp, #16]
   200bc:	2300      	movs	r3, #0
   200be:	930e      	str	r3, [sp, #56]	; 0x38
   200c0:	e6c8      	b.n	1fe54 <_svfprintf_r+0xf54>
   200c2:	4623      	mov	r3, r4
   200c4:	e6a7      	b.n	1fe16 <_svfprintf_r+0xf16>
   200c6:	aa23      	add	r2, sp, #140	; 0x8c
   200c8:	9907      	ldr	r1, [sp, #28]
   200ca:	9808      	ldr	r0, [sp, #32]
   200cc:	f002 f8ca 	bl	22264 <__ssprint_r>
   200d0:	2800      	cmp	r0, #0
   200d2:	f47e afe7 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   200d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   200d8:	46c8      	mov	r8, r9
   200da:	e4d5      	b.n	1fa88 <_svfprintf_r+0xb88>
   200dc:	aa23      	add	r2, sp, #140	; 0x8c
   200de:	9907      	ldr	r1, [sp, #28]
   200e0:	9808      	ldr	r0, [sp, #32]
   200e2:	f002 f8bf 	bl	22264 <__ssprint_r>
   200e6:	2800      	cmp	r0, #0
   200e8:	f47e afdc 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   200ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   200ee:	9c25      	ldr	r4, [sp, #148]	; 0x94
   200f0:	46c8      	mov	r8, r9
   200f2:	e5af      	b.n	1fc54 <_svfprintf_r+0xd54>
   200f4:	aa23      	add	r2, sp, #140	; 0x8c
   200f6:	9907      	ldr	r1, [sp, #28]
   200f8:	9808      	ldr	r0, [sp, #32]
   200fa:	f002 f8b3 	bl	22264 <__ssprint_r>
   200fe:	2800      	cmp	r0, #0
   20100:	f47e afd0 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   20104:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20108:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2010a:	1a9a      	subs	r2, r3, r2
   2010c:	46c8      	mov	r8, r9
   2010e:	e5b9      	b.n	1fc84 <_svfprintf_r+0xd84>
   20110:	9b06      	ldr	r3, [sp, #24]
   20112:	960e      	str	r6, [sp, #56]	; 0x38
   20114:	2b06      	cmp	r3, #6
   20116:	bf28      	it	cs
   20118:	2306      	movcs	r3, #6
   2011a:	9606      	str	r6, [sp, #24]
   2011c:	4637      	mov	r7, r6
   2011e:	9304      	str	r3, [sp, #16]
   20120:	950b      	str	r5, [sp, #44]	; 0x2c
   20122:	f8cd b00c 	str.w	fp, [sp, #12]
   20126:	930a      	str	r3, [sp, #40]	; 0x28
   20128:	4e77      	ldr	r6, [pc, #476]	; (20308 <_svfprintf_r+0x1408>)
   2012a:	f7ff b801 	b.w	1f130 <_svfprintf_r+0x230>
   2012e:	2306      	movs	r3, #6
   20130:	9306      	str	r3, [sp, #24]
   20132:	e62d      	b.n	1fd90 <_svfprintf_r+0xe90>
   20134:	9c06      	ldr	r4, [sp, #24]
   20136:	9808      	ldr	r0, [sp, #32]
   20138:	aa21      	add	r2, sp, #132	; 0x84
   2013a:	ab1e      	add	r3, sp, #120	; 0x78
   2013c:	9201      	str	r2, [sp, #4]
   2013e:	9300      	str	r3, [sp, #0]
   20140:	4622      	mov	r2, r4
   20142:	ab1d      	add	r3, sp, #116	; 0x74
   20144:	2103      	movs	r1, #3
   20146:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2014a:	f000 faf5 	bl	20738 <_dtoa_r>
   2014e:	4623      	mov	r3, r4
   20150:	4606      	mov	r6, r0
   20152:	1904      	adds	r4, r0, r4
   20154:	461d      	mov	r5, r3
   20156:	e734      	b.n	1ffc2 <_svfprintf_r+0x10c2>
   20158:	272d      	movs	r7, #45	; 0x2d
   2015a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2015e:	f7ff baca 	b.w	1f6f6 <_svfprintf_r+0x7f6>
   20162:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20166:	4413      	add	r3, r2
   20168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2016a:	930a      	str	r3, [sp, #40]	; 0x28
   2016c:	2a00      	cmp	r2, #0
   2016e:	f340 80b7 	ble.w	202e0 <_svfprintf_r+0x13e0>
   20172:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20176:	9304      	str	r3, [sp, #16]
   20178:	2367      	movs	r3, #103	; 0x67
   2017a:	930d      	str	r3, [sp, #52]	; 0x34
   2017c:	e66a      	b.n	1fe54 <_svfprintf_r+0xf54>
   2017e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20182:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20186:	9319      	str	r3, [sp, #100]	; 0x64
   20188:	232d      	movs	r3, #45	; 0x2d
   2018a:	9118      	str	r1, [sp, #96]	; 0x60
   2018c:	930c      	str	r3, [sp, #48]	; 0x30
   2018e:	e60c      	b.n	1fdaa <_svfprintf_r+0xeaa>
   20190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20192:	2b47      	cmp	r3, #71	; 0x47
   20194:	f47f ae2b 	bne.w	1fdee <_svfprintf_r+0xeee>
   20198:	f01b 0f01 	tst.w	fp, #1
   2019c:	f47f af0b 	bne.w	1ffb6 <_svfprintf_r+0x10b6>
   201a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   201a2:	2f47      	cmp	r7, #71	; 0x47
   201a4:	eba3 0306 	sub.w	r3, r3, r6
   201a8:	930f      	str	r3, [sp, #60]	; 0x3c
   201aa:	f43f af29 	beq.w	20000 <_svfprintf_r+0x1100>
   201ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   201b0:	930e      	str	r3, [sp, #56]	; 0x38
   201b2:	e732      	b.n	2001a <_svfprintf_r+0x111a>
   201b4:	2b00      	cmp	r3, #0
   201b6:	f340 80af 	ble.w	20318 <_svfprintf_r+0x1418>
   201ba:	9a06      	ldr	r2, [sp, #24]
   201bc:	2a00      	cmp	r2, #0
   201be:	d16b      	bne.n	20298 <_svfprintf_r+0x1398>
   201c0:	f01b 0f01 	tst.w	fp, #1
   201c4:	d168      	bne.n	20298 <_svfprintf_r+0x1398>
   201c6:	9304      	str	r3, [sp, #16]
   201c8:	930a      	str	r3, [sp, #40]	; 0x28
   201ca:	e643      	b.n	1fe54 <_svfprintf_r+0xf54>
   201cc:	9b06      	ldr	r3, [sp, #24]
   201ce:	9304      	str	r3, [sp, #16]
   201d0:	930a      	str	r3, [sp, #40]	; 0x28
   201d2:	9006      	str	r0, [sp, #24]
   201d4:	950b      	str	r5, [sp, #44]	; 0x2c
   201d6:	f8cd b00c 	str.w	fp, [sp, #12]
   201da:	900e      	str	r0, [sp, #56]	; 0x38
   201dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   201e0:	f7fe bfa6 	b.w	1f130 <_svfprintf_r+0x230>
   201e4:	2000      	movs	r0, #0
   201e6:	9006      	str	r0, [sp, #24]
   201e8:	f7fe bee4 	b.w	1efb4 <_svfprintf_r+0xb4>
   201ec:	424f      	negs	r7, r1
   201ee:	3110      	adds	r1, #16
   201f0:	4d46      	ldr	r5, [pc, #280]	; (2030c <_svfprintf_r+0x140c>)
   201f2:	da2b      	bge.n	2024c <_svfprintf_r+0x134c>
   201f4:	2410      	movs	r4, #16
   201f6:	f8dd b020 	ldr.w	fp, [sp, #32]
   201fa:	e004      	b.n	20206 <_svfprintf_r+0x1306>
   201fc:	f108 0808 	add.w	r8, r8, #8
   20200:	3f10      	subs	r7, #16
   20202:	2f10      	cmp	r7, #16
   20204:	dd22      	ble.n	2024c <_svfprintf_r+0x134c>
   20206:	3301      	adds	r3, #1
   20208:	3210      	adds	r2, #16
   2020a:	2b07      	cmp	r3, #7
   2020c:	9225      	str	r2, [sp, #148]	; 0x94
   2020e:	9324      	str	r3, [sp, #144]	; 0x90
   20210:	f8c8 5000 	str.w	r5, [r8]
   20214:	f8c8 4004 	str.w	r4, [r8, #4]
   20218:	ddf0      	ble.n	201fc <_svfprintf_r+0x12fc>
   2021a:	aa23      	add	r2, sp, #140	; 0x8c
   2021c:	9907      	ldr	r1, [sp, #28]
   2021e:	4658      	mov	r0, fp
   20220:	f002 f820 	bl	22264 <__ssprint_r>
   20224:	2800      	cmp	r0, #0
   20226:	f47e af3d 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   2022a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2022c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2022e:	46c8      	mov	r8, r9
   20230:	e7e6      	b.n	20200 <_svfprintf_r+0x1300>
   20232:	aa23      	add	r2, sp, #140	; 0x8c
   20234:	9907      	ldr	r1, [sp, #28]
   20236:	9808      	ldr	r0, [sp, #32]
   20238:	f002 f814 	bl	22264 <__ssprint_r>
   2023c:	2800      	cmp	r0, #0
   2023e:	f47e af31 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   20242:	991d      	ldr	r1, [sp, #116]	; 0x74
   20244:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20246:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20248:	46c8      	mov	r8, r9
   2024a:	e65f      	b.n	1ff0c <_svfprintf_r+0x100c>
   2024c:	3301      	adds	r3, #1
   2024e:	443a      	add	r2, r7
   20250:	2b07      	cmp	r3, #7
   20252:	e888 00a0 	stmia.w	r8, {r5, r7}
   20256:	9225      	str	r2, [sp, #148]	; 0x94
   20258:	9324      	str	r3, [sp, #144]	; 0x90
   2025a:	f108 0808 	add.w	r8, r8, #8
   2025e:	f77f ae58 	ble.w	1ff12 <_svfprintf_r+0x1012>
   20262:	aa23      	add	r2, sp, #140	; 0x8c
   20264:	9907      	ldr	r1, [sp, #28]
   20266:	9808      	ldr	r0, [sp, #32]
   20268:	f001 fffc 	bl	22264 <__ssprint_r>
   2026c:	2800      	cmp	r0, #0
   2026e:	f47e af19 	bne.w	1f0a4 <_svfprintf_r+0x1a4>
   20272:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20274:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20276:	46c8      	mov	r8, r9
   20278:	e64b      	b.n	1ff12 <_svfprintf_r+0x1012>
   2027a:	3330      	adds	r3, #48	; 0x30
   2027c:	2230      	movs	r2, #48	; 0x30
   2027e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20282:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20286:	ab20      	add	r3, sp, #128	; 0x80
   20288:	e708      	b.n	2009c <_svfprintf_r+0x119c>
   2028a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2028c:	e5c3      	b.n	1fe16 <_svfprintf_r+0xf16>
   2028e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20292:	4413      	add	r3, r2
   20294:	930a      	str	r3, [sp, #40]	; 0x28
   20296:	e76c      	b.n	20172 <_svfprintf_r+0x1272>
   20298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2029a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2029c:	4413      	add	r3, r2
   2029e:	9a06      	ldr	r2, [sp, #24]
   202a0:	441a      	add	r2, r3
   202a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   202a6:	920a      	str	r2, [sp, #40]	; 0x28
   202a8:	9304      	str	r3, [sp, #16]
   202aa:	e5d3      	b.n	1fe54 <_svfprintf_r+0xf54>
   202ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   202ae:	4e18      	ldr	r6, [pc, #96]	; (20310 <_svfprintf_r+0x1410>)
   202b0:	2b00      	cmp	r3, #0
   202b2:	bfb6      	itet	lt
   202b4:	272d      	movlt	r7, #45	; 0x2d
   202b6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   202ba:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   202be:	4b15      	ldr	r3, [pc, #84]	; (20314 <_svfprintf_r+0x1414>)
   202c0:	f7ff ba1b 	b.w	1f6fa <_svfprintf_r+0x7fa>
   202c4:	2200      	movs	r2, #0
   202c6:	2300      	movs	r3, #0
   202c8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   202cc:	f7fb fec2 	bl	1c054 <__aeabi_dcmpeq>
   202d0:	2800      	cmp	r0, #0
   202d2:	f47f ae7a 	bne.w	1ffca <_svfprintf_r+0x10ca>
   202d6:	f1c5 0501 	rsb	r5, r5, #1
   202da:	951d      	str	r5, [sp, #116]	; 0x74
   202dc:	442c      	add	r4, r5
   202de:	e587      	b.n	1fdf0 <_svfprintf_r+0xef0>
   202e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   202e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   202e4:	f1c3 0301 	rsb	r3, r3, #1
   202e8:	441a      	add	r2, r3
   202ea:	4613      	mov	r3, r2
   202ec:	e7d2      	b.n	20294 <_svfprintf_r+0x1394>
   202ee:	f01b 0301 	ands.w	r3, fp, #1
   202f2:	930e      	str	r3, [sp, #56]	; 0x38
   202f4:	f47f aedb 	bne.w	200ae <_svfprintf_r+0x11ae>
   202f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   202fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   202fe:	9304      	str	r3, [sp, #16]
   20300:	e5a8      	b.n	1fe54 <_svfprintf_r+0xf54>
   20302:	bf00      	nop
   20304:	66666667 	.word	0x66666667
   20308:	00024cd8 	.word	0x00024cd8
   2030c:	00024cf4 	.word	0x00024cf4
   20310:	00024cac 	.word	0x00024cac
   20314:	00024ca8 	.word	0x00024ca8
   20318:	9b06      	ldr	r3, [sp, #24]
   2031a:	b913      	cbnz	r3, 20322 <_svfprintf_r+0x1422>
   2031c:	f01b 0f01 	tst.w	fp, #1
   20320:	d002      	beq.n	20328 <_svfprintf_r+0x1428>
   20322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20324:	3301      	adds	r3, #1
   20326:	e7ba      	b.n	2029e <_svfprintf_r+0x139e>
   20328:	2301      	movs	r3, #1
   2032a:	e74c      	b.n	201c6 <_svfprintf_r+0x12c6>
   2032c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2032e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   20332:	6828      	ldr	r0, [r5, #0]
   20334:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   20338:	9006      	str	r0, [sp, #24]
   2033a:	4628      	mov	r0, r5
   2033c:	3004      	adds	r0, #4
   2033e:	46a2      	mov	sl, r4
   20340:	900b      	str	r0, [sp, #44]	; 0x2c
   20342:	f7fe be35 	b.w	1efb0 <_svfprintf_r+0xb0>
   20346:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2034a:	f7ff b852 	b.w	1f3f2 <_svfprintf_r+0x4f2>
   2034e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20352:	f7ff b8de 	b.w	1f512 <_svfprintf_r+0x612>
   20356:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2035a:	f7ff ba07 	b.w	1f76c <_svfprintf_r+0x86c>
   2035e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20362:	e69b      	b.n	2009c <_svfprintf_r+0x119c>
   20364:	9a08      	ldr	r2, [sp, #32]
   20366:	230c      	movs	r3, #12
   20368:	6013      	str	r3, [r2, #0]
   2036a:	f04f 33ff 	mov.w	r3, #4294967295
   2036e:	9305      	str	r3, [sp, #20]
   20370:	f7fe bea1 	b.w	1f0b6 <_svfprintf_r+0x1b6>
   20374:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20378:	f7ff b986 	b.w	1f688 <_svfprintf_r+0x788>
   2037c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20380:	f7ff b962 	b.w	1f648 <_svfprintf_r+0x748>
   20384:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20388:	f7ff b945 	b.w	1f616 <_svfprintf_r+0x716>
   2038c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20390:	f7ff b8fe 	b.w	1f590 <_svfprintf_r+0x690>

00020394 <write>:
   20394:	b410      	push	{r4}
   20396:	4c04      	ldr	r4, [pc, #16]	; (203a8 <write+0x14>)
   20398:	4613      	mov	r3, r2
   2039a:	460a      	mov	r2, r1
   2039c:	4601      	mov	r1, r0
   2039e:	6820      	ldr	r0, [r4, #0]
   203a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   203a4:	f000 b8aa 	b.w	204fc <_write_r>
   203a8:	200000f8 	.word	0x200000f8

000203ac <__utoa>:
   203ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   203ae:	f8df e078 	ldr.w	lr, [pc, #120]	; 20428 <__utoa+0x7c>
   203b2:	4616      	mov	r6, r2
   203b4:	4604      	mov	r4, r0
   203b6:	460f      	mov	r7, r1
   203b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   203bc:	b08b      	sub	sp, #44	; 0x2c
   203be:	466d      	mov	r5, sp
   203c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   203c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   203c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   203c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
   203cc:	1eb3      	subs	r3, r6, #2
   203ce:	f845 0b04 	str.w	r0, [r5], #4
   203d2:	2b22      	cmp	r3, #34	; 0x22
   203d4:	7029      	strb	r1, [r5, #0]
   203d6:	d822      	bhi.n	2041e <__utoa+0x72>
   203d8:	1e7d      	subs	r5, r7, #1
   203da:	4628      	mov	r0, r5
   203dc:	2200      	movs	r2, #0
   203de:	e000      	b.n	203e2 <__utoa+0x36>
   203e0:	461a      	mov	r2, r3
   203e2:	fbb4 f1f6 	udiv	r1, r4, r6
   203e6:	ab0a      	add	r3, sp, #40	; 0x28
   203e8:	fb06 4411 	mls	r4, r6, r1, r4
   203ec:	4423      	add	r3, r4
   203ee:	460c      	mov	r4, r1
   203f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   203f4:	f800 3f01 	strb.w	r3, [r0, #1]!
   203f8:	1c53      	adds	r3, r2, #1
   203fa:	2900      	cmp	r1, #0
   203fc:	d1f0      	bne.n	203e0 <__utoa+0x34>
   203fe:	54f9      	strb	r1, [r7, r3]
   20400:	18bb      	adds	r3, r7, r2
   20402:	b14a      	cbz	r2, 20418 <__utoa+0x6c>
   20404:	7819      	ldrb	r1, [r3, #0]
   20406:	7868      	ldrb	r0, [r5, #1]
   20408:	f805 1f01 	strb.w	r1, [r5, #1]!
   2040c:	3401      	adds	r4, #1
   2040e:	1b11      	subs	r1, r2, r4
   20410:	428c      	cmp	r4, r1
   20412:	f803 0901 	strb.w	r0, [r3], #-1
   20416:	dbf5      	blt.n	20404 <__utoa+0x58>
   20418:	4638      	mov	r0, r7
   2041a:	b00b      	add	sp, #44	; 0x2c
   2041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2041e:	2000      	movs	r0, #0
   20420:	7038      	strb	r0, [r7, #0]
   20422:	b00b      	add	sp, #44	; 0x2c
   20424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20426:	bf00      	nop
   20428:	00024d04 	.word	0x00024d04

0002042c <utoa>:
   2042c:	f7ff bfbe 	b.w	203ac <__utoa>

00020430 <__swbuf_r>:
   20430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20432:	460d      	mov	r5, r1
   20434:	4614      	mov	r4, r2
   20436:	4606      	mov	r6, r0
   20438:	b110      	cbz	r0, 20440 <__swbuf_r+0x10>
   2043a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2043c:	2b00      	cmp	r3, #0
   2043e:	d04b      	beq.n	204d8 <__swbuf_r+0xa8>
   20440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20444:	69a3      	ldr	r3, [r4, #24]
   20446:	60a3      	str	r3, [r4, #8]
   20448:	b291      	uxth	r1, r2
   2044a:	0708      	lsls	r0, r1, #28
   2044c:	d539      	bpl.n	204c2 <__swbuf_r+0x92>
   2044e:	6923      	ldr	r3, [r4, #16]
   20450:	2b00      	cmp	r3, #0
   20452:	d036      	beq.n	204c2 <__swbuf_r+0x92>
   20454:	b2ed      	uxtb	r5, r5
   20456:	0489      	lsls	r1, r1, #18
   20458:	462f      	mov	r7, r5
   2045a:	d515      	bpl.n	20488 <__swbuf_r+0x58>
   2045c:	6822      	ldr	r2, [r4, #0]
   2045e:	6961      	ldr	r1, [r4, #20]
   20460:	1ad3      	subs	r3, r2, r3
   20462:	428b      	cmp	r3, r1
   20464:	da1c      	bge.n	204a0 <__swbuf_r+0x70>
   20466:	3301      	adds	r3, #1
   20468:	68a1      	ldr	r1, [r4, #8]
   2046a:	1c50      	adds	r0, r2, #1
   2046c:	3901      	subs	r1, #1
   2046e:	60a1      	str	r1, [r4, #8]
   20470:	6020      	str	r0, [r4, #0]
   20472:	7015      	strb	r5, [r2, #0]
   20474:	6962      	ldr	r2, [r4, #20]
   20476:	429a      	cmp	r2, r3
   20478:	d01a      	beq.n	204b0 <__swbuf_r+0x80>
   2047a:	89a3      	ldrh	r3, [r4, #12]
   2047c:	07db      	lsls	r3, r3, #31
   2047e:	d501      	bpl.n	20484 <__swbuf_r+0x54>
   20480:	2d0a      	cmp	r5, #10
   20482:	d015      	beq.n	204b0 <__swbuf_r+0x80>
   20484:	4638      	mov	r0, r7
   20486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20488:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2048a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2048e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   20492:	81a2      	strh	r2, [r4, #12]
   20494:	6822      	ldr	r2, [r4, #0]
   20496:	6661      	str	r1, [r4, #100]	; 0x64
   20498:	6961      	ldr	r1, [r4, #20]
   2049a:	1ad3      	subs	r3, r2, r3
   2049c:	428b      	cmp	r3, r1
   2049e:	dbe2      	blt.n	20466 <__swbuf_r+0x36>
   204a0:	4621      	mov	r1, r4
   204a2:	4630      	mov	r0, r6
   204a4:	f001 f90e 	bl	216c4 <_fflush_r>
   204a8:	b940      	cbnz	r0, 204bc <__swbuf_r+0x8c>
   204aa:	6822      	ldr	r2, [r4, #0]
   204ac:	2301      	movs	r3, #1
   204ae:	e7db      	b.n	20468 <__swbuf_r+0x38>
   204b0:	4621      	mov	r1, r4
   204b2:	4630      	mov	r0, r6
   204b4:	f001 f906 	bl	216c4 <_fflush_r>
   204b8:	2800      	cmp	r0, #0
   204ba:	d0e3      	beq.n	20484 <__swbuf_r+0x54>
   204bc:	f04f 37ff 	mov.w	r7, #4294967295
   204c0:	e7e0      	b.n	20484 <__swbuf_r+0x54>
   204c2:	4621      	mov	r1, r4
   204c4:	4630      	mov	r0, r6
   204c6:	f000 f82f 	bl	20528 <__swsetup_r>
   204ca:	2800      	cmp	r0, #0
   204cc:	d1f6      	bne.n	204bc <__swbuf_r+0x8c>
   204ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   204d2:	6923      	ldr	r3, [r4, #16]
   204d4:	b291      	uxth	r1, r2
   204d6:	e7bd      	b.n	20454 <__swbuf_r+0x24>
   204d8:	f001 f94c 	bl	21774 <__sinit>
   204dc:	e7b0      	b.n	20440 <__swbuf_r+0x10>
   204de:	bf00      	nop

000204e0 <__ascii_wctomb>:
   204e0:	b121      	cbz	r1, 204ec <__ascii_wctomb+0xc>
   204e2:	2aff      	cmp	r2, #255	; 0xff
   204e4:	d804      	bhi.n	204f0 <__ascii_wctomb+0x10>
   204e6:	700a      	strb	r2, [r1, #0]
   204e8:	2001      	movs	r0, #1
   204ea:	4770      	bx	lr
   204ec:	4608      	mov	r0, r1
   204ee:	4770      	bx	lr
   204f0:	238a      	movs	r3, #138	; 0x8a
   204f2:	6003      	str	r3, [r0, #0]
   204f4:	f04f 30ff 	mov.w	r0, #4294967295
   204f8:	4770      	bx	lr
   204fa:	bf00      	nop

000204fc <_write_r>:
   204fc:	b570      	push	{r4, r5, r6, lr}
   204fe:	460d      	mov	r5, r1
   20500:	4c08      	ldr	r4, [pc, #32]	; (20524 <_write_r+0x28>)
   20502:	4611      	mov	r1, r2
   20504:	4606      	mov	r6, r0
   20506:	461a      	mov	r2, r3
   20508:	4628      	mov	r0, r5
   2050a:	2300      	movs	r3, #0
   2050c:	6023      	str	r3, [r4, #0]
   2050e:	f002 f933 	bl	22778 <_write>
   20512:	1c43      	adds	r3, r0, #1
   20514:	d000      	beq.n	20518 <_write_r+0x1c>
   20516:	bd70      	pop	{r4, r5, r6, pc}
   20518:	6823      	ldr	r3, [r4, #0]
   2051a:	2b00      	cmp	r3, #0
   2051c:	d0fb      	beq.n	20516 <_write_r+0x1a>
   2051e:	6033      	str	r3, [r6, #0]
   20520:	bd70      	pop	{r4, r5, r6, pc}
   20522:	bf00      	nop
   20524:	2000239c 	.word	0x2000239c

00020528 <__swsetup_r>:
   20528:	b538      	push	{r3, r4, r5, lr}
   2052a:	4b30      	ldr	r3, [pc, #192]	; (205ec <__swsetup_r+0xc4>)
   2052c:	681b      	ldr	r3, [r3, #0]
   2052e:	4605      	mov	r5, r0
   20530:	460c      	mov	r4, r1
   20532:	b113      	cbz	r3, 2053a <__swsetup_r+0x12>
   20534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20536:	2a00      	cmp	r2, #0
   20538:	d038      	beq.n	205ac <__swsetup_r+0x84>
   2053a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2053e:	b293      	uxth	r3, r2
   20540:	0718      	lsls	r0, r3, #28
   20542:	d50c      	bpl.n	2055e <__swsetup_r+0x36>
   20544:	6920      	ldr	r0, [r4, #16]
   20546:	b1a8      	cbz	r0, 20574 <__swsetup_r+0x4c>
   20548:	f013 0201 	ands.w	r2, r3, #1
   2054c:	d01e      	beq.n	2058c <__swsetup_r+0x64>
   2054e:	6963      	ldr	r3, [r4, #20]
   20550:	2200      	movs	r2, #0
   20552:	425b      	negs	r3, r3
   20554:	61a3      	str	r3, [r4, #24]
   20556:	60a2      	str	r2, [r4, #8]
   20558:	b1f0      	cbz	r0, 20598 <__swsetup_r+0x70>
   2055a:	2000      	movs	r0, #0
   2055c:	bd38      	pop	{r3, r4, r5, pc}
   2055e:	06d9      	lsls	r1, r3, #27
   20560:	d53c      	bpl.n	205dc <__swsetup_r+0xb4>
   20562:	0758      	lsls	r0, r3, #29
   20564:	d426      	bmi.n	205b4 <__swsetup_r+0x8c>
   20566:	6920      	ldr	r0, [r4, #16]
   20568:	f042 0308 	orr.w	r3, r2, #8
   2056c:	81a3      	strh	r3, [r4, #12]
   2056e:	b29b      	uxth	r3, r3
   20570:	2800      	cmp	r0, #0
   20572:	d1e9      	bne.n	20548 <__swsetup_r+0x20>
   20574:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20578:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2057c:	d0e4      	beq.n	20548 <__swsetup_r+0x20>
   2057e:	4628      	mov	r0, r5
   20580:	4621      	mov	r1, r4
   20582:	f001 fae5 	bl	21b50 <__smakebuf_r>
   20586:	89a3      	ldrh	r3, [r4, #12]
   20588:	6920      	ldr	r0, [r4, #16]
   2058a:	e7dd      	b.n	20548 <__swsetup_r+0x20>
   2058c:	0799      	lsls	r1, r3, #30
   2058e:	bf58      	it	pl
   20590:	6962      	ldrpl	r2, [r4, #20]
   20592:	60a2      	str	r2, [r4, #8]
   20594:	2800      	cmp	r0, #0
   20596:	d1e0      	bne.n	2055a <__swsetup_r+0x32>
   20598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2059c:	061a      	lsls	r2, r3, #24
   2059e:	d5dd      	bpl.n	2055c <__swsetup_r+0x34>
   205a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   205a4:	81a3      	strh	r3, [r4, #12]
   205a6:	f04f 30ff 	mov.w	r0, #4294967295
   205aa:	bd38      	pop	{r3, r4, r5, pc}
   205ac:	4618      	mov	r0, r3
   205ae:	f001 f8e1 	bl	21774 <__sinit>
   205b2:	e7c2      	b.n	2053a <__swsetup_r+0x12>
   205b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   205b6:	b151      	cbz	r1, 205ce <__swsetup_r+0xa6>
   205b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   205bc:	4299      	cmp	r1, r3
   205be:	d004      	beq.n	205ca <__swsetup_r+0xa2>
   205c0:	4628      	mov	r0, r5
   205c2:	f001 f979 	bl	218b8 <_free_r>
   205c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   205ca:	2300      	movs	r3, #0
   205cc:	6323      	str	r3, [r4, #48]	; 0x30
   205ce:	2300      	movs	r3, #0
   205d0:	6920      	ldr	r0, [r4, #16]
   205d2:	6063      	str	r3, [r4, #4]
   205d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   205d8:	6020      	str	r0, [r4, #0]
   205da:	e7c5      	b.n	20568 <__swsetup_r+0x40>
   205dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   205e0:	2309      	movs	r3, #9
   205e2:	602b      	str	r3, [r5, #0]
   205e4:	f04f 30ff 	mov.w	r0, #4294967295
   205e8:	81a2      	strh	r2, [r4, #12]
   205ea:	bd38      	pop	{r3, r4, r5, pc}
   205ec:	200000f8 	.word	0x200000f8

000205f0 <register_fini>:
   205f0:	4b02      	ldr	r3, [pc, #8]	; (205fc <register_fini+0xc>)
   205f2:	b113      	cbz	r3, 205fa <register_fini+0xa>
   205f4:	4802      	ldr	r0, [pc, #8]	; (20600 <register_fini+0x10>)
   205f6:	f000 b805 	b.w	20604 <atexit>
   205fa:	4770      	bx	lr
   205fc:	00000000 	.word	0x00000000
   20600:	000217e5 	.word	0x000217e5

00020604 <atexit>:
   20604:	2300      	movs	r3, #0
   20606:	4601      	mov	r1, r0
   20608:	461a      	mov	r2, r3
   2060a:	4618      	mov	r0, r3
   2060c:	f001 bea8 	b.w	22360 <__register_exitproc>

00020610 <quorem>:
   20610:	6902      	ldr	r2, [r0, #16]
   20612:	690b      	ldr	r3, [r1, #16]
   20614:	4293      	cmp	r3, r2
   20616:	f300 808d 	bgt.w	20734 <quorem+0x124>
   2061a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2061e:	f103 38ff 	add.w	r8, r3, #4294967295
   20622:	f101 0714 	add.w	r7, r1, #20
   20626:	f100 0b14 	add.w	fp, r0, #20
   2062a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2062e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   20632:	ea4f 0488 	mov.w	r4, r8, lsl #2
   20636:	b083      	sub	sp, #12
   20638:	3201      	adds	r2, #1
   2063a:	fbb3 f9f2 	udiv	r9, r3, r2
   2063e:	eb0b 0304 	add.w	r3, fp, r4
   20642:	9400      	str	r4, [sp, #0]
   20644:	eb07 0a04 	add.w	sl, r7, r4
   20648:	9301      	str	r3, [sp, #4]
   2064a:	f1b9 0f00 	cmp.w	r9, #0
   2064e:	d039      	beq.n	206c4 <quorem+0xb4>
   20650:	2500      	movs	r5, #0
   20652:	462e      	mov	r6, r5
   20654:	46bc      	mov	ip, r7
   20656:	46de      	mov	lr, fp
   20658:	f85c 4b04 	ldr.w	r4, [ip], #4
   2065c:	f8de 3000 	ldr.w	r3, [lr]
   20660:	b2a2      	uxth	r2, r4
   20662:	fb09 5502 	mla	r5, r9, r2, r5
   20666:	0c22      	lsrs	r2, r4, #16
   20668:	0c2c      	lsrs	r4, r5, #16
   2066a:	fb09 4202 	mla	r2, r9, r2, r4
   2066e:	b2ad      	uxth	r5, r5
   20670:	1b75      	subs	r5, r6, r5
   20672:	b296      	uxth	r6, r2
   20674:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20678:	fa15 f383 	uxtah	r3, r5, r3
   2067c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20680:	b29b      	uxth	r3, r3
   20682:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20686:	45e2      	cmp	sl, ip
   20688:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2068c:	f84e 3b04 	str.w	r3, [lr], #4
   20690:	ea4f 4626 	mov.w	r6, r6, asr #16
   20694:	d2e0      	bcs.n	20658 <quorem+0x48>
   20696:	9b00      	ldr	r3, [sp, #0]
   20698:	f85b 3003 	ldr.w	r3, [fp, r3]
   2069c:	b993      	cbnz	r3, 206c4 <quorem+0xb4>
   2069e:	9c01      	ldr	r4, [sp, #4]
   206a0:	1f23      	subs	r3, r4, #4
   206a2:	459b      	cmp	fp, r3
   206a4:	d20c      	bcs.n	206c0 <quorem+0xb0>
   206a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   206aa:	b94b      	cbnz	r3, 206c0 <quorem+0xb0>
   206ac:	f1a4 0308 	sub.w	r3, r4, #8
   206b0:	e002      	b.n	206b8 <quorem+0xa8>
   206b2:	681a      	ldr	r2, [r3, #0]
   206b4:	3b04      	subs	r3, #4
   206b6:	b91a      	cbnz	r2, 206c0 <quorem+0xb0>
   206b8:	459b      	cmp	fp, r3
   206ba:	f108 38ff 	add.w	r8, r8, #4294967295
   206be:	d3f8      	bcc.n	206b2 <quorem+0xa2>
   206c0:	f8c0 8010 	str.w	r8, [r0, #16]
   206c4:	4604      	mov	r4, r0
   206c6:	f001 fc8b 	bl	21fe0 <__mcmp>
   206ca:	2800      	cmp	r0, #0
   206cc:	db2e      	blt.n	2072c <quorem+0x11c>
   206ce:	f109 0901 	add.w	r9, r9, #1
   206d2:	465d      	mov	r5, fp
   206d4:	2300      	movs	r3, #0
   206d6:	f857 1b04 	ldr.w	r1, [r7], #4
   206da:	6828      	ldr	r0, [r5, #0]
   206dc:	b28a      	uxth	r2, r1
   206de:	1a9a      	subs	r2, r3, r2
   206e0:	0c0b      	lsrs	r3, r1, #16
   206e2:	fa12 f280 	uxtah	r2, r2, r0
   206e6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   206ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
   206ee:	b292      	uxth	r2, r2
   206f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   206f4:	45ba      	cmp	sl, r7
   206f6:	f845 2b04 	str.w	r2, [r5], #4
   206fa:	ea4f 4323 	mov.w	r3, r3, asr #16
   206fe:	d2ea      	bcs.n	206d6 <quorem+0xc6>
   20700:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20704:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20708:	b982      	cbnz	r2, 2072c <quorem+0x11c>
   2070a:	1f1a      	subs	r2, r3, #4
   2070c:	4593      	cmp	fp, r2
   2070e:	d20b      	bcs.n	20728 <quorem+0x118>
   20710:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20714:	b942      	cbnz	r2, 20728 <quorem+0x118>
   20716:	3b08      	subs	r3, #8
   20718:	e002      	b.n	20720 <quorem+0x110>
   2071a:	681a      	ldr	r2, [r3, #0]
   2071c:	3b04      	subs	r3, #4
   2071e:	b91a      	cbnz	r2, 20728 <quorem+0x118>
   20720:	459b      	cmp	fp, r3
   20722:	f108 38ff 	add.w	r8, r8, #4294967295
   20726:	d3f8      	bcc.n	2071a <quorem+0x10a>
   20728:	f8c4 8010 	str.w	r8, [r4, #16]
   2072c:	4648      	mov	r0, r9
   2072e:	b003      	add	sp, #12
   20730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20734:	2000      	movs	r0, #0
   20736:	4770      	bx	lr

00020738 <_dtoa_r>:
   20738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2073c:	ec57 6b10 	vmov	r6, r7, d0
   20740:	b097      	sub	sp, #92	; 0x5c
   20742:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20744:	9102      	str	r1, [sp, #8]
   20746:	4604      	mov	r4, r0
   20748:	4693      	mov	fp, r2
   2074a:	9303      	str	r3, [sp, #12]
   2074c:	e9cd 6700 	strd	r6, r7, [sp]
   20750:	b14d      	cbz	r5, 20766 <_dtoa_r+0x2e>
   20752:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20754:	606a      	str	r2, [r5, #4]
   20756:	2301      	movs	r3, #1
   20758:	4093      	lsls	r3, r2
   2075a:	60ab      	str	r3, [r5, #8]
   2075c:	4629      	mov	r1, r5
   2075e:	f001 fa67 	bl	21c30 <_Bfree>
   20762:	2300      	movs	r3, #0
   20764:	6423      	str	r3, [r4, #64]	; 0x40
   20766:	e9dd 2300 	ldrd	r2, r3, [sp]
   2076a:	2b00      	cmp	r3, #0
   2076c:	4699      	mov	r9, r3
   2076e:	db38      	blt.n	207e2 <_dtoa_r+0xaa>
   20770:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20772:	2300      	movs	r3, #0
   20774:	6013      	str	r3, [r2, #0]
   20776:	4ba0      	ldr	r3, [pc, #640]	; (209f8 <_dtoa_r+0x2c0>)
   20778:	ea33 0309 	bics.w	r3, r3, r9
   2077c:	d017      	beq.n	207ae <_dtoa_r+0x76>
   2077e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20782:	2200      	movs	r2, #0
   20784:	2300      	movs	r3, #0
   20786:	4630      	mov	r0, r6
   20788:	4639      	mov	r1, r7
   2078a:	f7fb fc63 	bl	1c054 <__aeabi_dcmpeq>
   2078e:	4680      	mov	r8, r0
   20790:	2800      	cmp	r0, #0
   20792:	d02f      	beq.n	207f4 <_dtoa_r+0xbc>
   20794:	9a03      	ldr	r2, [sp, #12]
   20796:	2301      	movs	r3, #1
   20798:	6013      	str	r3, [r2, #0]
   2079a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2079c:	2b00      	cmp	r3, #0
   2079e:	f000 80c4 	beq.w	2092a <_dtoa_r+0x1f2>
   207a2:	4896      	ldr	r0, [pc, #600]	; (209fc <_dtoa_r+0x2c4>)
   207a4:	6018      	str	r0, [r3, #0]
   207a6:	3801      	subs	r0, #1
   207a8:	b017      	add	sp, #92	; 0x5c
   207aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207ae:	9a03      	ldr	r2, [sp, #12]
   207b0:	f242 730f 	movw	r3, #9999	; 0x270f
   207b4:	6013      	str	r3, [r2, #0]
   207b6:	9b00      	ldr	r3, [sp, #0]
   207b8:	b96b      	cbnz	r3, 207d6 <_dtoa_r+0x9e>
   207ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
   207be:	b953      	cbnz	r3, 207d6 <_dtoa_r+0x9e>
   207c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   207c2:	488f      	ldr	r0, [pc, #572]	; (20a00 <_dtoa_r+0x2c8>)
   207c4:	2b00      	cmp	r3, #0
   207c6:	d0ef      	beq.n	207a8 <_dtoa_r+0x70>
   207c8:	f100 0308 	add.w	r3, r0, #8
   207cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   207ce:	6013      	str	r3, [r2, #0]
   207d0:	b017      	add	sp, #92	; 0x5c
   207d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   207d8:	488a      	ldr	r0, [pc, #552]	; (20a04 <_dtoa_r+0x2cc>)
   207da:	2b00      	cmp	r3, #0
   207dc:	d0e4      	beq.n	207a8 <_dtoa_r+0x70>
   207de:	1cc3      	adds	r3, r0, #3
   207e0:	e7f4      	b.n	207cc <_dtoa_r+0x94>
   207e2:	9a01      	ldr	r2, [sp, #4]
   207e4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   207e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   207ea:	f8cd 9004 	str.w	r9, [sp, #4]
   207ee:	2301      	movs	r3, #1
   207f0:	6013      	str	r3, [r2, #0]
   207f2:	e7c0      	b.n	20776 <_dtoa_r+0x3e>
   207f4:	aa14      	add	r2, sp, #80	; 0x50
   207f6:	a915      	add	r1, sp, #84	; 0x54
   207f8:	ec47 6b10 	vmov	d0, r6, r7
   207fc:	4620      	mov	r0, r4
   207fe:	f001 fc8f 	bl	22120 <__d2b>
   20802:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20806:	4682      	mov	sl, r0
   20808:	d073      	beq.n	208f2 <_dtoa_r+0x1ba>
   2080a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2080e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20812:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20816:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2081a:	4630      	mov	r0, r6
   2081c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20820:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   20824:	2200      	movs	r2, #0
   20826:	4b78      	ldr	r3, [pc, #480]	; (20a08 <_dtoa_r+0x2d0>)
   20828:	f7fa fff8 	bl	1b81c <__aeabi_dsub>
   2082c:	a36c      	add	r3, pc, #432	; (adr r3, 209e0 <_dtoa_r+0x2a8>)
   2082e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20832:	f7fb f9a7 	bl	1bb84 <__aeabi_dmul>
   20836:	a36c      	add	r3, pc, #432	; (adr r3, 209e8 <_dtoa_r+0x2b0>)
   20838:	e9d3 2300 	ldrd	r2, r3, [r3]
   2083c:	f7fa fff0 	bl	1b820 <__adddf3>
   20840:	4606      	mov	r6, r0
   20842:	4628      	mov	r0, r5
   20844:	460f      	mov	r7, r1
   20846:	f7fb f937 	bl	1bab8 <__aeabi_i2d>
   2084a:	a369      	add	r3, pc, #420	; (adr r3, 209f0 <_dtoa_r+0x2b8>)
   2084c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20850:	f7fb f998 	bl	1bb84 <__aeabi_dmul>
   20854:	4602      	mov	r2, r0
   20856:	460b      	mov	r3, r1
   20858:	4630      	mov	r0, r6
   2085a:	4639      	mov	r1, r7
   2085c:	f7fa ffe0 	bl	1b820 <__adddf3>
   20860:	4606      	mov	r6, r0
   20862:	460f      	mov	r7, r1
   20864:	f7fb fc28 	bl	1c0b8 <__aeabi_d2iz>
   20868:	2200      	movs	r2, #0
   2086a:	9004      	str	r0, [sp, #16]
   2086c:	2300      	movs	r3, #0
   2086e:	4630      	mov	r0, r6
   20870:	4639      	mov	r1, r7
   20872:	f7fb fbf9 	bl	1c068 <__aeabi_dcmplt>
   20876:	2800      	cmp	r0, #0
   20878:	f040 816f 	bne.w	20b5a <_dtoa_r+0x422>
   2087c:	9e04      	ldr	r6, [sp, #16]
   2087e:	2e16      	cmp	r6, #22
   20880:	f200 8159 	bhi.w	20b36 <_dtoa_r+0x3fe>
   20884:	4b61      	ldr	r3, [pc, #388]	; (20a0c <_dtoa_r+0x2d4>)
   20886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2088a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2088e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20892:	f7fb fc07 	bl	1c0a4 <__aeabi_dcmpgt>
   20896:	2800      	cmp	r0, #0
   20898:	f000 81c4 	beq.w	20c24 <_dtoa_r+0x4ec>
   2089c:	1e73      	subs	r3, r6, #1
   2089e:	9304      	str	r3, [sp, #16]
   208a0:	2300      	movs	r3, #0
   208a2:	930c      	str	r3, [sp, #48]	; 0x30
   208a4:	eba8 0505 	sub.w	r5, r8, r5
   208a8:	1e6b      	subs	r3, r5, #1
   208aa:	9305      	str	r3, [sp, #20]
   208ac:	f100 814f 	bmi.w	20b4e <_dtoa_r+0x416>
   208b0:	2300      	movs	r3, #0
   208b2:	9306      	str	r3, [sp, #24]
   208b4:	9b04      	ldr	r3, [sp, #16]
   208b6:	2b00      	cmp	r3, #0
   208b8:	f2c0 8140 	blt.w	20b3c <_dtoa_r+0x404>
   208bc:	9a05      	ldr	r2, [sp, #20]
   208be:	930b      	str	r3, [sp, #44]	; 0x2c
   208c0:	4611      	mov	r1, r2
   208c2:	4419      	add	r1, r3
   208c4:	2300      	movs	r3, #0
   208c6:	9105      	str	r1, [sp, #20]
   208c8:	930a      	str	r3, [sp, #40]	; 0x28
   208ca:	9b02      	ldr	r3, [sp, #8]
   208cc:	2b09      	cmp	r3, #9
   208ce:	d82e      	bhi.n	2092e <_dtoa_r+0x1f6>
   208d0:	2b05      	cmp	r3, #5
   208d2:	f340 8651 	ble.w	21578 <_dtoa_r+0xe40>
   208d6:	3b04      	subs	r3, #4
   208d8:	9302      	str	r3, [sp, #8]
   208da:	2700      	movs	r7, #0
   208dc:	9b02      	ldr	r3, [sp, #8]
   208de:	3b02      	subs	r3, #2
   208e0:	2b03      	cmp	r3, #3
   208e2:	f200 8633 	bhi.w	2154c <_dtoa_r+0xe14>
   208e6:	e8df f013 	tbh	[pc, r3, lsl #1]
   208ea:	03d6      	.short	0x03d6
   208ec:	03e302cb 	.word	0x03e302cb
   208f0:	0464      	.short	0x0464
   208f2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   208f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   208f8:	4445      	add	r5, r8
   208fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
   208fe:	2b20      	cmp	r3, #32
   20900:	f340 818a 	ble.w	20c18 <_dtoa_r+0x4e0>
   20904:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20908:	fa09 f903 	lsl.w	r9, r9, r3
   2090c:	9b00      	ldr	r3, [sp, #0]
   2090e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20912:	fa23 f000 	lsr.w	r0, r3, r0
   20916:	ea40 0009 	orr.w	r0, r0, r9
   2091a:	f7fb f8bd 	bl	1ba98 <__aeabi_ui2d>
   2091e:	2301      	movs	r3, #1
   20920:	3d01      	subs	r5, #1
   20922:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   20926:	9310      	str	r3, [sp, #64]	; 0x40
   20928:	e77c      	b.n	20824 <_dtoa_r+0xec>
   2092a:	4839      	ldr	r0, [pc, #228]	; (20a10 <_dtoa_r+0x2d8>)
   2092c:	e73c      	b.n	207a8 <_dtoa_r+0x70>
   2092e:	2100      	movs	r1, #0
   20930:	6461      	str	r1, [r4, #68]	; 0x44
   20932:	4620      	mov	r0, r4
   20934:	468b      	mov	fp, r1
   20936:	f001 f955 	bl	21be4 <_Balloc>
   2093a:	f04f 33ff 	mov.w	r3, #4294967295
   2093e:	9308      	str	r3, [sp, #32]
   20940:	930d      	str	r3, [sp, #52]	; 0x34
   20942:	2301      	movs	r3, #1
   20944:	9007      	str	r0, [sp, #28]
   20946:	6420      	str	r0, [r4, #64]	; 0x40
   20948:	f8cd b008 	str.w	fp, [sp, #8]
   2094c:	9309      	str	r3, [sp, #36]	; 0x24
   2094e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20950:	2b00      	cmp	r3, #0
   20952:	f2c0 80d0 	blt.w	20af6 <_dtoa_r+0x3be>
   20956:	9a04      	ldr	r2, [sp, #16]
   20958:	2a0e      	cmp	r2, #14
   2095a:	f300 80cc 	bgt.w	20af6 <_dtoa_r+0x3be>
   2095e:	4b2b      	ldr	r3, [pc, #172]	; (20a0c <_dtoa_r+0x2d4>)
   20960:	f1bb 0f00 	cmp.w	fp, #0
   20964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20968:	e9d3 8900 	ldrd	r8, r9, [r3]
   2096c:	f2c0 83be 	blt.w	210ec <_dtoa_r+0x9b4>
   20970:	e9dd 6700 	ldrd	r6, r7, [sp]
   20974:	4642      	mov	r2, r8
   20976:	464b      	mov	r3, r9
   20978:	4630      	mov	r0, r6
   2097a:	4639      	mov	r1, r7
   2097c:	f7fb fa2c 	bl	1bdd8 <__aeabi_ddiv>
   20980:	f7fb fb9a 	bl	1c0b8 <__aeabi_d2iz>
   20984:	4683      	mov	fp, r0
   20986:	f7fb f897 	bl	1bab8 <__aeabi_i2d>
   2098a:	4642      	mov	r2, r8
   2098c:	464b      	mov	r3, r9
   2098e:	f7fb f8f9 	bl	1bb84 <__aeabi_dmul>
   20992:	460b      	mov	r3, r1
   20994:	4602      	mov	r2, r0
   20996:	4639      	mov	r1, r7
   20998:	4630      	mov	r0, r6
   2099a:	f7fa ff3f 	bl	1b81c <__aeabi_dsub>
   2099e:	9d07      	ldr	r5, [sp, #28]
   209a0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   209a4:	702b      	strb	r3, [r5, #0]
   209a6:	9b08      	ldr	r3, [sp, #32]
   209a8:	2b01      	cmp	r3, #1
   209aa:	4606      	mov	r6, r0
   209ac:	460f      	mov	r7, r1
   209ae:	f105 0501 	add.w	r5, r5, #1
   209b2:	d061      	beq.n	20a78 <_dtoa_r+0x340>
   209b4:	2200      	movs	r2, #0
   209b6:	4b17      	ldr	r3, [pc, #92]	; (20a14 <_dtoa_r+0x2dc>)
   209b8:	f7fb f8e4 	bl	1bb84 <__aeabi_dmul>
   209bc:	2200      	movs	r2, #0
   209be:	2300      	movs	r3, #0
   209c0:	4606      	mov	r6, r0
   209c2:	460f      	mov	r7, r1
   209c4:	f7fb fb46 	bl	1c054 <__aeabi_dcmpeq>
   209c8:	2800      	cmp	r0, #0
   209ca:	f040 8081 	bne.w	20ad0 <_dtoa_r+0x398>
   209ce:	f8cd a000 	str.w	sl, [sp]
   209d2:	9402      	str	r4, [sp, #8]
   209d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
   209d8:	9c08      	ldr	r4, [sp, #32]
   209da:	e028      	b.n	20a2e <_dtoa_r+0x2f6>
   209dc:	f3af 8000 	nop.w
   209e0:	636f4361 	.word	0x636f4361
   209e4:	3fd287a7 	.word	0x3fd287a7
   209e8:	8b60c8b3 	.word	0x8b60c8b3
   209ec:	3fc68a28 	.word	0x3fc68a28
   209f0:	509f79fb 	.word	0x509f79fb
   209f4:	3fd34413 	.word	0x3fd34413
   209f8:	7ff00000 	.word	0x7ff00000
   209fc:	00024ce1 	.word	0x00024ce1
   20a00:	00024e30 	.word	0x00024e30
   20a04:	00024e3c 	.word	0x00024e3c
   20a08:	3ff80000 	.word	0x3ff80000
   20a0c:	00024e68 	.word	0x00024e68
   20a10:	00024ce0 	.word	0x00024ce0
   20a14:	40240000 	.word	0x40240000
   20a18:	f7fb f8b4 	bl	1bb84 <__aeabi_dmul>
   20a1c:	2200      	movs	r2, #0
   20a1e:	2300      	movs	r3, #0
   20a20:	4606      	mov	r6, r0
   20a22:	460f      	mov	r7, r1
   20a24:	f7fb fb16 	bl	1c054 <__aeabi_dcmpeq>
   20a28:	2800      	cmp	r0, #0
   20a2a:	f040 83c5 	bne.w	211b8 <_dtoa_r+0xa80>
   20a2e:	4642      	mov	r2, r8
   20a30:	464b      	mov	r3, r9
   20a32:	4630      	mov	r0, r6
   20a34:	4639      	mov	r1, r7
   20a36:	f7fb f9cf 	bl	1bdd8 <__aeabi_ddiv>
   20a3a:	f7fb fb3d 	bl	1c0b8 <__aeabi_d2iz>
   20a3e:	4683      	mov	fp, r0
   20a40:	f7fb f83a 	bl	1bab8 <__aeabi_i2d>
   20a44:	4642      	mov	r2, r8
   20a46:	464b      	mov	r3, r9
   20a48:	f7fb f89c 	bl	1bb84 <__aeabi_dmul>
   20a4c:	4602      	mov	r2, r0
   20a4e:	460b      	mov	r3, r1
   20a50:	4630      	mov	r0, r6
   20a52:	4639      	mov	r1, r7
   20a54:	f7fa fee2 	bl	1b81c <__aeabi_dsub>
   20a58:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   20a5c:	f805 eb01 	strb.w	lr, [r5], #1
   20a60:	eba5 0e0a 	sub.w	lr, r5, sl
   20a64:	45a6      	cmp	lr, r4
   20a66:	4606      	mov	r6, r0
   20a68:	460f      	mov	r7, r1
   20a6a:	f04f 0200 	mov.w	r2, #0
   20a6e:	4b6e      	ldr	r3, [pc, #440]	; (20c28 <_dtoa_r+0x4f0>)
   20a70:	d1d2      	bne.n	20a18 <_dtoa_r+0x2e0>
   20a72:	f8dd a000 	ldr.w	sl, [sp]
   20a76:	9c02      	ldr	r4, [sp, #8]
   20a78:	4632      	mov	r2, r6
   20a7a:	463b      	mov	r3, r7
   20a7c:	4630      	mov	r0, r6
   20a7e:	4639      	mov	r1, r7
   20a80:	f7fa fece 	bl	1b820 <__adddf3>
   20a84:	4606      	mov	r6, r0
   20a86:	460f      	mov	r7, r1
   20a88:	4602      	mov	r2, r0
   20a8a:	460b      	mov	r3, r1
   20a8c:	4640      	mov	r0, r8
   20a8e:	4649      	mov	r1, r9
   20a90:	f7fb faea 	bl	1c068 <__aeabi_dcmplt>
   20a94:	b948      	cbnz	r0, 20aaa <_dtoa_r+0x372>
   20a96:	4632      	mov	r2, r6
   20a98:	463b      	mov	r3, r7
   20a9a:	4640      	mov	r0, r8
   20a9c:	4649      	mov	r1, r9
   20a9e:	f7fb fad9 	bl	1c054 <__aeabi_dcmpeq>
   20aa2:	b1a8      	cbz	r0, 20ad0 <_dtoa_r+0x398>
   20aa4:	f01b 0f01 	tst.w	fp, #1
   20aa8:	d012      	beq.n	20ad0 <_dtoa_r+0x398>
   20aaa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20aae:	9a07      	ldr	r2, [sp, #28]
   20ab0:	1e6b      	subs	r3, r5, #1
   20ab2:	e004      	b.n	20abe <_dtoa_r+0x386>
   20ab4:	429a      	cmp	r2, r3
   20ab6:	f000 842d 	beq.w	21314 <_dtoa_r+0xbdc>
   20aba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   20abe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20ac2:	f103 0501 	add.w	r5, r3, #1
   20ac6:	d0f5      	beq.n	20ab4 <_dtoa_r+0x37c>
   20ac8:	f108 0801 	add.w	r8, r8, #1
   20acc:	f883 8000 	strb.w	r8, [r3]
   20ad0:	4651      	mov	r1, sl
   20ad2:	4620      	mov	r0, r4
   20ad4:	f001 f8ac 	bl	21c30 <_Bfree>
   20ad8:	2200      	movs	r2, #0
   20ada:	9b04      	ldr	r3, [sp, #16]
   20adc:	702a      	strb	r2, [r5, #0]
   20ade:	9a03      	ldr	r2, [sp, #12]
   20ae0:	3301      	adds	r3, #1
   20ae2:	6013      	str	r3, [r2, #0]
   20ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20ae6:	2b00      	cmp	r3, #0
   20ae8:	f000 83a3 	beq.w	21232 <_dtoa_r+0xafa>
   20aec:	9807      	ldr	r0, [sp, #28]
   20aee:	601d      	str	r5, [r3, #0]
   20af0:	b017      	add	sp, #92	; 0x5c
   20af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20af8:	2a00      	cmp	r2, #0
   20afa:	d040      	beq.n	20b7e <_dtoa_r+0x446>
   20afc:	9a02      	ldr	r2, [sp, #8]
   20afe:	2a01      	cmp	r2, #1
   20b00:	f340 831c 	ble.w	2113c <_dtoa_r+0xa04>
   20b04:	9b08      	ldr	r3, [sp, #32]
   20b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20b08:	1e5f      	subs	r7, r3, #1
   20b0a:	42ba      	cmp	r2, r7
   20b0c:	f2c0 8394 	blt.w	21238 <_dtoa_r+0xb00>
   20b10:	1bd7      	subs	r7, r2, r7
   20b12:	9b08      	ldr	r3, [sp, #32]
   20b14:	2b00      	cmp	r3, #0
   20b16:	f2c0 847e 	blt.w	21416 <_dtoa_r+0xcde>
   20b1a:	9d06      	ldr	r5, [sp, #24]
   20b1c:	9b08      	ldr	r3, [sp, #32]
   20b1e:	9a06      	ldr	r2, [sp, #24]
   20b20:	441a      	add	r2, r3
   20b22:	9206      	str	r2, [sp, #24]
   20b24:	9a05      	ldr	r2, [sp, #20]
   20b26:	2101      	movs	r1, #1
   20b28:	441a      	add	r2, r3
   20b2a:	4620      	mov	r0, r4
   20b2c:	9205      	str	r2, [sp, #20]
   20b2e:	f001 f919 	bl	21d64 <__i2b>
   20b32:	4606      	mov	r6, r0
   20b34:	e026      	b.n	20b84 <_dtoa_r+0x44c>
   20b36:	2301      	movs	r3, #1
   20b38:	930c      	str	r3, [sp, #48]	; 0x30
   20b3a:	e6b3      	b.n	208a4 <_dtoa_r+0x16c>
   20b3c:	9a06      	ldr	r2, [sp, #24]
   20b3e:	9b04      	ldr	r3, [sp, #16]
   20b40:	1ad2      	subs	r2, r2, r3
   20b42:	425b      	negs	r3, r3
   20b44:	930a      	str	r3, [sp, #40]	; 0x28
   20b46:	2300      	movs	r3, #0
   20b48:	9206      	str	r2, [sp, #24]
   20b4a:	930b      	str	r3, [sp, #44]	; 0x2c
   20b4c:	e6bd      	b.n	208ca <_dtoa_r+0x192>
   20b4e:	f1c5 0301 	rsb	r3, r5, #1
   20b52:	9306      	str	r3, [sp, #24]
   20b54:	2300      	movs	r3, #0
   20b56:	9305      	str	r3, [sp, #20]
   20b58:	e6ac      	b.n	208b4 <_dtoa_r+0x17c>
   20b5a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20b5e:	4648      	mov	r0, r9
   20b60:	f7fa ffaa 	bl	1bab8 <__aeabi_i2d>
   20b64:	4602      	mov	r2, r0
   20b66:	460b      	mov	r3, r1
   20b68:	4630      	mov	r0, r6
   20b6a:	4639      	mov	r1, r7
   20b6c:	f7fb fa72 	bl	1c054 <__aeabi_dcmpeq>
   20b70:	2800      	cmp	r0, #0
   20b72:	f47f ae83 	bne.w	2087c <_dtoa_r+0x144>
   20b76:	f109 33ff 	add.w	r3, r9, #4294967295
   20b7a:	9304      	str	r3, [sp, #16]
   20b7c:	e67e      	b.n	2087c <_dtoa_r+0x144>
   20b7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20b80:	9d06      	ldr	r5, [sp, #24]
   20b82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20b84:	2d00      	cmp	r5, #0
   20b86:	dd0c      	ble.n	20ba2 <_dtoa_r+0x46a>
   20b88:	9905      	ldr	r1, [sp, #20]
   20b8a:	2900      	cmp	r1, #0
   20b8c:	460b      	mov	r3, r1
   20b8e:	dd08      	ble.n	20ba2 <_dtoa_r+0x46a>
   20b90:	42a9      	cmp	r1, r5
   20b92:	9a06      	ldr	r2, [sp, #24]
   20b94:	bfa8      	it	ge
   20b96:	462b      	movge	r3, r5
   20b98:	1ad2      	subs	r2, r2, r3
   20b9a:	1aed      	subs	r5, r5, r3
   20b9c:	1acb      	subs	r3, r1, r3
   20b9e:	9206      	str	r2, [sp, #24]
   20ba0:	9305      	str	r3, [sp, #20]
   20ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ba4:	b1d3      	cbz	r3, 20bdc <_dtoa_r+0x4a4>
   20ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ba8:	2b00      	cmp	r3, #0
   20baa:	f000 82c0 	beq.w	2112e <_dtoa_r+0x9f6>
   20bae:	2f00      	cmp	r7, #0
   20bb0:	dd10      	ble.n	20bd4 <_dtoa_r+0x49c>
   20bb2:	4631      	mov	r1, r6
   20bb4:	463a      	mov	r2, r7
   20bb6:	4620      	mov	r0, r4
   20bb8:	f001 f970 	bl	21e9c <__pow5mult>
   20bbc:	4652      	mov	r2, sl
   20bbe:	4601      	mov	r1, r0
   20bc0:	4606      	mov	r6, r0
   20bc2:	4620      	mov	r0, r4
   20bc4:	f001 f8d8 	bl	21d78 <__multiply>
   20bc8:	4651      	mov	r1, sl
   20bca:	4680      	mov	r8, r0
   20bcc:	4620      	mov	r0, r4
   20bce:	f001 f82f 	bl	21c30 <_Bfree>
   20bd2:	46c2      	mov	sl, r8
   20bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20bd6:	1bda      	subs	r2, r3, r7
   20bd8:	f040 82aa 	bne.w	21130 <_dtoa_r+0x9f8>
   20bdc:	2101      	movs	r1, #1
   20bde:	4620      	mov	r0, r4
   20be0:	f001 f8c0 	bl	21d64 <__i2b>
   20be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20be6:	2b00      	cmp	r3, #0
   20be8:	4681      	mov	r9, r0
   20bea:	dd1f      	ble.n	20c2c <_dtoa_r+0x4f4>
   20bec:	4601      	mov	r1, r0
   20bee:	461a      	mov	r2, r3
   20bf0:	4620      	mov	r0, r4
   20bf2:	f001 f953 	bl	21e9c <__pow5mult>
   20bf6:	9b02      	ldr	r3, [sp, #8]
   20bf8:	2b01      	cmp	r3, #1
   20bfa:	4681      	mov	r9, r0
   20bfc:	f340 825b 	ble.w	210b6 <_dtoa_r+0x97e>
   20c00:	f04f 0800 	mov.w	r8, #0
   20c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20c08:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20c0c:	6918      	ldr	r0, [r3, #16]
   20c0e:	f001 f859 	bl	21cc4 <__hi0bits>
   20c12:	f1c0 0020 	rsb	r0, r0, #32
   20c16:	e013      	b.n	20c40 <_dtoa_r+0x508>
   20c18:	f1c3 0920 	rsb	r9, r3, #32
   20c1c:	9b00      	ldr	r3, [sp, #0]
   20c1e:	fa03 f009 	lsl.w	r0, r3, r9
   20c22:	e67a      	b.n	2091a <_dtoa_r+0x1e2>
   20c24:	900c      	str	r0, [sp, #48]	; 0x30
   20c26:	e63d      	b.n	208a4 <_dtoa_r+0x16c>
   20c28:	40240000 	.word	0x40240000
   20c2c:	9b02      	ldr	r3, [sp, #8]
   20c2e:	2b01      	cmp	r3, #1
   20c30:	f340 828d 	ble.w	2114e <_dtoa_r+0xa16>
   20c34:	f04f 0800 	mov.w	r8, #0
   20c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20c3a:	2001      	movs	r0, #1
   20c3c:	2b00      	cmp	r3, #0
   20c3e:	d1e1      	bne.n	20c04 <_dtoa_r+0x4cc>
   20c40:	9a05      	ldr	r2, [sp, #20]
   20c42:	4410      	add	r0, r2
   20c44:	f010 001f 	ands.w	r0, r0, #31
   20c48:	f000 80a1 	beq.w	20d8e <_dtoa_r+0x656>
   20c4c:	f1c0 0320 	rsb	r3, r0, #32
   20c50:	2b04      	cmp	r3, #4
   20c52:	f340 848c 	ble.w	2156e <_dtoa_r+0xe36>
   20c56:	9b06      	ldr	r3, [sp, #24]
   20c58:	f1c0 001c 	rsb	r0, r0, #28
   20c5c:	4403      	add	r3, r0
   20c5e:	9306      	str	r3, [sp, #24]
   20c60:	4613      	mov	r3, r2
   20c62:	4403      	add	r3, r0
   20c64:	4405      	add	r5, r0
   20c66:	9305      	str	r3, [sp, #20]
   20c68:	9b06      	ldr	r3, [sp, #24]
   20c6a:	2b00      	cmp	r3, #0
   20c6c:	dd05      	ble.n	20c7a <_dtoa_r+0x542>
   20c6e:	4651      	mov	r1, sl
   20c70:	461a      	mov	r2, r3
   20c72:	4620      	mov	r0, r4
   20c74:	f001 f962 	bl	21f3c <__lshift>
   20c78:	4682      	mov	sl, r0
   20c7a:	9b05      	ldr	r3, [sp, #20]
   20c7c:	2b00      	cmp	r3, #0
   20c7e:	dd05      	ble.n	20c8c <_dtoa_r+0x554>
   20c80:	4649      	mov	r1, r9
   20c82:	461a      	mov	r2, r3
   20c84:	4620      	mov	r0, r4
   20c86:	f001 f959 	bl	21f3c <__lshift>
   20c8a:	4681      	mov	r9, r0
   20c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20c8e:	2b00      	cmp	r3, #0
   20c90:	f040 8086 	bne.w	20da0 <_dtoa_r+0x668>
   20c94:	9b08      	ldr	r3, [sp, #32]
   20c96:	2b00      	cmp	r3, #0
   20c98:	f340 8269 	ble.w	2116e <_dtoa_r+0xa36>
   20c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c9e:	2b00      	cmp	r3, #0
   20ca0:	f000 8098 	beq.w	20dd4 <_dtoa_r+0x69c>
   20ca4:	2d00      	cmp	r5, #0
   20ca6:	dd05      	ble.n	20cb4 <_dtoa_r+0x57c>
   20ca8:	4631      	mov	r1, r6
   20caa:	462a      	mov	r2, r5
   20cac:	4620      	mov	r0, r4
   20cae:	f001 f945 	bl	21f3c <__lshift>
   20cb2:	4606      	mov	r6, r0
   20cb4:	f1b8 0f00 	cmp.w	r8, #0
   20cb8:	f040 8336 	bne.w	21328 <_dtoa_r+0xbf0>
   20cbc:	46b0      	mov	r8, r6
   20cbe:	9b08      	ldr	r3, [sp, #32]
   20cc0:	9a07      	ldr	r2, [sp, #28]
   20cc2:	3b01      	subs	r3, #1
   20cc4:	18d3      	adds	r3, r2, r3
   20cc6:	9308      	str	r3, [sp, #32]
   20cc8:	9b00      	ldr	r3, [sp, #0]
   20cca:	f003 0301 	and.w	r3, r3, #1
   20cce:	9309      	str	r3, [sp, #36]	; 0x24
   20cd0:	4617      	mov	r7, r2
   20cd2:	4649      	mov	r1, r9
   20cd4:	4650      	mov	r0, sl
   20cd6:	f7ff fc9b 	bl	20610 <quorem>
   20cda:	4631      	mov	r1, r6
   20cdc:	4605      	mov	r5, r0
   20cde:	4650      	mov	r0, sl
   20ce0:	f001 f97e 	bl	21fe0 <__mcmp>
   20ce4:	4642      	mov	r2, r8
   20ce6:	4649      	mov	r1, r9
   20ce8:	4683      	mov	fp, r0
   20cea:	4620      	mov	r0, r4
   20cec:	f001 f994 	bl	22018 <__mdiff>
   20cf0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20cf4:	9200      	str	r2, [sp, #0]
   20cf6:	68c2      	ldr	r2, [r0, #12]
   20cf8:	4601      	mov	r1, r0
   20cfa:	2a00      	cmp	r2, #0
   20cfc:	f040 8232 	bne.w	21164 <_dtoa_r+0xa2c>
   20d00:	9006      	str	r0, [sp, #24]
   20d02:	4650      	mov	r0, sl
   20d04:	f001 f96c 	bl	21fe0 <__mcmp>
   20d08:	9b06      	ldr	r3, [sp, #24]
   20d0a:	9005      	str	r0, [sp, #20]
   20d0c:	4619      	mov	r1, r3
   20d0e:	4620      	mov	r0, r4
   20d10:	f000 ff8e 	bl	21c30 <_Bfree>
   20d14:	9a05      	ldr	r2, [sp, #20]
   20d16:	b932      	cbnz	r2, 20d26 <_dtoa_r+0x5ee>
   20d18:	9b02      	ldr	r3, [sp, #8]
   20d1a:	b923      	cbnz	r3, 20d26 <_dtoa_r+0x5ee>
   20d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d1e:	2b00      	cmp	r3, #0
   20d20:	f000 83de 	beq.w	214e0 <_dtoa_r+0xda8>
   20d24:	9a02      	ldr	r2, [sp, #8]
   20d26:	f1bb 0f00 	cmp.w	fp, #0
   20d2a:	f2c0 82a2 	blt.w	21272 <_dtoa_r+0xb3a>
   20d2e:	d105      	bne.n	20d3c <_dtoa_r+0x604>
   20d30:	9b02      	ldr	r3, [sp, #8]
   20d32:	b91b      	cbnz	r3, 20d3c <_dtoa_r+0x604>
   20d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d36:	2b00      	cmp	r3, #0
   20d38:	f000 829b 	beq.w	21272 <_dtoa_r+0xb3a>
   20d3c:	2a00      	cmp	r2, #0
   20d3e:	f300 8307 	bgt.w	21350 <_dtoa_r+0xc18>
   20d42:	f89d 3000 	ldrb.w	r3, [sp]
   20d46:	703b      	strb	r3, [r7, #0]
   20d48:	9b08      	ldr	r3, [sp, #32]
   20d4a:	f107 0b01 	add.w	fp, r7, #1
   20d4e:	429f      	cmp	r7, r3
   20d50:	465d      	mov	r5, fp
   20d52:	f000 8308 	beq.w	21366 <_dtoa_r+0xc2e>
   20d56:	4651      	mov	r1, sl
   20d58:	2300      	movs	r3, #0
   20d5a:	220a      	movs	r2, #10
   20d5c:	4620      	mov	r0, r4
   20d5e:	f000 ff71 	bl	21c44 <__multadd>
   20d62:	4546      	cmp	r6, r8
   20d64:	4682      	mov	sl, r0
   20d66:	4631      	mov	r1, r6
   20d68:	f04f 0300 	mov.w	r3, #0
   20d6c:	f04f 020a 	mov.w	r2, #10
   20d70:	4620      	mov	r0, r4
   20d72:	f000 81f1 	beq.w	21158 <_dtoa_r+0xa20>
   20d76:	f000 ff65 	bl	21c44 <__multadd>
   20d7a:	4641      	mov	r1, r8
   20d7c:	4606      	mov	r6, r0
   20d7e:	2300      	movs	r3, #0
   20d80:	220a      	movs	r2, #10
   20d82:	4620      	mov	r0, r4
   20d84:	f000 ff5e 	bl	21c44 <__multadd>
   20d88:	465f      	mov	r7, fp
   20d8a:	4680      	mov	r8, r0
   20d8c:	e7a1      	b.n	20cd2 <_dtoa_r+0x59a>
   20d8e:	201c      	movs	r0, #28
   20d90:	9b06      	ldr	r3, [sp, #24]
   20d92:	4403      	add	r3, r0
   20d94:	9306      	str	r3, [sp, #24]
   20d96:	9b05      	ldr	r3, [sp, #20]
   20d98:	4403      	add	r3, r0
   20d9a:	4405      	add	r5, r0
   20d9c:	9305      	str	r3, [sp, #20]
   20d9e:	e763      	b.n	20c68 <_dtoa_r+0x530>
   20da0:	4649      	mov	r1, r9
   20da2:	4650      	mov	r0, sl
   20da4:	f001 f91c 	bl	21fe0 <__mcmp>
   20da8:	2800      	cmp	r0, #0
   20daa:	f6bf af73 	bge.w	20c94 <_dtoa_r+0x55c>
   20dae:	9f04      	ldr	r7, [sp, #16]
   20db0:	4651      	mov	r1, sl
   20db2:	2300      	movs	r3, #0
   20db4:	220a      	movs	r2, #10
   20db6:	4620      	mov	r0, r4
   20db8:	3f01      	subs	r7, #1
   20dba:	9704      	str	r7, [sp, #16]
   20dbc:	f000 ff42 	bl	21c44 <__multadd>
   20dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20dc2:	4682      	mov	sl, r0
   20dc4:	2b00      	cmp	r3, #0
   20dc6:	f040 83a7 	bne.w	21518 <_dtoa_r+0xde0>
   20dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20dcc:	2b00      	cmp	r3, #0
   20dce:	f340 83b0 	ble.w	21532 <_dtoa_r+0xdfa>
   20dd2:	9308      	str	r3, [sp, #32]
   20dd4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20ddc:	465d      	mov	r5, fp
   20dde:	e002      	b.n	20de6 <_dtoa_r+0x6ae>
   20de0:	f000 ff30 	bl	21c44 <__multadd>
   20de4:	4682      	mov	sl, r0
   20de6:	4649      	mov	r1, r9
   20de8:	4650      	mov	r0, sl
   20dea:	f7ff fc11 	bl	20610 <quorem>
   20dee:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20df2:	f805 7b01 	strb.w	r7, [r5], #1
   20df6:	eba5 030b 	sub.w	r3, r5, fp
   20dfa:	4543      	cmp	r3, r8
   20dfc:	f04f 020a 	mov.w	r2, #10
   20e00:	f04f 0300 	mov.w	r3, #0
   20e04:	4651      	mov	r1, sl
   20e06:	4620      	mov	r0, r4
   20e08:	dbea      	blt.n	20de0 <_dtoa_r+0x6a8>
   20e0a:	9b07      	ldr	r3, [sp, #28]
   20e0c:	9a08      	ldr	r2, [sp, #32]
   20e0e:	9700      	str	r7, [sp, #0]
   20e10:	2a01      	cmp	r2, #1
   20e12:	bfac      	ite	ge
   20e14:	189b      	addge	r3, r3, r2
   20e16:	3301      	addlt	r3, #1
   20e18:	461d      	mov	r5, r3
   20e1a:	f04f 0b00 	mov.w	fp, #0
   20e1e:	4651      	mov	r1, sl
   20e20:	2201      	movs	r2, #1
   20e22:	4620      	mov	r0, r4
   20e24:	f001 f88a 	bl	21f3c <__lshift>
   20e28:	4649      	mov	r1, r9
   20e2a:	4682      	mov	sl, r0
   20e2c:	f001 f8d8 	bl	21fe0 <__mcmp>
   20e30:	2800      	cmp	r0, #0
   20e32:	f340 823a 	ble.w	212aa <_dtoa_r+0xb72>
   20e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20e3a:	9907      	ldr	r1, [sp, #28]
   20e3c:	1e6b      	subs	r3, r5, #1
   20e3e:	e004      	b.n	20e4a <_dtoa_r+0x712>
   20e40:	428b      	cmp	r3, r1
   20e42:	f000 81af 	beq.w	211a4 <_dtoa_r+0xa6c>
   20e46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20e4a:	2a39      	cmp	r2, #57	; 0x39
   20e4c:	f103 0501 	add.w	r5, r3, #1
   20e50:	d0f6      	beq.n	20e40 <_dtoa_r+0x708>
   20e52:	3201      	adds	r2, #1
   20e54:	701a      	strb	r2, [r3, #0]
   20e56:	4649      	mov	r1, r9
   20e58:	4620      	mov	r0, r4
   20e5a:	f000 fee9 	bl	21c30 <_Bfree>
   20e5e:	2e00      	cmp	r6, #0
   20e60:	f43f ae36 	beq.w	20ad0 <_dtoa_r+0x398>
   20e64:	f1bb 0f00 	cmp.w	fp, #0
   20e68:	d005      	beq.n	20e76 <_dtoa_r+0x73e>
   20e6a:	45b3      	cmp	fp, r6
   20e6c:	d003      	beq.n	20e76 <_dtoa_r+0x73e>
   20e6e:	4659      	mov	r1, fp
   20e70:	4620      	mov	r0, r4
   20e72:	f000 fedd 	bl	21c30 <_Bfree>
   20e76:	4631      	mov	r1, r6
   20e78:	4620      	mov	r0, r4
   20e7a:	f000 fed9 	bl	21c30 <_Bfree>
   20e7e:	e627      	b.n	20ad0 <_dtoa_r+0x398>
   20e80:	2300      	movs	r3, #0
   20e82:	9309      	str	r3, [sp, #36]	; 0x24
   20e84:	9b04      	ldr	r3, [sp, #16]
   20e86:	445b      	add	r3, fp
   20e88:	930d      	str	r3, [sp, #52]	; 0x34
   20e8a:	3301      	adds	r3, #1
   20e8c:	2b01      	cmp	r3, #1
   20e8e:	461e      	mov	r6, r3
   20e90:	461d      	mov	r5, r3
   20e92:	9308      	str	r3, [sp, #32]
   20e94:	bfb8      	it	lt
   20e96:	2601      	movlt	r6, #1
   20e98:	2100      	movs	r1, #0
   20e9a:	2e17      	cmp	r6, #23
   20e9c:	6461      	str	r1, [r4, #68]	; 0x44
   20e9e:	d90a      	bls.n	20eb6 <_dtoa_r+0x77e>
   20ea0:	2201      	movs	r2, #1
   20ea2:	2304      	movs	r3, #4
   20ea4:	005b      	lsls	r3, r3, #1
   20ea6:	f103 0014 	add.w	r0, r3, #20
   20eaa:	4286      	cmp	r6, r0
   20eac:	4611      	mov	r1, r2
   20eae:	f102 0201 	add.w	r2, r2, #1
   20eb2:	d2f7      	bcs.n	20ea4 <_dtoa_r+0x76c>
   20eb4:	6461      	str	r1, [r4, #68]	; 0x44
   20eb6:	4620      	mov	r0, r4
   20eb8:	f000 fe94 	bl	21be4 <_Balloc>
   20ebc:	2d0e      	cmp	r5, #14
   20ebe:	9007      	str	r0, [sp, #28]
   20ec0:	6420      	str	r0, [r4, #64]	; 0x40
   20ec2:	f63f ad44 	bhi.w	2094e <_dtoa_r+0x216>
   20ec6:	2f00      	cmp	r7, #0
   20ec8:	f43f ad41 	beq.w	2094e <_dtoa_r+0x216>
   20ecc:	9904      	ldr	r1, [sp, #16]
   20ece:	2900      	cmp	r1, #0
   20ed0:	ed9d 7b00 	vldr	d7, [sp]
   20ed4:	f340 81f6 	ble.w	212c4 <_dtoa_r+0xb8c>
   20ed8:	4bb9      	ldr	r3, [pc, #740]	; (211c0 <_dtoa_r+0xa88>)
   20eda:	f001 020f 	and.w	r2, r1, #15
   20ede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20ee2:	110d      	asrs	r5, r1, #4
   20ee4:	e9d3 6700 	ldrd	r6, r7, [r3]
   20ee8:	06eb      	lsls	r3, r5, #27
   20eea:	f140 81ad 	bpl.w	21248 <_dtoa_r+0xb10>
   20eee:	4bb5      	ldr	r3, [pc, #724]	; (211c4 <_dtoa_r+0xa8c>)
   20ef0:	ec51 0b17 	vmov	r0, r1, d7
   20ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20ef8:	f7fa ff6e 	bl	1bdd8 <__aeabi_ddiv>
   20efc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20f00:	f005 050f 	and.w	r5, r5, #15
   20f04:	f04f 0903 	mov.w	r9, #3
   20f08:	b18d      	cbz	r5, 20f2e <_dtoa_r+0x7f6>
   20f0a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 211c4 <_dtoa_r+0xa8c>
   20f0e:	07e8      	lsls	r0, r5, #31
   20f10:	d509      	bpl.n	20f26 <_dtoa_r+0x7ee>
   20f12:	4630      	mov	r0, r6
   20f14:	4639      	mov	r1, r7
   20f16:	e9d8 2300 	ldrd	r2, r3, [r8]
   20f1a:	f7fa fe33 	bl	1bb84 <__aeabi_dmul>
   20f1e:	f109 0901 	add.w	r9, r9, #1
   20f22:	4606      	mov	r6, r0
   20f24:	460f      	mov	r7, r1
   20f26:	106d      	asrs	r5, r5, #1
   20f28:	f108 0808 	add.w	r8, r8, #8
   20f2c:	d1ef      	bne.n	20f0e <_dtoa_r+0x7d6>
   20f2e:	463b      	mov	r3, r7
   20f30:	4632      	mov	r2, r6
   20f32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20f36:	f7fa ff4f 	bl	1bdd8 <__aeabi_ddiv>
   20f3a:	4607      	mov	r7, r0
   20f3c:	4688      	mov	r8, r1
   20f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20f40:	b143      	cbz	r3, 20f54 <_dtoa_r+0x81c>
   20f42:	2200      	movs	r2, #0
   20f44:	4ba0      	ldr	r3, [pc, #640]	; (211c8 <_dtoa_r+0xa90>)
   20f46:	4638      	mov	r0, r7
   20f48:	4641      	mov	r1, r8
   20f4a:	f7fb f88d 	bl	1c068 <__aeabi_dcmplt>
   20f4e:	2800      	cmp	r0, #0
   20f50:	f040 8273 	bne.w	2143a <_dtoa_r+0xd02>
   20f54:	4648      	mov	r0, r9
   20f56:	f7fa fdaf 	bl	1bab8 <__aeabi_i2d>
   20f5a:	463a      	mov	r2, r7
   20f5c:	4643      	mov	r3, r8
   20f5e:	f7fa fe11 	bl	1bb84 <__aeabi_dmul>
   20f62:	4b9a      	ldr	r3, [pc, #616]	; (211cc <_dtoa_r+0xa94>)
   20f64:	2200      	movs	r2, #0
   20f66:	f7fa fc5b 	bl	1b820 <__adddf3>
   20f6a:	9b08      	ldr	r3, [sp, #32]
   20f6c:	4605      	mov	r5, r0
   20f6e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20f72:	2b00      	cmp	r3, #0
   20f74:	f000 8140 	beq.w	211f8 <_dtoa_r+0xac0>
   20f78:	9b04      	ldr	r3, [sp, #16]
   20f7a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20f7e:	9311      	str	r3, [sp, #68]	; 0x44
   20f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20f82:	2b00      	cmp	r3, #0
   20f84:	f000 81f6 	beq.w	21374 <_dtoa_r+0xc3c>
   20f88:	4b8d      	ldr	r3, [pc, #564]	; (211c0 <_dtoa_r+0xa88>)
   20f8a:	4991      	ldr	r1, [pc, #580]	; (211d0 <_dtoa_r+0xa98>)
   20f8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   20f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20f94:	2000      	movs	r0, #0
   20f96:	f7fa ff1f 	bl	1bdd8 <__aeabi_ddiv>
   20f9a:	462a      	mov	r2, r5
   20f9c:	4633      	mov	r3, r6
   20f9e:	f7fa fc3d 	bl	1b81c <__aeabi_dsub>
   20fa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20fa6:	4641      	mov	r1, r8
   20fa8:	4638      	mov	r0, r7
   20faa:	f7fb f885 	bl	1c0b8 <__aeabi_d2iz>
   20fae:	4605      	mov	r5, r0
   20fb0:	f7fa fd82 	bl	1bab8 <__aeabi_i2d>
   20fb4:	4602      	mov	r2, r0
   20fb6:	460b      	mov	r3, r1
   20fb8:	4638      	mov	r0, r7
   20fba:	4641      	mov	r1, r8
   20fbc:	f7fa fc2e 	bl	1b81c <__aeabi_dsub>
   20fc0:	3530      	adds	r5, #48	; 0x30
   20fc2:	fa5f f885 	uxtb.w	r8, r5
   20fc6:	9d07      	ldr	r5, [sp, #28]
   20fc8:	4606      	mov	r6, r0
   20fca:	460f      	mov	r7, r1
   20fcc:	f885 8000 	strb.w	r8, [r5]
   20fd0:	4602      	mov	r2, r0
   20fd2:	460b      	mov	r3, r1
   20fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20fd8:	3501      	adds	r5, #1
   20fda:	f7fb f863 	bl	1c0a4 <__aeabi_dcmpgt>
   20fde:	2800      	cmp	r0, #0
   20fe0:	d156      	bne.n	21090 <_dtoa_r+0x958>
   20fe2:	4632      	mov	r2, r6
   20fe4:	463b      	mov	r3, r7
   20fe6:	2000      	movs	r0, #0
   20fe8:	4977      	ldr	r1, [pc, #476]	; (211c8 <_dtoa_r+0xa90>)
   20fea:	f7fa fc17 	bl	1b81c <__aeabi_dsub>
   20fee:	4602      	mov	r2, r0
   20ff0:	460b      	mov	r3, r1
   20ff2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20ff6:	f7fb f855 	bl	1c0a4 <__aeabi_dcmpgt>
   20ffa:	2800      	cmp	r0, #0
   20ffc:	f040 8262 	bne.w	214c4 <_dtoa_r+0xd8c>
   21000:	f1b9 0f01 	cmp.w	r9, #1
   21004:	f43f aca3 	beq.w	2094e <_dtoa_r+0x216>
   21008:	9b07      	ldr	r3, [sp, #28]
   2100a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   2100e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   21012:	4499      	add	r9, r3
   21014:	46a0      	mov	r8, r4
   21016:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   2101a:	e00d      	b.n	21038 <_dtoa_r+0x900>
   2101c:	2000      	movs	r0, #0
   2101e:	496a      	ldr	r1, [pc, #424]	; (211c8 <_dtoa_r+0xa90>)
   21020:	f7fa fbfc 	bl	1b81c <__aeabi_dsub>
   21024:	4652      	mov	r2, sl
   21026:	465b      	mov	r3, fp
   21028:	f7fb f81e 	bl	1c068 <__aeabi_dcmplt>
   2102c:	2800      	cmp	r0, #0
   2102e:	f040 8244 	bne.w	214ba <_dtoa_r+0xd82>
   21032:	454d      	cmp	r5, r9
   21034:	f000 824a 	beq.w	214cc <_dtoa_r+0xd94>
   21038:	4650      	mov	r0, sl
   2103a:	4659      	mov	r1, fp
   2103c:	2200      	movs	r2, #0
   2103e:	4b65      	ldr	r3, [pc, #404]	; (211d4 <_dtoa_r+0xa9c>)
   21040:	f7fa fda0 	bl	1bb84 <__aeabi_dmul>
   21044:	2200      	movs	r2, #0
   21046:	4b63      	ldr	r3, [pc, #396]	; (211d4 <_dtoa_r+0xa9c>)
   21048:	4682      	mov	sl, r0
   2104a:	468b      	mov	fp, r1
   2104c:	4630      	mov	r0, r6
   2104e:	4639      	mov	r1, r7
   21050:	f7fa fd98 	bl	1bb84 <__aeabi_dmul>
   21054:	460f      	mov	r7, r1
   21056:	4606      	mov	r6, r0
   21058:	f7fb f82e 	bl	1c0b8 <__aeabi_d2iz>
   2105c:	4604      	mov	r4, r0
   2105e:	f7fa fd2b 	bl	1bab8 <__aeabi_i2d>
   21062:	4602      	mov	r2, r0
   21064:	460b      	mov	r3, r1
   21066:	4630      	mov	r0, r6
   21068:	4639      	mov	r1, r7
   2106a:	f7fa fbd7 	bl	1b81c <__aeabi_dsub>
   2106e:	3430      	adds	r4, #48	; 0x30
   21070:	b2e4      	uxtb	r4, r4
   21072:	4652      	mov	r2, sl
   21074:	465b      	mov	r3, fp
   21076:	f805 4b01 	strb.w	r4, [r5], #1
   2107a:	4606      	mov	r6, r0
   2107c:	460f      	mov	r7, r1
   2107e:	f7fa fff3 	bl	1c068 <__aeabi_dcmplt>
   21082:	4632      	mov	r2, r6
   21084:	463b      	mov	r3, r7
   21086:	2800      	cmp	r0, #0
   21088:	d0c8      	beq.n	2101c <_dtoa_r+0x8e4>
   2108a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2108e:	4644      	mov	r4, r8
   21090:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21092:	9304      	str	r3, [sp, #16]
   21094:	e51c      	b.n	20ad0 <_dtoa_r+0x398>
   21096:	2300      	movs	r3, #0
   21098:	9309      	str	r3, [sp, #36]	; 0x24
   2109a:	f1bb 0f00 	cmp.w	fp, #0
   2109e:	f340 80da 	ble.w	21256 <_dtoa_r+0xb1e>
   210a2:	465e      	mov	r6, fp
   210a4:	465d      	mov	r5, fp
   210a6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   210aa:	f8cd b020 	str.w	fp, [sp, #32]
   210ae:	e6f3      	b.n	20e98 <_dtoa_r+0x760>
   210b0:	2301      	movs	r3, #1
   210b2:	9309      	str	r3, [sp, #36]	; 0x24
   210b4:	e7f1      	b.n	2109a <_dtoa_r+0x962>
   210b6:	9b00      	ldr	r3, [sp, #0]
   210b8:	2b00      	cmp	r3, #0
   210ba:	f47f ada1 	bne.w	20c00 <_dtoa_r+0x4c8>
   210be:	e9dd 1200 	ldrd	r1, r2, [sp]
   210c2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   210c6:	2b00      	cmp	r3, #0
   210c8:	f47f adb4 	bne.w	20c34 <_dtoa_r+0x4fc>
   210cc:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   210d0:	0d3f      	lsrs	r7, r7, #20
   210d2:	053f      	lsls	r7, r7, #20
   210d4:	2f00      	cmp	r7, #0
   210d6:	f000 8200 	beq.w	214da <_dtoa_r+0xda2>
   210da:	9b06      	ldr	r3, [sp, #24]
   210dc:	3301      	adds	r3, #1
   210de:	9306      	str	r3, [sp, #24]
   210e0:	9b05      	ldr	r3, [sp, #20]
   210e2:	3301      	adds	r3, #1
   210e4:	9305      	str	r3, [sp, #20]
   210e6:	f04f 0801 	mov.w	r8, #1
   210ea:	e5a5      	b.n	20c38 <_dtoa_r+0x500>
   210ec:	9b08      	ldr	r3, [sp, #32]
   210ee:	2b00      	cmp	r3, #0
   210f0:	f73f ac3e 	bgt.w	20970 <_dtoa_r+0x238>
   210f4:	f040 8099 	bne.w	2122a <_dtoa_r+0xaf2>
   210f8:	4649      	mov	r1, r9
   210fa:	2200      	movs	r2, #0
   210fc:	4b36      	ldr	r3, [pc, #216]	; (211d8 <_dtoa_r+0xaa0>)
   210fe:	4640      	mov	r0, r8
   21100:	f7fa fd40 	bl	1bb84 <__aeabi_dmul>
   21104:	e9dd 2300 	ldrd	r2, r3, [sp]
   21108:	f7fa ffc2 	bl	1c090 <__aeabi_dcmpge>
   2110c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21110:	464e      	mov	r6, r9
   21112:	2800      	cmp	r0, #0
   21114:	d03e      	beq.n	21194 <_dtoa_r+0xa5c>
   21116:	ea6f 030b 	mvn.w	r3, fp
   2111a:	9d07      	ldr	r5, [sp, #28]
   2111c:	9304      	str	r3, [sp, #16]
   2111e:	4649      	mov	r1, r9
   21120:	4620      	mov	r0, r4
   21122:	f000 fd85 	bl	21c30 <_Bfree>
   21126:	2e00      	cmp	r6, #0
   21128:	f43f acd2 	beq.w	20ad0 <_dtoa_r+0x398>
   2112c:	e6a3      	b.n	20e76 <_dtoa_r+0x73e>
   2112e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21130:	4651      	mov	r1, sl
   21132:	4620      	mov	r0, r4
   21134:	f000 feb2 	bl	21e9c <__pow5mult>
   21138:	4682      	mov	sl, r0
   2113a:	e54f      	b.n	20bdc <_dtoa_r+0x4a4>
   2113c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2113e:	2a00      	cmp	r2, #0
   21140:	f000 816f 	beq.w	21422 <_dtoa_r+0xcea>
   21144:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21148:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2114a:	9d06      	ldr	r5, [sp, #24]
   2114c:	e4e7      	b.n	20b1e <_dtoa_r+0x3e6>
   2114e:	9b00      	ldr	r3, [sp, #0]
   21150:	2b00      	cmp	r3, #0
   21152:	f47f ad6f 	bne.w	20c34 <_dtoa_r+0x4fc>
   21156:	e7b2      	b.n	210be <_dtoa_r+0x986>
   21158:	f000 fd74 	bl	21c44 <__multadd>
   2115c:	465f      	mov	r7, fp
   2115e:	4606      	mov	r6, r0
   21160:	4680      	mov	r8, r0
   21162:	e5b6      	b.n	20cd2 <_dtoa_r+0x59a>
   21164:	4620      	mov	r0, r4
   21166:	f000 fd63 	bl	21c30 <_Bfree>
   2116a:	2201      	movs	r2, #1
   2116c:	e5db      	b.n	20d26 <_dtoa_r+0x5ee>
   2116e:	9b02      	ldr	r3, [sp, #8]
   21170:	2b02      	cmp	r3, #2
   21172:	f77f ad93 	ble.w	20c9c <_dtoa_r+0x564>
   21176:	9b08      	ldr	r3, [sp, #32]
   21178:	2b00      	cmp	r3, #0
   2117a:	d1cc      	bne.n	21116 <_dtoa_r+0x9de>
   2117c:	4649      	mov	r1, r9
   2117e:	2205      	movs	r2, #5
   21180:	4620      	mov	r0, r4
   21182:	f000 fd5f 	bl	21c44 <__multadd>
   21186:	4601      	mov	r1, r0
   21188:	4681      	mov	r9, r0
   2118a:	4650      	mov	r0, sl
   2118c:	f000 ff28 	bl	21fe0 <__mcmp>
   21190:	2800      	cmp	r0, #0
   21192:	ddc0      	ble.n	21116 <_dtoa_r+0x9de>
   21194:	9a04      	ldr	r2, [sp, #16]
   21196:	9907      	ldr	r1, [sp, #28]
   21198:	2331      	movs	r3, #49	; 0x31
   2119a:	3201      	adds	r2, #1
   2119c:	9204      	str	r2, [sp, #16]
   2119e:	700b      	strb	r3, [r1, #0]
   211a0:	1c4d      	adds	r5, r1, #1
   211a2:	e7bc      	b.n	2111e <_dtoa_r+0x9e6>
   211a4:	9a04      	ldr	r2, [sp, #16]
   211a6:	3201      	adds	r2, #1
   211a8:	9204      	str	r2, [sp, #16]
   211aa:	9a07      	ldr	r2, [sp, #28]
   211ac:	2331      	movs	r3, #49	; 0x31
   211ae:	7013      	strb	r3, [r2, #0]
   211b0:	e651      	b.n	20e56 <_dtoa_r+0x71e>
   211b2:	2301      	movs	r3, #1
   211b4:	9309      	str	r3, [sp, #36]	; 0x24
   211b6:	e665      	b.n	20e84 <_dtoa_r+0x74c>
   211b8:	f8dd a000 	ldr.w	sl, [sp]
   211bc:	9c02      	ldr	r4, [sp, #8]
   211be:	e487      	b.n	20ad0 <_dtoa_r+0x398>
   211c0:	00024e68 	.word	0x00024e68
   211c4:	00024e40 	.word	0x00024e40
   211c8:	3ff00000 	.word	0x3ff00000
   211cc:	401c0000 	.word	0x401c0000
   211d0:	3fe00000 	.word	0x3fe00000
   211d4:	40240000 	.word	0x40240000
   211d8:	40140000 	.word	0x40140000
   211dc:	4648      	mov	r0, r9
   211de:	f7fa fc6b 	bl	1bab8 <__aeabi_i2d>
   211e2:	463a      	mov	r2, r7
   211e4:	4643      	mov	r3, r8
   211e6:	f7fa fccd 	bl	1bb84 <__aeabi_dmul>
   211ea:	2200      	movs	r2, #0
   211ec:	4bc4      	ldr	r3, [pc, #784]	; (21500 <_dtoa_r+0xdc8>)
   211ee:	f7fa fb17 	bl	1b820 <__adddf3>
   211f2:	4605      	mov	r5, r0
   211f4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   211f8:	4641      	mov	r1, r8
   211fa:	2200      	movs	r2, #0
   211fc:	4bc1      	ldr	r3, [pc, #772]	; (21504 <_dtoa_r+0xdcc>)
   211fe:	4638      	mov	r0, r7
   21200:	f7fa fb0c 	bl	1b81c <__aeabi_dsub>
   21204:	462a      	mov	r2, r5
   21206:	4633      	mov	r3, r6
   21208:	4680      	mov	r8, r0
   2120a:	4689      	mov	r9, r1
   2120c:	f7fa ff4a 	bl	1c0a4 <__aeabi_dcmpgt>
   21210:	2800      	cmp	r0, #0
   21212:	f040 80ab 	bne.w	2136c <_dtoa_r+0xc34>
   21216:	462a      	mov	r2, r5
   21218:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2121c:	4640      	mov	r0, r8
   2121e:	4649      	mov	r1, r9
   21220:	f7fa ff22 	bl	1c068 <__aeabi_dcmplt>
   21224:	2800      	cmp	r0, #0
   21226:	f43f ab92 	beq.w	2094e <_dtoa_r+0x216>
   2122a:	f04f 0900 	mov.w	r9, #0
   2122e:	464e      	mov	r6, r9
   21230:	e771      	b.n	21116 <_dtoa_r+0x9de>
   21232:	9807      	ldr	r0, [sp, #28]
   21234:	f7ff bab8 	b.w	207a8 <_dtoa_r+0x70>
   21238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2123a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2123c:	970a      	str	r7, [sp, #40]	; 0x28
   2123e:	1afb      	subs	r3, r7, r3
   21240:	441a      	add	r2, r3
   21242:	920b      	str	r2, [sp, #44]	; 0x2c
   21244:	2700      	movs	r7, #0
   21246:	e464      	b.n	20b12 <_dtoa_r+0x3da>
   21248:	ed9d 7b00 	vldr	d7, [sp]
   2124c:	f04f 0902 	mov.w	r9, #2
   21250:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21254:	e658      	b.n	20f08 <_dtoa_r+0x7d0>
   21256:	2100      	movs	r1, #0
   21258:	6461      	str	r1, [r4, #68]	; 0x44
   2125a:	4620      	mov	r0, r4
   2125c:	f000 fcc2 	bl	21be4 <_Balloc>
   21260:	f04f 0b01 	mov.w	fp, #1
   21264:	9007      	str	r0, [sp, #28]
   21266:	6420      	str	r0, [r4, #64]	; 0x40
   21268:	f8cd b020 	str.w	fp, [sp, #32]
   2126c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21270:	e629      	b.n	20ec6 <_dtoa_r+0x78e>
   21272:	2a00      	cmp	r2, #0
   21274:	dd12      	ble.n	2129c <_dtoa_r+0xb64>
   21276:	4651      	mov	r1, sl
   21278:	2201      	movs	r2, #1
   2127a:	4620      	mov	r0, r4
   2127c:	f000 fe5e 	bl	21f3c <__lshift>
   21280:	4649      	mov	r1, r9
   21282:	4682      	mov	sl, r0
   21284:	f000 feac 	bl	21fe0 <__mcmp>
   21288:	2800      	cmp	r0, #0
   2128a:	f340 8131 	ble.w	214f0 <_dtoa_r+0xdb8>
   2128e:	9b00      	ldr	r3, [sp, #0]
   21290:	2b39      	cmp	r3, #57	; 0x39
   21292:	f000 80f7 	beq.w	21484 <_dtoa_r+0xd4c>
   21296:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2129a:	9300      	str	r3, [sp, #0]
   2129c:	f89d 3000 	ldrb.w	r3, [sp]
   212a0:	703b      	strb	r3, [r7, #0]
   212a2:	46b3      	mov	fp, r6
   212a4:	1c7d      	adds	r5, r7, #1
   212a6:	4646      	mov	r6, r8
   212a8:	e5d5      	b.n	20e56 <_dtoa_r+0x71e>
   212aa:	d104      	bne.n	212b6 <_dtoa_r+0xb7e>
   212ac:	9b00      	ldr	r3, [sp, #0]
   212ae:	07db      	lsls	r3, r3, #31
   212b0:	d501      	bpl.n	212b6 <_dtoa_r+0xb7e>
   212b2:	e5c0      	b.n	20e36 <_dtoa_r+0x6fe>
   212b4:	4615      	mov	r5, r2
   212b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   212ba:	2b30      	cmp	r3, #48	; 0x30
   212bc:	f105 32ff 	add.w	r2, r5, #4294967295
   212c0:	d0f8      	beq.n	212b4 <_dtoa_r+0xb7c>
   212c2:	e5c8      	b.n	20e56 <_dtoa_r+0x71e>
   212c4:	f000 80b4 	beq.w	21430 <_dtoa_r+0xcf8>
   212c8:	9b04      	ldr	r3, [sp, #16]
   212ca:	425d      	negs	r5, r3
   212cc:	4b8e      	ldr	r3, [pc, #568]	; (21508 <_dtoa_r+0xdd0>)
   212ce:	f005 020f 	and.w	r2, r5, #15
   212d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   212d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   212da:	e9dd 0100 	ldrd	r0, r1, [sp]
   212de:	f7fa fc51 	bl	1bb84 <__aeabi_dmul>
   212e2:	112d      	asrs	r5, r5, #4
   212e4:	4607      	mov	r7, r0
   212e6:	4688      	mov	r8, r1
   212e8:	f000 8128 	beq.w	2153c <_dtoa_r+0xe04>
   212ec:	4e87      	ldr	r6, [pc, #540]	; (2150c <_dtoa_r+0xdd4>)
   212ee:	f04f 0902 	mov.w	r9, #2
   212f2:	07e9      	lsls	r1, r5, #31
   212f4:	d509      	bpl.n	2130a <_dtoa_r+0xbd2>
   212f6:	4638      	mov	r0, r7
   212f8:	4641      	mov	r1, r8
   212fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   212fe:	f7fa fc41 	bl	1bb84 <__aeabi_dmul>
   21302:	f109 0901 	add.w	r9, r9, #1
   21306:	4607      	mov	r7, r0
   21308:	4688      	mov	r8, r1
   2130a:	106d      	asrs	r5, r5, #1
   2130c:	f106 0608 	add.w	r6, r6, #8
   21310:	d1ef      	bne.n	212f2 <_dtoa_r+0xbba>
   21312:	e614      	b.n	20f3e <_dtoa_r+0x806>
   21314:	9907      	ldr	r1, [sp, #28]
   21316:	2230      	movs	r2, #48	; 0x30
   21318:	700a      	strb	r2, [r1, #0]
   2131a:	9a04      	ldr	r2, [sp, #16]
   2131c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21320:	3201      	adds	r2, #1
   21322:	9204      	str	r2, [sp, #16]
   21324:	f7ff bbd0 	b.w	20ac8 <_dtoa_r+0x390>
   21328:	6871      	ldr	r1, [r6, #4]
   2132a:	4620      	mov	r0, r4
   2132c:	f000 fc5a 	bl	21be4 <_Balloc>
   21330:	6933      	ldr	r3, [r6, #16]
   21332:	3302      	adds	r3, #2
   21334:	009a      	lsls	r2, r3, #2
   21336:	4605      	mov	r5, r0
   21338:	f106 010c 	add.w	r1, r6, #12
   2133c:	300c      	adds	r0, #12
   2133e:	f7fc ffd7 	bl	1e2f0 <memcpy>
   21342:	4629      	mov	r1, r5
   21344:	2201      	movs	r2, #1
   21346:	4620      	mov	r0, r4
   21348:	f000 fdf8 	bl	21f3c <__lshift>
   2134c:	4680      	mov	r8, r0
   2134e:	e4b6      	b.n	20cbe <_dtoa_r+0x586>
   21350:	9b00      	ldr	r3, [sp, #0]
   21352:	2b39      	cmp	r3, #57	; 0x39
   21354:	f000 8096 	beq.w	21484 <_dtoa_r+0xd4c>
   21358:	9b00      	ldr	r3, [sp, #0]
   2135a:	3301      	adds	r3, #1
   2135c:	46b3      	mov	fp, r6
   2135e:	703b      	strb	r3, [r7, #0]
   21360:	1c7d      	adds	r5, r7, #1
   21362:	4646      	mov	r6, r8
   21364:	e577      	b.n	20e56 <_dtoa_r+0x71e>
   21366:	46b3      	mov	fp, r6
   21368:	4646      	mov	r6, r8
   2136a:	e558      	b.n	20e1e <_dtoa_r+0x6e6>
   2136c:	f04f 0900 	mov.w	r9, #0
   21370:	464e      	mov	r6, r9
   21372:	e70f      	b.n	21194 <_dtoa_r+0xa5c>
   21374:	4964      	ldr	r1, [pc, #400]	; (21508 <_dtoa_r+0xdd0>)
   21376:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2137a:	462a      	mov	r2, r5
   2137c:	4633      	mov	r3, r6
   2137e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21382:	f7fa fbff 	bl	1bb84 <__aeabi_dmul>
   21386:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2138a:	4638      	mov	r0, r7
   2138c:	4641      	mov	r1, r8
   2138e:	f7fa fe93 	bl	1c0b8 <__aeabi_d2iz>
   21392:	4605      	mov	r5, r0
   21394:	f7fa fb90 	bl	1bab8 <__aeabi_i2d>
   21398:	4602      	mov	r2, r0
   2139a:	460b      	mov	r3, r1
   2139c:	4638      	mov	r0, r7
   2139e:	4641      	mov	r1, r8
   213a0:	f7fa fa3c 	bl	1b81c <__aeabi_dsub>
   213a4:	9a07      	ldr	r2, [sp, #28]
   213a6:	3530      	adds	r5, #48	; 0x30
   213a8:	f1b9 0f01 	cmp.w	r9, #1
   213ac:	7015      	strb	r5, [r2, #0]
   213ae:	4606      	mov	r6, r0
   213b0:	460f      	mov	r7, r1
   213b2:	f102 0501 	add.w	r5, r2, #1
   213b6:	d01c      	beq.n	213f2 <_dtoa_r+0xcba>
   213b8:	9b07      	ldr	r3, [sp, #28]
   213ba:	4499      	add	r9, r3
   213bc:	2200      	movs	r2, #0
   213be:	4b54      	ldr	r3, [pc, #336]	; (21510 <_dtoa_r+0xdd8>)
   213c0:	4630      	mov	r0, r6
   213c2:	4639      	mov	r1, r7
   213c4:	f7fa fbde 	bl	1bb84 <__aeabi_dmul>
   213c8:	460f      	mov	r7, r1
   213ca:	4606      	mov	r6, r0
   213cc:	f7fa fe74 	bl	1c0b8 <__aeabi_d2iz>
   213d0:	4680      	mov	r8, r0
   213d2:	f7fa fb71 	bl	1bab8 <__aeabi_i2d>
   213d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
   213da:	4602      	mov	r2, r0
   213dc:	460b      	mov	r3, r1
   213de:	4630      	mov	r0, r6
   213e0:	4639      	mov	r1, r7
   213e2:	f7fa fa1b 	bl	1b81c <__aeabi_dsub>
   213e6:	f805 8b01 	strb.w	r8, [r5], #1
   213ea:	454d      	cmp	r5, r9
   213ec:	4606      	mov	r6, r0
   213ee:	460f      	mov	r7, r1
   213f0:	d1e4      	bne.n	213bc <_dtoa_r+0xc84>
   213f2:	2200      	movs	r2, #0
   213f4:	4b47      	ldr	r3, [pc, #284]	; (21514 <_dtoa_r+0xddc>)
   213f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   213fa:	f7fa fa11 	bl	1b820 <__adddf3>
   213fe:	4632      	mov	r2, r6
   21400:	463b      	mov	r3, r7
   21402:	f7fa fe31 	bl	1c068 <__aeabi_dcmplt>
   21406:	2800      	cmp	r0, #0
   21408:	d042      	beq.n	21490 <_dtoa_r+0xd58>
   2140a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2140c:	9304      	str	r3, [sp, #16]
   2140e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21412:	f7ff bb4c 	b.w	20aae <_dtoa_r+0x376>
   21416:	9b06      	ldr	r3, [sp, #24]
   21418:	9a08      	ldr	r2, [sp, #32]
   2141a:	1a9d      	subs	r5, r3, r2
   2141c:	2300      	movs	r3, #0
   2141e:	f7ff bb7e 	b.w	20b1e <_dtoa_r+0x3e6>
   21422:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21424:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21426:	9d06      	ldr	r5, [sp, #24]
   21428:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2142c:	f7ff bb77 	b.w	20b1e <_dtoa_r+0x3e6>
   21430:	e9dd 7800 	ldrd	r7, r8, [sp]
   21434:	f04f 0902 	mov.w	r9, #2
   21438:	e581      	b.n	20f3e <_dtoa_r+0x806>
   2143a:	9b08      	ldr	r3, [sp, #32]
   2143c:	2b00      	cmp	r3, #0
   2143e:	f43f aecd 	beq.w	211dc <_dtoa_r+0xaa4>
   21442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21444:	2b00      	cmp	r3, #0
   21446:	f77f aa82 	ble.w	2094e <_dtoa_r+0x216>
   2144a:	2200      	movs	r2, #0
   2144c:	4b30      	ldr	r3, [pc, #192]	; (21510 <_dtoa_r+0xdd8>)
   2144e:	4638      	mov	r0, r7
   21450:	4641      	mov	r1, r8
   21452:	f7fa fb97 	bl	1bb84 <__aeabi_dmul>
   21456:	4607      	mov	r7, r0
   21458:	4688      	mov	r8, r1
   2145a:	f109 0001 	add.w	r0, r9, #1
   2145e:	f7fa fb2b 	bl	1bab8 <__aeabi_i2d>
   21462:	463a      	mov	r2, r7
   21464:	4643      	mov	r3, r8
   21466:	f7fa fb8d 	bl	1bb84 <__aeabi_dmul>
   2146a:	2200      	movs	r2, #0
   2146c:	4b24      	ldr	r3, [pc, #144]	; (21500 <_dtoa_r+0xdc8>)
   2146e:	f7fa f9d7 	bl	1b820 <__adddf3>
   21472:	9a04      	ldr	r2, [sp, #16]
   21474:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21478:	3a01      	subs	r2, #1
   2147a:	4605      	mov	r5, r0
   2147c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21480:	9211      	str	r2, [sp, #68]	; 0x44
   21482:	e57d      	b.n	20f80 <_dtoa_r+0x848>
   21484:	2239      	movs	r2, #57	; 0x39
   21486:	46b3      	mov	fp, r6
   21488:	703a      	strb	r2, [r7, #0]
   2148a:	4646      	mov	r6, r8
   2148c:	1c7d      	adds	r5, r7, #1
   2148e:	e4d4      	b.n	20e3a <_dtoa_r+0x702>
   21490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21494:	2000      	movs	r0, #0
   21496:	491f      	ldr	r1, [pc, #124]	; (21514 <_dtoa_r+0xddc>)
   21498:	f7fa f9c0 	bl	1b81c <__aeabi_dsub>
   2149c:	4632      	mov	r2, r6
   2149e:	463b      	mov	r3, r7
   214a0:	f7fa fe00 	bl	1c0a4 <__aeabi_dcmpgt>
   214a4:	b910      	cbnz	r0, 214ac <_dtoa_r+0xd74>
   214a6:	f7ff ba52 	b.w	2094e <_dtoa_r+0x216>
   214aa:	4615      	mov	r5, r2
   214ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   214b0:	2b30      	cmp	r3, #48	; 0x30
   214b2:	f105 32ff 	add.w	r2, r5, #4294967295
   214b6:	d0f8      	beq.n	214aa <_dtoa_r+0xd72>
   214b8:	e5ea      	b.n	21090 <_dtoa_r+0x958>
   214ba:	4643      	mov	r3, r8
   214bc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   214c0:	46a0      	mov	r8, r4
   214c2:	461c      	mov	r4, r3
   214c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   214c6:	9304      	str	r3, [sp, #16]
   214c8:	f7ff baf1 	b.w	20aae <_dtoa_r+0x376>
   214cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   214d0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   214d4:	4644      	mov	r4, r8
   214d6:	f7ff ba3a 	b.w	2094e <_dtoa_r+0x216>
   214da:	46b8      	mov	r8, r7
   214dc:	f7ff bbac 	b.w	20c38 <_dtoa_r+0x500>
   214e0:	9b00      	ldr	r3, [sp, #0]
   214e2:	2b39      	cmp	r3, #57	; 0x39
   214e4:	d0ce      	beq.n	21484 <_dtoa_r+0xd4c>
   214e6:	f1bb 0f00 	cmp.w	fp, #0
   214ea:	f73f aed4 	bgt.w	21296 <_dtoa_r+0xb5e>
   214ee:	e6d5      	b.n	2129c <_dtoa_r+0xb64>
   214f0:	f47f aed4 	bne.w	2129c <_dtoa_r+0xb64>
   214f4:	9b00      	ldr	r3, [sp, #0]
   214f6:	07da      	lsls	r2, r3, #31
   214f8:	f57f aed0 	bpl.w	2129c <_dtoa_r+0xb64>
   214fc:	e6c7      	b.n	2128e <_dtoa_r+0xb56>
   214fe:	bf00      	nop
   21500:	401c0000 	.word	0x401c0000
   21504:	40140000 	.word	0x40140000
   21508:	00024e68 	.word	0x00024e68
   2150c:	00024e40 	.word	0x00024e40
   21510:	40240000 	.word	0x40240000
   21514:	3fe00000 	.word	0x3fe00000
   21518:	4631      	mov	r1, r6
   2151a:	2300      	movs	r3, #0
   2151c:	220a      	movs	r2, #10
   2151e:	4620      	mov	r0, r4
   21520:	f000 fb90 	bl	21c44 <__multadd>
   21524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21526:	2b00      	cmp	r3, #0
   21528:	4606      	mov	r6, r0
   2152a:	dd0a      	ble.n	21542 <_dtoa_r+0xe0a>
   2152c:	9308      	str	r3, [sp, #32]
   2152e:	f7ff bbb9 	b.w	20ca4 <_dtoa_r+0x56c>
   21532:	9b02      	ldr	r3, [sp, #8]
   21534:	2b02      	cmp	r3, #2
   21536:	dc22      	bgt.n	2157e <_dtoa_r+0xe46>
   21538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2153a:	e44a      	b.n	20dd2 <_dtoa_r+0x69a>
   2153c:	f04f 0902 	mov.w	r9, #2
   21540:	e4fd      	b.n	20f3e <_dtoa_r+0x806>
   21542:	9b02      	ldr	r3, [sp, #8]
   21544:	2b02      	cmp	r3, #2
   21546:	dc1a      	bgt.n	2157e <_dtoa_r+0xe46>
   21548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2154a:	e7ef      	b.n	2152c <_dtoa_r+0xdf4>
   2154c:	2500      	movs	r5, #0
   2154e:	6465      	str	r5, [r4, #68]	; 0x44
   21550:	4629      	mov	r1, r5
   21552:	4620      	mov	r0, r4
   21554:	f000 fb46 	bl	21be4 <_Balloc>
   21558:	f04f 33ff 	mov.w	r3, #4294967295
   2155c:	9308      	str	r3, [sp, #32]
   2155e:	930d      	str	r3, [sp, #52]	; 0x34
   21560:	2301      	movs	r3, #1
   21562:	9007      	str	r0, [sp, #28]
   21564:	46ab      	mov	fp, r5
   21566:	6420      	str	r0, [r4, #64]	; 0x40
   21568:	9309      	str	r3, [sp, #36]	; 0x24
   2156a:	f7ff b9f0 	b.w	2094e <_dtoa_r+0x216>
   2156e:	f43f ab7b 	beq.w	20c68 <_dtoa_r+0x530>
   21572:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21576:	e40b      	b.n	20d90 <_dtoa_r+0x658>
   21578:	2701      	movs	r7, #1
   2157a:	f7ff b9af 	b.w	208dc <_dtoa_r+0x1a4>
   2157e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21580:	9308      	str	r3, [sp, #32]
   21582:	e5f8      	b.n	21176 <_dtoa_r+0xa3e>

00021584 <__sflush_r>:
   21584:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21588:	b29a      	uxth	r2, r3
   2158a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2158e:	460d      	mov	r5, r1
   21590:	0711      	lsls	r1, r2, #28
   21592:	4680      	mov	r8, r0
   21594:	d43a      	bmi.n	2160c <__sflush_r+0x88>
   21596:	686a      	ldr	r2, [r5, #4]
   21598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2159c:	2a00      	cmp	r2, #0
   2159e:	81ab      	strh	r3, [r5, #12]
   215a0:	dd6f      	ble.n	21682 <__sflush_r+0xfe>
   215a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   215a4:	2c00      	cmp	r4, #0
   215a6:	d049      	beq.n	2163c <__sflush_r+0xb8>
   215a8:	2200      	movs	r2, #0
   215aa:	b29b      	uxth	r3, r3
   215ac:	f8d8 6000 	ldr.w	r6, [r8]
   215b0:	f8c8 2000 	str.w	r2, [r8]
   215b4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   215b8:	d067      	beq.n	2168a <__sflush_r+0x106>
   215ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   215bc:	075f      	lsls	r7, r3, #29
   215be:	d505      	bpl.n	215cc <__sflush_r+0x48>
   215c0:	6869      	ldr	r1, [r5, #4]
   215c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   215c4:	1a52      	subs	r2, r2, r1
   215c6:	b10b      	cbz	r3, 215cc <__sflush_r+0x48>
   215c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   215ca:	1ad2      	subs	r2, r2, r3
   215cc:	2300      	movs	r3, #0
   215ce:	69e9      	ldr	r1, [r5, #28]
   215d0:	4640      	mov	r0, r8
   215d2:	47a0      	blx	r4
   215d4:	1c44      	adds	r4, r0, #1
   215d6:	d03c      	beq.n	21652 <__sflush_r+0xce>
   215d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   215dc:	692a      	ldr	r2, [r5, #16]
   215de:	602a      	str	r2, [r5, #0]
   215e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   215e4:	2200      	movs	r2, #0
   215e6:	81ab      	strh	r3, [r5, #12]
   215e8:	04db      	lsls	r3, r3, #19
   215ea:	606a      	str	r2, [r5, #4]
   215ec:	d447      	bmi.n	2167e <__sflush_r+0xfa>
   215ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   215f0:	f8c8 6000 	str.w	r6, [r8]
   215f4:	b311      	cbz	r1, 2163c <__sflush_r+0xb8>
   215f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   215fa:	4299      	cmp	r1, r3
   215fc:	d002      	beq.n	21604 <__sflush_r+0x80>
   215fe:	4640      	mov	r0, r8
   21600:	f000 f95a 	bl	218b8 <_free_r>
   21604:	2000      	movs	r0, #0
   21606:	6328      	str	r0, [r5, #48]	; 0x30
   21608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2160c:	692e      	ldr	r6, [r5, #16]
   2160e:	b1ae      	cbz	r6, 2163c <__sflush_r+0xb8>
   21610:	682c      	ldr	r4, [r5, #0]
   21612:	602e      	str	r6, [r5, #0]
   21614:	0791      	lsls	r1, r2, #30
   21616:	bf0c      	ite	eq
   21618:	696b      	ldreq	r3, [r5, #20]
   2161a:	2300      	movne	r3, #0
   2161c:	1ba4      	subs	r4, r4, r6
   2161e:	60ab      	str	r3, [r5, #8]
   21620:	e00a      	b.n	21638 <__sflush_r+0xb4>
   21622:	4623      	mov	r3, r4
   21624:	4632      	mov	r2, r6
   21626:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   21628:	69e9      	ldr	r1, [r5, #28]
   2162a:	4640      	mov	r0, r8
   2162c:	47b8      	blx	r7
   2162e:	2800      	cmp	r0, #0
   21630:	eba4 0400 	sub.w	r4, r4, r0
   21634:	4406      	add	r6, r0
   21636:	dd04      	ble.n	21642 <__sflush_r+0xbe>
   21638:	2c00      	cmp	r4, #0
   2163a:	dcf2      	bgt.n	21622 <__sflush_r+0x9e>
   2163c:	2000      	movs	r0, #0
   2163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21642:	89ab      	ldrh	r3, [r5, #12]
   21644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21648:	81ab      	strh	r3, [r5, #12]
   2164a:	f04f 30ff 	mov.w	r0, #4294967295
   2164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21652:	f8d8 4000 	ldr.w	r4, [r8]
   21656:	2c1d      	cmp	r4, #29
   21658:	d8f3      	bhi.n	21642 <__sflush_r+0xbe>
   2165a:	4b19      	ldr	r3, [pc, #100]	; (216c0 <__sflush_r+0x13c>)
   2165c:	40e3      	lsrs	r3, r4
   2165e:	43db      	mvns	r3, r3
   21660:	f013 0301 	ands.w	r3, r3, #1
   21664:	d1ed      	bne.n	21642 <__sflush_r+0xbe>
   21666:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2166a:	606b      	str	r3, [r5, #4]
   2166c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21670:	6929      	ldr	r1, [r5, #16]
   21672:	81ab      	strh	r3, [r5, #12]
   21674:	04da      	lsls	r2, r3, #19
   21676:	6029      	str	r1, [r5, #0]
   21678:	d5b9      	bpl.n	215ee <__sflush_r+0x6a>
   2167a:	2c00      	cmp	r4, #0
   2167c:	d1b7      	bne.n	215ee <__sflush_r+0x6a>
   2167e:	6528      	str	r0, [r5, #80]	; 0x50
   21680:	e7b5      	b.n	215ee <__sflush_r+0x6a>
   21682:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21684:	2a00      	cmp	r2, #0
   21686:	dc8c      	bgt.n	215a2 <__sflush_r+0x1e>
   21688:	e7d8      	b.n	2163c <__sflush_r+0xb8>
   2168a:	2301      	movs	r3, #1
   2168c:	69e9      	ldr	r1, [r5, #28]
   2168e:	4640      	mov	r0, r8
   21690:	47a0      	blx	r4
   21692:	1c43      	adds	r3, r0, #1
   21694:	4602      	mov	r2, r0
   21696:	d002      	beq.n	2169e <__sflush_r+0x11a>
   21698:	89ab      	ldrh	r3, [r5, #12]
   2169a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2169c:	e78e      	b.n	215bc <__sflush_r+0x38>
   2169e:	f8d8 3000 	ldr.w	r3, [r8]
   216a2:	2b00      	cmp	r3, #0
   216a4:	d0f8      	beq.n	21698 <__sflush_r+0x114>
   216a6:	2b1d      	cmp	r3, #29
   216a8:	d001      	beq.n	216ae <__sflush_r+0x12a>
   216aa:	2b16      	cmp	r3, #22
   216ac:	d102      	bne.n	216b4 <__sflush_r+0x130>
   216ae:	f8c8 6000 	str.w	r6, [r8]
   216b2:	e7c3      	b.n	2163c <__sflush_r+0xb8>
   216b4:	89ab      	ldrh	r3, [r5, #12]
   216b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   216ba:	81ab      	strh	r3, [r5, #12]
   216bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   216c0:	20400001 	.word	0x20400001

000216c4 <_fflush_r>:
   216c4:	b538      	push	{r3, r4, r5, lr}
   216c6:	460d      	mov	r5, r1
   216c8:	4604      	mov	r4, r0
   216ca:	b108      	cbz	r0, 216d0 <_fflush_r+0xc>
   216cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   216ce:	b1bb      	cbz	r3, 21700 <_fflush_r+0x3c>
   216d0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   216d4:	b188      	cbz	r0, 216fa <_fflush_r+0x36>
   216d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   216d8:	07db      	lsls	r3, r3, #31
   216da:	d401      	bmi.n	216e0 <_fflush_r+0x1c>
   216dc:	0581      	lsls	r1, r0, #22
   216de:	d517      	bpl.n	21710 <_fflush_r+0x4c>
   216e0:	4620      	mov	r0, r4
   216e2:	4629      	mov	r1, r5
   216e4:	f7ff ff4e 	bl	21584 <__sflush_r>
   216e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   216ea:	07da      	lsls	r2, r3, #31
   216ec:	4604      	mov	r4, r0
   216ee:	d402      	bmi.n	216f6 <_fflush_r+0x32>
   216f0:	89ab      	ldrh	r3, [r5, #12]
   216f2:	059b      	lsls	r3, r3, #22
   216f4:	d507      	bpl.n	21706 <_fflush_r+0x42>
   216f6:	4620      	mov	r0, r4
   216f8:	bd38      	pop	{r3, r4, r5, pc}
   216fa:	4604      	mov	r4, r0
   216fc:	4620      	mov	r0, r4
   216fe:	bd38      	pop	{r3, r4, r5, pc}
   21700:	f000 f838 	bl	21774 <__sinit>
   21704:	e7e4      	b.n	216d0 <_fflush_r+0xc>
   21706:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21708:	f7fc fa9a 	bl	1dc40 <__retarget_lock_release_recursive>
   2170c:	4620      	mov	r0, r4
   2170e:	bd38      	pop	{r3, r4, r5, pc}
   21710:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21712:	f7fc fa93 	bl	1dc3c <__retarget_lock_acquire_recursive>
   21716:	e7e3      	b.n	216e0 <_fflush_r+0x1c>

00021718 <_cleanup_r>:
   21718:	4901      	ldr	r1, [pc, #4]	; (21720 <_cleanup_r+0x8>)
   2171a:	f000 b9b3 	b.w	21a84 <_fwalk_reent>
   2171e:	bf00      	nop
   21720:	000224a9 	.word	0x000224a9

00021724 <std.isra.0>:
   21724:	b510      	push	{r4, lr}
   21726:	2300      	movs	r3, #0
   21728:	4604      	mov	r4, r0
   2172a:	8181      	strh	r1, [r0, #12]
   2172c:	81c2      	strh	r2, [r0, #14]
   2172e:	6003      	str	r3, [r0, #0]
   21730:	6043      	str	r3, [r0, #4]
   21732:	6083      	str	r3, [r0, #8]
   21734:	6643      	str	r3, [r0, #100]	; 0x64
   21736:	6103      	str	r3, [r0, #16]
   21738:	6143      	str	r3, [r0, #20]
   2173a:	6183      	str	r3, [r0, #24]
   2173c:	4619      	mov	r1, r3
   2173e:	2208      	movs	r2, #8
   21740:	305c      	adds	r0, #92	; 0x5c
   21742:	f7fc fed3 	bl	1e4ec <memset>
   21746:	4807      	ldr	r0, [pc, #28]	; (21764 <std.isra.0+0x40>)
   21748:	4907      	ldr	r1, [pc, #28]	; (21768 <std.isra.0+0x44>)
   2174a:	4a08      	ldr	r2, [pc, #32]	; (2176c <std.isra.0+0x48>)
   2174c:	4b08      	ldr	r3, [pc, #32]	; (21770 <std.isra.0+0x4c>)
   2174e:	6220      	str	r0, [r4, #32]
   21750:	61e4      	str	r4, [r4, #28]
   21752:	6261      	str	r1, [r4, #36]	; 0x24
   21754:	62a2      	str	r2, [r4, #40]	; 0x28
   21756:	62e3      	str	r3, [r4, #44]	; 0x2c
   21758:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2175c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21760:	f7fc ba68 	b.w	1dc34 <__retarget_lock_init_recursive>
   21764:	000221dd 	.word	0x000221dd
   21768:	00022201 	.word	0x00022201
   2176c:	0002223d 	.word	0x0002223d
   21770:	0002225d 	.word	0x0002225d

00021774 <__sinit>:
   21774:	b510      	push	{r4, lr}
   21776:	4604      	mov	r4, r0
   21778:	4812      	ldr	r0, [pc, #72]	; (217c4 <__sinit+0x50>)
   2177a:	f7fc fa5f 	bl	1dc3c <__retarget_lock_acquire_recursive>
   2177e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21780:	b9d2      	cbnz	r2, 217b8 <__sinit+0x44>
   21782:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21786:	4810      	ldr	r0, [pc, #64]	; (217c8 <__sinit+0x54>)
   21788:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2178c:	2103      	movs	r1, #3
   2178e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21792:	63e0      	str	r0, [r4, #60]	; 0x3c
   21794:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21798:	6860      	ldr	r0, [r4, #4]
   2179a:	2104      	movs	r1, #4
   2179c:	f7ff ffc2 	bl	21724 <std.isra.0>
   217a0:	2201      	movs	r2, #1
   217a2:	2109      	movs	r1, #9
   217a4:	68a0      	ldr	r0, [r4, #8]
   217a6:	f7ff ffbd 	bl	21724 <std.isra.0>
   217aa:	2202      	movs	r2, #2
   217ac:	2112      	movs	r1, #18
   217ae:	68e0      	ldr	r0, [r4, #12]
   217b0:	f7ff ffb8 	bl	21724 <std.isra.0>
   217b4:	2301      	movs	r3, #1
   217b6:	63a3      	str	r3, [r4, #56]	; 0x38
   217b8:	4802      	ldr	r0, [pc, #8]	; (217c4 <__sinit+0x50>)
   217ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   217be:	f7fc ba3f 	b.w	1dc40 <__retarget_lock_release_recursive>
   217c2:	bf00      	nop
   217c4:	20002384 	.word	0x20002384
   217c8:	00021719 	.word	0x00021719

000217cc <__sfp_lock_acquire>:
   217cc:	4801      	ldr	r0, [pc, #4]	; (217d4 <__sfp_lock_acquire+0x8>)
   217ce:	f7fc ba35 	b.w	1dc3c <__retarget_lock_acquire_recursive>
   217d2:	bf00      	nop
   217d4:	20002398 	.word	0x20002398

000217d8 <__sfp_lock_release>:
   217d8:	4801      	ldr	r0, [pc, #4]	; (217e0 <__sfp_lock_release+0x8>)
   217da:	f7fc ba31 	b.w	1dc40 <__retarget_lock_release_recursive>
   217de:	bf00      	nop
   217e0:	20002398 	.word	0x20002398

000217e4 <__libc_fini_array>:
   217e4:	b538      	push	{r3, r4, r5, lr}
   217e6:	4c0a      	ldr	r4, [pc, #40]	; (21810 <__libc_fini_array+0x2c>)
   217e8:	4d0a      	ldr	r5, [pc, #40]	; (21814 <__libc_fini_array+0x30>)
   217ea:	1b64      	subs	r4, r4, r5
   217ec:	10a4      	asrs	r4, r4, #2
   217ee:	d00a      	beq.n	21806 <__libc_fini_array+0x22>
   217f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   217f4:	3b01      	subs	r3, #1
   217f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   217fa:	3c01      	subs	r4, #1
   217fc:	f855 3904 	ldr.w	r3, [r5], #-4
   21800:	4798      	blx	r3
   21802:	2c00      	cmp	r4, #0
   21804:	d1f9      	bne.n	217fa <__libc_fini_array+0x16>
   21806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2180a:	f001 b8b3 	b.w	22974 <_fini>
   2180e:	bf00      	nop
   21810:	000229bc 	.word	0x000229bc
   21814:	000229b8 	.word	0x000229b8

00021818 <_malloc_trim_r>:
   21818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2181a:	4f24      	ldr	r7, [pc, #144]	; (218ac <_malloc_trim_r+0x94>)
   2181c:	460c      	mov	r4, r1
   2181e:	4606      	mov	r6, r0
   21820:	f7fc feb2 	bl	1e588 <__malloc_lock>
   21824:	68bb      	ldr	r3, [r7, #8]
   21826:	685d      	ldr	r5, [r3, #4]
   21828:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2182c:	310f      	adds	r1, #15
   2182e:	f025 0503 	bic.w	r5, r5, #3
   21832:	4429      	add	r1, r5
   21834:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   21838:	f021 010f 	bic.w	r1, r1, #15
   2183c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21840:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21844:	db07      	blt.n	21856 <_malloc_trim_r+0x3e>
   21846:	2100      	movs	r1, #0
   21848:	4630      	mov	r0, r6
   2184a:	f7fd f88f 	bl	1e96c <_sbrk_r>
   2184e:	68bb      	ldr	r3, [r7, #8]
   21850:	442b      	add	r3, r5
   21852:	4298      	cmp	r0, r3
   21854:	d004      	beq.n	21860 <_malloc_trim_r+0x48>
   21856:	4630      	mov	r0, r6
   21858:	f7fc fe9c 	bl	1e594 <__malloc_unlock>
   2185c:	2000      	movs	r0, #0
   2185e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21860:	4261      	negs	r1, r4
   21862:	4630      	mov	r0, r6
   21864:	f7fd f882 	bl	1e96c <_sbrk_r>
   21868:	3001      	adds	r0, #1
   2186a:	d00d      	beq.n	21888 <_malloc_trim_r+0x70>
   2186c:	4b10      	ldr	r3, [pc, #64]	; (218b0 <_malloc_trim_r+0x98>)
   2186e:	68ba      	ldr	r2, [r7, #8]
   21870:	6819      	ldr	r1, [r3, #0]
   21872:	1b2d      	subs	r5, r5, r4
   21874:	f045 0501 	orr.w	r5, r5, #1
   21878:	4630      	mov	r0, r6
   2187a:	1b09      	subs	r1, r1, r4
   2187c:	6055      	str	r5, [r2, #4]
   2187e:	6019      	str	r1, [r3, #0]
   21880:	f7fc fe88 	bl	1e594 <__malloc_unlock>
   21884:	2001      	movs	r0, #1
   21886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21888:	2100      	movs	r1, #0
   2188a:	4630      	mov	r0, r6
   2188c:	f7fd f86e 	bl	1e96c <_sbrk_r>
   21890:	68ba      	ldr	r2, [r7, #8]
   21892:	1a83      	subs	r3, r0, r2
   21894:	2b0f      	cmp	r3, #15
   21896:	ddde      	ble.n	21856 <_malloc_trim_r+0x3e>
   21898:	4c06      	ldr	r4, [pc, #24]	; (218b4 <_malloc_trim_r+0x9c>)
   2189a:	4905      	ldr	r1, [pc, #20]	; (218b0 <_malloc_trim_r+0x98>)
   2189c:	6824      	ldr	r4, [r4, #0]
   2189e:	f043 0301 	orr.w	r3, r3, #1
   218a2:	1b00      	subs	r0, r0, r4
   218a4:	6053      	str	r3, [r2, #4]
   218a6:	6008      	str	r0, [r1, #0]
   218a8:	e7d5      	b.n	21856 <_malloc_trim_r+0x3e>
   218aa:	bf00      	nop
   218ac:	20000694 	.word	0x20000694
   218b0:	200022a0 	.word	0x200022a0
   218b4:	20000a9c 	.word	0x20000a9c

000218b8 <_free_r>:
   218b8:	2900      	cmp	r1, #0
   218ba:	d044      	beq.n	21946 <_free_r+0x8e>
   218bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   218c0:	460d      	mov	r5, r1
   218c2:	4680      	mov	r8, r0
   218c4:	f7fc fe60 	bl	1e588 <__malloc_lock>
   218c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   218cc:	4969      	ldr	r1, [pc, #420]	; (21a74 <_free_r+0x1bc>)
   218ce:	f027 0301 	bic.w	r3, r7, #1
   218d2:	f1a5 0408 	sub.w	r4, r5, #8
   218d6:	18e2      	adds	r2, r4, r3
   218d8:	688e      	ldr	r6, [r1, #8]
   218da:	6850      	ldr	r0, [r2, #4]
   218dc:	42b2      	cmp	r2, r6
   218de:	f020 0003 	bic.w	r0, r0, #3
   218e2:	d05e      	beq.n	219a2 <_free_r+0xea>
   218e4:	07fe      	lsls	r6, r7, #31
   218e6:	6050      	str	r0, [r2, #4]
   218e8:	d40b      	bmi.n	21902 <_free_r+0x4a>
   218ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
   218ee:	1be4      	subs	r4, r4, r7
   218f0:	f101 0e08 	add.w	lr, r1, #8
   218f4:	68a5      	ldr	r5, [r4, #8]
   218f6:	4575      	cmp	r5, lr
   218f8:	443b      	add	r3, r7
   218fa:	d06d      	beq.n	219d8 <_free_r+0x120>
   218fc:	68e7      	ldr	r7, [r4, #12]
   218fe:	60ef      	str	r7, [r5, #12]
   21900:	60bd      	str	r5, [r7, #8]
   21902:	1815      	adds	r5, r2, r0
   21904:	686d      	ldr	r5, [r5, #4]
   21906:	07ed      	lsls	r5, r5, #31
   21908:	d53e      	bpl.n	21988 <_free_r+0xd0>
   2190a:	f043 0201 	orr.w	r2, r3, #1
   2190e:	6062      	str	r2, [r4, #4]
   21910:	50e3      	str	r3, [r4, r3]
   21912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21916:	d217      	bcs.n	21948 <_free_r+0x90>
   21918:	08db      	lsrs	r3, r3, #3
   2191a:	1c58      	adds	r0, r3, #1
   2191c:	109a      	asrs	r2, r3, #2
   2191e:	684d      	ldr	r5, [r1, #4]
   21920:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   21924:	60a7      	str	r7, [r4, #8]
   21926:	2301      	movs	r3, #1
   21928:	4093      	lsls	r3, r2
   2192a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2192e:	432b      	orrs	r3, r5
   21930:	3a08      	subs	r2, #8
   21932:	60e2      	str	r2, [r4, #12]
   21934:	604b      	str	r3, [r1, #4]
   21936:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2193a:	60fc      	str	r4, [r7, #12]
   2193c:	4640      	mov	r0, r8
   2193e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21942:	f7fc be27 	b.w	1e594 <__malloc_unlock>
   21946:	4770      	bx	lr
   21948:	0a5a      	lsrs	r2, r3, #9
   2194a:	2a04      	cmp	r2, #4
   2194c:	d852      	bhi.n	219f4 <_free_r+0x13c>
   2194e:	099a      	lsrs	r2, r3, #6
   21950:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21954:	00ff      	lsls	r7, r7, #3
   21956:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2195a:	19c8      	adds	r0, r1, r7
   2195c:	59ca      	ldr	r2, [r1, r7]
   2195e:	3808      	subs	r0, #8
   21960:	4290      	cmp	r0, r2
   21962:	d04f      	beq.n	21a04 <_free_r+0x14c>
   21964:	6851      	ldr	r1, [r2, #4]
   21966:	f021 0103 	bic.w	r1, r1, #3
   2196a:	428b      	cmp	r3, r1
   2196c:	d232      	bcs.n	219d4 <_free_r+0x11c>
   2196e:	6892      	ldr	r2, [r2, #8]
   21970:	4290      	cmp	r0, r2
   21972:	d1f7      	bne.n	21964 <_free_r+0xac>
   21974:	68c3      	ldr	r3, [r0, #12]
   21976:	60a0      	str	r0, [r4, #8]
   21978:	60e3      	str	r3, [r4, #12]
   2197a:	609c      	str	r4, [r3, #8]
   2197c:	60c4      	str	r4, [r0, #12]
   2197e:	4640      	mov	r0, r8
   21980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21984:	f7fc be06 	b.w	1e594 <__malloc_unlock>
   21988:	6895      	ldr	r5, [r2, #8]
   2198a:	4f3b      	ldr	r7, [pc, #236]	; (21a78 <_free_r+0x1c0>)
   2198c:	42bd      	cmp	r5, r7
   2198e:	4403      	add	r3, r0
   21990:	d040      	beq.n	21a14 <_free_r+0x15c>
   21992:	68d0      	ldr	r0, [r2, #12]
   21994:	60e8      	str	r0, [r5, #12]
   21996:	f043 0201 	orr.w	r2, r3, #1
   2199a:	6085      	str	r5, [r0, #8]
   2199c:	6062      	str	r2, [r4, #4]
   2199e:	50e3      	str	r3, [r4, r3]
   219a0:	e7b7      	b.n	21912 <_free_r+0x5a>
   219a2:	07ff      	lsls	r7, r7, #31
   219a4:	4403      	add	r3, r0
   219a6:	d407      	bmi.n	219b8 <_free_r+0x100>
   219a8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   219ac:	1aa4      	subs	r4, r4, r2
   219ae:	4413      	add	r3, r2
   219b0:	68a0      	ldr	r0, [r4, #8]
   219b2:	68e2      	ldr	r2, [r4, #12]
   219b4:	60c2      	str	r2, [r0, #12]
   219b6:	6090      	str	r0, [r2, #8]
   219b8:	4a30      	ldr	r2, [pc, #192]	; (21a7c <_free_r+0x1c4>)
   219ba:	6812      	ldr	r2, [r2, #0]
   219bc:	f043 0001 	orr.w	r0, r3, #1
   219c0:	4293      	cmp	r3, r2
   219c2:	6060      	str	r0, [r4, #4]
   219c4:	608c      	str	r4, [r1, #8]
   219c6:	d3b9      	bcc.n	2193c <_free_r+0x84>
   219c8:	4b2d      	ldr	r3, [pc, #180]	; (21a80 <_free_r+0x1c8>)
   219ca:	4640      	mov	r0, r8
   219cc:	6819      	ldr	r1, [r3, #0]
   219ce:	f7ff ff23 	bl	21818 <_malloc_trim_r>
   219d2:	e7b3      	b.n	2193c <_free_r+0x84>
   219d4:	4610      	mov	r0, r2
   219d6:	e7cd      	b.n	21974 <_free_r+0xbc>
   219d8:	1811      	adds	r1, r2, r0
   219da:	6849      	ldr	r1, [r1, #4]
   219dc:	07c9      	lsls	r1, r1, #31
   219de:	d444      	bmi.n	21a6a <_free_r+0x1b2>
   219e0:	6891      	ldr	r1, [r2, #8]
   219e2:	68d2      	ldr	r2, [r2, #12]
   219e4:	60ca      	str	r2, [r1, #12]
   219e6:	4403      	add	r3, r0
   219e8:	f043 0001 	orr.w	r0, r3, #1
   219ec:	6091      	str	r1, [r2, #8]
   219ee:	6060      	str	r0, [r4, #4]
   219f0:	50e3      	str	r3, [r4, r3]
   219f2:	e7a3      	b.n	2193c <_free_r+0x84>
   219f4:	2a14      	cmp	r2, #20
   219f6:	d816      	bhi.n	21a26 <_free_r+0x16e>
   219f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   219fc:	00ff      	lsls	r7, r7, #3
   219fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21a02:	e7aa      	b.n	2195a <_free_r+0xa2>
   21a04:	10aa      	asrs	r2, r5, #2
   21a06:	2301      	movs	r3, #1
   21a08:	684d      	ldr	r5, [r1, #4]
   21a0a:	4093      	lsls	r3, r2
   21a0c:	432b      	orrs	r3, r5
   21a0e:	604b      	str	r3, [r1, #4]
   21a10:	4603      	mov	r3, r0
   21a12:	e7b0      	b.n	21976 <_free_r+0xbe>
   21a14:	f043 0201 	orr.w	r2, r3, #1
   21a18:	614c      	str	r4, [r1, #20]
   21a1a:	610c      	str	r4, [r1, #16]
   21a1c:	60e5      	str	r5, [r4, #12]
   21a1e:	60a5      	str	r5, [r4, #8]
   21a20:	6062      	str	r2, [r4, #4]
   21a22:	50e3      	str	r3, [r4, r3]
   21a24:	e78a      	b.n	2193c <_free_r+0x84>
   21a26:	2a54      	cmp	r2, #84	; 0x54
   21a28:	d806      	bhi.n	21a38 <_free_r+0x180>
   21a2a:	0b1a      	lsrs	r2, r3, #12
   21a2c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21a30:	00ff      	lsls	r7, r7, #3
   21a32:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21a36:	e790      	b.n	2195a <_free_r+0xa2>
   21a38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21a3c:	d806      	bhi.n	21a4c <_free_r+0x194>
   21a3e:	0bda      	lsrs	r2, r3, #15
   21a40:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21a44:	00ff      	lsls	r7, r7, #3
   21a46:	f102 0577 	add.w	r5, r2, #119	; 0x77
   21a4a:	e786      	b.n	2195a <_free_r+0xa2>
   21a4c:	f240 5054 	movw	r0, #1364	; 0x554
   21a50:	4282      	cmp	r2, r0
   21a52:	d806      	bhi.n	21a62 <_free_r+0x1aa>
   21a54:	0c9a      	lsrs	r2, r3, #18
   21a56:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   21a5a:	00ff      	lsls	r7, r7, #3
   21a5c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21a60:	e77b      	b.n	2195a <_free_r+0xa2>
   21a62:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21a66:	257e      	movs	r5, #126	; 0x7e
   21a68:	e777      	b.n	2195a <_free_r+0xa2>
   21a6a:	f043 0101 	orr.w	r1, r3, #1
   21a6e:	6061      	str	r1, [r4, #4]
   21a70:	6013      	str	r3, [r2, #0]
   21a72:	e763      	b.n	2193c <_free_r+0x84>
   21a74:	20000694 	.word	0x20000694
   21a78:	2000069c 	.word	0x2000069c
   21a7c:	20000aa0 	.word	0x20000aa0
   21a80:	200022d0 	.word	0x200022d0

00021a84 <_fwalk_reent>:
   21a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a88:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   21a8c:	d01f      	beq.n	21ace <_fwalk_reent+0x4a>
   21a8e:	4688      	mov	r8, r1
   21a90:	4606      	mov	r6, r0
   21a92:	f04f 0900 	mov.w	r9, #0
   21a96:	687d      	ldr	r5, [r7, #4]
   21a98:	68bc      	ldr	r4, [r7, #8]
   21a9a:	3d01      	subs	r5, #1
   21a9c:	d411      	bmi.n	21ac2 <_fwalk_reent+0x3e>
   21a9e:	89a3      	ldrh	r3, [r4, #12]
   21aa0:	2b01      	cmp	r3, #1
   21aa2:	f105 35ff 	add.w	r5, r5, #4294967295
   21aa6:	d908      	bls.n	21aba <_fwalk_reent+0x36>
   21aa8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21aac:	3301      	adds	r3, #1
   21aae:	4621      	mov	r1, r4
   21ab0:	4630      	mov	r0, r6
   21ab2:	d002      	beq.n	21aba <_fwalk_reent+0x36>
   21ab4:	47c0      	blx	r8
   21ab6:	ea49 0900 	orr.w	r9, r9, r0
   21aba:	1c6b      	adds	r3, r5, #1
   21abc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21ac0:	d1ed      	bne.n	21a9e <_fwalk_reent+0x1a>
   21ac2:	683f      	ldr	r7, [r7, #0]
   21ac4:	2f00      	cmp	r7, #0
   21ac6:	d1e6      	bne.n	21a96 <_fwalk_reent+0x12>
   21ac8:	4648      	mov	r0, r9
   21aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ace:	46b9      	mov	r9, r7
   21ad0:	4648      	mov	r0, r9
   21ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ad6:	bf00      	nop

00021ad8 <_localeconv_r>:
   21ad8:	4a04      	ldr	r2, [pc, #16]	; (21aec <_localeconv_r+0x14>)
   21ada:	4b05      	ldr	r3, [pc, #20]	; (21af0 <_localeconv_r+0x18>)
   21adc:	6812      	ldr	r2, [r2, #0]
   21ade:	6b50      	ldr	r0, [r2, #52]	; 0x34
   21ae0:	2800      	cmp	r0, #0
   21ae2:	bf08      	it	eq
   21ae4:	4618      	moveq	r0, r3
   21ae6:	30f0      	adds	r0, #240	; 0xf0
   21ae8:	4770      	bx	lr
   21aea:	bf00      	nop
   21aec:	200000f8 	.word	0x200000f8
   21af0:	20000528 	.word	0x20000528

00021af4 <__swhatbuf_r>:
   21af4:	b570      	push	{r4, r5, r6, lr}
   21af6:	460c      	mov	r4, r1
   21af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21afc:	2900      	cmp	r1, #0
   21afe:	b090      	sub	sp, #64	; 0x40
   21b00:	4615      	mov	r5, r2
   21b02:	461e      	mov	r6, r3
   21b04:	db14      	blt.n	21b30 <__swhatbuf_r+0x3c>
   21b06:	aa01      	add	r2, sp, #4
   21b08:	f000 fd30 	bl	2256c <_fstat_r>
   21b0c:	2800      	cmp	r0, #0
   21b0e:	db0f      	blt.n	21b30 <__swhatbuf_r+0x3c>
   21b10:	9a02      	ldr	r2, [sp, #8]
   21b12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21b16:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21b1a:	fab2 f282 	clz	r2, r2
   21b1e:	0952      	lsrs	r2, r2, #5
   21b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21b24:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21b28:	6032      	str	r2, [r6, #0]
   21b2a:	602b      	str	r3, [r5, #0]
   21b2c:	b010      	add	sp, #64	; 0x40
   21b2e:	bd70      	pop	{r4, r5, r6, pc}
   21b30:	89a2      	ldrh	r2, [r4, #12]
   21b32:	2300      	movs	r3, #0
   21b34:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21b38:	6033      	str	r3, [r6, #0]
   21b3a:	d004      	beq.n	21b46 <__swhatbuf_r+0x52>
   21b3c:	2240      	movs	r2, #64	; 0x40
   21b3e:	4618      	mov	r0, r3
   21b40:	602a      	str	r2, [r5, #0]
   21b42:	b010      	add	sp, #64	; 0x40
   21b44:	bd70      	pop	{r4, r5, r6, pc}
   21b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21b4a:	602b      	str	r3, [r5, #0]
   21b4c:	b010      	add	sp, #64	; 0x40
   21b4e:	bd70      	pop	{r4, r5, r6, pc}

00021b50 <__smakebuf_r>:
   21b50:	898a      	ldrh	r2, [r1, #12]
   21b52:	0792      	lsls	r2, r2, #30
   21b54:	460b      	mov	r3, r1
   21b56:	d506      	bpl.n	21b66 <__smakebuf_r+0x16>
   21b58:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21b5c:	2101      	movs	r1, #1
   21b5e:	601a      	str	r2, [r3, #0]
   21b60:	611a      	str	r2, [r3, #16]
   21b62:	6159      	str	r1, [r3, #20]
   21b64:	4770      	bx	lr
   21b66:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b68:	b083      	sub	sp, #12
   21b6a:	ab01      	add	r3, sp, #4
   21b6c:	466a      	mov	r2, sp
   21b6e:	460c      	mov	r4, r1
   21b70:	4606      	mov	r6, r0
   21b72:	f7ff ffbf 	bl	21af4 <__swhatbuf_r>
   21b76:	9900      	ldr	r1, [sp, #0]
   21b78:	4605      	mov	r5, r0
   21b7a:	4630      	mov	r0, r6
   21b7c:	f7fc f872 	bl	1dc64 <_malloc_r>
   21b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21b84:	b1d8      	cbz	r0, 21bbe <__smakebuf_r+0x6e>
   21b86:	9a01      	ldr	r2, [sp, #4]
   21b88:	4f15      	ldr	r7, [pc, #84]	; (21be0 <__smakebuf_r+0x90>)
   21b8a:	9900      	ldr	r1, [sp, #0]
   21b8c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21b92:	81a3      	strh	r3, [r4, #12]
   21b94:	6020      	str	r0, [r4, #0]
   21b96:	6120      	str	r0, [r4, #16]
   21b98:	6161      	str	r1, [r4, #20]
   21b9a:	b91a      	cbnz	r2, 21ba4 <__smakebuf_r+0x54>
   21b9c:	432b      	orrs	r3, r5
   21b9e:	81a3      	strh	r3, [r4, #12]
   21ba0:	b003      	add	sp, #12
   21ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ba4:	4630      	mov	r0, r6
   21ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21baa:	f000 fcf3 	bl	22594 <_isatty_r>
   21bae:	b1a0      	cbz	r0, 21bda <__smakebuf_r+0x8a>
   21bb0:	89a3      	ldrh	r3, [r4, #12]
   21bb2:	f023 0303 	bic.w	r3, r3, #3
   21bb6:	f043 0301 	orr.w	r3, r3, #1
   21bba:	b21b      	sxth	r3, r3
   21bbc:	e7ee      	b.n	21b9c <__smakebuf_r+0x4c>
   21bbe:	059a      	lsls	r2, r3, #22
   21bc0:	d4ee      	bmi.n	21ba0 <__smakebuf_r+0x50>
   21bc2:	f023 0303 	bic.w	r3, r3, #3
   21bc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21bca:	f043 0302 	orr.w	r3, r3, #2
   21bce:	2101      	movs	r1, #1
   21bd0:	81a3      	strh	r3, [r4, #12]
   21bd2:	6022      	str	r2, [r4, #0]
   21bd4:	6122      	str	r2, [r4, #16]
   21bd6:	6161      	str	r1, [r4, #20]
   21bd8:	e7e2      	b.n	21ba0 <__smakebuf_r+0x50>
   21bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21bde:	e7dd      	b.n	21b9c <__smakebuf_r+0x4c>
   21be0:	00021719 	.word	0x00021719

00021be4 <_Balloc>:
   21be4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21be6:	b570      	push	{r4, r5, r6, lr}
   21be8:	4605      	mov	r5, r0
   21bea:	460c      	mov	r4, r1
   21bec:	b14b      	cbz	r3, 21c02 <_Balloc+0x1e>
   21bee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21bf2:	b180      	cbz	r0, 21c16 <_Balloc+0x32>
   21bf4:	6802      	ldr	r2, [r0, #0]
   21bf6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21bfa:	2300      	movs	r3, #0
   21bfc:	6103      	str	r3, [r0, #16]
   21bfe:	60c3      	str	r3, [r0, #12]
   21c00:	bd70      	pop	{r4, r5, r6, pc}
   21c02:	2221      	movs	r2, #33	; 0x21
   21c04:	2104      	movs	r1, #4
   21c06:	f000 fc0d 	bl	22424 <_calloc_r>
   21c0a:	64e8      	str	r0, [r5, #76]	; 0x4c
   21c0c:	4603      	mov	r3, r0
   21c0e:	2800      	cmp	r0, #0
   21c10:	d1ed      	bne.n	21bee <_Balloc+0xa>
   21c12:	2000      	movs	r0, #0
   21c14:	bd70      	pop	{r4, r5, r6, pc}
   21c16:	2101      	movs	r1, #1
   21c18:	fa01 f604 	lsl.w	r6, r1, r4
   21c1c:	1d72      	adds	r2, r6, #5
   21c1e:	4628      	mov	r0, r5
   21c20:	0092      	lsls	r2, r2, #2
   21c22:	f000 fbff 	bl	22424 <_calloc_r>
   21c26:	2800      	cmp	r0, #0
   21c28:	d0f3      	beq.n	21c12 <_Balloc+0x2e>
   21c2a:	6044      	str	r4, [r0, #4]
   21c2c:	6086      	str	r6, [r0, #8]
   21c2e:	e7e4      	b.n	21bfa <_Balloc+0x16>

00021c30 <_Bfree>:
   21c30:	b131      	cbz	r1, 21c40 <_Bfree+0x10>
   21c32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21c34:	684a      	ldr	r2, [r1, #4]
   21c36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21c3a:	6008      	str	r0, [r1, #0]
   21c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21c40:	4770      	bx	lr
   21c42:	bf00      	nop

00021c44 <__multadd>:
   21c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c46:	690c      	ldr	r4, [r1, #16]
   21c48:	b083      	sub	sp, #12
   21c4a:	460d      	mov	r5, r1
   21c4c:	4606      	mov	r6, r0
   21c4e:	f101 0e14 	add.w	lr, r1, #20
   21c52:	2700      	movs	r7, #0
   21c54:	f8de 0000 	ldr.w	r0, [lr]
   21c58:	b281      	uxth	r1, r0
   21c5a:	fb02 3301 	mla	r3, r2, r1, r3
   21c5e:	0c01      	lsrs	r1, r0, #16
   21c60:	0c18      	lsrs	r0, r3, #16
   21c62:	fb02 0101 	mla	r1, r2, r1, r0
   21c66:	b29b      	uxth	r3, r3
   21c68:	3701      	adds	r7, #1
   21c6a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21c6e:	42bc      	cmp	r4, r7
   21c70:	f84e 3b04 	str.w	r3, [lr], #4
   21c74:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21c78:	dcec      	bgt.n	21c54 <__multadd+0x10>
   21c7a:	b13b      	cbz	r3, 21c8c <__multadd+0x48>
   21c7c:	68aa      	ldr	r2, [r5, #8]
   21c7e:	4294      	cmp	r4, r2
   21c80:	da07      	bge.n	21c92 <__multadd+0x4e>
   21c82:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21c86:	3401      	adds	r4, #1
   21c88:	6153      	str	r3, [r2, #20]
   21c8a:	612c      	str	r4, [r5, #16]
   21c8c:	4628      	mov	r0, r5
   21c8e:	b003      	add	sp, #12
   21c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c92:	6869      	ldr	r1, [r5, #4]
   21c94:	9301      	str	r3, [sp, #4]
   21c96:	3101      	adds	r1, #1
   21c98:	4630      	mov	r0, r6
   21c9a:	f7ff ffa3 	bl	21be4 <_Balloc>
   21c9e:	692a      	ldr	r2, [r5, #16]
   21ca0:	3202      	adds	r2, #2
   21ca2:	f105 010c 	add.w	r1, r5, #12
   21ca6:	4607      	mov	r7, r0
   21ca8:	0092      	lsls	r2, r2, #2
   21caa:	300c      	adds	r0, #12
   21cac:	f7fc fb20 	bl	1e2f0 <memcpy>
   21cb0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21cb2:	6869      	ldr	r1, [r5, #4]
   21cb4:	9b01      	ldr	r3, [sp, #4]
   21cb6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21cba:	6028      	str	r0, [r5, #0]
   21cbc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21cc0:	463d      	mov	r5, r7
   21cc2:	e7de      	b.n	21c82 <__multadd+0x3e>

00021cc4 <__hi0bits>:
   21cc4:	0c02      	lsrs	r2, r0, #16
   21cc6:	0412      	lsls	r2, r2, #16
   21cc8:	4603      	mov	r3, r0
   21cca:	b9b2      	cbnz	r2, 21cfa <__hi0bits+0x36>
   21ccc:	0403      	lsls	r3, r0, #16
   21cce:	2010      	movs	r0, #16
   21cd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21cd4:	bf04      	itt	eq
   21cd6:	021b      	lsleq	r3, r3, #8
   21cd8:	3008      	addeq	r0, #8
   21cda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21cde:	bf04      	itt	eq
   21ce0:	011b      	lsleq	r3, r3, #4
   21ce2:	3004      	addeq	r0, #4
   21ce4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21ce8:	bf04      	itt	eq
   21cea:	009b      	lsleq	r3, r3, #2
   21cec:	3002      	addeq	r0, #2
   21cee:	2b00      	cmp	r3, #0
   21cf0:	db02      	blt.n	21cf8 <__hi0bits+0x34>
   21cf2:	005b      	lsls	r3, r3, #1
   21cf4:	d403      	bmi.n	21cfe <__hi0bits+0x3a>
   21cf6:	2020      	movs	r0, #32
   21cf8:	4770      	bx	lr
   21cfa:	2000      	movs	r0, #0
   21cfc:	e7e8      	b.n	21cd0 <__hi0bits+0xc>
   21cfe:	3001      	adds	r0, #1
   21d00:	4770      	bx	lr
   21d02:	bf00      	nop

00021d04 <__lo0bits>:
   21d04:	6803      	ldr	r3, [r0, #0]
   21d06:	f013 0207 	ands.w	r2, r3, #7
   21d0a:	4601      	mov	r1, r0
   21d0c:	d007      	beq.n	21d1e <__lo0bits+0x1a>
   21d0e:	07da      	lsls	r2, r3, #31
   21d10:	d421      	bmi.n	21d56 <__lo0bits+0x52>
   21d12:	0798      	lsls	r0, r3, #30
   21d14:	d421      	bmi.n	21d5a <__lo0bits+0x56>
   21d16:	089b      	lsrs	r3, r3, #2
   21d18:	600b      	str	r3, [r1, #0]
   21d1a:	2002      	movs	r0, #2
   21d1c:	4770      	bx	lr
   21d1e:	b298      	uxth	r0, r3
   21d20:	b198      	cbz	r0, 21d4a <__lo0bits+0x46>
   21d22:	4610      	mov	r0, r2
   21d24:	f013 0fff 	tst.w	r3, #255	; 0xff
   21d28:	bf04      	itt	eq
   21d2a:	0a1b      	lsreq	r3, r3, #8
   21d2c:	3008      	addeq	r0, #8
   21d2e:	071a      	lsls	r2, r3, #28
   21d30:	bf04      	itt	eq
   21d32:	091b      	lsreq	r3, r3, #4
   21d34:	3004      	addeq	r0, #4
   21d36:	079a      	lsls	r2, r3, #30
   21d38:	bf04      	itt	eq
   21d3a:	089b      	lsreq	r3, r3, #2
   21d3c:	3002      	addeq	r0, #2
   21d3e:	07da      	lsls	r2, r3, #31
   21d40:	d407      	bmi.n	21d52 <__lo0bits+0x4e>
   21d42:	085b      	lsrs	r3, r3, #1
   21d44:	d104      	bne.n	21d50 <__lo0bits+0x4c>
   21d46:	2020      	movs	r0, #32
   21d48:	4770      	bx	lr
   21d4a:	0c1b      	lsrs	r3, r3, #16
   21d4c:	2010      	movs	r0, #16
   21d4e:	e7e9      	b.n	21d24 <__lo0bits+0x20>
   21d50:	3001      	adds	r0, #1
   21d52:	600b      	str	r3, [r1, #0]
   21d54:	4770      	bx	lr
   21d56:	2000      	movs	r0, #0
   21d58:	4770      	bx	lr
   21d5a:	085b      	lsrs	r3, r3, #1
   21d5c:	600b      	str	r3, [r1, #0]
   21d5e:	2001      	movs	r0, #1
   21d60:	4770      	bx	lr
   21d62:	bf00      	nop

00021d64 <__i2b>:
   21d64:	b510      	push	{r4, lr}
   21d66:	460c      	mov	r4, r1
   21d68:	2101      	movs	r1, #1
   21d6a:	f7ff ff3b 	bl	21be4 <_Balloc>
   21d6e:	2201      	movs	r2, #1
   21d70:	6144      	str	r4, [r0, #20]
   21d72:	6102      	str	r2, [r0, #16]
   21d74:	bd10      	pop	{r4, pc}
   21d76:	bf00      	nop

00021d78 <__multiply>:
   21d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d7c:	690c      	ldr	r4, [r1, #16]
   21d7e:	6915      	ldr	r5, [r2, #16]
   21d80:	42ac      	cmp	r4, r5
   21d82:	b083      	sub	sp, #12
   21d84:	468b      	mov	fp, r1
   21d86:	4616      	mov	r6, r2
   21d88:	da04      	bge.n	21d94 <__multiply+0x1c>
   21d8a:	4622      	mov	r2, r4
   21d8c:	46b3      	mov	fp, r6
   21d8e:	462c      	mov	r4, r5
   21d90:	460e      	mov	r6, r1
   21d92:	4615      	mov	r5, r2
   21d94:	f8db 3008 	ldr.w	r3, [fp, #8]
   21d98:	f8db 1004 	ldr.w	r1, [fp, #4]
   21d9c:	eb04 0805 	add.w	r8, r4, r5
   21da0:	4598      	cmp	r8, r3
   21da2:	bfc8      	it	gt
   21da4:	3101      	addgt	r1, #1
   21da6:	f7ff ff1d 	bl	21be4 <_Balloc>
   21daa:	f100 0914 	add.w	r9, r0, #20
   21dae:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21db2:	45d1      	cmp	r9, sl
   21db4:	9000      	str	r0, [sp, #0]
   21db6:	d205      	bcs.n	21dc4 <__multiply+0x4c>
   21db8:	464b      	mov	r3, r9
   21dba:	2100      	movs	r1, #0
   21dbc:	f843 1b04 	str.w	r1, [r3], #4
   21dc0:	459a      	cmp	sl, r3
   21dc2:	d8fb      	bhi.n	21dbc <__multiply+0x44>
   21dc4:	f106 0c14 	add.w	ip, r6, #20
   21dc8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21dcc:	f10b 0b14 	add.w	fp, fp, #20
   21dd0:	459c      	cmp	ip, r3
   21dd2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21dd6:	d24c      	bcs.n	21e72 <__multiply+0xfa>
   21dd8:	f8cd a004 	str.w	sl, [sp, #4]
   21ddc:	469a      	mov	sl, r3
   21dde:	f8dc 5000 	ldr.w	r5, [ip]
   21de2:	b2af      	uxth	r7, r5
   21de4:	b1ef      	cbz	r7, 21e22 <__multiply+0xaa>
   21de6:	2100      	movs	r1, #0
   21de8:	464d      	mov	r5, r9
   21dea:	465e      	mov	r6, fp
   21dec:	460c      	mov	r4, r1
   21dee:	f856 2b04 	ldr.w	r2, [r6], #4
   21df2:	6828      	ldr	r0, [r5, #0]
   21df4:	b293      	uxth	r3, r2
   21df6:	b281      	uxth	r1, r0
   21df8:	fb07 1303 	mla	r3, r7, r3, r1
   21dfc:	0c12      	lsrs	r2, r2, #16
   21dfe:	0c01      	lsrs	r1, r0, #16
   21e00:	4423      	add	r3, r4
   21e02:	fb07 1102 	mla	r1, r7, r2, r1
   21e06:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21e0a:	b29b      	uxth	r3, r3
   21e0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21e10:	45b6      	cmp	lr, r6
   21e12:	f845 3b04 	str.w	r3, [r5], #4
   21e16:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21e1a:	d8e8      	bhi.n	21dee <__multiply+0x76>
   21e1c:	602c      	str	r4, [r5, #0]
   21e1e:	f8dc 5000 	ldr.w	r5, [ip]
   21e22:	0c2d      	lsrs	r5, r5, #16
   21e24:	d01d      	beq.n	21e62 <__multiply+0xea>
   21e26:	f8d9 3000 	ldr.w	r3, [r9]
   21e2a:	4648      	mov	r0, r9
   21e2c:	461c      	mov	r4, r3
   21e2e:	4659      	mov	r1, fp
   21e30:	2200      	movs	r2, #0
   21e32:	880e      	ldrh	r6, [r1, #0]
   21e34:	0c24      	lsrs	r4, r4, #16
   21e36:	fb05 4406 	mla	r4, r5, r6, r4
   21e3a:	4422      	add	r2, r4
   21e3c:	b29b      	uxth	r3, r3
   21e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21e42:	f840 3b04 	str.w	r3, [r0], #4
   21e46:	f851 3b04 	ldr.w	r3, [r1], #4
   21e4a:	6804      	ldr	r4, [r0, #0]
   21e4c:	0c1b      	lsrs	r3, r3, #16
   21e4e:	b2a6      	uxth	r6, r4
   21e50:	fb05 6303 	mla	r3, r5, r3, r6
   21e54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21e58:	458e      	cmp	lr, r1
   21e5a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21e5e:	d8e8      	bhi.n	21e32 <__multiply+0xba>
   21e60:	6003      	str	r3, [r0, #0]
   21e62:	f10c 0c04 	add.w	ip, ip, #4
   21e66:	45e2      	cmp	sl, ip
   21e68:	f109 0904 	add.w	r9, r9, #4
   21e6c:	d8b7      	bhi.n	21dde <__multiply+0x66>
   21e6e:	f8dd a004 	ldr.w	sl, [sp, #4]
   21e72:	f1b8 0f00 	cmp.w	r8, #0
   21e76:	dd0b      	ble.n	21e90 <__multiply+0x118>
   21e78:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21e7c:	f1aa 0a04 	sub.w	sl, sl, #4
   21e80:	b11b      	cbz	r3, 21e8a <__multiply+0x112>
   21e82:	e005      	b.n	21e90 <__multiply+0x118>
   21e84:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21e88:	b913      	cbnz	r3, 21e90 <__multiply+0x118>
   21e8a:	f1b8 0801 	subs.w	r8, r8, #1
   21e8e:	d1f9      	bne.n	21e84 <__multiply+0x10c>
   21e90:	9800      	ldr	r0, [sp, #0]
   21e92:	f8c0 8010 	str.w	r8, [r0, #16]
   21e96:	b003      	add	sp, #12
   21e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021e9c <__pow5mult>:
   21e9c:	f012 0303 	ands.w	r3, r2, #3
   21ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ea4:	4614      	mov	r4, r2
   21ea6:	4607      	mov	r7, r0
   21ea8:	d12e      	bne.n	21f08 <__pow5mult+0x6c>
   21eaa:	460d      	mov	r5, r1
   21eac:	10a4      	asrs	r4, r4, #2
   21eae:	d01c      	beq.n	21eea <__pow5mult+0x4e>
   21eb0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21eb2:	b396      	cbz	r6, 21f1a <__pow5mult+0x7e>
   21eb4:	07e3      	lsls	r3, r4, #31
   21eb6:	f04f 0800 	mov.w	r8, #0
   21eba:	d406      	bmi.n	21eca <__pow5mult+0x2e>
   21ebc:	1064      	asrs	r4, r4, #1
   21ebe:	d014      	beq.n	21eea <__pow5mult+0x4e>
   21ec0:	6830      	ldr	r0, [r6, #0]
   21ec2:	b1a8      	cbz	r0, 21ef0 <__pow5mult+0x54>
   21ec4:	4606      	mov	r6, r0
   21ec6:	07e3      	lsls	r3, r4, #31
   21ec8:	d5f8      	bpl.n	21ebc <__pow5mult+0x20>
   21eca:	4632      	mov	r2, r6
   21ecc:	4629      	mov	r1, r5
   21ece:	4638      	mov	r0, r7
   21ed0:	f7ff ff52 	bl	21d78 <__multiply>
   21ed4:	b1b5      	cbz	r5, 21f04 <__pow5mult+0x68>
   21ed6:	686a      	ldr	r2, [r5, #4]
   21ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21eda:	1064      	asrs	r4, r4, #1
   21edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21ee0:	6029      	str	r1, [r5, #0]
   21ee2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21ee6:	4605      	mov	r5, r0
   21ee8:	d1ea      	bne.n	21ec0 <__pow5mult+0x24>
   21eea:	4628      	mov	r0, r5
   21eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ef0:	4632      	mov	r2, r6
   21ef2:	4631      	mov	r1, r6
   21ef4:	4638      	mov	r0, r7
   21ef6:	f7ff ff3f 	bl	21d78 <__multiply>
   21efa:	6030      	str	r0, [r6, #0]
   21efc:	f8c0 8000 	str.w	r8, [r0]
   21f00:	4606      	mov	r6, r0
   21f02:	e7e0      	b.n	21ec6 <__pow5mult+0x2a>
   21f04:	4605      	mov	r5, r0
   21f06:	e7d9      	b.n	21ebc <__pow5mult+0x20>
   21f08:	1e5a      	subs	r2, r3, #1
   21f0a:	4d0b      	ldr	r5, [pc, #44]	; (21f38 <__pow5mult+0x9c>)
   21f0c:	2300      	movs	r3, #0
   21f0e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21f12:	f7ff fe97 	bl	21c44 <__multadd>
   21f16:	4605      	mov	r5, r0
   21f18:	e7c8      	b.n	21eac <__pow5mult+0x10>
   21f1a:	2101      	movs	r1, #1
   21f1c:	4638      	mov	r0, r7
   21f1e:	f7ff fe61 	bl	21be4 <_Balloc>
   21f22:	f240 2171 	movw	r1, #625	; 0x271
   21f26:	2201      	movs	r2, #1
   21f28:	2300      	movs	r3, #0
   21f2a:	6141      	str	r1, [r0, #20]
   21f2c:	6102      	str	r2, [r0, #16]
   21f2e:	4606      	mov	r6, r0
   21f30:	64b8      	str	r0, [r7, #72]	; 0x48
   21f32:	6003      	str	r3, [r0, #0]
   21f34:	e7be      	b.n	21eb4 <__pow5mult+0x18>
   21f36:	bf00      	nop
   21f38:	00024f30 	.word	0x00024f30

00021f3c <__lshift>:
   21f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21f40:	4691      	mov	r9, r2
   21f42:	690a      	ldr	r2, [r1, #16]
   21f44:	688b      	ldr	r3, [r1, #8]
   21f46:	ea4f 1469 	mov.w	r4, r9, asr #5
   21f4a:	eb04 0802 	add.w	r8, r4, r2
   21f4e:	f108 0501 	add.w	r5, r8, #1
   21f52:	429d      	cmp	r5, r3
   21f54:	460e      	mov	r6, r1
   21f56:	4607      	mov	r7, r0
   21f58:	6849      	ldr	r1, [r1, #4]
   21f5a:	dd04      	ble.n	21f66 <__lshift+0x2a>
   21f5c:	005b      	lsls	r3, r3, #1
   21f5e:	429d      	cmp	r5, r3
   21f60:	f101 0101 	add.w	r1, r1, #1
   21f64:	dcfa      	bgt.n	21f5c <__lshift+0x20>
   21f66:	4638      	mov	r0, r7
   21f68:	f7ff fe3c 	bl	21be4 <_Balloc>
   21f6c:	2c00      	cmp	r4, #0
   21f6e:	f100 0314 	add.w	r3, r0, #20
   21f72:	dd06      	ble.n	21f82 <__lshift+0x46>
   21f74:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21f78:	2100      	movs	r1, #0
   21f7a:	f843 1b04 	str.w	r1, [r3], #4
   21f7e:	429a      	cmp	r2, r3
   21f80:	d1fb      	bne.n	21f7a <__lshift+0x3e>
   21f82:	6934      	ldr	r4, [r6, #16]
   21f84:	f106 0114 	add.w	r1, r6, #20
   21f88:	f019 091f 	ands.w	r9, r9, #31
   21f8c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   21f90:	d01d      	beq.n	21fce <__lshift+0x92>
   21f92:	f1c9 0c20 	rsb	ip, r9, #32
   21f96:	2200      	movs	r2, #0
   21f98:	680c      	ldr	r4, [r1, #0]
   21f9a:	fa04 f409 	lsl.w	r4, r4, r9
   21f9e:	4314      	orrs	r4, r2
   21fa0:	f843 4b04 	str.w	r4, [r3], #4
   21fa4:	f851 2b04 	ldr.w	r2, [r1], #4
   21fa8:	458e      	cmp	lr, r1
   21faa:	fa22 f20c 	lsr.w	r2, r2, ip
   21fae:	d8f3      	bhi.n	21f98 <__lshift+0x5c>
   21fb0:	601a      	str	r2, [r3, #0]
   21fb2:	b10a      	cbz	r2, 21fb8 <__lshift+0x7c>
   21fb4:	f108 0502 	add.w	r5, r8, #2
   21fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21fba:	6872      	ldr	r2, [r6, #4]
   21fbc:	3d01      	subs	r5, #1
   21fbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21fc2:	6105      	str	r5, [r0, #16]
   21fc4:	6031      	str	r1, [r6, #0]
   21fc6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   21fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21fce:	3b04      	subs	r3, #4
   21fd0:	f851 2b04 	ldr.w	r2, [r1], #4
   21fd4:	f843 2f04 	str.w	r2, [r3, #4]!
   21fd8:	458e      	cmp	lr, r1
   21fda:	d8f9      	bhi.n	21fd0 <__lshift+0x94>
   21fdc:	e7ec      	b.n	21fb8 <__lshift+0x7c>
   21fde:	bf00      	nop

00021fe0 <__mcmp>:
   21fe0:	b430      	push	{r4, r5}
   21fe2:	690b      	ldr	r3, [r1, #16]
   21fe4:	4605      	mov	r5, r0
   21fe6:	6900      	ldr	r0, [r0, #16]
   21fe8:	1ac0      	subs	r0, r0, r3
   21fea:	d10f      	bne.n	2200c <__mcmp+0x2c>
   21fec:	009b      	lsls	r3, r3, #2
   21fee:	3514      	adds	r5, #20
   21ff0:	3114      	adds	r1, #20
   21ff2:	4419      	add	r1, r3
   21ff4:	442b      	add	r3, r5
   21ff6:	e001      	b.n	21ffc <__mcmp+0x1c>
   21ff8:	429d      	cmp	r5, r3
   21ffa:	d207      	bcs.n	2200c <__mcmp+0x2c>
   21ffc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   22000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22004:	4294      	cmp	r4, r2
   22006:	d0f7      	beq.n	21ff8 <__mcmp+0x18>
   22008:	d302      	bcc.n	22010 <__mcmp+0x30>
   2200a:	2001      	movs	r0, #1
   2200c:	bc30      	pop	{r4, r5}
   2200e:	4770      	bx	lr
   22010:	f04f 30ff 	mov.w	r0, #4294967295
   22014:	e7fa      	b.n	2200c <__mcmp+0x2c>
   22016:	bf00      	nop

00022018 <__mdiff>:
   22018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2201c:	690f      	ldr	r7, [r1, #16]
   2201e:	460e      	mov	r6, r1
   22020:	6911      	ldr	r1, [r2, #16]
   22022:	1a7f      	subs	r7, r7, r1
   22024:	2f00      	cmp	r7, #0
   22026:	4690      	mov	r8, r2
   22028:	d117      	bne.n	2205a <__mdiff+0x42>
   2202a:	0089      	lsls	r1, r1, #2
   2202c:	f106 0514 	add.w	r5, r6, #20
   22030:	f102 0e14 	add.w	lr, r2, #20
   22034:	186b      	adds	r3, r5, r1
   22036:	4471      	add	r1, lr
   22038:	e001      	b.n	2203e <__mdiff+0x26>
   2203a:	429d      	cmp	r5, r3
   2203c:	d25c      	bcs.n	220f8 <__mdiff+0xe0>
   2203e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22042:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   22046:	42a2      	cmp	r2, r4
   22048:	d0f7      	beq.n	2203a <__mdiff+0x22>
   2204a:	d25e      	bcs.n	2210a <__mdiff+0xf2>
   2204c:	4633      	mov	r3, r6
   2204e:	462c      	mov	r4, r5
   22050:	4646      	mov	r6, r8
   22052:	4675      	mov	r5, lr
   22054:	4698      	mov	r8, r3
   22056:	2701      	movs	r7, #1
   22058:	e005      	b.n	22066 <__mdiff+0x4e>
   2205a:	db58      	blt.n	2210e <__mdiff+0xf6>
   2205c:	f106 0514 	add.w	r5, r6, #20
   22060:	f108 0414 	add.w	r4, r8, #20
   22064:	2700      	movs	r7, #0
   22066:	6871      	ldr	r1, [r6, #4]
   22068:	f7ff fdbc 	bl	21be4 <_Balloc>
   2206c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22070:	6936      	ldr	r6, [r6, #16]
   22072:	60c7      	str	r7, [r0, #12]
   22074:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   22078:	46a6      	mov	lr, r4
   2207a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2207e:	f100 0414 	add.w	r4, r0, #20
   22082:	2300      	movs	r3, #0
   22084:	f85e 1b04 	ldr.w	r1, [lr], #4
   22088:	f855 8b04 	ldr.w	r8, [r5], #4
   2208c:	b28a      	uxth	r2, r1
   2208e:	fa13 f388 	uxtah	r3, r3, r8
   22092:	0c09      	lsrs	r1, r1, #16
   22094:	1a9a      	subs	r2, r3, r2
   22096:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2209a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2209e:	b292      	uxth	r2, r2
   220a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   220a4:	45f4      	cmp	ip, lr
   220a6:	f844 2b04 	str.w	r2, [r4], #4
   220aa:	ea4f 4323 	mov.w	r3, r3, asr #16
   220ae:	d8e9      	bhi.n	22084 <__mdiff+0x6c>
   220b0:	42af      	cmp	r7, r5
   220b2:	d917      	bls.n	220e4 <__mdiff+0xcc>
   220b4:	46a4      	mov	ip, r4
   220b6:	46ae      	mov	lr, r5
   220b8:	f85e 2b04 	ldr.w	r2, [lr], #4
   220bc:	fa13 f382 	uxtah	r3, r3, r2
   220c0:	1419      	asrs	r1, r3, #16
   220c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   220c6:	b29b      	uxth	r3, r3
   220c8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   220cc:	4577      	cmp	r7, lr
   220ce:	f84c 2b04 	str.w	r2, [ip], #4
   220d2:	ea4f 4321 	mov.w	r3, r1, asr #16
   220d6:	d8ef      	bhi.n	220b8 <__mdiff+0xa0>
   220d8:	43ed      	mvns	r5, r5
   220da:	442f      	add	r7, r5
   220dc:	f027 0703 	bic.w	r7, r7, #3
   220e0:	3704      	adds	r7, #4
   220e2:	443c      	add	r4, r7
   220e4:	3c04      	subs	r4, #4
   220e6:	b922      	cbnz	r2, 220f2 <__mdiff+0xda>
   220e8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   220ec:	3e01      	subs	r6, #1
   220ee:	2b00      	cmp	r3, #0
   220f0:	d0fa      	beq.n	220e8 <__mdiff+0xd0>
   220f2:	6106      	str	r6, [r0, #16]
   220f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220f8:	2100      	movs	r1, #0
   220fa:	f7ff fd73 	bl	21be4 <_Balloc>
   220fe:	2201      	movs	r2, #1
   22100:	2300      	movs	r3, #0
   22102:	6102      	str	r2, [r0, #16]
   22104:	6143      	str	r3, [r0, #20]
   22106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2210a:	4674      	mov	r4, lr
   2210c:	e7ab      	b.n	22066 <__mdiff+0x4e>
   2210e:	4633      	mov	r3, r6
   22110:	f106 0414 	add.w	r4, r6, #20
   22114:	f102 0514 	add.w	r5, r2, #20
   22118:	4616      	mov	r6, r2
   2211a:	2701      	movs	r7, #1
   2211c:	4698      	mov	r8, r3
   2211e:	e7a2      	b.n	22066 <__mdiff+0x4e>

00022120 <__d2b>:
   22120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22124:	ec57 6b10 	vmov	r6, r7, d0
   22128:	b083      	sub	sp, #12
   2212a:	4688      	mov	r8, r1
   2212c:	2101      	movs	r1, #1
   2212e:	463c      	mov	r4, r7
   22130:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22134:	4617      	mov	r7, r2
   22136:	f7ff fd55 	bl	21be4 <_Balloc>
   2213a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2213e:	4681      	mov	r9, r0
   22140:	b10d      	cbz	r5, 22146 <__d2b+0x26>
   22142:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22146:	9401      	str	r4, [sp, #4]
   22148:	b31e      	cbz	r6, 22192 <__d2b+0x72>
   2214a:	a802      	add	r0, sp, #8
   2214c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22150:	f7ff fdd8 	bl	21d04 <__lo0bits>
   22154:	2800      	cmp	r0, #0
   22156:	d134      	bne.n	221c2 <__d2b+0xa2>
   22158:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2215c:	f8c9 2014 	str.w	r2, [r9, #20]
   22160:	2b00      	cmp	r3, #0
   22162:	bf0c      	ite	eq
   22164:	2101      	moveq	r1, #1
   22166:	2102      	movne	r1, #2
   22168:	f8c9 3018 	str.w	r3, [r9, #24]
   2216c:	f8c9 1010 	str.w	r1, [r9, #16]
   22170:	b9dd      	cbnz	r5, 221aa <__d2b+0x8a>
   22172:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   22176:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2217a:	f8c8 0000 	str.w	r0, [r8]
   2217e:	6918      	ldr	r0, [r3, #16]
   22180:	f7ff fda0 	bl	21cc4 <__hi0bits>
   22184:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22188:	6038      	str	r0, [r7, #0]
   2218a:	4648      	mov	r0, r9
   2218c:	b003      	add	sp, #12
   2218e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22192:	a801      	add	r0, sp, #4
   22194:	f7ff fdb6 	bl	21d04 <__lo0bits>
   22198:	9b01      	ldr	r3, [sp, #4]
   2219a:	f8c9 3014 	str.w	r3, [r9, #20]
   2219e:	2101      	movs	r1, #1
   221a0:	3020      	adds	r0, #32
   221a2:	f8c9 1010 	str.w	r1, [r9, #16]
   221a6:	2d00      	cmp	r5, #0
   221a8:	d0e3      	beq.n	22172 <__d2b+0x52>
   221aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   221ae:	4405      	add	r5, r0
   221b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   221b4:	f8c8 5000 	str.w	r5, [r8]
   221b8:	6038      	str	r0, [r7, #0]
   221ba:	4648      	mov	r0, r9
   221bc:	b003      	add	sp, #12
   221be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   221c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   221c6:	f1c0 0220 	rsb	r2, r0, #32
   221ca:	fa03 f202 	lsl.w	r2, r3, r2
   221ce:	430a      	orrs	r2, r1
   221d0:	40c3      	lsrs	r3, r0
   221d2:	9301      	str	r3, [sp, #4]
   221d4:	f8c9 2014 	str.w	r2, [r9, #20]
   221d8:	e7c2      	b.n	22160 <__d2b+0x40>
   221da:	bf00      	nop

000221dc <__sread>:
   221dc:	b510      	push	{r4, lr}
   221de:	460c      	mov	r4, r1
   221e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   221e4:	f000 f9fe 	bl	225e4 <_read_r>
   221e8:	2800      	cmp	r0, #0
   221ea:	db03      	blt.n	221f4 <__sread+0x18>
   221ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   221ee:	4403      	add	r3, r0
   221f0:	6523      	str	r3, [r4, #80]	; 0x50
   221f2:	bd10      	pop	{r4, pc}
   221f4:	89a3      	ldrh	r3, [r4, #12]
   221f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   221fa:	81a3      	strh	r3, [r4, #12]
   221fc:	bd10      	pop	{r4, pc}
   221fe:	bf00      	nop

00022200 <__swrite>:
   22200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22204:	4616      	mov	r6, r2
   22206:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2220a:	461f      	mov	r7, r3
   2220c:	05d3      	lsls	r3, r2, #23
   2220e:	460c      	mov	r4, r1
   22210:	4605      	mov	r5, r0
   22212:	d507      	bpl.n	22224 <__swrite+0x24>
   22214:	2200      	movs	r2, #0
   22216:	2302      	movs	r3, #2
   22218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2221c:	f000 f9cc 	bl	225b8 <_lseek_r>
   22220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2222c:	81a2      	strh	r2, [r4, #12]
   2222e:	463b      	mov	r3, r7
   22230:	4632      	mov	r2, r6
   22232:	4628      	mov	r0, r5
   22234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22238:	f7fe b960 	b.w	204fc <_write_r>

0002223c <__sseek>:
   2223c:	b510      	push	{r4, lr}
   2223e:	460c      	mov	r4, r1
   22240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22244:	f000 f9b8 	bl	225b8 <_lseek_r>
   22248:	89a3      	ldrh	r3, [r4, #12]
   2224a:	1c42      	adds	r2, r0, #1
   2224c:	bf0e      	itee	eq
   2224e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22256:	6520      	strne	r0, [r4, #80]	; 0x50
   22258:	81a3      	strh	r3, [r4, #12]
   2225a:	bd10      	pop	{r4, pc}

0002225c <__sclose>:
   2225c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22260:	f000 b910 	b.w	22484 <_close_r>

00022264 <__ssprint_r>:
   22264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22268:	6893      	ldr	r3, [r2, #8]
   2226a:	b083      	sub	sp, #12
   2226c:	4690      	mov	r8, r2
   2226e:	2b00      	cmp	r3, #0
   22270:	d070      	beq.n	22354 <__ssprint_r+0xf0>
   22272:	4682      	mov	sl, r0
   22274:	460c      	mov	r4, r1
   22276:	6817      	ldr	r7, [r2, #0]
   22278:	688d      	ldr	r5, [r1, #8]
   2227a:	6808      	ldr	r0, [r1, #0]
   2227c:	e042      	b.n	22304 <__ssprint_r+0xa0>
   2227e:	89a3      	ldrh	r3, [r4, #12]
   22280:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22284:	d02e      	beq.n	222e4 <__ssprint_r+0x80>
   22286:	6965      	ldr	r5, [r4, #20]
   22288:	6921      	ldr	r1, [r4, #16]
   2228a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2228e:	eba0 0b01 	sub.w	fp, r0, r1
   22292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22296:	f10b 0001 	add.w	r0, fp, #1
   2229a:	106d      	asrs	r5, r5, #1
   2229c:	4430      	add	r0, r6
   2229e:	42a8      	cmp	r0, r5
   222a0:	462a      	mov	r2, r5
   222a2:	bf84      	itt	hi
   222a4:	4605      	movhi	r5, r0
   222a6:	462a      	movhi	r2, r5
   222a8:	055b      	lsls	r3, r3, #21
   222aa:	d538      	bpl.n	2231e <__ssprint_r+0xba>
   222ac:	4611      	mov	r1, r2
   222ae:	4650      	mov	r0, sl
   222b0:	f7fb fcd8 	bl	1dc64 <_malloc_r>
   222b4:	2800      	cmp	r0, #0
   222b6:	d03c      	beq.n	22332 <__ssprint_r+0xce>
   222b8:	465a      	mov	r2, fp
   222ba:	6921      	ldr	r1, [r4, #16]
   222bc:	9001      	str	r0, [sp, #4]
   222be:	f7fc f817 	bl	1e2f0 <memcpy>
   222c2:	89a2      	ldrh	r2, [r4, #12]
   222c4:	9b01      	ldr	r3, [sp, #4]
   222c6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   222ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   222ce:	81a2      	strh	r2, [r4, #12]
   222d0:	eba5 020b 	sub.w	r2, r5, fp
   222d4:	eb03 000b 	add.w	r0, r3, fp
   222d8:	6165      	str	r5, [r4, #20]
   222da:	6123      	str	r3, [r4, #16]
   222dc:	6020      	str	r0, [r4, #0]
   222de:	60a2      	str	r2, [r4, #8]
   222e0:	4635      	mov	r5, r6
   222e2:	46b3      	mov	fp, r6
   222e4:	465a      	mov	r2, fp
   222e6:	4649      	mov	r1, r9
   222e8:	f7fc f89c 	bl	1e424 <memmove>
   222ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   222f0:	68a2      	ldr	r2, [r4, #8]
   222f2:	6820      	ldr	r0, [r4, #0]
   222f4:	1b55      	subs	r5, r2, r5
   222f6:	4458      	add	r0, fp
   222f8:	1b9e      	subs	r6, r3, r6
   222fa:	60a5      	str	r5, [r4, #8]
   222fc:	6020      	str	r0, [r4, #0]
   222fe:	f8c8 6008 	str.w	r6, [r8, #8]
   22302:	b33e      	cbz	r6, 22354 <__ssprint_r+0xf0>
   22304:	687e      	ldr	r6, [r7, #4]
   22306:	463b      	mov	r3, r7
   22308:	3708      	adds	r7, #8
   2230a:	2e00      	cmp	r6, #0
   2230c:	d0fa      	beq.n	22304 <__ssprint_r+0xa0>
   2230e:	42ae      	cmp	r6, r5
   22310:	f8d3 9000 	ldr.w	r9, [r3]
   22314:	46ab      	mov	fp, r5
   22316:	d2b2      	bcs.n	2227e <__ssprint_r+0x1a>
   22318:	4635      	mov	r5, r6
   2231a:	46b3      	mov	fp, r6
   2231c:	e7e2      	b.n	222e4 <__ssprint_r+0x80>
   2231e:	4650      	mov	r0, sl
   22320:	f7fc f97e 	bl	1e620 <_realloc_r>
   22324:	4603      	mov	r3, r0
   22326:	2800      	cmp	r0, #0
   22328:	d1d2      	bne.n	222d0 <__ssprint_r+0x6c>
   2232a:	6921      	ldr	r1, [r4, #16]
   2232c:	4650      	mov	r0, sl
   2232e:	f7ff fac3 	bl	218b8 <_free_r>
   22332:	230c      	movs	r3, #12
   22334:	f8ca 3000 	str.w	r3, [sl]
   22338:	89a3      	ldrh	r3, [r4, #12]
   2233a:	2200      	movs	r2, #0
   2233c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22340:	f04f 30ff 	mov.w	r0, #4294967295
   22344:	81a3      	strh	r3, [r4, #12]
   22346:	f8c8 2008 	str.w	r2, [r8, #8]
   2234a:	f8c8 2004 	str.w	r2, [r8, #4]
   2234e:	b003      	add	sp, #12
   22350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22354:	2000      	movs	r0, #0
   22356:	f8c8 0004 	str.w	r0, [r8, #4]
   2235a:	b003      	add	sp, #12
   2235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022360 <__register_exitproc>:
   22360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22364:	4d2c      	ldr	r5, [pc, #176]	; (22418 <__register_exitproc+0xb8>)
   22366:	4606      	mov	r6, r0
   22368:	6828      	ldr	r0, [r5, #0]
   2236a:	4698      	mov	r8, r3
   2236c:	460f      	mov	r7, r1
   2236e:	4691      	mov	r9, r2
   22370:	f7fb fc64 	bl	1dc3c <__retarget_lock_acquire_recursive>
   22374:	4b29      	ldr	r3, [pc, #164]	; (2241c <__register_exitproc+0xbc>)
   22376:	681c      	ldr	r4, [r3, #0]
   22378:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2237c:	2b00      	cmp	r3, #0
   2237e:	d03e      	beq.n	223fe <__register_exitproc+0x9e>
   22380:	685a      	ldr	r2, [r3, #4]
   22382:	2a1f      	cmp	r2, #31
   22384:	dc1c      	bgt.n	223c0 <__register_exitproc+0x60>
   22386:	f102 0e01 	add.w	lr, r2, #1
   2238a:	b176      	cbz	r6, 223aa <__register_exitproc+0x4a>
   2238c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22390:	2401      	movs	r4, #1
   22392:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22396:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2239a:	4094      	lsls	r4, r2
   2239c:	4320      	orrs	r0, r4
   2239e:	2e02      	cmp	r6, #2
   223a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   223a4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   223a8:	d023      	beq.n	223f2 <__register_exitproc+0x92>
   223aa:	3202      	adds	r2, #2
   223ac:	f8c3 e004 	str.w	lr, [r3, #4]
   223b0:	6828      	ldr	r0, [r5, #0]
   223b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   223b6:	f7fb fc43 	bl	1dc40 <__retarget_lock_release_recursive>
   223ba:	2000      	movs	r0, #0
   223bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   223c0:	4b17      	ldr	r3, [pc, #92]	; (22420 <__register_exitproc+0xc0>)
   223c2:	b30b      	cbz	r3, 22408 <__register_exitproc+0xa8>
   223c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   223c8:	f7fb fc3c 	bl	1dc44 <malloc>
   223cc:	4603      	mov	r3, r0
   223ce:	b1d8      	cbz	r0, 22408 <__register_exitproc+0xa8>
   223d0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   223d4:	6002      	str	r2, [r0, #0]
   223d6:	2100      	movs	r1, #0
   223d8:	6041      	str	r1, [r0, #4]
   223da:	460a      	mov	r2, r1
   223dc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   223e0:	f04f 0e01 	mov.w	lr, #1
   223e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   223e8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   223ec:	2e00      	cmp	r6, #0
   223ee:	d0dc      	beq.n	223aa <__register_exitproc+0x4a>
   223f0:	e7cc      	b.n	2238c <__register_exitproc+0x2c>
   223f2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   223f6:	430c      	orrs	r4, r1
   223f8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   223fc:	e7d5      	b.n	223aa <__register_exitproc+0x4a>
   223fe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22402:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22406:	e7bb      	b.n	22380 <__register_exitproc+0x20>
   22408:	6828      	ldr	r0, [r5, #0]
   2240a:	f7fb fc19 	bl	1dc40 <__retarget_lock_release_recursive>
   2240e:	f04f 30ff 	mov.w	r0, #4294967295
   22412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22416:	bf00      	nop
   22418:	20000aa4 	.word	0x20000aa4
   2241c:	00024c90 	.word	0x00024c90
   22420:	0001dc45 	.word	0x0001dc45

00022424 <_calloc_r>:
   22424:	b510      	push	{r4, lr}
   22426:	fb02 f101 	mul.w	r1, r2, r1
   2242a:	f7fb fc1b 	bl	1dc64 <_malloc_r>
   2242e:	4604      	mov	r4, r0
   22430:	b1d8      	cbz	r0, 2246a <_calloc_r+0x46>
   22432:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22436:	f022 0203 	bic.w	r2, r2, #3
   2243a:	3a04      	subs	r2, #4
   2243c:	2a24      	cmp	r2, #36	; 0x24
   2243e:	d818      	bhi.n	22472 <_calloc_r+0x4e>
   22440:	2a13      	cmp	r2, #19
   22442:	d914      	bls.n	2246e <_calloc_r+0x4a>
   22444:	2300      	movs	r3, #0
   22446:	2a1b      	cmp	r2, #27
   22448:	6003      	str	r3, [r0, #0]
   2244a:	6043      	str	r3, [r0, #4]
   2244c:	d916      	bls.n	2247c <_calloc_r+0x58>
   2244e:	2a24      	cmp	r2, #36	; 0x24
   22450:	6083      	str	r3, [r0, #8]
   22452:	60c3      	str	r3, [r0, #12]
   22454:	bf11      	iteee	ne
   22456:	f100 0210 	addne.w	r2, r0, #16
   2245a:	6103      	streq	r3, [r0, #16]
   2245c:	6143      	streq	r3, [r0, #20]
   2245e:	f100 0218 	addeq.w	r2, r0, #24
   22462:	2300      	movs	r3, #0
   22464:	6013      	str	r3, [r2, #0]
   22466:	6053      	str	r3, [r2, #4]
   22468:	6093      	str	r3, [r2, #8]
   2246a:	4620      	mov	r0, r4
   2246c:	bd10      	pop	{r4, pc}
   2246e:	4602      	mov	r2, r0
   22470:	e7f7      	b.n	22462 <_calloc_r+0x3e>
   22472:	2100      	movs	r1, #0
   22474:	f7fc f83a 	bl	1e4ec <memset>
   22478:	4620      	mov	r0, r4
   2247a:	bd10      	pop	{r4, pc}
   2247c:	f100 0208 	add.w	r2, r0, #8
   22480:	e7ef      	b.n	22462 <_calloc_r+0x3e>
   22482:	bf00      	nop

00022484 <_close_r>:
   22484:	b538      	push	{r3, r4, r5, lr}
   22486:	4c07      	ldr	r4, [pc, #28]	; (224a4 <_close_r+0x20>)
   22488:	2300      	movs	r3, #0
   2248a:	4605      	mov	r5, r0
   2248c:	4608      	mov	r0, r1
   2248e:	6023      	str	r3, [r4, #0]
   22490:	f000 f9ac 	bl	227ec <_close>
   22494:	1c43      	adds	r3, r0, #1
   22496:	d000      	beq.n	2249a <_close_r+0x16>
   22498:	bd38      	pop	{r3, r4, r5, pc}
   2249a:	6823      	ldr	r3, [r4, #0]
   2249c:	2b00      	cmp	r3, #0
   2249e:	d0fb      	beq.n	22498 <_close_r+0x14>
   224a0:	602b      	str	r3, [r5, #0]
   224a2:	bd38      	pop	{r3, r4, r5, pc}
   224a4:	2000239c 	.word	0x2000239c

000224a8 <_fclose_r>:
   224a8:	b570      	push	{r4, r5, r6, lr}
   224aa:	b159      	cbz	r1, 224c4 <_fclose_r+0x1c>
   224ac:	4605      	mov	r5, r0
   224ae:	460c      	mov	r4, r1
   224b0:	b110      	cbz	r0, 224b8 <_fclose_r+0x10>
   224b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   224b4:	2b00      	cmp	r3, #0
   224b6:	d03c      	beq.n	22532 <_fclose_r+0x8a>
   224b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   224ba:	07d8      	lsls	r0, r3, #31
   224bc:	d505      	bpl.n	224ca <_fclose_r+0x22>
   224be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   224c2:	b92b      	cbnz	r3, 224d0 <_fclose_r+0x28>
   224c4:	2600      	movs	r6, #0
   224c6:	4630      	mov	r0, r6
   224c8:	bd70      	pop	{r4, r5, r6, pc}
   224ca:	89a3      	ldrh	r3, [r4, #12]
   224cc:	0599      	lsls	r1, r3, #22
   224ce:	d53c      	bpl.n	2254a <_fclose_r+0xa2>
   224d0:	4621      	mov	r1, r4
   224d2:	4628      	mov	r0, r5
   224d4:	f7ff f856 	bl	21584 <__sflush_r>
   224d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   224da:	4606      	mov	r6, r0
   224dc:	b133      	cbz	r3, 224ec <_fclose_r+0x44>
   224de:	69e1      	ldr	r1, [r4, #28]
   224e0:	4628      	mov	r0, r5
   224e2:	4798      	blx	r3
   224e4:	2800      	cmp	r0, #0
   224e6:	bfb8      	it	lt
   224e8:	f04f 36ff 	movlt.w	r6, #4294967295
   224ec:	89a3      	ldrh	r3, [r4, #12]
   224ee:	061a      	lsls	r2, r3, #24
   224f0:	d422      	bmi.n	22538 <_fclose_r+0x90>
   224f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   224f4:	b141      	cbz	r1, 22508 <_fclose_r+0x60>
   224f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   224fa:	4299      	cmp	r1, r3
   224fc:	d002      	beq.n	22504 <_fclose_r+0x5c>
   224fe:	4628      	mov	r0, r5
   22500:	f7ff f9da 	bl	218b8 <_free_r>
   22504:	2300      	movs	r3, #0
   22506:	6323      	str	r3, [r4, #48]	; 0x30
   22508:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2250a:	b121      	cbz	r1, 22516 <_fclose_r+0x6e>
   2250c:	4628      	mov	r0, r5
   2250e:	f7ff f9d3 	bl	218b8 <_free_r>
   22512:	2300      	movs	r3, #0
   22514:	6463      	str	r3, [r4, #68]	; 0x44
   22516:	f7ff f959 	bl	217cc <__sfp_lock_acquire>
   2251a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2251c:	2200      	movs	r2, #0
   2251e:	07db      	lsls	r3, r3, #31
   22520:	81a2      	strh	r2, [r4, #12]
   22522:	d50e      	bpl.n	22542 <_fclose_r+0x9a>
   22524:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22526:	f7fb fb87 	bl	1dc38 <__retarget_lock_close_recursive>
   2252a:	f7ff f955 	bl	217d8 <__sfp_lock_release>
   2252e:	4630      	mov	r0, r6
   22530:	bd70      	pop	{r4, r5, r6, pc}
   22532:	f7ff f91f 	bl	21774 <__sinit>
   22536:	e7bf      	b.n	224b8 <_fclose_r+0x10>
   22538:	6921      	ldr	r1, [r4, #16]
   2253a:	4628      	mov	r0, r5
   2253c:	f7ff f9bc 	bl	218b8 <_free_r>
   22540:	e7d7      	b.n	224f2 <_fclose_r+0x4a>
   22542:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22544:	f7fb fb7c 	bl	1dc40 <__retarget_lock_release_recursive>
   22548:	e7ec      	b.n	22524 <_fclose_r+0x7c>
   2254a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2254c:	f7fb fb76 	bl	1dc3c <__retarget_lock_acquire_recursive>
   22550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22554:	2b00      	cmp	r3, #0
   22556:	d1bb      	bne.n	224d0 <_fclose_r+0x28>
   22558:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2255a:	f016 0601 	ands.w	r6, r6, #1
   2255e:	d1b1      	bne.n	224c4 <_fclose_r+0x1c>
   22560:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22562:	f7fb fb6d 	bl	1dc40 <__retarget_lock_release_recursive>
   22566:	4630      	mov	r0, r6
   22568:	bd70      	pop	{r4, r5, r6, pc}
   2256a:	bf00      	nop

0002256c <_fstat_r>:
   2256c:	b538      	push	{r3, r4, r5, lr}
   2256e:	460b      	mov	r3, r1
   22570:	4c07      	ldr	r4, [pc, #28]	; (22590 <_fstat_r+0x24>)
   22572:	4605      	mov	r5, r0
   22574:	4611      	mov	r1, r2
   22576:	4618      	mov	r0, r3
   22578:	2300      	movs	r3, #0
   2257a:	6023      	str	r3, [r4, #0]
   2257c:	f000 f9b4 	bl	228e8 <_fstat>
   22580:	1c43      	adds	r3, r0, #1
   22582:	d000      	beq.n	22586 <_fstat_r+0x1a>
   22584:	bd38      	pop	{r3, r4, r5, pc}
   22586:	6823      	ldr	r3, [r4, #0]
   22588:	2b00      	cmp	r3, #0
   2258a:	d0fb      	beq.n	22584 <_fstat_r+0x18>
   2258c:	602b      	str	r3, [r5, #0]
   2258e:	bd38      	pop	{r3, r4, r5, pc}
   22590:	2000239c 	.word	0x2000239c

00022594 <_isatty_r>:
   22594:	b538      	push	{r3, r4, r5, lr}
   22596:	4c07      	ldr	r4, [pc, #28]	; (225b4 <_isatty_r+0x20>)
   22598:	2300      	movs	r3, #0
   2259a:	4605      	mov	r5, r0
   2259c:	4608      	mov	r0, r1
   2259e:	6023      	str	r3, [r4, #0]
   225a0:	f000 f9b0 	bl	22904 <_isatty>
   225a4:	1c43      	adds	r3, r0, #1
   225a6:	d000      	beq.n	225aa <_isatty_r+0x16>
   225a8:	bd38      	pop	{r3, r4, r5, pc}
   225aa:	6823      	ldr	r3, [r4, #0]
   225ac:	2b00      	cmp	r3, #0
   225ae:	d0fb      	beq.n	225a8 <_isatty_r+0x14>
   225b0:	602b      	str	r3, [r5, #0]
   225b2:	bd38      	pop	{r3, r4, r5, pc}
   225b4:	2000239c 	.word	0x2000239c

000225b8 <_lseek_r>:
   225b8:	b570      	push	{r4, r5, r6, lr}
   225ba:	460d      	mov	r5, r1
   225bc:	4c08      	ldr	r4, [pc, #32]	; (225e0 <_lseek_r+0x28>)
   225be:	4611      	mov	r1, r2
   225c0:	4606      	mov	r6, r0
   225c2:	461a      	mov	r2, r3
   225c4:	4628      	mov	r0, r5
   225c6:	2300      	movs	r3, #0
   225c8:	6023      	str	r3, [r4, #0]
   225ca:	f000 f8d3 	bl	22774 <_lseek>
   225ce:	1c43      	adds	r3, r0, #1
   225d0:	d000      	beq.n	225d4 <_lseek_r+0x1c>
   225d2:	bd70      	pop	{r4, r5, r6, pc}
   225d4:	6823      	ldr	r3, [r4, #0]
   225d6:	2b00      	cmp	r3, #0
   225d8:	d0fb      	beq.n	225d2 <_lseek_r+0x1a>
   225da:	6033      	str	r3, [r6, #0]
   225dc:	bd70      	pop	{r4, r5, r6, pc}
   225de:	bf00      	nop
   225e0:	2000239c 	.word	0x2000239c

000225e4 <_read_r>:
   225e4:	b570      	push	{r4, r5, r6, lr}
   225e6:	460d      	mov	r5, r1
   225e8:	4c08      	ldr	r4, [pc, #32]	; (2260c <_read_r+0x28>)
   225ea:	4611      	mov	r1, r2
   225ec:	4606      	mov	r6, r0
   225ee:	461a      	mov	r2, r3
   225f0:	4628      	mov	r0, r5
   225f2:	2300      	movs	r3, #0
   225f4:	6023      	str	r3, [r4, #0]
   225f6:	f000 f84b 	bl	22690 <_read>
   225fa:	1c43      	adds	r3, r0, #1
   225fc:	d000      	beq.n	22600 <_read_r+0x1c>
   225fe:	bd70      	pop	{r4, r5, r6, pc}
   22600:	6823      	ldr	r3, [r4, #0]
   22602:	2b00      	cmp	r3, #0
   22604:	d0fb      	beq.n	225fe <_read_r+0x1a>
   22606:	6033      	str	r3, [r6, #0]
   22608:	bd70      	pop	{r4, r5, r6, pc}
   2260a:	bf00      	nop
   2260c:	2000239c 	.word	0x2000239c

00022610 <__aeabi_dcmpun>:
   22610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22618:	d102      	bne.n	22620 <__aeabi_dcmpun+0x10>
   2261a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2261e:	d10a      	bne.n	22636 <__aeabi_dcmpun+0x26>
   22620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   22624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22628:	d102      	bne.n	22630 <__aeabi_dcmpun+0x20>
   2262a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2262e:	d102      	bne.n	22636 <__aeabi_dcmpun+0x26>
   22630:	f04f 0000 	mov.w	r0, #0
   22634:	4770      	bx	lr
   22636:	f04f 0001 	mov.w	r0, #1
   2263a:	4770      	bx	lr

0002263c <findslot>:
   2263c:	4b0b      	ldr	r3, [pc, #44]	; (2266c <findslot+0x30>)
   2263e:	681b      	ldr	r3, [r3, #0]
   22640:	b510      	push	{r4, lr}
   22642:	4604      	mov	r4, r0
   22644:	b10b      	cbz	r3, 2264a <findslot+0xe>
   22646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22648:	b14a      	cbz	r2, 2265e <findslot+0x22>
   2264a:	2c13      	cmp	r4, #19
   2264c:	d80c      	bhi.n	22668 <findslot+0x2c>
   2264e:	4808      	ldr	r0, [pc, #32]	; (22670 <findslot+0x34>)
   22650:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22654:	3301      	adds	r3, #1
   22656:	d007      	beq.n	22668 <findslot+0x2c>
   22658:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2265c:	bd10      	pop	{r4, pc}
   2265e:	4618      	mov	r0, r3
   22660:	f7ff f888 	bl	21774 <__sinit>
   22664:	2c13      	cmp	r4, #19
   22666:	d9f2      	bls.n	2264e <findslot+0x12>
   22668:	2000      	movs	r0, #0
   2266a:	bd10      	pop	{r4, pc}
   2266c:	200000f8 	.word	0x200000f8
   22670:	200022d8 	.word	0x200022d8

00022674 <checkerror.part.0>:
   22674:	b570      	push	{r4, r5, r6, lr}
   22676:	f7fb f859 	bl	1d72c <__errno>
   2267a:	2413      	movs	r4, #19
   2267c:	4605      	mov	r5, r0
   2267e:	2600      	movs	r6, #0
   22680:	4620      	mov	r0, r4
   22682:	4631      	mov	r1, r6
   22684:	beab      	bkpt	0x00ab
   22686:	4604      	mov	r4, r0
   22688:	f04f 30ff 	mov.w	r0, #4294967295
   2268c:	602c      	str	r4, [r5, #0]
   2268e:	bd70      	pop	{r4, r5, r6, pc}

00022690 <_read>:
   22690:	b5f0      	push	{r4, r5, r6, r7, lr}
   22692:	b085      	sub	sp, #20
   22694:	460c      	mov	r4, r1
   22696:	4616      	mov	r6, r2
   22698:	f7ff ffd0 	bl	2263c <findslot>
   2269c:	b1c8      	cbz	r0, 226d2 <_read+0x42>
   2269e:	6803      	ldr	r3, [r0, #0]
   226a0:	9301      	str	r3, [sp, #4]
   226a2:	9402      	str	r4, [sp, #8]
   226a4:	4605      	mov	r5, r0
   226a6:	9603      	str	r6, [sp, #12]
   226a8:	2406      	movs	r4, #6
   226aa:	af01      	add	r7, sp, #4
   226ac:	4620      	mov	r0, r4
   226ae:	4639      	mov	r1, r7
   226b0:	beab      	bkpt	0x00ab
   226b2:	4604      	mov	r4, r0
   226b4:	1c62      	adds	r2, r4, #1
   226b6:	4620      	mov	r0, r4
   226b8:	d005      	beq.n	226c6 <_read+0x36>
   226ba:	686b      	ldr	r3, [r5, #4]
   226bc:	1a30      	subs	r0, r6, r0
   226be:	4403      	add	r3, r0
   226c0:	606b      	str	r3, [r5, #4]
   226c2:	b005      	add	sp, #20
   226c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226c6:	f7ff ffd5 	bl	22674 <checkerror.part.0>
   226ca:	1c43      	adds	r3, r0, #1
   226cc:	d1f5      	bne.n	226ba <_read+0x2a>
   226ce:	b005      	add	sp, #20
   226d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226d2:	f7fb f82b 	bl	1d72c <__errno>
   226d6:	2309      	movs	r3, #9
   226d8:	6003      	str	r3, [r0, #0]
   226da:	f04f 30ff 	mov.w	r0, #4294967295
   226de:	e7f0      	b.n	226c2 <_read+0x32>

000226e0 <_swilseek>:
   226e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   226e2:	b083      	sub	sp, #12
   226e4:	460d      	mov	r5, r1
   226e6:	4614      	mov	r4, r2
   226e8:	f7ff ffa8 	bl	2263c <findslot>
   226ec:	2800      	cmp	r0, #0
   226ee:	d03a      	beq.n	22766 <_swilseek+0x86>
   226f0:	2c02      	cmp	r4, #2
   226f2:	d825      	bhi.n	22740 <_swilseek+0x60>
   226f4:	2c01      	cmp	r4, #1
   226f6:	4606      	mov	r6, r0
   226f8:	d01f      	beq.n	2273a <_swilseek+0x5a>
   226fa:	2c02      	cmp	r4, #2
   226fc:	d010      	beq.n	22720 <_swilseek+0x40>
   226fe:	466f      	mov	r7, sp
   22700:	6833      	ldr	r3, [r6, #0]
   22702:	240a      	movs	r4, #10
   22704:	e88d 0028 	stmia.w	sp, {r3, r5}
   22708:	4620      	mov	r0, r4
   2270a:	4639      	mov	r1, r7
   2270c:	beab      	bkpt	0x00ab
   2270e:	4604      	mov	r4, r0
   22710:	1c63      	adds	r3, r4, #1
   22712:	d01c      	beq.n	2274e <_swilseek+0x6e>
   22714:	2c00      	cmp	r4, #0
   22716:	db23      	blt.n	22760 <_swilseek+0x80>
   22718:	6075      	str	r5, [r6, #4]
   2271a:	4628      	mov	r0, r5
   2271c:	b003      	add	sp, #12
   2271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22720:	af02      	add	r7, sp, #8
   22722:	6803      	ldr	r3, [r0, #0]
   22724:	f847 3d08 	str.w	r3, [r7, #-8]!
   22728:	240c      	movs	r4, #12
   2272a:	4620      	mov	r0, r4
   2272c:	4639      	mov	r1, r7
   2272e:	beab      	bkpt	0x00ab
   22730:	4604      	mov	r4, r0
   22732:	1c61      	adds	r1, r4, #1
   22734:	d00f      	beq.n	22756 <_swilseek+0x76>
   22736:	4425      	add	r5, r4
   22738:	e7e2      	b.n	22700 <_swilseek+0x20>
   2273a:	6840      	ldr	r0, [r0, #4]
   2273c:	182d      	adds	r5, r5, r0
   2273e:	d5de      	bpl.n	226fe <_swilseek+0x1e>
   22740:	f7fa fff4 	bl	1d72c <__errno>
   22744:	2316      	movs	r3, #22
   22746:	6003      	str	r3, [r0, #0]
   22748:	f04f 35ff 	mov.w	r5, #4294967295
   2274c:	e7e5      	b.n	2271a <_swilseek+0x3a>
   2274e:	f7ff ff91 	bl	22674 <checkerror.part.0>
   22752:	4604      	mov	r4, r0
   22754:	e7de      	b.n	22714 <_swilseek+0x34>
   22756:	f7ff ff8d 	bl	22674 <checkerror.part.0>
   2275a:	1c42      	adds	r2, r0, #1
   2275c:	4604      	mov	r4, r0
   2275e:	d1ea      	bne.n	22736 <_swilseek+0x56>
   22760:	f04f 35ff 	mov.w	r5, #4294967295
   22764:	e7d9      	b.n	2271a <_swilseek+0x3a>
   22766:	f7fa ffe1 	bl	1d72c <__errno>
   2276a:	2309      	movs	r3, #9
   2276c:	6003      	str	r3, [r0, #0]
   2276e:	f04f 35ff 	mov.w	r5, #4294967295
   22772:	e7d2      	b.n	2271a <_swilseek+0x3a>

00022774 <_lseek>:
   22774:	f7ff bfb4 	b.w	226e0 <_swilseek>

00022778 <_write>:
   22778:	b5f0      	push	{r4, r5, r6, r7, lr}
   2277a:	b085      	sub	sp, #20
   2277c:	460c      	mov	r4, r1
   2277e:	4616      	mov	r6, r2
   22780:	f7ff ff5c 	bl	2263c <findslot>
   22784:	b350      	cbz	r0, 227dc <_write+0x64>
   22786:	6803      	ldr	r3, [r0, #0]
   22788:	9301      	str	r3, [sp, #4]
   2278a:	9402      	str	r4, [sp, #8]
   2278c:	4605      	mov	r5, r0
   2278e:	9603      	str	r6, [sp, #12]
   22790:	2405      	movs	r4, #5
   22792:	af01      	add	r7, sp, #4
   22794:	4620      	mov	r0, r4
   22796:	4639      	mov	r1, r7
   22798:	beab      	bkpt	0x00ab
   2279a:	4604      	mov	r4, r0
   2279c:	1c63      	adds	r3, r4, #1
   2279e:	d016      	beq.n	227ce <_write+0x56>
   227a0:	2c00      	cmp	r4, #0
   227a2:	db18      	blt.n	227d6 <_write+0x5e>
   227a4:	686a      	ldr	r2, [r5, #4]
   227a6:	1b30      	subs	r0, r6, r4
   227a8:	4402      	add	r2, r0
   227aa:	42a6      	cmp	r6, r4
   227ac:	606a      	str	r2, [r5, #4]
   227ae:	d001      	beq.n	227b4 <_write+0x3c>
   227b0:	b005      	add	sp, #20
   227b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227b4:	f7fa ffba 	bl	1d72c <__errno>
   227b8:	2513      	movs	r5, #19
   227ba:	4606      	mov	r6, r0
   227bc:	2400      	movs	r4, #0
   227be:	4628      	mov	r0, r5
   227c0:	4621      	mov	r1, r4
   227c2:	beab      	bkpt	0x00ab
   227c4:	4605      	mov	r5, r0
   227c6:	4620      	mov	r0, r4
   227c8:	6035      	str	r5, [r6, #0]
   227ca:	b005      	add	sp, #20
   227cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227ce:	f7ff ff51 	bl	22674 <checkerror.part.0>
   227d2:	4604      	mov	r4, r0
   227d4:	e7e4      	b.n	227a0 <_write+0x28>
   227d6:	f04f 30ff 	mov.w	r0, #4294967295
   227da:	e7e9      	b.n	227b0 <_write+0x38>
   227dc:	f7fa ffa6 	bl	1d72c <__errno>
   227e0:	2309      	movs	r3, #9
   227e2:	6003      	str	r3, [r0, #0]
   227e4:	f04f 30ff 	mov.w	r0, #4294967295
   227e8:	e7e2      	b.n	227b0 <_write+0x38>
   227ea:	bf00      	nop

000227ec <_close>:
   227ec:	b570      	push	{r4, r5, r6, lr}
   227ee:	b082      	sub	sp, #8
   227f0:	4604      	mov	r4, r0
   227f2:	f7ff ff23 	bl	2263c <findslot>
   227f6:	b310      	cbz	r0, 2283e <_close+0x52>
   227f8:	3c01      	subs	r4, #1
   227fa:	2c01      	cmp	r4, #1
   227fc:	4606      	mov	r6, r0
   227fe:	d911      	bls.n	22824 <_close+0x38>
   22800:	ad02      	add	r5, sp, #8
   22802:	6833      	ldr	r3, [r6, #0]
   22804:	f845 3d04 	str.w	r3, [r5, #-4]!
   22808:	2402      	movs	r4, #2
   2280a:	4620      	mov	r0, r4
   2280c:	4629      	mov	r1, r5
   2280e:	beab      	bkpt	0x00ab
   22810:	4604      	mov	r4, r0
   22812:	1c63      	adds	r3, r4, #1
   22814:	4620      	mov	r0, r4
   22816:	d00f      	beq.n	22838 <_close+0x4c>
   22818:	b910      	cbnz	r0, 22820 <_close+0x34>
   2281a:	f04f 33ff 	mov.w	r3, #4294967295
   2281e:	6033      	str	r3, [r6, #0]
   22820:	b002      	add	sp, #8
   22822:	bd70      	pop	{r4, r5, r6, pc}
   22824:	4b09      	ldr	r3, [pc, #36]	; (2284c <_close+0x60>)
   22826:	689a      	ldr	r2, [r3, #8]
   22828:	691b      	ldr	r3, [r3, #16]
   2282a:	429a      	cmp	r2, r3
   2282c:	d1e8      	bne.n	22800 <_close+0x14>
   2282e:	f04f 33ff 	mov.w	r3, #4294967295
   22832:	6003      	str	r3, [r0, #0]
   22834:	2000      	movs	r0, #0
   22836:	e7f3      	b.n	22820 <_close+0x34>
   22838:	f7ff ff1c 	bl	22674 <checkerror.part.0>
   2283c:	e7ec      	b.n	22818 <_close+0x2c>
   2283e:	f7fa ff75 	bl	1d72c <__errno>
   22842:	2309      	movs	r3, #9
   22844:	6003      	str	r3, [r0, #0]
   22846:	f04f 30ff 	mov.w	r0, #4294967295
   2284a:	e7e9      	b.n	22820 <_close+0x34>
   2284c:	200022d8 	.word	0x200022d8

00022850 <_getpid>:
   22850:	2001      	movs	r0, #1
   22852:	4770      	bx	lr

00022854 <_sbrk>:
   22854:	4a0e      	ldr	r2, [pc, #56]	; (22890 <_sbrk+0x3c>)
   22856:	6813      	ldr	r3, [r2, #0]
   22858:	b510      	push	{r4, lr}
   2285a:	b1ab      	cbz	r3, 22888 <_sbrk+0x34>
   2285c:	4418      	add	r0, r3
   2285e:	4669      	mov	r1, sp
   22860:	4288      	cmp	r0, r1
   22862:	d809      	bhi.n	22878 <_sbrk+0x24>
   22864:	490b      	ldr	r1, [pc, #44]	; (22894 <_sbrk+0x40>)
   22866:	4c0c      	ldr	r4, [pc, #48]	; (22898 <_sbrk+0x44>)
   22868:	6809      	ldr	r1, [r1, #0]
   2286a:	42a1      	cmp	r1, r4
   2286c:	d001      	beq.n	22872 <_sbrk+0x1e>
   2286e:	4288      	cmp	r0, r1
   22870:	d802      	bhi.n	22878 <_sbrk+0x24>
   22872:	6010      	str	r0, [r2, #0]
   22874:	4618      	mov	r0, r3
   22876:	bd10      	pop	{r4, pc}
   22878:	f7fa ff58 	bl	1d72c <__errno>
   2287c:	230c      	movs	r3, #12
   2287e:	6003      	str	r3, [r0, #0]
   22880:	f04f 33ff 	mov.w	r3, #4294967295
   22884:	4618      	mov	r0, r3
   22886:	bd10      	pop	{r4, pc}
   22888:	4b04      	ldr	r3, [pc, #16]	; (2289c <_sbrk+0x48>)
   2288a:	6013      	str	r3, [r2, #0]
   2288c:	e7e6      	b.n	2285c <_sbrk+0x8>
   2288e:	bf00      	nop
   22890:	200022d4 	.word	0x200022d4
   22894:	20000aa8 	.word	0x20000aa8
   22898:	cafedead 	.word	0xcafedead
   2289c:	200023a0 	.word	0x200023a0

000228a0 <_swistat>:
   228a0:	b570      	push	{r4, r5, r6, lr}
   228a2:	460d      	mov	r5, r1
   228a4:	f7ff feca 	bl	2263c <findslot>
   228a8:	b1b8      	cbz	r0, 228da <_swistat+0x3a>
   228aa:	686b      	ldr	r3, [r5, #4]
   228ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   228b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   228b4:	4606      	mov	r6, r0
   228b6:	606b      	str	r3, [r5, #4]
   228b8:	62ea      	str	r2, [r5, #44]	; 0x2c
   228ba:	240c      	movs	r4, #12
   228bc:	4620      	mov	r0, r4
   228be:	4631      	mov	r1, r6
   228c0:	beab      	bkpt	0x00ab
   228c2:	4604      	mov	r4, r0
   228c4:	1c62      	adds	r2, r4, #1
   228c6:	4620      	mov	r0, r4
   228c8:	d002      	beq.n	228d0 <_swistat+0x30>
   228ca:	6128      	str	r0, [r5, #16]
   228cc:	2000      	movs	r0, #0
   228ce:	bd70      	pop	{r4, r5, r6, pc}
   228d0:	f7ff fed0 	bl	22674 <checkerror.part.0>
   228d4:	1c43      	adds	r3, r0, #1
   228d6:	d1f8      	bne.n	228ca <_swistat+0x2a>
   228d8:	e7f9      	b.n	228ce <_swistat+0x2e>
   228da:	f7fa ff27 	bl	1d72c <__errno>
   228de:	2309      	movs	r3, #9
   228e0:	6003      	str	r3, [r0, #0]
   228e2:	f04f 30ff 	mov.w	r0, #4294967295
   228e6:	bd70      	pop	{r4, r5, r6, pc}

000228e8 <_fstat>:
   228e8:	b538      	push	{r3, r4, r5, lr}
   228ea:	223c      	movs	r2, #60	; 0x3c
   228ec:	460c      	mov	r4, r1
   228ee:	4605      	mov	r5, r0
   228f0:	4608      	mov	r0, r1
   228f2:	2100      	movs	r1, #0
   228f4:	f7fb fdfa 	bl	1e4ec <memset>
   228f8:	4621      	mov	r1, r4
   228fa:	4628      	mov	r0, r5
   228fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22900:	f7ff bfce 	b.w	228a0 <_swistat>

00022904 <_isatty>:
   22904:	b570      	push	{r4, r5, r6, lr}
   22906:	f7ff fe99 	bl	2263c <findslot>
   2290a:	4605      	mov	r5, r0
   2290c:	b190      	cbz	r0, 22934 <_isatty+0x30>
   2290e:	2409      	movs	r4, #9
   22910:	4620      	mov	r0, r4
   22912:	4629      	mov	r1, r5
   22914:	beab      	bkpt	0x00ab
   22916:	4604      	mov	r4, r0
   22918:	2c01      	cmp	r4, #1
   2291a:	d009      	beq.n	22930 <_isatty+0x2c>
   2291c:	f7fa ff06 	bl	1d72c <__errno>
   22920:	2513      	movs	r5, #19
   22922:	4606      	mov	r6, r0
   22924:	2400      	movs	r4, #0
   22926:	4628      	mov	r0, r5
   22928:	4621      	mov	r1, r4
   2292a:	beab      	bkpt	0x00ab
   2292c:	4605      	mov	r5, r0
   2292e:	6035      	str	r5, [r6, #0]
   22930:	4620      	mov	r0, r4
   22932:	bd70      	pop	{r4, r5, r6, pc}
   22934:	f7fa fefa 	bl	1d72c <__errno>
   22938:	2209      	movs	r2, #9
   2293a:	462c      	mov	r4, r5
   2293c:	6002      	str	r2, [r0, #0]
   2293e:	e7f7      	b.n	22930 <_isatty+0x2c>

00022940 <_exit>:
   22940:	f04f 31ff 	mov.w	r1, #4294967295
   22944:	f000 b800 	b.w	22948 <_kill>

00022948 <_kill>:
   22948:	2906      	cmp	r1, #6
   2294a:	b530      	push	{r4, r5, lr}
   2294c:	bf0c      	ite	eq
   2294e:	4d04      	ldreq	r5, [pc, #16]	; (22960 <_kill+0x18>)
   22950:	4d04      	ldrne	r5, [pc, #16]	; (22964 <_kill+0x1c>)
   22952:	2418      	movs	r4, #24
   22954:	4620      	mov	r0, r4
   22956:	4629      	mov	r1, r5
   22958:	beab      	bkpt	0x00ab
   2295a:	4604      	mov	r4, r0
   2295c:	4620      	mov	r0, r4
   2295e:	bd30      	pop	{r4, r5, pc}
   22960:	00020023 	.word	0x00020023
   22964:	00020026 	.word	0x00020026

00022968 <_init>:
   22968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2296a:	bf00      	nop
   2296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2296e:	bc08      	pop	{r3}
   22970:	469e      	mov	lr, r3
   22972:	4770      	bx	lr

00022974 <_fini>:
   22974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22976:	bf00      	nop
   22978:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2297a:	bc08      	pop	{r3}
   2297c:	469e      	mov	lr, r3
   2297e:	4770      	bx	lr

00022980 <__init_array_start>:
   22980:	000205f1 	.word	0x000205f1

00022984 <__frame_dummy_init_array_entry>:
   22984:	00004289 000074f9 000095fd 000099ad     .B...t..........
   22994:	0000a4d9 0000b069 0000d519 0000ed21     ....i.......!...
   229a4:	0000fa49 0000fdc1 00011b91 00011c75     I...........u...
   229b4:	000135a1                                .5..

000229b8 <__do_global_dtors_aux_fini_array_entry>:
   229b8:	00004265                                eB..

000229bc <__fini_array_end>:
   229bc:	646e6148 	.word	0x646e6148
   229c0:	676e696c 	.word	0x676e696c
   229c4:	75616620 	.word	0x75616620
   229c8:	203a746c 	.word	0x203a746c
   229cc:	61656c63 	.word	0x61656c63
   229d0:	676e6972 	.word	0x676e6972
   229d4:	75616620 	.word	0x75616620
   229d8:	2073746c 	.word	0x2073746c
   229dc:	63207962 	.word	0x63207962
   229e0:	696c6379 	.word	0x696c6379
   229e4:	6520676e 	.word	0x6520676e
   229e8:	6c62616e 	.word	0x6c62616e
   229ec:	69732065 	.word	0x69732065
   229f0:	6c616e67 	.word	0x6c616e67
   229f4:	206f7420 	.word	0x206f7420
   229f8:	6f746f6d 	.word	0x6f746f6d
   229fc:	00002e72 	.word	0x00002e72
   22a00:	69766f4d 	.word	0x69766f4d
   22a04:	7420676e 	.word	0x7420676e
   22a08:	6556206f 	.word	0x6556206f
   22a0c:	69636f6c 	.word	0x69636f6c
   22a10:	53207974 	.word	0x53207974
   22a14:	63656c65 	.word	0x63656c65
   22a18:	6e6f6974 	.word	0x6e6f6974
   22a1c:	0000203a 	.word	0x0000203a
   22a20:	6e492820 	.word	0x6e492820
   22a24:	73747570 	.word	0x73747570
   22a28:	4f204120 	.word	0x4f204120
   22a2c:	422f6666 	.word	0x422f6666
   22a30:	66664f20 	.word	0x66664f20
   22a34:	00000029 	.word	0x00000029
   22a38:	6e492820 	.word	0x6e492820
   22a3c:	73747570 	.word	0x73747570
   22a40:	4f204120 	.word	0x4f204120
   22a44:	20422f6e 	.word	0x20422f6e
   22a48:	2966664f 	.word	0x2966664f
   22a4c:	00000000 	.word	0x00000000
   22a50:	6e492820 	.word	0x6e492820
   22a54:	73747570 	.word	0x73747570
   22a58:	4f204120 	.word	0x4f204120
   22a5c:	422f6666 	.word	0x422f6666
   22a60:	296e4f20 	.word	0x296e4f20
   22a64:	00000000 	.word	0x00000000
   22a68:	6e492820 	.word	0x6e492820
   22a6c:	73747570 	.word	0x73747570
   22a70:	4f204120 	.word	0x4f204120
   22a74:	20422f6e 	.word	0x20422f6e
   22a78:	00296e4f 	.word	0x00296e4f
   22a7c:	69766f4d 	.word	0x69766f4d
   22a80:	2e2e676e 	.word	0x2e2e676e
   22a84:	69615720 	.word	0x69615720
   22a88:	676e6974 	.word	0x676e6974
   22a8c:	726f6620 	.word	0x726f6620
   22a90:	464c4820 	.word	0x464c4820
   22a94:	00000042 	.word	0x00000042
   22a98:	6f746f4d 	.word	0x6f746f4d
   22a9c:	61662072 	.word	0x61662072
   22aa0:	20746c75 	.word	0x20746c75
   22aa4:	65746564 	.word	0x65746564
   22aa8:	64657463 	.word	0x64657463
   22aac:	0000002e 	.word	0x0000002e
   22ab0:	62616e45 	.word	0x62616e45
   22ab4:	6120656c 	.word	0x6120656c
   22ab8:	6d6f7475 	.word	0x6d6f7475
   22abc:	63697461 	.word	0x63697461
   22ac0:	75616620 	.word	0x75616620
   22ac4:	6820746c 	.word	0x6820746c
   22ac8:	6c646e61 	.word	0x6c646e61
   22acc:	20676e69 	.word	0x20676e69
   22ad0:	73207962 	.word	0x73207962
   22ad4:	69747465 	.word	0x69747465
   22ad8:	4820676e 	.word	0x4820676e
   22adc:	4c444e41 	.word	0x4c444e41
   22ae0:	4f4d5f45 	.word	0x4f4d5f45
   22ae4:	5f524f54 	.word	0x5f524f54
   22ae8:	4c554146 	.word	0x4c554146
   22aec:	74205354 	.word	0x74205354
   22af0:	2e31206f 	.word	0x2e31206f
   22af4:	00000000 	.word	0x00000000
   22af8:	69746f4d 	.word	0x69746f4d
   22afc:	6d206e6f 	.word	0x6d206e6f
   22b00:	6e207961 	.word	0x6e207961
   22b04:	6820746f 	.word	0x6820746f
   22b08:	20657661 	.word	0x20657661
   22b0c:	706d6f63 	.word	0x706d6f63
   22b10:	6574656c 	.word	0x6574656c
   22b14:	73612064 	.word	0x73612064
   22b18:	70786520 	.word	0x70786520
   22b1c:	65746365 	.word	0x65746365
   22b20:	50202e64 	.word	0x50202e64
   22b24:	65636f72 	.word	0x65636f72
   22b28:	77206465 	.word	0x77206465
   22b2c:	20687469 	.word	0x20687469
   22b30:	74756163 	.word	0x74756163
   22b34:	2e6e6f69 	.word	0x2e6e6f69
   22b38:	00000000 	.word	0x00000000
   22b3c:	65766f4d 	.word	0x65766f4d
   22b40:	6e6f4420 	.word	0x6e6f4420
   22b44:	00000065 	.word	0x00000065
   22b48:	6f746f4d 	.word	0x6f746f4d
   22b4c:	61662072 	.word	0x61662072
   22b50:	20746c75 	.word	0x20746c75
   22b54:	65746564 	.word	0x65746564
   22b58:	64657463 	.word	0x64657463
   22b5c:	6f4d202e 	.word	0x6f4d202e
   22b60:	63206576 	.word	0x63206576
   22b64:	65636e61 	.word	0x65636e61
   22b68:	2e64656c 	.word	0x2e64656c
   22b6c:	616e4520 	.word	0x616e4520
   22b70:	20656c62 	.word	0x20656c62
   22b74:	6f747561 	.word	0x6f747561
   22b78:	6974616d 	.word	0x6974616d
   22b7c:	61662063 	.word	0x61662063
   22b80:	20746c75 	.word	0x20746c75
   22b84:	646e6168 	.word	0x646e6168
   22b88:	676e696c 	.word	0x676e696c
   22b8c:	20796220 	.word	0x20796220
   22b90:	74746573 	.word	0x74746573
   22b94:	20676e69 	.word	0x20676e69
   22b98:	444e4148 	.word	0x444e4148
   22b9c:	4d5f454c 	.word	0x4d5f454c
   22ba0:	524f544f 	.word	0x524f544f
   22ba4:	5541465f 	.word	0x5541465f
   22ba8:	2053544c 	.word	0x2053544c
   22bac:	31206f74 	.word	0x31206f74
   22bb0:	0000002e 	.word	0x0000002e
   22bb4:	6f746f4d 	.word	0x6f746f4d
   22bb8:	6e452072 	.word	0x6e452072
   22bbc:	656c6261 	.word	0x656c6261
   22bc0:	00000064 	.word	0x00000064
   22bc4:	74696157 	.word	0x74696157
   22bc8:	20676e69 	.word	0x20676e69
   22bcc:	20726f66 	.word	0x20726f66
   22bd0:	42464c48 	.word	0x42464c48
   22bd4:	002e2e2e 	.word	0x002e2e2e
   22bd8:	62616e45 	.word	0x62616e45
   22bdc:	676e696c 	.word	0x676e696c
   22be0:	79616d20 	.word	0x79616d20
   22be4:	746f6e20 	.word	0x746f6e20
   22be8:	76616820 	.word	0x76616820
   22bec:	6f632065 	.word	0x6f632065
   22bf0:	656c706d 	.word	0x656c706d
   22bf4:	20646574 	.word	0x20646574
   22bf8:	65207361 	.word	0x65207361
   22bfc:	63657078 	.word	0x63657078
   22c00:	2e646574 	.word	0x2e646574
   22c04:	6f725020 	.word	0x6f725020
   22c08:	64656563 	.word	0x64656563
   22c0c:	74697720 	.word	0x74697720
   22c10:	61632068 	.word	0x61632068
   22c14:	6f697475 	.word	0x6f697475
   22c18:	00002e6e 	.word	0x00002e6e
   22c1c:	6f746f4d 	.word	0x6f746f4d
   22c20:	65522072 	.word	0x65522072
   22c24:	00796461 	.word	0x00796461

00022c28 <CSWTCH.95>:
   22c28:	02030406 00000002                       ........

00022c30 <_ZN9ClearCoreL11tcc_modulesE>:
   22c30:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22c40:	43001000                                ...C

00022c44 <_ZTVN9ClearCore11MotorDriverE>:
	...
   22c4c:	000049b9 000049bd 000049a9 000049ad     .I...I...I...I..
   22c5c:	0000e2dd 0000499d 000049b1 000049a1     .....I...I...I..
   22c6c:	00005089 000058bd 000056e5 000057dd     .P...X...V...W..
   22c7c:	00004b21 ffffffd0 00000000 000057d5     !K...........W..
   22c8c:	000058b5 00004b71                       .X..qK..

00022c94 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22c94:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22ca4:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022cb4 <_ZTVN9ClearCore7ISerialE>:
	...
   22cbc:	00013425 00013425 00013425 00013425     %4..%4..%4..%4..
   22ccc:	00013425 00013425 00013425 00013425     %4..%4..%4..%4..
   22cdc:	00013425 00013425 00013425 00013425     %4..%4..%4..%4..
   22cec:	00013425 00013425 00013425 00013425     %4..%4..%4..%4..
   22cfc:	00013425 00013425                       %4..%4..

00022d04 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22d0c:	00005c61 00005c55 00005c79 00005c85     a\..U\..y\...\..
   22d1c:	00005c91 00005c9d 00005ca9 00005cb5     .\...\...\...\..
   22d2c:	00005cc1 00005ccd 00005cd9 00005c61     .\...\...\..a\..
   22d3c:	00005c6d 00005c6d 00005bd9 00005be5     m\..m\...[...[..
   22d4c:	00005be9 00005bf5 00005c01 00005c0d     .[...[...\...\..
   22d5c:	00005c21 00005ce5 00005d09 00005d39     !\...\...]..9]..
   22d6c:	00005c2d 00005c39 00005c49 fffffffc     -\..9\..I\......
   22d7c:	00000000 00005c05 00005c19 00005c25     .....\...\..%\..
   22d8c:	00005d01 00005d31 00005d79 00005c31     .]..1]..y]..1\..
   22d9c:	00005bd1 00005c4d 00005c41 008061fc     .[..M\..A\...a..
   22dac:	00806010 00806014 00806018              .`...`...`..

00022db8 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22dc0:	0000fe19 0000fe29 00010d45 000100a1     ....)...E.......
   22dd0:	0000ff4d 00007509 0000fe3d 0000fe75     M....u..=...u...
   22de0:	0000feb5 0000fe91 0000fea1 0000fef5     ................
   22df0:	0000fe11 00007511 000101b9 0000750d     .....u.......u..
   22e00:	0001038d 000102a9                       ........

00022e08 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22e10:	0000fe19 0000fe29 00010d45 000100a1     ....)...E.......
   22e20:	0000ff4d 00007509 0000fe3d 0000fe75     M....u..=...u...
   22e30:	0000feb5 0000fe91 0000fea1 0000fef5     ................
   22e40:	0000fe11 00007511 000101b9 0000750d     .....u.......u..
   22e50:	0001038d 000102a9 40003c00 4101a000     .........<.@...A
   22e60:	43001400                                ...C

00022e64 <_ZN9ClearCore10hBridgeConE>:
   22e64:	2000136c 200013f0                       l.. ... 

00022e6c <_ZN9ClearCore15MotorConnectorsE>:
   22e6c:	20000b60 20000ca8 20000df0 20000f38     `.. ... ... 8.. 

00022e7c <_ZN9ClearCoreL10ConnectorsE>:
   22e7c:	200011e0 2000124c 200012ac 2000130c     ... L.. ... ... 
   22e8c:	2000136c 200013f0 20001150 20001180     l.. ... P.. ... 
   22e9c:	200011b0 20000b18 20001084 200010c8     ... ... ... ... 
   22eac:	2000110c 20001474 20000b60 20000ca8     ... t.. `.. ... 
   22ebc:	20000df0 20000f38 200015d4 2000172c     ... 8.. ... ,.. 
   22ecc:	20001484                                ... 

00022ed0 <_ZN9ClearCoreL10MicroSD_SSE>:
   22ed0:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022ee0 <_ZN9ClearCoreL10XBee_Rx_INE>:
   22ee0:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022ef0 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22ef0:	02120142 ffffff00 ffff0207 00040001     B...............

00022f00 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22f00:	04140144 ffffff00 ffff0107 00060201     D...............

00022f10 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22f10:	0a0a001c ffffff00 00010200 00040200     ................

00022f20 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22f20:	0909001b ff03ff00 01000100 00ff0100     ................

00022f30 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22f30:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022f40 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22f40:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022f50 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22f50:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022f60 <_ZN9ClearCoreL11IN09n_AIN09E>:
   22f60:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022f70 <_ZN9ClearCoreL11IN10n_AIN10E>:
   22f70:	0606010d ff08ff01 ffffffff 00ffffff     ................

00022f80 <_ZN9ClearCoreL11IN11n_AIN11E>:
   22f80:	0505010a ff07ff01 ffffffff 00ffffff     ................

00022f90 <_ZN9ClearCoreL11IN12n_AIN12E>:
   22f90:	03030206 ff05ff01 ffffffff 00ffffff     ................

00022fa0 <_ZN9ClearCoreL11MicroSD_SCKE>:
   22fa0:	09090110 ff01ff00 01040104 00ffffff     ................

00022fb0 <_ZN9ClearCoreL11XBee_CTS_INE>:
   22fb0:	09190253 ffffff00 ffff0302 00ffffff     S...............

00022fc0 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   22fc0:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00022fd0 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   22fd0:	05150145 ffffff00 ffff0007 00070301     E...............

00022fe0 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   22fe0:	ff08001a ff02ff00 00000000 00ff0000     ................

00022ff0 <_ZN9ClearCoreL12MicroSD_MISOE>:
   22ff0:	0a0a0120 ffffff00 00050204 00040400      ...............

00023000 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   23000:	0808010f ff00ff00 00040004 00ffffff     ................

00023010 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   23010:	07170049 ffffff00 01040005 00ff0701     I...............

00023020 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   23020:	08180252 ffffff00 ffff0202 00ffffff     R...............

00023030 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   23030:	03130143 ffffff00 ffff0307 00050101     C...............

00023040 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   23040:	0b0b001d ffffff00 01010300 00050300     ................

00023050 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   23050:	05050012 01ffff00 0100ffff 00ffffff     ................

00023060 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   23060:	04140046 ffffff01 00070205 00ff0401     F...............

00023070 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   23070:	00100140 ffffff00 00060005 00020003     @...............

00023080 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   23080:	03030164 ffffff00 0106ffff 00ffffff     d...............

00023090 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   23090:	0e0e0124 ffffff00 00050204 00000004     $...............

000230a0 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   230a0:	0c0c0122 ffffff00 00040004 00060003     "...............

000230b0 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   230b0:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

000230c0 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   230c0:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

000230d0 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   230d0:	0f0f0125 ffffff00 01050304 00010104     %...............

000230e0 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   230e0:	0d0d0123 ffffff00 01040104 00070103     #...............

000230f0 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   230f0:	06160048 ffffff00 00040003 00ff0601     H...............

00023100 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23100:	00100034 ffffff00 00020001 00020001     4...............

00023110 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   23110:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00023120 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   23120:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00023130 <_ZN9ClearCoreL5IN01nE>:
   23130:	02110107 00ffff00 ffffffff 00ffffff     ................

00023140 <_ZN9ClearCoreL5IN02nE>:
   23140:	03030008 ffffff00 ffffffff 00ffffff     ................

00023150 <_ZN9ClearCoreL5IN03nE>:
   23150:	04150211 ffffff00 0000ffff 00ffffff     ................

00023160 <_ZN9ClearCoreL5IN04nE>:
   23160:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

00023170 <_ZN9ClearCoreL5IN05nE>:
   23170:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00023180 <_ZN9ClearCoreL5OUT00E>:
   23180:	00000001 ffffff00 0002ffff 00ffffff     ................

00023190 <_ZN9ClearCoreL5OUT01E>:
   23190:	01010002 ffffff00 0102ffff 00ffffff     ................

000231a0 <_ZN9ClearCoreL5OUT02E>:
   231a0:	06060013 ffffff00 0001ffff 00ffffff     ................

000231b0 <_ZN9ClearCoreL5OUT03E>:
   231b0:	07070014 ffffff00 0101ffff 00ffffff     ................

000231c0 <_ZN9ClearCoreL6Aout00E>:
   231c0:	02020007 01ffff00 0100ffff 00ffffff     ................

000231d0 <_ZN9ClearCoreL6Mtr0_BE>:
   231d0:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

000231e0 <_ZN9ClearCoreL6Mtr1_BE>:
   231e0:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

000231f0 <_ZN9ClearCoreL7Mtr1_AnE>:
   231f0:	05150047 ffffff00 01070305 00ff0501     G...............

00023200 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23200:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   23210:	00000080 00000040 00000020 00000010     ....@... .......
   23220:	00000008 00000004 01000000 02000000     ................
   23230:	04000000 08000000 00800000 00400000     ..............@.
   23240:	00200000 00004000 00008000 00040000     .. ..@..........
   23250:	00080000                                ....

00023254 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   2325c:	0000b079 0000b0ed 00013425              y.......%4..

00023268 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23268:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023278 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23278:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023288 <_ZN9ClearCoreL11IN08n_QuadIE>:
   23288:	0212023a ffffff01 ffff0206 00ff0200     :...............
   23298:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   232a8:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   232b8:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   232c8:	2e747369 00000063 00023310 00023300     ist.c....3...3..
   232d8:	000232e0 000232f0                       .2...2..

000232e0 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   232e0:	01010204 ff0bff00 ffffffff 00ffffff     ................

000232f0 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   232f0:	00000203 ff0aff00 ffffffff 00ffffff     ................

00023300 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   23300:	02020205 ff04ff00 ffffffff 00ffffff     ................

00023310 <_ZN9ClearCoreL9_5VOB_MONE>:
   23310:	04040109 ff06ff00 ffffffff 00ffffff     ................

00023320 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23328:	0000d56d 0000d79d 0000d571 0000d575     m.......q...u...
   23338:	0000d895 0000d8b1 0000d565 000049a1     ........e....I..
   23348:	0000d785 0000d94d                       ....M...

00023350 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   23358:	0000d9f1 0000da01 0000d9f5 0000d9f9     ................
   23368:	0000dc55 0000d9fd 0000d9ed 000049a1     U............I..
   23378:	0000db29 0000dba1                       ).......

00023380 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   23388:	0000dc9d 0000dd71 0000dca1 0000dca5     ....q...........
   23398:	0000e20d 0000dcb9 0000d565 000049a1     ........e....I..
   233a8:	0000e001 0000e24d                       ....M...

000233b0 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   233b0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   233c0:	42001400 42001800 43001400 43001800     ...B...B...C...C

000233d0 <_ZTVN9ClearCore9ConnectorE>:
	...
   233d8:	0000e2c1 00013425 00013425 00013425     ....%4..%4..%4..
   233e8:	00013425 00013425 00013425 00005bd1     %4..%4..%4...[..
   233f8:	00013425 00013425                       %4..%4..

00023400 <_ZTVN9ClearCore9DigitalInE>:
	...
   23408:	0000e2c5 0000e2c9 0000e2d5 0000e2d9     ................
   23418:	0000e2dd 0000499d 0000d9ed 000049a1     .....I.......I..
   23428:	0000e3d1 0000e305                       ........

00023430 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   23438:	0000e631 0000eac9 0000e635 0000e639     1.......5...9...
   23448:	0000e6fd 0000e739 0000d565 000049a1     ....9...e....I..
   23458:	0000e8ed 0000ea01                       ........

00023460 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   23460:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   23470:	43001000                                ...C

00023474 <_ZTVN9ClearCore7CcioPinE>:
	...
   2347c:	0000fa59 0000fab5 0000fa5d 0000fa61     Y.......]...a...
   2348c:	0000fb25 0000fb81 0000fb61 00005bd1     %.......a....[..
   2349c:	0000fa71 0000fa75                       q...u...

000234a4 <_ZTVN9ClearCore10SerialBaseE>:
	...
   234ac:	0000fe19 0000fe29 00010d45 000100a1     ....)...E.......
   234bc:	0000ff4d 00007509 0000fe3d 0000fe75     M....u..=...u...
   234cc:	0000feb5 0000fe91 0000fea1 0000fef5     ................
   234dc:	0000fe11 00007511 000101b9 0000750d     .....u.......u..
   234ec:	0001038d 000102a9                       ........

000234f4 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   234f4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   23504:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00023514 <_ZTVN9ClearCore12SerialDriverE>:
	...
   2351c:	0000fe19 0000fe29 00011415 00011469     ....).......i...
   2352c:	000112a5 00007509 0000fe3d 0000fe75     .....u..=...u...
   2353c:	0000feb5 0000fe91 0000fea1 0000fef5     ................
   2354c:	0000fe11 00007511 000101b9 0000750d     .....u.......u..
   2355c:	0001038d 000102a9 000111f9 000112c1     ................
   2356c:	00011209 00011215 00011225 000115ad     ........%.......
   2357c:	00011239 000114b5 00011245 fffffebc     9.......E.......
   2358c:	00000000 00011201 0001140d 0001120d     ................
   2359c:	0001121d 00011231 00011661 0001123d     ....1...a...=...
   235ac:	00005bd1 00011249 000115a5              .[..I.......

000235b8 <_ZTVN9ClearCore9LedDriverE>:
	...
   235c0:	00011669 0001166d 00011679 0001167d     i...m...y...}...
   235d0:	00011691 000116a9 00011681 00005bd1     .............[..
   235e0:	00011685 00011689                       ........

000235e8 <_usb_ep_cfgs>:
   235e8:	20001f2c 00000000 00000040 20001f6c     ,.. ....@...l.. 
   235f8:	00000000 00000040 20001fac 00000000     ....@...... ....
   23608:	00000040                                @...

0002360c <sinTable_q15>:
   2360c:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   2361c:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   2362c:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   2363c:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   2364c:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   2365c:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   2366c:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   2367c:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   2368c:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   2369c:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   236ac:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   236bc:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   236cc:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   236dc:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   236ec:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   236fc:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   2370c:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   2371c:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   2372c:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   2373c:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   2374c:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   2375c:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   2376c:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   2377c:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   2378c:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   2379c:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   237ac:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   237bc:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   237cc:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   237dc:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   237ec:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   237fc:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   2380c:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   2381c:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   2382c:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   2383c:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   2384c:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   2385c:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   2386c:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   2387c:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   2388c:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   2389c:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   238ac:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   238bc:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   238cc:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   238dc:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   238ec:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   238fc:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   2390c:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   2391c:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   2392c:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   2393c:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   2394c:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   2395c:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   2396c:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   2397c:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   2398c:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   2399c:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   239ac:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   239bc:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   239cc:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   239dc:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   239ec:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   239fc:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   23a0c:	00000000 65727570 72697620 6c617574     ....pure virtual
   23a1c:	74656d20 20646f68 6c6c6163 000a6465      method called..
   23a2c:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

00023a3c <_ZTISt9bad_alloc>:
   23a3c:	00023b5c 00023a48 00023a9c              \;..H:...:..

00023a48 <_ZTSSt9bad_alloc>:
   23a48:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023a58 <_ZTVSt9bad_alloc>:
   23a58:	00000000 00023a3c 00013441 00013455     ....<:..A4..U4..
   23a68:	00013439 3a647473 6461623a 6378655f     94..std::bad_exc
   23a78:	69747065 00006e6f                       eption..

00023a80 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23a80:	00023bd0 00023aa4                       .;...:..

00023a88 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23a88:	00023bd0 00023ac4                       .;...:..

00023a90 <_ZTISt13bad_exception>:
   23a90:	00023b5c 00023ae8 00023a9c              \;...:...:..

00023a9c <_ZTISt9exception>:
   23a9c:	00023bd0 00023afc                       .;...:..

00023aa4 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23aa4:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23ab4:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023ac4 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23ac4:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23ad4:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23ae4:	00456e6f                                onE.

00023ae8 <_ZTSSt13bad_exception>:
   23ae8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23af8:	0000006e                                n...

00023afc <_ZTSSt9exception>:
   23afc:	65397453 70656378 6e6f6974 00000000     St9exception....

00023b0c <_ZTVSt13bad_exception>:
   23b0c:	00000000 00023a90 000135cd 000135d9     .....:...5...5..
   23b1c:	000135d1                                .5..

00023b20 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23b20:	00023b5c 00023b2c 00023b98              \;..,;...;..

00023b2c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23b2c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23b3c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23b4c:	456f666e 00000000                       nfoE....

00023b54 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23b54:	00000000 00023b20 000137a1 000137b5     .... ;...7...7..
   23b64:	000138cd 000138cd 00013989 000138fd     .8...8...9...8..
   23b74:	0001389d 0001380d 000137d1              .8...8...7..

00023b80 <_ZTISt9type_info>:
   23b80:	00023bd0 00023b88                       .;...;..

00023b88 <_ZTSSt9type_info>:
   23b88:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023b98 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23b98:	00023b5c 00023ba4 00023b80              \;...;...;..

00023ba4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23ba4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23bb4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23bc4:	00000045                                E...

00023bc8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23bc8:	00000000 00023b98 00013941 00013955     .....;..A9..U9..
   23bd8:	000138cd 000138cd 00013989 000138fd     .8...8...9...8..
   23be8:	00013971 000139b5 00013935 6d726574     q9...9..59..term
   23bf8:	74616e69 61632065 64656c6c 63657220     inate called rec
   23c08:	69737275 796c6576 0000000a 6d726574     ursively....term
   23c18:	74616e69 61632065 64656c6c 74666120     inate called aft
   23c28:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23c38:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23c48:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23c58:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23c68:	69746361 65206576 70656378 6e6f6974     active exception
   23c78:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023c88 <standard_subs>:
   23c88:	00000074 0002446c 00000003 0002446c     t...lD......lD..
   23c98:	00000003 00000000 00000000 00000061     ............a...
   23ca8:	00024780 0000000e 00024780 0000000e     .G.......G......
   23cb8:	00024790 00000009 00000062 0002479c     .G......b....G..
   23cc8:	00000011 0002479c 00000011 000247b0     .....G.......G..
   23cd8:	0000000c 00000073 000247c0 0000000b     ....s....G......
   23ce8:	000247cc 00000046 000247b0 0000000c     .G..F....G......
   23cf8:	00000069 00024814 0000000c 00024824     i....H......$H..
   23d08:	00000031 00024858 0000000d 0000006f     1...XH......o...
   23d18:	00024868 0000000c 00024878 00000031     hH......xH..1...
   23d28:	000248ac 0000000d 00000064 000248bc     .H......d....H..
   23d38:	0000000d 000248cc 00000032 00024900     .....H..2....I..
   23d48:	0000000e                                ....

00023d4c <cplus_demangle_builtin_types>:
   23d4c:	00024b10 0000000b 00024b10 0000000b     .K.......K......
   23d5c:	00000000 00024b1c 00000004 00024b24     .....K......$K..
   23d6c:	00000007 00000007 00024b2c 00000004     ........,K......
   23d7c:	00024b34 00000004 00000000 00024b3c     4K..........<K..
   23d8c:	00000006 00024b3c 00000006 00000008     ....<K..........
   23d9c:	00024b44 0000000b 00024b44 0000000b     DK......DK......
   23dac:	00000008 00024b50 00000005 00024b50     ....PK......PK..
   23dbc:	00000005 00000008 00024b58 0000000a     ........XK......
   23dcc:	00024b58 0000000a 00000008 00024b64     XK..........dK..
   23ddc:	0000000d 00024b64 0000000d 00000000     ....dK..........
   23dec:	00024b74 00000003 00024b74 00000003     tK......tK......
   23dfc:	00000001 00024b78 0000000c 00024b88     ....xK.......K..
   23e0c:	00000008 00000002 00000000 00000000     ................
	...
   23e28:	00024b94 00000004 00024b94 00000004     .K.......K......
   23e38:	00000003 00024b9c 0000000d 00024b9c     .....K.......K..
   23e48:	0000000d 00000004 00024bac 00000008     .........K......
   23e58:	00024bac 00000008 00000000 00024bb8     .K...........K..
   23e68:	00000011 00024bb8 00000011 00000000     .....K..........
	...
   23eb4:	00024bcc 00000005 00024bcc 00000005     .K.......K......
   23ec4:	00000000 00024bd4 0000000e 00024bd4     .....K.......K..
   23ed4:	0000000e 00000000 00000000 00000000     ................
	...
   23ef0:	00024be4 00000004 00024be4 00000004     .K.......K......
   23f00:	00000009 00024bec 00000007 00024b2c     .....K......,K..
   23f10:	00000004 00000000 00024bf4 00000009     .........K......
   23f20:	00024b94 00000004 00000005 00024c00     .K...........L..
   23f30:	00000012 00024c00 00000012 00000006     .....L..........
   23f40:	00022bd4 00000003 00022bd4 00000003     .+.......+......
   23f50:	00000000 00024c14 00000009 00024c14     .....L.......L..
   23f60:	00000009 00000000 00024c20 00000009     ........ L......
   23f70:	00024c20 00000009 00000000 00024c2c      L..........,L..
   23f80:	0000000a 00024c2c 0000000a 00000000     ....,L..........
   23f90:	00024c38 00000004 00024c38 00000004     8L......8L......
   23fa0:	00000008 00024c40 00000008 00024c40     ....@L......@L..
   23fb0:	00000008 00000000 00024c4c 00000008     ........LL......
   23fc0:	00024c4c 00000008 00000000 00024c58     LL..........XL..
   23fd0:	00000011 00024c58 00000011 00000000     ....XL..........

00023fe0 <cplus_demangle_operators>:
   23fe0:	00024910 00024914 00000002 00000002     .I...I..........
   23ff0:	00024918 0002491c 00000001 00000002     .I...I..........
   24000:	00024920 00024744 00000002 00000002      I..DG..........
   24010:	0002463c 00024924 00000001 00000001     <F..$I..........
   24020:	00024928 00024924 00000001 00000002     (I..$I..........
   24030:	0002492c 00024930 00000008 00000001     ,I..0I..........
   24040:	0002493c 00024930 00000008 00000001     <I..0I..........
   24050:	00024940 00024944 0000000a 00000002     @I..DI..........
   24060:	0002444c 00024950 00000002 00000002     LD..PI..........
   24070:	00024954 00024958 00000001 00000002     TI..XI..........
   24080:	0002495c 00024960 00000001 00000001     \I..`I..........
   24090:	00024964 00024968 00000002 00000002     dI..hI..........
   240a0:	0002496c 00024970 00000009 00000001     lI..pI..........
   240b0:	0002497c 00024980 0000000c 00000002     |I...I..........
   240c0:	00024990 00024994 00000001 00000001     .I...I..........
   240d0:	00024998 0002499c 00000007 00000001     .I...I..........
   240e0:	000249a4 000249a8 00000002 00000002     .I...I..........
   240f0:	00024450 00024ad8 00000001 00000002     PD...J..........
   24100:	000249ac 000249b0 00000001 00000002     .I...I..........
   24110:	000249b4 000249b8 00000002 00000002     .I...I..........
   24120:	000249bc 000249c0 00000001 00000002     .I...I..........
   24130:	000249c4 000249c8 00000002 00000002     .I...I..........
   24140:	000249cc 00022bd4 00000003 00000003     .I...+..........
   24150:	000249d0 00022bd4 00000003 00000003     .I...+..........
   24160:	000249d4 00022bd4 00000003 00000002     .I...+..........
   24170:	000249d8 00022bd4 00000003 00000002     .I...+..........
   24180:	000249dc 000249e0 00000002 00000002     .I...I..........
   24190:	00024640 00024494 00000002 00000001     @F...D..........
   241a0:	000249e4 00024854 00000001 00000002     .I..TH..........
   241b0:	00024648 000244b4 00000002 00000002     HF...D..........
   241c0:	000249e8 000249ec 00000003 00000002     .I...I..........
   241d0:	00024b40 000249f0 00000002 00000002     @K...I..........
   241e0:	00024488 000249f4 0000000b 00000001     .D...I..........
   241f0:	00024a00 00024a04 00000002 00000002     .J...J..........
   24200:	00024a08 00024a0c 00000001 00000002     .J...J..........
   24210:	00024a10 00024a14 00000002 00000002     .J...J..........
   24220:	00024a18 00024a1c 00000002 00000002     .J...J..........
   24230:	00024a20 00024a24 00000001 00000002      J..$J..........
   24240:	00024a28 00024994 00000001 00000002     (J...I..........
   24250:	00024a2c 00024a30 00000002 00000001     ,J..0J..........
   24260:	00024a34 00024a38 00000005 00000003     4J..8J..........
   24270:	00024a40 00024a44 00000002 00000002     @J..DJ..........
   24280:	00024c10 00024a24 00000001 00000001     .L..$J..........
   24290:	00024a48 00024a4c 00000001 00000001     HJ..LJ..........
   242a0:	00024a50 00024a54 00000003 00000003     PJ..TJ..........
   242b0:	00024a58 00024a5c 00000002 00000002     XJ..\J..........
   242c0:	00024a60 00024a64 00000002 00000002     `J..dJ..........
   242d0:	0002478c 00024a68 00000001 00000002     .G..hJ..........
   242e0:	00024a6c 00024a70 00000002 00000002     lJ..pJ..........
   242f0:	00024a74 00024a78 00000001 00000002     tJ..xJ..........
   24300:	00024a7c 00024a80 00000003 00000002     |J...J..........
   24310:	00024a84 00024a88 00000002 00000001     .J...J..........
   24320:	00024a8c 00024a78 00000001 00000001     .J..xJ..........
   24330:	00024454 00024a90 00000002 00000002     TD...J..........
   24340:	00024458 00024a94 00000001 00000003     XD...J..........
   24350:	00024a98 00024a9c 00000002 00000002     .J...J..........
   24360:	00024aa0 00024aa4 00000003 00000002     .J...J..........
   24370:	00024aa8 00024aac 00000010 00000002     .J...J..........
   24380:	00024ac0 00024ac4 00000001 00000002     .J...J..........
   24390:	00024ac8 00024acc 00000002 00000002     .J...J..........
   243a0:	00024448 00024ad0 00000009 00000001     HD...J..........
   243b0:	0002470c 00024ad0 00000009 00000001     .G...J..........
   243c0:	00024adc 00024ae0 0000000b 00000002     .J...J..........
   243d0:	0002494c 00024aec 00000007 00000001     LI...J..........
   243e0:	00024af4 00024aec 00000007 00000001     .J...J..........
   243f0:	00024af8 00024afc 00000005 00000000     .J...J..........
   24400:	00024b04 00024b08 00000006 00000001     .K...K..........
	...
   24420:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24430:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24440:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   24450:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   24460:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   24470:	6f747561 00000000 6c636564 65707974     auto....decltype
   24480:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   24490:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   244a0:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   244b0:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   244c0:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   244d0:	20726f66 00000000 736e6f63 63757274     for ....construc
   244e0:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   244f0:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   24500:	6f666e69 726f6620 00000020 65707974     info for ...type
   24510:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   24520:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   24530:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   24540:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   24550:	6e616972 65722074 6e727574 75687420     riant return thu
   24560:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   24570:	66207373 0020726f 72617567 61762064     ss for .guard va
   24580:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   24590:	74696e69 6e756620 6f697463 6f66206e     init function fo
   245a0:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   245b0:	636e7566 6e6f6974 726f6620 00000020     function for ...
   245c0:	65666572 636e6572 65742065 726f706d     reference tempor
   245d0:	20797261 00000023 64646968 61206e65     ary #...hidden a
   245e0:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   245f0:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   24600:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   24610:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   24620:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24630:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24640:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24650:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24660:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24670:	00000000 6176616a 73657220 6372756f     ....java resourc
   24680:	00002065 6c636564 65707974 00002820     e ..decltype (..
   24690:	73696874 00000000 7261707b 0000236d     this....{parm#..
   246a0:	626f6c67 63206c61 74736e6f 74637572     global construct
   246b0:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   246c0:	626f6c67 64206c61 72747365 6f746375     global destructo
   246d0:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   246e0:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   246f0:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   24700:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   24710:	73657220 63697274 00000074 6c6f7620      restrict... vol
   24720:	6c697461 00000065 6e6f6320 00007473     atile... const..
   24730:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   24740:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   24750:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   24760:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   24770:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   24780:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   24790:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   247a0:	7361623a 735f6369 6e697274 00000067     :basic_string...
   247b0:	69736162 74735f63 676e6972 00000000     basic_string....
   247c0:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   247d0:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   247e0:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   247f0:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   24800:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   24810:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   24820:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   24830:	65727473 633c6d61 2c726168 64747320     stream<char, std
   24840:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   24850:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24860:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24870:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24880:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   24890:	64747320 68633a3a 745f7261 74696172      std::char_trait
   248a0:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   248b0:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   248c0:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   248d0:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   248e0:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   248f0:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   24900:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   24910:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   24920:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24930:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24940:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24950:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24960:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24970:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24980:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   24990:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   249a0:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   249b0:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   249c0:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   249d0:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   249e0:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   249f0:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   24a00:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   24a10:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   24a20:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24a30:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24a40:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24a50:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24a60:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24a70:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24a80:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24a90:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24aa0:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24ab0:	70726574 5f746572 74736163 00000000     terpret_cast....
   24ac0:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   24ad0:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   24ae0:	74617473 635f6369 00747361 657a6973     static_cast.size
   24af0:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   24b00:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   24b10:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   24b20:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24b30:	00000000 65747962 00000000 62756f64     ....byte....doub
   24b40:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24b50:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24b60:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24b70:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24b80:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24b90:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24ba0:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24bb0:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24bc0:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24bd0:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24be0:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24bf0:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24c00:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24c10:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24c20:	69636564 366c616d 00000034 69636564     decimal64...deci
   24c30:	316c616d 00003832 666c6168 00000000     mal128..half....
   24c40:	72616863 745f3631 00000000 72616863     char16_t....char
   24c50:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24c60:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24c70:	00000000 74727173 00000066 00000000     ....sqrtf.......

00024c80 <TWO52>:
   24c80:	00000000 43300000 00000000 c3300000     ......0C......0.

00024c90 <_global_impure_ptr>:
   24c90:	20000100 00000043 49534f50 00000058     ... C...POSIX...
   24ca0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24cb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24cc0:	00000000 33323130 37363534 62613938     ....0123456789ab
   24cd0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24ce0:	00000030                                0...

00024ce4 <blanks.8346>:
   24ce4:	20202020 20202020 20202020 20202020                     

00024cf4 <zeroes.8347>:
   24cf4:	30303030 30303030 30303030 30303030     0000000000000000
   24d04:	33323130 37363534 62613938 66656463     0123456789abcdef
   24d14:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24d24:	7a797877 00000000                       wxyz....

00024d2c <_ctype_>:
   24d2c:	20202000 20202020 28282020 20282828     .         ((((( 
   24d3c:	20202020 20202020 20202020 20202020                     
   24d4c:	10108820 10101010 10101010 10101010      ...............
   24d5c:	04040410 04040404 10040404 10101010     ................
   24d6c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24d7c:	01010101 01010101 01010101 10101010     ................
   24d8c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24d9c:	02020202 02020202 02020202 10101010     ................
   24dac:	00000020 00000000 00000000 00000000      ...............
	...
   24e30:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024e40 <__mprec_bigtens>:
   24e40:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24e50:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24e60:	7f73bf3c 75154fdd                       <.s..O.u

00024e68 <__mprec_tens>:
   24e68:	00000000 3ff00000 00000000 40240000     .......?......$@
   24e78:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24e88:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24e98:	00000000 412e8480 00000000 416312d0     .......A......cA
   24ea8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   24eb8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   24ec8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   24ed8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   24ee8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   24ef8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24f08:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24f18:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24f28:	79d99db4 44ea7843                       ...yCx.D

00024f30 <p05.7178>:
   24f30:	00000005 00000019 0000007d              ........}...

00024f3c <__EH_FRAME_BEGIN__>:
   24f3c:	00000000                                ....
