
DualAxisSynchronized.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000210e8  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  000250e8  000250e8  000250e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  000251e4  000251e4  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ac0  20000000  0002536c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ac0  00025e30  00030ac0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a97aa  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd8a  00000000  00000000  000da363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f0  00000000  00000000  000ea0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007ca8  00000000  00000000  000eb8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f3585  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014288  00000000  00000000  00115101  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f198f  00000000  00000000  00129389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000074bc  00000000  00000000  0021ad18  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023a63  00000000  00000000  002221d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 15 96 00 00 d1 42 00 00 d1 42 00 00     ... .....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	b1 94 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 85 93 00 00 95 93 00 00 a5 93 00 00     .B..............
    407c:	b5 93 00 00 c5 93 00 00 d5 93 00 00 e5 93 00 00     ................
    408c:	f5 93 00 00 05 94 00 00 15 94 00 00 25 94 00 00     ............%...
    409c:	35 94 00 00 45 94 00 00 51 94 00 00 61 94 00 00     5...E...Q...a...
    40ac:	71 94 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     q....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 19 93 00 00 d1 42 00 00 25 93 00 00     .B.......B..%...
    4104:	31 93 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     1....B...B...B..
    4114:	d1 42 00 00 3d 93 00 00 d1 42 00 00 49 93 00 00     .B..=....B..I...
    4124:	55 93 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     U....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 61 93 00 00 d1 42 00 00 6d 93 00 00     .B..a....B..m...
    4174:	79 93 00 00 00 00 00 00 00 00 00 00 d5 31 01 00     y............1..
    4184:	d9 31 01 00 dd 31 01 00 e1 31 01 00 0d 93 00 00     .1...1...1......
    4194:	05 95 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	81 94 00 00 d1 42 00 00 d1 42 00 00 99 94 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ac0 	.word	0x20000ac0
    4280:	00000000 	.word	0x00000000
    4284:	000250e4 	.word	0x000250e4

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	000250e4 	.word	0x000250e4
    42c4:	20000ac4 	.word	0x20000ac4
    42c8:	20000ab4 	.word	0x20000ab4
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01a fdf2 	bl	1eec0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f001 fd27 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    42fe:	f001 fd1f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f001 bd17 	b.w	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001490 	.word	0x20001490

00004318 <_Z11PrintAlertsv>:
 *    requires "motor0" and "motor1" to be defined as ClearCore motor connectors
 *
 * Returns: 
 *    none
 */
 void PrintAlerts(){
    4318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431a:	4cbd      	ldr	r4, [pc, #756]	; (4610 <_Z11PrintAlertsv+0x2f8>)
            if (!SendChar(buffer[iChar])) {
    431c:	4dbd      	ldr	r5, [pc, #756]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    431e:	f104 061a 	add.w	r6, r4, #26
    4322:	f814 1b01 	ldrb.w	r1, [r4], #1
    4326:	4628      	mov	r0, r5
    4328:	f001 fd0a 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    432c:	b140      	cbz	r0, 4340 <_Z11PrintAlertsv+0x28>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    432e:	42a6      	cmp	r6, r4
    4330:	d1f7      	bne.n	4322 <_Z11PrintAlertsv+0xa>
        return SendChar('\r') && SendChar('\n');
    4332:	210d      	movs	r1, #13
    4334:	48b7      	ldr	r0, [pc, #732]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4336:	f001 fd03 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    433a:	2800      	cmp	r0, #0
    433c:	f040 8198 	bne.w	4670 <_Z11PrintAlertsv+0x358>
	// report status of alerts on motor0
 	SerialPort.SendLine("Alerts present on motor0: ");
	if(motor0.AlertReg().bit.MotionCanceledInAlert){
    4340:	4db5      	ldr	r5, [pc, #724]	; (4618 <_Z11PrintAlertsv+0x300>)
    4342:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4346:	07dc      	lsls	r4, r3, #31
    4348:	f100 8092 	bmi.w	4470 <_Z11PrintAlertsv+0x158>
		SerialPort.SendLine("    MotionCanceledInAlert "); }
	if(motor0.AlertReg().bit.MotionCanceledPositiveLimit){
    434c:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4350:	0798      	lsls	r0, r3, #30
    4352:	f100 80f5 	bmi.w	4540 <_Z11PrintAlertsv+0x228>
		SerialPort.SendLine("    MotionCanceledPositiveLimit "); }
	if(motor0.AlertReg().bit.MotionCanceledNegativeLimit){
    4356:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    435a:	0759      	lsls	r1, r3, #29
    435c:	f100 80d6 	bmi.w	450c <_Z11PrintAlertsv+0x1f4>
		SerialPort.SendLine("    MotionCanceledNegativeLimit "); }
	if(motor0.AlertReg().bit.MotionCanceledSensorEStop){
    4360:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4364:	071a      	lsls	r2, r3, #28
    4366:	f100 80b7 	bmi.w	44d8 <_Z11PrintAlertsv+0x1c0>
		SerialPort.SendLine("    MotionCanceledSensorEStop "); }
	if(motor0.AlertReg().bit.MotionCanceledMotorDisabled){
    436a:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    436e:	06db      	lsls	r3, r3, #27
    4370:	f100 8098 	bmi.w	44a4 <_Z11PrintAlertsv+0x18c>
		SerialPort.SendLine("    MotionCanceledMotorDisabled "); }
	if(motor0.AlertReg().bit.MotorFaulted){
    4374:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    4378:	069f      	lsls	r7, r3, #26
    437a:	d461      	bmi.n	4440 <_Z11PrintAlertsv+0x128>
    437c:	4ca7      	ldr	r4, [pc, #668]	; (461c <_Z11PrintAlertsv+0x304>)
            if (!SendChar(buffer[iChar])) {
    437e:	4da5      	ldr	r5, [pc, #660]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4380:	f104 061a 	add.w	r6, r4, #26
    4384:	f814 1b01 	ldrb.w	r1, [r4], #1
    4388:	4628      	mov	r0, r5
    438a:	f001 fcd9 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    438e:	b140      	cbz	r0, 43a2 <_Z11PrintAlertsv+0x8a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4390:	42a6      	cmp	r6, r4
    4392:	d1f7      	bne.n	4384 <_Z11PrintAlertsv+0x6c>
        return SendChar('\r') && SendChar('\n');
    4394:	210d      	movs	r1, #13
    4396:	489f      	ldr	r0, [pc, #636]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4398:	f001 fcd2 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    439c:	2800      	cmp	r0, #0
    439e:	f040 816c 	bne.w	467a <_Z11PrintAlertsv+0x362>
		SerialPort.SendLine("    MotorFaulted ");
	}
	
	// report status of alerts on motor1
 	SerialPort.SendLine("Alerts present on motor1: ");
	if(motor1.AlertReg().bit.MotionCanceledInAlert){
    43a2:	4d9f      	ldr	r5, [pc, #636]	; (4620 <_Z11PrintAlertsv+0x308>)
    43a4:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    43a8:	07de      	lsls	r6, r3, #31
    43aa:	f100 8147 	bmi.w	463c <_Z11PrintAlertsv+0x324>
		SerialPort.SendLine("    MotionCanceledInAlert "); }
	if(motor1.AlertReg().bit.MotionCanceledPositiveLimit){
    43ae:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    43b2:	079c      	lsls	r4, r3, #30
    43b4:	f100 8112 	bmi.w	45dc <_Z11PrintAlertsv+0x2c4>
		SerialPort.SendLine("    MotionCanceledPositiveLimit "); }
	if(motor1.AlertReg().bit.MotionCanceledNegativeLimit){
    43b8:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    43bc:	0758      	lsls	r0, r3, #29
    43be:	f100 80f3 	bmi.w	45a8 <_Z11PrintAlertsv+0x290>
		SerialPort.SendLine("    MotionCanceledNegativeLimit "); }
	if(motor1.AlertReg().bit.MotionCanceledSensorEStop){
    43c2:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    43c6:	0719      	lsls	r1, r3, #28
    43c8:	f100 80d4 	bmi.w	4574 <_Z11PrintAlertsv+0x25c>
		SerialPort.SendLine("    MotionCanceledSensorEStop "); }
	if(motor1.AlertReg().bit.MotionCanceledMotorDisabled){
    43cc:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    43d0:	06da      	lsls	r2, r3, #27
    43d2:	d41d      	bmi.n	4410 <_Z11PrintAlertsv+0xf8>
		SerialPort.SendLine("    MotionCanceledMotorDisabled "); }
	if(motor1.AlertReg().bit.MotorFaulted){
    43d4:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
    43d8:	069b      	lsls	r3, r3, #26
    43da:	d400      	bmi.n	43de <_Z11PrintAlertsv+0xc6>
    43dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43de:	4c91      	ldr	r4, [pc, #580]	; (4624 <_Z11PrintAlertsv+0x30c>)
            if (!SendChar(buffer[iChar])) {
    43e0:	4d8c      	ldr	r5, [pc, #560]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    43e2:	f104 0611 	add.w	r6, r4, #17
    43e6:	f814 1b01 	ldrb.w	r1, [r4], #1
    43ea:	4628      	mov	r0, r5
    43ec:	f001 fca8 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43f0:	2800      	cmp	r0, #0
    43f2:	d0f3      	beq.n	43dc <_Z11PrintAlertsv+0xc4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43f4:	42a6      	cmp	r6, r4
    43f6:	d1f6      	bne.n	43e6 <_Z11PrintAlertsv+0xce>
        return SendChar('\r') && SendChar('\n');
    43f8:	210d      	movs	r1, #13
    43fa:	4886      	ldr	r0, [pc, #536]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    43fc:	f001 fca0 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4400:	2800      	cmp	r0, #0
    4402:	d0eb      	beq.n	43dc <_Z11PrintAlertsv+0xc4>
    4404:	210a      	movs	r1, #10
    4406:	4883      	ldr	r0, [pc, #524]	; (4614 <_Z11PrintAlertsv+0x2fc>)
		SerialPort.SendLine("    MotorFaulted ");
	}
 }
    4408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    440c:	f001 bc98 	b.w	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4410:	4c85      	ldr	r4, [pc, #532]	; (4628 <_Z11PrintAlertsv+0x310>)
            if (!SendChar(buffer[iChar])) {
    4412:	4e80      	ldr	r6, [pc, #512]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4414:	f104 0720 	add.w	r7, r4, #32
    4418:	f814 1b01 	ldrb.w	r1, [r4], #1
    441c:	4630      	mov	r0, r6
    441e:	f001 fc8f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4422:	2800      	cmp	r0, #0
    4424:	d0d6      	beq.n	43d4 <_Z11PrintAlertsv+0xbc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4426:	42bc      	cmp	r4, r7
    4428:	d1f6      	bne.n	4418 <_Z11PrintAlertsv+0x100>
        return SendChar('\r') && SendChar('\n');
    442a:	210d      	movs	r1, #13
    442c:	4879      	ldr	r0, [pc, #484]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    442e:	f001 fc87 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4432:	2800      	cmp	r0, #0
    4434:	d0ce      	beq.n	43d4 <_Z11PrintAlertsv+0xbc>
    4436:	210a      	movs	r1, #10
    4438:	4876      	ldr	r0, [pc, #472]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    443a:	f001 fc81 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    443e:	e7c9      	b.n	43d4 <_Z11PrintAlertsv+0xbc>
    4440:	4c78      	ldr	r4, [pc, #480]	; (4624 <_Z11PrintAlertsv+0x30c>)
            if (!SendChar(buffer[iChar])) {
    4442:	4d74      	ldr	r5, [pc, #464]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4444:	f104 0611 	add.w	r6, r4, #17
    4448:	f814 1b01 	ldrb.w	r1, [r4], #1
    444c:	4628      	mov	r0, r5
    444e:	f001 fc77 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4452:	2800      	cmp	r0, #0
    4454:	d092      	beq.n	437c <_Z11PrintAlertsv+0x64>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4456:	42a6      	cmp	r6, r4
    4458:	d1f6      	bne.n	4448 <_Z11PrintAlertsv+0x130>
        return SendChar('\r') && SendChar('\n');
    445a:	210d      	movs	r1, #13
    445c:	486d      	ldr	r0, [pc, #436]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    445e:	f001 fc6f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4462:	2800      	cmp	r0, #0
    4464:	d08a      	beq.n	437c <_Z11PrintAlertsv+0x64>
    4466:	210a      	movs	r1, #10
    4468:	486a      	ldr	r0, [pc, #424]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    446a:	f001 fc69 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    446e:	e785      	b.n	437c <_Z11PrintAlertsv+0x64>
    4470:	4c6e      	ldr	r4, [pc, #440]	; (462c <_Z11PrintAlertsv+0x314>)
            if (!SendChar(buffer[iChar])) {
    4472:	4e68      	ldr	r6, [pc, #416]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4474:	f104 071a 	add.w	r7, r4, #26
    4478:	f814 1b01 	ldrb.w	r1, [r4], #1
    447c:	4630      	mov	r0, r6
    447e:	f001 fc5f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4482:	2800      	cmp	r0, #0
    4484:	f43f af62 	beq.w	434c <_Z11PrintAlertsv+0x34>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4488:	42a7      	cmp	r7, r4
    448a:	d1f5      	bne.n	4478 <_Z11PrintAlertsv+0x160>
        return SendChar('\r') && SendChar('\n');
    448c:	210d      	movs	r1, #13
    448e:	4861      	ldr	r0, [pc, #388]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4490:	f001 fc56 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4494:	2800      	cmp	r0, #0
    4496:	f43f af59 	beq.w	434c <_Z11PrintAlertsv+0x34>
    449a:	210a      	movs	r1, #10
    449c:	485d      	ldr	r0, [pc, #372]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    449e:	f001 fc4f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44a2:	e753      	b.n	434c <_Z11PrintAlertsv+0x34>
    44a4:	4c60      	ldr	r4, [pc, #384]	; (4628 <_Z11PrintAlertsv+0x310>)
            if (!SendChar(buffer[iChar])) {
    44a6:	4e5b      	ldr	r6, [pc, #364]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    44a8:	f104 0720 	add.w	r7, r4, #32
    44ac:	f814 1b01 	ldrb.w	r1, [r4], #1
    44b0:	4630      	mov	r0, r6
    44b2:	f001 fc45 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44b6:	2800      	cmp	r0, #0
    44b8:	f43f af5c 	beq.w	4374 <_Z11PrintAlertsv+0x5c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44bc:	42bc      	cmp	r4, r7
    44be:	d1f5      	bne.n	44ac <_Z11PrintAlertsv+0x194>
        return SendChar('\r') && SendChar('\n');
    44c0:	210d      	movs	r1, #13
    44c2:	4854      	ldr	r0, [pc, #336]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    44c4:	f001 fc3c 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44c8:	2800      	cmp	r0, #0
    44ca:	f43f af53 	beq.w	4374 <_Z11PrintAlertsv+0x5c>
    44ce:	210a      	movs	r1, #10
    44d0:	4850      	ldr	r0, [pc, #320]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    44d2:	f001 fc35 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44d6:	e74d      	b.n	4374 <_Z11PrintAlertsv+0x5c>
    44d8:	4c55      	ldr	r4, [pc, #340]	; (4630 <_Z11PrintAlertsv+0x318>)
            if (!SendChar(buffer[iChar])) {
    44da:	4e4e      	ldr	r6, [pc, #312]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    44dc:	f104 071e 	add.w	r7, r4, #30
    44e0:	f814 1b01 	ldrb.w	r1, [r4], #1
    44e4:	4630      	mov	r0, r6
    44e6:	f001 fc2b 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44ea:	2800      	cmp	r0, #0
    44ec:	f43f af3d 	beq.w	436a <_Z11PrintAlertsv+0x52>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44f0:	42a7      	cmp	r7, r4
    44f2:	d1f5      	bne.n	44e0 <_Z11PrintAlertsv+0x1c8>
        return SendChar('\r') && SendChar('\n');
    44f4:	210d      	movs	r1, #13
    44f6:	4847      	ldr	r0, [pc, #284]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    44f8:	f001 fc22 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44fc:	2800      	cmp	r0, #0
    44fe:	f43f af34 	beq.w	436a <_Z11PrintAlertsv+0x52>
    4502:	210a      	movs	r1, #10
    4504:	4843      	ldr	r0, [pc, #268]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4506:	f001 fc1b 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    450a:	e72e      	b.n	436a <_Z11PrintAlertsv+0x52>
    450c:	4c49      	ldr	r4, [pc, #292]	; (4634 <_Z11PrintAlertsv+0x31c>)
            if (!SendChar(buffer[iChar])) {
    450e:	4e41      	ldr	r6, [pc, #260]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4510:	f104 0720 	add.w	r7, r4, #32
    4514:	f814 1b01 	ldrb.w	r1, [r4], #1
    4518:	4630      	mov	r0, r6
    451a:	f001 fc11 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    451e:	2800      	cmp	r0, #0
    4520:	f43f af1e 	beq.w	4360 <_Z11PrintAlertsv+0x48>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4524:	42bc      	cmp	r4, r7
    4526:	d1f5      	bne.n	4514 <_Z11PrintAlertsv+0x1fc>
        return SendChar('\r') && SendChar('\n');
    4528:	210d      	movs	r1, #13
    452a:	483a      	ldr	r0, [pc, #232]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    452c:	f001 fc08 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4530:	2800      	cmp	r0, #0
    4532:	f43f af15 	beq.w	4360 <_Z11PrintAlertsv+0x48>
    4536:	210a      	movs	r1, #10
    4538:	4836      	ldr	r0, [pc, #216]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    453a:	f001 fc01 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    453e:	e70f      	b.n	4360 <_Z11PrintAlertsv+0x48>
    4540:	4c3d      	ldr	r4, [pc, #244]	; (4638 <_Z11PrintAlertsv+0x320>)
            if (!SendChar(buffer[iChar])) {
    4542:	4e34      	ldr	r6, [pc, #208]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4544:	f104 0720 	add.w	r7, r4, #32
    4548:	f814 1b01 	ldrb.w	r1, [r4], #1
    454c:	4630      	mov	r0, r6
    454e:	f001 fbf7 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4552:	2800      	cmp	r0, #0
    4554:	f43f aeff 	beq.w	4356 <_Z11PrintAlertsv+0x3e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4558:	42a7      	cmp	r7, r4
    455a:	d1f5      	bne.n	4548 <_Z11PrintAlertsv+0x230>
        return SendChar('\r') && SendChar('\n');
    455c:	210d      	movs	r1, #13
    455e:	482d      	ldr	r0, [pc, #180]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4560:	f001 fbee 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4564:	2800      	cmp	r0, #0
    4566:	f43f aef6 	beq.w	4356 <_Z11PrintAlertsv+0x3e>
    456a:	210a      	movs	r1, #10
    456c:	4829      	ldr	r0, [pc, #164]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    456e:	f001 fbe7 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4572:	e6f0      	b.n	4356 <_Z11PrintAlertsv+0x3e>
    4574:	4c2e      	ldr	r4, [pc, #184]	; (4630 <_Z11PrintAlertsv+0x318>)
            if (!SendChar(buffer[iChar])) {
    4576:	4e27      	ldr	r6, [pc, #156]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4578:	f104 071e 	add.w	r7, r4, #30
    457c:	f814 1b01 	ldrb.w	r1, [r4], #1
    4580:	4630      	mov	r0, r6
    4582:	f001 fbdd 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4586:	2800      	cmp	r0, #0
    4588:	f43f af20 	beq.w	43cc <_Z11PrintAlertsv+0xb4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    458c:	42a7      	cmp	r7, r4
    458e:	d1f5      	bne.n	457c <_Z11PrintAlertsv+0x264>
        return SendChar('\r') && SendChar('\n');
    4590:	210d      	movs	r1, #13
    4592:	4820      	ldr	r0, [pc, #128]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    4594:	f001 fbd4 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4598:	2800      	cmp	r0, #0
    459a:	f43f af17 	beq.w	43cc <_Z11PrintAlertsv+0xb4>
    459e:	210a      	movs	r1, #10
    45a0:	481c      	ldr	r0, [pc, #112]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    45a2:	f001 fbcd 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45a6:	e711      	b.n	43cc <_Z11PrintAlertsv+0xb4>
    45a8:	4c22      	ldr	r4, [pc, #136]	; (4634 <_Z11PrintAlertsv+0x31c>)
            if (!SendChar(buffer[iChar])) {
    45aa:	4e1a      	ldr	r6, [pc, #104]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    45ac:	f104 0720 	add.w	r7, r4, #32
    45b0:	f814 1b01 	ldrb.w	r1, [r4], #1
    45b4:	4630      	mov	r0, r6
    45b6:	f001 fbc3 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ba:	2800      	cmp	r0, #0
    45bc:	f43f af01 	beq.w	43c2 <_Z11PrintAlertsv+0xaa>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45c0:	42a7      	cmp	r7, r4
    45c2:	d1f5      	bne.n	45b0 <_Z11PrintAlertsv+0x298>
        return SendChar('\r') && SendChar('\n');
    45c4:	210d      	movs	r1, #13
    45c6:	4813      	ldr	r0, [pc, #76]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    45c8:	f001 fbba 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45cc:	2800      	cmp	r0, #0
    45ce:	f43f aef8 	beq.w	43c2 <_Z11PrintAlertsv+0xaa>
    45d2:	210a      	movs	r1, #10
    45d4:	480f      	ldr	r0, [pc, #60]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    45d6:	f001 fbb3 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45da:	e6f2      	b.n	43c2 <_Z11PrintAlertsv+0xaa>
    45dc:	4c16      	ldr	r4, [pc, #88]	; (4638 <_Z11PrintAlertsv+0x320>)
            if (!SendChar(buffer[iChar])) {
    45de:	4e0d      	ldr	r6, [pc, #52]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    45e0:	f104 0720 	add.w	r7, r4, #32
    45e4:	f814 1b01 	ldrb.w	r1, [r4], #1
    45e8:	4630      	mov	r0, r6
    45ea:	f001 fba9 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ee:	2800      	cmp	r0, #0
    45f0:	f43f aee2 	beq.w	43b8 <_Z11PrintAlertsv+0xa0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45f4:	42bc      	cmp	r4, r7
    45f6:	d1f5      	bne.n	45e4 <_Z11PrintAlertsv+0x2cc>
        return SendChar('\r') && SendChar('\n');
    45f8:	210d      	movs	r1, #13
    45fa:	4806      	ldr	r0, [pc, #24]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    45fc:	f001 fba0 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4600:	2800      	cmp	r0, #0
    4602:	f43f aed9 	beq.w	43b8 <_Z11PrintAlertsv+0xa0>
    4606:	210a      	movs	r1, #10
    4608:	4802      	ldr	r0, [pc, #8]	; (4614 <_Z11PrintAlertsv+0x2fc>)
    460a:	f001 fb99 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    460e:	e6d3      	b.n	43b8 <_Z11PrintAlertsv+0xa0>
    4610:	00022bb4 	.word	0x00022bb4
    4614:	20001490 	.word	0x20001490
    4618:	20000b70 	.word	0x20000b70
    461c:	00022c8c 	.word	0x00022c8c
    4620:	20000cb8 	.word	0x20000cb8
    4624:	00022c78 	.word	0x00022c78
    4628:	00022c54 	.word	0x00022c54
    462c:	00022bd0 	.word	0x00022bd0
    4630:	00022c34 	.word	0x00022c34
    4634:	00022c10 	.word	0x00022c10
    4638:	00022bec 	.word	0x00022bec
    463c:	4c11      	ldr	r4, [pc, #68]	; (4684 <_Z11PrintAlertsv+0x36c>)
            if (!SendChar(buffer[iChar])) {
    463e:	4e12      	ldr	r6, [pc, #72]	; (4688 <_Z11PrintAlertsv+0x370>)
    4640:	f104 071a 	add.w	r7, r4, #26
    4644:	f814 1b01 	ldrb.w	r1, [r4], #1
    4648:	4630      	mov	r0, r6
    464a:	f001 fb79 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    464e:	2800      	cmp	r0, #0
    4650:	f43f aead 	beq.w	43ae <_Z11PrintAlertsv+0x96>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4654:	42bc      	cmp	r4, r7
    4656:	d1f5      	bne.n	4644 <_Z11PrintAlertsv+0x32c>
        return SendChar('\r') && SendChar('\n');
    4658:	210d      	movs	r1, #13
    465a:	480b      	ldr	r0, [pc, #44]	; (4688 <_Z11PrintAlertsv+0x370>)
    465c:	f001 fb70 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4660:	2800      	cmp	r0, #0
    4662:	f43f aea4 	beq.w	43ae <_Z11PrintAlertsv+0x96>
    4666:	210a      	movs	r1, #10
    4668:	4807      	ldr	r0, [pc, #28]	; (4688 <_Z11PrintAlertsv+0x370>)
    466a:	f001 fb69 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    466e:	e69e      	b.n	43ae <_Z11PrintAlertsv+0x96>
    4670:	210a      	movs	r1, #10
    4672:	4805      	ldr	r0, [pc, #20]	; (4688 <_Z11PrintAlertsv+0x370>)
    4674:	f001 fb64 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4678:	e662      	b.n	4340 <_Z11PrintAlertsv+0x28>
    467a:	210a      	movs	r1, #10
    467c:	4802      	ldr	r0, [pc, #8]	; (4688 <_Z11PrintAlertsv+0x370>)
    467e:	f001 fb5f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4682:	e68e      	b.n	43a2 <_Z11PrintAlertsv+0x8a>
    4684:	00022bd0 	.word	0x00022bd0
    4688:	20001490 	.word	0x20001490

0000468c <_Z16SynchronizedMovel>:
bool SynchronizedMove(int32_t distance) {
    468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (motor0.StatusReg().bit.AlertsPresent || motor1.StatusReg().bit.AlertsPresent ) {
    4690:	4b4e      	ldr	r3, [pc, #312]	; (47cc <_Z16SynchronizedMovel+0x140>)
    4692:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    4696:	059a      	lsls	r2, r3, #22
bool SynchronizedMove(int32_t distance) {
    4698:	b08a      	sub	sp, #40	; 0x28
    if (motor0.StatusReg().bit.AlertsPresent || motor1.StatusReg().bit.AlertsPresent ) {
    469a:	d404      	bmi.n	46a6 <_Z16SynchronizedMovel+0x1a>
    469c:	4b4c      	ldr	r3, [pc, #304]	; (47d0 <_Z16SynchronizedMovel+0x144>)
    469e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    46a2:	059b      	lsls	r3, r3, #22
    46a4:	d543      	bpl.n	472e <_Z16SynchronizedMovel+0xa2>
    46a6:	4c4b      	ldr	r4, [pc, #300]	; (47d4 <_Z16SynchronizedMovel+0x148>)
            if (!SendChar(buffer[iChar])) {
    46a8:	4d4b      	ldr	r5, [pc, #300]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    46aa:	f104 0615 	add.w	r6, r4, #21
    46ae:	f814 1b01 	ldrb.w	r1, [r4], #1
    46b2:	4628      	mov	r0, r5
    46b4:	f001 fb44 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46b8:	b138      	cbz	r0, 46ca <_Z16SynchronizedMovel+0x3e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    46ba:	42b4      	cmp	r4, r6
    46bc:	d1f7      	bne.n	46ae <_Z16SynchronizedMovel+0x22>
        return SendChar('\r') && SendChar('\n');
    46be:	210d      	movs	r1, #13
    46c0:	4845      	ldr	r0, [pc, #276]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    46c2:	f001 fb3d 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46c6:	2800      	cmp	r0, #0
    46c8:	d16c      	bne.n	47a4 <_Z16SynchronizedMovel+0x118>
    46ca:	4c44      	ldr	r4, [pc, #272]	; (47dc <_Z16SynchronizedMovel+0x150>)
            if (!SendChar(buffer[iChar])) {
    46cc:	4d42      	ldr	r5, [pc, #264]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
		PrintAlerts();
    46ce:	f7ff fe23 	bl	4318 <_Z11PrintAlertsv>
    46d2:	f104 063e 	add.w	r6, r4, #62	; 0x3e
    46d6:	f814 1b01 	ldrb.w	r1, [r4], #1
    46da:	4628      	mov	r0, r5
    46dc:	f001 fb30 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46e0:	b138      	cbz	r0, 46f2 <_Z16SynchronizedMovel+0x66>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    46e2:	42b4      	cmp	r4, r6
    46e4:	d1f7      	bne.n	46d6 <_Z16SynchronizedMovel+0x4a>
        return SendChar('\r') && SendChar('\n');
    46e6:	210d      	movs	r1, #13
    46e8:	483b      	ldr	r0, [pc, #236]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    46ea:	f001 fb29 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46ee:	2800      	cmp	r0, #0
    46f0:	d15d      	bne.n	47ae <_Z16SynchronizedMovel+0x122>
    46f2:	4c3b      	ldr	r4, [pc, #236]	; (47e0 <_Z16SynchronizedMovel+0x154>)
            if (!SendChar(buffer[iChar])) {
    46f4:	4d38      	ldr	r5, [pc, #224]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    46f6:	f104 060e 	add.w	r6, r4, #14
    46fa:	f814 1b01 	ldrb.w	r1, [r4], #1
    46fe:	4628      	mov	r0, r5
    4700:	f001 fb1e 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4704:	b138      	cbz	r0, 4716 <_Z16SynchronizedMovel+0x8a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4706:	42b4      	cmp	r4, r6
    4708:	d1f7      	bne.n	46fa <_Z16SynchronizedMovel+0x6e>
        return SendChar('\r') && SendChar('\n');
    470a:	210d      	movs	r1, #13
    470c:	4832      	ldr	r0, [pc, #200]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    470e:	f001 fb17 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4712:	2800      	cmp	r0, #0
    4714:	d150      	bne.n	47b8 <_Z16SynchronizedMovel+0x12c>
    4716:	210d      	movs	r1, #13
    4718:	482f      	ldr	r0, [pc, #188]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    471a:	f001 fb11 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    471e:	2800      	cmp	r0, #0
    4720:	d13b      	bne.n	479a <_Z16SynchronizedMovel+0x10e>
        return false;
    4722:	f04f 0800 	mov.w	r8, #0
}
    4726:	4640      	mov	r0, r8
    4728:	b00a      	add	sp, #40	; 0x28
    472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    472e:	4c2d      	ldr	r4, [pc, #180]	; (47e4 <_Z16SynchronizedMovel+0x158>)
            if (!SendChar(buffer[iChar])) {
    4730:	4d29      	ldr	r5, [pc, #164]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    4732:	4607      	mov	r7, r0
    4734:	f104 0611 	add.w	r6, r4, #17
    4738:	f814 1b01 	ldrb.w	r1, [r4], #1
    473c:	4628      	mov	r0, r5
    473e:	f001 faff 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4742:	b108      	cbz	r0, 4748 <_Z16SynchronizedMovel+0xbc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4744:	42b4      	cmp	r4, r6
    4746:	d1f7      	bne.n	4738 <_Z16SynchronizedMovel+0xac>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[2 + 8 * sizeof(number)];
        itoa(number, strRep, radix);
    4748:	a901      	add	r1, sp, #4
    474a:	220a      	movs	r2, #10
    474c:	4638      	mov	r0, r7
    474e:	f019 fb09 	bl	1dd64 <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4752:	a801      	add	r0, sp, #4
    4754:	f01a fbb4 	bl	1eec0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4758:	b160      	cbz	r0, 4774 <_Z16SynchronizedMovel+0xe8>
    475a:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    475c:	4e1e      	ldr	r6, [pc, #120]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    475e:	1825      	adds	r5, r4, r0
    4760:	e001      	b.n	4766 <_Z16SynchronizedMovel+0xda>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4762:	42a5      	cmp	r5, r4
    4764:	d006      	beq.n	4774 <_Z16SynchronizedMovel+0xe8>
            if (!SendChar(buffer[iChar])) {
    4766:	f814 1b01 	ldrb.w	r1, [r4], #1
    476a:	4630      	mov	r0, r6
    476c:	f001 fae8 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4770:	2800      	cmp	r0, #0
    4772:	d1f6      	bne.n	4762 <_Z16SynchronizedMovel+0xd6>
        return SendChar('\r') && SendChar('\n');
    4774:	210d      	movs	r1, #13
    4776:	4818      	ldr	r0, [pc, #96]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    4778:	f001 fae2 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    477c:	bb08      	cbnz	r0, 47c2 <_Z16SynchronizedMovel+0x136>
    motor0.Move(distance);
    477e:	4639      	mov	r1, r7
    4780:	2201      	movs	r2, #1
    4782:	4812      	ldr	r0, [pc, #72]	; (47cc <_Z16SynchronizedMovel+0x140>)
    4784:	f000 ffee 	bl	5764 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>
    motor1.Move(distance);
    4788:	4639      	mov	r1, r7
    478a:	2201      	movs	r2, #1
    478c:	4810      	ldr	r0, [pc, #64]	; (47d0 <_Z16SynchronizedMovel+0x144>)
    478e:	f000 ffe9 	bl	5764 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>
}
    4792:	4640      	mov	r0, r8
    4794:	b00a      	add	sp, #40	; 0x28
    4796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    479a:	210a      	movs	r1, #10
    479c:	480e      	ldr	r0, [pc, #56]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    479e:	f001 facf 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47a2:	e7be      	b.n	4722 <_Z16SynchronizedMovel+0x96>
    47a4:	210a      	movs	r1, #10
    47a6:	480c      	ldr	r0, [pc, #48]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    47a8:	f001 faca 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47ac:	e78d      	b.n	46ca <_Z16SynchronizedMovel+0x3e>
    47ae:	210a      	movs	r1, #10
    47b0:	4809      	ldr	r0, [pc, #36]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    47b2:	f001 fac5 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47b6:	e79c      	b.n	46f2 <_Z16SynchronizedMovel+0x66>
    47b8:	210a      	movs	r1, #10
    47ba:	4807      	ldr	r0, [pc, #28]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    47bc:	f001 fac0 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47c0:	e7a9      	b.n	4716 <_Z16SynchronizedMovel+0x8a>
    47c2:	210a      	movs	r1, #10
    47c4:	4804      	ldr	r0, [pc, #16]	; (47d8 <_Z16SynchronizedMovel+0x14c>)
    47c6:	f001 fabb 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47ca:	e7d8      	b.n	477e <_Z16SynchronizedMovel+0xf2>
    47cc:	20000b70 	.word	0x20000b70
    47d0:	20000cb8 	.word	0x20000cb8
    47d4:	00022ca8 	.word	0x00022ca8
    47d8:	20001490 	.word	0x20001490
    47dc:	00022cc0 	.word	0x00022cc0
    47e0:	00022d00 	.word	0x00022d00
    47e4:	00022d10 	.word	0x00022d10

000047e8 <main>:
int main() {
    47e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MotorMgr.MotorInputClocking(MotorManager::CLOCK_RATE_NORMAL);
    47ec:	4b94      	ldr	r3, [pc, #592]	; (4a40 <main+0x258>)
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    47ee:	f8df 9268 	ldr.w	r9, [pc, #616]	; 4a58 <main+0x270>
    47f2:	681c      	ldr	r4, [r3, #0]
int main() {
    47f4:	b08b      	sub	sp, #44	; 0x2c
    MotorMgr.MotorInputClocking(MotorManager::CLOCK_RATE_NORMAL);
    47f6:	2101      	movs	r1, #1
    47f8:	4620      	mov	r0, r4
    47fa:	f006 fae9 	bl	add0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>
                          Connector::CPM_MODE_STEP_AND_DIR);
    47fe:	4620      	mov	r0, r4
    4800:	220a      	movs	r2, #10
    4802:	2102      	movs	r1, #2
    4804:	f006 fb74 	bl	aef0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    4808:	f899 30d8 	ldrb.w	r3, [r9, #216]	; 0xd8
    480c:	2b02      	cmp	r3, #2
    480e:	d008      	beq.n	4822 <main+0x3a>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    4810:	498c      	ldr	r1, [pc, #560]	; (4a44 <main+0x25c>)
    4812:	f8c9 10f0 	str.w	r1, [r9, #240]	; 0xf0
        m_hlfbMode = newMode;
    4816:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    4818:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    481a:	f889 20d8 	strb.w	r2, [r9, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    481e:	f889 312f 	strb.w	r3, [r9, #303]	; 0x12f
        if (m_hlfbMode == newMode) {
    4822:	f8df a240 	ldr.w	sl, [pc, #576]	; 4a64 <main+0x27c>
    4826:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
    482a:	2b02      	cmp	r3, #2
    482c:	d008      	beq.n	4840 <main+0x58>
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    482e:	4985      	ldr	r1, [pc, #532]	; (4a44 <main+0x25c>)
    4830:	f8ca 10f0 	str.w	r1, [sl, #240]	; 0xf0
        m_hlfbMode = newMode;
    4834:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    4836:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    4838:	f88a 20d8 	strb.w	r2, [sl, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    483c:	f88a 312f 	strb.w	r3, [sl, #303]	; 0x12f
    motor0.VelMax(velocityLimit);
    4840:	4c81      	ldr	r4, [pc, #516]	; (4a48 <main+0x260>)
    4842:	4882      	ldr	r0, [pc, #520]	; (4a4c <main+0x264>)
    4844:	6821      	ldr	r1, [r4, #0]
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4846:	4e82      	ldr	r6, [pc, #520]	; (4a50 <main+0x268>)
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    4848:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    484a:	2301      	movs	r3, #1
                m_hlfbCarrierLossStateChange_ms =
    484c:	f8c9 20e8 	str.w	r2, [r9, #232]	; 0xe8
    4850:	f8ca 20e8 	str.w	r2, [sl, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    4854:	f889 30e4 	strb.w	r3, [r9, #228]	; 0xe4
    4858:	f88a 30e4 	strb.w	r3, [sl, #228]	; 0xe4
    motor0.VelMax(velocityLimit);
    485c:	f006 ffc0 	bl	b7e0 <_ZN9ClearCore13StepGenerator6VelMaxEm>
    motor1.VelMax(velocityLimit);
    4860:	6821      	ldr	r1, [r4, #0]
    4862:	487c      	ldr	r0, [pc, #496]	; (4a54 <main+0x26c>)
    4864:	f006 ffbc 	bl	b7e0 <_ZN9ClearCore13StepGenerator6VelMaxEm>
    motor0.AccelMax(accelerationLimit);
    4868:	6861      	ldr	r1, [r4, #4]
    486a:	4878      	ldr	r0, [pc, #480]	; (4a4c <main+0x264>)
    486c:	f006 ffe0 	bl	b830 <_ZN9ClearCore13StepGenerator8AccelMaxEm>
    motor1.AccelMax(accelerationLimit);
    4870:	6861      	ldr	r1, [r4, #4]
    4872:	4878      	ldr	r0, [pc, #480]	; (4a54 <main+0x26c>)
    4874:	f006 ffdc 	bl	b830 <_ZN9ClearCore13StepGenerator8AccelMaxEm>
    SerialPort.Speed(baudRate);
    4878:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    487c:	4630      	mov	r0, r6
    487e:	f001 fa47 	bl	5d10 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    4882:	f005 f88b 	bl	999c <Milliseconds>
    4886:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    4888:	4630      	mov	r0, r6
    488a:	f001 fa35 	bl	5cf8 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    488e:	f241 3487 	movw	r4, #4999	; 0x1387
    4892:	4630      	mov	r0, r6
    4894:	f001 fa2a 	bl	5cec <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    4898:	2800      	cmp	r0, #0
    489a:	f000 80ca 	beq.w	4a32 <main+0x24a>
    motor0.EnableRequest(true);
    489e:	2101      	movs	r1, #1
    48a0:	486d      	ldr	r0, [pc, #436]	; (4a58 <main+0x270>)
            SerialPort.SendLine("Waiting for HLFB to assert on both motors");
    48a2:	4d6e      	ldr	r5, [pc, #440]	; (4a5c <main+0x274>)
    motor0.EnableRequest(true);
    48a4:	f000 faae 	bl	4e04 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor 0 Enabled");
    48a8:	486d      	ldr	r0, [pc, #436]	; (4a60 <main+0x278>)
    48aa:	f7ff fd13 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    motor1.EnableRequest(true);
    48ae:	2101      	movs	r1, #1
    48b0:	486c      	ldr	r0, [pc, #432]	; (4a64 <main+0x27c>)
    48b2:	f000 faa7 	bl	4e04 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor 1 Enabled");
    48b6:	486c      	ldr	r0, [pc, #432]	; (4a68 <main+0x280>)
    48b8:	f7ff fd0c 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    uint32_t lastStatusTime = Milliseconds();
    48bc:	f005 f86e 	bl	999c <Milliseconds>
    48c0:	4604      	mov	r4, r0
    SerialPort.SendLine("Waiting for HLFB...");
    48c2:	486a      	ldr	r0, [pc, #424]	; (4a6c <main+0x284>)
    48c4:	f7ff fd06 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    while ( (motor0.HlfbState() != MotorDriver::HLFB_ASSERTED ||
    48c8:	f899 30f4 	ldrb.w	r3, [r9, #244]	; 0xf4
            !motor0.StatusReg().bit.AlertsPresent && 
    48cc:	2b01      	cmp	r3, #1
    48ce:	f000 808f 	beq.w	49f0 <main+0x208>
    48d2:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
            motor1.HlfbState() != MotorDriver::HLFB_ASSERTED) &&
    48d6:	0598      	lsls	r0, r3, #22
    48d8:	d403      	bmi.n	48e2 <main+0xfa>
            !motor1.StatusReg().bit.AlertsPresent) {
    48da:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
            !motor0.StatusReg().bit.AlertsPresent && 
    48de:	0599      	lsls	r1, r3, #22
    48e0:	d574      	bpl.n	49cc <main+0x1e4>
    if (motor0.StatusReg().bit.AlertsPresent || 
    48e2:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    48e6:	059b      	lsls	r3, r3, #22
    48e8:	f100 808c 	bmi.w	4a04 <main+0x21c>
		motor1.StatusReg().bit.AlertsPresent) {
    48ec:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    if (motor0.StatusReg().bit.AlertsPresent || 
    48f0:	059a      	lsls	r2, r3, #22
    48f2:	f100 8087 	bmi.w	4a04 <main+0x21c>
		SerialPort.SendLine("Motor Ready");	
    48f6:	485e      	ldr	r0, [pc, #376]	; (4a70 <main+0x288>)
    48f8:	f7ff fcec 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
	uint32_t now = Milliseconds();
    48fc:	f005 f84e 	bl	999c <Milliseconds>
            if (!SendChar(buffer[iChar])) {
    4900:	4e53      	ldr	r6, [pc, #332]	; (4a50 <main+0x268>)
    4902:	4604      	mov	r4, r0
	uint32_t lastMotorTime = now;
    4904:	4680      	mov	r8, r0
	int motorFlip = 1;
    4906:	2701      	movs	r7, #1
		now = Milliseconds();
    4908:	f005 f848 	bl	999c <Milliseconds>
		if (now - lastTelemTime > telemInterval) {
    490c:	1b03      	subs	r3, r0, r4
    490e:	2b0a      	cmp	r3, #10
		now = Milliseconds();
    4910:	4605      	mov	r5, r0
		if (now - lastTelemTime > telemInterval) {
    4912:	d814      	bhi.n	493e <main+0x156>
		if (now - lastMotorTime > motorInterval) {
    4914:	eba5 0208 	sub.w	r2, r5, r8
    4918:	f241 3388 	movw	r3, #5000	; 0x1388
    491c:	429a      	cmp	r2, r3
    491e:	d9f3      	bls.n	4908 <main+0x120>
			SynchronizedMove(motorFlip*800);
    4920:	f44f 7048 	mov.w	r0, #800	; 0x320
    4924:	fb00 f007 	mul.w	r0, r0, r7
    4928:	f7ff feb0 	bl	468c <_Z16SynchronizedMovel>
		now = Milliseconds();
    492c:	f005 f836 	bl	999c <Milliseconds>
		if (now - lastTelemTime > telemInterval) {
    4930:	1b03      	subs	r3, r0, r4
    4932:	2b0a      	cmp	r3, #10
			lastMotorTime = now;
    4934:	46a8      	mov	r8, r5
			motorFlip = motorFlip*-1;
    4936:	f1c7 0700 	rsb	r7, r7, #0
		now = Milliseconds();
    493a:	4605      	mov	r5, r0
		if (now - lastTelemTime > telemInterval) {
    493c:	d9ea      	bls.n	4914 <main+0x12c>
			SerialPort.SendLine(ConnectorM0.PositionRefCommanded());
    493e:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
        itoa(number, strRep, radix);
    4942:	220a      	movs	r2, #10
    4944:	a901      	add	r1, sp, #4
    4946:	f019 fa0d 	bl	1dd64 <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    494a:	a801      	add	r0, sp, #4
    494c:	f01a fab8 	bl	1eec0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4950:	b168      	cbz	r0, 496e <main+0x186>
    4952:	ab01      	add	r3, sp, #4
    4954:	eb03 0b00 	add.w	fp, r3, r0
    4958:	461c      	mov	r4, r3
    495a:	e001      	b.n	4960 <main+0x178>
    495c:	455c      	cmp	r4, fp
    495e:	d006      	beq.n	496e <main+0x186>
            if (!SendChar(buffer[iChar])) {
    4960:	f814 1b01 	ldrb.w	r1, [r4], #1
    4964:	4630      	mov	r0, r6
    4966:	f001 f9eb 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    496a:	2800      	cmp	r0, #0
    496c:	d1f6      	bne.n	495c <main+0x174>
        return SendChar('\r') && SendChar('\n');
    496e:	210d      	movs	r1, #13
    4970:	4630      	mov	r0, r6
    4972:	f001 f9e5 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4976:	bb20      	cbnz	r0, 49c2 <main+0x1da>
			SerialPort.SendLine(ConnectorM1.PositionRefCommanded());
    4978:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        itoa(number, strRep, radix);
    497c:	220a      	movs	r2, #10
    497e:	a901      	add	r1, sp, #4
    4980:	f019 f9f0 	bl	1dd64 <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4984:	a801      	add	r0, sp, #4
    4986:	f01a fa9b 	bl	1eec0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    498a:	b168      	cbz	r0, 49a8 <main+0x1c0>
    498c:	ab01      	add	r3, sp, #4
    498e:	eb03 0b00 	add.w	fp, r3, r0
    4992:	461c      	mov	r4, r3
    4994:	e001      	b.n	499a <main+0x1b2>
    4996:	45a3      	cmp	fp, r4
    4998:	d006      	beq.n	49a8 <main+0x1c0>
            if (!SendChar(buffer[iChar])) {
    499a:	f814 1b01 	ldrb.w	r1, [r4], #1
    499e:	4630      	mov	r0, r6
    49a0:	f001 f9ce 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49a4:	2800      	cmp	r0, #0
    49a6:	d1f6      	bne.n	4996 <main+0x1ae>
        return SendChar('\r') && SendChar('\n');
    49a8:	210d      	movs	r1, #13
    49aa:	4630      	mov	r0, r6
    49ac:	f001 f9c8 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49b0:	b908      	cbnz	r0, 49b6 <main+0x1ce>
			lastTelemTime = now;
    49b2:	462c      	mov	r4, r5
    49b4:	e7ae      	b.n	4914 <main+0x12c>
    49b6:	210a      	movs	r1, #10
    49b8:	4630      	mov	r0, r6
    49ba:	f001 f9c1 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49be:	462c      	mov	r4, r5
    49c0:	e7a8      	b.n	4914 <main+0x12c>
    49c2:	210a      	movs	r1, #10
    49c4:	4630      	mov	r0, r6
    49c6:	f001 f9bb 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49ca:	e7d5      	b.n	4978 <main+0x190>
        if (Milliseconds() - lastStatusTime > 1000) {
    49cc:	f004 ffe6 	bl	999c <Milliseconds>
    49d0:	1b00      	subs	r0, r0, r4
    49d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    49d6:	f67f af77 	bls.w	48c8 <main+0xe0>
            SerialPort.SendLine("Waiting for HLFB to assert on both motors");
    49da:	4628      	mov	r0, r5
    49dc:	f7ff fc7a 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
            lastStatusTime = Milliseconds();
    49e0:	f004 ffdc 	bl	999c <Milliseconds>
    while ( (motor0.HlfbState() != MotorDriver::HLFB_ASSERTED ||
    49e4:	f899 30f4 	ldrb.w	r3, [r9, #244]	; 0xf4
            !motor0.StatusReg().bit.AlertsPresent && 
    49e8:	2b01      	cmp	r3, #1
            lastStatusTime = Milliseconds();
    49ea:	4604      	mov	r4, r0
            !motor0.StatusReg().bit.AlertsPresent && 
    49ec:	f47f af71 	bne.w	48d2 <main+0xea>
            motor1.HlfbState() != MotorDriver::HLFB_ASSERTED) &&
    49f0:	f89a 30f4 	ldrb.w	r3, [sl, #244]	; 0xf4
    while ( (motor0.HlfbState() != MotorDriver::HLFB_ASSERTED ||
    49f4:	2b01      	cmp	r3, #1
    49f6:	f47f af6c 	bne.w	48d2 <main+0xea>
    if (motor0.StatusReg().bit.AlertsPresent || 
    49fa:	f8d9 3118 	ldr.w	r3, [r9, #280]	; 0x118
    49fe:	059b      	lsls	r3, r3, #22
    4a00:	f57f af74 	bpl.w	48ec <main+0x104>
		SerialPort.SendLine("Motor alert detected.");		
    4a04:	481b      	ldr	r0, [pc, #108]	; (4a74 <main+0x28c>)
    4a06:	f7ff fc65 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
		PrintAlerts();
    4a0a:	f7ff fc85 	bl	4318 <_Z11PrintAlertsv>
			SerialPort.SendLine("Enable automatic alert handling by setting HANDLE_ALERTS to 1.");
    4a0e:	481a      	ldr	r0, [pc, #104]	; (4a78 <main+0x290>)
    4a10:	f7ff fc60 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
		SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");		
    4a14:	4819      	ldr	r0, [pc, #100]	; (4a7c <main+0x294>)
    4a16:	f7ff fc5d 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    4a1a:	210d      	movs	r1, #13
    4a1c:	480c      	ldr	r0, [pc, #48]	; (4a50 <main+0x268>)
    4a1e:	f001 f98f 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a22:	2800      	cmp	r0, #0
    4a24:	f43f af6a 	beq.w	48fc <main+0x114>
    4a28:	210a      	movs	r1, #10
    4a2a:	4809      	ldr	r0, [pc, #36]	; (4a50 <main+0x268>)
    4a2c:	f001 f988 	bl	5d40 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a30:	e764      	b.n	48fc <main+0x114>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4a32:	f004 ffb3 	bl	999c <Milliseconds>
    4a36:	1b40      	subs	r0, r0, r5
    4a38:	42a0      	cmp	r0, r4
    4a3a:	f67f af2a 	bls.w	4892 <main+0xaa>
    4a3e:	e72e      	b.n	489e <main+0xb6>
    4a40:	20001c0c 	.word	0x20001c0c
    4a44:	c61c3c00 	.word	0xc61c3c00
    4a48:	20000000 	.word	0x20000000
    4a4c:	20000ba0 	.word	0x20000ba0
    4a50:	20001490 	.word	0x20001490
    4a54:	20000ce8 	.word	0x20000ce8
    4a58:	20000b70 	.word	0x20000b70
    4a5c:	00022d58 	.word	0x00022d58
    4a60:	00022d24 	.word	0x00022d24
    4a64:	20000cb8 	.word	0x20000cb8
    4a68:	00022d34 	.word	0x00022d34
    4a6c:	00022d44 	.word	0x00022d44
    4a70:	00022d84 	.word	0x00022d84
    4a74:	00022ca8 	.word	0x00022ca8
    4a78:	00022cc0 	.word	0x00022cc0
    4a7c:	00022d90 	.word	0x00022d90

00004a80 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    4a80:	2000      	movs	r0, #0
    4a82:	4770      	bx	lr

00004a84 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4a84:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4a88:	4770      	bx	lr
    4a8a:	bf00      	nop

00004a8c <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    4a8c:	2006      	movs	r0, #6
    4a8e:	4770      	bx	lr

00004a90 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4a90:	2001      	movs	r0, #1
    4a92:	4770      	bx	lr

00004a94 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    4a94:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    4a98:	4770      	bx	lr
    4a9a:	bf00      	nop

00004a9c <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4a9c:	7980      	ldrb	r0, [r0, #6]
    4a9e:	4770      	bx	lr

00004aa0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    4aa0:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4aa2:	7983      	ldrb	r3, [r0, #6]
    4aa4:	428b      	cmp	r3, r1
    4aa6:	f000 80a7 	beq.w	4bf8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    4aaa:	f1a1 0309 	sub.w	r3, r1, #9
    4aae:	460d      	mov	r5, r1
    4ab0:	4604      	mov	r4, r0
    4ab2:	2b03      	cmp	r3, #3
    4ab4:	f200 80a2 	bhi.w	4bfc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    4ab8:	e8df f003 	tbb	[pc, r3]
    4abc:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    4ac0:	3030      	adds	r0, #48	; 0x30
    4ac2:	f006 fe45 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4ac6:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    4ac8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    4acc:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    4ace:	2200      	movs	r2, #0
    4ad0:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    4ad4:	b13b      	cbz	r3, 4ae6 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    4ad6:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    4ada:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    4ade:	680b      	ldr	r3, [r1, #0]
    4ae0:	4013      	ands	r3, r2
    4ae2:	d1fc      	bne.n	4ade <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    4ae4:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    4ae6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4aea:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4aec:	2200      	movs	r2, #0
    4aee:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4af2:	b13b      	cbz	r3, 4b04 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    4af4:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4af8:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4afc:	680b      	ldr	r3, [r1, #0]
    4afe:	4013      	ands	r3, r2
    4b00:	d1fc      	bne.n	4afc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    4b02:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4b04:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4b08:	4a3d      	ldr	r2, [pc, #244]	; (4c00 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4b0a:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4b0e:	7889      	ldrb	r1, [r1, #2]
    4b10:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4b14:	440b      	add	r3, r1
            m_mode = newMode;
    4b16:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4b18:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4b1c:	f041 0101 	orr.w	r1, r1, #1
    4b20:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4b24:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4b28:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4b2c:	7889      	ldrb	r1, [r1, #2]
    4b2e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4b32:	440b      	add	r3, r1
    4b34:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4b38:	f042 0201 	orr.w	r2, r2, #1
    4b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4b40:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4b42:	b662      	cpsie	i
    return true;
    4b44:	2001      	movs	r0, #1
    4b46:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4b48:	3030      	adds	r0, #48	; 0x30
    4b4a:	f006 fe01 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4b4e:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4b50:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4b54:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4b56:	2200      	movs	r2, #0
    4b58:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4b5c:	b13b      	cbz	r3, 4b6e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4b5e:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4b62:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4b66:	680b      	ldr	r3, [r1, #0]
    4b68:	4013      	ands	r3, r2
    4b6a:	d1fc      	bne.n	4b66 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4b6c:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4b6e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4b72:	4a23      	ldr	r2, [pc, #140]	; (4c00 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4b74:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4b78:	7889      	ldrb	r1, [r1, #2]
    4b7a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4b7e:	440b      	add	r3, r1
    4b80:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4b84:	f36f 0100 	bfc	r1, #0, #1
    4b88:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4b8c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4b90:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4b94:	7889      	ldrb	r1, [r1, #2]
    4b96:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4b9a:	440b      	add	r3, r1
    4b9c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4ba0:	f042 0201 	orr.w	r2, r2, #1
    4ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4ba8:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4baa:	b662      	cpsie	i
    return true;
    4bac:	2001      	movs	r0, #1
    4bae:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4bb0:	3030      	adds	r0, #48	; 0x30
    4bb2:	f006 fdcd 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4bb6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4bba:	4a11      	ldr	r2, [pc, #68]	; (4c00 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4bbc:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4bc0:	7889      	ldrb	r1, [r1, #2]
    4bc2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4bc6:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4bc8:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4bca:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4bce:	f36f 0100 	bfc	r1, #0, #1
    4bd2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4bd6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4bda:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4bde:	7889      	ldrb	r1, [r1, #2]
    4be0:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4be4:	440b      	add	r3, r1
    return true;
    4be6:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4be8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4bec:	f36f 0200 	bfc	r2, #0, #1
    4bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4bf4:	71a5      	strb	r5, [r4, #6]
            break;
    4bf6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    4bf8:	2001      	movs	r0, #1
    4bfa:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    4bfc:	2000      	movs	r0, #0
}
    4bfe:	bd38      	pop	{r3, r4, r5, pc}
    4c00:	41008000 	.word	0x41008000

00004c04 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4c04:	7983      	ldrb	r3, [r0, #6]
    4c06:	2b0a      	cmp	r3, #10
    4c08:	d00f      	beq.n	4c2a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4c0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4c0e:	b1a3      	cbz	r3, 4c3a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    4c10:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4c14:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4c18:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4c1c:	01db      	lsls	r3, r3, #7
    4c1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4c26:	615a      	str	r2, [r3, #20]
    4c28:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    4c2a:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4c2e:	079b      	lsls	r3, r3, #30
    4c30:	d5eb      	bpl.n	4c0a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    4c32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4c36:	2b00      	cmp	r3, #0
    4c38:	d0ea      	beq.n	4c10 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4c3a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4c3e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4c42:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4c46:	01db      	lsls	r3, r3, #7
    4c48:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4c50:	619a      	str	r2, [r3, #24]
    4c52:	4770      	bx	lr

00004c54 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4c54:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4c58:	e7d4      	b.n	4c04 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    4c5a:	bf00      	nop

00004c5c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c60:	9f08      	ldr	r7, [sp, #32]
    4c62:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4c66:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    4c6a:	4604      	mov	r4, r0
    4c6c:	4616      	mov	r6, r2
    4c6e:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4c70:	463a      	mov	r2, r7
    4c72:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4c74:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4c76:	f009 fcdb 	bl	e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4c7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4c7e:	f006 fd35 	bl	b6ec <_ZN9ClearCore13StepGeneratorC1Ev>
    4c82:	4b5c      	ldr	r3, [pc, #368]	; (4df4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4c84:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4c88:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    4c8c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    4c90:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    4c94:	6322      	str	r2, [r4, #48]	; 0x30
    4c96:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    4c9a:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    4c9c:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    4c9e:	f8df a160 	ldr.w	sl, [pc, #352]	; 4e00 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4ca2:	4f55      	ldr	r7, [pc, #340]	; (4df8 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    4ca4:	2101      	movs	r1, #1
    4ca6:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4caa:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    4cae:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    4cb0:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    4cb4:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4cb8:	f04f 0e02 	mov.w	lr, #2
    4cbc:	2200      	movs	r2, #0
    4cbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4cc2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    4cc6:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    4cca:	f04f 33ff 	mov.w	r3, #4294967295
    4cce:	f04f 0e19 	mov.w	lr, #25
    4cd2:	f04f 0903 	mov.w	r9, #3
    4cd6:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    4cda:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    4cde:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    4ce2:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    4ce6:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    4cea:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    4cee:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    4cf2:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    4cf6:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    4cfa:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    4cfe:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    4d02:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    4d06:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    4d0a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    4d0e:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    4d12:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    4d16:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    4d1a:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    4d1e:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    4d22:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    4d26:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    4d2a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4d2e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4d32:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    4d36:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    4d3a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    4d3e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    4d42:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    4d46:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    4d4a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    4d4e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    4d52:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    4d56:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    4d5a:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    4d5e:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    4d62:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    4d66:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    4d68:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    4d6c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    4d70:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4d74:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4d76:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4d78:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4d7c:	2b04      	cmp	r3, #4
    4d7e:	bf9c      	itt	ls
    4d80:	4a1e      	ldrls	r2, [pc, #120]	; (4dfc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4d82:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4d84:	fbb6 f1f2 	udiv	r1, r6, r2
    4d88:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4d90:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4d92:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4d96:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4d9e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4da2:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4da4:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4da8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4dac:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4db0:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4db2:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4db4:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    4db8:	2a04      	cmp	r2, #4
    4dba:	bf9a      	itte	ls
    4dbc:	4b0f      	ldrls	r3, [pc, #60]	; (4dfc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4dbe:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4dc0:	2200      	movhi	r2, #0
    4dc2:	fbb0 f3f2 	udiv	r3, r0, r2
    4dc6:	fb02 0313 	mls	r3, r2, r3, r0
    4dca:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4dd0:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4dd4:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4dd8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4ddc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4de0:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4de2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4de6:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4dea:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    4dee:	4620      	mov	r0, r4
    4df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4df4:	00022df8 	.word	0x00022df8
    4df8:	00022ddc 	.word	0x00022ddc
    4dfc:	00022dd4 	.word	0x00022dd4
    4e00:	c61c3c00 	.word	0xc61c3c00

00004e04 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    4e04:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4e06:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    4e0a:	b083      	sub	sp, #12
    4e0c:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d171      	bne.n	4ef6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    4e12:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    4e16:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    4e1a:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    4e1e:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    4e22:	428a      	cmp	r2, r1
    4e24:	d031      	beq.n	4e8a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    4e26:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    4e2a:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4e2e:	2200      	movs	r2, #0
    4e30:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4e34:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    4e38:	b358      	cbz	r0, 4e92 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    4e3a:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4e3c:	b672      	cpsid	i
    if (wasDisabled && value) {
    4e3e:	b36b      	cbz	r3, 4e9c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    4e40:	b371      	cbz	r1, 4ea0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    4e42:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    4e46:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    4e48:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    4e4c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    4e50:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4e52:	79a3      	ldrb	r3, [r4, #6]
    4e54:	2b0a      	cmp	r3, #10
    4e56:	d02a      	beq.n	4eae <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4e58:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    4e5c:	428b      	cmp	r3, r1
    4e5e:	d035      	beq.n	4ecc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    4e60:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        \param[in] bitsToChange LED bit in the shift register to be set
        or cleared.
    **/
    void ShifterState(bool setFlds, Masks bitsToChange) {
        setFlds ? ShifterStateSet(bitsToChange)
        : ShifterStateClear(bitsToChange);
    4e64:	2900      	cmp	r1, #0
    4e66:	d13b      	bne.n	4ee0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4e68:	f3bf 8f5b 	dmb	ish
    4e6c:	4a2d      	ldr	r2, [pc, #180]	; (4f24 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4e6e:	43db      	mvns	r3, r3
    4e70:	e852 0f00 	ldrex	r0, [r2]
    4e74:	4018      	ands	r0, r3
    4e76:	e842 0500 	strex	r5, r0, [r2]
    4e7a:	2d00      	cmp	r5, #0
    4e7c:	d1f8      	bne.n	4e70 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    4e7e:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    4e82:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    4e86:	b003      	add	sp, #12
    4e88:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    4e8a:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    4e8e:	2a00      	cmp	r2, #0
    4e90:	d133      	bne.n	4efa <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    4e92:	2900      	cmp	r1, #0
    4e94:	d0d1      	beq.n	4e3a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    4e96:	b672      	cpsid	i
    if (wasDisabled && value) {
    4e98:	2b00      	cmp	r3, #0
    4e9a:	d1d1      	bne.n	4e40 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    4e9c:	2900      	cmp	r1, #0
    4e9e:	d1d7      	bne.n	4e50 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    4ea0:	2300      	movs	r3, #0
    4ea2:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    4ea6:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    4ea8:	79a3      	ldrb	r3, [r4, #6]
    4eaa:	2b0a      	cmp	r3, #10
    4eac:	d1d4      	bne.n	4e58 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4eae:	b919      	cbnz	r1, 4eb8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4eb0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    4eb4:	079a      	lsls	r2, r3, #30
    4eb6:	d428      	bmi.n	4f0a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    4eb8:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    4ebc:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4ebe:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    4ec2:	bf48      	it	mi
    4ec4:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    4ec8:	428b      	cmp	r3, r1
    4eca:	d1c9      	bne.n	4e60 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    4ecc:	2d00      	cmp	r5, #0
    4ece:	d0d8      	beq.n	4e82 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    4ed0:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d1d4      	bne.n	4e82 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    4ed8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    4edc:	2900      	cmp	r1, #0
    4ede:	d0c3      	beq.n	4e68 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4ee0:	f3bf 8f5b 	dmb	ish
    4ee4:	4a0f      	ldr	r2, [pc, #60]	; (4f24 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    4ee6:	e852 0f00 	ldrex	r0, [r2]
    4eea:	4318      	orrs	r0, r3
    4eec:	e842 0500 	strex	r5, r0, [r2]
    4ef0:	2d00      	cmp	r5, #0
    4ef2:	d0c4      	beq.n	4e7e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    4ef4:	e7f7      	b.n	4ee6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    4ef6:	2300      	movs	r3, #0
    4ef8:	e78f      	b.n	4e1a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    4efa:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    4efc:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    4f00:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    4f04:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4f08:	e797      	b.n	4e3a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    4f0a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    4f0e:	9101      	str	r1, [sp, #4]
    4f10:	f043 0310 	orr.w	r3, r3, #16
    4f14:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    4f18:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4f1c:	f006 fc18 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    4f20:	9901      	ldr	r1, [sp, #4]
    4f22:	e7c9      	b.n	4eb8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    4f24:	20001ad4 	.word	0x20001ad4

00004f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    4f28:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d04a      	beq.n	4fc6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4f30:	4a35      	ldr	r2, [pc, #212]	; (5008 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    4f32:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4f36:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    4f38:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    4f3a:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    4f3c:	b98b      	cbnz	r3, 4f62 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    4f3e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4f42:	2b01      	cmp	r3, #1
    4f44:	d022      	beq.n	4f8c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4f46:	2b02      	cmp	r3, #2
    4f48:	d13b      	bne.n	4fc2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    4f4a:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d145      	bne.n	4fde <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4f52:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    4f56:	2b00      	cmp	r3, #0
    4f58:	d13c      	bne.n	4fd4 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4f5a:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4f5e:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4f62:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    4f66:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    4f6a:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    4f6c:	428b      	cmp	r3, r1
    4f6e:	d32b      	bcc.n	4fc8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    4f70:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    4f74:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    4f78:	3b01      	subs	r3, #1
    4f7a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4f7e:	b94b      	cbnz	r3, 4f94 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    4f80:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    4f84:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4f88:	2b01      	cmp	r3, #1
    4f8a:	d1dc      	bne.n	4f46 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    4f8c:	2302      	movs	r3, #2
    4f8e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    4f92:	e7da      	b.n	4f4a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    4f94:	4b1d      	ldr	r3, [pc, #116]	; (500c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    4f96:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    4f9a:	f3bf 8f5b 	dmb	ish
    4f9e:	e853 1f00 	ldrex	r1, [r3]
    4fa2:	4051      	eors	r1, r2
    4fa4:	e843 1e00 	strex	lr, r1, [r3]
    4fa8:	f1be 0f00 	cmp.w	lr, #0
    4fac:	d1f7      	bne.n	4f9e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    4fae:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    4fb2:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4fb6:	2b01      	cmp	r3, #1
    4fb8:	d1c5      	bne.n	4f46 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    4fba:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d0e4      	beq.n	4f8c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    4fc2:	f85d fb04 	ldr.w	pc, [sp], #4
    4fc6:	4770      	bx	lr
    switch (m_clearFaultState) {
    4fc8:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    4fcc:	2b02      	cmp	r3, #2
    4fce:	d0bc      	beq.n	4f4a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    4fd0:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    4fd4:	3b01      	subs	r3, #1
    4fd6:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    4fda:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    4fde:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    4fe0:	f500 7394 	add.w	r3, r0, #296	; 0x128
    4fe4:	f3bf 8f5b 	dmb	ish
    4fe8:	e853 1f00 	ldrex	r1, [r3]
    4fec:	f021 0120 	bic.w	r1, r1, #32
    4ff0:	e843 1e00 	strex	lr, r1, [r3]
    4ff4:	f1be 0f00 	cmp.w	lr, #0
    4ff8:	d1f6      	bne.n	4fe8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    4ffa:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    4ffe:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    5002:	f85d fb04 	ldr.w	pc, [sp], #4
    5006:	bf00      	nop
    5008:	20001bf4 	.word	0x20001bf4
    500c:	20001ad4 	.word	0x20001ad4

00005010 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5010:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    5014:	b570      	push	{r4, r5, r6, lr}
    5016:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    5018:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    501c:	2b00      	cmp	r3, #0
    501e:	d163      	bne.n	50e8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    5020:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    5024:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    5028:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    502c:	bb39      	cbnz	r1, 507e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    502e:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    5032:	b672      	cpsid	i
    if (wasDisabled && value) {
    5034:	b35b      	cbz	r3, 508e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    5036:	b365      	cbz	r5, 5092 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    5038:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    503c:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    503e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5042:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5046:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5048:	79a3      	ldrb	r3, [r4, #6]
    504a:	2b0a      	cmp	r3, #10
    504c:	d028      	beq.n	50a0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    504e:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5052:	42ab      	cmp	r3, r5
    5054:	d033      	beq.n	50be <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    5056:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    505a:	2d00      	cmp	r5, #0
    505c:	d139      	bne.n	50d2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    505e:	f3bf 8f5b 	dmb	ish
    5062:	4a28      	ldr	r2, [pc, #160]	; (5104 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5064:	43db      	mvns	r3, r3
    5066:	e852 1f00 	ldrex	r1, [r2]
    506a:	4019      	ands	r1, r3
    506c:	e842 1000 	strex	r0, r1, [r2]
    5070:	2800      	cmp	r0, #0
    5072:	d1f8      	bne.n	5066 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    5074:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5078:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    507c:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    507e:	2500      	movs	r5, #0
    5080:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5084:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    5088:	b672      	cpsid	i
    if (wasDisabled && value) {
    508a:	2b00      	cmp	r3, #0
    508c:	d1d3      	bne.n	5036 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    508e:	2d00      	cmp	r5, #0
    5090:	d1d9      	bne.n	5046 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    5092:	2300      	movs	r3, #0
    5094:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5098:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    509a:	79a3      	ldrb	r3, [r4, #6]
    509c:	2b0a      	cmp	r3, #10
    509e:	d1d6      	bne.n	504e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    50a0:	b91d      	cbnz	r5, 50aa <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    50a2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    50a6:	079a      	lsls	r2, r3, #30
    50a8:	d420      	bmi.n	50ec <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    50aa:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    50ae:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    50b0:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    50b4:	bf48      	it	mi
    50b6:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    50ba:	42ab      	cmp	r3, r5
    50bc:	d1cb      	bne.n	5056 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    50be:	2e00      	cmp	r6, #0
    50c0:	d0da      	beq.n	5078 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    50c2:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    50c6:	2b00      	cmp	r3, #0
    50c8:	d1d6      	bne.n	5078 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    50ca:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    50ce:	2d00      	cmp	r5, #0
    50d0:	d0c5      	beq.n	505e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    50d2:	f3bf 8f5b 	dmb	ish
    50d6:	4a0b      	ldr	r2, [pc, #44]	; (5104 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    50d8:	e852 1f00 	ldrex	r1, [r2]
    50dc:	4319      	orrs	r1, r3
    50de:	e842 1000 	strex	r0, r1, [r2]
    50e2:	2800      	cmp	r0, #0
    50e4:	d0c6      	beq.n	5074 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    50e6:	e7f7      	b.n	50d8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    50e8:	2300      	movs	r3, #0
    50ea:	e79d      	b.n	5028 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    50ec:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    50f0:	f043 0310 	orr.w	r3, r3, #16
    50f4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    50f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    50fc:	f006 fb28 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5100:	e7d3      	b.n	50aa <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5102:	bf00      	nop
    5104:	20001ad4 	.word	0x20001ad4

00005108 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    510a:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    510e:	b903      	cbnz	r3, 5112 <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5112:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    5114:	f009 f9dc 	bl	e4d0 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5118:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    511a:	4a98      	ldr	r2, [pc, #608]	; (537c <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    511c:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5120:	2b0a      	cmp	r3, #10
    5122:	bf08      	it	eq
    5124:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5128:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    512c:	bf08      	it	eq
    512e:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    5132:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5136:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5138:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    513c:	bf18      	it	ne
    513e:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5140:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5142:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    5144:	f240 80df 	bls.w	5306 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5148:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    514c:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    514e:	4a8c      	ldr	r2, [pc, #560]	; (5380 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5150:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5154:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5158:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    515c:	1c48      	adds	r0, r1, #1
    515e:	d012      	beq.n	5186 <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5160:	4888      	ldr	r0, [pc, #544]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5162:	f003 fdfb 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5166:	6803      	ldr	r3, [r0, #0]
    5168:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    516a:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    516c:	4798      	blx	r3
    516e:	2809      	cmp	r0, #9
    5170:	f000 8248 	beq.w	5604 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    5174:	4628      	mov	r0, r5
    5176:	f009 f931 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
    517a:	1c01      	adds	r1, r0, #0
    517c:	bf18      	it	ne
    517e:	2101      	movne	r1, #1
    5180:	4620      	mov	r0, r4
    5182:	f7ff fe3f 	bl	4e04 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5186:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    518a:	1c4a      	adds	r2, r1, #1
    518c:	d016      	beq.n	51bc <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    518e:	79a3      	ldrb	r3, [r4, #6]
    5190:	2b0a      	cmp	r3, #10
    5192:	d039      	beq.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5194:	487b      	ldr	r0, [pc, #492]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5196:	f003 fde1 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    519a:	6803      	ldr	r3, [r0, #0]
    519c:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    519e:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    51a0:	4798      	blx	r3
    51a2:	2809      	cmp	r0, #9
    51a4:	f000 80d0 	beq.w	5348 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    51a8:	4628      	mov	r0, r5
    51aa:	f009 f917 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    51ae:	79a3      	ldrb	r3, [r4, #6]
    51b0:	2b09      	cmp	r3, #9
    51b2:	f000 80d3 	beq.w	535c <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    51b6:	2b0b      	cmp	r3, #11
    51b8:	f000 80d0 	beq.w	535c <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    51bc:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    51c0:	1c4b      	adds	r3, r1, #1
    51c2:	d021      	beq.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    51c4:	79a3      	ldrb	r3, [r4, #6]
    51c6:	2b0a      	cmp	r3, #10
    51c8:	d01e      	beq.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    51ca:	486e      	ldr	r0, [pc, #440]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    51cc:	f003 fdc6 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    51d0:	6803      	ldr	r3, [r0, #0]
    51d2:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    51d4:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    51d6:	4798      	blx	r3
    51d8:	2809      	cmp	r0, #9
    51da:	f000 8239 	beq.w	5650 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    51de:	4628      	mov	r0, r5
    51e0:	f009 f8fc 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    51e4:	79a3      	ldrb	r3, [r4, #6]
    51e6:	2b09      	cmp	r3, #9
    51e8:	d10e      	bne.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    51ea:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    51ee:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    51f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
    51f6:	01db      	lsls	r3, r3, #7
    51f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    51fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5200:	2800      	cmp	r0, #0
    5202:	f000 81d4 	beq.w	55ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    5206:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5208:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    520c:	1c4f      	adds	r7, r1, #1
    520e:	d010      	beq.n	5232 <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5210:	485c      	ldr	r0, [pc, #368]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5212:	f003 fda3 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5216:	6803      	ldr	r3, [r0, #0]
    5218:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    521a:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    521c:	4798      	blx	r3
    521e:	2809      	cmp	r0, #9
    5220:	f000 817d 	beq.w	551e <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    5224:	682b      	ldr	r3, [r5, #0]
    5226:	4628      	mov	r0, r5
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    522c:	2804      	cmp	r0, #4
    522e:	f000 8176 	beq.w	551e <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    5232:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    5236:	1c4e      	adds	r6, r1, #1
    5238:	d015      	beq.n	5266 <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    523a:	4852      	ldr	r0, [pc, #328]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    523c:	f003 fd8e 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5240:	6803      	ldr	r3, [r0, #0]
    5242:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5244:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5246:	4798      	blx	r3
    5248:	2809      	cmp	r0, #9
    524a:	f000 81e6 	beq.w	561a <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    524e:	4628      	mov	r0, r5
    5250:	f009 f8c4 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    5254:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5258:	fab0 f080 	clz	r0, r0
    525c:	0940      	lsrs	r0, r0, #5
    525e:	f360 03c3 	bfi	r3, r0, #3, #1
    5262:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    5266:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    526a:	1c4d      	adds	r5, r1, #1
    526c:	d015      	beq.n	529a <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    526e:	4845      	ldr	r0, [pc, #276]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5270:	f003 fd74 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5274:	6803      	ldr	r3, [r0, #0]
    5276:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5278:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    527a:	4798      	blx	r3
    527c:	2809      	cmp	r0, #9
    527e:	f000 81d1 	beq.w	5624 <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    5282:	4628      	mov	r0, r5
    5284:	f009 f8aa 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5288:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    528c:	fab0 f080 	clz	r0, r0
    5290:	0940      	lsrs	r0, r0, #5
    5292:	f360 1304 	bfi	r3, r0, #4, #1
    5296:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    529a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    529e:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    52a2:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    52a6:	1c48      	adds	r0, r1, #1
    52a8:	f000 8132 	beq.w	5510 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    52ac:	4835      	ldr	r0, [pc, #212]	; (5384 <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    52ae:	f003 fd55 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    52b2:	6803      	ldr	r3, [r0, #0]
    52b4:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    52b6:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    52b8:	4798      	blx	r3
    52ba:	2809      	cmp	r0, #9
    52bc:	f000 81c0 	beq.w	5640 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    52c0:	4638      	mov	r0, r7
    52c2:	f009 f88b 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
    52c6:	fab0 f780 	clz	r7, r0
    52ca:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    52cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    52d0:	2b00      	cmp	r3, #0
    52d2:	f040 8131 	bne.w	5538 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    52d6:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    52da:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    52de:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    52e2:	2900      	cmp	r1, #0
    52e4:	d152      	bne.n	538c <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    52e6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    52ea:	0792      	lsls	r2, r2, #30
    52ec:	d54e      	bpl.n	538c <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    52ee:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    52f2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    52f6:	2800      	cmp	r0, #0
    52f8:	f000 8152 	beq.w	55a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    52fc:	06d7      	lsls	r7, r2, #27
    52fe:	d549      	bpl.n	5394 <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5300:	f046 0604 	orr.w	r6, r6, #4
    5304:	e046      	b.n	5394 <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5306:	07aa      	lsls	r2, r5, #30
    5308:	f000 8161 	beq.w	55ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    530c:	2333      	movs	r3, #51	; 0x33
    530e:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5310:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    5314:	2201      	movs	r2, #1
    5316:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    531a:	b29a      	uxth	r2, r3
    531c:	3200      	adds	r2, #0
    531e:	bf18      	it	ne
    5320:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5322:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5326:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    532a:	06eb      	lsls	r3, r5, #27
    532c:	f100 8158 	bmi.w	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5330:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    5334:	2b00      	cmp	r3, #0
    5336:	f040 810f 	bne.w	5558 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    533a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    533e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5342:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5346:	e707      	b.n	5158 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5348:	4b0f      	ldr	r3, [pc, #60]	; (5388 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    534a:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    534e:	6818      	ldr	r0, [r3, #0]
    5350:	f00a f89a 	bl	f488 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5354:	79a3      	ldrb	r3, [r4, #6]
    5356:	2b09      	cmp	r3, #9
    5358:	f47f af2d 	bne.w	51b6 <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    535c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5360:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    5364:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5368:	01db      	lsls	r3, r3, #7
    536a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    536e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5372:	2800      	cmp	r0, #0
    5374:	f000 8119 	beq.w	55aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5378:	615a      	str	r2, [r3, #20]
    537a:	e71f      	b.n	51bc <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    537c:	00022e40 	.word	0x00022e40
    5380:	c61c3c00 	.word	0xc61c3c00
    5384:	200019dc 	.word	0x200019dc
    5388:	20001f0c 	.word	0x20001f0c
    538c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5390:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    5394:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5398:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    539c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    53a0:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    53a4:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    53a8:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    53ac:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    53b0:	2b00      	cmp	r3, #0
    53b2:	f000 80ab 	beq.w	550c <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    53b6:	1f98      	subs	r0, r3, #6
    53b8:	bf18      	it	ne
    53ba:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    53bc:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    53c0:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    53c4:	2a00      	cmp	r2, #0
    53c6:	f000 809b 	beq.w	5500 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    53ca:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    53ce:	b111      	cbz	r1, 53d6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    53d0:	07af      	lsls	r7, r5, #30
    53d2:	f140 80df 	bpl.w	5594 <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    53d6:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    53da:	2b03      	cmp	r3, #3
    53dc:	d071      	beq.n	54c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    53de:	f015 0302 	ands.w	r3, r5, #2
    53e2:	f040 80ce 	bne.w	5582 <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    53e6:	2900      	cmp	r1, #0
    53e8:	d06b      	beq.n	54c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    53ea:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    53ee:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    53f2:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    53f6:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    53fa:	2b00      	cmp	r3, #0
    53fc:	d065      	beq.n	54ca <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    53fe:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    5402:	2b00      	cmp	r3, #0
    5404:	f340 8113 	ble.w	562e <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5408:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    540c:	2201      	movs	r2, #1
            m_enableCounter--;
    540e:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5410:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    5414:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5418:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    541c:	b11b      	cbz	r3, 5426 <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    541e:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5420:	bf48      	it	mi
    5422:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    5426:	1c32      	adds	r2, r6, #0
    5428:	bf18      	it	ne
    542a:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    542c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5430:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    5434:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5438:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    543c:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5440:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    5444:	f3bf 8f5b 	dmb	ish
    5448:	e852 1f00 	ldrex	r1, [r2]
    544c:	4319      	orrs	r1, r3
    544e:	e842 1000 	strex	r0, r1, [r2]
    5452:	2800      	cmp	r0, #0
    5454:	d1f8      	bne.n	5448 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    5456:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    545a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    545e:	f3bf 8f5b 	dmb	ish
    5462:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5466:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    546a:	e853 2f00 	ldrex	r2, [r3]
    546e:	432a      	orrs	r2, r5
    5470:	e843 2100 	strex	r1, r2, [r3]
    5474:	2900      	cmp	r1, #0
    5476:	d1f8      	bne.n	546a <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5478:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    547c:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    547e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    5482:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5486:	2b0a      	cmp	r3, #10
    5488:	f47f ae42 	bne.w	5110 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    548c:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5490:	4628      	mov	r0, r5
    5492:	f005 feb5 	bl	b200 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    5496:	4628      	mov	r0, r5
    5498:	f006 fa16 	bl	b8c8 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    549c:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    54a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    54a2:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    54a4:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    54a8:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    54aa:	4282      	cmp	r2, r0
    54ac:	f43f ae30 	beq.w	5110 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    54b0:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    54b4:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    54b8:	680b      	ldr	r3, [r1, #0]
    54ba:	4213      	tst	r3, r2
    54bc:	d1fc      	bne.n	54b8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    54be:	6028      	str	r0, [r5, #0]
    54c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    54c2:	1c03      	adds	r3, r0, #0
    54c4:	bf18      	it	ne
    54c6:	2301      	movne	r3, #1
    54c8:	e78f      	b.n	53ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    54ca:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    54ce:	2a00      	cmp	r2, #0
    54d0:	d03a      	beq.n	5548 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    54d2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    54d6:	b933      	cbnz	r3, 54e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    54d8:	b938      	cbnz	r0, 54ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    54da:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    54de:	2204      	movs	r2, #4
    54e0:	f362 258c 	bfi	r5, r2, #10, #3
    54e4:	e79a      	b.n	541c <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    54e6:	2800      	cmp	r0, #0
    54e8:	d063      	beq.n	55b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    54ea:	f015 0302 	ands.w	r3, r5, #2
    54ee:	d1f6      	bne.n	54de <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    54f0:	2203      	movs	r2, #3
    54f2:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    54f6:	f363 1504 	bfi	r5, r3, #4, #1
    54fa:	f005 0302 	and.w	r3, r5, #2
    54fe:	e78d      	b.n	541c <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5500:	f362 0500 	bfi	r5, r2, #0, #1
    5504:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5508:	4613      	mov	r3, r2
    550a:	e76e      	b.n	53ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    550c:	4618      	mov	r0, r3
    550e:	e755      	b.n	53bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    5510:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5514:	bb93      	cbnz	r3, 557c <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    5516:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    551a:	461f      	mov	r7, r3
    551c:	e6dd      	b.n	52da <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    551e:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    5522:	b381      	cbz	r1, 5586 <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    5524:	682b      	ldr	r3, [r5, #0]
    5526:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    552a:	695b      	ldr	r3, [r3, #20]
    552c:	b109      	cbz	r1, 5532 <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    552e:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    5532:	4628      	mov	r0, r5
    5534:	4798      	blx	r3
    5536:	e67c      	b.n	5232 <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5538:	b307      	cbz	r7, 557c <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    553a:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    553e:	2900      	cmp	r1, #0
    5540:	f000 80ab 	beq.w	569a <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5544:	460f      	mov	r7, r1
    5546:	e6c8      	b.n	52da <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5548:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    554c:	07aa      	lsls	r2, r5, #30
    554e:	f57f af6a 	bpl.w	5426 <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    5552:	f046 0610 	orr.w	r6, r6, #16
    5556:	e762      	b.n	541e <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5558:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    555c:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5560:	4073      	eors	r3, r6
    5562:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    5564:	4291      	cmp	r1, r2
    5566:	f000 80a4 	beq.w	56b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    556a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    556e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5572:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5576:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    557a:	e5ed      	b.n	5158 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    557c:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5580:	e6ab      	b.n	52da <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5582:	2300      	movs	r3, #0
    5584:	e731      	b.n	53ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    5586:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    558a:	682b      	ldr	r3, [r5, #0]
    558c:	2a01      	cmp	r2, #1
    558e:	695b      	ldr	r3, [r3, #20]
    5590:	d1cf      	bne.n	5532 <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5592:	e7cc      	b.n	552e <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5594:	2801      	cmp	r0, #1
    5596:	f47f af1e 	bne.w	53d6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    559a:	f045 0501 	orr.w	r5, r5, #1
    559e:	e71c      	b.n	53da <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    55a0:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    55a2:	bf48      	it	mi
    55a4:	f046 0602 	orrmi.w	r6, r6, #2
    55a8:	e6f4      	b.n	5394 <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    55aa:	619a      	str	r2, [r3, #24]
    55ac:	e606      	b.n	51bc <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    55ae:	619a      	str	r2, [r3, #24]
    55b0:	e62a      	b.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    55b2:	2302      	movs	r3, #2
    55b4:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    55b8:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    55bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    55c0:	f006 f8c6 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    55c4:	f046 0620 	orr.w	r6, r6, #32
    55c8:	f005 0302 	and.w	r3, r5, #2
    55cc:	e726      	b.n	541c <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    55ce:	f004 f9e5 	bl	999c <Milliseconds>
    55d2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    55d6:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    55d8:	2803      	cmp	r0, #3
    55da:	f63f ae97 	bhi.w	530c <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    55de:	e6a4      	b.n	532a <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    55e0:	f004 f9dc 	bl	999c <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    55e4:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    55e8:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    55ec:	2b00      	cmp	r3, #0
    55ee:	d03a      	beq.n	5666 <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    55f0:	2330      	movs	r3, #48	; 0x30
    55f2:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    55f4:	2200      	movs	r2, #0
    55f6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    55fa:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    55fe:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    5602:	e697      	b.n	5334 <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    5604:	4b54      	ldr	r3, [pc, #336]	; (5758 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    5606:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    560a:	6818      	ldr	r0, [r3, #0]
    560c:	f009 ff3c 	bl	f488 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    5610:	4601      	mov	r1, r0
    5612:	4620      	mov	r0, r4
    5614:	f7ff fbf6 	bl	4e04 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    5618:	e5b5      	b.n	5186 <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    561a:	682b      	ldr	r3, [r5, #0]
    561c:	4628      	mov	r0, r5
    561e:	691b      	ldr	r3, [r3, #16]
    5620:	4798      	blx	r3
    5622:	e617      	b.n	5254 <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    5624:	682b      	ldr	r3, [r5, #0]
    5626:	4628      	mov	r0, r5
    5628:	691b      	ldr	r3, [r3, #16]
    562a:	4798      	blx	r3
    562c:	e62c      	b.n	5288 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    562e:	2201      	movs	r2, #1
            m_isEnabling = false;
    5630:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    5632:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    5636:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    563a:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    563e:	e748      	b.n	54d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5640:	683b      	ldr	r3, [r7, #0]
    5642:	4638      	mov	r0, r7
    5644:	691b      	ldr	r3, [r3, #16]
    5646:	4798      	blx	r3
    5648:	fab0 f780 	clz	r7, r0
    564c:	097f      	lsrs	r7, r7, #5
    564e:	e63d      	b.n	52cc <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5650:	4b41      	ldr	r3, [pc, #260]	; (5758 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    5652:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5656:	6818      	ldr	r0, [r3, #0]
    5658:	f009 ff16 	bl	f488 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    565c:	79a3      	ldrb	r3, [r4, #6]
    565e:	2b09      	cmp	r3, #9
    5660:	f43f adc3 	beq.w	51ea <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    5664:	e5d0      	b.n	5208 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    5666:	06ad      	lsls	r5, r5, #26
    5668:	f57f ae62 	bpl.w	5330 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    566c:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5670:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5674:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5678:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    567c:	8bf8      	ldrh	r0, [r7, #30]
    567e:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    5682:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    5686:	8bbd      	ldrh	r5, [r7, #28]
    5688:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    568c:	b9d0      	cbnz	r0, 56c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    568e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    5692:	2201      	movs	r2, #1
    5694:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    5698:	e64c      	b.n	5334 <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    569a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    569e:	f006 f873 	bl	b788 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    56a2:	2301      	movs	r3, #1
    56a4:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    56a8:	f046 0608 	orr.w	r6, r6, #8
    56ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    56b0:	e613      	b.n	52da <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    56b2:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    56b6:	2a00      	cmp	r2, #0
    56b8:	f43f ad49 	beq.w	514e <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    56bc:	3a01      	subs	r2, #1
    56be:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    56c2:	e549      	b.n	5158 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    56c4:	ee07 1a90 	vmov	s15, r1
    56c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    56cc:	ee07 2a90 	vmov	s15, r2
    56d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    56d4:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    56d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    56dc:	ee16 0a90 	vmov	r0, s13
    56e0:	f016 fa7c 	bl	1bbdc <__aeabi_f2d>
    56e4:	a318      	add	r3, pc, #96	; (adr r3, 5748 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    56e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    56ea:	f016 f917 	bl	1b91c <__aeabi_dsub>
    56ee:	a318      	add	r3, pc, #96	; (adr r3, 5750 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    56f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    56f4:	f016 fac6 	bl	1bc84 <__aeabi_dmul>
    56f8:	f016 fda6 	bl	1c248 <__aeabi_d2f>
    56fc:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    5700:	b11e      	cbz	r6, 570a <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5702:	ed9f 7a16 	vldr	s14, [pc, #88]	; 575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    5706:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    570a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    570e:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5712:	2b02      	cmp	r3, #2
    5714:	d004      	beq.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    5716:	2302      	movs	r3, #2
    5718:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    571c:	2300      	movs	r3, #0
    571e:	e7b8      	b.n	5692 <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    5720:	ee17 0a90 	vmov	r0, s15
    5724:	f016 fa5a 	bl	1bbdc <__aeabi_f2d>
    5728:	2200      	movs	r2, #0
    572a:	4b0d      	ldr	r3, [pc, #52]	; (5760 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    572c:	f016 f8f6 	bl	1b91c <__aeabi_dsub>
    5730:	4602      	mov	r2, r0
    5732:	460b      	mov	r3, r1
    5734:	f016 f8f4 	bl	1b920 <__adddf3>
    5738:	f016 fd86 	bl	1c248 <__aeabi_d2f>
    573c:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5740:	e7e9      	b.n	5716 <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    5742:	bf00      	nop
    5744:	f3af 8000 	nop.w
    5748:	9999999a 	.word	0x9999999a
    574c:	3fa99999 	.word	0x3fa99999
    5750:	71c71c72 	.word	0x71c71c72
    5754:	405bc71c 	.word	0x405bc71c
    5758:	20001f0c 	.word	0x20001f0c
    575c:	42c80000 	.word	0x42c80000
    5760:	40490000 	.word	0x40490000

00005764 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    5764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5768:	4604      	mov	r4, r0
    576a:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    576c:	4690      	mov	r8, r2
    576e:	2a00      	cmp	r2, #0
    5770:	d154      	bne.n	581c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    5772:	6c45      	ldr	r5, [r0, #68]	; 0x44
    5774:	1b4d      	subs	r5, r1, r5
    5776:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    5778:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    577c:	2b00      	cmp	r3, #0
    577e:	d04b      	beq.n	5818 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5780:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5784:	f043 0301 	orr.w	r3, r3, #1
    5788:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    578c:	2600      	movs	r6, #0
    578e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5792:	b933      	cbnz	r3, 57a2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5794:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5798:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    579c:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    579e:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    57a2:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    57a6:	1c48      	adds	r0, r1, #1
    57a8:	d016      	beq.n	57d8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    57aa:	4829      	ldr	r0, [pc, #164]	; (5850 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    57ac:	f003 fad6 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    57b0:	6803      	ldr	r3, [r0, #0]
    57b2:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    57b4:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    57b6:	4798      	blx	r3
    57b8:	2809      	cmp	r0, #9
    57ba:	d040      	beq.n	583e <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    57bc:	4648      	mov	r0, r9
    57be:	f008 fe0d 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
    57c2:	fab0 f080 	clz	r0, r0
    57c6:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    57c8:	b130      	cbz	r0, 57d8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    57ca:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    57ce:	f043 0308 	orr.w	r3, r3, #8
    57d2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    57d6:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    57d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    57dc:	b16d      	cbz	r5, 57fa <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    57de:	06d9      	lsls	r1, r3, #27
    57e0:	d426      	bmi.n	5830 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    57e2:	b196      	cbz	r6, 580a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    57e4:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    57e6:	4642      	mov	r2, r8
    57e8:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    57ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    57ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    57f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    57f6:	f005 bc7f 	b.w	b0f8 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    57fa:	071a      	lsls	r2, r3, #28
    57fc:	d5f1      	bpl.n	57e2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    57fe:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5802:	f043 0302 	orr.w	r3, r3, #2
    5806:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    580a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    580e:	079b      	lsls	r3, r3, #30
    5810:	d406      	bmi.n	5820 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    5812:	2000      	movs	r0, #0
    5814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5818:	2601      	movs	r6, #1
    581a:	e7b8      	b.n	578e <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    581c:	0fcd      	lsrs	r5, r1, #31
    581e:	e7ab      	b.n	5778 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5820:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5824:	2100      	movs	r1, #0
    5826:	f005 ffaf 	bl	b788 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    582a:	2000      	movs	r0, #0
    582c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5830:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5834:	f043 0304 	orr.w	r3, r3, #4
    5838:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    583c:	e7e5      	b.n	580a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    583e:	f8d9 3000 	ldr.w	r3, [r9]
    5842:	4648      	mov	r0, r9
    5844:	691b      	ldr	r3, [r3, #16]
    5846:	4798      	blx	r3
    5848:	fab0 f080 	clz	r0, r0
    584c:	0940      	lsrs	r0, r0, #5
    584e:	e7bb      	b.n	57c8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5850:	200019dc 	.word	0x200019dc

00005854 <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    5854:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5858:	f7ff bf84 	b.w	5764 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

0000585c <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    585e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5862:	4604      	mov	r4, r0
    5864:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    5866:	2b00      	cmp	r3, #0
    5868:	d04a      	beq.n	5900 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    586a:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    586e:	f043 0301 	orr.w	r3, r3, #1
    5872:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    5876:	2500      	movs	r5, #0
    5878:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    587c:	b933      	cbnz	r3, 588c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    587e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5882:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5886:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5888:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    588c:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5890:	1c48      	adds	r0, r1, #1
    5892:	d016      	beq.n	58c2 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5894:	4826      	ldr	r0, [pc, #152]	; (5930 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    5896:	f003 fa61 	bl	8d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    589a:	6803      	ldr	r3, [r0, #0]
    589c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    589e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    58a0:	4798      	blx	r3
    58a2:	2809      	cmp	r0, #9
    58a4:	d03c      	beq.n	5920 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    58a6:	4638      	mov	r0, r7
    58a8:	f008 fd98 	bl	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
    58ac:	fab0 f080 	clz	r0, r0
    58b0:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    58b2:	b130      	cbz	r0, 58c2 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    58b4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    58b8:	f043 0308 	orr.w	r3, r3, #8
    58bc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    58c0:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    58c2:	2e00      	cmp	r6, #0
    58c4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    58c8:	da0c      	bge.n	58e4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    58ca:	06d9      	lsls	r1, r3, #27
    58cc:	d421      	bmi.n	5912 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    58ce:	b18d      	cbz	r5, 58f4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    58d0:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    58d2:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    58d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    58d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    58dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    58e0:	f005 bc44 	b.w	b16c <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    58e4:	071a      	lsls	r2, r3, #28
    58e6:	d5f2      	bpl.n	58ce <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    58e8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    58ec:	f043 0302 	orr.w	r3, r3, #2
    58f0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    58f4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    58f8:	079b      	lsls	r3, r3, #30
    58fa:	d403      	bmi.n	5904 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    58fc:	2000      	movs	r0, #0
    58fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5900:	2501      	movs	r5, #1
    5902:	e7b9      	b.n	5878 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    5904:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5908:	2100      	movs	r1, #0
    590a:	f005 ff3d 	bl	b788 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    590e:	2000      	movs	r0, #0
    5910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5912:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5916:	f043 0304 	orr.w	r3, r3, #4
    591a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    591e:	e7e9      	b.n	58f4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5920:	683b      	ldr	r3, [r7, #0]
    5922:	4638      	mov	r0, r7
    5924:	691b      	ldr	r3, [r3, #16]
    5926:	4798      	blx	r3
    5928:	fab0 f080 	clz	r0, r0
    592c:	0940      	lsrs	r0, r0, #5
    592e:	e7c0      	b.n	58b2 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5930:	200019dc 	.word	0x200019dc

00005934 <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    5934:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5938:	f7ff bf90 	b.w	585c <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

0000593c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    593e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5942:	4dbc      	ldr	r5, [pc, #752]	; (5c34 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5944:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5948:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    594c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5950:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5952:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5954:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5958:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    595c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5960:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5964:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5966:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5968:	2100      	movs	r1, #0
    596a:	f7ff fa4b 	bl	4e04 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    596e:	4631      	mov	r1, r6
    5970:	4620      	mov	r0, r4
    5972:	f008 fd47 	bl	e404 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    5976:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    597a:	f993 2001 	ldrsb.w	r2, [r3, #1]
    597e:	7898      	ldrb	r0, [r3, #2]
    5980:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    5984:	1813      	adds	r3, r2, r0
    5986:	2700      	movs	r7, #0
    5988:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    598c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5990:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5994:	788e      	ldrb	r6, [r1, #2]
    5996:	01db      	lsls	r3, r3, #7
    5998:	18e9      	adds	r1, r5, r3
    599a:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    599c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    59a0:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    59a4:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    59a8:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    59aa:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    59ae:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    59b0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    59b4:	f010 0f01 	tst.w	r0, #1
    59b8:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    59bc:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    59c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    59c4:	bf14      	ite	ne
    59c6:	f360 1107 	bfine	r1, r0, #4, #4
    59ca:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    59ce:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    59d2:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    59d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    59da:	07f0      	lsls	r0, r6, #31
    59dc:	f04f 0105 	mov.w	r1, #5
    59e0:	bf4c      	ite	mi
    59e2:	f361 1207 	bfimi	r2, r1, #4, #4
    59e6:	f361 0203 	bfipl	r2, r1, #0, #4
    59ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    59ee:	6823      	ldr	r3, [r4, #0]
    59f0:	4a91      	ldr	r2, [pc, #580]	; (5c38 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    59f2:	685b      	ldr	r3, [r3, #4]
    59f4:	4293      	cmp	r3, r2
    59f6:	f040 8119 	bne.w	5c2c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    59fa:	79a3      	ldrb	r3, [r4, #6]
    59fc:	2b09      	cmp	r3, #9
    59fe:	d022      	beq.n	5a46 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5a00:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a04:	f005 fea4 	bl	b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5a08:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5a0c:	4b89      	ldr	r3, [pc, #548]	; (5c34 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5a0e:	f991 2001 	ldrsb.w	r2, [r1, #1]
    5a12:	7889      	ldrb	r1, [r1, #2]
    5a14:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5a18:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5a1a:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5a1c:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5a20:	f36f 0100 	bfc	r1, #0, #1
    5a24:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5a28:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5a2c:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5a30:	7892      	ldrb	r2, [r2, #2]
    5a32:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    5a36:	4413      	add	r3, r2
    5a38:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5a3c:	f36f 0200 	bfc	r2, #0, #1
    5a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5a44:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5a46:	68e3      	ldr	r3, [r4, #12]
    5a48:	6922      	ldr	r2, [r4, #16]
    5a4a:	01db      	lsls	r3, r3, #7
    5a4c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5a50:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    5a54:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5a58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5a5c:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5a60:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5a64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5a68:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5a6a:	bf14      	ite	ne
    5a6c:	f36f 1007 	bfcne	r0, #4, #4
    5a70:	f365 0003 	bfieq	r0, r5, #0, #4
    5a74:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5a78:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5a7c:	496f      	ldr	r1, [pc, #444]	; (5c3c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5a7e:	f042 0201 	orr.w	r2, r2, #1
    5a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5a86:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5a8a:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5a8e:	681a      	ldr	r2, [r3, #0]
    5a90:	f36f 0241 	bfc	r2, #1, #1
    5a94:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5a96:	691a      	ldr	r2, [r3, #16]
    5a98:	0792      	lsls	r2, r2, #30
    5a9a:	d4fc      	bmi.n	5a96 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5a9c:	681a      	ldr	r2, [r3, #0]
    5a9e:	f042 0201 	orr.w	r2, r2, #1
    5aa2:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    5aa4:	691a      	ldr	r2, [r3, #16]
    5aa6:	f012 0201 	ands.w	r2, r2, #1
    5aaa:	d1fb      	bne.n	5aa4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5aac:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5aae:	4964      	ldr	r1, [pc, #400]	; (5c40 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5ab0:	f362 1505 	bfi	r5, r2, #4, #2
    5ab4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    5ab6:	681d      	ldr	r5, [r3, #0]
    5ab8:	f362 5514 	bfi	r5, r2, #20, #1
    5abc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    5abe:	681d      	ldr	r5, [r3, #0]
    5ac0:	f362 5555 	bfi	r5, r2, #21, #1
    5ac4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    5ac6:	681d      	ldr	r5, [r3, #0]
    5ac8:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    5acc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    5ace:	681d      	ldr	r5, [r3, #0]
    5ad0:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    5ad4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    5ad6:	681d      	ldr	r5, [r3, #0]
    5ad8:	f362 25cb 	bfi	r5, r2, #11, #1
    5adc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5ade:	681d      	ldr	r5, [r3, #0]
    5ae0:	f362 250a 	bfi	r5, r2, #8, #3
    5ae4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    5ae6:	681d      	ldr	r5, [r3, #0]
    5ae8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5aec:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    5aee:	681d      	ldr	r5, [r3, #0]
    5af0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    5af4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    5af6:	681d      	ldr	r5, [r3, #0]
    5af8:	f362 0583 	bfi	r5, r2, #2, #2
    5afc:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    5afe:	88dd      	ldrh	r5, [r3, #6]
    5b00:	2605      	movs	r6, #5
    5b02:	f366 0502 	bfi	r5, r6, #0, #3
    5b06:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    5b08:	88dd      	ldrh	r5, [r3, #6]
    5b0a:	f045 0520 	orr.w	r5, r5, #32
    5b0e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    5b10:	88dd      	ldrh	r5, [r3, #6]
    5b12:	f362 350c 	bfi	r5, r2, #12, #1
    5b16:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5b18:	88dd      	ldrh	r5, [r3, #6]
    5b1a:	f362 354d 	bfi	r5, r2, #13, #1
    5b1e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5b20:	88dd      	ldrh	r5, [r3, #6]
    5b22:	f362 2508 	bfi	r5, r2, #8, #1
    5b26:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5b28:	88dd      	ldrh	r5, [r3, #6]
    5b2a:	f045 0510 	orr.w	r5, r5, #16
    5b2e:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5b30:	780d      	ldrb	r5, [r1, #0]
    5b32:	f362 0541 	bfi	r5, r2, #1, #1
    5b36:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5b38:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5b3c:	688e      	ldr	r6, [r1, #8]
    5b3e:	78d5      	ldrb	r5, [r2, #3]
    5b40:	2201      	movs	r2, #1
    5b42:	40aa      	lsls	r2, r5
    5b44:	4316      	orrs	r6, r2
    5b46:	608e      	str	r6, [r1, #8]
    5b48:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5b4a:	698e      	ldr	r6, [r1, #24]
    5b4c:	00bf      	lsls	r7, r7, #2
    5b4e:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    5b52:	4316      	orrs	r6, r2
    5b54:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5b58:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5b5a:	f005 0607 	and.w	r6, r5, #7
    5b5e:	f8de c01c 	ldr.w	ip, [lr, #28]
    5b62:	00b7      	lsls	r7, r6, #2
    5b64:	2604      	movs	r6, #4
    5b66:	40be      	lsls	r6, r7
    5b68:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5b6c:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5b70:	68ce      	ldr	r6, [r1, #12]
    5b72:	b292      	uxth	r2, r2
    5b74:	f362 060f 	bfi	r6, r2, #0, #16
    5b78:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    5b7a:	780a      	ldrb	r2, [r1, #0]
    5b7c:	f042 0202 	orr.w	r2, r2, #2
    5b80:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    5b82:	684a      	ldr	r2, [r1, #4]
    5b84:	f012 0202 	ands.w	r2, r2, #2
    5b88:	d1fb      	bne.n	5b82 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    5b8a:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    5b8e:	492d      	ldr	r1, [pc, #180]	; (5c44 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5b90:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    5b94:	463e      	mov	r6, r7
    5b96:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    5b9a:	f362 1c86 	bfi	ip, r2, #6, #1
    5b9e:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    5ba2:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5ba6:	0657      	lsls	r7, r2, #25
    5ba8:	d4fb      	bmi.n	5ba2 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    5baa:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5bae:	4f25      	ldr	r7, [pc, #148]	; (5c44 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5bb0:	f04f 0c06 	mov.w	ip, #6
    5bb4:	f36c 0203 	bfi	r2, ip, #0, #4
    5bb8:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5bbc:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5bc4:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5bc8:	687a      	ldr	r2, [r7, #4]
    5bca:	f012 0f18 	tst.w	r2, #24
    5bce:	d1fb      	bne.n	5bc8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5bd0:	4a1d      	ldr	r2, [pc, #116]	; (5c48 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5bd2:	4e1e      	ldr	r6, [pc, #120]	; (5c4c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5bd4:	3074      	adds	r0, #116	; 0x74
    5bd6:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5bda:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5bde:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5be2:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    5be6:	7991      	ldrb	r1, [r2, #6]
    5be8:	f041 0102 	orr.w	r1, r1, #2
    5bec:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5bee:	79d1      	ldrb	r1, [r2, #7]
    5bf0:	07c8      	lsls	r0, r1, #31
    5bf2:	d4fc      	bmi.n	5bee <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    5bf4:	3512      	adds	r5, #18
    5bf6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5bfa:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5bfe:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    5c02:	79d1      	ldrb	r1, [r2, #7]
    5c04:	0789      	lsls	r1, r1, #30
    5c06:	d4fc      	bmi.n	5c02 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5c08:	681a      	ldr	r2, [r3, #0]
    5c0a:	f042 0202 	orr.w	r2, r2, #2
    5c0e:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5c10:	691a      	ldr	r2, [r3, #16]
    5c12:	f012 0202 	ands.w	r2, r2, #2
    5c16:	d1fb      	bne.n	5c10 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5c18:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5c1a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5c1e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    5c22:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    5c26:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    5c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5c2c:	2109      	movs	r1, #9
    5c2e:	4620      	mov	r0, r4
    5c30:	4798      	blx	r3
    5c32:	e708      	b.n	5a46 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    5c34:	41008000 	.word	0x41008000
    5c38:	00004aa1 	.word	0x00004aa1
    5c3c:	00022e40 	.word	0x00022e40
    5c40:	40002800 	.word	0x40002800
    5c44:	40001c00 	.word	0x40001c00
    5c48:	4100e000 	.word	0x4100e000
    5c4c:	4100e020 	.word	0x4100e020

00005c50 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5c50:	f04f 30ff 	mov.w	r0, #4294967295
    5c54:	4770      	bx	lr
    5c56:	bf00      	nop

00005c58 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    5c58:	f1a1 0002 	sub.w	r0, r1, #2
    5c5c:	fab0 f080 	clz	r0, r0
    5c60:	0940      	lsrs	r0, r0, #5
    5c62:	4770      	bx	lr

00005c64 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    5c64:	2002      	movs	r0, #2
    5c66:	4770      	bx	lr

00005c68 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    5c68:	f1a1 0001 	sub.w	r0, r1, #1
    5c6c:	fab0 f080 	clz	r0, r0
    5c70:	0940      	lsrs	r0, r0, #5
    5c72:	4770      	bx	lr

00005c74 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    5c74:	f1a1 0008 	sub.w	r0, r1, #8
    5c78:	fab0 f080 	clz	r0, r0
    5c7c:	0940      	lsrs	r0, r0, #5
    5c7e:	4770      	bx	lr

00005c80 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    5c80:	7a80      	ldrb	r0, [r0, #10]
    5c82:	4770      	bx	lr

00005c84 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    5c84:	f1a0 0004 	sub.w	r0, r0, #4
    5c88:	e7fa      	b.n	5c80 <_ZN9ClearCore9SerialUsb4ModeEv>
    5c8a:	bf00      	nop

00005c8c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    5c8c:	7a80      	ldrb	r0, [r0, #10]
    }
    5c8e:	1a40      	subs	r0, r0, r1
    5c90:	fab0 f080 	clz	r0, r0
    5c94:	0940      	lsrs	r0, r0, #5
    5c96:	4770      	bx	lr

00005c98 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    5c98:	f1a0 0004 	sub.w	r0, r0, #4
    5c9c:	e7f6      	b.n	5c8c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    5c9e:	bf00      	nop

00005ca0 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    5ca0:	2008      	movs	r0, #8
    5ca2:	4770      	bx	lr

00005ca4 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    5ca4:	f1a0 0004 	sub.w	r0, r0, #4
    5ca8:	e7fa      	b.n	5ca0 <_ZN9ClearCore9SerialUsb4TypeEv>
    5caa:	bf00      	nop

00005cac <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    5cac:	2000      	movs	r0, #0
    5cae:	4770      	bx	lr

00005cb0 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    5cb0:	f1a0 0004 	sub.w	r0, r0, #4
    5cb4:	e7fa      	b.n	5cac <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    5cb6:	bf00      	nop

00005cb8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    5cb8:	2311      	movs	r3, #17
        m_index = clearCorePin;
    5cba:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    5cbc:	7283      	strb	r3, [r0, #10]
    5cbe:	4770      	bx	lr

00005cc0 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    5cc0:	f1a0 0004 	sub.w	r0, r0, #4
    5cc4:	e7f8      	b.n	5cb8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    5cc6:	bf00      	nop

00005cc8 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop

00005ccc <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    5ccc:	f1a0 0004 	sub.w	r0, r0, #4
    5cd0:	e7fa      	b.n	5cc8 <_ZN9ClearCore9SerialUsb7RefreshEv>
    5cd2:	bf00      	nop

00005cd4 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    5cd4:	4b01      	ldr	r3, [pc, #4]	; (5cdc <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    5cd6:	6818      	ldr	r0, [r3, #0]
    5cd8:	f000 be5e 	b.w	6998 <_ZN9ClearCore10UsbManager10FlushInputEv>
    5cdc:	20000ae0 	.word	0x20000ae0

00005ce0 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    5ce0:	4b01      	ldr	r3, [pc, #4]	; (5ce8 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    5ce2:	6818      	ldr	r0, [r3, #0]
    5ce4:	f000 be66 	b.w	69b4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    5ce8:	20000ae0 	.word	0x20000ae0

00005cec <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    5cec:	4b01      	ldr	r3, [pc, #4]	; (5cf4 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    5cee:	6818      	ldr	r0, [r3, #0]
    5cf0:	f000 be7a 	b.w	69e8 <_ZN9ClearCore10UsbManagercvbEv>
    5cf4:	20000ae0 	.word	0x20000ae0

00005cf8 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    5cf8:	4b01      	ldr	r3, [pc, #4]	; (5d00 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    5cfa:	6818      	ldr	r0, [r3, #0]
    5cfc:	f000 be30 	b.w	6960 <_ZN9ClearCore10UsbManager8PortOpenEv>
    5d00:	20000ae0 	.word	0x20000ae0

00005d04 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    5d04:	4b01      	ldr	r3, [pc, #4]	; (5d0c <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    5d06:	6818      	ldr	r0, [r3, #0]
    5d08:	f001 ba04 	b.w	7114 <_ZN9ClearCore10UsbManager9PortCloseEv>
    5d0c:	20000ae0 	.word	0x20000ae0

00005d10 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    5d10:	4b01      	ldr	r3, [pc, #4]	; (5d18 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    5d12:	6818      	ldr	r0, [r3, #0]
    5d14:	f000 be1c 	b.w	6950 <_ZN9ClearCore10UsbManager5SpeedEm>
    5d18:	20000ae0 	.word	0x20000ae0

00005d1c <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    5d1c:	4b01      	ldr	r3, [pc, #4]	; (5d24 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    5d1e:	6818      	ldr	r0, [r3, #0]
    5d20:	f000 be18 	b.w	6954 <_ZN9ClearCore10UsbManager5SpeedEv>
    5d24:	20000ae0 	.word	0x20000ae0

00005d28 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    5d28:	4b01      	ldr	r3, [pc, #4]	; (5d30 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    5d2a:	6818      	ldr	r0, [r3, #0]
    5d2c:	f000 be7a 	b.w	6a24 <_ZN9ClearCore10UsbManager7CharGetEv>
    5d30:	20000ae0 	.word	0x20000ae0

00005d34 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    5d34:	4b01      	ldr	r3, [pc, #4]	; (5d3c <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    5d36:	6818      	ldr	r0, [r3, #0]
    5d38:	f000 bfa0 	b.w	6c7c <_ZN9ClearCore10UsbManager8CharPeekEv>
    5d3c:	20000ae0 	.word	0x20000ae0

00005d40 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    5d40:	4b01      	ldr	r3, [pc, #4]	; (5d48 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    5d42:	6818      	ldr	r0, [r3, #0]
    5d44:	f000 bfa6 	b.w	6c94 <_ZN9ClearCore10UsbManager8SendCharEh>
    5d48:	20000ae0 	.word	0x20000ae0

00005d4c <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    5d4c:	4b01      	ldr	r3, [pc, #4]	; (5d54 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    5d4e:	6818      	ldr	r0, [r3, #0]
    5d50:	f000 bfd4 	b.w	6cfc <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    5d54:	20000ae0 	.word	0x20000ae0

00005d58 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    5d58:	4b01      	ldr	r3, [pc, #4]	; (5d60 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    5d5a:	6818      	ldr	r0, [r3, #0]
    5d5c:	f000 bfd6 	b.w	6d0c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    5d60:	20000ae0 	.word	0x20000ae0

00005d64 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    5d64:	6803      	ldr	r3, [r0, #0]
    5d66:	4a04      	ldr	r2, [pc, #16]	; (5d78 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    5d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5d6a:	4293      	cmp	r3, r2
    5d6c:	d103      	bne.n	5d76 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    5d6e:	4b03      	ldr	r3, [pc, #12]	; (5d7c <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    5d70:	6818      	ldr	r0, [r3, #0]
    5d72:	f000 be39 	b.w	69e8 <_ZN9ClearCore10UsbManagercvbEv>
    5d76:	4718      	bx	r3
    5d78:	00005ced 	.word	0x00005ced
    5d7c:	20000ae0 	.word	0x20000ae0

00005d80 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    5d80:	f1a0 0004 	sub.w	r0, r0, #4
    5d84:	e7ee      	b.n	5d64 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    5d86:	bf00      	nop

00005d88 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5d88:	b508      	push	{r3, lr}
        return PortIsOpen();
    5d8a:	6803      	ldr	r3, [r0, #0]
    5d8c:	4a06      	ldr	r2, [pc, #24]	; (5da8 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    5d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5d90:	4293      	cmp	r3, r2
    5d92:	d105      	bne.n	5da0 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    5d94:	4b05      	ldr	r3, [pc, #20]	; (5dac <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    5d96:	6818      	ldr	r0, [r3, #0]
    5d98:	f000 fe26 	bl	69e8 <_ZN9ClearCore10UsbManagercvbEv>
    }
    5d9c:	b200      	sxth	r0, r0
    5d9e:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    5da0:	4798      	blx	r3
    }
    5da2:	b200      	sxth	r0, r0
    5da4:	bd08      	pop	{r3, pc}
    5da6:	bf00      	nop
    5da8:	00005ced 	.word	0x00005ced
    5dac:	20000ae0 	.word	0x20000ae0

00005db0 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5db0:	f1a0 0004 	sub.w	r0, r0, #4
    5db4:	e7e8      	b.n	5d88 <_ZN9ClearCore9SerialUsb5StateEv>
    5db6:	bf00      	nop

00005db8 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5db8:	b508      	push	{r3, lr}
            PortOpen();
    5dba:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    5dbc:	b961      	cbnz	r1, 5dd8 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    5dbe:	4a0b      	ldr	r2, [pc, #44]	; (5dec <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    5dc0:	68db      	ldr	r3, [r3, #12]
    5dc2:	4293      	cmp	r3, r2
    5dc4:	d105      	bne.n	5dd2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    5dc6:	4b0a      	ldr	r3, [pc, #40]	; (5df0 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5dc8:	6818      	ldr	r0, [r3, #0]
    5dca:	f001 f9a3 	bl	7114 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    5dce:	2001      	movs	r0, #1
    5dd0:	bd08      	pop	{r3, pc}
            PortClose();
    5dd2:	4798      	blx	r3
    }
    5dd4:	2001      	movs	r0, #1
    5dd6:	bd08      	pop	{r3, pc}
    5dd8:	4a06      	ldr	r2, [pc, #24]	; (5df4 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    5dda:	689b      	ldr	r3, [r3, #8]
    5ddc:	4293      	cmp	r3, r2
    5dde:	d1f8      	bne.n	5dd2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    5de0:	4b03      	ldr	r3, [pc, #12]	; (5df0 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    5de2:	6818      	ldr	r0, [r3, #0]
    5de4:	f000 fdbc 	bl	6960 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    5de8:	2001      	movs	r0, #1
    5dea:	bd08      	pop	{r3, pc}
    5dec:	00005d05 	.word	0x00005d05
    5df0:	20000ae0 	.word	0x20000ae0
    5df4:	00005cf9 	.word	0x00005cf9

00005df8 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5df8:	f1a0 0004 	sub.w	r0, r0, #4
    5dfc:	e7dc      	b.n	5db8 <_ZN9ClearCore9SerialUsb5StateEs>
    5dfe:	bf00      	nop

00005e00 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5e00:	b530      	push	{r4, r5, lr}
    5e02:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    5e04:	4d1a      	ldr	r5, [pc, #104]	; (5e70 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    5e06:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    5e0a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    5e0e:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    5e10:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    5e14:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    5e18:	d112      	bne.n	5e40 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    5e1a:	4621      	mov	r1, r4
    5e1c:	4620      	mov	r0, r4
    5e1e:	f006 f91d 	bl	c05c <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    5e22:	4621      	mov	r1, r4
    5e24:	2001      	movs	r0, #1
    5e26:	f006 f919 	bl	c05c <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    5e2a:	f006 f90b 	bl	c044 <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    5e2e:	f006 f943 	bl	c0b8 <cdcdf_acm_get_line_coding>
    5e32:	6803      	ldr	r3, [r0, #0]
    5e34:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5e38:	d012      	beq.n	5e60 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    5e3a:	2000      	movs	r0, #0
    5e3c:	b003      	add	sp, #12
    5e3e:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    5e40:	490c      	ldr	r1, [pc, #48]	; (5e74 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    5e42:	2000      	movs	r0, #0
    5e44:	f006 f90a 	bl	c05c <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    5e48:	490b      	ldr	r1, [pc, #44]	; (5e78 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    5e4a:	2001      	movs	r0, #1
    5e4c:	f006 f906 	bl	c05c <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    5e50:	6828      	ldr	r0, [r5, #0]
    5e52:	2140      	movs	r1, #64	; 0x40
    5e54:	3080      	adds	r0, #128	; 0x80
    5e56:	f006 f8cd 	bl	bff4 <cdcdf_acm_read>
}
    5e5a:	2000      	movs	r0, #0
    5e5c:	b003      	add	sp, #12
    5e5e:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    5e60:	2101      	movs	r1, #1
    5e62:	4806      	ldr	r0, [pc, #24]	; (5e7c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    5e64:	f003 fa36 	bl	92d4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    5e68:	2000      	movs	r0, #0
    5e6a:	b003      	add	sp, #12
    5e6c:	bd30      	pop	{r4, r5, pc}
    5e6e:	bf00      	nop
    5e70:	20000ae0 	.word	0x20000ae0
    5e74:	00005e81 	.word	0x00005e81
    5e78:	000060b9 	.word	0x000060b9
    5e7c:	200019dc 	.word	0x200019dc

00005e80 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    5e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e84:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    5e86:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    5e88:	498a      	ldr	r1, [pc, #552]	; (60b4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    5e8a:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5e8c:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    5e90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    5e94:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    5e98:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    5e9a:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5e9c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    5e9e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    5ea2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    5ea6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    5eaa:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    5eac:	bf48      	it	mi
    5eae:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    5eb0:	2c00      	cmp	r4, #0
    5eb2:	f000 80d6 	beq.w	6062 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    5eb6:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    5eba:	f000 80d2 	beq.w	6062 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    5ebe:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    5ec2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5ec6:	42a3      	cmp	r3, r4
    5ec8:	bf28      	it	cs
    5eca:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    5ecc:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    5ed0:	4299      	cmp	r1, r3
    5ed2:	bf28      	it	cs
    5ed4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    5ed6:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5ed8:	2900      	cmp	r1, #0
    5eda:	f000 80e8 	beq.w	60ae <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    5ede:	1d2c      	adds	r4, r5, #4
    5ee0:	4404      	add	r4, r0
    5ee2:	1d17      	adds	r7, r2, #4
    5ee4:	42be      	cmp	r6, r7
    5ee6:	bf38      	it	cc
    5ee8:	42a2      	cmpcc	r2, r4
    5eea:	f0c0 80ce 	bcc.w	608a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5eee:	290b      	cmp	r1, #11
    5ef0:	f240 80cb 	bls.w	608a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    5ef4:	4254      	negs	r4, r2
    5ef6:	f014 0403 	ands.w	r4, r4, #3
    5efa:	f000 80b7 	beq.w	606c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    5efe:	7817      	ldrb	r7, [r2, #0]
    5f00:	5547      	strb	r7, [r0, r5]
    5f02:	2c01      	cmp	r4, #1
    5f04:	f106 0c01 	add.w	ip, r6, #1
    5f08:	f102 0801 	add.w	r8, r2, #1
    5f0c:	f000 80b0 	beq.w	6070 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5f10:	7857      	ldrb	r7, [r2, #1]
    5f12:	7077      	strb	r7, [r6, #1]
    5f14:	2c02      	cmp	r4, #2
    5f16:	f106 0c02 	add.w	ip, r6, #2
    5f1a:	f102 0802 	add.w	r8, r2, #2
    5f1e:	f000 80a7 	beq.w	6070 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    5f22:	7897      	ldrb	r7, [r2, #2]
    5f24:	70b7      	strb	r7, [r6, #2]
    5f26:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f2a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5f2c:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f30:	9601      	str	r6, [sp, #4]
    5f32:	eba1 0b04 	sub.w	fp, r1, r4
    5f36:	f1ab 0604 	sub.w	r6, fp, #4
    5f3a:	08b6      	lsrs	r6, r6, #2
    5f3c:	192f      	adds	r7, r5, r4
    5f3e:	3601      	adds	r6, #1
    5f40:	ea4f 0986 	mov.w	r9, r6, lsl #2
    5f44:	4407      	add	r7, r0
    5f46:	4414      	add	r4, r2
    5f48:	f04f 0e00 	mov.w	lr, #0
    5f4c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    5f50:	f854 ab04 	ldr.w	sl, [r4], #4
    5f54:	f847 ab04 	str.w	sl, [r7], #4
    5f58:	4576      	cmp	r6, lr
    5f5a:	d8f7      	bhi.n	5f4c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    5f5c:	9c01      	ldr	r4, [sp, #4]
    5f5e:	45cb      	cmp	fp, r9
    5f60:	444c      	add	r4, r9
    5f62:	eb0c 0709 	add.w	r7, ip, r9
    5f66:	eb08 0e09 	add.w	lr, r8, r9
    5f6a:	f000 8089 	beq.w	6080 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5f6e:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    5f72:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f76:	1c66      	adds	r6, r4, #1
    5f78:	42b1      	cmp	r1, r6
    5f7a:	f240 8081 	bls.w	6080 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    5f7e:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5f80:	f89e 6001 	ldrb.w	r6, [lr, #1]
    5f84:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5f86:	42a1      	cmp	r1, r4
    5f88:	d97a      	bls.n	6080 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    5f8a:	f89e 4002 	ldrb.w	r4, [lr, #2]
    5f8e:	70bc      	strb	r4, [r7, #2]
    5f90:	1856      	adds	r6, r2, r1
    5f92:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5f96:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    5f9a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    5f9c:	1a64      	subs	r4, r4, r1
        if (count) {
    5f9e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    5fa0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    5fa4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    5fa8:	d064      	beq.n	6074 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    5faa:	1d31      	adds	r1, r6, #4
    5fac:	1d02      	adds	r2, r0, #4
    5fae:	4296      	cmp	r6, r2
    5fb0:	bf38      	it	cc
    5fb2:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    5fb4:	4604      	mov	r4, r0
    5fb6:	d371      	bcc.n	609c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5fb8:	2b0b      	cmp	r3, #11
    5fba:	d96f      	bls.n	609c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    5fbc:	4272      	negs	r2, r6
    5fbe:	f012 0203 	ands.w	r2, r2, #3
    5fc2:	d05f      	beq.n	6084 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    5fc4:	7831      	ldrb	r1, [r6, #0]
    5fc6:	7001      	strb	r1, [r0, #0]
    5fc8:	2a01      	cmp	r2, #1
    5fca:	f100 0401 	add.w	r4, r0, #1
    5fce:	f106 0e01 	add.w	lr, r6, #1
    5fd2:	d058      	beq.n	6086 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5fd4:	7871      	ldrb	r1, [r6, #1]
    5fd6:	7041      	strb	r1, [r0, #1]
    5fd8:	2a02      	cmp	r2, #2
    5fda:	f100 0402 	add.w	r4, r0, #2
    5fde:	f106 0e02 	add.w	lr, r6, #2
    5fe2:	d050      	beq.n	6086 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    5fe4:	78b1      	ldrb	r1, [r6, #2]
    5fe6:	7081      	strb	r1, [r0, #2]
    5fe8:	1cc4      	adds	r4, r0, #3
    5fea:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    5fee:	2703      	movs	r7, #3
    5ff0:	eba3 0c02 	sub.w	ip, r3, r2
    5ff4:	f1ac 0104 	sub.w	r1, ip, #4
    5ff8:	0889      	lsrs	r1, r1, #2
    5ffa:	1c4d      	adds	r5, r1, #1
    5ffc:	4416      	add	r6, r2
    5ffe:	ea4f 0885 	mov.w	r8, r5, lsl #2
    6002:	4402      	add	r2, r0
    6004:	2100      	movs	r1, #0
    6006:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6008:	f856 9b04 	ldr.w	r9, [r6], #4
    600c:	f842 9b04 	str.w	r9, [r2], #4
    6010:	428d      	cmp	r5, r1
    6012:	d8f8      	bhi.n	6006 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    6014:	45c4      	cmp	ip, r8
    6016:	eb07 0208 	add.w	r2, r7, r8
    601a:	eb04 0108 	add.w	r1, r4, r8
    601e:	eb0e 0608 	add.w	r6, lr, r8
    6022:	d00d      	beq.n	6040 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6024:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    6028:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    602c:	1c54      	adds	r4, r2, #1
    602e:	42a3      	cmp	r3, r4
    6030:	d906      	bls.n	6040 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6032:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6034:	7874      	ldrb	r4, [r6, #1]
    6036:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6038:	4293      	cmp	r3, r2
    603a:	d901      	bls.n	6040 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    603c:	78b2      	ldrb	r2, [r6, #2]
    603e:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    6040:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6044:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    6048:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    604c:	441a      	add	r2, r3
            m_readBufAvail -= count;
    604e:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    6050:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6054:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    6058:	b91c      	cbnz	r4, 6062 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    605a:	3080      	adds	r0, #128	; 0x80
    605c:	2140      	movs	r1, #64	; 0x40
    605e:	f005 ffc9 	bl	bff4 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6062:	b662      	cpsie	i
}
    6064:	2001      	movs	r0, #1
    6066:	b003      	add	sp, #12
    6068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    606c:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    606e:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6070:	9401      	str	r4, [sp, #4]
    6072:	e75e      	b.n	5f32 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6074:	4429      	add	r1, r5
    6076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    607a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    607e:	e7eb      	b.n	6058 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    6080:	1856      	adds	r6, r2, r1
    6082:	e786      	b.n	5f92 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    6084:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    6086:	4617      	mov	r7, r2
    6088:	e7b2      	b.n	5ff0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    608a:	1e74      	subs	r4, r6, #1
    608c:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    608e:	f812 7b01 	ldrb.w	r7, [r2], #1
    6092:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6096:	42b2      	cmp	r2, r6
    6098:	d1f9      	bne.n	608e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    609a:	e77a      	b.n	5f92 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    609c:	1e42      	subs	r2, r0, #1
    609e:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    60a0:	f816 1b01 	ldrb.w	r1, [r6], #1
    60a4:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    60a8:	42b4      	cmp	r4, r6
    60aa:	d1f9      	bne.n	60a0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    60ac:	e7c8      	b.n	6040 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    60ae:	4616      	mov	r6, r2
    60b0:	e773      	b.n	5f9a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    60b2:	bf00      	nop
    60b4:	20000ae0 	.word	0x20000ae0

000060b8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    60b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    60bc:	48d8      	ldr	r0, [pc, #864]	; (6420 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    60be:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    60c0:	2900      	cmp	r1, #0
    60c2:	f040 81ab 	bne.w	641c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    60c6:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    60c8:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    60cc:	441a      	add	r2, r3
    60ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    60d2:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    60d6:	2300      	movs	r3, #0
    60d8:	f3bf 8f5b 	dmb	ish
    60dc:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    60e0:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    60e4:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    60e6:	f3bf 8f5b 	dmb	ish
    60ea:	f04f 0101 	mov.w	r1, #1
    60ee:	f504 7388 	add.w	r3, r4, #272	; 0x110
    60f2:	e8d3 2f4f 	ldrexb	r2, [r3]
    60f6:	e8c3 1f40 	strexb	r0, r1, [r3]
    60fa:	2800      	cmp	r0, #0
    60fc:	d1f9      	bne.n	60f2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    60fe:	f3bf 8f5b 	dmb	ish
    6102:	f012 0fff 	tst.w	r2, #255	; 0xff
    6106:	f040 80dc 	bne.w	62c2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    610a:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    610e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    6112:	428e      	cmp	r6, r1
    6114:	f000 8191 	beq.w	643a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6118:	f104 0240 	add.w	r2, r4, #64	; 0x40
    611c:	eb02 0706 	add.w	r7, r2, r6
    6120:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    6124:	f0c0 80d1 	bcc.w	62ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6128:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    612c:	4419      	add	r1, r3
    612e:	2940      	cmp	r1, #64	; 0x40
    6130:	bf28      	it	cs
    6132:	2140      	movcs	r1, #64	; 0x40
    6134:	428b      	cmp	r3, r1
    6136:	bf28      	it	cs
    6138:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    613a:	2b00      	cmp	r3, #0
    613c:	f000 81a1 	beq.w	6482 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6140:	f106 0540 	add.w	r5, r6, #64	; 0x40
    6144:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6148:	1960      	adds	r0, r4, r5
    614a:	44a4      	add	ip, r4
    614c:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6150:	4540      	cmp	r0, r8
    6152:	bf38      	it	cc
    6154:	45e6      	cmpcc	lr, ip
    6156:	f0c0 818a 	bcc.w	646e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    615a:	2b0b      	cmp	r3, #11
    615c:	f240 8187 	bls.w	646e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6160:	4240      	negs	r0, r0
    6162:	f010 0003 	ands.w	r0, r0, #3
    6166:	f000 8161 	beq.w	642c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    616a:	5d96      	ldrb	r6, [r2, r6]
    616c:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    6170:	2801      	cmp	r0, #1
    6172:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    6176:	f107 0801 	add.w	r8, r7, #1
    617a:	f000 8159 	beq.w	6430 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    617e:	787e      	ldrb	r6, [r7, #1]
    6180:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    6184:	2802      	cmp	r0, #2
    6186:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    618a:	f107 0802 	add.w	r8, r7, #2
    618e:	f000 814f 	beq.w	6430 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6192:	78be      	ldrb	r6, [r7, #2]
    6194:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6198:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    619a:	f107 0803 	add.w	r8, r7, #3
    619e:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    61a2:	9601      	str	r6, [sp, #4]
    61a4:	eba3 0b00 	sub.w	fp, r3, r0
    61a8:	f1ab 0604 	sub.w	r6, fp, #4
    61ac:	08b6      	lsrs	r6, r6, #2
    61ae:	4405      	add	r5, r0
    61b0:	3601      	adds	r6, #1
    61b2:	30c0      	adds	r0, #192	; 0xc0
    61b4:	4425      	add	r5, r4
    61b6:	4420      	add	r0, r4
    61b8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    61bc:	2700      	movs	r7, #0
    61be:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    61c0:	f855 ab04 	ldr.w	sl, [r5], #4
    61c4:	f840 ab04 	str.w	sl, [r0], #4
    61c8:	42b7      	cmp	r7, r6
    61ca:	d3f8      	bcc.n	61be <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    61cc:	9801      	ldr	r0, [sp, #4]
    61ce:	45cb      	cmp	fp, r9
    61d0:	4448      	add	r0, r9
    61d2:	eb0c 0509 	add.w	r5, ip, r9
    61d6:	eb08 0709 	add.w	r7, r8, r9
    61da:	d00d      	beq.n	61f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    61dc:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    61e0:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    61e4:	1c46      	adds	r6, r0, #1
    61e6:	42b3      	cmp	r3, r6
    61e8:	d906      	bls.n	61f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    61ea:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    61ec:	787e      	ldrb	r6, [r7, #1]
    61ee:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    61f0:	4283      	cmp	r3, r0
    61f2:	d901      	bls.n	61f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    61f4:	78b8      	ldrb	r0, [r7, #2]
    61f6:	70a8      	strb	r0, [r5, #2]
    61f8:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    61fc:	1acb      	subs	r3, r1, r3
    61fe:	f000 80fc 	beq.w	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6202:	f104 0544 	add.w	r5, r4, #68	; 0x44
    6206:	1d06      	adds	r6, r0, #4
    6208:	42b2      	cmp	r2, r6
    620a:	bf38      	it	cc
    620c:	42a8      	cmpcc	r0, r5
    620e:	f0c0 8125 	bcc.w	645c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6212:	2b0b      	cmp	r3, #11
    6214:	f240 8122 	bls.w	645c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6218:	4255      	negs	r5, r2
    621a:	f015 0503 	ands.w	r5, r5, #3
    621e:	f000 8109 	beq.w	6434 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    6222:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    6226:	7002      	strb	r2, [r0, #0]
    6228:	2d01      	cmp	r5, #1
    622a:	f100 0801 	add.w	r8, r0, #1
    622e:	f104 0241 	add.w	r2, r4, #65	; 0x41
    6232:	f000 8100 	beq.w	6436 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6236:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    623a:	7042      	strb	r2, [r0, #1]
    623c:	2d02      	cmp	r5, #2
    623e:	f100 0802 	add.w	r8, r0, #2
    6242:	f104 0242 	add.w	r2, r4, #66	; 0x42
    6246:	f000 80f6 	beq.w	6436 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    624a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    624e:	7082      	strb	r2, [r0, #2]
    6250:	f100 0803 	add.w	r8, r0, #3
    6254:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6258:	2703      	movs	r7, #3
    625a:	eba3 0905 	sub.w	r9, r3, r5
    625e:	f1a9 0604 	sub.w	r6, r9, #4
    6262:	08b6      	lsrs	r6, r6, #2
    6264:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    6268:	3601      	adds	r6, #1
    626a:	4428      	add	r0, r5
    626c:	44a4      	add	ip, r4
    626e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    6272:	f04f 0a00 	mov.w	sl, #0
    6276:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    627a:	f85c 5b04 	ldr.w	r5, [ip], #4
    627e:	f840 5b04 	str.w	r5, [r0], #4
    6282:	4556      	cmp	r6, sl
    6284:	d8f7      	bhi.n	6276 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    6286:	45d9      	cmp	r9, fp
    6288:	445f      	add	r7, fp
    628a:	eb08 000b 	add.w	r0, r8, fp
    628e:	eb02 050b 	add.w	r5, r2, fp
    6292:	f000 80b2 	beq.w	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6296:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    629a:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    629e:	1c7a      	adds	r2, r7, #1
    62a0:	4293      	cmp	r3, r2
    62a2:	f240 80aa 	bls.w	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    62a6:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    62a8:	786a      	ldrb	r2, [r5, #1]
    62aa:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    62ac:	42bb      	cmp	r3, r7
    62ae:	f240 80a4 	bls.w	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    62b2:	78ab      	ldrb	r3, [r5, #2]
    62b4:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    62b6:	4670      	mov	r0, lr
    62b8:	f005 feb0 	bl	c01c <cdcdf_acm_write>
    62bc:	2800      	cmp	r0, #0
    62be:	f040 80a2 	bne.w	6406 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    62c2:	2001      	movs	r0, #1
    62c4:	b003      	add	sp, #12
    62c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    62ca:	1b89      	subs	r1, r1, r6
    62cc:	f106 0340 	add.w	r3, r6, #64	; 0x40
    62d0:	f106 0044 	add.w	r0, r6, #68	; 0x44
    62d4:	2940      	cmp	r1, #64	; 0x40
    62d6:	eb04 0803 	add.w	r8, r4, r3
    62da:	4420      	add	r0, r4
    62dc:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    62e0:	bf28      	it	cs
    62e2:	2140      	movcs	r1, #64	; 0x40
    62e4:	45a8      	cmp	r8, r5
    62e6:	bf38      	it	cc
    62e8:	4586      	cmpcc	lr, r0
    62ea:	f0c0 80ad 	bcc.w	6448 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    62ee:	290b      	cmp	r1, #11
    62f0:	f240 80aa 	bls.w	6448 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    62f4:	f1c8 0800 	rsb	r8, r8, #0
    62f8:	f018 0803 	ands.w	r8, r8, #3
    62fc:	f000 8092 	beq.w	6424 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    6300:	5d92      	ldrb	r2, [r2, r6]
    6302:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    6306:	f1b8 0f01 	cmp.w	r8, #1
    630a:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    630e:	f107 0601 	add.w	r6, r7, #1
    6312:	f000 8089 	beq.w	6428 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6316:	787a      	ldrb	r2, [r7, #1]
    6318:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    631c:	f1b8 0f02 	cmp.w	r8, #2
    6320:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    6324:	f107 0602 	add.w	r6, r7, #2
    6328:	d07e      	beq.n	6428 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    632a:	78ba      	ldrb	r2, [r7, #2]
    632c:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6330:	1cfe      	adds	r6, r7, #3
    6332:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6336:	f04f 0903 	mov.w	r9, #3
    633a:	4443      	add	r3, r8
    633c:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6340:	58e2      	ldr	r2, [r4, r3]
    6342:	5022      	str	r2, [r4, r0]
    6344:	eba1 0808 	sub.w	r8, r1, r8
    6348:	f1a8 0204 	sub.w	r2, r8, #4
    634c:	4423      	add	r3, r4
    634e:	0892      	lsrs	r2, r2, #2
    6350:	3201      	adds	r2, #1
    6352:	4420      	add	r0, r4
    6354:	685f      	ldr	r7, [r3, #4]
    6356:	6047      	str	r7, [r0, #4]
    6358:	2a02      	cmp	r2, #2
    635a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    635e:	d035      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6360:	689f      	ldr	r7, [r3, #8]
    6362:	6087      	str	r7, [r0, #8]
    6364:	2a03      	cmp	r2, #3
    6366:	d031      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6368:	68df      	ldr	r7, [r3, #12]
    636a:	60c7      	str	r7, [r0, #12]
    636c:	2a04      	cmp	r2, #4
    636e:	d02d      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6370:	691f      	ldr	r7, [r3, #16]
    6372:	6107      	str	r7, [r0, #16]
    6374:	2a05      	cmp	r2, #5
    6376:	d029      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6378:	695f      	ldr	r7, [r3, #20]
    637a:	6147      	str	r7, [r0, #20]
    637c:	2a06      	cmp	r2, #6
    637e:	d025      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6380:	699f      	ldr	r7, [r3, #24]
    6382:	6187      	str	r7, [r0, #24]
    6384:	2a07      	cmp	r2, #7
    6386:	d021      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6388:	69df      	ldr	r7, [r3, #28]
    638a:	61c7      	str	r7, [r0, #28]
    638c:	2a08      	cmp	r2, #8
    638e:	d01d      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6390:	6a1f      	ldr	r7, [r3, #32]
    6392:	6207      	str	r7, [r0, #32]
    6394:	2a09      	cmp	r2, #9
    6396:	d019      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6398:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    639a:	6247      	str	r7, [r0, #36]	; 0x24
    639c:	2a0a      	cmp	r2, #10
    639e:	d015      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    63a0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    63a2:	6287      	str	r7, [r0, #40]	; 0x28
    63a4:	2a0b      	cmp	r2, #11
    63a6:	d011      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    63a8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    63aa:	62c7      	str	r7, [r0, #44]	; 0x2c
    63ac:	2a0c      	cmp	r2, #12
    63ae:	d00d      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    63b0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    63b2:	6307      	str	r7, [r0, #48]	; 0x30
    63b4:	2a0d      	cmp	r2, #13
    63b6:	d009      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    63b8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    63ba:	6347      	str	r7, [r0, #52]	; 0x34
    63bc:	2a0e      	cmp	r2, #14
    63be:	d005      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    63c0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    63c2:	6387      	str	r7, [r0, #56]	; 0x38
    63c4:	2a0f      	cmp	r2, #15
    63c6:	d001      	beq.n	63cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    63c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    63ca:	63c3      	str	r3, [r0, #60]	; 0x3c
    63cc:	45e0      	cmp	r8, ip
    63ce:	44e1      	add	r9, ip
    63d0:	eb05 030c 	add.w	r3, r5, ip
    63d4:	eb06 000c 	add.w	r0, r6, ip
    63d8:	d00f      	beq.n	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    63da:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    63de:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    63e2:	f109 0201 	add.w	r2, r9, #1
    63e6:	4291      	cmp	r1, r2
    63e8:	d907      	bls.n	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    63ea:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    63ee:	7842      	ldrb	r2, [r0, #1]
    63f0:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    63f2:	4549      	cmp	r1, r9
    63f4:	d901      	bls.n	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    63f6:	7882      	ldrb	r2, [r0, #2]
    63f8:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    63fa:	4670      	mov	r0, lr
    63fc:	f005 fe0e 	bl	c01c <cdcdf_acm_write>
    6400:	2800      	cmp	r0, #0
    6402:	f43f af5e 	beq.w	62c2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    6406:	f3bf 8f5b 	dmb	ish
    640a:	2300      	movs	r3, #0
    640c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    6410:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    6412:	f3bf 8f5b 	dmb	ish
}
    6416:	b003      	add	sp, #12
    6418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    641c:	6801      	ldr	r1, [r0, #0]
    641e:	e65a      	b.n	60d6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    6420:	20000ae0 	.word	0x20000ae0
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6424:	463e      	mov	r6, r7
    6426:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6428:	46c1      	mov	r9, r8
    642a:	e786      	b.n	633a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    642c:	46b8      	mov	r8, r7
    642e:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6430:	9001      	str	r0, [sp, #4]
    6432:	e6b7      	b.n	61a4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6434:	4680      	mov	r8, r0
    6436:	462f      	mov	r7, r5
    6438:	e70f      	b.n	625a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    643a:	f3bf 8f5b 	dmb	ish
    643e:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    6442:	f3bf 8f5b 	dmb	ish
    6446:	e73c      	b.n	62c2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6448:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    644c:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    644e:	f817 2b01 	ldrb.w	r2, [r7], #1
    6452:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6456:	4287      	cmp	r7, r0
    6458:	d1f9      	bne.n	644e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    645a:	e7ce      	b.n	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    645c:	3801      	subs	r0, #1
    645e:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6460:	f812 5b01 	ldrb.w	r5, [r2], #1
    6464:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6468:	429a      	cmp	r2, r3
    646a:	d1f9      	bne.n	6460 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    646c:	e7c5      	b.n	63fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    646e:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    6472:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    6474:	f817 5b01 	ldrb.w	r5, [r7], #1
    6478:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    647c:	42be      	cmp	r6, r7
    647e:	d1f9      	bne.n	6474 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6480:	e6ba      	b.n	61f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6482:	4670      	mov	r0, lr
    6484:	e6ba      	b.n	61fc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    6486:	bf00      	nop

00006488 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6488:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    648a:	4e16      	ldr	r6, [pc, #88]	; (64e4 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    648c:	6834      	ldr	r4, [r6, #0]
    648e:	f014 0401 	ands.w	r4, r4, #1
    6492:	d002      	beq.n	649a <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    6494:	4b14      	ldr	r3, [pc, #80]	; (64e8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6496:	6818      	ldr	r0, [r3, #0]
    6498:	bd70      	pop	{r4, r5, r6, pc}
    649a:	f44f 7090 	mov.w	r0, #288	; 0x120
    649e:	f00d f823 	bl	134e8 <_Znwj>
    64a2:	4605      	mov	r5, r0
    m_portOpen(false) {
    64a4:	f100 0380 	add.w	r3, r0, #128	; 0x80
    64a8:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    64ac:	490f      	ldr	r1, [pc, #60]	; (64ec <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    64ae:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    64b2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    64b6:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    64ba:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    64be:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    64c2:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    64c6:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    64ca:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    64ce:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    64d2:	2003      	movs	r0, #3
    64d4:	f005 fdc2 	bl	c05c <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    64d8:	4a03      	ldr	r2, [pc, #12]	; (64e8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    64da:	2301      	movs	r3, #1
    64dc:	6015      	str	r5, [r2, #0]
    64de:	4628      	mov	r0, r5
    64e0:	6033      	str	r3, [r6, #0]
}
    64e2:	bd70      	pop	{r4, r5, r6, pc}
    64e4:	20000adc 	.word	0x20000adc
    64e8:	20000b24 	.word	0x20000b24
    64ec:	00005e01 	.word	0x00005e01

000064f0 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    64f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    64f4:	4ac7      	ldr	r2, [pc, #796]	; (6814 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    64f6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    64fa:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    64fe:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6500:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6504:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6508:	0659      	lsls	r1, r3, #25
    650a:	d4fb      	bmi.n	6504 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    650c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6510:	49c0      	ldr	r1, [pc, #768]	; (6814 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6512:	2004      	movs	r0, #4
    6514:	f360 0303 	bfi	r3, r0, #0, #4
    6518:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    651c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6524:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6528:	684b      	ldr	r3, [r1, #4]
    652a:	06db      	lsls	r3, r3, #27
    652c:	d4fc      	bmi.n	6528 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    652e:	4bba      	ldr	r3, [pc, #744]	; (6818 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6530:	49ba      	ldr	r1, [pc, #744]	; (681c <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    6532:	691a      	ldr	r2, [r3, #16]
    6534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6538:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    653a:	699a      	ldr	r2, [r3, #24]
    653c:	f042 0201 	orr.w	r2, r2, #1
    6540:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6542:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    6546:	2203      	movs	r2, #3
    6548:	f006 f934 	bl	c7b4 <usb_find_str_desc>
    if (!serNumDescPtr) {
    654c:	4604      	mov	r4, r0
    654e:	2800      	cmp	r0, #0
    6550:	f000 819c 	beq.w	688c <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    6554:	4bb2      	ldr	r3, [pc, #712]	; (6820 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    6556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6558:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    655c:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    655e:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6560:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6562:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6566:	f100 0730 	add.w	r7, r0, #48	; 0x30
    656a:	3037      	adds	r0, #55	; 0x37
    656c:	2d09      	cmp	r5, #9
    656e:	bf88      	it	hi
    6570:	4607      	movhi	r7, r0
    6572:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    6576:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    657a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    657e:	3037      	adds	r0, #55	; 0x37
    6580:	f1b8 0f09 	cmp.w	r8, #9
    6584:	bfc8      	it	gt
    6586:	4684      	movgt	ip, r0
    6588:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    658a:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    658e:	f88d c011 	strb.w	ip, [sp, #17]
    6592:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6596:	3037      	adds	r0, #55	; 0x37
    6598:	2e09      	cmp	r6, #9
    659a:	bfc8      	it	gt
    659c:	4684      	movgt	ip, r0
    659e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    65a0:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65a4:	f88d c012 	strb.w	ip, [sp, #18]
    65a8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    65ac:	3037      	adds	r0, #55	; 0x37
    65ae:	2d09      	cmp	r5, #9
    65b0:	bfc8      	it	gt
    65b2:	4684      	movgt	ip, r0
    65b4:	fa5f f08e 	uxtb.w	r0, lr
    65b8:	f88d 7010 	strb.w	r7, [sp, #16]
    65bc:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    65c0:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65c4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    65c8:	3037      	adds	r0, #55	; 0x37
    65ca:	f1be 0f09 	cmp.w	lr, #9
    65ce:	bfd4      	ite	le
    65d0:	46e6      	movle	lr, ip
    65d2:	4686      	movgt	lr, r0
    65d4:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    65d6:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    65da:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65dc:	f88d e014 	strb.w	lr, [sp, #20]
    65e0:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    65e4:	3030      	adds	r0, #48	; 0x30
    65e6:	2f09      	cmp	r7, #9
    65e8:	bfcc      	ite	gt
    65ea:	4677      	movgt	r7, lr
    65ec:	4607      	movle	r7, r0
    65ee:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    65f0:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65f2:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    65f6:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    65fa:	f100 0737 	add.w	r7, r0, #55	; 0x37
    65fe:	3030      	adds	r0, #48	; 0x30
    6600:	2e09      	cmp	r6, #9
    6602:	bfcc      	ite	gt
    6604:	463e      	movgt	r6, r7
    6606:	4606      	movle	r6, r0
    6608:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    660a:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    660c:	f88d 6016 	strb.w	r6, [sp, #22]
    6610:	f100 0637 	add.w	r6, r0, #55	; 0x37
    6614:	3030      	adds	r0, #48	; 0x30
    6616:	2b09      	cmp	r3, #9
    6618:	bfcc      	ite	gt
    661a:	4633      	movgt	r3, r6
    661c:	4603      	movle	r3, r0
    661e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6620:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6624:	f88d 3017 	strb.w	r3, [sp, #23]
    6628:	f100 0337 	add.w	r3, r0, #55	; 0x37
    662c:	3030      	adds	r0, #48	; 0x30
    662e:	2d09      	cmp	r5, #9
    6630:	bf88      	it	hi
    6632:	4618      	movhi	r0, r3
    6634:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6638:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    663c:	f88d 0018 	strb.w	r0, [sp, #24]
    6640:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6644:	3330      	adds	r3, #48	; 0x30
    6646:	f1bc 0f09 	cmp.w	ip, #9
    664a:	bfcc      	ite	gt
    664c:	4684      	movgt	ip, r0
    664e:	469c      	movle	ip, r3
    6650:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    6654:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6658:	f88d c019 	strb.w	ip, [sp, #25]
    665c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6660:	3330      	adds	r3, #48	; 0x30
    6662:	f1be 0f09 	cmp.w	lr, #9
    6666:	bfd8      	it	le
    6668:	469c      	movle	ip, r3
    666a:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    666c:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6670:	f88d c01a 	strb.w	ip, [sp, #26]
    6674:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6678:	3330      	adds	r3, #48	; 0x30
    667a:	2f09      	cmp	r7, #9
    667c:	bfd8      	it	le
    667e:	469c      	movle	ip, r3
    6680:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    6682:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6686:	f88d c01b 	strb.w	ip, [sp, #27]
    668a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    668e:	3330      	adds	r3, #48	; 0x30
    6690:	2e09      	cmp	r6, #9
    6692:	bfd8      	it	le
    6694:	469c      	movle	ip, r3
    6696:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    6698:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    669c:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    669e:	f88d c01c 	strb.w	ip, [sp, #28]
    66a2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    66a6:	3330      	adds	r3, #48	; 0x30
    66a8:	2d09      	cmp	r5, #9
    66aa:	bfcc      	ite	gt
    66ac:	4665      	movgt	r5, ip
    66ae:	461d      	movle	r5, r3
    66b0:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    66b2:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66b4:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    66b8:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66bc:	f103 0537 	add.w	r5, r3, #55	; 0x37
    66c0:	3330      	adds	r3, #48	; 0x30
    66c2:	2809      	cmp	r0, #9
    66c4:	bfcc      	ite	gt
    66c6:	4628      	movgt	r0, r5
    66c8:	4618      	movle	r0, r3
    66ca:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    66cc:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66d0:	f88d 001e 	strb.w	r0, [sp, #30]
    66d4:	f103 0037 	add.w	r0, r3, #55	; 0x37
    66d8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    66da:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66de:	2a09      	cmp	r2, #9
    66e0:	bfcc      	ite	gt
    66e2:	4602      	movgt	r2, r0
    66e4:	461a      	movle	r2, r3
    66e6:	fa5f f58e 	uxtb.w	r5, lr
    66ea:	b2f8      	uxtb	r0, r7
    66ec:	f88d 201f 	strb.w	r2, [sp, #31]
    66f0:	f105 0237 	add.w	r2, r5, #55	; 0x37
    66f4:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    66f6:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    66fa:	f1be 0f09 	cmp.w	lr, #9
    66fe:	bf88      	it	hi
    6700:	4615      	movhi	r5, r2
    6702:	f100 0237 	add.w	r2, r0, #55	; 0x37
    6706:	3030      	adds	r0, #48	; 0x30
    6708:	2f09      	cmp	r7, #9
    670a:	bfc8      	it	gt
    670c:	4610      	movgt	r0, r2
    670e:	b2f3      	uxtb	r3, r6
    6710:	f103 0237 	add.w	r2, r3, #55	; 0x37
    6714:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6718:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    671a:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    671e:	2e09      	cmp	r6, #9
    6720:	bfc8      	it	gt
    6722:	4613      	movgt	r3, r2
    6724:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    6726:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    672a:	f102 0837 	add.w	r8, r2, #55	; 0x37
    672e:	3230      	adds	r2, #48	; 0x30
    6730:	2809      	cmp	r0, #9
    6732:	bfd8      	it	le
    6734:	4690      	movle	r8, r2
    6736:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    673a:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    673e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    6742:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6744:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6746:	f88d 5020 	strb.w	r5, [sp, #32]
    674a:	f102 0437 	add.w	r4, r2, #55	; 0x37
    674e:	3230      	adds	r2, #48	; 0x30
    6750:	f1be 0f09 	cmp.w	lr, #9
    6754:	bfd8      	it	le
    6756:	4614      	movle	r4, r2
    6758:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    675a:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    675c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6760:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6764:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6768:	3230      	adds	r2, #48	; 0x30
    676a:	2f09      	cmp	r7, #9
    676c:	bfcc      	ite	gt
    676e:	4627      	movgt	r7, r4
    6770:	4617      	movle	r7, r2
    6772:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    6774:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6778:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    677c:	f102 0737 	add.w	r7, r2, #55	; 0x37
    6780:	3230      	adds	r2, #48	; 0x30
    6782:	2e09      	cmp	r6, #9
    6784:	bfcc      	ite	gt
    6786:	463e      	movgt	r6, r7
    6788:	4616      	movle	r6, r2
    678a:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    678c:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    678e:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    6792:	f102 0637 	add.w	r6, r2, #55	; 0x37
    6796:	3230      	adds	r2, #48	; 0x30
    6798:	2909      	cmp	r1, #9
    679a:	bfcc      	ite	gt
    679c:	4631      	movgt	r1, r6
    679e:	4611      	movle	r1, r2
    67a0:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    67a2:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67a6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    67aa:	f102 0130 	add.w	r1, r2, #48	; 0x30
    67ae:	3237      	adds	r2, #55	; 0x37
    67b0:	2d09      	cmp	r5, #9
    67b2:	bf88      	it	hi
    67b4:	4611      	movhi	r1, r2
    67b6:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    67ba:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    67c2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    67c6:	3237      	adds	r2, #55	; 0x37
    67c8:	f1bc 0f09 	cmp.w	ip, #9
    67cc:	bfd4      	ite	le
    67ce:	468c      	movle	ip, r1
    67d0:	4694      	movgt	ip, r2
    67d2:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    67d6:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67da:	f102 0137 	add.w	r1, r2, #55	; 0x37
    67de:	3230      	adds	r2, #48	; 0x30
    67e0:	f1be 0f09 	cmp.w	lr, #9
    67e4:	bfcc      	ite	gt
    67e6:	468e      	movgt	lr, r1
    67e8:	4696      	movle	lr, r2
    67ea:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    67ec:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67f0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    67f4:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    67f8:	3130      	adds	r1, #48	; 0x30
    67fa:	2c09      	cmp	r4, #9
    67fc:	bfd8      	it	le
    67fe:	468e      	movle	lr, r1
    6800:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    6802:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6806:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    680a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    680e:	3237      	adds	r2, #55	; 0x37
    6810:	e008      	b.n	6824 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    6812:	bf00      	nop
    6814:	40001c00 	.word	0x40001c00
    6818:	40000800 	.word	0x40000800
    681c:	200000e7 	.word	0x200000e7
    6820:	00022f54 	.word	0x00022f54
    6824:	2f09      	cmp	r7, #9
    6826:	bfd4      	ite	le
    6828:	4677      	movle	r7, lr
    682a:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    682c:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6830:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    6832:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6836:	b2da      	uxtb	r2, r3
    6838:	b2e9      	uxtb	r1, r5
    683a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    683e:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6842:	3437      	adds	r4, #55	; 0x37
    6844:	2e09      	cmp	r6, #9
    6846:	bfd8      	it	le
    6848:	463c      	movle	r4, r7
    684a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    684e:	f102 0730 	add.w	r7, r2, #48	; 0x30
    6852:	3137      	adds	r1, #55	; 0x37
    6854:	3237      	adds	r2, #55	; 0x37
    6856:	2d09      	cmp	r5, #9
    6858:	bfd8      	it	le
    685a:	4671      	movle	r1, lr
    685c:	2b09      	cmp	r3, #9
    685e:	bfd4      	ite	le
    6860:	463b      	movle	r3, r7
    6862:	4613      	movgt	r3, r2
    6864:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6868:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    686c:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6870:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    6874:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    6878:	f10d 030f 	add.w	r3, sp, #15
    687c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6880:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6884:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6888:	428b      	cmp	r3, r1
    688a:	d1f9      	bne.n	6880 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    688c:	4b2a      	ldr	r3, [pc, #168]	; (6938 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    688e:	4a2b      	ldr	r2, [pc, #172]	; (693c <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6890:	4f2b      	ldr	r7, [pc, #172]	; (6940 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    6892:	4d2c      	ldr	r5, [pc, #176]	; (6944 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    6894:	482c      	ldr	r0, [pc, #176]	; (6948 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    6896:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6898:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    689c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    68a0:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    68a4:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    68a8:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    68ac:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    68b0:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68b2:	629c      	str	r4, [r3, #40]	; 0x28
    68b4:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    68b6:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    68b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    68bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    68c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    68c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    68c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    68cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    68d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    68d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    68d8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    68dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    68e0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    68e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    68e8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68ea:	629c      	str	r4, [r3, #40]	; 0x28
    68ec:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    68ee:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    68f0:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    68f4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    68f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    68fc:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6904:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6908:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    690c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6910:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6914:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    691c:	f005 fe92 	bl	c644 <usbdc_init>
    cdcdf_acm_init();
    6920:	f005 fb4a 	bl	bfb8 <cdcdf_acm_init>
    usbdc_start(single_desc);
    6924:	4809      	ldr	r0, [pc, #36]	; (694c <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    6926:	f005 febb 	bl	c6a0 <usbdc_start>
    usbdc_attach();
    692a:	f005 fed1 	bl	c6d0 <usbdc_attach>
}
    692e:	2001      	movs	r0, #1
    6930:	b00c      	add	sp, #48	; 0x30
    6932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6936:	bf00      	nop
    6938:	41008000 	.word	0x41008000
    693c:	e000e100 	.word	0xe000e100
    6940:	c0000100 	.word	0xc0000100
    6944:	c0000200 	.word	0xc0000200
    6948:	20000ae4 	.word	0x20000ae4
    694c:	20000008 	.word	0x20000008

00006950 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6950:	2001      	movs	r0, #1
    6952:	4770      	bx	lr

00006954 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    6954:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    6956:	f005 fbaf 	bl	c0b8 <cdcdf_acm_get_line_coding>
}
    695a:	6800      	ldr	r0, [r0, #0]
    695c:	bd08      	pop	{r3, pc}
    695e:	bf00      	nop

00006960 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6960:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    6962:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    6966:	b103      	cbz	r3, 696a <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6968:	bd38      	pop	{r3, r4, r5, pc}
    696a:	4604      	mov	r4, r0
    m_portOpen = true;
    696c:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    696e:	4618      	mov	r0, r3
    m_portOpen = true;
    6970:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6974:	4906      	ldr	r1, [pc, #24]	; (6990 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    6976:	f005 fb71 	bl	c05c <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    697a:	4628      	mov	r0, r5
    697c:	4905      	ldr	r1, [pc, #20]	; (6994 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    697e:	f005 fb6d 	bl	c05c <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6982:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6986:	2140      	movs	r1, #64	; 0x40
}
    6988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    698c:	f005 bb32 	b.w	bff4 <cdcdf_acm_read>
    6990:	00005e81 	.word	0x00005e81
    6994:	000060b9 	.word	0x000060b9

00006998 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6998:	4603      	mov	r3, r0
    m_inHead = 0;
    699a:	2200      	movs	r2, #0
    699c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    69a0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    69a4:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    69a8:	2140      	movs	r1, #64	; 0x40
    69aa:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    69ac:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    69b0:	f005 bb20 	b.w	bff4 <cdcdf_acm_read>

000069b4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    69b4:	b538      	push	{r3, r4, r5, lr}
    69b6:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    69b8:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    69bc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    69c0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    69c4:	429a      	cmp	r2, r3
    69c6:	d100      	bne.n	69ca <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    69c8:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    69ca:	f005 fb6f 	bl	c0ac <cdcdf_acm_is_enabled>
    69ce:	2800      	cmp	r0, #0
    69d0:	d0fa      	beq.n	69c8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    69d2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    69d6:	07db      	lsls	r3, r3, #31
    69d8:	d5f6      	bpl.n	69c8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    69da:	7b6b      	ldrb	r3, [r5, #13]
    69dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    69e0:	2b02      	cmp	r3, #2
    69e2:	d0eb      	beq.n	69bc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    69e4:	bd38      	pop	{r3, r4, r5, pc}
    69e6:	bf00      	nop

000069e8 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    69e8:	b538      	push	{r3, r4, r5, lr}
    69ea:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    69ec:	f005 fb5e 	bl	c0ac <cdcdf_acm_is_enabled>
    69f0:	4604      	mov	r4, r0
    69f2:	b170      	cbz	r0, 6a12 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    69f4:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    69f8:	f014 0401 	ands.w	r4, r4, #1
    69fc:	d009      	beq.n	6a12 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    69fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6a02:	7b5c      	ldrb	r4, [r3, #13]
    6a04:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6a08:	f1a4 0402 	sub.w	r4, r4, #2
    6a0c:	fab4 f484 	clz	r4, r4
    6a10:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    6a12:	4803      	ldr	r0, [pc, #12]	; (6a20 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    6a14:	2100      	movs	r1, #0
    6a16:	f002 ffeb 	bl	99f0 <Delay_cycles>
}
    6a1a:	4620      	mov	r0, r4
    6a1c:	bd38      	pop	{r3, r4, r5, pc}
    6a1e:	bf00      	nop
    6a20:	00124f80 	.word	0x00124f80

00006a24 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    6a24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6a28:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6a2c:	4293      	cmp	r3, r2
    6a2e:	f000 8116 	beq.w	6c5e <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    6a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6a36:	1c5a      	adds	r2, r3, #1
    6a38:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6a3c:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6a3e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    6a42:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6a44:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6a46:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6a4a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6a4e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    6a52:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6a54:	bf48      	it	mi
    6a56:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6a58:	2d00      	cmp	r5, #0
    6a5a:	f000 80e3 	beq.w	6c24 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6a5e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6a62:	f000 80df 	beq.w	6c24 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    6a66:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6a6a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6a6e:	42ab      	cmp	r3, r5
    6a70:	bf28      	it	cs
    6a72:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6a74:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    6a78:	4299      	cmp	r1, r3
    6a7a:	bf28      	it	cs
    6a7c:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6a7e:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6a80:	2900      	cmp	r1, #0
    6a82:	f000 80f8 	beq.w	6c76 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    6a86:	1d35      	adds	r5, r6, #4
    6a88:	4405      	add	r5, r0
    6a8a:	f102 0e04 	add.w	lr, r2, #4
    6a8e:	4577      	cmp	r7, lr
    6a90:	bf38      	it	cc
    6a92:	42aa      	cmpcc	r2, r5
    6a94:	f0c0 80da 	bcc.w	6c4c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6a98:	290b      	cmp	r1, #11
    6a9a:	f240 80d7 	bls.w	6c4c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6a9e:	4255      	negs	r5, r2
    6aa0:	f015 0503 	ands.w	r5, r5, #3
    6aa4:	f000 80c3 	beq.w	6c2e <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6aa8:	f892 e000 	ldrb.w	lr, [r2]
    6aac:	f800 e006 	strb.w	lr, [r0, r6]
    6ab0:	2d01      	cmp	r5, #1
    6ab2:	f107 0801 	add.w	r8, r7, #1
    6ab6:	f102 0901 	add.w	r9, r2, #1
    6aba:	f000 80ba 	beq.w	6c32 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6abe:	f892 e001 	ldrb.w	lr, [r2, #1]
    6ac2:	f887 e001 	strb.w	lr, [r7, #1]
    6ac6:	2d02      	cmp	r5, #2
    6ac8:	f107 0802 	add.w	r8, r7, #2
    6acc:	f102 0902 	add.w	r9, r2, #2
    6ad0:	f000 80af 	beq.w	6c32 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6ad4:	f892 e002 	ldrb.w	lr, [r2, #2]
    6ad8:	f887 e002 	strb.w	lr, [r7, #2]
    6adc:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6ae0:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    6ae2:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6ae6:	9700      	str	r7, [sp, #0]
    6ae8:	eba1 0b05 	sub.w	fp, r1, r5
    6aec:	f1ab 0704 	sub.w	r7, fp, #4
    6af0:	08bf      	lsrs	r7, r7, #2
    6af2:	eb06 0e05 	add.w	lr, r6, r5
    6af6:	3701      	adds	r7, #1
    6af8:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    6afc:	4486      	add	lr, r0
    6afe:	4415      	add	r5, r2
    6b00:	f04f 0c00 	mov.w	ip, #0
    6b04:	9401      	str	r4, [sp, #4]
    6b06:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    6b0a:	f855 4b04 	ldr.w	r4, [r5], #4
    6b0e:	f84e 4b04 	str.w	r4, [lr], #4
    6b12:	4567      	cmp	r7, ip
    6b14:	d8f7      	bhi.n	6b06 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    6b16:	9d00      	ldr	r5, [sp, #0]
    6b18:	9c01      	ldr	r4, [sp, #4]
    6b1a:	45d3      	cmp	fp, sl
    6b1c:	4455      	add	r5, sl
    6b1e:	eb08 0e0a 	add.w	lr, r8, sl
    6b22:	eb09 0c0a 	add.w	ip, r9, sl
    6b26:	f000 808c 	beq.w	6c42 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6b2a:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6b2e:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6b32:	1c6f      	adds	r7, r5, #1
    6b34:	42b9      	cmp	r1, r7
    6b36:	f240 8084 	bls.w	6c42 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6b3a:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6b3c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6b40:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6b44:	42a9      	cmp	r1, r5
    6b46:	d97c      	bls.n	6c42 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6b48:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6b4c:	f88e 5002 	strb.w	r5, [lr, #2]
    6b50:	1857      	adds	r7, r2, r1
    6b52:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6b56:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6b5a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6b5c:	1a6d      	subs	r5, r5, r1
        if (count) {
    6b5e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6b60:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6b64:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6b68:	d065      	beq.n	6c36 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6b6a:	1d01      	adds	r1, r0, #4
    6b6c:	1d3a      	adds	r2, r7, #4
    6b6e:	4290      	cmp	r0, r2
    6b70:	bf38      	it	cc
    6b72:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    6b74:	4605      	mov	r5, r0
    6b76:	d375      	bcc.n	6c64 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6b78:	2b0b      	cmp	r3, #11
    6b7a:	d973      	bls.n	6c64 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6b7c:	4242      	negs	r2, r0
    6b7e:	f012 0203 	ands.w	r2, r2, #3
    6b82:	d060      	beq.n	6c46 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    6b84:	7839      	ldrb	r1, [r7, #0]
    6b86:	7001      	strb	r1, [r0, #0]
    6b88:	2a01      	cmp	r2, #1
    6b8a:	f100 0501 	add.w	r5, r0, #1
    6b8e:	f107 0e01 	add.w	lr, r7, #1
    6b92:	d059      	beq.n	6c48 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6b94:	7879      	ldrb	r1, [r7, #1]
    6b96:	7041      	strb	r1, [r0, #1]
    6b98:	2a02      	cmp	r2, #2
    6b9a:	f100 0502 	add.w	r5, r0, #2
    6b9e:	f107 0e02 	add.w	lr, r7, #2
    6ba2:	d051      	beq.n	6c48 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6ba4:	78b9      	ldrb	r1, [r7, #2]
    6ba6:	7081      	strb	r1, [r0, #2]
    6ba8:	1cc5      	adds	r5, r0, #3
    6baa:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    6bae:	f04f 0803 	mov.w	r8, #3
    6bb2:	eba3 0c02 	sub.w	ip, r3, r2
    6bb6:	f1ac 0104 	sub.w	r1, ip, #4
    6bba:	0889      	lsrs	r1, r1, #2
    6bbc:	1c4e      	adds	r6, r1, #1
    6bbe:	4417      	add	r7, r2
    6bc0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6bc4:	4402      	add	r2, r0
    6bc6:	2100      	movs	r1, #0
    6bc8:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6bca:	f857 ab04 	ldr.w	sl, [r7], #4
    6bce:	f842 ab04 	str.w	sl, [r2], #4
    6bd2:	428e      	cmp	r6, r1
    6bd4:	d8f8      	bhi.n	6bc8 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    6bd6:	45cc      	cmp	ip, r9
    6bd8:	eb08 0209 	add.w	r2, r8, r9
    6bdc:	eb05 0109 	add.w	r1, r5, r9
    6be0:	eb0e 0709 	add.w	r7, lr, r9
    6be4:	d00d      	beq.n	6c02 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6be6:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6bea:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6bee:	1c55      	adds	r5, r2, #1
    6bf0:	42ab      	cmp	r3, r5
    6bf2:	d906      	bls.n	6c02 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6bf4:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6bf6:	787d      	ldrb	r5, [r7, #1]
    6bf8:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6bfa:	4293      	cmp	r3, r2
    6bfc:	d901      	bls.n	6c02 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6bfe:	78ba      	ldrb	r2, [r7, #2]
    6c00:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    6c02:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6c06:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6c0a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6c0e:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6c10:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    6c12:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6c16:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6c1a:	b91d      	cbnz	r5, 6c24 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6c1c:	3080      	adds	r0, #128	; 0x80
    6c1e:	2140      	movs	r1, #64	; 0x40
    6c20:	f005 f9e8 	bl	bff4 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6c24:	b662      	cpsie	i
    return retVal;
    6c26:	b220      	sxth	r0, r4
}
    6c28:	b003      	add	sp, #12
    6c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6c2e:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    6c30:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6c32:	9500      	str	r5, [sp, #0]
    6c34:	e758      	b.n	6ae8 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6c36:	4431      	add	r1, r6
    6c38:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6c3c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6c40:	e7eb      	b.n	6c1a <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    6c42:	1857      	adds	r7, r2, r1
    6c44:	e785      	b.n	6b52 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    6c46:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    6c48:	4690      	mov	r8, r2
    6c4a:	e7b2      	b.n	6bb2 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    6c4c:	1e7d      	subs	r5, r7, #1
    6c4e:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    6c50:	f812 eb01 	ldrb.w	lr, [r2], #1
    6c54:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6c58:	42ba      	cmp	r2, r7
    6c5a:	d1f9      	bne.n	6c50 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    6c5c:	e779      	b.n	6b52 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    6c5e:	f04f 30ff 	mov.w	r0, #4294967295
    6c62:	4770      	bx	lr
    6c64:	1e42      	subs	r2, r0, #1
    6c66:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    6c68:	f817 1b01 	ldrb.w	r1, [r7], #1
    6c6c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6c70:	42bd      	cmp	r5, r7
    6c72:	d1f9      	bne.n	6c68 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    6c74:	e7c5      	b.n	6c02 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    6c76:	4617      	mov	r7, r2
    6c78:	e76f      	b.n	6b5a <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    6c7a:	bf00      	nop

00006c7c <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    6c7c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6c80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    6c84:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    6c86:	bf1a      	itte	ne
    6c88:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    6c8c:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    6c8e:	f04f 30ff 	moveq.w	r0, #4294967295
}
    6c92:	4770      	bx	lr

00006c94 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    6c94:	b570      	push	{r4, r5, r6, lr}
    6c96:	4604      	mov	r4, r0
    6c98:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6c9a:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c9e:	f005 fa05 	bl	c0ac <cdcdf_acm_is_enabled>
    6ca2:	b350      	cbz	r0, 6cfa <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    6ca4:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    6ca8:	f010 0001 	ands.w	r0, r0, #1
    6cac:	d025      	beq.n	6cfa <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6cae:	7b6b      	ldrb	r3, [r5, #13]
    6cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6cb4:	2b02      	cmp	r3, #2
    6cb6:	d001      	beq.n	6cbc <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    6cb8:	2000      	movs	r0, #0
    6cba:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    6cbc:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    6cc0:	b900      	cbnz	r0, 6cc4 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    6cc2:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    6cc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    6cc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    6ccc:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6cce:	1e5a      	subs	r2, r3, #1
    6cd0:	d40e      	bmi.n	6cf0 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    6cd2:	2a00      	cmp	r2, #0
    6cd4:	d0e3      	beq.n	6c9e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    6cd6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6cda:	4423      	add	r3, r4
    6cdc:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    6ce0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6ce4:	3301      	adds	r3, #1
    6ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cea:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    6cee:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    6cf0:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    6cf4:	2a00      	cmp	r2, #0
    6cf6:	d0d2      	beq.n	6c9e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    6cf8:	e7ed      	b.n	6cd6 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    6cfa:	bd70      	pop	{r4, r5, r6, pc}

00006cfc <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    6cfc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6d00:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    6d04:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    6d06:	bf48      	it	mi
    6d08:	3040      	addmi	r0, #64	; 0x40
}
    6d0a:	4770      	bx	lr

00006d0c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    6d0c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6d10:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    6d14:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6d16:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    6d18:	bf48      	it	mi
    6d1a:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    6d1e:	4770      	bx	lr

00006d20 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    6d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6d24:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    6d28:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6d2a:	f04f 0101 	mov.w	r1, #1
    6d2e:	f3bf 8f5b 	dmb	ish
    6d32:	e8d3 2f4f 	ldrexb	r2, [r3]
    6d36:	e8c3 1f44 	strexb	r4, r1, [r3]
    6d3a:	2c00      	cmp	r4, #0
    6d3c:	d1f9      	bne.n	6d32 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    6d3e:	f3bf 8f5b 	dmb	ish
    6d42:	f012 0fff 	tst.w	r2, #255	; 0xff
    6d46:	f040 80e4 	bne.w	6f12 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    6d4a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    6d4e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    6d52:	428e      	cmp	r6, r1
    6d54:	f000 81b6 	beq.w	70c4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6d58:	f100 0340 	add.w	r3, r0, #64	; 0x40
    6d5c:	eb03 0706 	add.w	r7, r3, r6
    6d60:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    6d64:	f0c0 80d8 	bcc.w	6f18 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6d68:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6d6c:	4411      	add	r1, r2
    6d6e:	2940      	cmp	r1, #64	; 0x40
    6d70:	bf28      	it	cs
    6d72:	2140      	movcs	r1, #64	; 0x40
    6d74:	428a      	cmp	r2, r1
    6d76:	bf28      	it	cs
    6d78:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6d7a:	2a00      	cmp	r2, #0
    6d7c:	f000 81c7 	beq.w	710e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    6d80:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    6d84:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6d88:	eb00 080e 	add.w	r8, r0, lr
    6d8c:	4404      	add	r4, r0
    6d8e:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    6d92:	45e0      	cmp	r8, ip
    6d94:	bf38      	it	cc
    6d96:	42a5      	cmpcc	r5, r4
    6d98:	f0c0 81ae 	bcc.w	70f8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6d9c:	2a0b      	cmp	r2, #11
    6d9e:	f240 81ab 	bls.w	70f8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6da2:	426c      	negs	r4, r5
    6da4:	f014 0403 	ands.w	r4, r4, #3
    6da8:	f000 817f 	beq.w	70aa <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    6dac:	5d9e      	ldrb	r6, [r3, r6]
    6dae:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    6db2:	2c01      	cmp	r4, #1
    6db4:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    6db8:	f107 0801 	add.w	r8, r7, #1
    6dbc:	f000 817b 	beq.w	70b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6dc0:	787e      	ldrb	r6, [r7, #1]
    6dc2:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    6dc6:	2c02      	cmp	r4, #2
    6dc8:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    6dcc:	f107 0802 	add.w	r8, r7, #2
    6dd0:	f000 8171 	beq.w	70b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6dd4:	78be      	ldrb	r6, [r7, #2]
    6dd6:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6dda:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6ddc:	f107 0803 	add.w	r8, r7, #3
    6de0:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6de4:	9601      	str	r6, [sp, #4]
    6de6:	eba2 0b04 	sub.w	fp, r2, r4
    6dea:	f1ab 0704 	sub.w	r7, fp, #4
    6dee:	08bf      	lsrs	r7, r7, #2
    6df0:	eb0e 0604 	add.w	r6, lr, r4
    6df4:	3701      	adds	r7, #1
    6df6:	34c0      	adds	r4, #192	; 0xc0
    6df8:	4406      	add	r6, r0
    6dfa:	4404      	add	r4, r0
    6dfc:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6e00:	f04f 0e00 	mov.w	lr, #0
    6e04:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6e08:	f856 ab04 	ldr.w	sl, [r6], #4
    6e0c:	f844 ab04 	str.w	sl, [r4], #4
    6e10:	45be      	cmp	lr, r7
    6e12:	d3f7      	bcc.n	6e04 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    6e14:	9c01      	ldr	r4, [sp, #4]
    6e16:	45cb      	cmp	fp, r9
    6e18:	444c      	add	r4, r9
    6e1a:	eb08 0e09 	add.w	lr, r8, r9
    6e1e:	eb0c 0609 	add.w	r6, ip, r9
    6e22:	d00f      	beq.n	6e44 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6e24:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    6e28:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e2c:	1c67      	adds	r7, r4, #1
    6e2e:	42ba      	cmp	r2, r7
    6e30:	d908      	bls.n	6e44 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    6e32:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6e34:	f89e 7001 	ldrb.w	r7, [lr, #1]
    6e38:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e3a:	42a2      	cmp	r2, r4
    6e3c:	d902      	bls.n	6e44 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    6e3e:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6e42:	70b4      	strb	r4, [r6, #2]
    6e44:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6e46:	1a8a      	subs	r2, r1, r2
    6e48:	f000 811a 	beq.w	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6e4c:	1d26      	adds	r6, r4, #4
    6e4e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    6e52:	42bc      	cmp	r4, r7
    6e54:	bf38      	it	cc
    6e56:	42b3      	cmpcc	r3, r6
    6e58:	f0c0 8145 	bcc.w	70e6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6e5c:	2a0b      	cmp	r2, #11
    6e5e:	f240 8142 	bls.w	70e6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    6e62:	425f      	negs	r7, r3
    6e64:	f017 0703 	ands.w	r7, r7, #3
    6e68:	f000 8129 	beq.w	70be <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    6e6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    6e70:	7023      	strb	r3, [r4, #0]
    6e72:	2f01      	cmp	r7, #1
    6e74:	f104 0c01 	add.w	ip, r4, #1
    6e78:	f100 0341 	add.w	r3, r0, #65	; 0x41
    6e7c:	f000 811d 	beq.w	70ba <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6e80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    6e84:	7063      	strb	r3, [r4, #1]
    6e86:	2f02      	cmp	r7, #2
    6e88:	f104 0c02 	add.w	ip, r4, #2
    6e8c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    6e90:	f000 8113 	beq.w	70ba <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    6e94:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    6e98:	70a3      	strb	r3, [r4, #2]
    6e9a:	f104 0c03 	add.w	ip, r4, #3
    6e9e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6ea2:	f04f 0903 	mov.w	r9, #3
    6ea6:	eba2 0807 	sub.w	r8, r2, r7
    6eaa:	f1a8 0e04 	sub.w	lr, r8, #4
    6eae:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    6eb2:	f107 0640 	add.w	r6, r7, #64	; 0x40
    6eb6:	f10e 0e01 	add.w	lr, lr, #1
    6eba:	443c      	add	r4, r7
    6ebc:	4406      	add	r6, r0
    6ebe:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6ec2:	2700      	movs	r7, #0
    6ec4:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6ec6:	f856 bb04 	ldr.w	fp, [r6], #4
    6eca:	f844 bb04 	str.w	fp, [r4], #4
    6ece:	45be      	cmp	lr, r7
    6ed0:	d8f8      	bhi.n	6ec4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    6ed2:	45d0      	cmp	r8, sl
    6ed4:	eb09 040a 	add.w	r4, r9, sl
    6ed8:	eb03 070a 	add.w	r7, r3, sl
    6edc:	eb0c 060a 	add.w	r6, ip, sl
    6ee0:	f000 80ce 	beq.w	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6ee4:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    6ee8:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6eec:	1c63      	adds	r3, r4, #1
    6eee:	429a      	cmp	r2, r3
    6ef0:	f240 80c6 	bls.w	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    6ef4:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6ef6:	787b      	ldrb	r3, [r7, #1]
    6ef8:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6efa:	42a2      	cmp	r2, r4
    6efc:	f240 80c0 	bls.w	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    6f00:	78bb      	ldrb	r3, [r7, #2]
    6f02:	70b3      	strb	r3, [r6, #2]
    6f04:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6f06:	4628      	mov	r0, r5
    6f08:	f005 f888 	bl	c01c <cdcdf_acm_write>
    6f0c:	2800      	cmp	r0, #0
    6f0e:	f040 80be 	bne.w	708e <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    6f12:	b003      	add	sp, #12
    6f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    6f18:	1b89      	subs	r1, r1, r6
    6f1a:	f106 0240 	add.w	r2, r6, #64	; 0x40
    6f1e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6f22:	2940      	cmp	r1, #64	; 0x40
    6f24:	eb00 0c02 	add.w	ip, r0, r2
    6f28:	4404      	add	r4, r0
    6f2a:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    6f2e:	bf28      	it	cs
    6f30:	2140      	movcs	r1, #64	; 0x40
    6f32:	45f4      	cmp	ip, lr
    6f34:	bf38      	it	cc
    6f36:	42a5      	cmpcc	r5, r4
    6f38:	f0c0 80cb 	bcc.w	70d2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6f3c:	290b      	cmp	r1, #11
    6f3e:	f240 80c8 	bls.w	70d2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    6f42:	426c      	negs	r4, r5
    6f44:	f014 0403 	ands.w	r4, r4, #3
    6f48:	f000 80ab 	beq.w	70a2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    6f4c:	5d9b      	ldrb	r3, [r3, r6]
    6f4e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    6f52:	2c01      	cmp	r4, #1
    6f54:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    6f58:	f107 0e01 	add.w	lr, r7, #1
    6f5c:	f000 80a9 	beq.w	70b2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6f60:	787b      	ldrb	r3, [r7, #1]
    6f62:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    6f66:	2c02      	cmp	r4, #2
    6f68:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    6f6c:	f107 0e02 	add.w	lr, r7, #2
    6f70:	f000 809f 	beq.w	70b2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    6f74:	78bb      	ldrb	r3, [r7, #2]
    6f76:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    6f7a:	f107 0e03 	add.w	lr, r7, #3
    6f7e:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6f82:	f04f 0c03 	mov.w	ip, #3
    6f86:	1913      	adds	r3, r2, r4
    6f88:	4403      	add	r3, r0
    6f8a:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6f8e:	681a      	ldr	r2, [r3, #0]
    6f90:	f840 2008 	str.w	r2, [r0, r8]
    6f94:	1b0f      	subs	r7, r1, r4
    6f96:	1f3a      	subs	r2, r7, #4
    6f98:	0892      	lsrs	r2, r2, #2
    6f9a:	eb00 0408 	add.w	r4, r0, r8
    6f9e:	3201      	adds	r2, #1
    6fa0:	f8d3 8004 	ldr.w	r8, [r3, #4]
    6fa4:	f8c4 8004 	str.w	r8, [r4, #4]
    6fa8:	2a02      	cmp	r2, #2
    6faa:	ea4f 0882 	mov.w	r8, r2, lsl #2
    6fae:	d04f      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fb0:	f8d3 9008 	ldr.w	r9, [r3, #8]
    6fb4:	f8c4 9008 	str.w	r9, [r4, #8]
    6fb8:	2a03      	cmp	r2, #3
    6fba:	d049      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fbc:	f8d3 900c 	ldr.w	r9, [r3, #12]
    6fc0:	f8c4 900c 	str.w	r9, [r4, #12]
    6fc4:	2a04      	cmp	r2, #4
    6fc6:	d043      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fc8:	f8d3 9010 	ldr.w	r9, [r3, #16]
    6fcc:	f8c4 9010 	str.w	r9, [r4, #16]
    6fd0:	2a05      	cmp	r2, #5
    6fd2:	d03d      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fd4:	f8d3 9014 	ldr.w	r9, [r3, #20]
    6fd8:	f8c4 9014 	str.w	r9, [r4, #20]
    6fdc:	2a06      	cmp	r2, #6
    6fde:	d037      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fe0:	f8d3 9018 	ldr.w	r9, [r3, #24]
    6fe4:	f8c4 9018 	str.w	r9, [r4, #24]
    6fe8:	2a07      	cmp	r2, #7
    6fea:	d031      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6fec:	f8d3 901c 	ldr.w	r9, [r3, #28]
    6ff0:	f8c4 901c 	str.w	r9, [r4, #28]
    6ff4:	2a08      	cmp	r2, #8
    6ff6:	d02b      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    6ff8:	f8d3 9020 	ldr.w	r9, [r3, #32]
    6ffc:	f8c4 9020 	str.w	r9, [r4, #32]
    7000:	2a09      	cmp	r2, #9
    7002:	d025      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7004:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7008:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    700c:	2a0a      	cmp	r2, #10
    700e:	d01f      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7010:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7014:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7018:	2a0b      	cmp	r2, #11
    701a:	d019      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    701c:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7020:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    7024:	2a0c      	cmp	r2, #12
    7026:	d013      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7028:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    702c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7030:	2a0d      	cmp	r2, #13
    7032:	d00d      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7034:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7038:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    703c:	2a0e      	cmp	r2, #14
    703e:	d007      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7040:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7044:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7048:	2a0f      	cmp	r2, #15
    704a:	d001      	beq.n	7050 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    704e:	63e3      	str	r3, [r4, #60]	; 0x3c
    7050:	4547      	cmp	r7, r8
    7052:	eb0c 0308 	add.w	r3, ip, r8
    7056:	eb06 0408 	add.w	r4, r6, r8
    705a:	eb0e 0c08 	add.w	ip, lr, r8
    705e:	d00f      	beq.n	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7060:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    7064:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7068:	1c5a      	adds	r2, r3, #1
    706a:	4291      	cmp	r1, r2
    706c:	d908      	bls.n	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    706e:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7070:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7074:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7076:	4299      	cmp	r1, r3
    7078:	d902      	bls.n	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    707a:	f89c 3002 	ldrb.w	r3, [ip, #2]
    707e:	70a3      	strb	r3, [r4, #2]
    7080:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7082:	4628      	mov	r0, r5
    7084:	f004 ffca 	bl	c01c <cdcdf_acm_write>
    7088:	2800      	cmp	r0, #0
    708a:	f43f af42 	beq.w	6f12 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    708e:	f3bf 8f5b 	dmb	ish
    7092:	2300      	movs	r3, #0
    7094:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7098:	f3bf 8f5b 	dmb	ish
}
    709c:	b003      	add	sp, #12
    709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70a2:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    70a4:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70a6:	462e      	mov	r6, r5
    70a8:	e76d      	b.n	6f86 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    70aa:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70ac:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70ae:	46ac      	mov	ip, r5
    70b0:	e699      	b.n	6de6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    70b2:	46a4      	mov	ip, r4
    70b4:	e767      	b.n	6f86 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70b6:	9401      	str	r4, [sp, #4]
    70b8:	e695      	b.n	6de6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70ba:	46b9      	mov	r9, r7
    70bc:	e6f3      	b.n	6ea6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    70be:	46b9      	mov	r9, r7
    70c0:	46a4      	mov	ip, r4
    70c2:	e6f0      	b.n	6ea6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    70c4:	f3bf 8f5b 	dmb	ish
    70c8:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    70cc:	f3bf 8f5b 	dmb	ish
        return;
    70d0:	e71f      	b.n	6f12 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    70d2:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    70d6:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    70d8:	f817 2b01 	ldrb.w	r2, [r7], #1
    70dc:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    70e0:	42a7      	cmp	r7, r4
    70e2:	d1f9      	bne.n	70d8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    70e4:	e7cc      	b.n	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    70e6:	3c01      	subs	r4, #1
    70e8:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    70ea:	f813 6b01 	ldrb.w	r6, [r3], #1
    70ee:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70f2:	4293      	cmp	r3, r2
    70f4:	d1f9      	bne.n	70ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    70f6:	e7c3      	b.n	7080 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    70f8:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    70fc:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7100:	f817 6b01 	ldrb.w	r6, [r7], #1
    7104:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7108:	45be      	cmp	lr, r7
    710a:	d1f9      	bne.n	7100 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    710c:	e69a      	b.n	6e44 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    710e:	462c      	mov	r4, r5
    7110:	e699      	b.n	6e46 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    7112:	bf00      	nop

00007114 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    7114:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    7116:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    711a:	b903      	cbnz	r3, 711e <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    711c:	bd38      	pop	{r3, r4, r5, pc}
    711e:	4605      	mov	r5, r0
    TxPump();
    7120:	f7ff fdfe 	bl	6d20 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7124:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7128:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    712c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7130:	429a      	cmp	r2, r3
    7132:	d00b      	beq.n	714c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7134:	f004 ffba 	bl	c0ac <cdcdf_acm_is_enabled>
    7138:	b140      	cbz	r0, 714c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    713a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    713e:	07db      	lsls	r3, r3, #31
    7140:	d504      	bpl.n	714c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7142:	7b63      	ldrb	r3, [r4, #13]
    7144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7148:	2b02      	cmp	r3, #2
    714a:	d0ed      	beq.n	7128 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    714c:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    714e:	4621      	mov	r1, r4
    m_portOpen = false;
    7150:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7154:	4620      	mov	r0, r4
    7156:	f004 ff81 	bl	c05c <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    715a:	4621      	mov	r1, r4
    715c:	2001      	movs	r0, #1
    715e:	f004 ff7d 	bl	c05c <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    7162:	f004 ff6f 	bl	c044 <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    7166:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    716a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    716e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    7172:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    7176:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    717a:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    717e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    7182:	bd38      	pop	{r3, r4, r5, pc}

00007184 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    7184:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7188:	b103      	cbz	r3, 718c <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    718a:	4770      	bx	lr
    718c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    7190:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    7194:	429a      	cmp	r2, r3
    7196:	f000 80fd 	beq.w	7394 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    719a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    719e:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    71a2:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    71a4:	f04f 0101 	mov.w	r1, #1
    71a8:	f3bf 8f5b 	dmb	ish
    71ac:	e8d3 2f4f 	ldrexb	r2, [r3]
    71b0:	e8c3 1f44 	strexb	r4, r1, [r3]
    71b4:	2c00      	cmp	r4, #0
    71b6:	d1f9      	bne.n	71ac <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    71b8:	f3bf 8f5b 	dmb	ish
    71bc:	f012 0fff 	tst.w	r2, #255	; 0xff
    71c0:	f040 80e5 	bne.w	738e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    71c4:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    71c8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    71cc:	428e      	cmp	r6, r1
    71ce:	f000 81ab 	beq.w	7528 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    71d2:	f100 0340 	add.w	r3, r0, #64	; 0x40
    71d6:	eb03 0706 	add.w	r7, r3, r6
    71da:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    71de:	f0c0 80da 	bcc.w	7396 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    71e2:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    71e6:	4411      	add	r1, r2
    71e8:	2940      	cmp	r1, #64	; 0x40
    71ea:	bf28      	it	cs
    71ec:	2140      	movcs	r1, #64	; 0x40
    71ee:	428a      	cmp	r2, r1
    71f0:	bf28      	it	cs
    71f2:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71f4:	2a00      	cmp	r2, #0
    71f6:	f000 81bc 	beq.w	7572 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    71fa:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    71fe:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7202:	eb00 080e 	add.w	r8, r0, lr
    7206:	4404      	add	r4, r0
    7208:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    720c:	45e0      	cmp	r8, ip
    720e:	bf38      	it	cc
    7210:	42a5      	cmpcc	r5, r4
    7212:	f0c0 81a3 	bcc.w	755c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7216:	2a0b      	cmp	r2, #11
    7218:	f240 81a0 	bls.w	755c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    721c:	426c      	negs	r4, r5
    721e:	f014 0403 	ands.w	r4, r4, #3
    7222:	f000 8177 	beq.w	7514 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    7226:	5d9e      	ldrb	r6, [r3, r6]
    7228:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    722c:	2c01      	cmp	r4, #1
    722e:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7232:	f107 0801 	add.w	r8, r7, #1
    7236:	f000 8171 	beq.w	751c <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    723a:	787e      	ldrb	r6, [r7, #1]
    723c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7240:	2c02      	cmp	r4, #2
    7242:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    7246:	f107 0802 	add.w	r8, r7, #2
    724a:	f000 8165 	beq.w	7518 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    724e:	78be      	ldrb	r6, [r7, #2]
    7250:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7254:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    7256:	f107 0803 	add.w	r8, r7, #3
    725a:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    725e:	9601      	str	r6, [sp, #4]
    7260:	eba2 0b04 	sub.w	fp, r2, r4
    7264:	f1ab 0704 	sub.w	r7, fp, #4
    7268:	08bf      	lsrs	r7, r7, #2
    726a:	eb0e 0604 	add.w	r6, lr, r4
    726e:	3701      	adds	r7, #1
    7270:	34c0      	adds	r4, #192	; 0xc0
    7272:	4406      	add	r6, r0
    7274:	4404      	add	r4, r0
    7276:	ea4f 0987 	mov.w	r9, r7, lsl #2
    727a:	f04f 0e00 	mov.w	lr, #0
    727e:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7282:	f856 ab04 	ldr.w	sl, [r6], #4
    7286:	f844 ab04 	str.w	sl, [r4], #4
    728a:	45be      	cmp	lr, r7
    728c:	d3f7      	bcc.n	727e <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    728e:	9c01      	ldr	r4, [sp, #4]
    7290:	45cb      	cmp	fp, r9
    7292:	444c      	add	r4, r9
    7294:	eb0c 0609 	add.w	r6, ip, r9
    7298:	eb08 0e09 	add.w	lr, r8, r9
    729c:	d00f      	beq.n	72be <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    729e:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    72a2:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72a6:	1c67      	adds	r7, r4, #1
    72a8:	42ba      	cmp	r2, r7
    72aa:	d908      	bls.n	72be <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    72ac:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    72ae:	f89e 7001 	ldrb.w	r7, [lr, #1]
    72b2:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72b4:	42a2      	cmp	r2, r4
    72b6:	d902      	bls.n	72be <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    72b8:	f89e 4002 	ldrb.w	r4, [lr, #2]
    72bc:	70b4      	strb	r4, [r6, #2]
    72be:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72c0:	1a8a      	subs	r2, r1, r2
    72c2:	d058      	beq.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    72c4:	1d26      	adds	r6, r4, #4
    72c6:	f100 0744 	add.w	r7, r0, #68	; 0x44
    72ca:	42bc      	cmp	r4, r7
    72cc:	bf38      	it	cc
    72ce:	42b3      	cmpcc	r3, r6
    72d0:	f0c0 813b 	bcc.w	754a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    72d4:	2a0b      	cmp	r2, #11
    72d6:	f240 8138 	bls.w	754a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    72da:	425f      	negs	r7, r3
    72dc:	f017 0703 	ands.w	r7, r7, #3
    72e0:	f000 811f 	beq.w	7522 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    72e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    72e8:	7023      	strb	r3, [r4, #0]
    72ea:	2f01      	cmp	r7, #1
    72ec:	f104 0c01 	add.w	ip, r4, #1
    72f0:	f100 0341 	add.w	r3, r0, #65	; 0x41
    72f4:	f000 8116 	beq.w	7524 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    72f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    72fc:	7063      	strb	r3, [r4, #1]
    72fe:	2f02      	cmp	r7, #2
    7300:	f104 0c02 	add.w	ip, r4, #2
    7304:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7308:	f000 810c 	beq.w	7524 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    730c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7310:	70a3      	strb	r3, [r4, #2]
    7312:	f104 0c03 	add.w	ip, r4, #3
    7316:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    731a:	f04f 0903 	mov.w	r9, #3
    731e:	eba2 0807 	sub.w	r8, r2, r7
    7322:	f1a8 0e04 	sub.w	lr, r8, #4
    7326:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    732a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    732e:	f10e 0e01 	add.w	lr, lr, #1
    7332:	443c      	add	r4, r7
    7334:	4406      	add	r6, r0
    7336:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    733a:	2700      	movs	r7, #0
    733c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    733e:	f856 bb04 	ldr.w	fp, [r6], #4
    7342:	f844 bb04 	str.w	fp, [r4], #4
    7346:	45be      	cmp	lr, r7
    7348:	d8f8      	bhi.n	733c <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    734a:	45d0      	cmp	r8, sl
    734c:	eb09 040a 	add.w	r4, r9, sl
    7350:	eb0c 060a 	add.w	r6, ip, sl
    7354:	eb03 070a 	add.w	r7, r3, sl
    7358:	d00d      	beq.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    735a:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    735e:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7362:	1c63      	adds	r3, r4, #1
    7364:	429a      	cmp	r2, r3
    7366:	d906      	bls.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7368:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    736a:	787b      	ldrb	r3, [r7, #1]
    736c:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    736e:	42a2      	cmp	r2, r4
    7370:	d901      	bls.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7372:	78bb      	ldrb	r3, [r7, #2]
    7374:	70b3      	strb	r3, [r6, #2]
    7376:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7378:	4628      	mov	r0, r5
    737a:	f004 fe4f 	bl	c01c <cdcdf_acm_write>
    737e:	b130      	cbz	r0, 738e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7380:	f3bf 8f5b 	dmb	ish
    7384:	2300      	movs	r3, #0
    7386:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    738a:	f3bf 8f5b 	dmb	ish
}
    738e:	b003      	add	sp, #12
    7390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7394:	4770      	bx	lr
        count = min(count, tail - head);
    7396:	1b89      	subs	r1, r1, r6
    7398:	f106 0240 	add.w	r2, r6, #64	; 0x40
    739c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    73a0:	2940      	cmp	r1, #64	; 0x40
    73a2:	eb00 0c02 	add.w	ip, r0, r2
    73a6:	4404      	add	r4, r0
    73a8:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    73ac:	bf28      	it	cs
    73ae:	2140      	movcs	r1, #64	; 0x40
    73b0:	45f4      	cmp	ip, lr
    73b2:	bf38      	it	cc
    73b4:	42a5      	cmpcc	r5, r4
    73b6:	f0c0 80be 	bcc.w	7536 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    73ba:	290b      	cmp	r1, #11
    73bc:	f240 80bb 	bls.w	7536 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    73c0:	426c      	negs	r4, r5
    73c2:	f014 0403 	ands.w	r4, r4, #3
    73c6:	f000 809e 	beq.w	7506 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    73ca:	5d9b      	ldrb	r3, [r3, r6]
    73cc:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    73d0:	2c01      	cmp	r4, #1
    73d2:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    73d6:	f107 0e01 	add.w	lr, r7, #1
    73da:	f000 8096 	beq.w	750a <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    73de:	787b      	ldrb	r3, [r7, #1]
    73e0:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    73e4:	2c02      	cmp	r4, #2
    73e6:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    73ea:	f107 0e02 	add.w	lr, r7, #2
    73ee:	f000 808e 	beq.w	750e <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    73f2:	78bb      	ldrb	r3, [r7, #2]
    73f4:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    73f8:	f107 0e03 	add.w	lr, r7, #3
    73fc:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7400:	f04f 0c03 	mov.w	ip, #3
    7404:	1913      	adds	r3, r2, r4
    7406:	4403      	add	r3, r0
    7408:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    740c:	681a      	ldr	r2, [r3, #0]
    740e:	f840 2008 	str.w	r2, [r0, r8]
    7412:	1b0f      	subs	r7, r1, r4
    7414:	1f3a      	subs	r2, r7, #4
    7416:	0892      	lsrs	r2, r2, #2
    7418:	eb00 0408 	add.w	r4, r0, r8
    741c:	3201      	adds	r2, #1
    741e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    7422:	f8c4 8004 	str.w	r8, [r4, #4]
    7426:	2a02      	cmp	r2, #2
    7428:	ea4f 0882 	mov.w	r8, r2, lsl #2
    742c:	d04f      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    742e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    7432:	f8c4 9008 	str.w	r9, [r4, #8]
    7436:	2a03      	cmp	r2, #3
    7438:	d049      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    743a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    743e:	f8c4 900c 	str.w	r9, [r4, #12]
    7442:	2a04      	cmp	r2, #4
    7444:	d043      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7446:	f8d3 9010 	ldr.w	r9, [r3, #16]
    744a:	f8c4 9010 	str.w	r9, [r4, #16]
    744e:	2a05      	cmp	r2, #5
    7450:	d03d      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7452:	f8d3 9014 	ldr.w	r9, [r3, #20]
    7456:	f8c4 9014 	str.w	r9, [r4, #20]
    745a:	2a06      	cmp	r2, #6
    745c:	d037      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    745e:	f8d3 9018 	ldr.w	r9, [r3, #24]
    7462:	f8c4 9018 	str.w	r9, [r4, #24]
    7466:	2a07      	cmp	r2, #7
    7468:	d031      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    746a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    746e:	f8c4 901c 	str.w	r9, [r4, #28]
    7472:	2a08      	cmp	r2, #8
    7474:	d02b      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7476:	f8d3 9020 	ldr.w	r9, [r3, #32]
    747a:	f8c4 9020 	str.w	r9, [r4, #32]
    747e:	2a09      	cmp	r2, #9
    7480:	d025      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7482:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7486:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    748a:	2a0a      	cmp	r2, #10
    748c:	d01f      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    748e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7492:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7496:	2a0b      	cmp	r2, #11
    7498:	d019      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    749a:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    749e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    74a2:	2a0c      	cmp	r2, #12
    74a4:	d013      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    74a6:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    74aa:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    74ae:	2a0d      	cmp	r2, #13
    74b0:	d00d      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    74b2:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    74b6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    74ba:	2a0e      	cmp	r2, #14
    74bc:	d007      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    74be:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    74c2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    74c6:	2a0f      	cmp	r2, #15
    74c8:	d001      	beq.n	74ce <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    74ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    74cc:	63e3      	str	r3, [r4, #60]	; 0x3c
    74ce:	4547      	cmp	r7, r8
    74d0:	eb0c 0308 	add.w	r3, ip, r8
    74d4:	eb06 0408 	add.w	r4, r6, r8
    74d8:	eb0e 0c08 	add.w	ip, lr, r8
    74dc:	f43f af4b 	beq.w	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    74e0:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    74e4:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    74e8:	1c5a      	adds	r2, r3, #1
    74ea:	4291      	cmp	r1, r2
    74ec:	f67f af43 	bls.w	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    74f0:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    74f2:	f89c 2001 	ldrb.w	r2, [ip, #1]
    74f6:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    74f8:	4299      	cmp	r1, r3
    74fa:	f67f af3c 	bls.w	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    74fe:	f89c 3002 	ldrb.w	r3, [ip, #2]
    7502:	70a3      	strb	r3, [r4, #2]
    7504:	e737      	b.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7506:	46be      	mov	lr, r7
    7508:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    750a:	46a4      	mov	ip, r4
    750c:	e77a      	b.n	7404 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    750e:	f04f 0c02 	mov.w	ip, #2
    7512:	e777      	b.n	7404 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7514:	46b8      	mov	r8, r7
    7516:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7518:	9401      	str	r4, [sp, #4]
    751a:	e6a1      	b.n	7260 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    751c:	2601      	movs	r6, #1
    751e:	9601      	str	r6, [sp, #4]
    7520:	e69e      	b.n	7260 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7522:	46a4      	mov	ip, r4
    7524:	46b9      	mov	r9, r7
    7526:	e6fa      	b.n	731e <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7528:	f3bf 8f5b 	dmb	ish
    752c:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7530:	f3bf 8f5b 	dmb	ish
    7534:	e72b      	b.n	738e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    7536:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    753a:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    753c:	f817 2b01 	ldrb.w	r2, [r7], #1
    7540:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7544:	42a7      	cmp	r7, r4
    7546:	d1f9      	bne.n	753c <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7548:	e715      	b.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    754a:	3c01      	subs	r4, #1
    754c:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    754e:	f813 6b01 	ldrb.w	r6, [r3], #1
    7552:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7556:	4293      	cmp	r3, r2
    7558:	d1f9      	bne.n	754e <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    755a:	e70c      	b.n	7376 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    755c:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7560:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7564:	f817 6b01 	ldrb.w	r6, [r7], #1
    7568:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    756c:	45be      	cmp	lr, r7
    756e:	d1f9      	bne.n	7564 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7570:	e6a5      	b.n	72be <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7572:	462c      	mov	r4, r5
    7574:	e6a4      	b.n	72c0 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    7576:	bf00      	nop

00007578 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    7578:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    757a:	f7fe ff85 	bl	6488 <_ZN9ClearCore10UsbManager8InstanceEv>
    757e:	4b01      	ldr	r3, [pc, #4]	; (7584 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7580:	6018      	str	r0, [r3, #0]
    7582:	bd08      	pop	{r3, pc}
    7584:	20000ae0 	.word	0x20000ae0

00007588 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7588:	6a40      	ldr	r0, [r0, #36]	; 0x24
    758a:	4770      	bx	lr

0000758c <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    758c:	7900      	ldrb	r0, [r0, #4]
    758e:	4770      	bx	lr

00007590 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7590:	2001      	movs	r0, #1
    7592:	4770      	bx	lr

00007594 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    7594:	b510      	push	{r4, lr}
    7596:	4604      	mov	r4, r0
    DigitalIn() {};
    7598:	f007 f840 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    759c:	4620      	mov	r0, r4
    759e:	4b0c      	ldr	r3, [pc, #48]	; (75d0 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    75a0:	f840 3b30 	str.w	r3, [r0], #48
    75a4:	f004 f8a2 	bl	b6ec <_ZN9ClearCore13StepGeneratorC1Ev>
    75a8:	4a0a      	ldr	r2, [pc, #40]	; (75d4 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    75aa:	6022      	str	r2, [r4, #0]
            reg = 0;
    75ac:	2300      	movs	r3, #0
    MotorDriver() {};
    75ae:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    75b0:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    75b4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    75b8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    75bc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    75c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    75c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    75c8:	6322      	str	r2, [r4, #48]	; 0x30
    75ca:	4620      	mov	r0, r4
    75cc:	bd10      	pop	{r4, pc}
    75ce:	bf00      	nop
    75d0:	000235b4 	.word	0x000235b4
    75d4:	00022df8 	.word	0x00022df8

000075d8 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    75d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    75dc:	4bbf      	ldr	r3, [pc, #764]	; (78dc <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    75de:	f8df a340 	ldr.w	sl, [pc, #832]	; 7920 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    75e2:	4abf      	ldr	r2, [pc, #764]	; (78e0 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    75e4:	49bf      	ldr	r1, [pc, #764]	; (78e4 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    75e6:	4dc0      	ldr	r5, [pc, #768]	; (78e8 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    75e8:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    75ea:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    75ec:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    75ee:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    75f2:	7007      	strb	r7, [r0, #0]
    75f4:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    75f6:	e88d 0108 	stmia.w	sp, {r3, r8}
    75fa:	4620      	mov	r0, r4
    75fc:	4bbb      	ldr	r3, [pc, #748]	; (78ec <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    75fe:	f00a fb4f 	bl	11ca0 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    7602:	68a1      	ldr	r1, [r4, #8]
    7604:	6862      	ldr	r2, [r4, #4]
    7606:	7b23      	ldrb	r3, [r4, #12]
    7608:	f8ca 1008 	str.w	r1, [sl, #8]
    760c:	f8ca 2004 	str.w	r2, [sl, #4]
    7610:	6921      	ldr	r1, [r4, #16]
    7612:	6962      	ldr	r2, [r4, #20]
    7614:	f88a 300c 	strb.w	r3, [sl, #12]
    7618:	69a3      	ldr	r3, [r4, #24]
    761a:	f8ca 1010 	str.w	r1, [sl, #16]
    761e:	f8ca 2014 	str.w	r2, [sl, #20]
    7622:	69e1      	ldr	r1, [r4, #28]
    7624:	6a22      	ldr	r2, [r4, #32]
    7626:	f8ca 3018 	str.w	r3, [sl, #24]
    762a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    762c:	f8ca 101c 	str.w	r1, [sl, #28]
    7630:	f8ca 2020 	str.w	r2, [sl, #32]
    7634:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7638:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    763c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7640:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    7644:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7648:	2680      	movs	r6, #128	; 0x80
    764a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    764c:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7650:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    7654:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7658:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    765c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7660:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    7664:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    7668:	a914      	add	r1, sp, #80	; 0x50
    766a:	4632      	mov	r2, r6
    766c:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    7670:	f016 fede 	bl	1e430 <memcpy>
    7674:	4632      	mov	r2, r6
    7676:	a934      	add	r1, sp, #208	; 0xd0
    7678:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    767c:	f016 fed8 	bl	1e430 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    7680:	f8cd 8004 	str.w	r8, [sp, #4]
    7684:	499a      	ldr	r1, [pc, #616]	; (78f0 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    7686:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    768a:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    768e:	9100      	str	r1, [sp, #0]
    7690:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    7694:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    7698:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    769c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    76a0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    76a4:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    76a8:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    76ac:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    76b0:	4620      	mov	r0, r4
    76b2:	4b90      	ldr	r3, [pc, #576]	; (78f4 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    76b4:	4a90      	ldr	r2, [pc, #576]	; (78f8 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    76b6:	4991      	ldr	r1, [pc, #580]	; (78fc <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    76b8:	f008 fc0a 	bl	fed0 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    76bc:	6863      	ldr	r3, [r4, #4]
    76be:	606b      	str	r3, [r5, #4]
    76c0:	69a3      	ldr	r3, [r4, #24]
    76c2:	68a2      	ldr	r2, [r4, #8]
    76c4:	f894 e00c 	ldrb.w	lr, [r4, #12]
    76c8:	6920      	ldr	r0, [r4, #16]
    76ca:	61ab      	str	r3, [r5, #24]
    76cc:	69e3      	ldr	r3, [r4, #28]
    76ce:	60aa      	str	r2, [r5, #8]
    76d0:	f885 e00c 	strb.w	lr, [r5, #12]
    76d4:	6962      	ldr	r2, [r4, #20]
    76d6:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    76da:	6128      	str	r0, [r5, #16]
    76dc:	61eb      	str	r3, [r5, #28]
    76de:	6a20      	ldr	r0, [r4, #32]
    76e0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    76e4:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    76e8:	616a      	str	r2, [r5, #20]
    76ea:	6228      	str	r0, [r5, #32]
    76ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    76ee:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    76f0:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    76f4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    76f8:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    76fc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7700:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    7704:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    7708:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    770c:	a914      	add	r1, sp, #80	; 0x50
    770e:	626a      	str	r2, [r5, #36]	; 0x24
    7710:	85a8      	strh	r0, [r5, #44]	; 0x2c
    7712:	4632      	mov	r2, r6
    7714:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7718:	f016 fe8a 	bl	1e430 <memcpy>
    771c:	4632      	mov	r2, r6
    771e:	a934      	add	r1, sp, #208	; 0xd0
    7720:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    7724:	f016 fe84 	bl	1e430 <memcpy>
    7728:	f504 7098 	add.w	r0, r4, #304	; 0x130
    772c:	c807      	ldmia	r0, {r0, r1, r2}
    772e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7732:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    7736:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    773a:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    773e:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    7742:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7746:	4620      	mov	r0, r4
    7748:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    774c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7750:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7754:	f04f 0a01 	mov.w	sl, #1
    7758:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    775c:	f00a f846 	bl	117ec <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7760:	4b67      	ldr	r3, [pc, #412]	; (7900 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    7762:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    7764:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    7768:	4d66      	ldr	r5, [pc, #408]	; (7904 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    776a:	f8cd a004 	str.w	sl, [sp, #4]
    776e:	9300      	str	r3, [sp, #0]
    7770:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    7772:	68a6      	ldr	r6, [r4, #8]
    7774:	71aa      	strb	r2, [r5, #6]
    7776:	f8a5 c004 	strh.w	ip, [r5, #4]
    777a:	60ae      	str	r6, [r5, #8]
    777c:	4620      	mov	r0, r4
    777e:	4b62      	ldr	r3, [pc, #392]	; (7908 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    7780:	4a62      	ldr	r2, [pc, #392]	; (790c <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    7782:	4d63      	ldr	r5, [pc, #396]	; (7910 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    7784:	f005 ff80 	bl	d688 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    7788:	f104 000c 	add.w	r0, r4, #12
    778c:	c807      	ldmia	r0, {r0, r1, r2}
    778e:	f894 e006 	ldrb.w	lr, [r4, #6]
    7792:	68a3      	ldr	r3, [r4, #8]
    7794:	88a6      	ldrh	r6, [r4, #4]
    7796:	f885 e006 	strb.w	lr, [r5, #6]
    779a:	60ab      	str	r3, [r5, #8]
    779c:	f894 e018 	ldrb.w	lr, [r4, #24]
    77a0:	69e3      	ldr	r3, [r4, #28]
    77a2:	60e8      	str	r0, [r5, #12]
    77a4:	6a20      	ldr	r0, [r4, #32]
    77a6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    77aa:	80ae      	strh	r6, [r5, #4]
    77ac:	6129      	str	r1, [r5, #16]
    77ae:	7e66      	ldrb	r6, [r4, #25]
    77b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    77b2:	616a      	str	r2, [r5, #20]
    77b4:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    77b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    77ba:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    77be:	61eb      	str	r3, [r5, #28]
    77c0:	6228      	str	r0, [r5, #32]
    77c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    77c6:	766e      	strb	r6, [r5, #25]
    77c8:	6269      	str	r1, [r5, #36]	; 0x24
    77ca:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    77ce:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    77d2:	632a      	str	r2, [r5, #48]	; 0x30
    77d4:	63a8      	str	r0, [r5, #56]	; 0x38
    77d6:	636b      	str	r3, [r5, #52]	; 0x34
    77d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    77dc:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    77e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    77e2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    77e6:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    77ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    77ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    77f0:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    77f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    77f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    77f8:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    77fc:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7800:	6429      	str	r1, [r5, #64]	; 0x40
    7802:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7806:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7808:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    780c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7810:	64aa      	str	r2, [r5, #72]	; 0x48
    7812:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    7816:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7818:	64eb      	str	r3, [r5, #76]	; 0x4c
    781a:	6528      	str	r0, [r5, #80]	; 0x50
    781c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    781e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7822:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7826:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    782a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    782e:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7832:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7836:	662a      	str	r2, [r5, #96]	; 0x60
    7838:	666b      	str	r3, [r5, #100]	; 0x64
    783a:	6569      	str	r1, [r5, #84]	; 0x54
    783c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    783e:	4b35      	ldr	r3, [pc, #212]	; (7914 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7840:	f8cd a000 	str.w	sl, [sp]
    7844:	4620      	mov	r0, r4
    7846:	66a9      	str	r1, [r5, #104]	; 0x68
    7848:	4a33      	ldr	r2, [pc, #204]	; (7918 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    784a:	4d34      	ldr	r5, [pc, #208]	; (791c <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    784c:	2140      	movs	r1, #64	; 0x40
    784e:	f006 fc21 	bl	e094 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7852:	f894 e006 	ldrb.w	lr, [r4, #6]
    7856:	68a2      	ldr	r2, [r4, #8]
    7858:	68e3      	ldr	r3, [r4, #12]
    785a:	88a6      	ldrh	r6, [r4, #4]
    785c:	6920      	ldr	r0, [r4, #16]
    785e:	6961      	ldr	r1, [r4, #20]
    7860:	f885 e006 	strb.w	lr, [r5, #6]
    7864:	60aa      	str	r2, [r5, #8]
    7866:	f894 e018 	ldrb.w	lr, [r4, #24]
    786a:	69e2      	ldr	r2, [r4, #28]
    786c:	60eb      	str	r3, [r5, #12]
    786e:	6a23      	ldr	r3, [r4, #32]
    7870:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7874:	80ae      	strh	r6, [r5, #4]
    7876:	6128      	str	r0, [r5, #16]
    7878:	7e66      	ldrb	r6, [r4, #25]
    787a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    787c:	6169      	str	r1, [r5, #20]
    787e:	f885 e018 	strb.w	lr, [r5, #24]
    7882:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7884:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7888:	61ea      	str	r2, [r5, #28]
    788a:	622b      	str	r3, [r5, #32]
    788c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    788e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7890:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7894:	766e      	strb	r6, [r5, #25]
    7896:	6268      	str	r0, [r5, #36]	; 0x24
    7898:	6329      	str	r1, [r5, #48]	; 0x30
    789a:	636a      	str	r2, [r5, #52]	; 0x34
    789c:	63ab      	str	r3, [r5, #56]	; 0x38
    789e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    78a2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    78a6:	f8cd a000 	str.w	sl, [sp]
    78aa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    78ae:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    78b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    78b4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    78b8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    78bc:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    78c0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    78c2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    78c6:	642a      	str	r2, [r5, #64]	; 0x40
    78c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    78ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    78cc:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    78d0:	652e      	str	r6, [r5, #80]	; 0x50
    78d2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    78d6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    78d8:	64a9      	str	r1, [r5, #72]	; 0x48
    78da:	e023      	b.n	7924 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    78dc:	0002316c 	.word	0x0002316c
    78e0:	000231cc 	.word	0x000231cc
    78e4:	0002315c 	.word	0x0002315c
    78e8:	20001894 	.word	0x20001894
    78ec:	0002308c 	.word	0x0002308c
    78f0:	000231ac 	.word	0x000231ac
    78f4:	0002314c 	.word	0x0002314c
    78f8:	0002307c 	.word	0x0002307c
    78fc:	0002319c 	.word	0x0002319c
    7900:	0002336c 	.word	0x0002336c
    7904:	20001484 	.word	0x20001484
    7908:	0002332c 	.word	0x0002332c
    790c:	000231fc 	.word	0x000231fc
    7910:	200011f0 	.word	0x200011f0
    7914:	0002333c 	.word	0x0002333c
    7918:	000232dc 	.word	0x000232dc
    791c:	2000125c 	.word	0x2000125c
    7920:	20001750 	.word	0x20001750
    7924:	64ea      	str	r2, [r5, #76]	; 0x4c
    7926:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    792a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    792e:	656e      	str	r6, [r5, #84]	; 0x54
    7930:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7934:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7938:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    793c:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7940:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7944:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7948:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    794c:	4620      	mov	r0, r4
    794e:	4db9      	ldr	r5, [pc, #740]	; (7c34 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7950:	4bb9      	ldr	r3, [pc, #740]	; (7c38 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    7952:	4aba      	ldr	r2, [pc, #744]	; (7c3c <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    7954:	2120      	movs	r1, #32
    7956:	f006 fb9d 	bl	e094 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    795a:	f894 e006 	ldrb.w	lr, [r4, #6]
    795e:	68a2      	ldr	r2, [r4, #8]
    7960:	68e3      	ldr	r3, [r4, #12]
    7962:	88a6      	ldrh	r6, [r4, #4]
    7964:	6920      	ldr	r0, [r4, #16]
    7966:	6961      	ldr	r1, [r4, #20]
    7968:	f885 e006 	strb.w	lr, [r5, #6]
    796c:	60aa      	str	r2, [r5, #8]
    796e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7972:	69e2      	ldr	r2, [r4, #28]
    7974:	60eb      	str	r3, [r5, #12]
    7976:	6a23      	ldr	r3, [r4, #32]
    7978:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    797c:	80ae      	strh	r6, [r5, #4]
    797e:	6128      	str	r0, [r5, #16]
    7980:	7e66      	ldrb	r6, [r4, #25]
    7982:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7984:	6169      	str	r1, [r5, #20]
    7986:	f885 e018 	strb.w	lr, [r5, #24]
    798a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    798c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7990:	61ea      	str	r2, [r5, #28]
    7992:	622b      	str	r3, [r5, #32]
    7994:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7998:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    799c:	766e      	strb	r6, [r5, #25]
    799e:	6268      	str	r0, [r5, #36]	; 0x24
    79a0:	6329      	str	r1, [r5, #48]	; 0x30
    79a2:	636a      	str	r2, [r5, #52]	; 0x34
    79a4:	63ab      	str	r3, [r5, #56]	; 0x38
    79a6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    79aa:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    79ae:	f8cd a000 	str.w	sl, [sp]
    79b2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    79b6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    79ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
    79bc:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    79c0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    79c4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    79c8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    79ca:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    79ce:	642a      	str	r2, [r5, #64]	; 0x40
    79d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    79d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    79d4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    79d8:	652e      	str	r6, [r5, #80]	; 0x50
    79da:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    79de:	6d66      	ldr	r6, [r4, #84]	; 0x54
    79e0:	64a9      	str	r1, [r5, #72]	; 0x48
    79e2:	64ea      	str	r2, [r5, #76]	; 0x4c
    79e4:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    79e8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    79ec:	656e      	str	r6, [r5, #84]	; 0x54
    79ee:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    79f2:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    79f6:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    79fa:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    79fe:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7a02:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7a06:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7a0a:	4620      	mov	r0, r4
    7a0c:	4d8c      	ldr	r5, [pc, #560]	; (7c40 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    7a0e:	4b8d      	ldr	r3, [pc, #564]	; (7c44 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7a10:	4a8d      	ldr	r2, [pc, #564]	; (7c48 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    7a12:	2110      	movs	r1, #16
    7a14:	f006 fb3e 	bl	e094 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7a18:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7a1c:	68a2      	ldr	r2, [r4, #8]
    7a1e:	68e3      	ldr	r3, [r4, #12]
    7a20:	79a6      	ldrb	r6, [r4, #6]
    7a22:	6920      	ldr	r0, [r4, #16]
    7a24:	6961      	ldr	r1, [r4, #20]
    7a26:	f8a5 e004 	strh.w	lr, [r5, #4]
    7a2a:	60aa      	str	r2, [r5, #8]
    7a2c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7a30:	69e2      	ldr	r2, [r4, #28]
    7a32:	60eb      	str	r3, [r5, #12]
    7a34:	6a23      	ldr	r3, [r4, #32]
    7a36:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7a3a:	71ae      	strb	r6, [r5, #6]
    7a3c:	6128      	str	r0, [r5, #16]
    7a3e:	7e66      	ldrb	r6, [r4, #25]
    7a40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a42:	6169      	str	r1, [r5, #20]
    7a44:	f885 e018 	strb.w	lr, [r5, #24]
    7a48:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7a4a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7a4e:	61ea      	str	r2, [r5, #28]
    7a50:	622b      	str	r3, [r5, #32]
    7a52:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7a56:	766e      	strb	r6, [r5, #25]
    7a58:	6268      	str	r0, [r5, #36]	; 0x24
    7a5a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7a5e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7a62:	636a      	str	r2, [r5, #52]	; 0x34
    7a64:	63ab      	str	r3, [r5, #56]	; 0x38
    7a66:	6329      	str	r1, [r5, #48]	; 0x30
    7a68:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7a6c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7a70:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    7a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7a76:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    7a7a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    7a7e:	9703      	str	r7, [sp, #12]
    7a80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7a82:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    7a86:	642b      	str	r3, [r5, #64]	; 0x40
    7a88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7a8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7a8c:	64a9      	str	r1, [r5, #72]	; 0x48
    7a8e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    7a92:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    7a96:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7a9a:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7aa0:	64ea      	str	r2, [r5, #76]	; 0x4c
    7aa2:	652b      	str	r3, [r5, #80]	; 0x50
    7aa4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7aa8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7aac:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7ab0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7ab4:	6568      	str	r0, [r5, #84]	; 0x54
    7ab6:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    7aba:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    7abe:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    7ac2:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7ac6:	f04f 0e68 	mov.w	lr, #104	; 0x68
    7aca:	4d60      	ldr	r5, [pc, #384]	; (7c4c <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    7acc:	f8df c19c 	ldr.w	ip, [pc, #412]	; 7c6c <_ZN9ClearCore10SysManagerC1Ev+0x694>
    7ad0:	4e5f      	ldr	r6, [pc, #380]	; (7c50 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    7ad2:	4b60      	ldr	r3, [pc, #384]	; (7c54 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    7ad4:	4a60      	ldr	r2, [pc, #384]	; (7c58 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    7ad6:	f8cd e008 	str.w	lr, [sp, #8]
    7ada:	4620      	mov	r0, r4
    7adc:	2108      	movs	r1, #8
    7ade:	9601      	str	r6, [sp, #4]
    7ae0:	f8cd c000 	str.w	ip, [sp]
    7ae4:	f006 fe30 	bl	e748 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7ae8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7aec:	68a2      	ldr	r2, [r4, #8]
    7aee:	68e3      	ldr	r3, [r4, #12]
    7af0:	79a6      	ldrb	r6, [r4, #6]
    7af2:	6920      	ldr	r0, [r4, #16]
    7af4:	6961      	ldr	r1, [r4, #20]
    7af6:	f8a5 e004 	strh.w	lr, [r5, #4]
    7afa:	60aa      	str	r2, [r5, #8]
    7afc:	f894 e018 	ldrb.w	lr, [r4, #24]
    7b00:	69e2      	ldr	r2, [r4, #28]
    7b02:	60eb      	str	r3, [r5, #12]
    7b04:	6a23      	ldr	r3, [r4, #32]
    7b06:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7b0a:	71ae      	strb	r6, [r5, #6]
    7b0c:	6128      	str	r0, [r5, #16]
    7b0e:	7e66      	ldrb	r6, [r4, #25]
    7b10:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b12:	6169      	str	r1, [r5, #20]
    7b14:	f885 e018 	strb.w	lr, [r5, #24]
    7b18:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7b1a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7b1e:	61ea      	str	r2, [r5, #28]
    7b20:	622b      	str	r3, [r5, #32]
    7b22:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7b26:	766e      	strb	r6, [r5, #25]
    7b28:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7b2c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7b30:	6329      	str	r1, [r5, #48]	; 0x30
    7b32:	636a      	str	r2, [r5, #52]	; 0x34
    7b34:	63ab      	str	r3, [r5, #56]	; 0x38
    7b36:	6268      	str	r0, [r5, #36]	; 0x24
    7b38:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7b3c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7b40:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7b46:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7b4a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7b4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7b50:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7b52:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7b56:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7b5a:	642b      	str	r3, [r5, #64]	; 0x40
    7b5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7b60:	64a8      	str	r0, [r5, #72]	; 0x48
    7b62:	652a      	str	r2, [r5, #80]	; 0x50
    7b64:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7b68:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7b6c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7b70:	64e9      	str	r1, [r5, #76]	; 0x4c
    7b72:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    7b76:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7b7a:	656b      	str	r3, [r5, #84]	; 0x54
    7b7c:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    7b80:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    7b84:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    7b88:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    7b8c:	f04f 0c65 	mov.w	ip, #101	; 0x65
    7b90:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    7b94:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    7b98:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7b9c:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    7ba0:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    7ba4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 7c70 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    7ba8:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    7bac:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7bb0:	9703      	str	r7, [sp, #12]
    7bb2:	f8cd c008 	str.w	ip, [sp, #8]
    7bb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7bb8:	4b28      	ldr	r3, [pc, #160]	; (7c5c <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    7bba:	f8cd e004 	str.w	lr, [sp, #4]
    7bbe:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7bc0:	9300      	str	r3, [sp, #0]
    7bc2:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7bc6:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7bca:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7bcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7bce:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7bd2:	6669      	str	r1, [r5, #100]	; 0x64
    7bd4:	66aa      	str	r2, [r5, #104]	; 0x68
    7bd6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7bd8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7bda:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7bde:	676e      	str	r6, [r5, #116]	; 0x74
    7be0:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7be4:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7be8:	66eb      	str	r3, [r5, #108]	; 0x6c
    7bea:	67a9      	str	r1, [r5, #120]	; 0x78
    7bec:	67ea      	str	r2, [r5, #124]	; 0x7c
    7bee:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7bf2:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7bf6:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7bfa:	4620      	mov	r0, r4
    7bfc:	4b18      	ldr	r3, [pc, #96]	; (7c60 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7bfe:	4a19      	ldr	r2, [pc, #100]	; (7c64 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7c00:	4d19      	ldr	r5, [pc, #100]	; (7c68 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    7c02:	2104      	movs	r1, #4
    7c04:	f006 fda0 	bl	e748 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7c08:	f104 000c 	add.w	r0, r4, #12
    7c0c:	c807      	ldmia	r0, {r0, r1, r2}
    7c0e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7c12:	68a3      	ldr	r3, [r4, #8]
    7c14:	79a6      	ldrb	r6, [r4, #6]
    7c16:	f8a5 e004 	strh.w	lr, [r5, #4]
    7c1a:	60ab      	str	r3, [r5, #8]
    7c1c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7c20:	69e3      	ldr	r3, [r4, #28]
    7c22:	60e8      	str	r0, [r5, #12]
    7c24:	6a20      	ldr	r0, [r4, #32]
    7c26:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7c2a:	71ae      	strb	r6, [r5, #6]
    7c2c:	6129      	str	r1, [r5, #16]
    7c2e:	7e66      	ldrb	r6, [r4, #25]
    7c30:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7c32:	e01f      	b.n	7c74 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    7c34:	200012bc 	.word	0x200012bc
    7c38:	0002334c 	.word	0x0002334c
    7c3c:	000232ec 	.word	0x000232ec
    7c40:	2000131c 	.word	0x2000131c
    7c44:	0002335c 	.word	0x0002335c
    7c48:	000232fc 	.word	0x000232fc
    7c4c:	2000137c 	.word	0x2000137c
    7c50:	0002327c 	.word	0x0002327c
    7c54:	0002321c 	.word	0x0002321c
    7c58:	0002330c 	.word	0x0002330c
    7c5c:	0002324c 	.word	0x0002324c
    7c60:	0002322c 	.word	0x0002322c
    7c64:	0002331c 	.word	0x0002331c
    7c68:	20001400 	.word	0x20001400
    7c6c:	0002323c 	.word	0x0002323c
    7c70:	0002328c 	.word	0x0002328c
    7c74:	616a      	str	r2, [r5, #20]
    7c76:	f885 e018 	strb.w	lr, [r5, #24]
    7c7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7c7c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7c80:	61eb      	str	r3, [r5, #28]
    7c82:	6228      	str	r0, [r5, #32]
    7c84:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7c88:	766e      	strb	r6, [r5, #25]
    7c8a:	6269      	str	r1, [r5, #36]	; 0x24
    7c8c:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7c90:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7c94:	632a      	str	r2, [r5, #48]	; 0x30
    7c96:	63a8      	str	r0, [r5, #56]	; 0x38
    7c98:	636b      	str	r3, [r5, #52]	; 0x34
    7c9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7c9e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7ca2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7ca4:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7ca8:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7cac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7cae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7cb2:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7cb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7cb8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7cba:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7cbe:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7cc2:	6429      	str	r1, [r5, #64]	; 0x40
    7cc4:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7cc8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7cca:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7cce:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7cd2:	64aa      	str	r2, [r5, #72]	; 0x48
    7cd4:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    7cd8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    7cdc:	64eb      	str	r3, [r5, #76]	; 0x4c
    7cde:	6528      	str	r0, [r5, #80]	; 0x50
    7ce0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7ce4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7ce8:	6569      	str	r1, [r5, #84]	; 0x54
    7cea:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7cee:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7cf2:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7cf6:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7cfa:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    7cfe:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    7d02:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7d06:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7d0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7d0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7d0e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7d10:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7d14:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7d18:	6669      	str	r1, [r5, #100]	; 0x64
    7d1a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7d1c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7d1e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7d22:	66ab      	str	r3, [r5, #104]	; 0x68
    7d24:	66e8      	str	r0, [r5, #108]	; 0x6c
    7d26:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    7d28:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7d2c:	676e      	str	r6, [r5, #116]	; 0x74
    7d2e:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7d32:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7d36:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    7d38:	4abe      	ldr	r2, [pc, #760]	; (8034 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    7d3a:	67eb      	str	r3, [r5, #124]	; 0x7c
    7d3c:	4620      	mov	r0, r4
    7d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7d42:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7d46:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7d4a:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7d4e:	f006 fc6f 	bl	e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7d52:	f104 000c 	add.w	r0, r4, #12
    7d56:	c807      	ldmia	r0, {r0, r1, r2}
    7d58:	4db7      	ldr	r5, [pc, #732]	; (8038 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    7d5a:	68a3      	ldr	r3, [r4, #8]
    7d5c:	f894 c018 	ldrb.w	ip, [r4, #24]
    7d60:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7d64:	79a6      	ldrb	r6, [r4, #6]
    7d66:	60ab      	str	r3, [r5, #8]
    7d68:	f885 c018 	strb.w	ip, [r5, #24]
    7d6c:	69e3      	ldr	r3, [r4, #28]
    7d6e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7d72:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7d76:	f8a5 e004 	strh.w	lr, [r5, #4]
    7d7a:	71ae      	strb	r6, [r5, #6]
    7d7c:	f894 e019 	ldrb.w	lr, [r4, #25]
    7d80:	6a26      	ldr	r6, [r4, #32]
    7d82:	60e8      	str	r0, [r5, #12]
    7d84:	6129      	str	r1, [r5, #16]
    7d86:	616a      	str	r2, [r5, #20]
    7d88:	61eb      	str	r3, [r5, #28]
    7d8a:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    7d90:	4aaa      	ldr	r2, [pc, #680]	; (803c <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    7d92:	f885 e019 	strb.w	lr, [r5, #25]
    7d96:	4620      	mov	r0, r4
    7d98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7d9c:	622e      	str	r6, [r5, #32]
    7d9e:	626b      	str	r3, [r5, #36]	; 0x24
    7da0:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7da4:	f006 fc44 	bl	e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7da8:	f104 000c 	add.w	r0, r4, #12
    7dac:	c807      	ldmia	r0, {r0, r1, r2}
    7dae:	4da4      	ldr	r5, [pc, #656]	; (8040 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    7db0:	68a3      	ldr	r3, [r4, #8]
    7db2:	f894 c018 	ldrb.w	ip, [r4, #24]
    7db6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7dba:	79a6      	ldrb	r6, [r4, #6]
    7dbc:	60ab      	str	r3, [r5, #8]
    7dbe:	f885 c018 	strb.w	ip, [r5, #24]
    7dc2:	69e3      	ldr	r3, [r4, #28]
    7dc4:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7dc8:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7dcc:	f8a5 e004 	strh.w	lr, [r5, #4]
    7dd0:	71ae      	strb	r6, [r5, #6]
    7dd2:	f894 e019 	ldrb.w	lr, [r4, #25]
    7dd6:	6a26      	ldr	r6, [r4, #32]
    7dd8:	60e8      	str	r0, [r5, #12]
    7dda:	6129      	str	r1, [r5, #16]
    7ddc:	616a      	str	r2, [r5, #20]
    7dde:	61eb      	str	r3, [r5, #28]
    7de0:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    7de6:	4a97      	ldr	r2, [pc, #604]	; (8044 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    7de8:	f885 e019 	strb.w	lr, [r5, #25]
    7dec:	4620      	mov	r0, r4
    7dee:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7df2:	622e      	str	r6, [r5, #32]
    7df4:	626b      	str	r3, [r5, #36]	; 0x24
    7df6:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7dfa:	f006 fc19 	bl	e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7dfe:	4d92      	ldr	r5, [pc, #584]	; (8048 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    7e00:	88a6      	ldrh	r6, [r4, #4]
    7e02:	80ae      	strh	r6, [r5, #4]
    7e04:	f104 000c 	add.w	r0, r4, #12
    7e08:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    7e0a:	2605      	movs	r6, #5
    7e0c:	f894 e006 	ldrb.w	lr, [r4, #6]
    7e10:	68a3      	ldr	r3, [r4, #8]
    7e12:	9600      	str	r6, [sp, #0]
    7e14:	7e26      	ldrb	r6, [r4, #24]
    7e16:	f894 c019 	ldrb.w	ip, [r4, #25]
    7e1a:	f885 e006 	strb.w	lr, [r5, #6]
    7e1e:	60ab      	str	r3, [r5, #8]
    7e20:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7e24:	69e3      	ldr	r3, [r4, #28]
    7e26:	6129      	str	r1, [r5, #16]
    7e28:	616a      	str	r2, [r5, #20]
    7e2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e2c:	6a22      	ldr	r2, [r4, #32]
    7e2e:	762e      	strb	r6, [r5, #24]
    7e30:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    7e34:	60e8      	str	r0, [r5, #12]
    7e36:	f885 c019 	strb.w	ip, [r5, #25]
    7e3a:	61eb      	str	r3, [r5, #28]
    7e3c:	622a      	str	r2, [r5, #32]
    7e3e:	6269      	str	r1, [r5, #36]	; 0x24
    7e40:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7e44:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    7e48:	4620      	mov	r0, r4
    7e4a:	4d80      	ldr	r5, [pc, #512]	; (804c <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    7e4c:	4b80      	ldr	r3, [pc, #512]	; (8050 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    7e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7e52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7e56:	f005 fed1 	bl	dbfc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7e5a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7e5e:	68a2      	ldr	r2, [r4, #8]
    7e60:	68e3      	ldr	r3, [r4, #12]
    7e62:	79a6      	ldrb	r6, [r4, #6]
    7e64:	6920      	ldr	r0, [r4, #16]
    7e66:	6961      	ldr	r1, [r4, #20]
    7e68:	f8a5 e004 	strh.w	lr, [r5, #4]
    7e6c:	60aa      	str	r2, [r5, #8]
    7e6e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7e72:	69e2      	ldr	r2, [r4, #28]
    7e74:	60eb      	str	r3, [r5, #12]
    7e76:	6a23      	ldr	r3, [r4, #32]
    7e78:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7e7c:	71ae      	strb	r6, [r5, #6]
    7e7e:	6128      	str	r0, [r5, #16]
    7e80:	7e66      	ldrb	r6, [r4, #25]
    7e82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e84:	6169      	str	r1, [r5, #20]
    7e86:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    7e8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e8c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7e90:	61ea      	str	r2, [r5, #28]
    7e92:	622b      	str	r3, [r5, #32]
    7e94:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7e9a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7e9e:	766e      	strb	r6, [r5, #25]
    7ea0:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    7ea2:	2604      	movs	r6, #4
    7ea4:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7ea8:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7eac:	63ab      	str	r3, [r5, #56]	; 0x38
    7eae:	6329      	str	r1, [r5, #48]	; 0x30
    7eb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    7eb2:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7eb6:	4b67      	ldr	r3, [pc, #412]	; (8054 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    7eb8:	9600      	str	r6, [sp, #0]
    7eba:	4620      	mov	r0, r4
    7ebc:	63e9      	str	r1, [r5, #60]	; 0x3c
    7ebe:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7ec6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7eca:	f005 fe97 	bl	dbfc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7ece:	f104 0008 	add.w	r0, r4, #8
    7ed2:	c80d      	ldmia	r0, {r0, r2, r3}
    7ed4:	4d60      	ldr	r5, [pc, #384]	; (8058 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    7ed6:	88a1      	ldrh	r1, [r4, #4]
    7ed8:	f894 e006 	ldrb.w	lr, [r4, #6]
    7edc:	80a9      	strh	r1, [r5, #4]
    7ede:	f885 e006 	strb.w	lr, [r5, #6]
    7ee2:	6961      	ldr	r1, [r4, #20]
    7ee4:	f894 e018 	ldrb.w	lr, [r4, #24]
    7ee8:	60a8      	str	r0, [r5, #8]
    7eea:	60ea      	str	r2, [r5, #12]
    7eec:	7e60      	ldrb	r0, [r4, #25]
    7eee:	69e2      	ldr	r2, [r4, #28]
    7ef0:	612b      	str	r3, [r5, #16]
    7ef2:	6a23      	ldr	r3, [r4, #32]
    7ef4:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    7ef8:	6169      	str	r1, [r5, #20]
    7efa:	f885 e018 	strb.w	lr, [r5, #24]
    7efe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7f00:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7f04:	7668      	strb	r0, [r5, #25]
    7f06:	61ea      	str	r2, [r5, #28]
    7f08:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    7f0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7f0e:	622b      	str	r3, [r5, #32]
    7f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7f12:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    7f16:	6269      	str	r1, [r5, #36]	; 0x24
    7f18:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7f1c:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    7f20:	63ab      	str	r3, [r5, #56]	; 0x38
    7f22:	632a      	str	r2, [r5, #48]	; 0x30
    7f24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    7f26:	f8cd 8000 	str.w	r8, [sp]
    7f2a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7f2e:	63ea      	str	r2, [r5, #60]	; 0x3c
    7f30:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7f34:	4620      	mov	r0, r4
    7f36:	4d49      	ldr	r5, [pc, #292]	; (805c <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    7f38:	4b49      	ldr	r3, [pc, #292]	; (8060 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    7f3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7f3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    7f42:	f005 fe5b 	bl	dbfc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7f46:	f894 c006 	ldrb.w	ip, [r4, #6]
    7f4a:	68a2      	ldr	r2, [r4, #8]
    7f4c:	68e3      	ldr	r3, [r4, #12]
    7f4e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7f52:	6920      	ldr	r0, [r4, #16]
    7f54:	6961      	ldr	r1, [r4, #20]
    7f56:	f885 c006 	strb.w	ip, [r5, #6]
    7f5a:	60aa      	str	r2, [r5, #8]
    7f5c:	f894 c018 	ldrb.w	ip, [r4, #24]
    7f60:	69e2      	ldr	r2, [r4, #28]
    7f62:	60eb      	str	r3, [r5, #12]
    7f64:	6a23      	ldr	r3, [r4, #32]
    7f66:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    7f6a:	f8a5 e004 	strh.w	lr, [r5, #4]
    7f6e:	6128      	str	r0, [r5, #16]
    7f70:	f894 e019 	ldrb.w	lr, [r4, #25]
    7f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f76:	6169      	str	r1, [r5, #20]
    7f78:	f885 c018 	strb.w	ip, [r5, #24]
    7f7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7f7e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7f82:	61ea      	str	r2, [r5, #28]
    7f84:	622b      	str	r3, [r5, #32]
    7f86:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7f8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7f8c:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7f90:	f885 e019 	strb.w	lr, [r5, #25]
    7f94:	6268      	str	r0, [r5, #36]	; 0x24
    7f96:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    7f9a:	6329      	str	r1, [r5, #48]	; 0x30
    7f9c:	63ab      	str	r3, [r5, #56]	; 0x38
    7f9e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    7fa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    7fa4:	f8cd a000 	str.w	sl, [sp]
    7fa8:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    7fac:	63ea      	str	r2, [r5, #60]	; 0x3c
    7fae:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    7fb2:	4620      	mov	r0, r4
    7fb4:	4b2b      	ldr	r3, [pc, #172]	; (8064 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    7fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7fba:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    7fbe:	f005 fe1d 	bl	dbfc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    7fc2:	f104 0008 	add.w	r0, r4, #8
    7fc6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    7fc8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8068 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    7fcc:	f894 c006 	ldrb.w	ip, [r4, #6]
    7fd0:	88a5      	ldrh	r5, [r4, #4]
    7fd2:	f88e c006 	strb.w	ip, [lr, #6]
    7fd6:	f894 c019 	ldrb.w	ip, [r4, #25]
    7fda:	f894 8018 	ldrb.w	r8, [r4, #24]
    7fde:	f8ae 5004 	strh.w	r5, [lr, #4]
    7fe2:	f8ce 0008 	str.w	r0, [lr, #8]
    7fe6:	69e5      	ldr	r5, [r4, #28]
    7fe8:	6a20      	ldr	r0, [r4, #32]
    7fea:	f8ce 100c 	str.w	r1, [lr, #12]
    7fee:	f8ce 2010 	str.w	r2, [lr, #16]
    7ff2:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    7ff6:	f8ce 3014 	str.w	r3, [lr, #20]
    7ffa:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    7ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8000:	f88e c019 	strb.w	ip, [lr, #25]
    8004:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8006:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    800a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    800c:	f88e 8018 	strb.w	r8, [lr, #24]
    8010:	f8ce 501c 	str.w	r5, [lr, #28]
    8014:	f8ce 0020 	str.w	r0, [lr, #32]
    8018:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    801c:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    8020:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    8024:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    8028:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    802c:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    8030:	e01c      	b.n	806c <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    8032:	bf00      	nop
    8034:	000230dc 	.word	0x000230dc
    8038:	20001160 	.word	0x20001160
    803c:	000230ec 	.word	0x000230ec
    8040:	20001190 	.word	0x20001190
    8044:	000230fc 	.word	0x000230fc
    8048:	200011c0 	.word	0x200011c0
    804c:	20000b28 	.word	0x20000b28
    8050:	0002310c 	.word	0x0002310c
    8054:	0002311c 	.word	0x0002311c
    8058:	20001094 	.word	0x20001094
    805c:	200010d8 	.word	0x200010d8
    8060:	0002312c 	.word	0x0002312c
    8064:	0002313c 	.word	0x0002313c
    8068:	2000111c 	.word	0x2000111c
    806c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    806e:	9702      	str	r7, [sp, #8]
    8070:	9601      	str	r6, [sp, #4]
    8072:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    8076:	4dcc      	ldr	r5, [pc, #816]	; (83a8 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    8078:	9500      	str	r5, [sp, #0]
    807a:	4620      	mov	r0, r4
    807c:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    8080:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    8084:	4bc9      	ldr	r3, [pc, #804]	; (83ac <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    8086:	4aca      	ldr	r2, [pc, #808]	; (83b0 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    8088:	f44f 6100 	mov.w	r1, #2048	; 0x800
    808c:	f7fc fde6 	bl	4c5c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8090:	4bc8      	ldr	r3, [pc, #800]	; (83b4 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    8092:	79a7      	ldrb	r7, [r4, #6]
    8094:	68a6      	ldr	r6, [r4, #8]
    8096:	68e5      	ldr	r5, [r4, #12]
    8098:	6920      	ldr	r0, [r4, #16]
    809a:	6961      	ldr	r1, [r4, #20]
    809c:	f894 8018 	ldrb.w	r8, [r4, #24]
    80a0:	69e2      	ldr	r2, [r4, #28]
    80a2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    80a6:	f894 c019 	ldrb.w	ip, [r4, #25]
    80aa:	719f      	strb	r7, [r3, #6]
    80ac:	609e      	str	r6, [r3, #8]
    80ae:	6a67      	ldr	r7, [r4, #36]	; 0x24
    80b0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    80b4:	60dd      	str	r5, [r3, #12]
    80b6:	6118      	str	r0, [r3, #16]
    80b8:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    80bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    80be:	6159      	str	r1, [r3, #20]
    80c0:	f883 8018 	strb.w	r8, [r3, #24]
    80c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    80c6:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    80ca:	61da      	str	r2, [r3, #28]
    80cc:	6a22      	ldr	r2, [r4, #32]
    80ce:	f8a3 e004 	strh.w	lr, [r3, #4]
    80d2:	f883 c019 	strb.w	ip, [r3, #25]
    80d6:	621a      	str	r2, [r3, #32]
    80d8:	625f      	str	r7, [r3, #36]	; 0x24
    80da:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    80de:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    80e2:	6358      	str	r0, [r3, #52]	; 0x34
    80e4:	6399      	str	r1, [r3, #56]	; 0x38
    80e6:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    80ea:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    80ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    80f0:	649a      	str	r2, [r3, #72]	; 0x48
    80f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    80f4:	9207      	str	r2, [sp, #28]
    80f6:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    80fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    80fc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    8100:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8102:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    8106:	64da      	str	r2, [r3, #76]	; 0x4c
    8108:	9a07      	ldr	r2, [sp, #28]
    810a:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    810e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    8112:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    8116:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    811a:	6459      	str	r1, [r3, #68]	; 0x44
    811c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    811e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8120:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    8124:	65da      	str	r2, [r3, #92]	; 0x5c
    8126:	6f27      	ldr	r7, [r4, #112]	; 0x70
    8128:	6e22      	ldr	r2, [r4, #96]	; 0x60
    812a:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    812e:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    8132:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    8136:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    813a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    813c:	6558      	str	r0, [r3, #84]	; 0x54
    813e:	6599      	str	r1, [r3, #88]	; 0x58
    8140:	661a      	str	r2, [r3, #96]	; 0x60
    8142:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    8146:	671f      	str	r7, [r3, #112]	; 0x70
    8148:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    814c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8150:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    8154:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8158:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    815c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8160:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    8164:	675e      	str	r6, [r3, #116]	; 0x74
    8166:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    816a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    816e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    8172:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    8176:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    817a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    817e:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    8182:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    8186:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    818a:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    818e:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    8192:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    8196:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    819a:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    819e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    81a2:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    81a6:	4619      	mov	r1, r3
    81a8:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    81ac:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    81b0:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    81b4:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    81b6:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    81ba:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    81be:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    81c2:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    81c6:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    81ca:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    81cc:	983a      	ldr	r0, [sp, #232]	; 0xe8
    81ce:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    81d0:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    81d4:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    81d8:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    81dc:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    81e0:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    81e4:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    81e8:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    81ec:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    81f0:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    81f4:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    81f8:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    81fc:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    8200:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    8204:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8208:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    820c:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    8210:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8212:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    8216:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    821a:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    821e:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    8222:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    8226:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    822a:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    822e:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    8232:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    8236:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    823a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    823e:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    8242:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    8244:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8246:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    824a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    824e:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8252:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8254:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8258:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    825c:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8260:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    8264:	9e49      	ldr	r6, [sp, #292]	; 0x124
    8266:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    8268:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    826c:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    8270:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    8272:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    8276:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    827a:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    827e:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    8282:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8286:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    828a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    828c:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    8290:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    8294:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    8298:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    829c:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    82a0:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    82a4:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    82a8:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    82ac:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    82b0:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    82b4:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    82b6:	9b50      	ldr	r3, [sp, #320]	; 0x140
    82b8:	9d51      	ldr	r5, [sp, #324]	; 0x144
    82ba:	9852      	ldr	r0, [sp, #328]	; 0x148
    82bc:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    82c0:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    82c4:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    82c8:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    82cc:	9b54      	ldr	r3, [sp, #336]	; 0x150
    82ce:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    82d2:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    82d6:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    82da:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    82de:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    82e2:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    82e6:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    82ea:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    82ee:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    82f2:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    82f6:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    82fa:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    82fe:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    8302:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    8306:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    830a:	4a2b      	ldr	r2, [pc, #172]	; (83b8 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    830c:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    8310:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    8314:	2401      	movs	r4, #1
    8316:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    831a:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    831e:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    8322:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    8326:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    832a:	2605      	movs	r6, #5
    832c:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8330:	9d58      	ldr	r5, [sp, #352]	; 0x160
    8332:	4f22      	ldr	r7, [pc, #136]	; (83bc <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    8334:	9402      	str	r4, [sp, #8]
    8336:	e88d 0044 	stmia.w	sp, {r2, r6}
    833a:	a808      	add	r0, sp, #32
    833c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8340:	4b1f      	ldr	r3, [pc, #124]	; (83c0 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    8342:	4a20      	ldr	r2, [pc, #128]	; (83c4 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    8344:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8348:	f7fc fc88 	bl	4c5c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    834c:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8350:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8356:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    835a:	980d      	ldr	r0, [sp, #52]	; 0x34
    835c:	71b9      	strb	r1, [r7, #6]
    835e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8360:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    8364:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8368:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    836c:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8370:	80ba      	strh	r2, [r7, #4]
    8372:	60bb      	str	r3, [r7, #8]
    8374:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8376:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8378:	60fe      	str	r6, [r7, #12]
    837a:	613d      	str	r5, [r7, #16]
    837c:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8380:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8382:	6178      	str	r0, [r7, #20]
    8384:	61f9      	str	r1, [r7, #28]
    8386:	9816      	ldr	r0, [sp, #88]	; 0x58
    8388:	f887 8018 	strb.w	r8, [r7, #24]
    838c:	a919      	add	r1, sp, #100	; 0x64
    838e:	623a      	str	r2, [r7, #32]
    8390:	627b      	str	r3, [r7, #36]	; 0x24
    8392:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8396:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    839a:	637d      	str	r5, [r7, #52]	; 0x34
    839c:	63b8      	str	r0, [r7, #56]	; 0x38
    839e:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    83a2:	f887 c019 	strb.w	ip, [r7, #25]
    83a6:	e00f      	b.n	83c8 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    83a8:	0002320c 	.word	0x0002320c
    83ac:	0002337c 	.word	0x0002337c
    83b0:	000231bc 	.word	0x000231bc
    83b4:	20000b70 	.word	0x20000b70
    83b8:	000233ac 	.word	0x000233ac
    83bc:	20000cb8 	.word	0x20000cb8
    83c0:	0002338c 	.word	0x0002338c
    83c4:	0002339c 	.word	0x0002339c
    83c8:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    83cc:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    83d0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    83d4:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    83d8:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    83dc:	c90e      	ldmia	r1, {r1, r2, r3}
    83de:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    83e2:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    83e6:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    83ea:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    83ee:	6479      	str	r1, [r7, #68]	; 0x44
    83f0:	981d      	ldr	r0, [sp, #116]	; 0x74
    83f2:	991e      	ldr	r1, [sp, #120]	; 0x78
    83f4:	64ba      	str	r2, [r7, #72]	; 0x48
    83f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    83f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    83fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    83fc:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    8400:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    8404:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8406:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8408:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    840c:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    8410:	6578      	str	r0, [r7, #84]	; 0x54
    8412:	65b9      	str	r1, [r7, #88]	; 0x58
    8414:	65fa      	str	r2, [r7, #92]	; 0x5c
    8416:	663b      	str	r3, [r7, #96]	; 0x60
    8418:	673d      	str	r5, [r7, #112]	; 0x70
    841a:	677e      	str	r6, [r7, #116]	; 0x74
    841c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8420:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    8424:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8428:	9928      	ldr	r1, [sp, #160]	; 0xa0
    842a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    842c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8430:	4615      	mov	r5, r2
    8432:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8434:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8436:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    843a:	461e      	mov	r6, r3
    843c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    843e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8444:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8448:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    844a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    844c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8450:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8454:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8456:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    845c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8460:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8462:	9836      	ldr	r0, [sp, #216]	; 0xd8
    8464:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8468:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    846c:	9937      	ldr	r1, [sp, #220]	; 0xdc
    846e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8474:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    8478:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    847c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8480:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8484:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8488:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    848a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    848c:	993b      	ldr	r1, [sp, #236]	; 0xec
    848e:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    8492:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    8496:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    849a:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    849e:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    84a2:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    84a6:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    84aa:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    84ae:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    84b2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    84b6:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    84ba:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    84be:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    84c2:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    84c6:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    84ca:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    84ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    84d2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    84d4:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    84d8:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    84dc:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    84e0:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    84e4:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    84e8:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    84ec:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    84f0:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    84f4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    84f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    84fc:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8500:	9943      	ldr	r1, [sp, #268]	; 0x10c
    8502:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8504:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    8508:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    850c:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    8510:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8514:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8516:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    851a:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    851e:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    8522:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    8526:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8528:	9d49      	ldr	r5, [sp, #292]	; 0x124
    852a:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    852e:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    8532:	984a      	ldr	r0, [sp, #296]	; 0x128
    8534:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8538:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    853c:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8540:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    8544:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8548:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    854c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    854e:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    8552:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    8556:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    855a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    855e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8562:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    8566:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    856a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    856e:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    8572:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    8574:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8576:	9851      	ldr	r0, [sp, #324]	; 0x144
    8578:	9952      	ldr	r1, [sp, #328]	; 0x148
    857a:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    857e:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8582:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    8586:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8588:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    858c:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8590:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    8594:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8598:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    859c:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    85a0:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    85a4:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    85a8:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    85ac:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    85b0:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    85b4:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    85b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    85bc:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    85c0:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    85c4:	4aca      	ldr	r2, [pc, #808]	; (88f0 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    85c6:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    85ca:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    85ce:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    85d2:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    85d6:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    85da:	2503      	movs	r5, #3
    85dc:	2602      	movs	r6, #2
    85de:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    85e2:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    85e6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    85ea:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    85ee:	9958      	ldr	r1, [sp, #352]	; 0x160
    85f0:	4bc0      	ldr	r3, [pc, #768]	; (88f4 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    85f2:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    85f6:	a808      	add	r0, sp, #32
    85f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    85fc:	4abe      	ldr	r2, [pc, #760]	; (88f8 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    85fe:	4fbf      	ldr	r7, [pc, #764]	; (88fc <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    8600:	f44f 7100 	mov.w	r1, #512	; 0x200
    8604:	f7fc fb2a 	bl	4c5c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8608:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    860c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    860e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8610:	990d      	ldr	r1, [sp, #52]	; 0x34
    8612:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8616:	980c      	ldr	r0, [sp, #48]	; 0x30
    8618:	f8a7 c004 	strh.w	ip, [r7, #4]
    861c:	60ba      	str	r2, [r7, #8]
    861e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    8622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8624:	60fb      	str	r3, [r7, #12]
    8626:	6179      	str	r1, [r7, #20]
    8628:	9b10      	ldr	r3, [sp, #64]	; 0x40
    862a:	9915      	ldr	r1, [sp, #84]	; 0x54
    862c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8630:	f887 e006 	strb.w	lr, [r7, #6]
    8634:	6138      	str	r0, [r7, #16]
    8636:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    863a:	9811      	ldr	r0, [sp, #68]	; 0x44
    863c:	f887 c018 	strb.w	ip, [r7, #24]
    8640:	61fa      	str	r2, [r7, #28]
    8642:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    8646:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8648:	623b      	str	r3, [r7, #32]
    864a:	6379      	str	r1, [r7, #52]	; 0x34
    864c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8650:	f887 e019 	strb.w	lr, [r7, #25]
    8654:	a919      	add	r1, sp, #100	; 0x64
    8656:	6278      	str	r0, [r7, #36]	; 0x24
    8658:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    865c:	63ba      	str	r2, [r7, #56]	; 0x38
    865e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8662:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    8666:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    866a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    866e:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    8672:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    8676:	c90e      	ldmia	r1, {r1, r2, r3}
    8678:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    867c:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    8680:	6479      	str	r1, [r7, #68]	; 0x44
    8682:	64ba      	str	r2, [r7, #72]	; 0x48
    8684:	991d      	ldr	r1, [sp, #116]	; 0x74
    8686:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8688:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    868c:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    8690:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    8694:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    8698:	64fb      	str	r3, [r7, #76]	; 0x4c
    869a:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    869e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    86a0:	9820      	ldr	r0, [sp, #128]	; 0x80
    86a2:	6579      	str	r1, [r7, #84]	; 0x54
    86a4:	65ba      	str	r2, [r7, #88]	; 0x58
    86a6:	9924      	ldr	r1, [sp, #144]	; 0x90
    86a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    86aa:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    86ae:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    86b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    86b4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    86b8:	677a      	str	r2, [r7, #116]	; 0x74
    86ba:	6638      	str	r0, [r7, #96]	; 0x60
    86bc:	6739      	str	r1, [r7, #112]	; 0x70
    86be:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    86c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    86c4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    86c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    86ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    86ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    86d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    86d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    86d6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    86da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    86dc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    86de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    86e2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    86e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    86e8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    86ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    86ee:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    86f2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    86f4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    86f8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    86fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    86fe:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8702:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8704:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    8706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    870a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    870e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    8710:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    8714:	a939      	add	r1, sp, #228	; 0xe4
    8716:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    871c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8720:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8724:	c90e      	ldmia	r1, {r1, r2, r3}
    8726:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    872a:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    872e:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    8732:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    8736:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    873a:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    873e:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    8742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    8746:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    874a:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    874e:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    8752:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    8756:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    875a:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    875e:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    8762:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    8766:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    876a:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    876e:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    8772:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    8776:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    877a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    877c:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    8780:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    8784:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8788:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    878c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8790:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8794:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8798:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    879a:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    879e:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    87a2:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    87a6:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    87aa:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    87ae:	9947      	ldr	r1, [sp, #284]	; 0x11c
    87b0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    87b4:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    87b8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    87ba:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    87be:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    87c2:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    87c6:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    87ca:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    87ce:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    87d2:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    87d6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    87d8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    87da:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    87de:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    87e2:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    87e6:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    87ea:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    87ee:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    87f0:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    87f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    87f8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    87fc:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8800:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    8804:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8808:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    880c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    880e:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8810:	9a50      	ldr	r2, [sp, #320]	; 0x140
    8812:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    8816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    881a:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    881e:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    8822:	9852      	ldr	r0, [sp, #328]	; 0x148
    8824:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8828:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    882c:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8830:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8832:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    8836:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    883a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    883e:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8842:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    8846:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    884a:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    884e:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    8852:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8856:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    885a:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    885e:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    8862:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    8866:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    886a:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    886e:	f04f 0800 	mov.w	r8, #0
    8872:	f8df e098 	ldr.w	lr, [pc, #152]	; 890c <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    8876:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    887a:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    887e:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    8882:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8886:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    888a:	9958      	ldr	r1, [sp, #352]	; 0x160
    888c:	4b1c      	ldr	r3, [pc, #112]	; (8900 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    888e:	9502      	str	r5, [sp, #8]
    8890:	f8cd 8004 	str.w	r8, [sp, #4]
    8894:	f8cd e000 	str.w	lr, [sp]
    8898:	a808      	add	r0, sp, #32
    889a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    889e:	4a19      	ldr	r2, [pc, #100]	; (8904 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    88a0:	4f19      	ldr	r7, [pc, #100]	; (8908 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    88a2:	f44f 7180 	mov.w	r1, #256	; 0x100
    88a6:	f7fc f9d9 	bl	4c5c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    88aa:	a80a      	add	r0, sp, #40	; 0x28
    88ac:	c807      	ldmia	r0, {r0, r1, r2}
    88ae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    88b2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    88b6:	80bb      	strh	r3, [r7, #4]
    88b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    88ba:	f887 e006 	strb.w	lr, [r7, #6]
    88be:	60b8      	str	r0, [r7, #8]
    88c0:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    88c4:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    88c8:	60f9      	str	r1, [r7, #12]
    88ca:	613a      	str	r2, [r7, #16]
    88cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    88ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    88d0:	617b      	str	r3, [r7, #20]
    88d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    88d4:	f887 e018 	strb.w	lr, [r7, #24]
    88d8:	7678      	strb	r0, [r7, #25]
    88da:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    88de:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    88e2:	61f9      	str	r1, [r7, #28]
    88e4:	623a      	str	r2, [r7, #32]
    88e6:	9915      	ldr	r1, [sp, #84]	; 0x54
    88e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    88ea:	627b      	str	r3, [r7, #36]	; 0x24
    88ec:	e010      	b.n	8910 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    88ee:	bf00      	nop
    88f0:	000232bc 	.word	0x000232bc
    88f4:	0002325c 	.word	0x0002325c
    88f8:	0002329c 	.word	0x0002329c
    88fc:	20000e00 	.word	0x20000e00
    8900:	0002326c 	.word	0x0002326c
    8904:	000232ac 	.word	0x000232ac
    8908:	20000f48 	.word	0x20000f48
    890c:	000232cc 	.word	0x000232cc
    8910:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8914:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8918:	6379      	str	r1, [r7, #52]	; 0x34
    891a:	63ba      	str	r2, [r7, #56]	; 0x38
    891c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8920:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8924:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8928:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    892c:	9919      	ldr	r1, [sp, #100]	; 0x64
    892e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8930:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    8934:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8938:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    893a:	6479      	str	r1, [r7, #68]	; 0x44
    893c:	64ba      	str	r2, [r7, #72]	; 0x48
    893e:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    8942:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    8946:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    894a:	64fb      	str	r3, [r7, #76]	; 0x4c
    894c:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8952:	991e      	ldr	r1, [sp, #120]	; 0x78
    8954:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8958:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    895a:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    895e:	657b      	str	r3, [r7, #84]	; 0x54
    8960:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    8964:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8966:	65b9      	str	r1, [r7, #88]	; 0x58
    8968:	65fa      	str	r2, [r7, #92]	; 0x5c
    896a:	9924      	ldr	r1, [sp, #144]	; 0x90
    896c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    896e:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    8972:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    8976:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    897a:	6739      	str	r1, [r7, #112]	; 0x70
    897c:	663b      	str	r3, [r7, #96]	; 0x60
    897e:	677a      	str	r2, [r7, #116]	; 0x74
    8980:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    8984:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8986:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    898a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    898c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8990:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8992:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    8996:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8998:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    899c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    899e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    89a2:	9930      	ldr	r1, [sp, #192]	; 0xc0
    89a4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    89a8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    89aa:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    89ae:	9932      	ldr	r1, [sp, #200]	; 0xc8
    89b0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    89b4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    89b6:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    89ba:	9934      	ldr	r1, [sp, #208]	; 0xd0
    89bc:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    89c0:	9935      	ldr	r1, [sp, #212]	; 0xd4
    89c2:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    89c6:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    89ca:	9936      	ldr	r1, [sp, #216]	; 0xd8
    89cc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    89d0:	9937      	ldr	r1, [sp, #220]	; 0xdc
    89d2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    89d6:	9938      	ldr	r1, [sp, #224]	; 0xe0
    89d8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    89dc:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    89e0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    89e4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    89e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    89ea:	983a      	ldr	r0, [sp, #232]	; 0xe8
    89ec:	993b      	ldr	r1, [sp, #236]	; 0xec
    89ee:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    89f2:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    89f6:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    89fa:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    89fe:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8a02:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    8a06:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    8a0a:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    8a0e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    8a12:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    8a16:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8a1a:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8a1e:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    8a22:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    8a26:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8a2a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8a2e:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    8a32:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    8a36:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8a3a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8a3e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    8a42:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8a44:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8a48:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8a4c:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8a50:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8a54:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8a58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8a5c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    8a62:	9844      	ldr	r0, [sp, #272]	; 0x110
    8a64:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8a68:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8a6c:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8a70:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    8a74:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    8a78:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    8a7c:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8a7e:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8a82:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    8a86:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8a8a:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8a8e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8a90:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    8a94:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8a96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8a9a:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8a9e:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8aa0:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8aa4:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8aa8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8aac:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8ab0:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8ab4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8ab8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8aba:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8abe:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8ac2:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    8ac6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8aca:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8ace:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8ad0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    8ad4:	9850      	ldr	r0, [sp, #320]	; 0x140
    8ad6:	9951      	ldr	r1, [sp, #324]	; 0x144
    8ad8:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8ada:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8ade:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    8ae2:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    8ae6:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8aea:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8aee:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8af0:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    8af4:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    8af8:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    8afc:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8b00:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8b04:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8b08:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    8b0c:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8b10:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    8b14:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8b18:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8b1c:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8b20:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8b24:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8b28:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8b2c:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8b30:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8b34:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8b38:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8b3c:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8b40:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    8b44:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    8b46:	f8df c208 	ldr.w	ip, [pc, #520]	; 8d50 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8b4a:	9207      	str	r2, [sp, #28]
    8b4c:	f8df e204 	ldr.w	lr, [pc, #516]	; 8d54 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8b50:	9505      	str	r5, [sp, #20]
    8b52:	4b78      	ldr	r3, [pc, #480]	; (8d34 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    8b54:	9d07      	ldr	r5, [sp, #28]
    8b56:	4878      	ldr	r0, [pc, #480]	; (8d38 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8b58:	f8cd e010 	str.w	lr, [sp, #16]
    8b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8b60:	e88d 1004 	stmia.w	sp, {r2, ip}
    8b64:	9303      	str	r3, [sp, #12]
    8b66:	9002      	str	r0, [sp, #8]
    8b68:	4641      	mov	r1, r8
    8b6a:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8b6e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8d58 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    8b72:	4d72      	ldr	r5, [pc, #456]	; (8d3c <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    8b74:	a808      	add	r0, sp, #32
    8b76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8b7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8b7e:	f008 fbe7 	bl	11350 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8b82:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b86:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8b8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b8c:	f8c8 1008 	str.w	r1, [r8, #8]
    8b90:	f8c8 2004 	str.w	r2, [r8, #4]
    8b94:	990d      	ldr	r1, [sp, #52]	; 0x34
    8b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b98:	f888 300c 	strb.w	r3, [r8, #12]
    8b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b9e:	f8c8 0010 	str.w	r0, [r8, #16]
    8ba2:	f8c8 1014 	str.w	r1, [r8, #20]
    8ba6:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ba8:	9911      	ldr	r1, [sp, #68]	; 0x44
    8baa:	f8c8 2018 	str.w	r2, [r8, #24]
    8bae:	f8c8 301c 	str.w	r3, [r8, #28]
    8bb2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8bb6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8bba:	f8c8 0020 	str.w	r0, [r8, #32]
    8bbe:	2780      	movs	r7, #128	; 0x80
    8bc0:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    8bc4:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    8bc8:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    8bcc:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    8bd0:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    8bd4:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8bd8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8bdc:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8be0:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    8be4:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8be8:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8bec:	a914      	add	r1, sp, #80	; 0x50
    8bee:	463a      	mov	r2, r7
    8bf0:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8bf4:	f015 fc1c 	bl	1e430 <memcpy>
    8bf8:	463a      	mov	r2, r7
    8bfa:	a934      	add	r1, sp, #208	; 0xd0
    8bfc:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8c00:	f015 fc16 	bl	1e430 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    8c04:	4b4e      	ldr	r3, [pc, #312]	; (8d40 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    8c06:	9303      	str	r3, [sp, #12]
    8c08:	484e      	ldr	r0, [pc, #312]	; (8d44 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8c0a:	4a4f      	ldr	r2, [pc, #316]	; (8d48 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8c0c:	9002      	str	r0, [sp, #8]
    8c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8c12:	9201      	str	r2, [sp, #4]
    8c14:	9300      	str	r3, [sp, #0]
    8c16:	9854      	ldr	r0, [sp, #336]	; 0x150
    8c18:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8c1a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8c1c:	9605      	str	r6, [sp, #20]
    8c1e:	4621      	mov	r1, r4
    8c20:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    8c22:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    8c26:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8c2a:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8c2e:	9858      	ldr	r0, [sp, #352]	; 0x160
    8c30:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    8c34:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    8c38:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    8c3c:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    8c40:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    8c42:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8c44:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    8c46:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    8c4a:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    8c4e:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    8c52:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    8c56:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    8c5a:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    8c5e:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    8c62:	a808      	add	r0, sp, #32
    8c64:	4e39      	ldr	r6, [pc, #228]	; (8d4c <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    8c66:	9604      	str	r6, [sp, #16]
    8c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8c6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8c70:	f008 fb6e 	bl	11350 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8c74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8c76:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c78:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    8c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c7e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8c82:	60ac      	str	r4, [r5, #8]
    8c84:	6068      	str	r0, [r5, #4]
    8c86:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8c88:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c8a:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    8c8e:	f885 e00c 	strb.w	lr, [r5, #12]
    8c92:	612a      	str	r2, [r5, #16]
    8c94:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    8c98:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8c9c:	6168      	str	r0, [r5, #20]
    8c9e:	61ae      	str	r6, [r5, #24]
    8ca0:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ca2:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    8ca6:	61ec      	str	r4, [r5, #28]
    8ca8:	626b      	str	r3, [r5, #36]	; 0x24
    8caa:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    8cae:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8cb2:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    8cb6:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    8cba:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    8cbe:	a914      	add	r1, sp, #80	; 0x50
    8cc0:	6228      	str	r0, [r5, #32]
    8cc2:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    8cc6:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    8cca:	463a      	mov	r2, r7
    8ccc:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    8cd0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8cd4:	f015 fbac 	bl	1e430 <memcpy>
    8cd8:	463a      	mov	r2, r7
    8cda:	a934      	add	r1, sp, #208	; 0xd0
    8cdc:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8ce0:	f015 fba6 	bl	1e430 <memcpy>
    8ce4:	a855      	add	r0, sp, #340	; 0x154
    8ce6:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    8cea:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8cec:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    8cf0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8cf2:	9e58      	ldr	r6, [sp, #352]	; 0x160
    8cf4:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    8cf8:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    8cfc:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    8d00:	995b      	ldr	r1, [sp, #364]	; 0x16c
    8d02:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    8d06:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    8d08:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    8d0c:	4648      	mov	r0, r9
    8d0e:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8d12:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    8d16:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    8d1a:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    8d1e:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    8d22:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    8d26:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    8d2a:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    8d2e:	b05f      	add	sp, #380	; 0x17c
    8d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d34:	000230ac 	.word	0x000230ac
    8d38:	0002309c 	.word	0x0002309c
    8d3c:	200015f8 	.word	0x200015f8
    8d40:	000230cc 	.word	0x000230cc
    8d44:	000230bc 	.word	0x000230bc
    8d48:	000231ec 	.word	0x000231ec
    8d4c:	0002318c 	.word	0x0002318c
    8d50:	000231dc 	.word	0x000231dc
    8d54:	0002317c 	.word	0x0002317c
    8d58:	200014a0 	.word	0x200014a0

00008d5c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    8d5c:	2914      	cmp	r1, #20
    8d5e:	dc03      	bgt.n	8d68 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    8d60:	4a03      	ldr	r2, [pc, #12]	; (8d70 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    8d62:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    8d66:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    8d68:	4b02      	ldr	r3, [pc, #8]	; (8d74 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    8d6a:	6818      	ldr	r0, [r3, #0]
    8d6c:	f006 bee0 	b.w	fb30 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    8d70:	00023028 	.word	0x00023028
    8d74:	20001f0c 	.word	0x20001f0c

00008d78 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    8d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8d7a:	4ab1      	ldr	r2, [pc, #708]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8d7c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d80:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    8d84:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8d86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8d8a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d8e:	065e      	lsls	r6, r3, #25
    8d90:	d4fb      	bmi.n	8d8a <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    8d92:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8d96:	49aa      	ldr	r1, [pc, #680]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8d98:	2001      	movs	r0, #1
    8d9a:	f360 0303 	bfi	r3, r0, #0, #4
    8d9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8da2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8daa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8dae:	684b      	ldr	r3, [r1, #4]
    8db0:	f013 0304 	ands.w	r3, r3, #4
    8db4:	d1fb      	bne.n	8dae <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8db6:	48a3      	ldr	r0, [pc, #652]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    8db8:	4aa3      	ldr	r2, [pc, #652]	; (9048 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8dba:	6981      	ldr	r1, [r0, #24]
    8dbc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    8dc0:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    8dc2:	6811      	ldr	r1, [r2, #0]
    8dc4:	f363 0141 	bfi	r1, r3, #1, #1
    8dc8:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    8dca:	6893      	ldr	r3, [r2, #8]
    8dcc:	f013 0302 	ands.w	r3, r3, #2
    8dd0:	d1fb      	bne.n	8dca <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    8dd2:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8dd4:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8dd6:	499a      	ldr	r1, [pc, #616]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    8dd8:	f040 0002 	orr.w	r0, r0, #2
    8ddc:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8dde:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8de0:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8de4:	f040 0002 	orr.w	r0, r0, #2
    8de8:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    8dea:	6453      	str	r3, [r2, #68]	; 0x44
    8dec:	6493      	str	r3, [r2, #72]	; 0x48
    8dee:	64d3      	str	r3, [r2, #76]	; 0x4c
    8df0:	6513      	str	r3, [r2, #80]	; 0x50
    8df2:	6553      	str	r3, [r2, #84]	; 0x54
    8df4:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    8df6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8df8:	f040 0001 	orr.w	r0, r0, #1
    8dfc:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    8dfe:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    8e02:	f363 1286 	bfi	r2, r3, #6, #1
    8e06:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    8e0a:	460a      	mov	r2, r1
    8e0c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8e10:	065d      	lsls	r5, r3, #25
    8e12:	d4fb      	bmi.n	8e0c <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    8e14:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8e18:	4989      	ldr	r1, [pc, #548]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8e1a:	2001      	movs	r0, #1
    8e1c:	f360 0303 	bfi	r3, r0, #0, #4
    8e20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8e24:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8e2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8e30:	684b      	ldr	r3, [r1, #4]
    8e32:	f013 0304 	ands.w	r3, r3, #4
    8e36:	d1fb      	bne.n	8e30 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8e38:	4882      	ldr	r0, [pc, #520]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    8e3a:	4a84      	ldr	r2, [pc, #528]	; (904c <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    8e3c:	6981      	ldr	r1, [r0, #24]
    8e3e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8e42:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    8e44:	6811      	ldr	r1, [r2, #0]
    8e46:	f363 0141 	bfi	r1, r3, #1, #1
    8e4a:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    8e4c:	6893      	ldr	r3, [r2, #8]
    8e4e:	f013 0302 	ands.w	r3, r3, #2
    8e52:	d1fb      	bne.n	8e4c <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    8e54:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8e56:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8e58:	4979      	ldr	r1, [pc, #484]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    8e5a:	f040 0002 	orr.w	r0, r0, #2
    8e5e:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    8e60:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8e62:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    8e66:	f040 0002 	orr.w	r0, r0, #2
    8e6a:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    8e6c:	6453      	str	r3, [r2, #68]	; 0x44
    8e6e:	6493      	str	r3, [r2, #72]	; 0x48
    8e70:	64d3      	str	r3, [r2, #76]	; 0x4c
    8e72:	6513      	str	r3, [r2, #80]	; 0x50
    8e74:	6553      	str	r3, [r2, #84]	; 0x54
    8e76:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    8e78:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    8e7c:	f363 1286 	bfi	r2, r3, #6, #1
    8e80:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    8e84:	460a      	mov	r2, r1
    8e86:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8e8a:	065c      	lsls	r4, r3, #25
    8e8c:	d4fb      	bmi.n	8e86 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    8e8e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8e92:	496b      	ldr	r1, [pc, #428]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8e94:	2006      	movs	r0, #6
    8e96:	f360 0303 	bfi	r3, r0, #0, #4
    8e9a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8e9e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    8ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8ea6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    8eaa:	684b      	ldr	r3, [r1, #4]
    8eac:	f013 0318 	ands.w	r3, r3, #24
    8eb0:	d1fb      	bne.n	8eaa <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8eb2:	4c64      	ldr	r4, [pc, #400]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8eb4:	4a62      	ldr	r2, [pc, #392]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    8eb6:	6960      	ldr	r0, [r4, #20]
    8eb8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    8ebc:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    8ebe:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    8ec2:	f363 1086 	bfi	r0, r3, #6, #1
    8ec6:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    8eca:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8ece:	0658      	lsls	r0, r3, #25
    8ed0:	d4fb      	bmi.n	8eca <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    8ed2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8ed6:	495a      	ldr	r1, [pc, #360]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8ed8:	2006      	movs	r0, #6
    8eda:	f360 0303 	bfi	r3, r0, #0, #4
    8ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8ee2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    8ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8eea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    8eee:	684b      	ldr	r3, [r1, #4]
    8ef0:	f013 0318 	ands.w	r3, r3, #24
    8ef4:	d1fb      	bne.n	8eee <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8ef6:	4c53      	ldr	r4, [pc, #332]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8ef8:	4a51      	ldr	r2, [pc, #324]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    8efa:	69a0      	ldr	r0, [r4, #24]
    8efc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    8f00:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    8f02:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    8f06:	f363 1086 	bfi	r0, r3, #6, #1
    8f0a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    8f0e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8f12:	0659      	lsls	r1, r3, #25
    8f14:	d4fb      	bmi.n	8f0e <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    8f16:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8f1a:	4949      	ldr	r1, [pc, #292]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8f1c:	2006      	movs	r0, #6
    8f1e:	f360 0303 	bfi	r3, r0, #0, #4
    8f22:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8f26:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    8f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f2e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    8f32:	684b      	ldr	r3, [r1, #4]
    8f34:	f013 0318 	ands.w	r3, r3, #24
    8f38:	d1fb      	bne.n	8f32 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8f3a:	4842      	ldr	r0, [pc, #264]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8f3c:	4a40      	ldr	r2, [pc, #256]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8f3e:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8f40:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    8f42:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    8f46:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    8f48:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    8f4c:	6a04      	ldr	r4, [r0, #32]
    8f4e:	f044 0420 	orr.w	r4, r4, #32
    8f52:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8f54:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    8f58:	f363 1086 	bfi	r0, r3, #6, #1
    8f5c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    8f60:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    8f64:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d1f9      	bne.n	8f60 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    8f6c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8f70:	4834      	ldr	r0, [pc, #208]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8f72:	4c33      	ldr	r4, [pc, #204]	; (9040 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    8f74:	f363 0103 	bfi	r1, r3, #0, #4
    8f78:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8f7c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    8f80:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8f84:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    8f88:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    8f8a:	69c1      	ldr	r1, [r0, #28]
    8f8c:	f041 0110 	orr.w	r1, r1, #16
    8f90:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8f92:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    8f96:	f363 1186 	bfi	r1, r3, #6, #1
    8f9a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    8f9e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8fa2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d1f9      	bne.n	8f9e <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    8faa:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    8fae:	4a28      	ldr	r2, [pc, #160]	; (9050 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8fb0:	4d24      	ldr	r5, [pc, #144]	; (9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8fb2:	f363 0103 	bfi	r1, r3, #0, #4
    8fb6:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    8fba:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    8fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8fc2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    8fc6:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    8fc8:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8fca:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    8fcc:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    8fce:	f044 0410 	orr.w	r4, r4, #16
    8fd2:	622c      	str	r4, [r5, #32]
    8fd4:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    8fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    8fdc:	f04f 0e01 	mov.w	lr, #1
    8fe0:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    8fe2:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    8fe4:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    8fe6:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    8fe8:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    8fea:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    8fee:	6813      	ldr	r3, [r2, #0]
    8ff0:	f36f 0341 	bfc	r3, #1, #1
    8ff4:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    8ff6:	6913      	ldr	r3, [r2, #16]
    8ff8:	f013 0302 	ands.w	r3, r3, #2
    8ffc:	d1fb      	bne.n	8ff6 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    8ffe:	7910      	ldrb	r0, [r2, #4]
    9000:	f040 0002 	orr.w	r0, r0, #2
    9004:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    9006:	6810      	ldr	r0, [r2, #0]
    9008:	f36e 0083 	bfi	r0, lr, #2, #2
    900c:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    900e:	6810      	ldr	r0, [r2, #0]
    9010:	f367 200a 	bfi	r0, r7, #8, #3
    9014:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    9016:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    9018:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    901a:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    901e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    9022:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    9026:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    9028:	6813      	ldr	r3, [r2, #0]
    902a:	f043 0302 	orr.w	r3, r3, #2
    902e:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9030:	6913      	ldr	r3, [r2, #16]
    9032:	079b      	lsls	r3, r3, #30
    9034:	d4fc      	bmi.n	9030 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    9036:	4561      	cmp	r1, ip
    9038:	d1d7      	bne.n	8fea <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    903a:	b005      	add	sp, #20
    903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    903e:	bf00      	nop
    9040:	40001c00 	.word	0x40001c00
    9044:	40000800 	.word	0x40000800
    9048:	41016000 	.word	0x41016000
    904c:	41018000 	.word	0x41018000
    9050:	00023004 	.word	0x00023004

00009054 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9054:	498b      	ldr	r1, [pc, #556]	; (9284 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    9056:	4a8c      	ldr	r2, [pc, #560]	; (9288 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9058:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    905a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    905e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    9062:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    9066:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9068:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    906a:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    906c:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    9070:	4606      	mov	r6, r0
    InitClocks();
    9072:	f7ff fe81 	bl	8d78 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    9076:	4b85      	ldr	r3, [pc, #532]	; (928c <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    9078:	4985      	ldr	r1, [pc, #532]	; (9290 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    907a:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    907c:	680d      	ldr	r5, [r1, #0]
    907e:	4f85      	ldr	r7, [pc, #532]	; (9294 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    9080:	f364 0241 	bfi	r2, r4, #1, #1
    9084:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    9086:	691a      	ldr	r2, [r3, #16]
    9088:	21a7      	movs	r1, #167	; 0xa7
    908a:	f361 4217 	bfi	r2, r1, #16, #8
    908e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    9090:	691a      	ldr	r2, [r3, #16]
    9092:	f368 0283 	bfi	r2, r8, #2, #2
    9096:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    9098:	691a      	ldr	r2, [r3, #16]
    909a:	2107      	movs	r1, #7
    909c:	f361 220b 	bfi	r2, r1, #8, #4
    90a0:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    90a2:	691a      	ldr	r2, [r3, #16]
    90a4:	f042 0202 	orr.w	r2, r2, #2
    90a8:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    90aa:	4628      	mov	r0, r5
    90ac:	4641      	mov	r1, r8
    90ae:	f008 fc01 	bl	118b4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    90b2:	4879      	ldr	r0, [pc, #484]	; (9298 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    90b4:	2100      	movs	r1, #0
    90b6:	f000 fc9b 	bl	99f0 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    90ba:	4621      	mov	r1, r4
    90bc:	4628      	mov	r0, r5
    90be:	f008 fbf9 	bl	118b4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    90c2:	4b76      	ldr	r3, [pc, #472]	; (929c <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    90c4:	4a76      	ldr	r2, [pc, #472]	; (92a0 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    90c6:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    90ca:	2102      	movs	r1, #2
    90cc:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    90d0:	6810      	ldr	r0, [r2, #0]
    90d2:	f006 fe41 	bl	fd58 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    90d6:	f857 0f04 	ldr.w	r0, [r7, #4]!
    90da:	6803      	ldr	r3, [r0, #0]
    90dc:	b221      	sxth	r1, r4
    90de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    90e0:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    90e2:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    90e4:	2c15      	cmp	r4, #21
    90e6:	d1f6      	bne.n	90d6 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    90e8:	f005 fe54 	bl	ed94 <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    90ec:	4b6d      	ldr	r3, [pc, #436]	; (92a4 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    90ee:	6818      	ldr	r0, [r3, #0]
    90f0:	f001 ff74 	bl	afdc <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    90f4:	486c      	ldr	r0, [pc, #432]	; (92a8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    90f6:	f001 fac9 	bl	a68c <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    90fa:	4b6c      	ldr	r3, [pc, #432]	; (92ac <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    90fc:	6818      	ldr	r0, [r3, #0]
    90fe:	f003 ff61 	bl	cfc4 <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    9102:	4b6b      	ldr	r3, [pc, #428]	; (92b0 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    9104:	6818      	ldr	r0, [r3, #0]
    9106:	f006 f963 	bl	f3d0 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    910a:	4b6a      	ldr	r3, [pc, #424]	; (92b4 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    910c:	6818      	ldr	r0, [r3, #0]
    910e:	f7fd f9ef 	bl	64f0 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    9112:	4869      	ldr	r0, [pc, #420]	; (92b8 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    9114:	f002 fdbc 	bl	bc90 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9118:	4a68      	ldr	r2, [pc, #416]	; (92bc <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    911a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    911e:	f36f 1386 	bfc	r3, #6, #1
    9122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    9126:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    912a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    912e:	2900      	cmp	r1, #0
    9130:	d1f9      	bne.n	9126 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    9132:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    9136:	4c62      	ldr	r4, [pc, #392]	; (92c0 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9138:	4f5b      	ldr	r7, [pc, #364]	; (92a8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    913a:	4b62      	ldr	r3, [pc, #392]	; (92c4 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    913c:	f8df c190 	ldr.w	ip, [pc, #400]	; 92d0 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9140:	f361 0003 	bfi	r0, r1, #0, #4
    9144:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9148:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    914c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9150:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    9154:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    9156:	6961      	ldr	r1, [r4, #20]
    9158:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    915c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9160:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    9164:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9166:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9168:	f8c3 e000 	str.w	lr, [r3]
    916c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    9170:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    9174:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    9178:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    917c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9180:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    9184:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9188:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    918c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9190:	f8c3 9000 	str.w	r9, [r3]
    9194:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9198:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    919c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    91a0:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91a2:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91a6:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91aa:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91ae:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91b2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91b6:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91ba:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91be:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    91c2:	6019      	str	r1, [r3, #0]
    91c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91c8:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91cc:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91ce:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    91d6:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91d8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91dc:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91e0:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91e4:	6019      	str	r1, [r3, #0]
    91e6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91ea:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91ee:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    91f2:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91f4:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    91f8:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    91fa:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91fe:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9202:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    9206:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    920a:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    920e:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9212:	f44f 7880 	mov.w	r8, #256	; 0x100
    9216:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9218:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    921c:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    921e:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9222:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9226:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    922a:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    922c:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9230:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9234:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9236:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    923a:	f8c3 800c 	str.w	r8, [r3, #12]
    923e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9242:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9246:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    924a:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    924e:	f000 fb7f 	bl	9950 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    9252:	b100      	cbz	r0, 9256 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    9254:	e7fe      	b.n	9254 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9256:	4b1c      	ldr	r3, [pc, #112]	; (92c8 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9258:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    925a:	4621      	mov	r1, r4
    925c:	4628      	mov	r0, r5
    925e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    9262:	f008 fb19 	bl	11898 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    9266:	f642 043b 	movw	r4, #10299	; 0x283b
    926a:	f000 fb9d 	bl	99a8 <Microseconds>
    926e:	42a0      	cmp	r0, r4
    9270:	d9fb      	bls.n	926a <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    9272:	4b16      	ldr	r3, [pc, #88]	; (92cc <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    9274:	6818      	ldr	r0, [r3, #0]
    9276:	f000 fcdd 	bl	9c34 <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    927a:	2301      	movs	r3, #1
    927c:	7033      	strb	r3, [r6, #0]
    927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9282:	bf00      	nop
    9284:	e000edf0 	.word	0xe000edf0
    9288:	e0001000 	.word	0xe0001000
    928c:	40001800 	.word	0x40001800
    9290:	20001f28 	.word	0x20001f28
    9294:	00023024 	.word	0x00023024
    9298:	0001d4c0 	.word	0x0001d4c0
    929c:	41008000 	.word	0x41008000
    92a0:	20001f18 	.word	0x20001f18
    92a4:	20001c0c 	.word	0x20001c0c
    92a8:	200019e0 	.word	0x200019e0
    92ac:	20001e0c 	.word	0x20001e0c
    92b0:	20001f0c 	.word	0x20001f0c
    92b4:	20000ae0 	.word	0x20000ae0
    92b8:	20001af8 	.word	0x20001af8
    92bc:	40001c00 	.word	0x40001c00
    92c0:	40000800 	.word	0x40000800
    92c4:	e000e100 	.word	0xe000e100
    92c8:	e000ed00 	.word	0xe000ed00
    92cc:	20001c00 	.word	0x20001c00
    92d0:	20001bf4 	.word	0x20001bf4

000092d4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    92d4:	b672      	cpsid	i
    92d6:	4a09      	ldr	r2, [pc, #36]	; (92fc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    92d8:	4b09      	ldr	r3, [pc, #36]	; (9300 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    92da:	2901      	cmp	r1, #1
    92dc:	bf18      	it	ne
    92de:	2300      	movne	r3, #0
    92e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    92e2:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    92e6:	4907      	ldr	r1, [pc, #28]	; (9304 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    92e8:	4b07      	ldr	r3, [pc, #28]	; (9308 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    92ea:	68ca      	ldr	r2, [r1, #12]
    92ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    92f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    92f2:	60cb      	str	r3, [r1, #12]
    92f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    92f8:	bf00      	nop
    92fa:	e7fd      	b.n	92f8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    92fc:	2002fffc 	.word	0x2002fffc
    9300:	f01669ef 	.word	0xf01669ef
    9304:	e000ed00 	.word	0xe000ed00
    9308:	05fa0004 	.word	0x05fa0004

0000930c <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    930c:	4b01      	ldr	r3, [pc, #4]	; (9314 <GMAC_Handler+0x8>)
    930e:	6818      	ldr	r0, [r3, #0]
    9310:	f001 b908 	b.w	a524 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    9314:	20001c00 	.word	0x20001c00

00009318 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9318:	4801      	ldr	r0, [pc, #4]	; (9320 <SERCOM0_0_Handler+0x8>)
    931a:	f007 bf53 	b.w	111c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    931e:	bf00      	nop
    9320:	200015f8 	.word	0x200015f8

00009324 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    9324:	4801      	ldr	r0, [pc, #4]	; (932c <SERCOM0_2_Handler+0x8>)
    9326:	f007 bf75 	b.w	11214 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    932a:	bf00      	nop
    932c:	200015f8 	.word	0x200015f8

00009330 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9330:	4801      	ldr	r0, [pc, #4]	; (9338 <SERCOM0_3_Handler+0x8>)
    9332:	f007 bfab 	b.w	1128c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9336:	bf00      	nop
    9338:	200015f8 	.word	0x200015f8

0000933c <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    933c:	4801      	ldr	r0, [pc, #4]	; (9344 <SERCOM2_0_Handler+0x8>)
    933e:	f007 bf41 	b.w	111c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9342:	bf00      	nop
    9344:	20001750 	.word	0x20001750

00009348 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9348:	4801      	ldr	r0, [pc, #4]	; (9350 <SERCOM2_2_Handler+0x8>)
    934a:	f007 bf63 	b.w	11214 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    934e:	bf00      	nop
    9350:	20001750 	.word	0x20001750

00009354 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    9354:	4801      	ldr	r0, [pc, #4]	; (935c <SERCOM2_3_Handler+0x8>)
    9356:	f007 bf99 	b.w	1128c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    935a:	bf00      	nop
    935c:	20001750 	.word	0x20001750

00009360 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9360:	4801      	ldr	r0, [pc, #4]	; (9368 <SERCOM7_0_Handler+0x8>)
    9362:	f007 bf2f 	b.w	111c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9366:	bf00      	nop
    9368:	200014a0 	.word	0x200014a0

0000936c <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    936c:	4801      	ldr	r0, [pc, #4]	; (9374 <SERCOM7_2_Handler+0x8>)
    936e:	f007 bf51 	b.w	11214 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9372:	bf00      	nop
    9374:	200014a0 	.word	0x200014a0

00009378 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    9378:	4801      	ldr	r0, [pc, #4]	; (9380 <SERCOM7_3_Handler+0x8>)
    937a:	f007 bf87 	b.w	1128c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    937e:	bf00      	nop
    9380:	200014a0 	.word	0x200014a0

00009384 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    9384:	4b02      	ldr	r3, [pc, #8]	; (9390 <EIC_0_Handler+0xc>)
    9386:	2100      	movs	r1, #0
    9388:	6818      	ldr	r0, [r3, #0]
    938a:	f006 bd2d 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    938e:	bf00      	nop
    9390:	20001f18 	.word	0x20001f18

00009394 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    9394:	4b02      	ldr	r3, [pc, #8]	; (93a0 <EIC_1_Handler+0xc>)
    9396:	2101      	movs	r1, #1
    9398:	6818      	ldr	r0, [r3, #0]
    939a:	f006 bd25 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    939e:	bf00      	nop
    93a0:	20001f18 	.word	0x20001f18

000093a4 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    93a4:	4b02      	ldr	r3, [pc, #8]	; (93b0 <EIC_2_Handler+0xc>)
    93a6:	2102      	movs	r1, #2
    93a8:	6818      	ldr	r0, [r3, #0]
    93aa:	f006 bd1d 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93ae:	bf00      	nop
    93b0:	20001f18 	.word	0x20001f18

000093b4 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    93b4:	4b02      	ldr	r3, [pc, #8]	; (93c0 <EIC_3_Handler+0xc>)
    93b6:	2103      	movs	r1, #3
    93b8:	6818      	ldr	r0, [r3, #0]
    93ba:	f006 bd15 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93be:	bf00      	nop
    93c0:	20001f18 	.word	0x20001f18

000093c4 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    93c4:	4b02      	ldr	r3, [pc, #8]	; (93d0 <EIC_4_Handler+0xc>)
    93c6:	2104      	movs	r1, #4
    93c8:	6818      	ldr	r0, [r3, #0]
    93ca:	f006 bd0d 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93ce:	bf00      	nop
    93d0:	20001f18 	.word	0x20001f18

000093d4 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    93d4:	4b02      	ldr	r3, [pc, #8]	; (93e0 <EIC_5_Handler+0xc>)
    93d6:	2105      	movs	r1, #5
    93d8:	6818      	ldr	r0, [r3, #0]
    93da:	f006 bd05 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93de:	bf00      	nop
    93e0:	20001f18 	.word	0x20001f18

000093e4 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    93e4:	4b02      	ldr	r3, [pc, #8]	; (93f0 <EIC_6_Handler+0xc>)
    93e6:	2106      	movs	r1, #6
    93e8:	6818      	ldr	r0, [r3, #0]
    93ea:	f006 bcfd 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93ee:	bf00      	nop
    93f0:	20001f18 	.word	0x20001f18

000093f4 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    93f4:	4b02      	ldr	r3, [pc, #8]	; (9400 <EIC_7_Handler+0xc>)
    93f6:	2107      	movs	r1, #7
    93f8:	6818      	ldr	r0, [r3, #0]
    93fa:	f006 bcf5 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    93fe:	bf00      	nop
    9400:	20001f18 	.word	0x20001f18

00009404 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    9404:	4b02      	ldr	r3, [pc, #8]	; (9410 <EIC_8_Handler+0xc>)
    9406:	2108      	movs	r1, #8
    9408:	6818      	ldr	r0, [r3, #0]
    940a:	f006 bced 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    940e:	bf00      	nop
    9410:	20001f18 	.word	0x20001f18

00009414 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    9414:	4b02      	ldr	r3, [pc, #8]	; (9420 <EIC_9_Handler+0xc>)
    9416:	2109      	movs	r1, #9
    9418:	6818      	ldr	r0, [r3, #0]
    941a:	f006 bce5 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    941e:	bf00      	nop
    9420:	20001f18 	.word	0x20001f18

00009424 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    9424:	4b02      	ldr	r3, [pc, #8]	; (9430 <EIC_10_Handler+0xc>)
    9426:	210a      	movs	r1, #10
    9428:	6818      	ldr	r0, [r3, #0]
    942a:	f006 bcdd 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    942e:	bf00      	nop
    9430:	20001f18 	.word	0x20001f18

00009434 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    9434:	4b02      	ldr	r3, [pc, #8]	; (9440 <EIC_11_Handler+0xc>)
    9436:	210b      	movs	r1, #11
    9438:	6818      	ldr	r0, [r3, #0]
    943a:	f006 bcd5 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    943e:	bf00      	nop
    9440:	20001f18 	.word	0x20001f18

00009444 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    9444:	4b01      	ldr	r3, [pc, #4]	; (944c <EIC_12_Handler+0x8>)
    9446:	6818      	ldr	r0, [r3, #0]
    9448:	f000 beb0 	b.w	a1ac <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    944c:	20001c00 	.word	0x20001c00

00009450 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9450:	4b02      	ldr	r3, [pc, #8]	; (945c <EIC_13_Handler+0xc>)
    9452:	210d      	movs	r1, #13
    9454:	6818      	ldr	r0, [r3, #0]
    9456:	f006 bcc7 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    945a:	bf00      	nop
    945c:	20001f18 	.word	0x20001f18

00009460 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9460:	4b02      	ldr	r3, [pc, #8]	; (946c <EIC_14_Handler+0xc>)
    9462:	210e      	movs	r1, #14
    9464:	6818      	ldr	r0, [r3, #0]
    9466:	f006 bcbf 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    946a:	bf00      	nop
    946c:	20001f18 	.word	0x20001f18

00009470 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9470:	4b02      	ldr	r3, [pc, #8]	; (947c <EIC_15_Handler+0xc>)
    9472:	210f      	movs	r1, #15
    9474:	6818      	ldr	r0, [r3, #0]
    9476:	f006 bcb7 	b.w	fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    947a:	bf00      	nop
    947c:	20001f18 	.word	0x20001f18

00009480 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9480:	4b02      	ldr	r3, [pc, #8]	; (948c <TCC3_0_Handler+0xc>)
    9482:	4a03      	ldr	r2, [pc, #12]	; (9490 <TCC3_0_Handler+0x10>)
    9484:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    9486:	4803      	ldr	r0, [pc, #12]	; (9494 <TCC3_0_Handler+0x14>)
    9488:	f005 ba0e 	b.w	e8a8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    948c:	42001000 	.word	0x42001000
    9490:	003ffc0f 	.word	0x003ffc0f
    9494:	20001400 	.word	0x20001400

00009498 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    9498:	4b02      	ldr	r3, [pc, #8]	; (94a4 <TCC4_0_Handler+0xc>)
    949a:	4a03      	ldr	r2, [pc, #12]	; (94a8 <TCC4_0_Handler+0x10>)
    949c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    949e:	4803      	ldr	r0, [pc, #12]	; (94ac <TCC4_0_Handler+0x14>)
    94a0:	f005 ba02 	b.w	e8a8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    94a4:	43001000 	.word	0x43001000
    94a8:	003ffc0f 	.word	0x003ffc0f
    94ac:	2000137c 	.word	0x2000137c

000094b0 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    94b0:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    94b2:	4b0d      	ldr	r3, [pc, #52]	; (94e8 <SysTick_Handler+0x38>)
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	b103      	cbz	r3, 94ba <SysTick_Handler+0xa>
    94b8:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    94ba:	4b0c      	ldr	r3, [pc, #48]	; (94ec <SysTick_Handler+0x3c>)
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	2b00      	cmp	r3, #0
    94c0:	d0fa      	beq.n	94b8 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    94c2:	4b0b      	ldr	r3, [pc, #44]	; (94f0 <SysTick_Handler+0x40>)
    94c4:	6818      	ldr	r0, [r3, #0]
    94c6:	f006 fad9 	bl	fa7c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    94ca:	480a      	ldr	r0, [pc, #40]	; (94f4 <SysTick_Handler+0x44>)
    94cc:	f7fb fd2c 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    94d0:	4809      	ldr	r0, [pc, #36]	; (94f8 <SysTick_Handler+0x48>)
    94d2:	f7fb fd29 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    94d6:	4809      	ldr	r0, [pc, #36]	; (94fc <SysTick_Handler+0x4c>)
    94d8:	f7fb fd26 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    94dc:	4808      	ldr	r0, [pc, #32]	; (9500 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    94de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    94e2:	f7fb bd21 	b.w	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    94e6:	bf00      	nop
    94e8:	20001090 	.word	0x20001090
    94ec:	200019dc 	.word	0x200019dc
    94f0:	20001f0c 	.word	0x20001f0c
    94f4:	20000b70 	.word	0x20000b70
    94f8:	20000cb8 	.word	0x20000cb8
    94fc:	20000e00 	.word	0x20000e00
    9500:	20000f48 	.word	0x20000f48

00009504 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    9504:	4a30      	ldr	r2, [pc, #192]	; (95c8 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    9506:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    950a:	4b30      	ldr	r3, [pc, #192]	; (95cc <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    950c:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    950e:	4a30      	ldr	r2, [pc, #192]	; (95d0 <TCC0_0_Handler+0xcc>)
    9510:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    9512:	4630      	mov	r0, r6
    9514:	f000 f9ca 	bl	98ac <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9518:	4b2e      	ldr	r3, [pc, #184]	; (95d4 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    951a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9610 <TCC0_0_Handler+0x10c>
    951e:	f8d3 9000 	ldr.w	r9, [r3]
    9522:	4648      	mov	r0, r9
    9524:	f005 ffc8 	bl	f4b8 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9528:	4b2b      	ldr	r3, [pc, #172]	; (95d8 <TCC0_0_Handler+0xd4>)
    952a:	6818      	ldr	r0, [r3, #0]
    952c:	f003 ff04 	bl	d338 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9530:	4b2a      	ldr	r3, [pc, #168]	; (95dc <TCC0_0_Handler+0xd8>)
    9532:	6818      	ldr	r0, [r3, #0]
    9534:	f008 fa54 	bl	119e0 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9538:	4b29      	ldr	r3, [pc, #164]	; (95e0 <TCC0_0_Handler+0xdc>)
    953a:	6818      	ldr	r0, [r3, #0]
    953c:	f7fd fe22 	bl	7184 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9540:	4b28      	ldr	r3, [pc, #160]	; (95e4 <TCC0_0_Handler+0xe0>)
    9542:	681f      	ldr	r7, [r3, #0]
    9544:	4638      	mov	r0, r7
    9546:	f006 fc7d 	bl	fe44 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    954a:	f898 3000 	ldrb.w	r3, [r8]
    954e:	b15b      	cbz	r3, 9568 <TCC0_0_Handler+0x64>
    9550:	4c25      	ldr	r4, [pc, #148]	; (95e8 <TCC0_0_Handler+0xe4>)
    9552:	4826      	ldr	r0, [pc, #152]	; (95ec <TCC0_0_Handler+0xe8>)
    9554:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9558:	e001      	b.n	955e <TCC0_0_Handler+0x5a>
    955a:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    955e:	6803      	ldr	r3, [r0, #0]
    9560:	6a1b      	ldr	r3, [r3, #32]
    9562:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9564:	42ac      	cmp	r4, r5
    9566:	d1f8      	bne.n	955a <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9568:	4638      	mov	r0, r7
    956a:	f006 fc7f 	bl	fe6c <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    956e:	4820      	ldr	r0, [pc, #128]	; (95f0 <TCC0_0_Handler+0xec>)
    9570:	f002 fbbc 	bl	bcec <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    9574:	481f      	ldr	r0, [pc, #124]	; (95f4 <TCC0_0_Handler+0xf0>)
    9576:	f001 f95b 	bl	a830 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    957a:	4630      	mov	r0, r6
    957c:	f000 f9ac 	bl	98d8 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9580:	4a1d      	ldr	r2, [pc, #116]	; (95f8 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    9582:	491e      	ldr	r1, [pc, #120]	; (95fc <TCC0_0_Handler+0xf8>)
    tickCnt++;
    9584:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    9586:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9588:	3301      	adds	r3, #1
    958a:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    958c:	b111      	cbz	r1, 9594 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    958e:	f898 3000 	ldrb.w	r3, [r8]
    9592:	b923      	cbnz	r3, 959e <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    9594:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    9596:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    959a:	f000 b98d 	b.w	98b8 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    959e:	4648      	mov	r0, r9
    95a0:	f006 fa6c 	bl	fa7c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    95a4:	4816      	ldr	r0, [pc, #88]	; (9600 <TCC0_0_Handler+0xfc>)
    95a6:	f7fb fcbf 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    95aa:	4816      	ldr	r0, [pc, #88]	; (9604 <TCC0_0_Handler+0x100>)
    95ac:	f7fb fcbc 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    95b0:	4815      	ldr	r0, [pc, #84]	; (9608 <TCC0_0_Handler+0x104>)
    95b2:	f7fb fcb9 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    95b6:	4815      	ldr	r0, [pc, #84]	; (960c <TCC0_0_Handler+0x108>)
    95b8:	f7fb fcb6 	bl	4f28 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    95bc:	4630      	mov	r0, r6
}
    95be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    95c2:	f000 b979 	b.w	98b8 <_ZN9ClearCore9SysTiming6IsrEndEv>
    95c6:	bf00      	nop
    95c8:	20001bf4 	.word	0x20001bf4
    95cc:	41016000 	.word	0x41016000
    95d0:	003ffc0f 	.word	0x003ffc0f
    95d4:	20001f0c 	.word	0x20001f0c
    95d8:	20001e0c 	.word	0x20001e0c
    95dc:	20001f28 	.word	0x20001f28
    95e0:	20000ae0 	.word	0x20000ae0
    95e4:	20001f18 	.word	0x20001f18
    95e8:	00023028 	.word	0x00023028
    95ec:	200011f0 	.word	0x200011f0
    95f0:	20001af8 	.word	0x20001af8
    95f4:	200019e0 	.word	0x200019e0
    95f8:	20001bf0 	.word	0x20001bf0
    95fc:	20001090 	.word	0x20001090
    9600:	20000b70 	.word	0x20000b70
    9604:	20000cb8 	.word	0x20000cb8
    9608:	20000e00 	.word	0x20000e00
    960c:	20000f48 	.word	0x20000f48
    9610:	200019dc 	.word	0x200019dc

00009614 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    9614:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    9616:	4813      	ldr	r0, [pc, #76]	; (9664 <Reset_Handler+0x50>)
    9618:	4b13      	ldr	r3, [pc, #76]	; (9668 <Reset_Handler+0x54>)
    961a:	4298      	cmp	r0, r3
    961c:	d00b      	beq.n	9636 <Reset_Handler+0x22>
    961e:	4913      	ldr	r1, [pc, #76]	; (966c <Reset_Handler+0x58>)
    9620:	4281      	cmp	r1, r0
    9622:	d008      	beq.n	9636 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    9624:	4298      	cmp	r0, r3
    9626:	d206      	bcs.n	9636 <Reset_Handler+0x22>
            *pDest = *pSrc;
    9628:	43c2      	mvns	r2, r0
    962a:	441a      	add	r2, r3
    962c:	f022 0203 	bic.w	r2, r2, #3
    9630:	3204      	adds	r2, #4
    9632:	f014 fefd 	bl	1e430 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    9636:	480e      	ldr	r0, [pc, #56]	; (9670 <Reset_Handler+0x5c>)
    9638:	4b0e      	ldr	r3, [pc, #56]	; (9674 <Reset_Handler+0x60>)
    963a:	4298      	cmp	r0, r3
    963c:	d008      	beq.n	9650 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    963e:	d207      	bcs.n	9650 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9640:	43c2      	mvns	r2, r0
    9642:	441a      	add	r2, r3
    9644:	f022 0203 	bic.w	r2, r2, #3
    9648:	3204      	adds	r2, #4
    964a:	2100      	movs	r1, #0
    964c:	f014 ffee 	bl	1e62c <memset>
        }
    }

    SystemInit();
    9650:	f002 f97a 	bl	b948 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    9654:	f014 fb46 	bl	1dce4 <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9658:	4807      	ldr	r0, [pc, #28]	; (9678 <Reset_Handler+0x64>)
    965a:	f7ff fcfb 	bl	9054 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    965e:	f7fb f8c3 	bl	47e8 <main>
    9662:	e7fe      	b.n	9662 <Reset_Handler+0x4e>
    9664:	20000000 	.word	0x20000000
    9668:	20000ac0 	.word	0x20000ac0
    966c:	0002536c 	.word	0x0002536c
    9670:	20000ac0 	.word	0x20000ac0
    9674:	200023b0 	.word	0x200023b0
    9678:	200019dc 	.word	0x200019dc

0000967c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    9680:	4852      	ldr	r0, [pc, #328]	; (97cc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    9682:	4d53      	ldr	r5, [pc, #332]	; (97d0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    9684:	4c53      	ldr	r4, [pc, #332]	; (97d4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    9686:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 9844 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    968a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9848 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    968e:	4f52      	ldr	r7, [pc, #328]	; (97d8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    9690:	f002 fad4 	bl	bc3c <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    9694:	4b51      	ldr	r3, [pc, #324]	; (97dc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    9696:	4a52      	ldr	r2, [pc, #328]	; (97e0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    9698:	4852      	ldr	r0, [pc, #328]	; (97e4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    969a:	601a      	str	r2, [r3, #0]
    969c:	2600      	movs	r6, #0
    969e:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    96a2:	f000 ff61 	bl	a568 <_ZN9ClearCore13ShiftRegisterC1Ev>
    96a6:	4b50      	ldr	r3, [pc, #320]	; (97e8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    96a8:	4a50      	ldr	r2, [pc, #320]	; (97ec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    96aa:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    96ae:	4628      	mov	r0, r5
    96b0:	601a      	str	r2, [r3, #0]
    96b2:	f004 ffb3 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    96b6:	4b4e      	ldr	r3, [pc, #312]	; (97f0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    96b8:	602b      	str	r3, [r5, #0]
    96ba:	4620      	mov	r0, r4
    96bc:	f004 ffae 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    96c0:	4b4c      	ldr	r3, [pc, #304]	; (97f4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    96c2:	6023      	str	r3, [r4, #0]
    96c4:	4648      	mov	r0, r9
    96c6:	f004 ffa9 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    96ca:	4c4b      	ldr	r4, [pc, #300]	; (97f8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    96cc:	4d4b      	ldr	r5, [pc, #300]	; (97fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    96ce:	f8c9 4000 	str.w	r4, [r9]
    96d2:	4640      	mov	r0, r8
    96d4:	f004 ffa2 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    96d8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 984c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    96dc:	f8c8 4000 	str.w	r4, [r8]
    96e0:	4638      	mov	r0, r7
    96e2:	f004 ff9b 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    96e6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9850 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    96ea:	603c      	str	r4, [r7, #0]
    96ec:	4628      	mov	r0, r5
    96ee:	f004 ff95 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    96f2:	4c43      	ldr	r4, [pc, #268]	; (9800 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    96f4:	4f43      	ldr	r7, [pc, #268]	; (9804 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    96f6:	602c      	str	r4, [r5, #0]
    96f8:	4648      	mov	r0, r9
    96fa:	f004 ff8f 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    96fe:	4d42      	ldr	r5, [pc, #264]	; (9808 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    9700:	f8c9 4000 	str.w	r4, [r9]
    9704:	4640      	mov	r0, r8
    9706:	f004 ff89 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    970a:	4c40      	ldr	r4, [pc, #256]	; (980c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    970c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9854 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    9710:	f8c8 4000 	str.w	r4, [r8]
    9714:	4638      	mov	r0, r7
    9716:	f004 ff81 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    971a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9858 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    971e:	603c      	str	r4, [r7, #0]
    9720:	4628      	mov	r0, r5
    9722:	f004 ff7b 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    9726:	4f3a      	ldr	r7, [pc, #232]	; (9810 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9728:	602c      	str	r4, [r5, #0]
    972a:	4648      	mov	r0, r9
    972c:	f004 ff76 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9730:	4c38      	ldr	r4, [pc, #224]	; (9814 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    9732:	4d39      	ldr	r5, [pc, #228]	; (9818 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    9734:	f8c9 4000 	str.w	r4, [r9]
    9738:	4640      	mov	r0, r8
    973a:	f004 ff6f 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    973e:	4638      	mov	r0, r7
    9740:	f8c8 4000 	str.w	r4, [r8]
    9744:	f004 ff6a 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    9748:	4628      	mov	r0, r5
    974a:	603c      	str	r4, [r7, #0]
    974c:	f004 ff66 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9750:	4832      	ldr	r0, [pc, #200]	; (981c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    9752:	602c      	str	r4, [r5, #0]
    9754:	f7fd ff1e 	bl	7594 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9758:	4831      	ldr	r0, [pc, #196]	; (9820 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    975a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 985c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    975e:	4d31      	ldr	r5, [pc, #196]	; (9824 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9760:	4c31      	ldr	r4, [pc, #196]	; (9828 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    9762:	4f32      	ldr	r7, [pc, #200]	; (982c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    9764:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9860 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    9768:	f7fd ff14 	bl	7594 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    976c:	4830      	ldr	r0, [pc, #192]	; (9830 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    976e:	f7fd ff11 	bl	7594 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    9772:	4830      	ldr	r0, [pc, #192]	; (9834 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    9774:	f7fd ff0e 	bl	7594 <_ZN9ClearCore11MotorDriverC1Ev>
    9778:	4640      	mov	r0, r8
    977a:	4b2f      	ldr	r3, [pc, #188]	; (9838 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    977c:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    9780:	f004 ff4c 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    9784:	4b2d      	ldr	r3, [pc, #180]	; (983c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    9786:	f8c8 3000 	str.w	r3, [r8]
    978a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    978e:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    9790:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    9794:	f8c5 9000 	str.w	r9, [r5]
    9798:	f8c8 3004 	str.w	r3, [r8, #4]
    979c:	f004 ff3e 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    97a0:	f107 0874 	add.w	r8, r7, #116	; 0x74
    97a4:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    97a8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    97ac:	f8c4 9000 	str.w	r9, [r4]
    97b0:	602f      	str	r7, [r5, #0]
    97b2:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    97b6:	f004 ff31 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    97ba:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    97be:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    97c0:	481f      	ldr	r0, [pc, #124]	; (9840 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    97c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    97c6:	f7fd bf07 	b.w	75d8 <_ZN9ClearCore10SysManagerC1Ev>
    97ca:	bf00      	nop
    97cc:	20001af8 	.word	0x20001af8
    97d0:	20001484 	.word	0x20001484
    97d4:	200011f0 	.word	0x200011f0
    97d8:	2000131c 	.word	0x2000131c
    97dc:	20001894 	.word	0x20001894
    97e0:	00022f6c 	.word	0x00022f6c
    97e4:	200019e0 	.word	0x200019e0
    97e8:	20001750 	.word	0x20001750
    97ec:	00022fbc 	.word	0x00022fbc
    97f0:	0002376c 	.word	0x0002376c
    97f4:	000234d4 	.word	0x000234d4
    97f8:	00023534 	.word	0x00023534
    97fc:	2000137c 	.word	0x2000137c
    9800:	000235e4 	.word	0x000235e4
    9804:	20001190 	.word	0x20001190
    9808:	200011c0 	.word	0x200011c0
    980c:	000235b4 	.word	0x000235b4
    9810:	200010d8 	.word	0x200010d8
    9814:	00023504 	.word	0x00023504
    9818:	2000111c 	.word	0x2000111c
    981c:	20000b70 	.word	0x20000b70
    9820:	20000cb8 	.word	0x20000cb8
    9824:	200014a0 	.word	0x200014a0
    9828:	200015f8 	.word	0x200015f8
    982c:	000236c8 	.word	0x000236c8
    9830:	20000e00 	.word	0x20000e00
    9834:	20000f48 	.word	0x20000f48
    9838:	00022e68 	.word	0x00022e68
    983c:	00022eb8 	.word	0x00022eb8
    9840:	200019dc 	.word	0x200019dc
    9844:	2000125c 	.word	0x2000125c
    9848:	200012bc 	.word	0x200012bc
    984c:	20001400 	.word	0x20001400
    9850:	20001160 	.word	0x20001160
    9854:	20000b28 	.word	0x20000b28
    9858:	20001094 	.word	0x20001094
    985c:	20001490 	.word	0x20001490
    9860:	00023658 	.word	0x00023658

00009864 <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    9864:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    9866:	4d0f      	ldr	r5, [pc, #60]	; (98a4 <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9868:	682c      	ldr	r4, [r5, #0]
    986a:	f014 0401 	ands.w	r4, r4, #1
    986e:	d002      	beq.n	9876 <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9870:	4b0d      	ldr	r3, [pc, #52]	; (98a8 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    9872:	6818      	ldr	r0, [r3, #0]
    9874:	bd70      	pop	{r4, r5, r6, pc}
    9876:	2030      	movs	r0, #48	; 0x30
    9878:	f009 fe36 	bl	134e8 <_Znwj>
    987c:	4a0a      	ldr	r2, [pc, #40]	; (98a8 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    987e:	6004      	str	r4, [r0, #0]
    9880:	2105      	movs	r1, #5
    9882:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    9886:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9888:	7501      	strb	r1, [r0, #20]
    988a:	6084      	str	r4, [r0, #8]
    988c:	60c4      	str	r4, [r0, #12]
    988e:	6104      	str	r4, [r0, #16]
    9890:	6184      	str	r4, [r0, #24]
    9892:	61c4      	str	r4, [r0, #28]
    9894:	6204      	str	r4, [r0, #32]
    9896:	6244      	str	r4, [r0, #36]	; 0x24
    9898:	6284      	str	r4, [r0, #40]	; 0x28
    989a:	62c4      	str	r4, [r0, #44]	; 0x2c
    989c:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    989e:	6010      	str	r0, [r2, #0]
    98a0:	602b      	str	r3, [r5, #0]
    return *instance;
}
    98a2:	bd70      	pop	{r4, r5, r6, pc}
    98a4:	20001bec 	.word	0x20001bec
    98a8:	20001bf8 	.word	0x20001bf8

000098ac <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    98ac:	4b01      	ldr	r3, [pc, #4]	; (98b4 <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    98ae:	685b      	ldr	r3, [r3, #4]
    98b0:	6003      	str	r3, [r0, #0]
    98b2:	4770      	bx	lr
    98b4:	e0001000 	.word	0xe0001000

000098b8 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    98b8:	4b06      	ldr	r3, [pc, #24]	; (98d4 <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    98ba:	6801      	ldr	r1, [r0, #0]
    98bc:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    98be:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    98c0:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    98c2:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    98c4:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    98c6:	bf38      	it	cc
    98c8:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    98ca:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    98cc:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    98ce:	bf88      	it	hi
    98d0:	6083      	strhi	r3, [r0, #8]
    98d2:	4770      	bx	lr
    98d4:	e0001000 	.word	0xe0001000

000098d8 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    98d8:	4a1c      	ldr	r2, [pc, #112]	; (994c <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    98da:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    98dc:	68d3      	ldr	r3, [r2, #12]
    98de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    98e2:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    98e4:	7d03      	ldrb	r3, [r0, #20]
    98e6:	3b01      	subs	r3, #1
    98e8:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    98ea:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    98ec:	7503      	strb	r3, [r0, #20]
    98ee:	b923      	cbnz	r3, 98fa <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    98f0:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    98f2:	2205      	movs	r2, #5
        m_msTickCnt++;
    98f4:	3301      	adds	r3, #1
    98f6:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    98f8:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    98fa:	6825      	ldr	r5, [r4, #0]
    98fc:	69a3      	ldr	r3, [r4, #24]
    98fe:	406b      	eors	r3, r5
    9900:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    9904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9908:	d001      	beq.n	990e <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    990a:	61a5      	str	r5, [r4, #24]
    990c:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    990e:	2d00      	cmp	r5, #0
    9910:	db08      	blt.n	9924 <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    9912:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    9916:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9918:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    991a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    991e:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9920:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    9922:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    9924:	69e1      	ldr	r1, [r4, #28]
    9926:	3101      	adds	r1, #1
    9928:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    992a:	2278      	movs	r2, #120	; 0x78
    992c:	2300      	movs	r3, #0
    992e:	2000      	movs	r0, #0
    9930:	f012 fe38 	bl	1c5a4 <__aeabi_uldivmod>
    9934:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    9936:	b128      	cbz	r0, 9944 <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9938:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    993c:	00c3      	lsls	r3, r0, #3
    993e:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9940:	62e3      	str	r3, [r4, #44]	; 0x2c
    9942:	e7e2      	b.n	990a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    9944:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    9946:	62e0      	str	r0, [r4, #44]	; 0x2c
    9948:	e7df      	b.n	990a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    994a:	bf00      	nop
    994c:	e000edf0 	.word	0xe000edf0

00009950 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9950:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    9954:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    9956:	29c7      	cmp	r1, #199	; 0xc7
    9958:	4a0d      	ldr	r2, [pc, #52]	; (9990 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    995a:	f103 33ff 	add.w	r3, r3, #4294967295
    995e:	bf8c      	ite	hi
    9960:	2100      	movhi	r1, #0
    9962:	2101      	movls	r1, #1
    9964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9968:	7011      	strb	r1, [r2, #0]
    996a:	d20e      	bcs.n	998a <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    996c:	4a09      	ldr	r2, [pc, #36]	; (9994 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    996e:	480a      	ldr	r0, [pc, #40]	; (9998 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9970:	b410      	push	{r4}
    9972:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9976:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9978:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    997c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    997e:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9980:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9982:	6011      	str	r1, [r2, #0]
}
    9984:	f85d 4b04 	ldr.w	r4, [sp], #4
    9988:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    998a:	2001      	movs	r0, #1
    998c:	4770      	bx	lr
    998e:	bf00      	nop
    9990:	20001090 	.word	0x20001090
    9994:	e000e010 	.word	0xe000e010
    9998:	e000ed00 	.word	0xe000ed00

0000999c <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    999c:	4b01      	ldr	r3, [pc, #4]	; (99a4 <Milliseconds+0x8>)
    999e:	681b      	ldr	r3, [r3, #0]
    99a0:	6918      	ldr	r0, [r3, #16]
}
    99a2:	4770      	bx	lr
    99a4:	20001bf4 	.word	0x20001bf4

000099a8 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    99a8:	4b0e      	ldr	r3, [pc, #56]	; (99e4 <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    99aa:	4a0f      	ldr	r2, [pc, #60]	; (99e8 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    99ac:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    99ae:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    99b0:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    99b2:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    99b4:	db0a      	blt.n	99cc <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    99b6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    99b8:	490c      	ldr	r1, [pc, #48]	; (99ec <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    99ba:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    99bc:	4423      	add	r3, r4
    99be:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    99c2:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    99c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    99ca:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    99cc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    99ce:	4907      	ldr	r1, [pc, #28]	; (99ec <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    99d0:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    99d2:	1b1b      	subs	r3, r3, r4
    99d4:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    99d8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    99dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    99e0:	4770      	bx	lr
    99e2:	bf00      	nop
    99e4:	e0001000 	.word	0xe0001000
    99e8:	20001bf4 	.word	0x20001bf4
    99ec:	88888889 	.word	0x88888889

000099f0 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    99f0:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    99f2:	4e0d      	ldr	r6, [pc, #52]	; (9a28 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    99f4:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    99f8:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    99fa:	d013      	beq.n	9a24 <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    99fc:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    99fe:	2500      	movs	r5, #0
    9a00:	1b1c      	subs	r4, r3, r4
    9a02:	428d      	cmp	r5, r1
    9a04:	bf08      	it	eq
    9a06:	4284      	cmpeq	r4, r0
    9a08:	d20c      	bcs.n	9a24 <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    9a0a:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9a0c:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9a0e:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9a12:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9a16:	2500      	movs	r5, #0
    9a18:	461c      	mov	r4, r3
    9a1a:	428d      	cmp	r5, r1
    9a1c:	bf08      	it	eq
    9a1e:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9a20:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9a22:	d3f2      	bcc.n	9a0a <Delay_cycles+0x1a>
    }
}
    9a24:	bc70      	pop	{r4, r5, r6}
    9a26:	4770      	bx	lr
    9a28:	e0001000 	.word	0xe0001000

00009a2c <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9a2c:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9a2e:	f7ff ff19 	bl	9864 <_ZN9ClearCore9SysTiming8InstanceEv>
    9a32:	4b01      	ldr	r3, [pc, #4]	; (9a38 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    9a34:	6018      	str	r0, [r3, #0]
    9a36:	bd08      	pop	{r3, pc}
    9a38:	20001bf4 	.word	0x20001bf4

00009a3c <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9a3e:	4e37      	ldr	r6, [pc, #220]	; (9b1c <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9a40:	6835      	ldr	r5, [r6, #0]
    9a42:	f015 0501 	ands.w	r5, r5, #1
    9a46:	d002      	beq.n	9a4e <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9a48:	4b35      	ldr	r3, [pc, #212]	; (9b20 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9a4a:	6818      	ldr	r0, [r3, #0]
    9a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a4e:	f641 10c4 	movw	r0, #6596	; 0x19c4
    9a52:	f009 fd49 	bl	134e8 <_Znwj>
    9a56:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9a58:	2711      	movs	r7, #17
    9a5a:	2312      	movs	r3, #18
    9a5c:	6067      	str	r7, [r4, #4]
    9a5e:	60e3      	str	r3, [r4, #12]
    9a60:	2213      	movs	r2, #19
    9a62:	210d      	movs	r1, #13
    9a64:	2714      	movs	r7, #20
    9a66:	230b      	movs	r3, #11
    9a68:	6162      	str	r2, [r4, #20]
    9a6a:	61e1      	str	r1, [r4, #28]
    9a6c:	6367      	str	r7, [r4, #52]	; 0x34
    9a6e:	6463      	str	r3, [r4, #68]	; 0x44
    9a70:	270c      	movs	r7, #12
    9a72:	2302      	movs	r3, #2
    9a74:	200f      	movs	r0, #15
    9a76:	220e      	movs	r2, #14
    9a78:	211c      	movs	r1, #28
    9a7a:	6323      	str	r3, [r4, #48]	; 0x30
    9a7c:	63a3      	str	r3, [r4, #56]	; 0x38
    9a7e:	6423      	str	r3, [r4, #64]	; 0x40
    9a80:	6523      	str	r3, [r4, #80]	; 0x50
    9a82:	62e0      	str	r0, [r4, #44]	; 0x2c
    9a84:	64e2      	str	r2, [r4, #76]	; 0x4c
    9a86:	6561      	str	r1, [r4, #84]	; 0x54
    9a88:	6267      	str	r7, [r4, #36]	; 0x24
    9a8a:	4629      	mov	r1, r5
    9a8c:	63e7      	str	r7, [r4, #60]	; 0x3c
    9a8e:	65a7      	str	r7, [r4, #88]	; 0x58
    9a90:	6025      	str	r5, [r4, #0]
    9a92:	60a5      	str	r5, [r4, #8]
    9a94:	6125      	str	r5, [r4, #16]
    9a96:	61a5      	str	r5, [r4, #24]
    9a98:	6225      	str	r5, [r4, #32]
    9a9a:	62a5      	str	r5, [r4, #40]	; 0x28
    9a9c:	64a5      	str	r5, [r4, #72]	; 0x48
    9a9e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    9aa2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    9aa6:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9aaa:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9aae:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9ab2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9ab6:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    9aba:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    9abe:	f504 7094 	add.w	r0, r4, #296	; 0x128
    9ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9ac6:	f014 fdb1 	bl	1e62c <memset>
    9aca:	4629      	mov	r1, r5
    9acc:	f604 1028 	addw	r0, r4, #2344	; 0x928
    9ad0:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    9ad4:	f014 fdaa 	bl	1e62c <memset>
    9ad8:	f641 176c 	movw	r7, #6508	; 0x196c
    9adc:	f641 1168 	movw	r1, #6504	; 0x1968
    9ae0:	19e3      	adds	r3, r4, r7
    9ae2:	f641 126a 	movw	r2, #6506	; 0x196a
    9ae6:	20c8      	movs	r0, #200	; 0xc8
    9ae8:	5260      	strh	r0, [r4, r1]
    9aea:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9aee:	2108      	movs	r1, #8
    9af0:	54a1      	strb	r1, [r4, r2]
    9af2:	3004      	adds	r0, #4
    9af4:	51e5      	str	r5, [r4, r7]
    9af6:	4629      	mov	r1, r5
    9af8:	605d      	str	r5, [r3, #4]
    9afa:	609d      	str	r5, [r3, #8]
    9afc:	60dd      	str	r5, [r3, #12]
    9afe:	611d      	str	r5, [r3, #16]
    9b00:	615d      	str	r5, [r3, #20]
    9b02:	223c      	movs	r2, #60	; 0x3c
    9b04:	f014 fd92 	bl	1e62c <memset>
    static EthernetManager *instance = new EthernetManager();
    9b08:	4905      	ldr	r1, [pc, #20]	; (9b20 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9b0a:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    9b0e:	2301      	movs	r3, #1
    9b10:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9b12:	6015      	str	r5, [r2, #0]
    9b14:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    9b16:	6033      	str	r3, [r6, #0]
}
    9b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b1a:	bf00      	nop
    9b1c:	20001bfc 	.word	0x20001bfc
    9b20:	20001c04 	.word	0x20001c04

00009b24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    9b24:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    9b26:	4b3e      	ldr	r3, [pc, #248]	; (9c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9b28:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9b2c:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9b30:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    9b34:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b36:	493b      	ldr	r1, [pc, #236]	; (9c24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9b38:	f042 0210 	orr.w	r2, r2, #16
    9b3c:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b3e:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b40:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b42:	6893      	ldr	r3, [r2, #8]
    9b44:	0759      	lsls	r1, r3, #29
    9b46:	d5fc      	bpl.n	9b42 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9b48:	6813      	ldr	r3, [r2, #0]
    9b4a:	f36f 1304 	bfc	r3, #4, #1
    9b4e:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b50:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9b52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b56:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9b58:	428b      	cmp	r3, r1
    9b5a:	d05d      	beq.n	9c18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9b5c:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9b5e:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b60:	4c31      	ldr	r4, [pc, #196]	; (9c28 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b62:	492f      	ldr	r1, [pc, #188]	; (9c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9b64:	f043 0310 	orr.w	r3, r3, #16
    9b68:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b6a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b6c:	688b      	ldr	r3, [r1, #8]
    9b6e:	075a      	lsls	r2, r3, #29
    9b70:	d5fc      	bpl.n	9b6c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    9b72:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b74:	4c2b      	ldr	r4, [pc, #172]	; (9c24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b76:	4a2a      	ldr	r2, [pc, #168]	; (9c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9b78:	f36f 1304 	bfc	r3, #4, #1
    9b7c:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b7e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9b80:	680b      	ldr	r3, [r1, #0]
    9b82:	f043 0310 	orr.w	r3, r3, #16
    9b86:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b88:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b8a:	6893      	ldr	r3, [r2, #8]
    9b8c:	075b      	lsls	r3, r3, #29
    9b8e:	d5fc      	bpl.n	9b8a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    9b90:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9b92:	4c26      	ldr	r4, [pc, #152]	; (9c2c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9b94:	4922      	ldr	r1, [pc, #136]	; (9c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9b96:	f36f 1304 	bfc	r3, #4, #1
    9b9a:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9b9c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9b9e:	6813      	ldr	r3, [r2, #0]
    9ba0:	f043 0310 	orr.w	r3, r3, #16
    9ba4:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9ba6:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9ba8:	688b      	ldr	r3, [r1, #8]
    9baa:	075c      	lsls	r4, r3, #29
    9bac:	d5fc      	bpl.n	9ba8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    9bae:	680b      	ldr	r3, [r1, #0]
    9bb0:	f36f 1304 	bfc	r3, #4, #1
    9bb4:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9bb6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9bb8:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    9bba:	b12b      	cbz	r3, 9bc8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    9bbc:	2301      	movs	r3, #1
    9bbe:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9bc6:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    9bc8:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9bca:	4c19      	ldr	r4, [pc, #100]	; (9c30 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9bcc:	4a14      	ldr	r2, [pc, #80]	; (9c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9bce:	f043 0310 	orr.w	r3, r3, #16
    9bd2:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9bd4:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9bd6:	6893      	ldr	r3, [r2, #8]
    9bd8:	0759      	lsls	r1, r3, #29
    9bda:	d5fc      	bpl.n	9bd6 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9bdc:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9bde:	4c13      	ldr	r4, [pc, #76]	; (9c2c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9be0:	490f      	ldr	r1, [pc, #60]	; (9c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9be2:	f36f 1304 	bfc	r3, #4, #1
    9be6:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9be8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9bea:	6813      	ldr	r3, [r2, #0]
    9bec:	f043 0310 	orr.w	r3, r3, #16
    9bf0:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9bf2:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9bf4:	688b      	ldr	r3, [r1, #8]
    9bf6:	075b      	lsls	r3, r3, #29
    9bf8:	d5fc      	bpl.n	9bf4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9bfa:	680b      	ldr	r3, [r1, #0]
    9bfc:	f36f 1304 	bfc	r3, #4, #1
    9c00:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9c02:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    9c04:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9c08:	2b07      	cmp	r3, #7
    9c0a:	d1d7      	bne.n	9bbc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9c0c:	2300      	movs	r3, #0
    9c0e:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9c12:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c16:	4770      	bx	lr
        m_phyInitFailed = true;
    9c18:	2301      	movs	r3, #1
    9c1a:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9c1e:	4770      	bx	lr
    9c20:	42000800 	.word	0x42000800
    9c24:	60020000 	.word	0x60020000
    9c28:	50028000 	.word	0x50028000
    9c2c:	606e0000 	.word	0x606e0000
    9c30:	506e0700 	.word	0x506e0700

00009c34 <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    9c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9c38:	4be2      	ldr	r3, [pc, #904]	; (9fc4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    9c3a:	681a      	ldr	r2, [r3, #0]
    9c3c:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    9c3e:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9c40:	d503      	bpl.n	9c4a <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    9c42:	681a      	ldr	r2, [r3, #0]
    9c44:	0750      	lsls	r0, r2, #29
    9c46:	f100 82a2 	bmi.w	a18e <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    9c4a:	4ade      	ldr	r2, [pc, #888]	; (9fc4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9c4c:	48de      	ldr	r0, [pc, #888]	; (9fc8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    9c4e:	6813      	ldr	r3, [r2, #0]
    9c50:	f043 0310 	orr.w	r3, r3, #16
    9c54:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    9c56:	6853      	ldr	r3, [r2, #4]
    9c58:	f043 0301 	orr.w	r3, r3, #1
    9c5c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    9c5e:	6853      	ldr	r3, [r2, #4]
    9c60:	f043 0302 	orr.w	r3, r3, #2
    9c64:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    9c66:	6853      	ldr	r3, [r2, #4]
    9c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9c6c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    9c6e:	6853      	ldr	r3, [r2, #4]
    9c70:	2104      	movs	r1, #4
    9c72:	f361 4394 	bfi	r3, r1, #18, #3
    9c76:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    9c78:	68d3      	ldr	r3, [r2, #12]
    9c7a:	f36f 0300 	bfc	r3, #0, #1
    9c7e:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    9c80:	6913      	ldr	r3, [r2, #16]
    9c82:	f361 0304 	bfi	r3, r1, #0, #5
    9c86:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    9c88:	6913      	ldr	r3, [r2, #16]
    9c8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    9c8e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    9c90:	6913      	ldr	r3, [r2, #16]
    9c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9c96:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9c98:	6915      	ldr	r5, [r2, #16]
    9c9a:	2302      	movs	r3, #2
    9c9c:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9ca0:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    9ca4:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9ca6:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    9ca8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9cac:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9cb0:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    9cb4:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    9cb8:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    9cbc:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    9cc0:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    9cc4:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    9cc8:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    9ccc:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9cd0:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9cd4:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    9cd8:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9cdc:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9ce0:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    9ce4:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    9ce8:	66e3      	str	r3, [r4, #108]	; 0x6c
    9cea:	6763      	str	r3, [r4, #116]	; 0x74
    9cec:	67e3      	str	r3, [r4, #124]	; 0x7c
    9cee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    9cf2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9cf6:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    9cfa:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9cfe:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9d02:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    9d06:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    9d0a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    9d0e:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    9d12:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    9d16:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    9d1a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    9d1e:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    9d22:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    9d26:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    9d2a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    9d2e:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    9d32:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    9d36:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    9d3a:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    9d3e:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d42:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    9d46:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    9d4a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d4e:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    9d52:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    9d56:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d58:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    9d5c:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    9d60:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    9d64:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d68:	3610      	adds	r6, #16
    9d6a:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    9d6c:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d70:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    9d74:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    9d78:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d7a:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    9d7e:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9d82:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    9d86:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9d88:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    9d8a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    9d8e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    9d92:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    9d96:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    9d9a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    9d9e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    9da2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    9da6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    9daa:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    9dae:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    9db2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    9db6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    9dba:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9dbe:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9dc2:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9dc6:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    9dc8:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9dcc:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    9dd0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    9dd4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    9dd8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    9ddc:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    9de0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    9de4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9de8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    9dec:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    9df0:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    9df4:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    9df8:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    9dfc:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    9e00:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    9e04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9e08:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9e0c:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9e10:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9e14:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9e18:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9e1c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    9e20:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    9e24:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    9e28:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    9e2c:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    9e30:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9e34:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    9e38:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    9e3c:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    9e3e:	6196      	str	r6, [r2, #24]
    9e40:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9e44:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9e48:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    9e4a:	6823      	ldr	r3, [r4, #0]
    9e4c:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    9e4e:	01db      	lsls	r3, r3, #7
    9e50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e58:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e5a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    9e5e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    9e62:	f042 0201 	orr.w	r2, r2, #1
    9e66:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9e6e:	f011 0f01 	tst.w	r1, #1
    9e72:	f04f 010b 	mov.w	r1, #11
    9e76:	bf14      	ite	ne
    9e78:	f361 1207 	bfine	r2, r1, #4, #4
    9e7c:	f361 0203 	bfieq	r2, r1, #0, #4
    9e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    9e84:	68a3      	ldr	r3, [r4, #8]
    9e86:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    9e88:	01db      	lsls	r3, r3, #7
    9e8a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9e8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9e92:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9e94:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9e98:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9e9c:	f041 0101 	orr.w	r1, r1, #1
    9ea0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ea4:	f012 0f01 	tst.w	r2, #1
    9ea8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9eac:	f04f 010b 	mov.w	r1, #11
    9eb0:	bf14      	ite	ne
    9eb2:	f361 1207 	bfine	r2, r1, #4, #4
    9eb6:	f361 0203 	bfieq	r2, r1, #0, #4
    9eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    9ebe:	6923      	ldr	r3, [r4, #16]
    9ec0:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    9ec2:	01db      	lsls	r3, r3, #7
    9ec4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ec8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9ecc:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ece:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ed2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9ed6:	f041 0101 	orr.w	r1, r1, #1
    9eda:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ede:	f012 0f01 	tst.w	r2, #1
    9ee2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9ee6:	f04f 010b 	mov.w	r1, #11
    9eea:	bf14      	ite	ne
    9eec:	f361 1207 	bfine	r2, r1, #4, #4
    9ef0:	f361 0203 	bfieq	r2, r1, #0, #4
    9ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    9ef8:	69a3      	ldr	r3, [r4, #24]
    9efa:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    9efc:	01db      	lsls	r3, r3, #7
    9efe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f06:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f08:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f0c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f10:	f041 0101 	orr.w	r1, r1, #1
    9f14:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f18:	f012 0f01 	tst.w	r2, #1
    9f1c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f20:	f04f 010b 	mov.w	r1, #11
    9f24:	bf14      	ite	ne
    9f26:	f361 1207 	bfine	r2, r1, #4, #4
    9f2a:	f361 0203 	bfieq	r2, r1, #0, #4
    9f2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    9f32:	6a23      	ldr	r3, [r4, #32]
    9f34:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    9f36:	01db      	lsls	r3, r3, #7
    9f38:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f40:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f42:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f46:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f4a:	f041 0101 	orr.w	r1, r1, #1
    9f4e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f52:	f012 0f01 	tst.w	r2, #1
    9f56:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f5a:	f04f 010b 	mov.w	r1, #11
    9f5e:	bf14      	ite	ne
    9f60:	f361 1207 	bfine	r2, r1, #4, #4
    9f64:	f361 0203 	bfieq	r2, r1, #0, #4
    9f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    9f6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9f6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    9f70:	01db      	lsls	r3, r3, #7
    9f72:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9f76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9f7a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f7c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9f80:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9f84:	f041 0101 	orr.w	r1, r1, #1
    9f88:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9f8c:	f012 0f01 	tst.w	r2, #1
    9f90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9f94:	f04f 010b 	mov.w	r1, #11
    9f98:	bf14      	ite	ne
    9f9a:	f361 1207 	bfine	r2, r1, #4, #4
    9f9e:	f361 0203 	bfieq	r2, r1, #0, #4
    9fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    9fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9fa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    9faa:	01db      	lsls	r3, r3, #7
    9fac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9fb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9fb4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9fb6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9fba:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9fbe:	f041 0101 	orr.w	r1, r1, #1
    9fc2:	e003      	b.n	9fcc <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    9fc4:	42000800 	.word	0x42000800
    9fc8:	e000e100 	.word	0xe000e100
    9fcc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9fd0:	f012 0f01 	tst.w	r2, #1
    9fd4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9fd8:	f04f 010b 	mov.w	r1, #11
    9fdc:	bf14      	ite	ne
    9fde:	f361 1207 	bfine	r2, r1, #4, #4
    9fe2:	f361 0203 	bfieq	r2, r1, #0, #4
    9fe6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    9fea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9fec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    9fee:	01db      	lsls	r3, r3, #7
    9ff0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9ff4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9ff8:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9ffa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9ffe:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a002:	f041 0101 	orr.w	r1, r1, #1
    a006:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a00a:	f012 0f01 	tst.w	r2, #1
    a00e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a012:	f04f 010b 	mov.w	r1, #11
    a016:	bf14      	ite	ne
    a018:	f361 1207 	bfine	r2, r1, #4, #4
    a01c:	f361 0203 	bfieq	r2, r1, #0, #4
    a020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    a024:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a026:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    a028:	01db      	lsls	r3, r3, #7
    a02a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a02e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a032:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a034:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a038:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a03c:	f041 0101 	orr.w	r1, r1, #1
    a040:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a044:	f012 0f01 	tst.w	r2, #1
    a048:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a04c:	f04f 010b 	mov.w	r1, #11
    a050:	bf14      	ite	ne
    a052:	f361 1207 	bfine	r2, r1, #4, #4
    a056:	f361 0203 	bfieq	r2, r1, #0, #4
    a05a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    a05e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a060:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    a062:	01db      	lsls	r3, r3, #7
    a064:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a068:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a06c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a06e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a072:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a076:	f041 0101 	orr.w	r1, r1, #1
    a07a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a07e:	f012 0f01 	tst.w	r2, #1
    a082:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a086:	f04f 010b 	mov.w	r1, #11
    a08a:	bf14      	ite	ne
    a08c:	f361 1207 	bfine	r2, r1, #4, #4
    a090:	f361 0203 	bfieq	r2, r1, #0, #4
    a094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a098:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a09a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a09c:	01db      	lsls	r3, r3, #7
    a09e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    a0a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    a0a6:	1850      	adds	r0, r2, r1
    a0a8:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a0aa:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a0ae:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a0b2:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a0b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a0ba:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a0be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a0c2:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a0c4:	bf14      	ite	ne
    a0c6:	f36f 1007 	bfcne	r0, #4, #4
    a0ca:	f367 0003 	bfieq	r0, r7, #0, #4
    a0ce:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a0d2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a0d6:	4932      	ldr	r1, [pc, #200]	; (a1a0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    a0d8:	4a32      	ldr	r2, [pc, #200]	; (a1a4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a0da:	f040 0001 	orr.w	r0, r0, #1
    a0de:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    a0e2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a0e6:	f040 0002 	orr.w	r0, r0, #2
    a0ea:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a0ee:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a0f4:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    a0f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a0f8:	f043 0302 	orr.w	r3, r3, #2
    a0fc:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    a0fe:	7813      	ldrb	r3, [r2, #0]
    a100:	f36f 0341 	bfc	r3, #1, #1
    a104:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a106:	6853      	ldr	r3, [r2, #4]
    a108:	0799      	lsls	r1, r3, #30
    a10a:	d4fc      	bmi.n	a106 <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a10e:	4925      	ldr	r1, [pc, #148]	; (a1a4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a110:	08c3      	lsrs	r3, r0, #3
    a112:	009b      	lsls	r3, r3, #2
    a114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a118:	2701      	movs	r7, #1
    a11a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a11e:	4087      	lsls	r7, r0
    a120:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a122:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a126:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a128:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a12a:	f04f 0e0f 	mov.w	lr, #15
    a12e:	fa0e fe00 	lsl.w	lr, lr, r0
    a132:	ea27 070e 	bic.w	r7, r7, lr
    a136:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a138:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a13c:	2705      	movs	r7, #5
    a13e:	fa07 f000 	lsl.w	r0, r7, r0
    a142:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a146:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a148:	7813      	ldrb	r3, [r2, #0]
    a14a:	f043 0302 	orr.w	r3, r3, #2
    a14e:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a150:	684b      	ldr	r3, [r1, #4]
    a152:	079b      	lsls	r3, r3, #30
    a154:	d4fc      	bmi.n	a150 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a156:	4620      	mov	r0, r4
    a158:	f7ff fce4 	bl	9b24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a15c:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a160:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a164:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a168:	4b0f      	ldr	r3, [pc, #60]	; (a1a8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a16a:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a16c:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a170:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a172:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a176:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a17a:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a17e:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a180:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a182:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a184:	6818      	ldr	r0, [r3, #0]
}
    a186:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a18a:	f007 bdcf 	b.w	11d2c <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a18e:	681a      	ldr	r2, [r3, #0]
    a190:	f36f 02c3 	bfc	r2, #3, #1
    a194:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a196:	681a      	ldr	r2, [r3, #0]
    a198:	f36f 0282 	bfc	r2, #2, #1
    a19c:	601a      	str	r2, [r3, #0]
    a19e:	e554      	b.n	9c4a <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a1a0:	42000800 	.word	0x42000800
    a1a4:	40002800 	.word	0x40002800
    a1a8:	20001f34 	.word	0x20001f34

0000a1ac <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a1b0:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a1b2:	4ca1      	ldr	r4, [pc, #644]	; (a438 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a1b4:	4ba1      	ldr	r3, [pc, #644]	; (a43c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a1b6:	49a2      	ldr	r1, [pc, #648]	; (a440 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a1b8:	2201      	movs	r2, #1
    a1ba:	40aa      	lsls	r2, r5
    a1bc:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a1be:	681a      	ldr	r2, [r3, #0]
    a1c0:	f042 0210 	orr.w	r2, r2, #16
    a1c4:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a1c6:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a1c8:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a1ca:	6893      	ldr	r3, [r2, #8]
    a1cc:	075d      	lsls	r5, r3, #29
    a1ce:	d5fc      	bpl.n	a1ca <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a1d0:	6813      	ldr	r3, [r2, #0]
    a1d2:	f36f 1304 	bfc	r3, #4, #1
    a1d6:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a1d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a1da:	07cc      	lsls	r4, r1, #31
    a1dc:	d415      	bmi.n	a20a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a1de:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a1e0:	bf44      	itt	mi
    a1e2:	2300      	movmi	r3, #0
    a1e4:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a1e8:	078c      	lsls	r4, r1, #30
    a1ea:	d401      	bmi.n	a1f0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a1f0:	4b92      	ldr	r3, [pc, #584]	; (a43c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a1f2:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a1f4:	2101      	movs	r1, #1
    a1f6:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a1fa:	0711      	lsls	r1, r2, #28
    a1fc:	d5f6      	bpl.n	a1ec <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a1fe:	681a      	ldr	r2, [r3, #0]
    a200:	0752      	lsls	r2, r2, #29
    a202:	f100 8121 	bmi.w	a448 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a20a:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a20c:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a20e:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a210:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a212:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a216:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a21a:	d56d      	bpl.n	a2f8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a21c:	6813      	ldr	r3, [r2, #0]
    a21e:	075f      	lsls	r7, r3, #29
    a220:	d56a      	bpl.n	a2f8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a222:	6813      	ldr	r3, [r2, #0]
    a224:	f36f 03c3 	bfc	r3, #3, #1
    a228:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a22a:	6813      	ldr	r3, [r2, #0]
    a22c:	f36f 0382 	bfc	r3, #2, #1
    a230:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a232:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a236:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a23a:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a23e:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a242:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a246:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a24a:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a24e:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a252:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a256:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a25a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a25e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a26a:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a26e:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a272:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a276:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a27a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a27e:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a282:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a286:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a28a:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a28e:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a292:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a296:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a29a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a29e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a2a6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2aa:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a2ae:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2b2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a2b6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2ba:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a2be:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a2c2:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a2c6:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a2ca:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a2ce:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a2d2:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a2d6:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a2da:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a2de:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a2e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a2ea:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a2ec:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a2f0:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a2f4:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a2f8:	4b50      	ldr	r3, [pc, #320]	; (a43c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a2fa:	4d52      	ldr	r5, [pc, #328]	; (a444 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a2fc:	681a      	ldr	r2, [r3, #0]
    a2fe:	f042 0210 	orr.w	r2, r2, #16
    a302:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a304:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a306:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a308:	6893      	ldr	r3, [r2, #8]
    a30a:	075e      	lsls	r6, r3, #29
    a30c:	d5fc      	bpl.n	a308 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a30e:	6813      	ldr	r3, [r2, #0]
    a310:	f36f 1304 	bfc	r3, #4, #1
    a314:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a316:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a318:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a31a:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a31c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a320:	f366 0500 	bfi	r5, r6, #0, #1
    a324:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a326:	6855      	ldr	r5, [r2, #4]
    a328:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a32c:	f363 0541 	bfi	r5, r3, #1, #1
    a330:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a332:	6813      	ldr	r3, [r2, #0]
    a334:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a338:	b96b      	cbnz	r3, a356 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a33a:	429c      	cmp	r4, r3
    a33c:	f43f af4f 	beq.w	a1de <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a340:	b16c      	cbz	r4, a35e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a342:	4b3e      	ldr	r3, [pc, #248]	; (a43c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a344:	681a      	ldr	r2, [r3, #0]
    a346:	f042 0208 	orr.w	r2, r2, #8
    a34a:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a34c:	681a      	ldr	r2, [r3, #0]
    a34e:	f042 0204 	orr.w	r2, r2, #4
    a352:	601a      	str	r2, [r3, #0]
    a354:	e743      	b.n	a1de <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a356:	6813      	ldr	r3, [r2, #0]
    a358:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a35c:	e7ed      	b.n	a33a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a35e:	4b37      	ldr	r3, [pc, #220]	; (a43c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a360:	681a      	ldr	r2, [r3, #0]
    a362:	f364 02c3 	bfi	r2, r4, #3, #1
    a366:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a368:	681a      	ldr	r2, [r3, #0]
    a36a:	f364 0282 	bfi	r2, r4, #2, #1
    a36e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a370:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a374:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a378:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a37c:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a380:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a384:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a388:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a38c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a390:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a394:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a398:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a39c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3a8:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a3ac:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a3b0:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a3b4:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a3b8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a3bc:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a3c0:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a3c4:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a3c8:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a3cc:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a3d0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a3d4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a3d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3e0:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3e4:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3e8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3ec:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a3f0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a3f4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a3f8:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a3fc:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a400:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a404:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a408:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a40c:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a410:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a414:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a418:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a41c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a420:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a42c:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a430:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a434:	e6d3      	b.n	a1de <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a436:	bf00      	nop
    a438:	40002800 	.word	0x40002800
    a43c:	42000800 	.word	0x42000800
    a440:	606e0000 	.word	0x606e0000
    a444:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a448:	681a      	ldr	r2, [r3, #0]
    a44a:	f36f 02c3 	bfc	r2, #3, #1
    a44e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a450:	681a      	ldr	r2, [r3, #0]
    a452:	f36f 0282 	bfc	r2, #2, #1
    a456:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a458:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a45c:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a460:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a464:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a468:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a46c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a470:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a474:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a478:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a47c:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a480:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a484:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a490:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a494:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a498:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a49c:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a4a0:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a4a4:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a4a8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a4ac:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a4b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4bc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4c0:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4c4:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4c8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4cc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4d0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4d4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4d8:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a4dc:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a4e0:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a4e4:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a4e8:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a4ec:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a4f0:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a4f4:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a4f8:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a4fc:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a500:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a504:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a510:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a512:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a516:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a51a:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a522:	bf00      	nop

0000a524 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a524:	4b0b      	ldr	r3, [pc, #44]	; (a554 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a526:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a528:	695a      	ldr	r2, [r3, #20]
    a52a:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a52c:	6a1a      	ldr	r2, [r3, #32]
    a52e:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a532:	9a00      	ldr	r2, [sp, #0]
    a534:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a536:	bf44      	itt	mi
    a538:	9a00      	ldrmi	r2, [sp, #0]
    a53a:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a53c:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a53e:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a540:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a542:	bf44      	itt	mi
    a544:	2301      	movmi	r3, #1
    a546:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a54a:	4b02      	ldr	r3, [pc, #8]	; (a554 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a54c:	621a      	str	r2, [r3, #32]
}
    a54e:	b002      	add	sp, #8
    a550:	4770      	bx	lr
    a552:	bf00      	nop
    a554:	42000800 	.word	0x42000800

0000a558 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a558:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a55a:	f7ff fa6f 	bl	9a3c <_ZN9ClearCore15EthernetManager8InstanceEv>
    a55e:	4b01      	ldr	r3, [pc, #4]	; (a564 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a560:	6018      	str	r0, [r3, #0]
    a562:	bd08      	pop	{r3, pc}
    a564:	20001c00 	.word	0x20001c00

0000a568 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a56a:	4f46      	ldr	r7, [pc, #280]	; (a684 <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a56c:	f8df e118 	ldr.w	lr, [pc, #280]	; a688 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a570:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a572:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a574:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a576:	4625      	mov	r5, r4
    a578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a57a:	e896 0003 	ldmia.w	r6, {r0, r1}
    a57e:	f107 0618 	add.w	r6, r7, #24
    a582:	e885 0003 	stmia.w	r5, {r0, r1}
    a586:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a588:	f104 0518 	add.w	r5, r4, #24
    a58c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a58e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a592:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a596:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a59a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a59c:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a5a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a5a4:	2608      	movs	r6, #8
    a5a6:	257f      	movs	r5, #127	; 0x7f
    a5a8:	23c8      	movs	r3, #200	; 0xc8
    a5aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a5ae:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a5b2:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a5b6:	2500      	movs	r5, #0
    a5b8:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a5bc:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a5be:	21fe      	movs	r1, #254	; 0xfe
    a5c0:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a5c4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a5c8:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a5cc:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a5ce:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a5d0:	4629      	mov	r1, r5
    a5d2:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a5d4:	6563      	str	r3, [r4, #84]	; 0x54
    a5d6:	65a5      	str	r5, [r4, #88]	; 0x58
    a5d8:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a5da:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a5de:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a5e2:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a5e4:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a5e8:	67a5      	str	r5, [r4, #120]	; 0x78
    a5ea:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a5ee:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a5f0:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a5f2:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a5f6:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a5fa:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a5fe:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a602:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a606:	2240      	movs	r2, #64	; 0x40
    a608:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a60c:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a610:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a614:	f014 f80a 	bl	1e62c <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a618:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a61c:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a620:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a624:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a628:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a62c:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    a630:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    a634:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    a638:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    a63c:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a640:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    a644:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    a648:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    a64c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    a650:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    a654:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    a658:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    a65c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    a660:	4620      	mov	r0, r4
    m_lastOutput(0) {
    a662:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    a666:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    a66a:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a66e:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    a672:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    a676:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a67a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a67e:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a684:	000233bc 	.word	0x000233bc
    a688:	0fe080fc 	.word	0x0fe080fc

0000a68c <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    a68c:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    a68e:	4a64      	ldr	r2, [pc, #400]	; (a820 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a690:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a694:	f36f 1386 	bfc	r3, #6, #1
    a698:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a69c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a6a0:	065d      	lsls	r5, r3, #25
    a6a2:	d4fb      	bmi.n	a69c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    a6a4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a6a8:	495d      	ldr	r1, [pc, #372]	; (a820 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a6aa:	2405      	movs	r4, #5
    a6ac:	f364 0303 	bfi	r3, r4, #0, #4
    a6b0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a6b4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a6bc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a6c0:	684b      	ldr	r3, [r1, #4]
    a6c2:	f013 0314 	ands.w	r3, r3, #20
    a6c6:	d1fb      	bne.n	a6c0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a6c8:	4d56      	ldr	r5, [pc, #344]	; (a824 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a6ca:	4957      	ldr	r1, [pc, #348]	; (a828 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a6cc:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a6ce:	4a57      	ldr	r2, [pc, #348]	; (a82c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a6d0:	f044 0404 	orr.w	r4, r4, #4
    a6d4:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a6d6:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    a6da:	2402      	movs	r4, #2
    a6dc:	f364 1507 	bfi	r5, r4, #4, #4
    a6e0:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    a6e4:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    a6e8:	f045 0501 	orr.w	r5, r5, #1
    a6ec:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    a6f0:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a6f4:	f364 1507 	bfi	r5, r4, #4, #4
    a6f8:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    a6fc:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    a700:	f045 0501 	orr.w	r5, r5, #1
    a704:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    a708:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a70c:	f364 0503 	bfi	r5, r4, #0, #4
    a710:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a714:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a718:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a71a:	f045 0501 	orr.w	r5, r5, #1
    a71e:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    a722:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a726:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    a72a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    a72e:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a732:	6811      	ldr	r1, [r2, #0]
    a734:	f363 0141 	bfi	r1, r3, #1, #1
    a738:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a73a:	69d3      	ldr	r3, [r2, #28]
    a73c:	f013 0302 	ands.w	r3, r3, #2
    a740:	d1fb      	bne.n	a73a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a742:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a744:	4939      	ldr	r1, [pc, #228]	; (a82c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a746:	f044 040c 	orr.w	r4, r4, #12
    a74a:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    a74c:	6814      	ldr	r4, [r2, #0]
    a74e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    a752:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    a756:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    a758:	6854      	ldr	r4, [r2, #4]
    a75a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    a75e:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    a760:	6894      	ldr	r4, [r2, #8]
    a762:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    a766:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    a768:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    a76a:	6813      	ldr	r3, [r2, #0]
    a76c:	f043 0302 	orr.w	r3, r3, #2
    a770:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a772:	69cb      	ldr	r3, [r1, #28]
    a774:	079c      	lsls	r4, r3, #30
    a776:	d4fc      	bmi.n	a772 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a778:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a77c:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    a780:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a784:	4a29      	ldr	r2, [pc, #164]	; (a82c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    a786:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a788:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a78a:	7e13      	ldrb	r3, [r2, #24]
    a78c:	0799      	lsls	r1, r3, #30
    a78e:	d5fc      	bpl.n	a78a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a790:	4b25      	ldr	r3, [pc, #148]	; (a828 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a792:	4a26      	ldr	r2, [pc, #152]	; (a82c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a794:	2104      	movs	r1, #4
    a796:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a79a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a79e:	7e13      	ldrb	r3, [r2, #24]
    a7a0:	075b      	lsls	r3, r3, #29
    a7a2:	d5fc      	bpl.n	a79e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a7a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    a7a6:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a7aa:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    a7ae:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a7b2:	4063      	eors	r3, r4
    a7b4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a7b8:	bb7a      	cbnz	r2, a81a <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a7ba:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a7be:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    a7c2:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a7c6:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    a7ca:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    a7ce:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    a7d2:	4059      	eors	r1, r3
    a7d4:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a7d6:	404b      	eors	r3, r1
    a7d8:	ea83 0105 	eor.w	r1, r3, r5
    a7dc:	4031      	ands	r1, r6
    a7de:	4059      	eors	r1, r3
    a7e0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    a7e4:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    a7e8:	404a      	eors	r2, r1
    a7ea:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a7ec:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    a7ee:	b135      	cbz	r5, a7fe <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    a7f0:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a7f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a7f8:	b10a      	cbz	r2, a7fe <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    a7fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    a7fe:	4d0b      	ldr	r5, [pc, #44]	; (a82c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a800:	4909      	ldr	r1, [pc, #36]	; (a828 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    a802:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a806:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a808:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    a80a:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    a80c:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    a80e:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    a812:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    a814:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    a818:	4770      	bx	lr
        output = m_altOutput;
    a81a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    a81e:	e7ee      	b.n	a7fe <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    a820:	40001c00 	.word	0x40001c00
    a824:	40000800 	.word	0x40000800
    a828:	41008000 	.word	0x41008000
    a82c:	43000800 	.word	0x43000800

0000a830 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    a830:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    a834:	2b00      	cmp	r3, #0
    a836:	d078      	beq.n	a92a <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    a838:	6d83      	ldr	r3, [r0, #88]	; 0x58
    a83a:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    a83c:	b4f0      	push	{r4, r5, r6, r7}
    a83e:	6582      	str	r2, [r0, #88]	; 0x58
    a840:	b90b      	cbnz	r3, a846 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    a842:	6d02      	ldr	r2, [r0, #80]	; 0x50
    a844:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    a846:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    a848:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    a84c:	428a      	cmp	r2, r1
    a84e:	bf34      	ite	cc
    a850:	220c      	movcc	r2, #12
    a852:	2208      	movcs	r2, #8
    a854:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    a856:	3301      	adds	r3, #1
    a858:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    a85a:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    a85c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    a860:	2b3e      	cmp	r3, #62	; 0x3e
    a862:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    a866:	d961      	bls.n	a92c <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    a868:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    a86c:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    a870:	2400      	movs	r4, #0
    a872:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    a876:	2b00      	cmp	r3, #0
    a878:	f000 817a 	beq.w	ab70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    a87c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    a880:	3101      	adds	r1, #1
    a882:	b2c9      	uxtb	r1, r1
    a884:	4299      	cmp	r1, r3
    a886:	460a      	mov	r2, r1
    a888:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    a88c:	f2c0 817e 	blt.w	ab8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    a890:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    a894:	4623      	mov	r3, r4
    a896:	e04c      	b.n	a932 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    a898:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    a89a:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    a89c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a8a0:	49b1      	ldr	r1, [pc, #708]	; (ab68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    a8a2:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a8a6:	7e0b      	ldrb	r3, [r1, #24]
    a8a8:	079c      	lsls	r4, r3, #30
    a8aa:	d5fc      	bpl.n	a8a6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a8ac:	4baf      	ldr	r3, [pc, #700]	; (ab6c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a8ae:	49ae      	ldr	r1, [pc, #696]	; (ab68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a8b0:	2404      	movs	r4, #4
    a8b2:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a8b6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a8ba:	7e0b      	ldrb	r3, [r1, #24]
    a8bc:	075b      	lsls	r3, r3, #29
    a8be:	d5fc      	bpl.n	a8ba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a8c0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a8c2:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    a8c6:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a8ca:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    a8ce:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a8d2:	4073      	eors	r3, r6
    a8d4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a8d8:	2900      	cmp	r1, #0
    a8da:	f040 80d4 	bne.w	aa86 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a8de:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a8e2:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a8e6:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    a8ea:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    a8ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    a8f2:	405a      	eors	r2, r3
    a8f4:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a8f6:	4053      	eors	r3, r2
    a8f8:	ea83 0204 	eor.w	r2, r3, r4
    a8fc:	402a      	ands	r2, r5
    a8fe:	405a      	eors	r2, r3
    a900:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    a904:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    a908:	4051      	eors	r1, r2
    a90a:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    a90c:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    a90e:	b134      	cbz	r4, a91e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    a910:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    a914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    a918:	b10a      	cbz	r2, a91e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    a91a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    a91e:	4a92      	ldr	r2, [pc, #584]	; (ab68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    a920:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    a924:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    a926:	6293      	str	r3, [r2, #40]	; 0x28
}
    a928:	bcf0      	pop	{r4, r5, r6, r7}
    a92a:	4770      	bx	lr
    a92c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a930:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    a932:	4293      	cmp	r3, r2
    a934:	bfb4      	ite	lt
    a936:	230c      	movlt	r3, #12
    a938:	2308      	movge	r3, #8
    a93a:	4403      	add	r3, r0
            if (!m_activeMask) {
    a93c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    a940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    a942:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    a946:	2900      	cmp	r1, #0
    a948:	d0a6      	beq.n	a898 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    a94a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    a94e:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    a950:	3301      	adds	r3, #1
    a952:	b2db      	uxtb	r3, r3
    a954:	2b3f      	cmp	r3, #63	; 0x3f
    a956:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    a95a:	f200 8097 	bhi.w	aa8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    a95e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    a962:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    a964:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    a966:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    a968:	d004      	beq.n	a974 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    a96a:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    a96e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a970:	bfb8      	it	lt
    a972:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a974:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    a978:	420a      	tst	r2, r1
    a97a:	d004      	beq.n	a986 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    a97c:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    a980:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a982:	bfb8      	it	lt
    a984:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a986:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    a98a:	420a      	tst	r2, r1
    a98c:	d004      	beq.n	a998 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    a98e:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    a992:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a994:	bfb8      	it	lt
    a996:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a998:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    a99c:	420a      	tst	r2, r1
    a99e:	d004      	beq.n	a9aa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    a9a0:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    a9a4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9a6:	bfb8      	it	lt
    a9a8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9aa:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    a9ae:	420a      	tst	r2, r1
    a9b0:	d004      	beq.n	a9bc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    a9b2:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    a9b6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9b8:	bfb8      	it	lt
    a9ba:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9bc:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    a9c0:	420a      	tst	r2, r1
    a9c2:	d004      	beq.n	a9ce <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    a9c4:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    a9c8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9ca:	bfb8      	it	lt
    a9cc:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9ce:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    a9d2:	420a      	tst	r2, r1
    a9d4:	d004      	beq.n	a9e0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    a9d6:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    a9da:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9dc:	bfb8      	it	lt
    a9de:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9e0:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    a9e4:	420a      	tst	r2, r1
    a9e6:	d004      	beq.n	a9f2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    a9e8:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    a9ec:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    a9ee:	bfb8      	it	lt
    a9f0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    a9f2:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    a9f6:	420a      	tst	r2, r1
    a9f8:	d004      	beq.n	aa04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    a9fa:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    a9fe:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa00:	bfb8      	it	lt
    aa02:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa04:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    aa08:	420a      	tst	r2, r1
    aa0a:	d004      	beq.n	aa16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    aa0c:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    aa10:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa12:	bfb8      	it	lt
    aa14:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa16:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    aa1a:	420a      	tst	r2, r1
    aa1c:	d004      	beq.n	aa28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    aa1e:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    aa22:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa24:	bfb8      	it	lt
    aa26:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa28:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    aa2c:	420a      	tst	r2, r1
    aa2e:	d004      	beq.n	aa3a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    aa30:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    aa34:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa36:	bfb8      	it	lt
    aa38:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa3a:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    aa3e:	420a      	tst	r2, r1
    aa40:	d004      	beq.n	aa4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    aa42:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    aa46:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa48:	bfb8      	it	lt
    aa4a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa4c:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    aa50:	420a      	tst	r2, r1
    aa52:	d004      	beq.n	aa5e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    aa54:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    aa58:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa5a:	bfb8      	it	lt
    aa5c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa5e:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    aa62:	420a      	tst	r2, r1
    aa64:	d004      	beq.n	aa70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    aa66:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    aa6a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa6c:	bfb8      	it	lt
    aa6e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aa70:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    aa74:	4211      	tst	r1, r2
    aa76:	d004      	beq.n	aa82 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    aa78:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    aa7c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aa7e:	bfb8      	it	lt
    aa80:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    aa82:	6782      	str	r2, [r0, #120]	; 0x78
    aa84:	e70c      	b.n	a8a0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    aa86:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    aa8a:	e748      	b.n	a91e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    aa8c:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    aa8e:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    aa92:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    aa96:	d004      	beq.n	aaa2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    aa98:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    aa9c:	2a00      	cmp	r2, #0
    aa9e:	f040 80cb 	bne.w	ac38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    aaa2:	078b      	lsls	r3, r1, #30
    aaa4:	d504      	bpl.n	aab0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    aaa6:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    aaaa:	2b00      	cmp	r3, #0
    aaac:	f040 80be 	bne.w	ac2c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    aab0:	074f      	lsls	r7, r1, #29
    aab2:	d504      	bpl.n	aabe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    aab4:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    aab8:	2b00      	cmp	r3, #0
    aaba:	f040 80b1 	bne.w	ac20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    aabe:	070e      	lsls	r6, r1, #28
    aac0:	d504      	bpl.n	aacc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    aac2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    aac6:	2b00      	cmp	r3, #0
    aac8:	f040 80a4 	bne.w	ac14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    aacc:	06cd      	lsls	r5, r1, #27
    aace:	d504      	bpl.n	aada <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    aad0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    aad4:	2b00      	cmp	r3, #0
    aad6:	f040 8097 	bne.w	ac08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    aada:	068c      	lsls	r4, r1, #26
    aadc:	d504      	bpl.n	aae8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    aade:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    aae2:	2b00      	cmp	r3, #0
    aae4:	f040 808a 	bne.w	abfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    aae8:	064b      	lsls	r3, r1, #25
    aaea:	d503      	bpl.n	aaf4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    aaec:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d17d      	bne.n	abf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    aaf4:	060f      	lsls	r7, r1, #24
    aaf6:	d503      	bpl.n	ab00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    aaf8:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    aafc:	2b00      	cmp	r3, #0
    aafe:	d171      	bne.n	abe4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    ab00:	05ce      	lsls	r6, r1, #23
    ab02:	d503      	bpl.n	ab0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    ab04:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d165      	bne.n	abd8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    ab0c:	058d      	lsls	r5, r1, #22
    ab0e:	d503      	bpl.n	ab18 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    ab10:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    ab14:	2b00      	cmp	r3, #0
    ab16:	d159      	bne.n	abcc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    ab18:	054c      	lsls	r4, r1, #21
    ab1a:	d503      	bpl.n	ab24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    ab1c:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    ab20:	2b00      	cmp	r3, #0
    ab22:	d14d      	bne.n	abc0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    ab24:	050b      	lsls	r3, r1, #20
    ab26:	d503      	bpl.n	ab30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    ab28:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d141      	bne.n	abb4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    ab30:	04cf      	lsls	r7, r1, #19
    ab32:	d503      	bpl.n	ab3c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    ab34:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    ab38:	2b00      	cmp	r3, #0
    ab3a:	d135      	bne.n	aba8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    ab3c:	048e      	lsls	r6, r1, #18
    ab3e:	d502      	bpl.n	ab46 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    ab40:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    ab44:	bb53      	cbnz	r3, ab9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    ab46:	044d      	lsls	r5, r1, #17
    ab48:	d502      	bpl.n	ab50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    ab4a:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    ab4e:	b9fb      	cbnz	r3, ab90 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    ab50:	0bcb      	lsrs	r3, r1, #15
    ab52:	d096      	beq.n	aa82 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    ab54:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d092      	beq.n	aa82 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    ab5c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    ab60:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    ab64:	430a      	orrs	r2, r1
    ab66:	e78c      	b.n	aa82 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    ab68:	43000800 	.word	0x43000800
    ab6c:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    ab70:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    ab74:	3901      	subs	r1, #1
    ab76:	b2c9      	uxtb	r1, r1
    ab78:	42a1      	cmp	r1, r4
    ab7a:	460a      	mov	r2, r1
    ab7c:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    ab80:	f73f aed7 	bgt.w	a932 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    ab84:	2101      	movs	r1, #1
    ab86:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ab8a:	e6d2      	b.n	a932 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    ab8c:	4623      	mov	r3, r4
    ab8e:	e6d0      	b.n	a932 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    ab90:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    ab94:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    ab98:	4322      	orrs	r2, r4
    ab9a:	e7d9      	b.n	ab50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    ab9c:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    aba0:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    aba4:	4322      	orrs	r2, r4
    aba6:	e7ce      	b.n	ab46 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    aba8:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    abac:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    abb0:	4322      	orrs	r2, r4
    abb2:	e7c3      	b.n	ab3c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    abb4:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    abb8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    abbc:	4322      	orrs	r2, r4
    abbe:	e7b7      	b.n	ab30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    abc0:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    abc4:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    abc8:	4322      	orrs	r2, r4
    abca:	e7ab      	b.n	ab24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    abcc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    abd0:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    abd4:	4322      	orrs	r2, r4
    abd6:	e79f      	b.n	ab18 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    abd8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    abdc:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    abe0:	4322      	orrs	r2, r4
    abe2:	e793      	b.n	ab0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    abe4:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    abe8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    abec:	4322      	orrs	r2, r4
    abee:	e787      	b.n	ab00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    abf0:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    abf4:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    abf8:	4322      	orrs	r2, r4
    abfa:	e77b      	b.n	aaf4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    abfc:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    ac00:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    ac04:	4322      	orrs	r2, r4
    ac06:	e76f      	b.n	aae8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    ac08:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    ac0c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    ac10:	4322      	orrs	r2, r4
    ac12:	e762      	b.n	aada <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    ac14:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    ac18:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    ac1c:	4322      	orrs	r2, r4
    ac1e:	e755      	b.n	aacc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    ac20:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    ac24:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    ac28:	4322      	orrs	r2, r4
    ac2a:	e748      	b.n	aabe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    ac2c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    ac30:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    ac34:	4322      	orrs	r2, r4
    ac36:	e73b      	b.n	aab0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    ac38:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    ac3c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    ac40:	e72f      	b.n	aaa2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    ac42:	bf00      	nop

0000ac44 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    ac44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    ac48:	2301      	movs	r3, #1
    ac4a:	f100 0834 	add.w	r8, r0, #52	; 0x34
    ac4e:	4e4d      	ldr	r6, [pc, #308]	; (ad84 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac50:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    ac54:	b083      	sub	sp, #12
    ac56:	4681      	mov	r9, r0
    m_useAltOutput = true;
    ac58:	4645      	mov	r5, r8
    ac5a:	f100 0444 	add.w	r4, r0, #68	; 0x44
    ac5e:	2200      	movs	r2, #0
    ac60:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    ac62:	f855 3b04 	ldr.w	r3, [r5], #4
    ac66:	4313      	orrs	r3, r2
    ac68:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ac6c:	4630      	mov	r0, r6
    ac6e:	4639      	mov	r1, r7
    ac70:	f7fe febe 	bl	99f0 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    ac74:	42a5      	cmp	r5, r4
    ac76:	d002      	beq.n	ac7e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    ac78:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    ac7c:	e7f1      	b.n	ac62 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    ac7e:	f109 0318 	add.w	r3, r9, #24
    ac82:	4e40      	ldr	r6, [pc, #256]	; (ad84 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ac84:	9301      	str	r3, [sp, #4]
    ac86:	469b      	mov	fp, r3
    ac88:	f04f 0a00 	mov.w	sl, #0
    ac8c:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    ac8e:	f1ba 0f06 	cmp.w	sl, #6
    ac92:	4630      	mov	r0, r6
    ac94:	4639      	mov	r1, r7
    ac96:	f10a 0a01 	add.w	sl, sl, #1
    ac9a:	d148      	bne.n	ad2e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    ac9c:	f8db 2000 	ldr.w	r2, [fp]
    aca0:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    aca4:	4837      	ldr	r0, [pc, #220]	; (ad84 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    aca6:	4313      	orrs	r3, r2
    aca8:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    acac:	2100      	movs	r1, #0
    acae:	f7fe fe9f 	bl	99f0 <Delay_cycles>
    acb2:	4835      	ldr	r0, [pc, #212]	; (ad88 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    acb4:	4e33      	ldr	r6, [pc, #204]	; (ad84 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    acb6:	2100      	movs	r1, #0
    acb8:	f7fe fe9a 	bl	99f0 <Delay_cycles>
    acbc:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    acbe:	f858 2b04 	ldr.w	r2, [r8], #4
    acc2:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    acc6:	ea23 0302 	bic.w	r3, r3, r2
    acca:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    acce:	4630      	mov	r0, r6
    acd0:	4639      	mov	r1, r7
    acd2:	f7fe fe8d 	bl	99f0 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    acd6:	4545      	cmp	r5, r8
    acd8:	d1f1      	bne.n	acbe <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    acda:	f3bf 8f5b 	dmb	ish
    acde:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    ace2:	e853 2f00 	ldrex	r2, [r3]
    ace6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    acea:	e843 2100 	strex	r1, r2, [r3]
    acee:	2900      	cmp	r1, #0
    acf0:	d1f7      	bne.n	ace2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    acf2:	f3bf 8f5b 	dmb	ish
    acf6:	4e23      	ldr	r6, [pc, #140]	; (ad84 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    acf8:	2500      	movs	r5, #0
    acfa:	2700      	movs	r7, #0
    acfc:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    acfe:	2d06      	cmp	r5, #6
    ad00:	461a      	mov	r2, r3
    ad02:	4630      	mov	r0, r6
    ad04:	4639      	mov	r1, r7
    ad06:	f105 0501 	add.w	r5, r5, #1
    ad0a:	d122      	bne.n	ad52 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    ad0c:	681a      	ldr	r2, [r3, #0]
    ad0e:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    ad12:	481c      	ldr	r0, [pc, #112]	; (ad84 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ad14:	ea23 0302 	bic.w	r3, r3, r2
    ad18:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ad1c:	2100      	movs	r1, #0
    ad1e:	f7fe fe67 	bl	99f0 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    ad22:	2300      	movs	r3, #0
    ad24:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    ad28:	b003      	add	sp, #12
    ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    ad2e:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    ad32:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    ad36:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    ad3a:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    ad3c:	4313      	orrs	r3, r2
    ad3e:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ad42:	f7fe fe55 	bl	99f0 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    ad46:	f1ba 0f07 	cmp.w	sl, #7
    ad4a:	f10b 0b04 	add.w	fp, fp, #4
    ad4e:	d19e      	bne.n	ac8e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    ad50:	e7af      	b.n	acb2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    ad52:	f853 3c18 	ldr.w	r3, [r3, #-24]
    ad56:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    ad5a:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    ad5c:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    ad60:	ea23 0302 	bic.w	r3, r3, r2
    ad64:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    ad68:	9b01      	ldr	r3, [sp, #4]
    ad6a:	3304      	adds	r3, #4
    ad6c:	9301      	str	r3, [sp, #4]
    ad6e:	f7fe fe3f 	bl	99f0 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    ad72:	2d07      	cmp	r5, #7
    ad74:	d1c2      	bne.n	acfc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    ad76:	2300      	movs	r3, #0
    ad78:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    ad7c:	b003      	add	sp, #12
    ad7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad82:	bf00      	nop
    ad84:	002dc6c0 	.word	0x002dc6c0
    ad88:	005b8d80 	.word	0x005b8d80

0000ad8c <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    ad8e:	4d0e      	ldr	r5, [pc, #56]	; (adc8 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    ad90:	682b      	ldr	r3, [r5, #0]
    ad92:	f013 0401 	ands.w	r4, r3, #1
    ad96:	d002      	beq.n	ad9e <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    ad98:	4b0c      	ldr	r3, [pc, #48]	; (adcc <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    ad9a:	6818      	ldr	r0, [r3, #0]
    ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad9e:	2010      	movs	r0, #16
    ada0:	f008 fba2 	bl	134e8 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    ada4:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    ada6:	4909      	ldr	r1, [pc, #36]	; (adcc <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    ada8:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    adaa:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    adac:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    adae:	2617      	movs	r6, #23
      m_initialized(false) {
    adb0:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    adb2:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    adb4:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    adb6:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    adb8:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    adba:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    adbc:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    adbe:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    adc0:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    adc2:	7342      	strb	r2, [r0, #13]
}
    adc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adc6:	bf00      	nop
    adc8:	20001c08 	.word	0x20001c08
    adcc:	20001c10 	.word	0x20001c10

0000add0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    add0:	7843      	ldrb	r3, [r0, #1]
    add2:	428b      	cmp	r3, r1
    add4:	d06d      	beq.n	aeb2 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    add6:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    addc:	d071      	beq.n	aec2 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    adde:	d363      	bcc.n	aea8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    ade0:	2902      	cmp	r1, #2
    ade2:	d16b      	bne.n	aebc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    ade4:	4e39      	ldr	r6, [pc, #228]	; (aecc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    ade6:	f240 188f 	movw	r8, #399	; 0x18f
    adea:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    adee:	4a38      	ldr	r2, [pc, #224]	; (aed0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    adf0:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    adf2:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    adf4:	4b37      	ldr	r3, [pc, #220]	; (aed4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    adf6:	f36f 0441 	bfc	r4, #1, #1
    adfa:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    adfc:	681c      	ldr	r4, [r3, #0]
    adfe:	f36f 0441 	bfc	r4, #1, #1
    ae02:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    ae04:	6893      	ldr	r3, [r2, #8]
    ae06:	079c      	lsls	r4, r3, #30
    ae08:	d4fc      	bmi.n	ae04 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    ae0a:	4d32      	ldr	r5, [pc, #200]	; (aed4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    ae0c:	68ac      	ldr	r4, [r5, #8]
    ae0e:	f014 0402 	ands.w	r4, r4, #2
    ae12:	d1fb      	bne.n	ae0c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    ae14:	4631      	mov	r1, r6
    ae16:	7800      	ldrb	r0, [r0, #0]
    ae18:	4e2f      	ldr	r6, [pc, #188]	; (aed8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    ae1a:	f000 feed 	bl	bbf8 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    ae1e:	492f      	ldr	r1, [pc, #188]	; (aedc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    ae20:	4a2f      	ldr	r2, [pc, #188]	; (aee0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    ae22:	4b2b      	ldr	r3, [pc, #172]	; (aed0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    ae24:	482f      	ldr	r0, [pc, #188]	; (aee4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    ae26:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    ae28:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    ae2a:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ae2c:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ae2e:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ae30:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ae32:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ae34:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ae36:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    ae38:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    ae3a:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    ae3c:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    ae40:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    ae42:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    ae44:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    ae48:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    ae4a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    ae4e:	3018      	adds	r0, #24
    ae50:	3104      	adds	r1, #4
    ae52:	3204      	adds	r2, #4
    ae54:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ae56:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ae58:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ae5a:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ae5c:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ae5e:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    ae60:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    ae62:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    ae64:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    ae68:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    ae6c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    ae70:	f856 0b04 	ldr.w	r0, [r6], #4
    ae74:	4639      	mov	r1, r7
    ae76:	3030      	adds	r0, #48	; 0x30
    ae78:	f000 fcf2 	bl	b860 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    ae7c:	42b4      	cmp	r4, r6
    ae7e:	d1f7      	bne.n	ae70 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    ae80:	4a13      	ldr	r2, [pc, #76]	; (aed0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    ae82:	4914      	ldr	r1, [pc, #80]	; (aed4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    ae84:	6813      	ldr	r3, [r2, #0]
    ae86:	f043 0302 	orr.w	r3, r3, #2
    ae8a:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    ae8c:	680b      	ldr	r3, [r1, #0]
    ae8e:	f043 0302 	orr.w	r3, r3, #2
    ae92:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    ae94:	6893      	ldr	r3, [r2, #8]
    ae96:	0799      	lsls	r1, r3, #30
    ae98:	d4fc      	bmi.n	ae94 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    ae9a:	4a0e      	ldr	r2, [pc, #56]	; (aed4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    ae9c:	6893      	ldr	r3, [r2, #8]
    ae9e:	079b      	lsls	r3, r3, #30
    aea0:	d4fc      	bmi.n	ae9c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    aea2:	2001      	movs	r0, #1
    aea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    aea8:	f04f 0813 	mov.w	r8, #19
    aeac:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    aeae:	4e0e      	ldr	r6, [pc, #56]	; (aee8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    aeb0:	e79d      	b.n	adee <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    aeb2:	7b83      	ldrb	r3, [r0, #14]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	d08e      	beq.n	add6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    aeb8:	2000      	movs	r0, #0
    aeba:	4770      	bx	lr
        return false;
    aebc:	2000      	movs	r0, #0
    aebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    aec2:	f04f 0863 	mov.w	r8, #99	; 0x63
    aec6:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    aec8:	4e08      	ldr	r6, [pc, #32]	; (aeec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    aeca:	e790      	b.n	adee <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    aecc:	001e8480 	.word	0x001e8480
    aed0:	41016000 	.word	0x41016000
    aed4:	41018000 	.word	0x41018000
    aed8:	00023018 	.word	0x00023018
    aedc:	41016004 	.word	0x41016004
    aee0:	41016008 	.word	0x41016008
    aee4:	4101600c 	.word	0x4101600c
    aee8:	000186a0 	.word	0x000186a0
    aeec:	0007a120 	.word	0x0007a120

0000aef0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    aef0:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    aef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aef6:	4606      	mov	r6, r0
    aef8:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    aefa:	d036      	beq.n	af6a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    aefc:	460c      	mov	r4, r1
    aefe:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    af02:	2f03      	cmp	r7, #3
    af04:	d907      	bls.n	af16 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    af06:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    af08:	7b38      	ldrb	r0, [r7, #12]
    af0a:	1b40      	subs	r0, r0, r5
    af0c:	fab0 f080 	clz	r0, r0
    af10:	0940      	lsrs	r0, r0, #5
    af12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af16:	f8df 90c0 	ldr.w	r9, [pc, #192]	; afd8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af1a:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    af1e:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af20:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    af24:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af26:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    af28:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af2c:	685b      	ldr	r3, [r3, #4]
    af2e:	4629      	mov	r1, r5
    af30:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    af32:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    af36:	6803      	ldr	r3, [r0, #0]
    af38:	4629      	mov	r1, r5
    af3a:	685b      	ldr	r3, [r3, #4]
    af3c:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    af3e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    af42:	f997 2002 	ldrsb.w	r2, [r7, #2]
    af46:	684b      	ldr	r3, [r1, #4]
    af48:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    af4c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    af50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    af54:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    af56:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    af5a:	bf0c      	ite	eq
    af5c:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    af60:	f36f 0200 	bfcne	r2, #0, #1
    af64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    af68:	e7ce      	b.n	af08 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    af6a:	f1a2 0709 	sub.w	r7, r2, #9
    af6e:	2f03      	cmp	r7, #3
    af70:	d907      	bls.n	af82 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    af72:	7b33      	ldrb	r3, [r6, #12]
    af74:	42ab      	cmp	r3, r5
    af76:	d002      	beq.n	af7e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    af78:	2000      	movs	r0, #0
}
    af7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af7e:	2401      	movs	r4, #1
    af80:	e7bf      	b.n	af02 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af82:	f8df 9054 	ldr.w	r9, [pc, #84]	; afd8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    af86:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    af88:	f8d9 0000 	ldr.w	r0, [r9]
    af8c:	6803      	ldr	r3, [r0, #0]
    af8e:	4611      	mov	r1, r2
    af90:	685b      	ldr	r3, [r3, #4]
    af92:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    af94:	f8d9 0004 	ldr.w	r0, [r9, #4]
    af98:	6803      	ldr	r3, [r0, #0]
    af9a:	4629      	mov	r1, r5
    af9c:	685b      	ldr	r3, [r3, #4]
    af9e:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    afa0:	f996 2002 	ldrsb.w	r2, [r6, #2]
    afa4:	6873      	ldr	r3, [r6, #4]
    afa6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    afaa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    afae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    afb2:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    afb4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    afb8:	d004      	beq.n	afc4 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    afba:	f36f 0200 	bfc	r2, #0, #1
    afbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    afc2:	e7d6      	b.n	af72 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    afc4:	f042 0201 	orr.w	r2, r2, #1
    afc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    afcc:	7b33      	ldrb	r3, [r6, #12]
    afce:	2b0a      	cmp	r3, #10
    afd0:	d1d2      	bne.n	af78 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    afd2:	2401      	movs	r4, #1
    afd4:	e7a1      	b.n	af1a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    afd6:	bf00      	nop
    afd8:	00023018 	.word	0x00023018

0000afdc <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    afdc:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    afde:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    afe0:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    afe2:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    afe4:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    afe6:	2101      	movs	r1, #1
    afe8:	f7ff fef2 	bl	add0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    afec:	f995 2002 	ldrsb.w	r2, [r5, #2]
    aff0:	6868      	ldr	r0, [r5, #4]
    aff2:	01d2      	lsls	r2, r2, #7
    aff4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    aff8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    affc:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    affe:	2101      	movs	r1, #1
    b000:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b002:	2600      	movs	r6, #0
    b004:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b008:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b00a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    b00e:	f010 0f01 	tst.w	r0, #1
    b012:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    b016:	f04f 040c 	mov.w	r4, #12
    b01a:	bf0c      	ite	eq
    b01c:	f364 0003 	bfieq	r0, r4, #0, #4
    b020:	f364 1007 	bfine	r0, r4, #4, #4
    b024:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b028:	4b2d      	ldr	r3, [pc, #180]	; (b0e0 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    b02a:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b02c:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b02e:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b030:	f995 2003 	ldrsb.w	r2, [r5, #3]
    b034:	68a9      	ldr	r1, [r5, #8]
    b036:	01d2      	lsls	r2, r2, #7
    b038:	4413      	add	r3, r2
    b03a:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b03c:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b03e:	2600      	movs	r6, #0
    b040:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b044:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b046:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    b04a:	f011 0f01 	tst.w	r1, #1
    b04e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    b052:	4e24      	ldr	r6, [pc, #144]	; (b0e4 <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    b054:	f04f 040c 	mov.w	r4, #12
    b058:	bf14      	ite	ne
    b05a:	f364 1107 	bfine	r1, r4, #4, #4
    b05e:	f364 0103 	bfieq	r1, r4, #0, #4
    b062:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b066:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b06a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b06e:	2400      	movs	r4, #0
    b070:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    b072:	f856 0b04 	ldr.w	r0, [r6], #4
    b076:	f3c4 0346 	ubfx	r3, r4, #1, #7
    b07a:	6802      	ldr	r2, [r0, #0]
    b07c:	442b      	add	r3, r5
    b07e:	6852      	ldr	r2, [r2, #4]
    b080:	7b19      	ldrb	r1, [r3, #12]
    b082:	3401      	adds	r4, #1
    b084:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b086:	2c04      	cmp	r4, #4
    b088:	d1f3      	bne.n	b072 <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b08a:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b08c:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b090:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b092:	686b      	ldr	r3, [r5, #4]
    b094:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b098:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b09c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b0a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b0a4:	bf14      	ite	ne
    b0a6:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b0aa:	f042 0201 	orreq.w	r2, r2, #1
    b0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b0b2:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b0b4:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b0b8:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b0ba:	68ab      	ldr	r3, [r5, #8]
    b0bc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b0c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b0c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b0c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b0cc:	bf0c      	ite	eq
    b0ce:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b0d2:	f36f 0200 	bfcne	r2, #0, #1
    b0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    b0da:	2301      	movs	r3, #1
    b0dc:	73ab      	strb	r3, [r5, #14]
    b0de:	bd70      	pop	{r4, r5, r6, pc}
    b0e0:	41008000 	.word	0x41008000
    b0e4:	00023018 	.word	0x00023018

0000b0e8 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    b0e8:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    b0ea:	f7ff fe4f 	bl	ad8c <_ZN9ClearCore12MotorManager8InstanceEv>
    b0ee:	4b01      	ldr	r3, [pc, #4]	; (b0f4 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    b0f0:	6018      	str	r0, [r3, #0]
    b0f2:	bd08      	pop	{r3, pc}
    b0f4:	20001c0c 	.word	0x20001c0c

0000b0f8 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0fa:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b0fc:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    b0fe:	f890 3020 	ldrb.w	r3, [r0, #32]
    b102:	b113      	cbz	r3, b10a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    b104:	2300      	movs	r3, #0
    b106:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    b108:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    b10a:	b362      	cbz	r2, b166 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    b10c:	69a0      	ldr	r0, [r4, #24]
    b10e:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b110:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    b112:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b114:	bb2b      	cbnz	r3, b162 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    b116:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b118:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b11c:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b120:	2700      	movs	r7, #0
    b122:	4032      	ands	r2, r6
    b124:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b126:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b128:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b12a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b12e:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b130:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b134:	f010 fd40 	bl	1bbb8 <__aeabi_i2d>
    b138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b13c:	4619      	mov	r1, r3
    b13e:	f011 f83b 	bl	1c1b8 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b142:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b144:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b146:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b148:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b14a:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b14e:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b150:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b152:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b154:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b156:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b158:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b15a:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b15c:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b15e:	4618      	mov	r0, r3
    b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b162:	4240      	negs	r0, r0
    b164:	e7d7      	b.n	b116 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b166:	6960      	ldr	r0, [r4, #20]
    b168:	1a08      	subs	r0, r1, r0
            break;
    b16a:	e7d5      	b.n	b118 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b16c <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b16e:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b170:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b172:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b174:	0fca      	lsrs	r2, r1, #31
    b176:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b17a:	f884 3020 	strb.w	r3, [r4, #32]
    b17e:	4608      	mov	r0, r1
    b180:	f010 fd1a 	bl	1bbb8 <__aeabi_i2d>
    b184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b188:	4619      	mov	r1, r3
    b18a:	f011 f815 	bl	1c1b8 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b18e:	17c3      	asrs	r3, r0, #31
    b190:	03d9      	lsls	r1, r3, #15
    b192:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b196:	f241 3288 	movw	r2, #5000	; 0x1388
    b19a:	2300      	movs	r3, #0
    b19c:	03c0      	lsls	r0, r0, #15
    b19e:	f011 f9b1 	bl	1c504 <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b1a2:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b1a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b1a8:	03de      	lsls	r6, r3, #15
    b1aa:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b1ac:	42b2      	cmp	r2, r6
    b1ae:	f04f 0300 	mov.w	r3, #0
    b1b2:	eb73 0507 	sbcs.w	r5, r3, r7
    b1b6:	bfbc      	itt	lt
    b1b8:	4616      	movlt	r6, r2
    b1ba:	461f      	movlt	r7, r3
    b1bc:	4286      	cmp	r6, r0
    b1be:	460b      	mov	r3, r1
    b1c0:	4602      	mov	r2, r0
    b1c2:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b1c6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b1ca:	bfb8      	it	lt
    b1cc:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b1ce:	2700      	movs	r7, #0
    b1d0:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b1d4:	4030      	ands	r0, r6
    b1d6:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b1d8:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b1da:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b1dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b1de:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b1e0:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b1e2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b1e6:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b1e8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b1ec:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b1ee:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b1f0:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b1f2:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b1f4:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b1f6:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b1f8:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b1fa:	b662      	cpsie	i
}
    b1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1fe:	bf00      	nop

0000b200 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b204:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b206:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b20a:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b20c:	b085      	sub	sp, #20
    b20e:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b210:	d038      	beq.n	b284 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b212:	2b07      	cmp	r3, #7
    b214:	f200 80da 	bhi.w	b3cc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b218:	e8df f013 	tbh	[pc, r3, lsl #1]
    b21c:	00d8002f 	.word	0x00d8002f
    b220:	00be01d7 	.word	0x00be01d7
    b224:	025f0086 	.word	0x025f0086
    b228:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b22c:	7b41      	ldrb	r1, [r0, #13]
    b22e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b232:	428b      	cmp	r3, r1
    b234:	f000 822d 	beq.w	b692 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b238:	6980      	ldr	r0, [r0, #24]
    b23a:	69e3      	ldr	r3, [r4, #28]
    b23c:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b23e:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b242:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b246:	2300      	movs	r3, #0
    b248:	4016      	ands	r6, r2
    b24a:	401f      	ands	r7, r3
    b24c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b250:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b254:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b256:	2300      	movs	r3, #0
    b258:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b25a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b25e:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b260:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b264:	0bf2      	lsrs	r2, r6, #15
    b266:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b26a:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b26c:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b26e:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b270:	6962      	ldr	r2, [r4, #20]
    b272:	b101      	cbz	r1, b276 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b274:	425b      	negs	r3, r3
    b276:	4413      	add	r3, r2
    b278:	6163      	str	r3, [r4, #20]
}
    b27a:	b005      	add	sp, #20
    b27c:	ecbd 8b02 	vpop	{d8}
    b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b284:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b286:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b28a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b28e:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b292:	1457      	asrs	r7, r2, #17
    b294:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b296:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b29a:	2900      	cmp	r1, #0
    b29c:	d163      	bne.n	b366 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b29e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b2a0:	2d00      	cmp	r5, #0
    b2a2:	f000 8117 	beq.w	b4d4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b2a6:	7b41      	ldrb	r1, [r0, #13]
    b2a8:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b2ac:	9100      	str	r1, [sp, #0]
    b2ae:	4291      	cmp	r1, r2
    b2b0:	f000 81f8 	beq.w	b6a4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b2b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b2b8:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b2ba:	2305      	movs	r3, #5
    b2bc:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b2be:	6520      	str	r0, [r4, #80]	; 0x50
    b2c0:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b2c2:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b2c6:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b2ca:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b2cc:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b2d0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b2d4:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b2d6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b2da:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b2dc:	f300 80ab 	bgt.w	b436 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b2e0:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b2e2:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b2e6:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b2ea:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b2ec:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b2f0:	4629      	mov	r1, r5
    b2f2:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b2f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b2f8:	f011 f954 	bl	1c5a4 <__aeabi_uldivmod>
    b2fc:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b2fe:	fba0 bc05 	umull	fp, ip, r0, r5
    b302:	fb00 cc03 	mla	ip, r0, r3, ip
    b306:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b30a:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b30c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b310:	eb47 0709 	adc.w	r7, r7, r9
    b314:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b318:	2900      	cmp	r1, #0
    b31a:	f000 816e 	beq.w	b5fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b31e:	2307      	movs	r3, #7
    b320:	7323      	strb	r3, [r4, #12]
    b322:	9900      	ldr	r1, [sp, #0]
    b324:	69e3      	ldr	r3, [r4, #28]
    b326:	e79d      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b328:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b32a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b32c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b330:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b334:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b338:	1952      	adds	r2, r2, r5
    b33a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b33e:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b340:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b344:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b348:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b34a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b34e:	da54      	bge.n	b3fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b350:	2900      	cmp	r1, #0
    b352:	dd52      	ble.n	b3fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b354:	2a01      	cmp	r2, #1
    b356:	f173 0100 	sbcs.w	r1, r3, #0
    b35a:	db4e      	blt.n	b3fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b35c:	461f      	mov	r7, r3
    b35e:	4616      	mov	r6, r2
    b360:	69e3      	ldr	r3, [r4, #28]
    b362:	7b61      	ldrb	r1, [r4, #13]
    b364:	e77e      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b366:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b368:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b36a:	2b00      	cmp	r3, #0
    b36c:	f000 80a1 	beq.w	b4b2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b370:	2d00      	cmp	r5, #0
    b372:	f040 8130 	bne.w	b5d6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b376:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b37a:	6820      	ldr	r0, [r4, #0]
    b37c:	6523      	str	r3, [r4, #80]	; 0x50
    b37e:	2100      	movs	r1, #0
    b380:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b382:	7362      	strb	r2, [r4, #13]
    b384:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b388:	4620      	mov	r0, r4
    b38a:	4798      	blx	r3
    b38c:	7b63      	ldrb	r3, [r4, #13]
    b38e:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b392:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b394:	9300      	str	r3, [sp, #0]
    b396:	e094      	b.n	b4c2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b398:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b39c:	7b43      	ldrb	r3, [r0, #13]
    b39e:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b3a2:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b3a4:	4652      	mov	r2, sl
    b3a6:	eb16 060a 	adds.w	r6, r6, sl
    b3aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b3ae:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b3b2:	415f      	adcs	r7, r3
    b3b4:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b3b8:	2900      	cmp	r1, #0
    b3ba:	d03f      	beq.n	b43c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b3bc:	f1ba 0f00 	cmp.w	sl, #0
    b3c0:	d139      	bne.n	b436 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b3c2:	2306      	movs	r3, #6
    b3c4:	7323      	strb	r3, [r4, #12]
    b3c6:	9900      	ldr	r1, [sp, #0]
    b3c8:	69e3      	ldr	r3, [r4, #28]
    b3ca:	e74b      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b3cc:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b3ce:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b3d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b3d4:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b3d8:	2000      	movs	r0, #0
    b3da:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b3dc:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b3de:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b3e0:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b3e2:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b3e4:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b3e6:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b3e8:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b3ec:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b3f0:	b005      	add	sp, #20
    b3f2:	ecbd 8b02 	vpop	{d8}
    b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b3fa:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b3fc:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b3fe:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b400:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b402:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b406:	7322      	strb	r2, [r4, #12]
    b408:	69e3      	ldr	r3, [r4, #28]
    b40a:	7b61      	ldrb	r1, [r4, #13]
    b40c:	e72a      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b40e:	2302      	movs	r3, #2
    b410:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b412:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b416:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b418:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b41c:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b41e:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b420:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b424:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b426:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b428:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b42c:	f280 80a2 	bge.w	b574 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b430:	2d00      	cmp	r5, #0
    b432:	f340 809f 	ble.w	b574 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b436:	9900      	ldr	r1, [sp, #0]
    b438:	69e3      	ldr	r3, [r4, #28]
    b43a:	e713      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b43c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b440:	4286      	cmp	r6, r0
    b442:	eb77 0501 	sbcs.w	r5, r7, r1
    b446:	da03      	bge.n	b450 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b448:	2e01      	cmp	r6, #1
    b44a:	f177 0500 	sbcs.w	r5, r7, #0
    b44e:	daf2      	bge.n	b436 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b450:	2500      	movs	r5, #0
    b452:	1a31      	subs	r1, r6, r0
    b454:	4628      	mov	r0, r5
    b456:	f011 f8a5 	bl	1c5a4 <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b45a:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b45c:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b460:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b462:	fb00 9e03 	mla	lr, r0, r3, r9
    b466:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b468:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b46c:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b470:	fb0e 330c 	mla	r3, lr, ip, r3
    b474:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b476:	1a32      	subs	r2, r6, r0
    b478:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b47c:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b480:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b482:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b486:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b48a:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b48c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b490:	f280 80a9 	bge.w	b5e6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b494:	42a8      	cmp	r0, r5
    b496:	f340 80a6 	ble.w	b5e6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b49a:	2a01      	cmp	r2, #1
    b49c:	f173 0100 	sbcs.w	r1, r3, #0
    b4a0:	f2c0 80a1 	blt.w	b5e6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b4a4:	2004      	movs	r0, #4
    b4a6:	461f      	mov	r7, r3
    b4a8:	9900      	ldr	r1, [sp, #0]
    b4aa:	7320      	strb	r0, [r4, #12]
    b4ac:	4616      	mov	r6, r2
    b4ae:	69e3      	ldr	r3, [r4, #28]
    b4b0:	e6d8      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b4b2:	7b42      	ldrb	r2, [r0, #13]
    b4b4:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b4b6:	4619      	mov	r1, r3
    b4b8:	2000      	movs	r0, #0
    b4ba:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b4be:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b4c0:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b4c2:	4555      	cmp	r5, sl
    b4c4:	f000 80db 	beq.w	b67e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b4c8:	dda1      	ble.n	b40e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b4ca:	2305      	movs	r3, #5
    b4cc:	7323      	strb	r3, [r4, #12]
    b4ce:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b4d2:	e6f6      	b.n	b2c2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b4d4:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b4d8:	4611      	mov	r1, r2
    b4da:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b4dc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b4e0:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b4e2:	4613      	mov	r3, r2
    b4e4:	429f      	cmp	r7, r3
    b4e6:	bf08      	it	eq
    b4e8:	428e      	cmpeq	r6, r1
    b4ea:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b4ee:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b4f2:	d00e      	beq.n	b512 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b4f4:	6803      	ldr	r3, [r0, #0]
    b4f6:	689b      	ldr	r3, [r3, #8]
    b4f8:	4798      	blx	r3
    b4fa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b4fe:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b500:	2b00      	cmp	r3, #0
    b502:	f040 80ca 	bne.w	b69a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b506:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b50a:	e9cd 2300 	strd	r2, r3, [sp]
    b50e:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b512:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b516:	0fcb      	lsrs	r3, r1, #31
    b518:	18c0      	adds	r0, r0, r3
    b51a:	464e      	mov	r6, r9
    b51c:	f141 0100 	adc.w	r1, r1, #0
    b520:	17f7      	asrs	r7, r6, #31
    b522:	1049      	asrs	r1, r1, #1
    b524:	ea4f 0030 	mov.w	r0, r0, rrx
    b528:	464a      	mov	r2, r9
    b52a:	463b      	mov	r3, r7
    b52c:	f010 ffea 	bl	1c504 <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b530:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b534:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b538:	464a      	mov	r2, r9
    b53a:	463b      	mov	r3, r7
    b53c:	fb8a 010a 	smull	r0, r1, sl, sl
    b540:	f010 ffe0 	bl	1c504 <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b548:	1a82      	subs	r2, r0, r2
    b54a:	eb61 0303 	sbc.w	r3, r1, r3
    b54e:	4610      	mov	r0, r2
    b550:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b552:	e9dd 2300 	ldrd	r2, r3, [sp]
    b556:	4282      	cmp	r2, r0
    b558:	418b      	sbcs	r3, r1
    b55a:	db63      	blt.n	b624 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b55c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b560:	4555      	cmp	r5, sl
    b562:	f340 8091 	ble.w	b688 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b566:	2305      	movs	r3, #5
    b568:	7323      	strb	r3, [r4, #12]
    b56a:	7b63      	ldrb	r3, [r4, #13]
    b56c:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b570:	9300      	str	r3, [sp, #0]
    b572:	e6a6      	b.n	b2c2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b574:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b576:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b57a:	4691      	mov	r9, r2
    b57c:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b57e:	461a      	mov	r2, r3
    b580:	4629      	mov	r1, r5
    b582:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b584:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b588:	2000      	movs	r0, #0
    b58a:	f011 f80b 	bl	1c5a4 <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b58e:	4602      	mov	r2, r0
    b590:	fba2 0105 	umull	r0, r1, r2, r5
    b594:	2300      	movs	r3, #0
    b596:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b59a:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b59e:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b5a0:	4642      	mov	r2, r8
    b5a2:	464b      	mov	r3, r9
    b5a4:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b5a8:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b5ac:	f010 fffa 	bl	1c5a4 <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b5b0:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b5b4:	0849      	lsrs	r1, r1, #1
    b5b6:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b5ba:	1a12      	subs	r2, r2, r0
    b5bc:	eb63 0301 	sbc.w	r3, r3, r1
    b5c0:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b5c4:	2303      	movs	r3, #3
    b5c6:	7323      	strb	r3, [r4, #12]
    b5c8:	e6ec      	b.n	b3a4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b5ca:	7b43      	ldrb	r3, [r0, #13]
    b5cc:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b5ce:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b5d2:	9300      	str	r3, [sp, #0]
    b5d4:	e71d      	b.n	b412 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b5d6:	7b40      	ldrb	r0, [r0, #13]
    b5d8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b5dc:	9000      	str	r0, [sp, #0]
    b5de:	4290      	cmp	r0, r2
    b5e0:	f47f af6a 	bne.w	b4b8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b5e4:	e6c9      	b.n	b37a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b5e6:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b5e8:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b5ea:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b5ec:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b5ee:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b5f2:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b5f4:	7322      	strb	r2, [r4, #12]
    b5f6:	69e3      	ldr	r3, [r4, #28]
    b5f8:	e634      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b5fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b5fe:	fb8a 010a 	smull	r0, r1, sl, sl
    b602:	f010 ffcf 	bl	1c5a4 <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b606:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b60a:	0849      	lsrs	r1, r1, #1
    b60c:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b610:	1a12      	subs	r2, r2, r0
    b612:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b616:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b618:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b61c:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b61e:	7320      	strb	r0, [r4, #12]
    b620:	69e3      	ldr	r3, [r4, #28]
    b622:	e61f      	b.n	b264 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b624:	69a6      	ldr	r6, [r4, #24]
    b626:	17f1      	asrs	r1, r6, #31
    b628:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b62e:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b630:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b632:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    b636:	4159      	adcs	r1, r3
    b638:	460b      	mov	r3, r1
    b63a:	fb00 f107 	mul.w	r1, r0, r7
    b63e:	fb09 1303 	mla	r3, r9, r3, r1
    b642:	fba0 0109 	umull	r0, r1, r0, r9
    b646:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    b648:	f010 ff1e 	bl	1c488 <__aeabi_l2f>
    b64c:	ee00 0a10 	vmov	s0, r0
    b650:	eeb5 0a40 	vcmp.f32	s0, #0.0
    b654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b658:	eeb1 8ac0 	vsqrt.f32	s16, s0
    b65c:	d439      	bmi.n	b6d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    b65e:	ee18 0a10 	vmov	r0, s16
    b662:	f010 ffb7 	bl	1c5d4 <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    b666:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b66a:	4282      	cmp	r2, r0
    b66c:	f04f 0300 	mov.w	r3, #0
    b670:	eb73 0601 	sbcs.w	r6, r3, r1
    b674:	bfb8      	it	lt
    b676:	4610      	movlt	r0, r2
    b678:	6520      	str	r0, [r4, #80]	; 0x50
    b67a:	4682      	mov	sl, r0
    b67c:	e770      	b.n	b560 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    b67e:	2303      	movs	r3, #3
    b680:	7323      	strb	r3, [r4, #12]
    b682:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b686:	e68d      	b.n	b3a4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    b688:	2302      	movs	r3, #2
    b68a:	7323      	strb	r3, [r4, #12]
    b68c:	7b63      	ldrb	r3, [r4, #13]
    b68e:	9300      	str	r3, [sp, #0]
    b690:	e6bf      	b.n	b412 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    b692:	69c0      	ldr	r0, [r0, #28]
    b694:	69a3      	ldr	r3, [r4, #24]
    b696:	1ac0      	subs	r0, r0, r3
    b698:	e5d1      	b.n	b23e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    b69a:	7b63      	ldrb	r3, [r4, #13]
    b69c:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b6a0:	9300      	str	r3, [sp, #0]
    b6a2:	e609      	b.n	b2b8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    b6a4:	464a      	mov	r2, r9
    b6a6:	17d3      	asrs	r3, r2, #31
    b6a8:	fb85 0105 	smull	r0, r1, r5, r5
    b6ac:	f010 ff2a 	bl	1c504 <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b6b0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    b6b4:	1049      	asrs	r1, r1, #1
    b6b6:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b6ba:	1ab6      	subs	r6, r6, r2
    b6bc:	eb67 0703 	sbc.w	r7, r7, r3
    b6c0:	4286      	cmp	r6, r0
    b6c2:	eb77 0301 	sbcs.w	r3, r7, r1
    b6c6:	bfb4      	ite	lt
    b6c8:	2301      	movlt	r3, #1
    b6ca:	2300      	movge	r3, #0
    b6cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b6d0:	e716      	b.n	b500 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    b6d2:	f00f fcad 	bl	1b030 <sqrtf>
    b6d6:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b6d8:	e7c1      	b.n	b65e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    b6da:	7b43      	ldrb	r3, [r0, #13]
    b6dc:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b6de:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b6e2:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    b6e6:	9300      	str	r3, [sp, #0]
    b6e8:	e5eb      	b.n	b2c2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    b6ea:	bf00      	nop

0000b6ec <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    b6ec:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    b6ee:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    b6f0:	4916      	ldr	r1, [pc, #88]	; (b74c <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    b6f2:	6001      	str	r1, [r0, #0]
    b6f4:	2200      	movs	r2, #0
    b6f6:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    b6fa:	2501      	movs	r5, #1
    b6fc:	2102      	movs	r1, #2
    b6fe:	2600      	movs	r6, #0
    b700:	2700      	movs	r7, #0
    b702:	f362 1486 	bfi	r4, r2, #6, #1
    b706:	7404      	strb	r4, [r0, #16]
    b708:	6042      	str	r2, [r0, #4]
    b70a:	6082      	str	r2, [r0, #8]
    b70c:	7302      	strb	r2, [r0, #12]
    b70e:	7342      	strb	r2, [r0, #13]
    b710:	6142      	str	r2, [r0, #20]
    b712:	6182      	str	r2, [r0, #24]
    b714:	61c2      	str	r2, [r0, #28]
    b716:	f880 2020 	strb.w	r2, [r0, #32]
    b71a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    b71e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    b722:	6282      	str	r2, [r0, #40]	; 0x28
    b724:	6402      	str	r2, [r0, #64]	; 0x40
    b726:	6442      	str	r2, [r0, #68]	; 0x44
    b728:	6502      	str	r2, [r0, #80]	; 0x50
    b72a:	6642      	str	r2, [r0, #100]	; 0x64
    b72c:	7385      	strb	r5, [r0, #14]
    b72e:	6245      	str	r5, [r0, #36]	; 0x24
    b730:	6605      	str	r5, [r0, #96]	; 0x60
    b732:	62c1      	str	r1, [r0, #44]	; 0x2c
    b734:	6301      	str	r1, [r0, #48]	; 0x30
    b736:	6681      	str	r1, [r0, #104]	; 0x68
    b738:	66c1      	str	r1, [r0, #108]	; 0x6c
    b73a:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    b73e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    b742:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    b746:	bcf0      	pop	{r4, r5, r6, r7}
    b748:	4770      	bx	lr
    b74a:	bf00      	nop
    b74c:	00023408 	.word	0x00023408

0000b750 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    b750:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b752:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b754:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b756:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b758:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b75a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b75c:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b75e:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b760:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b762:	2700      	movs	r7, #0
    b764:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b768:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b76a:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b76c:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b76e:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b770:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b772:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b774:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b778:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b77a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b77c:	b662      	cpsie	i
}
    b77e:	bcd0      	pop	{r4, r6, r7}
    b780:	4770      	bx	lr
    b782:	bf00      	nop
    b784:	0000      	movs	r0, r0
	...

0000b788 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    b788:	b510      	push	{r4, lr}
    b78a:	4604      	mov	r4, r0
    if (decelMax != 0) {
    b78c:	b191      	cbz	r1, b7b4 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    b78e:	a312      	add	r3, pc, #72	; (adr r3, b7d8 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    b790:	e9d3 2300 	ldrd	r2, r3, [r3]
    b794:	03c8      	lsls	r0, r1, #15
    b796:	0c49      	lsrs	r1, r1, #17
    b798:	f010 feb4 	bl	1c504 <__aeabi_ldivmod>
    b79c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b79e:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    b7a0:	f020 0201 	bic.w	r2, r0, #1
    b7a4:	bfb8      	it	lt
    b7a6:	2302      	movlt	r3, #2
    b7a8:	4293      	cmp	r3, r2
    b7aa:	4618      	mov	r0, r3
    b7ac:	bfb8      	it	lt
    b7ae:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    b7b0:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b7b2:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    b7b4:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b7b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b7b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    b7ba:	4293      	cmp	r3, r2
    b7bc:	bfb8      	it	lt
    b7be:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b7c0:	2100      	movs	r1, #0
    m_velocityMove = true;
    b7c2:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b7c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b7c6:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    b7c8:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    b7cc:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b7ce:	b662      	cpsie	i
    b7d0:	bd10      	pop	{r4, pc}
    b7d2:	bf00      	nop
    b7d4:	f3af 8000 	nop.w
    b7d8:	017d7840 	.word	0x017d7840
    b7dc:	00000000 	.word	0x00000000

0000b7e0 <_ZN9ClearCore13StepGenerator6VelMaxEm>:
void StepGenerator::VelMax(uint32_t velMax) {
    b7e0:	b5d0      	push	{r4, r6, r7, lr}
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b7e2:	f241 3288 	movw	r2, #5000	; 0x1388
void StepGenerator::VelMax(uint32_t velMax) {
    b7e6:	4604      	mov	r4, r0
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b7e8:	2300      	movs	r3, #0
    b7ea:	03c8      	lsls	r0, r1, #15
    b7ec:	0c49      	lsrs	r1, r1, #17
    b7ee:	f010 fe89 	bl	1c504 <__aeabi_ldivmod>
    b7f2:	460f      	mov	r7, r1
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b7f4:	68a1      	ldr	r1, [r4, #8]
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b7f6:	4606      	mov	r6, r0
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b7f8:	03ca      	lsls	r2, r1, #15
    velLim64 = min(velLim64, INT32_MAX);
    b7fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b7fe:	0c4b      	lsrs	r3, r1, #17
    velLim64 = min(velLim64, INT32_MAX);
    b800:	4290      	cmp	r0, r2
    b802:	f04f 0100 	mov.w	r1, #0
    b806:	eb71 0e03 	sbcs.w	lr, r1, r3
    b80a:	bfbc      	itt	lt
    b80c:	4602      	movlt	r2, r0
    b80e:	460b      	movlt	r3, r1
    b810:	4296      	cmp	r6, r2
    b812:	eb77 0103 	sbcs.w	r1, r7, r3
    b816:	bfbc      	itt	lt
    b818:	4632      	movlt	r2, r6
    b81a:	463b      	movlt	r3, r7
    m_velLimitPendingQx = max(velLim64, 1);
    b81c:	2a01      	cmp	r2, #1
    b81e:	f173 0100 	sbcs.w	r1, r3, #0
    b822:	bfb8      	it	lt
    b824:	2201      	movlt	r2, #1
    b826:	6622      	str	r2, [r4, #96]	; 0x60
    b828:	bdd0      	pop	{r4, r6, r7, pc}
    b82a:	bf00      	nop
    b82c:	0000      	movs	r0, r0
	...

0000b830 <_ZN9ClearCore13StepGenerator8AccelMaxEm>:
void StepGenerator::AccelMax(uint32_t accelMax) {
    b830:	460b      	mov	r3, r1
    b832:	b510      	push	{r4, lr}
                          (SampleRateHz * SampleRateHz));
    b834:	0c49      	lsrs	r1, r1, #17
void StepGenerator::AccelMax(uint32_t accelMax) {
    b836:	4604      	mov	r4, r0
                          (SampleRateHz * SampleRateHz));
    b838:	03d8      	lsls	r0, r3, #15
    b83a:	a307      	add	r3, pc, #28	; (adr r3, b858 <_ZN9ClearCore13StepGenerator8AccelMaxEm+0x28>)
    b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b840:	f010 fe60 	bl	1c504 <__aeabi_ldivmod>
    accelLim32 &= ~1L;
    b844:	f020 0001 	bic.w	r0, r0, #1
    m_accelLimitPendingQx = ConvertAccel(accelMax);
    b848:	2802      	cmp	r0, #2
    b84a:	bfb8      	it	lt
    b84c:	2002      	movlt	r0, #2
    b84e:	66a0      	str	r0, [r4, #104]	; 0x68
    b850:	bd10      	pop	{r4, pc}
    b852:	bf00      	nop
    b854:	f3af 8000 	nop.w
    b858:	017d7840 	.word	0x017d7840
    b85c:	00000000 	.word	0x00000000

0000b860 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    b860:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b862:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b864:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b866:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b868:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b86a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b86c:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b86e:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b870:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b872:	2700      	movs	r7, #0
    b874:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b878:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b87a:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b87c:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b87e:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b880:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b882:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b884:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b888:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b88a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b88c:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    b88e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b892:	03ca      	lsls	r2, r1, #15
    b894:	0c4b      	lsrs	r3, r1, #17
    b896:	4294      	cmp	r4, r2
    b898:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    b89c:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    b89e:	eb75 0103 	sbcs.w	r1, r5, r3
    b8a2:	bfbc      	itt	lt
    b8a4:	4622      	movlt	r2, r4
    b8a6:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    b8a8:	2a01      	cmp	r2, #1
    b8aa:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b8ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    b8b0:	bfbc      	itt	lt
    b8b2:	2201      	movlt	r2, #1
    b8b4:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    b8b6:	17e5      	asrs	r5, r4, #31
    b8b8:	4294      	cmp	r4, r2
    b8ba:	eb75 0103 	sbcs.w	r1, r5, r3
    b8be:	bfb8      	it	lt
    b8c0:	4622      	movlt	r2, r4
    b8c2:	6602      	str	r2, [r0, #96]	; 0x60
}
    b8c4:	bcf0      	pop	{r4, r5, r6, r7}
    b8c6:	4770      	bx	lr

0000b8c8 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    b8c8:	6843      	ldr	r3, [r0, #4]
    b8ca:	b363      	cbz	r3, b926 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b8cc:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b8ce:	f013 0218 	ands.w	r2, r3, #24
    b8d2:	d12a      	bne.n	b92a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    b8d4:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    b8d6:	7c02      	ldrb	r2, [r0, #16]
    b8d8:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    b8dc:	b2d2      	uxtb	r2, r2
    b8de:	4613      	mov	r3, r2
    b8e0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    b8e4:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b8e8:	b2db      	uxtb	r3, r3
    b8ea:	461a      	mov	r2, r3
    b8ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
    b8f0:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    b8f4:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    b8f6:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    b8f8:	075a      	lsls	r2, r3, #29
    b8fa:	d514      	bpl.n	b926 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    b8fc:	7b42      	ldrb	r2, [r0, #13]
    b8fe:	b9e2      	cbnz	r2, b93a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    b900:	0719      	lsls	r1, r3, #28
    b902:	d510      	bpl.n	b926 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    b904:	f043 0301 	orr.w	r3, r3, #1
    b908:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    b90a:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b90c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b90e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    b910:	4293      	cmp	r3, r2
    b912:	bfb8      	it	lt
    b914:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b916:	2100      	movs	r1, #0
    m_velocityMove = true;
    b918:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b91a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b91c:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    b91e:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    b922:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b924:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    b926:	2000      	movs	r0, #0
    b928:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    b92a:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    b92e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    b932:	1ad3      	subs	r3, r2, r3
    b934:	bf18      	it	ne
    b936:	2301      	movne	r3, #1
    b938:	e7cd      	b.n	b8d6 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    b93a:	06da      	lsls	r2, r3, #27
    b93c:	d5f3      	bpl.n	b926 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    b93e:	f043 0302 	orr.w	r3, r3, #2
    b942:	7403      	strb	r3, [r0, #16]
    b944:	e7e1      	b.n	b90a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    b946:	bf00      	nop

0000b948 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    b948:	4ba1      	ldr	r3, [pc, #644]	; (bbd0 <SystemInit+0x288>)
    b94a:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    b94e:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    b950:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    b952:	691a      	ldr	r2, [r3, #16]
    b954:	0792      	lsls	r2, r2, #30
    b956:	d5fc      	bpl.n	b952 <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    b958:	4a9e      	ldr	r2, [pc, #632]	; (bbd4 <SystemInit+0x28c>)
    b95a:	4b9f      	ldr	r3, [pc, #636]	; (bbd8 <SystemInit+0x290>)
    b95c:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    b95e:	6853      	ldr	r3, [r2, #4]
    b960:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    b964:	d1fb      	bne.n	b95e <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    b966:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    b96a:	499a      	ldr	r1, [pc, #616]	; (bbd4 <SystemInit+0x28c>)
    b96c:	f363 1086 	bfi	r0, r3, #6, #1
    b970:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    b974:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b978:	065b      	lsls	r3, r3, #25
    b97a:	d4fb      	bmi.n	b974 <SystemInit+0x2c>
    b97c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b980:	4a94      	ldr	r2, [pc, #592]	; (bbd4 <SystemInit+0x28c>)
    b982:	2005      	movs	r0, #5
    b984:	f360 0303 	bfi	r3, r0, #0, #4
    b988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b98c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    b990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    b998:	6853      	ldr	r3, [r2, #4]
    b99a:	f013 0f14 	tst.w	r3, #20
    b99e:	d1fb      	bne.n	b998 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b9a0:	4b8b      	ldr	r3, [pc, #556]	; (bbd0 <SystemInit+0x288>)
    b9a2:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b9a4:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b9a6:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    b9a8:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    b9aa:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b9ac:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    b9ae:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    b9b2:	6913      	ldr	r3, [r2, #16]
    b9b4:	01df      	lsls	r7, r3, #7
    b9b6:	d4fc      	bmi.n	b9b2 <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    b9b8:	4a86      	ldr	r2, [pc, #536]	; (bbd4 <SystemInit+0x28c>)
    b9ba:	f44f 7384 	mov.w	r3, #264	; 0x108
    b9be:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    b9c0:	6853      	ldr	r3, [r2, #4]
    b9c2:	f013 0304 	ands.w	r3, r3, #4
    b9c6:	d1fb      	bne.n	b9c0 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b9c8:	4884      	ldr	r0, [pc, #528]	; (bbdc <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b9ca:	4982      	ldr	r1, [pc, #520]	; (bbd4 <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    b9cc:	2401      	movs	r4, #1
    b9ce:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    b9d0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    b9d4:	f363 1086 	bfi	r0, r3, #6, #1
    b9d8:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    b9dc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b9e0:	065e      	lsls	r6, r3, #25
    b9e2:	d4fb      	bmi.n	b9dc <SystemInit+0x94>
    b9e4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b9e8:	4a7a      	ldr	r2, [pc, #488]	; (bbd4 <SystemInit+0x28c>)
    b9ea:	2005      	movs	r0, #5
    b9ec:	f360 0303 	bfi	r3, r0, #0, #4
    b9f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    b9f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    b9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    ba00:	6853      	ldr	r3, [r2, #4]
    ba02:	f013 0314 	ands.w	r3, r3, #20
    ba06:	d1fb      	bne.n	ba00 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    ba08:	4871      	ldr	r0, [pc, #452]	; (bbd0 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    ba0a:	4972      	ldr	r1, [pc, #456]	; (bbd4 <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    ba0c:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    ba0e:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    ba10:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    ba12:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    ba14:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    ba16:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    ba1a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    ba1e:	f363 1086 	bfi	r0, r3, #6, #1
    ba22:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    ba26:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    ba2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d1f9      	bne.n	ba26 <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    ba32:	4c67      	ldr	r4, [pc, #412]	; (bbd0 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    ba34:	486a      	ldr	r0, [pc, #424]	; (bbe0 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    ba36:	4a67      	ldr	r2, [pc, #412]	; (bbd4 <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    ba38:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    ba3a:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    ba3c:	6853      	ldr	r3, [r2, #4]
    ba3e:	065d      	lsls	r5, r3, #25
    ba40:	d4fc      	bmi.n	ba3c <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ba42:	4b66      	ldr	r3, [pc, #408]	; (bbdc <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    ba44:	4967      	ldr	r1, [pc, #412]	; (bbe4 <SystemInit+0x29c>)
    ba46:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ba48:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    ba4a:	4e67      	ldr	r6, [pc, #412]	; (bbe8 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    ba4c:	4d67      	ldr	r5, [pc, #412]	; (bbec <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    ba4e:	4c68      	ldr	r4, [pc, #416]	; (bbf0 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    ba50:	4960      	ldr	r1, [pc, #384]	; (bbd4 <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ba52:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    ba56:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    ba58:	6998      	ldr	r0, [r3, #24]
    ba5a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ba5e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    ba60:	6958      	ldr	r0, [r3, #20]
    ba62:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ba66:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    ba68:	6998      	ldr	r0, [r3, #24]
    ba6a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    ba6e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    ba70:	6998      	ldr	r0, [r3, #24]
    ba72:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    ba76:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    ba78:	69d8      	ldr	r0, [r3, #28]
    ba7a:	f040 0020 	orr.w	r0, r0, #32
    ba7e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    ba80:	6918      	ldr	r0, [r3, #16]
    ba82:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ba86:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    ba88:	69d8      	ldr	r0, [r3, #28]
    ba8a:	f040 0004 	orr.w	r0, r0, #4
    ba8e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    ba90:	6a18      	ldr	r0, [r3, #32]
    ba92:	f040 0001 	orr.w	r0, r0, #1
    ba96:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    ba98:	6a18      	ldr	r0, [r3, #32]
    ba9a:	f040 0008 	orr.w	r0, r0, #8
    ba9e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    baa0:	6a18      	ldr	r0, [r3, #32]
    baa2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    baa6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    baa8:	69d8      	ldr	r0, [r3, #28]
    baaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    baae:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    bab0:	6958      	ldr	r0, [r3, #20]
    bab2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bab6:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    bab8:	6a18      	ldr	r0, [r3, #32]
    baba:	f040 0020 	orr.w	r0, r0, #32
    babe:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bac0:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    bac2:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bac6:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    bac8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bacc:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bace:	684b      	ldr	r3, [r1, #4]
    bad0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    bad4:	d1fb      	bne.n	bace <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    bad6:	4a47      	ldr	r2, [pc, #284]	; (bbf4 <SystemInit+0x2ac>)
    bad8:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    bada:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    bade:	4a3d      	ldr	r2, [pc, #244]	; (bbd4 <SystemInit+0x28c>)
    bae0:	f363 1086 	bfi	r0, r3, #6, #1
    bae4:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    bae8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    baec:	065c      	lsls	r4, r3, #25
    baee:	d4fb      	bmi.n	bae8 <SystemInit+0x1a0>
    baf0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    baf4:	4937      	ldr	r1, [pc, #220]	; (bbd4 <SystemInit+0x28c>)
    baf6:	2006      	movs	r0, #6
    baf8:	f360 0303 	bfi	r3, r0, #0, #4
    bafc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bb00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bb04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bb0c:	684b      	ldr	r3, [r1, #4]
    bb0e:	f013 0318 	ands.w	r3, r3, #24
    bb12:	d1fb      	bne.n	bb0c <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    bb14:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    bb18:	4a2e      	ldr	r2, [pc, #184]	; (bbd4 <SystemInit+0x28c>)
    bb1a:	f363 1086 	bfi	r0, r3, #6, #1
    bb1e:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    bb22:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bb26:	0658      	lsls	r0, r3, #25
    bb28:	d4fb      	bmi.n	bb22 <SystemInit+0x1da>
    bb2a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bb2e:	4929      	ldr	r1, [pc, #164]	; (bbd4 <SystemInit+0x28c>)
    bb30:	2006      	movs	r0, #6
    bb32:	f360 0303 	bfi	r3, r0, #0, #4
    bb36:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bb3a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bb3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb42:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bb46:	684b      	ldr	r3, [r1, #4]
    bb48:	f013 0318 	ands.w	r3, r3, #24
    bb4c:	d1fb      	bne.n	bb46 <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    bb4e:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    bb52:	4a20      	ldr	r2, [pc, #128]	; (bbd4 <SystemInit+0x28c>)
    bb54:	f363 1086 	bfi	r0, r3, #6, #1
    bb58:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    bb5c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bb60:	0659      	lsls	r1, r3, #25
    bb62:	d4fb      	bmi.n	bb5c <SystemInit+0x214>
    bb64:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bb68:	491a      	ldr	r1, [pc, #104]	; (bbd4 <SystemInit+0x28c>)
    bb6a:	2006      	movs	r0, #6
    bb6c:	f360 0303 	bfi	r3, r0, #0, #4
    bb70:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bb74:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb7c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bb80:	684b      	ldr	r3, [r1, #4]
    bb82:	f013 0318 	ands.w	r3, r3, #24
    bb86:	d1fb      	bne.n	bb80 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    bb88:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    bb8c:	4a11      	ldr	r2, [pc, #68]	; (bbd4 <SystemInit+0x28c>)
    bb8e:	f363 1086 	bfi	r0, r3, #6, #1
    bb92:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bb96:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bb9a:	065b      	lsls	r3, r3, #25
    bb9c:	d4fb      	bmi.n	bb96 <SystemInit+0x24e>
    bb9e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bba2:	490c      	ldr	r1, [pc, #48]	; (bbd4 <SystemInit+0x28c>)
    bba4:	2006      	movs	r0, #6
    bba6:	f360 0303 	bfi	r3, r0, #0, #4
    bbaa:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    bbae:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bbb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bbb6:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    bbba:	684b      	ldr	r3, [r1, #4]
    bbbc:	f013 0f18 	tst.w	r3, #24
    bbc0:	d1fb      	bne.n	bbba <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    bbc2:	4a04      	ldr	r2, [pc, #16]	; (bbd4 <SystemInit+0x28c>)
    bbc4:	6853      	ldr	r3, [r2, #4]
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	d1fc      	bne.n	bbc4 <SystemInit+0x27c>
        continue;
    }
    return;
}
    bbca:	bcf0      	pop	{r4, r5, r6, r7}
    bbcc:	4770      	bx	lr
    bbce:	bf00      	nop
    bbd0:	40001000 	.word	0x40001000
    bbd4:	40001c00 	.word	0x40001c00
    bbd8:	00190301 	.word	0x00190301
    bbdc:	40000800 	.word	0x40000800
    bbe0:	00020107 	.word	0x00020107
    bbe4:	00320b01 	.word	0x00320b01
    bbe8:	41006000 	.word	0x41006000
    bbec:	e000ed00 	.word	0xe000ed00
    bbf0:	003a0108 	.word	0x003a0108
    bbf4:	000c0108 	.word	0x000c0108

0000bbf8 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    bbf8:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    bbfa:	4a0e      	ldr	r2, [pc, #56]	; (bc34 <GClkFreqUpdate+0x3c>)
    bbfc:	f100 0408 	add.w	r4, r0, #8
    bc00:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    bc04:	f003 030f 	and.w	r3, r3, #15
    bc08:	2b01      	cmp	r3, #1
    bc0a:	d001      	beq.n	bc10 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    bc0c:	bc70      	pop	{r4, r5, r6}
    bc0e:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    bc10:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    bc14:	4d08      	ldr	r5, [pc, #32]	; (bc38 <GClkFreqUpdate+0x40>)
    bc16:	fbb5 f1f1 	udiv	r1, r5, r1
    bc1a:	b289      	uxth	r1, r1
    bc1c:	f361 461f 	bfi	r6, r1, #16, #16
    bc20:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    bc24:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    bc26:	6851      	ldr	r1, [r2, #4]
    bc28:	f3c1 018b 	ubfx	r1, r1, #2, #12
    bc2c:	4219      	tst	r1, r3
    bc2e:	d1fa      	bne.n	bc26 <GClkFreqUpdate+0x2e>
}
    bc30:	bc70      	pop	{r4, r5, r6}
    bc32:	4770      	bx	lr
    bc34:	40001c00 	.word	0x40001c00
    bc38:	017d7840 	.word	0x017d7840

0000bc3c <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    bc3c:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    bc3e:	4911      	ldr	r1, [pc, #68]	; (bc84 <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    bc40:	4b11      	ldr	r3, [pc, #68]	; (bc88 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    bc42:	4a12      	ldr	r2, [pc, #72]	; (bc8c <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    bc44:	6001      	str	r1, [r0, #0]
    bc46:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    bc48:	4604      	mov	r4, r0
      m_stepsLast(0) {
    bc4a:	6042      	str	r2, [r0, #4]
    bc4c:	6083      	str	r3, [r0, #8]
    bc4e:	60c5      	str	r5, [r0, #12]
    bc50:	6105      	str	r5, [r0, #16]
    bc52:	6145      	str	r5, [r0, #20]
    bc54:	8305      	strh	r5, [r0, #24]
    bc56:	4629      	mov	r1, r5
    bc58:	22c8      	movs	r2, #200	; 0xc8
    bc5a:	301c      	adds	r0, #28
    bc5c:	f012 fce6 	bl	1e62c <memset>
    bc60:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    bc64:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    bc68:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    bc6c:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    bc70:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    bc74:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    bc78:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    bc7c:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    bc80:	4620      	mov	r0, r4
    bc82:	bd38      	pop	{r3, r4, r5, pc}
    bc84:	00023414 	.word	0x00023414
    bc88:	00023434 	.word	0x00023434
    bc8c:	00023424 	.word	0x00023424

0000bc90 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    bc90:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bc92:	4a12      	ldr	r2, [pc, #72]	; (bcdc <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    bc94:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bc98:	f36f 1386 	bfc	r3, #6, #1
    bc9c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bca0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bca4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bca8:	2b00      	cmp	r3, #0
    bcaa:	d1f9      	bne.n	bca0 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    bcac:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bcb0:	490b      	ldr	r1, [pc, #44]	; (bce0 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bcb2:	4c0c      	ldr	r4, [pc, #48]	; (bce4 <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    bcb4:	4d0c      	ldr	r5, [pc, #48]	; (bce8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bcb6:	f363 0003 	bfi	r0, r3, #0, #4
    bcba:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    bcbe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bcc6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bcca:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    bccc:	69cb      	ldr	r3, [r1, #28]
    bcce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bcd2:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    bcd4:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    bcd6:	bc30      	pop	{r4, r5}
    bcd8:	4770      	bx	lr
    bcda:	bf00      	nop
    bcdc:	40001c00 	.word	0x40001c00
    bce0:	40000800 	.word	0x40000800
    bce4:	42001c00 	.word	0x42001c00
    bce8:	07030000 	.word	0x07030000

0000bcec <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    bcee:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	d038      	beq.n	bd68 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    bcf6:	4a29      	ldr	r2, [pc, #164]	; (bd9c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    bcf8:	2360      	movs	r3, #96	; 0x60
    bcfa:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    bcfc:	6913      	ldr	r3, [r2, #16]
    bcfe:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    bd02:	d1fb      	bne.n	bcfc <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bd04:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    bd06:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    bd08:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    bd0c:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    bd10:	1aaa      	subs	r2, r5, r2
    bd12:	b212      	sxth	r2, r2
    bd14:	4604      	mov	r4, r0
    bd16:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bd1a:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    bd1c:	bb29      	cbnz	r1, bd6a <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    bd1e:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bd20:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    bd24:	f3bf 8f5b 	dmb	ish
    bd28:	e853 6f00 	ldrex	r6, [r3]
    bd2c:	4416      	add	r6, r2
    bd2e:	e843 6100 	strex	r1, r6, [r3]
    bd32:	2900      	cmp	r1, #0
    bd34:	d1f8      	bne.n	bd28 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    bd36:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bd3a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bd3e:	4d18      	ldr	r5, [pc, #96]	; (bda0 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    bd40:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    bd44:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bd46:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bd48:	fb85 2503 	smull	r2, r5, r5, r3
    bd4c:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bd4e:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bd50:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bd54:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bd56:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bd58:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bd5c:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bd60:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    bd62:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bd64:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    bd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bd6a:	68c6      	ldr	r6, [r0, #12]
    bd6c:	f3bf 8f5b 	dmb	ish
    bd70:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    bd74:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bd78:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    bd7a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bd7e:	4432      	add	r2, r6
    bd80:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bd82:	4808      	ldr	r0, [pc, #32]	; (bda4 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bd84:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bd88:	f991 1003 	ldrsb.w	r1, [r1, #3]
    bd8c:	6800      	ldr	r0, [r0, #0]
    bd8e:	2201      	movs	r2, #1
    bd90:	f003 ffee 	bl	fd70 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    bd94:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    bd98:	e7c1      	b.n	bd1e <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    bd9a:	bf00      	nop
    bd9c:	42001c00 	.word	0x42001c00
    bda0:	51eb851f 	.word	0x51eb851f
    bda4:	20001f18 	.word	0x20001f18

0000bda8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bdaa:	780d      	ldrb	r5, [r1, #0]
    bdac:	f3c5 1441 	ubfx	r4, r5, #5, #2
    bdb0:	2c01      	cmp	r4, #1
{
    bdb2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bdb4:	d152      	bne.n	be5c <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bdb6:	4e30      	ldr	r6, [pc, #192]	; (be78 <cdcdf_acm_req+0xd0>)
    bdb8:	888c      	ldrh	r4, [r1, #4]
    bdba:	7833      	ldrb	r3, [r6, #0]
    bdbc:	42a3      	cmp	r3, r4
    bdbe:	d002      	beq.n	bdc6 <cdcdf_acm_req+0x1e>
    bdc0:	7873      	ldrb	r3, [r6, #1]
    bdc2:	42a3      	cmp	r3, r4
    bdc4:	d14a      	bne.n	be5c <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bdc6:	062b      	lsls	r3, r5, #24
    bdc8:	4617      	mov	r7, r2
    bdca:	4606      	mov	r6, r0
    bdcc:	460c      	mov	r4, r1
    bdce:	d438      	bmi.n	be42 <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    bdd0:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bdd2:	f000 fc7f 	bl	c6d4 <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    bdd6:	7863      	ldrb	r3, [r4, #1]
    bdd8:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bdda:	4601      	mov	r1, r0
	switch (req->bRequest) {
    bddc:	d00f      	beq.n	bdfe <cdcdf_acm_req+0x56>
    bdde:	2b22      	cmp	r3, #34	; 0x22
    bde0:	d128      	bne.n	be34 <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    bde2:	2300      	movs	r3, #0
    bde4:	461a      	mov	r2, r3
    bde6:	4619      	mov	r1, r3
    bde8:	4618      	mov	r0, r3
    bdea:	f000 fc07 	bl	c5fc <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    bdee:	4b23      	ldr	r3, [pc, #140]	; (be7c <cdcdf_acm_req+0xd4>)
    bdf0:	681b      	ldr	r3, [r3, #0]
    bdf2:	b31b      	cbz	r3, be3c <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    bdf4:	8860      	ldrh	r0, [r4, #2]
    bdf6:	4798      	blx	r3
		return ERR_NONE;
    bdf8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    bdfa:	b003      	add	sp, #12
    bdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bdfe:	2d07      	cmp	r5, #7
    be00:	d136      	bne.n	be70 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    be02:	b37f      	cbz	r7, be64 <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    be04:	4b1e      	ldr	r3, [pc, #120]	; (be80 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    be06:	6800      	ldr	r0, [r0, #0]
    be08:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    be0a:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    be0c:	888a      	ldrh	r2, [r1, #4]
    be0e:	7989      	ldrb	r1, [r1, #6]
    be10:	f88d 1006 	strb.w	r1, [sp, #6]
    be14:	466c      	mov	r4, sp
    be16:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    be1a:	b113      	cbz	r3, be22 <cdcdf_acm_req+0x7a>
    be1c:	4668      	mov	r0, sp
    be1e:	4798      	blx	r3
    be20:	b160      	cbz	r0, be3c <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    be22:	e894 0003 	ldmia.w	r4, {r0, r1}
    be26:	4b17      	ldr	r3, [pc, #92]	; (be84 <cdcdf_acm_req+0xdc>)
    be28:	0c0a      	lsrs	r2, r1, #16
    be2a:	6018      	str	r0, [r3, #0]
    be2c:	8099      	strh	r1, [r3, #4]
    be2e:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    be30:	2000      	movs	r0, #0
    be32:	e001      	b.n	be38 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    be34:	f06f 000c 	mvn.w	r0, #12
}
    be38:	b003      	add	sp, #12
    be3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    be3c:	2000      	movs	r0, #0
}
    be3e:	b003      	add	sp, #12
    be40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    be42:	2a01      	cmp	r2, #1
    be44:	d0fa      	beq.n	be3c <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    be46:	784b      	ldrb	r3, [r1, #1]
    be48:	2b21      	cmp	r3, #33	; 0x21
    be4a:	d1f3      	bne.n	be34 <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    be4c:	88ca      	ldrh	r2, [r1, #6]
    be4e:	2a07      	cmp	r2, #7
    be50:	d10e      	bne.n	be70 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    be52:	2300      	movs	r3, #0
    be54:	490b      	ldr	r1, [pc, #44]	; (be84 <cdcdf_acm_req+0xdc>)
    be56:	f000 fbd1 	bl	c5fc <usbdc_xfer>
    be5a:	e7ed      	b.n	be38 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    be5c:	f06f 0009 	mvn.w	r0, #9
}
    be60:	b003      	add	sp, #12
    be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    be64:	463b      	mov	r3, r7
    be66:	462a      	mov	r2, r5
    be68:	4630      	mov	r0, r6
    be6a:	f000 fbc7 	bl	c5fc <usbdc_xfer>
    be6e:	e7e3      	b.n	be38 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    be70:	f04f 30ff 	mov.w	r0, #4294967295
    be74:	e7e0      	b.n	be38 <cdcdf_acm_req+0x90>
    be76:	bf00      	nop
    be78:	20001c20 	.word	0x20001c20
    be7c:	20001c28 	.word	0x20001c28
    be80:	20001c2c 	.word	0x20001c2c
    be84:	20001c30 	.word	0x20001c30

0000be88 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    be88:	2901      	cmp	r1, #1
{
    be8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    be8e:	4616      	mov	r6, r2
	switch (ctrl) {
    be90:	d008      	beq.n	bea4 <cdcdf_acm_ctrl+0x1c>
    be92:	d314      	bcc.n	bebe <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    be94:	2902      	cmp	r1, #2
    be96:	bf0c      	ite	eq
    be98:	f06f 001a 	mvneq.w	r0, #26
    be9c:	f06f 000c 	mvnne.w	r0, #12
    bea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bea4:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    bea6:	2a00      	cmp	r2, #0
    bea8:	d047      	beq.n	bf3a <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    beaa:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    beac:	795b      	ldrb	r3, [r3, #5]
    beae:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    beb2:	2b02      	cmp	r3, #2
    beb4:	d041      	beq.n	bf3a <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    beb6:	f06f 0009 	mvn.w	r0, #9
    beba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    bebe:	6813      	ldr	r3, [r2, #0]
    bec0:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    bec2:	2b00      	cmp	r3, #0
    bec4:	d0f7      	beq.n	beb6 <cdcdf_acm_ctrl+0x2e>
    bec6:	f107 38ff 	add.w	r8, r7, #4294967295
    beca:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bece:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    bed0:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bed2:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    bed6:	2a02      	cmp	r2, #2
    bed8:	d1ed      	bne.n	beb6 <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    beda:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    bede:	4291      	cmp	r1, r2
    bee0:	d061      	beq.n	bfa6 <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bee2:	2aff      	cmp	r2, #255	; 0xff
    bee4:	d15b      	bne.n	bf9e <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bee6:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    beea:	4618      	mov	r0, r3
    beec:	6871      	ldr	r1, [r6, #4]
    beee:	2205      	movs	r2, #5
    bef0:	f000 fc00 	bl	c6f4 <usb_find_desc>
		while (NULL != ep) {
    bef4:	4604      	mov	r4, r0
    bef6:	b980      	cbnz	r0, bf1a <cdcdf_acm_ctrl+0x92>
    bef8:	e041      	b.n	bf7e <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    befa:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    befc:	bf4c      	ite	mi
    befe:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bf02:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bf04:	4628      	mov	r0, r5
    bf06:	f000 feaf 	bl	cc68 <usb_d_ep_enable>
			desc->sod = ep;
    bf0a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    bf0c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bf0e:	6871      	ldr	r1, [r6, #4]
    bf10:	4420      	add	r0, r4
    bf12:	f000 fc09 	bl	c728 <usb_find_ep_desc>
		while (NULL != ep) {
    bf16:	4604      	mov	r4, r0
    bf18:	b388      	cbz	r0, bf7e <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    bf1a:	7963      	ldrb	r3, [r4, #5]
    bf1c:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    bf1e:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bf20:	78e1      	ldrb	r1, [r4, #3]
    bf22:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    bf26:	b292      	uxth	r2, r2
    bf28:	4628      	mov	r0, r5
    bf2a:	f000 fe4b 	bl	cbc4 <usb_d_ep_init>
    bf2e:	2800      	cmp	r0, #0
    bf30:	d0e3      	beq.n	befa <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    bf32:	f06f 0013 	mvn.w	r0, #19
}
    bf36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    bf3a:	7823      	ldrb	r3, [r4, #0]
    bf3c:	2bff      	cmp	r3, #255	; 0xff
    bf3e:	d007      	beq.n	bf50 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    bf40:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    bf42:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bf44:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bf46:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    bf48:	d002      	beq.n	bf50 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bf4a:	f000 fe71 	bl	cc30 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    bf4e:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    bf50:	7863      	ldrb	r3, [r4, #1]
    bf52:	2bff      	cmp	r3, #255	; 0xff
    bf54:	d007      	beq.n	bf66 <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    bf56:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    bf58:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bf5a:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bf5c:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    bf5e:	d002      	beq.n	bf66 <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bf60:	f000 fe66 	bl	cc30 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    bf64:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    bf66:	7920      	ldrb	r0, [r4, #4]
    bf68:	28ff      	cmp	r0, #255	; 0xff
    bf6a:	d003      	beq.n	bf74 <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    bf6c:	f000 fe60 	bl	cc30 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    bf70:	23ff      	movs	r3, #255	; 0xff
    bf72:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    bf74:	4b0f      	ldr	r3, [pc, #60]	; (bfb4 <cdcdf_acm_ctrl+0x12c>)
    bf76:	2000      	movs	r0, #0
    bf78:	7158      	strb	r0, [r3, #5]
    bf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bf7e:	6833      	ldr	r3, [r6, #0]
    bf80:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    bf82:	7818      	ldrb	r0, [r3, #0]
    bf84:	2204      	movs	r2, #4
    bf86:	4418      	add	r0, r3
    bf88:	f000 fbb4 	bl	c6f4 <usb_find_desc>
	for (i = 0; i < 2; i++) {
    bf8c:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bf8e:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    bf90:	d10d      	bne.n	bfae <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    bf92:	4b08      	ldr	r3, [pc, #32]	; (bfb4 <cdcdf_acm_ctrl+0x12c>)
    bf94:	2201      	movs	r2, #1
    bf96:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bf98:	2000      	movs	r0, #0
    bf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    bf9e:	f06f 001b 	mvn.w	r0, #27
    bfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    bfa6:	f06f 0011 	mvn.w	r0, #17
    bfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    bfae:	2b00      	cmp	r3, #0
    bfb0:	d18d      	bne.n	bece <cdcdf_acm_ctrl+0x46>
    bfb2:	e780      	b.n	beb6 <cdcdf_acm_ctrl+0x2e>
    bfb4:	20001c20 	.word	0x20001c20

0000bfb8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bfb8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    bfba:	f000 fb91 	bl	c6e0 <usbdc_get_state>
    bfbe:	2801      	cmp	r0, #1
    bfc0:	d80d      	bhi.n	bfde <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bfc2:	4b08      	ldr	r3, [pc, #32]	; (bfe4 <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bfc4:	4a08      	ldr	r2, [pc, #32]	; (bfe8 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bfc6:	4909      	ldr	r1, [pc, #36]	; (bfec <cdcdf_acm_init+0x34>)
    bfc8:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    bfca:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bfcc:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    bfce:	f000 fb61 	bl	c694 <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bfd2:	4907      	ldr	r1, [pc, #28]	; (bff0 <cdcdf_acm_init+0x38>)
    bfd4:	2001      	movs	r0, #1
    bfd6:	f000 fb1f 	bl	c618 <usbdc_register_handler>
	return ERR_NONE;
    bfda:	2000      	movs	r0, #0
    bfdc:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bfde:	f06f 0010 	mvn.w	r0, #16
}
    bfe2:	bd08      	pop	{r3, pc}
    bfe4:	20001c14 	.word	0x20001c14
    bfe8:	20001c20 	.word	0x20001c20
    bfec:	0000be89 	.word	0x0000be89
    bff0:	200000ec 	.word	0x200000ec

0000bff4 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    bff4:	4b08      	ldr	r3, [pc, #32]	; (c018 <cdcdf_acm_read+0x24>)
{
    bff6:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    bff8:	795c      	ldrb	r4, [r3, #5]
    bffa:	b13c      	cbz	r4, c00c <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bffc:	460a      	mov	r2, r1
}
    bffe:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c002:	4601      	mov	r1, r0
    c004:	7918      	ldrb	r0, [r3, #4]
    c006:	2300      	movs	r3, #0
    c008:	f000 baf8 	b.w	c5fc <usbdc_xfer>
}
    c00c:	f06f 0010 	mvn.w	r0, #16
    c010:	f85d 4b04 	ldr.w	r4, [sp], #4
    c014:	4770      	bx	lr
    c016:	bf00      	nop
    c018:	20001c20 	.word	0x20001c20

0000c01c <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    c01c:	4b08      	ldr	r3, [pc, #32]	; (c040 <cdcdf_acm_write+0x24>)
{
    c01e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c020:	795c      	ldrb	r4, [r3, #5]
    c022:	b13c      	cbz	r4, c034 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c024:	460a      	mov	r2, r1
}
    c026:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c02a:	4601      	mov	r1, r0
    c02c:	78d8      	ldrb	r0, [r3, #3]
    c02e:	2301      	movs	r3, #1
    c030:	f000 bae4 	b.w	c5fc <usbdc_xfer>
}
    c034:	f06f 0010 	mvn.w	r0, #16
    c038:	f85d 4b04 	ldr.w	r4, [sp], #4
    c03c:	4770      	bx	lr
    c03e:	bf00      	nop
    c040:	20001c20 	.word	0x20001c20

0000c044 <cdcdf_acm_stop_xfer>:
{
    c044:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c046:	4c04      	ldr	r4, [pc, #16]	; (c058 <cdcdf_acm_stop_xfer+0x14>)
    c048:	78e0      	ldrb	r0, [r4, #3]
    c04a:	f000 fecb 	bl	cde4 <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c04e:	7920      	ldrb	r0, [r4, #4]
}
    c050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c054:	f000 bec6 	b.w	cde4 <usb_d_ep_abort>
    c058:	20001c20 	.word	0x20001c20

0000c05c <cdcdf_acm_register_callback>:
{
    c05c:	b508      	push	{r3, lr}
	switch (cb_type) {
    c05e:	2803      	cmp	r0, #3
    c060:	d81b      	bhi.n	c09a <cdcdf_acm_register_callback+0x3e>
    c062:	e8df f000 	tbb	[pc, r0]
    c066:	0a12      	.short	0x0a12
    c068:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c06a:	4b0d      	ldr	r3, [pc, #52]	; (c0a0 <cdcdf_acm_register_callback+0x44>)
    c06c:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c06e:	2000      	movs	r0, #0
		break;
    c070:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c072:	4b0c      	ldr	r3, [pc, #48]	; (c0a4 <cdcdf_acm_register_callback+0x48>)
    c074:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c076:	2000      	movs	r0, #0
		break;
    c078:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c07a:	4b0b      	ldr	r3, [pc, #44]	; (c0a8 <cdcdf_acm_register_callback+0x4c>)
    c07c:	460a      	mov	r2, r1
    c07e:	78d8      	ldrb	r0, [r3, #3]
    c080:	2102      	movs	r1, #2
    c082:	f000 ff05 	bl	ce90 <usb_d_ep_register_callback>
	return ERR_NONE;
    c086:	2000      	movs	r0, #0
		break;
    c088:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c08a:	4b07      	ldr	r3, [pc, #28]	; (c0a8 <cdcdf_acm_register_callback+0x4c>)
    c08c:	460a      	mov	r2, r1
    c08e:	7918      	ldrb	r0, [r3, #4]
    c090:	2102      	movs	r1, #2
    c092:	f000 fefd 	bl	ce90 <usb_d_ep_register_callback>
	return ERR_NONE;
    c096:	2000      	movs	r0, #0
		break;
    c098:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    c09a:	f06f 000c 	mvn.w	r0, #12
}
    c09e:	bd08      	pop	{r3, pc}
    c0a0:	20001c28 	.word	0x20001c28
    c0a4:	20001c2c 	.word	0x20001c2c
    c0a8:	20001c20 	.word	0x20001c20

0000c0ac <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    c0ac:	4b01      	ldr	r3, [pc, #4]	; (c0b4 <cdcdf_acm_is_enabled+0x8>)
}
    c0ae:	7958      	ldrb	r0, [r3, #5]
    c0b0:	4770      	bx	lr
    c0b2:	bf00      	nop
    c0b4:	20001c20 	.word	0x20001c20

0000c0b8 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    c0b8:	4800      	ldr	r0, [pc, #0]	; (c0bc <cdcdf_acm_get_line_coding+0x4>)
    c0ba:	4770      	bx	lr
    c0bc:	20001c30 	.word	0x20001c30

0000c0c0 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c0c0:	4b05      	ldr	r3, [pc, #20]	; (c0d8 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c0c2:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c0c4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c0c6:	b12c      	cbz	r4, c0d4 <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    c0c8:	6863      	ldr	r3, [r4, #4]
    c0ca:	b103      	cbz	r3, c0ce <usbd_sof_cb+0xe>
			sof->cb();
    c0cc:	4798      	blx	r3
		sof = sof->next;
    c0ce:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c0d0:	2c00      	cmp	r4, #0
    c0d2:	d1f9      	bne.n	c0c8 <usbd_sof_cb+0x8>
    c0d4:	bd10      	pop	{r4, pc}
    c0d6:	bf00      	nop
    c0d8:	20001c38 	.word	0x20001c38

0000c0dc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c0dc:	b538      	push	{r3, r4, r5, lr}
    c0de:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    c0e0:	b189      	cbz	r1, c106 <usbdc_cb_ctl_done+0x2a>
    c0e2:	2901      	cmp	r1, #1
    c0e4:	d10d      	bne.n	c102 <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c0e6:	4b23      	ldr	r3, [pc, #140]	; (c174 <usbdc_cb_ctl_done+0x98>)
    c0e8:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    c0ea:	b154      	cbz	r4, c102 <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    c0ec:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c0ee:	2201      	movs	r2, #1
    c0f0:	4629      	mov	r1, r5
    c0f2:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    c0f4:	b113      	cbz	r3, c0fc <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    c0f6:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    c0f8:	300a      	adds	r0, #10
    c0fa:	d102      	bne.n	c102 <usbdc_cb_ctl_done+0x26>
		h = h->next;
    c0fc:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c0fe:	2c00      	cmp	r4, #0
    c100:	d1f4      	bne.n	c0ec <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c102:	2000      	movs	r0, #0
    c104:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c106:	7813      	ldrb	r3, [r2, #0]
    c108:	2b00      	cmp	r3, #0
    c10a:	d1fa      	bne.n	c102 <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    c10c:	7853      	ldrb	r3, [r2, #1]
    c10e:	2b05      	cmp	r3, #5
    c110:	d014      	beq.n	c13c <usbdc_cb_ctl_done+0x60>
    c112:	2b09      	cmp	r3, #9
    c114:	d1f5      	bne.n	c102 <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    c116:	8852      	ldrh	r2, [r2, #2]
    c118:	4b16      	ldr	r3, [pc, #88]	; (c174 <usbdc_cb_ctl_done+0x98>)
    c11a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c11c:	bb3a      	cbnz	r2, c16e <usbdc_cb_ctl_done+0x92>
    c11e:	2503      	movs	r5, #3
    c120:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c122:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c124:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c126:	2c00      	cmp	r4, #0
    c128:	d0eb      	beq.n	c102 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c12a:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c12c:	4629      	mov	r1, r5
    c12e:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c130:	b103      	cbz	r3, c134 <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    c132:	4798      	blx	r3
		cg = cg->next;
    c134:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c136:	2c00      	cmp	r4, #0
    c138:	d1f7      	bne.n	c12a <usbdc_cb_ctl_done+0x4e>
    c13a:	e7e2      	b.n	c102 <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    c13c:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c13e:	b2c0      	uxtb	r0, r0
    c140:	f000 fcf0 	bl	cb24 <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c144:	886b      	ldrh	r3, [r5, #2]
    c146:	b97b      	cbnz	r3, c168 <usbdc_cb_ctl_done+0x8c>
    c148:	2502      	movs	r5, #2
    c14a:	462a      	mov	r2, r5
    c14c:	4b09      	ldr	r3, [pc, #36]	; (c174 <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c14e:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c150:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c152:	2c00      	cmp	r4, #0
    c154:	d0d5      	beq.n	c102 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c156:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c158:	4629      	mov	r1, r5
    c15a:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c15c:	b103      	cbz	r3, c160 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    c15e:	4798      	blx	r3
		cg = cg->next;
    c160:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c162:	2c00      	cmp	r4, #0
    c164:	d1f7      	bne.n	c156 <usbdc_cb_ctl_done+0x7a>
    c166:	e7cc      	b.n	c102 <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c168:	2503      	movs	r5, #3
    c16a:	462a      	mov	r2, r5
    c16c:	e7ee      	b.n	c14c <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c16e:	2504      	movs	r5, #4
    c170:	462a      	mov	r2, r5
    c172:	e7d6      	b.n	c122 <usbdc_cb_ctl_done+0x46>
    c174:	20001c38 	.word	0x20001c38

0000c178 <usbdc_cb_ctl_req>:
{
    c178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c17c:	4fb6      	ldr	r7, [pc, #728]	; (c458 <usbdc_cb_ctl_req+0x2e0>)
    c17e:	68bc      	ldr	r4, [r7, #8]
{
    c180:	b086      	sub	sp, #24
    c182:	4606      	mov	r6, r0
    c184:	460d      	mov	r5, r1
	while (h != NULL) {
    c186:	b15c      	cbz	r4, c1a0 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    c188:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c18a:	2200      	movs	r2, #0
    c18c:	4629      	mov	r1, r5
    c18e:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    c190:	b11b      	cbz	r3, c19a <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    c192:	4798      	blx	r3
			if (0 == rc) {
    c194:	b170      	cbz	r0, c1b4 <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    c196:	300a      	adds	r0, #10
    c198:	d108      	bne.n	c1ac <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c19a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c19c:	2c00      	cmp	r4, #0
    c19e:	d1f3      	bne.n	c188 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c1a0:	782b      	ldrb	r3, [r5, #0]
    c1a2:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c1a6:	d025      	beq.n	c1f4 <usbdc_cb_ctl_req+0x7c>
    c1a8:	2a80      	cmp	r2, #128	; 0x80
    c1aa:	d007      	beq.n	c1bc <usbdc_cb_ctl_req+0x44>
		return false;
    c1ac:	2000      	movs	r0, #0
}
    c1ae:	b006      	add	sp, #24
    c1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c1b4:	2001      	movs	r0, #1
}
    c1b6:	b006      	add	sp, #24
    c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c1bc:	786a      	ldrb	r2, [r5, #1]
    c1be:	2a0a      	cmp	r2, #10
    c1c0:	d8f4      	bhi.n	c1ac <usbdc_cb_ctl_req+0x34>
    c1c2:	a101      	add	r1, pc, #4	; (adr r1, c1c8 <usbdc_cb_ctl_req+0x50>)
    c1c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c1c8:	0000c2e7 	.word	0x0000c2e7
    c1cc:	0000c1ad 	.word	0x0000c1ad
    c1d0:	0000c1ad 	.word	0x0000c1ad
    c1d4:	0000c1ad 	.word	0x0000c1ad
    c1d8:	0000c1ad 	.word	0x0000c1ad
    c1dc:	0000c1ad 	.word	0x0000c1ad
    c1e0:	0000c29b 	.word	0x0000c29b
    c1e4:	0000c1ad 	.word	0x0000c1ad
    c1e8:	0000c279 	.word	0x0000c279
    c1ec:	0000c1ad 	.word	0x0000c1ad
    c1f0:	0000c231 	.word	0x0000c231
	switch (req->bRequest) {
    c1f4:	786a      	ldrb	r2, [r5, #1]
    c1f6:	3a01      	subs	r2, #1
    c1f8:	2a0a      	cmp	r2, #10
    c1fa:	d8d7      	bhi.n	c1ac <usbdc_cb_ctl_req+0x34>
    c1fc:	a101      	add	r1, pc, #4	; (adr r1, c204 <usbdc_cb_ctl_req+0x8c>)
    c1fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c202:	bf00      	nop
    c204:	0000c3ff 	.word	0x0000c3ff
    c208:	0000c1ad 	.word	0x0000c1ad
    c20c:	0000c3cf 	.word	0x0000c3cf
    c210:	0000c1ad 	.word	0x0000c1ad
    c214:	0000c3b1 	.word	0x0000c3b1
    c218:	0000c1ad 	.word	0x0000c1ad
    c21c:	0000c1ad 	.word	0x0000c1ad
    c220:	0000c1ad 	.word	0x0000c1ad
    c224:	0000c38b 	.word	0x0000c38b
    c228:	0000c1ad 	.word	0x0000c1ad
    c22c:	0000c32f 	.word	0x0000c32f
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c230:	7f7b      	ldrb	r3, [r7, #29]
    c232:	88aa      	ldrh	r2, [r5, #4]
    c234:	4113      	asrs	r3, r2
    c236:	f013 0301 	ands.w	r3, r3, #1
    c23a:	f000 818e 	beq.w	c55a <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c23e:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c240:	b91c      	cbnz	r4, c24a <usbdc_cb_ctl_req+0xd2>
    c242:	e7b3      	b.n	c1ac <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c244:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c246:	2c00      	cmp	r4, #0
    c248:	d0b0      	beq.n	c1ac <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c24a:	6863      	ldr	r3, [r4, #4]
    c24c:	462a      	mov	r2, r5
    c24e:	2102      	movs	r1, #2
    c250:	4620      	mov	r0, r4
    c252:	4798      	blx	r3
    c254:	2800      	cmp	r0, #0
    c256:	dbf5      	blt.n	c244 <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c258:	697b      	ldr	r3, [r7, #20]
    c25a:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c25c:	697b      	ldr	r3, [r7, #20]
    c25e:	9303      	str	r3, [sp, #12]
    c260:	2401      	movs	r4, #1
    c262:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c264:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c266:	9404      	str	r4, [sp, #16]
    c268:	f88d 3014 	strb.w	r3, [sp, #20]
    c26c:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c270:	f000 fd24 	bl	ccbc <usb_d_ep_transfer>
			return true;
    c274:	4620      	mov	r0, r4
    c276:	e79a      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c278:	697b      	ldr	r3, [r7, #20]
    c27a:	7efa      	ldrb	r2, [r7, #27]
    c27c:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c27e:	697b      	ldr	r3, [r7, #20]
    c280:	9303      	str	r3, [sp, #12]
    c282:	2401      	movs	r4, #1
    c284:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c286:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c288:	f88d 6014 	strb.w	r6, [sp, #20]
    c28c:	9404      	str	r4, [sp, #16]
    c28e:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c292:	f000 fd13 	bl	ccbc <usb_d_ep_transfer>
		return true;
    c296:	4620      	mov	r0, r4
    c298:	e789      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c29a:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c29c:	0a1a      	lsrs	r2, r3, #8
    c29e:	2a02      	cmp	r2, #2
    c2a0:	f000 810a 	beq.w	c4b8 <usbdc_cb_ctl_req+0x340>
    c2a4:	2a03      	cmp	r2, #3
    c2a6:	f000 80f0 	beq.w	c48a <usbdc_cb_ctl_req+0x312>
    c2aa:	2a01      	cmp	r2, #1
    c2ac:	f47f af7e 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c2b0:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c2b2:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c2b4:	e893 0003 	ldmia.w	r3, {r0, r1}
    c2b8:	2c12      	cmp	r4, #18
    c2ba:	bf28      	it	cs
    c2bc:	2412      	movcs	r4, #18
    c2be:	f000 fa19 	bl	c6f4 <usb_find_desc>
	if (!dev_desc) {
    c2c2:	4603      	mov	r3, r0
    c2c4:	2800      	cmp	r0, #0
    c2c6:	f43f af71 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c2ca:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c2cc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2ce:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c2d0:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2d2:	f88d 6014 	strb.w	r6, [sp, #20]
    c2d6:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c2da:	f000 fcef 	bl	ccbc <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c2de:	fab0 f080 	clz	r0, r0
    c2e2:	0940      	lsrs	r0, r0, #5
    c2e4:	e763      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c2e6:	f003 011f 	and.w	r1, r3, #31
    c2ea:	2901      	cmp	r1, #1
    c2ec:	f240 8091 	bls.w	c412 <usbdc_cb_ctl_req+0x29a>
    c2f0:	2902      	cmp	r1, #2
    c2f2:	f47f af5b 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c2f6:	88a8      	ldrh	r0, [r5, #4]
    c2f8:	b2c0      	uxtb	r0, r0
    c2fa:	f000 fd91 	bl	ce20 <usb_d_ep_halt>
		if (st < 0) {
    c2fe:	1e03      	subs	r3, r0, #0
    c300:	f6ff af54 	blt.w	c1ac <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c304:	f003 0301 	and.w	r3, r3, #1
    c308:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c30a:	697b      	ldr	r3, [r7, #20]
    c30c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c310:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c312:	697b      	ldr	r3, [r7, #20]
    c314:	9303      	str	r3, [sp, #12]
    c316:	2202      	movs	r2, #2
    c318:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c31a:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c31c:	f88d 6014 	strb.w	r6, [sp, #20]
    c320:	9204      	str	r2, [sp, #16]
    c322:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c326:	f000 fcc9 	bl	ccbc <usb_d_ep_transfer>
	return true;
    c32a:	2001      	movs	r0, #1
    c32c:	e73f      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c32e:	683b      	ldr	r3, [r7, #0]
    c330:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c332:	886c      	ldrh	r4, [r5, #2]
    c334:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c336:	e893 0003 	ldmia.w	r3, {r0, r1}
    c33a:	f000 fa0f 	bl	c75c <usb_find_cfg_desc>
	if (NULL == ifc) {
    c33e:	2800      	cmp	r0, #0
    c340:	f43f af34 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c344:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c346:	78c1      	ldrb	r1, [r0, #3]
    c348:	7883      	ldrb	r3, [r0, #2]
    c34a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c34e:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c352:	4619      	mov	r1, r3
    c354:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c356:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c358:	f000 f9cc 	bl	c6f4 <usb_find_desc>
    c35c:	2800      	cmp	r0, #0
    c35e:	f43f af25 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c362:	7883      	ldrb	r3, [r0, #2]
    c364:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c366:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c36a:	d103      	bne.n	c374 <usbdc_cb_ctl_req+0x1fc>
    c36c:	78c3      	ldrb	r3, [r0, #3]
    c36e:	42a3      	cmp	r3, r4
    c370:	f000 80c9 	beq.w	c506 <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c374:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c376:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c378:	7818      	ldrb	r0, [r3, #0]
    c37a:	4403      	add	r3, r0
    c37c:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c37e:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c380:	f000 f9b8 	bl	c6f4 <usb_find_desc>
		if (NULL == ifc) {
    c384:	2800      	cmp	r0, #0
    c386:	d1ec      	bne.n	c362 <usbdc_cb_ctl_req+0x1ea>
    c388:	e710      	b.n	c1ac <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c38a:	886a      	ldrh	r2, [r5, #2]
    c38c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c38e:	2a00      	cmp	r2, #0
    c390:	d142      	bne.n	c418 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c392:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c394:	b13c      	cbz	r4, c3a6 <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c396:	6863      	ldr	r3, [r4, #4]
    c398:	4620      	mov	r0, r4
    c39a:	2200      	movs	r2, #0
    c39c:	2101      	movs	r1, #1
    c39e:	4798      	blx	r3
		func = func->next;
    c3a0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c3a2:	2c00      	cmp	r4, #0
    c3a4:	d1f7      	bne.n	c396 <usbdc_cb_ctl_req+0x21e>
    c3a6:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c3a8:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3aa:	2300      	movs	r3, #0
    c3ac:	2201      	movs	r2, #1
    c3ae:	e002      	b.n	c3b6 <usbdc_cb_ctl_req+0x23e>
    c3b0:	2300      	movs	r3, #0
    c3b2:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c3b4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3b6:	f88d 6014 	strb.w	r6, [sp, #20]
    c3ba:	9303      	str	r3, [sp, #12]
    c3bc:	9304      	str	r3, [sp, #16]
    c3be:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c3c2:	f000 fc7b 	bl	ccbc <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c3c6:	fab0 f080 	clz	r0, r0
    c3ca:	0940      	lsrs	r0, r0, #5
    c3cc:	e6ef      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c3ce:	2b02      	cmp	r3, #2
    c3d0:	f47f aeec 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c3d4:	88ef      	ldrh	r7, [r5, #6]
    c3d6:	2f00      	cmp	r7, #0
    c3d8:	f47f aee8 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c3dc:	88a8      	ldrh	r0, [r5, #4]
    c3de:	2101      	movs	r1, #1
    c3e0:	b2c0      	uxtb	r0, r0
    c3e2:	f000 fd1d 	bl	ce20 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3e6:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c3e8:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c3ea:	9703      	str	r7, [sp, #12]
    c3ec:	9704      	str	r7, [sp, #16]
    c3ee:	f88d 6014 	strb.w	r6, [sp, #20]
    c3f2:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c3f6:	f000 fc61 	bl	ccbc <usb_d_ep_transfer>
		return true;
    c3fa:	4620      	mov	r0, r4
    c3fc:	e6d7      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c3fe:	2b02      	cmp	r3, #2
    c400:	f47f aed4 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c404:	88ef      	ldrh	r7, [r5, #6]
    c406:	2f00      	cmp	r7, #0
    c408:	f47f aed0 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c40c:	88a8      	ldrh	r0, [r5, #4]
    c40e:	4639      	mov	r1, r7
    c410:	e7e6      	b.n	c3e0 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c412:	2300      	movs	r3, #0
    c414:	9301      	str	r3, [sp, #4]
    c416:	e778      	b.n	c30a <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c418:	683b      	ldr	r3, [r7, #0]
    c41a:	e893 0003 	ldmia.w	r3, {r0, r1}
    c41e:	f000 f99d 	bl	c75c <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c422:	2800      	cmp	r0, #0
    c424:	f43f aec2 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c428:	78c1      	ldrb	r1, [r0, #3]
    c42a:	7882      	ldrb	r2, [r0, #2]
    c42c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c430:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c434:	4619      	mov	r1, r3
    c436:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c438:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c43a:	f000 f95b 	bl	c6f4 <usb_find_desc>
    c43e:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c440:	2800      	cmp	r0, #0
    c442:	d0b0      	beq.n	c3a6 <usbdc_cb_ctl_req+0x22e>
    c444:	24ff      	movs	r4, #255	; 0xff
    c446:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c448:	f890 8002 	ldrb.w	r8, [r0, #2]
    c44c:	45a0      	cmp	r8, r4
    c44e:	d010      	beq.n	c472 <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c450:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c452:	b92c      	cbnz	r4, c460 <usbdc_cb_ctl_req+0x2e8>
    c454:	e092      	b.n	c57c <usbdc_cb_ctl_req+0x404>
    c456:	bf00      	nop
    c458:	20001c38 	.word	0x20001c38
					func = func->next;
    c45c:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c45e:	b134      	cbz	r4, c46e <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c460:	6863      	ldr	r3, [r4, #4]
    c462:	462a      	mov	r2, r5
    c464:	2100      	movs	r1, #0
    c466:	4620      	mov	r0, r4
    c468:	4798      	blx	r3
    c46a:	2800      	cmp	r0, #0
    c46c:	d1f6      	bne.n	c45c <usbdc_cb_ctl_req+0x2e4>
    c46e:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c470:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c472:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c474:	9904      	ldr	r1, [sp, #16]
    c476:	4403      	add	r3, r0
    c478:	4618      	mov	r0, r3
    c47a:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c47c:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c47e:	f000 f939 	bl	c6f4 <usb_find_desc>
    c482:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c484:	2800      	cmp	r0, #0
    c486:	d1df      	bne.n	c448 <usbdc_cb_ctl_req+0x2d0>
    c488:	e78e      	b.n	c3a8 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c48a:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c48c:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c48e:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c490:	e892 0003 	ldmia.w	r2, {r0, r1}
    c494:	b2da      	uxtb	r2, r3
    c496:	f000 f98d 	bl	c7b4 <usb_find_str_desc>
	if (NULL == str_desc) {
    c49a:	4603      	mov	r3, r0
    c49c:	2800      	cmp	r0, #0
    c49e:	f43f ae85 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c4a2:	7801      	ldrb	r1, [r0, #0]
    c4a4:	428c      	cmp	r4, r1
    c4a6:	f67f af10 	bls.w	c2ca <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c4aa:	3d01      	subs	r5, #1
    c4ac:	4225      	tst	r5, r4
    c4ae:	bf0c      	ite	eq
    c4b0:	2201      	moveq	r2, #1
    c4b2:	2200      	movne	r2, #0
    c4b4:	460c      	mov	r4, r1
    c4b6:	e709      	b.n	c2cc <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c4b8:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c4ba:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c4bc:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c4be:	3301      	adds	r3, #1
    c4c0:	e892 0003 	ldmia.w	r2, {r0, r1}
    c4c4:	b2da      	uxtb	r2, r3
    c4c6:	f000 f949 	bl	c75c <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c4ca:	4602      	mov	r2, r0
    c4cc:	2800      	cmp	r0, #0
    c4ce:	f43f ae6d 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c4d2:	78c1      	ldrb	r1, [r0, #3]
    c4d4:	7883      	ldrb	r3, [r0, #2]
    c4d6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c4da:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c4dc:	429c      	cmp	r4, r3
    c4de:	d94b      	bls.n	c578 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c4e0:	3d01      	subs	r5, #1
    c4e2:	4225      	tst	r5, r4
    c4e4:	bf0c      	ite	eq
    c4e6:	2101      	moveq	r1, #1
    c4e8:	2100      	movne	r1, #0
    c4ea:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c4ec:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4ee:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c4f0:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4f2:	f88d 6014 	strb.w	r6, [sp, #20]
    c4f6:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c4fa:	f000 fbdf 	bl	ccbc <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c4fe:	fab0 f080 	clz	r0, r0
    c502:	0940      	lsrs	r0, r0, #5
    c504:	e653      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c506:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c508:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c50a:	b926      	cbnz	r6, c516 <usbdc_cb_ctl_req+0x39e>
    c50c:	e64e      	b.n	c1ac <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c50e:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c510:	2e00      	cmp	r6, #0
    c512:	f43f ae4b 	beq.w	c1ac <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c516:	6873      	ldr	r3, [r6, #4]
    c518:	aa01      	add	r2, sp, #4
    c51a:	2101      	movs	r1, #1
    c51c:	4630      	mov	r0, r6
    c51e:	4798      	blx	r3
    c520:	2800      	cmp	r0, #0
    c522:	d1f4      	bne.n	c50e <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c524:	4601      	mov	r1, r0
    c526:	aa01      	add	r2, sp, #4
    c528:	6873      	ldr	r3, [r6, #4]
    c52a:	4630      	mov	r0, r6
    c52c:	4798      	blx	r3
    c52e:	2800      	cmp	r0, #0
    c530:	f47f ae3c 	bne.w	c1ac <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c534:	b12c      	cbz	r4, c542 <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c536:	7f7b      	ldrb	r3, [r7, #29]
    c538:	2201      	movs	r2, #1
    c53a:	fa02 f505 	lsl.w	r5, r2, r5
    c53e:	432b      	orrs	r3, r5
    c540:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c542:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c544:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c546:	9303      	str	r3, [sp, #12]
    c548:	9304      	str	r3, [sp, #16]
    c54a:	f88d 3014 	strb.w	r3, [sp, #20]
    c54e:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c552:	f000 fbb3 	bl	ccbc <usb_d_ep_transfer>
			return true;
    c556:	2001      	movs	r0, #1
    c558:	e629      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c55a:	697a      	ldr	r2, [r7, #20]
    c55c:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c55e:	697a      	ldr	r2, [r7, #20]
    c560:	9203      	str	r2, [sp, #12]
    c562:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c564:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c566:	f88d 3014 	strb.w	r3, [sp, #20]
    c56a:	f88d 3015 	strb.w	r3, [sp, #21]
    c56e:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c570:	f000 fba4 	bl	ccbc <usb_d_ep_transfer>
		return true;
    c574:	4620      	mov	r0, r4
    c576:	e61a      	b.n	c1ae <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c578:	2100      	movs	r1, #0
    c57a:	e7b7      	b.n	c4ec <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c57c:	4644      	mov	r4, r8
    c57e:	e778      	b.n	c472 <usbdc_cb_ctl_req+0x2fa>

0000c580 <usbd_event_cb>:
{
    c580:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c582:	b338      	cbz	r0, c5d4 <usbd_event_cb+0x54>
    c584:	2801      	cmp	r0, #1
    c586:	d124      	bne.n	c5d2 <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c588:	4d19      	ldr	r5, [pc, #100]	; (c5f0 <usbd_event_cb+0x70>)
    c58a:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c58c:	b13c      	cbz	r4, c59e <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c58e:	6863      	ldr	r3, [r4, #4]
    c590:	4620      	mov	r0, r4
    c592:	2200      	movs	r2, #0
    c594:	2101      	movs	r1, #1
    c596:	4798      	blx	r3
		func = func->next;
    c598:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c59a:	2c00      	cmp	r4, #0
    c59c:	d1f7      	bne.n	c58e <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c59e:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c5a0:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c5a2:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c5a4:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c5a6:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c5a8:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c5aa:	f000 fb41 	bl	cc30 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c5ae:	7f28      	ldrb	r0, [r5, #28]
    c5b0:	f000 faba 	bl	cb28 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c5b4:	4621      	mov	r1, r4
    c5b6:	4620      	mov	r0, r4
    c5b8:	4a0e      	ldr	r2, [pc, #56]	; (c5f4 <usbd_event_cb+0x74>)
    c5ba:	f000 fc69 	bl	ce90 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c5be:	4620      	mov	r0, r4
    c5c0:	4631      	mov	r1, r6
    c5c2:	4a0d      	ldr	r2, [pc, #52]	; (c5f8 <usbd_event_cb+0x78>)
    c5c4:	f000 fc64 	bl	ce90 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c5c8:	4620      	mov	r0, r4
}
    c5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c5ce:	f000 bb4b 	b.w	cc68 <usb_d_ep_enable>
    c5d2:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c5d4:	4b06      	ldr	r3, [pc, #24]	; (c5f0 <usbd_event_cb+0x70>)
    c5d6:	68dc      	ldr	r4, [r3, #12]
    c5d8:	460d      	mov	r5, r1
	while (cg != NULL) {
    c5da:	b144      	cbz	r4, c5ee <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c5dc:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c5de:	4629      	mov	r1, r5
    c5e0:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c5e2:	b103      	cbz	r3, c5e6 <usbd_event_cb+0x66>
			cg->cb(change, value);
    c5e4:	4798      	blx	r3
		cg = cg->next;
    c5e6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c5e8:	2c00      	cmp	r4, #0
    c5ea:	d1f7      	bne.n	c5dc <usbd_event_cb+0x5c>
    c5ec:	bd70      	pop	{r4, r5, r6, pc}
    c5ee:	bd70      	pop	{r4, r5, r6, pc}
    c5f0:	20001c38 	.word	0x20001c38
    c5f4:	0000c179 	.word	0x0000c179
    c5f8:	0000c0dd 	.word	0x0000c0dd

0000c5fc <usbdc_xfer>:
{
    c5fc:	b500      	push	{lr}
    c5fe:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c600:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c604:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c606:	9101      	str	r1, [sp, #4]
    c608:	9202      	str	r2, [sp, #8]
    c60a:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c60e:	f000 fb55 	bl	ccbc <usb_d_ep_transfer>
}
    c612:	b005      	add	sp, #20
    c614:	f85d fb04 	ldr.w	pc, [sp], #4

0000c618 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c618:	2801      	cmp	r0, #1
    c61a:	d009      	beq.n	c630 <usbdc_register_handler+0x18>
    c61c:	d305      	bcc.n	c62a <usbdc_register_handler+0x12>
    c61e:	2802      	cmp	r0, #2
    c620:	d102      	bne.n	c628 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c622:	4805      	ldr	r0, [pc, #20]	; (c638 <usbdc_register_handler+0x20>)
    c624:	f000 bc66 	b.w	cef4 <list_insert_at_end>
    c628:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c62a:	4804      	ldr	r0, [pc, #16]	; (c63c <usbdc_register_handler+0x24>)
    c62c:	f000 bc62 	b.w	cef4 <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c630:	4803      	ldr	r0, [pc, #12]	; (c640 <usbdc_register_handler+0x28>)
    c632:	f000 bc5f 	b.w	cef4 <list_insert_at_end>
    c636:	bf00      	nop
    c638:	20001c44 	.word	0x20001c44
    c63c:	20001c3c 	.word	0x20001c3c
    c640:	20001c40 	.word	0x20001c40

0000c644 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c644:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c646:	4605      	mov	r5, r0
    c648:	3000      	adds	r0, #0
    c64a:	bf18      	it	ne
    c64c:	2001      	movne	r0, #1
    c64e:	f240 3255 	movw	r2, #853	; 0x355
    c652:	490c      	ldr	r1, [pc, #48]	; (c684 <usbdc_init+0x40>)
    c654:	f000 fc4a 	bl	ceec <assert>

	int32_t rc;

	rc = usb_d_init();
    c658:	f000 f9dc 	bl	ca14 <usb_d_init>
	if (rc < 0) {
    c65c:	2800      	cmp	r0, #0
    c65e:	db0f      	blt.n	c680 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c660:	4c09      	ldr	r4, [pc, #36]	; (c688 <usbdc_init+0x44>)
    c662:	2220      	movs	r2, #32
    c664:	2100      	movs	r1, #0
    c666:	4620      	mov	r0, r4
    c668:	f011 ffe0 	bl	1e62c <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c66c:	4907      	ldr	r1, [pc, #28]	; (c68c <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c66e:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c670:	2000      	movs	r0, #0
    c672:	f000 fa51 	bl	cb18 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c676:	2001      	movs	r0, #1
    c678:	4905      	ldr	r1, [pc, #20]	; (c690 <usbdc_init+0x4c>)
    c67a:	f000 fa4d 	bl	cb18 <usb_d_register_callback>

	return 0;
    c67e:	2000      	movs	r0, #0
}
    c680:	bd38      	pop	{r3, r4, r5, pc}
    c682:	bf00      	nop
    c684:	00023444 	.word	0x00023444
    c688:	20001c38 	.word	0x20001c38
    c68c:	0000c0c1 	.word	0x0000c0c1
    c690:	0000c581 	.word	0x0000c581

0000c694 <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c694:	4601      	mov	r1, r0
    c696:	4801      	ldr	r0, [pc, #4]	; (c69c <usbdc_register_function+0x8>)
    c698:	f000 bc2c 	b.w	cef4 <list_insert_at_end>
    c69c:	20001c48 	.word	0x20001c48

0000c6a0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c6a0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c6a2:	4b0a      	ldr	r3, [pc, #40]	; (c6cc <usbdc_start+0x2c>)
    c6a4:	7e9c      	ldrb	r4, [r3, #26]
    c6a6:	b954      	cbnz	r4, c6be <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c6a8:	b160      	cbz	r0, c6c4 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c6aa:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c6ac:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c6ae:	79d2      	ldrb	r2, [r2, #7]
    c6b0:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c6b2:	2201      	movs	r2, #1
    c6b4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c6b6:	f000 fa31 	bl	cb1c <usb_d_enable>
	return ERR_NONE;
    c6ba:	4620      	mov	r0, r4
    c6bc:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    c6be:	f06f 0003 	mvn.w	r0, #3
    c6c2:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    c6c4:	f06f 0008 	mvn.w	r0, #8
}
    c6c8:	bd10      	pop	{r4, pc}
    c6ca:	bf00      	nop
    c6cc:	20001c38 	.word	0x20001c38

0000c6d0 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    c6d0:	f000 ba26 	b.w	cb20 <usb_d_attach>

0000c6d4 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    c6d4:	4b01      	ldr	r3, [pc, #4]	; (c6dc <usbdc_get_ctrl_buffer+0x8>)
}
    c6d6:	6958      	ldr	r0, [r3, #20]
    c6d8:	4770      	bx	lr
    c6da:	bf00      	nop
    c6dc:	20001c38 	.word	0x20001c38

0000c6e0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c6e0:	4b03      	ldr	r3, [pc, #12]	; (c6f0 <usbdc_get_state+0x10>)
    c6e2:	7e98      	ldrb	r0, [r3, #26]
    c6e4:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    c6e8:	bf18      	it	ne
    c6ea:	2010      	movne	r0, #16
    c6ec:	4770      	bx	lr
    c6ee:	bf00      	nop
    c6f0:	20001c38 	.word	0x20001c38

0000c6f4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c6f4:	4288      	cmp	r0, r1
    c6f6:	d214      	bcs.n	c722 <usb_find_desc+0x2e>
    c6f8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c6fa:	2b01      	cmp	r3, #1
    c6fc:	d911      	bls.n	c722 <usb_find_desc+0x2e>
{
    c6fe:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c700:	7844      	ldrb	r4, [r0, #1]
    c702:	4294      	cmp	r4, r2
    c704:	d106      	bne.n	c714 <usb_find_desc+0x20>
    c706:	e009      	b.n	c71c <usb_find_desc+0x28>
    c708:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c70a:	2b01      	cmp	r3, #1
    c70c:	d905      	bls.n	c71a <usb_find_desc+0x26>
	return desc[1];
    c70e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c710:	4294      	cmp	r4, r2
    c712:	d003      	beq.n	c71c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c714:	4418      	add	r0, r3
	while (desc < eof) {
    c716:	4281      	cmp	r1, r0
    c718:	d8f6      	bhi.n	c708 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c71a:	2000      	movs	r0, #0
}
    c71c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c720:	4770      	bx	lr
	return NULL;
    c722:	2000      	movs	r0, #0
    c724:	4770      	bx	lr
    c726:	bf00      	nop

0000c728 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c728:	4288      	cmp	r0, r1
    c72a:	d213      	bcs.n	c754 <usb_find_ep_desc+0x2c>
    c72c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c72e:	2b01      	cmp	r3, #1
    c730:	d910      	bls.n	c754 <usb_find_ep_desc+0x2c>
	return desc[1];
    c732:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c734:	2a04      	cmp	r2, #4
    c736:	d00d      	beq.n	c754 <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c738:	2a05      	cmp	r2, #5
    c73a:	d108      	bne.n	c74e <usb_find_ep_desc+0x26>
    c73c:	e00c      	b.n	c758 <usb_find_ep_desc+0x30>
    c73e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c740:	2b01      	cmp	r3, #1
    c742:	d907      	bls.n	c754 <usb_find_ep_desc+0x2c>
    c744:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c746:	2a04      	cmp	r2, #4
    c748:	d004      	beq.n	c754 <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c74a:	2a05      	cmp	r2, #5
    c74c:	d003      	beq.n	c756 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    c74e:	4418      	add	r0, r3
	while (desc < eof) {
    c750:	4281      	cmp	r1, r0
    c752:	d8f4      	bhi.n	c73e <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c754:	2000      	movs	r0, #0
}
    c756:	4770      	bx	lr
    c758:	4770      	bx	lr
    c75a:	bf00      	nop

0000c75c <usb_find_cfg_desc>:
	while (desc < eof) {
    c75c:	4288      	cmp	r0, r1
    c75e:	d226      	bcs.n	c7ae <usb_find_cfg_desc+0x52>
    c760:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c762:	2b01      	cmp	r3, #1
    c764:	d923      	bls.n	c7ae <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c766:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c768:	7844      	ldrb	r4, [r0, #1]
    c76a:	2c02      	cmp	r4, #2
    c76c:	d106      	bne.n	c77c <usb_find_cfg_desc+0x20>
    c76e:	e012      	b.n	c796 <usb_find_cfg_desc+0x3a>
    c770:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c772:	2b01      	cmp	r3, #1
    c774:	d905      	bls.n	c782 <usb_find_cfg_desc+0x26>
	return desc[1];
    c776:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c778:	2c02      	cmp	r4, #2
    c77a:	d00c      	beq.n	c796 <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    c77c:	4418      	add	r0, r3
	while (desc < eof) {
    c77e:	4281      	cmp	r1, r0
    c780:	d8f6      	bhi.n	c770 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    c782:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    c784:	f85d 4b04 	ldr.w	r4, [sp], #4
    c788:	4770      	bx	lr
		_desc_len_check();
    c78a:	7803      	ldrb	r3, [r0, #0]
    c78c:	2b01      	cmp	r3, #1
    c78e:	d9f8      	bls.n	c782 <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    c790:	7843      	ldrb	r3, [r0, #1]
    c792:	2b02      	cmp	r3, #2
    c794:	d1f5      	bne.n	c782 <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    c796:	7943      	ldrb	r3, [r0, #5]
    c798:	4293      	cmp	r3, r2
    c79a:	d0f3      	beq.n	c784 <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    c79c:	78c4      	ldrb	r4, [r0, #3]
    c79e:	7883      	ldrb	r3, [r0, #2]
    c7a0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c7a4:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    c7a8:	4281      	cmp	r1, r0
    c7aa:	d8ee      	bhi.n	c78a <usb_find_cfg_desc+0x2e>
    c7ac:	e7e9      	b.n	c782 <usb_find_cfg_desc+0x26>
		return NULL;
    c7ae:	2000      	movs	r0, #0
    c7b0:	4770      	bx	lr
    c7b2:	bf00      	nop

0000c7b4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c7b4:	4288      	cmp	r0, r1
    c7b6:	d216      	bcs.n	c7e6 <usb_find_str_desc+0x32>
{
    c7b8:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    c7ba:	2500      	movs	r5, #0
    c7bc:	e005      	b.n	c7ca <usb_find_str_desc+0x16>
	return desc[1];
    c7be:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c7c0:	2c03      	cmp	r4, #3
    c7c2:	d008      	beq.n	c7d6 <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    c7c4:	4418      	add	r0, r3
	while (desc < eof) {
    c7c6:	4281      	cmp	r1, r0
    c7c8:	d902      	bls.n	c7d0 <usb_find_str_desc+0x1c>
    c7ca:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c7cc:	2b01      	cmp	r3, #1
    c7ce:	d8f6      	bhi.n	c7be <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    c7d0:	2000      	movs	r0, #0
}
    c7d2:	bc30      	pop	{r4, r5}
    c7d4:	4770      	bx	lr
			if (i == str_index) {
    c7d6:	4295      	cmp	r5, r2
    c7d8:	d0fb      	beq.n	c7d2 <usb_find_str_desc+0x1e>
    c7da:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    c7dc:	4281      	cmp	r1, r0
    c7de:	f105 0501 	add.w	r5, r5, #1
    c7e2:	d8f2      	bhi.n	c7ca <usb_find_str_desc+0x16>
    c7e4:	e7f4      	b.n	c7d0 <usb_find_str_desc+0x1c>
	return NULL;
    c7e6:	2000      	movs	r0, #0
    c7e8:	4770      	bx	lr
    c7ea:	bf00      	nop

0000c7ec <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    c7ec:	2000      	movs	r0, #0
    c7ee:	4770      	bx	lr

0000c7f0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7f2:	4f0f      	ldr	r7, [pc, #60]	; (c830 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c7f4:	f000 0e0f 	and.w	lr, r0, #15
    c7f8:	463a      	mov	r2, r7
{
    c7fa:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c7fc:	7854      	ldrb	r4, [r2, #1]
    c7fe:	42a0      	cmp	r0, r4
    c800:	461e      	mov	r6, r3
    c802:	f103 0301 	add.w	r3, r3, #1
    c806:	d008      	beq.n	c81a <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c808:	7815      	ldrb	r5, [r2, #0]
    c80a:	3220      	adds	r2, #32
    c80c:	b90d      	cbnz	r5, c812 <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c80e:	4574      	cmp	r4, lr
    c810:	d003      	beq.n	c81a <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c812:	2b0d      	cmp	r3, #13
    c814:	d1f2      	bne.n	c7fc <usb_d_cb_trans_more+0xc>
    c816:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    c81a:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    c81e:	78b3      	ldrb	r3, [r6, #2]
    c820:	2b03      	cmp	r3, #3
    c822:	d001      	beq.n	c828 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    c824:	2000      	movs	r0, #0
    c826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    c828:	69b3      	ldr	r3, [r6, #24]
}
    c82a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    c82e:	4718      	bx	r3
    c830:	20001c58 	.word	0x20001c58

0000c834 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    c834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c838:	f8df 9130 	ldr.w	r9, [pc, #304]	; c96c <_usb_d_cb_trans_done+0x138>
    c83c:	4607      	mov	r7, r0
    c83e:	4688      	mov	r8, r1
    c840:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c842:	f000 010f 	and.w	r1, r0, #15
{
    c846:	2300      	movs	r3, #0
    c848:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c84a:	7844      	ldrb	r4, [r0, #1]
    c84c:	42a7      	cmp	r7, r4
    c84e:	461e      	mov	r6, r3
    c850:	f103 0301 	add.w	r3, r3, #1
    c854:	d008      	beq.n	c868 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c856:	7805      	ldrb	r5, [r0, #0]
    c858:	3020      	adds	r0, #32
    c85a:	b90d      	cbnz	r5, c860 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c85c:	428c      	cmp	r4, r1
    c85e:	d003      	beq.n	c868 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c860:	2b0d      	cmp	r3, #13
    c862:	d1f2      	bne.n	c84a <_usb_d_cb_trans_done+0x16>
    c864:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    c868:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    c86a:	f1b8 0f00 	cmp.w	r8, #0
    c86e:	d110      	bne.n	c892 <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    c870:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c874:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    c878:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c87c:	b32b      	cbz	r3, c8ca <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c87e:	2301      	movs	r3, #1
    c880:	4641      	mov	r1, r8
    c882:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    c884:	444e      	add	r6, r9
    c886:	4638      	mov	r0, r7
    c888:	69f3      	ldr	r3, [r6, #28]
    c88a:	4798      	blx	r3
}
    c88c:	b007      	add	sp, #28
    c88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    c892:	f1b8 0f01 	cmp.w	r8, #1
    c896:	d00b      	beq.n	c8b0 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    c898:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c89c:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    c8a0:	d025      	beq.n	c8ee <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    c8a2:	f1b8 0f03 	cmp.w	r8, #3
    c8a6:	d01d      	beq.n	c8e4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    c8a8:	2106      	movs	r1, #6
    c8aa:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    c8ac:	70d9      	strb	r1, [r3, #3]
    c8ae:	e7e9      	b.n	c884 <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    c8b0:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c8b4:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    c8b8:	f04f 0802 	mov.w	r8, #2
    c8bc:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c8c0:	b1e9      	cbz	r1, c8fe <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    c8c2:	2305      	movs	r3, #5
    c8c4:	4641      	mov	r1, r8
    c8c6:	70a3      	strb	r3, [r4, #2]
    c8c8:	e7dc      	b.n	c884 <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    c8ca:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c8cc:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    c8ce:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c8d0:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    c8d4:	d01f      	beq.n	c916 <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    c8d6:	69e3      	ldr	r3, [r4, #28]
    c8d8:	7860      	ldrb	r0, [r4, #1]
    c8da:	4641      	mov	r1, r8
    c8dc:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c8de:	2302      	movs	r3, #2
    c8e0:	70a3      	strb	r3, [r4, #2]
    c8e2:	e7d3      	b.n	c88c <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c8e4:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    c8e6:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    c8e8:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    c8ea:	70d9      	strb	r1, [r3, #3]
    c8ec:	e7ca      	b.n	c884 <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c8ee:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    c8f2:	2104      	movs	r1, #4
    c8f4:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    c8f6:	b158      	cbz	r0, c910 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    c8f8:	2001      	movs	r0, #1
    c8fa:	7098      	strb	r0, [r3, #2]
    c8fc:	e7c2      	b.n	c884 <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c8fe:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c900:	f884 8002 	strb.w	r8, [r4, #2]
    c904:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c906:	f006 fa5b 	bl	12dc0 <_usb_d_dev_ep_stall>
    c90a:	78e1      	ldrb	r1, [r4, #3]
    c90c:	9a01      	ldr	r2, [sp, #4]
    c90e:	e7b9      	b.n	c884 <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    c910:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    c914:	e7ba      	b.n	c88c <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    c916:	69e3      	ldr	r3, [r4, #28]
    c918:	7860      	ldrb	r0, [r4, #1]
    c91a:	f994 500c 	ldrsb.w	r5, [r4, #12]
    c91e:	2101      	movs	r1, #1
    c920:	4798      	blx	r3
		if (err) {
    c922:	b160      	cbz	r0, c93e <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c924:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c926:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    c928:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c92a:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    c92c:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    c92e:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    c930:	bfa8      	it	ge
    c932:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    c936:	2101      	movs	r1, #1
    c938:	f006 fa42 	bl	12dc0 <_usb_d_dev_ep_stall>
    c93c:	e7a6      	b.n	c88c <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    c93e:	2304      	movs	r3, #4
    c940:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    c942:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    c944:	f8cd 800c 	str.w	r8, [sp, #12]
    c948:	2d00      	cmp	r5, #0
    c94a:	bfac      	ite	ge
    c94c:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    c950:	f003 030f 	andlt.w	r3, r3, #15
    c954:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    c956:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    c958:	f8cd 8010 	str.w	r8, [sp, #16]
    c95c:	f88d 3014 	strb.w	r3, [sp, #20]
    c960:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    c964:	f006 fae8 	bl	12f38 <_usb_d_dev_ep_trans>
    c968:	e790      	b.n	c88c <_usb_d_cb_trans_done+0x58>
    c96a:	bf00      	nop
    c96c:	20001c58 	.word	0x20001c58

0000c970 <usb_d_cb_trans_setup>:
{
    c970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c974:	4f26      	ldr	r7, [pc, #152]	; (ca10 <usb_d_cb_trans_setup+0xa0>)
    c976:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c978:	f000 060f 	and.w	r6, r0, #15
    c97c:	463a      	mov	r2, r7
{
    c97e:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c980:	7851      	ldrb	r1, [r2, #1]
    c982:	428c      	cmp	r4, r1
    c984:	461d      	mov	r5, r3
    c986:	f103 0301 	add.w	r3, r3, #1
    c98a:	d032      	beq.n	c9f2 <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c98c:	7810      	ldrb	r0, [r2, #0]
    c98e:	3220      	adds	r2, #32
    c990:	b908      	cbnz	r0, c996 <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c992:	42b1      	cmp	r1, r6
    c994:	d02d      	beq.n	c9f2 <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c996:	2b0d      	cmp	r3, #13
    c998:	d1f2      	bne.n	c980 <usb_d_cb_trans_setup+0x10>
    c99a:	f06f 0613 	mvn.w	r6, #19
    c99e:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    c9a2:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    c9a4:	4631      	mov	r1, r6
    c9a6:	4620      	mov	r0, r4
    c9a8:	f006 fa9c 	bl	12ee4 <_usb_d_dev_ep_read_req>
	if (n != 8) {
    c9ac:	b2c0      	uxtb	r0, r0
    c9ae:	2808      	cmp	r0, #8
    c9b0:	d00a      	beq.n	c9c8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c9b2:	2101      	movs	r1, #1
    c9b4:	4620      	mov	r0, r4
    c9b6:	f006 fa03 	bl	12dc0 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c9ba:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    c9be:	2101      	movs	r1, #1
}
    c9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    c9c4:	f006 b9fc 	b.w	12dc0 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c9c8:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c9cc:	2100      	movs	r1, #0
    c9ce:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c9d0:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    c9d4:	f006 f9f4 	bl	12dc0 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c9d8:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    c9da:	2100      	movs	r1, #0
    c9dc:	4640      	mov	r0, r8
    c9de:	f006 f9ef 	bl	12dc0 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    c9e2:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    c9e4:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    c9e6:	696b      	ldr	r3, [r5, #20]
    c9e8:	4620      	mov	r0, r4
    c9ea:	4798      	blx	r3
    c9ec:	b120      	cbz	r0, c9f8 <usb_d_cb_trans_setup+0x88>
    c9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9f2:	016e      	lsls	r6, r5, #5
    c9f4:	360c      	adds	r6, #12
    c9f6:	e7d4      	b.n	c9a2 <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c9f8:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    c9fa:	4639      	mov	r1, r7
    c9fc:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    c9fe:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ca00:	f006 f9de 	bl	12dc0 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ca04:	4639      	mov	r1, r7
    ca06:	4640      	mov	r0, r8
}
    ca08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ca0c:	f006 b9d8 	b.w	12dc0 <_usb_d_dev_ep_stall>
    ca10:	20001c58 	.word	0x20001c58

0000ca14 <usb_d_init>:

int32_t usb_d_init(void)
{
    ca14:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    ca16:	f005 fecf 	bl	127b8 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    ca1a:	2800      	cmp	r0, #0
    ca1c:	db70      	blt.n	cb00 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    ca1e:	4c39      	ldr	r4, [pc, #228]	; (cb04 <usb_d_init+0xf0>)
    ca20:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    ca24:	2100      	movs	r1, #0
    ca26:	4620      	mov	r0, r4
    ca28:	f011 fe00 	bl	1e62c <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca2c:	4b36      	ldr	r3, [pc, #216]	; (cb08 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    ca2e:	4937      	ldr	r1, [pc, #220]	; (cb0c <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca30:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    ca32:	22ff      	movs	r2, #255	; 0xff
    ca34:	7062      	strb	r2, [r4, #1]
    ca36:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    ca3a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    ca3e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    ca42:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    ca46:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    ca4a:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    ca4e:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    ca52:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca54:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca56:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca58:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca5a:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca5c:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca5e:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca60:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca62:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca64:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca66:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca68:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca6a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca6e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca72:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca76:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca7a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca7e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca82:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca86:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca8a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ca8e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ca92:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ca96:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    ca9a:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    ca9e:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    caa2:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    caa6:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    caaa:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    caae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cab2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cab6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    caba:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cabe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cac2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cac6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    caca:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cace:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cad2:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cad6:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cada:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cade:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cae2:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cae6:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    caea:	f006 fb5d 	bl	131a8 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    caee:	4908      	ldr	r1, [pc, #32]	; (cb10 <usb_d_init+0xfc>)
    caf0:	2001      	movs	r0, #1
    caf2:	f006 fb59 	bl	131a8 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    caf6:	2002      	movs	r0, #2
    caf8:	4906      	ldr	r1, [pc, #24]	; (cb14 <usb_d_init+0x100>)
    cafa:	f006 fb55 	bl	131a8 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    cafe:	2000      	movs	r0, #0
}
    cb00:	bd10      	pop	{r4, pc}
    cb02:	bf00      	nop
    cb04:	20001c58 	.word	0x20001c58
    cb08:	0000c7ed 	.word	0x0000c7ed
    cb0c:	0000c971 	.word	0x0000c971
    cb10:	0000c7f1 	.word	0x0000c7f1
    cb14:	0000c835 	.word	0x0000c835

0000cb18 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    cb18:	f006 bb34 	b.w	13184 <_usb_d_dev_register_callback>

0000cb1c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    cb1c:	f005 beec 	b.w	128f8 <_usb_d_dev_enable>

0000cb20 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    cb20:	f005 bf1a 	b.w	12958 <_usb_d_dev_attach>

0000cb24 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    cb24:	f005 bf22 	b.w	1296c <_usb_d_dev_set_address>

0000cb28 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    cb28:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb2a:	4e25      	ldr	r6, [pc, #148]	; (cbc0 <usb_d_ep0_init+0x98>)
    cb2c:	7873      	ldrb	r3, [r6, #1]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d043      	beq.n	cbba <usb_d_ep0_init+0x92>
    cb32:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    cb36:	2b00      	cmp	r3, #0
    cb38:	d03f      	beq.n	cbba <usb_d_ep0_init+0x92>
    cb3a:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    cb3e:	2b00      	cmp	r3, #0
    cb40:	d03b      	beq.n	cbba <usb_d_ep0_init+0x92>
    cb42:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    cb46:	b3c3      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb48:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    cb4c:	b3ab      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb4e:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    cb52:	b393      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb54:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    cb58:	b37b      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb5a:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    cb5e:	b363      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb60:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    cb64:	b34b      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb66:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    cb6a:	b333      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb6c:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    cb70:	b31b      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb72:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    cb76:	b303      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb78:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    cb7c:	b1eb      	cbz	r3, cbba <usb_d_ep0_init+0x92>
    cb7e:	4633      	mov	r3, r6
    cb80:	2400      	movs	r4, #0
    cb82:	7859      	ldrb	r1, [r3, #1]
    cb84:	29ff      	cmp	r1, #255	; 0xff
    cb86:	d00a      	beq.n	cb9e <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb88:	781d      	ldrb	r5, [r3, #0]
    cb8a:	3320      	adds	r3, #32
    cb8c:	b90d      	cbnz	r5, cb92 <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb8e:	290f      	cmp	r1, #15
    cb90:	d005      	beq.n	cb9e <usb_d_ep0_init+0x76>
    cb92:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb94:	2c0d      	cmp	r4, #13
    cb96:	d1f4      	bne.n	cb82 <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    cb98:	f06f 0014 	mvn.w	r0, #20
    cb9c:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cb9e:	2100      	movs	r1, #0
    cba0:	4602      	mov	r2, r0
    cba2:	4608      	mov	r0, r1
    cba4:	f005 fee8 	bl	12978 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cba8:	2800      	cmp	r0, #0
    cbaa:	db05      	blt.n	cbb8 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    cbac:	0164      	lsls	r4, r4, #5
    cbae:	1933      	adds	r3, r6, r4
    cbb0:	2000      	movs	r0, #0
    cbb2:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cbb4:	5530      	strb	r0, [r6, r4]
    cbb6:	bd70      	pop	{r4, r5, r6, pc}
}
    cbb8:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    cbba:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    cbbe:	bd70      	pop	{r4, r5, r6, pc}
    cbc0:	20001c58 	.word	0x20001c58

0000cbc4 <usb_d_ep_init>:
{
    cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbc6:	4c19      	ldr	r4, [pc, #100]	; (cc2c <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbc8:	f000 0c0f 	and.w	ip, r0, #15
    cbcc:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    cbd0:	4627      	mov	r7, r4
    cbd2:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cbd4:	785d      	ldrb	r5, [r3, #1]
    cbd6:	42a8      	cmp	r0, r5
    cbd8:	d024      	beq.n	cc24 <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cbda:	781e      	ldrb	r6, [r3, #0]
    cbdc:	3320      	adds	r3, #32
    cbde:	b90e      	cbnz	r6, cbe4 <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbe0:	4565      	cmp	r5, ip
    cbe2:	d01f      	beq.n	cc24 <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cbe4:	459e      	cmp	lr, r3
    cbe6:	d1f5      	bne.n	cbd4 <usb_d_ep_init+0x10>
    cbe8:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cbea:	7863      	ldrb	r3, [r4, #1]
    cbec:	2bff      	cmp	r3, #255	; 0xff
    cbee:	d00a      	beq.n	cc06 <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cbf0:	7826      	ldrb	r6, [r4, #0]
    cbf2:	3420      	adds	r4, #32
    cbf4:	b90e      	cbnz	r6, cbfa <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbf6:	2b0f      	cmp	r3, #15
    cbf8:	d005      	beq.n	cc06 <usb_d_ep_init+0x42>
    cbfa:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cbfc:	2d0d      	cmp	r5, #13
    cbfe:	d1f4      	bne.n	cbea <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    cc00:	f06f 0014 	mvn.w	r0, #20
    cc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc06:	460e      	mov	r6, r1
    cc08:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cc0a:	f005 feb5 	bl	12978 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cc0e:	2800      	cmp	r0, #0
    cc10:	db07      	blt.n	cc22 <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    cc12:	016d      	lsls	r5, r5, #5
    cc14:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cc16:	f006 0603 	and.w	r6, r6, #3
    cc1a:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    cc1c:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    cc1e:	2000      	movs	r0, #0
    cc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    cc24:	f06f 0013 	mvn.w	r0, #19
    cc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc2a:	bf00      	nop
    cc2c:	20001c58 	.word	0x20001c58

0000cc30 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    cc30:	b570      	push	{r4, r5, r6, lr}
    cc32:	4e0c      	ldr	r6, [pc, #48]	; (cc64 <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc34:	f000 050f 	and.w	r5, r0, #15
    cc38:	4633      	mov	r3, r6
{
    cc3a:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cc3c:	785a      	ldrb	r2, [r3, #1]
    cc3e:	4290      	cmp	r0, r2
    cc40:	d008      	beq.n	cc54 <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cc42:	7819      	ldrb	r1, [r3, #0]
    cc44:	3320      	adds	r3, #32
    cc46:	b909      	cbnz	r1, cc4c <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc48:	42aa      	cmp	r2, r5
    cc4a:	d003      	beq.n	cc54 <usb_d_ep_deinit+0x24>
    cc4c:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cc4e:	2c0d      	cmp	r4, #13
    cc50:	d1f4      	bne.n	cc3c <usb_d_ep_deinit+0xc>
    cc52:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    cc54:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    cc58:	f005 ff00 	bl	12a5c <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    cc5c:	23ff      	movs	r3, #255	; 0xff
    cc5e:	7063      	strb	r3, [r4, #1]
    cc60:	bd70      	pop	{r4, r5, r6, pc}
    cc62:	bf00      	nop
    cc64:	20001c58 	.word	0x20001c58

0000cc68 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    cc68:	b570      	push	{r4, r5, r6, lr}
    cc6a:	4d13      	ldr	r5, [pc, #76]	; (ccb8 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc6c:	f000 060f 	and.w	r6, r0, #15
    cc70:	462b      	mov	r3, r5
{
    cc72:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cc74:	7859      	ldrb	r1, [r3, #1]
    cc76:	4288      	cmp	r0, r1
    cc78:	d00a      	beq.n	cc90 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cc7a:	781c      	ldrb	r4, [r3, #0]
    cc7c:	3320      	adds	r3, #32
    cc7e:	b90c      	cbnz	r4, cc84 <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc80:	42b1      	cmp	r1, r6
    cc82:	d015      	beq.n	ccb0 <usb_d_ep_enable+0x48>
    cc84:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cc86:	2a0d      	cmp	r2, #13
    cc88:	d1f4      	bne.n	cc74 <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cc8a:	f06f 0011 	mvn.w	r0, #17
    cc8e:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cc90:	0152      	lsls	r2, r2, #5
    cc92:	5cab      	ldrb	r3, [r5, r2]
    cc94:	2b00      	cmp	r3, #0
    cc96:	bf14      	ite	ne
    cc98:	2301      	movne	r3, #1
    cc9a:	2302      	moveq	r3, #2
    cc9c:	4415      	add	r5, r2
    cc9e:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    cca0:	f005 ff6e 	bl	12b80 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    cca4:	2800      	cmp	r0, #0
    cca6:	db00      	blt.n	ccaa <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    cca8:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    ccaa:	2300      	movs	r3, #0
    ccac:	70ab      	strb	r3, [r5, #2]
    ccae:	bd70      	pop	{r4, r5, r6, pc}
    ccb0:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    ccb2:	2302      	movs	r3, #2
    ccb4:	e7f2      	b.n	cc9c <usb_d_ep_enable+0x34>
    ccb6:	bf00      	nop
    ccb8:	20001c58 	.word	0x20001c58

0000ccbc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccc0:	f8df 811c 	ldr.w	r8, [pc, #284]	; cde0 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    ccc4:	7a05      	ldrb	r5, [r0, #8]
{
    ccc6:	b087      	sub	sp, #28
    ccc8:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccca:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    ccce:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ccd0:	7859      	ldrb	r1, [r3, #1]
    ccd2:	428d      	cmp	r5, r1
    ccd4:	d00c      	beq.n	ccf0 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ccd6:	781c      	ldrb	r4, [r3, #0]
    ccd8:	3320      	adds	r3, #32
    ccda:	b90c      	cbnz	r4, cce0 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccdc:	42b9      	cmp	r1, r7
    ccde:	d007      	beq.n	ccf0 <usb_d_ep_transfer+0x34>
    cce0:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cce2:	2a0d      	cmp	r2, #13
    cce4:	d1f4      	bne.n	ccd0 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cce6:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    ccea:	b007      	add	sp, #28
    ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    ccf0:	0154      	lsls	r4, r2, #5
    ccf2:	4606      	mov	r6, r0
    ccf4:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    ccf8:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    ccfa:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    ccfe:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    cd02:	f006 fa6f 	bl	131e4 <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    cd06:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cd0a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    cd0e:	f89d 7007 	ldrb.w	r7, [sp, #7]
    cd12:	b2ff      	uxtb	r7, r7
    cd14:	2f01      	cmp	r7, #1
    cd16:	d011      	beq.n	cd3c <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    cd18:	a802      	add	r0, sp, #8
    cd1a:	f006 fa6b 	bl	131f4 <atomic_leave_critical>
		switch (state) {
    cd1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd22:	b2db      	uxtb	r3, r3
    cd24:	2b05      	cmp	r3, #5
    cd26:	d040      	beq.n	cdaa <usb_d_ep_transfer+0xee>
    cd28:	2b06      	cmp	r3, #6
    cd2a:	d022      	beq.n	cd72 <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	bf0c      	ite	eq
    cd30:	f06f 0012 	mvneq.w	r0, #18
    cd34:	2001      	movne	r0, #1
}
    cd36:	b007      	add	sp, #28
    cd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cd3c:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    cd3e:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cd40:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    cd44:	f006 fa56 	bl	131f4 <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd48:	f818 2004 	ldrb.w	r2, [r8, r4]
    cd4c:	b9b2      	cbnz	r2, cd7c <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    cd4e:	f89b 1013 	ldrb.w	r1, [fp, #19]
    cd52:	f89b 3012 	ldrb.w	r3, [fp, #18]
    cd56:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cd5a:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    cd5c:	bb4b      	cbnz	r3, cdb2 <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cd5e:	2204      	movs	r2, #4
    cd60:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    cd64:	9304      	str	r3, [sp, #16]
    cd66:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cd68:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cd6a:	9203      	str	r2, [sp, #12]
    cd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cd70:	e011      	b.n	cd96 <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    cd72:	f06f 000f 	mvn.w	r0, #15
}
    cd76:	b007      	add	sp, #28
    cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cd7c:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    cd80:	6833      	ldr	r3, [r6, #0]
    cd82:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cd84:	bf18      	it	ne
    cd86:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    cd88:	062a      	lsls	r2, r5, #24
    cd8a:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cd8e:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cd90:	d4ec      	bmi.n	cd6c <usb_d_ep_transfer+0xb0>
    cd92:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    cd96:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cd98:	f88d 3014 	strb.w	r3, [sp, #20]
    cd9c:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cda0:	f006 f8ca 	bl	12f38 <_usb_d_dev_ep_trans>
}
    cda4:	b007      	add	sp, #28
    cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    cdaa:	2002      	movs	r0, #2
}
    cdac:	b007      	add	sp, #28
    cdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    cdb2:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    cdb6:	4599      	cmp	r9, r3
    cdb8:	464f      	mov	r7, r9
    cdba:	bf28      	it	cs
    cdbc:	461f      	movcs	r7, r3
    cdbe:	2900      	cmp	r1, #0
    cdc0:	db05      	blt.n	cdce <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    cdc2:	6833      	ldr	r3, [r6, #0]
    cdc4:	9704      	str	r7, [sp, #16]
    cdc6:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cdc8:	4617      	mov	r7, r2
    cdca:	7a33      	ldrb	r3, [r6, #8]
    cdcc:	e7e1      	b.n	cd92 <usb_d_ep_transfer+0xd6>
    cdce:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    cdd0:	6832      	ldr	r2, [r6, #0]
    cdd2:	9704      	str	r7, [sp, #16]
    cdd4:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cdd6:	bf94      	ite	ls
    cdd8:	2700      	movls	r7, #0
    cdda:	2701      	movhi	r7, #1
    cddc:	7a33      	ldrb	r3, [r6, #8]
    cdde:	e7c5      	b.n	cd6c <usb_d_ep_transfer+0xb0>
    cde0:	20001c58 	.word	0x20001c58

0000cde4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    cde4:	b570      	push	{r4, r5, r6, lr}
    cde6:	4e0d      	ldr	r6, [pc, #52]	; (ce1c <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cde8:	f000 050f 	and.w	r5, r0, #15
    cdec:	4633      	mov	r3, r6
{
    cdee:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cdf0:	785a      	ldrb	r2, [r3, #1]
    cdf2:	4290      	cmp	r0, r2
    cdf4:	d008      	beq.n	ce08 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cdf6:	7819      	ldrb	r1, [r3, #0]
    cdf8:	3320      	adds	r3, #32
    cdfa:	b909      	cbnz	r1, ce00 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cdfc:	42aa      	cmp	r2, r5
    cdfe:	d003      	beq.n	ce08 <usb_d_ep_abort+0x24>
    ce00:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce02:	2c0d      	cmp	r4, #13
    ce04:	d1f4      	bne.n	cdf0 <usb_d_ep_abort+0xc>
    ce06:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ce08:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    ce0c:	f006 f962 	bl	130d4 <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ce10:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    ce12:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ce14:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    ce16:	70e3      	strb	r3, [r4, #3]
    ce18:	bd70      	pop	{r4, r5, r6, pc}
    ce1a:	bf00      	nop
    ce1c:	20001c58 	.word	0x20001c58

0000ce20 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    ce20:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    ce22:	460c      	mov	r4, r1
    ce24:	b131      	cbz	r1, ce34 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    ce26:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    ce28:	bf18      	it	ne
    ce2a:	2102      	movne	r1, #2
	}
}
    ce2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    ce30:	f005 bfc6 	b.w	12dc0 <_usb_d_dev_ep_stall>
    ce34:	4e15      	ldr	r6, [pc, #84]	; (ce8c <usb_d_ep_halt+0x6c>)
    ce36:	4605      	mov	r5, r0
    ce38:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce3a:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce3e:	785a      	ldrb	r2, [r3, #1]
    ce40:	4295      	cmp	r5, r2
    ce42:	d00a      	beq.n	ce5a <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce44:	7819      	ldrb	r1, [r3, #0]
    ce46:	3320      	adds	r3, #32
    ce48:	b909      	cbnz	r1, ce4e <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce4a:	4282      	cmp	r2, r0
    ce4c:	d005      	beq.n	ce5a <usb_d_ep_halt+0x3a>
    ce4e:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce50:	2c0d      	cmp	r4, #13
    ce52:	d1f4      	bne.n	ce3e <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    ce54:	f06f 0011 	mvn.w	r0, #17
    ce58:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    ce5a:	2102      	movs	r1, #2
    ce5c:	4628      	mov	r0, r5
    ce5e:	f005 ffaf 	bl	12dc0 <_usb_d_dev_ep_stall>
    ce62:	b900      	cbnz	r0, ce66 <usb_d_ep_halt+0x46>
}
    ce64:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ce66:	2100      	movs	r1, #0
    ce68:	4628      	mov	r0, r5
    ce6a:	f005 ffa9 	bl	12dc0 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    ce6e:	2800      	cmp	r0, #0
    ce70:	dbf8      	blt.n	ce64 <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ce72:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    ce76:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ce78:	2301      	movs	r3, #1
    ce7a:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    ce7c:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    ce7e:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    ce80:	69e3      	ldr	r3, [r4, #28]
    ce82:	2200      	movs	r2, #0
    ce84:	4798      	blx	r3
	return ERR_NONE;
    ce86:	2000      	movs	r0, #0
    ce88:	bd70      	pop	{r4, r5, r6, pc}
    ce8a:	bf00      	nop
    ce8c:	20001c58 	.word	0x20001c58

0000ce90 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce92:	f8df e054 	ldr.w	lr, [pc, #84]	; cee8 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce96:	f000 070f 	and.w	r7, r0, #15
    ce9a:	4673      	mov	r3, lr
{
    ce9c:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce9e:	785d      	ldrb	r5, [r3, #1]
    cea0:	42a8      	cmp	r0, r5
    cea2:	d008      	beq.n	ceb6 <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cea4:	781e      	ldrb	r6, [r3, #0]
    cea6:	3320      	adds	r3, #32
    cea8:	b90e      	cbnz	r6, ceae <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ceaa:	42bd      	cmp	r5, r7
    ceac:	d003      	beq.n	ceb6 <usb_d_ep_register_callback+0x26>
    ceae:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ceb0:	2c0d      	cmp	r4, #13
    ceb2:	d1f4      	bne.n	ce9e <usb_d_ep_register_callback+0xe>
    ceb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    ceb6:	4b0b      	ldr	r3, [pc, #44]	; (cee4 <usb_d_ep_register_callback+0x54>)
    ceb8:	2a00      	cmp	r2, #0
    ceba:	bf08      	it	eq
    cebc:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    cebe:	2901      	cmp	r1, #1
    cec0:	d003      	beq.n	ceca <usb_d_ep_register_callback+0x3a>
    cec2:	d30a      	bcc.n	ceda <usb_d_ep_register_callback+0x4a>
    cec4:	2902      	cmp	r1, #2
    cec6:	d004      	beq.n	ced2 <usb_d_ep_register_callback+0x42>
    cec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    ceca:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cece:	61a2      	str	r2, [r4, #24]
		break;
    ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    ced2:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    ced6:	61e2      	str	r2, [r4, #28]
    ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    ceda:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    cede:	6162      	str	r2, [r4, #20]
		break;
    cee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cee2:	bf00      	nop
    cee4:	0000c7ed 	.word	0x0000c7ed
    cee8:	20001c58 	.word	0x20001c58

0000ceec <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    ceec:	b900      	cbnz	r0, cef0 <assert+0x4>
		__asm("BKPT #0");
    ceee:	be00      	bkpt	0x0000
    cef0:	4770      	bx	lr
    cef2:	bf00      	nop

0000cef4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    cef4:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    cef6:	6804      	ldr	r4, [r0, #0]
{
    cef8:	4606      	mov	r6, r0
    cefa:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    cefc:	b144      	cbz	r4, cf10 <list_insert_at_end+0x1c>
		if (it == element) {
    cefe:	428c      	cmp	r4, r1
    cf00:	d015      	beq.n	cf2e <list_insert_at_end+0x3a>
    cf02:	4623      	mov	r3, r4
    cf04:	e001      	b.n	cf0a <list_insert_at_end+0x16>
    cf06:	429d      	cmp	r5, r3
    cf08:	d011      	beq.n	cf2e <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d1fa      	bne.n	cf06 <list_insert_at_end+0x12>
    cf10:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    cf12:	224f      	movs	r2, #79	; 0x4f
    cf14:	4908      	ldr	r1, [pc, #32]	; (cf38 <list_insert_at_end+0x44>)
    cf16:	f7ff ffe9 	bl	ceec <assert>

	if (!list->head) {
    cf1a:	6833      	ldr	r3, [r6, #0]
    cf1c:	b90b      	cbnz	r3, cf22 <list_insert_at_end+0x2e>
    cf1e:	e008      	b.n	cf32 <list_insert_at_end+0x3e>
    cf20:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    cf22:	6823      	ldr	r3, [r4, #0]
    cf24:	2b00      	cmp	r3, #0
    cf26:	d1fb      	bne.n	cf20 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    cf28:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    cf2a:	602b      	str	r3, [r5, #0]
    cf2c:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    cf2e:	2000      	movs	r0, #0
    cf30:	e7ef      	b.n	cf12 <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    cf32:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    cf34:	602b      	str	r3, [r5, #0]
		return;
    cf36:	bd70      	pop	{r4, r5, r6, pc}
    cf38:	0002345c 	.word	0x0002345c

0000cf3c <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    cf3e:	4d1f      	ldr	r5, [pc, #124]	; (cfbc <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    cf40:	682c      	ldr	r4, [r5, #0]
    cf42:	f014 0401 	ands.w	r4, r4, #1
    cf46:	d002      	beq.n	cf4e <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    cf48:	4b1d      	ldr	r3, [pc, #116]	; (cfc0 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    cf4a:	6818      	ldr	r0, [r3, #0]
    cf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf4e:	2074      	movs	r0, #116	; 0x74
    cf50:	f006 faca 	bl	134e8 <_Znwj>
    cf54:	4e1a      	ldr	r6, [pc, #104]	; (cfc0 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    cf56:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    cf58:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    cf5a:	210c      	movs	r1, #12
    cf5c:	f04f 30ff 	mov.w	r0, #4294967295
    cf60:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    cf62:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    cf64:	605c      	str	r4, [r3, #4]
    cf66:	6658      	str	r0, [r3, #100]	; 0x64
    cf68:	609c      	str	r4, [r3, #8]
    cf6a:	6698      	str	r0, [r3, #104]	; 0x68
    cf6c:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    cf6e:	841c      	strh	r4, [r3, #32]
    cf70:	611c      	str	r4, [r3, #16]
    cf72:	625c      	str	r4, [r3, #36]	; 0x24
    cf74:	615c      	str	r4, [r3, #20]
    cf76:	851c      	strh	r4, [r3, #40]	; 0x28
    cf78:	619c      	str	r4, [r3, #24]
    cf7a:	62dc      	str	r4, [r3, #44]	; 0x2c
    cf7c:	61dc      	str	r4, [r3, #28]
    cf7e:	861c      	strh	r4, [r3, #48]	; 0x30
    cf80:	635c      	str	r4, [r3, #52]	; 0x34
    cf82:	871c      	strh	r4, [r3, #56]	; 0x38
    cf84:	63dc      	str	r4, [r3, #60]	; 0x3c
    cf86:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    cf8a:	645c      	str	r4, [r3, #68]	; 0x44
    cf8c:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    cf90:	64dc      	str	r4, [r3, #76]	; 0x4c
    cf92:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    cf96:	655c      	str	r4, [r3, #84]	; 0x54
    cf98:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    cf9c:	65dc      	str	r4, [r3, #92]	; 0x5c
    cf9e:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    cfa2:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    cfa6:	671c      	str	r4, [r3, #112]	; 0x70
    cfa8:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    cfac:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    cfb0:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    cfb4:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    cfb6:	6033      	str	r3, [r6, #0]
    cfb8:	602a      	str	r2, [r5, #0]
}
    cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfbc:	20001df8 	.word	0x20001df8
    cfc0:	20001e30 	.word	0x20001e30

0000cfc4 <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    cfc6:	4bbd      	ldr	r3, [pc, #756]	; (d2bc <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    cfc8:	4605      	mov	r5, r0
    };
    cfca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    cfcc:	b085      	sub	sp, #20
    };
    cfce:	ac04      	add	r4, sp, #16
    cfd0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    cfd4:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    cfd6:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    cfd8:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    cfdc:	2303      	movs	r3, #3
    cfde:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    cfe2:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    cfe6:	f245 03c3 	movw	r3, #20675	; 0x50c3
    cfea:	842b      	strh	r3, [r5, #32]
    cfec:	852b      	strh	r3, [r5, #40]	; 0x28
    cfee:	862b      	strh	r3, [r5, #48]	; 0x30
    cff0:	872b      	strh	r3, [r5, #56]	; 0x38
    cff2:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    cff6:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    cffa:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    cffe:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d002:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    d006:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    d008:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    d00c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    d010:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    d014:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    d016:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    d018:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d01a:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    d01c:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d01e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    d022:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d026:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d02a:	07cf      	lsls	r7, r1, #31
    d02c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d030:	f04f 0401 	mov.w	r4, #1
    d034:	bf54      	ite	pl
    d036:	f364 0003 	bfipl	r0, r4, #0, #4
    d03a:	f364 1007 	bfimi	r0, r4, #4, #4
    d03e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d042:	4a9f      	ldr	r2, [pc, #636]	; (d2c0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d044:	4413      	add	r3, r2
    d046:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d048:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d04a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d04e:	f041 0101 	orr.w	r1, r1, #1
    d052:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d056:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d058:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d05a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d05e:	01db      	lsls	r3, r3, #7
    d060:	441a      	add	r2, r3
    d062:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d066:	07ce      	lsls	r6, r1, #31
    d068:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d06c:	bf54      	ite	pl
    d06e:	f364 0003 	bfipl	r0, r4, #0, #4
    d072:	f364 1007 	bfimi	r0, r4, #4, #4
    d076:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d07a:	4a91      	ldr	r2, [pc, #580]	; (d2c0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d07c:	4413      	add	r3, r2
    d07e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d080:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d082:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d086:	f041 0101 	orr.w	r1, r1, #1
    d08a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d08e:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d090:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d092:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d096:	01db      	lsls	r3, r3, #7
    d098:	441a      	add	r2, r3
    d09a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d09e:	07cf      	lsls	r7, r1, #31
    d0a0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d0a4:	bf54      	ite	pl
    d0a6:	f364 0003 	bfipl	r0, r4, #0, #4
    d0aa:	f364 1007 	bfimi	r0, r4, #4, #4
    d0ae:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d0b2:	4a83      	ldr	r2, [pc, #524]	; (d2c0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d0b4:	4413      	add	r3, r2
    d0b6:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d0b8:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d0ba:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d0be:	f041 0101 	orr.w	r1, r1, #1
    d0c2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d0c6:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d0c8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d0ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d0ce:	01db      	lsls	r3, r3, #7
    d0d0:	441a      	add	r2, r3
    d0d2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d0d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d0da:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d0de:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d0e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d0e4:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d0e6:	bf4c      	ite	mi
    d0e8:	f364 1007 	bfimi	r0, r4, #4, #4
    d0ec:	f364 0003 	bfipl	r0, r4, #0, #4
    d0f0:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d0f4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d0f8:	4a72      	ldr	r2, [pc, #456]	; (d2c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d0fa:	f041 0101 	orr.w	r1, r1, #1
    d0fe:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d102:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d106:	f36f 1386 	bfc	r3, #6, #1
    d10a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d10e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d112:	065f      	lsls	r7, r3, #25
    d114:	d4fb      	bmi.n	d10e <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    d116:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d11a:	496a      	ldr	r1, [pc, #424]	; (d2c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    d11c:	2004      	movs	r0, #4
    d11e:	f360 0303 	bfi	r3, r0, #0, #4
    d122:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d126:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d12e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d132:	684b      	ldr	r3, [r1, #4]
    d134:	06de      	lsls	r6, r3, #27
    d136:	d4fc      	bmi.n	d132 <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d138:	4963      	ldr	r1, [pc, #396]	; (d2c8 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    d13a:	4a64      	ldr	r2, [pc, #400]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d13c:	6a0b      	ldr	r3, [r1, #32]
    d13e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d142:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    d144:	8813      	ldrh	r3, [r2, #0]
    d146:	f043 0301 	orr.w	r3, r3, #1
    d14a:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    d14c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d14e:	f013 0301 	ands.w	r3, r3, #1
    d152:	d1fb      	bne.n	d14c <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    d154:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    d158:	290a      	cmp	r1, #10
    d15a:	f000 80e7 	beq.w	d32c <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    d15e:	290c      	cmp	r1, #12
    d160:	f000 80df 	beq.w	d322 <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    d164:	2908      	cmp	r1, #8
    d166:	f000 80d5 	beq.w	d314 <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    d16a:	4b58      	ldr	r3, [pc, #352]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d16c:	881a      	ldrh	r2, [r3, #0]
    d16e:	2101      	movs	r1, #1
    d170:	f361 220a 	bfi	r2, r1, #8, #3
    d174:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    d176:	889a      	ldrh	r2, [r3, #4]
    d178:	b292      	uxth	r2, r2
    d17a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    d17e:	f042 0204 	orr.w	r2, r2, #4
    d182:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d184:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    d186:	f014 0404 	ands.w	r4, r4, #4
    d18a:	d1fb      	bne.n	d184 <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    d18c:	4620      	mov	r0, r4
    d18e:	f001 fe33 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d192:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d194:	4620      	mov	r0, r4
    d196:	f001 fe39 	bl	ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d19a:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d19c:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d19e:	f023 0302 	bic.w	r3, r3, #2
    d1a2:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d1a4:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d1a6:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d1a8:	6833      	ldr	r3, [r6, #0]
    d1aa:	2b01      	cmp	r3, #1
    d1ac:	d0fc      	beq.n	d1a8 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d1ae:	4b48      	ldr	r3, [pc, #288]	; (d2d0 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d1b0:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d1b2:	4948      	ldr	r1, [pc, #288]	; (d2d4 <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d1b4:	4f48      	ldr	r7, [pc, #288]	; (d2d8 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d1b6:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d1ba:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d1bc:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d1be:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d1c0:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d1c2:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d1c4:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d1c6:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d1c8:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d1ca:	f001 fe15 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d1ce:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d1d0:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d1d2:	f023 0302 	bic.w	r3, r3, #2
    d1d6:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d1d8:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d1da:	6803      	ldr	r3, [r0, #0]
    d1dc:	2b01      	cmp	r3, #1
    d1de:	d0fc      	beq.n	d1da <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d1e0:	4b3e      	ldr	r3, [pc, #248]	; (d2dc <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d1e2:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d1e4:	2001      	movs	r0, #1
    d1e6:	f001 fe11 	bl	ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d1ea:	2300      	movs	r3, #0
    d1ec:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d1ee:	4a37      	ldr	r2, [pc, #220]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d1f0:	4e3b      	ldr	r6, [pc, #236]	; (d2e0 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d1f2:	493c      	ldr	r1, [pc, #240]	; (d2e4 <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d1f4:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d1f6:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d1fa:	2408      	movs	r4, #8
    d1fc:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d1fe:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d200:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d202:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d204:	f043 0301 	orr.w	r3, r3, #1
    d208:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d20a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d20c:	075c      	lsls	r4, r3, #29
    d20e:	d4fc      	bmi.n	d20a <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d210:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d212:	492e      	ldr	r1, [pc, #184]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d218:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d21a:	7a13      	ldrb	r3, [r2, #8]
    d21c:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d220:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d222:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d224:	06d8      	lsls	r0, r3, #27
    d226:	d4fc      	bmi.n	d222 <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d228:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d22a:	4c28      	ldr	r4, [pc, #160]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d22c:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d22e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d230:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d234:	d1fb      	bne.n	d22e <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d236:	78e3      	ldrb	r3, [r4, #3]
    d238:	f043 0301 	orr.w	r3, r3, #1
    d23c:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d23e:	f001 fddb 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d242:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d244:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d246:	6813      	ldr	r3, [r2, #0]
    d248:	f043 0302 	orr.w	r3, r3, #2
    d24c:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d24e:	f001 fdd3 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d252:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d254:	4a1d      	ldr	r2, [pc, #116]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d256:	f043 0302 	orr.w	r3, r3, #2
    d25a:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d25c:	88a3      	ldrh	r3, [r4, #4]
    d25e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d262:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d264:	8823      	ldrh	r3, [r4, #0]
    d266:	f043 0302 	orr.w	r3, r3, #2
    d26a:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d26c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d26e:	0799      	lsls	r1, r3, #30
    d270:	d4fc      	bmi.n	d26c <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d272:	2000      	movs	r0, #0
    d274:	f001 fdc0 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d278:	6803      	ldr	r3, [r0, #0]
    d27a:	079a      	lsls	r2, r3, #30
    d27c:	d4f9      	bmi.n	d272 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d27e:	2001      	movs	r0, #1
    d280:	f001 fdba 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d284:	6803      	ldr	r3, [r0, #0]
    d286:	079b      	lsls	r3, r3, #30
    d288:	d4f9      	bmi.n	d27e <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d28a:	4a10      	ldr	r2, [pc, #64]	; (d2cc <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d28c:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d290:	f013 0301 	ands.w	r3, r3, #1
    d294:	d1fa      	bne.n	d28c <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d296:	4e14      	ldr	r6, [pc, #80]	; (d2e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d298:	4c14      	ldr	r4, [pc, #80]	; (d2ec <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d29a:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d29c:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d2a0:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d2a4:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d2a6:	8029      	strh	r1, [r5, #0]
    d2a8:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d2aa:	8229      	strh	r1, [r5, #16]
    d2ac:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d2ae:	806b      	strh	r3, [r5, #2]
    d2b0:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d2b2:	826b      	strh	r3, [r5, #18]
    d2b4:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d2b6:	80aa      	strh	r2, [r5, #4]
    d2b8:	e01a      	b.n	d2f0 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d2ba:	bf00      	nop
    d2bc:	0002347c 	.word	0x0002347c
    d2c0:	41008000 	.word	0x41008000
    d2c4:	40001c00 	.word	0x40001c00
    d2c8:	40000800 	.word	0x40000800
    d2cc:	43002000 	.word	0x43002000
    d2d0:	00204600 	.word	0x00204600
    d2d4:	20001e0c 	.word	0x20001e0c
    d2d8:	43002040 	.word	0x43002040
    d2dc:	00204700 	.word	0x00204700
    d2e0:	20001e30 	.word	0x20001e30
    d2e4:	43002034 	.word	0x43002034
    d2e8:	25ff0000 	.word	0x25ff0000
    d2ec:	60f80000 	.word	0x60f80000
    d2f0:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d2f2:	82aa      	strh	r2, [r5, #20]
    d2f4:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d2f6:	80eb      	strh	r3, [r5, #6]
    d2f8:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d2fa:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d2fc:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d300:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d302:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d304:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d306:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d308:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d30a:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d30c:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d30e:	83eb      	strh	r3, [r5, #30]
}
    d310:	b005      	add	sp, #20
    d312:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d314:	88d3      	ldrh	r3, [r2, #6]
    d316:	f043 0318 	orr.w	r3, r3, #24
    d31a:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d31c:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d320:	e723      	b.n	d16a <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d322:	88d0      	ldrh	r0, [r2, #6]
    d324:	f363 00c4 	bfi	r0, r3, #3, #2
    d328:	80d0      	strh	r0, [r2, #6]
    d32a:	e7f7      	b.n	d31c <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d32c:	88d3      	ldrh	r3, [r2, #6]
    d32e:	2002      	movs	r0, #2
    d330:	f360 03c4 	bfi	r3, r0, #3, #2
    d334:	80d3      	strh	r3, [r2, #6]
    d336:	e7f1      	b.n	d31c <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d338 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d33c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d340:	2b00      	cmp	r3, #0
    d342:	f000 80ab 	beq.w	d49c <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d346:	4b89      	ldr	r3, [pc, #548]	; (d56c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d348:	4604      	mov	r4, r0
    d34a:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d34e:	f010 0001 	ands.w	r0, r0, #1
    d352:	f000 80a5 	beq.w	d4a0 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d356:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d358:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d35c:	3301      	adds	r3, #1
    d35e:	4293      	cmp	r3, r2
    d360:	6723      	str	r3, [r4, #112]	; 0x70
    d362:	d302      	bcc.n	d36a <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d364:	2301      	movs	r3, #1
    d366:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d36a:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d36c:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d36e:	8821      	ldrh	r1, [r4, #0]
    d370:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d372:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d374:	fb83 6706 	smull	r6, r7, r3, r6
    d378:	0bf2      	lsrs	r2, r6, #15
    d37a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d37e:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d380:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d384:	fb01 f103 	mul.w	r1, r1, r3
    d388:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d38c:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d38e:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d390:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d392:	6262      	str	r2, [r4, #36]	; 0x24
    d394:	fb80 8905 	smull	r8, r9, r0, r5
    d398:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d39c:	b2b2      	uxth	r2, r6
    d39e:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d3a2:	fb02 f000 	mul.w	r0, r2, r0
    d3a6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d3aa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d3ae:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d3b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d3b2:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d3b4:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d3b6:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d3b8:	88a0      	ldrh	r0, [r4, #4]
    d3ba:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d3bc:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d3c0:	fb81 2302 	smull	r2, r3, r1, r2
    d3c4:	0bd2      	lsrs	r2, r2, #15
    d3c6:	b280      	uxth	r0, r0
    d3c8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d3cc:	fb00 f101 	mul.w	r1, r0, r1
    d3d0:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d3d4:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d3d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d3da:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d3dc:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d3de:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d3e0:	88e1      	ldrh	r1, [r4, #6]
    d3e2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d3e6:	fb86 8903 	smull	r8, r9, r6, r3
    d3ea:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d3ee:	b289      	uxth	r1, r1
    d3f0:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d3f4:	fb01 f606 	mul.w	r6, r1, r6
    d3f8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d3fc:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d400:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d402:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d404:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d406:	8923      	ldrh	r3, [r4, #8]
    d408:	63e1      	str	r1, [r4, #60]	; 0x3c
    d40a:	fb85 6706 	smull	r6, r7, r5, r6
    d40e:	0bf2      	lsrs	r2, r6, #15
    d410:	b29b      	uxth	r3, r3
    d412:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d416:	fb03 f505 	mul.w	r5, r3, r5
    d41a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d41e:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d422:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d424:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d426:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d428:	8961      	ldrh	r1, [r4, #10]
    d42a:	6462      	str	r2, [r4, #68]	; 0x44
    d42c:	fb80 6706 	smull	r6, r7, r0, r6
    d430:	0bf3      	lsrs	r3, r6, #15
    d432:	b28a      	uxth	r2, r1
    d434:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d438:	fb02 f000 	mul.w	r0, r2, r0
    d43c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d440:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d444:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d446:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d448:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d44a:	89a0      	ldrh	r0, [r4, #12]
    d44c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d450:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d452:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d456:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d458:	fb83 8902 	smull	r8, r9, r3, r2
    d45c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d460:	b280      	uxth	r0, r0
    d462:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d466:	fb00 f303 	mul.w	r3, r0, r3
    d46a:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d46e:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d472:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d474:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d476:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d47a:	89e0      	ldrh	r0, [r4, #14]
    d47c:	6562      	str	r2, [r4, #84]	; 0x54
    d47e:	0bf3      	lsrs	r3, r6, #15
    d480:	b282      	uxth	r2, r0
    d482:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d486:	fb02 f101 	mul.w	r1, r2, r1
    d48a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d48e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d492:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d494:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d496:	83e2      	strh	r2, [r4, #30]
    d498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d4a0:	f001 fcaa 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d4a4:	6803      	ldr	r3, [r0, #0]
    d4a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d4aa:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d4ac:	2e00      	cmp	r6, #0
    d4ae:	f47f af52 	bne.w	d356 <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d4b2:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d4b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d4b8:	2501      	movs	r5, #1
    d4ba:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d578 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d4be:	4f2c      	ldr	r7, [pc, #176]	; (d570 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d4c0:	e00f      	b.n	d4e2 <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d4c2:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d4c6:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d4ca:	b29b      	uxth	r3, r3
    d4cc:	f1c2 010f 	rsb	r1, r2, #15
    d4d0:	408b      	lsls	r3, r1
    d4d2:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d4d4:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d4d6:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d4da:	462e      	mov	r6, r5
    d4dc:	dc0c      	bgt.n	d4f8 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d4de:	3501      	adds	r5, #1
    d4e0:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d4e2:	2d01      	cmp	r5, #1
    d4e4:	d1ed      	bne.n	d4c2 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d4e6:	f04f 31ff 	mov.w	r1, #4294967295
    d4ea:	6838      	ldr	r0, [r7, #0]
    d4ec:	f004 f9c8 	bl	11880 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d4f0:	0703      	lsls	r3, r0, #28
    d4f2:	d5e6      	bpl.n	d4c2 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d4f4:	462e      	mov	r6, r5
    d4f6:	e7f2      	b.n	d4de <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d4f8:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d4fc:	429a      	cmp	r2, r3
    d4fe:	d005      	beq.n	d50c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d500:	2b0a      	cmp	r3, #10
    d502:	d02c      	beq.n	d55e <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d504:	2b0c      	cmp	r3, #12
    d506:	d024      	beq.n	d552 <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d508:	2b08      	cmp	r3, #8
    d50a:	d01a      	beq.n	d542 <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d50c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d50e:	4b19      	ldr	r3, [pc, #100]	; (d574 <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d510:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d512:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d516:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d518:	2000      	movs	r0, #0
    d51a:	f001 fc6d 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d51e:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d520:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d522:	6813      	ldr	r3, [r2, #0]
    d524:	f043 0302 	orr.w	r3, r3, #2
    d528:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d52a:	f001 fc65 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d52e:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d530:	4a0e      	ldr	r2, [pc, #56]	; (d56c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d532:	f043 0302 	orr.w	r3, r3, #2
    d536:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d538:	8893      	ldrh	r3, [r2, #4]
    d53a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d53e:	8093      	strh	r3, [r2, #4]
    d540:	e713      	b.n	d36a <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d542:	490a      	ldr	r1, [pc, #40]	; (d56c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d544:	88ca      	ldrh	r2, [r1, #6]
    d546:	f042 0218 	orr.w	r2, r2, #24
    d54a:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d54c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d550:	e7dc      	b.n	d50c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d552:	4a06      	ldr	r2, [pc, #24]	; (d56c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d554:	88d1      	ldrh	r1, [r2, #6]
    d556:	f36f 01c4 	bfc	r1, #3, #2
    d55a:	80d1      	strh	r1, [r2, #6]
    d55c:	e7f6      	b.n	d54c <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d55e:	4a03      	ldr	r2, [pc, #12]	; (d56c <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d560:	88d1      	ldrh	r1, [r2, #6]
    d562:	2002      	movs	r0, #2
    d564:	f360 01c4 	bfi	r1, r0, #3, #2
    d568:	80d1      	strh	r1, [r2, #6]
    d56a:	e7ef      	b.n	d54c <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d56c:	43002000 	.word	0x43002000
    d570:	20001f28 	.word	0x20001f28
    d574:	200019e0 	.word	0x200019e0
    d578:	20001dfc 	.word	0x20001dfc

0000d57c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d57c:	2907      	cmp	r1, #7
    d57e:	dc33      	bgt.n	d5e8 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d580:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d582:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d584:	b083      	sub	sp, #12
    d586:	4605      	mov	r5, r0
    switch (theUnits) {
    d588:	d033      	beq.n	d5f2 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d58a:	d336      	bcc.n	d5fa <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d58c:	2b02      	cmp	r3, #2
    d58e:	d12d      	bne.n	d5ec <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d590:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d592:	1d0c      	adds	r4, r1, #4
    d594:	f00e fb10 	bl	1bbb8 <__aeabi_i2d>
    d598:	460b      	mov	r3, r1
    d59a:	4602      	mov	r2, r0
    d59c:	491a      	ldr	r1, [pc, #104]	; (d608 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d59e:	2000      	movs	r0, #0
    d5a0:	f00e fc9a 	bl	1bed8 <__aeabi_ddiv>
    d5a4:	f00e fe50 	bl	1c248 <__aeabi_d2f>
    d5a8:	ed9f 0a18 	vldr	s0, [pc, #96]	; d60c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d5ac:	ee00 0a90 	vmov	s1, r0
    d5b0:	f00d fbaa 	bl	1ad08 <powf>
    d5b4:	eddf 6a16 	vldr	s13, [pc, #88]	; d610 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d5b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; d614 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d5bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d5c0:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d5c4:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d5c6:	eef4 7ac7 	vcmpe.f32	s15, s14
    d5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d5ce:	bf49      	itett	mi
    d5d0:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d5d4:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d5d8:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d5dc:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d5e0:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d5e4:	b003      	add	sp, #12
    d5e6:	bd30      	pop	{r4, r5, pc}
        return false;
    d5e8:	2000      	movs	r0, #0
    d5ea:	4770      	bx	lr
            return false;
    d5ec:	2000      	movs	r0, #0
}
    d5ee:	b003      	add	sp, #12
    d5f0:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d5f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d5f6:	b290      	uxth	r0, r2
    d5f8:	e7cb      	b.n	d592 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d5fa:	3104      	adds	r1, #4
            return true;
    d5fc:	2001      	movs	r0, #1
        m_tc = newTc;
    d5fe:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d602:	b003      	add	sp, #12
    d604:	bd30      	pop	{r4, r5, pc}
    d606:	bf00      	nop
    d608:	3ff00000 	.word	0x3ff00000
    d60c:	3c23d70a 	.word	0x3c23d70a
    d610:	47000000 	.word	0x47000000
    d614:	46fffe00 	.word	0x46fffe00

0000d618 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d61a:	f7ff fc8f 	bl	cf3c <_ZN9ClearCore10AdcManager8InstanceEv>
    d61e:	4a0f      	ldr	r2, [pc, #60]	; (d65c <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d620:	4b0f      	ldr	r3, [pc, #60]	; (d660 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d622:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d624:	2104      	movs	r1, #4
    d626:	2205      	movs	r2, #5
    d628:	2706      	movs	r7, #6
    d62a:	2607      	movs	r6, #7
    d62c:	2508      	movs	r5, #8
    d62e:	2409      	movs	r4, #9
    d630:	200a      	movs	r0, #10
    d632:	8019      	strh	r1, [r3, #0]
    d634:	809a      	strh	r2, [r3, #4]
    d636:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d63a:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d63c:	811f      	strh	r7, [r3, #8]
    d63e:	819e      	strh	r6, [r3, #12]
    d640:	821d      	strh	r5, [r3, #16]
    d642:	829c      	strh	r4, [r3, #20]
    d644:	8318      	strh	r0, [r3, #24]
    d646:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d648:	805a      	strh	r2, [r3, #2]
    d64a:	80da      	strh	r2, [r3, #6]
    d64c:	815a      	strh	r2, [r3, #10]
    d64e:	81da      	strh	r2, [r3, #14]
    d650:	825a      	strh	r2, [r3, #18]
    d652:	82da      	strh	r2, [r3, #22]
    d654:	835a      	strh	r2, [r3, #26]
    d656:	83da      	strh	r2, [r3, #30]
    d658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d65a:	bf00      	nop
    d65c:	20001e0c 	.word	0x20001e0c
    d660:	20001e10 	.word	0x20001e10

0000d664 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d664:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d668:	4770      	bx	lr
    d66a:	bf00      	nop

0000d66c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d66c:	7980      	ldrb	r0, [r0, #6]
    d66e:	4770      	bx	lr

0000d670 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d670:	2004      	movs	r0, #4
    d672:	4770      	bx	lr

0000d674 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d674:	7980      	ldrb	r0, [r0, #6]
    d676:	1ec3      	subs	r3, r0, #3
    d678:	2b01      	cmp	r3, #1
    d67a:	bf83      	ittte	hi
    d67c:	3806      	subhi	r0, #6
    d67e:	fab0 f080 	clzhi	r0, r0
    d682:	0940      	lsrhi	r0, r0, #5
    d684:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d686:	4770      	bx	lr

0000d688 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d688:	b530      	push	{r4, r5, lr}
    d68a:	b083      	sub	sp, #12
    d68c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d690:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d692:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d694:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d696:	f000 fcfd 	bl	e094 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d69a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d69e:	4a05      	ldr	r2, [pc, #20]	; (d6b4 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d6a0:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d6a2:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d6a4:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d6a6:	4b04      	ldr	r3, [pc, #16]	; (d6b8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d6a8:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d6aa:	4620      	mov	r0, r4
    d6ac:	66a3      	str	r3, [r4, #104]	; 0x68
    d6ae:	b003      	add	sp, #12
    d6b0:	bd30      	pop	{r4, r5, pc}
    d6b2:	bf00      	nop
    d6b4:	000234d4 	.word	0x000234d4
    d6b8:	06a40000 	.word	0x06a40000

0000d6bc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    d6bc:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d6be:	4a3a      	ldr	r2, [pc, #232]	; (d7a8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d6c0:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d6c4:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    d6c8:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d6ca:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d6ce:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d6d2:	065d      	lsls	r5, r3, #25
    d6d4:	d4fb      	bmi.n	d6ce <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    d6d6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d6da:	4933      	ldr	r1, [pc, #204]	; (d7a8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d6dc:	2004      	movs	r0, #4
    d6de:	f360 0303 	bfi	r3, r0, #0, #4
    d6e2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d6e6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d6ee:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d6f2:	684b      	ldr	r3, [r1, #4]
    d6f4:	06d8      	lsls	r0, r3, #27
    d6f6:	d4fc      	bmi.n	d6f2 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d6f8:	4a2c      	ldr	r2, [pc, #176]	; (d7ac <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    d6fa:	492d      	ldr	r1, [pc, #180]	; (d7b0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d6fc:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    d6fe:	4b2d      	ldr	r3, [pc, #180]	; (d7b4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d700:	2507      	movs	r5, #7
    d702:	f365 4013 	bfi	r0, r5, #16, #4
    d706:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    d708:	6a0a      	ldr	r2, [r1, #32]
    d70a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d70e:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    d710:	781a      	ldrb	r2, [r3, #0]
    d712:	f042 0201 	orr.w	r2, r2, #1
    d716:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    d718:	689a      	ldr	r2, [r3, #8]
    d71a:	07d2      	lsls	r2, r2, #31
    d71c:	d4fc      	bmi.n	d718 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    d71e:	785a      	ldrb	r2, [r3, #1]
    d720:	f042 0201 	orr.w	r2, r2, #1
    d724:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    d726:	785a      	ldrb	r2, [r3, #1]
    d728:	f042 0206 	orr.w	r2, r2, #6
    d72c:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    d72e:	899a      	ldrh	r2, [r3, #12]
    d730:	f042 0202 	orr.w	r2, r2, #2
    d734:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    d736:	899a      	ldrh	r2, [r3, #12]
    d738:	2105      	movs	r1, #5
    d73a:	f361 220b 	bfi	r2, r1, #8, #4
    d73e:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    d740:	899a      	ldrh	r2, [r3, #12]
    d742:	2102      	movs	r1, #2
    d744:	f361 0283 	bfi	r2, r1, #2, #2
    d748:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    d74a:	8a1b      	ldrh	r3, [r3, #16]
    d74c:	b29b      	uxth	r3, r3
    d74e:	bb23      	cbnz	r3, d79a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d750:	4b19      	ldr	r3, [pc, #100]	; (d7b8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    d752:	681d      	ldr	r5, [r3, #0]
    d754:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    d758:	4628      	mov	r0, r5
    d75a:	f004 fadd 	bl	11d18 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d75e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d762:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d766:	4628      	mov	r0, r5
    d768:	f004 fad6 	bl	11d18 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    d76c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d770:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    d772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d776:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    d77a:	461a      	mov	r2, r3
    d77c:	db03      	blt.n	d786 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    d77e:	2300      	movs	r3, #0
    d780:	461a      	mov	r2, r3
    d782:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    d786:	4410      	add	r0, r2
    d788:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d78c:	db04      	blt.n	d798 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    d78e:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    d792:	3304      	adds	r3, #4
    d794:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    d798:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d79a:	4a06      	ldr	r2, [pc, #24]	; (d7b4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    d79c:	6893      	ldr	r3, [r2, #8]
    d79e:	f013 0304 	ands.w	r3, r3, #4
    d7a2:	d1fb      	bne.n	d79c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    d7a4:	8213      	strh	r3, [r2, #16]
    d7a6:	e7d3      	b.n	d750 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    d7a8:	40001c00 	.word	0x40001c00
    d7ac:	40001800 	.word	0x40001800
    d7b0:	40000800 	.word	0x40000800
    d7b4:	43002400 	.word	0x43002400
    d7b8:	20001f34 	.word	0x20001f34

0000d7bc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    d7bc:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    d7be:	4a2e      	ldr	r2, [pc, #184]	; (d878 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    d7c0:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d7c4:	8a13      	ldrh	r3, [r2, #16]
    d7c6:	b29b      	uxth	r3, r3
    d7c8:	4299      	cmp	r1, r3
    d7ca:	d003      	beq.n	d7d4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d7cc:	6893      	ldr	r3, [r2, #8]
    d7ce:	075d      	lsls	r5, r3, #29
    d7d0:	d4fc      	bmi.n	d7cc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    d7d2:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d7d4:	68c3      	ldr	r3, [r0, #12]
    d7d6:	4929      	ldr	r1, [pc, #164]	; (d87c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    d7d8:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d7da:	4a27      	ldr	r2, [pc, #156]	; (d878 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d7dc:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d7e0:	4423      	add	r3, r4
    d7e2:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    d7e6:	f044 0401 	orr.w	r4, r4, #1
    d7ea:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d7ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
    d7f0:	6e44      	ldr	r4, [r0, #100]	; 0x64
    d7f2:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d7f6:	4423      	add	r3, r4
    d7f8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d7fc:	f041 0101 	orr.w	r1, r1, #1
    d800:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d804:	6893      	ldr	r3, [r2, #8]
    d806:	079c      	lsls	r4, r3, #30
    d808:	d4fc      	bmi.n	d804 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    d80a:	7813      	ldrb	r3, [r2, #0]
    d80c:	0799      	lsls	r1, r3, #30
    d80e:	d407      	bmi.n	d820 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    d810:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d812:	4919      	ldr	r1, [pc, #100]	; (d878 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    d814:	f043 0302 	orr.w	r3, r3, #2
    d818:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d81a:	688b      	ldr	r3, [r1, #8]
    d81c:	079a      	lsls	r2, r3, #30
    d81e:	d4fc      	bmi.n	d81a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    d820:	4a15      	ldr	r2, [pc, #84]	; (d878 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    d822:	79d3      	ldrb	r3, [r2, #7]
    d824:	079b      	lsls	r3, r3, #30
    d826:	d0fc      	beq.n	d822 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    d828:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d82a:	4b15      	ldr	r3, [pc, #84]	; (d880 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    d82c:	f002 010f 	and.w	r1, r2, #15
    d830:	185a      	adds	r2, r3, r1
    d832:	2400      	movs	r4, #0
    d834:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d838:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d83a:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    d83e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d842:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d844:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d848:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    d84a:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d84c:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    d84e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d852:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d856:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d85a:	33f4      	adds	r3, #244	; 0xf4
    d85c:	f3bf 8f5b 	dmb	ish
    d860:	e853 2f00 	ldrex	r2, [r3]
    d864:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d868:	e843 2100 	strex	r1, r2, [r3]
    d86c:	2900      	cmp	r1, #0
    d86e:	d1f7      	bne.n	d860 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    d870:	f3bf 8f5b 	dmb	ish
}
    d874:	bc70      	pop	{r4, r5, r6}
    d876:	4770      	bx	lr
    d878:	43002400 	.word	0x43002400
    d87c:	41008000 	.word	0x41008000
    d880:	200019e0 	.word	0x200019e0

0000d884 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    d884:	7983      	ldrb	r3, [r0, #6]
    d886:	2b06      	cmp	r3, #6
    d888:	d805      	bhi.n	d896 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    d88a:	2201      	movs	r2, #1
    d88c:	fa02 f303 	lsl.w	r3, r2, r3
    d890:	f013 0f54 	tst.w	r3, #84	; 0x54
    d894:	d100      	bne.n	d898 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    d896:	4770      	bx	lr
            DigitalInOut::Refresh();
    d898:	f000 bc32 	b.w	e100 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000d89c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    d89e:	7983      	ldrb	r3, [r0, #6]
    d8a0:	428b      	cmp	r3, r1
    d8a2:	d06e      	beq.n	d982 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    d8a4:	1e8a      	subs	r2, r1, #2
    d8a6:	460c      	mov	r4, r1
    d8a8:	4605      	mov	r5, r0
    d8aa:	2a04      	cmp	r2, #4
    d8ac:	d80d      	bhi.n	d8ca <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    d8ae:	e8df f002 	tbb	[pc, r2]
    d8b2:	0311      	.short	0x0311
    d8b4:	0c11      	.short	0x0c11
    d8b6:	11          	.byte	0x11
    d8b7:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    d8b8:	2102      	movs	r1, #2
    d8ba:	f000 fad9 	bl	de70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    d8be:	4628      	mov	r0, r5
    d8c0:	f7ff ff7c 	bl	d7bc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    d8c4:	2303      	movs	r3, #3
    d8c6:	71ab      	strb	r3, [r5, #6]
            break;
    d8c8:	4623      	mov	r3, r4
    return (m_mode == newMode);
    d8ca:	1ae0      	subs	r0, r4, r3
    d8cc:	fab0 f080 	clz	r0, r0
    d8d0:	0940      	lsrs	r0, r0, #5
    d8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d8d4:	4b2c      	ldr	r3, [pc, #176]	; (d988 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    d8d6:	f3bf 8f5b 	dmb	ish
    d8da:	e853 2f00 	ldrex	r2, [r3]
    d8de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    d8e2:	e843 2100 	strex	r1, r2, [r3]
    d8e6:	2900      	cmp	r1, #0
    d8e8:	d1f7      	bne.n	d8da <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    d8ea:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    d8ee:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d8f0:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d8f4:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d8f6:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d8f8:	4924      	ldr	r1, [pc, #144]	; (d98c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d8fa:	3bf4      	subs	r3, #244	; 0xf4
    d8fc:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d900:	f04f 0e01 	mov.w	lr, #1
    d904:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d908:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d90c:	ea27 070e 	bic.w	r7, r7, lr
    d910:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    d914:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d916:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d91a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    d91e:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    d922:	4438      	add	r0, r7
    d924:	ea22 0606 	bic.w	r6, r2, r6
    d928:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    d92c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d930:	4a17      	ldr	r2, [pc, #92]	; (d990 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d932:	f36f 0300 	bfc	r3, #0, #1
    d936:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d93a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    d93c:	6e68      	ldr	r0, [r5, #100]	; 0x64
    d93e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d942:	4403      	add	r3, r0
    d944:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d948:	f36f 0100 	bfc	r1, #0, #1
    d94c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d950:	6893      	ldr	r3, [r2, #8]
    d952:	f013 0302 	ands.w	r3, r3, #2
    d956:	d1fb      	bne.n	d950 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    d958:	7811      	ldrb	r1, [r2, #0]
    d95a:	0789      	lsls	r1, r1, #30
    d95c:	d507      	bpl.n	d96e <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    d95e:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d960:	490b      	ldr	r1, [pc, #44]	; (d990 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    d962:	f363 0041 	bfi	r0, r3, #1, #1
    d966:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d968:	688b      	ldr	r3, [r1, #8]
    d96a:	079b      	lsls	r3, r3, #30
    d96c:	d4fc      	bmi.n	d968 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    d96e:	4621      	mov	r1, r4
    d970:	4628      	mov	r0, r5
    d972:	f000 fa7d 	bl	de70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    d976:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    d978:	1ae0      	subs	r0, r4, r3
    d97a:	fab0 f080 	clz	r0, r0
    d97e:	0940      	lsrs	r0, r0, #5
    d980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    d982:	2001      	movs	r0, #1
}
    d984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d986:	bf00      	nop
    d988:	20001ad4 	.word	0x20001ad4
    d98c:	41008000 	.word	0x41008000
    d990:	43002400 	.word	0x43002400

0000d994 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    d994:	7983      	ldrb	r3, [r0, #6]
    d996:	2b06      	cmp	r3, #6
    d998:	d805      	bhi.n	d9a6 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    d99a:	2201      	movs	r2, #1
    d99c:	fa02 f303 	lsl.w	r3, r2, r3
    d9a0:	f013 0f54 	tst.w	r3, #84	; 0x54
    d9a4:	d101      	bne.n	d9aa <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    d9a6:	2000      	movs	r0, #0
    d9a8:	4770      	bx	lr
            state = DigitalInOut::State();
    d9aa:	f000 bcaf 	b.w	e30c <_ZN9ClearCore12DigitalInOut5StateEv>
    d9ae:	bf00      	nop

0000d9b0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    d9b0:	7983      	ldrb	r3, [r0, #6]
    d9b2:	3b02      	subs	r3, #2
    d9b4:	2b04      	cmp	r3, #4
    d9b6:	d83c      	bhi.n	da32 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    d9b8:	e8df f003 	tbb	[pc, r3]
    d9bc:	3b390339 	.word	0x3b390339
    d9c0:	39          	.byte	0x39
    d9c1:	00          	.byte	0x00
            newState = max(newState, 0);
    d9c2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    d9c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    d9c8:	b289      	uxth	r1, r1
    d9ca:	f240 74ff 	movw	r4, #2047	; 0x7ff
    d9ce:	42a1      	cmp	r1, r4
    d9d0:	bf28      	it	cs
    d9d2:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    d9d4:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d9d6:	4d19      	ldr	r5, [pc, #100]	; (da3c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    d9d8:	4e19      	ldr	r6, [pc, #100]	; (da40 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    d9da:	4a1a      	ldr	r2, [pc, #104]	; (da44 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    d9dc:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    d9e0:	fb85 e503 	smull	lr, r5, r5, r3
    d9e4:	f007 070f 	and.w	r7, r7, #15
    d9e8:	441d      	add	r5, r3
    d9ea:	443e      	add	r6, r7
    d9ec:	17db      	asrs	r3, r3, #31
    d9ee:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    d9f2:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    d9f6:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    d9fa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d9fe:	4812      	ldr	r0, [pc, #72]	; (da48 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    da00:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    da04:	fba2 5201 	umull	r5, r2, r2, r1
    da08:	1a89      	subs	r1, r1, r2
    da0a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    da0e:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    da12:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    da14:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    da16:	42a1      	cmp	r1, r4
    da18:	bf28      	it	cs
    da1a:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    da1c:	b29b      	uxth	r3, r3
    da1e:	4299      	cmp	r1, r3
    da20:	d009      	beq.n	da36 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    da22:	6883      	ldr	r3, [r0, #8]
    da24:	075b      	lsls	r3, r3, #29
    da26:	d4fc      	bmi.n	da22 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    da28:	8201      	strh	r1, [r0, #16]
            success = true;
    da2a:	2001      	movs	r0, #1
    da2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    da2e:	f000 b9c3 	b.w	ddb8 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    da32:	2000      	movs	r0, #0
    da34:	4770      	bx	lr
            success = true;
    da36:	2001      	movs	r0, #1
}
    da38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da3a:	bf00      	nop
    da3c:	80100201 	.word	0x80100201
    da40:	200019e0 	.word	0x200019e0
    da44:	00200401 	.word	0x00200401
    da48:	43002400 	.word	0x43002400

0000da4c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    da4c:	b538      	push	{r3, r4, r5, lr}
    da4e:	4604      	mov	r4, r0
    da50:	460d      	mov	r5, r1
    DacInitialize();
    da52:	f7ff fe33 	bl	d6bc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    da56:	4620      	mov	r0, r4
    da58:	4629      	mov	r1, r5
    da5a:	f000 fc77 	bl	e34c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    da5e:	6920      	ldr	r0, [r4, #16]
    da60:	07c2      	lsls	r2, r0, #31
    da62:	d521      	bpl.n	daa8 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    da64:	68e1      	ldr	r1, [r4, #12]
    da66:	01c9      	lsls	r1, r1, #7
    da68:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    da6c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    da70:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    da74:	2101      	movs	r1, #1
    da76:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    da7a:	f361 1307 	bfi	r3, r1, #4, #4
    da7e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    da82:	6e61      	ldr	r1, [r4, #100]	; 0x64
    da84:	07cb      	lsls	r3, r1, #31
    da86:	d421      	bmi.n	dacc <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    da88:	6e23      	ldr	r3, [r4, #96]	; 0x60
    da8a:	01db      	lsls	r3, r3, #7
    da8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    da90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    da94:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    da98:	2101      	movs	r1, #1
    da9a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    da9e:	f361 0203 	bfi	r2, r1, #0, #4
    daa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    daa6:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    daa8:	68e2      	ldr	r2, [r4, #12]
    daaa:	01d2      	lsls	r2, r2, #7
    daac:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    dab0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dab4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    dab8:	2101      	movs	r1, #1
    daba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    dabe:	f361 0203 	bfi	r2, r1, #0, #4
    dac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    dac6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    dac8:	07cb      	lsls	r3, r1, #31
    daca:	d5dd      	bpl.n	da88 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    dacc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    dace:	01d2      	lsls	r2, r2, #7
    dad0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    dad4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dad8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    dadc:	2101      	movs	r1, #1
    dade:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    dae2:	f361 1307 	bfi	r3, r1, #4, #4
    dae6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    daea:	bd38      	pop	{r3, r4, r5, pc}

0000daec <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    daec:	2000      	movs	r0, #0
    daee:	4770      	bx	lr

0000daf0 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    daf0:	7980      	ldrb	r0, [r0, #6]
    daf2:	4770      	bx	lr

0000daf4 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    daf4:	2003      	movs	r0, #3
    daf6:	4770      	bx	lr

0000daf8 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    daf8:	2000      	movs	r0, #0
    dafa:	4770      	bx	lr

0000dafc <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    dafc:	2000      	movs	r0, #0
    dafe:	4770      	bx	lr

0000db00 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    db02:	7983      	ldrb	r3, [r0, #6]
    db04:	428b      	cmp	r3, r1
    db06:	d072      	beq.n	dbee <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    db08:	2901      	cmp	r1, #1
    db0a:	460c      	mov	r4, r1
    db0c:	4605      	mov	r5, r0
    db0e:	d03c      	beq.n	db8a <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    db10:	2902      	cmp	r1, #2
    db12:	d135      	bne.n	db80 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    db14:	4e37      	ldr	r6, [pc, #220]	; (dbf4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    db16:	6b03      	ldr	r3, [r0, #48]	; 0x30
    db18:	f3bf 8f5b 	dmb	ish
    db1c:	e856 2f00 	ldrex	r2, [r6]
    db20:	431a      	orrs	r2, r3
    db22:	e846 2100 	strex	r1, r2, [r6]
    db26:	2900      	cmp	r1, #0
    db28:	d1f8      	bne.n	db1c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    db2a:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    db2e:	3ef4      	subs	r6, #244	; 0xf4
    db30:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    db34:	b143      	cbz	r3, db48 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    db36:	4b30      	ldr	r3, [pc, #192]	; (dbf8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    db38:	6b29      	ldr	r1, [r5, #48]	; 0x30
    db3a:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    db3c:	6e53      	ldr	r3, [r2, #100]	; 0x64
    db3e:	420b      	tst	r3, r1
    db40:	d0fc      	beq.n	db3c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    db42:	4628      	mov	r0, r5
    db44:	f000 fda6 	bl	e694 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    db48:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db4a:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    db4e:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    db50:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db54:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db58:	2001      	movs	r0, #1
    db5a:	4098      	lsls	r0, r3
    db5c:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db64:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    db68:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    db6a:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    db6e:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db70:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    db74:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    db78:	4603      	mov	r3, r0
            m_mode = newMode;
    db7a:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    db7c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    db80:	1ae0      	subs	r0, r4, r3
    db82:	fab0 f080 	clz	r0, r0
    db86:	0940      	lsrs	r0, r0, #5
    db88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    db8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    db8c:	4e19      	ldr	r6, [pc, #100]	; (dbf4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    db8e:	f3bf 8f5b 	dmb	ish
    db92:	43db      	mvns	r3, r3
    db94:	e856 2f00 	ldrex	r2, [r6]
    db98:	401a      	ands	r2, r3
    db9a:	e846 2100 	strex	r1, r2, [r6]
    db9e:	2900      	cmp	r1, #0
    dba0:	d1f8      	bne.n	db94 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    dba2:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    dba6:	3ef4      	subs	r6, #244	; 0xf4
    dba8:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    dbac:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    dbae:	b11b      	cbz	r3, dbb8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    dbb0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d0fb      	beq.n	dbb0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    dbb8:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dbba:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dbbe:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    dbc0:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dbc4:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dbc6:	f003 030f 	and.w	r3, r3, #15
    dbca:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dbce:	fa00 f303 	lsl.w	r3, r0, r3
    dbd2:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    dbd4:	4603      	mov	r3, r0
    return (m_mode == newMode);
    dbd6:	1ae0      	subs	r0, r4, r3
    dbd8:	4329      	orrs	r1, r5
    dbda:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dbde:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    dbe2:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dbe6:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    dbea:	0940      	lsrs	r0, r0, #5
    dbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    dbee:	2001      	movs	r0, #1
}
    dbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbf2:	bf00      	nop
    dbf4:	20001ad4 	.word	0x20001ad4
    dbf8:	20001e0c 	.word	0x20001e0c

0000dbfc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    dbfc:	b570      	push	{r4, r5, r6, lr}
    dbfe:	4604      	mov	r4, r0
    dc00:	4616      	mov	r6, r2
      m_analogValid(false) {}
    dc02:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    dc04:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    dc08:	f000 fd12 	bl	e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    dc0c:	2300      	movs	r3, #0
    dc0e:	4a05      	ldr	r2, [pc, #20]	; (dc24 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    dc10:	6326      	str	r6, [r4, #48]	; 0x30
    dc12:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    dc16:	6022      	str	r2, [r4, #0]
    dc18:	63a3      	str	r3, [r4, #56]	; 0x38
    dc1a:	63e3      	str	r3, [r4, #60]	; 0x3c
    dc1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    dc20:	4620      	mov	r0, r4
    dc22:	bd70      	pop	{r4, r5, r6, pc}
    dc24:	00023504 	.word	0x00023504

0000dc28 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    dc28:	7982      	ldrb	r2, [r0, #6]
    dc2a:	2a01      	cmp	r2, #1
    dc2c:	d004      	beq.n	dc38 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    dc2e:	2a02      	cmp	r2, #2
    dc30:	d101      	bne.n	dc36 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    dc32:	f000 bc4d 	b.w	e4d0 <_ZN9ClearCore9DigitalIn7RefreshEv>
    dc36:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    dc38:	4a17      	ldr	r2, [pc, #92]	; (dc98 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    dc3a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    dc3c:	6812      	ldr	r2, [r2, #0]
    dc3e:	4603      	mov	r3, r0
    dc40:	6e50      	ldr	r0, [r2, #100]	; 0x64
    dc42:	4208      	tst	r0, r1
    dc44:	d126      	bne.n	dc94 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    dc46:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    dc4a:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    dc4c:	b991      	cbnz	r1, dc74 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    dc4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    dc50:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    dc54:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    dc56:	2c07      	cmp	r4, #7
    dc58:	b280      	uxth	r0, r0
    dc5a:	dc07      	bgt.n	dc6c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    dc5c:	0400      	lsls	r0, r0, #16
    dc5e:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    dc62:	3408      	adds	r4, #8
        return (m_z >> 16);
    dc64:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    dc66:	6270      	str	r0, [r6, #36]	; 0x24
    dc68:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    dc6c:	2201      	movs	r2, #1
    dc6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    dc72:	e000      	b.n	dc76 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    dc74:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    dc76:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    dc78:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dc7a:	4908      	ldr	r1, [pc, #32]	; (dc9c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    dc7c:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    dc80:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    dc84:	b2d8      	uxtb	r0, r3
    dc86:	440a      	add	r2, r1
    dc88:	2802      	cmp	r0, #2
    dc8a:	bfd8      	it	le
    dc8c:	2300      	movle	r3, #0
    dc8e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    dc92:	bc70      	pop	{r4, r5, r6}
    dc94:	4770      	bx	lr
    dc96:	bf00      	nop
    dc98:	20001e0c 	.word	0x20001e0c
    dc9c:	200019e0 	.word	0x200019e0

0000dca0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    dca0:	4b29      	ldr	r3, [pc, #164]	; (dd48 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    dca2:	b570      	push	{r4, r5, r6, lr}
    dca4:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    dca6:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    dca8:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    dcaa:	4628      	mov	r0, r5
    dcac:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    dcb0:	2301      	movs	r3, #1
    dcb2:	2202      	movs	r2, #2
    dcb4:	f7ff fc62 	bl	d57c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    dcb8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    dcbc:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    dcbe:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    dcc2:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    dcc4:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    dcc6:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    dcc8:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    dcca:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    dccc:	4620      	mov	r0, r4
    dcce:	f000 fb99 	bl	e404 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    dcd2:	6823      	ldr	r3, [r4, #0]
    dcd4:	4a1d      	ldr	r2, [pc, #116]	; (dd4c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    dcd6:	685b      	ldr	r3, [r3, #4]
    dcd8:	4293      	cmp	r3, r2
    dcda:	d130      	bne.n	dd3e <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    dcdc:	79a3      	ldrb	r3, [r4, #6]
    dcde:	2b01      	cmp	r3, #1
    dce0:	d02c      	beq.n	dd3c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    dce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dce4:	4a1a      	ldr	r2, [pc, #104]	; (dd50 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    dce6:	f3bf 8f5b 	dmb	ish
    dcea:	43db      	mvns	r3, r3
    dcec:	e852 1f00 	ldrex	r1, [r2]
    dcf0:	4019      	ands	r1, r3
    dcf2:	e842 1000 	strex	r0, r1, [r2]
    dcf6:	2800      	cmp	r0, #0
    dcf8:	d1f8      	bne.n	dcec <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    dcfa:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    dcfe:	3af4      	subs	r2, #244	; 0xf4
    dd00:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    dd04:	2101      	movs	r1, #1
    dd06:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    dd08:	b11b      	cbz	r3, dd12 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    dd0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    dd0e:	2b00      	cmp	r3, #0
    dd10:	d0fb      	beq.n	dd0a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    dd12:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd14:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dd18:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    dd1a:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd1e:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd22:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd24:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd28:	408b      	lsls	r3, r1
    dd2a:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    dd2c:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd2e:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd32:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    dd36:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    dd3a:	bd70      	pop	{r4, r5, r6, pc}
    dd3c:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    dd3e:	4620      	mov	r0, r4
    dd40:	2101      	movs	r1, #1
}
    dd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    dd46:	4718      	bx	r3
    dd48:	20001e0c 	.word	0x20001e0c
    dd4c:	0000db01 	.word	0x0000db01
    dd50:	20001ad4 	.word	0x20001ad4

0000dd54 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    dd54:	7982      	ldrb	r2, [r0, #6]
    dd56:	2a01      	cmp	r2, #1
    dd58:	d005      	beq.n	dd66 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    dd5a:	2a02      	cmp	r2, #2
    dd5c:	d101      	bne.n	dd62 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    dd5e:	f000 bb3d 	b.w	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    dd62:	2000      	movs	r0, #0
    dd64:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    dd66:	4b0b      	ldr	r3, [pc, #44]	; (dd94 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    dd68:	b510      	push	{r4, lr}
    dd6a:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    dd6c:	6818      	ldr	r0, [r3, #0]
    dd6e:	f003 fd8d 	bl	1188c <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    dd72:	b958      	cbnz	r0, dd8c <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    dd74:	4b08      	ldr	r3, [pc, #32]	; (dd98 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    dd76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    dd78:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    dd7a:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    dd7c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    dd80:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    dd82:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    dd86:	4118      	asrs	r0, r3
    dd88:	b200      	sxth	r0, r0
    dd8a:	bd10      	pop	{r4, pc}
                state = -1;
    dd8c:	f04f 30ff 	mov.w	r0, #4294967295
}
    dd90:	bd10      	pop	{r4, pc}
    dd92:	bf00      	nop
    dd94:	20001f28 	.word	0x20001f28
    dd98:	20001e0c 	.word	0x20001e0c

0000dd9c <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    dd9c:	7980      	ldrb	r0, [r0, #6]
    dd9e:	4770      	bx	lr

0000dda0 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    dda0:	2001      	movs	r0, #1
    dda2:	4770      	bx	lr

0000dda4 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    dda4:	7980      	ldrb	r0, [r0, #6]
    dda6:	2804      	cmp	r0, #4
    dda8:	bf1d      	ittte	ne
    ddaa:	3806      	subne	r0, #6
    ddac:	fab0 f080 	clzne	r0, r0
    ddb0:	0940      	lsrne	r0, r0, #5
    ddb2:	2001      	moveq	r0, #1
    }
    ddb4:	4770      	bx	lr
    ddb6:	bf00      	nop

0000ddb8 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    ddb8:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    ddba:	2300      	movs	r3, #0
    switch (m_mode) {
    ddbc:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    ddbe:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    ddc2:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    ddc6:	d02a      	beq.n	de1e <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    ddc8:	2a06      	cmp	r2, #6
    ddca:	d126      	bne.n	de1a <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    ddcc:	b28b      	uxth	r3, r1
    ddce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ddd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    ddd6:	bf28      	it	cs
    ddd8:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    ddda:	b470      	push	{r4, r5, r6}
    dddc:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ddde:	2b00      	cmp	r3, #0
    dde0:	d040      	beq.n	de64 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    dde2:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dde4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    dde6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    ddea:	18d6      	adds	r6, r2, r3
    ddec:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    ddf0:	42ac      	cmp	r4, r5
    ddf2:	d008      	beq.n	de06 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    ddf4:	2b00      	cmp	r3, #0
    ddf6:	bf0c      	ite	eq
    ddf8:	2440      	moveq	r4, #64	; 0x40
    ddfa:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    ddfc:	6913      	ldr	r3, [r2, #16]
    ddfe:	4223      	tst	r3, r4
    de00:	d1fc      	bne.n	ddfc <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    de02:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    de06:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    de08:	4b18      	ldr	r3, [pc, #96]	; (de6c <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    de0a:	f002 020f 	and.w	r2, r2, #15
    de0e:	4413      	add	r3, r2
    de10:	2001      	movs	r0, #1
    de12:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    de16:	bc70      	pop	{r4, r5, r6}
    de18:	4770      	bx	lr
    bool success = false;
    de1a:	4618      	mov	r0, r3
    de1c:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    de1e:	1c0b      	adds	r3, r1, #0
    de20:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    de24:	bf18      	it	ne
    de26:	2301      	movne	r3, #1
    de28:	429a      	cmp	r2, r3
    de2a:	d004      	beq.n	de36 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de2c:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    de2e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    de32:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    de36:	b121      	cbz	r1, de42 <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    de38:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    de3c:	fab1 f181 	clz	r1, r1
    de40:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    de42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    de46:	6b82      	ldr	r2, [r0, #56]	; 0x38
    de48:	428b      	cmp	r3, r1
    de4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    de4c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    de50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    de54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    de58:	f04f 0001 	mov.w	r0, #1
    de5c:	bf14      	ite	ne
    de5e:	619a      	strne	r2, [r3, #24]
    de60:	615a      	streq	r2, [r3, #20]
    de62:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    de64:	43cd      	mvns	r5, r1
    de66:	b2ed      	uxtb	r5, r5
    de68:	e7bc      	b.n	dde4 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    de6a:	bf00      	nop
    de6c:	200019e0 	.word	0x200019e0

0000de70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    de70:	7983      	ldrb	r3, [r0, #6]
    de72:	428b      	cmp	r3, r1
    de74:	f000 80cb 	beq.w	e00e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    de7c:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    de7e:	b082      	sub	sp, #8
    de80:	4604      	mov	r4, r0
    de82:	460d      	mov	r5, r1
    switch (newMode) {
    de84:	f000 8087 	beq.w	df96 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    de88:	2906      	cmp	r1, #6
    de8a:	d008      	beq.n	de9e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    de8c:	2902      	cmp	r1, #2
    de8e:	d033      	beq.n	def8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    de90:	1ae8      	subs	r0, r5, r3
    de92:	fab0 f080 	clz	r0, r0
    de96:	0940      	lsrs	r0, r0, #5
}
    de98:	b002      	add	sp, #8
    de9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    de9e:	6803      	ldr	r3, [r0, #0]
    dea0:	4a79      	ldr	r2, [pc, #484]	; (e088 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    dea2:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    dea4:	71a1      	strb	r1, [r4, #6]
    dea6:	4293      	cmp	r3, r2
    dea8:	f040 80b3 	bne.w	e012 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    deac:	6c01      	ldr	r1, [r0, #64]	; 0x40
    deae:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    deb2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    deb6:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    deb8:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    deba:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    debe:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    dec2:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    dec6:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dec8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    decc:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    dece:	429a      	cmp	r2, r3
    ded0:	d008      	beq.n	dee4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    ded2:	2e00      	cmp	r6, #0
    ded4:	bf0c      	ite	eq
    ded6:	2640      	moveq	r6, #64	; 0x40
    ded8:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    deda:	690a      	ldr	r2, [r1, #16]
    dedc:	4232      	tst	r2, r6
    dede:	d1fc      	bne.n	deda <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    dee0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    dee4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    dee8:	4e68      	ldr	r6, [pc, #416]	; (e08c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    deea:	f001 020f 	and.w	r2, r1, #15
    deee:	18b3      	adds	r3, r6, r2
    def0:	2000      	movs	r0, #0
    def2:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    def6:	e093      	b.n	e020 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    def8:	2300      	movs	r3, #0
    defa:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    defe:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    df00:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    df04:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    df08:	6b03      	ldr	r3, [r0, #48]	; 0x30
    df0a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    df0c:	01db      	lsls	r3, r3, #7
    df0e:	2a00      	cmp	r2, #0
    df10:	d177      	bne.n	e002 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    df12:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    df16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    df1a:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    df1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df20:	4e5a      	ldr	r6, [pc, #360]	; (e08c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    df22:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    df24:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    df28:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    df2c:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    df30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df34:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    df38:	f04f 0e01 	mov.w	lr, #1
    df3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    df40:	443b      	add	r3, r7
    df42:	fa0e f702 	lsl.w	r7, lr, r2
    df46:	ea28 0707 	bic.w	r7, r8, r7
    df4a:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df4e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    df52:	ea6f 070c 	mvn.w	r7, ip
    df56:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df58:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    df5c:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    df60:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    df64:	f36f 0200 	bfc	r2, #0, #1
    df68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    df6c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    df70:	2b00      	cmp	r3, #0
    df72:	f000 8086 	beq.w	e082 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    df76:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    df7a:	4845      	ldr	r0, [pc, #276]	; (e090 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    df7c:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    df80:	2200      	movs	r2, #0
    df82:	401f      	ands	r7, r3
    df84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    df88:	6800      	ldr	r0, [r0, #0]
    df8a:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    df8e:	f003 fe71 	bl	11c74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    df92:	79a3      	ldrb	r3, [r4, #6]
    df94:	e77c      	b.n	de90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    df96:	220c      	movs	r2, #12
            State(m_outState);
    df98:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    df9a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    df9e:	2600      	movs	r6, #0
            m_mode = newMode;
    dfa0:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    dfa2:	695b      	ldr	r3, [r3, #20]
    dfa4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    dfa8:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    dfac:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    dfae:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dfb0:	4936      	ldr	r1, [pc, #216]	; (e08c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dfb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    dfb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dfb6:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dfba:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dfbe:	f04f 0e01 	mov.w	lr, #1
    dfc2:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    dfc6:	fa0e f002 	lsl.w	r0, lr, r2
    dfca:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dfce:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dfd2:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dfd6:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dfda:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dfde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dfe2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    dfe6:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dfea:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dfee:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    dff2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dff6:	f366 0200 	bfi	r2, r6, #0, #1
    dffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    dffe:	79a3      	ldrb	r3, [r4, #6]
            break;
    e000:	e746      	b.n	de90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e002:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e006:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e00a:	6191      	str	r1, [r2, #24]
    e00c:	e786      	b.n	df1c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    e00e:	2001      	movs	r0, #1
    e010:	4770      	bx	lr
            State(0);
    e012:	2100      	movs	r1, #0
    e014:	4798      	blx	r3
    e016:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e01a:	4e1c      	ldr	r6, [pc, #112]	; (e08c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e01c:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    e020:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e026:	9301      	str	r3, [sp, #4]
    e028:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e02a:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e02c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e030:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    e034:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    e038:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e03a:	fa0c fe02 	lsl.w	lr, ip, r2
    e03e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e042:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e046:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e04a:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    e04e:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e050:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e054:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e058:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e05c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e060:	ea42 020c 	orr.w	r2, r2, ip
    e064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    e068:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e06c:	2b00      	cmp	r3, #0
    e06e:	d090      	beq.n	df92 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e070:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e074:	4806      	ldr	r0, [pc, #24]	; (e090 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e076:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    e07a:	2200      	movs	r2, #0
    e07c:	ea23 0707 	bic.w	r7, r3, r7
    e080:	e780      	b.n	df84 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    e082:	2302      	movs	r3, #2
    e084:	e704      	b.n	de90 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e086:	bf00      	nop
    e088:	0000ddb9 	.word	0x0000ddb9
    e08c:	200019e0 	.word	0x200019e0
    e090:	20001f28 	.word	0x20001f28

0000e094 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    e094:	b570      	push	{r4, r5, r6, lr}
    e096:	461d      	mov	r5, r3
    e098:	4604      	mov	r4, r0
    e09a:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    e09e:	f000 fac7 	bl	e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    e0a2:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    e0a6:	4a14      	ldr	r2, [pc, #80]	; (e0f8 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    e0a8:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    e0aa:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    e0ac:	78aa      	ldrb	r2, [r5, #2]
    e0ae:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    e0b0:	2301      	movs	r3, #1
    e0b2:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    e0b4:	2200      	movs	r2, #0
    e0b6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e0ba:	63a3      	str	r3, [r4, #56]	; 0x38
    e0bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    e0c0:	7aeb      	ldrb	r3, [r5, #11]
    e0c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    e0c6:	230c      	movs	r3, #12
    e0c8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e0cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e0d0:	64a2      	str	r2, [r4, #72]	; 0x48
    e0d2:	64e2      	str	r2, [r4, #76]	; 0x4c
    e0d4:	6522      	str	r2, [r4, #80]	; 0x50
    e0d6:	6562      	str	r2, [r4, #84]	; 0x54
    e0d8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    e0dc:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    e0e0:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    e0e4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    e0e8:	7aaa      	ldrb	r2, [r5, #10]
    e0ea:	4b04      	ldr	r3, [pc, #16]	; (e0fc <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    e0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e0f0:	6423      	str	r3, [r4, #64]	; 0x40
}
    e0f2:	4620      	mov	r0, r4
    e0f4:	bd70      	pop	{r4, r5, r6, pc}
    e0f6:	bf00      	nop
    e0f8:	00023534 	.word	0x00023534
    e0fc:	0002355c 	.word	0x0002355c

0000e100 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e102:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e104:	f000 f9e4 	bl	e4d0 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e108:	79a3      	ldrb	r3, [r4, #6]
    e10a:	2b04      	cmp	r3, #4
    e10c:	d12d      	bne.n	e16a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e10e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e112:	bb5b      	cbnz	r3, e16c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    e114:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e118:	2b00      	cmp	r3, #0
    e11a:	f040 809d 	bne.w	e258 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    e11e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e122:	220c      	movs	r2, #12
    e124:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    e128:	b19b      	cbz	r3, e152 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e12a:	4d75      	ldr	r5, [pc, #468]	; (e300 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    e12c:	68a7      	ldr	r7, [r4, #8]
    e12e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e132:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e136:	4873      	ldr	r0, [pc, #460]	; (e304 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    e138:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e13a:	2601      	movs	r6, #1
    e13c:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    e140:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e144:	fa06 f101 	lsl.w	r1, r6, r1
    e148:	6800      	ldr	r0, [r0, #0]
    e14a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    e14e:	f003 fd91 	bl	11c74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    e152:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    e156:	b143      	cbz	r3, e16a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    e158:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    e15c:	b303      	cbz	r3, e1a0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    e15e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    e162:	429a      	cmp	r2, r3
    e164:	db1c      	blt.n	e1a0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    e166:	4293      	cmp	r3, r2
    e168:	d070      	beq.n	e24c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    e16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    e16c:	3b01      	subs	r3, #1
    e16e:	b29b      	uxth	r3, r3
    e170:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e174:	2b00      	cmp	r3, #0
    e176:	d1ec      	bne.n	e152 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e178:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    e17c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e180:	429a      	cmp	r2, r3
    e182:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e184:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e186:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e18a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e18e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e192:	bf14      	ite	ne
    e194:	619a      	strne	r2, [r3, #24]
    e196:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e198:	230c      	movs	r3, #12
    e19a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e19e:	e7d8      	b.n	e152 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e1a0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e1a4:	bb5b      	cbnz	r3, e1fe <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e1a6:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d14e      	bne.n	e24c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e1ae:	4a56      	ldr	r2, [pc, #344]	; (e308 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e1b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e1b2:	6813      	ldr	r3, [r2, #0]
    e1b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e1b6:	1a1b      	subs	r3, r3, r0
    e1b8:	428b      	cmp	r3, r1
    e1ba:	d3d6      	bcc.n	e16a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e1bc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e1c0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e1c4:	6812      	ldr	r2, [r2, #0]
    e1c6:	6522      	str	r2, [r4, #80]	; 0x50
    e1c8:	fab3 f383 	clz	r3, r3
    e1cc:	095b      	lsrs	r3, r3, #5
    e1ce:	428b      	cmp	r3, r1
    e1d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e1d2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e1d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e1da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e1de:	f04f 020c 	mov.w	r2, #12
    e1e2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e1e6:	f04f 0001 	mov.w	r0, #1
    e1ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e1ec:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e1f0:	bf14      	ite	ne
    e1f2:	619a      	strne	r2, [r3, #24]
    e1f4:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e1f6:	2301      	movs	r3, #1
    e1f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e1fe:	4a42      	ldr	r2, [pc, #264]	; (e308 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e200:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e202:	6813      	ldr	r3, [r2, #0]
    e204:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e206:	1a1b      	subs	r3, r3, r0
    e208:	428b      	cmp	r3, r1
    e20a:	d3ae      	bcc.n	e16a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e20c:	6812      	ldr	r2, [r2, #0]
    e20e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e212:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e214:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e216:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e218:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e21c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e220:	2b00      	cmp	r3, #0
    e222:	d15b      	bne.n	e2dc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e224:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e226:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e228:	01db      	lsls	r3, r3, #7
    e22a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e22e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e232:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e234:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e238:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e23c:	3301      	adds	r3, #1
                        m_outState = false;
    e23e:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e240:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e244:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e248:	2a00      	cmp	r2, #0
    e24a:	d08e      	beq.n	e16a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e24c:	2300      	movs	r3, #0
    e24e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e252:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e258:	4620      	mov	r0, r4
    e25a:	f000 fa0d 	bl	e678 <_ZN9ClearCore9DigitalIn7StateRTEv>
    e25e:	2800      	cmp	r0, #0
    e260:	f47f af5d 	bne.w	e11e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e264:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e268:	2b00      	cmp	r3, #0
    e26a:	f43f af72 	beq.w	e152 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e26e:	3b01      	subs	r3, #1
    e270:	b2db      	uxtb	r3, r3
    e272:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e276:	2b00      	cmp	r3, #0
    e278:	f47f af6b 	bne.w	e152 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e27c:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e280:	b9e6      	cbnz	r6, e2bc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e282:	4a1f      	ldr	r2, [pc, #124]	; (e300 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e284:	491f      	ldr	r1, [pc, #124]	; (e304 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e286:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e28a:	68a3      	ldr	r3, [r4, #8]
    e28c:	680f      	ldr	r7, [r1, #0]
    e28e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e292:	2501      	movs	r5, #1
    e294:	4303      	orrs	r3, r0
    e296:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e29a:	fa05 f101 	lsl.w	r1, r5, r1
    e29e:	4638      	mov	r0, r7
    e2a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e2a4:	462a      	mov	r2, r5
    e2a6:	f003 fce5 	bl	11c74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e2aa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e2ae:	fa05 f202 	lsl.w	r2, r5, r2
    e2b2:	4638      	mov	r0, r7
    e2b4:	4631      	mov	r1, r6
    e2b6:	b2d2      	uxtb	r2, r2
    e2b8:	f003 fb30 	bl	1191c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e2bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e2c0:	b9ab      	cbnz	r3, e2ee <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e2c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e2c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e2c6:	01db      	lsls	r3, r3, #7
    e2c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e2cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e2d0:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e2d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e2d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e2da:	e73a      	b.n	e152 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e2dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e2de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e2e0:	01db      	lsls	r3, r3, #7
    e2e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e2e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e2ea:	619a      	str	r2, [r3, #24]
    e2ec:	e7a2      	b.n	e234 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e2ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e2f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e2f2:	01db      	lsls	r3, r3, #7
    e2f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e2f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e2fc:	619a      	str	r2, [r3, #24]
    e2fe:	e7e8      	b.n	e2d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e300:	200019e0 	.word	0x200019e0
    e304:	20001f28 	.word	0x20001f28
    e308:	20001bf0 	.word	0x20001bf0

0000e30c <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e30c:	7983      	ldrb	r3, [r0, #6]
    e30e:	2b04      	cmp	r3, #4
    e310:	d014      	beq.n	e33c <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e312:	2b06      	cmp	r3, #6
    e314:	d005      	beq.n	e322 <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e316:	2b02      	cmp	r3, #2
    e318:	d001      	beq.n	e31e <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e31a:	2000      	movs	r0, #0
    e31c:	4770      	bx	lr
            state = DigitalIn::State();
    e31e:	f000 b85d 	b.w	e3dc <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e322:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e324:	b173      	cbz	r3, e344 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e326:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e32a:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e32e:	4413      	add	r3, r2
    e330:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e334:	b929      	cbnz	r1, e342 <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e336:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e33a:	4770      	bx	lr
            state = m_outState;
    e33c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e340:	4770      	bx	lr
    e342:	4770      	bx	lr
    int16_t state = -1;
    e344:	f04f 30ff 	mov.w	r0, #4294967295
}
    e348:	4770      	bx	lr
    e34a:	bf00      	nop

0000e34c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e34c:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e34e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e350:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e352:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e354:	4604      	mov	r4, r0
    m_outState = false;
    e356:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e35a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e35e:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e362:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e366:	d41a      	bmi.n	e39e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e368:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e36a:	01d2      	lsls	r2, r2, #7
    e36c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e370:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e374:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e378:	2004      	movs	r0, #4
    e37a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e37e:	f360 0203 	bfi	r2, r0, #0, #4
    e382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e386:	4620      	mov	r0, r4
    e388:	f000 f83c 	bl	e404 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e38c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e38e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e390:	01db      	lsls	r3, r3, #7
    e392:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e396:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e39a:	609a      	str	r2, [r3, #8]
    e39c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e39e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e3a0:	01c0      	lsls	r0, r0, #7
    e3a2:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e3a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e3aa:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e3ae:	2004      	movs	r0, #4
    e3b0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e3b4:	f360 1307 	bfi	r3, r0, #4, #4
    e3b8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e3bc:	e7e3      	b.n	e386 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e3be:	bf00      	nop

0000e3c0 <_ZN9ClearCore9Connector4ModeEv>:
    }
    e3c0:	7980      	ldrb	r0, [r0, #6]
    e3c2:	4770      	bx	lr

0000e3c4 <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    e3c4:	7980      	ldrb	r0, [r0, #6]
    e3c6:	4770      	bx	lr

0000e3c8 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    e3c8:	2902      	cmp	r1, #2
            m_mode = newMode;
    e3ca:	bf06      	itte	eq
    e3cc:	7181      	strbeq	r1, [r0, #6]
            return true;
    e3ce:	2001      	moveq	r0, #1
            return false;
    e3d0:	2000      	movne	r0, #0
    }
    e3d2:	4770      	bx	lr

0000e3d4 <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    e3d4:	2000      	movs	r0, #0
    e3d6:	4770      	bx	lr

0000e3d8 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    e3d8:	2000      	movs	r0, #0
    e3da:	4770      	bx	lr

0000e3dc <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    e3dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e3de:	b113      	cbz	r3, e3e6 <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    e3e0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    e3e4:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e3e6:	4b06      	ldr	r3, [pc, #24]	; (e400 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    e3e8:	68c1      	ldr	r1, [r0, #12]
    e3ea:	681a      	ldr	r2, [r3, #0]
    e3ec:	6943      	ldr	r3, [r0, #20]
    e3ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e3f2:	6812      	ldr	r2, [r2, #0]
    e3f4:	421a      	tst	r2, r3
    e3f6:	bf0c      	ite	eq
    e3f8:	2001      	moveq	r0, #1
    e3fa:	2000      	movne	r0, #0
    e3fc:	4770      	bx	lr
    e3fe:	bf00      	nop
    e400:	20001f18 	.word	0x20001f18

0000e404 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    e404:	4b2e      	ldr	r3, [pc, #184]	; (e4c0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    e406:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    e408:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e40c:	68c3      	ldr	r3, [r0, #12]
    e40e:	6904      	ldr	r4, [r0, #16]
    e410:	01da      	lsls	r2, r3, #7
    e412:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    e416:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e418:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    e41c:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    e420:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    e422:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e426:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    e42a:	d034      	beq.n	e496 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    e42c:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    e430:	f366 1707 	bfi	r7, r6, #4, #4
    e434:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e438:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e43c:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e43e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e442:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e444:	2d00      	cmp	r5, #0
    e446:	d134      	bne.n	e4b2 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    e448:	2402      	movs	r4, #2
    e44a:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e44e:	4a1d      	ldr	r2, [pc, #116]	; (e4c4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e450:	6884      	ldr	r4, [r0, #8]
    e452:	6812      	ldr	r2, [r2, #0]
    e454:	4e1c      	ldr	r6, [pc, #112]	; (e4c8 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    e456:	3306      	adds	r3, #6
    e458:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e45a:	f1a3 050c 	sub.w	r5, r3, #12
    e45e:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e460:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e462:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e464:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e466:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e468:	6242      	str	r2, [r0, #36]	; 0x24
    e46a:	43e4      	mvns	r4, r4
    e46c:	f3bf 8f5b 	dmb	ish
    e470:	e856 3f00 	ldrex	r3, [r6]
    e474:	4023      	ands	r3, r4
    e476:	e846 3200 	strex	r2, r3, [r6]
    e47a:	2a00      	cmp	r2, #0
    e47c:	d1f8      	bne.n	e470 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    e47e:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    e482:	6803      	ldr	r3, [r0, #0]
    e484:	4a11      	ldr	r2, [pc, #68]	; (e4cc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    e486:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    e488:	8081      	strh	r1, [r0, #4]
    e48a:	4293      	cmp	r3, r2
    e48c:	d115      	bne.n	e4ba <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    e48e:	2302      	movs	r3, #2
    e490:	7183      	strb	r3, [r0, #6]
}
    e492:	bcf0      	pop	{r4, r5, r6, r7}
    e494:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e496:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    e49a:	f367 0603 	bfi	r6, r7, #0, #4
    e49e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e4a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e4a6:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e4a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e4ac:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e4ae:	2d00      	cmp	r5, #0
    e4b0:	d0ca      	beq.n	e448 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e4b2:	2403      	movs	r4, #3
    e4b4:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    e4b8:	e7c9      	b.n	e44e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    e4ba:	2102      	movs	r1, #2
}
    e4bc:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    e4be:	4718      	bx	r3
    e4c0:	00010003 	.word	0x00010003
    e4c4:	20001f18 	.word	0x20001f18
    e4c8:	20001ad4 	.word	0x20001ad4
    e4cc:	0000e3c9 	.word	0x0000e3c9

0000e4d0 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    e4d0:	69c2      	ldr	r2, [r0, #28]
    e4d2:	6943      	ldr	r3, [r0, #20]
    e4d4:	6812      	ldr	r2, [r2, #0]
    e4d6:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    e4d8:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    e4da:	d005      	beq.n	e4e8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    e4dc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    e4de:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    e4e0:	2a00      	cmp	r2, #0
    e4e2:	d039      	beq.n	e558 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    e4e4:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    e4e8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e4ea:	2a00      	cmp	r2, #0
    e4ec:	d0fa      	beq.n	e4e4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    e4ee:	3a01      	subs	r2, #1
    e4f0:	b292      	uxth	r2, r2
    e4f2:	8582      	strh	r2, [r0, #44]	; 0x2c
    e4f4:	2a00      	cmp	r2, #0
    e4f6:	d1f5      	bne.n	e4e4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e4f8:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e4fa:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e4fc:	6809      	ldr	r1, [r1, #0]
    e4fe:	400b      	ands	r3, r1
    e500:	2b00      	cmp	r3, #0
    e502:	bf0c      	ite	eq
    e504:	2301      	moveq	r3, #1
    e506:	2300      	movne	r3, #0
    e508:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e50c:	d053      	beq.n	e5b6 <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e50e:	f3bf 8f5b 	dmb	ish
    e512:	4b41      	ldr	r3, [pc, #260]	; (e618 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e514:	43d2      	mvns	r2, r2
    e516:	e853 1f00 	ldrex	r1, [r3]
    e51a:	4011      	ands	r1, r2
    e51c:	e843 1e00 	strex	lr, r1, [r3]
    e520:	f1be 0f00 	cmp.w	lr, #0
    e524:	d1f7      	bne.n	e516 <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    e526:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    e52a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e52e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e532:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e534:	2b00      	cmp	r3, #0
    e536:	d14a      	bne.n	e5ce <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e538:	f3bf 8f5b 	dmb	ish
    e53c:	2301      	movs	r3, #1
    e53e:	408b      	lsls	r3, r1
    e540:	43db      	mvns	r3, r3
    e542:	e852 1f00 	ldrex	r1, [r2]
    e546:	4019      	ands	r1, r3
    e548:	e842 1000 	strex	r0, r1, [r2]
    e54c:	2800      	cmp	r0, #0
    e54e:	d1f8      	bne.n	e542 <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    e550:	f3bf 8f5b 	dmb	ish
}
    e554:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e558:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e55a:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e55c:	6809      	ldr	r1, [r1, #0]
    e55e:	400b      	ands	r3, r1
    e560:	2b00      	cmp	r3, #0
    e562:	bf0c      	ite	eq
    e564:	2301      	moveq	r3, #1
    e566:	2300      	movne	r3, #0
    e568:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e56c:	d047      	beq.n	e5fe <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e56e:	f3bf 8f5b 	dmb	ish
    e572:	4b29      	ldr	r3, [pc, #164]	; (e618 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e574:	43d2      	mvns	r2, r2
    e576:	e853 1f00 	ldrex	r1, [r3]
    e57a:	4011      	ands	r1, r2
    e57c:	e843 1e00 	strex	lr, r1, [r3]
    e580:	f1be 0f00 	cmp.w	lr, #0
    e584:	d1f7      	bne.n	e576 <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    e586:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e58a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e58e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e592:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e594:	bb3b      	cbnz	r3, e5e6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e596:	f3bf 8f5b 	dmb	ish
    e59a:	2301      	movs	r3, #1
    e59c:	408b      	lsls	r3, r1
    e59e:	43db      	mvns	r3, r3
    e5a0:	e852 1f00 	ldrex	r1, [r2]
    e5a4:	4019      	ands	r1, r3
    e5a6:	e842 1000 	strex	r0, r1, [r2]
    e5aa:	2800      	cmp	r0, #0
    e5ac:	d1f8      	bne.n	e5a0 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    e5ae:	f3bf 8f5b 	dmb	ish
}
    e5b2:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e5b6:	4b18      	ldr	r3, [pc, #96]	; (e618 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e5b8:	f3bf 8f5b 	dmb	ish
    e5bc:	e853 1f00 	ldrex	r1, [r3]
    e5c0:	4311      	orrs	r1, r2
    e5c2:	e843 1e00 	strex	lr, r1, [r3]
    e5c6:	f1be 0f00 	cmp.w	lr, #0
    e5ca:	d0ac      	beq.n	e526 <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    e5cc:	e7f6      	b.n	e5bc <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e5ce:	2301      	movs	r3, #1
    e5d0:	408b      	lsls	r3, r1
    e5d2:	f3bf 8f5b 	dmb	ish
    e5d6:	e852 1f00 	ldrex	r1, [r2]
    e5da:	4319      	orrs	r1, r3
    e5dc:	e842 1000 	strex	r0, r1, [r2]
    e5e0:	2800      	cmp	r0, #0
    e5e2:	d0e4      	beq.n	e5ae <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e5e4:	e7f7      	b.n	e5d6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    e5e6:	2301      	movs	r3, #1
    e5e8:	408b      	lsls	r3, r1
    e5ea:	f3bf 8f5b 	dmb	ish
    e5ee:	e852 1f00 	ldrex	r1, [r2]
    e5f2:	4319      	orrs	r1, r3
    e5f4:	e842 1000 	strex	r0, r1, [r2]
    e5f8:	2800      	cmp	r0, #0
    e5fa:	d0d8      	beq.n	e5ae <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e5fc:	e7f7      	b.n	e5ee <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    e5fe:	4b06      	ldr	r3, [pc, #24]	; (e618 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e600:	f3bf 8f5b 	dmb	ish
    e604:	e853 1f00 	ldrex	r1, [r3]
    e608:	4311      	orrs	r1, r2
    e60a:	e843 1e00 	strex	lr, r1, [r3]
    e60e:	f1be 0f00 	cmp.w	lr, #0
    e612:	d0b8      	beq.n	e586 <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    e614:	e7f6      	b.n	e604 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    e616:	bf00      	nop
    e618:	20001ad4 	.word	0x20001ad4

0000e61c <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    e61c:	4a03      	ldr	r2, [pc, #12]	; (e62c <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    e61e:	6002      	str	r2, [r0, #0]
    e620:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e624:	2200      	movs	r2, #0
    e626:	8081      	strh	r1, [r0, #4]
    e628:	7182      	strb	r2, [r0, #6]
    e62a:	4770      	bx	lr
    e62c:	00023584 	.word	0x00023584

0000e630 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    e630:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    e632:	f992 4001 	ldrsb.w	r4, [r2, #1]
    e636:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    e638:	4d0d      	ldr	r5, [pc, #52]	; (e670 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    e63a:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    e63c:	2400      	movs	r4, #0
    e63e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e642:	8086      	strh	r6, [r0, #4]
    e644:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    e646:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    e648:	7895      	ldrb	r5, [r2, #2]
    e64a:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    e64c:	2101      	movs	r1, #1
    e64e:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    e650:	6141      	str	r1, [r0, #20]
    e652:	78d1      	ldrb	r1, [r2, #3]
    e654:	7601      	strb	r1, [r0, #24]
    e656:	7911      	ldrb	r1, [r2, #4]
    e658:	4a06      	ldr	r2, [pc, #24]	; (e674 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    e65a:	61c4      	str	r4, [r0, #28]
    e65c:	6204      	str	r4, [r0, #32]
    e65e:	6244      	str	r4, [r0, #36]	; 0x24
    e660:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    e664:	7641      	strb	r1, [r0, #25]
    e666:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    e66a:	bc70      	pop	{r4, r5, r6}
    e66c:	4770      	bx	lr
    e66e:	bf00      	nop
    e670:	000235b4 	.word	0x000235b4
    e674:	00010003 	.word	0x00010003

0000e678 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e678:	4b05      	ldr	r3, [pc, #20]	; (e690 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    e67a:	68c1      	ldr	r1, [r0, #12]
    e67c:	681a      	ldr	r2, [r3, #0]
    e67e:	6943      	ldr	r3, [r0, #20]
    e680:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e684:	6812      	ldr	r2, [r2, #0]
    e686:	421a      	tst	r2, r3
}
    e688:	bf0c      	ite	eq
    e68a:	2001      	moveq	r0, #1
    e68c:	2000      	movne	r0, #0
    e68e:	4770      	bx	lr
    e690:	20001f18 	.word	0x20001f18

0000e694 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e694:	6a03      	ldr	r3, [r0, #32]
    e696:	6941      	ldr	r1, [r0, #20]
    e698:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e69a:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e69c:	400b      	ands	r3, r1
    e69e:	2b00      	cmp	r3, #0
    e6a0:	bf0c      	ite	eq
    e6a2:	2301      	moveq	r3, #1
    e6a4:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    e6a6:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e6a8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e6ac:	d023      	beq.n	e6f6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e6ae:	f3bf 8f5b 	dmb	ish
    e6b2:	4b1e      	ldr	r3, [pc, #120]	; (e72c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e6b4:	43d2      	mvns	r2, r2
    e6b6:	e853 1f00 	ldrex	r1, [r3]
    e6ba:	4011      	ands	r1, r2
    e6bc:	e843 1e00 	strex	lr, r1, [r3]
    e6c0:	f1be 0f00 	cmp.w	lr, #0
    e6c4:	d1f7      	bne.n	e6b6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    e6c6:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e6ca:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e6ce:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e6d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e6d4:	b9db      	cbnz	r3, e70e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e6d6:	f3bf 8f5b 	dmb	ish
    e6da:	2301      	movs	r3, #1
    e6dc:	408b      	lsls	r3, r1
    e6de:	43db      	mvns	r3, r3
    e6e0:	e852 1f00 	ldrex	r1, [r2]
    e6e4:	4019      	ands	r1, r3
    e6e6:	e842 1000 	strex	r0, r1, [r2]
    e6ea:	2800      	cmp	r0, #0
    e6ec:	d1f8      	bne.n	e6e0 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    e6ee:	f3bf 8f5b 	dmb	ish
    e6f2:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e6f6:	4b0d      	ldr	r3, [pc, #52]	; (e72c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e6f8:	f3bf 8f5b 	dmb	ish
    e6fc:	e853 1f00 	ldrex	r1, [r3]
    e700:	4311      	orrs	r1, r2
    e702:	e843 1e00 	strex	lr, r1, [r3]
    e706:	f1be 0f00 	cmp.w	lr, #0
    e70a:	d0dc      	beq.n	e6c6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    e70c:	e7f6      	b.n	e6fc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e70e:	2301      	movs	r3, #1
    e710:	408b      	lsls	r3, r1
    e712:	f3bf 8f5b 	dmb	ish
    e716:	e852 1f00 	ldrex	r1, [r2]
    e71a:	4319      	orrs	r1, r3
    e71c:	e842 1000 	strex	r0, r1, [r2]
    e720:	2800      	cmp	r0, #0
    e722:	d1f8      	bne.n	e716 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e724:	f3bf 8f5b 	dmb	ish
    e728:	f85d fb04 	ldr.w	pc, [sp], #4
    e72c:	20001ad4 	.word	0x20001ad4

0000e730 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e730:	7980      	ldrb	r0, [r0, #6]
    e732:	4770      	bx	lr

0000e734 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e734:	2005      	movs	r0, #5
    e736:	4770      	bx	lr

0000e738 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e738:	7980      	ldrb	r0, [r0, #6]
    e73a:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e73c:	2804      	cmp	r0, #4
    e73e:	bf8c      	ite	hi
    e740:	2000      	movhi	r0, #0
    e742:	2001      	movls	r0, #1
    e744:	4770      	bx	lr
    e746:	bf00      	nop

0000e748 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e748:	b5f0      	push	{r4, r5, r6, r7, lr}
    e74a:	b083      	sub	sp, #12
    e74c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e750:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e752:	4604      	mov	r4, r0
    e754:	9d08      	ldr	r5, [sp, #32]
    e756:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e758:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e75c:	f7ff fc9a 	bl	e094 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e760:	2300      	movs	r3, #0
    e762:	490f      	ldr	r1, [pc, #60]	; (e7a0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e764:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e768:	f640 42cc 	movw	r2, #3276	; 0xccc
    e76c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e770:	6663      	str	r3, [r4, #100]	; 0x64
    e772:	66a3      	str	r3, [r4, #104]	; 0x68
    e774:	66e3      	str	r3, [r4, #108]	; 0x6c
    e776:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e77a:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e77e:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e782:	6765      	str	r5, [r4, #116]	; 0x74
    e784:	67a6      	str	r6, [r4, #120]	; 0x78
    e786:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e78a:	6021      	str	r1, [r4, #0]
    e78c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e790:	7b2a      	ldrb	r2, [r5, #12]
    e792:	4b04      	ldr	r3, [pc, #16]	; (e7a4 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e798:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e79a:	4620      	mov	r0, r4
    e79c:	b003      	add	sp, #12
    e79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7a0:	000235e4 	.word	0x000235e4
    e7a4:	0002360c 	.word	0x0002360c

0000e7a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e7a8:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e7aa:	6803      	ldr	r3, [r0, #0]
    e7ac:	4a12      	ldr	r2, [pc, #72]	; (e7f8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e7ae:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e7b0:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e7b4:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e7b6:	b082      	sub	sp, #8
    e7b8:	4604      	mov	r4, r0
    e7ba:	d115      	bne.n	e7e8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e7bc:	7980      	ldrb	r0, [r0, #6]
    e7be:	2808      	cmp	r0, #8
    e7c0:	d805      	bhi.n	e7ce <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e7c2:	2301      	movs	r3, #1
    e7c4:	fa03 f000 	lsl.w	r0, r3, r0
    e7c8:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e7cc:	d101      	bne.n	e7d2 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e7ce:	b002      	add	sp, #8
    e7d0:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e7d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e7d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e7d6:	01db      	lsls	r3, r3, #7
    e7d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e7dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e7e0:	b131      	cbz	r1, e7f0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e7e2:	615a      	str	r2, [r3, #20]
}
    e7e4:	b002      	add	sp, #8
    e7e6:	bd10      	pop	{r4, pc}
    e7e8:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e7ea:	4798      	blx	r3
    e7ec:	9901      	ldr	r1, [sp, #4]
    e7ee:	e7e6      	b.n	e7be <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e7f0:	619a      	str	r2, [r3, #24]
}
    e7f2:	b002      	add	sp, #8
    e7f4:	bd10      	pop	{r4, pc}
    e7f6:	bf00      	nop
    e7f8:	0000e731 	.word	0x0000e731

0000e7fc <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e7fc:	7982      	ldrb	r2, [r0, #6]
    e7fe:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e800:	4601      	mov	r1, r0
    e802:	d808      	bhi.n	e816 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e804:	2301      	movs	r3, #1
    e806:	4093      	lsls	r3, r2
    e808:	f013 0f54 	tst.w	r3, #84	; 0x54
    e80c:	d112      	bne.n	e834 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e80e:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e812:	d102      	bne.n	e81a <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e814:	4770      	bx	lr
            state = 0;
    e816:	2000      	movs	r0, #0
}
    e818:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e81a:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e81c:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e81e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e822:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e826:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e82a:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e82e:	f340 004f 	sbfx	r0, r0, #1, #16
    e832:	4770      	bx	lr
            state = DigitalInOut::State();
    e834:	f7ff bd6a 	b.w	e30c <_ZN9ClearCore12DigitalInOut5StateEv>

0000e838 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e838:	b510      	push	{r4, lr}
    switch (m_mode) {
    e83a:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e83c:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e83e:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e840:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e842:	2b05      	cmp	r3, #5
    e844:	d82a      	bhi.n	e89c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e846:	e8df f003 	tbb	[pc, r3]
    e84a:	2925      	.short	0x2925
    e84c:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    e850:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e852:	4b13      	ldr	r3, [pc, #76]	; (e8a0 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    e854:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    e858:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e85c:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e85e:	bf1b      	ittet	ne
    e860:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    e864:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    e868:	20ff      	moveq	r0, #255	; 0xff
    e86a:	11c0      	asrne	r0, r0, #7
    e86c:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e870:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e874:	4b0b      	ldr	r3, [pc, #44]	; (e8a4 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    e876:	fb01 f102 	mul.w	r1, r1, r2
    e87a:	fb83 0301 	smull	r0, r3, r3, r1
    e87e:	440b      	add	r3, r1
    e880:	139b      	asrs	r3, r3, #14
    e882:	17c9      	asrs	r1, r1, #31
    e884:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e886:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e888:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e88a:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e88c:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e88e:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    e890:	2001      	movs	r0, #1
            break;
    e892:	bd10      	pop	{r4, pc}
}
    e894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    e898:	f7ff ba8e 	b.w	ddb8 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e89c:	2000      	movs	r0, #0
}
    e89e:	bd10      	pop	{r4, pc}
    e8a0:	200019e0 	.word	0x200019e0
    e8a4:	80010003 	.word	0x80010003

0000e8a8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e8a8:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    e8ac:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e8b0:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    e8b4:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e8b6:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e8b8:	b302      	cbz	r2, e8fc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e8ba:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    e8be:	2a04      	cmp	r2, #4
    e8c0:	d01c      	beq.n	e8fc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e8c2:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    e8c4:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    e8c8:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    e8ca:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    e8ce:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    e8d0:	f004 fdee 	bl	134b0 <arm_sin_q15>
    e8d4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e8d8:	4b41      	ldr	r3, [pc, #260]	; (e9e0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e8da:	fb11 f100 	smulbb	r1, r1, r0
    e8de:	429d      	cmp	r5, r3
    e8e0:	f341 31cf 	sbfx	r1, r1, #15, #16
    e8e4:	d177      	bne.n	e9d6 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    e8e6:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e8e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    e8ea:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e8ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    e8ee:	2b05      	cmp	r3, #5
    e8f0:	d81e      	bhi.n	e930 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e8f2:	e8df f003 	tbb	[pc, r3]
    e8f6:	1d6b      	.short	0x1d6b
    e8f8:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e8fc:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e8fe:	2a07      	cmp	r2, #7
    e900:	d017      	beq.n	e932 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e902:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e904:	4c36      	ldr	r4, [pc, #216]	; (e9e0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e906:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e908:	f043 0301 	orr.w	r3, r3, #1
    e90c:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e90e:	6803      	ldr	r3, [r0, #0]
    e910:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e912:	2500      	movs	r5, #0
    e914:	42a3      	cmp	r3, r4
    e916:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    e91a:	d132      	bne.n	e982 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e91c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    e91e:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e920:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    e922:	2a04      	cmp	r2, #4
    e924:	d804      	bhi.n	e930 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e926:	e8df f002 	tbb	[pc, r2]
    e92a:	0327      	.short	0x0327
    e92c:	1b27      	.short	0x1b27
    e92e:	27          	.byte	0x27
    e92f:	00          	.byte	0x00
    e930:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e932:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    e936:	4293      	cmp	r3, r2
    e938:	ddc3      	ble.n	e8c2 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e93a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e93c:	4a28      	ldr	r2, [pc, #160]	; (e9e0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e93e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e940:	f043 0301 	orr.w	r3, r3, #1
    e944:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e946:	6803      	ldr	r3, [r0, #0]
    e948:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e94a:	2400      	movs	r4, #0
    e94c:	4293      	cmp	r3, r2
    e94e:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    e952:	d116      	bne.n	e982 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e956:	085b      	lsrs	r3, r3, #1
    e958:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e95a:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e95c:	674b      	str	r3, [r1, #116]	; 0x74
    e95e:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    e960:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e962:	4a20      	ldr	r2, [pc, #128]	; (e9e4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e964:	f000 000f 	and.w	r0, r0, #15
    e968:	4402      	add	r2, r0
    e96a:	b29b      	uxth	r3, r3
    e96c:	2000      	movs	r0, #0
    e96e:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e972:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e974:	674b      	str	r3, [r1, #116]	; 0x74
    e976:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e978:	2100      	movs	r1, #0
}
    e97a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e97e:	f7ff ba1b 	b.w	ddb8 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    e982:	2100      	movs	r1, #0
}
    e984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    e988:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    e98a:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e98c:	4b15      	ldr	r3, [pc, #84]	; (e9e4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e98e:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    e992:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e996:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e998:	bf1b      	ittet	ne
    e99a:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    e99e:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    e9a2:	24ff      	moveq	r4, #255	; 0xff
    e9a4:	11e4      	asrne	r4, r4, #7
    e9a6:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e9aa:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e9ae:	4b0e      	ldr	r3, [pc, #56]	; (e9e8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    e9b0:	fb01 f102 	mul.w	r1, r1, r2
    e9b4:	fb83 4301 	smull	r4, r3, r3, r1
    e9b8:	440b      	add	r3, r1
    e9ba:	139b      	asrs	r3, r3, #14
    e9bc:	17c9      	asrs	r1, r1, #31
    e9be:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9c0:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e9c2:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9c4:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e9c6:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9c8:	6741      	str	r1, [r0, #116]	; 0x74
    e9ca:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e9cc:	4620      	mov	r0, r4
}
    e9ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e9d2:	f7ff b9f1 	b.w	ddb8 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    e9d6:	4620      	mov	r0, r4
    e9d8:	462b      	mov	r3, r5
}
    e9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    e9de:	4718      	bx	r3
    e9e0:	0000e839 	.word	0x0000e839
    e9e4:	200019e0 	.word	0x200019e0
    e9e8:	80010003 	.word	0x80010003

0000e9ec <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    e9ec:	7983      	ldrb	r3, [r0, #6]
    e9ee:	3b02      	subs	r3, #2
    e9f0:	2b05      	cmp	r3, #5
    e9f2:	d804      	bhi.n	e9fe <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    e9f4:	e8df f003 	tbb	[pc, r3]
    e9f8:	03040304 	.word	0x03040304
    e9fc:	0604      	.short	0x0604
    e9fe:	4770      	bx	lr
            DigitalInOut::Refresh();
    ea00:	f7ff bb7e 	b.w	e100 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    ea04:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    ea08:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    ea0a:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    ea0c:	d02c      	beq.n	ea68 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    ea0e:	2b04      	cmp	r3, #4
    ea10:	d003      	beq.n	ea1a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    ea12:	2b02      	cmp	r3, #2
    ea14:	d04c      	beq.n	eab0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    ea16:	bcf0      	pop	{r4, r5, r6, r7}
    ea18:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    ea1a:	4937      	ldr	r1, [pc, #220]	; (eaf8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ea1c:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ea1e:	680b      	ldr	r3, [r1, #0]
    ea20:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    ea22:	1b1b      	subs	r3, r3, r4
    ea24:	4293      	cmp	r3, r2
    ea26:	d9f6      	bls.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    ea28:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    ea2a:	2303      	movs	r3, #3
    ea2c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    ea30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea32:	4b32      	ldr	r3, [pc, #200]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    ea34:	f042 0201 	orr.w	r2, r2, #1
    ea38:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    ea3a:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    ea3c:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    ea3e:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea40:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ea44:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ea48:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea4a:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea4e:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea50:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea54:	408a      	lsls	r2, r1
    ea56:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    ea58:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea5a:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea5e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ea62:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    ea66:	e7d6      	b.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ea68:	4923      	ldr	r1, [pc, #140]	; (eaf8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ea6a:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ea6c:	680b      	ldr	r3, [r1, #0]
    ea6e:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ea70:	1b1b      	subs	r3, r3, r4
    ea72:	4293      	cmp	r3, r2
    ea74:	d9cf      	bls.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea76:	4a21      	ldr	r2, [pc, #132]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ea78:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    ea7a:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ea7c:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea7e:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea82:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ea86:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea88:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea8c:	2101      	movs	r1, #1
    ea8e:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea94:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    ea98:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea9a:	ea24 0406 	bic.w	r4, r4, r6
    ea9e:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eaa2:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eaa6:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eaaa:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    eaae:	e7b2      	b.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    eab0:	4b11      	ldr	r3, [pc, #68]	; (eaf8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    eab2:	6e41      	ldr	r1, [r0, #100]	; 0x64
    eab4:	681b      	ldr	r3, [r3, #0]
    eab6:	6e82      	ldr	r2, [r0, #104]	; 0x68
    eab8:	1a5b      	subs	r3, r3, r1
    eaba:	4293      	cmp	r3, r2
    eabc:	d9ab      	bls.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eabe:	4a0f      	ldr	r2, [pc, #60]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    eac0:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eac2:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    eac4:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eac8:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eacc:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ead0:	2501      	movs	r5, #1
    ead2:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ead4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ead8:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    eadc:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    eae0:	2500      	movs	r5, #0
    eae2:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    eae6:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eaea:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eaee:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eaf2:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    eaf6:	e78e      	b.n	ea16 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    eaf8:	20001bf0 	.word	0x20001bf0
    eafc:	200019e0 	.word	0x200019e0

0000eb00 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    eb00:	b570      	push	{r4, r5, r6, lr}
    eb02:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    eb04:	f7ff fc22 	bl	e34c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    eb08:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    eb0a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    eb0c:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    eb10:	6813      	ldr	r3, [r2, #0]
    eb12:	f043 0301 	orr.w	r3, r3, #1
    eb16:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    eb18:	6893      	ldr	r3, [r2, #8]
    eb1a:	f013 0301 	ands.w	r3, r3, #1
    eb1e:	d1fb      	bne.n	eb18 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    eb20:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    eb22:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    eb24:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    eb26:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    eb28:	4b24      	ldr	r3, [pc, #144]	; (ebbc <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    eb2a:	4e25      	ldr	r6, [pc, #148]	; (ebc0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    eb2c:	4825      	ldr	r0, [pc, #148]	; (ebc4 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    eb2e:	f045 0502 	orr.w	r5, r5, #2
    eb32:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    eb34:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    eb36:	f045 0505 	orr.w	r5, r5, #5
    eb3a:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    eb3c:	6a55      	ldr	r5, [r2, #36]	; 0x24
    eb3e:	430d      	orrs	r5, r1
    eb40:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    eb42:	681b      	ldr	r3, [r3, #0]
    eb44:	fba6 5303 	umull	r5, r3, r6, r3
    eb48:	0bdb      	lsrs	r3, r3, #15
    eb4a:	3b01      	subs	r3, #1
    eb4c:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    eb4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    eb50:	6453      	str	r3, [r2, #68]	; 0x44
    eb52:	6c13      	ldr	r3, [r2, #64]	; 0x40
    eb54:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    eb56:	6f63      	ldr	r3, [r4, #116]	; 0x74
    eb58:	f993 2001 	ldrsb.w	r2, [r3, #1]
    eb5c:	789d      	ldrb	r5, [r3, #2]
    eb5e:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    eb62:	fa01 f605 	lsl.w	r6, r1, r5
    eb66:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    eb68:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    eb6a:	f994 3001 	ldrsb.w	r3, [r4, #1]
    eb6e:	78a4      	ldrb	r4, [r4, #2]
    eb70:	01db      	lsls	r3, r3, #7
    eb72:	4418      	add	r0, r3
    eb74:	40a1      	lsls	r1, r4
    eb76:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    eb78:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb7a:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    eb7e:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb80:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb84:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb88:	2005      	movs	r0, #5
    eb8a:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb90:	bf4c      	ite	mi
    eb92:	f360 1107 	bfimi	r1, r0, #4, #4
    eb96:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb9a:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb9e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eba2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    eba6:	2105      	movs	r1, #5
    eba8:	07e0      	lsls	r0, r4, #31
    ebaa:	bf4c      	ite	mi
    ebac:	f361 1207 	bfimi	r2, r1, #4, #4
    ebb0:	f361 0203 	bfipl	r2, r1, #0, #4
    ebb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ebb8:	bd70      	pop	{r4, r5, r6, pc}
    ebba:	bf00      	nop
    ebbc:	200000e8 	.word	0x200000e8
    ebc0:	be37c63b 	.word	0xbe37c63b
    ebc4:	41008000 	.word	0x41008000

0000ebc8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    ebc8:	7982      	ldrb	r2, [r0, #6]
    ebca:	428a      	cmp	r2, r1
    ebcc:	d07a      	beq.n	ecc4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    ebce:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ebd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebd2:	460d      	mov	r5, r1
    ebd4:	d867      	bhi.n	eca6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ebd6:	2201      	movs	r2, #1
    ebd8:	fa02 f301 	lsl.w	r3, r2, r1
    ebdc:	f013 0f54 	tst.w	r3, #84	; 0x54
    ebe0:	4604      	mov	r4, r0
    ebe2:	d171      	bne.n	ecc8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    ebe4:	f413 7f90 	tst.w	r3, #288	; 0x120
    ebe8:	d05f      	beq.n	ecaa <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    ebea:	7901      	ldrb	r1, [r0, #4]
    ebec:	4a5d      	ldr	r2, [pc, #372]	; (ed64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    ebee:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ebf2:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    ebf6:	2b00      	cmp	r3, #0
    ebf8:	f040 809e 	bne.w	ed38 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    ebfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebfe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ec00:	01db      	lsls	r3, r3, #7
    ec02:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ec06:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ec0a:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ec0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ec0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ec12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ec16:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec18:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    ec1c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ec20:	f36f 0000 	bfc	r0, #0, #1
    ec24:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    ec28:	68a3      	ldr	r3, [r4, #8]
    ec2a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec2e:	2d05      	cmp	r5, #5
    ec30:	f000 808b 	beq.w	ed4a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    ec34:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec38:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec3c:	2701      	movs	r7, #1
    ec3e:	fa07 f101 	lsl.w	r1, r7, r1
    ec42:	ea20 0101 	bic.w	r1, r0, r1
    ec46:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec4a:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ec4e:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ec50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ec54:	f991 3001 	ldrsb.w	r3, [r1, #1]
    ec58:	4a43      	ldr	r2, [pc, #268]	; (ed68 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ec5a:	7889      	ldrb	r1, [r1, #2]
    ec5c:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ec60:	440b      	add	r3, r1
    ec62:	2101      	movs	r1, #1
    ec64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ec68:	4308      	orrs	r0, r1
    ec6a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ec6e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    ec70:	f990 3001 	ldrsb.w	r3, [r0, #1]
    ec74:	7880      	ldrb	r0, [r0, #2]
    ec76:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ec7a:	4403      	add	r3, r0
    ec7c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ec80:	430a      	orrs	r2, r1
    ec82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    ec86:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    ec88:	6813      	ldr	r3, [r2, #0]
    ec8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ec8e:	428b      	cmp	r3, r1
    ec90:	d006      	beq.n	eca0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    ec92:	6813      	ldr	r3, [r2, #0]
    ec94:	f361 0341 	bfi	r3, r1, #1, #1
    ec98:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    ec9a:	6893      	ldr	r3, [r2, #8]
    ec9c:	079b      	lsls	r3, r3, #30
    ec9e:	d4fc      	bmi.n	ec9a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    eca0:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    eca2:	2001      	movs	r0, #1
    eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    eca6:	2000      	movs	r0, #0
    eca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ecaa:	061a      	lsls	r2, r3, #24
    ecac:	d5fb      	bpl.n	eca6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    ecae:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ecb0:	4a2c      	ldr	r2, [pc, #176]	; (ed64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    ecb2:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    ecb6:	f001 010f 	and.w	r1, r1, #15
    ecba:	1850      	adds	r0, r2, r1
    ecbc:	11db      	asrs	r3, r3, #7
    ecbe:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    ecc2:	e796      	b.n	ebf2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    ecc4:	2001      	movs	r0, #1
    ecc6:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecc8:	4f26      	ldr	r7, [pc, #152]	; (ed64 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    ecca:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eccc:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecd0:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecd4:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecd8:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecdc:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecde:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ece2:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ece6:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecea:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecee:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecf2:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    ecf6:	f7ff f8bb 	bl	de70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    ecfa:	2800      	cmp	r0, #0
    ecfc:	d0d3      	beq.n	eca6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ecfe:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ed00:	4b19      	ldr	r3, [pc, #100]	; (ed68 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ed02:	f991 2001 	ldrsb.w	r2, [r1, #1]
    ed06:	7889      	ldrb	r1, [r1, #2]
    ed08:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    ed0c:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ed0e:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ed10:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    ed14:	f36f 0000 	bfc	r0, #0, #1
    ed18:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ed1c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    ed1e:	f992 0001 	ldrsb.w	r0, [r2, #1]
    ed22:	7892      	ldrb	r2, [r2, #2]
    ed24:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    ed28:	4413      	add	r3, r2
    ed2a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ed2e:	f36f 0200 	bfc	r2, #0, #1
    ed32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ed36:	e7a6      	b.n	ec86 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ed38:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed3a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ed3c:	01db      	lsls	r3, r3, #7
    ed3e:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ed42:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ed46:	6146      	str	r6, [r0, #20]
    ed48:	e760      	b.n	ec0c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ed4a:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ed4e:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ed52:	2601      	movs	r6, #1
    ed54:	fa06 f101 	lsl.w	r1, r6, r1
    ed58:	4339      	orrs	r1, r7
    ed5a:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ed5e:	4303      	orrs	r3, r0
    ed60:	e775      	b.n	ec4e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ed62:	bf00      	nop
    ed64:	200019e0 	.word	0x200019e0
    ed68:	41008000 	.word	0x41008000

0000ed6c <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ed6c:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ed6e:	4c07      	ldr	r4, [pc, #28]	; (ed8c <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ed70:	6823      	ldr	r3, [r4, #0]
    ed72:	07db      	lsls	r3, r3, #31
    ed74:	d502      	bpl.n	ed7c <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ed76:	4b06      	ldr	r3, [pc, #24]	; (ed90 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ed78:	6818      	ldr	r0, [r3, #0]
    ed7a:	bd10      	pop	{r4, pc}
    ed7c:	2001      	movs	r0, #1
    ed7e:	f004 fbb3 	bl	134e8 <_Znwj>
    ed82:	4a03      	ldr	r2, [pc, #12]	; (ed90 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ed84:	2301      	movs	r3, #1
    ed86:	6010      	str	r0, [r2, #0]
    ed88:	6023      	str	r3, [r4, #0]
    return *instance;
}
    ed8a:	bd10      	pop	{r4, pc}
    ed8c:	20001e34 	.word	0x20001e34
    ed90:	20001f04 	.word	0x20001f04

0000ed94 <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    ed94:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ed96:	4a13      	ldr	r2, [pc, #76]	; (ede4 <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ed98:	4913      	ldr	r1, [pc, #76]	; (ede8 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ed9a:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ed9c:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ed9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    eda2:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    eda4:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eda6:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    eda8:	8813      	ldrh	r3, [r2, #0]
    edaa:	b29b      	uxth	r3, r3
    edac:	2b01      	cmp	r3, #1
    edae:	d0fb      	beq.n	eda8 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    edb0:	4b0e      	ldr	r3, [pc, #56]	; (edec <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    edb2:	4d0f      	ldr	r5, [pc, #60]	; (edf0 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    edb4:	4c0f      	ldr	r4, [pc, #60]	; (edf4 <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    edb6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    edba:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    edbc:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    edc0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    edc4:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    edc8:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    edca:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    edcc:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    edce:	7b51      	ldrb	r1, [r2, #13]
    edd0:	f041 0101 	orr.w	r1, r1, #1
    edd4:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    edd6:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    edd8:	6913      	ldr	r3, [r2, #16]
    edda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    edde:	6113      	str	r3, [r2, #16]
}
    ede0:	bc70      	pop	{r4, r5, r6}
    ede2:	4770      	bx	lr
    ede4:	40000800 	.word	0x40000800
    ede8:	4100a000 	.word	0x4100a000
    edec:	e000e100 	.word	0xe000e100
    edf0:	20001e40 	.word	0x20001e40
    edf4:	20001ea0 	.word	0x20001ea0

0000edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    edf8:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    edfa:	bfda      	itte	le
    edfc:	4b02      	ldrle	r3, [pc, #8]	; (ee08 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    edfe:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ee02:	2000      	movgt	r0, #0
}
    ee04:	4770      	bx	lr
    ee06:	bf00      	nop
    ee08:	4100a040 	.word	0x4100a040

0000ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ee0c:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    ee0e:	bfda      	itte	le
    ee10:	4b02      	ldrle	r3, [pc, #8]	; (ee1c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    ee12:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ee16:	2000      	movgt	r0, #0
}
    ee18:	4770      	bx	lr
    ee1a:	bf00      	nop
    ee1c:	20001e40 	.word	0x20001e40

0000ee20 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    ee20:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    ee22:	f7ff ffa3 	bl	ed6c <_ZN9ClearCore10DmaManager8InstanceEv>
    ee26:	4b01      	ldr	r3, [pc, #4]	; (ee2c <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    ee28:	6018      	str	r0, [r3, #0]
    ee2a:	bd08      	pop	{r3, pc}
    ee2c:	20001f00 	.word	0x20001f00

0000ee30 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    ee30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee34:	4604      	mov	r4, r0
    ee36:	4267      	negs	r7, r4
    ee38:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    ee3c:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    ee40:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    ee44:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ee48:	4608      	mov	r0, r1
    ee4a:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ee4e:	2101      	movs	r1, #1
    ee50:	f002 f86e 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    ee54:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    ee58:	2600      	movs	r6, #0
    bool sendData = true;
    ee5a:	2201      	movs	r2, #1
    ee5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ee60:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    ee64:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    ee68:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    ee6a:	4690      	mov	r8, r2
    ee6c:	2b02      	cmp	r3, #2
    ee6e:	f000 821b 	beq.w	f2a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    ee72:	2d03      	cmp	r5, #3
    ee74:	f300 8159 	bgt.w	f12a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    ee78:	b1a3      	cbz	r3, eea4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    ee7a:	2b01      	cmp	r3, #1
    ee7c:	d1fc      	bne.n	ee78 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    ee7e:	b1da      	cbz	r2, eeb8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    ee80:	2e00      	cmp	r6, #0
    ee82:	f040 808d 	bne.w	efa0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    ee86:	6026      	str	r6, [r4, #0]
    ee88:	6066      	str	r6, [r4, #4]
    ee8a:	60a6      	str	r6, [r4, #8]
    ee8c:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    ee8e:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    ee90:	f104 0212 	add.w	r2, r4, #18
    ee94:	4621      	mov	r1, r4
    ee96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ee98:	f002 f8f4 	bl	11084 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    ee9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    eea0:	2200      	movs	r2, #0
    eea2:	e7e3      	b.n	ee6c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    eea4:	2a00      	cmp	r2, #0
    eea6:	d053      	beq.n	ef50 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    eea8:	f04f 33ff 	mov.w	r3, #4294967295
    eeac:	6023      	str	r3, [r4, #0]
    eeae:	6063      	str	r3, [r4, #4]
    eeb0:	60a3      	str	r3, [r4, #8]
    eeb2:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    eeb4:	2310      	movs	r3, #16
    eeb6:	e7eb      	b.n	ee90 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    eeb8:	2e00      	cmp	r6, #0
    eeba:	f040 80a2 	bne.w	f002 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    eebe:	7ca2      	ldrb	r2, [r4, #18]
    eec0:	2aff      	cmp	r2, #255	; 0xff
    eec2:	f040 8128 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eec6:	7ce2      	ldrb	r2, [r4, #19]
    eec8:	2aff      	cmp	r2, #255	; 0xff
    eeca:	f040 8124 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eece:	7d22      	ldrb	r2, [r4, #20]
    eed0:	2aff      	cmp	r2, #255	; 0xff
    eed2:	f040 8120 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eed6:	7d62      	ldrb	r2, [r4, #21]
    eed8:	2aff      	cmp	r2, #255	; 0xff
    eeda:	f040 811c 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eede:	7da2      	ldrb	r2, [r4, #22]
    eee0:	2aff      	cmp	r2, #255	; 0xff
    eee2:	f040 8118 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eee6:	7de2      	ldrb	r2, [r4, #23]
    eee8:	2aff      	cmp	r2, #255	; 0xff
    eeea:	f040 8114 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeee:	7e22      	ldrb	r2, [r4, #24]
    eef0:	2aff      	cmp	r2, #255	; 0xff
    eef2:	f040 8110 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eef6:	7e62      	ldrb	r2, [r4, #25]
    eef8:	2aff      	cmp	r2, #255	; 0xff
    eefa:	f040 810c 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eefe:	7ea2      	ldrb	r2, [r4, #26]
    ef00:	2aff      	cmp	r2, #255	; 0xff
    ef02:	f040 8108 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef06:	7ee2      	ldrb	r2, [r4, #27]
    ef08:	2aff      	cmp	r2, #255	; 0xff
    ef0a:	f040 8104 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef0e:	7f22      	ldrb	r2, [r4, #28]
    ef10:	2aff      	cmp	r2, #255	; 0xff
    ef12:	f040 8100 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef16:	7f62      	ldrb	r2, [r4, #29]
    ef18:	2aff      	cmp	r2, #255	; 0xff
    ef1a:	f040 80fc 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef1e:	7fa2      	ldrb	r2, [r4, #30]
    ef20:	2aff      	cmp	r2, #255	; 0xff
    ef22:	f040 80f8 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef26:	7fe2      	ldrb	r2, [r4, #31]
    ef28:	2aff      	cmp	r2, #255	; 0xff
    ef2a:	f040 80f4 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef2e:	f894 2020 	ldrb.w	r2, [r4, #32]
    ef32:	2aff      	cmp	r2, #255	; 0xff
    ef34:	f040 80ef 	bne.w	f116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef38:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    ef3c:	3eff      	subs	r6, #255	; 0xff
    ef3e:	bf18      	it	ne
    ef40:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    ef42:	3501      	adds	r5, #1
    ef44:	b2ed      	uxtb	r5, r5
    ef46:	2d03      	cmp	r5, #3
    ef48:	f04f 0201 	mov.w	r2, #1
    ef4c:	dd94      	ble.n	ee78 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    ef4e:	e0ec      	b.n	f12a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    ef50:	7ca2      	ldrb	r2, [r4, #18]
    ef52:	bb02      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef54:	7ce2      	ldrb	r2, [r4, #19]
    ef56:	b9f2      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef58:	7d22      	ldrb	r2, [r4, #20]
    ef5a:	b9e2      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef5c:	7d62      	ldrb	r2, [r4, #21]
    ef5e:	b9d2      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef60:	7da2      	ldrb	r2, [r4, #22]
    ef62:	b9c2      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef64:	7de2      	ldrb	r2, [r4, #23]
    ef66:	b9b2      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef68:	7e22      	ldrb	r2, [r4, #24]
    ef6a:	b9a2      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef6c:	7e62      	ldrb	r2, [r4, #25]
    ef6e:	b992      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef70:	7ea2      	ldrb	r2, [r4, #26]
    ef72:	b982      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef74:	7ee2      	ldrb	r2, [r4, #27]
    ef76:	b972      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef78:	7f22      	ldrb	r2, [r4, #28]
    ef7a:	b962      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef7c:	7f62      	ldrb	r2, [r4, #29]
    ef7e:	b952      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef80:	7fa2      	ldrb	r2, [r4, #30]
    ef82:	b942      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef84:	7fe2      	ldrb	r2, [r4, #31]
    ef86:	b932      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef88:	f894 2020 	ldrb.w	r2, [r4, #32]
    ef8c:	b91a      	cbnz	r2, ef96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef8e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    ef92:	2a00      	cmp	r2, #0
    ef94:	d0d5      	beq.n	ef42 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    ef96:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    ef9a:	2501      	movs	r5, #1
                        flush0Success = false;
    ef9c:	2600      	movs	r6, #0
    ef9e:	e772      	b.n	ee86 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    efa0:	2f00      	cmp	r7, #0
    efa2:	f000 80ba 	beq.w	f11a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    efa6:	23aa      	movs	r3, #170	; 0xaa
    efa8:	2f01      	cmp	r7, #1
    efaa:	7023      	strb	r3, [r4, #0]
    efac:	f104 0101 	add.w	r1, r4, #1
    efb0:	f000 80db 	beq.w	f16a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    efb4:	2f02      	cmp	r7, #2
    efb6:	7063      	strb	r3, [r4, #1]
    efb8:	f104 0102 	add.w	r1, r4, #2
    efbc:	f000 80d3 	beq.w	f166 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    efc0:	70a3      	strb	r3, [r4, #2]
    efc2:	1ce1      	adds	r1, r4, #3
    efc4:	220e      	movs	r2, #14
    efc6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    efca:	51e3      	str	r3, [r4, r7]
    efcc:	19e3      	adds	r3, r4, r7
    efce:	3304      	adds	r3, #4
    efd0:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    efd4:	f1b9 0f03 	cmp.w	r9, #3
    efd8:	6018      	str	r0, [r3, #0]
    efda:	6058      	str	r0, [r3, #4]
    efdc:	d000      	beq.n	efe0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    efde:	6098      	str	r0, [r3, #8]
    efe0:	45d3      	cmp	fp, sl
    efe2:	eba2 020a 	sub.w	r2, r2, sl
    efe6:	eb01 000a 	add.w	r0, r1, sl
    efea:	d008      	beq.n	effe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    efec:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    efee:	2a01      	cmp	r2, #1
            *buf++ = val;
    eff0:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    eff4:	d003      	beq.n	effe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    eff6:	2a02      	cmp	r2, #2
            *buf++ = val;
    eff8:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    effa:	d000      	beq.n	effe <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    effc:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    effe:	2311      	movs	r3, #17
    f000:	e746      	b.n	ee90 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    f002:	7ca1      	ldrb	r1, [r4, #18]
    f004:	29aa      	cmp	r1, #170	; 0xaa
    f006:	f000 80aa 	beq.w	f15e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    f00a:	7ce2      	ldrb	r2, [r4, #19]
    f00c:	2aaa      	cmp	r2, #170	; 0xaa
    f00e:	d040      	beq.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f010:	7d23      	ldrb	r3, [r4, #20]
    f012:	2baa      	cmp	r3, #170	; 0xaa
    f014:	f000 80a5 	beq.w	f162 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    f018:	7d63      	ldrb	r3, [r4, #21]
    f01a:	2baa      	cmp	r3, #170	; 0xaa
    f01c:	f000 80a7 	beq.w	f16e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    f020:	7da3      	ldrb	r3, [r4, #22]
    f022:	2baa      	cmp	r3, #170	; 0xaa
    f024:	f000 8118 	beq.w	f258 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f028:	7de3      	ldrb	r3, [r4, #23]
    f02a:	2baa      	cmp	r3, #170	; 0xaa
    f02c:	f000 80a1 	beq.w	f172 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f030:	7e23      	ldrb	r3, [r4, #24]
    f032:	2baa      	cmp	r3, #170	; 0xaa
    f034:	f000 8112 	beq.w	f25c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f038:	7e63      	ldrb	r3, [r4, #25]
    f03a:	2baa      	cmp	r3, #170	; 0xaa
    f03c:	f000 8110 	beq.w	f260 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f040:	7ea3      	ldrb	r3, [r4, #26]
    f042:	2baa      	cmp	r3, #170	; 0xaa
    f044:	f000 810e 	beq.w	f264 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f048:	7ee3      	ldrb	r3, [r4, #27]
    f04a:	2baa      	cmp	r3, #170	; 0xaa
    f04c:	f000 8102 	beq.w	f254 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f050:	7f23      	ldrb	r3, [r4, #28]
    f052:	2baa      	cmp	r3, #170	; 0xaa
    f054:	f000 8108 	beq.w	f268 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f058:	7f63      	ldrb	r3, [r4, #29]
    f05a:	2baa      	cmp	r3, #170	; 0xaa
    f05c:	f000 811c 	beq.w	f298 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f060:	7fa3      	ldrb	r3, [r4, #30]
    f062:	2baa      	cmp	r3, #170	; 0xaa
    f064:	f000 811a 	beq.w	f29c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f068:	7fe3      	ldrb	r3, [r4, #31]
    f06a:	2baa      	cmp	r3, #170	; 0xaa
    f06c:	f000 8118 	beq.w	f2a0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f070:	f894 3020 	ldrb.w	r3, [r4, #32]
    f074:	2baa      	cmp	r3, #170	; 0xaa
    f076:	f000 8115 	beq.w	f2a4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f07a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f07e:	2baa      	cmp	r3, #170	; 0xaa
    f080:	f000 8108 	beq.w	f294 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f084:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f088:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f08a:	bf08      	it	eq
    f08c:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f08e:	f040 80ed 	bne.w	f26c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f092:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f094:	2502      	movs	r5, #2
    f096:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f09a:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f09c:	74e2      	strb	r2, [r4, #19]
    f09e:	7522      	strb	r2, [r4, #20]
    f0a0:	7562      	strb	r2, [r4, #21]
    f0a2:	75a2      	strb	r2, [r4, #22]
    f0a4:	75e2      	strb	r2, [r4, #23]
    f0a6:	7622      	strb	r2, [r4, #24]
    f0a8:	7662      	strb	r2, [r4, #25]
    f0aa:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f0ac:	76e2      	strb	r2, [r4, #27]
    f0ae:	7722      	strb	r2, [r4, #28]
    f0b0:	7762      	strb	r2, [r4, #29]
    f0b2:	77a2      	strb	r2, [r4, #30]
    f0b4:	77e2      	strb	r2, [r4, #31]
    f0b6:	f884 2020 	strb.w	r2, [r4, #32]
    f0ba:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f0be:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f0c2:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f0c6:	105b      	asrs	r3, r3, #1
    f0c8:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f0ca:	2701      	movs	r7, #1
    f0cc:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f0ce:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f0d2:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f0d6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f0da:	3a01      	subs	r2, #1
    f0dc:	4610      	mov	r0, r2
    f0de:	17d1      	asrs	r1, r2, #31
    f0e0:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f0e2:	42ba      	cmp	r2, r7
    f0e4:	bfc8      	it	gt
    f0e6:	fa42 f707 	asrgt.w	r7, r2, r7
    f0ea:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f0ee:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d13f      	bne.n	f176 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f0f6:	4b6d      	ldr	r3, [pc, #436]	; (f2ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f0f8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f0fc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f100:	43c9      	mvns	r1, r1
    f102:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f104:	4a6a      	ldr	r2, [pc, #424]	; (f2b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f106:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f10a:	6813      	ldr	r3, [r2, #0]
    f10c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f110:	4628      	mov	r0, r5
    f112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f116:	2601      	movs	r6, #1
    f118:	e713      	b.n	ef42 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f11a:	4623      	mov	r3, r4
    f11c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f120:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f124:	4621      	mov	r1, r4
    f126:	2211      	movs	r2, #17
    f128:	e752      	b.n	efd0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f12a:	4a62      	ldr	r2, [pc, #392]	; (f2b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f12c:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f12e:	2301      	movs	r3, #1
    f130:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f134:	2208      	movs	r2, #8
    f136:	2102      	movs	r1, #2
    f138:	f002 fbf0 	bl	1191c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f13c:	4a5b      	ldr	r2, [pc, #364]	; (f2ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f13e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f142:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f146:	495a      	ldr	r1, [pc, #360]	; (f2b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f148:	ea23 0300 	bic.w	r3, r3, r0
    f14c:	6809      	ldr	r1, [r1, #0]
    f14e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f152:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f154:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f158:	4628      	mov	r0, r5
    f15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f15e:	4613      	mov	r3, r2
    f160:	e797      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f162:	2302      	movs	r3, #2
    f164:	e795      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f166:	220f      	movs	r2, #15
    f168:	e72d      	b.n	efc6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f16a:	2210      	movs	r2, #16
    f16c:	e72b      	b.n	efc6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f16e:	2303      	movs	r3, #3
    f170:	e78f      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f172:	2305      	movs	r3, #5
    f174:	e78d      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f176:	f1c3 0108 	rsb	r1, r3, #8
    f17a:	00ce      	lsls	r6, r1, #3
    f17c:	f04f 30ff 	mov.w	r0, #4294967295
    f180:	f1c6 0220 	rsb	r2, r6, #32
    f184:	fa00 f202 	lsl.w	r2, r0, r2
    f188:	fa20 fe06 	lsr.w	lr, r0, r6
    f18c:	f1a6 0720 	sub.w	r7, r6, #32
    f190:	fa20 f707 	lsr.w	r7, r0, r7
    f194:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f198:	4622      	mov	r2, r4
    f19a:	ea4e 0e07 	orr.w	lr, lr, r7
    f19e:	40f0      	lsrs	r0, r6
    f1a0:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f1a2:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f1a6:	65e0      	str	r0, [r4, #92]	; 0x5c
    f1a8:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f1ac:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f1ae:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f1b0:	f104 0812 	add.w	r8, r4, #18
    f1b4:	7056      	strb	r6, [r2, #1]
    f1b6:	7096      	strb	r6, [r2, #2]
    f1b8:	70d6      	strb	r6, [r2, #3]
    f1ba:	7116      	strb	r6, [r2, #4]
    f1bc:	7156      	strb	r6, [r2, #5]
    f1be:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f1c0:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f1c4:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f1c6:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f1ca:	4442      	add	r2, r8
    f1cc:	3301      	adds	r3, #1
    f1ce:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f1d0:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f1d4:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f1d6:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f1d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1da:	f001 ff53 	bl	11084 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f1de:	4631      	mov	r1, r6
    f1e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1e2:	f001 fea5 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f1e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f1ea:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f1ee:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f1f0:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f1f2:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f1f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1f6:	f001 fe9b 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f1fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f1fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f200:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f204:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f208:	2701      	movs	r7, #1
    f20a:	4442      	add	r2, r8
    f20c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f210:	4421      	add	r1, r4
    f212:	f001 ff37 	bl	11084 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f216:	4631      	mov	r1, r6
    f218:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f21a:	f001 fe89 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f21e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f222:	4b22      	ldr	r3, [pc, #136]	; (f2ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f224:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f228:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f22c:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f230:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f234:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f238:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f23c:	f04f 0800 	mov.w	r8, #0
    f240:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f244:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f248:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f24c:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f24e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f252:	e757      	b.n	f104 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f254:	2309      	movs	r3, #9
    f256:	e71c      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f258:	2304      	movs	r3, #4
    f25a:	e71a      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f25c:	2306      	movs	r3, #6
    f25e:	e718      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f260:	2307      	movs	r3, #7
    f262:	e716      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f264:	2308      	movs	r3, #8
    f266:	e714      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f268:	230a      	movs	r3, #10
    f26a:	e712      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f26c:	2300      	movs	r3, #0
    f26e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f272:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f276:	4a0f      	ldr	r2, [pc, #60]	; (f2b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f278:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f27a:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f27c:	f04f 0000 	mov.w	r0, #0
    f280:	f04f 0100 	mov.w	r1, #0
    f284:	bfcc      	ite	gt
    f286:	105b      	asrgt	r3, r3, #1
    f288:	2301      	movle	r3, #1
    f28a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f28e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f292:	e74b      	b.n	f12c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f294:	230f      	movs	r3, #15
    f296:	e6fc      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f298:	230b      	movs	r3, #11
    f29a:	e6fa      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f29c:	230c      	movs	r3, #12
    f29e:	e6f8      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f2a0:	230d      	movs	r3, #13
    f2a2:	e6f6      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f2a4:	230e      	movs	r3, #14
    f2a6:	e6f4      	b.n	f092 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f2a8:	2300      	movs	r3, #0
    f2aa:	e70c      	b.n	f0c6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f2ac:	200019e0 	.word	0x200019e0
    f2b0:	20001bf0 	.word	0x20001bf0
    f2b4:	20001f28 	.word	0x20001f28

0000f2b8 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f2bc:	4f42      	ldr	r7, [pc, #264]	; (f3c8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f2be:	683c      	ldr	r4, [r7, #0]
    f2c0:	f014 0401 	ands.w	r4, r4, #1
    f2c4:	d003      	beq.n	f2ce <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f2c6:	4b41      	ldr	r3, [pc, #260]	; (f3cc <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f2c8:	6818      	ldr	r0, [r3, #0]
    f2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2ce:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f2d2:	f004 f909 	bl	134e8 <_Znwj>
            buf64.writeMarker = 0;
    f2d6:	4603      	mov	r3, r0
    f2d8:	4606      	mov	r6, r0
    f2da:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f2de:	f04f 38ff 	mov.w	r8, #4294967295
    f2e2:	f04f 39ff 	mov.w	r9, #4294967295
    f2e6:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f2e8:	7074      	strb	r4, [r6, #1]
    f2ea:	705c      	strb	r4, [r3, #1]
    f2ec:	709c      	strb	r4, [r3, #2]
    f2ee:	70dc      	strb	r4, [r3, #3]
    f2f0:	711c      	strb	r4, [r3, #4]
    f2f2:	715c      	strb	r4, [r3, #5]
    f2f4:	719c      	strb	r4, [r3, #6]
    f2f6:	71dc      	strb	r4, [r3, #7]
    f2f8:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f2fa:	7274      	strb	r4, [r6, #9]
    f2fc:	72b4      	strb	r4, [r6, #10]
    f2fe:	72f4      	strb	r4, [r6, #11]
    f300:	7334      	strb	r4, [r6, #12]
    f302:	7374      	strb	r4, [r6, #13]
    f304:	73b4      	strb	r4, [r6, #14]
    f306:	73f4      	strb	r4, [r6, #15]
    f308:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f30a:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f30c:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f30e:	74f4      	strb	r4, [r6, #19]
    f310:	7534      	strb	r4, [r6, #20]
    f312:	7574      	strb	r4, [r6, #21]
    f314:	75b4      	strb	r4, [r6, #22]
    f316:	75f4      	strb	r4, [r6, #23]
    f318:	7634      	strb	r4, [r6, #24]
    f31a:	7674      	strb	r4, [r6, #25]
    f31c:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f31e:	76f4      	strb	r4, [r6, #27]
    f320:	7734      	strb	r4, [r6, #28]
    f322:	7774      	strb	r4, [r6, #29]
    f324:	77b4      	strb	r4, [r6, #30]
    f326:	77f4      	strb	r4, [r6, #31]
    f328:	f886 4020 	strb.w	r4, [r6, #32]
    f32c:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f330:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f334:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f338:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f33c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f340:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f344:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f348:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f34c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f350:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f354:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f358:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f35c:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f360:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f364:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f368:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f36c:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f370:	2301      	movs	r3, #1
    f372:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f376:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f37a:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f37e:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f382:	62b4      	str	r4, [r6, #40]	; 0x28
    f384:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f388:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f38c:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f390:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f394:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f398:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f39c:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f3a0:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f3a4:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f3a8:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f3ac:	4620      	mov	r0, r4
    f3ae:	3428      	adds	r4, #40	; 0x28
    f3b0:	f000 fc8a 	bl	fcc8 <_ZN9ClearCore7CcioPinC1Ev>
    f3b4:	42ac      	cmp	r4, r5
    f3b6:	d1f9      	bne.n	f3ac <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f3b8:	4a04      	ldr	r2, [pc, #16]	; (f3cc <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f3ba:	2301      	movs	r3, #1
    f3bc:	6016      	str	r6, [r2, #0]
    f3be:	4630      	mov	r0, r6
    f3c0:	603b      	str	r3, [r7, #0]
}
    f3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3c6:	bf00      	nop
    f3c8:	20001f08 	.word	0x20001f08
    f3cc:	20001f10 	.word	0x20001f10

0000f3d0 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f3d0:	b570      	push	{r4, r5, r6, lr}
    f3d2:	4606      	mov	r6, r0
    f3d4:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f3d8:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f3da:	682b      	ldr	r3, [r5, #0]
    f3dc:	b221      	sxth	r1, r4
    f3de:	3401      	adds	r4, #1
    f3e0:	4628      	mov	r0, r5
    f3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f3e4:	b2a4      	uxth	r4, r4
    f3e6:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f3e8:	2c80      	cmp	r4, #128	; 0x80
    f3ea:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f3ee:	d1f4      	bne.n	f3da <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f3f0:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f3f4:	2b02      	cmp	r3, #2
    f3f6:	d00b      	beq.n	f410 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f3f8:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f3fc:	2b00      	cmp	r3, #0
    f3fe:	d13c      	bne.n	f47a <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f400:	4a20      	ldr	r2, [pc, #128]	; (f484 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f402:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f404:	6812      	ldr	r2, [r2, #0]
    f406:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f40a:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f40c:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f410:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f412:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f414:	2200      	movs	r2, #0
    f416:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f418:	f04f 34ff 	mov.w	r4, #4294967295
    f41c:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f420:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f424:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f428:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f42c:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f430:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f434:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f438:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f43c:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f440:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f444:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f448:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f44c:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f450:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f454:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f458:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f45c:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f460:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f464:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f468:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f46c:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f470:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f474:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f478:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f47a:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f47e:	2b00      	cmp	r3, #0
    f480:	d1be      	bne.n	f400 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f482:	e7c5      	b.n	f410 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f484:	20001bf0 	.word	0x20001bf0

0000f488 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f488:	3940      	subs	r1, #64	; 0x40
    f48a:	b28b      	uxth	r3, r1
    f48c:	2b3f      	cmp	r3, #63	; 0x3f
    f48e:	d80f      	bhi.n	f4b0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f490:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f492:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f494:	b2c9      	uxtb	r1, r1
    f496:	f1c1 0320 	rsb	r3, r1, #32
    f49a:	fa02 f303 	lsl.w	r3, r2, r3
    f49e:	40c8      	lsrs	r0, r1
    f4a0:	3920      	subs	r1, #32
    f4a2:	4318      	orrs	r0, r3
    f4a4:	fa22 f101 	lsr.w	r1, r2, r1
    f4a8:	4308      	orrs	r0, r1
}
    f4aa:	f000 0001 	and.w	r0, r0, #1
    f4ae:	4770      	bx	lr
    f4b0:	2000      	movs	r0, #0
    f4b2:	f000 0001 	and.w	r0, r0, #1
    f4b6:	4770      	bx	lr

0000f4b8 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f4b8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f4ba:	2900      	cmp	r1, #0
    f4bc:	f000 8084 	beq.w	f5c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f4c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d07f      	beq.n	f5c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f4c8:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f4cc:	2a00      	cmp	r2, #0
    f4ce:	d17b      	bne.n	f5c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f4d4:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f4d8:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f4dc:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f4de:	f000 80a3 	beq.w	f628 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f4e2:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f4e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f4ea:	2400      	movs	r4, #0
    f4ec:	2500      	movs	r5, #0
    f4ee:	4690      	mov	r8, r2
    f4f0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f4f4:	4696      	mov	lr, r2
    f4f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f4fa:	e9cd 4500 	strd	r4, r5, [sp]
    f4fe:	2201      	movs	r2, #1
    f500:	2300      	movs	r3, #0
    f502:	4626      	mov	r6, r4
    f504:	462f      	mov	r7, r5
    f506:	9106      	str	r1, [sp, #24]
    f508:	e037      	b.n	f57a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f50a:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f50e:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f512:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f516:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f51a:	f108 0501 	add.w	r5, r8, #1
    f51e:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f520:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f522:	ea46 0602 	orr.w	r6, r6, r2
    f526:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f52a:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f52e:	db06      	blt.n	f53e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f530:	b12c      	cbz	r4, f53e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f532:	e9dd 4500 	ldrd	r4, r5, [sp]
    f536:	4314      	orrs	r4, r2
    f538:	431d      	orrs	r5, r3
    f53a:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f53e:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f542:	ea04 0802 	and.w	r8, r4, r2
    f546:	ea05 0903 	and.w	r9, r5, r3
    f54a:	ea58 0109 	orrs.w	r1, r8, r9
    f54e:	d00b      	beq.n	f568 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f550:	ea24 0402 	bic.w	r4, r4, r2
    f554:	ea25 0503 	bic.w	r5, r5, r3
    f558:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f55c:	e9dd 4500 	ldrd	r4, r5, [sp]
    f560:	4314      	orrs	r4, r2
    f562:	431d      	orrs	r5, r3
    f564:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f568:	f10e 0e01 	add.w	lr, lr, #1
    f56c:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f570:	1892      	adds	r2, r2, r2
    f572:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f574:	45e6      	cmp	lr, ip
    f576:	46f0      	mov	r8, lr
    f578:	da27      	bge.n	f5ca <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f57a:	ea0a 0402 	and.w	r4, sl, r2
    f57e:	ea0b 0503 	and.w	r5, fp, r3
    f582:	ea54 0105 	orrs.w	r1, r4, r5
    f586:	d0ef      	beq.n	f568 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f588:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f58c:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f590:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f594:	3c01      	subs	r4, #1
    f596:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f59a:	2c00      	cmp	r4, #0
    f59c:	d1e4      	bne.n	f568 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f59e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f5a2:	4014      	ands	r4, r2
    f5a4:	401d      	ands	r5, r3
    f5a6:	432c      	orrs	r4, r5
    f5a8:	d1af      	bne.n	f50a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f5aa:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f5ae:	ea04 0802 	and.w	r8, r4, r2
    f5b2:	ea05 0903 	and.w	r9, r5, r3
    f5b6:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f5ba:	ea58 0409 	orrs.w	r4, r8, r9
    f5be:	f000 8115 	beq.w	f7ec <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f5c2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f5c6:	e7c3      	b.n	f550 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f5c8:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f5ca:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f5ce:	9906      	ldr	r1, [sp, #24]
    f5d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f5d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f5d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f5dc:	4642      	mov	r2, r8
    f5de:	464b      	mov	r3, r9
    f5e0:	4322      	orrs	r2, r4
    f5e2:	432b      	orrs	r3, r5
    f5e4:	4614      	mov	r4, r2
    f5e6:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f5e8:	4642      	mov	r2, r8
    f5ea:	464b      	mov	r3, r9
    f5ec:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f5f0:	43f6      	mvns	r6, r6
    f5f2:	43ff      	mvns	r7, r7
    f5f4:	ea48 0802 	orr.w	r8, r8, r2
    f5f8:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f5fc:	ea04 0206 	and.w	r2, r4, r6
    f600:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f604:	e9dd 4500 	ldrd	r4, r5, [sp]
    f608:	ea2a 0404 	bic.w	r4, sl, r4
    f60c:	ea2b 0505 	bic.w	r5, fp, r5
    f610:	46a2      	mov	sl, r4
    f612:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f614:	ea08 0406 	and.w	r4, r8, r6
    f618:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f61c:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f620:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f624:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f628:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f62c:	3d01      	subs	r5, #1
    f62e:	b2ed      	uxtb	r5, r5
    f630:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f634:	b115      	cbz	r5, f63c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f636:	b011      	add	sp, #68	; 0x44
    f638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f63c:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f63e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f642:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f646:	4608      	mov	r0, r1
    f648:	f001 fd9e 	bl	11188 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f64c:	4629      	mov	r1, r5
    f64e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f650:	f001 fc6e 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f654:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f658:	f10c 0309 	add.w	r3, ip, #9
    f65c:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f65e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f662:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f664:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f666:	2acc      	cmp	r2, #204	; 0xcc
    f668:	f000 814e 	beq.w	f908 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f66c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f670:	1c5a      	adds	r2, r3, #1
    f672:	b292      	uxth	r2, r2
    f674:	3b04      	subs	r3, #4
    f676:	4616      	mov	r6, r2
    f678:	920b      	str	r2, [sp, #44]	; 0x2c
    f67a:	b29b      	uxth	r3, r3
    f67c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f680:	4293      	cmp	r3, r2
    f682:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f686:	f240 81c6 	bls.w	fa16 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f68a:	2200      	movs	r2, #0
    f68c:	2300      	movs	r3, #0
    f68e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f692:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f696:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f69a:	ea22 0000 	bic.w	r0, r2, r0
    f69e:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f6a2:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f6a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f6aa:	4610      	mov	r0, r2
    f6ac:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f6ae:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f6b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f6b6:	f1bc 0f00 	cmp.w	ip, #0
    f6ba:	f000 81d3 	beq.w	fa64 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f6be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f6c2:	2200      	movs	r2, #0
    f6c4:	2000      	movs	r0, #0
    f6c6:	2100      	movs	r1, #0
    f6c8:	4613      	mov	r3, r2
    f6ca:	e9cd 0100 	strd	r0, r1, [sp]
    f6ce:	f04f 0801 	mov.w	r8, #1
    f6d2:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f6d6:	f04f 0a0c 	mov.w	sl, #12
    f6da:	e038      	b.n	f74e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f6dc:	0099      	lsls	r1, r3, #2
    f6de:	18c8      	adds	r0, r1, r3
    f6e0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f6e4:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f6e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    f6ec:	fa1f fb8b 	uxth.w	fp, fp
    f6f0:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f6f4:	f1bb 0f00 	cmp.w	fp, #0
    f6f8:	d107      	bne.n	f70a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f6fa:	ea26 0608 	bic.w	r6, r6, r8
    f6fe:	ea27 0709 	bic.w	r7, r7, r9
    f702:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f706:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f70a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f70e:	ea06 0608 	and.w	r6, r6, r8
    f712:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f716:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f718:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f71c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f720:	d04e      	beq.n	f7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f722:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f726:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f72a:	b93b      	cbnz	r3, f73c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f72c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f730:	ea40 0008 	orr.w	r0, r0, r8
    f734:	ea41 0109 	orr.w	r1, r1, r9
    f738:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f73c:	3201      	adds	r2, #1
    f73e:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f740:	eb18 0808 	adds.w	r8, r8, r8
    f744:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f748:	4596      	cmp	lr, r2
    f74a:	4613      	mov	r3, r2
    f74c:	dd59      	ble.n	f802 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f74e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f752:	4606      	mov	r6, r0
    f754:	460f      	mov	r7, r1
    f756:	ea00 0008 	and.w	r0, r0, r8
    f75a:	ea01 0109 	and.w	r1, r1, r9
    f75e:	4301      	orrs	r1, r0
    f760:	d1bc      	bne.n	f6dc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f766:	ea00 0008 	and.w	r0, r0, r8
    f76a:	ea01 0109 	and.w	r1, r1, r9
    f76e:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f770:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f774:	eb01 0003 	add.w	r0, r1, r3
    f778:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f77c:	d02b      	beq.n	f7d6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f77e:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f782:	f1bb 0f00 	cmp.w	fp, #0
    f786:	d0c0      	beq.n	f70a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f788:	f10b 3bff 	add.w	fp, fp, #4294967295
    f78c:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f790:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f794:	f1bb 0f00 	cmp.w	fp, #0
    f798:	d1b7      	bne.n	f70a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f79a:	ea46 0608 	orr.w	r6, r6, r8
    f79e:	ea47 0709 	orr.w	r7, r7, r9
    f7a2:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f7a6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f7aa:	ea46 0608 	orr.w	r6, r6, r8
    f7ae:	ea47 0709 	orr.w	r7, r7, r9
    f7b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f7b6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f7ba:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f7be:	e7a4      	b.n	f70a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f7c0:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f7c4:	2800      	cmp	r0, #0
    f7c6:	d0b9      	beq.n	f73c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f7c8:	3801      	subs	r0, #1
    f7ca:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f7cc:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f7d0:	2800      	cmp	r0, #0
    f7d2:	d0ab      	beq.n	f72c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f7d4:	e7b2      	b.n	f73c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f7d6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f7da:	ea26 0608 	bic.w	r6, r6, r8
    f7de:	ea27 0709 	bic.w	r7, r7, r9
    f7e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f7e6:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f7ea:	e78e      	b.n	f70a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f7ec:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f7f0:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f7f4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f7f8:	4314      	orrs	r4, r2
    f7fa:	431d      	orrs	r5, r3
    f7fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f800:	e6b2      	b.n	f568 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f802:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f806:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f80a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f80e:	ea80 000a 	eor.w	r0, r0, sl
    f812:	ea81 010b 	eor.w	r1, r1, fp
    f816:	4002      	ands	r2, r0
    f818:	400b      	ands	r3, r1
    f81a:	ea82 080a 	eor.w	r8, r2, sl
    f81e:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f822:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f826:	ea28 000a 	bic.w	r0, r8, sl
    f82a:	ea29 010b 	bic.w	r1, r9, fp
    f82e:	ea40 0602 	orr.w	r6, r0, r2
    f832:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f836:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f83a:	e9cd 8900 	strd	r8, r9, [sp]
    f83e:	ea2a 0808 	bic.w	r8, sl, r8
    f842:	ea2b 0909 	bic.w	r9, fp, r9
    f846:	ea43 0109 	orr.w	r1, r3, r9
    f84a:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f84e:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    f852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f854:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f858:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f85c:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    f860:	2b00      	cmp	r3, #0
    f862:	f000 8083 	beq.w	f96c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    f866:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f86a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    f86e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f872:	ea03 0907 	and.w	r9, r3, r7
    f876:	ea29 0101 	bic.w	r1, r9, r1
    f87a:	ea02 0806 	and.w	r8, r2, r6
    f87e:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f880:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f884:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f886:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f88a:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f88c:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f88e:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f892:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f896:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f89a:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f89c:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f89e:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f8a2:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f8a6:	fa01 f505 	lsl.w	r5, r1, r5
    f8aa:	fa20 f203 	lsr.w	r2, r0, r3
    f8ae:	432a      	orrs	r2, r5
    f8b0:	f1a3 0520 	sub.w	r5, r3, #32
    f8b4:	fa21 f505 	lsr.w	r5, r1, r5
    f8b8:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    f8ba:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f8be:	f8d4 500d 	ldr.w	r5, [r4, #13]
    f8c2:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    f8c6:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f8ca:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f8ce:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    f8d0:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f8d4:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    f8d6:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f8da:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f8dc:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f8e0:	2101      	movs	r1, #1
    f8e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8e4:	f001 fb24 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f8e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f8ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8ee:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f8f0:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f8f4:	2501      	movs	r5, #1
    f8f6:	321b      	adds	r2, #27
    f8f8:	4421      	add	r1, r4
    f8fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    f8fe:	b011      	add	sp, #68	; 0x44
    f900:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f904:	f001 bbee 	b.w	110e4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f908:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    f90c:	f8d4 701f 	ldr.w	r7, [r4, #31]
    f910:	f8d4 601b 	ldr.w	r6, [r4, #27]
    f914:	42bb      	cmp	r3, r7
    f916:	bf08      	it	eq
    f918:	42b2      	cmpeq	r2, r6
    f91a:	f47f aea7 	bne.w	f66c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f91e:	f8d4 2013 	ldr.w	r2, [r4, #19]
    f922:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    f926:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f92a:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    f92e:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f930:	ea6f 0903 	mvn.w	r9, r3
    f934:	ea6f 0802 	mvn.w	r8, r2
    f938:	f1c6 0720 	rsb	r7, r6, #32
    f93c:	fa28 f306 	lsr.w	r3, r8, r6
    f940:	fa09 f707 	lsl.w	r7, r9, r7
    f944:	f1a6 0220 	sub.w	r2, r6, #32
    f948:	fa29 f202 	lsr.w	r2, r9, r2
    f94c:	433b      	orrs	r3, r7
    f94e:	4313      	orrs	r3, r2
    f950:	9308      	str	r3, [sp, #32]
    f952:	fa29 f306 	lsr.w	r3, r9, r6
    f956:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    f958:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f95c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    f960:	4042      	eors	r2, r0
    f962:	404b      	eors	r3, r1
    f964:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f968:	950b      	str	r5, [sp, #44]	; 0x2c
    f96a:	e694      	b.n	f696 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f96c:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    f970:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    f974:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f978:	4016      	ands	r6, r2
    f97a:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    f97c:	ea40 0206 	orr.w	r2, r0, r6
    f980:	ea41 0307 	orr.w	r3, r1, r7
    f984:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    f988:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    f98c:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f98e:	46b0      	mov	r8, r6
    f990:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    f992:	bf08      	it	eq
    f994:	42b2      	cmpeq	r2, r6
    f996:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    f99a:	f43f af64 	beq.w	f866 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    f99e:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    f9a2:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    f9a6:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    f9aa:	d053      	beq.n	fa54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    f9ac:	f8df e0c8 	ldr.w	lr, [pc, #200]	; fa78 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    f9b0:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f9b4:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    f9b8:	433e      	orrs	r6, r7
    f9ba:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    f9be:	ea29 0701 	bic.w	r7, r9, r1
    f9c2:	ea28 0600 	bic.w	r6, r8, r0
    f9c6:	ea56 0307 	orrs.w	r3, r6, r7
    f9ca:	f43f af4c 	beq.w	f866 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    f9ce:	ea48 0200 	orr.w	r2, r8, r0
    f9d2:	ea49 0301 	orr.w	r3, r9, r1
    f9d6:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f9da:	f1bc 0f00 	cmp.w	ip, #0
    f9de:	f43f af42 	beq.w	f866 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    f9e2:	4e24      	ldr	r6, [pc, #144]	; (fa74 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f9e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f9e6:	2701      	movs	r7, #1
    f9e8:	e005      	b.n	f9f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f9ea:	3501      	adds	r5, #1
    f9ec:	b2ed      	uxtb	r5, r5
    f9ee:	4565      	cmp	r5, ip
    f9f0:	462a      	mov	r2, r5
    f9f2:	f6bf af38 	bge.w	f866 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    f9f6:	ab10      	add	r3, sp, #64	; 0x40
    f9f8:	442b      	add	r3, r5
    f9fa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    f9fe:	2b00      	cmp	r3, #0
    fa00:	d0f3      	beq.n	f9ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fa02:	fa07 f202 	lsl.w	r2, r7, r2
    fa06:	b2d2      	uxtb	r2, r2
    fa08:	2103      	movs	r1, #3
    fa0a:	6830      	ldr	r0, [r6, #0]
    fa0c:	f001 ff86 	bl	1191c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    fa10:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fa14:	e7e9      	b.n	f9ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    fa16:	2101      	movs	r1, #1
    fa18:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fa1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa1e:	f001 fa87 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    fa22:	4914      	ldr	r1, [pc, #80]	; (fa74 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    fa24:	2300      	movs	r3, #0
    fa26:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fa28:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    fa2a:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fa2e:	2102      	movs	r1, #2
    fa30:	2208      	movs	r2, #8
    fa32:	f001 ff73 	bl	1191c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa36:	4b10      	ldr	r3, [pc, #64]	; (fa78 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    fa38:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    fa3c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa40:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa44:	43d2      	mvns	r2, r2
    fa46:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa48:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa4a:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa4e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    fa52:	e5f0      	b.n	f636 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    fa54:	4a08      	ldr	r2, [pc, #32]	; (fa78 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa56:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    fa5a:	ea23 0307 	bic.w	r3, r3, r7
    fa5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    fa62:	e700      	b.n	f866 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fa64:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    fa68:	2200      	movs	r2, #0
    fa6a:	2300      	movs	r3, #0
    fa6c:	e9cd 2300 	strd	r2, r3, [sp]
    fa70:	e6c9      	b.n	f806 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    fa72:	bf00      	nop
    fa74:	20001f28 	.word	0x20001f28
    fa78:	200019e0 	.word	0x200019e0

0000fa7c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fa7c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fa7e:	b1c1      	cbz	r1, fab2 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fa80:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fa84:	b1aa      	cbz	r2, fab2 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fa86:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    fa8a:	b192      	cbz	r2, fab2 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fa8c:	4a09      	ldr	r2, [pc, #36]	; (fab4 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    fa8e:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fa90:	6812      	ldr	r2, [r2, #0]
    fa92:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fa96:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fa9a:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fa9c:	42a2      	cmp	r2, r4
    fa9e:	d907      	bls.n	fab0 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    faa0:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    faa2:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    faa6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    faaa:	bc30      	pop	{r4, r5}
    faac:	f7ff b9c0 	b.w	ee30 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    fab0:	bc30      	pop	{r4, r5}
    fab2:	4770      	bx	lr
    fab4:	20001bf0 	.word	0x20001bf0

0000fab8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    fab8:	4a0e      	ldr	r2, [pc, #56]	; (faf4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    faba:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    fabc:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    fac0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fac4:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    fac8:	43f3      	mvns	r3, r6
    faca:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    facc:	2700      	movs	r7, #0
    face:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    fad2:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fad6:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fada:	bf15      	itete	ne
    fadc:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fae0:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fae4:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fae6:	400b      	andeq	r3, r1
    fae8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    faec:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    faee:	f7ff bc6f 	b.w	f3d0 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    faf2:	bf00      	nop
    faf4:	200019e0 	.word	0x200019e0

0000faf8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    faf8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    fafc:	2b02      	cmp	r3, #2
    fafe:	d005      	beq.n	fb0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    fb00:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    fb04:	b12b      	cbz	r3, fb12 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    fb06:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    fb0a:	b913      	cbnz	r3, fb12 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    fb0c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    fb10:	4770      	bx	lr
    m_serPort = comInstance;
    fb12:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    fb14:	b109      	cbz	r1, fb1a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    fb16:	f7ff b98b 	b.w	ee30 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    fb1a:	4b04      	ldr	r3, [pc, #16]	; (fb2c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fb1c:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    fb20:	681b      	ldr	r3, [r3, #0]
    fb22:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    fb26:	4608      	mov	r0, r1
    fb28:	4770      	bx	lr
    fb2a:	bf00      	nop
    fb2c:	20001bf0 	.word	0x20001bf0

0000fb30 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    fb30:	3940      	subs	r1, #64	; 0x40
    fb32:	b28b      	uxth	r3, r1
    fb34:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    fb36:	bf9d      	ittte	ls
    fb38:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fb3c:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fb40:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fb42:	2000      	movhi	r0, #0
    }
}
    fb44:	4770      	bx	lr
    fb46:	bf00      	nop

0000fb48 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    fb48:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    fb4a:	f7ff fbb5 	bl	f2b8 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    fb4e:	4b01      	ldr	r3, [pc, #4]	; (fb54 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    fb50:	6018      	str	r0, [r3, #0]
    fb52:	bd08      	pop	{r3, pc}
    fb54:	20001f0c 	.word	0x20001f0c

0000fb58 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    fb58:	7980      	ldrb	r0, [r0, #6]
    fb5a:	4770      	bx	lr

0000fb5c <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    fb5c:	2009      	movs	r0, #9
    fb5e:	4770      	bx	lr

0000fb60 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    fb60:	7980      	ldrb	r0, [r0, #6]
    }
    fb62:	f1a0 0004 	sub.w	r0, r0, #4
    fb66:	fab0 f080 	clz	r0, r0
    fb6a:	0940      	lsrs	r0, r0, #5
    fb6c:	4770      	bx	lr
    fb6e:	bf00      	nop

0000fb70 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    fb70:	4770      	bx	lr
    fb72:	bf00      	nop

0000fb74 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    fb74:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fb76:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    fb7a:	2201      	movs	r2, #1
    fb7c:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    fb80:	f1c5 0420 	rsb	r4, r5, #32
    fb84:	fa22 f404 	lsr.w	r4, r2, r4
    fb88:	fa02 f303 	lsl.w	r3, r2, r3
    fb8c:	4323      	orrs	r3, r4
    fb8e:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fb90:	2602      	movs	r6, #2
    m_filterLength = 3;
    fb92:	4d07      	ldr	r5, [pc, #28]	; (fbb0 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    fb94:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    fb96:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fb98:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fb9a:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fb9c:	6105      	str	r5, [r0, #16]
    fb9e:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fba0:	6082      	str	r2, [r0, #8]
    fba2:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    fba4:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    fba6:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    fba8:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    fbaa:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    fbac:	bc70      	pop	{r4, r5, r6}
    fbae:	4770      	bx	lr
    fbb0:	00010003 	.word	0x00010003

0000fbb4 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fbb4:	7983      	ldrb	r3, [r0, #6]
    fbb6:	428b      	cmp	r3, r1
    fbb8:	d02f      	beq.n	fc1a <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    fbba:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fbbc:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fbc0:	d014      	beq.n	fbec <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fbc2:	2904      	cmp	r1, #4
    fbc4:	d10b      	bne.n	fbde <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fbc6:	4b16      	ldr	r3, [pc, #88]	; (fc20 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fbc8:	681e      	ldr	r6, [r3, #0]
    fbca:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fbce:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fbd2:	432b      	orrs	r3, r5
    fbd4:	4322      	orrs	r2, r4
    fbd6:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fbda:	460b      	mov	r3, r1
            m_mode = newMode;
    fbdc:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fbde:	1ac8      	subs	r0, r1, r3
    fbe0:	fab0 f080 	clz	r0, r0
    fbe4:	0940      	lsrs	r0, r0, #5
}
    fbe6:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    fbea:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    fbec:	4b0c      	ldr	r3, [pc, #48]	; (fc20 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fbee:	681e      	ldr	r6, [r3, #0]
    fbf0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fbf4:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fbf8:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fbfc:	43d2      	mvns	r2, r2
    fbfe:	43db      	mvns	r3, r3
    fc00:	4014      	ands	r4, r2
    fc02:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fc04:	ea02 0208 	and.w	r2, r2, r8
    fc08:	ea03 0309 	and.w	r3, r3, r9
    fc0c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fc10:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fc14:	460b      	mov	r3, r1
            m_mode = newMode;
    fc16:	7181      	strb	r1, [r0, #6]
            break;
    fc18:	e7e1      	b.n	fbde <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fc1a:	2001      	movs	r0, #1
    fc1c:	4770      	bx	lr
    fc1e:	bf00      	nop
    fc20:	20001f0c 	.word	0x20001f0c

0000fc24 <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fc24:	7983      	ldrb	r3, [r0, #6]
    fc26:	2b02      	cmp	r3, #2
    fc28:	d010      	beq.n	fc4c <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fc2a:	2b04      	cmp	r3, #4
    fc2c:	d10c      	bne.n	fc48 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fc2e:	4b0b      	ldr	r3, [pc, #44]	; (fc5c <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fc30:	681b      	ldr	r3, [r3, #0]
    fc32:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fc36:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fc3a:	4002      	ands	r2, r0
    fc3c:	400b      	ands	r3, r1
    fc3e:	4313      	orrs	r3, r2
    fc40:	bf14      	ite	ne
    fc42:	2001      	movne	r0, #1
    fc44:	2000      	moveq	r0, #0
            break;
    fc46:	4770      	bx	lr
    switch (m_mode) {
    fc48:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fc4a:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fc4c:	4b03      	ldr	r3, [pc, #12]	; (fc5c <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fc4e:	681b      	ldr	r3, [r3, #0]
    fc50:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fc54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    fc58:	e7ef      	b.n	fc3a <_ZN9ClearCore7CcioPin5StateEv+0x16>
    fc5a:	bf00      	nop
    fc5c:	20001f0c 	.word	0x20001f0c

0000fc60 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    fc60:	4b06      	ldr	r3, [pc, #24]	; (fc7c <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    fc62:	681b      	ldr	r3, [r3, #0]
    fc64:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fc68:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fc6c:	4002      	ands	r2, r0
    fc6e:	400b      	ands	r3, r1
    fc70:	4313      	orrs	r3, r2
}
    fc72:	bf14      	ite	ne
    fc74:	2001      	movne	r0, #1
    fc76:	2000      	moveq	r0, #0
    fc78:	4770      	bx	lr
    fc7a:	bf00      	nop
    fc7c:	20001f0c 	.word	0x20001f0c

0000fc80 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fc80:	7983      	ldrb	r3, [r0, #6]
    fc82:	2b04      	cmp	r3, #4
    fc84:	d11c      	bne.n	fcc0 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    fc86:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    fc88:	4b0e      	ldr	r3, [pc, #56]	; (fcc4 <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    fc8a:	b969      	cbnz	r1, fca8 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fc8c:	6819      	ldr	r1, [r3, #0]
    fc8e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fc92:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    fc96:	ea24 0202 	bic.w	r2, r4, r2
    fc9a:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fc9e:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fca0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fca4:	bc30      	pop	{r4, r5}
    fca6:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    fca8:	6819      	ldr	r1, [r3, #0]
    fcaa:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fcae:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    fcb2:	4322      	orrs	r2, r4
    fcb4:	432b      	orrs	r3, r5
    fcb6:	2001      	movs	r0, #1
    fcb8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fcbc:	bc30      	pop	{r4, r5}
    fcbe:	4770      	bx	lr
    bool success = false;
    fcc0:	2000      	movs	r0, #0
    fcc2:	4770      	bx	lr
    fcc4:	20001f0c 	.word	0x20001f0c

0000fcc8 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    fcc8:	b5d0      	push	{r4, r6, r7, lr}
    fcca:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    fccc:	f7fe fca6 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
    fcd0:	4b08      	ldr	r3, [pc, #32]	; (fcf4 <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    fcd2:	4909      	ldr	r1, [pc, #36]	; (fcf8 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    fcd4:	6023      	str	r3, [r4, #0]
    fcd6:	2600      	movs	r6, #0
    fcd8:	2300      	movs	r3, #0
    fcda:	2700      	movs	r7, #0
    fcdc:	220c      	movs	r2, #12
    fcde:	e9c4 6702 	strd	r6, r7, [r4, #8]
    fce2:	6121      	str	r1, [r4, #16]
    fce4:	6162      	str	r2, [r4, #20]
    fce6:	61a3      	str	r3, [r4, #24]
    fce8:	61e3      	str	r3, [r4, #28]
    fcea:	6223      	str	r3, [r4, #32]
    fcec:	6263      	str	r3, [r4, #36]	; 0x24
    fcee:	4620      	mov	r0, r4
    fcf0:	bdd0      	pop	{r4, r6, r7, pc}
    fcf2:	bf00      	nop
    fcf4:	00023628 	.word	0x00023628
    fcf8:	00010003 	.word	0x00010003

0000fcfc <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    fcfe:	4e14      	ldr	r6, [pc, #80]	; (fd50 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    fd00:	6834      	ldr	r4, [r6, #0]
    fd02:	f014 0401 	ands.w	r4, r4, #1
    fd06:	d002      	beq.n	fd0e <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    fd08:	4b12      	ldr	r3, [pc, #72]	; (fd54 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    fd0a:	6818      	ldr	r0, [r3, #0]
    fd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd0e:	2080      	movs	r0, #128	; 0x80
    fd10:	f003 fbea 	bl	134e8 <_Znwj>
    fd14:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    fd16:	2701      	movs	r7, #1
    fd18:	2240      	movs	r2, #64	; 0x40
    fd1a:	602c      	str	r4, [r5, #0]
    fd1c:	606c      	str	r4, [r5, #4]
    fd1e:	60ac      	str	r4, [r5, #8]
    fd20:	60ec      	str	r4, [r5, #12]
    fd22:	612c      	str	r4, [r5, #16]
    fd24:	616c      	str	r4, [r5, #20]
    fd26:	4621      	mov	r1, r4
    fd28:	61ac      	str	r4, [r5, #24]
    fd2a:	61ec      	str	r4, [r5, #28]
    fd2c:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fd2e:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    fd30:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fd32:	62ec      	str	r4, [r5, #44]	; 0x2c
    fd34:	632c      	str	r4, [r5, #48]	; 0x30
    fd36:	636c      	str	r4, [r5, #52]	; 0x34
    fd38:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    fd3c:	303c      	adds	r0, #60	; 0x3c
    fd3e:	f00e fc75 	bl	1e62c <memset>
    static InputManager *instance = new InputManager();
    fd42:	4b04      	ldr	r3, [pc, #16]	; (fd54 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    fd44:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    fd48:	6037      	str	r7, [r6, #0]
    fd4a:	601d      	str	r5, [r3, #0]
    fd4c:	4628      	mov	r0, r5
}
    fd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd50:	20001f14 	.word	0x20001f14
    fd54:	20001f1c 	.word	0x20001f1c

0000fd58 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    fd58:	4902      	ldr	r1, [pc, #8]	; (fd64 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    fd5a:	4a03      	ldr	r2, [pc, #12]	; (fd68 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    fd5c:	4b03      	ldr	r3, [pc, #12]	; (fd6c <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    fd5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    fd62:	4770      	bx	lr
    fd64:	41008020 	.word	0x41008020
    fd68:	410080a0 	.word	0x410080a0
    fd6c:	41008120 	.word	0x41008120

0000fd70 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    fd70:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    fd72:	b2cc      	uxtb	r4, r1
    fd74:	2c0f      	cmp	r4, #15
    fd76:	d82e      	bhi.n	fdd6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    fd78:	b1b2      	cbz	r2, fda8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    fd7a:	bb6b      	cbnz	r3, fdd8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    fd7c:	2301      	movs	r3, #1
    fd7e:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    fd82:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fd86:	f3bf 8f5b 	dmb	ish
    fd8a:	e853 2f00 	ldrex	r2, [r3]
    fd8e:	430a      	orrs	r2, r1
    fd90:	e843 2400 	strex	r4, r2, [r3]
    fd94:	2c00      	cmp	r4, #0
    fd96:	d1f8      	bne.n	fd8a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    fd98:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fd9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fda0:	b1cb      	cbz	r3, fdd6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    fda2:	4b10      	ldr	r3, [pc, #64]	; (fde4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fda4:	6119      	str	r1, [r3, #16]
    fda6:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    fda8:	2301      	movs	r3, #1
    fdaa:	fa03 f101 	lsl.w	r1, r3, r1
    fdae:	43ca      	mvns	r2, r1
    fdb0:	f100 0334 	add.w	r3, r0, #52	; 0x34
    fdb4:	f3bf 8f5b 	dmb	ish
    fdb8:	e853 4f00 	ldrex	r4, [r3]
    fdbc:	4014      	ands	r4, r2
    fdbe:	e843 4e00 	strex	lr, r4, [r3]
    fdc2:	f1be 0f00 	cmp.w	lr, #0
    fdc6:	d1f7      	bne.n	fdb8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    fdc8:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    fdcc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    fdd0:	b10b      	cbz	r3, fdd6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    fdd2:	4b04      	ldr	r3, [pc, #16]	; (fde4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fdd4:	60d9      	str	r1, [r3, #12]
    fdd6:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    fdd8:	2201      	movs	r2, #1
    fdda:	4b02      	ldr	r3, [pc, #8]	; (fde4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    fddc:	fa02 f101 	lsl.w	r1, r2, r1
    fde0:	6159      	str	r1, [r3, #20]
    fde2:	e7ce      	b.n	fd82 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    fde4:	40002800 	.word	0x40002800

0000fde8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    fde8:	290f      	cmp	r1, #15
    fdea:	dc14      	bgt.n	fe16 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    fdec:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    fdf0:	40cb      	lsrs	r3, r1
    fdf2:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fdf6:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    fdfa:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fdfc:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    fe00:	d10a      	bne.n	fe18 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    fe02:	4a0f      	ldr	r2, [pc, #60]	; (fe40 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fe04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    fe08:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    fe0a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    fe0c:	b113      	cbz	r3, fe14 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    fe0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    fe12:	4718      	bx	r3
    fe14:	bd10      	pop	{r4, pc}
    fe16:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    fe18:	43dc      	mvns	r4, r3
    fe1a:	f100 0234 	add.w	r2, r0, #52	; 0x34
    fe1e:	f3bf 8f5b 	dmb	ish
    fe22:	e852 ef00 	ldrex	lr, [r2]
    fe26:	ea0e 0e04 	and.w	lr, lr, r4
    fe2a:	e842 ec00 	strex	ip, lr, [r2]
    fe2e:	f1bc 0f00 	cmp.w	ip, #0
    fe32:	d1f6      	bne.n	fe22 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    fe34:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    fe38:	4a01      	ldr	r2, [pc, #4]	; (fe40 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    fe3a:	60d3      	str	r3, [r2, #12]
    fe3c:	e7e1      	b.n	fe02 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    fe3e:	bf00      	nop
    fe40:	40002800 	.word	0x40002800

0000fe44 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fe44:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fe46:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fe48:	681b      	ldr	r3, [r3, #0]
    fe4a:	60c3      	str	r3, [r0, #12]
    fe4c:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fe4e:	404b      	eors	r3, r1
    fe50:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fe52:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fe54:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fe56:	6881      	ldr	r1, [r0, #8]
    fe58:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fe5a:	4053      	eors	r3, r2
    fe5c:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fe5e:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fe60:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fe62:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    fe64:	4053      	eors	r3, r2
    fe66:	6203      	str	r3, [r0, #32]
    fe68:	4770      	bx	lr
    fe6a:	bf00      	nop

0000fe6c <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    fe6c:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    fe6e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fe70:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fe72:	f3bf 8f5b 	dmb	ish
    fe76:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    fe7a:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    fe7e:	e852 1f00 	ldrex	r1, [r2]
    fe82:	4319      	orrs	r1, r3
    fe84:	e842 1e00 	strex	lr, r1, [r2]
    fe88:	f1be 0f00 	cmp.w	lr, #0
    fe8c:	d1f7      	bne.n	fe7e <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    fe8e:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    fe92:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fe94:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fe96:	f3bf 8f5b 	dmb	ish
    fe9a:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    fe9e:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    fea2:	e852 1f00 	ldrex	r1, [r2]
    fea6:	4319      	orrs	r1, r3
    fea8:	e842 1e00 	strex	lr, r1, [r2]
    feac:	f1be 0f00 	cmp.w	lr, #0
    feb0:	d1f7      	bne.n	fea2 <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    feb2:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    feb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    feb8:	6283      	str	r3, [r0, #40]	; 0x28
    feba:	f85d fb04 	ldr.w	pc, [sp], #4
    febe:	bf00      	nop

0000fec0 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    fec0:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    fec2:	f7ff ff1b 	bl	fcfc <_ZN9ClearCore12InputManager8InstanceEv>
    fec6:	4b01      	ldr	r3, [pc, #4]	; (fecc <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    fec8:	6018      	str	r0, [r3, #0]
    feca:	bd08      	pop	{r3, pc}
    fecc:	20001f18 	.word	0x20001f18

0000fed0 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fed0:	b530      	push	{r4, r5, lr}
    fed2:	b083      	sub	sp, #12
    fed4:	9d06      	ldr	r5, [sp, #24]
    fed6:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
    feda:	9500      	str	r5, [sp, #0]
    fedc:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fede:	4604      	mov	r4, r0
      m_errorCode(0) {
    fee0:	2500      	movs	r5, #0
    fee2:	f000 ffbb 	bl	10e5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
    fee6:	4b09      	ldr	r3, [pc, #36]	; (ff0c <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
    fee8:	6023      	str	r3, [r4, #0]
    feea:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
    feee:	4620      	mov	r0, r4
    fef0:	2101      	movs	r1, #1
    fef2:	f001 f811 	bl	10f18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
    fef6:	462a      	mov	r2, r5
    fef8:	4629      	mov	r1, r5
    fefa:	4620      	mov	r0, r4
    fefc:	f001 f852 	bl	10fa4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
    ff00:	4620      	mov	r0, r4
    ff02:	f000 ff9f 	bl	10e44 <_ZN9ClearCore10SerialBase8PortOpenEv>
}
    ff06:	4620      	mov	r0, r4
    ff08:	b003      	add	sp, #12
    ff0a:	bd30      	pop	{r4, r5, pc}
    ff0c:	00022f6c 	.word	0x00022f6c

0000ff10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
    ff10:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    ff14:	4770      	bx	lr
    ff16:	bf00      	nop

0000ff18 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
    ff18:	2300      	movs	r3, #0
    m_outTail = 0;
    ff1a:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
    ff1e:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
    ff22:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    ff26:	4770      	bx	lr

0000ff28 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff28:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
    ff2a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff2c:	2104      	movs	r1, #4
    m_inTail = 0;
    ff2e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
    ff32:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
    ff34:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff38:	7591      	strb	r1, [r2, #22]
    ff3a:	4770      	bx	lr

0000ff3c <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
    ff3c:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    ff40:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    ff44:	4291      	cmp	r1, r2
    ff46:	d012      	beq.n	ff6e <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
    ff48:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
    ff4a:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
    ff4e:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff52:	6904      	ldr	r4, [r0, #16]
    ff54:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
    ff56:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
    ff58:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff5a:	2504      	movs	r5, #4
    ff5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
    ff60:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
    ff64:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    ff68:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
    ff6a:	bc30      	pop	{r4, r5}
    ff6c:	4770      	bx	lr
        return SerialBase::EOB;
    ff6e:	f04f 30ff 	mov.w	r0, #4294967295
    ff72:	4770      	bx	lr

0000ff74 <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
    ff74:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    ff78:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    ff7c:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
    ff7e:	bf1d      	ittte	ne
    ff80:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
    ff84:	3318      	addne	r3, #24
    ff86:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
    ff8a:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
    ff8e:	4770      	bx	lr

0000ff90 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
    ff90:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    ff94:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
    ff98:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
    ff9a:	bf48      	it	mi
    ff9c:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
    ff9e:	4770      	bx	lr

0000ffa0 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
    ffa0:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    ffa4:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    ffa8:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
    ffaa:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
    ffac:	bf48      	it	mi
    ffae:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
    ffb0:	4770      	bx	lr
    ffb2:	bf00      	nop

0000ffb4 <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
    ffb4:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
    ffb6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    ffba:	b1b8      	cbz	r0, ffec <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
    ffbc:	79d3      	ldrb	r3, [r2, #7]
    ffbe:	2b01      	cmp	r3, #1
    ffc0:	d015      	beq.n	ffee <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
    ffc2:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
    ffc4:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    ffc8:	3401      	adds	r4, #1
    ffca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
    ffce:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    ffd2:	429c      	cmp	r4, r3
    ffd4:	d0fb      	beq.n	ffce <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
    ffd6:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ffda:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
    ffdc:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ffde:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
    ffe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
    ffe4:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ffe8:	75ae      	strb	r6, [r5, #22]
}
    ffea:	bc70      	pop	{r4, r5, r6}
    ffec:	4770      	bx	lr
        return false;
    ffee:	2000      	movs	r0, #0
    fff0:	4770      	bx	lr
    fff2:	bf00      	nop

0000fff4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
    fff4:	79c3      	ldrb	r3, [r0, #7]
    fff6:	b113      	cbz	r3, fffe <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
    fff8:	2b01      	cmp	r3, #1
    fffa:	d00e      	beq.n	1001a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
    fffc:	4770      	bx	lr
        while (m_outHead != m_outTail) {
    fffe:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10002:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10006:	429a      	cmp	r2, r3
   10008:	d1f9      	bne.n	fffe <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   1000a:	6902      	ldr	r2, [r0, #16]
   1000c:	7e13      	ldrb	r3, [r2, #24]
   1000e:	07d8      	lsls	r0, r3, #31
   10010:	d4f4      	bmi.n	fffc <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10012:	7e13      	ldrb	r3, [r2, #24]
   10014:	0799      	lsls	r1, r3, #30
   10016:	d5fc      	bpl.n	10012 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   10018:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1001a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   1001e:	2b07      	cmp	r3, #7
   10020:	d0ec      	beq.n	fffc <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   10022:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   10026:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   10028:	b510      	push	{r4, lr}
   1002a:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1002c:	d005      	beq.n	1003a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   1002e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10032:	b113      	cbz	r3, 1003a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   10034:	79e3      	ldrb	r3, [r4, #7]
   10036:	2b01      	cmp	r3, #1
   10038:	d000      	beq.n	1003c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   1003a:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   1003c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10040:	f7fe feda 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10044:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10046:	079b      	lsls	r3, r3, #30
   10048:	d4f1      	bmi.n	1002e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   1004a:	e7f6      	b.n	1003a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

0001004c <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   1004c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10050:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   10052:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10054:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10056:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10058:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1005c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1005e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10062:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10066:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1006a:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1006c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10070:	f36f 0100 	bfc	r1, #0, #1
   10074:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10078:	6813      	ldr	r3, [r2, #0]
   1007a:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   1007c:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1007e:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10082:	d503      	bpl.n	1008c <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10084:	6813      	ldr	r3, [r2, #0]
   10086:	f36f 0341 	bfc	r3, #1, #1
   1008a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1008c:	69d3      	ldr	r3, [r2, #28]
   1008e:	f013 0302 	ands.w	r3, r3, #2
   10092:	d1fb      	bne.n	1008c <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   10094:	6822      	ldr	r2, [r4, #0]
   10096:	483a      	ldr	r0, [pc, #232]	; (10180 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   10098:	6811      	ldr	r1, [r2, #0]
   1009a:	4281      	cmp	r1, r0
   1009c:	d165      	bne.n	1016a <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   1009e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   100a2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   100a6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   100aa:	6853      	ldr	r3, [r2, #4]
   100ac:	4a35      	ldr	r2, [pc, #212]	; (10184 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   100ae:	4293      	cmp	r3, r2
   100b0:	d162      	bne.n	10178 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100b2:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   100b4:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100b6:	2204      	movs	r2, #4
    m_inTail = 0;
   100b8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   100bc:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   100be:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100c2:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   100c4:	79e0      	ldrb	r0, [r4, #7]
   100c6:	2801      	cmp	r0, #1
   100c8:	d124      	bne.n	10114 <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   100ca:	4b2f      	ldr	r3, [pc, #188]	; (10188 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   100cc:	443b      	add	r3, r7
   100ce:	fbb3 f3f7 	udiv	r3, r3, r7
   100d2:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   100d4:	2bff      	cmp	r3, #255	; 0xff
   100d6:	bf92      	itee	ls
   100d8:	b2db      	uxtbls	r3, r3
   100da:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   100dc:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   100de:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   100e0:	b1b6      	cbz	r6, 10110 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   100e2:	682b      	ldr	r3, [r5, #0]
   100e4:	f043 0302 	orr.w	r3, r3, #2
   100e8:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   100ea:	69eb      	ldr	r3, [r5, #28]
   100ec:	079b      	lsls	r3, r3, #30
   100ee:	d4fc      	bmi.n	100ea <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100f0:	6a22      	ldr	r2, [r4, #32]
   100f2:	f992 1001 	ldrsb.w	r1, [r2, #1]
   100f6:	7893      	ldrb	r3, [r2, #2]
   100f8:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   100fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10100:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10104:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10108:	f042 0201 	orr.w	r2, r2, #1
   1010c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10114:	4638      	mov	r0, r7
   10116:	f00b fd3f 	bl	1bb98 <__aeabi_ui2d>
   1011a:	2200      	movs	r2, #0
   1011c:	4b1b      	ldr	r3, [pc, #108]	; (1018c <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   1011e:	f00b fdb1 	bl	1bc84 <__aeabi_dmul>
   10122:	4b1b      	ldr	r3, [pc, #108]	; (10190 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   10124:	4680      	mov	r8, r0
   10126:	6818      	ldr	r0, [r3, #0]
   10128:	4689      	mov	r9, r1
   1012a:	f00b fd35 	bl	1bb98 <__aeabi_ui2d>
   1012e:	4602      	mov	r2, r0
   10130:	460b      	mov	r3, r1
   10132:	4640      	mov	r0, r8
   10134:	4649      	mov	r1, r9
   10136:	f00b fecf 	bl	1bed8 <__aeabi_ddiv>
   1013a:	4602      	mov	r2, r0
   1013c:	460b      	mov	r3, r1
   1013e:	2000      	movs	r0, #0
   10140:	4914      	ldr	r1, [pc, #80]	; (10194 <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   10142:	f00b fbeb 	bl	1b91c <__aeabi_dsub>
   10146:	2200      	movs	r2, #0
   10148:	4b13      	ldr	r3, [pc, #76]	; (10198 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   1014a:	f00b fd9b 	bl	1bc84 <__aeabi_dmul>
   1014e:	f00c f87b 	bl	1c248 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10152:	f00b fd43 	bl	1bbdc <__aeabi_f2d>
   10156:	2200      	movs	r2, #0
   10158:	4b10      	ldr	r3, [pc, #64]	; (1019c <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   1015a:	f00b fbe1 	bl	1b920 <__adddf3>
   1015e:	f00c f853 	bl	1c208 <__aeabi_d2uiz>
   10162:	b280      	uxth	r0, r0
   10164:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   10166:	2001      	movs	r0, #1
            break;
   10168:	e7ba      	b.n	100e0 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   1016a:	4620      	mov	r0, r4
   1016c:	4788      	blx	r1
   1016e:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   10170:	6853      	ldr	r3, [r2, #4]
   10172:	4a04      	ldr	r2, [pc, #16]	; (10184 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10174:	4293      	cmp	r3, r2
   10176:	d09c      	beq.n	100b2 <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   10178:	4620      	mov	r0, r4
   1017a:	4798      	blx	r3
   1017c:	6925      	ldr	r5, [r4, #16]
   1017e:	e7a1      	b.n	100c4 <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   10180:	0000ff19 	.word	0x0000ff19
   10184:	0000ff29 	.word	0x0000ff29
   10188:	004c4b3f 	.word	0x004c4b3f
   1018c:	40300000 	.word	0x40300000
   10190:	200000e8 	.word	0x200000e8
   10194:	3ff00000 	.word	0x3ff00000
   10198:	40f00000 	.word	0x40f00000
   1019c:	3fe00000 	.word	0x3fe00000

000101a0 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   101a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   101a4:	b903      	cbnz	r3, 101a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   101a6:	4770      	bx	lr
void SerialBase::PortClose() {
   101a8:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   101aa:	6805      	ldr	r5, [r0, #0]
   101ac:	4a3e      	ldr	r2, [pc, #248]	; (102a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   101ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   101b0:	4293      	cmp	r3, r2
   101b2:	4604      	mov	r4, r0
   101b4:	d157      	bne.n	10266 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   101b6:	79c3      	ldrb	r3, [r0, #7]
   101b8:	2b00      	cmp	r3, #0
   101ba:	d03f      	beq.n	1023c <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   101bc:	2b01      	cmp	r3, #1
   101be:	d056      	beq.n	1026e <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   101c0:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   101c2:	69a0      	ldr	r0, [r4, #24]
   101c4:	4939      	ldr	r1, [pc, #228]	; (102ac <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   101c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
   101ca:	7886      	ldrb	r6, [r0, #2]
   101cc:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   101d0:	2001      	movs	r0, #1
   101d2:	40b0      	lsls	r0, r6
   101d4:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101d6:	6a20      	ldr	r0, [r4, #32]
   101d8:	f990 3001 	ldrsb.w	r3, [r0, #1]
   101dc:	7880      	ldrb	r0, [r0, #2]
   101de:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   101e2:	4403      	add	r3, r0
   101e4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   101e8:	f36f 0100 	bfc	r1, #0, #1
   101ec:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   101f0:	6813      	ldr	r3, [r2, #0]
   101f2:	079b      	lsls	r3, r3, #30
   101f4:	d503      	bpl.n	101fe <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   101f6:	6813      	ldr	r3, [r2, #0]
   101f8:	f36f 0341 	bfc	r3, #1, #1
   101fc:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   101fe:	69d3      	ldr	r3, [r2, #28]
   10200:	f013 0302 	ands.w	r3, r3, #2
   10204:	d1fb      	bne.n	101fe <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   10206:	682a      	ldr	r2, [r5, #0]
   10208:	4929      	ldr	r1, [pc, #164]	; (102b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   1020a:	428a      	cmp	r2, r1
   1020c:	d124      	bne.n	10258 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   1020e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10212:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10216:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1021a:	686b      	ldr	r3, [r5, #4]
   1021c:	4a25      	ldr	r2, [pc, #148]	; (102b4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   1021e:	4293      	cmp	r3, r2
   10220:	d11e      	bne.n	10260 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10222:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10224:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10226:	2104      	movs	r1, #4
    m_inTail = 0;
   10228:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1022c:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1022e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10232:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   10234:	2300      	movs	r3, #0
   10236:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1023a:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   1023c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10240:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10244:	429a      	cmp	r2, r3
   10246:	d1f9      	bne.n	1023c <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10248:	6922      	ldr	r2, [r4, #16]
   1024a:	7e13      	ldrb	r3, [r2, #24]
   1024c:	07d8      	lsls	r0, r3, #31
   1024e:	d4b8      	bmi.n	101c2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10250:	7e13      	ldrb	r3, [r2, #24]
   10252:	0799      	lsls	r1, r3, #30
   10254:	d5fc      	bpl.n	10250 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   10256:	e7b4      	b.n	101c2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   10258:	4620      	mov	r0, r4
   1025a:	4790      	blx	r2
   1025c:	6825      	ldr	r5, [r4, #0]
   1025e:	e7dc      	b.n	1021a <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   10260:	4620      	mov	r0, r4
   10262:	4798      	blx	r3
   10264:	e7e6      	b.n	10234 <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   10266:	4798      	blx	r3
   10268:	6922      	ldr	r2, [r4, #16]
   1026a:	6825      	ldr	r5, [r4, #0]
   1026c:	e7a9      	b.n	101c2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1026e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10272:	2807      	cmp	r0, #7
   10274:	d0a4      	beq.n	101c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   10276:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1027a:	2b07      	cmp	r3, #7
   1027c:	d0a0      	beq.n	101c0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   1027e:	f7fe fdbb 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10282:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10284:	079a      	lsls	r2, r3, #30
   10286:	d5ef      	bpl.n	10268 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10288:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1028c:	2b00      	cmp	r3, #0
   1028e:	d0eb      	beq.n	10268 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10290:	79e3      	ldrb	r3, [r4, #7]
   10292:	2b01      	cmp	r3, #1
   10294:	d1e8      	bne.n	10268 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10296:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   1029a:	f7fe fdad 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1029e:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   102a0:	079a      	lsls	r2, r3, #30
   102a2:	d4f1      	bmi.n	10288 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   102a4:	e7e0      	b.n	10268 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   102a6:	bf00      	nop
   102a8:	0000fff5 	.word	0x0000fff5
   102ac:	41008000 	.word	0x41008000
   102b0:	0000ff19 	.word	0x0000ff19
   102b4:	0000ff29 	.word	0x0000ff29

000102b8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   102b8:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   102ba:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   102bc:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   102be:	2b01      	cmp	r3, #1
   102c0:	d101      	bne.n	102c6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   102c2:	2000      	movs	r0, #0
   102c4:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102c6:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102c8:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102ca:	f991 4001 	ldrsb.w	r4, [r1, #1]
   102ce:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102d0:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102d2:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   102d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102de:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102e2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   102e6:	f36f 0100 	bfc	r1, #0, #1
   102ea:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102ee:	6813      	ldr	r3, [r2, #0]
   102f0:	0799      	lsls	r1, r3, #30
   102f2:	d503      	bpl.n	102fc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   102f4:	6813      	ldr	r3, [r2, #0]
   102f6:	f36f 0341 	bfc	r3, #1, #1
   102fa:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102fc:	69d3      	ldr	r3, [r2, #28]
   102fe:	f013 0302 	ands.w	r3, r3, #2
   10302:	d1fb      	bne.n	102fc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   10304:	6802      	ldr	r2, [r0, #0]
   10306:	4604      	mov	r4, r0
   10308:	6811      	ldr	r1, [r2, #0]
   1030a:	4825      	ldr	r0, [pc, #148]	; (103a0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   1030c:	4281      	cmp	r1, r0
   1030e:	d142      	bne.n	10396 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10310:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10314:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10318:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1031c:	6853      	ldr	r3, [r2, #4]
   1031e:	4a21      	ldr	r2, [pc, #132]	; (103a4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10320:	4293      	cmp	r3, r2
   10322:	d134      	bne.n	1038e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10324:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10326:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10328:	2104      	movs	r1, #4
    m_inTail = 0;
   1032a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1032e:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10330:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10334:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   10336:	7923      	ldrb	r3, [r4, #4]
   10338:	2b02      	cmp	r3, #2
   1033a:	d023      	beq.n	10384 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   1033c:	6811      	ldr	r1, [r2, #0]
   1033e:	2001      	movs	r0, #1
   10340:	f360 611b 	bfi	r1, r0, #24, #4
   10344:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   10346:	6851      	ldr	r1, [r2, #4]
   10348:	f363 314d 	bfi	r1, r3, #13, #1
   1034c:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   1034e:	b1bd      	cbz	r5, 10380 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10350:	6813      	ldr	r3, [r2, #0]
   10352:	f043 0302 	orr.w	r3, r3, #2
   10356:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10358:	69d3      	ldr	r3, [r2, #28]
   1035a:	079b      	lsls	r3, r3, #30
   1035c:	d4fc      	bmi.n	10358 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1035e:	6a22      	ldr	r2, [r4, #32]
   10360:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10364:	7893      	ldrb	r3, [r2, #2]
   10366:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1036a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1036e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10372:	2001      	movs	r0, #1
   10374:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10378:	4302      	orrs	r2, r0
   1037a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1037e:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10380:	2001      	movs	r0, #1
}
   10382:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   10384:	6813      	ldr	r3, [r2, #0]
   10386:	f36f 631b 	bfc	r3, #24, #4
   1038a:	6013      	str	r3, [r2, #0]
   1038c:	e7df      	b.n	1034e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   1038e:	4620      	mov	r0, r4
   10390:	4798      	blx	r3
   10392:	6922      	ldr	r2, [r4, #16]
   10394:	e7cf      	b.n	10336 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   10396:	4620      	mov	r0, r4
   10398:	4788      	blx	r1
   1039a:	6822      	ldr	r2, [r4, #0]
   1039c:	e7be      	b.n	1031c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   1039e:	bf00      	nop
   103a0:	0000ff19 	.word	0x0000ff19
   103a4:	0000ff29 	.word	0x0000ff29

000103a8 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   103aa:	1f4b      	subs	r3, r1, #5
   103ac:	2b04      	cmp	r3, #4
   103ae:	d85d      	bhi.n	1046c <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   103b0:	79c3      	ldrb	r3, [r0, #7]
   103b2:	2b01      	cmp	r3, #1
   103b4:	d056      	beq.n	10464 <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103b6:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   103b8:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103ba:	f992 4001 	ldrsb.w	r4, [r2, #1]
   103be:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103c0:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103c2:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   103c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   103ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103ce:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103d0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   103d4:	f36f 0400 	bfc	r4, #0, #1
   103d8:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   103dc:	6813      	ldr	r3, [r2, #0]
   103de:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103e0:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   103e4:	d503      	bpl.n	103ee <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   103e6:	6813      	ldr	r3, [r2, #0]
   103e8:	f36f 0341 	bfc	r3, #1, #1
   103ec:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   103ee:	69d3      	ldr	r3, [r2, #28]
   103f0:	f013 0302 	ands.w	r3, r3, #2
   103f4:	d1fb      	bne.n	103ee <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   103f6:	6802      	ldr	r2, [r0, #0]
   103f8:	460f      	mov	r7, r1
   103fa:	6816      	ldr	r6, [r2, #0]
   103fc:	4921      	ldr	r1, [pc, #132]	; (10484 <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   103fe:	428e      	cmp	r6, r1
   10400:	4604      	mov	r4, r0
   10402:	d13b      	bne.n	1047c <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   10404:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10408:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   1040c:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10410:	6853      	ldr	r3, [r2, #4]
   10412:	4a1d      	ldr	r2, [pc, #116]	; (10488 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   10414:	4293      	cmp	r3, r2
   10416:	d12d      	bne.n	10474 <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10418:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1041a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1041c:	2104      	movs	r1, #4
    m_inTail = 0;
   1041e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10422:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10424:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10428:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   1042a:	6853      	ldr	r3, [r2, #4]
   1042c:	f367 0302 	bfi	r3, r7, #0, #3
   10430:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10432:	b1ed      	cbz	r5, 10470 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10434:	6813      	ldr	r3, [r2, #0]
   10436:	f043 0302 	orr.w	r3, r3, #2
   1043a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1043c:	69d3      	ldr	r3, [r2, #28]
   1043e:	079b      	lsls	r3, r3, #30
   10440:	d4fc      	bmi.n	1043c <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10442:	6a22      	ldr	r2, [r4, #32]
   10444:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10448:	7893      	ldrb	r3, [r2, #2]
   1044a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1044e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10452:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10456:	2001      	movs	r0, #1
   10458:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1045c:	4302      	orrs	r2, r0
   1045e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10464:	f1a1 0308 	sub.w	r3, r1, #8
   10468:	2b01      	cmp	r3, #1
   1046a:	d9a4      	bls.n	103b6 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   1046c:	2000      	movs	r0, #0
   1046e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10470:	2001      	movs	r0, #1
}
   10472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   10474:	4620      	mov	r0, r4
   10476:	4798      	blx	r3
   10478:	6922      	ldr	r2, [r4, #16]
   1047a:	e7d6      	b.n	1042a <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   1047c:	47b0      	blx	r6
   1047e:	6822      	ldr	r2, [r4, #0]
   10480:	e7c6      	b.n	10410 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   10482:	bf00      	nop
   10484:	0000ff19 	.word	0x0000ff19
   10488:	0000ff29 	.word	0x0000ff29

0001048c <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   1048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   1048e:	1e4c      	subs	r4, r1, #1
   10490:	b2e4      	uxtb	r4, r4
   10492:	2c01      	cmp	r4, #1
   10494:	d901      	bls.n	1049a <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   10496:	2000      	movs	r0, #0
}
   10498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   1049a:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   1049c:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   1049e:	b10d      	cbz	r5, 104a4 <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   104a0:	2001      	movs	r0, #1
   104a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   104a4:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   104a6:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   104a8:	f991 7001 	ldrsb.w	r7, [r1, #1]
   104ac:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   104ae:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   104b0:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   104b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   104b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   104bc:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   104c0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   104c4:	f365 0100 	bfi	r1, r5, #0, #1
   104c8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   104cc:	6813      	ldr	r3, [r2, #0]
   104ce:	0799      	lsls	r1, r3, #30
   104d0:	d503      	bpl.n	104da <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   104d2:	6813      	ldr	r3, [r2, #0]
   104d4:	f365 0341 	bfi	r3, r5, #1, #1
   104d8:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   104da:	69d3      	ldr	r3, [r2, #28]
   104dc:	f013 0302 	ands.w	r3, r3, #2
   104e0:	d1fb      	bne.n	104da <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   104e2:	6802      	ldr	r2, [r0, #0]
   104e4:	4605      	mov	r5, r0
   104e6:	6811      	ldr	r1, [r2, #0]
   104e8:	481d      	ldr	r0, [pc, #116]	; (10560 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   104ea:	4281      	cmp	r1, r0
   104ec:	d130      	bne.n	10550 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   104ee:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   104f2:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   104f6:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   104fa:	6853      	ldr	r3, [r2, #4]
   104fc:	4a19      	ldr	r2, [pc, #100]	; (10564 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   104fe:	4293      	cmp	r3, r2
   10500:	d12a      	bne.n	10558 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10502:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   10504:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10506:	2104      	movs	r1, #4
    m_inTail = 0;
   10508:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   1050c:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   1050e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10512:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   10514:	6853      	ldr	r3, [r2, #4]
   10516:	f364 1386 	bfi	r3, r4, #6, #1
   1051a:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1051c:	2e00      	cmp	r6, #0
   1051e:	d0bf      	beq.n	104a0 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10520:	6813      	ldr	r3, [r2, #0]
   10522:	f043 0302 	orr.w	r3, r3, #2
   10526:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10528:	69d3      	ldr	r3, [r2, #28]
   1052a:	079b      	lsls	r3, r3, #30
   1052c:	d4fc      	bmi.n	10528 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1052e:	6a2a      	ldr	r2, [r5, #32]
   10530:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10534:	7893      	ldrb	r3, [r2, #2]
   10536:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1053a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1053e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   10542:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10544:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10548:	4302      	orrs	r2, r0
   1054a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10550:	4628      	mov	r0, r5
   10552:	4788      	blx	r1
   10554:	682a      	ldr	r2, [r5, #0]
   10556:	e7d0      	b.n	104fa <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10558:	4628      	mov	r0, r5
   1055a:	4798      	blx	r3
   1055c:	692a      	ldr	r2, [r5, #16]
   1055e:	e7d9      	b.n	10514 <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10560:	0000ff19 	.word	0x0000ff19
   10564:	0000ff29 	.word	0x0000ff29

00010568 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   1056c:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   1056e:	682b      	ldr	r3, [r5, #0]
   10570:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   10574:	b089      	sub	sp, #36	; 0x24
   10576:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10578:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   1057a:	69eb      	ldr	r3, [r5, #28]
   1057c:	f013 0301 	ands.w	r3, r3, #1
   10580:	d1fb      	bne.n	1057a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   10582:	6822      	ldr	r2, [r4, #0]
   10584:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1065c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10588:	6811      	ldr	r1, [r2, #0]
   1058a:	4541      	cmp	r1, r8
   1058c:	d153      	bne.n	10636 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   1058e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10592:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10596:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1059a:	6853      	ldr	r3, [r2, #4]
   1059c:	4a28      	ldr	r2, [pc, #160]	; (10640 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   1059e:	4293      	cmp	r3, r2
   105a0:	d122      	bne.n	105e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   105a2:	2200      	movs	r2, #0
    m_inTail = 0;
   105a4:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105a8:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   105aa:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   105ac:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   105b0:	4a24      	ldr	r2, [pc, #144]	; (10644 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105b2:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   105b4:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105b6:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   105b8:	d01c      	beq.n	105f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   105ba:	4a23      	ldr	r2, [pc, #140]	; (10648 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   105bc:	4293      	cmp	r3, r2
   105be:	f000 8310 	beq.w	10be2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   105c2:	4a22      	ldr	r2, [pc, #136]	; (1064c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   105c4:	4293      	cmp	r3, r2
   105c6:	f000 8341 	beq.w	10c4c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   105ca:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   105ce:	f000 839a 	beq.w	10d06 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   105d2:	4a1f      	ldr	r2, [pc, #124]	; (10650 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   105d4:	4293      	cmp	r3, r2
   105d6:	d043      	beq.n	10660 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   105d8:	4a1e      	ldr	r2, [pc, #120]	; (10654 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   105da:	4293      	cmp	r3, r2
   105dc:	f000 8372 	beq.w	10cc4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   105e0:	2000      	movs	r0, #0
}
   105e2:	b009      	add	sp, #36	; 0x24
   105e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   105e8:	4620      	mov	r0, r4
   105ea:	4798      	blx	r3
   105ec:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   105ee:	4a15      	ldr	r2, [pc, #84]	; (10644 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   105f0:	4293      	cmp	r3, r2
   105f2:	d1e2      	bne.n	105ba <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   105f4:	2203      	movs	r2, #3
   105f6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   105fa:	4a17      	ldr	r2, [pc, #92]	; (10658 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   105fc:	9207      	str	r2, [sp, #28]
   105fe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   10602:	9206      	str	r2, [sp, #24]
   10604:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10608:	9202      	str	r2, [sp, #8]
   1060a:	2231      	movs	r2, #49	; 0x31
   1060c:	9205      	str	r2, [sp, #20]
   1060e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10612:	9201      	str	r2, [sp, #4]
   10614:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10616:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10618:	2601      	movs	r6, #1
   1061a:	f04f 092e 	mov.w	r9, #46	; 0x2e
   1061e:	9204      	str	r2, [sp, #16]
   10620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10624:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10628:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   1062a:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1062e:	f04f 0a07 	mov.w	sl, #7
   10632:	9200      	str	r2, [sp, #0]
   10634:	e02f      	b.n	10696 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   10636:	4620      	mov	r0, r4
   10638:	4788      	blx	r1
   1063a:	6822      	ldr	r2, [r4, #0]
   1063c:	e7ad      	b.n	1059a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   1063e:	bf00      	nop
   10640:	0000ff29 	.word	0x0000ff29
   10644:	40003000 	.word	0x40003000
   10648:	41012000 	.word	0x41012000
   1064c:	41014000 	.word	0x41014000
   10650:	43000400 	.word	0x43000400
   10654:	43000c00 	.word	0x43000c00
   10658:	00200500 	.word	0x00200500
   1065c:	0000ff19 	.word	0x0000ff19
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10660:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10664:	9207      	str	r2, [sp, #28]
   10666:	9206      	str	r2, [sp, #24]
   10668:	2220      	movs	r2, #32
   1066a:	9202      	str	r2, [sp, #8]
   1066c:	2245      	movs	r2, #69	; 0x45
   1066e:	9205      	str	r2, [sp, #20]
   10670:	2210      	movs	r2, #16
   10672:	9201      	str	r2, [sp, #4]
   10674:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10676:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10678:	2602      	movs	r6, #2
   1067a:	f04f 0942 	mov.w	r9, #66	; 0x42
   1067e:	9204      	str	r2, [sp, #16]
   10680:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10682:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10686:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   1068a:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   1068c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10690:	f04f 0a23 	mov.w	sl, #35	; 0x23
   10694:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   10696:	6a21      	ldr	r1, [r4, #32]
   10698:	f991 2001 	ldrsb.w	r2, [r1, #1]
   1069c:	f891 b002 	ldrb.w	fp, [r1, #2]
   106a0:	01d2      	lsls	r2, r2, #7
   106a2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   106a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   106aa:	f04f 0e01 	mov.w	lr, #1
   106ae:	fa0e fc0b 	lsl.w	ip, lr, fp
   106b2:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   106b6:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   106ba:	f894 c007 	ldrb.w	ip, [r4, #7]
   106be:	45f4      	cmp	ip, lr
   106c0:	f040 819d 	bne.w	109fe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   106c4:	4dc4      	ldr	r5, [pc, #784]	; (109d8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   106c6:	4ac5      	ldr	r2, [pc, #788]	; (109dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   106c8:	f107 0e20 	add.w	lr, r7, #32
   106cc:	3620      	adds	r6, #32
   106ce:	9f00      	ldr	r7, [sp, #0]
   106d0:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   106d4:	9f01      	ldr	r7, [sp, #4]
   106d6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   106da:	9f02      	ldr	r7, [sp, #8]
   106dc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   106e0:	f10a 0e20 	add.w	lr, sl, #32
   106e4:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   106e8:	f36f 1586 	bfc	r5, #6, #1
   106ec:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   106f0:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   106f4:	066d      	lsls	r5, r5, #25
   106f6:	d4fb      	bmi.n	106f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   106f8:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   106fc:	4eb7      	ldr	r6, [pc, #732]	; (109dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   106fe:	f04f 0c07 	mov.w	ip, #7
   10702:	f36c 0503 	bfi	r5, ip, #0, #4
   10706:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1070a:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1070e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   10712:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10716:	6875      	ldr	r5, [r6, #4]
   10718:	f015 051c 	ands.w	r5, r5, #28
   1071c:	d1fb      	bne.n	10716 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   1071e:	681a      	ldr	r2, [r3, #0]
   10720:	2603      	movs	r6, #3
   10722:	f366 0284 	bfi	r2, r6, #2, #3
   10726:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10728:	681a      	ldr	r2, [r3, #0]
   1072a:	7a26      	ldrb	r6, [r4, #8]
   1072c:	f366 725d 	bfi	r2, r6, #29, #1
   10730:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10732:	681a      	ldr	r2, [r3, #0]
   10734:	7a66      	ldrb	r6, [r4, #9]
   10736:	f366 721c 	bfi	r2, r6, #28, #1
   1073a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   1073c:	681a      	ldr	r2, [r3, #0]
   1073e:	f365 621b 	bfi	r2, r5, #24, #4
   10742:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   10744:	6962      	ldr	r2, [r4, #20]
   10746:	681e      	ldr	r6, [r3, #0]
   10748:	7a52      	ldrb	r2, [r2, #9]
   1074a:	f362 5615 	bfi	r6, r2, #20, #2
   1074e:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10750:	7a49      	ldrb	r1, [r1, #9]
   10752:	681a      	ldr	r2, [r3, #0]
   10754:	2900      	cmp	r1, #0
   10756:	bf0c      	ite	eq
   10758:	2100      	moveq	r1, #0
   1075a:	2102      	movne	r1, #2
   1075c:	f361 4211 	bfi	r2, r1, #16, #2
   10760:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   10762:	685a      	ldr	r2, [r3, #4]
   10764:	79a1      	ldrb	r1, [r4, #6]
   10766:	f361 0202 	bfi	r2, r1, #0, #3
   1076a:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   1076c:	681a      	ldr	r2, [r3, #0]
   1076e:	f365 729e 	bfi	r2, r5, #30, #1
   10772:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   10774:	681a      	ldr	r2, [r3, #0]
   10776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1077a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   1077c:	685a      	ldr	r2, [r3, #4]
   1077e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10782:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   10784:	685a      	ldr	r2, [r3, #4]
   10786:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1078a:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   1078c:	69a3      	ldr	r3, [r4, #24]
   1078e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10792:	789a      	ldrb	r2, [r3, #2]
   10794:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10798:	01db      	lsls	r3, r3, #7
   1079a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   1079e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   107a2:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   107a6:	07d7      	lsls	r7, r2, #31
   107a8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   107ac:	bf4c      	ite	mi
   107ae:	f366 1507 	bfimi	r5, r6, #4, #4
   107b2:	f366 0503 	bfipl	r5, r6, #0, #4
   107b6:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   107ba:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   107bc:	2901      	cmp	r1, #1
   107be:	f240 822f 	bls.w	10c20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   107c2:	2902      	cmp	r1, #2
   107c4:	d10a      	bne.n	107dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   107c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   107ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   107ce:	4413      	add	r3, r2
   107d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   107d4:	f042 0201 	orr.w	r2, r2, #1
   107d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   107dc:	2807      	cmp	r0, #7
   107de:	d031      	beq.n	10844 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   107e0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   107e4:	2b07      	cmp	r3, #7
   107e6:	d02d      	beq.n	10844 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   107e8:	f7fe fb06 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   107ec:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   107ee:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   107f0:	f023 0302 	bic.w	r3, r3, #2
   107f4:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   107f6:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   107f8:	6803      	ldr	r3, [r0, #0]
   107fa:	2b01      	cmp	r3, #1
   107fc:	d0fc      	beq.n	107f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   107fe:	9b06      	ldr	r3, [sp, #24]
   10800:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10802:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10806:	f7fe fb01 	bl	ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   1080a:	2300      	movs	r3, #0
   1080c:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   1080e:	6923      	ldr	r3, [r4, #16]
   10810:	3328      	adds	r3, #40	; 0x28
   10812:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   10814:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10818:	f7fe faee 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   1081c:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1081e:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10820:	f023 0302 	bic.w	r3, r3, #2
   10824:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10826:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10828:	6803      	ldr	r3, [r0, #0]
   1082a:	2b01      	cmp	r3, #1
   1082c:	d0fc      	beq.n	10828 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   1082e:	9b07      	ldr	r3, [sp, #28]
   10830:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10832:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10836:	f7fe fae9 	bl	ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   1083a:	2300      	movs	r3, #0
   1083c:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   1083e:	6923      	ldr	r3, [r4, #16]
   10840:	3328      	adds	r3, #40	; 0x28
   10842:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   10844:	6820      	ldr	r0, [r4, #0]
   10846:	4a66      	ldr	r2, [pc, #408]	; (109e0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10848:	6903      	ldr	r3, [r0, #16]
   1084a:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   1084e:	4293      	cmp	r3, r2
   10850:	f040 81bd 	bne.w	10bce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10854:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10856:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10858:	f991 5001 	ldrsb.w	r5, [r1, #1]
   1085c:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1085e:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10860:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10864:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10868:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1086c:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10870:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10874:	f36f 0100 	bfc	r1, #0, #1
   10878:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1087c:	6813      	ldr	r3, [r2, #0]
   1087e:	0799      	lsls	r1, r3, #30
   10880:	d503      	bpl.n	1088a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10882:	6813      	ldr	r3, [r2, #0]
   10884:	f36f 0341 	bfc	r3, #1, #1
   10888:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1088a:	69d3      	ldr	r3, [r2, #28]
   1088c:	f013 0302 	ands.w	r3, r3, #2
   10890:	d1fb      	bne.n	1088a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10892:	6802      	ldr	r2, [r0, #0]
   10894:	4542      	cmp	r2, r8
   10896:	f040 8211 	bne.w	10cbc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   1089a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1089e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   108a2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   108a6:	6843      	ldr	r3, [r0, #4]
   108a8:	4a4e      	ldr	r2, [pc, #312]	; (109e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   108aa:	4293      	cmp	r3, r2
   108ac:	f040 8202 	bne.w	10cb4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   108b0:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   108b2:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   108b4:	2204      	movs	r2, #4
    m_inTail = 0;
   108b6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   108ba:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   108bc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   108c0:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   108c2:	79e3      	ldrb	r3, [r4, #7]
   108c4:	2b01      	cmp	r3, #1
   108c6:	f040 8150 	bne.w	10b6a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   108ca:	4b47      	ldr	r3, [pc, #284]	; (109e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   108cc:	444b      	add	r3, r9
   108ce:	fbb3 f3f9 	udiv	r3, r3, r9
   108d2:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   108d4:	2bff      	cmp	r3, #255	; 0xff
   108d6:	bf28      	it	cs
   108d8:	23ff      	movcs	r3, #255	; 0xff
   108da:	b2db      	uxtb	r3, r3
   108dc:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   108de:	2e00      	cmp	r6, #0
   108e0:	f000 816f 	beq.w	10bc2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   108e4:	682b      	ldr	r3, [r5, #0]
   108e6:	f043 0302 	orr.w	r3, r3, #2
   108ea:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   108ec:	69eb      	ldr	r3, [r5, #28]
   108ee:	079b      	lsls	r3, r3, #30
   108f0:	d4fc      	bmi.n	108ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   108f2:	6a22      	ldr	r2, [r4, #32]
   108f4:	f992 3001 	ldrsb.w	r3, [r2, #1]
   108f8:	7890      	ldrb	r0, [r2, #2]
   108fa:	01db      	lsls	r3, r3, #7
   108fc:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10900:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10904:	4402      	add	r2, r0
   10906:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   1090a:	f041 0101 	orr.w	r1, r1, #1
   1090e:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10912:	69a6      	ldr	r6, [r4, #24]
   10914:	4a35      	ldr	r2, [pc, #212]	; (109ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10916:	f996 1001 	ldrsb.w	r1, [r6, #1]
   1091a:	78b7      	ldrb	r7, [r6, #2]
   1091c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10920:	2601      	movs	r6, #1
   10922:	40be      	lsls	r6, r7
   10924:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10926:	6961      	ldr	r1, [r4, #20]
   10928:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   1092c:	f891 c002 	ldrb.w	ip, [r1, #2]
   10930:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10934:	f01c 0f01 	tst.w	ip, #1
   10938:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   1093c:	f000 8108 	beq.w	10b50 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10940:	4472      	add	r2, lr
   10942:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10946:	f006 060f 	and.w	r6, r6, #15
   1094a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   1094e:	f366 1107 	bfi	r1, r6, #4, #4
   10952:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10956:	4925      	ldr	r1, [pc, #148]	; (109ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10958:	eb01 020e 	add.w	r2, r1, lr
   1095c:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10960:	2701      	movs	r7, #1
   10962:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10966:	f04f 0803 	mov.w	r8, #3
   1096a:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   1096e:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10970:	69e2      	ldr	r2, [r4, #28]
   10972:	7894      	ldrb	r4, [r2, #2]
   10974:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10978:	01d2      	lsls	r2, r2, #7
   1097a:	4411      	add	r1, r2
   1097c:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10980:	f014 0f01 	tst.w	r4, #1
   10984:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10988:	bf14      	ite	ne
   1098a:	f366 1707 	bfine	r7, r6, #4, #4
   1098e:	f366 0703 	bfieq	r7, r6, #0, #4
   10992:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10996:	4915      	ldr	r1, [pc, #84]	; (109ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10998:	440a      	add	r2, r1
   1099a:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1099c:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   1099e:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109a0:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   109a4:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109a8:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109b0:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109b6:	bf4c      	ite	mi
   109b8:	f366 1207 	bfimi	r2, r6, #4, #4
   109bc:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109c0:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109c2:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   109c6:	2201      	movs	r2, #1
   109c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   109cc:	682b      	ldr	r3, [r5, #0]
   109ce:	f043 0302 	orr.w	r3, r3, #2
   109d2:	602b      	str	r3, [r5, #0]
   109d4:	e00c      	b.n	109f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   109d6:	bf00      	nop
   109d8:	e000e100 	.word	0xe000e100
   109dc:	40001c00 	.word	0x40001c00
   109e0:	0001004d 	.word	0x0001004d
   109e4:	0000ff29 	.word	0x0000ff29
   109e8:	004c4b3f 	.word	0x004c4b3f
   109ec:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   109f0:	69eb      	ldr	r3, [r5, #28]
   109f2:	079b      	lsls	r3, r3, #30
   109f4:	d4fc      	bmi.n	109f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   109f6:	2001      	movs	r0, #1
}
   109f8:	b009      	add	sp, #36	; 0x24
   109fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   109fe:	6829      	ldr	r1, [r5, #0]
   10a00:	f36e 0184 	bfi	r1, lr, #2, #3
   10a04:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10a06:	6829      	ldr	r1, [r5, #0]
   10a08:	f36f 314f 	bfc	r1, #13, #3
   10a0c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10a0e:	6829      	ldr	r1, [r5, #0]
   10a10:	f36f 711c 	bfc	r1, #28, #1
   10a14:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10a16:	6829      	ldr	r1, [r5, #0]
   10a18:	f36e 5115 	bfi	r1, lr, #20, #2
   10a1c:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10a1e:	f1bc 0f00 	cmp.w	ip, #0
   10a22:	d104      	bne.n	10a2e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10a24:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10a28:	2900      	cmp	r1, #0
   10a2a:	f040 81af 	bne.w	10d8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10a2e:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10a30:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10a32:	f362 0302 	bfi	r3, r2, #0, #3
   10a36:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10a38:	682b      	ldr	r3, [r5, #0]
   10a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10a3e:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10a40:	7923      	ldrb	r3, [r4, #4]
   10a42:	2b02      	cmp	r3, #2
   10a44:	f000 817c 	beq.w	10d40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10a48:	682a      	ldr	r2, [r5, #0]
   10a4a:	2101      	movs	r1, #1
   10a4c:	f361 621b 	bfi	r2, r1, #24, #4
   10a50:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10a52:	686a      	ldr	r2, [r5, #4]
   10a54:	f363 324d 	bfi	r2, r3, #13, #1
   10a58:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10a5a:	7963      	ldrb	r3, [r4, #5]
   10a5c:	686a      	ldr	r2, [r5, #4]
   10a5e:	3b01      	subs	r3, #1
   10a60:	f363 1286 	bfi	r2, r3, #6, #1
   10a64:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10a66:	686b      	ldr	r3, [r5, #4]
   10a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10a6c:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10a6e:	686b      	ldr	r3, [r5, #4]
   10a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10a74:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10a76:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10a78:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10a7a:	f36f 2349 	bfc	r3, #9, #1
   10a7e:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10a80:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10a82:	69eb      	ldr	r3, [r5, #28]
   10a84:	075b      	lsls	r3, r3, #29
   10a86:	d4fc      	bmi.n	10a82 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10a88:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10a8c:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10a8e:	4bb7      	ldr	r3, [pc, #732]	; (10d6c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a90:	9a04      	ldr	r2, [sp, #16]
   10a92:	441a      	add	r2, r3
   10a94:	4610      	mov	r0, r2
   10a96:	9a05      	ldr	r2, [sp, #20]
   10a98:	eb03 0109 	add.w	r1, r3, r9
   10a9c:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10a9e:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10aa0:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10aa2:	9f00      	ldr	r7, [sp, #0]
   10aa4:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10aa8:	2220      	movs	r2, #32
   10aaa:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10aae:	9901      	ldr	r1, [sp, #4]
   10ab0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ab4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10ab8:	9a02      	ldr	r2, [sp, #8]
   10aba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10abe:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   10ac2:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10ac6:	69a3      	ldr	r3, [r4, #24]
   10ac8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10acc:	789a      	ldrb	r2, [r3, #2]
   10ace:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10ad2:	01db      	lsls	r3, r3, #7
   10ad4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10ad8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10adc:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10ae0:	07d6      	lsls	r6, r2, #31
   10ae2:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   10ae6:	bf4c      	ite	mi
   10ae8:	f365 1007 	bfimi	r0, r5, #4, #4
   10aec:	f365 0003 	bfipl	r0, r5, #0, #4
   10af0:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   10af4:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   10af6:	2901      	cmp	r1, #1
   10af8:	f240 80c7 	bls.w	10c8a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10afc:	2902      	cmp	r1, #2
   10afe:	d10a      	bne.n	10b16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10b00:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10b04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10b08:	4413      	add	r3, r2
   10b0a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10b0e:	f042 0201 	orr.w	r2, r2, #1
   10b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10b16:	f10a 0e20 	add.w	lr, sl, #32
   10b1a:	4a95      	ldr	r2, [pc, #596]	; (10d70 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10b1c:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10b20:	f36f 1386 	bfc	r3, #6, #1
   10b24:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10b28:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10b2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10b30:	2b00      	cmp	r3, #0
   10b32:	d1f9      	bne.n	10b28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10b34:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10b38:	f363 0103 	bfi	r1, r3, #0, #4
   10b3c:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10b40:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b48:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10b4c:	6853      	ldr	r3, [r2, #4]
   10b4e:	e679      	b.n	10844 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10b50:	eb02 010e 	add.w	r1, r2, lr
   10b54:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10b58:	f006 060f 	and.w	r6, r6, #15
   10b5c:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10b60:	f366 0203 	bfi	r2, r6, #0, #4
   10b64:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10b68:	e6f5      	b.n	10956 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10b6a:	4648      	mov	r0, r9
   10b6c:	f00b f814 	bl	1bb98 <__aeabi_ui2d>
   10b70:	2200      	movs	r2, #0
   10b72:	4b80      	ldr	r3, [pc, #512]	; (10d74 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10b74:	f00b f886 	bl	1bc84 <__aeabi_dmul>
   10b78:	4b7f      	ldr	r3, [pc, #508]	; (10d78 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10b7a:	4680      	mov	r8, r0
   10b7c:	6818      	ldr	r0, [r3, #0]
   10b7e:	4689      	mov	r9, r1
   10b80:	f00b f80a 	bl	1bb98 <__aeabi_ui2d>
   10b84:	4602      	mov	r2, r0
   10b86:	460b      	mov	r3, r1
   10b88:	4640      	mov	r0, r8
   10b8a:	4649      	mov	r1, r9
   10b8c:	f00b f9a4 	bl	1bed8 <__aeabi_ddiv>
   10b90:	4602      	mov	r2, r0
   10b92:	460b      	mov	r3, r1
   10b94:	2000      	movs	r0, #0
   10b96:	4979      	ldr	r1, [pc, #484]	; (10d7c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10b98:	f00a fec0 	bl	1b91c <__aeabi_dsub>
   10b9c:	2200      	movs	r2, #0
   10b9e:	4b78      	ldr	r3, [pc, #480]	; (10d80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10ba0:	f00b f870 	bl	1bc84 <__aeabi_dmul>
   10ba4:	f00b fb50 	bl	1c248 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10ba8:	f00b f818 	bl	1bbdc <__aeabi_f2d>
   10bac:	2200      	movs	r2, #0
   10bae:	4b75      	ldr	r3, [pc, #468]	; (10d84 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10bb0:	f00a feb6 	bl	1b920 <__adddf3>
   10bb4:	f00b fb28 	bl	1c208 <__aeabi_d2uiz>
   10bb8:	b280      	uxth	r0, r0
   10bba:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10bbc:	2e00      	cmp	r6, #0
   10bbe:	f47f ae91 	bne.w	108e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10bc2:	6a22      	ldr	r2, [r4, #32]
   10bc4:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10bc8:	7890      	ldrb	r0, [r2, #2]
   10bca:	01db      	lsls	r3, r3, #7
   10bcc:	e6a1      	b.n	10912 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10bce:	4649      	mov	r1, r9
   10bd0:	4620      	mov	r0, r4
   10bd2:	4798      	blx	r3
   10bd4:	6a22      	ldr	r2, [r4, #32]
   10bd6:	6925      	ldr	r5, [r4, #16]
   10bd8:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10bdc:	7890      	ldrb	r0, [r2, #2]
   10bde:	01db      	lsls	r3, r3, #7
   10be0:	e697      	b.n	10912 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10be2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10be6:	9207      	str	r2, [sp, #28]
   10be8:	9206      	str	r2, [sp, #24]
   10bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10bee:	9202      	str	r2, [sp, #8]
   10bf0:	2239      	movs	r2, #57	; 0x39
   10bf2:	9205      	str	r2, [sp, #20]
   10bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10bf8:	9201      	str	r2, [sp, #4]
   10bfa:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10bfc:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bfe:	2601      	movs	r6, #1
   10c00:	f04f 0936 	mov.w	r9, #54	; 0x36
   10c04:	9204      	str	r2, [sp, #16]
   10c06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c0a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c0e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10c12:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10c14:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c18:	f04f 0a17 	mov.w	sl, #23
   10c1c:	9200      	str	r2, [sp, #0]
   10c1e:	e53a      	b.n	10696 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10c20:	2900      	cmp	r1, #0
   10c22:	f040 8092 	bne.w	10d4a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10c26:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c2a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c2e:	2501      	movs	r5, #1
   10c30:	4095      	lsls	r5, r2
   10c32:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10c34:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10c38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10c3c:	4413      	add	r3, r2
   10c3e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10c42:	f36f 0200 	bfc	r2, #0, #1
   10c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10c4a:	e5c7      	b.n	107dc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10c50:	9207      	str	r2, [sp, #28]
   10c52:	9206      	str	r2, [sp, #24]
   10c54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10c58:	9202      	str	r2, [sp, #8]
   10c5a:	223d      	movs	r2, #61	; 0x3d
   10c5c:	9205      	str	r2, [sp, #20]
   10c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10c62:	9201      	str	r2, [sp, #4]
   10c64:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c66:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c68:	2601      	movs	r6, #1
   10c6a:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10c6e:	9204      	str	r2, [sp, #16]
   10c70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c74:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c78:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10c7c:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10c7e:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c82:	f04f 0a18 	mov.w	sl, #24
   10c86:	9200      	str	r2, [sp, #0]
   10c88:	e505      	b.n	10696 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10c8a:	2900      	cmp	r1, #0
   10c8c:	d165      	bne.n	10d5a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10c8e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c92:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c96:	2001      	movs	r0, #1
   10c98:	4090      	lsls	r0, r2
   10c9a:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10c9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ca0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10ca4:	4413      	add	r3, r2
   10ca6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10caa:	f36f 0200 	bfc	r2, #0, #1
   10cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10cb2:	e730      	b.n	10b16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10cb4:	4620      	mov	r0, r4
   10cb6:	4798      	blx	r3
   10cb8:	6925      	ldr	r5, [r4, #16]
   10cba:	e602      	b.n	108c2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10cbc:	4620      	mov	r0, r4
   10cbe:	4790      	blx	r2
   10cc0:	6820      	ldr	r0, [r4, #0]
   10cc2:	e5f0      	b.n	108a6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10cc4:	2205      	movs	r2, #5
   10cc6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10cce:	9202      	str	r2, [sp, #8]
   10cd0:	224d      	movs	r2, #77	; 0x4d
   10cd2:	492d      	ldr	r1, [pc, #180]	; (10d88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10cd4:	9205      	str	r2, [sp, #20]
   10cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10cda:	9201      	str	r2, [sp, #4]
   10cdc:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10cde:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10ce0:	2602      	movs	r6, #2
   10ce2:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10ce6:	9107      	str	r1, [sp, #28]
   10ce8:	9204      	str	r2, [sp, #16]
   10cea:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10cf2:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10cf4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10cf8:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10cfa:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10cfe:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10d02:	9200      	str	r2, [sp, #0]
   10d04:	e4c7      	b.n	10696 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10d06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10d0a:	9207      	str	r2, [sp, #28]
   10d0c:	9206      	str	r2, [sp, #24]
   10d0e:	2241      	movs	r2, #65	; 0x41
   10d10:	9205      	str	r2, [sp, #20]
   10d12:	2240      	movs	r2, #64	; 0x40
   10d14:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10d16:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10d18:	2102      	movs	r1, #2
   10d1a:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10d1e:	9204      	str	r2, [sp, #16]
   10d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10d24:	4637      	mov	r7, r6
   10d26:	9601      	str	r6, [sp, #4]
   10d28:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10d2a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10d2e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10d32:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10d34:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10d38:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10d3c:	9200      	str	r2, [sp, #0]
   10d3e:	e4aa      	b.n	10696 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10d40:	682b      	ldr	r3, [r5, #0]
   10d42:	f36f 631b 	bfc	r3, #24, #4
   10d46:	602b      	str	r3, [r5, #0]
   10d48:	e687      	b.n	10a5a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10d4a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10d4e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10d52:	2501      	movs	r5, #1
   10d54:	4095      	lsls	r5, r2
   10d56:	614d      	str	r5, [r1, #20]
   10d58:	e76c      	b.n	10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10d5a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10d5e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10d62:	2001      	movs	r0, #1
   10d64:	4090      	lsls	r0, r2
   10d66:	6148      	str	r0, [r1, #20]
   10d68:	e798      	b.n	10c9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10d6a:	bf00      	nop
   10d6c:	e000e100 	.word	0xe000e100
   10d70:	40001c00 	.word	0x40001c00
   10d74:	40300000 	.word	0x40300000
   10d78:	200000e8 	.word	0x200000e8
   10d7c:	3ff00000 	.word	0x3ff00000
   10d80:	40f00000 	.word	0x40f00000
   10d84:	3fe00000 	.word	0x3fe00000
   10d88:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d8c:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10d8e:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d90:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10d94:	f36c 0100 	bfi	r1, ip, #0, #1
   10d98:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10d9c:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10d9e:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10da2:	0790      	lsls	r0, r2, #30
   10da4:	d503      	bpl.n	10dae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10da6:	681a      	ldr	r2, [r3, #0]
   10da8:	f36c 0241 	bfi	r2, ip, #1, #1
   10dac:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10dae:	69da      	ldr	r2, [r3, #28]
   10db0:	f012 0202 	ands.w	r2, r2, #2
   10db4:	d1fb      	bne.n	10dae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10db6:	6821      	ldr	r1, [r4, #0]
   10db8:	680b      	ldr	r3, [r1, #0]
   10dba:	4543      	cmp	r3, r8
   10dbc:	d13b      	bne.n	10e36 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10dbe:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10dc2:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10dc6:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10dca:	684b      	ldr	r3, [r1, #4]
   10dcc:	4a1c      	ldr	r2, [pc, #112]	; (10e40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10dce:	4293      	cmp	r3, r2
   10dd0:	d12d      	bne.n	10e2e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10dd2:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10dd4:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10dd6:	2104      	movs	r1, #4
    m_inTail = 0;
   10dd8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10ddc:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10dde:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10de2:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10de4:	7b21      	ldrb	r1, [r4, #12]
   10de6:	6813      	ldr	r3, [r2, #0]
   10de8:	2900      	cmp	r1, #0
   10dea:	bf0c      	ite	eq
   10dec:	2100      	moveq	r1, #0
   10dee:	2102      	movne	r1, #2
   10df0:	f361 4311 	bfi	r3, r1, #16, #2
   10df4:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10df6:	f1bb 0f00 	cmp.w	fp, #0
   10dfa:	f43f ae18 	beq.w	10a2e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10dfe:	6813      	ldr	r3, [r2, #0]
   10e00:	f043 0302 	orr.w	r3, r3, #2
   10e04:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10e06:	69d3      	ldr	r3, [r2, #28]
   10e08:	0799      	lsls	r1, r3, #30
   10e0a:	d4fc      	bmi.n	10e06 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e0c:	6a23      	ldr	r3, [r4, #32]
   10e0e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10e12:	789b      	ldrb	r3, [r3, #2]
   10e14:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10e18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e20:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e24:	f042 0201 	orr.w	r2, r2, #1
   10e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e2c:	e5ff      	b.n	10a2e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10e2e:	4620      	mov	r0, r4
   10e30:	4798      	blx	r3
   10e32:	6922      	ldr	r2, [r4, #16]
   10e34:	e7d6      	b.n	10de4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10e36:	4620      	mov	r0, r4
   10e38:	4798      	blx	r3
   10e3a:	6821      	ldr	r1, [r4, #0]
   10e3c:	e7c5      	b.n	10dca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10e3e:	bf00      	nop
   10e40:	0000ff29 	.word	0x0000ff29

00010e44 <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10e44:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   10e48:	b92a      	cbnz	r2, 10e56 <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   10e4a:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   10e4c:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   10e4e:	428a      	cmp	r2, r1
        m_portOpen = true;
   10e50:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   10e54:	d900      	bls.n	10e58 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   10e56:	4770      	bx	lr
   10e58:	f7ff bb86 	b.w	10568 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00010e5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e5e:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   10e60:	4f20      	ldr	r7, [pc, #128]	; (10ee4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   10e62:	6182      	str	r2, [r0, #24]
   10e64:	61c3      	str	r3, [r0, #28]
   10e66:	4d20      	ldr	r5, [pc, #128]	; (10ee8 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   10e68:	60a7      	str	r7, [r4, #8]
   10e6a:	9f06      	ldr	r7, [sp, #24]
   10e6c:	f8df c080 	ldr.w	ip, [pc, #128]	; 10ef0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10e70:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   10e74:	6065      	str	r5, [r4, #4]
   10e76:	2307      	movs	r3, #7
   10e78:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10e7a:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   10e7c:	6227      	str	r7, [r4, #32]
   10e7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   10e82:	2780      	movs	r7, #128	; 0x80
   10e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10e88:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   10e8c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   10e90:	f8c4 c000 	str.w	ip, [r4]
   10e94:	6261      	str	r1, [r4, #36]	; 0x24
   10e96:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   10e9a:	85a2      	strh	r2, [r4, #44]	; 0x2c
   10e9c:	4629      	mov	r1, r5
   10e9e:	463a      	mov	r2, r7
   10ea0:	6166      	str	r6, [r4, #20]
   10ea2:	7325      	strb	r5, [r4, #12]
   10ea4:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   10ea8:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   10eac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10eb0:	f00d fbbc 	bl	1e62c <memset>
   10eb4:	463a      	mov	r2, r7
   10eb6:	4629      	mov	r1, r5
   10eb8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10ebc:	f00d fbb6 	bl	1e62c <memset>
   10ec0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   10ec4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10ec8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10ecc:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   10ed0:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   10ed4:	7a32      	ldrb	r2, [r6, #8]
   10ed6:	4b05      	ldr	r3, [pc, #20]	; (10eec <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   10ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10edc:	6123      	str	r3, [r4, #16]
}
   10ede:	4620      	mov	r0, r4
   10ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ee2:	bf00      	nop
   10ee4:	02000100 	.word	0x02000100
   10ee8:	00080102 	.word	0x00080102
   10eec:	000236a0 	.word	0x000236a0
   10ef0:	00023658 	.word	0x00023658

00010ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   10ef6:	4907      	ldr	r1, [pc, #28]	; (10f14 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10ef8:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   10efc:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   10efe:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10f00:	fbb2 f2f3 	udiv	r2, r2, r3
   10f04:	2a02      	cmp	r2, #2
   10f06:	bf38      	it	cc
   10f08:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   10f0a:	680b      	ldr	r3, [r1, #0]
   10f0c:	1a1b      	subs	r3, r3, r0
   10f0e:	429a      	cmp	r2, r3
   10f10:	d8fb      	bhi.n	10f0a <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   10f12:	4770      	bx	lr
   10f14:	20001bf0 	.word	0x20001bf0

00010f18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   10f18:	2901      	cmp	r1, #1
   10f1a:	d901      	bls.n	10f20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   10f1c:	2000      	movs	r0, #0
   10f1e:	4770      	bx	lr
    if (!m_portOpen) {
   10f20:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   10f24:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   10f26:	b10a      	cbz	r2, 10f2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   10f28:	f7ff bb1e 	b.w	10568 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   10f2c:	2001      	movs	r0, #1
}
   10f2e:	4770      	bx	lr

00010f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   10f30:	2901      	cmp	r1, #1
    m_ssMode = mode;
   10f32:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   10f34:	d914      	bls.n	10f60 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   10f36:	2902      	cmp	r1, #2
   10f38:	d110      	bne.n	10f5c <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10f3a:	6982      	ldr	r2, [r0, #24]
   10f3c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10f40:	7893      	ldrb	r3, [r2, #2]
   10f42:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10f46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   10f4e:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10f50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f54:	4302      	orrs	r2, r0
   10f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f5a:	4770      	bx	lr
            success = false;
   10f5c:	2000      	movs	r0, #0
}
   10f5e:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10f60:	6982      	ldr	r2, [r0, #24]
   10f62:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10f66:	7892      	ldrb	r2, [r2, #2]
   10f68:	01db      	lsls	r3, r3, #7
   10f6a:	b199      	cbz	r1, 10f94 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   10f6c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f70:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f74:	2001      	movs	r0, #1
   10f76:	4090      	lsls	r0, r2
   10f78:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10f7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10f82:	4413      	add	r3, r2
   10f84:	2001      	movs	r0, #1
   10f86:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f8a:	f36f 0200 	bfc	r2, #0, #1
   10f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f92:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10f94:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f98:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f9c:	2001      	movs	r0, #1
   10f9e:	4090      	lsls	r0, r2
   10fa0:	6188      	str	r0, [r1, #24]
   10fa2:	e7ea      	b.n	10f7a <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00010fa4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   10fa4:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   10fa6:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   10fa8:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   10faa:	2b01      	cmp	r3, #1
    m_phase = phase;
   10fac:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   10fae:	d000      	beq.n	10fb2 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   10fb0:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fb2:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10fb4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fb6:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10fba:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10fbc:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fbe:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10fc2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10fc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10fca:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fce:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10fd2:	f36f 0100 	bfc	r1, #0, #1
   10fd6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10fda:	6813      	ldr	r3, [r2, #0]
   10fdc:	0799      	lsls	r1, r3, #30
   10fde:	d503      	bpl.n	10fe8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10fe0:	6813      	ldr	r3, [r2, #0]
   10fe2:	f36f 0341 	bfc	r3, #1, #1
   10fe6:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10fe8:	69d3      	ldr	r3, [r2, #28]
   10fea:	f013 0302 	ands.w	r3, r3, #2
   10fee:	d1fb      	bne.n	10fe8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   10ff0:	6802      	ldr	r2, [r0, #0]
   10ff2:	4604      	mov	r4, r0
   10ff4:	6811      	ldr	r1, [r2, #0]
   10ff6:	4821      	ldr	r0, [pc, #132]	; (1107c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   10ff8:	4281      	cmp	r1, r0
   10ffa:	d136      	bne.n	1106a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   10ffc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   11000:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   11004:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   11008:	6853      	ldr	r3, [r2, #4]
   1100a:	4a1d      	ldr	r2, [pc, #116]	; (11080 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   1100c:	4293      	cmp	r3, r2
   1100e:	d130      	bne.n	11072 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11010:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   11012:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11014:	2104      	movs	r1, #4
    m_inTail = 0;
   11016:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1101a:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   1101c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11020:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   11022:	7a21      	ldrb	r1, [r4, #8]
   11024:	681a      	ldr	r2, [r3, #0]
   11026:	f361 725d 	bfi	r2, r1, #29, #1
   1102a:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1102c:	7a61      	ldrb	r1, [r4, #9]
   1102e:	681a      	ldr	r2, [r3, #0]
   11030:	f361 721c 	bfi	r2, r1, #28, #1
   11034:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   11036:	2d00      	cmp	r5, #0
   11038:	d0ba      	beq.n	10fb0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1103a:	681a      	ldr	r2, [r3, #0]
   1103c:	f042 0202 	orr.w	r2, r2, #2
   11040:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11042:	69da      	ldr	r2, [r3, #28]
   11044:	0792      	lsls	r2, r2, #30
   11046:	d4fc      	bmi.n	11042 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11048:	6a22      	ldr	r2, [r4, #32]
   1104a:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1104e:	7893      	ldrb	r3, [r2, #2]
   11050:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   11054:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11058:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1105c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11060:	f042 0201 	orr.w	r2, r2, #1
   11064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11068:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   1106a:	4620      	mov	r0, r4
   1106c:	4788      	blx	r1
   1106e:	6822      	ldr	r2, [r4, #0]
   11070:	e7ca      	b.n	11008 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   11072:	4620      	mov	r0, r4
   11074:	4798      	blx	r3
   11076:	6923      	ldr	r3, [r4, #16]
   11078:	e7d3      	b.n	11022 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   1107a:	bf00      	nop
   1107c:	0000ff19 	.word	0x0000ff19
   11080:	0000ff29 	.word	0x0000ff29

00011084 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   11084:	b470      	push	{r4, r5, r6}
   11086:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   11088:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1108c:	b120      	cbz	r0, 11098 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   1108e:	79e0      	ldrb	r0, [r4, #7]
   11090:	2801      	cmp	r0, #1
        return 0;
   11092:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   11096:	d001      	beq.n	1109c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   11098:	bc70      	pop	{r4, r5, r6}
   1109a:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   1109c:	2b00      	cmp	r3, #0
   1109e:	ddfb      	ble.n	11098 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   110a0:	6925      	ldr	r5, [r4, #16]
   110a2:	b1b9      	cbz	r1, 110d4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   110a4:	1c4e      	adds	r6, r1, #1
   110a6:	7809      	ldrb	r1, [r1, #0]
   110a8:	62a9      	str	r1, [r5, #40]	; 0x28
   110aa:	e003      	b.n	110b4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   110ac:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   110b0:	2900      	cmp	r1, #0
   110b2:	d0f1      	beq.n	11098 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   110b4:	7e29      	ldrb	r1, [r5, #24]
   110b6:	0749      	lsls	r1, r1, #29
   110b8:	d5f8      	bpl.n	110ac <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   110ba:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   110bc:	0789      	lsls	r1, r1, #30
   110be:	d5f5      	bpl.n	110ac <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   110c0:	b152      	cbz	r2, 110d8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   110c2:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   110c4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   110c6:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   110c8:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   110ca:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   110ce:	d007      	beq.n	110e0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   110d0:	4631      	mov	r1, r6
   110d2:	e7e5      	b.n	110a0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   110d4:	460e      	mov	r6, r1
   110d6:	e7e7      	b.n	110a8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   110d8:	3001      	adds	r0, #1
   110da:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   110dc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   110de:	d1f7      	bne.n	110d0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   110e0:	4618      	mov	r0, r3
   110e2:	e7d9      	b.n	11098 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

000110e4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   110e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   110e8:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   110ec:	b12d      	cbz	r5, 110fa <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   110ee:	f890 8007 	ldrb.w	r8, [r0, #7]
   110f2:	f1b8 0f01 	cmp.w	r8, #1
   110f6:	d003      	beq.n	11100 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   110f8:	2500      	movs	r5, #0
}
   110fa:	4628      	mov	r0, r5
   110fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11100:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   11104:	f1be 0f07 	cmp.w	lr, #7
   11108:	d0f6      	beq.n	110f8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   1110a:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   1110e:	2c07      	cmp	r4, #7
   11110:	d0f2      	beq.n	110f8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11112:	4616      	mov	r6, r2
   11114:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   11116:	4670      	mov	r0, lr
   11118:	461f      	mov	r7, r3
   1111a:	4689      	mov	r9, r1
   1111c:	f7fd fe76 	bl	ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11120:	b336      	cbz	r6, 11170 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11122:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   11124:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11128:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   1112a:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   1112c:	b2be      	uxth	r6, r7
   1112e:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11130:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11134:	f7fd fe60 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11138:	6803      	ldr	r3, [r0, #0]
   1113a:	f043 0302 	orr.w	r3, r3, #2
   1113e:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11140:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11144:	f7fd fe62 	bl	ee0c <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   11148:	f1b9 0f00 	cmp.w	r9, #0
   1114c:	d015      	beq.n	1117a <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   1114e:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11150:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11154:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   11156:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11158:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   1115a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1115e:	f7fd fe4b 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11162:	6803      	ldr	r3, [r0, #0]
   11164:	f043 0302 	orr.w	r3, r3, #2
   11168:	6003      	str	r3, [r0, #0]
}
   1116a:	4628      	mov	r0, r5
   1116c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   11170:	4b04      	ldr	r3, [pc, #16]	; (11184 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11172:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11174:	f8a0 8000 	strh.w	r8, [r0]
   11178:	e7d8      	b.n	1112c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   1117a:	4b02      	ldr	r3, [pc, #8]	; (11184 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   1117c:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   1117e:	2301      	movs	r3, #1
   11180:	8003      	strh	r3, [r0, #0]
   11182:	e7e9      	b.n	11158 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   11184:	20001f20 	.word	0x20001f20

00011188 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11188:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   1118c:	2b07      	cmp	r3, #7
   1118e:	d016      	beq.n	111be <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   11190:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   11194:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   11196:	b510      	push	{r4, lr}
   11198:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1119a:	d005      	beq.n	111a8 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   1119c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   111a0:	b113      	cbz	r3, 111a8 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   111a2:	79e3      	ldrb	r3, [r4, #7]
   111a4:	2b01      	cmp	r3, #1
   111a6:	d001      	beq.n	111ac <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   111a8:	2001      	movs	r0, #1
   111aa:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   111ac:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   111b0:	f7fd fe22 	bl	edf8 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   111b4:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   111b6:	079b      	lsls	r3, r3, #30
   111b8:	d4f0      	bmi.n	1119c <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   111ba:	2001      	movs	r0, #1
   111bc:	bd10      	pop	{r4, pc}
   111be:	2001      	movs	r0, #1
   111c0:	4770      	bx	lr
   111c2:	bf00      	nop

000111c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   111c4:	79c3      	ldrb	r3, [r0, #7]
   111c6:	2b01      	cmp	r3, #1
   111c8:	d022      	beq.n	11210 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   111ca:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   111ce:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   111d2:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   111d4:	429a      	cmp	r2, r3
   111d6:	d019      	beq.n	1120c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   111d8:	7e0b      	ldrb	r3, [r1, #24]
   111da:	07da      	lsls	r2, r3, #31
   111dc:	d403      	bmi.n	111e6 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   111de:	e018      	b.n	11212 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   111e0:	7e0b      	ldrb	r3, [r1, #24]
   111e2:	07db      	lsls	r3, r3, #31
   111e4:	d514      	bpl.n	11210 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   111e6:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   111ea:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   111ee:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   111f0:	3301      	adds	r3, #1
   111f2:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   111f6:	628a      	str	r2, [r1, #40]	; 0x28
   111f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   111fc:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11200:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11204:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11208:	429a      	cmp	r2, r3
   1120a:	d1e9      	bne.n	111e0 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   1120c:	2301      	movs	r3, #1
   1120e:	750b      	strb	r3, [r1, #20]
   11210:	4770      	bx	lr
   11212:	4770      	bx	lr

00011214 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   11214:	79c3      	ldrb	r3, [r0, #7]
   11216:	2b01      	cmp	r3, #1
   11218:	d100      	bne.n	1121c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   1121a:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   1121c:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   1121e:	6901      	ldr	r1, [r0, #16]
   11220:	f891 3020 	ldrb.w	r3, [r1, #32]
   11224:	b303      	cbz	r3, 11268 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   11226:	2300      	movs	r3, #0
   11228:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   1122c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11230:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   11234:	f103 0218 	add.w	r2, r3, #24
   11238:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   1123c:	3301      	adds	r3, #1
   1123e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   11242:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   11246:	7e0b      	ldrb	r3, [r1, #24]
   11248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1124c:	760b      	strb	r3, [r1, #24]
   1124e:	e00b      	b.n	11268 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11250:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11254:	429a      	cmp	r2, r3
   11256:	d00f      	beq.n	11278 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   11258:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   1125c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   1125e:	3218      	adds	r2, #24
   11260:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   11264:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   11268:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   1126c:	7e0a      	ldrb	r2, [r1, #24]
   1126e:	3301      	adds	r3, #1
   11270:	0752      	lsls	r2, r2, #29
   11272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11276:	d4eb      	bmi.n	11250 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   11278:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1127c:	429a      	cmp	r2, r3
   1127e:	d002      	beq.n	11286 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   11280:	f85d 4b04 	ldr.w	r4, [sp], #4
   11284:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   11286:	2304      	movs	r3, #4
   11288:	750b      	strb	r3, [r1, #20]
}
   1128a:	e7f9      	b.n	11280 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

0001128c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   1128c:	79c3      	ldrb	r3, [r0, #7]
   1128e:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11290:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   11292:	d022      	beq.n	112da <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   11294:	7e1a      	ldrb	r2, [r3, #24]
   11296:	09d2      	lsrs	r2, r2, #7
   11298:	d01e      	beq.n	112d8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   1129a:	2280      	movs	r2, #128	; 0x80
   1129c:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   1129e:	8b5a      	ldrh	r2, [r3, #26]
   112a0:	0792      	lsls	r2, r2, #30
   112a2:	d509      	bpl.n	112b8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   112a4:	8b5a      	ldrh	r2, [r3, #26]
   112a6:	f042 0202 	orr.w	r2, r2, #2
   112aa:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   112ac:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   112b0:	f042 0201 	orr.w	r2, r2, #1
   112b4:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   112b8:	8b5a      	ldrh	r2, [r3, #26]
   112ba:	07d1      	lsls	r1, r2, #31
   112bc:	d410      	bmi.n	112e0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   112be:	8b5a      	ldrh	r2, [r3, #26]
   112c0:	0752      	lsls	r2, r2, #29
   112c2:	d509      	bpl.n	112d8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   112c4:	8b5a      	ldrh	r2, [r3, #26]
   112c6:	f042 0204 	orr.w	r2, r2, #4
   112ca:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   112cc:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   112d0:	f043 0304 	orr.w	r3, r3, #4
   112d4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   112d8:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   112da:	2280      	movs	r2, #128	; 0x80
   112dc:	761a      	strb	r2, [r3, #24]
            break;
   112de:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   112e0:	8b5a      	ldrh	r2, [r3, #26]
   112e2:	f042 0201 	orr.w	r2, r2, #1
   112e6:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   112e8:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   112ec:	f042 0202 	orr.w	r2, r2, #2
   112f0:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   112f4:	e7e3      	b.n	112be <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   112f6:	bf00      	nop

000112f8 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   112f8:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   112fc:	4770      	bx	lr
   112fe:	bf00      	nop

00011300 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11300:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11304:	e7f8      	b.n	112f8 <_ZN9ClearCore12SerialDriver4ModeEv>
   11306:	bf00      	nop

00011308 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11308:	2007      	movs	r0, #7
   1130a:	4770      	bx	lr

0001130c <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   1130c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11310:	e7fa      	b.n	11308 <_ZN9ClearCore12SerialDriver4TypeEv>
   11312:	bf00      	nop

00011314 <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   11314:	6803      	ldr	r3, [r0, #0]
   11316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11318:	4718      	bx	r3
   1131a:	bf00      	nop

0001131c <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   1131c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11320:	e7f8      	b.n	11314 <_ZN9ClearCore12SerialDriver10IsWritableEv>
   11322:	bf00      	nop

00011324 <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   11324:	b508      	push	{r3, lr}
        return PortIsOpen();
   11326:	6803      	ldr	r3, [r0, #0]
   11328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1132a:	4798      	blx	r3
    }
   1132c:	b200      	sxth	r0, r0
   1132e:	bd08      	pop	{r3, pc}

00011330 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11330:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11334:	e7f6      	b.n	11324 <_ZN9ClearCore12SerialDriver5StateEv>
   11336:	bf00      	nop

00011338 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11338:	2000      	movs	r0, #0
   1133a:	4770      	bx	lr

0001133c <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   1133c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11340:	e7fa      	b.n	11338 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   11342:	bf00      	nop

00011344 <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   11344:	4770      	bx	lr
   11346:	bf00      	nop

00011348 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11348:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1134c:	e7fa      	b.n	11344 <_ZN9ClearCore12SerialDriver7RefreshEv>
   1134e:	bf00      	nop

00011350 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11354:	b082      	sub	sp, #8
   11356:	4688      	mov	r8, r1
   11358:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1135a:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   1135e:	9500      	str	r5, [sp, #0]
   11360:	9401      	str	r4, [sp, #4]
   11362:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   11364:	4604      	mov	r4, r0
   11366:	4617      	mov	r7, r2
   11368:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   1136a:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   1136c:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   1136e:	f7ff fd75 	bl	10e5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11372:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   11376:	f7fd f951 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
   1137a:	4b09      	ldr	r3, [pc, #36]	; (113a0 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   1137c:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11380:	f103 0208 	add.w	r2, r3, #8
   11384:	4620      	mov	r0, r4
   11386:	337c      	adds	r3, #124	; 0x7c
   11388:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   1138c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11390:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   11394:	6022      	str	r2, [r4, #0]
   11396:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1139a:	b002      	add	sp, #8
   1139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113a0:	000236c0 	.word	0x000236c0

000113a4 <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   113a4:	b538      	push	{r3, r4, r5, lr}
   113a6:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   113a8:	f7fe fe50 	bl	1004c <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   113ac:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   113b0:	4605      	mov	r5, r0
        if (m_portOpen) {
   113b2:	b113      	cbz	r3, 113ba <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   113b4:	4620      	mov	r0, r4
   113b6:	f7ff fd9d 	bl	10ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   113ba:	4628      	mov	r0, r5
   113bc:	bd38      	pop	{r3, r4, r5, pc}
   113be:	bf00      	nop

000113c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   113c0:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   113c2:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   113c6:	428b      	cmp	r3, r1
   113c8:	d00d      	beq.n	113e6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   113ca:	2b10      	cmp	r3, #16
   113cc:	460d      	mov	r5, r1
   113ce:	4604      	mov	r4, r0
   113d0:	f000 808c 	beq.w	114ec <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   113d4:	f1a5 030d 	sub.w	r3, r5, #13
   113d8:	2b03      	cmp	r3, #3
   113da:	f200 808c 	bhi.w	114f6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   113de:	e8df f003 	tbb	[pc, r3]
   113e2:	3169      	.short	0x3169
   113e4:	4f06      	.short	0x4f06
        return true;
   113e6:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   113e8:	4628      	mov	r0, r5
   113ea:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   113ec:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   113ee:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   113f2:	4b42      	ldr	r3, [pc, #264]	; (114fc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   113f4:	f3bf 8f5b 	dmb	ish
   113f8:	43d2      	mvns	r2, r2
   113fa:	e853 1f00 	ldrex	r1, [r3]
   113fe:	4011      	ands	r1, r2
   11400:	e843 1000 	strex	r0, r1, [r3]
   11404:	2800      	cmp	r0, #0
   11406:	d1f8      	bne.n	113fa <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11408:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1140c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11410:	f3bf 8f5b 	dmb	ish
   11414:	e853 1f00 	ldrex	r1, [r3]
   11418:	4311      	orrs	r1, r2
   1141a:	e843 1000 	strex	r0, r1, [r3]
   1141e:	2800      	cmp	r0, #0
   11420:	d1f8      	bne.n	11414 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   11422:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   11426:	2101      	movs	r1, #1
    m_mode = newMode;
   11428:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   1142c:	4620      	mov	r0, r4
   1142e:	f7ff fd73 	bl	10f18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11432:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   11436:	2d00      	cmp	r5, #0
   11438:	d0d5      	beq.n	113e6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   1143a:	4620      	mov	r0, r4
   1143c:	f7ff fd5a 	bl	10ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11440:	4628      	mov	r0, r5
   11442:	bd38      	pop	{r3, r4, r5, pc}
   11444:	4b2d      	ldr	r3, [pc, #180]	; (114fc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11446:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1144a:	f3bf 8f5b 	dmb	ish
   1144e:	e853 1f00 	ldrex	r1, [r3]
   11452:	4311      	orrs	r1, r2
   11454:	e843 1000 	strex	r0, r1, [r3]
   11458:	2800      	cmp	r0, #0
   1145a:	d1f8      	bne.n	1144e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   1145c:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11460:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11464:	f3bf 8f5b 	dmb	ish
   11468:	43d2      	mvns	r2, r2
   1146a:	e853 1f00 	ldrex	r1, [r3]
   1146e:	4011      	ands	r1, r2
   11470:	e843 1000 	strex	r0, r1, [r3]
   11474:	2800      	cmp	r0, #0
   11476:	d1f8      	bne.n	1146a <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   11478:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   1147c:	2100      	movs	r1, #0
   1147e:	e7d3      	b.n	11428 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11480:	2201      	movs	r2, #1
   11482:	2100      	movs	r1, #0
   11484:	4620      	mov	r0, r4
   11486:	f7ff fd8d 	bl	10fa4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   1148a:	2101      	movs	r1, #1
   1148c:	4620      	mov	r0, r4
   1148e:	f7ff fd4f 	bl	10f30 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11492:	6823      	ldr	r3, [r4, #0]
   11494:	4a1a      	ldr	r2, [pc, #104]	; (11500 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   11496:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11498:	491a      	ldr	r1, [pc, #104]	; (11504 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   1149a:	4293      	cmp	r3, r2
   1149c:	4620      	mov	r0, r4
   1149e:	d1a5      	bne.n	113ec <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   114a0:	f7fe fdd4 	bl	1004c <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   114a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   114a8:	2b00      	cmp	r3, #0
   114aa:	d0a0      	beq.n	113ee <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   114ac:	4620      	mov	r0, r4
   114ae:	f7ff fd21 	bl	10ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   114b2:	e79c      	b.n	113ee <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   114b4:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   114b8:	4b10      	ldr	r3, [pc, #64]	; (114fc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   114ba:	f3bf 8f5b 	dmb	ish
   114be:	43d2      	mvns	r2, r2
   114c0:	e853 1f00 	ldrex	r1, [r3]
   114c4:	4011      	ands	r1, r2
   114c6:	e843 1000 	strex	r0, r1, [r3]
   114ca:	2800      	cmp	r0, #0
   114cc:	d1f8      	bne.n	114c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   114ce:	f3bf 8f5b 	dmb	ish
   114d2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   114d6:	f3bf 8f5b 	dmb	ish
   114da:	43d2      	mvns	r2, r2
   114dc:	e853 1f00 	ldrex	r1, [r3]
   114e0:	4011      	ands	r1, r2
   114e2:	e843 1000 	strex	r0, r1, [r3]
   114e6:	2800      	cmp	r0, #0
   114e8:	d0c6      	beq.n	11478 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   114ea:	e7f7      	b.n	114dc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   114ec:	4b06      	ldr	r3, [pc, #24]	; (11508 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   114ee:	6818      	ldr	r0, [r3, #0]
   114f0:	f7fe fae2 	bl	fab8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   114f4:	e76e      	b.n	113d4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   114f6:	2500      	movs	r5, #0
   114f8:	e776      	b.n	113e8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   114fa:	bf00      	nop
   114fc:	20001ad4 	.word	0x20001ad4
   11500:	000113a5 	.word	0x000113a5
   11504:	0007a120 	.word	0x0007a120
   11508:	20001f0c 	.word	0x20001f0c

0001150c <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   1150c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11510:	f7ff bf56 	b.w	113c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

00011514 <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   11514:	b510      	push	{r4, lr}
   11516:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11518:	f7fe fcfa 	bl	ff10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1151c:	b100      	cbz	r0, 11520 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   1151e:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11520:	4620      	mov	r0, r4
   11522:	f7ff fc8f 	bl	10e44 <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   11526:	4620      	mov	r0, r4
   11528:	f7ff fce4 	bl	10ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1152c:	4b0c      	ldr	r3, [pc, #48]	; (11560 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   1152e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11532:	f3bf 8f5b 	dmb	ish
   11536:	e853 1f00 	ldrex	r1, [r3]
   1153a:	4311      	orrs	r1, r2
   1153c:	e843 1000 	strex	r0, r1, [r3]
   11540:	2800      	cmp	r0, #0
   11542:	d1f8      	bne.n	11536 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   11544:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11548:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1154c:	2b10      	cmp	r3, #16
   1154e:	d1e6      	bne.n	1151e <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11550:	4b04      	ldr	r3, [pc, #16]	; (11564 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   11552:	4621      	mov	r1, r4
   11554:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   11556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   1155a:	f7fe bacd 	b.w	faf8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1155e:	bf00      	nop
   11560:	20001ad4 	.word	0x20001ad4
   11564:	20001f0c 	.word	0x20001f0c

00011568 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11568:	b510      	push	{r4, lr}
   1156a:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   1156c:	f7fe fcd0 	bl	ff10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11570:	b1a8      	cbz	r0, 1159e <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   11572:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11576:	2b10      	cmp	r3, #16
   11578:	d012      	beq.n	115a0 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   1157a:	4620      	mov	r0, r4
   1157c:	f7fe fe10 	bl	101a0 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11580:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11584:	4a09      	ldr	r2, [pc, #36]	; (115ac <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   11586:	f3bf 8f5b 	dmb	ish
   1158a:	43db      	mvns	r3, r3
   1158c:	e852 1f00 	ldrex	r1, [r2]
   11590:	4019      	ands	r1, r3
   11592:	e842 1000 	strex	r0, r1, [r2]
   11596:	2800      	cmp	r0, #0
   11598:	d1f8      	bne.n	1158c <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   1159a:	f3bf 8f5b 	dmb	ish
   1159e:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   115a0:	4b03      	ldr	r3, [pc, #12]	; (115b0 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   115a2:	6818      	ldr	r0, [r3, #0]
   115a4:	f7fe fa88 	bl	fab8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   115a8:	e7e7      	b.n	1157a <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   115aa:	bf00      	nop
   115ac:	20001ad4 	.word	0x20001ad4
   115b0:	20001f0c 	.word	0x20001f0c

000115b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   115b4:	6803      	ldr	r3, [r0, #0]
   115b6:	4a37      	ldr	r2, [pc, #220]	; (11694 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   115b8:	68db      	ldr	r3, [r3, #12]
   115ba:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   115bc:	b510      	push	{r4, lr}
   115be:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   115c0:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   115c4:	d150      	bne.n	11668 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   115c6:	f7fe fca3 	bl	ff10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   115ca:	b1a8      	cbz	r0, 115f8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   115cc:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   115d0:	2b10      	cmp	r3, #16
   115d2:	d059      	beq.n	11688 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   115d4:	4620      	mov	r0, r4
   115d6:	f7fe fde3 	bl	101a0 <_ZN9ClearCore10SerialBase9PortCloseEv>
   115da:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   115de:	4a2e      	ldr	r2, [pc, #184]	; (11698 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   115e0:	f3bf 8f5b 	dmb	ish
   115e4:	43db      	mvns	r3, r3
   115e6:	e852 1f00 	ldrex	r1, [r2]
   115ea:	4019      	ands	r1, r3
   115ec:	e842 1000 	strex	r0, r1, [r2]
   115f0:	2800      	cmp	r0, #0
   115f2:	d1f8      	bne.n	115e6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   115f4:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   115f8:	6823      	ldr	r3, [r4, #0]
   115fa:	4a28      	ldr	r2, [pc, #160]	; (1169c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   115fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   115fe:	4293      	cmp	r3, r2
   11600:	d138      	bne.n	11674 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   11602:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11606:	2b0d      	cmp	r3, #13
   11608:	d028      	beq.n	1165c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   1160a:	2b10      	cmp	r3, #16
   1160c:	d037      	beq.n	1167e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   1160e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11612:	4b21      	ldr	r3, [pc, #132]	; (11698 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11614:	f3bf 8f5b 	dmb	ish
   11618:	43d2      	mvns	r2, r2
   1161a:	e853 1f00 	ldrex	r1, [r3]
   1161e:	4011      	ands	r1, r2
   11620:	e843 1000 	strex	r0, r1, [r3]
   11624:	2800      	cmp	r0, #0
   11626:	d1f8      	bne.n	1161a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11628:	f3bf 8f5b 	dmb	ish
   1162c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11630:	f3bf 8f5b 	dmb	ish
   11634:	43d2      	mvns	r2, r2
   11636:	e853 1f00 	ldrex	r1, [r3]
   1163a:	4011      	ands	r1, r2
   1163c:	e843 1000 	strex	r0, r1, [r3]
   11640:	2800      	cmp	r0, #0
   11642:	d1f8      	bne.n	11636 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   11644:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11648:	230d      	movs	r3, #13
   1164a:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   1164e:	4620      	mov	r0, r4
   11650:	2100      	movs	r1, #0
   11652:	f7ff fc61 	bl	10f18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11656:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1165a:	b903      	cbnz	r3, 1165e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   1165c:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   1165e:	4620      	mov	r0, r4
}
   11660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   11664:	f7ff bc46 	b.w	10ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   11668:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   1166a:	6823      	ldr	r3, [r4, #0]
   1166c:	4a0b      	ldr	r2, [pc, #44]	; (1169c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   1166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11670:	4293      	cmp	r3, r2
   11672:	d0c6      	beq.n	11602 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   11674:	4620      	mov	r0, r4
   11676:	210d      	movs	r1, #13
}
   11678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   1167c:	4718      	bx	r3
        CcioMgr.LinkClose();
   1167e:	4b08      	ldr	r3, [pc, #32]	; (116a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11680:	6818      	ldr	r0, [r3, #0]
   11682:	f7fe fa19 	bl	fab8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11686:	e7c2      	b.n	1160e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   11688:	4b05      	ldr	r3, [pc, #20]	; (116a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   1168a:	6818      	ldr	r0, [r3, #0]
   1168c:	f7fe fa14 	bl	fab8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11690:	e7a0      	b.n	115d4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   11692:	bf00      	nop
   11694:	00011569 	.word	0x00011569
   11698:	20001ad4 	.word	0x20001ad4
   1169c:	000113c1 	.word	0x000113c1
   116a0:	20001f0c 	.word	0x20001f0c

000116a4 <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   116a4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   116a8:	f7ff bf84 	b.w	115b4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

000116ac <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   116ac:	b510      	push	{r4, lr}
            PortOpen();
   116ae:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   116b0:	4604      	mov	r4, r0
        if (newState) {
   116b2:	bb09      	cbnz	r1, 116f8 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   116b4:	4a26      	ldr	r2, [pc, #152]	; (11750 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   116b6:	68db      	ldr	r3, [r3, #12]
   116b8:	4293      	cmp	r3, r2
   116ba:	d11a      	bne.n	116f2 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   116bc:	f7fe fc28 	bl	ff10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   116c0:	b1a8      	cbz	r0, 116ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   116c2:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   116c6:	2b10      	cmp	r3, #16
   116c8:	d03c      	beq.n	11744 <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   116ca:	4620      	mov	r0, r4
   116cc:	f7fe fd68 	bl	101a0 <_ZN9ClearCore10SerialBase9PortCloseEv>
   116d0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   116d4:	4a1f      	ldr	r2, [pc, #124]	; (11754 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   116d6:	f3bf 8f5b 	dmb	ish
   116da:	43db      	mvns	r3, r3
   116dc:	e852 1f00 	ldrex	r1, [r2]
   116e0:	4019      	ands	r1, r3
   116e2:	e842 1000 	strex	r0, r1, [r2]
   116e6:	2800      	cmp	r0, #0
   116e8:	d1f8      	bne.n	116dc <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   116ea:	f3bf 8f5b 	dmb	ish
    }
   116ee:	2001      	movs	r0, #1
   116f0:	bd10      	pop	{r4, pc}
            PortClose();
   116f2:	4798      	blx	r3
    }
   116f4:	2001      	movs	r0, #1
   116f6:	bd10      	pop	{r4, pc}
   116f8:	4a17      	ldr	r2, [pc, #92]	; (11758 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   116fa:	689b      	ldr	r3, [r3, #8]
   116fc:	4293      	cmp	r3, r2
   116fe:	d1f8      	bne.n	116f2 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11700:	f7fe fc06 	bl	ff10 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11704:	2800      	cmp	r0, #0
   11706:	d1f2      	bne.n	116ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11708:	4620      	mov	r0, r4
   1170a:	f7ff fb9b 	bl	10e44 <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   1170e:	4620      	mov	r0, r4
   11710:	f7ff fbf0 	bl	10ef4 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11714:	4b0f      	ldr	r3, [pc, #60]	; (11754 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   11716:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1171a:	f3bf 8f5b 	dmb	ish
   1171e:	e853 1f00 	ldrex	r1, [r3]
   11722:	4311      	orrs	r1, r2
   11724:	e843 1000 	strex	r0, r1, [r3]
   11728:	2800      	cmp	r0, #0
   1172a:	d1f8      	bne.n	1171e <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   1172c:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11730:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11734:	2b10      	cmp	r3, #16
   11736:	d1da      	bne.n	116ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11738:	4b08      	ldr	r3, [pc, #32]	; (1175c <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1173a:	4621      	mov	r1, r4
   1173c:	6818      	ldr	r0, [r3, #0]
   1173e:	f7fe f9db 	bl	faf8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11742:	e7d4      	b.n	116ee <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   11744:	4b05      	ldr	r3, [pc, #20]	; (1175c <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11746:	6818      	ldr	r0, [r3, #0]
   11748:	f7fe f9b6 	bl	fab8 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1174c:	e7bd      	b.n	116ca <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   1174e:	bf00      	nop
   11750:	00011569 	.word	0x00011569
   11754:	20001ad4 	.word	0x20001ad4
   11758:	00011515 	.word	0x00011515
   1175c:	20001f0c 	.word	0x20001f0c

00011760 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11760:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11764:	e7a2      	b.n	116ac <_ZN9ClearCore12SerialDriver5StateEs>
   11766:	bf00      	nop

00011768 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11768:	7980      	ldrb	r0, [r0, #6]
   1176a:	4770      	bx	lr

0001176c <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   1176c:	f1a1 0004 	sub.w	r0, r1, #4
   11770:	fab0 f080 	clz	r0, r0
   11774:	0940      	lsrs	r0, r0, #5
   11776:	4770      	bx	lr

00011778 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11778:	2002      	movs	r0, #2
   1177a:	4770      	bx	lr

0001177c <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   1177c:	2001      	movs	r0, #1
   1177e:	4770      	bx	lr

00011780 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11780:	2000      	movs	r0, #0
   11782:	4770      	bx	lr

00011784 <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   11784:	4770      	bx	lr
   11786:	bf00      	nop

00011788 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11788:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   1178a:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   1178c:	7183      	strb	r3, [r0, #6]
   1178e:	4770      	bx	lr

00011790 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11790:	4b04      	ldr	r3, [pc, #16]	; (117a4 <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   11792:	681a      	ldr	r2, [r3, #0]
   11794:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11798:	6883      	ldr	r3, [r0, #8]
   1179a:	421a      	tst	r2, r3
}
   1179c:	bf14      	ite	ne
   1179e:	2001      	movne	r0, #1
   117a0:	2000      	moveq	r0, #0
   117a2:	4770      	bx	lr
   117a4:	20001ad4 	.word	0x20001ad4

000117a8 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   117a8:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   117aa:	b971      	cbnz	r1, 117ca <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   117ac:	f3bf 8f5b 	dmb	ish
   117b0:	4a0d      	ldr	r2, [pc, #52]	; (117e8 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   117b2:	43db      	mvns	r3, r3
   117b4:	e852 1f00 	ldrex	r1, [r2]
   117b8:	4019      	ands	r1, r3
   117ba:	e842 1000 	strex	r0, r1, [r2]
   117be:	2800      	cmp	r0, #0
   117c0:	d1f8      	bne.n	117b4 <_ZN9ClearCore9LedDriver5StateEs+0xc>
   117c2:	f3bf 8f5b 	dmb	ish
    return true;
}
   117c6:	2001      	movs	r0, #1
   117c8:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   117ca:	4a07      	ldr	r2, [pc, #28]	; (117e8 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   117cc:	f3bf 8f5b 	dmb	ish
   117d0:	e852 1f00 	ldrex	r1, [r2]
   117d4:	4319      	orrs	r1, r3
   117d6:	e842 1000 	strex	r0, r1, [r2]
   117da:	2800      	cmp	r0, #0
   117dc:	d1f8      	bne.n	117d0 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   117de:	f3bf 8f5b 	dmb	ish
   117e2:	2001      	movs	r0, #1
   117e4:	4770      	bx	lr
   117e6:	bf00      	nop
   117e8:	20001ad4 	.word	0x20001ad4

000117ec <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   117ec:	b538      	push	{r3, r4, r5, lr}
   117ee:	4604      	mov	r4, r0
   117f0:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   117f2:	f7fc ff13 	bl	e61c <_ZN9ClearCore9ConnectorC1Ev>
   117f6:	4b02      	ldr	r3, [pc, #8]	; (11800 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   117f8:	60a5      	str	r5, [r4, #8]
   117fa:	6023      	str	r3, [r4, #0]
   117fc:	4620      	mov	r0, r4
   117fe:	bd38      	pop	{r3, r4, r5, pc}
   11800:	0002376c 	.word	0x0002376c

00011804 <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   11804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   11806:	4d19      	ldr	r5, [pc, #100]	; (1186c <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11808:	682c      	ldr	r4, [r5, #0]
   1180a:	f014 0401 	ands.w	r4, r4, #1
   1180e:	d002      	beq.n	11816 <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11810:	4b17      	ldr	r3, [pc, #92]	; (11870 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   11812:	6818      	ldr	r0, [r3, #0]
   11814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11816:	2044      	movs	r0, #68	; 0x44
   11818:	f001 fe66 	bl	134e8 <_Znwj>
   1181c:	4a14      	ldr	r2, [pc, #80]	; (11870 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   1181e:	4f15      	ldr	r7, [pc, #84]	; (11874 <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11820:	4e15      	ldr	r6, [pc, #84]	; (11878 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   11822:	4916      	ldr	r1, [pc, #88]	; (1187c <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   11824:	6004      	str	r4, [r0, #0]
   11826:	2301      	movs	r3, #1
   11828:	6044      	str	r4, [r0, #4]
   1182a:	6084      	str	r4, [r0, #8]
   1182c:	60c4      	str	r4, [r0, #12]
   1182e:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11830:	6144      	str	r4, [r0, #20]
   11832:	6184      	str	r4, [r0, #24]
   11834:	61c4      	str	r4, [r0, #28]
   11836:	6244      	str	r4, [r0, #36]	; 0x24
   11838:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   1183c:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   11840:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   11844:	6204      	str	r4, [r0, #32]
   11846:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   1184a:	8584      	strh	r4, [r0, #44]	; 0x2c
   1184c:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1184e:	8604      	strh	r4, [r0, #48]	; 0x30
   11850:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   11854:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11858:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   1185c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11860:	6347      	str	r7, [r0, #52]	; 0x34
   11862:	6386      	str	r6, [r0, #56]	; 0x38
   11864:	63c1      	str	r1, [r0, #60]	; 0x3c
   11866:	6010      	str	r0, [r2, #0]
   11868:	602b      	str	r3, [r5, #0]
    return *instance;
}
   1186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1186c:	20001f24 	.word	0x20001f24
   11870:	20001f2c 	.word	0x20001f2c
   11874:	09c400fa 	.word	0x09c400fa
   11878:	2cec1388 	.word	0x2cec1388
   1187c:	09c41388 	.word	0x09c41388

00011880 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11880:	6840      	ldr	r0, [r0, #4]
   11882:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   11886:	4008      	ands	r0, r1
   11888:	4770      	bx	lr
   1188a:	bf00      	nop

0001188c <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   1188c:	6840      	ldr	r0, [r0, #4]
   1188e:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   11892:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11896:	4770      	bx	lr

00011898 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11898:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   1189a:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   1189c:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   1189e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   118a2:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   118a4:	4802      	ldr	r0, [pc, #8]	; (118b0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   118a6:	f7f9 f9cd 	bl	ac44 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   118aa:	2001      	movs	r0, #1
   118ac:	bd08      	pop	{r3, pc}
   118ae:	bf00      	nop
   118b0:	200019e0 	.word	0x200019e0

000118b4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   118b4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   118b8:	b951      	cbnz	r1, 118d0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   118ba:	4b17      	ldr	r3, [pc, #92]	; (11918 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   118bc:	2204      	movs	r2, #4
   118be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   118c2:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   118c6:	f042 0201 	orr.w	r2, r2, #1
   118ca:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   118ce:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   118d0:	1d03      	adds	r3, r0, #4
   118d2:	f3bf 8f5b 	dmb	ish
   118d6:	e853 2f00 	ldrex	r2, [r3]
   118da:	f042 0208 	orr.w	r2, r2, #8
   118de:	e843 2100 	strex	r1, r2, [r3]
   118e2:	2900      	cmp	r1, #0
   118e4:	d1f7      	bne.n	118d6 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   118e6:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   118ea:	f3bf 8f5b 	dmb	ish
   118ee:	300c      	adds	r0, #12
   118f0:	e850 3f00 	ldrex	r3, [r0]
   118f4:	f043 0308 	orr.w	r3, r3, #8
   118f8:	e840 3200 	strex	r2, r3, [r0]
   118fc:	2a00      	cmp	r2, #0
   118fe:	d1f7      	bne.n	118f0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11900:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11904:	4b04      	ldr	r3, [pc, #16]	; (11918 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11906:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11908:	2102      	movs	r1, #2
   1190a:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   1190e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   11912:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11916:	4770      	bx	lr
   11918:	41008000 	.word	0x41008000

0001191c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   1191c:	4401      	add	r1, r0
   1191e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   11922:	431a      	orrs	r2, r3
   11924:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11928:	4770      	bx	lr
   1192a:	bf00      	nop

0001192c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   1192c:	b2cb      	uxtb	r3, r1
   1192e:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11930:	b510      	push	{r4, lr}
   11932:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   11934:	d505      	bpl.n	11942 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   11936:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   1193a:	f042 0202 	orr.w	r2, r2, #2
   1193e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   11942:	0798      	lsls	r0, r3, #30
   11944:	d505      	bpl.n	11952 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   11946:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1194a:	f042 0201 	orr.w	r2, r2, #1
   1194e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   11952:	075a      	lsls	r2, r3, #29
   11954:	d505      	bpl.n	11962 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   11956:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1195a:	f042 0201 	orr.w	r2, r2, #1
   1195e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   11962:	06d8      	lsls	r0, r3, #27
   11964:	d505      	bpl.n	11972 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   11966:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1196a:	f042 0204 	orr.w	r2, r2, #4
   1196e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   11972:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11976:	06ca      	lsls	r2, r1, #27
   11978:	d505      	bpl.n	11986 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   1197a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1197e:	f042 0202 	orr.w	r2, r2, #2
   11982:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   11986:	4a14      	ldr	r2, [pc, #80]	; (119d8 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11988:	6812      	ldr	r2, [r2, #0]
   1198a:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   1198e:	b112      	cbz	r2, 11996 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11990:	f011 0f0c 	tst.w	r1, #12
   11994:	d118      	bne.n	119c8 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   11996:	061b      	lsls	r3, r3, #24
   11998:	d505      	bpl.n	119a6 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   1199a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1199e:	f043 0308 	orr.w	r3, r3, #8
   119a2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   119a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   119aa:	f001 fc29 	bl	13200 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   119ae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   119b2:	4a0a      	ldr	r2, [pc, #40]	; (119dc <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   119b4:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   119b8:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   119bc:	3300      	adds	r3, #0
   119be:	bf18      	it	ne
   119c0:	2301      	movne	r3, #1
   119c2:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   119c6:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   119c8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   119cc:	f042 0204 	orr.w	r2, r2, #4
   119d0:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   119d4:	e7df      	b.n	11996 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   119d6:	bf00      	nop
   119d8:	20001c00 	.word	0x20001c00
   119dc:	200019e0 	.word	0x200019e0

000119e0 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   119e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119e4:	b082      	sub	sp, #8
            reg = 0;
   119e6:	2300      	movs	r3, #0
   119e8:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   119ea:	4b98      	ldr	r3, [pc, #608]	; (11c4c <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   119ec:	6844      	ldr	r4, [r0, #4]
   119ee:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   119f2:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   119f4:	4f96      	ldr	r7, [pc, #600]	; (11c50 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   119f6:	8a13      	ldrh	r3, [r2, #16]
   119f8:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11c70 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   119fc:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   119fe:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11a00:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11a02:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11a04:	bf4c      	ite	mi
   11a06:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11a0a:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11a0e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11a10:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11a14:	4e8f      	ldr	r6, [pc, #572]	; (11c54 <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11a16:	bfd4      	ite	le
   11a18:	2300      	movle	r3, #0
   11a1a:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11a1c:	f363 0000 	bfi	r0, r3, #0, #1
   11a20:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11a24:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11a26:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11a28:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11a2a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11a2c:	bf4c      	ite	mi
   11a2e:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11a32:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   11a36:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11a38:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11a3c:	bfcc      	ite	gt
   11a3e:	2300      	movgt	r3, #0
   11a40:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   11a42:	f363 0041 	bfi	r0, r3, #1, #1
   11a46:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11a4a:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   11a4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11a50:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11a52:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11a54:	bf4c      	ite	mi
   11a56:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11a5a:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   11a5e:	428b      	cmp	r3, r1
   11a60:	bfcc      	ite	gt
   11a62:	2300      	movgt	r3, #0
   11a64:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   11a66:	f363 1004 	bfi	r0, r3, #4, #1
   11a6a:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11a72:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11a76:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   11a7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11a7e:	4976      	ldr	r1, [pc, #472]	; (11c58 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11a80:	4f76      	ldr	r7, [pc, #472]	; (11c5c <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11a82:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11a84:	43db      	mvns	r3, r3
   11a86:	b2c0      	uxtb	r0, r0
   11a88:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11a8c:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11a90:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11a92:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11a96:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   11a9a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11a9e:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11aa2:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11aa6:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   11aaa:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11aac:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   11ab0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11ab4:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11ab8:	bf18      	it	ne
   11aba:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11abc:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11ac0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   11ac4:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11ac8:	f083 0301 	eor.w	r3, r3, #1
   11acc:	f363 0241 	bfi	r2, r3, #1, #1
   11ad0:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11ad4:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11ad6:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11ada:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11ade:	b2d2      	uxtb	r2, r2
   11ae0:	f361 0282 	bfi	r2, r1, #2, #1
   11ae4:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11ae8:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11aec:	4a5c      	ldr	r2, [pc, #368]	; (11c60 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11aee:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11af2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11af6:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11afa:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11afe:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11b00:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11b04:	4857      	ldr	r0, [pc, #348]	; (11c64 <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11b06:	f88d 1004 	strb.w	r1, [sp, #4]
   11b0a:	bf18      	it	ne
   11b0c:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11b0e:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   11b12:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11b16:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b18:	4e53      	ldr	r6, [pc, #332]	; (11c68 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11b1a:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11b1e:	f362 1345 	bfi	r3, r2, #5, #1
   11b22:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   11b26:	4628      	mov	r0, r5
   11b28:	9901      	ldr	r1, [sp, #4]
   11b2a:	f7ff feff 	bl	1192c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b2e:	6830      	ldr	r0, [r6, #0]
   11b30:	6803      	ldr	r3, [r0, #0]
   11b32:	681b      	ldr	r3, [r3, #0]
   11b34:	4543      	cmp	r3, r8
   11b36:	f040 8084 	bne.w	11c42 <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11b3a:	7980      	ldrb	r0, [r0, #6]
   11b3c:	2804      	cmp	r0, #4
   11b3e:	d00c      	beq.n	11b5a <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11b40:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11b44:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11b48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11b4c:	bf14      	ite	ne
   11b4e:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11b52:	f023 0308 	biceq.w	r3, r3, #8
   11b56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b5a:	6870      	ldr	r0, [r6, #4]
   11b5c:	6803      	ldr	r3, [r0, #0]
   11b5e:	681b      	ldr	r3, [r3, #0]
   11b60:	4543      	cmp	r3, r8
   11b62:	d170      	bne.n	11c46 <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   11b64:	7980      	ldrb	r0, [r0, #6]
   11b66:	2804      	cmp	r0, #4
   11b68:	d00c      	beq.n	11b84 <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11b6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11b6e:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11b72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11b76:	bf14      	ite	ne
   11b78:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11b7c:	f023 0304 	biceq.w	r3, r3, #4
   11b80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11b84:	9a01      	ldr	r2, [sp, #4]
   11b86:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11b8a:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11b8c:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11b8e:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   11b92:	f105 0210 	add.w	r2, r5, #16
   11b96:	f3bf 8f5b 	dmb	ish
   11b9a:	e852 1f00 	ldrex	r1, [r2]
   11b9e:	4319      	orrs	r1, r3
   11ba0:	e842 1000 	strex	r0, r1, [r2]
   11ba4:	2800      	cmp	r0, #0
   11ba6:	d1f8      	bne.n	11b9a <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11ba8:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11bac:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11bae:	f3bf 8f5b 	dmb	ish
   11bb2:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11bb6:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11bba:	e853 2f00 	ldrex	r2, [r3]
   11bbe:	4322      	orrs	r2, r4
   11bc0:	e843 2100 	strex	r1, r2, [r3]
   11bc4:	2900      	cmp	r1, #0
   11bc6:	d1f8      	bne.n	11bba <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11bc8:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11bcc:	f105 0308 	add.w	r3, r5, #8
   11bd0:	9a01      	ldr	r2, [sp, #4]
   11bd2:	f3bf 8f5b 	dmb	ish
   11bd6:	e853 1f00 	ldrex	r1, [r3]
   11bda:	4311      	orrs	r1, r2
   11bdc:	e843 1000 	strex	r0, r1, [r3]
   11be0:	2800      	cmp	r0, #0
   11be2:	d1f8      	bne.n	11bd6 <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11be4:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11be8:	9b01      	ldr	r3, [sp, #4]
   11bea:	f3bf 8f5b 	dmb	ish
   11bee:	e855 2f00 	ldrex	r2, [r5]
   11bf2:	431a      	orrs	r2, r3
   11bf4:	e845 2100 	strex	r1, r2, [r5]
   11bf8:	2900      	cmp	r1, #0
   11bfa:	d1f8      	bne.n	11bee <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11bfc:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11c00:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11c02:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11c06:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11c0a:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11c0e:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11c10:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11c14:	d012      	beq.n	11c3c <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11c16:	4c15      	ldr	r4, [pc, #84]	; (11c6c <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11c18:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11c1c:	f854 0b04 	ldr.w	r0, [r4], #4
   11c20:	f7f3 f9f6 	bl	5010 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11c24:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11c26:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11c2a:	d1f7      	bne.n	11c1c <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11c2c:	6830      	ldr	r0, [r6, #0]
   11c2e:	f7fc fdbb 	bl	e7a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11c32:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11c36:	6870      	ldr	r0, [r6, #4]
   11c38:	f7fc fdb6 	bl	e7a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11c3c:	b002      	add	sp, #8
   11c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11c42:	4798      	blx	r3
   11c44:	e77a      	b.n	11b3c <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11c46:	4798      	blx	r3
   11c48:	e78d      	b.n	11b66 <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11c4a:	bf00      	nop
   11c4c:	20001e0c 	.word	0x20001e0c
   11c50:	41008000 	.word	0x41008000
   11c54:	20001c00 	.word	0x20001c00
   11c58:	20001f0c 	.word	0x20001f0c
   11c5c:	200019e0 	.word	0x200019e0
   11c60:	20001894 	.word	0x20001894
   11c64:	20001f34 	.word	0x20001f34
   11c68:	00023010 	.word	0x00023010
   11c6c:	00023018 	.word	0x00023018
   11c70:	0000e731 	.word	0x0000e731

00011c74 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11c74:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11c76:	b94a      	cbnz	r2, 11c8c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11c78:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11c7c:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11c7e:	6983      	ldr	r3, [r0, #24]
   11c80:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11c82:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11c84:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11c86:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11c88:	6181      	str	r1, [r0, #24]
   11c8a:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11c8c:	4319      	orrs	r1, r3
   11c8e:	e7f5      	b.n	11c7c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011c90 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11c90:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11c92:	f7ff fdb7 	bl	11804 <_ZN9ClearCore13StatusManager8InstanceEv>
   11c96:	4b01      	ldr	r3, [pc, #4]	; (11c9c <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11c98:	6018      	str	r0, [r3, #0]
   11c9a:	bd08      	pop	{r3, pc}
   11c9c:	20001f28 	.word	0x20001f28

00011ca0 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ca0:	b530      	push	{r4, r5, lr}
   11ca2:	b083      	sub	sp, #12
   11ca4:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11ca8:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11caa:	9401      	str	r4, [sp, #4]
   11cac:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11cae:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11cb0:	f7ff f8d4 	bl	10e5c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11cb4:	4b04      	ldr	r3, [pc, #16]	; (11cc8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11cb6:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11cb8:	4620      	mov	r0, r4
   11cba:	2100      	movs	r1, #0
   11cbc:	f7ff f92c 	bl	10f18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11cc0:	4620      	mov	r0, r4
   11cc2:	b003      	add	sp, #12
   11cc4:	bd30      	pop	{r4, r5, pc}
   11cc6:	bf00      	nop
   11cc8:	00022fbc 	.word	0x00022fbc

00011ccc <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11ccc:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11cce:	4d0f      	ldr	r5, [pc, #60]	; (11d0c <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11cd0:	682b      	ldr	r3, [r5, #0]
   11cd2:	f013 0401 	ands.w	r4, r3, #1
   11cd6:	d002      	beq.n	11cde <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11cd8:	4b0d      	ldr	r3, [pc, #52]	; (11d10 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11cda:	6818      	ldr	r0, [r3, #0]
   11cdc:	bd38      	pop	{r3, r4, r5, pc}
   11cde:	f44f 7002 	mov.w	r0, #520	; 0x208
   11ce2:	f001 fc01 	bl	134e8 <_Znwj>
   11ce6:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11cec:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11cf0:	4908      	ldr	r1, [pc, #32]	; (11d14 <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11cf2:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11cf6:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11cfa:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11cfe:	f00c fb97 	bl	1e430 <memcpy>
    static NvmManager *instance = new NvmManager();
   11d02:	4903      	ldr	r1, [pc, #12]	; (11d10 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11d04:	2201      	movs	r2, #1
   11d06:	6008      	str	r0, [r1, #0]
   11d08:	602a      	str	r2, [r5, #0]
}
   11d0a:	bd38      	pop	{r3, r4, r5, pc}
   11d0c:	20001f30 	.word	0x20001f30
   11d10:	20001f38 	.word	0x20001f38
   11d14:	00804000 	.word	0x00804000

00011d18 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11d18:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11d1c:	bf9a      	itte	ls
   11d1e:	1840      	addls	r0, r0, r1
   11d20:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11d24:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11d28:	4770      	bx	lr
   11d2a:	bf00      	nop

00011d2c <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11d2c:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11d2e:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11d32:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11d36:	2400      	movs	r4, #0
   11d38:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11d3c:	1c6b      	adds	r3, r5, #1
   11d3e:	bf08      	it	eq
   11d40:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11d44:	d005      	beq.n	11d52 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11d46:	0c2e      	lsrs	r6, r5, #16
   11d48:	4627      	mov	r7, r4
   11d4a:	ea56 0007 	orrs.w	r0, r6, r7
   11d4e:	462b      	mov	r3, r5
   11d50:	d002      	beq.n	11d58 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11d52:	4a07      	ldr	r2, [pc, #28]	; (11d70 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11d54:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11d58:	0a1e      	lsrs	r6, r3, #8
   11d5a:	0e15      	lsrs	r5, r2, #24
   11d5c:	0c14      	lsrs	r4, r2, #16
   11d5e:	0a10      	lsrs	r0, r2, #8
   11d60:	700e      	strb	r6, [r1, #0]
   11d62:	708d      	strb	r5, [r1, #2]
   11d64:	70cc      	strb	r4, [r1, #3]
   11d66:	704b      	strb	r3, [r1, #1]
   11d68:	714a      	strb	r2, [r1, #5]
   11d6a:	7108      	strb	r0, [r1, #4]
    }
}
   11d6c:	bcf0      	pop	{r4, r5, r6, r7}
   11d6e:	4770      	bx	lr
   11d70:	10b00000 	.word	0x10b00000

00011d74 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11d74:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11d76:	f7ff ffa9 	bl	11ccc <_ZN9ClearCore10NvmManager8InstanceEv>
   11d7a:	4b01      	ldr	r3, [pc, #4]	; (11d80 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11d7c:	6018      	str	r0, [r3, #0]
   11d7e:	bd08      	pop	{r3, pc}
   11d80:	20001f34 	.word	0x20001f34

00011d84 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11d84:	2000      	movs	r0, #0
   11d86:	4770      	bx	lr

00011d88 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d8c:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11d8e:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11d90:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11d92:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11d96:	2900      	cmp	r1, #0
   11d98:	d04f      	beq.n	11e3a <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11d9a:	4b55      	ldr	r3, [pc, #340]	; (11ef0 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d9c:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11da0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11da4:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11da8:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11daa:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11dac:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11db0:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11db2:	f000 8095 	beq.w	11ee0 <_usb_d_dev_in_next+0x158>
   11db6:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11dba:	f895 c013 	ldrb.w	ip, [r5, #19]
   11dbe:	401a      	ands	r2, r3
   11dc0:	b292      	uxth	r2, r2
   11dc2:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11dc6:	0163      	lsls	r3, r4, #5
   11dc8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11dcc:	2602      	movs	r6, #2
   11dce:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11dd2:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11dd4:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11dd6:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11dd8:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11dda:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11ddc:	d235      	bcs.n	11e4a <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11dde:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11de0:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11de4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11de6:	d05e      	beq.n	11ea6 <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11de8:	682b      	ldr	r3, [r5, #0]
   11dea:	68e8      	ldr	r0, [r5, #12]
   11dec:	4576      	cmp	r6, lr
   11dee:	bf28      	it	cs
   11df0:	4676      	movcs	r6, lr
   11df2:	4419      	add	r1, r3
   11df4:	4632      	mov	r2, r6
   11df6:	f00c fb1b 	bl	1e430 <memcpy>
	bank->ADDR.reg          = addr;
   11dfa:	4b3d      	ldr	r3, [pc, #244]	; (11ef0 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11dfc:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11dfe:	0162      	lsls	r2, r4, #5
   11e00:	1899      	adds	r1, r3, r2
   11e02:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11e04:	4413      	add	r3, r2
   11e06:	6959      	ldr	r1, [r3, #20]
   11e08:	f366 010d 	bfi	r1, r6, #0, #14
   11e0c:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11e0e:	6959      	ldr	r1, [r3, #20]
   11e10:	f36f 319b 	bfc	r1, #14, #14
   11e14:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11e16:	b947      	cbnz	r7, 11e2a <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11e18:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11e1c:	f1b8 0f01 	cmp.w	r8, #1
   11e20:	bf14      	ite	ne
   11e22:	224a      	movne	r2, #74	; 0x4a
   11e24:	224e      	moveq	r2, #78	; 0x4e
   11e26:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11e2a:	0164      	lsls	r4, r4, #5
   11e2c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11e30:	2380      	movs	r3, #128	; 0x80
   11e32:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11e3a:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11e3e:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11e42:	f00c 0807 	and.w	r8, ip, #7
   11e46:	460a      	mov	r2, r1
   11e48:	e7c3      	b.n	11dd2 <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11e4a:	f01c 0f10 	tst.w	ip, #16
   11e4e:	d11a      	bne.n	11e86 <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11e50:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11e52:	f1b8 0f01 	cmp.w	r8, #1
   11e56:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11e5a:	bf0c      	ite	eq
   11e5c:	234b      	moveq	r3, #75	; 0x4b
   11e5e:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11e60:	4596      	cmp	lr, r2
   11e62:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11e66:	d02c      	beq.n	11ec2 <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11e68:	28ff      	cmp	r0, #255	; 0xff
   11e6a:	d028      	beq.n	11ebe <_usb_d_dev_in_next+0x136>
   11e6c:	7ceb      	ldrb	r3, [r5, #19]
   11e6e:	065a      	lsls	r2, r3, #25
   11e70:	d525      	bpl.n	11ebe <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11e72:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e76:	491f      	ldr	r1, [pc, #124]	; (11ef4 <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11e78:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e7a:	68aa      	ldr	r2, [r5, #8]
   11e7c:	690b      	ldr	r3, [r1, #16]
}
   11e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e82:	2100      	movs	r1, #0
   11e84:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11e86:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11e88:	4b1b      	ldr	r3, [pc, #108]	; (11ef8 <_usb_d_dev_in_next+0x170>)
   11e8a:	0162      	lsls	r2, r4, #5
   11e8c:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11e8e:	f36f 1104 	bfc	r1, #4, #1
   11e92:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11e94:	6859      	ldr	r1, [r3, #4]
   11e96:	f36f 010d 	bfc	r1, #0, #14
   11e9a:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11e9c:	6859      	ldr	r1, [r3, #4]
   11e9e:	f36f 319b 	bfc	r1, #14, #14
   11ea2:	6059      	str	r1, [r3, #4]
   11ea4:	e7b7      	b.n	11e16 <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11ea6:	4b12      	ldr	r3, [pc, #72]	; (11ef0 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11ea8:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11eaa:	0162      	lsls	r2, r4, #5
   11eac:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11eae:	4401      	add	r1, r0
   11eb0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11eb4:	bf28      	it	cs
   11eb6:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11eba:	6129      	str	r1, [r5, #16]
   11ebc:	e7a2      	b.n	11e04 <_usb_d_dev_in_next+0x7c>
   11ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11ec2:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11ec4:	4a0b      	ldr	r2, [pc, #44]	; (11ef4 <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11ec6:	f36f 1386 	bfc	r3, #6, #1
   11eca:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11ecc:	68d3      	ldr	r3, [r2, #12]
   11ece:	4798      	blx	r3
   11ed0:	2800      	cmp	r0, #0
   11ed2:	d1f4      	bne.n	11ebe <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11ed4:	7ceb      	ldrb	r3, [r5, #19]
   11ed6:	7ca8      	ldrb	r0, [r5, #18]
   11ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11edc:	74eb      	strb	r3, [r5, #19]
   11ede:	e7c3      	b.n	11e68 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ee0:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ee4:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ee8:	f00c 0807 	and.w	r8, ip, #7
   11eec:	e76b      	b.n	11dc6 <_usb_d_dev_in_next+0x3e>
   11eee:	bf00      	nop
   11ef0:	2000222c 	.word	0x2000222c
   11ef4:	20001ffc 	.word	0x20001ffc
   11ef8:	2000223c 	.word	0x2000223c

00011efc <_usb_d_dev_out_next>:
{
   11efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11f00:	7c85      	ldrb	r5, [r0, #18]
{
   11f02:	b083      	sub	sp, #12
   11f04:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f06:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11f08:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f0c:	2900      	cmp	r1, #0
   11f0e:	f000 8085 	beq.w	1201c <_usb_d_dev_out_next+0x120>
   11f12:	4b76      	ldr	r3, [pc, #472]	; (120ec <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f14:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f16:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11f1a:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f20:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f22:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f24:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f26:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f2a:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f2e:	f000 80d7 	beq.w	120e0 <_usb_d_dev_out_next+0x1e4>
   11f32:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f34:	7cc2      	ldrb	r2, [r0, #19]
   11f36:	b2b6      	uxth	r6, r6
   11f38:	ea09 0306 	and.w	r3, r9, r6
   11f3c:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f40:	0169      	lsls	r1, r5, #5
   11f42:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11f46:	2001      	movs	r0, #1
   11f48:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11f4c:	0691      	lsls	r1, r2, #26
   11f4e:	d512      	bpl.n	11f76 <_usb_d_dev_out_next+0x7a>
   11f50:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11f54:	f1be 0f00 	cmp.w	lr, #0
   11f58:	d048      	beq.n	11fec <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11f5a:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11f5c:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11f5e:	ebae 0200 	sub.w	r2, lr, r0
   11f62:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11f64:	429a      	cmp	r2, r3
   11f66:	bf28      	it	cs
   11f68:	461a      	movcs	r2, r3
   11f6a:	6823      	ldr	r3, [r4, #0]
   11f6c:	68e1      	ldr	r1, [r4, #12]
   11f6e:	4418      	add	r0, r3
   11f70:	f00c fa5e 	bl	1e430 <memcpy>
   11f74:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11f76:	6862      	ldr	r2, [r4, #4]
   11f78:	2a00      	cmp	r2, #0
   11f7a:	d036      	beq.n	11fea <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11f7c:	2f00      	cmp	r7, #0
   11f7e:	d15b      	bne.n	12038 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11f80:	68a3      	ldr	r3, [r4, #8]
   11f82:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11f84:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11f86:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11f88:	d960      	bls.n	1204c <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11f8a:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11f8c:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11f8e:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11f90:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11f92:	f140 808b 	bpl.w	120ac <_usb_d_dev_out_next+0x1b0>
   11f96:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11f98:	4954      	ldr	r1, [pc, #336]	; (120ec <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11f9a:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11f9c:	f841 3008 	str.w	r3, [r1, r8]
   11fa0:	42b2      	cmp	r2, r6
   11fa2:	bf28      	it	cs
   11fa4:	4632      	movcs	r2, r6
   11fa6:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11faa:	eb01 0308 	add.w	r3, r1, r8
   11fae:	6858      	ldr	r0, [r3, #4]
   11fb0:	f362 309b 	bfi	r0, r2, #14, #14
   11fb4:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11fb6:	685a      	ldr	r2, [r3, #4]
   11fb8:	f36f 020d 	bfc	r2, #0, #14
   11fbc:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11fbe:	b95f      	cbnz	r7, 11fd8 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11fc0:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11fc4:	bf08      	it	eq
   11fc6:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11fc8:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11fcc:	bf0a      	itet	eq
   11fce:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11fd0:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11fd2:	768f      	strbeq	r7, [r1, #26]
   11fd4:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fd8:	016d      	lsls	r5, r5, #5
   11fda:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11fde:	2340      	movs	r3, #64	; 0x40
   11fe0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11fe4:	b003      	add	sp, #12
   11fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fea:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11fec:	06d6      	lsls	r6, r2, #27
   11fee:	d54b      	bpl.n	12088 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11ff0:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11ff2:	493e      	ldr	r1, [pc, #248]	; (120ec <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11ff4:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11ff6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11ffa:	f043 0320 	orr.w	r3, r3, #32
   11ffe:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   12000:	f841 2008 	str.w	r2, [r1, r8]
   12004:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12008:	8a20      	ldrh	r0, [r4, #16]
   1200a:	685a      	ldr	r2, [r3, #4]
   1200c:	f360 329b 	bfi	r2, r0, #14, #14
   12010:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12012:	685a      	ldr	r2, [r3, #4]
   12014:	f36f 020d 	bfc	r2, #0, #14
   12018:	605a      	str	r2, [r3, #4]
   1201a:	e7d0      	b.n	11fbe <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1201c:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1201e:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12020:	f240 33ff 	movw	r3, #1023	; 0x3ff
   12024:	429e      	cmp	r6, r3
   12026:	d137      	bne.n	12098 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12028:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1202a:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   1202e:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12030:	46b9      	mov	r9, r7
   12032:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12036:	e789      	b.n	11f4c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   12038:	8a21      	ldrh	r1, [r4, #16]
   1203a:	4299      	cmp	r1, r3
   1203c:	d9a0      	bls.n	11f80 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   1203e:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12040:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   12042:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   12046:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   12048:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   1204a:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   1204c:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12050:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   12054:	bf0c      	ite	eq
   12056:	232d      	moveq	r3, #45	; 0x2d
   12058:	2325      	movne	r3, #37	; 0x25
   1205a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   1205e:	b915      	cbnz	r5, 12066 <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   12060:	4b22      	ldr	r3, [pc, #136]	; (120ec <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12062:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   12064:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12066:	7ca0      	ldrb	r0, [r4, #18]
   12068:	28ff      	cmp	r0, #255	; 0xff
   1206a:	d0bb      	beq.n	11fe4 <_usb_d_dev_out_next+0xe8>
   1206c:	7ce3      	ldrb	r3, [r4, #19]
   1206e:	065a      	lsls	r2, r3, #25
   12070:	d5b8      	bpl.n	11fe4 <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   12072:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12076:	491e      	ldr	r1, [pc, #120]	; (120f0 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   12078:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1207a:	690b      	ldr	r3, [r1, #16]
   1207c:	68a2      	ldr	r2, [r4, #8]
   1207e:	2100      	movs	r1, #0
}
   12080:	b003      	add	sp, #12
   12082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12086:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   12088:	b117      	cbz	r7, 12090 <_usb_d_dev_out_next+0x194>
   1208a:	8a22      	ldrh	r2, [r4, #16]
   1208c:	429a      	cmp	r2, r3
   1208e:	d8d6      	bhi.n	1203e <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   12090:	68a3      	ldr	r3, [r4, #8]
   12092:	4453      	add	r3, sl
   12094:	60a3      	str	r3, [r4, #8]
   12096:	e7d9      	b.n	1204c <_usb_d_dev_out_next+0x150>
   12098:	3e01      	subs	r6, #1
   1209a:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1209c:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   120a0:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   120a2:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   120a4:	4689      	mov	r9, r1
   120a6:	ea4f 1845 	mov.w	r8, r5, lsl #5
   120aa:	e74f      	b.n	11f4c <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   120ac:	8a20      	ldrh	r0, [r4, #16]
   120ae:	4282      	cmp	r2, r0
   120b0:	d905      	bls.n	120be <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   120b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   120b6:	d90e      	bls.n	120d6 <_usb_d_dev_out_next+0x1da>
   120b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   120bc:	e005      	b.n	120ca <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   120be:	bf3c      	itt	cc
   120c0:	f041 0120 	orrcc.w	r1, r1, #32
   120c4:	74e1      	strbcc	r1, [r4, #19]
   120c6:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   120ca:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   120cc:	4907      	ldr	r1, [pc, #28]	; (120ec <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   120ce:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   120d0:	f841 3008 	str.w	r3, [r1, r8]
   120d4:	e769      	b.n	11faa <_usb_d_dev_out_next+0xae>
   120d6:	ea22 0206 	bic.w	r2, r2, r6
   120da:	f3c2 020d 	ubfx	r2, r2, #0, #14
   120de:	e7f4      	b.n	120ca <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   120e0:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   120e2:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   120e6:	f002 0b07 	and.w	fp, r2, #7
   120ea:	e729      	b.n	11f40 <_usb_d_dev_out_next+0x44>
   120ec:	2000222c 	.word	0x2000222c
   120f0:	20001ffc 	.word	0x20001ffc

000120f4 <_usb_d_dev_handler>:
{
   120f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   120f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   120fc:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   120fe:	8c16      	ldrh	r6, [r2, #32]
   12100:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   12102:	2e00      	cmp	r6, #0
   12104:	f000 812c 	beq.w	12360 <_usb_d_dev_handler+0x26c>
   12108:	4dc4      	ldr	r5, [pc, #784]	; (1241c <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1210a:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   1210c:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   1210e:	7ca8      	ldrb	r0, [r5, #18]
   12110:	28ff      	cmp	r0, #255	; 0xff
   12112:	d030      	beq.n	12176 <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12114:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12118:	fa07 f203 	lsl.w	r2, r7, r3
   1211c:	4232      	tst	r2, r6
   1211e:	d02a      	beq.n	12176 <_usb_d_dev_handler+0x82>
   12120:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   12124:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12128:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   1212a:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   1212e:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   12132:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12134:	46c1      	mov	r9, r8
	if (flags) {
   12136:	d01e      	beq.n	12176 <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12138:	49b9      	ldr	r1, [pc, #740]	; (12420 <_usb_d_dev_handler+0x32c>)
   1213a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1213e:	eb0a 0c04 	add.w	ip, sl, r4
   12142:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   12146:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   1214a:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   1214e:	2901      	cmp	r1, #1
   12150:	f000 80f4 	beq.w	1233c <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   12154:	f01b 0f80 	tst.w	fp, #128	; 0x80
   12158:	d115      	bne.n	12186 <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   1215a:	f013 0120 	ands.w	r1, r3, #32
   1215e:	d15a      	bne.n	12216 <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12160:	f013 0f04 	tst.w	r3, #4
   12164:	f040 8098 	bne.w	12298 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   12168:	07d9      	lsls	r1, r3, #31
   1216a:	f100 80e2 	bmi.w	12332 <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1216e:	f00b 0107 	and.w	r1, fp, #7
   12172:	2901      	cmp	r1, #1
   12174:	d058      	beq.n	12228 <_usb_d_dev_handler+0x134>
   12176:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   12178:	2c1b      	cmp	r4, #27
   1217a:	f105 0514 	add.w	r5, r5, #20
   1217e:	d1c6      	bne.n	1210e <_usb_d_dev_handler+0x1a>
}
   12180:	b001      	add	sp, #4
   12182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12186:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   1218a:	f040 8143 	bne.w	12414 <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   1218e:	f013 0f08 	tst.w	r3, #8
   12192:	f040 8189 	bne.w	124a8 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   12196:	0799      	lsls	r1, r3, #30
   12198:	f100 8137 	bmi.w	1240a <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1219c:	f00b 0107 	and.w	r1, fp, #7
   121a0:	2901      	cmp	r1, #1
   121a2:	d1e8      	bne.n	12176 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   121a4:	0759      	lsls	r1, r3, #29
   121a6:	f100 8241 	bmi.w	1262c <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   121aa:	06db      	lsls	r3, r3, #27
   121ac:	d5e3      	bpl.n	12176 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   121ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
   121b2:	d011      	beq.n	121d8 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   121b4:	499a      	ldr	r1, [pc, #616]	; (12420 <_usb_d_dev_handler+0x32c>)
   121b6:	eb0a 0304 	add.w	r3, sl, r4
   121ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   121be:	f04f 0e80 	mov.w	lr, #128	; 0x80
   121c2:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   121c6:	f36f 1186 	bfc	r1, #6, #1
   121ca:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   121ce:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   121d0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   121d4:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   121d8:	4b91      	ldr	r3, [pc, #580]	; (12420 <_usb_d_dev_handler+0x32c>)
   121da:	eb0a 0104 	add.w	r1, sl, r4
   121de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   121e2:	4b90      	ldr	r3, [pc, #576]	; (12424 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   121e4:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   121e8:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   121ec:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121f0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   121f4:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   121f8:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121fc:	216f      	movs	r1, #111	; 0x6f
   121fe:	f88e c00a 	strb.w	ip, [lr, #10]
   12202:	f88e c01a 	strb.w	ip, [lr, #26]
   12206:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1220a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   1220e:	4b84      	ldr	r3, [pc, #528]	; (12420 <_usb_d_dev_handler+0x32c>)
   12210:	689b      	ldr	r3, [r3, #8]
   12212:	4798      	blx	r3
   12214:	e7af      	b.n	12176 <_usb_d_dev_handler+0x82>
   12216:	68aa      	ldr	r2, [r5, #8]
   12218:	2320      	movs	r3, #32
   1221a:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   1221e:	4b80      	ldr	r3, [pc, #512]	; (12420 <_usb_d_dev_handler+0x32c>)
   12220:	2101      	movs	r1, #1
   12222:	691b      	ldr	r3, [r3, #16]
   12224:	4798      	blx	r3
   12226:	e7a6      	b.n	12176 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12228:	0719      	lsls	r1, r3, #28
   1222a:	f100 80fd 	bmi.w	12428 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1222e:	06db      	lsls	r3, r3, #27
   12230:	d5a1      	bpl.n	12176 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12232:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12236:	d011      	beq.n	1225c <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12238:	4979      	ldr	r1, [pc, #484]	; (12420 <_usb_d_dev_handler+0x32c>)
   1223a:	eb0a 0304 	add.w	r3, sl, r4
   1223e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12242:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12246:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1224a:	f36f 1186 	bfc	r1, #6, #1
   1224e:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12252:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12254:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12258:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   1225c:	4b70      	ldr	r3, [pc, #448]	; (12420 <_usb_d_dev_handler+0x32c>)
   1225e:	eb0a 0104 	add.w	r1, sl, r4
   12262:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   12266:	4b6f      	ldr	r3, [pc, #444]	; (12424 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12268:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   1226c:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12270:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12274:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12278:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1227c:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   1227e:	2100      	movs	r1, #0
   12280:	f88e 100a 	strb.w	r1, [lr, #10]
   12284:	f88e 101a 	strb.w	r1, [lr, #26]
   12288:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1228c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12290:	4b63      	ldr	r3, [pc, #396]	; (12420 <_usb_d_dev_handler+0x32c>)
   12292:	689b      	ldr	r3, [r3, #8]
   12294:	4798      	blx	r3
   12296:	e76e      	b.n	12176 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12298:	4b62      	ldr	r3, [pc, #392]	; (12424 <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1229a:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   1229e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122a0:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   122a4:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122a8:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   122ac:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122ae:	d07c      	beq.n	123aa <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   122b0:	f013 0302 	ands.w	r3, r3, #2
   122b4:	d032      	beq.n	1231c <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122b6:	f89e 100a 	ldrb.w	r1, [lr, #10]
   122ba:	f36f 0141 	bfc	r1, #1, #1
   122be:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122c2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   122c6:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122ca:	2204      	movs	r2, #4
   122cc:	2901      	cmp	r1, #1
   122ce:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122d2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   122d6:	f47f af4e 	bne.w	12176 <_usb_d_dev_handler+0x82>
   122da:	f01b 0f40 	tst.w	fp, #64	; 0x40
   122de:	f43f af4a 	beq.w	12176 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   122e2:	494f      	ldr	r1, [pc, #316]	; (12420 <_usb_d_dev_handler+0x32c>)
   122e4:	eb0a 0204 	add.w	r2, sl, r4
   122e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   122ec:	3220      	adds	r2, #32
   122ee:	79d1      	ldrb	r1, [r2, #7]
   122f0:	09c9      	lsrs	r1, r1, #7
   122f2:	f43f af40 	beq.w	12176 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122f6:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   122f8:	f04f 0e80 	mov.w	lr, #128	; 0x80
   122fc:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12300:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12304:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12308:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1230a:	4b45      	ldr	r3, [pc, #276]	; (12420 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   1230c:	f36f 1186 	bfc	r1, #6, #1
   12310:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12312:	691b      	ldr	r3, [r3, #16]
   12314:	68aa      	ldr	r2, [r5, #8]
   12316:	2100      	movs	r1, #0
   12318:	4798      	blx	r3
   1231a:	e72c      	b.n	12176 <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   1231c:	4941      	ldr	r1, [pc, #260]	; (12424 <_usb_d_dev_handler+0x330>)
   1231e:	1888      	adds	r0, r1, r2
   12320:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12324:	2104      	movs	r1, #4
   12326:	7283      	strb	r3, [r0, #10]
   12328:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1232c:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12330:	e721      	b.n	12176 <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   12332:	2101      	movs	r1, #1
   12334:	4628      	mov	r0, r5
   12336:	f7ff fde1 	bl	11efc <_usb_d_dev_out_next>
   1233a:	e71c      	b.n	12176 <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1233c:	f013 0f10 	tst.w	r3, #16
   12340:	f040 80e0 	bne.w	12504 <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12344:	065a      	lsls	r2, r3, #25
   12346:	f100 80e7 	bmi.w	12518 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   1234a:	069b      	lsls	r3, r3, #26
   1234c:	f57f af13 	bpl.w	12176 <_usb_d_dev_handler+0x82>
   12350:	2320      	movs	r3, #32
   12352:	68aa      	ldr	r2, [r5, #8]
   12354:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12358:	4b31      	ldr	r3, [pc, #196]	; (12420 <_usb_d_dev_handler+0x32c>)
   1235a:	691b      	ldr	r3, [r3, #16]
   1235c:	4798      	blx	r3
   1235e:	e70a      	b.n	12176 <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12360:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   12362:	8b13      	ldrh	r3, [r2, #24]
   12364:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   12366:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12368:	f013 0004 	ands.w	r0, r3, #4
   1236c:	f040 80dc 	bne.w	12528 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12370:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   12374:	f040 80e0 	bne.w	12538 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12378:	0618      	lsls	r0, r3, #24
   1237a:	f100 8140 	bmi.w	125fe <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   1237e:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   12382:	f040 8191 	bne.w	126a8 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   12386:	f013 0108 	ands.w	r1, r3, #8
   1238a:	f040 819e 	bne.w	126ca <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   1238e:	07db      	lsls	r3, r3, #31
   12390:	f57f aeba 	bpl.w	12108 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12394:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12398:	4821      	ldr	r0, [pc, #132]	; (12420 <_usb_d_dev_handler+0x32c>)
   1239a:	8393      	strh	r3, [r2, #28]
   1239c:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1239e:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   123a0:	2570      	movs	r5, #112	; 0x70
   123a2:	2004      	movs	r0, #4
   123a4:	8315      	strh	r5, [r2, #24]
   123a6:	4623      	mov	r3, r4
   123a8:	e0de      	b.n	12568 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123aa:	f013 0f01 	tst.w	r3, #1
   123ae:	f43f af7f 	beq.w	122b0 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123b2:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123ba:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123be:	f04f 0104 	mov.w	r1, #4
   123c2:	f88e 300a 	strb.w	r3, [lr, #10]
   123c6:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123ca:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123ce:	f43f aed2 	beq.w	12176 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   123d2:	4b13      	ldr	r3, [pc, #76]	; (12420 <_usb_d_dev_handler+0x32c>)
   123d4:	eb0a 0104 	add.w	r1, sl, r4
   123d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   123dc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123e0:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   123e4:	2240      	movs	r2, #64	; 0x40
   123e6:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123ea:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123ee:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   123f2:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123f6:	4b0a      	ldr	r3, [pc, #40]	; (12420 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   123f8:	f36f 1286 	bfc	r2, #6, #1
   123fc:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12400:	691b      	ldr	r3, [r3, #16]
   12402:	68aa      	ldr	r2, [r5, #8]
   12404:	2104      	movs	r1, #4
   12406:	4798      	blx	r3
   12408:	e6b5      	b.n	12176 <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   1240a:	2101      	movs	r1, #1
   1240c:	4628      	mov	r0, r5
   1240e:	f7ff fcbb 	bl	11d88 <_usb_d_dev_in_next>
   12412:	e6b0      	b.n	12176 <_usb_d_dev_handler+0x82>
   12414:	68aa      	ldr	r2, [r5, #8]
   12416:	2340      	movs	r3, #64	; 0x40
   12418:	e6ff      	b.n	1221a <_usb_d_dev_handler+0x126>
   1241a:	bf00      	nop
   1241c:	20002010 	.word	0x20002010
   12420:	20001ffc 	.word	0x20001ffc
   12424:	2000222c 	.word	0x2000222c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12428:	4bc3      	ldr	r3, [pc, #780]	; (12738 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1242a:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1242e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12430:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   12434:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12438:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1243a:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1243c:	f000 8098 	beq.w	12570 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12440:	f013 0302 	ands.w	r3, r3, #2
   12444:	d053      	beq.n	124ee <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12446:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1244a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1244e:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12452:	2208      	movs	r2, #8
   12454:	f88e 101a 	strb.w	r1, [lr, #26]
   12458:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1245c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12460:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12464:	f43f ae87 	beq.w	12176 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12468:	4ab4      	ldr	r2, [pc, #720]	; (1273c <_usb_d_dev_handler+0x648>)
   1246a:	eb0a 0e04 	add.w	lr, sl, r4
   1246e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   12472:	f10e 0e20 	add.w	lr, lr, #32
   12476:	f89e 1007 	ldrb.w	r1, [lr, #7]
   1247a:	09c9      	lsrs	r1, r1, #7
   1247c:	f47f ae7b 	bne.w	12176 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12480:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12482:	f04f 0c40 	mov.w	ip, #64	; 0x40
   12486:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1248a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1248e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12492:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12496:	4ba9      	ldr	r3, [pc, #676]	; (1273c <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12498:	f361 1286 	bfi	r2, r1, #6, #1
   1249c:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124a0:	691b      	ldr	r3, [r3, #16]
   124a2:	68aa      	ldr	r2, [r5, #8]
   124a4:	4798      	blx	r3
   124a6:	e666      	b.n	12176 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   124a8:	4ba3      	ldr	r3, [pc, #652]	; (12738 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   124aa:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   124ae:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124b0:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   124b4:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124b8:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   124bc:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124be:	d07a      	beq.n	125b6 <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   124c0:	f013 0302 	ands.w	r3, r3, #2
   124c4:	d013      	beq.n	124ee <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124c6:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124ca:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124ce:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124d2:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124d6:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124da:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124dc:	f88e 101a 	strb.w	r1, [lr, #26]
   124e0:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124e4:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124e8:	f47f ae45 	bne.w	12176 <_usb_d_dev_handler+0x82>
   124ec:	e7b8      	b.n	12460 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   124ee:	4992      	ldr	r1, [pc, #584]	; (12738 <_usb_d_dev_handler+0x644>)
   124f0:	1888      	adds	r0, r1, r2
   124f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124f6:	2108      	movs	r1, #8
   124f8:	7683      	strb	r3, [r0, #26]
   124fa:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124fe:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12502:	e638      	b.n	12176 <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   12504:	f00b 0307 	and.w	r3, fp, #7
   12508:	2b01      	cmp	r3, #1
   1250a:	d07e      	beq.n	1260a <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1250c:	2310      	movs	r3, #16
   1250e:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   12512:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   12516:	e62e      	b.n	12176 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12518:	2340      	movs	r3, #64	; 0x40
   1251a:	68aa      	ldr	r2, [r5, #8]
   1251c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12520:	4b86      	ldr	r3, [pc, #536]	; (1273c <_usb_d_dev_handler+0x648>)
   12522:	691b      	ldr	r3, [r3, #16]
   12524:	4798      	blx	r3
   12526:	e626      	b.n	12176 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12528:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   1252a:	4b84      	ldr	r3, [pc, #528]	; (1273c <_usb_d_dev_handler+0x648>)
   1252c:	8391      	strh	r1, [r2, #28]
   1252e:	681b      	ldr	r3, [r3, #0]
}
   12530:	b001      	add	sp, #4
   12532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   12536:	4718      	bx	r3
   12538:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1253c:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   1253e:	4b7e      	ldr	r3, [pc, #504]	; (12738 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12540:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12542:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12544:	8314      	strh	r4, [r2, #24]
   12546:	891a      	ldrh	r2, [r3, #8]
   12548:	f002 020f 	and.w	r2, r2, #15
   1254c:	2a03      	cmp	r2, #3
   1254e:	f000 8128 	beq.w	127a2 <_usb_d_dev_handler+0x6ae>
   12552:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   12554:	f002 020f 	and.w	r2, r2, #15
   12558:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   1255a:	bf18      	it	ne
   1255c:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   1255e:	f000 811f 	beq.w	127a0 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   12562:	4b76      	ldr	r3, [pc, #472]	; (1273c <_usb_d_dev_handler+0x648>)
   12564:	685b      	ldr	r3, [r3, #4]
   12566:	2003      	movs	r0, #3
}
   12568:	b001      	add	sp, #4
   1256a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   1256e:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12570:	07d9      	lsls	r1, r3, #31
   12572:	f57f af65 	bpl.w	12440 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12576:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1257a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1257e:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12582:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12584:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12588:	f88e 101a 	strb.w	r1, [lr, #26]
   1258c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12590:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12594:	f43f adef 	beq.w	12176 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12598:	4a68      	ldr	r2, [pc, #416]	; (1273c <_usb_d_dev_handler+0x648>)
   1259a:	eb0a 0104 	add.w	r1, sl, r4
   1259e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   125a2:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125a6:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   125a8:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125ac:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125b0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   125b4:	e71d      	b.n	123f2 <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125b6:	f013 0f01 	tst.w	r3, #1
   125ba:	d081      	beq.n	124c0 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125bc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125c0:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125c4:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125c8:	f04f 0108 	mov.w	r1, #8
   125cc:	f88e 301a 	strb.w	r3, [lr, #26]
   125d0:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125d4:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125d8:	f43f adcd 	beq.w	12176 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   125dc:	4b57      	ldr	r3, [pc, #348]	; (1273c <_usb_d_dev_handler+0x648>)
   125de:	eb0a 0104 	add.w	r1, sl, r4
   125e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   125e6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125ea:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   125ee:	2280      	movs	r2, #128	; 0x80
   125f0:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125f4:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125f8:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   125fc:	e6f9      	b.n	123f2 <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   125fe:	4b4f      	ldr	r3, [pc, #316]	; (1273c <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12600:	2080      	movs	r0, #128	; 0x80
   12602:	685b      	ldr	r3, [r3, #4]
   12604:	8390      	strh	r0, [r2, #28]
   12606:	2005      	movs	r0, #5
   12608:	e7ae      	b.n	12568 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1260a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1260e:	f43f ade3 	beq.w	121d8 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   12612:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   12616:	f36f 1386 	bfc	r3, #6, #1
   1261a:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1261e:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12620:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12622:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12626:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   1262a:	e5d5      	b.n	121d8 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   1262c:	4b42      	ldr	r3, [pc, #264]	; (12738 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1262e:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12632:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12634:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12638:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1263c:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1263e:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12640:	f000 8080 	beq.w	12744 <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   12644:	f013 0302 	ands.w	r3, r3, #2
   12648:	f43f ae68 	beq.w	1231c <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1264c:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12650:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12654:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12658:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1265a:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1265e:	f88e 100a 	strb.w	r1, [lr, #10]
   12662:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12666:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1266a:	f43f ad84 	beq.w	12176 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1266e:	4a33      	ldr	r2, [pc, #204]	; (1273c <_usb_d_dev_handler+0x648>)
   12670:	eb0a 0104 	add.w	r1, sl, r4
   12674:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12678:	3120      	adds	r1, #32
   1267a:	79ca      	ldrb	r2, [r1, #7]
   1267c:	09d2      	lsrs	r2, r2, #7
   1267e:	f43f ad7a 	beq.w	12176 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12682:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12684:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12688:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1268c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12690:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12694:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12696:	4b29      	ldr	r3, [pc, #164]	; (1273c <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12698:	f36f 1286 	bfc	r2, #6, #1
   1269c:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1269e:	691b      	ldr	r3, [r3, #16]
   126a0:	68aa      	ldr	r2, [r5, #8]
   126a2:	2100      	movs	r1, #0
   126a4:	4798      	blx	r3
   126a6:	e566      	b.n	12176 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126a8:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126aa:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   126ae:	4924      	ldr	r1, [pc, #144]	; (12740 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126b0:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126b2:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126b4:	8310      	strh	r0, [r2, #24]
   126b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   126b8:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   126bc:	2b03      	cmp	r3, #3
   126be:	d1fa      	bne.n	126b6 <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   126c0:	4b1e      	ldr	r3, [pc, #120]	; (1273c <_usb_d_dev_handler+0x648>)
   126c2:	2100      	movs	r1, #0
   126c4:	685b      	ldr	r3, [r3, #4]
   126c6:	2002      	movs	r0, #2
   126c8:	e74e      	b.n	12568 <_usb_d_dev_handler+0x474>
   126ca:	4e1c      	ldr	r6, [pc, #112]	; (1273c <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   126cc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126d0:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126d2:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126d4:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126d8:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   126da:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126dc:	8291      	strh	r1, [r2, #20]
   126de:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126e0:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   126e2:	f04f 08ff 	mov.w	r8, #255	; 0xff
   126e6:	e007      	b.n	126f8 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   126e8:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   126ea:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   126ee:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   126f2:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   126f6:	d016      	beq.n	12726 <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   126f8:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   126fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12700:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12704:	28ff      	cmp	r0, #255	; 0xff
   12706:	f103 0320 	add.w	r3, r3, #32
   1270a:	f104 0401 	add.w	r4, r4, #1
   1270e:	d0eb      	beq.n	126e8 <_usb_d_dev_handler+0x5f4>
   12710:	79da      	ldrb	r2, [r3, #7]
   12712:	0651      	lsls	r1, r2, #25
   12714:	d5e8      	bpl.n	126e8 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   12716:	f36f 1286 	bfc	r2, #6, #1
   1271a:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1271c:	69ea      	ldr	r2, [r5, #28]
   1271e:	6933      	ldr	r3, [r6, #16]
   12720:	2103      	movs	r1, #3
   12722:	4798      	blx	r3
   12724:	e7e0      	b.n	126e8 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12726:	2100      	movs	r1, #0
   12728:	2260      	movs	r2, #96	; 0x60
   1272a:	4803      	ldr	r0, [pc, #12]	; (12738 <_usb_d_dev_handler+0x644>)
   1272c:	f00b ff7e 	bl	1e62c <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12730:	6873      	ldr	r3, [r6, #4]
   12732:	2100      	movs	r1, #0
   12734:	2001      	movs	r0, #1
   12736:	e717      	b.n	12568 <_usb_d_dev_handler+0x474>
   12738:	2000222c 	.word	0x2000222c
   1273c:	20001ffc 	.word	0x20001ffc
   12740:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12744:	07d9      	lsls	r1, r3, #31
   12746:	f57f af7d 	bpl.w	12644 <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1274a:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1274e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12752:	460a      	mov	r2, r1
   12754:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12758:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1275a:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1275e:	f88e 200a 	strb.w	r2, [lr, #10]
   12762:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12766:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1276a:	f43f ad04 	beq.w	12176 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1276e:	4a11      	ldr	r2, [pc, #68]	; (127b4 <_usb_d_dev_handler+0x6c0>)
   12770:	eb0a 0e04 	add.w	lr, sl, r4
   12774:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12778:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1277c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1277e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12782:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12786:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1278a:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1278e:	4b09      	ldr	r3, [pc, #36]	; (127b4 <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12790:	f36f 1286 	bfc	r2, #6, #1
   12794:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12798:	691b      	ldr	r3, [r3, #16]
   1279a:	68aa      	ldr	r2, [r5, #8]
   1279c:	4798      	blx	r3
   1279e:	e4ea      	b.n	12176 <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   127a0:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   127a2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   127a6:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   127a8:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   127aa:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   127ac:	f3c1 110a 	ubfx	r1, r1, #4, #11
   127b0:	e6d7      	b.n	12562 <_usb_d_dev_handler+0x46e>
   127b2:	bf00      	nop
   127b4:	20001ffc 	.word	0x20001ffc

000127b8 <_usb_d_dev_init>:
{
   127b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   127bc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127c0:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   127c2:	07db      	lsls	r3, r3, #31
   127c4:	d551      	bpl.n	1286a <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   127c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   127ca:	789c      	ldrb	r4, [r3, #2]
   127cc:	f014 0401 	ands.w	r4, r4, #1
   127d0:	d1fb      	bne.n	127ca <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   127d2:	4b45      	ldr	r3, [pc, #276]	; (128e8 <_usb_d_dev_init+0x130>)
   127d4:	4a45      	ldr	r2, [pc, #276]	; (128ec <_usb_d_dev_init+0x134>)
   127d6:	601a      	str	r2, [r3, #0]
   127d8:	461e      	mov	r6, r3
   127da:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   127dc:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   127de:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   127e0:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   127e2:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   127e4:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   127e6:	27ff      	movs	r7, #255	; 0xff
   127e8:	e007      	b.n	127fa <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   127ea:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   127ec:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   127f0:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   127f4:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   127f8:	d01d      	beq.n	12836 <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   127fa:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   127fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12802:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12806:	28ff      	cmp	r0, #255	; 0xff
   12808:	f103 0320 	add.w	r3, r3, #32
   1280c:	f104 0401 	add.w	r4, r4, #1
   12810:	d0eb      	beq.n	127ea <_usb_d_dev_init+0x32>
   12812:	79da      	ldrb	r2, [r3, #7]
   12814:	0651      	lsls	r1, r2, #25
   12816:	d5e8      	bpl.n	127ea <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12818:	f36f 1286 	bfc	r2, #6, #1
   1281c:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1281e:	69ea      	ldr	r2, [r5, #28]
   12820:	6933      	ldr	r3, [r6, #16]
   12822:	2103      	movs	r1, #3
   12824:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   12826:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12828:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   1282c:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12830:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12834:	d1e1      	bne.n	127fa <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12836:	2260      	movs	r2, #96	; 0x60
   12838:	2100      	movs	r1, #0
   1283a:	482d      	ldr	r0, [pc, #180]	; (128f0 <_usb_d_dev_init+0x138>)
   1283c:	f00b fef6 	bl	1e62c <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12840:	4b2c      	ldr	r3, [pc, #176]	; (128f4 <_usb_d_dev_init+0x13c>)
   12842:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   12844:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12848:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   1284c:	f013 031f 	ands.w	r3, r3, #31
   12850:	d027      	beq.n	128a2 <_usb_d_dev_init+0xea>
   12852:	2b1f      	cmp	r3, #31
   12854:	d025      	beq.n	128a2 <_usb_d_dev_init+0xea>
   12856:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12858:	b338      	cbz	r0, 128aa <_usb_d_dev_init+0xf2>
   1285a:	281f      	cmp	r0, #31
   1285c:	d025      	beq.n	128aa <_usb_d_dev_init+0xf2>
   1285e:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12860:	b332      	cbz	r2, 128b0 <_usb_d_dev_init+0xf8>
   12862:	2a07      	cmp	r2, #7
   12864:	d024      	beq.n	128b0 <_usb_d_dev_init+0xf8>
   12866:	0311      	lsls	r1, r2, #12
   12868:	e024      	b.n	128b4 <_usb_d_dev_init+0xfc>
   1286a:	7893      	ldrb	r3, [r2, #2]
   1286c:	079f      	lsls	r7, r3, #30
   1286e:	d1fc      	bne.n	1286a <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12870:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12872:	079e      	lsls	r6, r3, #30
   12874:	d50d      	bpl.n	12892 <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12876:	7813      	ldrb	r3, [r2, #0]
   12878:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1287c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1287e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12882:	7893      	ldrb	r3, [r2, #2]
   12884:	079d      	lsls	r5, r3, #30
   12886:	d1fc      	bne.n	12882 <_usb_d_dev_init+0xca>
   12888:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1288c:	7893      	ldrb	r3, [r2, #2]
   1288e:	079c      	lsls	r4, r3, #30
   12890:	d4fc      	bmi.n	1288c <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12892:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12896:	2301      	movs	r3, #1
   12898:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1289a:	7893      	ldrb	r3, [r2, #2]
   1289c:	0798      	lsls	r0, r3, #30
   1289e:	d1fc      	bne.n	1289a <_usb_d_dev_init+0xe2>
   128a0:	e791      	b.n	127c6 <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   128a2:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   128a6:	2800      	cmp	r0, #0
   128a8:	d1d7      	bne.n	1285a <_usb_d_dev_init+0xa2>
   128aa:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   128ac:	2a00      	cmp	r2, #0
   128ae:	d1d8      	bne.n	12862 <_usb_d_dev_init+0xaa>
   128b0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   128b4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128b8:	4303      	orrs	r3, r0
   128ba:	430b      	orrs	r3, r1
   128bc:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   128be:	78d3      	ldrb	r3, [r2, #3]
   128c0:	f043 0303 	orr.w	r3, r3, #3
   128c4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   128c6:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   128c8:	2104      	movs	r1, #4
   128ca:	f043 030c 	orr.w	r3, r3, #12
   128ce:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   128d0:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   128d2:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   128d4:	7898      	ldrb	r0, [r3, #2]
   128d6:	f010 0003 	ands.w	r0, r0, #3
   128da:	d1fb      	bne.n	128d4 <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   128dc:	4a04      	ldr	r2, [pc, #16]	; (128f0 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   128de:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   128e0:	2201      	movs	r2, #1
   128e2:	811a      	strh	r2, [r3, #8]
}
   128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128e8:	20001ffc 	.word	0x20001ffc
   128ec:	00011d85 	.word	0x00011d85
   128f0:	2000222c 	.word	0x2000222c
   128f4:	00800084 	.word	0x00800084

000128f8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   128f8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128fc:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   128fe:	079b      	lsls	r3, r3, #30
   12900:	d124      	bne.n	1294c <_usb_d_dev_enable+0x54>
{
   12902:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12904:	7893      	ldrb	r3, [r2, #2]
   12906:	0798      	lsls	r0, r3, #30
   12908:	d1fc      	bne.n	12904 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   1290a:	7813      	ldrb	r3, [r2, #0]
   1290c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   1290e:	0799      	lsls	r1, r3, #30
   12910:	d407      	bmi.n	12922 <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   12912:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12916:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12918:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1291c:	7893      	ldrb	r3, [r2, #2]
   1291e:	079b      	lsls	r3, r3, #30
   12920:	d1fc      	bne.n	1291c <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12922:	4b0c      	ldr	r3, [pc, #48]	; (12954 <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12924:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12928:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1292c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12930:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   12934:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12938:	f240 218d 	movw	r1, #653	; 0x28d
   1293c:	6098      	str	r0, [r3, #8]
   1293e:	609e      	str	r6, [r3, #8]
   12940:	609d      	str	r5, [r3, #8]
   12942:	609c      	str	r4, [r3, #8]
   12944:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   12946:	2000      	movs	r0, #0
}
   12948:	bc70      	pop	{r4, r5, r6}
   1294a:	4770      	bx	lr
		return -USB_ERR_DENIED;
   1294c:	f06f 0010 	mvn.w	r0, #16
   12950:	4770      	bx	lr
   12952:	bf00      	nop
   12954:	e000e100 	.word	0xe000e100

00012958 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12958:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1295c:	8913      	ldrh	r3, [r2, #8]
   1295e:	f023 0301 	bic.w	r3, r3, #1
   12962:	041b      	lsls	r3, r3, #16
   12964:	0c1b      	lsrs	r3, r3, #16
   12966:	8113      	strh	r3, [r2, #8]
   12968:	4770      	bx	lr
   1296a:	bf00      	nop

0001296c <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   1296c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12970:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12974:	7298      	strb	r0, [r3, #10]
   12976:	4770      	bx	lr

00012978 <_usb_d_dev_ep_init>:
{
   12978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1297c:	f010 050f 	ands.w	r5, r0, #15
   12980:	fa4f fc80 	sxtb.w	ip, r0
   12984:	d02a      	beq.n	129dc <_usb_d_dev_ep_init+0x64>
   12986:	f1bc 0f00 	cmp.w	ip, #0
   1298a:	bfb4      	ite	lt
   1298c:	1cab      	addlt	r3, r5, #2
   1298e:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12990:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12992:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12996:	d859      	bhi.n	12a4c <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12998:	009c      	lsls	r4, r3, #2
   1299a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 12a54 <_usb_d_dev_ep_init+0xdc>
   1299e:	18e6      	adds	r6, r4, r3
   129a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   129a4:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   129a8:	2eff      	cmp	r6, #255	; 0xff
   129aa:	d14b      	bne.n	12a44 <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   129ac:	b1d1      	cbz	r1, 129e4 <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   129ae:	f1bc 0f00 	cmp.w	ip, #0
   129b2:	db3a      	blt.n	12a2a <_usb_d_dev_ep_init+0xb2>
   129b4:	006f      	lsls	r7, r5, #1
   129b6:	197e      	adds	r6, r7, r5
   129b8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12a58 <_usb_d_dev_ep_init+0xe0>
   129bc:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   129c0:	bb4e      	cbnz	r6, 12a16 <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   129c2:	4423      	add	r3, r4
   129c4:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   129c8:	3101      	adds	r1, #1
   129ca:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   129ce:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   129d2:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   129d4:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   129d6:	2000      	movs	r0, #0
   129d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   129dc:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   129e0:	462b      	mov	r3, r5
   129e2:	e7d9      	b.n	12998 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   129e4:	b125      	cbz	r5, 129f0 <_usb_d_dev_ep_init+0x78>
   129e6:	f1bc 0f00 	cmp.w	ip, #0
   129ea:	db01      	blt.n	129f0 <_usb_d_dev_ep_init+0x78>
   129ec:	1cae      	adds	r6, r5, #2
   129ee:	e000      	b.n	129f2 <_usb_d_dev_ep_init+0x7a>
   129f0:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   129f2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   129f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   129fa:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   129fe:	2eff      	cmp	r6, #255	; 0xff
   12a00:	d120      	bne.n	12a44 <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   12a02:	006f      	lsls	r7, r5, #1
   12a04:	197e      	adds	r6, r7, r5
   12a06:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12a58 <_usb_d_dev_ep_init+0xe0>
   12a0a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12a0e:	b146      	cbz	r6, 12a22 <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12a10:	f1bc 0f00 	cmp.w	ip, #0
   12a14:	db0c      	blt.n	12a30 <_usb_d_dev_ep_init+0xb8>
   12a16:	443d      	add	r5, r7
   12a18:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12a1c:	892d      	ldrh	r5, [r5, #8]
   12a1e:	4295      	cmp	r5, r2
   12a20:	dacf      	bge.n	129c2 <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   12a22:	f06f 0012 	mvn.w	r0, #18
   12a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a2a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12a58 <_usb_d_dev_ep_init+0xe0>
   12a2e:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12a30:	442f      	add	r7, r5
   12a32:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   12a36:	687d      	ldr	r5, [r7, #4]
   12a38:	b115      	cbz	r5, 12a40 <_usb_d_dev_ep_init+0xc8>
   12a3a:	897e      	ldrh	r6, [r7, #10]
   12a3c:	4296      	cmp	r6, r2
   12a3e:	dbf0      	blt.n	12a22 <_usb_d_dev_ep_init+0xaa>
   12a40:	462e      	mov	r6, r5
   12a42:	e7be      	b.n	129c2 <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   12a44:	f06f 0013 	mvn.w	r0, #19
   12a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12a4c:	f06f 0011 	mvn.w	r0, #17
   12a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a54:	20001ffc 	.word	0x20001ffc
   12a58:	00023794 	.word	0x00023794

00012a5c <_usb_d_dev_ep_deinit>:
{
   12a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a60:	f010 070f 	ands.w	r7, r0, #15
{
   12a64:	b082      	sub	sp, #8
   12a66:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a6a:	d009      	beq.n	12a80 <_usb_d_dev_ep_deinit+0x24>
   12a6c:	f1b9 0f00 	cmp.w	r9, #0
   12a70:	bfb4      	ite	lt
   12a72:	1cbe      	addlt	r6, r7, #2
   12a74:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12a76:	2f02      	cmp	r7, #2
   12a78:	d903      	bls.n	12a82 <_usb_d_dev_ep_deinit+0x26>
}
   12a7a:	b002      	add	sp, #8
   12a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12a80:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12a82:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12a86:	4d3d      	ldr	r5, [pc, #244]	; (12b7c <_usb_d_dev_ep_deinit+0x120>)
   12a88:	eb08 0306 	add.w	r3, r8, r6
   12a8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12a90:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12a94:	29ff      	cmp	r1, #255	; 0xff
   12a96:	d0f0      	beq.n	12a7a <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a98:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12a9c:	224a      	movs	r2, #74	; 0x4a
   12a9e:	4604      	mov	r4, r0
   12aa0:	f88d 2005 	strb.w	r2, [sp, #5]
   12aa4:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12aa6:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12aa8:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12aac:	d41b      	bmi.n	12ae6 <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12aae:	f003 0307 	and.w	r3, r3, #7
   12ab2:	2b01      	cmp	r3, #1
   12ab4:	d050      	beq.n	12b58 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   12ab6:	f1b9 0f00 	cmp.w	r9, #0
   12aba:	db54      	blt.n	12b66 <_usb_d_dev_ep_deinit+0x10a>
   12abc:	0160      	lsls	r0, r4, #5
   12abe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12ac2:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12ac6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12aca:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12ace:	4446      	add	r6, r8
   12ad0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12ad4:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12ad6:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12ad8:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12adc:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12ae0:	b002      	add	sp, #8
   12ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ae6:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12aea:	f103 0208 	add.w	r2, r3, #8
   12aee:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12af0:	f1b9 0f00 	cmp.w	r9, #0
   12af4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12af8:	bfb5      	itete	lt
   12afa:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12afe:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b02:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12b06:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12b0a:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12b0e:	0150      	lsls	r0, r2, #5
   12b10:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b14:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12b16:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b1a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12b1e:	eb08 0306 	add.w	r3, r8, r6
   12b22:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12b26:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12b2a:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b2e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12b32:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12b36:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12b38:	f103 0a20 	add.w	sl, r3, #32
   12b3c:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12b40:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12b42:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12b46:	4608      	mov	r0, r1
   12b48:	2103      	movs	r1, #3
   12b4a:	4798      	blx	r3
   12b4c:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12b50:	f003 0307 	and.w	r3, r3, #7
   12b54:	2b01      	cmp	r3, #1
   12b56:	d1ae      	bne.n	12ab6 <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12b58:	0160      	lsls	r0, r4, #5
   12b5a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12b5e:	2300      	movs	r3, #0
   12b60:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12b64:	e7b3      	b.n	12ace <_usb_d_dev_ep_deinit+0x72>
   12b66:	017f      	lsls	r7, r7, #5
   12b68:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12b6c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12b70:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12b74:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12b78:	e7a9      	b.n	12ace <_usb_d_dev_ep_deinit+0x72>
   12b7a:	bf00      	nop
   12b7c:	20001ffc 	.word	0x20001ffc

00012b80 <_usb_d_dev_ep_enable>:
{
   12b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b82:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12b84:	f010 000f 	ands.w	r0, r0, #15
   12b88:	d045      	beq.n	12c16 <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12b8a:	0142      	lsls	r2, r0, #5
   12b8c:	2e00      	cmp	r6, #0
   12b8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12b92:	bfb4      	ite	lt
   12b94:	1c83      	addlt	r3, r0, #2
   12b96:	4603      	movge	r3, r0
   12b98:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12b9c:	4a84      	ldr	r2, [pc, #528]	; (12db0 <_usb_d_dev_ep_enable+0x230>)
   12b9e:	1c59      	adds	r1, r3, #1
   12ba0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12ba4:	2802      	cmp	r0, #2
   12ba6:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12ba8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12bac:	f200 809f 	bhi.w	12cee <_usb_d_dev_ep_enable+0x16e>
   12bb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12bb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12bb8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12bbc:	2aff      	cmp	r2, #255	; 0xff
   12bbe:	f000 8096 	beq.w	12cee <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12bc2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12bc6:	4d7b      	ldr	r5, [pc, #492]	; (12db4 <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12bc8:	f002 0e07 	and.w	lr, r2, #7
   12bcc:	0140      	lsls	r0, r0, #5
   12bce:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12bd2:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12bd6:	d028      	beq.n	12c2a <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12bd8:	2e00      	cmp	r6, #0
   12bda:	db65      	blt.n	12ca8 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12bdc:	0761      	lsls	r1, r4, #29
   12bde:	f040 80a4 	bne.w	12d2a <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12be2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12be4:	4b74      	ldr	r3, [pc, #464]	; (12db8 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12be6:	f002 0207 	and.w	r2, r2, #7
   12bea:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12bee:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12bf0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12bf4:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12bf8:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12bfc:	d97a      	bls.n	12cf4 <_usb_d_dev_ep_enable+0x174>
   12bfe:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12c02:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c04:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c06:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12c08:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c0a:	607a      	str	r2, [r7, #4]
   12c0c:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12c10:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12c12:	4608      	mov	r0, r1
   12c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12c16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12c1a:	4968      	ldr	r1, [pc, #416]	; (12dbc <_usb_d_dev_ep_enable+0x23c>)
   12c1c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12c20:	f1a1 0214 	sub.w	r2, r1, #20
   12c24:	b2e4      	uxtb	r4, r4
   12c26:	4603      	mov	r3, r0
   12c28:	e7c2      	b.n	12bb0 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12c2a:	f014 0f77 	tst.w	r4, #119	; 0x77
   12c2e:	d17c      	bne.n	12d2a <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12c32:	4a61      	ldr	r2, [pc, #388]	; (12db8 <_usb_d_dev_ep_enable+0x238>)
   12c34:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12c38:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c3e:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12c42:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c46:	d94c      	bls.n	12ce2 <_usb_d_dev_ep_enable+0x162>
   12c48:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12c50:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c52:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c54:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c58:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c5a:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c5c:	617b      	str	r3, [r7, #20]
   12c5e:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c62:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c66:	7c8a      	ldrb	r2, [r1, #18]
   12c68:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12c6a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c6e:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12c72:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12c74:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12c76:	2000      	movs	r0, #0
   12c78:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12c7a:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12c7c:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12c7e:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12c82:	6873      	ldr	r3, [r6, #4]
   12c84:	f367 339b 	bfi	r3, r7, #14, #14
   12c88:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12c8a:	6872      	ldr	r2, [r6, #4]
   12c8c:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12c90:	f360 020d 	bfi	r2, r0, #0, #14
   12c94:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12c96:	2510      	movs	r5, #16
   12c98:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c9a:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c9e:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12ca2:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12ca8:	f014 0f70 	tst.w	r4, #112	; 0x70
   12cac:	d13d      	bne.n	12d2a <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12cb0:	0112      	lsls	r2, r2, #4
   12cb2:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12cb6:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12cba:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12cc0:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cc4:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12cc8:	d91a      	bls.n	12d00 <_usb_d_dev_ep_enable+0x180>
   12cca:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12cce:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cd0:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12cd2:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12cd4:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cd6:	617a      	str	r2, [r7, #20]
   12cd8:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12cdc:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12cde:	4608      	mov	r0, r1
   12ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12ce6:	d923      	bls.n	12d30 <_usb_d_dev_ep_enable+0x1b0>
   12ce8:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12cec:	e7ae      	b.n	12c4c <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12cee:	f06f 0011 	mvn.w	r0, #17
   12cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12cf4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12cf8:	d908      	bls.n	12d0c <_usb_d_dev_ep_enable+0x18c>
   12cfa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12cfe:	e780      	b.n	12c02 <_usb_d_dev_ep_enable+0x82>
   12d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12d04:	d907      	bls.n	12d16 <_usb_d_dev_ep_enable+0x196>
   12d06:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12d0a:	e7e0      	b.n	12cce <_usb_d_dev_ep_enable+0x14e>
   12d0c:	2980      	cmp	r1, #128	; 0x80
   12d0e:	d907      	bls.n	12d20 <_usb_d_dev_ep_enable+0x1a0>
   12d10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12d14:	e775      	b.n	12c02 <_usb_d_dev_ep_enable+0x82>
   12d16:	2b80      	cmp	r3, #128	; 0x80
   12d18:	d914      	bls.n	12d44 <_usb_d_dev_ep_enable+0x1c4>
   12d1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12d1e:	e7d6      	b.n	12cce <_usb_d_dev_ep_enable+0x14e>
   12d20:	2940      	cmp	r1, #64	; 0x40
   12d22:	d914      	bls.n	12d4e <_usb_d_dev_ep_enable+0x1ce>
   12d24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12d28:	e76b      	b.n	12c02 <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12d2a:	f06f 0013 	mvn.w	r0, #19
   12d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12d30:	2b80      	cmp	r3, #128	; 0x80
   12d32:	d902      	bls.n	12d3a <_usb_d_dev_ep_enable+0x1ba>
   12d34:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12d38:	e788      	b.n	12c4c <_usb_d_dev_ep_enable+0xcc>
   12d3a:	2b40      	cmp	r3, #64	; 0x40
   12d3c:	d90c      	bls.n	12d58 <_usb_d_dev_ep_enable+0x1d8>
   12d3e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12d42:	e783      	b.n	12c4c <_usb_d_dev_ep_enable+0xcc>
   12d44:	2b40      	cmp	r3, #64	; 0x40
   12d46:	d90c      	bls.n	12d62 <_usb_d_dev_ep_enable+0x1e2>
   12d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12d4c:	e7bf      	b.n	12cce <_usb_d_dev_ep_enable+0x14e>
   12d4e:	2920      	cmp	r1, #32
   12d50:	d90c      	bls.n	12d6c <_usb_d_dev_ep_enable+0x1ec>
   12d52:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12d56:	e754      	b.n	12c02 <_usb_d_dev_ep_enable+0x82>
   12d58:	2b20      	cmp	r3, #32
   12d5a:	d90c      	bls.n	12d76 <_usb_d_dev_ep_enable+0x1f6>
   12d5c:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12d60:	e774      	b.n	12c4c <_usb_d_dev_ep_enable+0xcc>
   12d62:	2b20      	cmp	r3, #32
   12d64:	d90c      	bls.n	12d80 <_usb_d_dev_ep_enable+0x200>
   12d66:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12d6a:	e7b0      	b.n	12cce <_usb_d_dev_ep_enable+0x14e>
   12d6c:	2910      	cmp	r1, #16
   12d6e:	d90c      	bls.n	12d8a <_usb_d_dev_ep_enable+0x20a>
   12d70:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12d74:	e745      	b.n	12c02 <_usb_d_dev_ep_enable+0x82>
   12d76:	2b10      	cmp	r3, #16
   12d78:	d90d      	bls.n	12d96 <_usb_d_dev_ep_enable+0x216>
   12d7a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12d7e:	e765      	b.n	12c4c <_usb_d_dev_ep_enable+0xcc>
   12d80:	2b10      	cmp	r3, #16
   12d82:	d90e      	bls.n	12da2 <_usb_d_dev_ep_enable+0x222>
   12d84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12d88:	e7a1      	b.n	12cce <_usb_d_dev_ep_enable+0x14e>
   12d8a:	2908      	cmp	r1, #8
   12d8c:	bf94      	ite	ls
   12d8e:	2100      	movls	r1, #0
   12d90:	2101      	movhi	r1, #1
   12d92:	0709      	lsls	r1, r1, #28
   12d94:	e735      	b.n	12c02 <_usb_d_dev_ep_enable+0x82>
   12d96:	2b08      	cmp	r3, #8
   12d98:	bf94      	ite	ls
   12d9a:	2400      	movls	r4, #0
   12d9c:	2401      	movhi	r4, #1
   12d9e:	0724      	lsls	r4, r4, #28
   12da0:	e754      	b.n	12c4c <_usb_d_dev_ep_enable+0xcc>
   12da2:	2b08      	cmp	r3, #8
   12da4:	bf94      	ite	ls
   12da6:	2300      	movls	r3, #0
   12da8:	2301      	movhi	r3, #1
   12daa:	071a      	lsls	r2, r3, #28
   12dac:	e78f      	b.n	12cce <_usb_d_dev_ep_enable+0x14e>
   12dae:	bf00      	nop
   12db0:	20001ffc 	.word	0x20001ffc
   12db4:	2000222c 	.word	0x2000222c
   12db8:	0fffc000 	.word	0x0fffc000
   12dbc:	20002010 	.word	0x20002010

00012dc0 <_usb_d_dev_ep_stall>:
{
   12dc0:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12dc2:	f010 000f 	ands.w	r0, r0, #15
{
   12dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12dc8:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12dcc:	d01e      	beq.n	12e0c <_usb_d_dev_ep_stall+0x4c>
   12dce:	2b00      	cmp	r3, #0
   12dd0:	bfb4      	ite	lt
   12dd2:	1c83      	addlt	r3, r0, #2
   12dd4:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12dd6:	1c5c      	adds	r4, r3, #1
   12dd8:	4a40      	ldr	r2, [pc, #256]	; (12edc <_usb_d_dev_ep_stall+0x11c>)
   12dda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12dde:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12de0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12de4:	d86d      	bhi.n	12ec2 <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12de6:	2901      	cmp	r1, #1
   12de8:	d014      	beq.n	12e14 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12dea:	b389      	cbz	r1, 12e50 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12dec:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12dee:	f003 030f 	and.w	r3, r3, #15
   12df2:	015b      	lsls	r3, r3, #5
   12df4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12df8:	2210      	movs	r2, #16
   12dfa:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12dfe:	fa02 f305 	lsl.w	r3, r2, r5
   12e02:	420b      	tst	r3, r1
   12e04:	bf14      	ite	ne
   12e06:	2001      	movne	r0, #1
   12e08:	2000      	moveq	r0, #0
   12e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12e0c:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12e0e:	4a34      	ldr	r2, [pc, #208]	; (12ee0 <_usb_d_dev_ep_stall+0x120>)
   12e10:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12e12:	d1ea      	bne.n	12dea <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e14:	4931      	ldr	r1, [pc, #196]	; (12edc <_usb_d_dev_ep_stall+0x11c>)
   12e16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12e1a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e1e:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e20:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e24:	f002 020f 	and.w	r2, r2, #15
   12e28:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12e2a:	2320      	movs	r3, #32
   12e2c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e30:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12e32:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e34:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12e36:	b2db      	uxtb	r3, r3
   12e38:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12e3c:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12e40:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12e44:	f043 0308 	orr.w	r3, r3, #8
   12e48:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12e4c:	2000      	movs	r0, #0
   12e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12e50:	009e      	lsls	r6, r3, #2
   12e52:	4c22      	ldr	r4, [pc, #136]	; (12edc <_usb_d_dev_ep_stall+0x11c>)
   12e54:	18f2      	adds	r2, r6, r3
   12e56:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e5a:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12e5c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12e60:	f002 020f 	and.w	r2, r2, #15
   12e64:	0151      	lsls	r1, r2, #5
   12e66:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e6a:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12e6c:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12e70:	4207      	tst	r7, r0
   12e72:	d01b      	beq.n	12eac <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e74:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12e76:	2720      	movs	r7, #32
   12e78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12e7c:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e7e:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12e80:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e84:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e88:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12e8c:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12e90:	423a      	tst	r2, r7
   12e92:	d10d      	bne.n	12eb0 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12e94:	4433      	add	r3, r6
   12e96:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12e9a:	3420      	adds	r4, #32
   12e9c:	79e3      	ldrb	r3, [r4, #7]
   12e9e:	f003 0207 	and.w	r2, r3, #7
   12ea2:	2a01      	cmp	r2, #1
   12ea4:	d010      	beq.n	12ec8 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12ea6:	f36f 03c3 	bfc	r3, #3, #1
   12eaa:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12eac:	2000      	movs	r0, #0
   12eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12eb0:	2201      	movs	r2, #1
   12eb2:	fa02 f505 	lsl.w	r5, r2, r5
   12eb6:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12eb8:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ebc:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12ec0:	e7e8      	b.n	12e94 <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12ec2:	f06f 0011 	mvn.w	r0, #17
}
   12ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12ec8:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12ecc:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12ed0:	d1ec      	bne.n	12eac <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12ed2:	f360 03c3 	bfi	r3, r0, #3, #1
   12ed6:	71e3      	strb	r3, [r4, #7]
   12ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12eda:	bf00      	nop
   12edc:	20001ffc 	.word	0x20001ffc
   12ee0:	20002010 	.word	0x20002010

00012ee4 <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12ee4:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12ee6:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12eea:	4a12      	ldr	r2, [pc, #72]	; (12f34 <_usb_d_dev_ep_read_req+0x50>)
   12eec:	0143      	lsls	r3, r0, #5
   12eee:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12ef0:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12ef2:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12ef4:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12ef6:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12efa:	d818      	bhi.n	12f2e <_usb_d_dev_ep_read_req+0x4a>
   12efc:	b1b9      	cbz	r1, 12f2e <_usb_d_dev_ep_read_req+0x4a>
   12efe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12f02:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12f06:	2a11      	cmp	r2, #17
   12f08:	d10e      	bne.n	12f28 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12f0a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12f0e:	f012 0010 	ands.w	r0, r2, #16
   12f12:	d007      	beq.n	12f24 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12f14:	686a      	ldr	r2, [r5, #4]
   12f16:	682e      	ldr	r6, [r5, #0]
   12f18:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f1a:	2210      	movs	r2, #16
   12f1c:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12f1e:	4620      	mov	r0, r4
   12f20:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12f24:	bc70      	pop	{r4, r5, r6}
   12f26:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12f28:	f06f 0012 	mvn.w	r0, #18
   12f2c:	e7fa      	b.n	12f24 <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12f2e:	f06f 0011 	mvn.w	r0, #17
   12f32:	e7f7      	b.n	12f24 <_usb_d_dev_ep_read_req+0x40>
   12f34:	2000222c 	.word	0x2000222c

00012f38 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12f3c:	7a03      	ldrb	r3, [r0, #8]
   12f3e:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f42:	f013 030f 	ands.w	r3, r3, #15
{
   12f46:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f48:	d03a      	beq.n	12fc0 <_usb_d_dev_ep_trans+0x88>
   12f4a:	f1b9 0f00 	cmp.w	r9, #0
   12f4e:	bfb4      	ite	lt
   12f50:	1c9d      	addlt	r5, r3, #2
   12f52:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12f54:	4e5d      	ldr	r6, [pc, #372]	; (130cc <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f56:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12f5a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12f5e:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f62:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12f64:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12f68:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f6c:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12f6e:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f72:	d050      	beq.n	13016 <_usb_d_dev_ep_trans+0xde>
   12f74:	1e57      	subs	r7, r2, #1
   12f76:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12f78:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12f7a:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12f7c:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12f80:	f200 8091 	bhi.w	130a6 <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12f84:	6803      	ldr	r3, [r0, #0]
   12f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12f8a:	d223      	bcs.n	12fd4 <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12f8c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12f90:	eb0b 0305 	add.w	r3, fp, r5
   12f94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12f98:	6a1b      	ldr	r3, [r3, #32]
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	f000 8092 	beq.w	130c4 <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12fa0:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12fa4:	eb0b 0405 	add.w	r4, fp, r5
   12fa8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12fac:	f104 0220 	add.w	r2, r4, #32
   12fb0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12fb4:	071b      	lsls	r3, r3, #28
   12fb6:	d530      	bpl.n	1301a <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12fb8:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12fba:	b007      	add	sp, #28
   12fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12fc0:	4e42      	ldr	r6, [pc, #264]	; (130cc <_usb_d_dev_ep_trans+0x194>)
   12fc2:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12fc4:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12fc8:	428a      	cmp	r2, r1
   12fca:	d01d      	beq.n	13008 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12fcc:	f106 0814 	add.w	r8, r6, #20
   12fd0:	461d      	mov	r5, r3
   12fd2:	e7cf      	b.n	12f74 <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12fd4:	4c3e      	ldr	r4, [pc, #248]	; (130d0 <_usb_d_dev_ep_trans+0x198>)
   12fd6:	eb03 0e01 	add.w	lr, r3, r1
   12fda:	45a6      	cmp	lr, r4
   12fdc:	d8d6      	bhi.n	12f8c <_usb_d_dev_ep_trans+0x54>
   12fde:	f013 0303 	ands.w	r3, r3, #3
   12fe2:	d1d3      	bne.n	12f8c <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12fe4:	f1b9 0f00 	cmp.w	r9, #0
   12fe8:	db60      	blt.n	130ac <_usb_d_dev_ep_trans+0x174>
   12fea:	428a      	cmp	r2, r1
   12fec:	d8ce      	bhi.n	12f8c <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12fee:	2f00      	cmp	r7, #0
   12ff0:	d060      	beq.n	130b4 <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12ff2:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12ff6:	eb0b 0205 	add.w	r2, fp, r5
   12ffa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12ffe:	6a12      	ldr	r2, [r2, #32]
   13000:	2a00      	cmp	r2, #0
   13002:	d050      	beq.n	130a6 <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   13004:	469a      	mov	sl, r3
   13006:	e7cd      	b.n	12fa4 <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   13008:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   1300a:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   1300c:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   13010:	f106 0814 	add.w	r8, r6, #20
   13014:	e7b6      	b.n	12f84 <_usb_d_dev_ep_trans+0x4c>
   13016:	4617      	mov	r7, r2
   13018:	e7ae      	b.n	12f78 <_usb_d_dev_ep_trans+0x40>
   1301a:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   1301c:	a805      	add	r0, sp, #20
   1301e:	9202      	str	r2, [sp, #8]
   13020:	f000 f8e0 	bl	131e4 <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   13024:	9a02      	ldr	r2, [sp, #8]
   13026:	9b01      	ldr	r3, [sp, #4]
   13028:	79d0      	ldrb	r0, [r2, #7]
   1302a:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   1302e:	d131      	bne.n	13094 <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   13030:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   13034:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   13038:	a805      	add	r0, sp, #20
   1303a:	9303      	str	r3, [sp, #12]
   1303c:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   1303e:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   13040:	f000 f8d8 	bl	131f4 <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   13044:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   13046:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   13048:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   1304a:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   1304e:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   13050:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   13054:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   13058:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   1305c:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   1305e:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   13060:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   13062:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   13066:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13068:	7a5b      	ldrb	r3, [r3, #9]
   1306a:	b9c3      	cbnz	r3, 1309e <_usb_d_dev_ep_trans+0x166>
   1306c:	461f      	mov	r7, r3
   1306e:	445d      	add	r5, fp
   13070:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   13074:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13078:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   1307c:	f367 1304 	bfi	r3, r7, #4, #1
   13080:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   13084:	4640      	mov	r0, r8
   13086:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   1308a:	db17      	blt.n	130bc <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   1308c:	f7fe ff36 	bl	11efc <_usb_d_dev_out_next>
	return ERR_NONE;
   13090:	2000      	movs	r0, #0
   13092:	e792      	b.n	12fba <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   13094:	a805      	add	r0, sp, #20
   13096:	f000 f8ad 	bl	131f4 <atomic_leave_critical>
		return USB_BUSY;
   1309a:	2001      	movs	r0, #1
   1309c:	e78d      	b.n	12fba <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   1309e:	fab7 f787 	clz	r7, r7
   130a2:	097f      	lsrs	r7, r7, #5
   130a4:	e7e3      	b.n	1306e <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   130a6:	f06f 0011 	mvn.w	r0, #17
   130aa:	e786      	b.n	12fba <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   130ac:	469a      	mov	sl, r3
   130ae:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   130b2:	e777      	b.n	12fa4 <_usb_d_dev_ep_trans+0x6c>
   130b4:	46ba      	mov	sl, r7
   130b6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   130ba:	e773      	b.n	12fa4 <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   130bc:	f7fe fe64 	bl	11d88 <_usb_d_dev_in_next>
	return ERR_NONE;
   130c0:	2000      	movs	r0, #0
   130c2:	e77a      	b.n	12fba <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   130c4:	f06f 0012 	mvn.w	r0, #18
   130c8:	e777      	b.n	12fba <_usb_d_dev_ep_trans+0x82>
   130ca:	bf00      	nop
   130cc:	20001ffc 	.word	0x20001ffc
   130d0:	20031fff 	.word	0x20031fff

000130d4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   130d4:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   130d6:	f010 000f 	ands.w	r0, r0, #15
   130da:	d117      	bne.n	1310c <_usb_d_dev_ep_abort+0x38>
{
   130dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   130de:	0081      	lsls	r1, r0, #2
   130e0:	4d27      	ldr	r5, [pc, #156]	; (13180 <_usb_d_dev_ep_abort+0xac>)
   130e2:	180a      	adds	r2, r1, r0
   130e4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   130e8:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   130ea:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   130ee:	2625      	movs	r6, #37	; 0x25
   130f0:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   130f4:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   130f6:	f04f 064a 	mov.w	r6, #74	; 0x4a
   130fa:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   130fe:	d003      	beq.n	13108 <_usb_d_dev_ep_abort+0x34>
   13100:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   13104:	0652      	lsls	r2, r2, #25
   13106:	d408      	bmi.n	1311a <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   13108:	b003      	add	sp, #12
   1310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1310c:	2b00      	cmp	r3, #0
   1310e:	bfb4      	ite	lt
   13110:	1c82      	addlt	r2, r0, #2
   13112:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   13114:	2802      	cmp	r0, #2
   13116:	d931      	bls.n	1317c <_usb_d_dev_ep_abort+0xa8>
   13118:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1311a:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1311e:	f102 0608 	add.w	r6, r2, #8
   13122:	0177      	lsls	r7, r6, #5
	if (dir) {
   13124:	2b00      	cmp	r3, #0
   13126:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   1312a:	bfb5      	itete	lt
   1312c:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13130:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13134:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13138:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   1313c:	af02      	add	r7, sp, #8
   1313e:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13142:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13144:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   13146:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13148:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1314c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13150:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   13154:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13158:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1315a:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1315e:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13162:	692d      	ldr	r5, [r5, #16]
   13164:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   13166:	f36f 1686 	bfc	r6, #6, #1
   1316a:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1316e:	4620      	mov	r0, r4
   13170:	2102      	movs	r1, #2
   13172:	462b      	mov	r3, r5
}
   13174:	b003      	add	sp, #12
   13176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1317a:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   1317c:	4610      	mov	r0, r2
   1317e:	e7ad      	b.n	130dc <_usb_d_dev_ep_abort+0x8>
   13180:	20001ffc 	.word	0x20001ffc

00013184 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13184:	4b06      	ldr	r3, [pc, #24]	; (131a0 <_usb_d_dev_register_callback+0x1c>)
   13186:	2900      	cmp	r1, #0
   13188:	bf08      	it	eq
   1318a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   1318c:	2801      	cmp	r0, #1
   1318e:	d003      	beq.n	13198 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   13190:	b908      	cbnz	r0, 13196 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   13192:	4b04      	ldr	r3, [pc, #16]	; (131a4 <_usb_d_dev_register_callback+0x20>)
   13194:	6019      	str	r1, [r3, #0]
   13196:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   13198:	4b02      	ldr	r3, [pc, #8]	; (131a4 <_usb_d_dev_register_callback+0x20>)
   1319a:	6059      	str	r1, [r3, #4]
   1319c:	4770      	bx	lr
   1319e:	bf00      	nop
   131a0:	00011d85 	.word	0x00011d85
   131a4:	20001ffc 	.word	0x20001ffc

000131a8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   131a8:	4b08      	ldr	r3, [pc, #32]	; (131cc <_usb_d_dev_register_ep_callback+0x24>)
   131aa:	2900      	cmp	r1, #0
   131ac:	bf08      	it	eq
   131ae:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   131b0:	b130      	cbz	r0, 131c0 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   131b2:	2801      	cmp	r0, #1
   131b4:	d007      	beq.n	131c6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   131b6:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   131b8:	bf04      	itt	eq
   131ba:	4b05      	ldreq	r3, [pc, #20]	; (131d0 <_usb_d_dev_register_ep_callback+0x28>)
   131bc:	6119      	streq	r1, [r3, #16]
   131be:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   131c0:	4b03      	ldr	r3, [pc, #12]	; (131d0 <_usb_d_dev_register_ep_callback+0x28>)
   131c2:	6099      	str	r1, [r3, #8]
   131c4:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   131c6:	4b02      	ldr	r3, [pc, #8]	; (131d0 <_usb_d_dev_register_ep_callback+0x28>)
   131c8:	60d9      	str	r1, [r3, #12]
   131ca:	4770      	bx	lr
   131cc:	00011d85 	.word	0x00011d85
   131d0:	20001ffc 	.word	0x20001ffc

000131d4 <USB_0_Handler>:
   131d4:	f7fe bf8e 	b.w	120f4 <_usb_d_dev_handler>

000131d8 <USB_1_Handler>:
   131d8:	f7fe bf8c 	b.w	120f4 <_usb_d_dev_handler>

000131dc <USB_2_Handler>:
   131dc:	f7fe bf8a 	b.w	120f4 <_usb_d_dev_handler>

000131e0 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   131e0:	f7fe bf88 	b.w	120f4 <_usb_d_dev_handler>

000131e4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   131e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   131e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   131ea:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   131ec:	f3bf 8f5f 	dmb	sy
   131f0:	4770      	bx	lr
   131f2:	bf00      	nop

000131f4 <atomic_leave_critical>:
   131f4:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   131f8:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   131fa:	f383 8810 	msr	PRIMASK, r3
   131fe:	4770      	bx	lr

00013200 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13200:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   13202:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   13204:	2b08      	cmp	r3, #8
   13206:	d810      	bhi.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13208:	e8df f003 	tbb	[pc, r3]
   1320c:	604d3b25 	.word	0x604d3b25
   13210:	05a18a74 	.word	0x05a18a74
   13214:	11          	.byte	0x11
   13215:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   13216:	8903      	ldrh	r3, [r0, #8]
   13218:	3b01      	subs	r3, #1
   1321a:	b29b      	uxth	r3, r3
   1321c:	8103      	strh	r3, [r0, #8]
   1321e:	b923      	cbnz	r3, 1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13220:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   13222:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   13224:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   13226:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13228:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   1322a:	bc30      	pop	{r4, r5}
   1322c:	4770      	bx	lr
            if (--m_timer) {
   1322e:	8903      	ldrh	r3, [r0, #8]
   13230:	3b01      	subs	r3, #1
   13232:	b29b      	uxth	r3, r3
   13234:	8103      	strh	r3, [r0, #8]
   13236:	2b00      	cmp	r3, #0
   13238:	d1f7      	bne.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   1323a:	8981      	ldrh	r1, [r0, #12]
   1323c:	3901      	subs	r1, #1
   1323e:	b289      	uxth	r1, r1
   13240:	8181      	strh	r1, [r0, #12]
   13242:	2900      	cmp	r1, #0
   13244:	f000 80b3 	beq.w	133ae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13248:	8a43      	ldrh	r3, [r0, #18]
   1324a:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   1324c:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   1324e:	2307      	movs	r3, #7
                m_ledOn = true;
   13250:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   13252:	7143      	strb	r3, [r0, #5]
                break;
   13254:	e7e9      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   13256:	7801      	ldrb	r1, [r0, #0]
   13258:	2900      	cmp	r1, #0
   1325a:	f040 8089 	bne.w	13370 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   1325e:	7841      	ldrb	r1, [r0, #1]
   13260:	2900      	cmp	r1, #0
   13262:	f040 80cb 	bne.w	133fc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   13266:	7883      	ldrb	r3, [r0, #2]
   13268:	2b00      	cmp	r3, #0
   1326a:	f040 811a 	bne.w	134a2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   1326e:	78c3      	ldrb	r3, [r0, #3]
   13270:	2b00      	cmp	r3, #0
   13272:	f040 8118 	bne.w	134a6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   13276:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13278:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   1327a:	2b00      	cmp	r3, #0
   1327c:	d0d5      	beq.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   1327e:	5d41      	ldrb	r1, [r0, r5]
   13280:	e077      	b.n	13372 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   13282:	8903      	ldrh	r3, [r0, #8]
   13284:	3b01      	subs	r3, #1
   13286:	b29b      	uxth	r3, r3
   13288:	8103      	strh	r3, [r0, #8]
   1328a:	2b00      	cmp	r3, #0
   1328c:	d1cd      	bne.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1328e:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   13290:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   13292:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   13294:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13296:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   13298:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1329a:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   1329e:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   132a0:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   132a2:	8143      	strh	r3, [r0, #10]
            break;
   132a4:	e7c1      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   132a6:	8903      	ldrh	r3, [r0, #8]
   132a8:	3b01      	subs	r3, #1
   132aa:	b29b      	uxth	r3, r3
   132ac:	8103      	strh	r3, [r0, #8]
   132ae:	2b00      	cmp	r3, #0
   132b0:	d1bb      	bne.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   132b2:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   132b4:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   132b6:	3b01      	subs	r3, #1
   132b8:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   132ba:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   132be:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   132c0:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   132c2:	2b00      	cmp	r3, #0
   132c4:	d06d      	beq.n	133a2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   132c6:	8a03      	ldrh	r3, [r0, #16]
   132c8:	8103      	strh	r3, [r0, #8]
                break;
   132ca:	e7ae      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   132cc:	8903      	ldrh	r3, [r0, #8]
   132ce:	3b01      	subs	r3, #1
   132d0:	b29b      	uxth	r3, r3
   132d2:	8103      	strh	r3, [r0, #8]
   132d4:	2b00      	cmp	r3, #0
   132d6:	d1a8      	bne.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   132d8:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   132da:	8a01      	ldrh	r1, [r0, #16]
   132dc:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   132de:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   132e0:	3201      	adds	r2, #1
            m_ledOn = true;
   132e2:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   132e4:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   132e6:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   132ea:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   132ec:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   132ee:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   132f0:	8143      	strh	r3, [r0, #10]
            break;
   132f2:	e79a      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   132f4:	8903      	ldrh	r3, [r0, #8]
   132f6:	3b01      	subs	r3, #1
   132f8:	b29b      	uxth	r3, r3
   132fa:	8103      	strh	r3, [r0, #8]
   132fc:	2b00      	cmp	r3, #0
   132fe:	d194      	bne.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13300:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13302:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13304:	3b01      	subs	r3, #1
   13306:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13308:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   1330c:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1330e:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13310:	2b00      	cmp	r3, #0
   13312:	d1d8      	bne.n	132c6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   13314:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   13316:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13318:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   1331a:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   1331c:	7143      	strb	r3, [r0, #5]
            break;
   1331e:	e784      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13320:	8903      	ldrh	r3, [r0, #8]
   13322:	3b01      	subs	r3, #1
   13324:	b29b      	uxth	r3, r3
   13326:	8103      	strh	r3, [r0, #8]
   13328:	2b00      	cmp	r3, #0
   1332a:	f47f af7e 	bne.w	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   1332e:	8983      	ldrh	r3, [r0, #12]
   13330:	3b01      	subs	r3, #1
   13332:	b29b      	uxth	r3, r3
   13334:	8183      	strh	r3, [r0, #12]
   13336:	b373      	cbz	r3, 13396 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13338:	8a02      	ldrh	r2, [r0, #16]
   1333a:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   1333c:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   1333e:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13340:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13342:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   13346:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13348:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1334a:	8143      	strh	r3, [r0, #10]
                break;
   1334c:	e76d      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1334e:	8903      	ldrh	r3, [r0, #8]
   13350:	3b01      	subs	r3, #1
   13352:	b29b      	uxth	r3, r3
   13354:	8103      	strh	r3, [r0, #8]
   13356:	2b00      	cmp	r3, #0
   13358:	f47f af67 	bne.w	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   1335c:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   1335e:	8a42      	ldrh	r2, [r0, #18]
   13360:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   13362:	3301      	adds	r3, #1
            m_ledOn = true;
   13364:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   13366:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   13368:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   1336a:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   1336c:	7142      	strb	r2, [r0, #5]
            break;
   1336e:	e75c      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   13370:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   13372:	f011 0301 	ands.w	r3, r1, #1
   13376:	d149      	bne.n	1340c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   13378:	3301      	adds	r3, #1
   1337a:	b2db      	uxtb	r3, r3
   1337c:	fa41 f203 	asr.w	r2, r1, r3
   13380:	07d4      	lsls	r4, r2, #31
   13382:	d5f9      	bpl.n	13378 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   13384:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   13386:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   13388:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   1338a:	2201      	movs	r2, #1
    m_currentCode = code;
   1338c:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   1338e:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   13390:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   13392:	7142      	strb	r2, [r0, #5]
            break;
   13394:	e749      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   13396:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   13398:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   1339a:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   1339c:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   1339e:	7143      	strb	r3, [r0, #5]
            break;
   133a0:	e743      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   133a2:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   133a4:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   133a6:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   133a8:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   133aa:	7143      	strb	r3, [r0, #5]
            break;
   133ac:	e73d      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   133ae:	7983      	ldrb	r3, [r0, #6]
   133b0:	79c2      	ldrb	r2, [r0, #7]
   133b2:	3301      	adds	r3, #1
   133b4:	b2db      	uxtb	r3, r3
    if (code > 7) {
   133b6:	2b07      	cmp	r3, #7
        group++;
   133b8:	bf85      	ittet	hi
   133ba:	3201      	addhi	r2, #1
   133bc:	b2d2      	uxtbhi	r2, r2
   133be:	4619      	movls	r1, r3
        code = 0;
   133c0:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   133c2:	2a04      	cmp	r2, #4
   133c4:	4615      	mov	r5, r2
   133c6:	dd1b      	ble.n	13400 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   133c8:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   133ca:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   133cc:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   133d0:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   133d2:	d01d      	beq.n	13410 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   133d4:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   133d6:	07e9      	lsls	r1, r5, #31
   133d8:	d452      	bmi.n	13480 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   133da:	2501      	movs	r5, #1
   133dc:	3301      	adds	r3, #1
   133de:	b2db      	uxtb	r3, r3
   133e0:	fa44 f103 	asr.w	r1, r4, r3
   133e4:	07c9      	lsls	r1, r1, #31
   133e6:	d5f9      	bpl.n	133dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   133e8:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   133ea:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   133ec:	2d00      	cmp	r5, #0
   133ee:	d149      	bne.n	13484 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   133f0:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   133f2:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   133f4:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   133f6:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   133f8:	7143      	strb	r3, [r0, #5]
}
   133fa:	e716      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   133fc:	2501      	movs	r5, #1
   133fe:	e7b8      	b.n	13372 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13400:	5c84      	ldrb	r4, [r0, r2]
   13402:	fa54 f101 	asrs.w	r1, r4, r1
   13406:	d029      	beq.n	1345c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13408:	7bc5      	ldrb	r5, [r0, #15]
   1340a:	e7eb      	b.n	133e4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   1340c:	2300      	movs	r3, #0
   1340e:	e7b9      	b.n	13384 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13410:	7843      	ldrb	r3, [r0, #1]
   13412:	bb83      	cbnz	r3, 13476 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13414:	2102      	movs	r1, #2
   13416:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13418:	5cc3      	ldrb	r3, [r0, r3]
   1341a:	2b00      	cmp	r3, #0
   1341c:	d145      	bne.n	134aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1341e:	1c4a      	adds	r2, r1, #1
   13420:	b2d2      	uxtb	r2, r2
   13422:	2a05      	cmp	r2, #5
   13424:	d00d      	beq.n	13442 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13426:	5c83      	ldrb	r3, [r0, r2]
   13428:	bb2b      	cbnz	r3, 13476 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1342a:	1c8a      	adds	r2, r1, #2
   1342c:	b2d2      	uxtb	r2, r2
   1342e:	2a05      	cmp	r2, #5
   13430:	d007      	beq.n	13442 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13432:	5c83      	ldrb	r3, [r0, r2]
   13434:	b9fb      	cbnz	r3, 13476 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13436:	1ccb      	adds	r3, r1, #3
   13438:	b2db      	uxtb	r3, r3
   1343a:	2b05      	cmp	r3, #5
   1343c:	d001      	beq.n	13442 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1343e:	5cc3      	ldrb	r3, [r0, r3]
   13440:	b9c3      	cbnz	r3, 13474 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   13442:	7802      	ldrb	r2, [r0, #0]
   13444:	b112      	cbz	r2, 1344c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   13446:	e024      	b.n	13492 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13448:	5c83      	ldrb	r3, [r0, r2]
   1344a:	bb23      	cbnz	r3, 13496 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   1344c:	3201      	adds	r2, #1
   1344e:	b2d2      	uxtb	r2, r2
   13450:	42aa      	cmp	r2, r5
   13452:	ddf9      	ble.n	13448 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   13454:	2300      	movs	r3, #0
   13456:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   13458:	7143      	strb	r3, [r0, #5]
   1345a:	e6e6      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1345c:	3201      	adds	r2, #1
   1345e:	b2d2      	uxtb	r2, r2
   13460:	2a04      	cmp	r2, #4
   13462:	d8ee      	bhi.n	13442 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13464:	5c83      	ldrb	r3, [r0, r2]
   13466:	b933      	cbnz	r3, 13476 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13468:	1ca9      	adds	r1, r5, #2
   1346a:	b2c9      	uxtb	r1, r1
   1346c:	2905      	cmp	r1, #5
   1346e:	460b      	mov	r3, r1
   13470:	d1d2      	bne.n	13418 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   13472:	e7e6      	b.n	13442 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13474:	2204      	movs	r2, #4
   13476:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13478:	461c      	mov	r4, r3
   1347a:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   1347c:	2300      	movs	r3, #0
   1347e:	e7b1      	b.n	133e4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   13480:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13482:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   13484:	8a83      	ldrh	r3, [r0, #20]
   13486:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   13488:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   1348a:	2301      	movs	r3, #1
                m_ledOn = false;
   1348c:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   1348e:	7143      	strb	r3, [r0, #5]
   13490:	e6cb      	b.n	1322a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   13492:	4613      	mov	r3, r2
   13494:	2200      	movs	r2, #0
   13496:	461d      	mov	r5, r3
            m_patternWrap = true;
   13498:	2301      	movs	r3, #1
   1349a:	73c3      	strb	r3, [r0, #15]
   1349c:	462c      	mov	r4, r5
        code = 0;
   1349e:	2300      	movs	r3, #0
   134a0:	e799      	b.n	133d6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   134a2:	2502      	movs	r5, #2
   134a4:	e6eb      	b.n	1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   134a6:	2503      	movs	r5, #3
   134a8:	e6e9      	b.n	1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   134aa:	460a      	mov	r2, r1
   134ac:	e7e3      	b.n	13476 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   134ae:	bf00      	nop

000134b0 <arm_sin_q15>:
   134b0:	0982      	lsrs	r2, r0, #6
   134b2:	490c      	ldr	r1, [pc, #48]	; (134e4 <arm_sin_q15+0x34>)
   134b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   134b8:	0240      	lsls	r0, r0, #9
   134ba:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   134be:	b410      	push	{r4}
   134c0:	3201      	adds	r2, #1
   134c2:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   134c6:	fb03 f304 	mul.w	r3, r3, r4
   134ca:	0c1b      	lsrs	r3, r3, #16
   134cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   134d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   134d4:	041b      	lsls	r3, r3, #16
   134d6:	fb10 3002 	smlabb	r0, r0, r2, r3
   134da:	f340 30cf 	sbfx	r0, r0, #15, #16
   134de:	f020 0001 	bic.w	r0, r0, #1
   134e2:	4770      	bx	lr
   134e4:	000237b8 	.word	0x000237b8

000134e8 <_Znwj>:
   134e8:	b510      	push	{r4, lr}
   134ea:	2800      	cmp	r0, #0
   134ec:	bf14      	ite	ne
   134ee:	4604      	movne	r4, r0
   134f0:	2401      	moveq	r4, #1
   134f2:	4620      	mov	r0, r4
   134f4:	f00a fc40 	bl	1dd78 <malloc>
   134f8:	b100      	cbz	r0, 134fc <_Znwj+0x14>
   134fa:	bd10      	pop	{r4, pc}
   134fc:	f000 f9c8 	bl	13890 <_ZSt15get_new_handlerv>
   13500:	b108      	cbz	r0, 13506 <_Znwj+0x1e>
   13502:	4780      	blx	r0
   13504:	e7f5      	b.n	134f2 <_Znwj+0xa>
   13506:	2004      	movs	r0, #4
   13508:	f000 f8a2 	bl	13650 <__cxa_allocate_exception>
   1350c:	4b02      	ldr	r3, [pc, #8]	; (13518 <_Znwj+0x30>)
   1350e:	6003      	str	r3, [r0, #0]
   13510:	4a02      	ldr	r2, [pc, #8]	; (1351c <_Znwj+0x34>)
   13512:	4903      	ldr	r1, [pc, #12]	; (13520 <_Znwj+0x38>)
   13514:	f000 f946 	bl	137a4 <__cxa_throw>
   13518:	00023c0c 	.word	0x00023c0c
   1351c:	00013541 	.word	0x00013541
   13520:	00023be8 	.word	0x00023be8

00013524 <__cxa_pure_virtual>:
   13524:	b508      	push	{r3, lr}
   13526:	221b      	movs	r2, #27
   13528:	4902      	ldr	r1, [pc, #8]	; (13534 <__cxa_pure_virtual+0x10>)
   1352a:	2002      	movs	r0, #2
   1352c:	f00c ffd2 	bl	204d4 <write>
   13530:	f000 f8ee 	bl	13710 <_ZSt9terminatev>
   13534:	00023bbc 	.word	0x00023bbc

00013538 <_ZNKSt9bad_alloc4whatEv>:
   13538:	4800      	ldr	r0, [pc, #0]	; (1353c <_ZNKSt9bad_alloc4whatEv+0x4>)
   1353a:	4770      	bx	lr
   1353c:	00023bd8 	.word	0x00023bd8

00013540 <_ZNSt9bad_allocD1Ev>:
   13540:	b510      	push	{r4, lr}
   13542:	4b03      	ldr	r3, [pc, #12]	; (13550 <_ZNSt9bad_allocD1Ev+0x10>)
   13544:	6003      	str	r3, [r0, #0]
   13546:	4604      	mov	r4, r0
   13548:	f000 f8be 	bl	136c8 <_ZNSt9exceptionD1Ev>
   1354c:	4620      	mov	r0, r4
   1354e:	bd10      	pop	{r4, pc}
   13550:	00023c0c 	.word	0x00023c0c

00013554 <_ZNSt9bad_allocD0Ev>:
   13554:	b510      	push	{r4, lr}
   13556:	4b05      	ldr	r3, [pc, #20]	; (1356c <_ZNSt9bad_allocD0Ev+0x18>)
   13558:	6003      	str	r3, [r0, #0]
   1355a:	4604      	mov	r4, r0
   1355c:	f000 f8b4 	bl	136c8 <_ZNSt9exceptionD1Ev>
   13560:	4620      	mov	r0, r4
   13562:	2104      	movs	r1, #4
   13564:	f000 f804 	bl	13570 <_ZdlPvj>
   13568:	4620      	mov	r0, r4
   1356a:	bd10      	pop	{r4, pc}
   1356c:	00023c0c 	.word	0x00023c0c

00013570 <_ZdlPvj>:
   13570:	f000 bac0 	b.w	13af4 <_ZdlPv>

00013574 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   13574:	b4f0      	push	{r4, r5, r6, r7}
   13576:	4c1b      	ldr	r4, [pc, #108]	; (135e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13578:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1357c:	6861      	ldr	r1, [r4, #4]
   1357e:	f1a0 0608 	sub.w	r6, r0, #8
   13582:	b1c9      	cbz	r1, 135b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   13584:	19f5      	adds	r5, r6, r7
   13586:	42a9      	cmp	r1, r5
   13588:	d01b      	beq.n	135c2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   1358a:	684a      	ldr	r2, [r1, #4]
   1358c:	b32a      	cbz	r2, 135da <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1358e:	4295      	cmp	r5, r2
   13590:	d303      	bcc.n	1359a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   13592:	e022      	b.n	135da <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13594:	429d      	cmp	r5, r3
   13596:	d205      	bcs.n	135a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13598:	461a      	mov	r2, r3
   1359a:	6853      	ldr	r3, [r2, #4]
   1359c:	1d0c      	adds	r4, r1, #4
   1359e:	4611      	mov	r1, r2
   135a0:	2b00      	cmp	r3, #0
   135a2:	d1f7      	bne.n	13594 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   135a4:	6811      	ldr	r1, [r2, #0]
   135a6:	1855      	adds	r5, r2, r1
   135a8:	42ae      	cmp	r6, r5
   135aa:	d013      	beq.n	135d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   135ac:	f840 3c04 	str.w	r3, [r0, #-4]
   135b0:	6823      	ldr	r3, [r4, #0]
   135b2:	605e      	str	r6, [r3, #4]
   135b4:	bcf0      	pop	{r4, r5, r6, r7}
   135b6:	4770      	bx	lr
   135b8:	f840 1c04 	str.w	r1, [r0, #-4]
   135bc:	6066      	str	r6, [r4, #4]
   135be:	bcf0      	pop	{r4, r5, r6, r7}
   135c0:	4770      	bx	lr
   135c2:	680b      	ldr	r3, [r1, #0]
   135c4:	684a      	ldr	r2, [r1, #4]
   135c6:	f840 2c04 	str.w	r2, [r0, #-4]
   135ca:	441f      	add	r7, r3
   135cc:	f840 7c08 	str.w	r7, [r0, #-8]
   135d0:	6066      	str	r6, [r4, #4]
   135d2:	e7ef      	b.n	135b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   135d4:	440f      	add	r7, r1
   135d6:	6017      	str	r7, [r2, #0]
   135d8:	e7ec      	b.n	135b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   135da:	4613      	mov	r3, r2
   135dc:	3404      	adds	r4, #4
   135de:	460a      	mov	r2, r1
   135e0:	e7e0      	b.n	135a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   135e2:	bf00      	nop
   135e4:	2000228c 	.word	0x2000228c

000135e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   135e8:	b430      	push	{r4, r5}
   135ea:	4c18      	ldr	r4, [pc, #96]	; (1364c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   135ec:	f100 0108 	add.w	r1, r0, #8
   135f0:	6863      	ldr	r3, [r4, #4]
   135f2:	2908      	cmp	r1, #8
   135f4:	bf38      	it	cc
   135f6:	2108      	movcc	r1, #8
   135f8:	b313      	cbz	r3, 13640 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   135fa:	3107      	adds	r1, #7
   135fc:	681a      	ldr	r2, [r3, #0]
   135fe:	f021 0107 	bic.w	r1, r1, #7
   13602:	4291      	cmp	r1, r2
   13604:	d804      	bhi.n	13610 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   13606:	e01d      	b.n	13644 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13608:	6802      	ldr	r2, [r0, #0]
   1360a:	4291      	cmp	r1, r2
   1360c:	d905      	bls.n	1361a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   1360e:	4603      	mov	r3, r0
   13610:	6858      	ldr	r0, [r3, #4]
   13612:	2800      	cmp	r0, #0
   13614:	d1f8      	bne.n	13608 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   13616:	bc30      	pop	{r4, r5}
   13618:	4770      	bx	lr
   1361a:	3304      	adds	r3, #4
   1361c:	1a52      	subs	r2, r2, r1
   1361e:	2a07      	cmp	r2, #7
   13620:	d90a      	bls.n	13638 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   13622:	1845      	adds	r5, r0, r1
   13624:	6844      	ldr	r4, [r0, #4]
   13626:	606c      	str	r4, [r5, #4]
   13628:	681c      	ldr	r4, [r3, #0]
   1362a:	5042      	str	r2, [r0, r1]
   1362c:	6021      	str	r1, [r4, #0]
   1362e:	601d      	str	r5, [r3, #0]
   13630:	f104 0008 	add.w	r0, r4, #8
   13634:	bc30      	pop	{r4, r5}
   13636:	4770      	bx	lr
   13638:	6842      	ldr	r2, [r0, #4]
   1363a:	601a      	str	r2, [r3, #0]
   1363c:	4604      	mov	r4, r0
   1363e:	e7f7      	b.n	13630 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13640:	4618      	mov	r0, r3
   13642:	e7e8      	b.n	13616 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   13644:	4618      	mov	r0, r3
   13646:	1d23      	adds	r3, r4, #4
   13648:	e7e8      	b.n	1361c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   1364a:	bf00      	nop
   1364c:	2000228c 	.word	0x2000228c

00013650 <__cxa_allocate_exception>:
   13650:	b538      	push	{r3, r4, r5, lr}
   13652:	f100 0580 	add.w	r5, r0, #128	; 0x80
   13656:	4628      	mov	r0, r5
   13658:	f00a fb8e 	bl	1dd78 <malloc>
   1365c:	4604      	mov	r4, r0
   1365e:	b138      	cbz	r0, 13670 <__cxa_allocate_exception+0x20>
   13660:	2280      	movs	r2, #128	; 0x80
   13662:	2100      	movs	r1, #0
   13664:	4620      	mov	r0, r4
   13666:	f00a ffe1 	bl	1e62c <memset>
   1366a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   1366e:	bd38      	pop	{r3, r4, r5, pc}
   13670:	4628      	mov	r0, r5
   13672:	f7ff ffb9 	bl	135e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   13676:	4604      	mov	r4, r0
   13678:	2800      	cmp	r0, #0
   1367a:	d1f1      	bne.n	13660 <__cxa_allocate_exception+0x10>
   1367c:	f000 f848 	bl	13710 <_ZSt9terminatev>

00013680 <__cxa_free_exception>:
   13680:	4a06      	ldr	r2, [pc, #24]	; (1369c <__cxa_free_exception+0x1c>)
   13682:	6893      	ldr	r3, [r2, #8]
   13684:	3880      	subs	r0, #128	; 0x80
   13686:	4298      	cmp	r0, r3
   13688:	d905      	bls.n	13696 <__cxa_free_exception+0x16>
   1368a:	68d2      	ldr	r2, [r2, #12]
   1368c:	4413      	add	r3, r2
   1368e:	4298      	cmp	r0, r3
   13690:	d201      	bcs.n	13696 <__cxa_free_exception+0x16>
   13692:	f7ff bf6f 	b.w	13574 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   13696:	f00a bb77 	b.w	1dd88 <free>
   1369a:	bf00      	nop
   1369c:	2000228c 	.word	0x2000228c

000136a0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   136a0:	b538      	push	{r3, r4, r5, lr}
   136a2:	4c08      	ldr	r4, [pc, #32]	; (136c4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   136a4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   136a8:	4628      	mov	r0, r5
   136aa:	60e5      	str	r5, [r4, #12]
   136ac:	f00a fb64 	bl	1dd78 <malloc>
   136b0:	60a0      	str	r0, [r4, #8]
   136b2:	b120      	cbz	r0, 136be <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   136b4:	2300      	movs	r3, #0
   136b6:	6060      	str	r0, [r4, #4]
   136b8:	6005      	str	r5, [r0, #0]
   136ba:	6043      	str	r3, [r0, #4]
   136bc:	bd38      	pop	{r3, r4, r5, pc}
   136be:	60e0      	str	r0, [r4, #12]
   136c0:	6060      	str	r0, [r4, #4]
   136c2:	bd38      	pop	{r3, r4, r5, pc}
   136c4:	2000228c 	.word	0x2000228c

000136c8 <_ZNSt9exceptionD1Ev>:
   136c8:	4770      	bx	lr
   136ca:	bf00      	nop

000136cc <_ZNSt13bad_exceptionD1Ev>:
   136cc:	4770      	bx	lr
   136ce:	bf00      	nop

000136d0 <_ZGTtNKSt13bad_exception4whatEv>:
   136d0:	4800      	ldr	r0, [pc, #0]	; (136d4 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   136d2:	4770      	bx	lr
   136d4:	00023c18 	.word	0x00023c18

000136d8 <_ZNSt13bad_exceptionD0Ev>:
   136d8:	b510      	push	{r4, lr}
   136da:	2104      	movs	r1, #4
   136dc:	4604      	mov	r4, r0
   136de:	f7ff ff47 	bl	13570 <_ZdlPvj>
   136e2:	4620      	mov	r0, r4
   136e4:	bd10      	pop	{r4, pc}
   136e6:	bf00      	nop

000136e8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   136e8:	b508      	push	{r3, lr}
   136ea:	4780      	blx	r0
   136ec:	f00a f896 	bl	1d81c <abort>
   136f0:	f000 fb6c 	bl	13dcc <__cxa_begin_catch>
   136f4:	f00a f892 	bl	1d81c <abort>
   136f8:	460d      	mov	r5, r1
   136fa:	4604      	mov	r4, r0
   136fc:	f000 fba4 	bl	13e48 <__cxa_end_catch>
   13700:	3501      	adds	r5, #1
   13702:	d001      	beq.n	13708 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   13704:	f000 f9f8 	bl	13af8 <__cxa_end_cleanup>
   13708:	4620      	mov	r0, r4
   1370a:	f000 faef 	bl	13cec <__cxa_call_unexpected>
   1370e:	bf00      	nop

00013710 <_ZSt9terminatev>:
   13710:	b508      	push	{r3, lr}
   13712:	4b03      	ldr	r3, [pc, #12]	; (13720 <_ZSt9terminatev+0x10>)
   13714:	6818      	ldr	r0, [r3, #0]
   13716:	f3bf 8f5b 	dmb	ish
   1371a:	f7ff ffe5 	bl	136e8 <_ZN10__cxxabiv111__terminateEPFvvE>
   1371e:	bf00      	nop
   13720:	200000f8 	.word	0x200000f8

00013724 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   13724:	b508      	push	{r3, lr}
   13726:	4780      	blx	r0
   13728:	f7ff fff2 	bl	13710 <_ZSt9terminatev>

0001372c <_ZSt10unexpectedv>:
   1372c:	b508      	push	{r3, lr}
   1372e:	4b03      	ldr	r3, [pc, #12]	; (1373c <_ZSt10unexpectedv+0x10>)
   13730:	6818      	ldr	r0, [r3, #0]
   13732:	f3bf 8f5b 	dmb	ish
   13736:	f7ff fff5 	bl	13724 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1373a:	bf00      	nop
   1373c:	200000f4 	.word	0x200000f4

00013740 <_ZSt13get_terminatev>:
   13740:	4b02      	ldr	r3, [pc, #8]	; (1374c <_ZSt13get_terminatev+0xc>)
   13742:	6818      	ldr	r0, [r3, #0]
   13744:	f3bf 8f5b 	dmb	ish
   13748:	4770      	bx	lr
   1374a:	bf00      	nop
   1374c:	200000f8 	.word	0x200000f8

00013750 <_ZSt14get_unexpectedv>:
   13750:	4b02      	ldr	r3, [pc, #8]	; (1375c <_ZSt14get_unexpectedv+0xc>)
   13752:	6818      	ldr	r0, [r3, #0]
   13754:	f3bf 8f5b 	dmb	ish
   13758:	4770      	bx	lr
   1375a:	bf00      	nop
   1375c:	200000f4 	.word	0x200000f4

00013760 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   13760:	2801      	cmp	r0, #1
   13762:	b510      	push	{r4, lr}
   13764:	d81a      	bhi.n	1379c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   13766:	f3bf 8f5b 	dmb	ish
   1376a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1376e:	e853 2f00 	ldrex	r2, [r3]
   13772:	3a01      	subs	r2, #1
   13774:	e843 2000 	strex	r0, r2, [r3]
   13778:	2800      	cmp	r0, #0
   1377a:	d1f8      	bne.n	1376e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   1377c:	f3bf 8f5b 	dmb	ish
   13780:	b95a      	cbnz	r2, 1379a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   13782:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   13786:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1378a:	b10b      	cbz	r3, 13790 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   1378c:	4620      	mov	r0, r4
   1378e:	4798      	blx	r3
   13790:	4620      	mov	r0, r4
   13792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13796:	f7ff bf73 	b.w	13680 <__cxa_free_exception>
   1379a:	bd10      	pop	{r4, pc}
   1379c:	f851 0c14 	ldr.w	r0, [r1, #-20]
   137a0:	f7ff ffa2 	bl	136e8 <_ZN10__cxxabiv111__terminateEPFvvE>

000137a4 <__cxa_throw>:
   137a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   137a6:	4604      	mov	r4, r0
   137a8:	460f      	mov	r7, r1
   137aa:	4616      	mov	r6, r2
   137ac:	f000 fb96 	bl	13edc <__cxa_get_globals>
   137b0:	6843      	ldr	r3, [r0, #4]
   137b2:	2501      	movs	r5, #1
   137b4:	442b      	add	r3, r5
   137b6:	6043      	str	r3, [r0, #4]
   137b8:	f844 7c78 	str.w	r7, [r4, #-120]
   137bc:	f844 6c74 	str.w	r6, [r4, #-116]
   137c0:	f844 5c80 	str.w	r5, [r4, #-128]
   137c4:	f7ff ffc4 	bl	13750 <_ZSt14get_unexpectedv>
   137c8:	f844 0c70 	str.w	r0, [r4, #-112]
   137cc:	f7ff ffb8 	bl	13740 <_ZSt13get_terminatev>
   137d0:	2347      	movs	r3, #71	; 0x47
   137d2:	2243      	movs	r2, #67	; 0x43
   137d4:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   137d8:	4910      	ldr	r1, [pc, #64]	; (1381c <__cxa_throw+0x78>)
   137da:	f804 3c58 	strb.w	r3, [r4, #-88]
   137de:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   137e2:	232b      	movs	r3, #43	; 0x2b
   137e4:	2755      	movs	r7, #85	; 0x55
   137e6:	2600      	movs	r6, #0
   137e8:	f844 0c6c 	str.w	r0, [r4, #-108]
   137ec:	f804 ec57 	strb.w	lr, [r4, #-87]
   137f0:	f844 1c50 	str.w	r1, [r4, #-80]
   137f4:	f804 2c55 	strb.w	r2, [r4, #-85]
   137f8:	f804 2c54 	strb.w	r2, [r4, #-84]
   137fc:	f804 3c53 	strb.w	r3, [r4, #-83]
   13800:	f804 3c52 	strb.w	r3, [r4, #-82]
   13804:	f804 7c56 	strb.w	r7, [r4, #-86]
   13808:	f804 6c51 	strb.w	r6, [r4, #-81]
   1380c:	4628      	mov	r0, r5
   1380e:	f009 fde9 	bl	1d3e4 <_Unwind_RaiseException>
   13812:	4628      	mov	r0, r5
   13814:	f000 fada 	bl	13dcc <__cxa_begin_catch>
   13818:	f7ff ff7a 	bl	13710 <_ZSt9terminatev>
   1381c:	00013761 	.word	0x00013761

00013820 <__cxa_rethrow>:
   13820:	b510      	push	{r4, lr}
   13822:	f000 fb5b 	bl	13edc <__cxa_get_globals>
   13826:	6842      	ldr	r2, [r0, #4]
   13828:	6804      	ldr	r4, [r0, #0]
   1382a:	3201      	adds	r2, #1
   1382c:	6042      	str	r2, [r0, #4]
   1382e:	b164      	cbz	r4, 1384a <__cxa_rethrow+0x2a>
   13830:	f894 2020 	ldrb.w	r2, [r4, #32]
   13834:	2a47      	cmp	r2, #71	; 0x47
   13836:	d00a      	beq.n	1384e <__cxa_rethrow+0x2e>
   13838:	2200      	movs	r2, #0
   1383a:	6002      	str	r2, [r0, #0]
   1383c:	3420      	adds	r4, #32
   1383e:	4620      	mov	r0, r4
   13840:	f009 fdf4 	bl	1d42c <_Unwind_Resume_or_Rethrow>
   13844:	4620      	mov	r0, r4
   13846:	f000 fac1 	bl	13dcc <__cxa_begin_catch>
   1384a:	f7ff ff61 	bl	13710 <_ZSt9terminatev>
   1384e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13852:	2a4e      	cmp	r2, #78	; 0x4e
   13854:	d1f0      	bne.n	13838 <__cxa_rethrow+0x18>
   13856:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1385a:	2a55      	cmp	r2, #85	; 0x55
   1385c:	d1ec      	bne.n	13838 <__cxa_rethrow+0x18>
   1385e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   13862:	2a43      	cmp	r2, #67	; 0x43
   13864:	d1e8      	bne.n	13838 <__cxa_rethrow+0x18>
   13866:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1386a:	2a43      	cmp	r2, #67	; 0x43
   1386c:	d1e4      	bne.n	13838 <__cxa_rethrow+0x18>
   1386e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   13872:	2a2b      	cmp	r2, #43	; 0x2b
   13874:	d1e0      	bne.n	13838 <__cxa_rethrow+0x18>
   13876:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1387a:	2a2b      	cmp	r2, #43	; 0x2b
   1387c:	d1dc      	bne.n	13838 <__cxa_rethrow+0x18>
   1387e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   13882:	2a01      	cmp	r2, #1
   13884:	d8d8      	bhi.n	13838 <__cxa_rethrow+0x18>
   13886:	6962      	ldr	r2, [r4, #20]
   13888:	4252      	negs	r2, r2
   1388a:	6162      	str	r2, [r4, #20]
   1388c:	e7d6      	b.n	1383c <__cxa_rethrow+0x1c>
   1388e:	bf00      	nop

00013890 <_ZSt15get_new_handlerv>:
   13890:	4b02      	ldr	r3, [pc, #8]	; (1389c <_ZSt15get_new_handlerv+0xc>)
   13892:	6818      	ldr	r0, [r3, #0]
   13894:	f3bf 8f5b 	dmb	ish
   13898:	4770      	bx	lr
   1389a:	bf00      	nop
   1389c:	2000229c 	.word	0x2000229c

000138a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   138a0:	b510      	push	{r4, lr}
   138a2:	4b03      	ldr	r3, [pc, #12]	; (138b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   138a4:	6003      	str	r3, [r0, #0]
   138a6:	4604      	mov	r4, r0
   138a8:	f000 f8ca 	bl	13a40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   138ac:	4620      	mov	r0, r4
   138ae:	bd10      	pop	{r4, pc}
   138b0:	00023d08 	.word	0x00023d08

000138b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   138b4:	b510      	push	{r4, lr}
   138b6:	4b05      	ldr	r3, [pc, #20]	; (138cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   138b8:	6003      	str	r3, [r0, #0]
   138ba:	4604      	mov	r4, r0
   138bc:	f000 f8c0 	bl	13a40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   138c0:	4620      	mov	r0, r4
   138c2:	210c      	movs	r1, #12
   138c4:	f7ff fe54 	bl	13570 <_ZdlPvj>
   138c8:	4620      	mov	r0, r4
   138ca:	bd10      	pop	{r4, pc}
   138cc:	00023d08 	.word	0x00023d08

000138d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   138d0:	b570      	push	{r4, r5, r6, lr}
   138d2:	b082      	sub	sp, #8
   138d4:	460d      	mov	r5, r1
   138d6:	9c06      	ldr	r4, [sp, #24]
   138d8:	4294      	cmp	r4, r2
   138da:	4606      	mov	r6, r0
   138dc:	d009      	beq.n	138f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   138de:	68b0      	ldr	r0, [r6, #8]
   138e0:	6806      	ldr	r6, [r0, #0]
   138e2:	9406      	str	r4, [sp, #24]
   138e4:	6a34      	ldr	r4, [r6, #32]
   138e6:	4629      	mov	r1, r5
   138e8:	46a4      	mov	ip, r4
   138ea:	b002      	add	sp, #8
   138ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   138f0:	4760      	bx	ip
   138f2:	4619      	mov	r1, r3
   138f4:	9201      	str	r2, [sp, #4]
   138f6:	9300      	str	r3, [sp, #0]
   138f8:	f000 f86a 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   138fc:	9b00      	ldr	r3, [sp, #0]
   138fe:	9a01      	ldr	r2, [sp, #4]
   13900:	2800      	cmp	r0, #0
   13902:	d0ec      	beq.n	138de <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   13904:	2006      	movs	r0, #6
   13906:	b002      	add	sp, #8
   13908:	bd70      	pop	{r4, r5, r6, pc}
   1390a:	bf00      	nop

0001390c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13910:	b081      	sub	sp, #4
   13912:	460e      	mov	r6, r1
   13914:	4619      	mov	r1, r3
   13916:	461f      	mov	r7, r3
   13918:	4691      	mov	r9, r2
   1391a:	4683      	mov	fp, r0
   1391c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1391e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   13922:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13926:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13928:	f000 f852 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   1392c:	b170      	cbz	r0, 1394c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   1392e:	2e00      	cmp	r6, #0
   13930:	602c      	str	r4, [r5, #0]
   13932:	f885 9004 	strb.w	r9, [r5, #4]
   13936:	db1f      	blt.n	13978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13938:	4434      	add	r4, r6
   1393a:	45a0      	cmp	r8, r4
   1393c:	bf0c      	ite	eq
   1393e:	2406      	moveq	r4, #6
   13940:	2401      	movne	r4, #1
   13942:	71ac      	strb	r4, [r5, #6]
   13944:	2000      	movs	r0, #0
   13946:	b001      	add	sp, #4
   13948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394c:	4544      	cmp	r4, r8
   1394e:	d018      	beq.n	13982 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13950:	f8db 0008 	ldr.w	r0, [fp, #8]
   13954:	f8d0 e000 	ldr.w	lr, [r0]
   13958:	950d      	str	r5, [sp, #52]	; 0x34
   1395a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1395e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   13962:	940a      	str	r4, [sp, #40]	; 0x28
   13964:	f8de 401c 	ldr.w	r4, [lr, #28]
   13968:	463b      	mov	r3, r7
   1396a:	464a      	mov	r2, r9
   1396c:	4631      	mov	r1, r6
   1396e:	46a4      	mov	ip, r4
   13970:	b001      	add	sp, #4
   13972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13976:	4760      	bx	ip
   13978:	3602      	adds	r6, #2
   1397a:	d1e3      	bne.n	13944 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1397c:	2301      	movs	r3, #1
   1397e:	71ab      	strb	r3, [r5, #6]
   13980:	e7e0      	b.n	13944 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13982:	4651      	mov	r1, sl
   13984:	4658      	mov	r0, fp
   13986:	f000 f823 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   1398a:	2800      	cmp	r0, #0
   1398c:	d0e0      	beq.n	13950 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1398e:	2000      	movs	r0, #0
   13990:	f885 9005 	strb.w	r9, [r5, #5]
   13994:	b001      	add	sp, #4
   13996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1399a:	bf00      	nop

0001399c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1399c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139a0:	4607      	mov	r7, r0
   139a2:	460c      	mov	r4, r1
   139a4:	4615      	mov	r5, r2
   139a6:	461e      	mov	r6, r3
   139a8:	f000 f862 	bl	13a70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   139ac:	b108      	cbz	r0, 139b2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   139ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   139b2:	68b8      	ldr	r0, [r7, #8]
   139b4:	6807      	ldr	r7, [r0, #0]
   139b6:	4621      	mov	r1, r4
   139b8:	69bc      	ldr	r4, [r7, #24]
   139ba:	4633      	mov	r3, r6
   139bc:	462a      	mov	r2, r5
   139be:	46a4      	mov	ip, r4
   139c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   139c4:	4760      	bx	ip
   139c6:	bf00      	nop

000139c8 <_ZNSt9type_infoD1Ev>:
   139c8:	4770      	bx	lr
   139ca:	bf00      	nop

000139cc <_ZNKSt9type_info14__is_pointer_pEv>:
   139cc:	2000      	movs	r0, #0
   139ce:	4770      	bx	lr

000139d0 <_ZNKSt9type_infoeqERKS_>:
   139d0:	4281      	cmp	r1, r0
   139d2:	d011      	beq.n	139f8 <_ZNKSt9type_infoeqERKS_+0x28>
   139d4:	b508      	push	{r3, lr}
   139d6:	6840      	ldr	r0, [r0, #4]
   139d8:	7803      	ldrb	r3, [r0, #0]
   139da:	2b2a      	cmp	r3, #42	; 0x2a
   139dc:	d00a      	beq.n	139f4 <_ZNKSt9type_infoeqERKS_+0x24>
   139de:	6849      	ldr	r1, [r1, #4]
   139e0:	780b      	ldrb	r3, [r1, #0]
   139e2:	2b2a      	cmp	r3, #42	; 0x2a
   139e4:	bf08      	it	eq
   139e6:	3101      	addeq	r1, #1
   139e8:	f00b f8ee 	bl	1ebc8 <strcmp>
   139ec:	fab0 f080 	clz	r0, r0
   139f0:	0940      	lsrs	r0, r0, #5
   139f2:	bd08      	pop	{r3, pc}
   139f4:	2000      	movs	r0, #0
   139f6:	bd08      	pop	{r3, pc}
   139f8:	2001      	movs	r0, #1
   139fa:	4770      	bx	lr

000139fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   139fc:	b570      	push	{r4, r5, r6, lr}
   139fe:	6803      	ldr	r3, [r0, #0]
   13a00:	b084      	sub	sp, #16
   13a02:	2400      	movs	r4, #0
   13a04:	699e      	ldr	r6, [r3, #24]
   13a06:	9400      	str	r4, [sp, #0]
   13a08:	2310      	movs	r3, #16
   13a0a:	4615      	mov	r5, r2
   13a0c:	9302      	str	r3, [sp, #8]
   13a0e:	6812      	ldr	r2, [r2, #0]
   13a10:	f88d 4004 	strb.w	r4, [sp, #4]
   13a14:	466b      	mov	r3, sp
   13a16:	9403      	str	r4, [sp, #12]
   13a18:	47b0      	blx	r6
   13a1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13a1e:	f003 0306 	and.w	r3, r3, #6
   13a22:	2b06      	cmp	r3, #6
   13a24:	bf03      	ittte	eq
   13a26:	9b00      	ldreq	r3, [sp, #0]
   13a28:	602b      	streq	r3, [r5, #0]
   13a2a:	2001      	moveq	r0, #1
   13a2c:	4620      	movne	r0, r4
   13a2e:	b004      	add	sp, #16
   13a30:	bd70      	pop	{r4, r5, r6, pc}
   13a32:	bf00      	nop

00013a34 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13a34:	9800      	ldr	r0, [sp, #0]
   13a36:	4290      	cmp	r0, r2
   13a38:	bf0c      	ite	eq
   13a3a:	2006      	moveq	r0, #6
   13a3c:	2001      	movne	r0, #1
   13a3e:	4770      	bx	lr

00013a40 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13a40:	b510      	push	{r4, lr}
   13a42:	4b03      	ldr	r3, [pc, #12]	; (13a50 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   13a44:	6003      	str	r3, [r0, #0]
   13a46:	4604      	mov	r4, r0
   13a48:	f7ff ffbe 	bl	139c8 <_ZNSt9type_infoD1Ev>
   13a4c:	4620      	mov	r0, r4
   13a4e:	bd10      	pop	{r4, pc}
   13a50:	00023d7c 	.word	0x00023d7c

00013a54 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   13a54:	b510      	push	{r4, lr}
   13a56:	4b05      	ldr	r3, [pc, #20]	; (13a6c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13a58:	6003      	str	r3, [r0, #0]
   13a5a:	4604      	mov	r4, r0
   13a5c:	f7ff ffb4 	bl	139c8 <_ZNSt9type_infoD1Ev>
   13a60:	4620      	mov	r0, r4
   13a62:	2108      	movs	r1, #8
   13a64:	f7ff fd84 	bl	13570 <_ZdlPvj>
   13a68:	4620      	mov	r0, r4
   13a6a:	bd10      	pop	{r4, pc}
   13a6c:	00023d7c 	.word	0x00023d7c

00013a70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13a70:	b538      	push	{r3, r4, r5, lr}
   13a72:	4615      	mov	r5, r2
   13a74:	461c      	mov	r4, r3
   13a76:	f7ff ffab 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   13a7a:	b120      	cbz	r0, 13a86 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   13a7c:	2208      	movs	r2, #8
   13a7e:	2306      	movs	r3, #6
   13a80:	6025      	str	r5, [r4, #0]
   13a82:	60e2      	str	r2, [r4, #12]
   13a84:	7123      	strb	r3, [r4, #4]
   13a86:	bd38      	pop	{r3, r4, r5, pc}

00013a88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a8c:	4617      	mov	r7, r2
   13a8e:	461c      	mov	r4, r3
   13a90:	4606      	mov	r6, r0
   13a92:	460d      	mov	r5, r1
   13a94:	f7ff ff9c 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   13a98:	b908      	cbnz	r0, 13a9e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   13a9a:	2c03      	cmp	r4, #3
   13a9c:	d901      	bls.n	13aa2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   13a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13aa2:	682b      	ldr	r3, [r5, #0]
   13aa4:	463a      	mov	r2, r7
   13aa6:	4631      	mov	r1, r6
   13aa8:	4628      	mov	r0, r5
   13aaa:	695b      	ldr	r3, [r3, #20]
   13aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13ab0:	4718      	bx	r3
   13ab2:	bf00      	nop

00013ab4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   13ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ab6:	b083      	sub	sp, #12
   13ab8:	4617      	mov	r7, r2
   13aba:	9d08      	ldr	r5, [sp, #32]
   13abc:	990a      	ldr	r1, [sp, #40]	; 0x28
   13abe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13ac0:	428d      	cmp	r5, r1
   13ac2:	4606      	mov	r6, r0
   13ac4:	d00b      	beq.n	13ade <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   13ac6:	4619      	mov	r1, r3
   13ac8:	4630      	mov	r0, r6
   13aca:	f7ff ff81 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   13ace:	b118      	cbz	r0, 13ad8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13ad0:	2301      	movs	r3, #1
   13ad2:	6025      	str	r5, [r4, #0]
   13ad4:	7127      	strb	r7, [r4, #4]
   13ad6:	71a3      	strb	r3, [r4, #6]
   13ad8:	2000      	movs	r0, #0
   13ada:	b003      	add	sp, #12
   13adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ade:	9909      	ldr	r1, [sp, #36]	; 0x24
   13ae0:	9301      	str	r3, [sp, #4]
   13ae2:	f7ff ff75 	bl	139d0 <_ZNKSt9type_infoeqERKS_>
   13ae6:	b118      	cbz	r0, 13af0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13ae8:	2000      	movs	r0, #0
   13aea:	7167      	strb	r7, [r4, #5]
   13aec:	b003      	add	sp, #12
   13aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13af0:	9b01      	ldr	r3, [sp, #4]
   13af2:	e7e8      	b.n	13ac6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

00013af4 <_ZdlPv>:
   13af4:	f00a b948 	b.w	1dd88 <free>

00013af8 <__cxa_end_cleanup>:
   13af8:	b41e      	push	{r1, r2, r3, r4}
   13afa:	f000 f891 	bl	13c20 <__gnu_end_cleanup>
   13afe:	bc1e      	pop	{r1, r2, r3, r4}
   13b00:	f009 fc82 	bl	1d408 <_Unwind_Resume>

00013b04 <__cxa_type_match>:
   13b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b06:	7802      	ldrb	r2, [r0, #0]
   13b08:	2a47      	cmp	r2, #71	; 0x47
   13b0a:	b083      	sub	sp, #12
   13b0c:	460d      	mov	r5, r1
   13b0e:	461f      	mov	r7, r3
   13b10:	d01e      	beq.n	13b50 <__cxa_type_match+0x4c>
   13b12:	2300      	movs	r3, #0
   13b14:	4c27      	ldr	r4, [pc, #156]	; (13bb4 <__cxa_type_match+0xb0>)
   13b16:	9301      	str	r3, [sp, #4]
   13b18:	6823      	ldr	r3, [r4, #0]
   13b1a:	4620      	mov	r0, r4
   13b1c:	689b      	ldr	r3, [r3, #8]
   13b1e:	4798      	blx	r3
   13b20:	b180      	cbz	r0, 13b44 <__cxa_type_match+0x40>
   13b22:	9b01      	ldr	r3, [sp, #4]
   13b24:	681b      	ldr	r3, [r3, #0]
   13b26:	9301      	str	r3, [sp, #4]
   13b28:	2602      	movs	r6, #2
   13b2a:	682b      	ldr	r3, [r5, #0]
   13b2c:	4621      	mov	r1, r4
   13b2e:	4628      	mov	r0, r5
   13b30:	691c      	ldr	r4, [r3, #16]
   13b32:	aa01      	add	r2, sp, #4
   13b34:	2301      	movs	r3, #1
   13b36:	47a0      	blx	r4
   13b38:	b130      	cbz	r0, 13b48 <__cxa_type_match+0x44>
   13b3a:	9b01      	ldr	r3, [sp, #4]
   13b3c:	603b      	str	r3, [r7, #0]
   13b3e:	4630      	mov	r0, r6
   13b40:	b003      	add	sp, #12
   13b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b44:	2601      	movs	r6, #1
   13b46:	e7f0      	b.n	13b2a <__cxa_type_match+0x26>
   13b48:	4606      	mov	r6, r0
   13b4a:	4630      	mov	r0, r6
   13b4c:	b003      	add	sp, #12
   13b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b50:	7843      	ldrb	r3, [r0, #1]
   13b52:	2b4e      	cmp	r3, #78	; 0x4e
   13b54:	d1dd      	bne.n	13b12 <__cxa_type_match+0xe>
   13b56:	7883      	ldrb	r3, [r0, #2]
   13b58:	2b55      	cmp	r3, #85	; 0x55
   13b5a:	d1da      	bne.n	13b12 <__cxa_type_match+0xe>
   13b5c:	78c3      	ldrb	r3, [r0, #3]
   13b5e:	2b43      	cmp	r3, #67	; 0x43
   13b60:	d019      	beq.n	13b96 <__cxa_type_match+0x92>
   13b62:	78c3      	ldrb	r3, [r0, #3]
   13b64:	2b43      	cmp	r3, #67	; 0x43
   13b66:	d1d4      	bne.n	13b12 <__cxa_type_match+0xe>
   13b68:	7903      	ldrb	r3, [r0, #4]
   13b6a:	2b43      	cmp	r3, #67	; 0x43
   13b6c:	d1d1      	bne.n	13b12 <__cxa_type_match+0xe>
   13b6e:	7943      	ldrb	r3, [r0, #5]
   13b70:	2b2b      	cmp	r3, #43	; 0x2b
   13b72:	d1ce      	bne.n	13b12 <__cxa_type_match+0xe>
   13b74:	7983      	ldrb	r3, [r0, #6]
   13b76:	2b2b      	cmp	r3, #43	; 0x2b
   13b78:	d1cb      	bne.n	13b12 <__cxa_type_match+0xe>
   13b7a:	79c3      	ldrb	r3, [r0, #7]
   13b7c:	2b01      	cmp	r3, #1
   13b7e:	d8c8      	bhi.n	13b12 <__cxa_type_match+0xe>
   13b80:	d004      	beq.n	13b8c <__cxa_type_match+0x88>
   13b82:	f850 4c20 	ldr.w	r4, [r0, #-32]
   13b86:	3058      	adds	r0, #88	; 0x58
   13b88:	9001      	str	r0, [sp, #4]
   13b8a:	e7c5      	b.n	13b18 <__cxa_type_match+0x14>
   13b8c:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13b90:	f850 4c78 	ldr.w	r4, [r0, #-120]
   13b94:	e7f8      	b.n	13b88 <__cxa_type_match+0x84>
   13b96:	7903      	ldrb	r3, [r0, #4]
   13b98:	2b46      	cmp	r3, #70	; 0x46
   13b9a:	d1e2      	bne.n	13b62 <__cxa_type_match+0x5e>
   13b9c:	7943      	ldrb	r3, [r0, #5]
   13b9e:	2b4f      	cmp	r3, #79	; 0x4f
   13ba0:	d1df      	bne.n	13b62 <__cxa_type_match+0x5e>
   13ba2:	7983      	ldrb	r3, [r0, #6]
   13ba4:	2b52      	cmp	r3, #82	; 0x52
   13ba6:	d1dc      	bne.n	13b62 <__cxa_type_match+0x5e>
   13ba8:	79c3      	ldrb	r3, [r0, #7]
   13baa:	2b00      	cmp	r3, #0
   13bac:	d1d9      	bne.n	13b62 <__cxa_type_match+0x5e>
   13bae:	9301      	str	r3, [sp, #4]
   13bb0:	4c01      	ldr	r4, [pc, #4]	; (13bb8 <__cxa_type_match+0xb4>)
   13bb2:	e7b1      	b.n	13b18 <__cxa_type_match+0x14>
   13bb4:	00023c34 	.word	0x00023c34
   13bb8:	00023c2c 	.word	0x00023c2c

00013bbc <__cxa_begin_cleanup>:
   13bbc:	b510      	push	{r4, lr}
   13bbe:	4604      	mov	r4, r0
   13bc0:	f000 f98c 	bl	13edc <__cxa_get_globals>
   13bc4:	7823      	ldrb	r3, [r4, #0]
   13bc6:	2b47      	cmp	r3, #71	; 0x47
   13bc8:	f1a4 0220 	sub.w	r2, r4, #32
   13bcc:	d004      	beq.n	13bd8 <__cxa_begin_cleanup+0x1c>
   13bce:	6883      	ldr	r3, [r0, #8]
   13bd0:	bb23      	cbnz	r3, 13c1c <__cxa_begin_cleanup+0x60>
   13bd2:	6082      	str	r2, [r0, #8]
   13bd4:	2001      	movs	r0, #1
   13bd6:	bd10      	pop	{r4, pc}
   13bd8:	7863      	ldrb	r3, [r4, #1]
   13bda:	2b4e      	cmp	r3, #78	; 0x4e
   13bdc:	d1f7      	bne.n	13bce <__cxa_begin_cleanup+0x12>
   13bde:	78a3      	ldrb	r3, [r4, #2]
   13be0:	2b55      	cmp	r3, #85	; 0x55
   13be2:	d1f4      	bne.n	13bce <__cxa_begin_cleanup+0x12>
   13be4:	78e3      	ldrb	r3, [r4, #3]
   13be6:	2b43      	cmp	r3, #67	; 0x43
   13be8:	d1f1      	bne.n	13bce <__cxa_begin_cleanup+0x12>
   13bea:	7923      	ldrb	r3, [r4, #4]
   13bec:	2b43      	cmp	r3, #67	; 0x43
   13bee:	d1ee      	bne.n	13bce <__cxa_begin_cleanup+0x12>
   13bf0:	7963      	ldrb	r3, [r4, #5]
   13bf2:	2b2b      	cmp	r3, #43	; 0x2b
   13bf4:	d1eb      	bne.n	13bce <__cxa_begin_cleanup+0x12>
   13bf6:	79a3      	ldrb	r3, [r4, #6]
   13bf8:	2b2b      	cmp	r3, #43	; 0x2b
   13bfa:	d1e8      	bne.n	13bce <__cxa_begin_cleanup+0x12>
   13bfc:	79e3      	ldrb	r3, [r4, #7]
   13bfe:	2b01      	cmp	r3, #1
   13c00:	d8e5      	bhi.n	13bce <__cxa_begin_cleanup+0x12>
   13c02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13c06:	3301      	adds	r3, #1
   13c08:	2b01      	cmp	r3, #1
   13c0a:	f844 3c04 	str.w	r3, [r4, #-4]
   13c0e:	d1e1      	bne.n	13bd4 <__cxa_begin_cleanup+0x18>
   13c10:	6883      	ldr	r3, [r0, #8]
   13c12:	f844 3c08 	str.w	r3, [r4, #-8]
   13c16:	6082      	str	r2, [r0, #8]
   13c18:	2001      	movs	r0, #1
   13c1a:	bd10      	pop	{r4, pc}
   13c1c:	f7ff fd78 	bl	13710 <_ZSt9terminatev>

00013c20 <__gnu_end_cleanup>:
   13c20:	b508      	push	{r3, lr}
   13c22:	f000 f95b 	bl	13edc <__cxa_get_globals>
   13c26:	6883      	ldr	r3, [r0, #8]
   13c28:	b383      	cbz	r3, 13c8c <__gnu_end_cleanup+0x6c>
   13c2a:	f893 2020 	ldrb.w	r2, [r3, #32]
   13c2e:	2a47      	cmp	r2, #71	; 0x47
   13c30:	d004      	beq.n	13c3c <__gnu_end_cleanup+0x1c>
   13c32:	2200      	movs	r2, #0
   13c34:	6082      	str	r2, [r0, #8]
   13c36:	f103 0020 	add.w	r0, r3, #32
   13c3a:	bd08      	pop	{r3, pc}
   13c3c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13c40:	2a4e      	cmp	r2, #78	; 0x4e
   13c42:	d1f6      	bne.n	13c32 <__gnu_end_cleanup+0x12>
   13c44:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13c48:	2a55      	cmp	r2, #85	; 0x55
   13c4a:	d1f2      	bne.n	13c32 <__gnu_end_cleanup+0x12>
   13c4c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13c50:	2a43      	cmp	r2, #67	; 0x43
   13c52:	d1ee      	bne.n	13c32 <__gnu_end_cleanup+0x12>
   13c54:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13c58:	2a43      	cmp	r2, #67	; 0x43
   13c5a:	d1ea      	bne.n	13c32 <__gnu_end_cleanup+0x12>
   13c5c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13c60:	2a2b      	cmp	r2, #43	; 0x2b
   13c62:	d1e6      	bne.n	13c32 <__gnu_end_cleanup+0x12>
   13c64:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13c68:	2a2b      	cmp	r2, #43	; 0x2b
   13c6a:	d1e2      	bne.n	13c32 <__gnu_end_cleanup+0x12>
   13c6c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13c70:	2a01      	cmp	r2, #1
   13c72:	d8de      	bhi.n	13c32 <__gnu_end_cleanup+0x12>
   13c74:	69da      	ldr	r2, [r3, #28]
   13c76:	3a01      	subs	r2, #1
   13c78:	61da      	str	r2, [r3, #28]
   13c7a:	2a00      	cmp	r2, #0
   13c7c:	d1db      	bne.n	13c36 <__gnu_end_cleanup+0x16>
   13c7e:	699a      	ldr	r2, [r3, #24]
   13c80:	6082      	str	r2, [r0, #8]
   13c82:	2200      	movs	r2, #0
   13c84:	619a      	str	r2, [r3, #24]
   13c86:	f103 0020 	add.w	r0, r3, #32
   13c8a:	bd08      	pop	{r3, pc}
   13c8c:	f7ff fd40 	bl	13710 <_ZSt9terminatev>

00013c90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13c90:	7803      	ldrb	r3, [r0, #0]
   13c92:	2b47      	cmp	r3, #71	; 0x47
   13c94:	d001      	beq.n	13c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13c96:	2000      	movs	r0, #0
   13c98:	4770      	bx	lr
   13c9a:	7843      	ldrb	r3, [r0, #1]
   13c9c:	2b4e      	cmp	r3, #78	; 0x4e
   13c9e:	d1fa      	bne.n	13c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ca0:	7883      	ldrb	r3, [r0, #2]
   13ca2:	2b55      	cmp	r3, #85	; 0x55
   13ca4:	d1f7      	bne.n	13c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ca6:	78c3      	ldrb	r3, [r0, #3]
   13ca8:	2b43      	cmp	r3, #67	; 0x43
   13caa:	d1f4      	bne.n	13c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13cac:	7903      	ldrb	r3, [r0, #4]
   13cae:	2b43      	cmp	r3, #67	; 0x43
   13cb0:	d1f1      	bne.n	13c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13cb2:	7943      	ldrb	r3, [r0, #5]
   13cb4:	2b2b      	cmp	r3, #43	; 0x2b
   13cb6:	d1ee      	bne.n	13c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13cb8:	7983      	ldrb	r3, [r0, #6]
   13cba:	2b2b      	cmp	r3, #43	; 0x2b
   13cbc:	d1eb      	bne.n	13c96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13cbe:	79c0      	ldrb	r0, [r0, #7]
   13cc0:	2801      	cmp	r0, #1
   13cc2:	bf8c      	ite	hi
   13cc4:	2000      	movhi	r0, #0
   13cc6:	2001      	movls	r0, #1
   13cc8:	4770      	bx	lr
   13cca:	bf00      	nop

00013ccc <__cxa_call_terminate>:
   13ccc:	b510      	push	{r4, lr}
   13cce:	b130      	cbz	r0, 13cde <__cxa_call_terminate+0x12>
   13cd0:	4604      	mov	r4, r0
   13cd2:	f000 f87b 	bl	13dcc <__cxa_begin_catch>
   13cd6:	4620      	mov	r0, r4
   13cd8:	f7ff ffda 	bl	13c90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13cdc:	b908      	cbnz	r0, 13ce2 <__cxa_call_terminate+0x16>
   13cde:	f7ff fd17 	bl	13710 <_ZSt9terminatev>
   13ce2:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13ce6:	f7ff fcff 	bl	136e8 <_ZN10__cxxabiv111__terminateEPFvvE>
   13cea:	bf00      	nop

00013cec <__cxa_call_unexpected>:
   13cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cf0:	b085      	sub	sp, #20
   13cf2:	4602      	mov	r2, r0
   13cf4:	f7ff ffcc 	bl	13c90 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13cf8:	b160      	cbz	r0, 13d14 <__cxa_call_unexpected+0x28>
   13cfa:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13cfe:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13d02:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13d04:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13d06:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13d08:	4610      	mov	r0, r2
   13d0a:	f000 f85f 	bl	13dcc <__cxa_begin_catch>
   13d0e:	4640      	mov	r0, r8
   13d10:	f7ff fd08 	bl	13724 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13d14:	4610      	mov	r0, r2
   13d16:	f000 f859 	bl	13dcc <__cxa_begin_catch>
   13d1a:	f7ff fd07 	bl	1372c <_ZSt10unexpectedv>
   13d1e:	f000 f855 	bl	13dcc <__cxa_begin_catch>
   13d22:	f7ff fcf5 	bl	13710 <_ZSt9terminatev>
   13d26:	f000 f851 	bl	13dcc <__cxa_begin_catch>
   13d2a:	f000 f8d3 	bl	13ed4 <__cxa_get_globals_fast>
   13d2e:	6803      	ldr	r3, [r0, #0]
   13d30:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13d34:	2a01      	cmp	r2, #1
   13d36:	d036      	beq.n	13da6 <__cxa_call_unexpected+0xba>
   13d38:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13d3c:	f10d 0a10 	add.w	sl, sp, #16
   13d40:	f04f 0800 	mov.w	r8, #0
   13d44:	3320      	adds	r3, #32
   13d46:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13d4a:	f027 0b03 	bic.w	fp, r7, #3
   13d4e:	9301      	str	r3, [sp, #4]
   13d50:	46c1      	mov	r9, r8
   13d52:	45b1      	cmp	r9, r6
   13d54:	da1b      	bge.n	13d8e <__cxa_call_unexpected+0xa2>
   13d56:	6827      	ldr	r7, [r4, #0]
   13d58:	b107      	cbz	r7, 13d5c <__cxa_call_unexpected+0x70>
   13d5a:	4427      	add	r7, r4
   13d5c:	4653      	mov	r3, sl
   13d5e:	2200      	movs	r2, #0
   13d60:	4639      	mov	r1, r7
   13d62:	9801      	ldr	r0, [sp, #4]
   13d64:	f7ff fece 	bl	13b04 <__cxa_type_match>
   13d68:	bb10      	cbnz	r0, 13db0 <__cxa_call_unexpected+0xc4>
   13d6a:	683b      	ldr	r3, [r7, #0]
   13d6c:	4914      	ldr	r1, [pc, #80]	; (13dc0 <__cxa_call_unexpected+0xd4>)
   13d6e:	691b      	ldr	r3, [r3, #16]
   13d70:	9300      	str	r3, [sp, #0]
   13d72:	aa04      	add	r2, sp, #16
   13d74:	2301      	movs	r3, #1
   13d76:	f842 0d04 	str.w	r0, [r2, #-4]!
   13d7a:	4638      	mov	r0, r7
   13d7c:	9f00      	ldr	r7, [sp, #0]
   13d7e:	47b8      	blx	r7
   13d80:	2800      	cmp	r0, #0
   13d82:	bf18      	it	ne
   13d84:	4680      	movne	r8, r0
   13d86:	f109 0901 	add.w	r9, r9, #1
   13d8a:	445c      	add	r4, fp
   13d8c:	e7e1      	b.n	13d52 <__cxa_call_unexpected+0x66>
   13d8e:	f1b8 0f00 	cmp.w	r8, #0
   13d92:	d00a      	beq.n	13daa <__cxa_call_unexpected+0xbe>
   13d94:	2004      	movs	r0, #4
   13d96:	f7ff fc5b 	bl	13650 <__cxa_allocate_exception>
   13d9a:	4b0a      	ldr	r3, [pc, #40]	; (13dc4 <__cxa_call_unexpected+0xd8>)
   13d9c:	6003      	str	r3, [r0, #0]
   13d9e:	4a0a      	ldr	r2, [pc, #40]	; (13dc8 <__cxa_call_unexpected+0xdc>)
   13da0:	4907      	ldr	r1, [pc, #28]	; (13dc0 <__cxa_call_unexpected+0xd4>)
   13da2:	f7ff fcff 	bl	137a4 <__cxa_throw>
   13da6:	681a      	ldr	r2, [r3, #0]
   13da8:	e7c8      	b.n	13d3c <__cxa_call_unexpected+0x50>
   13daa:	4628      	mov	r0, r5
   13dac:	f7ff fc9c 	bl	136e8 <_ZN10__cxxabiv111__terminateEPFvvE>
   13db0:	f7ff fd36 	bl	13820 <__cxa_rethrow>
   13db4:	f000 f848 	bl	13e48 <__cxa_end_catch>
   13db8:	f000 f846 	bl	13e48 <__cxa_end_catch>
   13dbc:	f7ff fe9c 	bl	13af8 <__cxa_end_cleanup>
   13dc0:	00023c3c 	.word	0x00023c3c
   13dc4:	00023cc0 	.word	0x00023cc0
   13dc8:	000136cd 	.word	0x000136cd

00013dcc <__cxa_begin_catch>:
   13dcc:	b538      	push	{r3, r4, r5, lr}
   13dce:	4604      	mov	r4, r0
   13dd0:	f000 f884 	bl	13edc <__cxa_get_globals>
   13dd4:	7822      	ldrb	r2, [r4, #0]
   13dd6:	6803      	ldr	r3, [r0, #0]
   13dd8:	2a47      	cmp	r2, #71	; 0x47
   13dda:	f1a4 0120 	sub.w	r1, r4, #32
   13dde:	d004      	beq.n	13dea <__cxa_begin_catch+0x1e>
   13de0:	bb83      	cbnz	r3, 13e44 <__cxa_begin_catch+0x78>
   13de2:	461c      	mov	r4, r3
   13de4:	6001      	str	r1, [r0, #0]
   13de6:	4620      	mov	r0, r4
   13de8:	bd38      	pop	{r3, r4, r5, pc}
   13dea:	7862      	ldrb	r2, [r4, #1]
   13dec:	2a4e      	cmp	r2, #78	; 0x4e
   13dee:	d1f7      	bne.n	13de0 <__cxa_begin_catch+0x14>
   13df0:	78a2      	ldrb	r2, [r4, #2]
   13df2:	2a55      	cmp	r2, #85	; 0x55
   13df4:	d1f4      	bne.n	13de0 <__cxa_begin_catch+0x14>
   13df6:	78e2      	ldrb	r2, [r4, #3]
   13df8:	2a43      	cmp	r2, #67	; 0x43
   13dfa:	d1f1      	bne.n	13de0 <__cxa_begin_catch+0x14>
   13dfc:	7922      	ldrb	r2, [r4, #4]
   13dfe:	2a43      	cmp	r2, #67	; 0x43
   13e00:	d1ee      	bne.n	13de0 <__cxa_begin_catch+0x14>
   13e02:	7962      	ldrb	r2, [r4, #5]
   13e04:	2a2b      	cmp	r2, #43	; 0x2b
   13e06:	d1eb      	bne.n	13de0 <__cxa_begin_catch+0x14>
   13e08:	79a2      	ldrb	r2, [r4, #6]
   13e0a:	2a2b      	cmp	r2, #43	; 0x2b
   13e0c:	d1e8      	bne.n	13de0 <__cxa_begin_catch+0x14>
   13e0e:	79e2      	ldrb	r2, [r4, #7]
   13e10:	2a01      	cmp	r2, #1
   13e12:	d8e5      	bhi.n	13de0 <__cxa_begin_catch+0x14>
   13e14:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13e18:	2a00      	cmp	r2, #0
   13e1a:	db10      	blt.n	13e3e <__cxa_begin_catch+0x72>
   13e1c:	3201      	adds	r2, #1
   13e1e:	6845      	ldr	r5, [r0, #4]
   13e20:	f844 2c0c 	str.w	r2, [r4, #-12]
   13e24:	3d01      	subs	r5, #1
   13e26:	6045      	str	r5, [r0, #4]
   13e28:	428b      	cmp	r3, r1
   13e2a:	bf1c      	itt	ne
   13e2c:	f844 3c10 	strne.w	r3, [r4, #-16]
   13e30:	6001      	strne	r1, [r0, #0]
   13e32:	4620      	mov	r0, r4
   13e34:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13e36:	f008 ff39 	bl	1ccac <_Unwind_Complete>
   13e3a:	4620      	mov	r0, r4
   13e3c:	bd38      	pop	{r3, r4, r5, pc}
   13e3e:	f1c2 0201 	rsb	r2, r2, #1
   13e42:	e7ec      	b.n	13e1e <__cxa_begin_catch+0x52>
   13e44:	f7ff fc64 	bl	13710 <_ZSt9terminatev>

00013e48 <__cxa_end_catch>:
   13e48:	b508      	push	{r3, lr}
   13e4a:	f000 f843 	bl	13ed4 <__cxa_get_globals_fast>
   13e4e:	4602      	mov	r2, r0
   13e50:	6800      	ldr	r0, [r0, #0]
   13e52:	2800      	cmp	r0, #0
   13e54:	d03d      	beq.n	13ed2 <__cxa_end_catch+0x8a>
   13e56:	f890 3020 	ldrb.w	r3, [r0, #32]
   13e5a:	2b47      	cmp	r3, #71	; 0x47
   13e5c:	d006      	beq.n	13e6c <__cxa_end_catch+0x24>
   13e5e:	2300      	movs	r3, #0
   13e60:	6013      	str	r3, [r2, #0]
   13e62:	3020      	adds	r0, #32
   13e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13e68:	f008 bf22 	b.w	1ccb0 <_Unwind_DeleteException>
   13e6c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13e70:	2b4e      	cmp	r3, #78	; 0x4e
   13e72:	d1f4      	bne.n	13e5e <__cxa_end_catch+0x16>
   13e74:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13e78:	2b55      	cmp	r3, #85	; 0x55
   13e7a:	d1f0      	bne.n	13e5e <__cxa_end_catch+0x16>
   13e7c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13e80:	2b43      	cmp	r3, #67	; 0x43
   13e82:	d1ec      	bne.n	13e5e <__cxa_end_catch+0x16>
   13e84:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13e88:	2b43      	cmp	r3, #67	; 0x43
   13e8a:	d1e8      	bne.n	13e5e <__cxa_end_catch+0x16>
   13e8c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13e90:	2b2b      	cmp	r3, #43	; 0x2b
   13e92:	d1e4      	bne.n	13e5e <__cxa_end_catch+0x16>
   13e94:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13e98:	2b2b      	cmp	r3, #43	; 0x2b
   13e9a:	d1e0      	bne.n	13e5e <__cxa_end_catch+0x16>
   13e9c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13ea0:	2b01      	cmp	r3, #1
   13ea2:	d8dc      	bhi.n	13e5e <__cxa_end_catch+0x16>
   13ea4:	6943      	ldr	r3, [r0, #20]
   13ea6:	2b00      	cmp	r3, #0
   13ea8:	db05      	blt.n	13eb6 <__cxa_end_catch+0x6e>
   13eaa:	3b01      	subs	r3, #1
   13eac:	d008      	beq.n	13ec0 <__cxa_end_catch+0x78>
   13eae:	1c5a      	adds	r2, r3, #1
   13eb0:	d00d      	beq.n	13ece <__cxa_end_catch+0x86>
   13eb2:	6143      	str	r3, [r0, #20]
   13eb4:	bd08      	pop	{r3, pc}
   13eb6:	3301      	adds	r3, #1
   13eb8:	d1fb      	bne.n	13eb2 <__cxa_end_catch+0x6a>
   13eba:	6901      	ldr	r1, [r0, #16]
   13ebc:	6011      	str	r1, [r2, #0]
   13ebe:	e7f8      	b.n	13eb2 <__cxa_end_catch+0x6a>
   13ec0:	6903      	ldr	r3, [r0, #16]
   13ec2:	6013      	str	r3, [r2, #0]
   13ec4:	3020      	adds	r0, #32
   13ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13eca:	f008 bef1 	b.w	1ccb0 <_Unwind_DeleteException>
   13ece:	f7ff fc1f 	bl	13710 <_ZSt9terminatev>
   13ed2:	bd08      	pop	{r3, pc}

00013ed4 <__cxa_get_globals_fast>:
   13ed4:	4800      	ldr	r0, [pc, #0]	; (13ed8 <__cxa_get_globals_fast+0x4>)
   13ed6:	4770      	bx	lr
   13ed8:	200022a0 	.word	0x200022a0

00013edc <__cxa_get_globals>:
   13edc:	4800      	ldr	r0, [pc, #0]	; (13ee0 <__cxa_get_globals+0x4>)
   13ede:	4770      	bx	lr
   13ee0:	200022a0 	.word	0x200022a0

00013ee4 <_ZL28read_encoded_value_with_basehjPKhPj>:
   13ee4:	2850      	cmp	r0, #80	; 0x50
   13ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ee8:	d054      	beq.n	13f94 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13eea:	f000 040f 	and.w	r4, r0, #15
   13eee:	2c0c      	cmp	r4, #12
   13ef0:	d84e      	bhi.n	13f90 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13ef2:	e8df f004 	tbb	[pc, r4]
   13ef6:	3907      	.short	0x3907
   13ef8:	4d170749 	.word	0x4d170749
   13efc:	1f4d4d4d 	.word	0x1f4d4d4d
   13f00:	071b      	.short	0x071b
   13f02:	17          	.byte	0x17
   13f03:	00          	.byte	0x00
   13f04:	4615      	mov	r5, r2
   13f06:	f855 4b04 	ldr.w	r4, [r5], #4
   13f0a:	b144      	cbz	r4, 13f1e <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13f0c:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13f10:	2e10      	cmp	r6, #16
   13f12:	bf08      	it	eq
   13f14:	4611      	moveq	r1, r2
   13f16:	440c      	add	r4, r1
   13f18:	0602      	lsls	r2, r0, #24
   13f1a:	bf48      	it	mi
   13f1c:	6824      	ldrmi	r4, [r4, #0]
   13f1e:	601c      	str	r4, [r3, #0]
   13f20:	4628      	mov	r0, r5
   13f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f24:	4615      	mov	r5, r2
   13f26:	f855 4b08 	ldr.w	r4, [r5], #8
   13f2a:	e7ee      	b.n	13f0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13f2c:	4615      	mov	r5, r2
   13f2e:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13f32:	e7ea      	b.n	13f0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13f34:	2400      	movs	r4, #0
   13f36:	4627      	mov	r7, r4
   13f38:	4615      	mov	r5, r2
   13f3a:	f815 eb01 	ldrb.w	lr, [r5], #1
   13f3e:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13f42:	40be      	lsls	r6, r7
   13f44:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13f48:	ea44 0406 	orr.w	r4, r4, r6
   13f4c:	f107 0707 	add.w	r7, r7, #7
   13f50:	d1f3      	bne.n	13f3a <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13f52:	2f1f      	cmp	r7, #31
   13f54:	d8d9      	bhi.n	13f0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13f56:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13f5a:	d0d6      	beq.n	13f0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13f5c:	f04f 36ff 	mov.w	r6, #4294967295
   13f60:	fa06 f707 	lsl.w	r7, r6, r7
   13f64:	433c      	orrs	r4, r7
   13f66:	e7d1      	b.n	13f0c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13f68:	2400      	movs	r4, #0
   13f6a:	4627      	mov	r7, r4
   13f6c:	4615      	mov	r5, r2
   13f6e:	f815 eb01 	ldrb.w	lr, [r5], #1
   13f72:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13f76:	40be      	lsls	r6, r7
   13f78:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13f7c:	ea44 0406 	orr.w	r4, r4, r6
   13f80:	f107 0707 	add.w	r7, r7, #7
   13f84:	d1f3      	bne.n	13f6e <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13f86:	e7c0      	b.n	13f0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13f88:	4615      	mov	r5, r2
   13f8a:	f835 4b02 	ldrh.w	r4, [r5], #2
   13f8e:	e7bc      	b.n	13f0a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13f90:	f009 fc44 	bl	1d81c <abort>
   13f94:	3203      	adds	r2, #3
   13f96:	f022 0503 	bic.w	r5, r2, #3
   13f9a:	f855 4b04 	ldr.w	r4, [r5], #4
   13f9e:	601c      	str	r4, [r3, #0]
   13fa0:	4628      	mov	r0, r5
   13fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13fa4:	28ff      	cmp	r0, #255	; 0xff
   13fa6:	d00d      	beq.n	13fc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13fa8:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13fac:	2820      	cmp	r0, #32
   13fae:	d015      	beq.n	13fdc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13fb0:	d90a      	bls.n	13fc8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13fb2:	2840      	cmp	r0, #64	; 0x40
   13fb4:	d00f      	beq.n	13fd6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13fb6:	2850      	cmp	r0, #80	; 0x50
   13fb8:	d004      	beq.n	13fc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13fba:	2830      	cmp	r0, #48	; 0x30
   13fbc:	d108      	bne.n	13fd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13fbe:	4608      	mov	r0, r1
   13fc0:	f009 bc26 	b.w	1d810 <_Unwind_GetDataRelBase>
   13fc4:	2000      	movs	r0, #0
   13fc6:	4770      	bx	lr
   13fc8:	2800      	cmp	r0, #0
   13fca:	d0fb      	beq.n	13fc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13fcc:	2810      	cmp	r0, #16
   13fce:	d0f9      	beq.n	13fc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13fd0:	b508      	push	{r3, lr}
   13fd2:	f009 fc23 	bl	1d81c <abort>
   13fd6:	4608      	mov	r0, r1
   13fd8:	f009 bc06 	b.w	1d7e8 <_Unwind_GetRegionStart>
   13fdc:	4608      	mov	r0, r1
   13fde:	f009 bc13 	b.w	1d808 <_Unwind_GetTextRelBase>
   13fe2:	bf00      	nop

00013fe4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fe6:	460c      	mov	r4, r1
   13fe8:	4615      	mov	r5, r2
   13fea:	4607      	mov	r7, r0
   13fec:	2800      	cmp	r0, #0
   13fee:	d044      	beq.n	1407a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13ff0:	f009 fbfa 	bl	1d7e8 <_Unwind_GetRegionStart>
   13ff4:	6028      	str	r0, [r5, #0]
   13ff6:	7826      	ldrb	r6, [r4, #0]
   13ff8:	2eff      	cmp	r6, #255	; 0xff
   13ffa:	f104 0401 	add.w	r4, r4, #1
   13ffe:	d032      	beq.n	14066 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   14000:	4639      	mov	r1, r7
   14002:	4630      	mov	r0, r6
   14004:	f7ff ffce 	bl	13fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14008:	4622      	mov	r2, r4
   1400a:	4601      	mov	r1, r0
   1400c:	1d2b      	adds	r3, r5, #4
   1400e:	4630      	mov	r0, r6
   14010:	f7ff ff68 	bl	13ee4 <_ZL28read_encoded_value_with_basehjPKhPj>
   14014:	4604      	mov	r4, r0
   14016:	1c60      	adds	r0, r4, #1
   14018:	7823      	ldrb	r3, [r4, #0]
   1401a:	752b      	strb	r3, [r5, #20]
   1401c:	2bff      	cmp	r3, #255	; 0xff
   1401e:	d029      	beq.n	14074 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   14020:	2310      	movs	r3, #16
   14022:	2400      	movs	r4, #0
   14024:	752b      	strb	r3, [r5, #20]
   14026:	4622      	mov	r2, r4
   14028:	f810 1b01 	ldrb.w	r1, [r0], #1
   1402c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14030:	4093      	lsls	r3, r2
   14032:	0609      	lsls	r1, r1, #24
   14034:	ea44 0403 	orr.w	r4, r4, r3
   14038:	f102 0207 	add.w	r2, r2, #7
   1403c:	d4f4      	bmi.n	14028 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   1403e:	4404      	add	r4, r0
   14040:	60ec      	str	r4, [r5, #12]
   14042:	7803      	ldrb	r3, [r0, #0]
   14044:	756b      	strb	r3, [r5, #21]
   14046:	2400      	movs	r4, #0
   14048:	3001      	adds	r0, #1
   1404a:	4622      	mov	r2, r4
   1404c:	f810 1b01 	ldrb.w	r1, [r0], #1
   14050:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14054:	4093      	lsls	r3, r2
   14056:	431c      	orrs	r4, r3
   14058:	060b      	lsls	r3, r1, #24
   1405a:	f102 0207 	add.w	r2, r2, #7
   1405e:	d4f5      	bmi.n	1404c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   14060:	4404      	add	r4, r0
   14062:	612c      	str	r4, [r5, #16]
   14064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14066:	6068      	str	r0, [r5, #4]
   14068:	7823      	ldrb	r3, [r4, #0]
   1406a:	752b      	strb	r3, [r5, #20]
   1406c:	2bff      	cmp	r3, #255	; 0xff
   1406e:	f104 0001 	add.w	r0, r4, #1
   14072:	d1d5      	bne.n	14020 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   14074:	2300      	movs	r3, #0
   14076:	60eb      	str	r3, [r5, #12]
   14078:	e7e3      	b.n	14042 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   1407a:	e7bb      	b.n	13ff4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0001407c <__gxx_personality_v0>:
   1407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14080:	f000 0403 	and.w	r4, r0, #3
   14084:	b097      	sub	sp, #92	; 0x5c
   14086:	2300      	movs	r3, #0
   14088:	2c01      	cmp	r4, #1
   1408a:	4689      	mov	r9, r1
   1408c:	4617      	mov	r7, r2
   1408e:	930a      	str	r3, [sp, #40]	; 0x28
   14090:	d01e      	beq.n	140d0 <__gxx_personality_v0+0x54>
   14092:	d30e      	bcc.n	140b2 <__gxx_personality_v0+0x36>
   14094:	2c02      	cmp	r4, #2
   14096:	d10a      	bne.n	140ae <__gxx_personality_v0+0x32>
   14098:	4639      	mov	r1, r7
   1409a:	4648      	mov	r0, r9
   1409c:	f009 fb90 	bl	1d7c0 <__gnu_unwind_frame>
   140a0:	2800      	cmp	r0, #0
   140a2:	f000 80a5 	beq.w	141f0 <__gxx_personality_v0+0x174>
   140a6:	2009      	movs	r0, #9
   140a8:	b017      	add	sp, #92	; 0x5c
   140aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140ae:	f009 fbb5 	bl	1d81c <abort>
   140b2:	0700      	lsls	r0, r0, #28
   140b4:	d4f0      	bmi.n	14098 <__gxx_personality_v0+0x1c>
   140b6:	2301      	movs	r3, #1
   140b8:	9303      	str	r3, [sp, #12]
   140ba:	aa16      	add	r2, sp, #88	; 0x58
   140bc:	2300      	movs	r3, #0
   140be:	f842 9d2c 	str.w	r9, [r2, #-44]!
   140c2:	4619      	mov	r1, r3
   140c4:	9200      	str	r2, [sp, #0]
   140c6:	4638      	mov	r0, r7
   140c8:	220c      	movs	r2, #12
   140ca:	f008 fe1d 	bl	1cd08 <_Unwind_VRS_Set>
   140ce:	e00f      	b.n	140f0 <__gxx_personality_v0+0x74>
   140d0:	f010 0408 	ands.w	r4, r0, #8
   140d4:	f000 8090 	beq.w	141f8 <__gxx_personality_v0+0x17c>
   140d8:	aa16      	add	r2, sp, #88	; 0x58
   140da:	f044 0402 	orr.w	r4, r4, #2
   140de:	f842 1d2c 	str.w	r1, [r2, #-44]!
   140e2:	4638      	mov	r0, r7
   140e4:	9200      	str	r2, [sp, #0]
   140e6:	4619      	mov	r1, r3
   140e8:	220c      	movs	r2, #12
   140ea:	9403      	str	r4, [sp, #12]
   140ec:	f008 fe0c 	bl	1cd08 <_Unwind_VRS_Set>
   140f0:	4638      	mov	r0, r7
   140f2:	f009 fb7f 	bl	1d7f4 <_Unwind_GetLanguageSpecificData>
   140f6:	9005      	str	r0, [sp, #20]
   140f8:	2800      	cmp	r0, #0
   140fa:	d0cd      	beq.n	14098 <__gxx_personality_v0+0x1c>
   140fc:	ab10      	add	r3, sp, #64	; 0x40
   140fe:	461a      	mov	r2, r3
   14100:	9905      	ldr	r1, [sp, #20]
   14102:	9306      	str	r3, [sp, #24]
   14104:	4638      	mov	r0, r7
   14106:	f7ff ff6d 	bl	13fe4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1410a:	4639      	mov	r1, r7
   1410c:	4604      	mov	r4, r0
   1410e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14112:	f7ff ff47 	bl	13fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14116:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1411a:	2300      	movs	r3, #0
   1411c:	9012      	str	r0, [sp, #72]	; 0x48
   1411e:	4619      	mov	r1, r3
   14120:	220f      	movs	r2, #15
   14122:	f8cd b000 	str.w	fp, [sp]
   14126:	4638      	mov	r0, r7
   14128:	f008 fdc8 	bl	1ccbc <_Unwind_VRS_Get>
   1412c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1412e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14130:	f023 0301 	bic.w	r3, r3, #1
   14134:	42a2      	cmp	r2, r4
   14136:	f103 36ff 	add.w	r6, r3, #4294967295
   1413a:	d975      	bls.n	14228 <__gxx_personality_v0+0x1ac>
   1413c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14140:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14144:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   14148:	2100      	movs	r1, #0
   1414a:	4628      	mov	r0, r5
   1414c:	f7ff ff2a 	bl	13fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14150:	4622      	mov	r2, r4
   14152:	4653      	mov	r3, sl
   14154:	4601      	mov	r1, r0
   14156:	4628      	mov	r0, r5
   14158:	f7ff fec4 	bl	13ee4 <_ZL28read_encoded_value_with_basehjPKhPj>
   1415c:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   14160:	4605      	mov	r5, r0
   14162:	2100      	movs	r1, #0
   14164:	4620      	mov	r0, r4
   14166:	f7ff ff1d 	bl	13fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1416a:	462a      	mov	r2, r5
   1416c:	4643      	mov	r3, r8
   1416e:	4601      	mov	r1, r0
   14170:	4620      	mov	r0, r4
   14172:	f7ff feb7 	bl	13ee4 <_ZL28read_encoded_value_with_basehjPKhPj>
   14176:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   1417a:	4605      	mov	r5, r0
   1417c:	2100      	movs	r1, #0
   1417e:	4620      	mov	r0, r4
   14180:	f7ff ff10 	bl	13fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14184:	462a      	mov	r2, r5
   14186:	4601      	mov	r1, r0
   14188:	465b      	mov	r3, fp
   1418a:	4620      	mov	r0, r4
   1418c:	f7ff feaa 	bl	13ee4 <_ZL28read_encoded_value_with_basehjPKhPj>
   14190:	4604      	mov	r4, r0
   14192:	2000      	movs	r0, #0
   14194:	4602      	mov	r2, r0
   14196:	f814 1b01 	ldrb.w	r1, [r4], #1
   1419a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1419e:	4093      	lsls	r3, r2
   141a0:	0609      	lsls	r1, r1, #24
   141a2:	ea40 0003 	orr.w	r0, r0, r3
   141a6:	f102 0207 	add.w	r2, r2, #7
   141aa:	d4f4      	bmi.n	14196 <__gxx_personality_v0+0x11a>
   141ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   141ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   141b0:	4413      	add	r3, r2
   141b2:	429e      	cmp	r6, r3
   141b4:	d231      	bcs.n	1421a <__gxx_personality_v0+0x19e>
   141b6:	9b03      	ldr	r3, [sp, #12]
   141b8:	07db      	lsls	r3, r3, #31
   141ba:	d539      	bpl.n	14230 <__gxx_personality_v0+0x1b4>
   141bc:	2500      	movs	r5, #0
   141be:	9504      	str	r5, [sp, #16]
   141c0:	2300      	movs	r3, #0
   141c2:	4619      	mov	r1, r3
   141c4:	220d      	movs	r2, #13
   141c6:	f8cd 8000 	str.w	r8, [sp]
   141ca:	4638      	mov	r0, r7
   141cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   141ce:	f008 fd75 	bl	1ccbc <_Unwind_VRS_Get>
   141d2:	9a05      	ldr	r2, [sp, #20]
   141d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141d6:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   141da:	9a04      	ldr	r2, [sp, #16]
   141dc:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   141e0:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   141e4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   141e8:	f8c9 3020 	str.w	r3, [r9, #32]
   141ec:	2006      	movs	r0, #6
   141ee:	e75b      	b.n	140a8 <__gxx_personality_v0+0x2c>
   141f0:	2008      	movs	r0, #8
   141f2:	b017      	add	sp, #92	; 0x5c
   141f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141f8:	ab10      	add	r3, sp, #64	; 0x40
   141fa:	9300      	str	r3, [sp, #0]
   141fc:	9306      	str	r3, [sp, #24]
   141fe:	220d      	movs	r2, #13
   14200:	4623      	mov	r3, r4
   14202:	4621      	mov	r1, r4
   14204:	4638      	mov	r0, r7
   14206:	f8d9 5020 	ldr.w	r5, [r9, #32]
   1420a:	f008 fd57 	bl	1ccbc <_Unwind_VRS_Get>
   1420e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14210:	429d      	cmp	r5, r3
   14212:	d012      	beq.n	1423a <__gxx_personality_v0+0x1be>
   14214:	2302      	movs	r3, #2
   14216:	9303      	str	r3, [sp, #12]
   14218:	e74f      	b.n	140ba <__gxx_personality_v0+0x3e>
   1421a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1421c:	4413      	add	r3, r2
   1421e:	429e      	cmp	r6, r3
   14220:	d359      	bcc.n	142d6 <__gxx_personality_v0+0x25a>
   14222:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14224:	42a3      	cmp	r3, r4
   14226:	d88d      	bhi.n	14144 <__gxx_personality_v0+0xc8>
   14228:	2500      	movs	r5, #0
   1422a:	9504      	str	r5, [sp, #16]
   1422c:	2401      	movs	r4, #1
   1422e:	e105      	b.n	1443c <__gxx_personality_v0+0x3c0>
   14230:	9b03      	ldr	r3, [sp, #12]
   14232:	071b      	lsls	r3, r3, #28
   14234:	d54c      	bpl.n	142d0 <__gxx_personality_v0+0x254>
   14236:	f7ff fa6b 	bl	13710 <_ZSt9terminatev>
   1423a:	aa16      	add	r2, sp, #88	; 0x58
   1423c:	4623      	mov	r3, r4
   1423e:	f842 9d2c 	str.w	r9, [r2, #-44]!
   14242:	4621      	mov	r1, r4
   14244:	9200      	str	r2, [sp, #0]
   14246:	4638      	mov	r0, r7
   14248:	220c      	movs	r2, #12
   1424a:	f008 fd5d 	bl	1cd08 <_Unwind_VRS_Set>
   1424e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   14252:	9304      	str	r3, [sp, #16]
   14254:	2b00      	cmp	r3, #0
   14256:	d03b      	beq.n	142d0 <__gxx_personality_v0+0x254>
   14258:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   1425c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   14260:	2403      	movs	r4, #3
   14262:	2d00      	cmp	r5, #0
   14264:	f2c0 8106 	blt.w	14474 <__gxx_personality_v0+0x3f8>
   14268:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   1426c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14270:	a916      	add	r1, sp, #88	; 0x58
   14272:	2300      	movs	r3, #0
   14274:	f841 9d28 	str.w	r9, [r1, #-40]!
   14278:	461a      	mov	r2, r3
   1427a:	9100      	str	r1, [sp, #0]
   1427c:	4638      	mov	r0, r7
   1427e:	4619      	mov	r1, r3
   14280:	f008 fd42 	bl	1cd08 <_Unwind_VRS_Set>
   14284:	2300      	movs	r3, #0
   14286:	4619      	mov	r1, r3
   14288:	2201      	movs	r2, #1
   1428a:	f8cd a000 	str.w	sl, [sp]
   1428e:	4638      	mov	r0, r7
   14290:	950d      	str	r5, [sp, #52]	; 0x34
   14292:	f008 fd39 	bl	1cd08 <_Unwind_VRS_Set>
   14296:	2300      	movs	r3, #0
   14298:	4619      	mov	r1, r3
   1429a:	220f      	movs	r2, #15
   1429c:	f8cd 8000 	str.w	r8, [sp]
   142a0:	4638      	mov	r0, r7
   142a2:	f008 fd0b 	bl	1ccbc <_Unwind_VRS_Get>
   142a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142a8:	9a04      	ldr	r2, [sp, #16]
   142aa:	f8cd 8000 	str.w	r8, [sp]
   142ae:	f003 0501 	and.w	r5, r3, #1
   142b2:	2300      	movs	r3, #0
   142b4:	4315      	orrs	r5, r2
   142b6:	4638      	mov	r0, r7
   142b8:	4619      	mov	r1, r3
   142ba:	220f      	movs	r2, #15
   142bc:	950e      	str	r5, [sp, #56]	; 0x38
   142be:	f008 fd23 	bl	1cd08 <_Unwind_VRS_Set>
   142c2:	2c02      	cmp	r4, #2
   142c4:	f000 8080 	beq.w	143c8 <__gxx_personality_v0+0x34c>
   142c8:	2007      	movs	r0, #7
   142ca:	b017      	add	sp, #92	; 0x5c
   142cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d0:	4648      	mov	r0, r9
   142d2:	f7ff fcfb 	bl	13ccc <__cxa_call_terminate>
   142d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   142d8:	9304      	str	r3, [sp, #16]
   142da:	461a      	mov	r2, r3
   142dc:	2b00      	cmp	r3, #0
   142de:	d178      	bne.n	143d2 <__gxx_personality_v0+0x356>
   142e0:	2800      	cmp	r0, #0
   142e2:	f43f aed9 	beq.w	14098 <__gxx_personality_v0+0x1c>
   142e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   142e8:	9a04      	ldr	r2, [sp, #16]
   142ea:	3801      	subs	r0, #1
   142ec:	4403      	add	r3, r0
   142ee:	2a00      	cmp	r2, #0
   142f0:	f43f aed2 	beq.w	14098 <__gxx_personality_v0+0x1c>
   142f4:	2b00      	cmp	r3, #0
   142f6:	d075      	beq.n	143e4 <__gxx_personality_v0+0x368>
   142f8:	9a03      	ldr	r2, [sp, #12]
   142fa:	f012 0208 	ands.w	r2, r2, #8
   142fe:	9209      	str	r2, [sp, #36]	; 0x24
   14300:	f000 80f6 	beq.w	144f0 <__gxx_personality_v0+0x474>
   14304:	2147      	movs	r1, #71	; 0x47
   14306:	224e      	movs	r2, #78	; 0x4e
   14308:	f889 1000 	strb.w	r1, [r9]
   1430c:	f889 2001 	strb.w	r2, [r9, #1]
   14310:	2155      	movs	r1, #85	; 0x55
   14312:	2243      	movs	r2, #67	; 0x43
   14314:	f889 1002 	strb.w	r1, [r9, #2]
   14318:	f889 2003 	strb.w	r2, [r9, #3]
   1431c:	2146      	movs	r1, #70	; 0x46
   1431e:	224f      	movs	r2, #79	; 0x4f
   14320:	f889 1004 	strb.w	r1, [r9, #4]
   14324:	f889 2005 	strb.w	r2, [r9, #5]
   14328:	2152      	movs	r1, #82	; 0x52
   1432a:	2200      	movs	r2, #0
   1432c:	f889 1006 	strb.w	r1, [r9, #6]
   14330:	f889 2007 	strb.w	r2, [r9, #7]
   14334:	2200      	movs	r2, #0
   14336:	9208      	str	r2, [sp, #32]
   14338:	9707      	str	r7, [sp, #28]
   1433a:	2500      	movs	r5, #0
   1433c:	4629      	mov	r1, r5
   1433e:	e000      	b.n	14342 <__gxx_personality_v0+0x2c6>
   14340:	4623      	mov	r3, r4
   14342:	461c      	mov	r4, r3
   14344:	f814 0b01 	ldrb.w	r0, [r4], #1
   14348:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1434c:	408a      	lsls	r2, r1
   1434e:	0606      	lsls	r6, r0, #24
   14350:	ea45 0502 	orr.w	r5, r5, r2
   14354:	f101 0107 	add.w	r1, r1, #7
   14358:	d4f2      	bmi.n	14340 <__gxx_personality_v0+0x2c4>
   1435a:	291f      	cmp	r1, #31
   1435c:	d805      	bhi.n	1436a <__gxx_personality_v0+0x2ee>
   1435e:	0642      	lsls	r2, r0, #25
   14360:	d503      	bpl.n	1436a <__gxx_personality_v0+0x2ee>
   14362:	2201      	movs	r2, #1
   14364:	408a      	lsls	r2, r1
   14366:	4252      	negs	r2, r2
   14368:	4315      	orrs	r5, r2
   1436a:	2600      	movs	r6, #0
   1436c:	4631      	mov	r1, r6
   1436e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   14372:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14376:	408a      	lsls	r2, r1
   14378:	0607      	lsls	r7, r0, #24
   1437a:	ea46 0602 	orr.w	r6, r6, r2
   1437e:	f101 0107 	add.w	r1, r1, #7
   14382:	d4f4      	bmi.n	1436e <__gxx_personality_v0+0x2f2>
   14384:	291f      	cmp	r1, #31
   14386:	d805      	bhi.n	14394 <__gxx_personality_v0+0x318>
   14388:	0640      	lsls	r0, r0, #25
   1438a:	d503      	bpl.n	14394 <__gxx_personality_v0+0x318>
   1438c:	2301      	movs	r3, #1
   1438e:	408b      	lsls	r3, r1
   14390:	425b      	negs	r3, r3
   14392:	431e      	orrs	r6, r3
   14394:	2d00      	cmp	r5, #0
   14396:	d05c      	beq.n	14452 <__gxx_personality_v0+0x3d6>
   14398:	dd5e      	ble.n	14458 <__gxx_personality_v0+0x3dc>
   1439a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1439e:	28ff      	cmp	r0, #255	; 0xff
   143a0:	f000 80a4 	beq.w	144ec <__gxx_personality_v0+0x470>
   143a4:	f000 0307 	and.w	r3, r0, #7
   143a8:	2b04      	cmp	r3, #4
   143aa:	f63f ae80 	bhi.w	140ae <__gxx_personality_v0+0x32>
   143ae:	a201      	add	r2, pc, #4	; (adr r2, 143b4 <__gxx_personality_v0+0x338>)
   143b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   143b4:	0001441f 	.word	0x0001441f
   143b8:	000140af 	.word	0x000140af
   143bc:	00014425 	.word	0x00014425
   143c0:	0001441f 	.word	0x0001441f
   143c4:	000143fd 	.word	0x000143fd
   143c8:	4648      	mov	r0, r9
   143ca:	f7ff fbf7 	bl	13bbc <__cxa_begin_cleanup>
   143ce:	2007      	movs	r0, #7
   143d0:	e66a      	b.n	140a8 <__gxx_personality_v0+0x2c>
   143d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   143d4:	441a      	add	r2, r3
   143d6:	9204      	str	r2, [sp, #16]
   143d8:	2800      	cmp	r0, #0
   143da:	d184      	bne.n	142e6 <__gxx_personality_v0+0x26a>
   143dc:	9b04      	ldr	r3, [sp, #16]
   143de:	2b00      	cmp	r3, #0
   143e0:	f43f ae5a 	beq.w	14098 <__gxx_personality_v0+0x1c>
   143e4:	9b03      	ldr	r3, [sp, #12]
   143e6:	f013 0301 	ands.w	r3, r3, #1
   143ea:	f47f ae55 	bne.w	14098 <__gxx_personality_v0+0x1c>
   143ee:	9a03      	ldr	r2, [sp, #12]
   143f0:	f012 0508 	ands.w	r5, r2, #8
   143f4:	f040 8097 	bne.w	14526 <__gxx_personality_v0+0x4aa>
   143f8:	2402      	movs	r4, #2
   143fa:	e739      	b.n	14270 <__gxx_personality_v0+0x1f4>
   143fc:	00eb      	lsls	r3, r5, #3
   143fe:	425b      	negs	r3, r3
   14400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14402:	9912      	ldr	r1, [sp, #72]	; 0x48
   14404:	441a      	add	r2, r3
   14406:	4643      	mov	r3, r8
   14408:	f7ff fd6c 	bl	13ee4 <_ZL28read_encoded_value_with_basehjPKhPj>
   1440c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1440e:	b199      	cbz	r1, 14438 <__gxx_personality_v0+0x3bc>
   14410:	f1b9 0f00 	cmp.w	r9, #0
   14414:	d109      	bne.n	1442a <__gxx_personality_v0+0x3ae>
   14416:	2e00      	cmp	r6, #0
   14418:	d077      	beq.n	1450a <__gxx_personality_v0+0x48e>
   1441a:	19a3      	adds	r3, r4, r6
   1441c:	e78d      	b.n	1433a <__gxx_personality_v0+0x2be>
   1441e:	00ab      	lsls	r3, r5, #2
   14420:	425b      	negs	r3, r3
   14422:	e7ed      	b.n	14400 <__gxx_personality_v0+0x384>
   14424:	006b      	lsls	r3, r5, #1
   14426:	425b      	negs	r3, r3
   14428:	e7ea      	b.n	14400 <__gxx_personality_v0+0x384>
   1442a:	ab0a      	add	r3, sp, #40	; 0x28
   1442c:	2200      	movs	r2, #0
   1442e:	4648      	mov	r0, r9
   14430:	f7ff fb68 	bl	13b04 <__cxa_type_match>
   14434:	2800      	cmp	r0, #0
   14436:	d0ee      	beq.n	14416 <__gxx_personality_v0+0x39a>
   14438:	9f07      	ldr	r7, [sp, #28]
   1443a:	2403      	movs	r4, #3
   1443c:	9b03      	ldr	r3, [sp, #12]
   1443e:	07da      	lsls	r2, r3, #31
   14440:	d460      	bmi.n	14504 <__gxx_personality_v0+0x488>
   14442:	9b03      	ldr	r3, [sp, #12]
   14444:	0719      	lsls	r1, r3, #28
   14446:	d466      	bmi.n	14516 <__gxx_personality_v0+0x49a>
   14448:	2c01      	cmp	r4, #1
   1444a:	f43f af41 	beq.w	142d0 <__gxx_personality_v0+0x254>
   1444e:	9905      	ldr	r1, [sp, #20]
   14450:	e707      	b.n	14262 <__gxx_personality_v0+0x1e6>
   14452:	2301      	movs	r3, #1
   14454:	9308      	str	r3, [sp, #32]
   14456:	e7de      	b.n	14416 <__gxx_personality_v0+0x39a>
   14458:	f1b9 0f00 	cmp.w	r9, #0
   1445c:	d001      	beq.n	14462 <__gxx_personality_v0+0x3e6>
   1445e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14460:	b35b      	cbz	r3, 144ba <__gxx_personality_v0+0x43e>
   14462:	1c6b      	adds	r3, r5, #1
   14464:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1446a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1446e:	2b00      	cmp	r3, #0
   14470:	d1d1      	bne.n	14416 <__gxx_personality_v0+0x39a>
   14472:	e7e1      	b.n	14438 <__gxx_personality_v0+0x3bc>
   14474:	9a06      	ldr	r2, [sp, #24]
   14476:	4638      	mov	r0, r7
   14478:	f7ff fdb4 	bl	13fe4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1447c:	4639      	mov	r1, r7
   1447e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14482:	f7ff fd8f 	bl	13fa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14486:	00aa      	lsls	r2, r5, #2
   14488:	f082 0203 	eor.w	r2, r2, #3
   1448c:	43d2      	mvns	r2, r2
   1448e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14490:	9012      	str	r0, [sp, #72]	; 0x48
   14492:	58b3      	ldr	r3, [r6, r2]
   14494:	4416      	add	r6, r2
   14496:	b133      	cbz	r3, 144a6 <__gxx_personality_v0+0x42a>
   14498:	4632      	mov	r2, r6
   1449a:	2300      	movs	r3, #0
   1449c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   144a0:	3301      	adds	r3, #1
   144a2:	2900      	cmp	r1, #0
   144a4:	d1fa      	bne.n	1449c <__gxx_personality_v0+0x420>
   144a6:	2204      	movs	r2, #4
   144a8:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   144ac:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   144b0:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   144b4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   144b8:	e6d6      	b.n	14268 <__gxx_personality_v0+0x1ec>
   144ba:	1c6f      	adds	r7, r5, #1
   144bc:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   144c0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   144c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   144c4:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   144c8:	920f      	str	r2, [sp, #60]	; 0x3c
   144ca:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   144ce:	b921      	cbnz	r1, 144da <__gxx_personality_v0+0x45e>
   144d0:	e7b2      	b.n	14438 <__gxx_personality_v0+0x3bc>
   144d2:	f857 1f04 	ldr.w	r1, [r7, #4]!
   144d6:	2900      	cmp	r1, #0
   144d8:	d0ae      	beq.n	14438 <__gxx_personality_v0+0x3bc>
   144da:	4439      	add	r1, r7
   144dc:	465b      	mov	r3, fp
   144de:	2200      	movs	r2, #0
   144e0:	4648      	mov	r0, r9
   144e2:	f7ff fb0f 	bl	13b04 <__cxa_type_match>
   144e6:	2800      	cmp	r0, #0
   144e8:	d0f3      	beq.n	144d2 <__gxx_personality_v0+0x456>
   144ea:	e794      	b.n	14416 <__gxx_personality_v0+0x39a>
   144ec:	2300      	movs	r3, #0
   144ee:	e787      	b.n	14400 <__gxx_personality_v0+0x384>
   144f0:	f899 2007 	ldrb.w	r2, [r9, #7]
   144f4:	2a01      	cmp	r2, #1
   144f6:	bf0c      	ite	eq
   144f8:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   144fc:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14500:	920a      	str	r2, [sp, #40]	; 0x28
   14502:	e717      	b.n	14334 <__gxx_personality_v0+0x2b8>
   14504:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14508:	e65a      	b.n	141c0 <__gxx_personality_v0+0x144>
   1450a:	9b08      	ldr	r3, [sp, #32]
   1450c:	9f07      	ldr	r7, [sp, #28]
   1450e:	2b00      	cmp	r3, #0
   14510:	f47f af68 	bne.w	143e4 <__gxx_personality_v0+0x368>
   14514:	e5c0      	b.n	14098 <__gxx_personality_v0+0x1c>
   14516:	2c01      	cmp	r4, #1
   14518:	f43f ae8d 	beq.w	14236 <__gxx_personality_v0+0x1ba>
   1451c:	2d00      	cmp	r5, #0
   1451e:	f6bf aea3 	bge.w	14268 <__gxx_personality_v0+0x1ec>
   14522:	f7ff f903 	bl	1372c <_ZSt10unexpectedv>
   14526:	461d      	mov	r5, r3
   14528:	2402      	movs	r4, #2
   1452a:	e6a1      	b.n	14270 <__gxx_personality_v0+0x1f4>
   1452c:	f7ff fc4e 	bl	13dcc <__cxa_begin_catch>
   14530:	e681      	b.n	14236 <__gxx_personality_v0+0x1ba>
   14532:	bf00      	nop

00014534 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   14534:	b570      	push	{r4, r5, r6, lr}
   14536:	4b3c      	ldr	r3, [pc, #240]	; (14628 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14538:	781a      	ldrb	r2, [r3, #0]
   1453a:	b082      	sub	sp, #8
   1453c:	2a00      	cmp	r2, #0
   1453e:	d135      	bne.n	145ac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14540:	2401      	movs	r4, #1
   14542:	701c      	strb	r4, [r3, #0]
   14544:	f006 fbd2 	bl	1acec <__cxa_current_exception_type>
   14548:	2800      	cmp	r0, #0
   1454a:	d05b      	beq.n	14604 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   1454c:	6844      	ldr	r4, [r0, #4]
   1454e:	4d37      	ldr	r5, [pc, #220]	; (1462c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14550:	7823      	ldrb	r3, [r4, #0]
   14552:	2b2a      	cmp	r3, #42	; 0x2a
   14554:	ab02      	add	r3, sp, #8
   14556:	f04f 32ff 	mov.w	r2, #4294967295
   1455a:	bf08      	it	eq
   1455c:	3401      	addeq	r4, #1
   1455e:	f843 2d04 	str.w	r2, [r3, #-4]!
   14562:	2200      	movs	r2, #0
   14564:	4611      	mov	r1, r2
   14566:	4620      	mov	r0, r4
   14568:	f006 fb52 	bl	1ac10 <__cxa_demangle>
   1456c:	682b      	ldr	r3, [r5, #0]
   1456e:	4606      	mov	r6, r0
   14570:	68db      	ldr	r3, [r3, #12]
   14572:	482f      	ldr	r0, [pc, #188]	; (14630 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   14574:	2230      	movs	r2, #48	; 0x30
   14576:	2101      	movs	r1, #1
   14578:	f009 fba4 	bl	1dcc4 <fwrite>
   1457c:	9b01      	ldr	r3, [sp, #4]
   1457e:	b17b      	cbz	r3, 145a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14580:	682b      	ldr	r3, [r5, #0]
   14582:	4620      	mov	r0, r4
   14584:	68d9      	ldr	r1, [r3, #12]
   14586:	f009 f9c7 	bl	1d918 <fputs>
   1458a:	682b      	ldr	r3, [r5, #0]
   1458c:	4829      	ldr	r0, [pc, #164]	; (14634 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1458e:	68db      	ldr	r3, [r3, #12]
   14590:	2202      	movs	r2, #2
   14592:	2101      	movs	r1, #1
   14594:	f009 fb96 	bl	1dcc4 <fwrite>
   14598:	9b01      	ldr	r3, [sp, #4]
   1459a:	b18b      	cbz	r3, 145c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1459c:	f7ff f940 	bl	13820 <__cxa_rethrow>
   145a0:	682b      	ldr	r3, [r5, #0]
   145a2:	4630      	mov	r0, r6
   145a4:	68d9      	ldr	r1, [r3, #12]
   145a6:	f009 f9b7 	bl	1d918 <fputs>
   145aa:	e7ee      	b.n	1458a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   145ac:	4b1f      	ldr	r3, [pc, #124]	; (1462c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   145ae:	4822      	ldr	r0, [pc, #136]	; (14638 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   145b0:	681b      	ldr	r3, [r3, #0]
   145b2:	221d      	movs	r2, #29
   145b4:	68db      	ldr	r3, [r3, #12]
   145b6:	2101      	movs	r1, #1
   145b8:	f009 fb84 	bl	1dcc4 <fwrite>
   145bc:	f009 f92e 	bl	1d81c <abort>
   145c0:	4630      	mov	r0, r6
   145c2:	f009 fbe1 	bl	1dd88 <free>
   145c6:	e7e9      	b.n	1459c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   145c8:	2901      	cmp	r1, #1
   145ca:	460c      	mov	r4, r1
   145cc:	d127      	bne.n	1461e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   145ce:	f7ff fbfd 	bl	13dcc <__cxa_begin_catch>
   145d2:	6803      	ldr	r3, [r0, #0]
   145d4:	689b      	ldr	r3, [r3, #8]
   145d6:	4798      	blx	r3
   145d8:	682b      	ldr	r3, [r5, #0]
   145da:	4606      	mov	r6, r0
   145dc:	68db      	ldr	r3, [r3, #12]
   145de:	4817      	ldr	r0, [pc, #92]	; (1463c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   145e0:	4621      	mov	r1, r4
   145e2:	220b      	movs	r2, #11
   145e4:	f009 fb6e 	bl	1dcc4 <fwrite>
   145e8:	682b      	ldr	r3, [r5, #0]
   145ea:	4630      	mov	r0, r6
   145ec:	68d9      	ldr	r1, [r3, #12]
   145ee:	f009 f993 	bl	1d918 <fputs>
   145f2:	682b      	ldr	r3, [r5, #0]
   145f4:	200a      	movs	r0, #10
   145f6:	68d9      	ldr	r1, [r3, #12]
   145f8:	f009 f91e 	bl	1d838 <fputc>
   145fc:	f7ff fc24 	bl	13e48 <__cxa_end_catch>
   14600:	f009 f90c 	bl	1d81c <abort>
   14604:	4b09      	ldr	r3, [pc, #36]	; (1462c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14606:	480e      	ldr	r0, [pc, #56]	; (14640 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14608:	681b      	ldr	r3, [r3, #0]
   1460a:	4621      	mov	r1, r4
   1460c:	68db      	ldr	r3, [r3, #12]
   1460e:	222d      	movs	r2, #45	; 0x2d
   14610:	f009 fb58 	bl	1dcc4 <fwrite>
   14614:	e7f4      	b.n	14600 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14616:	f7ff fc17 	bl	13e48 <__cxa_end_catch>
   1461a:	f7ff fa6d 	bl	13af8 <__cxa_end_cleanup>
   1461e:	f7ff fbd5 	bl	13dcc <__cxa_begin_catch>
   14622:	f7ff fc11 	bl	13e48 <__cxa_end_catch>
   14626:	e7eb      	b.n	14600 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14628:	200022ac 	.word	0x200022ac
   1462c:	20000100 	.word	0x20000100
   14630:	00023dc0 	.word	0x00023dc0
   14634:	00023df4 	.word	0x00023df4
   14638:	00023da0 	.word	0x00023da0
   1463c:	00023e28 	.word	0x00023e28
   14640:	00023df8 	.word	0x00023df8

00014644 <d_make_comp>:
   14644:	b470      	push	{r4, r5, r6}
   14646:	1e4c      	subs	r4, r1, #1
   14648:	2c4c      	cmp	r4, #76	; 0x4c
   1464a:	d82d      	bhi.n	146a8 <d_make_comp+0x64>
   1464c:	e8df f004 	tbb	[pc, r4]
   14650:	3c3c3c3c 	.word	0x3c3c3c3c
   14654:	2c2c2c2c 	.word	0x2c2c2c2c
   14658:	273c2727 	.word	0x273c2727
   1465c:	27272727 	.word	0x27272727
   14660:	27272727 	.word	0x27272727
   14664:	2c272727 	.word	0x2c272727
   14668:	28282828 	.word	0x28282828
   1466c:	28282828 	.word	0x28282828
   14670:	2727273c 	.word	0x2727273c
   14674:	272c2727 	.word	0x272c2727
   14678:	2c3c3e28 	.word	0x2c3c3e28
   1467c:	3e28283c 	.word	0x3e28283c
   14680:	27272c2c 	.word	0x27272c2c
   14684:	3c3c3c27 	.word	0x3c3c3c27
   14688:	3c273c3c 	.word	0x3c273c3c
   1468c:	2c3c273c 	.word	0x2c3c273c
   14690:	2727272c 	.word	0x2727272c
   14694:	272c2c2c 	.word	0x272c2c2c
   14698:	283c2727 	.word	0x283c2727
   1469c:	3c          	.byte	0x3c
   1469d:	00          	.byte	0x00
   1469e:	b11a      	cbz	r2, 146a8 <d_make_comp+0x64>
   146a0:	6944      	ldr	r4, [r0, #20]
   146a2:	6985      	ldr	r5, [r0, #24]
   146a4:	42ac      	cmp	r4, r5
   146a6:	db02      	blt.n	146ae <d_make_comp+0x6a>
   146a8:	2000      	movs	r0, #0
   146aa:	bc70      	pop	{r4, r5, r6}
   146ac:	4770      	bx	lr
   146ae:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   146b2:	6906      	ldr	r6, [r0, #16]
   146b4:	00ad      	lsls	r5, r5, #2
   146b6:	3401      	adds	r4, #1
   146b8:	6144      	str	r4, [r0, #20]
   146ba:	1970      	adds	r0, r6, r5
   146bc:	d0f5      	beq.n	146aa <d_make_comp+0x66>
   146be:	5571      	strb	r1, [r6, r5]
   146c0:	6042      	str	r2, [r0, #4]
   146c2:	6083      	str	r3, [r0, #8]
   146c4:	bc70      	pop	{r4, r5, r6}
   146c6:	4770      	bx	lr
   146c8:	2a00      	cmp	r2, #0
   146ca:	d0ed      	beq.n	146a8 <d_make_comp+0x64>
   146cc:	2b00      	cmp	r3, #0
   146ce:	d0eb      	beq.n	146a8 <d_make_comp+0x64>
   146d0:	6944      	ldr	r4, [r0, #20]
   146d2:	6985      	ldr	r5, [r0, #24]
   146d4:	42ac      	cmp	r4, r5
   146d6:	dae7      	bge.n	146a8 <d_make_comp+0x64>
   146d8:	e7e9      	b.n	146ae <d_make_comp+0x6a>
   146da:	bf00      	nop

000146dc <d_cv_qualifiers>:
   146dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   146e0:	68c3      	ldr	r3, [r0, #12]
   146e2:	f1b2 0a00 	subs.w	sl, r2, #0
   146e6:	4604      	mov	r4, r0
   146e8:	460e      	mov	r6, r1
   146ea:	781a      	ldrb	r2, [r3, #0]
   146ec:	bf15      	itete	ne
   146ee:	f04f 091e 	movne.w	r9, #30
   146f2:	f04f 091b 	moveq.w	r9, #27
   146f6:	f04f 081d 	movne.w	r8, #29
   146fa:	f04f 081a 	moveq.w	r8, #26
   146fe:	bf14      	ite	ne
   14700:	271c      	movne	r7, #28
   14702:	2719      	moveq	r7, #25
   14704:	460d      	mov	r5, r1
   14706:	e018      	b.n	1473a <d_cv_qualifiers+0x5e>
   14708:	2a56      	cmp	r2, #86	; 0x56
   1470a:	d01f      	beq.n	1474c <d_cv_qualifiers+0x70>
   1470c:	2a4b      	cmp	r2, #75	; 0x4b
   1470e:	d024      	beq.n	1475a <d_cv_qualifiers+0x7e>
   14710:	2a44      	cmp	r2, #68	; 0x44
   14712:	d12d      	bne.n	14770 <d_cv_qualifiers+0x94>
   14714:	785a      	ldrb	r2, [r3, #1]
   14716:	2a78      	cmp	r2, #120	; 0x78
   14718:	d127      	bne.n	1476a <d_cv_qualifiers+0x8e>
   1471a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1471c:	3302      	adds	r3, #2
   1471e:	3211      	adds	r2, #17
   14720:	60e3      	str	r3, [r4, #12]
   14722:	6322      	str	r2, [r4, #48]	; 0x30
   14724:	214c      	movs	r1, #76	; 0x4c
   14726:	2300      	movs	r3, #0
   14728:	461a      	mov	r2, r3
   1472a:	4620      	mov	r0, r4
   1472c:	f7ff ff8a 	bl	14644 <d_make_comp>
   14730:	6028      	str	r0, [r5, #0]
   14732:	b1c8      	cbz	r0, 14768 <d_cv_qualifiers+0x8c>
   14734:	68e3      	ldr	r3, [r4, #12]
   14736:	781a      	ldrb	r2, [r3, #0]
   14738:	1d05      	adds	r5, r0, #4
   1473a:	2a72      	cmp	r2, #114	; 0x72
   1473c:	d1e4      	bne.n	14708 <d_cv_qualifiers+0x2c>
   1473e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14740:	3301      	adds	r3, #1
   14742:	3209      	adds	r2, #9
   14744:	60e3      	str	r3, [r4, #12]
   14746:	6322      	str	r2, [r4, #48]	; 0x30
   14748:	4639      	mov	r1, r7
   1474a:	e7ec      	b.n	14726 <d_cv_qualifiers+0x4a>
   1474c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1474e:	3301      	adds	r3, #1
   14750:	3209      	adds	r2, #9
   14752:	60e3      	str	r3, [r4, #12]
   14754:	6322      	str	r2, [r4, #48]	; 0x30
   14756:	4641      	mov	r1, r8
   14758:	e7e5      	b.n	14726 <d_cv_qualifiers+0x4a>
   1475a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1475c:	3301      	adds	r3, #1
   1475e:	3206      	adds	r2, #6
   14760:	60e3      	str	r3, [r4, #12]
   14762:	6322      	str	r2, [r4, #48]	; 0x30
   14764:	4649      	mov	r1, r9
   14766:	e7de      	b.n	14726 <d_cv_qualifiers+0x4a>
   14768:	4605      	mov	r5, r0
   1476a:	4628      	mov	r0, r5
   1476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14770:	f1ba 0f00 	cmp.w	sl, #0
   14774:	d1f9      	bne.n	1476a <d_cv_qualifiers+0x8e>
   14776:	2a46      	cmp	r2, #70	; 0x46
   14778:	d1f7      	bne.n	1476a <d_cv_qualifiers+0x8e>
   1477a:	42b5      	cmp	r5, r6
   1477c:	d0f5      	beq.n	1476a <d_cv_qualifiers+0x8e>
   1477e:	201d      	movs	r0, #29
   14780:	211e      	movs	r1, #30
   14782:	221c      	movs	r2, #28
   14784:	e007      	b.n	14796 <d_cv_qualifiers+0xba>
   14786:	2b1b      	cmp	r3, #27
   14788:	d00b      	beq.n	147a2 <d_cv_qualifiers+0xc6>
   1478a:	2b19      	cmp	r3, #25
   1478c:	d100      	bne.n	14790 <d_cv_qualifiers+0xb4>
   1478e:	7032      	strb	r2, [r6, #0]
   14790:	3604      	adds	r6, #4
   14792:	42b5      	cmp	r5, r6
   14794:	d0e9      	beq.n	1476a <d_cv_qualifiers+0x8e>
   14796:	6836      	ldr	r6, [r6, #0]
   14798:	7833      	ldrb	r3, [r6, #0]
   1479a:	2b1a      	cmp	r3, #26
   1479c:	d1f3      	bne.n	14786 <d_cv_qualifiers+0xaa>
   1479e:	7030      	strb	r0, [r6, #0]
   147a0:	e7f6      	b.n	14790 <d_cv_qualifiers+0xb4>
   147a2:	7031      	strb	r1, [r6, #0]
   147a4:	e7f4      	b.n	14790 <d_cv_qualifiers+0xb4>
   147a6:	bf00      	nop

000147a8 <d_ref_qualifier>:
   147a8:	b410      	push	{r4}
   147aa:	68c3      	ldr	r3, [r0, #12]
   147ac:	781c      	ldrb	r4, [r3, #0]
   147ae:	2c52      	cmp	r4, #82	; 0x52
   147b0:	460a      	mov	r2, r1
   147b2:	d00f      	beq.n	147d4 <d_ref_qualifier+0x2c>
   147b4:	2c4f      	cmp	r4, #79	; 0x4f
   147b6:	d003      	beq.n	147c0 <d_ref_qualifier+0x18>
   147b8:	4608      	mov	r0, r1
   147ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   147be:	4770      	bx	lr
   147c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
   147c2:	3103      	adds	r1, #3
   147c4:	6301      	str	r1, [r0, #48]	; 0x30
   147c6:	2120      	movs	r1, #32
   147c8:	3301      	adds	r3, #1
   147ca:	60c3      	str	r3, [r0, #12]
   147cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   147d0:	2300      	movs	r3, #0
   147d2:	e737      	b.n	14644 <d_make_comp>
   147d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   147d6:	3102      	adds	r1, #2
   147d8:	6301      	str	r1, [r0, #48]	; 0x30
   147da:	211f      	movs	r1, #31
   147dc:	e7f4      	b.n	147c8 <d_ref_qualifier+0x20>
   147de:	bf00      	nop

000147e0 <d_count_templates_scopes>:
   147e0:	2a00      	cmp	r2, #0
   147e2:	d04d      	beq.n	14880 <d_count_templates_scopes+0xa0>
   147e4:	b570      	push	{r4, r5, r6, lr}
   147e6:	4605      	mov	r5, r0
   147e8:	460e      	mov	r6, r1
   147ea:	4614      	mov	r4, r2
   147ec:	7823      	ldrb	r3, [r4, #0]
   147ee:	3b01      	subs	r3, #1
   147f0:	2b4c      	cmp	r3, #76	; 0x4c
   147f2:	d82b      	bhi.n	1484c <d_count_templates_scopes+0x6c>
   147f4:	e8df f003 	tbb	[pc, r3]
   147f8:	3f363636 	.word	0x3f363636
   147fc:	27272a2a 	.word	0x27272a2a
   14800:	36363636 	.word	0x36363636
   14804:	36363636 	.word	0x36363636
   14808:	36363636 	.word	0x36363636
   1480c:	2a363636 	.word	0x2a363636
   14810:	36363636 	.word	0x36363636
   14814:	36363636 	.word	0x36363636
   14818:	2f2f3636 	.word	0x2f2f3636
   1481c:	362a3636 	.word	0x362a3636
   14820:	2b363636 	.word	0x2b363636
   14824:	36363636 	.word	0x36363636
   14828:	3636272a 	.word	0x3636272a
   1482c:	36363636 	.word	0x36363636
   14830:	36363636 	.word	0x36363636
   14834:	2a363636 	.word	0x2a363636
   14838:	2b2b362a 	.word	0x2b2b362a
   1483c:	362a2b2b 	.word	0x362a2b2b
   14840:	36363636 	.word	0x36363636
   14844:	36          	.byte	0x36
   14845:	00          	.byte	0x00
   14846:	68a4      	ldr	r4, [r4, #8]
   14848:	2c00      	cmp	r4, #0
   1484a:	d1cf      	bne.n	147ec <d_count_templates_scopes+0xc>
   1484c:	bd70      	pop	{r4, r5, r6, pc}
   1484e:	6864      	ldr	r4, [r4, #4]
   14850:	2c00      	cmp	r4, #0
   14852:	d1cb      	bne.n	147ec <d_count_templates_scopes+0xc>
   14854:	e7fa      	b.n	1484c <d_count_templates_scopes+0x6c>
   14856:	6862      	ldr	r2, [r4, #4]
   14858:	7813      	ldrb	r3, [r2, #0]
   1485a:	2b05      	cmp	r3, #5
   1485c:	d103      	bne.n	14866 <d_count_templates_scopes+0x86>
   1485e:	6833      	ldr	r3, [r6, #0]
   14860:	3301      	adds	r3, #1
   14862:	6033      	str	r3, [r6, #0]
   14864:	6862      	ldr	r2, [r4, #4]
   14866:	4631      	mov	r1, r6
   14868:	4628      	mov	r0, r5
   1486a:	f7ff ffb9 	bl	147e0 <d_count_templates_scopes>
   1486e:	68a4      	ldr	r4, [r4, #8]
   14870:	2c00      	cmp	r4, #0
   14872:	d1bb      	bne.n	147ec <d_count_templates_scopes+0xc>
   14874:	e7ea      	b.n	1484c <d_count_templates_scopes+0x6c>
   14876:	682b      	ldr	r3, [r5, #0]
   14878:	3301      	adds	r3, #1
   1487a:	602b      	str	r3, [r5, #0]
   1487c:	6862      	ldr	r2, [r4, #4]
   1487e:	e7f2      	b.n	14866 <d_count_templates_scopes+0x86>
   14880:	4770      	bx	lr
   14882:	bf00      	nop

00014884 <d_append_buffer>:
   14884:	b37a      	cbz	r2, 148e6 <d_append_buffer+0x62>
   14886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1488a:	460d      	mov	r5, r1
   1488c:	4604      	mov	r4, r0
   1488e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14892:	18af      	adds	r7, r5, r2
   14894:	f04f 0800 	mov.w	r8, #0
   14898:	e009      	b.n	148ae <d_append_buffer+0x2a>
   1489a:	460b      	mov	r3, r1
   1489c:	42bd      	cmp	r5, r7
   1489e:	f101 0101 	add.w	r1, r1, #1
   148a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   148a6:	54e6      	strb	r6, [r4, r3]
   148a8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   148ac:	d019      	beq.n	148e2 <d_append_buffer+0x5e>
   148ae:	29ff      	cmp	r1, #255	; 0xff
   148b0:	f815 6b01 	ldrb.w	r6, [r5], #1
   148b4:	d1f1      	bne.n	1489a <d_append_buffer+0x16>
   148b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   148ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   148be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   148c2:	4620      	mov	r0, r4
   148c4:	4798      	blx	r3
   148c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   148ca:	3301      	adds	r3, #1
   148cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   148d0:	2300      	movs	r3, #0
   148d2:	2101      	movs	r1, #1
   148d4:	42bd      	cmp	r5, r7
   148d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   148da:	54e6      	strb	r6, [r4, r3]
   148dc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   148e0:	d1e5      	bne.n	148ae <d_append_buffer+0x2a>
   148e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148e6:	4770      	bx	lr

000148e8 <d_number.isra.0>:
   148e8:	b470      	push	{r4, r5, r6}
   148ea:	6802      	ldr	r2, [r0, #0]
   148ec:	7811      	ldrb	r1, [r2, #0]
   148ee:	296e      	cmp	r1, #110	; 0x6e
   148f0:	d018      	beq.n	14924 <d_number.isra.0+0x3c>
   148f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   148f6:	2b09      	cmp	r3, #9
   148f8:	d81e      	bhi.n	14938 <d_number.isra.0+0x50>
   148fa:	2600      	movs	r6, #0
   148fc:	2300      	movs	r3, #0
   148fe:	3201      	adds	r2, #1
   14900:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14904:	6002      	str	r2, [r0, #0]
   14906:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   1490a:	7811      	ldrb	r1, [r2, #0]
   1490c:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14910:	2d09      	cmp	r5, #9
   14912:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   14916:	d9f2      	bls.n	148fe <d_number.isra.0+0x16>
   14918:	b10e      	cbz	r6, 1491e <d_number.isra.0+0x36>
   1491a:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   1491e:	4618      	mov	r0, r3
   14920:	bc70      	pop	{r4, r5, r6}
   14922:	4770      	bx	lr
   14924:	1c53      	adds	r3, r2, #1
   14926:	6003      	str	r3, [r0, #0]
   14928:	7851      	ldrb	r1, [r2, #1]
   1492a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1492e:	2a09      	cmp	r2, #9
   14930:	d802      	bhi.n	14938 <d_number.isra.0+0x50>
   14932:	461a      	mov	r2, r3
   14934:	2601      	movs	r6, #1
   14936:	e7e1      	b.n	148fc <d_number.isra.0+0x14>
   14938:	2300      	movs	r3, #0
   1493a:	e7f0      	b.n	1491e <d_number.isra.0+0x36>

0001493c <d_number_component>:
   1493c:	6943      	ldr	r3, [r0, #20]
   1493e:	6982      	ldr	r2, [r0, #24]
   14940:	4293      	cmp	r3, r2
   14942:	b510      	push	{r4, lr}
   14944:	da0f      	bge.n	14966 <d_number_component+0x2a>
   14946:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1494a:	6901      	ldr	r1, [r0, #16]
   1494c:	0092      	lsls	r2, r2, #2
   1494e:	3301      	adds	r3, #1
   14950:	188c      	adds	r4, r1, r2
   14952:	6143      	str	r3, [r0, #20]
   14954:	d005      	beq.n	14962 <d_number_component+0x26>
   14956:	2341      	movs	r3, #65	; 0x41
   14958:	300c      	adds	r0, #12
   1495a:	548b      	strb	r3, [r1, r2]
   1495c:	f7ff ffc4 	bl	148e8 <d_number.isra.0>
   14960:	6060      	str	r0, [r4, #4]
   14962:	4620      	mov	r0, r4
   14964:	bd10      	pop	{r4, pc}
   14966:	2400      	movs	r4, #0
   14968:	4620      	mov	r0, r4
   1496a:	bd10      	pop	{r4, pc}

0001496c <d_compact_number>:
   1496c:	b510      	push	{r4, lr}
   1496e:	68c3      	ldr	r3, [r0, #12]
   14970:	781a      	ldrb	r2, [r3, #0]
   14972:	2a5f      	cmp	r2, #95	; 0x5f
   14974:	4604      	mov	r4, r0
   14976:	d00d      	beq.n	14994 <d_compact_number+0x28>
   14978:	2a6e      	cmp	r2, #110	; 0x6e
   1497a:	d00f      	beq.n	1499c <d_compact_number+0x30>
   1497c:	300c      	adds	r0, #12
   1497e:	f7ff ffb3 	bl	148e8 <d_number.isra.0>
   14982:	3001      	adds	r0, #1
   14984:	d40a      	bmi.n	1499c <d_compact_number+0x30>
   14986:	68e3      	ldr	r3, [r4, #12]
   14988:	781a      	ldrb	r2, [r3, #0]
   1498a:	2a5f      	cmp	r2, #95	; 0x5f
   1498c:	d106      	bne.n	1499c <d_compact_number+0x30>
   1498e:	3301      	adds	r3, #1
   14990:	60e3      	str	r3, [r4, #12]
   14992:	bd10      	pop	{r4, pc}
   14994:	3301      	adds	r3, #1
   14996:	2000      	movs	r0, #0
   14998:	60e3      	str	r3, [r4, #12]
   1499a:	bd10      	pop	{r4, pc}
   1499c:	f04f 30ff 	mov.w	r0, #4294967295
   149a0:	bd10      	pop	{r4, pc}
   149a2:	bf00      	nop

000149a4 <d_template_param>:
   149a4:	b538      	push	{r3, r4, r5, lr}
   149a6:	68c3      	ldr	r3, [r0, #12]
   149a8:	781a      	ldrb	r2, [r3, #0]
   149aa:	2a54      	cmp	r2, #84	; 0x54
   149ac:	d001      	beq.n	149b2 <d_template_param+0xe>
   149ae:	2000      	movs	r0, #0
   149b0:	bd38      	pop	{r3, r4, r5, pc}
   149b2:	3301      	adds	r3, #1
   149b4:	60c3      	str	r3, [r0, #12]
   149b6:	4604      	mov	r4, r0
   149b8:	f7ff ffd8 	bl	1496c <d_compact_number>
   149bc:	1e05      	subs	r5, r0, #0
   149be:	dbf6      	blt.n	149ae <d_template_param+0xa>
   149c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   149c2:	6963      	ldr	r3, [r4, #20]
   149c4:	69a1      	ldr	r1, [r4, #24]
   149c6:	3201      	adds	r2, #1
   149c8:	428b      	cmp	r3, r1
   149ca:	62a2      	str	r2, [r4, #40]	; 0x28
   149cc:	daef      	bge.n	149ae <d_template_param+0xa>
   149ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   149d2:	6921      	ldr	r1, [r4, #16]
   149d4:	0092      	lsls	r2, r2, #2
   149d6:	3301      	adds	r3, #1
   149d8:	1888      	adds	r0, r1, r2
   149da:	6163      	str	r3, [r4, #20]
   149dc:	d002      	beq.n	149e4 <d_template_param+0x40>
   149de:	2305      	movs	r3, #5
   149e0:	548b      	strb	r3, [r1, r2]
   149e2:	6045      	str	r5, [r0, #4]
   149e4:	bd38      	pop	{r3, r4, r5, pc}
   149e6:	bf00      	nop

000149e8 <d_source_name>:
   149e8:	b570      	push	{r4, r5, r6, lr}
   149ea:	4604      	mov	r4, r0
   149ec:	300c      	adds	r0, #12
   149ee:	f7ff ff7b 	bl	148e8 <d_number.isra.0>
   149f2:	1e06      	subs	r6, r0, #0
   149f4:	dd4d      	ble.n	14a92 <d_source_name+0xaa>
   149f6:	68e5      	ldr	r5, [r4, #12]
   149f8:	6863      	ldr	r3, [r4, #4]
   149fa:	1b5b      	subs	r3, r3, r5
   149fc:	429e      	cmp	r6, r3
   149fe:	dc2b      	bgt.n	14a58 <d_source_name+0x70>
   14a00:	68a2      	ldr	r2, [r4, #8]
   14a02:	19ab      	adds	r3, r5, r6
   14a04:	0752      	lsls	r2, r2, #29
   14a06:	60e3      	str	r3, [r4, #12]
   14a08:	d504      	bpl.n	14a14 <d_source_name+0x2c>
   14a0a:	5daa      	ldrb	r2, [r5, r6]
   14a0c:	2a24      	cmp	r2, #36	; 0x24
   14a0e:	bf04      	itt	eq
   14a10:	3301      	addeq	r3, #1
   14a12:	60e3      	streq	r3, [r4, #12]
   14a14:	2e09      	cmp	r6, #9
   14a16:	dd0c      	ble.n	14a32 <d_source_name+0x4a>
   14a18:	2208      	movs	r2, #8
   14a1a:	491f      	ldr	r1, [pc, #124]	; (14a98 <d_source_name+0xb0>)
   14a1c:	4628      	mov	r0, r5
   14a1e:	f009 fcd7 	bl	1e3d0 <memcmp>
   14a22:	b930      	cbnz	r0, 14a32 <d_source_name+0x4a>
   14a24:	7a2b      	ldrb	r3, [r5, #8]
   14a26:	2b2e      	cmp	r3, #46	; 0x2e
   14a28:	d019      	beq.n	14a5e <d_source_name+0x76>
   14a2a:	2b5f      	cmp	r3, #95	; 0x5f
   14a2c:	d017      	beq.n	14a5e <d_source_name+0x76>
   14a2e:	2b24      	cmp	r3, #36	; 0x24
   14a30:	d015      	beq.n	14a5e <d_source_name+0x76>
   14a32:	6963      	ldr	r3, [r4, #20]
   14a34:	69a2      	ldr	r2, [r4, #24]
   14a36:	4293      	cmp	r3, r2
   14a38:	da0e      	bge.n	14a58 <d_source_name+0x70>
   14a3a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14a3e:	6921      	ldr	r1, [r4, #16]
   14a40:	0092      	lsls	r2, r2, #2
   14a42:	3301      	adds	r3, #1
   14a44:	1888      	adds	r0, r1, r2
   14a46:	6163      	str	r3, [r4, #20]
   14a48:	d006      	beq.n	14a58 <d_source_name+0x70>
   14a4a:	b12d      	cbz	r5, 14a58 <d_source_name+0x70>
   14a4c:	2300      	movs	r3, #0
   14a4e:	548b      	strb	r3, [r1, r2]
   14a50:	6045      	str	r5, [r0, #4]
   14a52:	6086      	str	r6, [r0, #8]
   14a54:	62e0      	str	r0, [r4, #44]	; 0x2c
   14a56:	bd70      	pop	{r4, r5, r6, pc}
   14a58:	2000      	movs	r0, #0
   14a5a:	62e0      	str	r0, [r4, #44]	; 0x2c
   14a5c:	bd70      	pop	{r4, r5, r6, pc}
   14a5e:	7a6b      	ldrb	r3, [r5, #9]
   14a60:	2b4e      	cmp	r3, #78	; 0x4e
   14a62:	d1e6      	bne.n	14a32 <d_source_name+0x4a>
   14a64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14a66:	6962      	ldr	r2, [r4, #20]
   14a68:	69a1      	ldr	r1, [r4, #24]
   14a6a:	3316      	adds	r3, #22
   14a6c:	1b9e      	subs	r6, r3, r6
   14a6e:	428a      	cmp	r2, r1
   14a70:	6326      	str	r6, [r4, #48]	; 0x30
   14a72:	daf1      	bge.n	14a58 <d_source_name+0x70>
   14a74:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14a78:	6921      	ldr	r1, [r4, #16]
   14a7a:	009b      	lsls	r3, r3, #2
   14a7c:	3201      	adds	r2, #1
   14a7e:	18c8      	adds	r0, r1, r3
   14a80:	6162      	str	r2, [r4, #20]
   14a82:	d0ea      	beq.n	14a5a <d_source_name+0x72>
   14a84:	2500      	movs	r5, #0
   14a86:	54cd      	strb	r5, [r1, r3]
   14a88:	4a04      	ldr	r2, [pc, #16]	; (14a9c <d_source_name+0xb4>)
   14a8a:	6042      	str	r2, [r0, #4]
   14a8c:	2315      	movs	r3, #21
   14a8e:	6083      	str	r3, [r0, #8]
   14a90:	e7e3      	b.n	14a5a <d_source_name+0x72>
   14a92:	2000      	movs	r0, #0
   14a94:	bd70      	pop	{r4, r5, r6, pc}
   14a96:	bf00      	nop
   14a98:	000245cc 	.word	0x000245cc
   14a9c:	000245d8 	.word	0x000245d8

00014aa0 <d_abi_tags>:
   14aa0:	b570      	push	{r4, r5, r6, lr}
   14aa2:	68c3      	ldr	r3, [r0, #12]
   14aa4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   14aa6:	781a      	ldrb	r2, [r3, #0]
   14aa8:	2a42      	cmp	r2, #66	; 0x42
   14aaa:	4604      	mov	r4, r0
   14aac:	460d      	mov	r5, r1
   14aae:	d10f      	bne.n	14ad0 <d_abi_tags+0x30>
   14ab0:	3301      	adds	r3, #1
   14ab2:	60e3      	str	r3, [r4, #12]
   14ab4:	4620      	mov	r0, r4
   14ab6:	f7ff ff97 	bl	149e8 <d_source_name>
   14aba:	462a      	mov	r2, r5
   14abc:	4603      	mov	r3, r0
   14abe:	214b      	movs	r1, #75	; 0x4b
   14ac0:	4620      	mov	r0, r4
   14ac2:	f7ff fdbf 	bl	14644 <d_make_comp>
   14ac6:	68e3      	ldr	r3, [r4, #12]
   14ac8:	781a      	ldrb	r2, [r3, #0]
   14aca:	2a42      	cmp	r2, #66	; 0x42
   14acc:	4605      	mov	r5, r0
   14ace:	d0ef      	beq.n	14ab0 <d_abi_tags+0x10>
   14ad0:	62e6      	str	r6, [r4, #44]	; 0x2c
   14ad2:	4628      	mov	r0, r5
   14ad4:	bd70      	pop	{r4, r5, r6, pc}
   14ad6:	bf00      	nop

00014ad8 <d_substitution>:
   14ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14adc:	4605      	mov	r5, r0
   14ade:	68c0      	ldr	r0, [r0, #12]
   14ae0:	7803      	ldrb	r3, [r0, #0]
   14ae2:	2b53      	cmp	r3, #83	; 0x53
   14ae4:	d002      	beq.n	14aec <d_substitution+0x14>
   14ae6:	2000      	movs	r0, #0
   14ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14aec:	1c43      	adds	r3, r0, #1
   14aee:	60eb      	str	r3, [r5, #12]
   14af0:	7842      	ldrb	r2, [r0, #1]
   14af2:	b1a2      	cbz	r2, 14b1e <d_substitution+0x46>
   14af4:	1c83      	adds	r3, r0, #2
   14af6:	60eb      	str	r3, [r5, #12]
   14af8:	7842      	ldrb	r2, [r0, #1]
   14afa:	2a5f      	cmp	r2, #95	; 0x5f
   14afc:	d15a      	bne.n	14bb4 <d_substitution+0xdc>
   14afe:	2300      	movs	r3, #0
   14b00:	6a2a      	ldr	r2, [r5, #32]
   14b02:	4293      	cmp	r3, r2
   14b04:	d2ef      	bcs.n	14ae6 <d_substitution+0xe>
   14b06:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b08:	69e9      	ldr	r1, [r5, #28]
   14b0a:	3201      	adds	r2, #1
   14b0c:	62aa      	str	r2, [r5, #40]	; 0x28
   14b0e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b16:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14b1a:	2b19      	cmp	r3, #25
   14b1c:	d94f      	bls.n	14bbe <d_substitution+0xe6>
   14b1e:	68ab      	ldr	r3, [r5, #8]
   14b20:	f003 0308 	and.w	r3, r3, #8
   14b24:	2b00      	cmp	r3, #0
   14b26:	bf14      	ite	ne
   14b28:	2401      	movne	r4, #1
   14b2a:	2400      	moveq	r4, #0
   14b2c:	d101      	bne.n	14b32 <d_substitution+0x5a>
   14b2e:	2900      	cmp	r1, #0
   14b30:	d169      	bne.n	14c06 <d_substitution+0x12e>
   14b32:	4b46      	ldr	r3, [pc, #280]	; (14c4c <d_substitution+0x174>)
   14b34:	2174      	movs	r1, #116	; 0x74
   14b36:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   14b3a:	e003      	b.n	14b44 <d_substitution+0x6c>
   14b3c:	331c      	adds	r3, #28
   14b3e:	4283      	cmp	r3, r0
   14b40:	d2d1      	bcs.n	14ae6 <d_substitution+0xe>
   14b42:	7819      	ldrb	r1, [r3, #0]
   14b44:	428a      	cmp	r2, r1
   14b46:	d1f9      	bne.n	14b3c <d_substitution+0x64>
   14b48:	695e      	ldr	r6, [r3, #20]
   14b4a:	2e00      	cmp	r6, #0
   14b4c:	d07b      	beq.n	14c46 <d_substitution+0x16e>
   14b4e:	696a      	ldr	r2, [r5, #20]
   14b50:	69a9      	ldr	r1, [r5, #24]
   14b52:	428a      	cmp	r2, r1
   14b54:	da63      	bge.n	14c1e <d_substitution+0x146>
   14b56:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14b5a:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14b5e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   14b62:	00bf      	lsls	r7, r7, #2
   14b64:	3201      	adds	r2, #1
   14b66:	eb1e 0007 	adds.w	r0, lr, r7
   14b6a:	616a      	str	r2, [r5, #20]
   14b6c:	d006      	beq.n	14b7c <d_substitution+0xa4>
   14b6e:	f04f 0c18 	mov.w	ip, #24
   14b72:	f80e c007 	strb.w	ip, [lr, r7]
   14b76:	6046      	str	r6, [r0, #4]
   14b78:	f8c0 8008 	str.w	r8, [r0, #8]
   14b7c:	62e8      	str	r0, [r5, #44]	; 0x2c
   14b7e:	2c00      	cmp	r4, #0
   14b80:	d04a      	beq.n	14c18 <d_substitution+0x140>
   14b82:	68de      	ldr	r6, [r3, #12]
   14b84:	691c      	ldr	r4, [r3, #16]
   14b86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14b88:	4291      	cmp	r1, r2
   14b8a:	4423      	add	r3, r4
   14b8c:	632b      	str	r3, [r5, #48]	; 0x30
   14b8e:	dd41      	ble.n	14c14 <d_substitution+0x13c>
   14b90:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14b94:	6929      	ldr	r1, [r5, #16]
   14b96:	009b      	lsls	r3, r3, #2
   14b98:	3201      	adds	r2, #1
   14b9a:	18c8      	adds	r0, r1, r3
   14b9c:	616a      	str	r2, [r5, #20]
   14b9e:	d003      	beq.n	14ba8 <d_substitution+0xd0>
   14ba0:	2218      	movs	r2, #24
   14ba2:	54ca      	strb	r2, [r1, r3]
   14ba4:	6046      	str	r6, [r0, #4]
   14ba6:	6084      	str	r4, [r0, #8]
   14ba8:	68eb      	ldr	r3, [r5, #12]
   14baa:	781b      	ldrb	r3, [r3, #0]
   14bac:	2b42      	cmp	r3, #66	; 0x42
   14bae:	d038      	beq.n	14c22 <d_substitution+0x14a>
   14bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bb4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14bb8:	b2e3      	uxtb	r3, r4
   14bba:	2b09      	cmp	r3, #9
   14bbc:	d8ab      	bhi.n	14b16 <d_substitution+0x3e>
   14bbe:	2100      	movs	r1, #0
   14bc0:	e00d      	b.n	14bde <d_substitution+0x106>
   14bc2:	3b30      	subs	r3, #48	; 0x30
   14bc4:	4299      	cmp	r1, r3
   14bc6:	d88e      	bhi.n	14ae6 <d_substitution+0xe>
   14bc8:	68e9      	ldr	r1, [r5, #12]
   14bca:	780a      	ldrb	r2, [r1, #0]
   14bcc:	1c48      	adds	r0, r1, #1
   14bce:	b11a      	cbz	r2, 14bd8 <d_substitution+0x100>
   14bd0:	60e8      	str	r0, [r5, #12]
   14bd2:	780a      	ldrb	r2, [r1, #0]
   14bd4:	2a5f      	cmp	r2, #95	; 0x5f
   14bd6:	d014      	beq.n	14c02 <d_substitution+0x12a>
   14bd8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14bdc:	4619      	mov	r1, r3
   14bde:	b2e4      	uxtb	r4, r4
   14be0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14be4:	2c09      	cmp	r4, #9
   14be6:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14bee:	d9e8      	bls.n	14bc2 <d_substitution+0xea>
   14bf0:	2819      	cmp	r0, #25
   14bf2:	f63f af78 	bhi.w	14ae6 <d_substitution+0xe>
   14bf6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14bfe:	3b37      	subs	r3, #55	; 0x37
   14c00:	e7e0      	b.n	14bc4 <d_substitution+0xec>
   14c02:	3301      	adds	r3, #1
   14c04:	e77c      	b.n	14b00 <d_substitution+0x28>
   14c06:	68eb      	ldr	r3, [r5, #12]
   14c08:	781b      	ldrb	r3, [r3, #0]
   14c0a:	3b43      	subs	r3, #67	; 0x43
   14c0c:	2b01      	cmp	r3, #1
   14c0e:	bf98      	it	ls
   14c10:	2401      	movls	r4, #1
   14c12:	e78e      	b.n	14b32 <d_substitution+0x5a>
   14c14:	2000      	movs	r0, #0
   14c16:	e7c7      	b.n	14ba8 <d_substitution+0xd0>
   14c18:	685e      	ldr	r6, [r3, #4]
   14c1a:	689c      	ldr	r4, [r3, #8]
   14c1c:	e7b3      	b.n	14b86 <d_substitution+0xae>
   14c1e:	2000      	movs	r0, #0
   14c20:	e7ac      	b.n	14b7c <d_substitution+0xa4>
   14c22:	4601      	mov	r1, r0
   14c24:	4628      	mov	r0, r5
   14c26:	f7ff ff3b 	bl	14aa0 <d_abi_tags>
   14c2a:	2800      	cmp	r0, #0
   14c2c:	f43f af5b 	beq.w	14ae6 <d_substitution+0xe>
   14c30:	6a2b      	ldr	r3, [r5, #32]
   14c32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14c34:	4293      	cmp	r3, r2
   14c36:	dabb      	bge.n	14bb0 <d_substitution+0xd8>
   14c38:	69e9      	ldr	r1, [r5, #28]
   14c3a:	1c5a      	adds	r2, r3, #1
   14c3c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14c40:	622a      	str	r2, [r5, #32]
   14c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c46:	69a9      	ldr	r1, [r5, #24]
   14c48:	696a      	ldr	r2, [r5, #20]
   14c4a:	e798      	b.n	14b7e <d_substitution+0xa6>
   14c4c:	00023e34 	.word	0x00023e34

00014c50 <d_call_offset>:
   14c50:	b538      	push	{r3, r4, r5, lr}
   14c52:	4604      	mov	r4, r0
   14c54:	b929      	cbnz	r1, 14c62 <d_call_offset+0x12>
   14c56:	68c3      	ldr	r3, [r0, #12]
   14c58:	781a      	ldrb	r2, [r3, #0]
   14c5a:	b132      	cbz	r2, 14c6a <d_call_offset+0x1a>
   14c5c:	1c5a      	adds	r2, r3, #1
   14c5e:	60c2      	str	r2, [r0, #12]
   14c60:	7819      	ldrb	r1, [r3, #0]
   14c62:	2968      	cmp	r1, #104	; 0x68
   14c64:	d019      	beq.n	14c9a <d_call_offset+0x4a>
   14c66:	2976      	cmp	r1, #118	; 0x76
   14c68:	d001      	beq.n	14c6e <d_call_offset+0x1e>
   14c6a:	2000      	movs	r0, #0
   14c6c:	bd38      	pop	{r3, r4, r5, pc}
   14c6e:	f104 050c 	add.w	r5, r4, #12
   14c72:	4628      	mov	r0, r5
   14c74:	f7ff fe38 	bl	148e8 <d_number.isra.0>
   14c78:	68e3      	ldr	r3, [r4, #12]
   14c7a:	781a      	ldrb	r2, [r3, #0]
   14c7c:	2a5f      	cmp	r2, #95	; 0x5f
   14c7e:	d1f4      	bne.n	14c6a <d_call_offset+0x1a>
   14c80:	3301      	adds	r3, #1
   14c82:	60e3      	str	r3, [r4, #12]
   14c84:	4628      	mov	r0, r5
   14c86:	f7ff fe2f 	bl	148e8 <d_number.isra.0>
   14c8a:	68e3      	ldr	r3, [r4, #12]
   14c8c:	781a      	ldrb	r2, [r3, #0]
   14c8e:	2a5f      	cmp	r2, #95	; 0x5f
   14c90:	d1eb      	bne.n	14c6a <d_call_offset+0x1a>
   14c92:	3301      	adds	r3, #1
   14c94:	60e3      	str	r3, [r4, #12]
   14c96:	2001      	movs	r0, #1
   14c98:	bd38      	pop	{r3, r4, r5, pc}
   14c9a:	f104 000c 	add.w	r0, r4, #12
   14c9e:	f7ff fe23 	bl	148e8 <d_number.isra.0>
   14ca2:	e7f2      	b.n	14c8a <d_call_offset+0x3a>

00014ca4 <d_lookup_template_argument.isra.6>:
   14ca4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14ca8:	b19b      	cbz	r3, 14cd2 <d_lookup_template_argument.isra.6+0x2e>
   14caa:	680a      	ldr	r2, [r1, #0]
   14cac:	685b      	ldr	r3, [r3, #4]
   14cae:	2a00      	cmp	r2, #0
   14cb0:	689b      	ldr	r3, [r3, #8]
   14cb2:	db09      	blt.n	14cc8 <d_lookup_template_argument.isra.6+0x24>
   14cb4:	b923      	cbnz	r3, 14cc0 <d_lookup_template_argument.isra.6+0x1c>
   14cb6:	e007      	b.n	14cc8 <d_lookup_template_argument.isra.6+0x24>
   14cb8:	b142      	cbz	r2, 14ccc <d_lookup_template_argument.isra.6+0x28>
   14cba:	689b      	ldr	r3, [r3, #8]
   14cbc:	3a01      	subs	r2, #1
   14cbe:	b11b      	cbz	r3, 14cc8 <d_lookup_template_argument.isra.6+0x24>
   14cc0:	7819      	ldrb	r1, [r3, #0]
   14cc2:	292f      	cmp	r1, #47	; 0x2f
   14cc4:	d0f8      	beq.n	14cb8 <d_lookup_template_argument.isra.6+0x14>
   14cc6:	2300      	movs	r3, #0
   14cc8:	4618      	mov	r0, r3
   14cca:	4770      	bx	lr
   14ccc:	685b      	ldr	r3, [r3, #4]
   14cce:	4618      	mov	r0, r3
   14cd0:	4770      	bx	lr
   14cd2:	2201      	movs	r2, #1
   14cd4:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14cd8:	e7f6      	b.n	14cc8 <d_lookup_template_argument.isra.6+0x24>
   14cda:	bf00      	nop

00014cdc <d_find_pack>:
   14cdc:	2900      	cmp	r1, #0
   14cde:	d041      	beq.n	14d64 <d_find_pack+0x88>
   14ce0:	b538      	push	{r3, r4, r5, lr}
   14ce2:	4605      	mov	r5, r0
   14ce4:	460c      	mov	r4, r1
   14ce6:	7823      	ldrb	r3, [r4, #0]
   14ce8:	2b4b      	cmp	r3, #75	; 0x4b
   14cea:	d827      	bhi.n	14d3c <d_find_pack+0x60>
   14cec:	e8df f003 	tbb	[pc, r3]
   14cf0:	2626262e 	.word	0x2626262e
   14cf4:	2b2e3026 	.word	0x2b2e3026
   14cf8:	2626262b 	.word	0x2626262b
   14cfc:	26262626 	.word	0x26262626
   14d00:	26262626 	.word	0x26262626
   14d04:	26262626 	.word	0x26262626
   14d08:	2626262e 	.word	0x2626262e
   14d0c:	26262626 	.word	0x26262626
   14d10:	26262626 	.word	0x26262626
   14d14:	2e262626 	.word	0x2e262626
   14d18:	26262626 	.word	0x26262626
   14d1c:	2626262e 	.word	0x2626262e
   14d20:	262b2e26 	.word	0x262b2e26
   14d24:	26262626 	.word	0x26262626
   14d28:	26262626 	.word	0x26262626
   14d2c:	26262626 	.word	0x26262626
   14d30:	26262e2e 	.word	0x26262e2e
   14d34:	2e2e2e26 	.word	0x2e2e2e26
   14d38:	2e2e2626 	.word	0x2e2e2626
   14d3c:	6861      	ldr	r1, [r4, #4]
   14d3e:	4628      	mov	r0, r5
   14d40:	f7ff ffcc 	bl	14cdc <d_find_pack>
   14d44:	b918      	cbnz	r0, 14d4e <d_find_pack+0x72>
   14d46:	68a4      	ldr	r4, [r4, #8]
   14d48:	2c00      	cmp	r4, #0
   14d4a:	d1cc      	bne.n	14ce6 <d_find_pack+0xa>
   14d4c:	2000      	movs	r0, #0
   14d4e:	bd38      	pop	{r3, r4, r5, pc}
   14d50:	1d21      	adds	r1, r4, #4
   14d52:	4628      	mov	r0, r5
   14d54:	f7ff ffa6 	bl	14ca4 <d_lookup_template_argument.isra.6>
   14d58:	2800      	cmp	r0, #0
   14d5a:	d0f7      	beq.n	14d4c <d_find_pack+0x70>
   14d5c:	7803      	ldrb	r3, [r0, #0]
   14d5e:	2b2f      	cmp	r3, #47	; 0x2f
   14d60:	d1f4      	bne.n	14d4c <d_find_pack+0x70>
   14d62:	bd38      	pop	{r3, r4, r5, pc}
   14d64:	2000      	movs	r0, #0
   14d66:	4770      	bx	lr

00014d68 <d_growable_string_callback_adapter>:
   14d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d6a:	4615      	mov	r5, r2
   14d6c:	6852      	ldr	r2, [r2, #4]
   14d6e:	68ac      	ldr	r4, [r5, #8]
   14d70:	1c4b      	adds	r3, r1, #1
   14d72:	4413      	add	r3, r2
   14d74:	42a3      	cmp	r3, r4
   14d76:	b083      	sub	sp, #12
   14d78:	460e      	mov	r6, r1
   14d7a:	4607      	mov	r7, r0
   14d7c:	d813      	bhi.n	14da6 <d_growable_string_callback_adapter+0x3e>
   14d7e:	68ec      	ldr	r4, [r5, #12]
   14d80:	b10c      	cbz	r4, 14d86 <d_growable_string_callback_adapter+0x1e>
   14d82:	b003      	add	sp, #12
   14d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d86:	e895 0009 	ldmia.w	r5, {r0, r3}
   14d8a:	4632      	mov	r2, r6
   14d8c:	4639      	mov	r1, r7
   14d8e:	4418      	add	r0, r3
   14d90:	f009 fb4e 	bl	1e430 <memcpy>
   14d94:	682b      	ldr	r3, [r5, #0]
   14d96:	686a      	ldr	r2, [r5, #4]
   14d98:	4433      	add	r3, r6
   14d9a:	549c      	strb	r4, [r3, r2]
   14d9c:	686b      	ldr	r3, [r5, #4]
   14d9e:	441e      	add	r6, r3
   14da0:	606e      	str	r6, [r5, #4]
   14da2:	b003      	add	sp, #12
   14da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14da6:	68ea      	ldr	r2, [r5, #12]
   14da8:	2a00      	cmp	r2, #0
   14daa:	d1ea      	bne.n	14d82 <d_growable_string_callback_adapter+0x1a>
   14dac:	b91c      	cbnz	r4, 14db6 <d_growable_string_callback_adapter+0x4e>
   14dae:	2b02      	cmp	r3, #2
   14db0:	f04f 0402 	mov.w	r4, #2
   14db4:	d902      	bls.n	14dbc <d_growable_string_callback_adapter+0x54>
   14db6:	0064      	lsls	r4, r4, #1
   14db8:	42a3      	cmp	r3, r4
   14dba:	d8fc      	bhi.n	14db6 <d_growable_string_callback_adapter+0x4e>
   14dbc:	4621      	mov	r1, r4
   14dbe:	6828      	ldr	r0, [r5, #0]
   14dc0:	f009 fcc6 	bl	1e750 <realloc>
   14dc4:	b110      	cbz	r0, 14dcc <d_growable_string_callback_adapter+0x64>
   14dc6:	6028      	str	r0, [r5, #0]
   14dc8:	60ac      	str	r4, [r5, #8]
   14dca:	e7d8      	b.n	14d7e <d_growable_string_callback_adapter+0x16>
   14dcc:	9001      	str	r0, [sp, #4]
   14dce:	6828      	ldr	r0, [r5, #0]
   14dd0:	f008 ffda 	bl	1dd88 <free>
   14dd4:	9b01      	ldr	r3, [sp, #4]
   14dd6:	602b      	str	r3, [r5, #0]
   14dd8:	2201      	movs	r2, #1
   14dda:	606b      	str	r3, [r5, #4]
   14ddc:	60ab      	str	r3, [r5, #8]
   14dde:	60ea      	str	r2, [r5, #12]
   14de0:	e7cf      	b.n	14d82 <d_growable_string_callback_adapter+0x1a>
   14de2:	bf00      	nop

00014de4 <d_append_num>:
   14de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14de8:	b088      	sub	sp, #32
   14dea:	460a      	mov	r2, r1
   14dec:	4604      	mov	r4, r0
   14dee:	491b      	ldr	r1, [pc, #108]	; (14e5c <d_append_num+0x78>)
   14df0:	a801      	add	r0, sp, #4
   14df2:	f009 febb 	bl	1eb6c <sprintf>
   14df6:	a801      	add	r0, sp, #4
   14df8:	f00a f862 	bl	1eec0 <strlen>
   14dfc:	b350      	cbz	r0, 14e54 <d_append_num+0x70>
   14dfe:	ad01      	add	r5, sp, #4
   14e00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14e04:	182f      	adds	r7, r5, r0
   14e06:	f04f 0800 	mov.w	r8, #0
   14e0a:	e009      	b.n	14e20 <d_append_num+0x3c>
   14e0c:	460b      	mov	r3, r1
   14e0e:	42bd      	cmp	r5, r7
   14e10:	f101 0101 	add.w	r1, r1, #1
   14e14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14e18:	54e6      	strb	r6, [r4, r3]
   14e1a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14e1e:	d019      	beq.n	14e54 <d_append_num+0x70>
   14e20:	29ff      	cmp	r1, #255	; 0xff
   14e22:	f815 6b01 	ldrb.w	r6, [r5], #1
   14e26:	d1f1      	bne.n	14e0c <d_append_num+0x28>
   14e28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14e2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14e30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14e34:	4620      	mov	r0, r4
   14e36:	4798      	blx	r3
   14e38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14e3c:	3301      	adds	r3, #1
   14e3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14e42:	2300      	movs	r3, #0
   14e44:	2101      	movs	r1, #1
   14e46:	42bd      	cmp	r5, r7
   14e48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14e4c:	54e6      	strb	r6, [r4, r3]
   14e4e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14e52:	d1e5      	bne.n	14e20 <d_append_num+0x3c>
   14e54:	b008      	add	sp, #32
   14e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e5a:	bf00      	nop
   14e5c:	000245f0 	.word	0x000245f0

00014e60 <d_exprlist>:
   14e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e64:	68c3      	ldr	r3, [r0, #12]
   14e66:	781d      	ldrb	r5, [r3, #0]
   14e68:	b083      	sub	sp, #12
   14e6a:	2200      	movs	r2, #0
   14e6c:	428d      	cmp	r5, r1
   14e6e:	4604      	mov	r4, r0
   14e70:	9201      	str	r2, [sp, #4]
   14e72:	f000 81c6 	beq.w	15202 <d_exprlist+0x3a2>
   14e76:	4688      	mov	r8, r1
   14e78:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15318 <d_exprlist+0x4b8>
   14e7c:	ae01      	add	r6, sp, #4
   14e7e:	e023      	b.n	14ec8 <d_exprlist+0x68>
   14e80:	2a66      	cmp	r2, #102	; 0x66
   14e82:	d04c      	beq.n	14f1e <d_exprlist+0xbe>
   14e84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14e88:	2909      	cmp	r1, #9
   14e8a:	f200 8217 	bhi.w	152bc <d_exprlist+0x45c>
   14e8e:	4620      	mov	r0, r4
   14e90:	f001 fb10 	bl	164b4 <d_unqualified_name>
   14e94:	4605      	mov	r5, r0
   14e96:	2800      	cmp	r0, #0
   14e98:	f000 8170 	beq.w	1517c <d_exprlist+0x31c>
   14e9c:	68e3      	ldr	r3, [r4, #12]
   14e9e:	781b      	ldrb	r3, [r3, #0]
   14ea0:	2b49      	cmp	r3, #73	; 0x49
   14ea2:	f000 8092 	beq.w	14fca <d_exprlist+0x16a>
   14ea6:	6367      	str	r7, [r4, #52]	; 0x34
   14ea8:	462a      	mov	r2, r5
   14eaa:	2300      	movs	r3, #0
   14eac:	212e      	movs	r1, #46	; 0x2e
   14eae:	4620      	mov	r0, r4
   14eb0:	f7ff fbc8 	bl	14644 <d_make_comp>
   14eb4:	6030      	str	r0, [r6, #0]
   14eb6:	2800      	cmp	r0, #0
   14eb8:	d05b      	beq.n	14f72 <d_exprlist+0x112>
   14eba:	68e3      	ldr	r3, [r4, #12]
   14ebc:	781a      	ldrb	r2, [r3, #0]
   14ebe:	4542      	cmp	r2, r8
   14ec0:	f100 0608 	add.w	r6, r0, #8
   14ec4:	f000 8107 	beq.w	150d6 <d_exprlist+0x276>
   14ec8:	2501      	movs	r5, #1
   14eca:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14ecc:	6365      	str	r5, [r4, #52]	; 0x34
   14ece:	781a      	ldrb	r2, [r3, #0]
   14ed0:	2a4c      	cmp	r2, #76	; 0x4c
   14ed2:	d047      	beq.n	14f64 <d_exprlist+0x104>
   14ed4:	2a54      	cmp	r2, #84	; 0x54
   14ed6:	d051      	beq.n	14f7c <d_exprlist+0x11c>
   14ed8:	2a73      	cmp	r2, #115	; 0x73
   14eda:	d1d1      	bne.n	14e80 <d_exprlist+0x20>
   14edc:	785a      	ldrb	r2, [r3, #1]
   14ede:	2a72      	cmp	r2, #114	; 0x72
   14ee0:	f000 80e2 	beq.w	150a8 <d_exprlist+0x248>
   14ee4:	2a70      	cmp	r2, #112	; 0x70
   14ee6:	f000 80fd 	beq.w	150e4 <d_exprlist+0x284>
   14eea:	4620      	mov	r0, r4
   14eec:	f001 fa22 	bl	16334 <d_operator_name>
   14ef0:	4605      	mov	r5, r0
   14ef2:	2800      	cmp	r0, #0
   14ef4:	f000 8142 	beq.w	1517c <d_exprlist+0x31c>
   14ef8:	782b      	ldrb	r3, [r5, #0]
   14efa:	2b31      	cmp	r3, #49	; 0x31
   14efc:	d043      	beq.n	14f86 <d_exprlist+0x126>
   14efe:	2b32      	cmp	r3, #50	; 0x32
   14f00:	d05c      	beq.n	14fbc <d_exprlist+0x15c>
   14f02:	2b33      	cmp	r3, #51	; 0x33
   14f04:	d17b      	bne.n	14ffe <d_exprlist+0x19e>
   14f06:	68e3      	ldr	r3, [r4, #12]
   14f08:	781a      	ldrb	r2, [r3, #0]
   14f0a:	2a5f      	cmp	r2, #95	; 0x5f
   14f0c:	f040 80c1 	bne.w	15092 <d_exprlist+0x232>
   14f10:	3301      	adds	r3, #1
   14f12:	60e3      	str	r3, [r4, #12]
   14f14:	2145      	movs	r1, #69	; 0x45
   14f16:	4620      	mov	r0, r4
   14f18:	f7ff ffa2 	bl	14e60 <d_exprlist>
   14f1c:	e0bc      	b.n	15098 <d_exprlist+0x238>
   14f1e:	785a      	ldrb	r2, [r3, #1]
   14f20:	2a70      	cmp	r2, #112	; 0x70
   14f22:	d1e2      	bne.n	14eea <d_exprlist+0x8a>
   14f24:	1c9a      	adds	r2, r3, #2
   14f26:	60e2      	str	r2, [r4, #12]
   14f28:	789a      	ldrb	r2, [r3, #2]
   14f2a:	2a54      	cmp	r2, #84	; 0x54
   14f2c:	d069      	beq.n	15002 <d_exprlist+0x1a2>
   14f2e:	4620      	mov	r0, r4
   14f30:	f7ff fd1c 	bl	1496c <d_compact_number>
   14f34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14f38:	4298      	cmp	r0, r3
   14f3a:	d060      	beq.n	14ffe <d_exprlist+0x19e>
   14f3c:	1c43      	adds	r3, r0, #1
   14f3e:	d05e      	beq.n	14ffe <d_exprlist+0x19e>
   14f40:	3001      	adds	r0, #1
   14f42:	6963      	ldr	r3, [r4, #20]
   14f44:	69a2      	ldr	r2, [r4, #24]
   14f46:	4293      	cmp	r3, r2
   14f48:	da59      	bge.n	14ffe <d_exprlist+0x19e>
   14f4a:	6922      	ldr	r2, [r4, #16]
   14f4c:	1c59      	adds	r1, r3, #1
   14f4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14f52:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14f56:	6161      	str	r1, [r4, #20]
   14f58:	d051      	beq.n	14ffe <d_exprlist+0x19e>
   14f5a:	2106      	movs	r1, #6
   14f5c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14f60:	6068      	str	r0, [r5, #4]
   14f62:	e7a0      	b.n	14ea6 <d_exprlist+0x46>
   14f64:	4620      	mov	r0, r4
   14f66:	f001 fef3 	bl	16d50 <d_expr_primary>
   14f6a:	4605      	mov	r5, r0
   14f6c:	6367      	str	r7, [r4, #52]	; 0x34
   14f6e:	2d00      	cmp	r5, #0
   14f70:	d19a      	bne.n	14ea8 <d_exprlist+0x48>
   14f72:	2500      	movs	r5, #0
   14f74:	4628      	mov	r0, r5
   14f76:	b003      	add	sp, #12
   14f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f7c:	4620      	mov	r0, r4
   14f7e:	f7ff fd11 	bl	149a4 <d_template_param>
   14f82:	4605      	mov	r5, r0
   14f84:	e7f2      	b.n	14f6c <d_exprlist+0x10c>
   14f86:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f8c:	f8db 2008 	ldr.w	r2, [fp, #8]
   14f90:	f8db a000 	ldr.w	sl, [fp]
   14f94:	3a02      	subs	r2, #2
   14f96:	4413      	add	r3, r2
   14f98:	6323      	str	r3, [r4, #48]	; 0x30
   14f9a:	4650      	mov	r0, sl
   14f9c:	4649      	mov	r1, r9
   14f9e:	f009 fe13 	bl	1ebc8 <strcmp>
   14fa2:	2800      	cmp	r0, #0
   14fa4:	f000 80e6 	beq.w	15174 <d_exprlist+0x314>
   14fa8:	f8db 300c 	ldr.w	r3, [fp, #12]
   14fac:	2b03      	cmp	r3, #3
   14fae:	d826      	bhi.n	14ffe <d_exprlist+0x19e>
   14fb0:	e8df f013 	tbh	[pc, r3, lsl #1]
   14fb4:	0135002b 	.word	0x0135002b
   14fb8:	00a50033 	.word	0x00a50033
   14fbc:	686b      	ldr	r3, [r5, #4]
   14fbe:	2b03      	cmp	r3, #3
   14fc0:	d81d      	bhi.n	14ffe <d_exprlist+0x19e>
   14fc2:	e8df f003 	tbb	[pc, r3]
   14fc6:	6622      	.short	0x6622
   14fc8:	1c1c      	.short	0x1c1c
   14fca:	4620      	mov	r0, r4
   14fcc:	f000 fc04 	bl	157d8 <d_template_args>
   14fd0:	462a      	mov	r2, r5
   14fd2:	4603      	mov	r3, r0
   14fd4:	2104      	movs	r1, #4
   14fd6:	4620      	mov	r0, r4
   14fd8:	f7ff fb34 	bl	14644 <d_make_comp>
   14fdc:	4605      	mov	r5, r0
   14fde:	e7c5      	b.n	14f6c <d_exprlist+0x10c>
   14fe0:	2a74      	cmp	r2, #116	; 0x74
   14fe2:	d182      	bne.n	14eea <d_exprlist+0x8a>
   14fe4:	785b      	ldrb	r3, [r3, #1]
   14fe6:	2b6c      	cmp	r3, #108	; 0x6c
   14fe8:	f47f af7f 	bne.w	14eea <d_exprlist+0x8a>
   14fec:	4620      	mov	r0, r4
   14fee:	f000 fdb9 	bl	15b64 <d_type>
   14ff2:	68e3      	ldr	r3, [r4, #12]
   14ff4:	785a      	ldrb	r2, [r3, #1]
   14ff6:	4605      	mov	r5, r0
   14ff8:	2a00      	cmp	r2, #0
   14ffa:	f040 8169 	bne.w	152d0 <d_exprlist+0x470>
   14ffe:	6367      	str	r7, [r4, #52]	; 0x34
   15000:	e7b7      	b.n	14f72 <d_exprlist+0x112>
   15002:	3303      	adds	r3, #3
   15004:	60e3      	str	r3, [r4, #12]
   15006:	2000      	movs	r0, #0
   15008:	e79b      	b.n	14f42 <d_exprlist+0xe2>
   1500a:	462a      	mov	r2, r5
   1500c:	2300      	movs	r3, #0
   1500e:	2135      	movs	r1, #53	; 0x35
   15010:	4620      	mov	r0, r4
   15012:	f7ff fb17 	bl	14644 <d_make_comp>
   15016:	4605      	mov	r5, r0
   15018:	e7a8      	b.n	14f6c <d_exprlist+0x10c>
   1501a:	f1ba 0f00 	cmp.w	sl, #0
   1501e:	d0ee      	beq.n	14ffe <d_exprlist+0x19e>
   15020:	686b      	ldr	r3, [r5, #4]
   15022:	681b      	ldr	r3, [r3, #0]
   15024:	785a      	ldrb	r2, [r3, #1]
   15026:	2a63      	cmp	r2, #99	; 0x63
   15028:	f000 80d2 	beq.w	151d0 <d_exprlist+0x370>
   1502c:	f89a 3000 	ldrb.w	r3, [sl]
   15030:	2b66      	cmp	r3, #102	; 0x66
   15032:	f000 80ef 	beq.w	15214 <d_exprlist+0x3b4>
   15036:	4620      	mov	r0, r4
   15038:	f000 f970 	bl	1531c <d_expression_1>
   1503c:	4683      	mov	fp, r0
   1503e:	49b1      	ldr	r1, [pc, #708]	; (15304 <d_exprlist+0x4a4>)
   15040:	4650      	mov	r0, sl
   15042:	f009 fdc1 	bl	1ebc8 <strcmp>
   15046:	2800      	cmp	r0, #0
   15048:	f000 809d 	beq.w	15186 <d_exprlist+0x326>
   1504c:	49ae      	ldr	r1, [pc, #696]	; (15308 <d_exprlist+0x4a8>)
   1504e:	4650      	mov	r0, sl
   15050:	f009 fdba 	bl	1ebc8 <strcmp>
   15054:	b130      	cbz	r0, 15064 <d_exprlist+0x204>
   15056:	4650      	mov	r0, sl
   15058:	49ac      	ldr	r1, [pc, #688]	; (1530c <d_exprlist+0x4ac>)
   1505a:	f009 fdb5 	bl	1ebc8 <strcmp>
   1505e:	2800      	cmp	r0, #0
   15060:	f040 8083 	bne.w	1516a <d_exprlist+0x30a>
   15064:	4620      	mov	r0, r4
   15066:	f001 fa25 	bl	164b4 <d_unqualified_name>
   1506a:	68e3      	ldr	r3, [r4, #12]
   1506c:	781b      	ldrb	r3, [r3, #0]
   1506e:	2b49      	cmp	r3, #73	; 0x49
   15070:	4682      	mov	sl, r0
   15072:	f000 80e9 	beq.w	15248 <d_exprlist+0x3e8>
   15076:	4653      	mov	r3, sl
   15078:	465a      	mov	r2, fp
   1507a:	2138      	movs	r1, #56	; 0x38
   1507c:	4620      	mov	r0, r4
   1507e:	f7ff fae1 	bl	14644 <d_make_comp>
   15082:	462a      	mov	r2, r5
   15084:	4603      	mov	r3, r0
   15086:	2137      	movs	r1, #55	; 0x37
   15088:	4620      	mov	r0, r4
   1508a:	f7ff fadb 	bl	14644 <d_make_comp>
   1508e:	4605      	mov	r5, r0
   15090:	e76c      	b.n	14f6c <d_exprlist+0x10c>
   15092:	4620      	mov	r0, r4
   15094:	f000 f942 	bl	1531c <d_expression_1>
   15098:	4603      	mov	r3, r0
   1509a:	462a      	mov	r2, r5
   1509c:	2136      	movs	r1, #54	; 0x36
   1509e:	4620      	mov	r0, r4
   150a0:	f7ff fad0 	bl	14644 <d_make_comp>
   150a4:	4605      	mov	r5, r0
   150a6:	e761      	b.n	14f6c <d_exprlist+0x10c>
   150a8:	3302      	adds	r3, #2
   150aa:	60e3      	str	r3, [r4, #12]
   150ac:	4620      	mov	r0, r4
   150ae:	f000 fd59 	bl	15b64 <d_type>
   150b2:	4682      	mov	sl, r0
   150b4:	4620      	mov	r0, r4
   150b6:	f001 f9fd 	bl	164b4 <d_unqualified_name>
   150ba:	68e3      	ldr	r3, [r4, #12]
   150bc:	781b      	ldrb	r3, [r3, #0]
   150be:	2b49      	cmp	r3, #73	; 0x49
   150c0:	4683      	mov	fp, r0
   150c2:	f000 8093 	beq.w	151ec <d_exprlist+0x38c>
   150c6:	4603      	mov	r3, r0
   150c8:	4629      	mov	r1, r5
   150ca:	4652      	mov	r2, sl
   150cc:	4620      	mov	r0, r4
   150ce:	f7ff fab9 	bl	14644 <d_make_comp>
   150d2:	4605      	mov	r5, r0
   150d4:	e74a      	b.n	14f6c <d_exprlist+0x10c>
   150d6:	9d01      	ldr	r5, [sp, #4]
   150d8:	3301      	adds	r3, #1
   150da:	4628      	mov	r0, r5
   150dc:	60e3      	str	r3, [r4, #12]
   150de:	b003      	add	sp, #12
   150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e4:	3302      	adds	r3, #2
   150e6:	60e3      	str	r3, [r4, #12]
   150e8:	4620      	mov	r0, r4
   150ea:	f000 f917 	bl	1531c <d_expression_1>
   150ee:	2300      	movs	r3, #0
   150f0:	4602      	mov	r2, r0
   150f2:	214a      	movs	r1, #74	; 0x4a
   150f4:	4620      	mov	r0, r4
   150f6:	f7ff faa5 	bl	14644 <d_make_comp>
   150fa:	4605      	mov	r5, r0
   150fc:	e736      	b.n	14f6c <d_exprlist+0x10c>
   150fe:	f1ba 0f00 	cmp.w	sl, #0
   15102:	f43f af7c 	beq.w	14ffe <d_exprlist+0x19e>
   15106:	4982      	ldr	r1, [pc, #520]	; (15310 <d_exprlist+0x4b0>)
   15108:	4650      	mov	r0, sl
   1510a:	f009 fd5d 	bl	1ebc8 <strcmp>
   1510e:	2800      	cmp	r0, #0
   15110:	d03f      	beq.n	15192 <d_exprlist+0x332>
   15112:	f89a 3000 	ldrb.w	r3, [sl]
   15116:	2b66      	cmp	r3, #102	; 0x66
   15118:	f000 80bd 	beq.w	15296 <d_exprlist+0x436>
   1511c:	2b6e      	cmp	r3, #110	; 0x6e
   1511e:	f47f af6e 	bne.w	14ffe <d_exprlist+0x19e>
   15122:	f89a 3001 	ldrb.w	r3, [sl, #1]
   15126:	2b77      	cmp	r3, #119	; 0x77
   15128:	d002      	beq.n	15130 <d_exprlist+0x2d0>
   1512a:	2b61      	cmp	r3, #97	; 0x61
   1512c:	f47f af67 	bne.w	14ffe <d_exprlist+0x19e>
   15130:	215f      	movs	r1, #95	; 0x5f
   15132:	4620      	mov	r0, r4
   15134:	f7ff fe94 	bl	14e60 <d_exprlist>
   15138:	4682      	mov	sl, r0
   1513a:	4620      	mov	r0, r4
   1513c:	f000 fd12 	bl	15b64 <d_type>
   15140:	68e3      	ldr	r3, [r4, #12]
   15142:	781a      	ldrb	r2, [r3, #0]
   15144:	2a45      	cmp	r2, #69	; 0x45
   15146:	4683      	mov	fp, r0
   15148:	f000 80a1 	beq.w	1528e <d_exprlist+0x42e>
   1514c:	2a70      	cmp	r2, #112	; 0x70
   1514e:	f000 80a6 	beq.w	1529e <d_exprlist+0x43e>
   15152:	2a69      	cmp	r2, #105	; 0x69
   15154:	f47f af53 	bne.w	14ffe <d_exprlist+0x19e>
   15158:	785b      	ldrb	r3, [r3, #1]
   1515a:	2b6c      	cmp	r3, #108	; 0x6c
   1515c:	f47f af4f 	bne.w	14ffe <d_exprlist+0x19e>
   15160:	4620      	mov	r0, r4
   15162:	f000 f8db 	bl	1531c <d_expression_1>
   15166:	4603      	mov	r3, r0
   15168:	e01f      	b.n	151aa <d_exprlist+0x34a>
   1516a:	4620      	mov	r0, r4
   1516c:	f000 f8d6 	bl	1531c <d_expression_1>
   15170:	4682      	mov	sl, r0
   15172:	e780      	b.n	15076 <d_exprlist+0x216>
   15174:	4620      	mov	r0, r4
   15176:	f000 fcf5 	bl	15b64 <d_type>
   1517a:	e78d      	b.n	15098 <d_exprlist+0x238>
   1517c:	4628      	mov	r0, r5
   1517e:	6367      	str	r7, [r4, #52]	; 0x34
   15180:	b003      	add	sp, #12
   15182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15186:	2145      	movs	r1, #69	; 0x45
   15188:	4620      	mov	r0, r4
   1518a:	f7ff fe69 	bl	14e60 <d_exprlist>
   1518e:	4682      	mov	sl, r0
   15190:	e771      	b.n	15076 <d_exprlist+0x216>
   15192:	4620      	mov	r0, r4
   15194:	f000 f8c2 	bl	1531c <d_expression_1>
   15198:	4682      	mov	sl, r0
   1519a:	4620      	mov	r0, r4
   1519c:	f000 f8be 	bl	1531c <d_expression_1>
   151a0:	4683      	mov	fp, r0
   151a2:	4620      	mov	r0, r4
   151a4:	f000 f8ba 	bl	1531c <d_expression_1>
   151a8:	4603      	mov	r3, r0
   151aa:	465a      	mov	r2, fp
   151ac:	213b      	movs	r1, #59	; 0x3b
   151ae:	4620      	mov	r0, r4
   151b0:	f7ff fa48 	bl	14644 <d_make_comp>
   151b4:	4652      	mov	r2, sl
   151b6:	4603      	mov	r3, r0
   151b8:	213a      	movs	r1, #58	; 0x3a
   151ba:	4620      	mov	r0, r4
   151bc:	f7ff fa42 	bl	14644 <d_make_comp>
   151c0:	462a      	mov	r2, r5
   151c2:	4603      	mov	r3, r0
   151c4:	2139      	movs	r1, #57	; 0x39
   151c6:	4620      	mov	r0, r4
   151c8:	f7ff fa3c 	bl	14644 <d_make_comp>
   151cc:	4605      	mov	r5, r0
   151ce:	e6cd      	b.n	14f6c <d_exprlist+0x10c>
   151d0:	781b      	ldrb	r3, [r3, #0]
   151d2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   151d6:	2a01      	cmp	r2, #1
   151d8:	d903      	bls.n	151e2 <d_exprlist+0x382>
   151da:	3b72      	subs	r3, #114	; 0x72
   151dc:	2b01      	cmp	r3, #1
   151de:	f63f af25 	bhi.w	1502c <d_exprlist+0x1cc>
   151e2:	4620      	mov	r0, r4
   151e4:	f000 fcbe 	bl	15b64 <d_type>
   151e8:	4683      	mov	fp, r0
   151ea:	e728      	b.n	1503e <d_exprlist+0x1de>
   151ec:	4620      	mov	r0, r4
   151ee:	f000 faf3 	bl	157d8 <d_template_args>
   151f2:	465a      	mov	r2, fp
   151f4:	4603      	mov	r3, r0
   151f6:	2104      	movs	r1, #4
   151f8:	4620      	mov	r0, r4
   151fa:	f7ff fa23 	bl	14644 <d_make_comp>
   151fe:	4603      	mov	r3, r0
   15200:	e762      	b.n	150c8 <d_exprlist+0x268>
   15202:	3301      	adds	r3, #1
   15204:	60c3      	str	r3, [r0, #12]
   15206:	212e      	movs	r1, #46	; 0x2e
   15208:	4613      	mov	r3, r2
   1520a:	b003      	add	sp, #12
   1520c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15210:	f7ff ba18 	b.w	14644 <d_make_comp>
   15214:	4620      	mov	r0, r4
   15216:	f001 f88d 	bl	16334 <d_operator_name>
   1521a:	4683      	mov	fp, r0
   1521c:	e70f      	b.n	1503e <d_exprlist+0x1de>
   1521e:	f1ba 0f00 	cmp.w	sl, #0
   15222:	f43f af36 	beq.w	15092 <d_exprlist+0x232>
   15226:	f89a 3000 	ldrb.w	r3, [sl]
   1522a:	2b70      	cmp	r3, #112	; 0x70
   1522c:	d017      	beq.n	1525e <d_exprlist+0x3fe>
   1522e:	2b6d      	cmp	r3, #109	; 0x6d
   15230:	d015      	beq.n	1525e <d_exprlist+0x3fe>
   15232:	4650      	mov	r0, sl
   15234:	4937      	ldr	r1, [pc, #220]	; (15314 <d_exprlist+0x4b4>)
   15236:	f009 fcc7 	bl	1ebc8 <strcmp>
   1523a:	2800      	cmp	r0, #0
   1523c:	f47f af29 	bne.w	15092 <d_exprlist+0x232>
   15240:	4620      	mov	r0, r4
   15242:	f000 fa65 	bl	15710 <d_template_args_1>
   15246:	e727      	b.n	15098 <d_exprlist+0x238>
   15248:	4620      	mov	r0, r4
   1524a:	f000 fac5 	bl	157d8 <d_template_args>
   1524e:	4652      	mov	r2, sl
   15250:	4603      	mov	r3, r0
   15252:	2104      	movs	r1, #4
   15254:	4620      	mov	r0, r4
   15256:	f7ff f9f5 	bl	14644 <d_make_comp>
   1525a:	4682      	mov	sl, r0
   1525c:	e70b      	b.n	15076 <d_exprlist+0x216>
   1525e:	f89a 2001 	ldrb.w	r2, [sl, #1]
   15262:	429a      	cmp	r2, r3
   15264:	d1e5      	bne.n	15232 <d_exprlist+0x3d2>
   15266:	68e3      	ldr	r3, [r4, #12]
   15268:	781a      	ldrb	r2, [r3, #0]
   1526a:	2a5f      	cmp	r2, #95	; 0x5f
   1526c:	d023      	beq.n	152b6 <d_exprlist+0x456>
   1526e:	4650      	mov	r0, sl
   15270:	4928      	ldr	r1, [pc, #160]	; (15314 <d_exprlist+0x4b4>)
   15272:	f009 fca9 	bl	1ebc8 <strcmp>
   15276:	2800      	cmp	r0, #0
   15278:	d03f      	beq.n	152fa <d_exprlist+0x49a>
   1527a:	4620      	mov	r0, r4
   1527c:	f000 f84e 	bl	1531c <d_expression_1>
   15280:	4603      	mov	r3, r0
   15282:	461a      	mov	r2, r3
   15284:	2138      	movs	r1, #56	; 0x38
   15286:	4620      	mov	r0, r4
   15288:	f7ff f9dc 	bl	14644 <d_make_comp>
   1528c:	e704      	b.n	15098 <d_exprlist+0x238>
   1528e:	3301      	adds	r3, #1
   15290:	60e3      	str	r3, [r4, #12]
   15292:	2300      	movs	r3, #0
   15294:	e789      	b.n	151aa <d_exprlist+0x34a>
   15296:	4620      	mov	r0, r4
   15298:	f001 f84c 	bl	16334 <d_operator_name>
   1529c:	e77c      	b.n	15198 <d_exprlist+0x338>
   1529e:	785a      	ldrb	r2, [r3, #1]
   152a0:	2a69      	cmp	r2, #105	; 0x69
   152a2:	f47f aeac 	bne.w	14ffe <d_exprlist+0x19e>
   152a6:	3302      	adds	r3, #2
   152a8:	60e3      	str	r3, [r4, #12]
   152aa:	2145      	movs	r1, #69	; 0x45
   152ac:	4620      	mov	r0, r4
   152ae:	f7ff fdd7 	bl	14e60 <d_exprlist>
   152b2:	4603      	mov	r3, r0
   152b4:	e779      	b.n	151aa <d_exprlist+0x34a>
   152b6:	3301      	adds	r3, #1
   152b8:	60e3      	str	r3, [r4, #12]
   152ba:	e7ba      	b.n	15232 <d_exprlist+0x3d2>
   152bc:	2a6f      	cmp	r2, #111	; 0x6f
   152be:	d015      	beq.n	152ec <d_exprlist+0x48c>
   152c0:	2a69      	cmp	r2, #105	; 0x69
   152c2:	f47f ae8d 	bne.w	14fe0 <d_exprlist+0x180>
   152c6:	785a      	ldrb	r2, [r3, #1]
   152c8:	2a6c      	cmp	r2, #108	; 0x6c
   152ca:	f47f ae0e 	bne.w	14eea <d_exprlist+0x8a>
   152ce:	2500      	movs	r5, #0
   152d0:	3302      	adds	r3, #2
   152d2:	60e3      	str	r3, [r4, #12]
   152d4:	2145      	movs	r1, #69	; 0x45
   152d6:	4620      	mov	r0, r4
   152d8:	f7ff fdc2 	bl	14e60 <d_exprlist>
   152dc:	462a      	mov	r2, r5
   152de:	4603      	mov	r3, r0
   152e0:	2130      	movs	r1, #48	; 0x30
   152e2:	4620      	mov	r0, r4
   152e4:	f7ff f9ae 	bl	14644 <d_make_comp>
   152e8:	4605      	mov	r5, r0
   152ea:	e63f      	b.n	14f6c <d_exprlist+0x10c>
   152ec:	785a      	ldrb	r2, [r3, #1]
   152ee:	2a6e      	cmp	r2, #110	; 0x6e
   152f0:	f47f adfb 	bne.w	14eea <d_exprlist+0x8a>
   152f4:	3302      	adds	r3, #2
   152f6:	60e3      	str	r3, [r4, #12]
   152f8:	e5c9      	b.n	14e8e <d_exprlist+0x2e>
   152fa:	4620      	mov	r0, r4
   152fc:	f000 fa08 	bl	15710 <d_template_args_1>
   15300:	4603      	mov	r3, r0
   15302:	e7be      	b.n	15282 <d_exprlist+0x422>
   15304:	000245f8 	.word	0x000245f8
   15308:	000245fc 	.word	0x000245fc
   1530c:	00024600 	.word	0x00024600
   15310:	00024604 	.word	0x00024604
   15314:	000245f4 	.word	0x000245f4
   15318:	00024af8 	.word	0x00024af8

0001531c <d_expression_1>:
   1531c:	68c1      	ldr	r1, [r0, #12]
   1531e:	780b      	ldrb	r3, [r1, #0]
   15320:	2b4c      	cmp	r3, #76	; 0x4c
   15322:	f000 8087 	beq.w	15434 <d_expression_1+0x118>
   15326:	2b54      	cmp	r3, #84	; 0x54
   15328:	f000 8086 	beq.w	15438 <d_expression_1+0x11c>
   1532c:	2b73      	cmp	r3, #115	; 0x73
   1532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15332:	4604      	mov	r4, r0
   15334:	d037      	beq.n	153a6 <d_expression_1+0x8a>
   15336:	2b66      	cmp	r3, #102	; 0x66
   15338:	d012      	beq.n	15360 <d_expression_1+0x44>
   1533a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1533e:	2a09      	cmp	r2, #9
   15340:	f200 81b8 	bhi.w	156b4 <d_expression_1+0x398>
   15344:	4620      	mov	r0, r4
   15346:	f001 f8b5 	bl	164b4 <d_unqualified_name>
   1534a:	4605      	mov	r5, r0
   1534c:	2800      	cmp	r0, #0
   1534e:	d06d      	beq.n	1542c <d_expression_1+0x110>
   15350:	68e3      	ldr	r3, [r4, #12]
   15352:	781b      	ldrb	r3, [r3, #0]
   15354:	2b49      	cmp	r3, #73	; 0x49
   15356:	f000 8088 	beq.w	1546a <d_expression_1+0x14e>
   1535a:	4628      	mov	r0, r5
   1535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15360:	784b      	ldrb	r3, [r1, #1]
   15362:	2b70      	cmp	r3, #112	; 0x70
   15364:	d039      	beq.n	153da <d_expression_1+0xbe>
   15366:	4620      	mov	r0, r4
   15368:	f000 ffe4 	bl	16334 <d_operator_name>
   1536c:	4605      	mov	r5, r0
   1536e:	2800      	cmp	r0, #0
   15370:	d05c      	beq.n	1542c <d_expression_1+0x110>
   15372:	7803      	ldrb	r3, [r0, #0]
   15374:	2b31      	cmp	r3, #49	; 0x31
   15376:	d061      	beq.n	1543c <d_expression_1+0x120>
   15378:	2b32      	cmp	r3, #50	; 0x32
   1537a:	d025      	beq.n	153c8 <d_expression_1+0xac>
   1537c:	2b33      	cmp	r3, #51	; 0x33
   1537e:	d155      	bne.n	1542c <d_expression_1+0x110>
   15380:	68e3      	ldr	r3, [r4, #12]
   15382:	781a      	ldrb	r2, [r3, #0]
   15384:	2a5f      	cmp	r2, #95	; 0x5f
   15386:	f040 81b4 	bne.w	156f2 <d_expression_1+0x3d6>
   1538a:	3301      	adds	r3, #1
   1538c:	60e3      	str	r3, [r4, #12]
   1538e:	2145      	movs	r1, #69	; 0x45
   15390:	4620      	mov	r0, r4
   15392:	f7ff fd65 	bl	14e60 <d_exprlist>
   15396:	4603      	mov	r3, r0
   15398:	462a      	mov	r2, r5
   1539a:	4620      	mov	r0, r4
   1539c:	2136      	movs	r1, #54	; 0x36
   1539e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153a2:	f7ff b94f 	b.w	14644 <d_make_comp>
   153a6:	784b      	ldrb	r3, [r1, #1]
   153a8:	2b72      	cmp	r3, #114	; 0x72
   153aa:	d069      	beq.n	15480 <d_expression_1+0x164>
   153ac:	2b70      	cmp	r3, #112	; 0x70
   153ae:	d1da      	bne.n	15366 <d_expression_1+0x4a>
   153b0:	3102      	adds	r1, #2
   153b2:	60c1      	str	r1, [r0, #12]
   153b4:	f7ff ffb2 	bl	1531c <d_expression_1>
   153b8:	2300      	movs	r3, #0
   153ba:	4602      	mov	r2, r0
   153bc:	214a      	movs	r1, #74	; 0x4a
   153be:	4620      	mov	r0, r4
   153c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153c4:	f7ff b93e 	b.w	14644 <d_make_comp>
   153c8:	6843      	ldr	r3, [r0, #4]
   153ca:	2b03      	cmp	r3, #3
   153cc:	d82e      	bhi.n	1542c <d_expression_1+0x110>
   153ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   153d2:	0071      	.short	0x0071
   153d4:	002d0190 	.word	0x002d0190
   153d8:	002d      	.short	0x002d
   153da:	1c8b      	adds	r3, r1, #2
   153dc:	60c3      	str	r3, [r0, #12]
   153de:	788b      	ldrb	r3, [r1, #2]
   153e0:	2b54      	cmp	r3, #84	; 0x54
   153e2:	d063      	beq.n	154ac <d_expression_1+0x190>
   153e4:	f7ff fac2 	bl	1496c <d_compact_number>
   153e8:	43c3      	mvns	r3, r0
   153ea:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   153ee:	d01d      	beq.n	1542c <d_expression_1+0x110>
   153f0:	3001      	adds	r0, #1
   153f2:	6963      	ldr	r3, [r4, #20]
   153f4:	69a2      	ldr	r2, [r4, #24]
   153f6:	4293      	cmp	r3, r2
   153f8:	da18      	bge.n	1542c <d_expression_1+0x110>
   153fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   153fe:	6921      	ldr	r1, [r4, #16]
   15400:	0092      	lsls	r2, r2, #2
   15402:	3301      	adds	r3, #1
   15404:	188d      	adds	r5, r1, r2
   15406:	6163      	str	r3, [r4, #20]
   15408:	d0a7      	beq.n	1535a <d_expression_1+0x3e>
   1540a:	2306      	movs	r3, #6
   1540c:	548b      	strb	r3, [r1, r2]
   1540e:	6068      	str	r0, [r5, #4]
   15410:	e7a3      	b.n	1535a <d_expression_1+0x3e>
   15412:	2b74      	cmp	r3, #116	; 0x74
   15414:	d1a7      	bne.n	15366 <d_expression_1+0x4a>
   15416:	784b      	ldrb	r3, [r1, #1]
   15418:	2b6c      	cmp	r3, #108	; 0x6c
   1541a:	d1a4      	bne.n	15366 <d_expression_1+0x4a>
   1541c:	f000 fba2 	bl	15b64 <d_type>
   15420:	68e1      	ldr	r1, [r4, #12]
   15422:	784b      	ldrb	r3, [r1, #1]
   15424:	4605      	mov	r5, r0
   15426:	2b00      	cmp	r3, #0
   15428:	f040 814e 	bne.w	156c8 <d_expression_1+0x3ac>
   1542c:	2500      	movs	r5, #0
   1542e:	4628      	mov	r0, r5
   15430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15434:	f001 bc8c 	b.w	16d50 <d_expr_primary>
   15438:	f7ff bab4 	b.w	149a4 <d_template_param>
   1543c:	6847      	ldr	r7, [r0, #4]
   1543e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15440:	68ba      	ldr	r2, [r7, #8]
   15442:	683e      	ldr	r6, [r7, #0]
   15444:	49ac      	ldr	r1, [pc, #688]	; (156f8 <d_expression_1+0x3dc>)
   15446:	3a02      	subs	r2, #2
   15448:	4413      	add	r3, r2
   1544a:	6323      	str	r3, [r4, #48]	; 0x30
   1544c:	4630      	mov	r0, r6
   1544e:	f009 fbbb 	bl	1ebc8 <strcmp>
   15452:	2800      	cmp	r0, #0
   15454:	f000 80ab 	beq.w	155ae <d_expression_1+0x292>
   15458:	68ff      	ldr	r7, [r7, #12]
   1545a:	2f03      	cmp	r7, #3
   1545c:	d8e6      	bhi.n	1542c <d_expression_1+0x110>
   1545e:	e8df f017 	tbh	[pc, r7, lsl #1]
   15462:	0029      	.short	0x0029
   15464:	007100ff 	.word	0x007100ff
   15468:	0031      	.short	0x0031
   1546a:	4620      	mov	r0, r4
   1546c:	f000 f9b4 	bl	157d8 <d_template_args>
   15470:	462a      	mov	r2, r5
   15472:	4603      	mov	r3, r0
   15474:	2104      	movs	r1, #4
   15476:	4620      	mov	r0, r4
   15478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1547c:	f7ff b8e2 	b.w	14644 <d_make_comp>
   15480:	3102      	adds	r1, #2
   15482:	60c1      	str	r1, [r0, #12]
   15484:	f000 fb6e 	bl	15b64 <d_type>
   15488:	4605      	mov	r5, r0
   1548a:	4620      	mov	r0, r4
   1548c:	f001 f812 	bl	164b4 <d_unqualified_name>
   15490:	68e3      	ldr	r3, [r4, #12]
   15492:	781b      	ldrb	r3, [r3, #0]
   15494:	2b49      	cmp	r3, #73	; 0x49
   15496:	4606      	mov	r6, r0
   15498:	f000 80ae 	beq.w	155f8 <d_expression_1+0x2dc>
   1549c:	4603      	mov	r3, r0
   1549e:	462a      	mov	r2, r5
   154a0:	4620      	mov	r0, r4
   154a2:	2101      	movs	r1, #1
   154a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   154a8:	f7ff b8cc 	b.w	14644 <d_make_comp>
   154ac:	3103      	adds	r1, #3
   154ae:	60c1      	str	r1, [r0, #12]
   154b0:	2000      	movs	r0, #0
   154b2:	e79e      	b.n	153f2 <d_expression_1+0xd6>
   154b4:	462a      	mov	r2, r5
   154b6:	4620      	mov	r0, r4
   154b8:	2300      	movs	r3, #0
   154ba:	2135      	movs	r1, #53	; 0x35
   154bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   154c0:	f7ff b8c0 	b.w	14644 <d_make_comp>
   154c4:	2e00      	cmp	r6, #0
   154c6:	d0b1      	beq.n	1542c <d_expression_1+0x110>
   154c8:	498c      	ldr	r1, [pc, #560]	; (156fc <d_expression_1+0x3e0>)
   154ca:	4630      	mov	r0, r6
   154cc:	f009 fb7c 	bl	1ebc8 <strcmp>
   154d0:	2800      	cmp	r0, #0
   154d2:	d071      	beq.n	155b8 <d_expression_1+0x29c>
   154d4:	7833      	ldrb	r3, [r6, #0]
   154d6:	2b66      	cmp	r3, #102	; 0x66
   154d8:	f000 80b2 	beq.w	15640 <d_expression_1+0x324>
   154dc:	2b6e      	cmp	r3, #110	; 0x6e
   154de:	d1a5      	bne.n	1542c <d_expression_1+0x110>
   154e0:	7873      	ldrb	r3, [r6, #1]
   154e2:	2b77      	cmp	r3, #119	; 0x77
   154e4:	d001      	beq.n	154ea <d_expression_1+0x1ce>
   154e6:	2b61      	cmp	r3, #97	; 0x61
   154e8:	d1a0      	bne.n	1542c <d_expression_1+0x110>
   154ea:	215f      	movs	r1, #95	; 0x5f
   154ec:	4620      	mov	r0, r4
   154ee:	f7ff fcb7 	bl	14e60 <d_exprlist>
   154f2:	4606      	mov	r6, r0
   154f4:	4620      	mov	r0, r4
   154f6:	f000 fb35 	bl	15b64 <d_type>
   154fa:	68e3      	ldr	r3, [r4, #12]
   154fc:	781a      	ldrb	r2, [r3, #0]
   154fe:	2a45      	cmp	r2, #69	; 0x45
   15500:	4607      	mov	r7, r0
   15502:	f000 8099 	beq.w	15638 <d_expression_1+0x31c>
   15506:	2a70      	cmp	r2, #112	; 0x70
   15508:	f000 809e 	beq.w	15648 <d_expression_1+0x32c>
   1550c:	2a69      	cmp	r2, #105	; 0x69
   1550e:	d18d      	bne.n	1542c <d_expression_1+0x110>
   15510:	785b      	ldrb	r3, [r3, #1]
   15512:	2b6c      	cmp	r3, #108	; 0x6c
   15514:	d18a      	bne.n	1542c <d_expression_1+0x110>
   15516:	4620      	mov	r0, r4
   15518:	f7ff ff00 	bl	1531c <d_expression_1>
   1551c:	4603      	mov	r3, r0
   1551e:	463a      	mov	r2, r7
   15520:	213b      	movs	r1, #59	; 0x3b
   15522:	4620      	mov	r0, r4
   15524:	f7ff f88e 	bl	14644 <d_make_comp>
   15528:	4632      	mov	r2, r6
   1552a:	4603      	mov	r3, r0
   1552c:	213a      	movs	r1, #58	; 0x3a
   1552e:	4620      	mov	r0, r4
   15530:	f7ff f888 	bl	14644 <d_make_comp>
   15534:	462a      	mov	r2, r5
   15536:	4603      	mov	r3, r0
   15538:	2139      	movs	r1, #57	; 0x39
   1553a:	4620      	mov	r0, r4
   1553c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15540:	f7ff b880 	b.w	14644 <d_make_comp>
   15544:	2e00      	cmp	r6, #0
   15546:	f43f af71 	beq.w	1542c <d_expression_1+0x110>
   1554a:	686b      	ldr	r3, [r5, #4]
   1554c:	681b      	ldr	r3, [r3, #0]
   1554e:	785a      	ldrb	r2, [r3, #1]
   15550:	2a63      	cmp	r2, #99	; 0x63
   15552:	d044      	beq.n	155de <d_expression_1+0x2c2>
   15554:	7833      	ldrb	r3, [r6, #0]
   15556:	2b66      	cmp	r3, #102	; 0x66
   15558:	d059      	beq.n	1560e <d_expression_1+0x2f2>
   1555a:	4620      	mov	r0, r4
   1555c:	f7ff fede 	bl	1531c <d_expression_1>
   15560:	4607      	mov	r7, r0
   15562:	4967      	ldr	r1, [pc, #412]	; (15700 <d_expression_1+0x3e4>)
   15564:	4630      	mov	r0, r6
   15566:	f009 fb2f 	bl	1ebc8 <strcmp>
   1556a:	b390      	cbz	r0, 155d2 <d_expression_1+0x2b6>
   1556c:	4965      	ldr	r1, [pc, #404]	; (15704 <d_expression_1+0x3e8>)
   1556e:	4630      	mov	r0, r6
   15570:	f009 fb2a 	bl	1ebc8 <strcmp>
   15574:	b128      	cbz	r0, 15582 <d_expression_1+0x266>
   15576:	4630      	mov	r0, r6
   15578:	4963      	ldr	r1, [pc, #396]	; (15708 <d_expression_1+0x3ec>)
   1557a:	f009 fb25 	bl	1ebc8 <strcmp>
   1557e:	2800      	cmp	r0, #0
   15580:	d14a      	bne.n	15618 <d_expression_1+0x2fc>
   15582:	4620      	mov	r0, r4
   15584:	f000 ff96 	bl	164b4 <d_unqualified_name>
   15588:	68e3      	ldr	r3, [r4, #12]
   1558a:	781b      	ldrb	r3, [r3, #0]
   1558c:	2b49      	cmp	r3, #73	; 0x49
   1558e:	4606      	mov	r6, r0
   15590:	d047      	beq.n	15622 <d_expression_1+0x306>
   15592:	4633      	mov	r3, r6
   15594:	463a      	mov	r2, r7
   15596:	2138      	movs	r1, #56	; 0x38
   15598:	4620      	mov	r0, r4
   1559a:	f7ff f853 	bl	14644 <d_make_comp>
   1559e:	462a      	mov	r2, r5
   155a0:	4603      	mov	r3, r0
   155a2:	2137      	movs	r1, #55	; 0x37
   155a4:	4620      	mov	r0, r4
   155a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   155aa:	f7ff b84b 	b.w	14644 <d_make_comp>
   155ae:	4620      	mov	r0, r4
   155b0:	f000 fad8 	bl	15b64 <d_type>
   155b4:	4603      	mov	r3, r0
   155b6:	e6ef      	b.n	15398 <d_expression_1+0x7c>
   155b8:	4620      	mov	r0, r4
   155ba:	f7ff feaf 	bl	1531c <d_expression_1>
   155be:	4606      	mov	r6, r0
   155c0:	4620      	mov	r0, r4
   155c2:	f7ff feab 	bl	1531c <d_expression_1>
   155c6:	4607      	mov	r7, r0
   155c8:	4620      	mov	r0, r4
   155ca:	f7ff fea7 	bl	1531c <d_expression_1>
   155ce:	4603      	mov	r3, r0
   155d0:	e7a5      	b.n	1551e <d_expression_1+0x202>
   155d2:	2145      	movs	r1, #69	; 0x45
   155d4:	4620      	mov	r0, r4
   155d6:	f7ff fc43 	bl	14e60 <d_exprlist>
   155da:	4606      	mov	r6, r0
   155dc:	e7d9      	b.n	15592 <d_expression_1+0x276>
   155de:	781b      	ldrb	r3, [r3, #0]
   155e0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   155e4:	2a01      	cmp	r2, #1
   155e6:	d902      	bls.n	155ee <d_expression_1+0x2d2>
   155e8:	3b72      	subs	r3, #114	; 0x72
   155ea:	2b01      	cmp	r3, #1
   155ec:	d8b2      	bhi.n	15554 <d_expression_1+0x238>
   155ee:	4620      	mov	r0, r4
   155f0:	f000 fab8 	bl	15b64 <d_type>
   155f4:	4607      	mov	r7, r0
   155f6:	e7b4      	b.n	15562 <d_expression_1+0x246>
   155f8:	4620      	mov	r0, r4
   155fa:	f000 f8ed 	bl	157d8 <d_template_args>
   155fe:	4632      	mov	r2, r6
   15600:	4603      	mov	r3, r0
   15602:	2104      	movs	r1, #4
   15604:	4620      	mov	r0, r4
   15606:	f7ff f81d 	bl	14644 <d_make_comp>
   1560a:	4603      	mov	r3, r0
   1560c:	e747      	b.n	1549e <d_expression_1+0x182>
   1560e:	4620      	mov	r0, r4
   15610:	f000 fe90 	bl	16334 <d_operator_name>
   15614:	4607      	mov	r7, r0
   15616:	e7a4      	b.n	15562 <d_expression_1+0x246>
   15618:	4620      	mov	r0, r4
   1561a:	f7ff fe7f 	bl	1531c <d_expression_1>
   1561e:	4606      	mov	r6, r0
   15620:	e7b7      	b.n	15592 <d_expression_1+0x276>
   15622:	4620      	mov	r0, r4
   15624:	f000 f8d8 	bl	157d8 <d_template_args>
   15628:	4632      	mov	r2, r6
   1562a:	4603      	mov	r3, r0
   1562c:	2104      	movs	r1, #4
   1562e:	4620      	mov	r0, r4
   15630:	f7ff f808 	bl	14644 <d_make_comp>
   15634:	4606      	mov	r6, r0
   15636:	e7ac      	b.n	15592 <d_expression_1+0x276>
   15638:	3301      	adds	r3, #1
   1563a:	60e3      	str	r3, [r4, #12]
   1563c:	2300      	movs	r3, #0
   1563e:	e76e      	b.n	1551e <d_expression_1+0x202>
   15640:	4620      	mov	r0, r4
   15642:	f000 fe77 	bl	16334 <d_operator_name>
   15646:	e7ba      	b.n	155be <d_expression_1+0x2a2>
   15648:	785a      	ldrb	r2, [r3, #1]
   1564a:	2a69      	cmp	r2, #105	; 0x69
   1564c:	f47f aeee 	bne.w	1542c <d_expression_1+0x110>
   15650:	3302      	adds	r3, #2
   15652:	60e3      	str	r3, [r4, #12]
   15654:	2145      	movs	r1, #69	; 0x45
   15656:	4620      	mov	r0, r4
   15658:	f7ff fc02 	bl	14e60 <d_exprlist>
   1565c:	4603      	mov	r3, r0
   1565e:	e75e      	b.n	1551e <d_expression_1+0x202>
   15660:	2e00      	cmp	r6, #0
   15662:	d046      	beq.n	156f2 <d_expression_1+0x3d6>
   15664:	7833      	ldrb	r3, [r6, #0]
   15666:	2b70      	cmp	r3, #112	; 0x70
   15668:	d015      	beq.n	15696 <d_expression_1+0x37a>
   1566a:	2b6d      	cmp	r3, #109	; 0x6d
   1566c:	d013      	beq.n	15696 <d_expression_1+0x37a>
   1566e:	2700      	movs	r7, #0
   15670:	4630      	mov	r0, r6
   15672:	4926      	ldr	r1, [pc, #152]	; (1570c <d_expression_1+0x3f0>)
   15674:	f009 faa8 	bl	1ebc8 <strcmp>
   15678:	b1b8      	cbz	r0, 156aa <d_expression_1+0x38e>
   1567a:	4620      	mov	r0, r4
   1567c:	f7ff fe4e 	bl	1531c <d_expression_1>
   15680:	4603      	mov	r3, r0
   15682:	2f00      	cmp	r7, #0
   15684:	f43f ae88 	beq.w	15398 <d_expression_1+0x7c>
   15688:	461a      	mov	r2, r3
   1568a:	2138      	movs	r1, #56	; 0x38
   1568c:	4620      	mov	r0, r4
   1568e:	f7fe ffd9 	bl	14644 <d_make_comp>
   15692:	4603      	mov	r3, r0
   15694:	e680      	b.n	15398 <d_expression_1+0x7c>
   15696:	7872      	ldrb	r2, [r6, #1]
   15698:	429a      	cmp	r2, r3
   1569a:	d1e8      	bne.n	1566e <d_expression_1+0x352>
   1569c:	68e3      	ldr	r3, [r4, #12]
   1569e:	781a      	ldrb	r2, [r3, #0]
   156a0:	2a5f      	cmp	r2, #95	; 0x5f
   156a2:	d1e5      	bne.n	15670 <d_expression_1+0x354>
   156a4:	3301      	adds	r3, #1
   156a6:	60e3      	str	r3, [r4, #12]
   156a8:	e7e1      	b.n	1566e <d_expression_1+0x352>
   156aa:	4620      	mov	r0, r4
   156ac:	f000 f830 	bl	15710 <d_template_args_1>
   156b0:	4603      	mov	r3, r0
   156b2:	e7e6      	b.n	15682 <d_expression_1+0x366>
   156b4:	2b6f      	cmp	r3, #111	; 0x6f
   156b6:	d015      	beq.n	156e4 <d_expression_1+0x3c8>
   156b8:	2b69      	cmp	r3, #105	; 0x69
   156ba:	f47f aeaa 	bne.w	15412 <d_expression_1+0xf6>
   156be:	784b      	ldrb	r3, [r1, #1]
   156c0:	2b6c      	cmp	r3, #108	; 0x6c
   156c2:	f47f ae50 	bne.w	15366 <d_expression_1+0x4a>
   156c6:	2500      	movs	r5, #0
   156c8:	3102      	adds	r1, #2
   156ca:	60e1      	str	r1, [r4, #12]
   156cc:	4620      	mov	r0, r4
   156ce:	2145      	movs	r1, #69	; 0x45
   156d0:	f7ff fbc6 	bl	14e60 <d_exprlist>
   156d4:	462a      	mov	r2, r5
   156d6:	4603      	mov	r3, r0
   156d8:	2130      	movs	r1, #48	; 0x30
   156da:	4620      	mov	r0, r4
   156dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156e0:	f7fe bfb0 	b.w	14644 <d_make_comp>
   156e4:	784b      	ldrb	r3, [r1, #1]
   156e6:	2b6e      	cmp	r3, #110	; 0x6e
   156e8:	f47f ae3d 	bne.w	15366 <d_expression_1+0x4a>
   156ec:	3102      	adds	r1, #2
   156ee:	60c1      	str	r1, [r0, #12]
   156f0:	e628      	b.n	15344 <d_expression_1+0x28>
   156f2:	2700      	movs	r7, #0
   156f4:	e7c1      	b.n	1567a <d_expression_1+0x35e>
   156f6:	bf00      	nop
   156f8:	00024af8 	.word	0x00024af8
   156fc:	00024604 	.word	0x00024604
   15700:	000245f8 	.word	0x000245f8
   15704:	000245fc 	.word	0x000245fc
   15708:	00024600 	.word	0x00024600
   1570c:	000245f4 	.word	0x000245f4

00015710 <d_template_args_1>:
   15710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15714:	68c2      	ldr	r2, [r0, #12]
   15716:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   1571a:	7813      	ldrb	r3, [r2, #0]
   1571c:	2b45      	cmp	r3, #69	; 0x45
   1571e:	b083      	sub	sp, #12
   15720:	4604      	mov	r4, r0
   15722:	d04e      	beq.n	157c2 <d_template_args_1+0xb2>
   15724:	ae02      	add	r6, sp, #8
   15726:	2100      	movs	r1, #0
   15728:	f846 1d04 	str.w	r1, [r6, #-4]!
   1572c:	2701      	movs	r7, #1
   1572e:	3b49      	subs	r3, #73	; 0x49
   15730:	2b0f      	cmp	r3, #15
   15732:	d83e      	bhi.n	157b2 <d_template_args_1+0xa2>
   15734:	e8df f003 	tbb	[pc, r3]
   15738:	1b3d3838 	.word	0x1b3d3838
   1573c:	3d3d3d3d 	.word	0x3d3d3d3d
   15740:	3d3d3d3d 	.word	0x3d3d3d3d
   15744:	083d3d3d 	.word	0x083d3d3d
   15748:	3201      	adds	r2, #1
   1574a:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1574e:	60e2      	str	r2, [r4, #12]
   15750:	6367      	str	r7, [r4, #52]	; 0x34
   15752:	4620      	mov	r0, r4
   15754:	f7ff fde2 	bl	1531c <d_expression_1>
   15758:	68e3      	ldr	r3, [r4, #12]
   1575a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   1575e:	781a      	ldrb	r2, [r3, #0]
   15760:	2a45      	cmp	r2, #69	; 0x45
   15762:	4605      	mov	r5, r0
   15764:	d02a      	beq.n	157bc <d_template_args_1+0xac>
   15766:	2000      	movs	r0, #0
   15768:	b003      	add	sp, #12
   1576a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1576e:	4620      	mov	r0, r4
   15770:	f001 faee 	bl	16d50 <d_expr_primary>
   15774:	4605      	mov	r5, r0
   15776:	2300      	movs	r3, #0
   15778:	212f      	movs	r1, #47	; 0x2f
   1577a:	462a      	mov	r2, r5
   1577c:	4620      	mov	r0, r4
   1577e:	2d00      	cmp	r5, #0
   15780:	d0f1      	beq.n	15766 <d_template_args_1+0x56>
   15782:	f7fe ff5f 	bl	14644 <d_make_comp>
   15786:	6030      	str	r0, [r6, #0]
   15788:	f100 0608 	add.w	r6, r0, #8
   1578c:	2800      	cmp	r0, #0
   1578e:	d0ea      	beq.n	15766 <d_template_args_1+0x56>
   15790:	68e2      	ldr	r2, [r4, #12]
   15792:	7813      	ldrb	r3, [r2, #0]
   15794:	2b45      	cmp	r3, #69	; 0x45
   15796:	d1ca      	bne.n	1572e <d_template_args_1+0x1e>
   15798:	9801      	ldr	r0, [sp, #4]
   1579a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   1579e:	3201      	adds	r2, #1
   157a0:	60e2      	str	r2, [r4, #12]
   157a2:	b003      	add	sp, #12
   157a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   157a8:	4620      	mov	r0, r4
   157aa:	f000 f815 	bl	157d8 <d_template_args>
   157ae:	4605      	mov	r5, r0
   157b0:	e7e1      	b.n	15776 <d_template_args_1+0x66>
   157b2:	4620      	mov	r0, r4
   157b4:	f000 f9d6 	bl	15b64 <d_type>
   157b8:	4605      	mov	r5, r0
   157ba:	e7dc      	b.n	15776 <d_template_args_1+0x66>
   157bc:	3301      	adds	r3, #1
   157be:	60e3      	str	r3, [r4, #12]
   157c0:	e7d9      	b.n	15776 <d_template_args_1+0x66>
   157c2:	3201      	adds	r2, #1
   157c4:	2300      	movs	r3, #0
   157c6:	60c2      	str	r2, [r0, #12]
   157c8:	212f      	movs	r1, #47	; 0x2f
   157ca:	461a      	mov	r2, r3
   157cc:	b003      	add	sp, #12
   157ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   157d2:	f7fe bf37 	b.w	14644 <d_make_comp>
   157d6:	bf00      	nop

000157d8 <d_template_args>:
   157d8:	68c2      	ldr	r2, [r0, #12]
   157da:	7813      	ldrb	r3, [r2, #0]
   157dc:	3b49      	subs	r3, #73	; 0x49
   157de:	2b01      	cmp	r3, #1
   157e0:	d802      	bhi.n	157e8 <d_template_args+0x10>
   157e2:	3201      	adds	r2, #1
   157e4:	60c2      	str	r2, [r0, #12]
   157e6:	e793      	b.n	15710 <d_template_args_1>
   157e8:	2000      	movs	r0, #0
   157ea:	4770      	bx	lr

000157ec <d_name>:
   157ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   157f0:	68c2      	ldr	r2, [r0, #12]
   157f2:	7813      	ldrb	r3, [r2, #0]
   157f4:	3b4e      	subs	r3, #78	; 0x4e
   157f6:	b085      	sub	sp, #20
   157f8:	4605      	mov	r5, r0
   157fa:	2b0c      	cmp	r3, #12
   157fc:	d870      	bhi.n	158e0 <d_name+0xf4>
   157fe:	e8df f003 	tbb	[pc, r3]
   15802:	6f1e      	.short	0x6f1e
   15804:	5b6f6f6f 	.word	0x5b6f6f6f
   15808:	6f6f176f 	.word	0x6f6f176f
   1580c:	6f6f      	.short	0x6f6f
   1580e:	07          	.byte	0x07
   1580f:	00          	.byte	0x00
   15810:	3201      	adds	r2, #1
   15812:	2100      	movs	r1, #0
   15814:	60c2      	str	r2, [r0, #12]
   15816:	f000 ffbd 	bl	16794 <d_encoding>
   1581a:	68eb      	ldr	r3, [r5, #12]
   1581c:	7819      	ldrb	r1, [r3, #0]
   1581e:	2945      	cmp	r1, #69	; 0x45
   15820:	4606      	mov	r6, r0
   15822:	f000 8099 	beq.w	15958 <d_name+0x16c>
   15826:	2200      	movs	r2, #0
   15828:	4610      	mov	r0, r2
   1582a:	b005      	add	sp, #20
   1582c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15830:	f000 fe40 	bl	164b4 <d_unqualified_name>
   15834:	4602      	mov	r2, r0
   15836:	4610      	mov	r0, r2
   15838:	b005      	add	sp, #20
   1583a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1583e:	3201      	adds	r2, #1
   15840:	60c2      	str	r2, [r0, #12]
   15842:	a903      	add	r1, sp, #12
   15844:	2201      	movs	r2, #1
   15846:	f7fe ff49 	bl	146dc <d_cv_qualifiers>
   1584a:	4681      	mov	r9, r0
   1584c:	2800      	cmp	r0, #0
   1584e:	d0ea      	beq.n	15826 <d_name+0x3a>
   15850:	2100      	movs	r1, #0
   15852:	4628      	mov	r0, r5
   15854:	f7fe ffa8 	bl	147a8 <d_ref_qualifier>
   15858:	68ea      	ldr	r2, [r5, #12]
   1585a:	4eb4      	ldr	r6, [pc, #720]	; (15b2c <d_name+0x340>)
   1585c:	7814      	ldrb	r4, [r2, #0]
   1585e:	4680      	mov	r8, r0
   15860:	2700      	movs	r7, #0
   15862:	2c00      	cmp	r4, #0
   15864:	f000 80e8 	beq.w	15a38 <d_name+0x24c>
   15868:	2c44      	cmp	r4, #68	; 0x44
   1586a:	f000 80d1 	beq.w	15a10 <d_name+0x224>
   1586e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   15872:	b2db      	uxtb	r3, r3
   15874:	2b1c      	cmp	r3, #28
   15876:	f240 80a8 	bls.w	159ca <d_name+0x1de>
   1587a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1587e:	2b19      	cmp	r3, #25
   15880:	f240 80a8 	bls.w	159d4 <d_name+0x1e8>
   15884:	2c55      	cmp	r4, #85	; 0x55
   15886:	f000 80de 	beq.w	15a46 <d_name+0x25a>
   1588a:	2c53      	cmp	r4, #83	; 0x53
   1588c:	f000 80f1 	beq.w	15a72 <d_name+0x286>
   15890:	2c49      	cmp	r4, #73	; 0x49
   15892:	f000 80da 	beq.w	15a4a <d_name+0x25e>
   15896:	2c54      	cmp	r4, #84	; 0x54
   15898:	f000 811f 	beq.w	15ada <d_name+0x2ee>
   1589c:	2c45      	cmp	r4, #69	; 0x45
   1589e:	f000 814b 	beq.w	15b38 <d_name+0x34c>
   158a2:	2c4d      	cmp	r4, #77	; 0x4d
   158a4:	f040 80c8 	bne.w	15a38 <d_name+0x24c>
   158a8:	2f00      	cmp	r7, #0
   158aa:	f000 80c5 	beq.w	15a38 <d_name+0x24c>
   158ae:	1c53      	adds	r3, r2, #1
   158b0:	60eb      	str	r3, [r5, #12]
   158b2:	7854      	ldrb	r4, [r2, #1]
   158b4:	461a      	mov	r2, r3
   158b6:	e7d4      	b.n	15862 <d_name+0x76>
   158b8:	7853      	ldrb	r3, [r2, #1]
   158ba:	2b74      	cmp	r3, #116	; 0x74
   158bc:	d031      	beq.n	15922 <d_name+0x136>
   158be:	2100      	movs	r1, #0
   158c0:	f7ff f90a 	bl	14ad8 <d_substitution>
   158c4:	68eb      	ldr	r3, [r5, #12]
   158c6:	7819      	ldrb	r1, [r3, #0]
   158c8:	2949      	cmp	r1, #73	; 0x49
   158ca:	4602      	mov	r2, r0
   158cc:	d1b3      	bne.n	15836 <d_name+0x4a>
   158ce:	3301      	adds	r3, #1
   158d0:	60eb      	str	r3, [r5, #12]
   158d2:	4628      	mov	r0, r5
   158d4:	9201      	str	r2, [sp, #4]
   158d6:	f7ff ff1b 	bl	15710 <d_template_args_1>
   158da:	9a01      	ldr	r2, [sp, #4]
   158dc:	4603      	mov	r3, r0
   158de:	e017      	b.n	15910 <d_name+0x124>
   158e0:	f000 fde8 	bl	164b4 <d_unqualified_name>
   158e4:	68eb      	ldr	r3, [r5, #12]
   158e6:	7819      	ldrb	r1, [r3, #0]
   158e8:	2949      	cmp	r1, #73	; 0x49
   158ea:	4602      	mov	r2, r0
   158ec:	d1a3      	bne.n	15836 <d_name+0x4a>
   158ee:	2a00      	cmp	r2, #0
   158f0:	d099      	beq.n	15826 <d_name+0x3a>
   158f2:	6a29      	ldr	r1, [r5, #32]
   158f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   158f6:	4281      	cmp	r1, r0
   158f8:	da95      	bge.n	15826 <d_name+0x3a>
   158fa:	69ec      	ldr	r4, [r5, #28]
   158fc:	1c48      	adds	r0, r1, #1
   158fe:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   15902:	6228      	str	r0, [r5, #32]
   15904:	7819      	ldrb	r1, [r3, #0]
   15906:	3949      	subs	r1, #73	; 0x49
   15908:	2901      	cmp	r1, #1
   1590a:	bf88      	it	hi
   1590c:	2300      	movhi	r3, #0
   1590e:	d9de      	bls.n	158ce <d_name+0xe2>
   15910:	4628      	mov	r0, r5
   15912:	2104      	movs	r1, #4
   15914:	f7fe fe96 	bl	14644 <d_make_comp>
   15918:	4602      	mov	r2, r0
   1591a:	4610      	mov	r0, r2
   1591c:	b005      	add	sp, #20
   1591e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15922:	6943      	ldr	r3, [r0, #20]
   15924:	6981      	ldr	r1, [r0, #24]
   15926:	3202      	adds	r2, #2
   15928:	428b      	cmp	r3, r1
   1592a:	60c2      	str	r2, [r0, #12]
   1592c:	f2c0 80ab 	blt.w	15a86 <d_name+0x29a>
   15930:	2400      	movs	r4, #0
   15932:	4628      	mov	r0, r5
   15934:	f000 fdbe 	bl	164b4 <d_unqualified_name>
   15938:	4622      	mov	r2, r4
   1593a:	4603      	mov	r3, r0
   1593c:	2101      	movs	r1, #1
   1593e:	4628      	mov	r0, r5
   15940:	f7fe fe80 	bl	14644 <d_make_comp>
   15944:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15946:	68eb      	ldr	r3, [r5, #12]
   15948:	3103      	adds	r1, #3
   1594a:	6329      	str	r1, [r5, #48]	; 0x30
   1594c:	7819      	ldrb	r1, [r3, #0]
   1594e:	2949      	cmp	r1, #73	; 0x49
   15950:	4602      	mov	r2, r0
   15952:	f47f af70 	bne.w	15836 <d_name+0x4a>
   15956:	e7ca      	b.n	158ee <d_name+0x102>
   15958:	1c5a      	adds	r2, r3, #1
   1595a:	60ea      	str	r2, [r5, #12]
   1595c:	7859      	ldrb	r1, [r3, #1]
   1595e:	2973      	cmp	r1, #115	; 0x73
   15960:	f000 80a3 	beq.w	15aaa <d_name+0x2be>
   15964:	2964      	cmp	r1, #100	; 0x64
   15966:	f000 80bc 	beq.w	15ae2 <d_name+0x2f6>
   1596a:	4628      	mov	r0, r5
   1596c:	f7ff ff3e 	bl	157ec <d_name>
   15970:	4604      	mov	r4, r0
   15972:	2800      	cmp	r0, #0
   15974:	d072      	beq.n	15a5c <d_name+0x270>
   15976:	7803      	ldrb	r3, [r0, #0]
   15978:	2b45      	cmp	r3, #69	; 0x45
   1597a:	f000 8094 	beq.w	15aa6 <d_name+0x2ba>
   1597e:	2b47      	cmp	r3, #71	; 0x47
   15980:	f000 8091 	beq.w	15aa6 <d_name+0x2ba>
   15984:	68eb      	ldr	r3, [r5, #12]
   15986:	781a      	ldrb	r2, [r3, #0]
   15988:	2a5f      	cmp	r2, #95	; 0x5f
   1598a:	f040 808c 	bne.w	15aa6 <d_name+0x2ba>
   1598e:	f04f 37ff 	mov.w	r7, #4294967295
   15992:	4628      	mov	r0, r5
   15994:	3301      	adds	r3, #1
   15996:	f840 3f0c 	str.w	r3, [r0, #12]!
   1599a:	f7fe ffa5 	bl	148e8 <d_number.isra.0>
   1599e:	2800      	cmp	r0, #0
   159a0:	f6ff af41 	blt.w	15826 <d_name+0x3a>
   159a4:	1c7b      	adds	r3, r7, #1
   159a6:	d07e      	beq.n	15aa6 <d_name+0x2ba>
   159a8:	696b      	ldr	r3, [r5, #20]
   159aa:	69aa      	ldr	r2, [r5, #24]
   159ac:	4293      	cmp	r3, r2
   159ae:	da55      	bge.n	15a5c <d_name+0x270>
   159b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   159b4:	6929      	ldr	r1, [r5, #16]
   159b6:	3301      	adds	r3, #1
   159b8:	0092      	lsls	r2, r2, #2
   159ba:	616b      	str	r3, [r5, #20]
   159bc:	188b      	adds	r3, r1, r2
   159be:	d04e      	beq.n	15a5e <d_name+0x272>
   159c0:	2046      	movs	r0, #70	; 0x46
   159c2:	5488      	strb	r0, [r1, r2]
   159c4:	609f      	str	r7, [r3, #8]
   159c6:	605c      	str	r4, [r3, #4]
   159c8:	e049      	b.n	15a5e <d_name+0x272>
   159ca:	fa26 f303 	lsr.w	r3, r6, r3
   159ce:	07d9      	lsls	r1, r3, #31
   159d0:	f57f af53 	bpl.w	1587a <d_name+0x8e>
   159d4:	4628      	mov	r0, r5
   159d6:	f000 fd6d 	bl	164b4 <d_unqualified_name>
   159da:	b347      	cbz	r7, 15a2e <d_name+0x242>
   159dc:	2101      	movs	r1, #1
   159de:	4603      	mov	r3, r0
   159e0:	463a      	mov	r2, r7
   159e2:	4628      	mov	r0, r5
   159e4:	f7fe fe2e 	bl	14644 <d_make_comp>
   159e8:	4607      	mov	r7, r0
   159ea:	2c53      	cmp	r4, #83	; 0x53
   159ec:	d01c      	beq.n	15a28 <d_name+0x23c>
   159ee:	68ea      	ldr	r2, [r5, #12]
   159f0:	7814      	ldrb	r4, [r2, #0]
   159f2:	2c45      	cmp	r4, #69	; 0x45
   159f4:	f43f af3b 	beq.w	1586e <d_name+0x82>
   159f8:	b1f7      	cbz	r7, 15a38 <d_name+0x24c>
   159fa:	6a2b      	ldr	r3, [r5, #32]
   159fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   159fe:	428b      	cmp	r3, r1
   15a00:	da1a      	bge.n	15a38 <d_name+0x24c>
   15a02:	69e9      	ldr	r1, [r5, #28]
   15a04:	1c58      	adds	r0, r3, #1
   15a06:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   15a0a:	6228      	str	r0, [r5, #32]
   15a0c:	7814      	ldrb	r4, [r2, #0]
   15a0e:	e728      	b.n	15862 <d_name+0x76>
   15a10:	7853      	ldrb	r3, [r2, #1]
   15a12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15a16:	2b54      	cmp	r3, #84	; 0x54
   15a18:	4628      	mov	r0, r5
   15a1a:	d00a      	beq.n	15a32 <d_name+0x246>
   15a1c:	f000 fd4a 	bl	164b4 <d_unqualified_name>
   15a20:	2f00      	cmp	r7, #0
   15a22:	d1db      	bne.n	159dc <d_name+0x1f0>
   15a24:	4607      	mov	r7, r0
   15a26:	e7e2      	b.n	159ee <d_name+0x202>
   15a28:	68ea      	ldr	r2, [r5, #12]
   15a2a:	7814      	ldrb	r4, [r2, #0]
   15a2c:	e719      	b.n	15862 <d_name+0x76>
   15a2e:	4607      	mov	r7, r0
   15a30:	e7db      	b.n	159ea <d_name+0x1fe>
   15a32:	f000 f897 	bl	15b64 <d_type>
   15a36:	e7f3      	b.n	15a20 <d_name+0x234>
   15a38:	2200      	movs	r2, #0
   15a3a:	4610      	mov	r0, r2
   15a3c:	f8c9 2000 	str.w	r2, [r9]
   15a40:	b005      	add	sp, #20
   15a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a46:	4628      	mov	r0, r5
   15a48:	e7e8      	b.n	15a1c <d_name+0x230>
   15a4a:	2f00      	cmp	r7, #0
   15a4c:	d0f4      	beq.n	15a38 <d_name+0x24c>
   15a4e:	3201      	adds	r2, #1
   15a50:	60ea      	str	r2, [r5, #12]
   15a52:	4628      	mov	r0, r5
   15a54:	f7ff fe5c 	bl	15710 <d_template_args_1>
   15a58:	2104      	movs	r1, #4
   15a5a:	e7c0      	b.n	159de <d_name+0x1f2>
   15a5c:	2300      	movs	r3, #0
   15a5e:	4632      	mov	r2, r6
   15a60:	4628      	mov	r0, r5
   15a62:	2102      	movs	r1, #2
   15a64:	f7fe fdee 	bl	14644 <d_make_comp>
   15a68:	4602      	mov	r2, r0
   15a6a:	4610      	mov	r0, r2
   15a6c:	b005      	add	sp, #20
   15a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a72:	2101      	movs	r1, #1
   15a74:	4628      	mov	r0, r5
   15a76:	f7ff f82f 	bl	14ad8 <d_substitution>
   15a7a:	2f00      	cmp	r7, #0
   15a7c:	d1ae      	bne.n	159dc <d_name+0x1f0>
   15a7e:	68ea      	ldr	r2, [r5, #12]
   15a80:	4607      	mov	r7, r0
   15a82:	7814      	ldrb	r4, [r2, #0]
   15a84:	e6ed      	b.n	15862 <d_name+0x76>
   15a86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15a8a:	6901      	ldr	r1, [r0, #16]
   15a8c:	0092      	lsls	r2, r2, #2
   15a8e:	3301      	adds	r3, #1
   15a90:	188c      	adds	r4, r1, r2
   15a92:	6143      	str	r3, [r0, #20]
   15a94:	f43f af4d 	beq.w	15932 <d_name+0x146>
   15a98:	2300      	movs	r3, #0
   15a9a:	548b      	strb	r3, [r1, r2]
   15a9c:	4824      	ldr	r0, [pc, #144]	; (15b30 <d_name+0x344>)
   15a9e:	6060      	str	r0, [r4, #4]
   15aa0:	2303      	movs	r3, #3
   15aa2:	60a3      	str	r3, [r4, #8]
   15aa4:	e745      	b.n	15932 <d_name+0x146>
   15aa6:	4623      	mov	r3, r4
   15aa8:	e7d9      	b.n	15a5e <d_name+0x272>
   15aaa:	1c9a      	adds	r2, r3, #2
   15aac:	60ea      	str	r2, [r5, #12]
   15aae:	789a      	ldrb	r2, [r3, #2]
   15ab0:	2a5f      	cmp	r2, #95	; 0x5f
   15ab2:	d032      	beq.n	15b1a <d_name+0x32e>
   15ab4:	696b      	ldr	r3, [r5, #20]
   15ab6:	69aa      	ldr	r2, [r5, #24]
   15ab8:	4293      	cmp	r3, r2
   15aba:	dacf      	bge.n	15a5c <d_name+0x270>
   15abc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15ac0:	6929      	ldr	r1, [r5, #16]
   15ac2:	3301      	adds	r3, #1
   15ac4:	0092      	lsls	r2, r2, #2
   15ac6:	616b      	str	r3, [r5, #20]
   15ac8:	188b      	adds	r3, r1, r2
   15aca:	d0c8      	beq.n	15a5e <d_name+0x272>
   15acc:	2400      	movs	r4, #0
   15ace:	548c      	strb	r4, [r1, r2]
   15ad0:	4818      	ldr	r0, [pc, #96]	; (15b34 <d_name+0x348>)
   15ad2:	6058      	str	r0, [r3, #4]
   15ad4:	220e      	movs	r2, #14
   15ad6:	609a      	str	r2, [r3, #8]
   15ad8:	e7c1      	b.n	15a5e <d_name+0x272>
   15ada:	4628      	mov	r0, r5
   15adc:	f7fe ff62 	bl	149a4 <d_template_param>
   15ae0:	e79e      	b.n	15a20 <d_name+0x234>
   15ae2:	3302      	adds	r3, #2
   15ae4:	60eb      	str	r3, [r5, #12]
   15ae6:	4628      	mov	r0, r5
   15ae8:	f7fe ff40 	bl	1496c <d_compact_number>
   15aec:	1e07      	subs	r7, r0, #0
   15aee:	f6ff ae9a 	blt.w	15826 <d_name+0x3a>
   15af2:	4628      	mov	r0, r5
   15af4:	f7ff fe7a 	bl	157ec <d_name>
   15af8:	4604      	mov	r4, r0
   15afa:	2800      	cmp	r0, #0
   15afc:	f43f af54 	beq.w	159a8 <d_name+0x1bc>
   15b00:	7803      	ldrb	r3, [r0, #0]
   15b02:	2b45      	cmp	r3, #69	; 0x45
   15b04:	f43f af50 	beq.w	159a8 <d_name+0x1bc>
   15b08:	2b47      	cmp	r3, #71	; 0x47
   15b0a:	f43f af4d 	beq.w	159a8 <d_name+0x1bc>
   15b0e:	68eb      	ldr	r3, [r5, #12]
   15b10:	781a      	ldrb	r2, [r3, #0]
   15b12:	2a5f      	cmp	r2, #95	; 0x5f
   15b14:	f47f af48 	bne.w	159a8 <d_name+0x1bc>
   15b18:	e73b      	b.n	15992 <d_name+0x1a6>
   15b1a:	4628      	mov	r0, r5
   15b1c:	3303      	adds	r3, #3
   15b1e:	f840 3f0c 	str.w	r3, [r0, #12]!
   15b22:	f7fe fee1 	bl	148e8 <d_number.isra.0>
   15b26:	2800      	cmp	r0, #0
   15b28:	dac4      	bge.n	15ab4 <d_name+0x2c8>
   15b2a:	e67c      	b.n	15826 <d_name+0x3a>
   15b2c:	100803ff 	.word	0x100803ff
   15b30:	00024618 	.word	0x00024618
   15b34:	00024608 	.word	0x00024608
   15b38:	f8c9 7000 	str.w	r7, [r9]
   15b3c:	2f00      	cmp	r7, #0
   15b3e:	f43f ae72 	beq.w	15826 <d_name+0x3a>
   15b42:	f1b8 0f00 	cmp.w	r8, #0
   15b46:	d004      	beq.n	15b52 <d_name+0x366>
   15b48:	9b03      	ldr	r3, [sp, #12]
   15b4a:	f8c8 3004 	str.w	r3, [r8, #4]
   15b4e:	f8cd 800c 	str.w	r8, [sp, #12]
   15b52:	7813      	ldrb	r3, [r2, #0]
   15b54:	2b45      	cmp	r3, #69	; 0x45
   15b56:	f47f ae66 	bne.w	15826 <d_name+0x3a>
   15b5a:	3201      	adds	r2, #1
   15b5c:	60ea      	str	r2, [r5, #12]
   15b5e:	9a03      	ldr	r2, [sp, #12]
   15b60:	e669      	b.n	15836 <d_name+0x4a>
   15b62:	bf00      	nop

00015b64 <d_type>:
   15b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b68:	68c2      	ldr	r2, [r0, #12]
   15b6a:	7813      	ldrb	r3, [r2, #0]
   15b6c:	2b72      	cmp	r3, #114	; 0x72
   15b6e:	b083      	sub	sp, #12
   15b70:	4604      	mov	r4, r0
   15b72:	d058      	beq.n	15c26 <d_type+0xc2>
   15b74:	2b56      	cmp	r3, #86	; 0x56
   15b76:	d056      	beq.n	15c26 <d_type+0xc2>
   15b78:	2b4b      	cmp	r3, #75	; 0x4b
   15b7a:	d054      	beq.n	15c26 <d_type+0xc2>
   15b7c:	2b44      	cmp	r3, #68	; 0x44
   15b7e:	f000 809f 	beq.w	15cc0 <d_type+0x15c>
   15b82:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15b86:	294a      	cmp	r1, #74	; 0x4a
   15b88:	f200 808a 	bhi.w	15ca0 <d_type+0x13c>
   15b8c:	e8df f011 	tbh	[pc, r1, lsl #1]
   15b90:	012a012a 	.word	0x012a012a
   15b94:	012a012a 	.word	0x012a012a
   15b98:	012a012a 	.word	0x012a012a
   15b9c:	012a012a 	.word	0x012a012a
   15ba0:	012a012a 	.word	0x012a012a
   15ba4:	00880088 	.word	0x00880088
   15ba8:	00880088 	.word	0x00880088
   15bac:	00880088 	.word	0x00880088
   15bb0:	020b0088 	.word	0x020b0088
   15bb4:	01520088 	.word	0x01520088
   15bb8:	00880088 	.word	0x00880088
   15bbc:	0160014c 	.word	0x0160014c
   15bc0:	00880088 	.word	0x00880088
   15bc4:	00880088 	.word	0x00880088
   15bc8:	016e0088 	.word	0x016e0088
   15bcc:	0186012a 	.word	0x0186012a
   15bd0:	008801c3 	.word	0x008801c3
   15bd4:	01a20194 	.word	0x01a20194
   15bd8:	01f301d1 	.word	0x01f301d1
   15bdc:	00880088 	.word	0x00880088
   15be0:	00880088 	.word	0x00880088
   15be4:	0088012a 	.word	0x0088012a
   15be8:	00880088 	.word	0x00880088
   15bec:	00880088 	.word	0x00880088
   15bf0:	010c0088 	.word	0x010c0088
   15bf4:	010c010c 	.word	0x010c010c
   15bf8:	010c010c 	.word	0x010c010c
   15bfc:	010c010c 	.word	0x010c010c
   15c00:	010c010c 	.word	0x010c010c
   15c04:	0088010c 	.word	0x0088010c
   15c08:	010c010c 	.word	0x010c010c
   15c0c:	010c010c 	.word	0x010c010c
   15c10:	00880088 	.word	0x00880088
   15c14:	010c0088 	.word	0x010c0088
   15c18:	013e010c 	.word	0x013e010c
   15c1c:	010c010c 	.word	0x010c010c
   15c20:	010c010c 	.word	0x010c010c
   15c24:	010c      	.short	0x010c
   15c26:	2200      	movs	r2, #0
   15c28:	a901      	add	r1, sp, #4
   15c2a:	4620      	mov	r0, r4
   15c2c:	f7fe fd56 	bl	146dc <d_cv_qualifiers>
   15c30:	4605      	mov	r5, r0
   15c32:	2800      	cmp	r0, #0
   15c34:	d034      	beq.n	15ca0 <d_type+0x13c>
   15c36:	68e3      	ldr	r3, [r4, #12]
   15c38:	781b      	ldrb	r3, [r3, #0]
   15c3a:	2b46      	cmp	r3, #70	; 0x46
   15c3c:	4620      	mov	r0, r4
   15c3e:	d034      	beq.n	15caa <d_type+0x146>
   15c40:	f7ff ff90 	bl	15b64 <d_type>
   15c44:	6028      	str	r0, [r5, #0]
   15c46:	b358      	cbz	r0, 15ca0 <d_type+0x13c>
   15c48:	7803      	ldrb	r3, [r0, #0]
   15c4a:	3b1f      	subs	r3, #31
   15c4c:	2b01      	cmp	r3, #1
   15c4e:	d930      	bls.n	15cb2 <d_type+0x14e>
   15c50:	9a01      	ldr	r2, [sp, #4]
   15c52:	b32a      	cbz	r2, 15ca0 <d_type+0x13c>
   15c54:	6a23      	ldr	r3, [r4, #32]
   15c56:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15c58:	428b      	cmp	r3, r1
   15c5a:	da21      	bge.n	15ca0 <d_type+0x13c>
   15c5c:	69e0      	ldr	r0, [r4, #28]
   15c5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15c62:	9d01      	ldr	r5, [sp, #4]
   15c64:	1c59      	adds	r1, r3, #1
   15c66:	4628      	mov	r0, r5
   15c68:	6221      	str	r1, [r4, #32]
   15c6a:	b003      	add	sp, #12
   15c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15c70:	2301      	movs	r3, #1
   15c72:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15c74:	6343      	str	r3, [r0, #52]	; 0x34
   15c76:	f7ff fb51 	bl	1531c <d_expression_1>
   15c7a:	6365      	str	r5, [r4, #52]	; 0x34
   15c7c:	4602      	mov	r2, r0
   15c7e:	2300      	movs	r3, #0
   15c80:	2142      	movs	r1, #66	; 0x42
   15c82:	4620      	mov	r0, r4
   15c84:	f7fe fcde 	bl	14644 <d_make_comp>
   15c88:	4605      	mov	r5, r0
   15c8a:	9001      	str	r0, [sp, #4]
   15c8c:	b140      	cbz	r0, 15ca0 <d_type+0x13c>
   15c8e:	68e3      	ldr	r3, [r4, #12]
   15c90:	781a      	ldrb	r2, [r3, #0]
   15c92:	b12a      	cbz	r2, 15ca0 <d_type+0x13c>
   15c94:	1c5a      	adds	r2, r3, #1
   15c96:	60e2      	str	r2, [r4, #12]
   15c98:	781b      	ldrb	r3, [r3, #0]
   15c9a:	2b45      	cmp	r3, #69	; 0x45
   15c9c:	f000 80aa 	beq.w	15df4 <d_type+0x290>
   15ca0:	2500      	movs	r5, #0
   15ca2:	4628      	mov	r0, r5
   15ca4:	b003      	add	sp, #12
   15ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15caa:	f000 fd53 	bl	16754 <d_function_type>
   15cae:	6028      	str	r0, [r5, #0]
   15cb0:	e7c9      	b.n	15c46 <d_type+0xe2>
   15cb2:	9a01      	ldr	r2, [sp, #4]
   15cb4:	6843      	ldr	r3, [r0, #4]
   15cb6:	6042      	str	r2, [r0, #4]
   15cb8:	682a      	ldr	r2, [r5, #0]
   15cba:	9201      	str	r2, [sp, #4]
   15cbc:	602b      	str	r3, [r5, #0]
   15cbe:	e7c7      	b.n	15c50 <d_type+0xec>
   15cc0:	7853      	ldrb	r3, [r2, #1]
   15cc2:	2b78      	cmp	r3, #120	; 0x78
   15cc4:	d0af      	beq.n	15c26 <d_type+0xc2>
   15cc6:	1c53      	adds	r3, r2, #1
   15cc8:	60c3      	str	r3, [r0, #12]
   15cca:	7853      	ldrb	r3, [r2, #1]
   15ccc:	2b00      	cmp	r3, #0
   15cce:	d0e7      	beq.n	15ca0 <d_type+0x13c>
   15cd0:	1c93      	adds	r3, r2, #2
   15cd2:	60c3      	str	r3, [r0, #12]
   15cd4:	7853      	ldrb	r3, [r2, #1]
   15cd6:	3b46      	subs	r3, #70	; 0x46
   15cd8:	2b30      	cmp	r3, #48	; 0x30
   15cda:	d8e1      	bhi.n	15ca0 <d_type+0x13c>
   15cdc:	a101      	add	r1, pc, #4	; (adr r1, 15ce4 <d_type+0x180>)
   15cde:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15ce2:	bf00      	nop
   15ce4:	000161cf 	.word	0x000161cf
   15ce8:	00015ca1 	.word	0x00015ca1
   15cec:	00015ca1 	.word	0x00015ca1
   15cf0:	00015ca1 	.word	0x00015ca1
   15cf4:	00015ca1 	.word	0x00015ca1
   15cf8:	00015ca1 	.word	0x00015ca1
   15cfc:	00015ca1 	.word	0x00015ca1
   15d00:	00015ca1 	.word	0x00015ca1
   15d04:	00015ca1 	.word	0x00015ca1
   15d08:	00015ca1 	.word	0x00015ca1
   15d0c:	00015ca1 	.word	0x00015ca1
   15d10:	00015ca1 	.word	0x00015ca1
   15d14:	00015ca1 	.word	0x00015ca1
   15d18:	00015ca1 	.word	0x00015ca1
   15d1c:	00015c71 	.word	0x00015c71
   15d20:	00015ca1 	.word	0x00015ca1
   15d24:	00015ca1 	.word	0x00015ca1
   15d28:	00015ca1 	.word	0x00015ca1
   15d2c:	00015ca1 	.word	0x00015ca1
   15d30:	00015ca1 	.word	0x00015ca1
   15d34:	00015ca1 	.word	0x00015ca1
   15d38:	00015ca1 	.word	0x00015ca1
   15d3c:	00015ca1 	.word	0x00015ca1
   15d40:	00015ca1 	.word	0x00015ca1
   15d44:	00015ca1 	.word	0x00015ca1
   15d48:	00015ca1 	.word	0x00015ca1
   15d4c:	00015ca1 	.word	0x00015ca1
   15d50:	000161a3 	.word	0x000161a3
   15d54:	00015ca1 	.word	0x00015ca1
   15d58:	00016177 	.word	0x00016177
   15d5c:	00016157 	.word	0x00016157
   15d60:	0001612d 	.word	0x0001612d
   15d64:	000160ff 	.word	0x000160ff
   15d68:	00015ca1 	.word	0x00015ca1
   15d6c:	000160d1 	.word	0x000160d1
   15d70:	000160ad 	.word	0x000160ad
   15d74:	00015ca1 	.word	0x00015ca1
   15d78:	00015ca1 	.word	0x00015ca1
   15d7c:	00015ca1 	.word	0x00015ca1
   15d80:	00015ca1 	.word	0x00015ca1
   15d84:	00016073 	.word	0x00016073
   15d88:	00015ca1 	.word	0x00015ca1
   15d8c:	0001605d 	.word	0x0001605d
   15d90:	00015ca1 	.word	0x00015ca1
   15d94:	00015ca1 	.word	0x00015ca1
   15d98:	0001602f 	.word	0x0001602f
   15d9c:	00015c71 	.word	0x00015c71
   15da0:	00015ca1 	.word	0x00015ca1
   15da4:	00015ff9 	.word	0x00015ff9
   15da8:	6960      	ldr	r0, [r4, #20]
   15daa:	69a5      	ldr	r5, [r4, #24]
   15dac:	49bc      	ldr	r1, [pc, #752]	; (160a0 <d_type+0x53c>)
   15dae:	3b61      	subs	r3, #97	; 0x61
   15db0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15db4:	42a8      	cmp	r0, r5
   15db6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15dba:	f280 823a 	bge.w	16232 <d_type+0x6ce>
   15dbe:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15dc2:	6926      	ldr	r6, [r4, #16]
   15dc4:	0089      	lsls	r1, r1, #2
   15dc6:	3001      	adds	r0, #1
   15dc8:	1875      	adds	r5, r6, r1
   15dca:	6160      	str	r0, [r4, #20]
   15dcc:	f000 8231 	beq.w	16232 <d_type+0x6ce>
   15dd0:	2027      	movs	r0, #39	; 0x27
   15dd2:	5470      	strb	r0, [r6, r1]
   15dd4:	606b      	str	r3, [r5, #4]
   15dd6:	6859      	ldr	r1, [r3, #4]
   15dd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15dda:	3201      	adds	r2, #1
   15ddc:	440b      	add	r3, r1
   15dde:	60e2      	str	r2, [r4, #12]
   15de0:	6323      	str	r3, [r4, #48]	; 0x30
   15de2:	e75e      	b.n	15ca2 <d_type+0x13e>
   15de4:	4620      	mov	r0, r4
   15de6:	f7ff fd01 	bl	157ec <d_name>
   15dea:	4605      	mov	r5, r0
   15dec:	9001      	str	r0, [sp, #4]
   15dee:	2d00      	cmp	r5, #0
   15df0:	f43f af56 	beq.w	15ca0 <d_type+0x13c>
   15df4:	6a23      	ldr	r3, [r4, #32]
   15df6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15df8:	4293      	cmp	r3, r2
   15dfa:	f6bf af51 	bge.w	15ca0 <d_type+0x13c>
   15dfe:	69e1      	ldr	r1, [r4, #28]
   15e00:	1c5a      	adds	r2, r3, #1
   15e02:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15e06:	9d01      	ldr	r5, [sp, #4]
   15e08:	6222      	str	r2, [r4, #32]
   15e0a:	e74a      	b.n	15ca2 <d_type+0x13e>
   15e0c:	3201      	adds	r2, #1
   15e0e:	60e2      	str	r2, [r4, #12]
   15e10:	4620      	mov	r0, r4
   15e12:	f7fe fde9 	bl	149e8 <d_source_name>
   15e16:	2300      	movs	r3, #0
   15e18:	4602      	mov	r2, r0
   15e1a:	2128      	movs	r1, #40	; 0x28
   15e1c:	4620      	mov	r0, r4
   15e1e:	f7fe fc11 	bl	14644 <d_make_comp>
   15e22:	4605      	mov	r5, r0
   15e24:	9001      	str	r0, [sp, #4]
   15e26:	e7e2      	b.n	15dee <d_type+0x28a>
   15e28:	4620      	mov	r0, r4
   15e2a:	f000 fc93 	bl	16754 <d_function_type>
   15e2e:	4605      	mov	r5, r0
   15e30:	9001      	str	r0, [sp, #4]
   15e32:	e7dc      	b.n	15dee <d_type+0x28a>
   15e34:	3201      	adds	r2, #1
   15e36:	60e2      	str	r2, [r4, #12]
   15e38:	4620      	mov	r0, r4
   15e3a:	f7ff fe93 	bl	15b64 <d_type>
   15e3e:	2300      	movs	r3, #0
   15e40:	4602      	mov	r2, r0
   15e42:	2125      	movs	r1, #37	; 0x25
   15e44:	4620      	mov	r0, r4
   15e46:	f7fe fbfd 	bl	14644 <d_make_comp>
   15e4a:	4605      	mov	r5, r0
   15e4c:	9001      	str	r0, [sp, #4]
   15e4e:	e7ce      	b.n	15dee <d_type+0x28a>
   15e50:	3201      	adds	r2, #1
   15e52:	60e2      	str	r2, [r4, #12]
   15e54:	4620      	mov	r0, r4
   15e56:	f7ff fe85 	bl	15b64 <d_type>
   15e5a:	2300      	movs	r3, #0
   15e5c:	4602      	mov	r2, r0
   15e5e:	2126      	movs	r1, #38	; 0x26
   15e60:	4620      	mov	r0, r4
   15e62:	f7fe fbef 	bl	14644 <d_make_comp>
   15e66:	4605      	mov	r5, r0
   15e68:	9001      	str	r0, [sp, #4]
   15e6a:	e7c0      	b.n	15dee <d_type+0x28a>
   15e6c:	3201      	adds	r2, #1
   15e6e:	60e2      	str	r2, [r4, #12]
   15e70:	4620      	mov	r0, r4
   15e72:	f7ff fe77 	bl	15b64 <d_type>
   15e76:	4605      	mov	r5, r0
   15e78:	2800      	cmp	r0, #0
   15e7a:	f000 80bb 	beq.w	15ff4 <d_type+0x490>
   15e7e:	4620      	mov	r0, r4
   15e80:	f7ff fe70 	bl	15b64 <d_type>
   15e84:	2800      	cmp	r0, #0
   15e86:	f000 80b5 	beq.w	15ff4 <d_type+0x490>
   15e8a:	4603      	mov	r3, r0
   15e8c:	462a      	mov	r2, r5
   15e8e:	212b      	movs	r1, #43	; 0x2b
   15e90:	4620      	mov	r0, r4
   15e92:	f7fe fbd7 	bl	14644 <d_make_comp>
   15e96:	4605      	mov	r5, r0
   15e98:	9501      	str	r5, [sp, #4]
   15e9a:	e7a8      	b.n	15dee <d_type+0x28a>
   15e9c:	3201      	adds	r2, #1
   15e9e:	60e2      	str	r2, [r4, #12]
   15ea0:	4620      	mov	r0, r4
   15ea2:	f7ff fe5f 	bl	15b64 <d_type>
   15ea6:	2300      	movs	r3, #0
   15ea8:	4602      	mov	r2, r0
   15eaa:	2124      	movs	r1, #36	; 0x24
   15eac:	4620      	mov	r0, r4
   15eae:	f7fe fbc9 	bl	14644 <d_make_comp>
   15eb2:	4605      	mov	r5, r0
   15eb4:	9001      	str	r0, [sp, #4]
   15eb6:	e79a      	b.n	15dee <d_type+0x28a>
   15eb8:	3201      	adds	r2, #1
   15eba:	60e2      	str	r2, [r4, #12]
   15ebc:	4620      	mov	r0, r4
   15ebe:	f7ff fe51 	bl	15b64 <d_type>
   15ec2:	2300      	movs	r3, #0
   15ec4:	4602      	mov	r2, r0
   15ec6:	2123      	movs	r1, #35	; 0x23
   15ec8:	4620      	mov	r0, r4
   15eca:	f7fe fbbb 	bl	14644 <d_make_comp>
   15ece:	4605      	mov	r5, r0
   15ed0:	9001      	str	r0, [sp, #4]
   15ed2:	e78c      	b.n	15dee <d_type+0x28a>
   15ed4:	7853      	ldrb	r3, [r2, #1]
   15ed6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15eda:	2a09      	cmp	r2, #9
   15edc:	d905      	bls.n	15eea <d_type+0x386>
   15ede:	2b5f      	cmp	r3, #95	; 0x5f
   15ee0:	d003      	beq.n	15eea <d_type+0x386>
   15ee2:	3b41      	subs	r3, #65	; 0x41
   15ee4:	2b19      	cmp	r3, #25
   15ee6:	f200 81c3 	bhi.w	16270 <d_type+0x70c>
   15eea:	2100      	movs	r1, #0
   15eec:	4620      	mov	r0, r4
   15eee:	f7fe fdf3 	bl	14ad8 <d_substitution>
   15ef2:	68e3      	ldr	r3, [r4, #12]
   15ef4:	9001      	str	r0, [sp, #4]
   15ef6:	781b      	ldrb	r3, [r3, #0]
   15ef8:	2b49      	cmp	r3, #73	; 0x49
   15efa:	4605      	mov	r5, r0
   15efc:	f47f aed1 	bne.w	15ca2 <d_type+0x13e>
   15f00:	4620      	mov	r0, r4
   15f02:	f7ff fc69 	bl	157d8 <d_template_args>
   15f06:	462a      	mov	r2, r5
   15f08:	4603      	mov	r3, r0
   15f0a:	2104      	movs	r1, #4
   15f0c:	4620      	mov	r0, r4
   15f0e:	f7fe fb99 	bl	14644 <d_make_comp>
   15f12:	4605      	mov	r5, r0
   15f14:	e7c0      	b.n	15e98 <d_type+0x334>
   15f16:	3201      	adds	r2, #1
   15f18:	60e2      	str	r2, [r4, #12]
   15f1a:	4620      	mov	r0, r4
   15f1c:	f7ff fe22 	bl	15b64 <d_type>
   15f20:	2300      	movs	r3, #0
   15f22:	4602      	mov	r2, r0
   15f24:	2122      	movs	r1, #34	; 0x22
   15f26:	4620      	mov	r0, r4
   15f28:	f7fe fb8c 	bl	14644 <d_make_comp>
   15f2c:	4605      	mov	r5, r0
   15f2e:	9001      	str	r0, [sp, #4]
   15f30:	e75d      	b.n	15dee <d_type+0x28a>
   15f32:	4620      	mov	r0, r4
   15f34:	f7fe fd36 	bl	149a4 <d_template_param>
   15f38:	68e6      	ldr	r6, [r4, #12]
   15f3a:	9001      	str	r0, [sp, #4]
   15f3c:	7833      	ldrb	r3, [r6, #0]
   15f3e:	2b49      	cmp	r3, #73	; 0x49
   15f40:	4605      	mov	r5, r0
   15f42:	f47f af54 	bne.w	15dee <d_type+0x28a>
   15f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15f48:	2b00      	cmp	r3, #0
   15f4a:	f040 81a9 	bne.w	162a0 <d_type+0x73c>
   15f4e:	2800      	cmp	r0, #0
   15f50:	f43f aea6 	beq.w	15ca0 <d_type+0x13c>
   15f54:	6a23      	ldr	r3, [r4, #32]
   15f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15f58:	4293      	cmp	r3, r2
   15f5a:	f6bf aea1 	bge.w	15ca0 <d_type+0x13c>
   15f5e:	69e1      	ldr	r1, [r4, #28]
   15f60:	1c5a      	adds	r2, r3, #1
   15f62:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15f66:	6222      	str	r2, [r4, #32]
   15f68:	4620      	mov	r0, r4
   15f6a:	9d01      	ldr	r5, [sp, #4]
   15f6c:	f7ff fc34 	bl	157d8 <d_template_args>
   15f70:	462a      	mov	r2, r5
   15f72:	4603      	mov	r3, r0
   15f74:	e7c9      	b.n	15f0a <d_type+0x3a6>
   15f76:	3201      	adds	r2, #1
   15f78:	60e2      	str	r2, [r4, #12]
   15f7a:	4620      	mov	r0, r4
   15f7c:	f7fe fd34 	bl	149e8 <d_source_name>
   15f80:	68e3      	ldr	r3, [r4, #12]
   15f82:	9001      	str	r0, [sp, #4]
   15f84:	781b      	ldrb	r3, [r3, #0]
   15f86:	2b49      	cmp	r3, #73	; 0x49
   15f88:	4605      	mov	r5, r0
   15f8a:	f000 817e 	beq.w	1628a <d_type+0x726>
   15f8e:	4620      	mov	r0, r4
   15f90:	f7ff fde8 	bl	15b64 <d_type>
   15f94:	9b01      	ldr	r3, [sp, #4]
   15f96:	4602      	mov	r2, r0
   15f98:	2121      	movs	r1, #33	; 0x21
   15f9a:	4620      	mov	r0, r4
   15f9c:	f7fe fb52 	bl	14644 <d_make_comp>
   15fa0:	4605      	mov	r5, r0
   15fa2:	9001      	str	r0, [sp, #4]
   15fa4:	e723      	b.n	15dee <d_type+0x28a>
   15fa6:	1c51      	adds	r1, r2, #1
   15fa8:	60e1      	str	r1, [r4, #12]
   15faa:	7853      	ldrb	r3, [r2, #1]
   15fac:	2b5f      	cmp	r3, #95	; 0x5f
   15fae:	f000 8144 	beq.w	1623a <d_type+0x6d6>
   15fb2:	3b30      	subs	r3, #48	; 0x30
   15fb4:	2b09      	cmp	r3, #9
   15fb6:	f200 814e 	bhi.w	16256 <d_type+0x6f2>
   15fba:	460b      	mov	r3, r1
   15fbc:	3301      	adds	r3, #1
   15fbe:	60e3      	str	r3, [r4, #12]
   15fc0:	781a      	ldrb	r2, [r3, #0]
   15fc2:	3a30      	subs	r2, #48	; 0x30
   15fc4:	2a09      	cmp	r2, #9
   15fc6:	d9f9      	bls.n	15fbc <d_type+0x458>
   15fc8:	6962      	ldr	r2, [r4, #20]
   15fca:	69a0      	ldr	r0, [r4, #24]
   15fcc:	4282      	cmp	r2, r0
   15fce:	da11      	bge.n	15ff4 <d_type+0x490>
   15fd0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15fd4:	6926      	ldr	r6, [r4, #16]
   15fd6:	0080      	lsls	r0, r0, #2
   15fd8:	3201      	adds	r2, #1
   15fda:	1835      	adds	r5, r6, r0
   15fdc:	6162      	str	r2, [r4, #20]
   15fde:	d009      	beq.n	15ff4 <d_type+0x490>
   15fe0:	1a5a      	subs	r2, r3, r1
   15fe2:	d007      	beq.n	15ff4 <d_type+0x490>
   15fe4:	2700      	movs	r7, #0
   15fe6:	5437      	strb	r7, [r6, r0]
   15fe8:	6069      	str	r1, [r5, #4]
   15fea:	60aa      	str	r2, [r5, #8]
   15fec:	781a      	ldrb	r2, [r3, #0]
   15fee:	2a5f      	cmp	r2, #95	; 0x5f
   15ff0:	f000 8190 	beq.w	16314 <d_type+0x7b0>
   15ff4:	2500      	movs	r5, #0
   15ff6:	e74f      	b.n	15e98 <d_type+0x334>
   15ff8:	7893      	ldrb	r3, [r2, #2]
   15ffa:	2b5f      	cmp	r3, #95	; 0x5f
   15ffc:	f000 8180 	beq.w	16300 <d_type+0x79c>
   16000:	f7fe fc9c 	bl	1493c <d_number_component>
   16004:	4605      	mov	r5, r0
   16006:	2d00      	cmp	r5, #0
   16008:	f43f af46 	beq.w	15e98 <d_type+0x334>
   1600c:	68e3      	ldr	r3, [r4, #12]
   1600e:	781a      	ldrb	r2, [r3, #0]
   16010:	2a5f      	cmp	r2, #95	; 0x5f
   16012:	d1ef      	bne.n	15ff4 <d_type+0x490>
   16014:	3301      	adds	r3, #1
   16016:	60e3      	str	r3, [r4, #12]
   16018:	4620      	mov	r0, r4
   1601a:	f7ff fda3 	bl	15b64 <d_type>
   1601e:	462a      	mov	r2, r5
   16020:	4603      	mov	r3, r0
   16022:	212d      	movs	r1, #45	; 0x2d
   16024:	4620      	mov	r0, r4
   16026:	f7fe fb0d 	bl	14644 <d_make_comp>
   1602a:	4605      	mov	r5, r0
   1602c:	e734      	b.n	15e98 <d_type+0x334>
   1602e:	6942      	ldr	r2, [r0, #20]
   16030:	6983      	ldr	r3, [r0, #24]
   16032:	429a      	cmp	r2, r3
   16034:	f280 80fd 	bge.w	16232 <d_type+0x6ce>
   16038:	230c      	movs	r3, #12
   1603a:	6901      	ldr	r1, [r0, #16]
   1603c:	fb03 f302 	mul.w	r3, r3, r2
   16040:	18cd      	adds	r5, r1, r3
   16042:	f102 0201 	add.w	r2, r2, #1
   16046:	6142      	str	r2, [r0, #20]
   16048:	f000 80f3 	beq.w	16232 <d_type+0x6ce>
   1604c:	4a15      	ldr	r2, [pc, #84]	; (160a4 <d_type+0x540>)
   1604e:	2027      	movs	r0, #39	; 0x27
   16050:	54c8      	strb	r0, [r1, r3]
   16052:	606a      	str	r2, [r5, #4]
   16054:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16056:	3308      	adds	r3, #8
   16058:	6323      	str	r3, [r4, #48]	; 0x30
   1605a:	e622      	b.n	15ca2 <d_type+0x13e>
   1605c:	f7ff fd82 	bl	15b64 <d_type>
   16060:	2300      	movs	r3, #0
   16062:	4602      	mov	r2, r0
   16064:	214a      	movs	r1, #74	; 0x4a
   16066:	4620      	mov	r0, r4
   16068:	f7fe faec 	bl	14644 <d_make_comp>
   1606c:	4605      	mov	r5, r0
   1606e:	9001      	str	r0, [sp, #4]
   16070:	e6bd      	b.n	15dee <d_type+0x28a>
   16072:	6942      	ldr	r2, [r0, #20]
   16074:	6983      	ldr	r3, [r0, #24]
   16076:	429a      	cmp	r2, r3
   16078:	f280 80db 	bge.w	16232 <d_type+0x6ce>
   1607c:	230c      	movs	r3, #12
   1607e:	6901      	ldr	r1, [r0, #16]
   16080:	fb03 f302 	mul.w	r3, r3, r2
   16084:	18cd      	adds	r5, r1, r3
   16086:	f102 0201 	add.w	r2, r2, #1
   1608a:	6142      	str	r2, [r0, #20]
   1608c:	f000 80d1 	beq.w	16232 <d_type+0x6ce>
   16090:	2027      	movs	r0, #39	; 0x27
   16092:	4a05      	ldr	r2, [pc, #20]	; (160a8 <d_type+0x544>)
   16094:	54c8      	strb	r0, [r1, r3]
   16096:	606a      	str	r2, [r5, #4]
   16098:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1609a:	3311      	adds	r3, #17
   1609c:	6323      	str	r3, [r4, #48]	; 0x30
   1609e:	e600      	b.n	15ca2 <d_type+0x13e>
   160a0:	00023ef8 	.word	0x00023ef8
   160a4:	00024150 	.word	0x00024150
   160a8:	00024178 	.word	0x00024178
   160ac:	6942      	ldr	r2, [r0, #20]
   160ae:	6983      	ldr	r3, [r0, #24]
   160b0:	429a      	cmp	r2, r3
   160b2:	f280 80be 	bge.w	16232 <d_type+0x6ce>
   160b6:	230c      	movs	r3, #12
   160b8:	6901      	ldr	r1, [r0, #16]
   160ba:	fb03 f302 	mul.w	r3, r3, r2
   160be:	18cd      	adds	r5, r1, r3
   160c0:	f102 0201 	add.w	r2, r2, #1
   160c4:	6142      	str	r2, [r0, #20]
   160c6:	f000 80b4 	beq.w	16232 <d_type+0x6ce>
   160ca:	2027      	movs	r0, #39	; 0x27
   160cc:	4a92      	ldr	r2, [pc, #584]	; (16318 <d_type+0x7b4>)
   160ce:	e7bf      	b.n	16050 <d_type+0x4ec>
   160d0:	6942      	ldr	r2, [r0, #20]
   160d2:	6983      	ldr	r3, [r0, #24]
   160d4:	429a      	cmp	r2, r3
   160d6:	f280 80ac 	bge.w	16232 <d_type+0x6ce>
   160da:	230c      	movs	r3, #12
   160dc:	6901      	ldr	r1, [r0, #16]
   160de:	fb03 f302 	mul.w	r3, r3, r2
   160e2:	18cd      	adds	r5, r1, r3
   160e4:	f102 0201 	add.w	r2, r2, #1
   160e8:	6142      	str	r2, [r0, #20]
   160ea:	f000 80a2 	beq.w	16232 <d_type+0x6ce>
   160ee:	2027      	movs	r0, #39	; 0x27
   160f0:	4a8a      	ldr	r2, [pc, #552]	; (1631c <d_type+0x7b8>)
   160f2:	54c8      	strb	r0, [r1, r3]
   160f4:	606a      	str	r2, [r5, #4]
   160f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   160f8:	3304      	adds	r3, #4
   160fa:	6323      	str	r3, [r4, #48]	; 0x30
   160fc:	e5d1      	b.n	15ca2 <d_type+0x13e>
   160fe:	6942      	ldr	r2, [r0, #20]
   16100:	6983      	ldr	r3, [r0, #24]
   16102:	429a      	cmp	r2, r3
   16104:	f280 8095 	bge.w	16232 <d_type+0x6ce>
   16108:	230c      	movs	r3, #12
   1610a:	6901      	ldr	r1, [r0, #16]
   1610c:	fb03 f302 	mul.w	r3, r3, r2
   16110:	18cd      	adds	r5, r1, r3
   16112:	f102 0201 	add.w	r2, r2, #1
   16116:	6142      	str	r2, [r0, #20]
   16118:	f000 808b 	beq.w	16232 <d_type+0x6ce>
   1611c:	4a80      	ldr	r2, [pc, #512]	; (16320 <d_type+0x7bc>)
   1611e:	2027      	movs	r0, #39	; 0x27
   16120:	54c8      	strb	r0, [r1, r3]
   16122:	606a      	str	r2, [r5, #4]
   16124:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16126:	3309      	adds	r3, #9
   16128:	6323      	str	r3, [r4, #48]	; 0x30
   1612a:	e5ba      	b.n	15ca2 <d_type+0x13e>
   1612c:	6942      	ldr	r2, [r0, #20]
   1612e:	6983      	ldr	r3, [r0, #24]
   16130:	429a      	cmp	r2, r3
   16132:	da7e      	bge.n	16232 <d_type+0x6ce>
   16134:	230c      	movs	r3, #12
   16136:	6901      	ldr	r1, [r0, #16]
   16138:	fb03 f302 	mul.w	r3, r3, r2
   1613c:	18cd      	adds	r5, r1, r3
   1613e:	f102 0201 	add.w	r2, r2, #1
   16142:	6142      	str	r2, [r0, #20]
   16144:	d075      	beq.n	16232 <d_type+0x6ce>
   16146:	2027      	movs	r0, #39	; 0x27
   16148:	4a76      	ldr	r2, [pc, #472]	; (16324 <d_type+0x7c0>)
   1614a:	54c8      	strb	r0, [r1, r3]
   1614c:	606a      	str	r2, [r5, #4]
   1614e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16150:	330a      	adds	r3, #10
   16152:	6323      	str	r3, [r4, #48]	; 0x30
   16154:	e5a5      	b.n	15ca2 <d_type+0x13e>
   16156:	6942      	ldr	r2, [r0, #20]
   16158:	6983      	ldr	r3, [r0, #24]
   1615a:	429a      	cmp	r2, r3
   1615c:	da69      	bge.n	16232 <d_type+0x6ce>
   1615e:	230c      	movs	r3, #12
   16160:	6901      	ldr	r1, [r0, #16]
   16162:	fb03 f302 	mul.w	r3, r3, r2
   16166:	18cd      	adds	r5, r1, r3
   16168:	f102 0201 	add.w	r2, r2, #1
   1616c:	6142      	str	r2, [r0, #20]
   1616e:	d060      	beq.n	16232 <d_type+0x6ce>
   16170:	2027      	movs	r0, #39	; 0x27
   16172:	4a6d      	ldr	r2, [pc, #436]	; (16328 <d_type+0x7c4>)
   16174:	e7d4      	b.n	16120 <d_type+0x5bc>
   16176:	6942      	ldr	r2, [r0, #20]
   16178:	6983      	ldr	r3, [r0, #24]
   1617a:	429a      	cmp	r2, r3
   1617c:	f6bf ad90 	bge.w	15ca0 <d_type+0x13c>
   16180:	230c      	movs	r3, #12
   16182:	6901      	ldr	r1, [r0, #16]
   16184:	fb03 f302 	mul.w	r3, r3, r2
   16188:	18cd      	adds	r5, r1, r3
   1618a:	f102 0201 	add.w	r2, r2, #1
   1618e:	6142      	str	r2, [r0, #20]
   16190:	f43f ad87 	beq.w	15ca2 <d_type+0x13e>
   16194:	2000      	movs	r0, #0
   16196:	54c8      	strb	r0, [r1, r3]
   16198:	4a64      	ldr	r2, [pc, #400]	; (1632c <d_type+0x7c8>)
   1619a:	606a      	str	r2, [r5, #4]
   1619c:	230e      	movs	r3, #14
   1619e:	60ab      	str	r3, [r5, #8]
   161a0:	e57f      	b.n	15ca2 <d_type+0x13e>
   161a2:	6942      	ldr	r2, [r0, #20]
   161a4:	6983      	ldr	r3, [r0, #24]
   161a6:	429a      	cmp	r2, r3
   161a8:	f6bf ad7a 	bge.w	15ca0 <d_type+0x13c>
   161ac:	230c      	movs	r3, #12
   161ae:	6901      	ldr	r1, [r0, #16]
   161b0:	fb03 f302 	mul.w	r3, r3, r2
   161b4:	18cd      	adds	r5, r1, r3
   161b6:	f102 0201 	add.w	r2, r2, #1
   161ba:	6142      	str	r2, [r0, #20]
   161bc:	f43f ad71 	beq.w	15ca2 <d_type+0x13e>
   161c0:	2000      	movs	r0, #0
   161c2:	54c8      	strb	r0, [r1, r3]
   161c4:	4a5a      	ldr	r2, [pc, #360]	; (16330 <d_type+0x7cc>)
   161c6:	606a      	str	r2, [r5, #4]
   161c8:	2304      	movs	r3, #4
   161ca:	60ab      	str	r3, [r5, #8]
   161cc:	e569      	b.n	15ca2 <d_type+0x13e>
   161ce:	6943      	ldr	r3, [r0, #20]
   161d0:	6981      	ldr	r1, [r0, #24]
   161d2:	428b      	cmp	r3, r1
   161d4:	da7a      	bge.n	162cc <d_type+0x768>
   161d6:	6900      	ldr	r0, [r0, #16]
   161d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   161dc:	0089      	lsls	r1, r1, #2
   161de:	3301      	adds	r3, #1
   161e0:	1845      	adds	r5, r0, r1
   161e2:	262c      	movs	r6, #44	; 0x2c
   161e4:	6163      	str	r3, [r4, #20]
   161e6:	9501      	str	r5, [sp, #4]
   161e8:	5446      	strb	r6, [r0, r1]
   161ea:	7893      	ldrb	r3, [r2, #2]
   161ec:	3b30      	subs	r3, #48	; 0x30
   161ee:	b2db      	uxtb	r3, r3
   161f0:	2b09      	cmp	r3, #9
   161f2:	bf94      	ite	ls
   161f4:	2301      	movls	r3, #1
   161f6:	2300      	movhi	r3, #0
   161f8:	812b      	strh	r3, [r5, #8]
   161fa:	d97b      	bls.n	162f4 <d_type+0x790>
   161fc:	4620      	mov	r0, r4
   161fe:	f7ff fcb1 	bl	15b64 <d_type>
   16202:	9b01      	ldr	r3, [sp, #4]
   16204:	6068      	str	r0, [r5, #4]
   16206:	685b      	ldr	r3, [r3, #4]
   16208:	2b00      	cmp	r3, #0
   1620a:	f43f ad49 	beq.w	15ca0 <d_type+0x13c>
   1620e:	f104 000c 	add.w	r0, r4, #12
   16212:	f7fe fb69 	bl	148e8 <d_number.isra.0>
   16216:	68e2      	ldr	r2, [r4, #12]
   16218:	7813      	ldrb	r3, [r2, #0]
   1621a:	b113      	cbz	r3, 16222 <d_type+0x6be>
   1621c:	1c53      	adds	r3, r2, #1
   1621e:	60e3      	str	r3, [r4, #12]
   16220:	7813      	ldrb	r3, [r2, #0]
   16222:	9d01      	ldr	r5, [sp, #4]
   16224:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16228:	fab3 f383 	clz	r3, r3
   1622c:	095b      	lsrs	r3, r3, #5
   1622e:	816b      	strh	r3, [r5, #10]
   16230:	e537      	b.n	15ca2 <d_type+0x13e>
   16232:	2300      	movs	r3, #0
   16234:	9301      	str	r3, [sp, #4]
   16236:	685b      	ldr	r3, [r3, #4]
   16238:	deff      	udf	#255	; 0xff
   1623a:	2500      	movs	r5, #0
   1623c:	3101      	adds	r1, #1
   1623e:	60e1      	str	r1, [r4, #12]
   16240:	4620      	mov	r0, r4
   16242:	f7ff fc8f 	bl	15b64 <d_type>
   16246:	462a      	mov	r2, r5
   16248:	4603      	mov	r3, r0
   1624a:	212a      	movs	r1, #42	; 0x2a
   1624c:	4620      	mov	r0, r4
   1624e:	f7fe f9f9 	bl	14644 <d_make_comp>
   16252:	4605      	mov	r5, r0
   16254:	e620      	b.n	15e98 <d_type+0x334>
   16256:	2301      	movs	r3, #1
   16258:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1625a:	6363      	str	r3, [r4, #52]	; 0x34
   1625c:	4620      	mov	r0, r4
   1625e:	f7ff f85d 	bl	1531c <d_expression_1>
   16262:	6365      	str	r5, [r4, #52]	; 0x34
   16264:	4605      	mov	r5, r0
   16266:	2800      	cmp	r0, #0
   16268:	f43f aec4 	beq.w	15ff4 <d_type+0x490>
   1626c:	68e3      	ldr	r3, [r4, #12]
   1626e:	e6bd      	b.n	15fec <d_type+0x488>
   16270:	4620      	mov	r0, r4
   16272:	f7ff fabb 	bl	157ec <d_name>
   16276:	4605      	mov	r5, r0
   16278:	9001      	str	r0, [sp, #4]
   1627a:	2800      	cmp	r0, #0
   1627c:	f43f ad10 	beq.w	15ca0 <d_type+0x13c>
   16280:	7803      	ldrb	r3, [r0, #0]
   16282:	2b18      	cmp	r3, #24
   16284:	f47f adb6 	bne.w	15df4 <d_type+0x290>
   16288:	e50b      	b.n	15ca2 <d_type+0x13e>
   1628a:	4620      	mov	r0, r4
   1628c:	f7ff faa4 	bl	157d8 <d_template_args>
   16290:	462a      	mov	r2, r5
   16292:	4603      	mov	r3, r0
   16294:	2104      	movs	r1, #4
   16296:	4620      	mov	r0, r4
   16298:	f7fe f9d4 	bl	14644 <d_make_comp>
   1629c:	9001      	str	r0, [sp, #4]
   1629e:	e676      	b.n	15f8e <d_type+0x42a>
   162a0:	4620      	mov	r0, r4
   162a2:	f8d4 9014 	ldr.w	r9, [r4, #20]
   162a6:	f8d4 8020 	ldr.w	r8, [r4, #32]
   162aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   162ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
   162ae:	f7ff fa93 	bl	157d8 <d_template_args>
   162b2:	68e2      	ldr	r2, [r4, #12]
   162b4:	7812      	ldrb	r2, [r2, #0]
   162b6:	2a49      	cmp	r2, #73	; 0x49
   162b8:	d00b      	beq.n	162d2 <d_type+0x76e>
   162ba:	6325      	str	r5, [r4, #48]	; 0x30
   162bc:	60e6      	str	r6, [r4, #12]
   162be:	f8c4 9014 	str.w	r9, [r4, #20]
   162c2:	f8c4 8020 	str.w	r8, [r4, #32]
   162c6:	62a7      	str	r7, [r4, #40]	; 0x28
   162c8:	9d01      	ldr	r5, [sp, #4]
   162ca:	e590      	b.n	15dee <d_type+0x28a>
   162cc:	2300      	movs	r3, #0
   162ce:	701b      	strb	r3, [r3, #0]
   162d0:	deff      	udf	#255	; 0xff
   162d2:	9b01      	ldr	r3, [sp, #4]
   162d4:	2b00      	cmp	r3, #0
   162d6:	f43f ace3 	beq.w	15ca0 <d_type+0x13c>
   162da:	6a22      	ldr	r2, [r4, #32]
   162dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   162de:	428a      	cmp	r2, r1
   162e0:	f6bf acde 	bge.w	15ca0 <d_type+0x13c>
   162e4:	69e5      	ldr	r5, [r4, #28]
   162e6:	1c51      	adds	r1, r2, #1
   162e8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   162ec:	9a01      	ldr	r2, [sp, #4]
   162ee:	6221      	str	r1, [r4, #32]
   162f0:	4603      	mov	r3, r0
   162f2:	e60a      	b.n	15f0a <d_type+0x3a6>
   162f4:	f104 000c 	add.w	r0, r4, #12
   162f8:	f7fe faf6 	bl	148e8 <d_number.isra.0>
   162fc:	9d01      	ldr	r5, [sp, #4]
   162fe:	e77d      	b.n	161fc <d_type+0x698>
   16300:	3203      	adds	r2, #3
   16302:	2301      	movs	r3, #1
   16304:	6b46      	ldr	r6, [r0, #52]	; 0x34
   16306:	60c2      	str	r2, [r0, #12]
   16308:	6343      	str	r3, [r0, #52]	; 0x34
   1630a:	f7ff f807 	bl	1531c <d_expression_1>
   1630e:	6366      	str	r6, [r4, #52]	; 0x34
   16310:	4605      	mov	r5, r0
   16312:	e678      	b.n	16006 <d_type+0x4a2>
   16314:	4619      	mov	r1, r3
   16316:	e791      	b.n	1623c <d_type+0x6d8>
   16318:	00024164 	.word	0x00024164
   1631c:	0002413c 	.word	0x0002413c
   16320:	00024100 	.word	0x00024100
   16324:	00024128 	.word	0x00024128
   16328:	00024114 	.word	0x00024114
   1632c:	00024624 	.word	0x00024624
   16330:	0002461c 	.word	0x0002461c

00016334 <d_operator_name>:
   16334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16336:	68c3      	ldr	r3, [r0, #12]
   16338:	781e      	ldrb	r6, [r3, #0]
   1633a:	4684      	mov	ip, r0
   1633c:	b326      	cbz	r6, 16388 <d_operator_name+0x54>
   1633e:	1c5a      	adds	r2, r3, #1
   16340:	60c2      	str	r2, [r0, #12]
   16342:	785a      	ldrb	r2, [r3, #1]
   16344:	781e      	ldrb	r6, [r3, #0]
   16346:	2a00      	cmp	r2, #0
   16348:	d058      	beq.n	163fc <d_operator_name+0xc8>
   1634a:	1c9a      	adds	r2, r3, #2
   1634c:	60c2      	str	r2, [r0, #12]
   1634e:	2e76      	cmp	r6, #118	; 0x76
   16350:	4604      	mov	r4, r0
   16352:	f893 e001 	ldrb.w	lr, [r3, #1]
   16356:	d043      	beq.n	163e0 <d_operator_name+0xac>
   16358:	2e63      	cmp	r6, #99	; 0x63
   1635a:	d116      	bne.n	1638a <d_operator_name+0x56>
   1635c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   16360:	d113      	bne.n	1638a <d_operator_name+0x56>
   16362:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16364:	6b85      	ldr	r5, [r0, #56]	; 0x38
   16366:	fab3 f383 	clz	r3, r3
   1636a:	095b      	lsrs	r3, r3, #5
   1636c:	6383      	str	r3, [r0, #56]	; 0x38
   1636e:	f7ff fbf9 	bl	15b64 <d_type>
   16372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16374:	4602      	mov	r2, r0
   16376:	2b00      	cmp	r3, #0
   16378:	d052      	beq.n	16420 <d_operator_name+0xec>
   1637a:	2300      	movs	r3, #0
   1637c:	2134      	movs	r1, #52	; 0x34
   1637e:	4620      	mov	r0, r4
   16380:	f7fe f960 	bl	14644 <d_make_comp>
   16384:	63a5      	str	r5, [r4, #56]	; 0x38
   16386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16388:	46b6      	mov	lr, r6
   1638a:	4c28      	ldr	r4, [pc, #160]	; (1642c <d_operator_name+0xf8>)
   1638c:	2043      	movs	r0, #67	; 0x43
   1638e:	2200      	movs	r2, #0
   16390:	e004      	b.n	1639c <d_operator_name+0x68>
   16392:	bf94      	ite	ls
   16394:	1c5a      	addls	r2, r3, #1
   16396:	4618      	movhi	r0, r3
   16398:	4282      	cmp	r2, r0
   1639a:	d02d      	beq.n	163f8 <d_operator_name+0xc4>
   1639c:	1a83      	subs	r3, r0, r2
   1639e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   163a2:	eb02 0363 	add.w	r3, r2, r3, asr #1
   163a6:	0119      	lsls	r1, r3, #4
   163a8:	1867      	adds	r7, r4, r1
   163aa:	5861      	ldr	r1, [r4, r1]
   163ac:	780d      	ldrb	r5, [r1, #0]
   163ae:	42b5      	cmp	r5, r6
   163b0:	d1ef      	bne.n	16392 <d_operator_name+0x5e>
   163b2:	7849      	ldrb	r1, [r1, #1]
   163b4:	4571      	cmp	r1, lr
   163b6:	d1ec      	bne.n	16392 <d_operator_name+0x5e>
   163b8:	f8dc 3014 	ldr.w	r3, [ip, #20]
   163bc:	f8dc 2018 	ldr.w	r2, [ip, #24]
   163c0:	4293      	cmp	r3, r2
   163c2:	da19      	bge.n	163f8 <d_operator_name+0xc4>
   163c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   163c8:	f8dc 1010 	ldr.w	r1, [ip, #16]
   163cc:	0092      	lsls	r2, r2, #2
   163ce:	3301      	adds	r3, #1
   163d0:	1888      	adds	r0, r1, r2
   163d2:	f8cc 3014 	str.w	r3, [ip, #20]
   163d6:	d013      	beq.n	16400 <d_operator_name+0xcc>
   163d8:	2331      	movs	r3, #49	; 0x31
   163da:	548b      	strb	r3, [r1, r2]
   163dc:	6047      	str	r7, [r0, #4]
   163de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163e0:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   163e4:	b2eb      	uxtb	r3, r5
   163e6:	2b09      	cmp	r3, #9
   163e8:	d8cf      	bhi.n	1638a <d_operator_name+0x56>
   163ea:	f7fe fafd 	bl	149e8 <d_source_name>
   163ee:	6963      	ldr	r3, [r4, #20]
   163f0:	69a2      	ldr	r2, [r4, #24]
   163f2:	4293      	cmp	r3, r2
   163f4:	4601      	mov	r1, r0
   163f6:	db04      	blt.n	16402 <d_operator_name+0xce>
   163f8:	2000      	movs	r0, #0
   163fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163fc:	4696      	mov	lr, r2
   163fe:	e7c4      	b.n	1638a <d_operator_name+0x56>
   16400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16402:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16406:	6926      	ldr	r6, [r4, #16]
   16408:	0092      	lsls	r2, r2, #2
   1640a:	3301      	adds	r3, #1
   1640c:	18b0      	adds	r0, r6, r2
   1640e:	6163      	str	r3, [r4, #20]
   16410:	d0f2      	beq.n	163f8 <d_operator_name+0xc4>
   16412:	2900      	cmp	r1, #0
   16414:	d0f0      	beq.n	163f8 <d_operator_name+0xc4>
   16416:	2332      	movs	r3, #50	; 0x32
   16418:	54b3      	strb	r3, [r6, r2]
   1641a:	6045      	str	r5, [r0, #4]
   1641c:	6081      	str	r1, [r0, #8]
   1641e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16420:	2133      	movs	r1, #51	; 0x33
   16422:	4620      	mov	r0, r4
   16424:	f7fe f90e 	bl	14644 <d_make_comp>
   16428:	e7ac      	b.n	16384 <d_operator_name+0x50>
   1642a:	bf00      	nop
   1642c:	0002418c 	.word	0x0002418c

00016430 <d_parmlist>:
   16430:	b530      	push	{r4, r5, lr}
   16432:	68c2      	ldr	r2, [r0, #12]
   16434:	b083      	sub	sp, #12
   16436:	2300      	movs	r3, #0
   16438:	9301      	str	r3, [sp, #4]
   1643a:	7813      	ldrb	r3, [r2, #0]
   1643c:	b343      	cbz	r3, 16490 <d_parmlist+0x60>
   1643e:	2b45      	cmp	r3, #69	; 0x45
   16440:	d026      	beq.n	16490 <d_parmlist+0x60>
   16442:	2b2e      	cmp	r3, #46	; 0x2e
   16444:	d024      	beq.n	16490 <d_parmlist+0x60>
   16446:	4604      	mov	r4, r0
   16448:	ad01      	add	r5, sp, #4
   1644a:	e015      	b.n	16478 <d_parmlist+0x48>
   1644c:	2b4f      	cmp	r3, #79	; 0x4f
   1644e:	d016      	beq.n	1647e <d_parmlist+0x4e>
   16450:	f7ff fb88 	bl	15b64 <d_type>
   16454:	2300      	movs	r3, #0
   16456:	4602      	mov	r2, r0
   16458:	212e      	movs	r1, #46	; 0x2e
   1645a:	b1c8      	cbz	r0, 16490 <d_parmlist+0x60>
   1645c:	4620      	mov	r0, r4
   1645e:	f7fe f8f1 	bl	14644 <d_make_comp>
   16462:	6028      	str	r0, [r5, #0]
   16464:	b1a0      	cbz	r0, 16490 <d_parmlist+0x60>
   16466:	68e2      	ldr	r2, [r4, #12]
   16468:	7813      	ldrb	r3, [r2, #0]
   1646a:	f100 0508 	add.w	r5, r0, #8
   1646e:	b14b      	cbz	r3, 16484 <d_parmlist+0x54>
   16470:	2b45      	cmp	r3, #69	; 0x45
   16472:	d007      	beq.n	16484 <d_parmlist+0x54>
   16474:	2b2e      	cmp	r3, #46	; 0x2e
   16476:	d005      	beq.n	16484 <d_parmlist+0x54>
   16478:	2b52      	cmp	r3, #82	; 0x52
   1647a:	4620      	mov	r0, r4
   1647c:	d1e6      	bne.n	1644c <d_parmlist+0x1c>
   1647e:	7853      	ldrb	r3, [r2, #1]
   16480:	2b45      	cmp	r3, #69	; 0x45
   16482:	d1e5      	bne.n	16450 <d_parmlist+0x20>
   16484:	9801      	ldr	r0, [sp, #4]
   16486:	b118      	cbz	r0, 16490 <d_parmlist+0x60>
   16488:	6883      	ldr	r3, [r0, #8]
   1648a:	b123      	cbz	r3, 16496 <d_parmlist+0x66>
   1648c:	b003      	add	sp, #12
   1648e:	bd30      	pop	{r4, r5, pc}
   16490:	2000      	movs	r0, #0
   16492:	b003      	add	sp, #12
   16494:	bd30      	pop	{r4, r5, pc}
   16496:	6842      	ldr	r2, [r0, #4]
   16498:	7811      	ldrb	r1, [r2, #0]
   1649a:	2927      	cmp	r1, #39	; 0x27
   1649c:	d1f6      	bne.n	1648c <d_parmlist+0x5c>
   1649e:	6852      	ldr	r2, [r2, #4]
   164a0:	7c11      	ldrb	r1, [r2, #16]
   164a2:	2909      	cmp	r1, #9
   164a4:	d1f2      	bne.n	1648c <d_parmlist+0x5c>
   164a6:	6851      	ldr	r1, [r2, #4]
   164a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   164aa:	1a52      	subs	r2, r2, r1
   164ac:	6322      	str	r2, [r4, #48]	; 0x30
   164ae:	6043      	str	r3, [r0, #4]
   164b0:	e7ec      	b.n	1648c <d_parmlist+0x5c>
   164b2:	bf00      	nop

000164b4 <d_unqualified_name>:
   164b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164b6:	68c1      	ldr	r1, [r0, #12]
   164b8:	780b      	ldrb	r3, [r1, #0]
   164ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   164be:	2a09      	cmp	r2, #9
   164c0:	4604      	mov	r4, r0
   164c2:	d920      	bls.n	16506 <d_unqualified_name+0x52>
   164c4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   164c8:	2a19      	cmp	r2, #25
   164ca:	d925      	bls.n	16518 <d_unqualified_name+0x64>
   164cc:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   164d0:	2a01      	cmp	r2, #1
   164d2:	d92c      	bls.n	1652e <d_unqualified_name+0x7a>
   164d4:	2b4c      	cmp	r3, #76	; 0x4c
   164d6:	f000 8088 	beq.w	165ea <d_unqualified_name+0x136>
   164da:	2b55      	cmp	r3, #85	; 0x55
   164dc:	d133      	bne.n	16546 <d_unqualified_name+0x92>
   164de:	784b      	ldrb	r3, [r1, #1]
   164e0:	2b6c      	cmp	r3, #108	; 0x6c
   164e2:	d033      	beq.n	1654c <d_unqualified_name+0x98>
   164e4:	2b74      	cmp	r3, #116	; 0x74
   164e6:	d12e      	bne.n	16546 <d_unqualified_name+0x92>
   164e8:	1c4b      	adds	r3, r1, #1
   164ea:	60c3      	str	r3, [r0, #12]
   164ec:	784b      	ldrb	r3, [r1, #1]
   164ee:	2b74      	cmp	r3, #116	; 0x74
   164f0:	d05a      	beq.n	165a8 <d_unqualified_name+0xf4>
   164f2:	2b42      	cmp	r3, #66	; 0x42
   164f4:	f04f 0500 	mov.w	r5, #0
   164f8:	d10c      	bne.n	16514 <d_unqualified_name+0x60>
   164fa:	4629      	mov	r1, r5
   164fc:	4620      	mov	r0, r4
   164fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16502:	f7fe bacd 	b.w	14aa0 <d_abi_tags>
   16506:	f7fe fa6f 	bl	149e8 <d_source_name>
   1650a:	68e3      	ldr	r3, [r4, #12]
   1650c:	781b      	ldrb	r3, [r3, #0]
   1650e:	4605      	mov	r5, r0
   16510:	2b42      	cmp	r3, #66	; 0x42
   16512:	d0f2      	beq.n	164fa <d_unqualified_name+0x46>
   16514:	4628      	mov	r0, r5
   16516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16518:	f7ff ff0c 	bl	16334 <d_operator_name>
   1651c:	4605      	mov	r5, r0
   1651e:	b118      	cbz	r0, 16528 <d_unqualified_name+0x74>
   16520:	7803      	ldrb	r3, [r0, #0]
   16522:	2b31      	cmp	r3, #49	; 0x31
   16524:	f000 80b2 	beq.w	1668c <d_unqualified_name+0x1d8>
   16528:	68e3      	ldr	r3, [r4, #12]
   1652a:	781b      	ldrb	r3, [r3, #0]
   1652c:	e7f0      	b.n	16510 <d_unqualified_name+0x5c>
   1652e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16530:	b125      	cbz	r5, 1653c <d_unqualified_name+0x88>
   16532:	782a      	ldrb	r2, [r5, #0]
   16534:	2a00      	cmp	r2, #0
   16536:	d06c      	beq.n	16612 <d_unqualified_name+0x15e>
   16538:	2a18      	cmp	r2, #24
   1653a:	d06a      	beq.n	16612 <d_unqualified_name+0x15e>
   1653c:	2b43      	cmp	r3, #67	; 0x43
   1653e:	f000 80bf 	beq.w	166c0 <d_unqualified_name+0x20c>
   16542:	2b44      	cmp	r3, #68	; 0x44
   16544:	d06f      	beq.n	16626 <d_unqualified_name+0x172>
   16546:	2500      	movs	r5, #0
   16548:	4628      	mov	r0, r5
   1654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1654c:	1c4b      	adds	r3, r1, #1
   1654e:	60c3      	str	r3, [r0, #12]
   16550:	784b      	ldrb	r3, [r1, #1]
   16552:	2b6c      	cmp	r3, #108	; 0x6c
   16554:	d1cd      	bne.n	164f2 <d_unqualified_name+0x3e>
   16556:	3102      	adds	r1, #2
   16558:	60c1      	str	r1, [r0, #12]
   1655a:	f7ff ff69 	bl	16430 <d_parmlist>
   1655e:	4606      	mov	r6, r0
   16560:	b1f0      	cbz	r0, 165a0 <d_unqualified_name+0xec>
   16562:	68e2      	ldr	r2, [r4, #12]
   16564:	7813      	ldrb	r3, [r2, #0]
   16566:	2b45      	cmp	r3, #69	; 0x45
   16568:	d1c3      	bne.n	164f2 <d_unqualified_name+0x3e>
   1656a:	3201      	adds	r2, #1
   1656c:	60e2      	str	r2, [r4, #12]
   1656e:	4620      	mov	r0, r4
   16570:	f7fe f9fc 	bl	1496c <d_compact_number>
   16574:	2800      	cmp	r0, #0
   16576:	db13      	blt.n	165a0 <d_unqualified_name+0xec>
   16578:	6963      	ldr	r3, [r4, #20]
   1657a:	69a2      	ldr	r2, [r4, #24]
   1657c:	4293      	cmp	r3, r2
   1657e:	da0f      	bge.n	165a0 <d_unqualified_name+0xec>
   16580:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16584:	6921      	ldr	r1, [r4, #16]
   16586:	0092      	lsls	r2, r2, #2
   16588:	3301      	adds	r3, #1
   1658a:	188d      	adds	r5, r1, r2
   1658c:	6163      	str	r3, [r4, #20]
   1658e:	d0cb      	beq.n	16528 <d_unqualified_name+0x74>
   16590:	2345      	movs	r3, #69	; 0x45
   16592:	548b      	strb	r3, [r1, r2]
   16594:	606e      	str	r6, [r5, #4]
   16596:	60a8      	str	r0, [r5, #8]
   16598:	6a23      	ldr	r3, [r4, #32]
   1659a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1659c:	4293      	cmp	r3, r2
   1659e:	db1c      	blt.n	165da <d_unqualified_name+0x126>
   165a0:	68e3      	ldr	r3, [r4, #12]
   165a2:	2500      	movs	r5, #0
   165a4:	781b      	ldrb	r3, [r3, #0]
   165a6:	e7b3      	b.n	16510 <d_unqualified_name+0x5c>
   165a8:	3102      	adds	r1, #2
   165aa:	60c1      	str	r1, [r0, #12]
   165ac:	f7fe f9de 	bl	1496c <d_compact_number>
   165b0:	2800      	cmp	r0, #0
   165b2:	dbf5      	blt.n	165a0 <d_unqualified_name+0xec>
   165b4:	6963      	ldr	r3, [r4, #20]
   165b6:	69a2      	ldr	r2, [r4, #24]
   165b8:	4293      	cmp	r3, r2
   165ba:	daf1      	bge.n	165a0 <d_unqualified_name+0xec>
   165bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   165c0:	6921      	ldr	r1, [r4, #16]
   165c2:	0092      	lsls	r2, r2, #2
   165c4:	3301      	adds	r3, #1
   165c6:	188d      	adds	r5, r1, r2
   165c8:	6163      	str	r3, [r4, #20]
   165ca:	d0ad      	beq.n	16528 <d_unqualified_name+0x74>
   165cc:	2347      	movs	r3, #71	; 0x47
   165ce:	548b      	strb	r3, [r1, r2]
   165d0:	6068      	str	r0, [r5, #4]
   165d2:	6a23      	ldr	r3, [r4, #32]
   165d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   165d6:	4293      	cmp	r3, r2
   165d8:	dae2      	bge.n	165a0 <d_unqualified_name+0xec>
   165da:	69e1      	ldr	r1, [r4, #28]
   165dc:	68e2      	ldr	r2, [r4, #12]
   165de:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   165e2:	3301      	adds	r3, #1
   165e4:	6223      	str	r3, [r4, #32]
   165e6:	7813      	ldrb	r3, [r2, #0]
   165e8:	e792      	b.n	16510 <d_unqualified_name+0x5c>
   165ea:	3101      	adds	r1, #1
   165ec:	60c1      	str	r1, [r0, #12]
   165ee:	f7fe f9fb 	bl	149e8 <d_source_name>
   165f2:	4605      	mov	r5, r0
   165f4:	2800      	cmp	r0, #0
   165f6:	d0a6      	beq.n	16546 <d_unqualified_name+0x92>
   165f8:	68e2      	ldr	r2, [r4, #12]
   165fa:	7813      	ldrb	r3, [r2, #0]
   165fc:	2b5f      	cmp	r3, #95	; 0x5f
   165fe:	d187      	bne.n	16510 <d_unqualified_name+0x5c>
   16600:	4620      	mov	r0, r4
   16602:	3201      	adds	r2, #1
   16604:	f840 2f0c 	str.w	r2, [r0, #12]!
   16608:	f7fe f96e 	bl	148e8 <d_number.isra.0>
   1660c:	2800      	cmp	r0, #0
   1660e:	da8b      	bge.n	16528 <d_unqualified_name+0x74>
   16610:	e799      	b.n	16546 <d_unqualified_name+0x92>
   16612:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16614:	68aa      	ldr	r2, [r5, #8]
   16616:	4413      	add	r3, r2
   16618:	6323      	str	r3, [r4, #48]	; 0x30
   1661a:	780b      	ldrb	r3, [r1, #0]
   1661c:	2b43      	cmp	r3, #67	; 0x43
   1661e:	d04f      	beq.n	166c0 <d_unqualified_name+0x20c>
   16620:	2b44      	cmp	r3, #68	; 0x44
   16622:	f47f af66 	bne.w	164f2 <d_unqualified_name+0x3e>
   16626:	784b      	ldrb	r3, [r1, #1]
   16628:	3b30      	subs	r3, #48	; 0x30
   1662a:	2b05      	cmp	r3, #5
   1662c:	d88b      	bhi.n	16546 <d_unqualified_name+0x92>
   1662e:	a201      	add	r2, pc, #4	; (adr r2, 16634 <d_unqualified_name+0x180>)
   16630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16634:	00016689 	.word	0x00016689
   16638:	0001664d 	.word	0x0001664d
   1663c:	00016685 	.word	0x00016685
   16640:	00016547 	.word	0x00016547
   16644:	00016681 	.word	0x00016681
   16648:	0001667d 	.word	0x0001667d
   1664c:	2702      	movs	r7, #2
   1664e:	6963      	ldr	r3, [r4, #20]
   16650:	69a2      	ldr	r2, [r4, #24]
   16652:	1c88      	adds	r0, r1, #2
   16654:	4293      	cmp	r3, r2
   16656:	60e0      	str	r0, [r4, #12]
   16658:	da56      	bge.n	16708 <d_unqualified_name+0x254>
   1665a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1665e:	6920      	ldr	r0, [r4, #16]
   16660:	0092      	lsls	r2, r2, #2
   16662:	3301      	adds	r3, #1
   16664:	1886      	adds	r6, r0, r2
   16666:	6163      	str	r3, [r4, #20]
   16668:	d005      	beq.n	16676 <d_unqualified_name+0x1c2>
   1666a:	2d00      	cmp	r5, #0
   1666c:	d04f      	beq.n	1670e <d_unqualified_name+0x25a>
   1666e:	2308      	movs	r3, #8
   16670:	5483      	strb	r3, [r0, r2]
   16672:	7137      	strb	r7, [r6, #4]
   16674:	60b5      	str	r5, [r6, #8]
   16676:	788b      	ldrb	r3, [r1, #2]
   16678:	4635      	mov	r5, r6
   1667a:	e749      	b.n	16510 <d_unqualified_name+0x5c>
   1667c:	2705      	movs	r7, #5
   1667e:	e7e6      	b.n	1664e <d_unqualified_name+0x19a>
   16680:	2704      	movs	r7, #4
   16682:	e7e4      	b.n	1664e <d_unqualified_name+0x19a>
   16684:	2703      	movs	r7, #3
   16686:	e7e2      	b.n	1664e <d_unqualified_name+0x19a>
   16688:	2701      	movs	r7, #1
   1668a:	e7e0      	b.n	1664e <d_unqualified_name+0x19a>
   1668c:	6842      	ldr	r2, [r0, #4]
   1668e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16690:	6896      	ldr	r6, [r2, #8]
   16692:	6810      	ldr	r0, [r2, #0]
   16694:	491f      	ldr	r1, [pc, #124]	; (16714 <d_unqualified_name+0x260>)
   16696:	3307      	adds	r3, #7
   16698:	4433      	add	r3, r6
   1669a:	6323      	str	r3, [r4, #48]	; 0x30
   1669c:	f008 fa94 	bl	1ebc8 <strcmp>
   166a0:	2800      	cmp	r0, #0
   166a2:	f47f af41 	bne.w	16528 <d_unqualified_name+0x74>
   166a6:	4620      	mov	r0, r4
   166a8:	f7fe f99e 	bl	149e8 <d_source_name>
   166ac:	462a      	mov	r2, r5
   166ae:	4603      	mov	r3, r0
   166b0:	2136      	movs	r1, #54	; 0x36
   166b2:	4620      	mov	r0, r4
   166b4:	f7fd ffc6 	bl	14644 <d_make_comp>
   166b8:	68e3      	ldr	r3, [r4, #12]
   166ba:	4605      	mov	r5, r0
   166bc:	781b      	ldrb	r3, [r3, #0]
   166be:	e727      	b.n	16510 <d_unqualified_name+0x5c>
   166c0:	784b      	ldrb	r3, [r1, #1]
   166c2:	3b31      	subs	r3, #49	; 0x31
   166c4:	2b04      	cmp	r3, #4
   166c6:	f63f af3e 	bhi.w	16546 <d_unqualified_name+0x92>
   166ca:	e8df f003 	tbb	[pc, r3]
   166ce:	0315      	.short	0x0315
   166d0:	191b      	.short	0x191b
   166d2:	17          	.byte	0x17
   166d3:	00          	.byte	0x00
   166d4:	2702      	movs	r7, #2
   166d6:	6963      	ldr	r3, [r4, #20]
   166d8:	69a2      	ldr	r2, [r4, #24]
   166da:	1c88      	adds	r0, r1, #2
   166dc:	4293      	cmp	r3, r2
   166de:	60e0      	str	r0, [r4, #12]
   166e0:	da12      	bge.n	16708 <d_unqualified_name+0x254>
   166e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   166e6:	6920      	ldr	r0, [r4, #16]
   166e8:	0092      	lsls	r2, r2, #2
   166ea:	3301      	adds	r3, #1
   166ec:	1886      	adds	r6, r0, r2
   166ee:	6163      	str	r3, [r4, #20]
   166f0:	d0c1      	beq.n	16676 <d_unqualified_name+0x1c2>
   166f2:	b165      	cbz	r5, 1670e <d_unqualified_name+0x25a>
   166f4:	2307      	movs	r3, #7
   166f6:	e7bb      	b.n	16670 <d_unqualified_name+0x1bc>
   166f8:	2701      	movs	r7, #1
   166fa:	e7ec      	b.n	166d6 <d_unqualified_name+0x222>
   166fc:	2705      	movs	r7, #5
   166fe:	e7ea      	b.n	166d6 <d_unqualified_name+0x222>
   16700:	2704      	movs	r7, #4
   16702:	e7e8      	b.n	166d6 <d_unqualified_name+0x222>
   16704:	2703      	movs	r7, #3
   16706:	e7e6      	b.n	166d6 <d_unqualified_name+0x222>
   16708:	788b      	ldrb	r3, [r1, #2]
   1670a:	2500      	movs	r5, #0
   1670c:	e700      	b.n	16510 <d_unqualified_name+0x5c>
   1670e:	788b      	ldrb	r3, [r1, #2]
   16710:	e6fe      	b.n	16510 <d_unqualified_name+0x5c>
   16712:	bf00      	nop
   16714:	00024634 	.word	0x00024634

00016718 <d_bare_function_type>:
   16718:	b570      	push	{r4, r5, r6, lr}
   1671a:	68c3      	ldr	r3, [r0, #12]
   1671c:	781a      	ldrb	r2, [r3, #0]
   1671e:	2a4a      	cmp	r2, #74	; 0x4a
   16720:	4604      	mov	r4, r0
   16722:	d00d      	beq.n	16740 <d_bare_function_type+0x28>
   16724:	b971      	cbnz	r1, 16744 <d_bare_function_type+0x2c>
   16726:	460d      	mov	r5, r1
   16728:	4620      	mov	r0, r4
   1672a:	f7ff fe81 	bl	16430 <d_parmlist>
   1672e:	b178      	cbz	r0, 16750 <d_bare_function_type+0x38>
   16730:	4603      	mov	r3, r0
   16732:	462a      	mov	r2, r5
   16734:	4620      	mov	r0, r4
   16736:	2129      	movs	r1, #41	; 0x29
   16738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1673c:	f7fd bf82 	b.w	14644 <d_make_comp>
   16740:	3301      	adds	r3, #1
   16742:	60c3      	str	r3, [r0, #12]
   16744:	4620      	mov	r0, r4
   16746:	f7ff fa0d 	bl	15b64 <d_type>
   1674a:	4605      	mov	r5, r0
   1674c:	2800      	cmp	r0, #0
   1674e:	d1eb      	bne.n	16728 <d_bare_function_type+0x10>
   16750:	2000      	movs	r0, #0
   16752:	bd70      	pop	{r4, r5, r6, pc}

00016754 <d_function_type>:
   16754:	68c3      	ldr	r3, [r0, #12]
   16756:	781a      	ldrb	r2, [r3, #0]
   16758:	2a46      	cmp	r2, #70	; 0x46
   1675a:	d001      	beq.n	16760 <d_function_type+0xc>
   1675c:	2000      	movs	r0, #0
   1675e:	4770      	bx	lr
   16760:	b510      	push	{r4, lr}
   16762:	1c5a      	adds	r2, r3, #1
   16764:	60c2      	str	r2, [r0, #12]
   16766:	785a      	ldrb	r2, [r3, #1]
   16768:	2a59      	cmp	r2, #89	; 0x59
   1676a:	bf04      	itt	eq
   1676c:	3302      	addeq	r3, #2
   1676e:	60c3      	streq	r3, [r0, #12]
   16770:	2101      	movs	r1, #1
   16772:	4604      	mov	r4, r0
   16774:	f7ff ffd0 	bl	16718 <d_bare_function_type>
   16778:	4601      	mov	r1, r0
   1677a:	4620      	mov	r0, r4
   1677c:	f7fe f814 	bl	147a8 <d_ref_qualifier>
   16780:	68e3      	ldr	r3, [r4, #12]
   16782:	781a      	ldrb	r2, [r3, #0]
   16784:	2a45      	cmp	r2, #69	; 0x45
   16786:	d001      	beq.n	1678c <d_function_type+0x38>
   16788:	2000      	movs	r0, #0
   1678a:	bd10      	pop	{r4, pc}
   1678c:	3301      	adds	r3, #1
   1678e:	60e3      	str	r3, [r4, #12]
   16790:	bd10      	pop	{r4, pc}
   16792:	bf00      	nop

00016794 <d_encoding>:
   16794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16798:	68c3      	ldr	r3, [r0, #12]
   1679a:	781a      	ldrb	r2, [r3, #0]
   1679c:	2a47      	cmp	r2, #71	; 0x47
   1679e:	4605      	mov	r5, r0
   167a0:	d01f      	beq.n	167e2 <d_encoding+0x4e>
   167a2:	2a54      	cmp	r2, #84	; 0x54
   167a4:	d01d      	beq.n	167e2 <d_encoding+0x4e>
   167a6:	460e      	mov	r6, r1
   167a8:	f7ff f820 	bl	157ec <d_name>
   167ac:	4604      	mov	r4, r0
   167ae:	b310      	cbz	r0, 167f6 <d_encoding+0x62>
   167b0:	b32e      	cbz	r6, 167fe <d_encoding+0x6a>
   167b2:	68ab      	ldr	r3, [r5, #8]
   167b4:	07db      	lsls	r3, r3, #31
   167b6:	d422      	bmi.n	167fe <d_encoding+0x6a>
   167b8:	7823      	ldrb	r3, [r4, #0]
   167ba:	f1a3 021c 	sub.w	r2, r3, #28
   167be:	2a04      	cmp	r2, #4
   167c0:	d940      	bls.n	16844 <d_encoding+0xb0>
   167c2:	2b4c      	cmp	r3, #76	; 0x4c
   167c4:	d03e      	beq.n	16844 <d_encoding+0xb0>
   167c6:	2b02      	cmp	r3, #2
   167c8:	d116      	bne.n	167f8 <d_encoding+0x64>
   167ca:	68a3      	ldr	r3, [r4, #8]
   167cc:	781a      	ldrb	r2, [r3, #0]
   167ce:	f1a2 011c 	sub.w	r1, r2, #28
   167d2:	2904      	cmp	r1, #4
   167d4:	f240 8283 	bls.w	16cde <d_encoding+0x54a>
   167d8:	2a4c      	cmp	r2, #76	; 0x4c
   167da:	f000 8280 	beq.w	16cde <d_encoding+0x54a>
   167de:	60a3      	str	r3, [r4, #8]
   167e0:	e00a      	b.n	167f8 <d_encoding+0x64>
   167e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   167e4:	f101 0214 	add.w	r2, r1, #20
   167e8:	632a      	str	r2, [r5, #48]	; 0x30
   167ea:	781a      	ldrb	r2, [r3, #0]
   167ec:	2a54      	cmp	r2, #84	; 0x54
   167ee:	d02b      	beq.n	16848 <d_encoding+0xb4>
   167f0:	2a47      	cmp	r2, #71	; 0x47
   167f2:	f000 809f 	beq.w	16934 <d_encoding+0x1a0>
   167f6:	2400      	movs	r4, #0
   167f8:	4620      	mov	r0, r4
   167fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   167fe:	68eb      	ldr	r3, [r5, #12]
   16800:	781b      	ldrb	r3, [r3, #0]
   16802:	2b00      	cmp	r3, #0
   16804:	d0f8      	beq.n	167f8 <d_encoding+0x64>
   16806:	2b45      	cmp	r3, #69	; 0x45
   16808:	d0f6      	beq.n	167f8 <d_encoding+0x64>
   1680a:	4621      	mov	r1, r4
   1680c:	780a      	ldrb	r2, [r1, #0]
   1680e:	2a20      	cmp	r2, #32
   16810:	f200 8113 	bhi.w	16a3a <d_encoding+0x2a6>
   16814:	2a1c      	cmp	r2, #28
   16816:	f080 8112 	bcs.w	16a3e <d_encoding+0x2aa>
   1681a:	2a04      	cmp	r2, #4
   1681c:	f040 8101 	bne.w	16a22 <d_encoding+0x28e>
   16820:	684a      	ldr	r2, [r1, #4]
   16822:	b16a      	cbz	r2, 16840 <d_encoding+0xac>
   16824:	7813      	ldrb	r3, [r2, #0]
   16826:	2b08      	cmp	r3, #8
   16828:	f103 31ff 	add.w	r1, r3, #4294967295
   1682c:	f200 80f6 	bhi.w	16a1c <d_encoding+0x288>
   16830:	2b07      	cmp	r3, #7
   16832:	f080 80f6 	bcs.w	16a22 <d_encoding+0x28e>
   16836:	2901      	cmp	r1, #1
   16838:	d802      	bhi.n	16840 <d_encoding+0xac>
   1683a:	6892      	ldr	r2, [r2, #8]
   1683c:	2a00      	cmp	r2, #0
   1683e:	d1f1      	bne.n	16824 <d_encoding+0x90>
   16840:	2101      	movs	r1, #1
   16842:	e0ef      	b.n	16a24 <d_encoding+0x290>
   16844:	6864      	ldr	r4, [r4, #4]
   16846:	e7b7      	b.n	167b8 <d_encoding+0x24>
   16848:	1c5a      	adds	r2, r3, #1
   1684a:	60ea      	str	r2, [r5, #12]
   1684c:	785a      	ldrb	r2, [r3, #1]
   1684e:	2a00      	cmp	r2, #0
   16850:	d0d1      	beq.n	167f6 <d_encoding+0x62>
   16852:	1c9a      	adds	r2, r3, #2
   16854:	60ea      	str	r2, [r5, #12]
   16856:	785b      	ldrb	r3, [r3, #1]
   16858:	3b43      	subs	r3, #67	; 0x43
   1685a:	2b33      	cmp	r3, #51	; 0x33
   1685c:	d8cb      	bhi.n	167f6 <d_encoding+0x62>
   1685e:	a201      	add	r2, pc, #4	; (adr r2, 16864 <d_encoding+0xd0>)
   16860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16864:	00016c9f 	.word	0x00016c9f
   16868:	000167f7 	.word	0x000167f7
   1686c:	000167f7 	.word	0x000167f7
   16870:	00016c89 	.word	0x00016c89
   16874:	000167f7 	.word	0x000167f7
   16878:	00016c73 	.word	0x00016c73
   1687c:	00016c5d 	.word	0x00016c5d
   16880:	00016c47 	.word	0x00016c47
   16884:	000167f7 	.word	0x000167f7
   16888:	000167f7 	.word	0x000167f7
   1688c:	000167f7 	.word	0x000167f7
   16890:	000167f7 	.word	0x000167f7
   16894:	000167f7 	.word	0x000167f7
   16898:	000167f7 	.word	0x000167f7
   1689c:	000167f7 	.word	0x000167f7
   168a0:	000167f7 	.word	0x000167f7
   168a4:	00016c31 	.word	0x00016c31
   168a8:	00016c17 	.word	0x00016c17
   168ac:	000167f7 	.word	0x000167f7
   168b0:	00016bfd 	.word	0x00016bfd
   168b4:	00016be7 	.word	0x00016be7
   168b8:	000167f7 	.word	0x000167f7
   168bc:	000167f7 	.word	0x000167f7
   168c0:	000167f7 	.word	0x000167f7
   168c4:	000167f7 	.word	0x000167f7
   168c8:	000167f7 	.word	0x000167f7
   168cc:	000167f7 	.word	0x000167f7
   168d0:	000167f7 	.word	0x000167f7
   168d4:	000167f7 	.word	0x000167f7
   168d8:	000167f7 	.word	0x000167f7
   168dc:	000167f7 	.word	0x000167f7
   168e0:	000167f7 	.word	0x000167f7
   168e4:	00016bb3 	.word	0x00016bb3
   168e8:	000167f7 	.word	0x000167f7
   168ec:	000167f7 	.word	0x000167f7
   168f0:	000167f7 	.word	0x000167f7
   168f4:	000167f7 	.word	0x000167f7
   168f8:	00016b8d 	.word	0x00016b8d
   168fc:	000167f7 	.word	0x000167f7
   16900:	000167f7 	.word	0x000167f7
   16904:	000167f7 	.word	0x000167f7
   16908:	000167f7 	.word	0x000167f7
   1690c:	000167f7 	.word	0x000167f7
   16910:	000167f7 	.word	0x000167f7
   16914:	000167f7 	.word	0x000167f7
   16918:	000167f7 	.word	0x000167f7
   1691c:	000167f7 	.word	0x000167f7
   16920:	000167f7 	.word	0x000167f7
   16924:	000167f7 	.word	0x000167f7
   16928:	000167f7 	.word	0x000167f7
   1692c:	000167f7 	.word	0x000167f7
   16930:	00016b67 	.word	0x00016b67
   16934:	1c5a      	adds	r2, r3, #1
   16936:	60ea      	str	r2, [r5, #12]
   16938:	785a      	ldrb	r2, [r3, #1]
   1693a:	2a00      	cmp	r2, #0
   1693c:	f43f af5b 	beq.w	167f6 <d_encoding+0x62>
   16940:	1c9a      	adds	r2, r3, #2
   16942:	60ea      	str	r2, [r5, #12]
   16944:	785a      	ldrb	r2, [r3, #1]
   16946:	3a41      	subs	r2, #65	; 0x41
   16948:	2a31      	cmp	r2, #49	; 0x31
   1694a:	f63f af54 	bhi.w	167f6 <d_encoding+0x62>
   1694e:	a101      	add	r1, pc, #4	; (adr r1, 16954 <d_encoding+0x1c0>)
   16950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16954:	00016a49 	.word	0x00016a49
   16958:	000167f7 	.word	0x000167f7
   1695c:	000167f7 	.word	0x000167f7
   16960:	000167f7 	.word	0x000167f7
   16964:	000167f7 	.word	0x000167f7
   16968:	000167f7 	.word	0x000167f7
   1696c:	000167f7 	.word	0x000167f7
   16970:	000167f7 	.word	0x000167f7
   16974:	000167f7 	.word	0x000167f7
   16978:	000167f7 	.word	0x000167f7
   1697c:	000167f7 	.word	0x000167f7
   16980:	000167f7 	.word	0x000167f7
   16984:	000167f7 	.word	0x000167f7
   16988:	000167f7 	.word	0x000167f7
   1698c:	000167f7 	.word	0x000167f7
   16990:	000167f7 	.word	0x000167f7
   16994:	000167f7 	.word	0x000167f7
   16998:	00016b49 	.word	0x00016b49
   1699c:	000167f7 	.word	0x000167f7
   169a0:	00016b1d 	.word	0x00016b1d
   169a4:	000167f7 	.word	0x000167f7
   169a8:	00016b07 	.word	0x00016b07
   169ac:	000167f7 	.word	0x000167f7
   169b0:	000167f7 	.word	0x000167f7
   169b4:	000167f7 	.word	0x000167f7
   169b8:	000167f7 	.word	0x000167f7
   169bc:	000167f7 	.word	0x000167f7
   169c0:	000167f7 	.word	0x000167f7
   169c4:	000167f7 	.word	0x000167f7
   169c8:	000167f7 	.word	0x000167f7
   169cc:	000167f7 	.word	0x000167f7
   169d0:	000167f7 	.word	0x000167f7
   169d4:	000167f7 	.word	0x000167f7
   169d8:	000167f7 	.word	0x000167f7
   169dc:	000167f7 	.word	0x000167f7
   169e0:	000167f7 	.word	0x000167f7
   169e4:	000167f7 	.word	0x000167f7
   169e8:	000167f7 	.word	0x000167f7
   169ec:	000167f7 	.word	0x000167f7
   169f0:	000167f7 	.word	0x000167f7
   169f4:	000167f7 	.word	0x000167f7
   169f8:	000167f7 	.word	0x000167f7
   169fc:	000167f7 	.word	0x000167f7
   16a00:	000167f7 	.word	0x000167f7
   16a04:	000167f7 	.word	0x000167f7
   16a08:	000167f7 	.word	0x000167f7
   16a0c:	000167f7 	.word	0x000167f7
   16a10:	000167f7 	.word	0x000167f7
   16a14:	000167f7 	.word	0x000167f7
   16a18:	00016a61 	.word	0x00016a61
   16a1c:	2b34      	cmp	r3, #52	; 0x34
   16a1e:	f47f af0f 	bne.w	16840 <d_encoding+0xac>
   16a22:	2100      	movs	r1, #0
   16a24:	4628      	mov	r0, r5
   16a26:	f7ff fe77 	bl	16718 <d_bare_function_type>
   16a2a:	4622      	mov	r2, r4
   16a2c:	4603      	mov	r3, r0
   16a2e:	2103      	movs	r1, #3
   16a30:	4628      	mov	r0, r5
   16a32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a36:	f7fd be05 	b.w	14644 <d_make_comp>
   16a3a:	2a4c      	cmp	r2, #76	; 0x4c
   16a3c:	d1f1      	bne.n	16a22 <d_encoding+0x28e>
   16a3e:	6849      	ldr	r1, [r1, #4]
   16a40:	2900      	cmp	r1, #0
   16a42:	f47f aee3 	bne.w	1680c <d_encoding+0x78>
   16a46:	e7ed      	b.n	16a24 <d_encoding+0x290>
   16a48:	2100      	movs	r1, #0
   16a4a:	4628      	mov	r0, r5
   16a4c:	f7ff fea2 	bl	16794 <d_encoding>
   16a50:	2300      	movs	r3, #0
   16a52:	4602      	mov	r2, r0
   16a54:	2117      	movs	r1, #23
   16a56:	4628      	mov	r0, r5
   16a58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a5c:	f7fd bdf2 	b.w	14644 <d_make_comp>
   16a60:	f105 000c 	add.w	r0, r5, #12
   16a64:	f7fd ff40 	bl	148e8 <d_number.isra.0>
   16a68:	2801      	cmp	r0, #1
   16a6a:	f77f aec4 	ble.w	167f6 <d_encoding+0x62>
   16a6e:	68eb      	ldr	r3, [r5, #12]
   16a70:	781a      	ldrb	r2, [r3, #0]
   16a72:	2a00      	cmp	r2, #0
   16a74:	f43f aebf 	beq.w	167f6 <d_encoding+0x62>
   16a78:	1c5f      	adds	r7, r3, #1
   16a7a:	60ef      	str	r7, [r5, #12]
   16a7c:	781b      	ldrb	r3, [r3, #0]
   16a7e:	2b5f      	cmp	r3, #95	; 0x5f
   16a80:	f47f aeb9 	bne.w	167f6 <d_encoding+0x62>
   16a84:	2200      	movs	r2, #0
   16a86:	1e46      	subs	r6, r0, #1
   16a88:	4690      	mov	r8, r2
   16a8a:	f04f 0940 	mov.w	r9, #64	; 0x40
   16a8e:	783b      	ldrb	r3, [r7, #0]
   16a90:	2b00      	cmp	r3, #0
   16a92:	f43f aeb0 	beq.w	167f6 <d_encoding+0x62>
   16a96:	2b24      	cmp	r3, #36	; 0x24
   16a98:	f000 8128 	beq.w	16cec <d_encoding+0x558>
   16a9c:	463c      	mov	r4, r7
   16a9e:	2100      	movs	r1, #0
   16aa0:	e004      	b.n	16aac <d_encoding+0x318>
   16aa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16aa6:	b123      	cbz	r3, 16ab2 <d_encoding+0x31e>
   16aa8:	2b24      	cmp	r3, #36	; 0x24
   16aaa:	d002      	beq.n	16ab2 <d_encoding+0x31e>
   16aac:	3101      	adds	r1, #1
   16aae:	42b1      	cmp	r1, r6
   16ab0:	dbf7      	blt.n	16aa2 <d_encoding+0x30e>
   16ab2:	696c      	ldr	r4, [r5, #20]
   16ab4:	69a8      	ldr	r0, [r5, #24]
   16ab6:	4284      	cmp	r4, r0
   16ab8:	f280 8113 	bge.w	16ce2 <d_encoding+0x54e>
   16abc:	6928      	ldr	r0, [r5, #16]
   16abe:	1c63      	adds	r3, r4, #1
   16ac0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16ac4:	616b      	str	r3, [r5, #20]
   16ac6:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   16aca:	f000 810a 	beq.w	16ce2 <d_encoding+0x54e>
   16ace:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   16ad2:	605f      	str	r7, [r3, #4]
   16ad4:	6099      	str	r1, [r3, #8]
   16ad6:	68ef      	ldr	r7, [r5, #12]
   16ad8:	440f      	add	r7, r1
   16ada:	1a76      	subs	r6, r6, r1
   16adc:	60ef      	str	r7, [r5, #12]
   16ade:	2a00      	cmp	r2, #0
   16ae0:	f000 8121 	beq.w	16d26 <d_encoding+0x592>
   16ae4:	213f      	movs	r1, #63	; 0x3f
   16ae6:	4628      	mov	r0, r5
   16ae8:	f7fd fdac 	bl	14644 <d_make_comp>
   16aec:	4602      	mov	r2, r0
   16aee:	2800      	cmp	r0, #0
   16af0:	f43f ae81 	beq.w	167f6 <d_encoding+0x62>
   16af4:	2e00      	cmp	r6, #0
   16af6:	dcca      	bgt.n	16a8e <d_encoding+0x2fa>
   16af8:	4628      	mov	r0, r5
   16afa:	2300      	movs	r3, #0
   16afc:	213e      	movs	r1, #62	; 0x3e
   16afe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b02:	f7fd bd9f 	b.w	14644 <d_make_comp>
   16b06:	4628      	mov	r0, r5
   16b08:	f7fe fe70 	bl	157ec <d_name>
   16b0c:	2300      	movs	r3, #0
   16b0e:	4602      	mov	r2, r0
   16b10:	2113      	movs	r1, #19
   16b12:	4628      	mov	r0, r5
   16b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b18:	f7fd bd94 	b.w	14644 <d_make_comp>
   16b1c:	789a      	ldrb	r2, [r3, #2]
   16b1e:	2100      	movs	r1, #0
   16b20:	4628      	mov	r0, r5
   16b22:	2a00      	cmp	r2, #0
   16b24:	f000 8101 	beq.w	16d2a <d_encoding+0x596>
   16b28:	1cda      	adds	r2, r3, #3
   16b2a:	60ea      	str	r2, [r5, #12]
   16b2c:	789b      	ldrb	r3, [r3, #2]
   16b2e:	2b6e      	cmp	r3, #110	; 0x6e
   16b30:	f040 80fb 	bne.w	16d2a <d_encoding+0x596>
   16b34:	f7ff fe2e 	bl	16794 <d_encoding>
   16b38:	2300      	movs	r3, #0
   16b3a:	4602      	mov	r2, r0
   16b3c:	2149      	movs	r1, #73	; 0x49
   16b3e:	4628      	mov	r0, r5
   16b40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b44:	f7fd bd7e 	b.w	14644 <d_make_comp>
   16b48:	4628      	mov	r0, r5
   16b4a:	f7fe fe4f 	bl	157ec <d_name>
   16b4e:	4604      	mov	r4, r0
   16b50:	4628      	mov	r0, r5
   16b52:	f7fd fef3 	bl	1493c <d_number_component>
   16b56:	4622      	mov	r2, r4
   16b58:	4603      	mov	r3, r0
   16b5a:	2116      	movs	r1, #22
   16b5c:	4628      	mov	r0, r5
   16b5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b62:	f7fd bd6f 	b.w	14644 <d_make_comp>
   16b66:	2176      	movs	r1, #118	; 0x76
   16b68:	4628      	mov	r0, r5
   16b6a:	f7fe f871 	bl	14c50 <d_call_offset>
   16b6e:	2800      	cmp	r0, #0
   16b70:	f43f ae41 	beq.w	167f6 <d_encoding+0x62>
   16b74:	2100      	movs	r1, #0
   16b76:	4628      	mov	r0, r5
   16b78:	f7ff fe0c 	bl	16794 <d_encoding>
   16b7c:	2300      	movs	r3, #0
   16b7e:	4602      	mov	r2, r0
   16b80:	2110      	movs	r1, #16
   16b82:	4628      	mov	r0, r5
   16b84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b88:	f7fd bd5c 	b.w	14644 <d_make_comp>
   16b8c:	2168      	movs	r1, #104	; 0x68
   16b8e:	4628      	mov	r0, r5
   16b90:	f7fe f85e 	bl	14c50 <d_call_offset>
   16b94:	2800      	cmp	r0, #0
   16b96:	f43f ae2e 	beq.w	167f6 <d_encoding+0x62>
   16b9a:	2100      	movs	r1, #0
   16b9c:	4628      	mov	r0, r5
   16b9e:	f7ff fdf9 	bl	16794 <d_encoding>
   16ba2:	2300      	movs	r3, #0
   16ba4:	4602      	mov	r2, r0
   16ba6:	210f      	movs	r1, #15
   16ba8:	4628      	mov	r0, r5
   16baa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bae:	f7fd bd49 	b.w	14644 <d_make_comp>
   16bb2:	2100      	movs	r1, #0
   16bb4:	4628      	mov	r0, r5
   16bb6:	f7fe f84b 	bl	14c50 <d_call_offset>
   16bba:	2800      	cmp	r0, #0
   16bbc:	f43f ae1b 	beq.w	167f6 <d_encoding+0x62>
   16bc0:	2100      	movs	r1, #0
   16bc2:	4628      	mov	r0, r5
   16bc4:	f7fe f844 	bl	14c50 <d_call_offset>
   16bc8:	2800      	cmp	r0, #0
   16bca:	f43f ae14 	beq.w	167f6 <d_encoding+0x62>
   16bce:	2100      	movs	r1, #0
   16bd0:	4628      	mov	r0, r5
   16bd2:	f7ff fddf 	bl	16794 <d_encoding>
   16bd6:	2300      	movs	r3, #0
   16bd8:	4602      	mov	r2, r0
   16bda:	2111      	movs	r1, #17
   16bdc:	4628      	mov	r0, r5
   16bde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16be2:	f7fd bd2f 	b.w	14644 <d_make_comp>
   16be6:	4628      	mov	r0, r5
   16be8:	f7fe fe00 	bl	157ec <d_name>
   16bec:	2300      	movs	r3, #0
   16bee:	4602      	mov	r2, r0
   16bf0:	2115      	movs	r1, #21
   16bf2:	4628      	mov	r0, r5
   16bf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bf8:	f7fd bd24 	b.w	14644 <d_make_comp>
   16bfc:	310f      	adds	r1, #15
   16bfe:	6329      	str	r1, [r5, #48]	; 0x30
   16c00:	4628      	mov	r0, r5
   16c02:	f7fe ffaf 	bl	15b64 <d_type>
   16c06:	2300      	movs	r3, #0
   16c08:	4602      	mov	r2, r0
   16c0a:	2109      	movs	r1, #9
   16c0c:	4628      	mov	r0, r5
   16c0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c12:	f7fd bd17 	b.w	14644 <d_make_comp>
   16c16:	310a      	adds	r1, #10
   16c18:	6329      	str	r1, [r5, #48]	; 0x30
   16c1a:	4628      	mov	r0, r5
   16c1c:	f7fe ffa2 	bl	15b64 <d_type>
   16c20:	2300      	movs	r3, #0
   16c22:	4602      	mov	r2, r0
   16c24:	210a      	movs	r1, #10
   16c26:	4628      	mov	r0, r5
   16c28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c2c:	f7fd bd0a 	b.w	14644 <d_make_comp>
   16c30:	4628      	mov	r0, r5
   16c32:	f7fe ff97 	bl	15b64 <d_type>
   16c36:	2300      	movs	r3, #0
   16c38:	4602      	mov	r2, r0
   16c3a:	210d      	movs	r1, #13
   16c3c:	4628      	mov	r0, r5
   16c3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c42:	f7fd bcff 	b.w	14644 <d_make_comp>
   16c46:	4628      	mov	r0, r5
   16c48:	f7fe ff8c 	bl	15b64 <d_type>
   16c4c:	2300      	movs	r3, #0
   16c4e:	4602      	mov	r2, r0
   16c50:	2112      	movs	r1, #18
   16c52:	4628      	mov	r0, r5
   16c54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c58:	f7fd bcf4 	b.w	14644 <d_make_comp>
   16c5c:	4628      	mov	r0, r5
   16c5e:	f7fe ff81 	bl	15b64 <d_type>
   16c62:	2300      	movs	r3, #0
   16c64:	4602      	mov	r2, r0
   16c66:	210c      	movs	r1, #12
   16c68:	4628      	mov	r0, r5
   16c6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c6e:	f7fd bce9 	b.w	14644 <d_make_comp>
   16c72:	4628      	mov	r0, r5
   16c74:	f7fe fdba 	bl	157ec <d_name>
   16c78:	2300      	movs	r3, #0
   16c7a:	4602      	mov	r2, r0
   16c7c:	2114      	movs	r1, #20
   16c7e:	4628      	mov	r0, r5
   16c80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c84:	f7fd bcde 	b.w	14644 <d_make_comp>
   16c88:	4628      	mov	r0, r5
   16c8a:	f7fe ff6b 	bl	15b64 <d_type>
   16c8e:	2300      	movs	r3, #0
   16c90:	4602      	mov	r2, r0
   16c92:	210e      	movs	r1, #14
   16c94:	4628      	mov	r0, r5
   16c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c9a:	f7fd bcd3 	b.w	14644 <d_make_comp>
   16c9e:	4628      	mov	r0, r5
   16ca0:	f7fe ff60 	bl	15b64 <d_type>
   16ca4:	4604      	mov	r4, r0
   16ca6:	f105 000c 	add.w	r0, r5, #12
   16caa:	f7fd fe1d 	bl	148e8 <d_number.isra.0>
   16cae:	2800      	cmp	r0, #0
   16cb0:	f6ff ada1 	blt.w	167f6 <d_encoding+0x62>
   16cb4:	68eb      	ldr	r3, [r5, #12]
   16cb6:	781a      	ldrb	r2, [r3, #0]
   16cb8:	2a5f      	cmp	r2, #95	; 0x5f
   16cba:	f47f ad9c 	bne.w	167f6 <d_encoding+0x62>
   16cbe:	3301      	adds	r3, #1
   16cc0:	60eb      	str	r3, [r5, #12]
   16cc2:	4628      	mov	r0, r5
   16cc4:	f7fe ff4e 	bl	15b64 <d_type>
   16cc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16cca:	1d59      	adds	r1, r3, #5
   16ccc:	6329      	str	r1, [r5, #48]	; 0x30
   16cce:	4602      	mov	r2, r0
   16cd0:	4623      	mov	r3, r4
   16cd2:	4628      	mov	r0, r5
   16cd4:	210b      	movs	r1, #11
   16cd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cda:	f7fd bcb3 	b.w	14644 <d_make_comp>
   16cde:	685b      	ldr	r3, [r3, #4]
   16ce0:	e574      	b.n	167cc <d_encoding+0x38>
   16ce2:	68eb      	ldr	r3, [r5, #12]
   16ce4:	440b      	add	r3, r1
   16ce6:	60eb      	str	r3, [r5, #12]
   16ce8:	2400      	movs	r4, #0
   16cea:	e585      	b.n	167f8 <d_encoding+0x64>
   16cec:	787b      	ldrb	r3, [r7, #1]
   16cee:	2b53      	cmp	r3, #83	; 0x53
   16cf0:	d027      	beq.n	16d42 <d_encoding+0x5ae>
   16cf2:	2b5f      	cmp	r3, #95	; 0x5f
   16cf4:	d023      	beq.n	16d3e <d_encoding+0x5aa>
   16cf6:	2b24      	cmp	r3, #36	; 0x24
   16cf8:	f47f ad7d 	bne.w	167f6 <d_encoding+0x62>
   16cfc:	4618      	mov	r0, r3
   16cfe:	6969      	ldr	r1, [r5, #20]
   16d00:	69ab      	ldr	r3, [r5, #24]
   16d02:	4299      	cmp	r1, r3
   16d04:	da1f      	bge.n	16d46 <d_encoding+0x5b2>
   16d06:	692c      	ldr	r4, [r5, #16]
   16d08:	1c4f      	adds	r7, r1, #1
   16d0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16d0e:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16d12:	616f      	str	r7, [r5, #20]
   16d14:	d017      	beq.n	16d46 <d_encoding+0x5b2>
   16d16:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16d1a:	6058      	str	r0, [r3, #4]
   16d1c:	68ef      	ldr	r7, [r5, #12]
   16d1e:	3702      	adds	r7, #2
   16d20:	3e02      	subs	r6, #2
   16d22:	60ef      	str	r7, [r5, #12]
   16d24:	e6db      	b.n	16ade <d_encoding+0x34a>
   16d26:	461a      	mov	r2, r3
   16d28:	e6e4      	b.n	16af4 <d_encoding+0x360>
   16d2a:	f7ff fd33 	bl	16794 <d_encoding>
   16d2e:	2300      	movs	r3, #0
   16d30:	4602      	mov	r2, r0
   16d32:	2148      	movs	r1, #72	; 0x48
   16d34:	4628      	mov	r0, r5
   16d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d3a:	f7fd bc83 	b.w	14644 <d_make_comp>
   16d3e:	202e      	movs	r0, #46	; 0x2e
   16d40:	e7dd      	b.n	16cfe <d_encoding+0x56a>
   16d42:	202f      	movs	r0, #47	; 0x2f
   16d44:	e7db      	b.n	16cfe <d_encoding+0x56a>
   16d46:	68eb      	ldr	r3, [r5, #12]
   16d48:	3302      	adds	r3, #2
   16d4a:	60eb      	str	r3, [r5, #12]
   16d4c:	2400      	movs	r4, #0
   16d4e:	e553      	b.n	167f8 <d_encoding+0x64>

00016d50 <d_expr_primary>:
   16d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d52:	68c2      	ldr	r2, [r0, #12]
   16d54:	7813      	ldrb	r3, [r2, #0]
   16d56:	2b4c      	cmp	r3, #76	; 0x4c
   16d58:	d001      	beq.n	16d5e <d_expr_primary+0xe>
   16d5a:	2000      	movs	r0, #0
   16d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d5e:	1c53      	adds	r3, r2, #1
   16d60:	60c3      	str	r3, [r0, #12]
   16d62:	7851      	ldrb	r1, [r2, #1]
   16d64:	295f      	cmp	r1, #95	; 0x5f
   16d66:	4605      	mov	r5, r0
   16d68:	d03a      	beq.n	16de0 <d_expr_primary+0x90>
   16d6a:	295a      	cmp	r1, #90	; 0x5a
   16d6c:	d03f      	beq.n	16dee <d_expr_primary+0x9e>
   16d6e:	f7fe fef9 	bl	15b64 <d_type>
   16d72:	2800      	cmp	r0, #0
   16d74:	d0f1      	beq.n	16d5a <d_expr_primary+0xa>
   16d76:	7803      	ldrb	r3, [r0, #0]
   16d78:	2b27      	cmp	r3, #39	; 0x27
   16d7a:	d046      	beq.n	16e0a <d_expr_primary+0xba>
   16d7c:	68ee      	ldr	r6, [r5, #12]
   16d7e:	7833      	ldrb	r3, [r6, #0]
   16d80:	2b6e      	cmp	r3, #110	; 0x6e
   16d82:	d04b      	beq.n	16e1c <d_expr_primary+0xcc>
   16d84:	213c      	movs	r1, #60	; 0x3c
   16d86:	2b45      	cmp	r3, #69	; 0x45
   16d88:	d04e      	beq.n	16e28 <d_expr_primary+0xd8>
   16d8a:	2b00      	cmp	r3, #0
   16d8c:	d0e5      	beq.n	16d5a <d_expr_primary+0xa>
   16d8e:	4633      	mov	r3, r6
   16d90:	e001      	b.n	16d96 <d_expr_primary+0x46>
   16d92:	2c00      	cmp	r4, #0
   16d94:	d0e1      	beq.n	16d5a <d_expr_primary+0xa>
   16d96:	3301      	adds	r3, #1
   16d98:	60eb      	str	r3, [r5, #12]
   16d9a:	781c      	ldrb	r4, [r3, #0]
   16d9c:	2c45      	cmp	r4, #69	; 0x45
   16d9e:	d1f8      	bne.n	16d92 <d_expr_primary+0x42>
   16da0:	1b9c      	subs	r4, r3, r6
   16da2:	696b      	ldr	r3, [r5, #20]
   16da4:	69aa      	ldr	r2, [r5, #24]
   16da6:	4293      	cmp	r3, r2
   16da8:	da2d      	bge.n	16e06 <d_expr_primary+0xb6>
   16daa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16dae:	692f      	ldr	r7, [r5, #16]
   16db0:	3301      	adds	r3, #1
   16db2:	0092      	lsls	r2, r2, #2
   16db4:	616b      	str	r3, [r5, #20]
   16db6:	18bb      	adds	r3, r7, r2
   16db8:	d025      	beq.n	16e06 <d_expr_primary+0xb6>
   16dba:	b326      	cbz	r6, 16e06 <d_expr_primary+0xb6>
   16dbc:	b31c      	cbz	r4, 16e06 <d_expr_primary+0xb6>
   16dbe:	f04f 0e00 	mov.w	lr, #0
   16dc2:	f807 e002 	strb.w	lr, [r7, r2]
   16dc6:	605e      	str	r6, [r3, #4]
   16dc8:	609c      	str	r4, [r3, #8]
   16dca:	4602      	mov	r2, r0
   16dcc:	4628      	mov	r0, r5
   16dce:	f7fd fc39 	bl	14644 <d_make_comp>
   16dd2:	68eb      	ldr	r3, [r5, #12]
   16dd4:	781a      	ldrb	r2, [r3, #0]
   16dd6:	2a45      	cmp	r2, #69	; 0x45
   16dd8:	d1bf      	bne.n	16d5a <d_expr_primary+0xa>
   16dda:	3301      	adds	r3, #1
   16ddc:	60eb      	str	r3, [r5, #12]
   16dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16de0:	1c93      	adds	r3, r2, #2
   16de2:	60c3      	str	r3, [r0, #12]
   16de4:	7892      	ldrb	r2, [r2, #2]
   16de6:	2a5a      	cmp	r2, #90	; 0x5a
   16de8:	bf18      	it	ne
   16dea:	2000      	movne	r0, #0
   16dec:	d107      	bne.n	16dfe <d_expr_primary+0xae>
   16dee:	3301      	adds	r3, #1
   16df0:	60eb      	str	r3, [r5, #12]
   16df2:	2100      	movs	r1, #0
   16df4:	4628      	mov	r0, r5
   16df6:	f7ff fccd 	bl	16794 <d_encoding>
   16dfa:	68eb      	ldr	r3, [r5, #12]
   16dfc:	781a      	ldrb	r2, [r3, #0]
   16dfe:	2a45      	cmp	r2, #69	; 0x45
   16e00:	d0eb      	beq.n	16dda <d_expr_primary+0x8a>
   16e02:	2000      	movs	r0, #0
   16e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e06:	2300      	movs	r3, #0
   16e08:	e7df      	b.n	16dca <d_expr_primary+0x7a>
   16e0a:	6843      	ldr	r3, [r0, #4]
   16e0c:	7c1a      	ldrb	r2, [r3, #16]
   16e0e:	2a00      	cmp	r2, #0
   16e10:	d0b4      	beq.n	16d7c <d_expr_primary+0x2c>
   16e12:	685a      	ldr	r2, [r3, #4]
   16e14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16e16:	1a9b      	subs	r3, r3, r2
   16e18:	632b      	str	r3, [r5, #48]	; 0x30
   16e1a:	e7af      	b.n	16d7c <d_expr_primary+0x2c>
   16e1c:	1c72      	adds	r2, r6, #1
   16e1e:	60ea      	str	r2, [r5, #12]
   16e20:	7873      	ldrb	r3, [r6, #1]
   16e22:	213d      	movs	r1, #61	; 0x3d
   16e24:	4616      	mov	r6, r2
   16e26:	e7ae      	b.n	16d86 <d_expr_primary+0x36>
   16e28:	2400      	movs	r4, #0
   16e2a:	e7ba      	b.n	16da2 <d_expr_primary+0x52>

00016e2c <d_print_comp_inner>:
   16e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e30:	4604      	mov	r4, r0
   16e32:	b095      	sub	sp, #84	; 0x54
   16e34:	2a00      	cmp	r2, #0
   16e36:	f000 80db 	beq.w	16ff0 <d_print_comp_inner+0x1c4>
   16e3a:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16e3e:	2f00      	cmp	r7, #0
   16e40:	f040 80c2 	bne.w	16fc8 <d_print_comp_inner+0x19c>
   16e44:	7813      	ldrb	r3, [r2, #0]
   16e46:	4688      	mov	r8, r1
   16e48:	4615      	mov	r5, r2
   16e4a:	2b4d      	cmp	r3, #77	; 0x4d
   16e4c:	f201 81e6 	bhi.w	1821c <d_print_comp_inner+0x13f0>
   16e50:	e8df f013 	tbh	[pc, r3, lsl #1]
   16e54:	043c045a 	.word	0x043c045a
   16e58:	03a4043c 	.word	0x03a4043c
   16e5c:	048904a5 	.word	0x048904a5
   16e60:	038e04ea 	.word	0x038e04ea
   16e64:	0330037c 	.word	0x0330037c
   16e68:	030a0356 	.word	0x030a0356
   16e6c:	029802e4 	.word	0x029802e4
   16e70:	027202be 	.word	0x027202be
   16e74:	01f0024c 	.word	0x01f0024c
   16e78:	01ca0226 	.word	0x01ca0226
   16e7c:	015801a4 	.word	0x015801a4
   16e80:	0132017e 	.word	0x0132017e
   16e84:	00f2010b 	.word	0x00f2010b
   16e88:	00f200f2 	.word	0x00f200f2
   16e8c:	00d400d4 	.word	0x00d400d4
   16e90:	00d400d4 	.word	0x00d400d4
   16e94:	00d400d4 	.word	0x00d400d4
   16e98:	06d500d4 	.word	0x06d500d4
   16e9c:	00d406d5 	.word	0x00d406d5
   16ea0:	06a900d4 	.word	0x06a900d4
   16ea4:	069306fc 	.word	0x069306fc
   16ea8:	0701071d 	.word	0x0701071d
   16eac:	07010788 	.word	0x07010788
   16eb0:	057b057b 	.word	0x057b057b
   16eb4:	06060630 	.word	0x06060630
   16eb8:	09e405e0 	.word	0x09e405e0
   16ebc:	068e05ad 	.word	0x068e05ad
   16ec0:	004e0654 	.word	0x004e0654
   16ec4:	094c0485 	.word	0x094c0485
   16ec8:	08df08df 	.word	0x08df08df
   16ecc:	08ae08ae 	.word	0x08ae08ae
   16ed0:	05480888 	.word	0x05480888
   16ed4:	08e4053a 	.word	0x08e4053a
   16ed8:	09be0514 	.word	0x09be0514
   16edc:	09980914 	.word	0x09980914
   16ee0:	07cb09e4 	.word	0x07cb09e4
   16ee4:	07f10862 	.word	0x07f10862
   16ee8:	04130817 	.word	0x04130817
   16eec:	055200d4 	.word	0x055200d4
   16ef0:	68ab      	ldr	r3, [r5, #8]
   16ef2:	781b      	ldrb	r3, [r3, #0]
   16ef4:	2b38      	cmp	r3, #56	; 0x38
   16ef6:	d17b      	bne.n	16ff0 <d_print_comp_inner+0x1c4>
   16ef8:	686a      	ldr	r2, [r5, #4]
   16efa:	6853      	ldr	r3, [r2, #4]
   16efc:	681b      	ldr	r3, [r3, #0]
   16efe:	7859      	ldrb	r1, [r3, #1]
   16f00:	2963      	cmp	r1, #99	; 0x63
   16f02:	f002 814a 	beq.w	1919a <d_print_comp_inner+0x236e>
   16f06:	f105 0308 	add.w	r3, r5, #8
   16f0a:	4641      	mov	r1, r8
   16f0c:	4620      	mov	r0, r4
   16f0e:	f003 fbbb 	bl	1a688 <d_maybe_print_fold_expression.isra.15>
   16f12:	4606      	mov	r6, r0
   16f14:	2800      	cmp	r0, #0
   16f16:	d157      	bne.n	16fc8 <d_print_comp_inner+0x19c>
   16f18:	686b      	ldr	r3, [r5, #4]
   16f1a:	781a      	ldrb	r2, [r3, #0]
   16f1c:	2a31      	cmp	r2, #49	; 0x31
   16f1e:	f002 836b 	beq.w	195f8 <d_print_comp_inner+0x27cc>
   16f22:	685b      	ldr	r3, [r3, #4]
   16f24:	49c7      	ldr	r1, [pc, #796]	; (17244 <d_print_comp_inner+0x418>)
   16f26:	6818      	ldr	r0, [r3, #0]
   16f28:	f007 fe4e 	bl	1ebc8 <strcmp>
   16f2c:	68ab      	ldr	r3, [r5, #8]
   16f2e:	b920      	cbnz	r0, 16f3a <d_print_comp_inner+0x10e>
   16f30:	685a      	ldr	r2, [r3, #4]
   16f32:	7811      	ldrb	r1, [r2, #0]
   16f34:	2903      	cmp	r1, #3
   16f36:	f002 83a5 	beq.w	19684 <d_print_comp_inner+0x2858>
   16f3a:	685a      	ldr	r2, [r3, #4]
   16f3c:	4641      	mov	r1, r8
   16f3e:	4620      	mov	r0, r4
   16f40:	f003 fb3e 	bl	1a5c0 <d_print_subexpr>
   16f44:	686f      	ldr	r7, [r5, #4]
   16f46:	49c0      	ldr	r1, [pc, #768]	; (17248 <d_print_comp_inner+0x41c>)
   16f48:	687b      	ldr	r3, [r7, #4]
   16f4a:	f8d3 9000 	ldr.w	r9, [r3]
   16f4e:	4648      	mov	r0, r9
   16f50:	f007 fe3a 	bl	1ebc8 <strcmp>
   16f54:	4606      	mov	r6, r0
   16f56:	2800      	cmp	r0, #0
   16f58:	f042 826f 	bne.w	1943a <d_print_comp_inner+0x260e>
   16f5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16f60:	29ff      	cmp	r1, #255	; 0xff
   16f62:	f002 844a 	beq.w	197fa <d_print_comp_inner+0x29ce>
   16f66:	1c4a      	adds	r2, r1, #1
   16f68:	235b      	movs	r3, #91	; 0x5b
   16f6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16f6e:	5463      	strb	r3, [r4, r1]
   16f70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16f74:	68ab      	ldr	r3, [r5, #8]
   16f76:	4641      	mov	r1, r8
   16f78:	689a      	ldr	r2, [r3, #8]
   16f7a:	4620      	mov	r0, r4
   16f7c:	f002 fcfa 	bl	19974 <d_print_comp>
   16f80:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16f84:	29ff      	cmp	r1, #255	; 0xff
   16f86:	f002 8425 	beq.w	197d4 <d_print_comp_inner+0x29a8>
   16f8a:	235d      	movs	r3, #93	; 0x5d
   16f8c:	1c4a      	adds	r2, r1, #1
   16f8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16f92:	5463      	strb	r3, [r4, r1]
   16f94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16f98:	686b      	ldr	r3, [r5, #4]
   16f9a:	781a      	ldrb	r2, [r3, #0]
   16f9c:	2a31      	cmp	r2, #49	; 0x31
   16f9e:	d113      	bne.n	16fc8 <d_print_comp_inner+0x19c>
   16fa0:	685b      	ldr	r3, [r3, #4]
   16fa2:	689a      	ldr	r2, [r3, #8]
   16fa4:	2a01      	cmp	r2, #1
   16fa6:	d10f      	bne.n	16fc8 <d_print_comp_inner+0x19c>
   16fa8:	685b      	ldr	r3, [r3, #4]
   16faa:	781b      	ldrb	r3, [r3, #0]
   16fac:	2b3e      	cmp	r3, #62	; 0x3e
   16fae:	d10b      	bne.n	16fc8 <d_print_comp_inner+0x19c>
   16fb0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16fb4:	29ff      	cmp	r1, #255	; 0xff
   16fb6:	f002 8482 	beq.w	198be <d_print_comp_inner+0x2a92>
   16fba:	2329      	movs	r3, #41	; 0x29
   16fbc:	1c4a      	adds	r2, r1, #1
   16fbe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16fc2:	5463      	strb	r3, [r4, r1]
   16fc4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16fc8:	b015      	add	sp, #84	; 0x54
   16fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16fd2:	2b00      	cmp	r3, #0
   16fd4:	f2c1 84a4 	blt.w	18920 <d_print_comp_inner+0x1af4>
   16fd8:	2b00      	cmp	r3, #0
   16fda:	f002 8432 	beq.w	19842 <d_print_comp_inner+0x2a16>
   16fde:	6880      	ldr	r0, [r0, #8]
   16fe0:	3b01      	subs	r3, #1
   16fe2:	b110      	cbz	r0, 16fea <d_print_comp_inner+0x1be>
   16fe4:	7802      	ldrb	r2, [r0, #0]
   16fe6:	2a2f      	cmp	r2, #47	; 0x2f
   16fe8:	d0f6      	beq.n	16fd8 <d_print_comp_inner+0x1ac>
   16fea:	b10f      	cbz	r7, 16ff0 <d_print_comp_inner+0x1c4>
   16fec:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16ff0:	2301      	movs	r3, #1
   16ff2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16ff6:	b015      	add	sp, #84	; 0x54
   16ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ffc:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   17000:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17004:	9505      	str	r5, [sp, #20]
   17006:	ab14      	add	r3, sp, #80	; 0x50
   17008:	2100      	movs	r1, #0
   1700a:	f843 cd40 	str.w	ip, [r3, #-64]!
   1700e:	9106      	str	r1, [sp, #24]
   17010:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17014:	9207      	str	r2, [sp, #28]
   17016:	686a      	ldr	r2, [r5, #4]
   17018:	4641      	mov	r1, r8
   1701a:	4620      	mov	r0, r4
   1701c:	f002 fcaa 	bl	19974 <d_print_comp>
   17020:	9b06      	ldr	r3, [sp, #24]
   17022:	2b00      	cmp	r3, #0
   17024:	f001 8389 	beq.w	1873a <d_print_comp_inner+0x190e>
   17028:	9b04      	ldr	r3, [sp, #16]
   1702a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1702e:	2f00      	cmp	r7, #0
   17030:	d0ca      	beq.n	16fc8 <d_print_comp_inner+0x19c>
   17032:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   17036:	e7c7      	b.n	16fc8 <d_print_comp_inner+0x19c>
   17038:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1703c:	f1bc 0f00 	cmp.w	ip, #0
   17040:	d0de      	beq.n	17000 <d_print_comp_inner+0x1d4>
   17042:	4662      	mov	r2, ip
   17044:	e005      	b.n	17052 <d_print_comp_inner+0x226>
   17046:	428b      	cmp	r3, r1
   17048:	f001 86b8 	beq.w	18dbc <d_print_comp_inner+0x1f90>
   1704c:	6812      	ldr	r2, [r2, #0]
   1704e:	2a00      	cmp	r2, #0
   17050:	d0d6      	beq.n	17000 <d_print_comp_inner+0x1d4>
   17052:	6890      	ldr	r0, [r2, #8]
   17054:	2800      	cmp	r0, #0
   17056:	d1f9      	bne.n	1704c <d_print_comp_inner+0x220>
   17058:	6851      	ldr	r1, [r2, #4]
   1705a:	7809      	ldrb	r1, [r1, #0]
   1705c:	f1a1 0e19 	sub.w	lr, r1, #25
   17060:	f1be 0f02 	cmp.w	lr, #2
   17064:	d9ef      	bls.n	17046 <d_print_comp_inner+0x21a>
   17066:	4607      	mov	r7, r0
   17068:	e7ca      	b.n	17000 <d_print_comp_inner+0x1d4>
   1706a:	68af      	ldr	r7, [r5, #8]
   1706c:	686d      	ldr	r5, [r5, #4]
   1706e:	2f00      	cmp	r7, #0
   17070:	d0aa      	beq.n	16fc8 <d_print_comp_inner+0x19c>
   17072:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17076:	442f      	add	r7, r5
   17078:	f04f 0800 	mov.w	r8, #0
   1707c:	e008      	b.n	17090 <d_print_comp_inner+0x264>
   1707e:	460b      	mov	r3, r1
   17080:	3101      	adds	r1, #1
   17082:	42bd      	cmp	r5, r7
   17084:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17088:	54e6      	strb	r6, [r4, r3]
   1708a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1708e:	d09b      	beq.n	16fc8 <d_print_comp_inner+0x19c>
   17090:	29ff      	cmp	r1, #255	; 0xff
   17092:	f815 6b01 	ldrb.w	r6, [r5], #1
   17096:	d1f2      	bne.n	1707e <d_print_comp_inner+0x252>
   17098:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1709c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   170a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170a4:	4620      	mov	r0, r4
   170a6:	4798      	blx	r3
   170a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170ac:	3301      	adds	r3, #1
   170ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170b2:	2101      	movs	r1, #1
   170b4:	2300      	movs	r3, #0
   170b6:	e7e4      	b.n	17082 <d_print_comp_inner+0x256>
   170b8:	4e64      	ldr	r6, [pc, #400]	; (1724c <d_print_comp_inner+0x420>)
   170ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170be:	f106 0a11 	add.w	sl, r6, #17
   170c2:	f04f 0900 	mov.w	r9, #0
   170c6:	e009      	b.n	170dc <d_print_comp_inner+0x2b0>
   170c8:	460b      	mov	r3, r1
   170ca:	3101      	adds	r1, #1
   170cc:	4556      	cmp	r6, sl
   170ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170d2:	54e7      	strb	r7, [r4, r3]
   170d4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170d8:	f001 8296 	beq.w	18608 <d_print_comp_inner+0x17dc>
   170dc:	29ff      	cmp	r1, #255	; 0xff
   170de:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170e2:	d1f1      	bne.n	170c8 <d_print_comp_inner+0x29c>
   170e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170e8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170f0:	4620      	mov	r0, r4
   170f2:	4798      	blx	r3
   170f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170f8:	3301      	adds	r3, #1
   170fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170fe:	2101      	movs	r1, #1
   17100:	2300      	movs	r3, #0
   17102:	e7e3      	b.n	170cc <d_print_comp_inner+0x2a0>
   17104:	4e52      	ldr	r6, [pc, #328]	; (17250 <d_print_comp_inner+0x424>)
   17106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1710a:	f106 0a19 	add.w	sl, r6, #25
   1710e:	f04f 0900 	mov.w	r9, #0
   17112:	e009      	b.n	17128 <d_print_comp_inner+0x2fc>
   17114:	460b      	mov	r3, r1
   17116:	3101      	adds	r1, #1
   17118:	4556      	cmp	r6, sl
   1711a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1711e:	54e7      	strb	r7, [r4, r3]
   17120:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17124:	f001 82a8 	beq.w	18678 <d_print_comp_inner+0x184c>
   17128:	29ff      	cmp	r1, #255	; 0xff
   1712a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1712e:	d1f1      	bne.n	17114 <d_print_comp_inner+0x2e8>
   17130:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17134:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17138:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1713c:	4620      	mov	r0, r4
   1713e:	4798      	blx	r3
   17140:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17144:	3301      	adds	r3, #1
   17146:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1714a:	2101      	movs	r1, #1
   1714c:	2300      	movs	r3, #0
   1714e:	e7e3      	b.n	17118 <d_print_comp_inner+0x2ec>
   17150:	4e40      	ldr	r6, [pc, #256]	; (17254 <d_print_comp_inner+0x428>)
   17152:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17156:	f106 0a15 	add.w	sl, r6, #21
   1715a:	f04f 0900 	mov.w	r9, #0
   1715e:	e009      	b.n	17174 <d_print_comp_inner+0x348>
   17160:	460b      	mov	r3, r1
   17162:	3101      	adds	r1, #1
   17164:	4556      	cmp	r6, sl
   17166:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1716a:	54e7      	strb	r7, [r4, r3]
   1716c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17170:	f001 8251 	beq.w	18616 <d_print_comp_inner+0x17ea>
   17174:	29ff      	cmp	r1, #255	; 0xff
   17176:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1717a:	d1f1      	bne.n	17160 <d_print_comp_inner+0x334>
   1717c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17180:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17184:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17188:	4620      	mov	r0, r4
   1718a:	4798      	blx	r3
   1718c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17190:	3301      	adds	r3, #1
   17192:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17196:	2101      	movs	r1, #1
   17198:	2300      	movs	r3, #0
   1719a:	e7e3      	b.n	17164 <d_print_comp_inner+0x338>
   1719c:	4e2e      	ldr	r6, [pc, #184]	; (17258 <d_print_comp_inner+0x42c>)
   1719e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171a2:	f106 0a16 	add.w	sl, r6, #22
   171a6:	f04f 0900 	mov.w	r9, #0
   171aa:	e009      	b.n	171c0 <d_print_comp_inner+0x394>
   171ac:	460b      	mov	r3, r1
   171ae:	3101      	adds	r1, #1
   171b0:	4556      	cmp	r6, sl
   171b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171b6:	54e7      	strb	r7, [r4, r3]
   171b8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171bc:	f001 8263 	beq.w	18686 <d_print_comp_inner+0x185a>
   171c0:	29ff      	cmp	r1, #255	; 0xff
   171c2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171c6:	d1f1      	bne.n	171ac <d_print_comp_inner+0x380>
   171c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171cc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171d4:	4620      	mov	r0, r4
   171d6:	4798      	blx	r3
   171d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171dc:	3301      	adds	r3, #1
   171de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171e2:	2101      	movs	r1, #1
   171e4:	2300      	movs	r3, #0
   171e6:	e7e3      	b.n	171b0 <d_print_comp_inner+0x384>
   171e8:	4e1c      	ldr	r6, [pc, #112]	; (1725c <d_print_comp_inner+0x430>)
   171ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171ee:	f106 0a13 	add.w	sl, r6, #19
   171f2:	f04f 0900 	mov.w	r9, #0
   171f6:	e009      	b.n	1720c <d_print_comp_inner+0x3e0>
   171f8:	460b      	mov	r3, r1
   171fa:	3101      	adds	r1, #1
   171fc:	45b2      	cmp	sl, r6
   171fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17202:	54e7      	strb	r7, [r4, r3]
   17204:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17208:	f001 8077 	beq.w	182fa <d_print_comp_inner+0x14ce>
   1720c:	29ff      	cmp	r1, #255	; 0xff
   1720e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17212:	d1f1      	bne.n	171f8 <d_print_comp_inner+0x3cc>
   17214:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17218:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1721c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17220:	4620      	mov	r0, r4
   17222:	4798      	blx	r3
   17224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17228:	3301      	adds	r3, #1
   1722a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1722e:	2101      	movs	r1, #1
   17230:	2300      	movs	r3, #0
   17232:	e7e3      	b.n	171fc <d_print_comp_inner+0x3d0>
   17234:	4e0a      	ldr	r6, [pc, #40]	; (17260 <d_print_comp_inner+0x434>)
   17236:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1723a:	f106 0a1a 	add.w	sl, r6, #26
   1723e:	f04f 0900 	mov.w	r9, #0
   17242:	e019      	b.n	17278 <d_print_comp_inner+0x44c>
   17244:	000245f8 	.word	0x000245f8
   17248:	000247f4 	.word	0x000247f4
   1724c:	00024783 	.word	0x00024783
   17250:	0002474f 	.word	0x0002474f
   17254:	0002476b 	.word	0x0002476b
   17258:	00024737 	.word	0x00024737
   1725c:	00024723 	.word	0x00024723
   17260:	000246f7 	.word	0x000246f7
   17264:	460b      	mov	r3, r1
   17266:	3101      	adds	r1, #1
   17268:	4556      	cmp	r6, sl
   1726a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1726e:	54e7      	strb	r7, [r4, r3]
   17270:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17274:	f001 804f 	beq.w	18316 <d_print_comp_inner+0x14ea>
   17278:	29ff      	cmp	r1, #255	; 0xff
   1727a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1727e:	d1f1      	bne.n	17264 <d_print_comp_inner+0x438>
   17280:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17284:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17288:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1728c:	4620      	mov	r0, r4
   1728e:	4798      	blx	r3
   17290:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17294:	3301      	adds	r3, #1
   17296:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1729a:	2101      	movs	r1, #1
   1729c:	2300      	movs	r3, #0
   1729e:	e7e3      	b.n	17268 <d_print_comp_inner+0x43c>
   172a0:	4eb5      	ldr	r6, [pc, #724]	; (17578 <d_print_comp_inner+0x74c>)
   172a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172a6:	f106 0a0f 	add.w	sl, r6, #15
   172aa:	f04f 0900 	mov.w	r9, #0
   172ae:	e009      	b.n	172c4 <d_print_comp_inner+0x498>
   172b0:	460b      	mov	r3, r1
   172b2:	3101      	adds	r1, #1
   172b4:	4556      	cmp	r6, sl
   172b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172ba:	54e7      	strb	r7, [r4, r3]
   172bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172c0:	f001 8022 	beq.w	18308 <d_print_comp_inner+0x14dc>
   172c4:	29ff      	cmp	r1, #255	; 0xff
   172c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172ca:	d1f1      	bne.n	172b0 <d_print_comp_inner+0x484>
   172cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172d8:	4620      	mov	r0, r4
   172da:	4798      	blx	r3
   172dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172e0:	3301      	adds	r3, #1
   172e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   172e6:	2101      	movs	r1, #1
   172e8:	2300      	movs	r3, #0
   172ea:	e7e3      	b.n	172b4 <d_print_comp_inner+0x488>
   172ec:	4ea3      	ldr	r6, [pc, #652]	; (1757c <d_print_comp_inner+0x750>)
   172ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172f2:	f106 0a11 	add.w	sl, r6, #17
   172f6:	f04f 0900 	mov.w	r9, #0
   172fa:	e009      	b.n	17310 <d_print_comp_inner+0x4e4>
   172fc:	460b      	mov	r3, r1
   172fe:	3101      	adds	r1, #1
   17300:	4556      	cmp	r6, sl
   17302:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17306:	54e7      	strb	r7, [r4, r3]
   17308:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1730c:	f001 800a 	beq.w	18324 <d_print_comp_inner+0x14f8>
   17310:	29ff      	cmp	r1, #255	; 0xff
   17312:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17316:	d1f1      	bne.n	172fc <d_print_comp_inner+0x4d0>
   17318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1731c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17320:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17324:	4620      	mov	r0, r4
   17326:	4798      	blx	r3
   17328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1732c:	3301      	adds	r3, #1
   1732e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17332:	2101      	movs	r1, #1
   17334:	2300      	movs	r3, #0
   17336:	e7e3      	b.n	17300 <d_print_comp_inner+0x4d4>
   17338:	4e91      	ldr	r6, [pc, #580]	; (17580 <d_print_comp_inner+0x754>)
   1733a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1733e:	f106 0a15 	add.w	sl, r6, #21
   17342:	f04f 0900 	mov.w	r9, #0
   17346:	e009      	b.n	1735c <d_print_comp_inner+0x530>
   17348:	460b      	mov	r3, r1
   1734a:	3101      	adds	r1, #1
   1734c:	4556      	cmp	r6, sl
   1734e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17352:	54e7      	strb	r7, [r4, r3]
   17354:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17358:	f000 87b3 	beq.w	182c2 <d_print_comp_inner+0x1496>
   1735c:	29ff      	cmp	r1, #255	; 0xff
   1735e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17362:	d1f1      	bne.n	17348 <d_print_comp_inner+0x51c>
   17364:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17368:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1736c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17370:	4620      	mov	r0, r4
   17372:	4798      	blx	r3
   17374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17378:	3301      	adds	r3, #1
   1737a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1737e:	2101      	movs	r1, #1
   17380:	2300      	movs	r3, #0
   17382:	e7e3      	b.n	1734c <d_print_comp_inner+0x520>
   17384:	4e7f      	ldr	r6, [pc, #508]	; (17584 <d_print_comp_inner+0x758>)
   17386:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1738a:	f106 0a12 	add.w	sl, r6, #18
   1738e:	f04f 0900 	mov.w	r9, #0
   17392:	e009      	b.n	173a8 <d_print_comp_inner+0x57c>
   17394:	460b      	mov	r3, r1
   17396:	3101      	adds	r1, #1
   17398:	45b2      	cmp	sl, r6
   1739a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1739e:	54e7      	strb	r7, [r4, r3]
   173a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173a4:	f000 879b 	beq.w	182de <d_print_comp_inner+0x14b2>
   173a8:	29ff      	cmp	r1, #255	; 0xff
   173aa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   173ae:	d1f1      	bne.n	17394 <d_print_comp_inner+0x568>
   173b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   173b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173bc:	4620      	mov	r0, r4
   173be:	4798      	blx	r3
   173c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173c4:	3301      	adds	r3, #1
   173c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173ca:	2101      	movs	r1, #1
   173cc:	2300      	movs	r3, #0
   173ce:	e7e3      	b.n	17398 <d_print_comp_inner+0x56c>
   173d0:	4e6d      	ldr	r6, [pc, #436]	; (17588 <d_print_comp_inner+0x75c>)
   173d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173d6:	f106 0a10 	add.w	sl, r6, #16
   173da:	f04f 0900 	mov.w	r9, #0
   173de:	e009      	b.n	173f4 <d_print_comp_inner+0x5c8>
   173e0:	460b      	mov	r3, r1
   173e2:	3101      	adds	r1, #1
   173e4:	4556      	cmp	r6, sl
   173e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173ea:	54e7      	strb	r7, [r4, r3]
   173ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173f0:	f000 876e 	beq.w	182d0 <d_print_comp_inner+0x14a4>
   173f4:	29ff      	cmp	r1, #255	; 0xff
   173f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   173fa:	d1f1      	bne.n	173e0 <d_print_comp_inner+0x5b4>
   173fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17400:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17404:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17408:	4620      	mov	r0, r4
   1740a:	4798      	blx	r3
   1740c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17410:	3301      	adds	r3, #1
   17412:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17416:	2101      	movs	r1, #1
   17418:	2300      	movs	r3, #0
   1741a:	e7e3      	b.n	173e4 <d_print_comp_inner+0x5b8>
   1741c:	4e5b      	ldr	r6, [pc, #364]	; (1758c <d_print_comp_inner+0x760>)
   1741e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17422:	f106 0a0d 	add.w	sl, r6, #13
   17426:	f04f 0900 	mov.w	r9, #0
   1742a:	e009      	b.n	17440 <d_print_comp_inner+0x614>
   1742c:	460b      	mov	r3, r1
   1742e:	3101      	adds	r1, #1
   17430:	4556      	cmp	r6, sl
   17432:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17436:	54e7      	strb	r7, [r4, r3]
   17438:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1743c:	f000 8756 	beq.w	182ec <d_print_comp_inner+0x14c0>
   17440:	29ff      	cmp	r1, #255	; 0xff
   17442:	f816 7b01 	ldrb.w	r7, [r6], #1
   17446:	d1f1      	bne.n	1742c <d_print_comp_inner+0x600>
   17448:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1744c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17450:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17454:	4620      	mov	r0, r4
   17456:	4798      	blx	r3
   17458:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1745c:	3301      	adds	r3, #1
   1745e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17462:	2101      	movs	r1, #1
   17464:	2300      	movs	r3, #0
   17466:	e7e3      	b.n	17430 <d_print_comp_inner+0x604>
   17468:	4e49      	ldr	r6, [pc, #292]	; (17590 <d_print_comp_inner+0x764>)
   1746a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1746e:	f106 0a18 	add.w	sl, r6, #24
   17472:	f04f 0900 	mov.w	r9, #0
   17476:	e009      	b.n	1748c <d_print_comp_inner+0x660>
   17478:	460b      	mov	r3, r1
   1747a:	3101      	adds	r1, #1
   1747c:	45b2      	cmp	sl, r6
   1747e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17482:	54e7      	strb	r7, [r4, r3]
   17484:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17488:	f000 86e3 	beq.w	18252 <d_print_comp_inner+0x1426>
   1748c:	29ff      	cmp	r1, #255	; 0xff
   1748e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17492:	d1f1      	bne.n	17478 <d_print_comp_inner+0x64c>
   17494:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17498:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1749c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   174a0:	4620      	mov	r0, r4
   174a2:	4798      	blx	r3
   174a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   174a8:	3301      	adds	r3, #1
   174aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   174ae:	2101      	movs	r1, #1
   174b0:	2300      	movs	r3, #0
   174b2:	e7e3      	b.n	1747c <d_print_comp_inner+0x650>
   174b4:	4e37      	ldr	r6, [pc, #220]	; (17594 <d_print_comp_inner+0x768>)
   174b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   174ba:	f106 0a0b 	add.w	sl, r6, #11
   174be:	f04f 0900 	mov.w	r9, #0
   174c2:	e009      	b.n	174d8 <d_print_comp_inner+0x6ac>
   174c4:	460b      	mov	r3, r1
   174c6:	3101      	adds	r1, #1
   174c8:	45b2      	cmp	sl, r6
   174ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174ce:	54e7      	strb	r7, [r4, r3]
   174d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   174d4:	f000 87ca 	beq.w	1846c <d_print_comp_inner+0x1640>
   174d8:	29ff      	cmp	r1, #255	; 0xff
   174da:	f816 7b01 	ldrb.w	r7, [r6], #1
   174de:	d1f1      	bne.n	174c4 <d_print_comp_inner+0x698>
   174e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   174e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   174e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   174ec:	4620      	mov	r0, r4
   174ee:	4798      	blx	r3
   174f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   174f4:	3301      	adds	r3, #1
   174f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   174fa:	2101      	movs	r1, #1
   174fc:	2300      	movs	r3, #0
   174fe:	e7e3      	b.n	174c8 <d_print_comp_inner+0x69c>
   17500:	4e25      	ldr	r6, [pc, #148]	; (17598 <d_print_comp_inner+0x76c>)
   17502:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17506:	f106 0a08 	add.w	sl, r6, #8
   1750a:	f04f 0900 	mov.w	r9, #0
   1750e:	e009      	b.n	17524 <d_print_comp_inner+0x6f8>
   17510:	460b      	mov	r3, r1
   17512:	3101      	adds	r1, #1
   17514:	45b2      	cmp	sl, r6
   17516:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1751a:	54e7      	strb	r7, [r4, r3]
   1751c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17520:	f000 86c8 	beq.w	182b4 <d_print_comp_inner+0x1488>
   17524:	29ff      	cmp	r1, #255	; 0xff
   17526:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1752a:	d1f1      	bne.n	17510 <d_print_comp_inner+0x6e4>
   1752c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17530:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17534:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17538:	4620      	mov	r0, r4
   1753a:	4798      	blx	r3
   1753c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17540:	3301      	adds	r3, #1
   17542:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17546:	2101      	movs	r1, #1
   17548:	2300      	movs	r3, #0
   1754a:	e7e3      	b.n	17514 <d_print_comp_inner+0x6e8>
   1754c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17550:	29ff      	cmp	r1, #255	; 0xff
   17552:	f001 847c 	beq.w	18e4e <d_print_comp_inner+0x2022>
   17556:	1c4a      	adds	r2, r1, #1
   17558:	237e      	movs	r3, #126	; 0x7e
   1755a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1755e:	5463      	strb	r3, [r4, r1]
   17560:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17564:	4641      	mov	r1, r8
   17566:	68aa      	ldr	r2, [r5, #8]
   17568:	4620      	mov	r0, r4
   1756a:	f002 fa03 	bl	19974 <d_print_comp>
   1756e:	e52b      	b.n	16fc8 <d_print_comp_inner+0x19c>
   17570:	68aa      	ldr	r2, [r5, #8]
   17572:	f002 f9ff 	bl	19974 <d_print_comp>
   17576:	e527      	b.n	16fc8 <d_print_comp_inner+0x19c>
   17578:	00024713 	.word	0x00024713
   1757c:	000246e3 	.word	0x000246e3
   17580:	000246df 	.word	0x000246df
   17584:	000246b7 	.word	0x000246b7
   17588:	000246cb 	.word	0x000246cb
   1758c:	000246a8 	.word	0x000246a8
   17590:	00024683 	.word	0x00024683
   17594:	0002466c 	.word	0x0002466c
   17598:	00024677 	.word	0x00024677
   1759c:	2200      	movs	r2, #0
   1759e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   175a2:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   175a6:	686e      	ldr	r6, [r5, #4]
   175a8:	9300      	str	r3, [sp, #0]
   175aa:	2e00      	cmp	r6, #0
   175ac:	f000 864c 	beq.w	18248 <d_print_comp_inner+0x141c>
   175b0:	f10d 0910 	add.w	r9, sp, #16
   175b4:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   175b8:	4617      	mov	r7, r2
   175ba:	4696      	mov	lr, r2
   175bc:	464b      	mov	r3, r9
   175be:	7831      	ldrb	r1, [r6, #0]
   175c0:	601a      	str	r2, [r3, #0]
   175c2:	f1a1 021c 	sub.w	r2, r1, #28
   175c6:	2a04      	cmp	r2, #4
   175c8:	605e      	str	r6, [r3, #4]
   175ca:	f8c3 e008 	str.w	lr, [r3, #8]
   175ce:	f8c3 c00c 	str.w	ip, [r3, #12]
   175d2:	f107 0701 	add.w	r7, r7, #1
   175d6:	4618      	mov	r0, r3
   175d8:	461a      	mov	r2, r3
   175da:	f240 862a 	bls.w	18232 <d_print_comp_inner+0x1406>
   175de:	294c      	cmp	r1, #76	; 0x4c
   175e0:	f000 8627 	beq.w	18232 <d_print_comp_inner+0x1406>
   175e4:	2904      	cmp	r1, #4
   175e6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   175ea:	f001 87bb 	beq.w	19564 <d_print_comp_inner+0x2738>
   175ee:	2902      	cmp	r1, #2
   175f0:	d11a      	bne.n	17628 <d_print_comp_inner+0x7fc>
   175f2:	f8d6 b008 	ldr.w	fp, [r6, #8]
   175f6:	f89b 3000 	ldrb.w	r3, [fp]
   175fa:	2b46      	cmp	r3, #70	; 0x46
   175fc:	f002 8035 	beq.w	1966a <d_print_comp_inner+0x283e>
   17600:	462b      	mov	r3, r5
   17602:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   17606:	9601      	str	r6, [sp, #4]
   17608:	465d      	mov	r5, fp
   1760a:	4676      	mov	r6, lr
   1760c:	46a2      	mov	sl, r4
   1760e:	469b      	mov	fp, r3
   17610:	782b      	ldrb	r3, [r5, #0]
   17612:	f1a3 021c 	sub.w	r2, r3, #28
   17616:	2a04      	cmp	r2, #4
   17618:	f241 805d 	bls.w	186d6 <d_print_comp_inner+0x18aa>
   1761c:	2b4c      	cmp	r3, #76	; 0x4c
   1761e:	f001 805a 	beq.w	186d6 <d_print_comp_inner+0x18aa>
   17622:	9e01      	ldr	r6, [sp, #4]
   17624:	4654      	mov	r4, sl
   17626:	465d      	mov	r5, fp
   17628:	68aa      	ldr	r2, [r5, #8]
   1762a:	4641      	mov	r1, r8
   1762c:	4620      	mov	r0, r4
   1762e:	f002 f9a1 	bl	19974 <d_print_comp>
   17632:	7833      	ldrb	r3, [r6, #0]
   17634:	2b04      	cmp	r3, #4
   17636:	f002 8020 	beq.w	1967a <d_print_comp_inner+0x284e>
   1763a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   1763e:	2620      	movs	r6, #32
   17640:	f859 5c08 	ldr.w	r5, [r9, #-8]
   17644:	3f01      	subs	r7, #1
   17646:	b985      	cbnz	r5, 1766a <d_print_comp_inner+0x83e>
   17648:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1764c:	29ff      	cmp	r1, #255	; 0xff
   1764e:	f002 8043 	beq.w	196d8 <d_print_comp_inner+0x28ac>
   17652:	1c4b      	adds	r3, r1, #1
   17654:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17658:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   1765c:	5466      	strb	r6, [r4, r1]
   1765e:	4620      	mov	r0, r4
   17660:	4641      	mov	r1, r8
   17662:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17666:	f002 f995 	bl	19994 <d_print_mod>
   1766a:	f1a9 0910 	sub.w	r9, r9, #16
   1766e:	2f00      	cmp	r7, #0
   17670:	d1e6      	bne.n	17640 <d_print_comp_inner+0x814>
   17672:	9b00      	ldr	r3, [sp, #0]
   17674:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17678:	e4a6      	b.n	16fc8 <d_print_comp_inner+0x19c>
   1767a:	4ed1      	ldr	r6, [pc, #836]	; (179c0 <d_print_comp_inner+0xb94>)
   1767c:	686a      	ldr	r2, [r5, #4]
   1767e:	f002 f979 	bl	19974 <d_print_comp>
   17682:	f106 0a05 	add.w	sl, r6, #5
   17686:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1768a:	f04f 0900 	mov.w	r9, #0
   1768e:	e009      	b.n	176a4 <d_print_comp_inner+0x878>
   17690:	460b      	mov	r3, r1
   17692:	3101      	adds	r1, #1
   17694:	45b2      	cmp	sl, r6
   17696:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1769a:	54e7      	strb	r7, [r4, r3]
   1769c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   176a0:	f000 86d1 	beq.w	18446 <d_print_comp_inner+0x161a>
   176a4:	29ff      	cmp	r1, #255	; 0xff
   176a6:	f816 7b01 	ldrb.w	r7, [r6], #1
   176aa:	d1f1      	bne.n	17690 <d_print_comp_inner+0x864>
   176ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176b0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176b8:	4620      	mov	r0, r4
   176ba:	4798      	blx	r3
   176bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176c0:	3301      	adds	r3, #1
   176c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176c6:	2101      	movs	r1, #1
   176c8:	2300      	movs	r3, #0
   176ca:	e7e3      	b.n	17694 <d_print_comp_inner+0x868>
   176cc:	686a      	ldr	r2, [r5, #4]
   176ce:	f002 f951 	bl	19974 <d_print_comp>
   176d2:	f018 0904 	ands.w	r9, r8, #4
   176d6:	f001 82aa 	beq.w	18c2e <d_print_comp_inner+0x1e02>
   176da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   176de:	29ff      	cmp	r1, #255	; 0xff
   176e0:	f001 859a 	beq.w	19218 <d_print_comp_inner+0x23ec>
   176e4:	1c4a      	adds	r2, r1, #1
   176e6:	232e      	movs	r3, #46	; 0x2e
   176e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   176ec:	5463      	strb	r3, [r4, r1]
   176ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   176f2:	68ad      	ldr	r5, [r5, #8]
   176f4:	782b      	ldrb	r3, [r5, #0]
   176f6:	2b46      	cmp	r3, #70	; 0x46
   176f8:	f001 83cc 	beq.w	18e94 <d_print_comp_inner+0x2068>
   176fc:	462a      	mov	r2, r5
   176fe:	4641      	mov	r1, r8
   17700:	4620      	mov	r0, r4
   17702:	f002 f937 	bl	19974 <d_print_comp>
   17706:	e45f      	b.n	16fc8 <d_print_comp_inner+0x19c>
   17708:	f011 0804 	ands.w	r8, r1, #4
   1770c:	f041 808b 	bne.w	18826 <d_print_comp_inner+0x19fa>
   17710:	68af      	ldr	r7, [r5, #8]
   17712:	686d      	ldr	r5, [r5, #4]
   17714:	2f00      	cmp	r7, #0
   17716:	f43f ac57 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   1771a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1771e:	442f      	add	r7, r5
   17720:	e009      	b.n	17736 <d_print_comp_inner+0x90a>
   17722:	460b      	mov	r3, r1
   17724:	3101      	adds	r1, #1
   17726:	42bd      	cmp	r5, r7
   17728:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1772c:	54e6      	strb	r6, [r4, r3]
   1772e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17732:	f43f ac49 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   17736:	29ff      	cmp	r1, #255	; 0xff
   17738:	f815 6b01 	ldrb.w	r6, [r5], #1
   1773c:	d1f1      	bne.n	17722 <d_print_comp_inner+0x8f6>
   1773e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17742:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17746:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1774a:	4620      	mov	r0, r4
   1774c:	4798      	blx	r3
   1774e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17752:	3301      	adds	r3, #1
   17754:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17758:	2101      	movs	r1, #1
   1775a:	2300      	movs	r3, #0
   1775c:	e7e3      	b.n	17726 <d_print_comp_inner+0x8fa>
   1775e:	2301      	movs	r3, #1
   17760:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17764:	e430      	b.n	16fc8 <d_print_comp_inner+0x19c>
   17766:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1776a:	2b00      	cmp	r3, #0
   1776c:	f041 8106 	bne.w	1897c <d_print_comp_inner+0x1b50>
   17770:	1d29      	adds	r1, r5, #4
   17772:	f7fd fa97 	bl	14ca4 <d_lookup_template_argument.isra.6>
   17776:	2800      	cmp	r0, #0
   17778:	f43f ac3a 	beq.w	16ff0 <d_print_comp_inner+0x1c4>
   1777c:	7803      	ldrb	r3, [r0, #0]
   1777e:	2b2f      	cmp	r3, #47	; 0x2f
   17780:	f001 83fc 	beq.w	18f7c <d_print_comp_inner+0x2150>
   17784:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   17788:	682b      	ldr	r3, [r5, #0]
   1778a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1778e:	4602      	mov	r2, r0
   17790:	4641      	mov	r1, r8
   17792:	4620      	mov	r0, r4
   17794:	f002 f8ee 	bl	19974 <d_print_comp>
   17798:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1779c:	e414      	b.n	16fc8 <d_print_comp_inner+0x19c>
   1779e:	2300      	movs	r3, #0
   177a0:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   177a4:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   177a8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   177ac:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   177b0:	f011 0f04 	tst.w	r1, #4
   177b4:	686e      	ldr	r6, [r5, #4]
   177b6:	d005      	beq.n	177c4 <d_print_comp_inner+0x998>
   177b8:	7833      	ldrb	r3, [r6, #0]
   177ba:	b91b      	cbnz	r3, 177c4 <d_print_comp_inner+0x998>
   177bc:	68b2      	ldr	r2, [r6, #8]
   177be:	2a06      	cmp	r2, #6
   177c0:	f001 853c 	beq.w	1923c <d_print_comp_inner+0x2410>
   177c4:	4632      	mov	r2, r6
   177c6:	4641      	mov	r1, r8
   177c8:	4620      	mov	r0, r4
   177ca:	f002 f8d3 	bl	19974 <d_print_comp>
   177ce:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   177d2:	2b3c      	cmp	r3, #60	; 0x3c
   177d4:	f001 8274 	beq.w	18cc0 <d_print_comp_inner+0x1e94>
   177d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   177dc:	2bff      	cmp	r3, #255	; 0xff
   177de:	f001 8489 	beq.w	190f4 <d_print_comp_inner+0x22c8>
   177e2:	1c59      	adds	r1, r3, #1
   177e4:	223c      	movs	r2, #60	; 0x3c
   177e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   177ea:	54e2      	strb	r2, [r4, r3]
   177ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   177f0:	4641      	mov	r1, r8
   177f2:	68aa      	ldr	r2, [r5, #8]
   177f4:	4620      	mov	r0, r4
   177f6:	f002 f8bd 	bl	19974 <d_print_comp>
   177fa:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   177fe:	2b3e      	cmp	r3, #62	; 0x3e
   17800:	f001 8239 	beq.w	18c76 <d_print_comp_inner+0x1e4a>
   17804:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17808:	2bff      	cmp	r3, #255	; 0xff
   1780a:	f001 8460 	beq.w	190ce <d_print_comp_inner+0x22a2>
   1780e:	1c59      	adds	r1, r3, #1
   17810:	223e      	movs	r2, #62	; 0x3e
   17812:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17816:	54e2      	strb	r2, [r4, r3]
   17818:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1781c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17820:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   17824:	f7ff bbd0 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17828:	686f      	ldr	r7, [r5, #4]
   1782a:	2f00      	cmp	r7, #0
   1782c:	f001 8082 	beq.w	18934 <d_print_comp_inner+0x1b08>
   17830:	4d64      	ldr	r5, [pc, #400]	; (179c4 <d_print_comp_inner+0xb98>)
   17832:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17836:	f105 0906 	add.w	r9, r5, #6
   1783a:	f04f 0800 	mov.w	r8, #0
   1783e:	e009      	b.n	17854 <d_print_comp_inner+0xa28>
   17840:	460b      	mov	r3, r1
   17842:	3101      	adds	r1, #1
   17844:	45a9      	cmp	r9, r5
   17846:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1784a:	54e6      	strb	r6, [r4, r3]
   1784c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17850:	f000 8782 	beq.w	18758 <d_print_comp_inner+0x192c>
   17854:	29ff      	cmp	r1, #255	; 0xff
   17856:	f815 6b01 	ldrb.w	r6, [r5], #1
   1785a:	d1f1      	bne.n	17840 <d_print_comp_inner+0xa14>
   1785c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17860:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17868:	4620      	mov	r0, r4
   1786a:	4798      	blx	r3
   1786c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17870:	3301      	adds	r3, #1
   17872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17876:	2101      	movs	r1, #1
   17878:	2300      	movs	r3, #0
   1787a:	e7e3      	b.n	17844 <d_print_comp_inner+0xa18>
   1787c:	4e52      	ldr	r6, [pc, #328]	; (179c8 <d_print_comp_inner+0xb9c>)
   1787e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17882:	f106 0a0a 	add.w	sl, r6, #10
   17886:	f04f 0900 	mov.w	r9, #0
   1788a:	e009      	b.n	178a0 <d_print_comp_inner+0xa74>
   1788c:	460b      	mov	r3, r1
   1788e:	3101      	adds	r1, #1
   17890:	4556      	cmp	r6, sl
   17892:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17896:	54e7      	strb	r7, [r4, r3]
   17898:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1789c:	f000 8701 	beq.w	186a2 <d_print_comp_inner+0x1876>
   178a0:	29ff      	cmp	r1, #255	; 0xff
   178a2:	f816 7b01 	ldrb.w	r7, [r6], #1
   178a6:	d1f1      	bne.n	1788c <d_print_comp_inner+0xa60>
   178a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   178b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   178b4:	4620      	mov	r0, r4
   178b6:	4798      	blx	r3
   178b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   178bc:	3301      	adds	r3, #1
   178be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178c2:	2101      	movs	r1, #1
   178c4:	2300      	movs	r3, #0
   178c6:	e7e3      	b.n	17890 <d_print_comp_inner+0xa64>
   178c8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178cc:	792d      	ldrb	r5, [r5, #4]
   178ce:	29ff      	cmp	r1, #255	; 0xff
   178d0:	f001 82ab 	beq.w	18e2a <d_print_comp_inner+0x1ffe>
   178d4:	1c4b      	adds	r3, r1, #1
   178d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   178da:	5465      	strb	r5, [r4, r1]
   178dc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   178e0:	f7ff bb72 	b.w	16fc8 <d_print_comp_inner+0x19c>
   178e4:	686a      	ldr	r2, [r5, #4]
   178e6:	f002 f845 	bl	19974 <d_print_comp>
   178ea:	68aa      	ldr	r2, [r5, #8]
   178ec:	4641      	mov	r1, r8
   178ee:	4620      	mov	r0, r4
   178f0:	f002 f840 	bl	19974 <d_print_comp>
   178f4:	f7ff bb68 	b.w	16fc8 <d_print_comp_inner+0x19c>
   178f8:	4e34      	ldr	r6, [pc, #208]	; (179cc <d_print_comp_inner+0xba0>)
   178fa:	686a      	ldr	r2, [r5, #4]
   178fc:	f002 f83a 	bl	19974 <d_print_comp>
   17900:	f106 0a08 	add.w	sl, r6, #8
   17904:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17908:	f04f 0900 	mov.w	r9, #0
   1790c:	e009      	b.n	17922 <d_print_comp_inner+0xaf6>
   1790e:	460b      	mov	r3, r1
   17910:	3101      	adds	r1, #1
   17912:	4556      	cmp	r6, sl
   17914:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17918:	54e7      	strb	r7, [r4, r3]
   1791a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1791e:	f000 8508 	beq.w	18332 <d_print_comp_inner+0x1506>
   17922:	29ff      	cmp	r1, #255	; 0xff
   17924:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17928:	d1f1      	bne.n	1790e <d_print_comp_inner+0xae2>
   1792a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1792e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17932:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17936:	4620      	mov	r0, r4
   17938:	4798      	blx	r3
   1793a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1793e:	3301      	adds	r3, #1
   17940:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17944:	2101      	movs	r1, #1
   17946:	2300      	movs	r3, #0
   17948:	e7e3      	b.n	17912 <d_print_comp_inner+0xae6>
   1794a:	686a      	ldr	r2, [r5, #4]
   1794c:	b10a      	cbz	r2, 17952 <d_print_comp_inner+0xb26>
   1794e:	f002 f811 	bl	19974 <d_print_comp>
   17952:	68ab      	ldr	r3, [r5, #8]
   17954:	2b00      	cmp	r3, #0
   17956:	f43f ab37 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   1795a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   1795e:	2efd      	cmp	r6, #253	; 0xfd
   17960:	f201 81bc 	bhi.w	18cdc <d_print_comp_inner+0x1eb0>
   17964:	4f1a      	ldr	r7, [pc, #104]	; (179d0 <d_print_comp_inner+0xba4>)
   17966:	f04f 0a00 	mov.w	sl, #0
   1796a:	f107 0b02 	add.w	fp, r7, #2
   1796e:	4631      	mov	r1, r6
   17970:	e009      	b.n	17986 <d_print_comp_inner+0xb5a>
   17972:	460b      	mov	r3, r1
   17974:	3101      	adds	r1, #1
   17976:	455f      	cmp	r7, fp
   17978:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1797c:	54e6      	strb	r6, [r4, r3]
   1797e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17982:	f000 86c1 	beq.w	18708 <d_print_comp_inner+0x18dc>
   17986:	29ff      	cmp	r1, #255	; 0xff
   17988:	f817 6b01 	ldrb.w	r6, [r7], #1
   1798c:	d1f1      	bne.n	17972 <d_print_comp_inner+0xb46>
   1798e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17992:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17996:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1799a:	4620      	mov	r0, r4
   1799c:	4798      	blx	r3
   1799e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179a2:	3301      	adds	r3, #1
   179a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   179a8:	2101      	movs	r1, #1
   179aa:	2300      	movs	r3, #0
   179ac:	e7e3      	b.n	17976 <d_print_comp_inner+0xb4a>
   179ae:	4e09      	ldr	r6, [pc, #36]	; (179d4 <d_print_comp_inner+0xba8>)
   179b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   179b4:	f106 0a09 	add.w	sl, r6, #9
   179b8:	f04f 0900 	mov.w	r9, #0
   179bc:	e016      	b.n	179ec <d_print_comp_inner+0xbc0>
   179be:	bf00      	nop
   179c0:	00024638 	.word	0x00024638
   179c4:	00024844 	.word	0x00024844
   179c8:	00024830 	.word	0x00024830
   179cc:	000248ab 	.word	0x000248ab
   179d0:	000247cc 	.word	0x000247cc
   179d4:	000247db 	.word	0x000247db
   179d8:	460b      	mov	r3, r1
   179da:	3101      	adds	r1, #1
   179dc:	4556      	cmp	r6, sl
   179de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   179e2:	54e7      	strb	r7, [r4, r3]
   179e4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   179e8:	f000 8594 	beq.w	18514 <d_print_comp_inner+0x16e8>
   179ec:	29ff      	cmp	r1, #255	; 0xff
   179ee:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   179f2:	d1f1      	bne.n	179d8 <d_print_comp_inner+0xbac>
   179f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   179f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   179fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a00:	4620      	mov	r0, r4
   17a02:	4798      	blx	r3
   17a04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a08:	3301      	adds	r3, #1
   17a0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a0e:	2101      	movs	r1, #1
   17a10:	2300      	movs	r3, #0
   17a12:	e7e3      	b.n	179dc <d_print_comp_inner+0xbb0>
   17a14:	4ed1      	ldr	r6, [pc, #836]	; (17d5c <d_print_comp_inner+0xf30>)
   17a16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a1a:	f106 0a09 	add.w	sl, r6, #9
   17a1e:	f04f 0900 	mov.w	r9, #0
   17a22:	e009      	b.n	17a38 <d_print_comp_inner+0xc0c>
   17a24:	460b      	mov	r3, r1
   17a26:	3101      	adds	r1, #1
   17a28:	4556      	cmp	r6, sl
   17a2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a2e:	54e7      	strb	r7, [r4, r3]
   17a30:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17a34:	f000 8597 	beq.w	18566 <d_print_comp_inner+0x173a>
   17a38:	29ff      	cmp	r1, #255	; 0xff
   17a3a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17a3e:	d1f1      	bne.n	17a24 <d_print_comp_inner+0xbf8>
   17a40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a44:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17a48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a4c:	4620      	mov	r0, r4
   17a4e:	4798      	blx	r3
   17a50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a54:	3301      	adds	r3, #1
   17a56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a5a:	2101      	movs	r1, #1
   17a5c:	2300      	movs	r3, #0
   17a5e:	e7e3      	b.n	17a28 <d_print_comp_inner+0xbfc>
   17a60:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17a64:	4dbe      	ldr	r5, [pc, #760]	; (17d60 <d_print_comp_inner+0xf34>)
   17a66:	f8da 7008 	ldr.w	r7, [sl, #8]
   17a6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a6e:	f105 0808 	add.w	r8, r5, #8
   17a72:	f04f 0900 	mov.w	r9, #0
   17a76:	e009      	b.n	17a8c <d_print_comp_inner+0xc60>
   17a78:	460b      	mov	r3, r1
   17a7a:	3101      	adds	r1, #1
   17a7c:	45a8      	cmp	r8, r5
   17a7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a82:	54e6      	strb	r6, [r4, r3]
   17a84:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17a88:	f000 8506 	beq.w	18498 <d_print_comp_inner+0x166c>
   17a8c:	29ff      	cmp	r1, #255	; 0xff
   17a8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   17a92:	d1f1      	bne.n	17a78 <d_print_comp_inner+0xc4c>
   17a94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17a9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17aa0:	4620      	mov	r0, r4
   17aa2:	4798      	blx	r3
   17aa4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17aa8:	3301      	adds	r3, #1
   17aaa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17aae:	2101      	movs	r1, #1
   17ab0:	2300      	movs	r3, #0
   17ab2:	e7e3      	b.n	17a7c <d_print_comp_inner+0xc50>
   17ab4:	686a      	ldr	r2, [r5, #4]
   17ab6:	68ae      	ldr	r6, [r5, #8]
   17ab8:	b10a      	cbz	r2, 17abe <d_print_comp_inner+0xc92>
   17aba:	f001 ff5b 	bl	19974 <d_print_comp>
   17abe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17ac2:	2bff      	cmp	r3, #255	; 0xff
   17ac4:	f001 82b1 	beq.w	1902a <d_print_comp_inner+0x21fe>
   17ac8:	1c5a      	adds	r2, r3, #1
   17aca:	257b      	movs	r5, #123	; 0x7b
   17acc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17ad0:	4641      	mov	r1, r8
   17ad2:	54e5      	strb	r5, [r4, r3]
   17ad4:	4632      	mov	r2, r6
   17ad6:	4620      	mov	r0, r4
   17ad8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17adc:	f001 ff4a 	bl	19974 <d_print_comp>
   17ae0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17ae4:	29ff      	cmp	r1, #255	; 0xff
   17ae6:	f001 81e7 	beq.w	18eb8 <d_print_comp_inner+0x208c>
   17aea:	1c4a      	adds	r2, r1, #1
   17aec:	237d      	movs	r3, #125	; 0x7d
   17aee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17af2:	5463      	strb	r3, [r4, r1]
   17af4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17af8:	f7ff ba66 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17afc:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17b00:	68ae      	ldr	r6, [r5, #8]
   17b02:	f899 3000 	ldrb.w	r3, [r9]
   17b06:	2b31      	cmp	r3, #49	; 0x31
   17b08:	f000 87cb 	beq.w	18aa2 <d_print_comp_inner+0x1c76>
   17b0c:	2b33      	cmp	r3, #51	; 0x33
   17b0e:	f041 86d3 	bne.w	198b8 <d_print_comp_inner+0x2a8c>
   17b12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b16:	29ff      	cmp	r1, #255	; 0xff
   17b18:	f001 84c3 	beq.w	194a2 <d_print_comp_inner+0x2676>
   17b1c:	1c4a      	adds	r2, r1, #1
   17b1e:	2328      	movs	r3, #40	; 0x28
   17b20:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17b24:	5463      	strb	r3, [r4, r1]
   17b26:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17b2a:	a904      	add	r1, sp, #16
   17b2c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17b30:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17b34:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17b38:	4620      	mov	r0, r4
   17b3a:	4641      	mov	r1, r8
   17b3c:	9305      	str	r3, [sp, #20]
   17b3e:	9204      	str	r2, [sp, #16]
   17b40:	f7ff f974 	bl	16e2c <d_print_comp_inner>
   17b44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17b48:	9b05      	ldr	r3, [sp, #20]
   17b4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   17b4e:	29ff      	cmp	r1, #255	; 0xff
   17b50:	f001 8496 	beq.w	19480 <d_print_comp_inner+0x2654>
   17b54:	2329      	movs	r3, #41	; 0x29
   17b56:	1c4a      	adds	r2, r1, #1
   17b58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17b5c:	5463      	strb	r3, [r4, r1]
   17b5e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17b62:	4632      	mov	r2, r6
   17b64:	4641      	mov	r1, r8
   17b66:	4620      	mov	r0, r4
   17b68:	f002 fd2a 	bl	1a5c0 <d_print_subexpr>
   17b6c:	f7ff ba2c 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17b70:	686a      	ldr	r2, [r5, #4]
   17b72:	f002 fce7 	bl	1a544 <d_print_expr_op>
   17b76:	f7ff ba27 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17b7a:	f011 0f20 	tst.w	r1, #32
   17b7e:	f040 8753 	bne.w	18a28 <d_print_comp_inner+0x1bfc>
   17b82:	686a      	ldr	r2, [r5, #4]
   17b84:	b11a      	cbz	r2, 17b8e <d_print_comp_inner+0xd62>
   17b86:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17b8a:	f001 81d0 	beq.w	18f2e <d_print_comp_inner+0x2102>
   17b8e:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   17b92:	f105 0208 	add.w	r2, r5, #8
   17b96:	4641      	mov	r1, r8
   17b98:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17b9c:	4620      	mov	r0, r4
   17b9e:	f002 fbdd 	bl	1a35c <d_print_function_type.isra.11>
   17ba2:	f7ff ba11 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17ba6:	f011 0804 	ands.w	r8, r1, #4
   17baa:	686b      	ldr	r3, [r5, #4]
   17bac:	f040 8612 	bne.w	187d4 <d_print_comp_inner+0x19a8>
   17bb0:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17bb4:	2f00      	cmp	r7, #0
   17bb6:	f43f aa07 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   17bba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17bbe:	442f      	add	r7, r5
   17bc0:	e009      	b.n	17bd6 <d_print_comp_inner+0xdaa>
   17bc2:	460b      	mov	r3, r1
   17bc4:	3101      	adds	r1, #1
   17bc6:	42bd      	cmp	r5, r7
   17bc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17bcc:	54e6      	strb	r6, [r4, r3]
   17bce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17bd2:	f43f a9f9 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   17bd6:	29ff      	cmp	r1, #255	; 0xff
   17bd8:	f815 6b01 	ldrb.w	r6, [r5], #1
   17bdc:	d1f1      	bne.n	17bc2 <d_print_comp_inner+0xd96>
   17bde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17be2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17be6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bea:	4620      	mov	r0, r4
   17bec:	4798      	blx	r3
   17bee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bf2:	3301      	adds	r3, #1
   17bf4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bf8:	2101      	movs	r1, #1
   17bfa:	2300      	movs	r3, #0
   17bfc:	e7e3      	b.n	17bc6 <d_print_comp_inner+0xd9a>
   17bfe:	6869      	ldr	r1, [r5, #4]
   17c00:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17c04:	780b      	ldrb	r3, [r1, #0]
   17c06:	2f00      	cmp	r7, #0
   17c08:	f040 85e1 	bne.w	187ce <d_print_comp_inner+0x19a2>
   17c0c:	2b05      	cmp	r3, #5
   17c0e:	f001 81c7 	beq.w	18fa0 <d_print_comp_inner+0x2174>
   17c12:	2b23      	cmp	r3, #35	; 0x23
   17c14:	f000 8689 	beq.w	1892a <d_print_comp_inner+0x1afe>
   17c18:	782a      	ldrb	r2, [r5, #0]
   17c1a:	429a      	cmp	r2, r3
   17c1c:	f000 8685 	beq.w	1892a <d_print_comp_inner+0x1afe>
   17c20:	2b24      	cmp	r3, #36	; 0x24
   17c22:	f47f a9eb 	bne.w	16ffc <d_print_comp_inner+0x1d0>
   17c26:	a814      	add	r0, sp, #80	; 0x50
   17c28:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17c2c:	684a      	ldr	r2, [r1, #4]
   17c2e:	f840 3d40 	str.w	r3, [r0, #-64]!
   17c32:	2100      	movs	r1, #0
   17c34:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17c38:	9505      	str	r5, [sp, #20]
   17c3a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17c3e:	9106      	str	r1, [sp, #24]
   17c40:	9307      	str	r3, [sp, #28]
   17c42:	2a00      	cmp	r2, #0
   17c44:	f47f a9e8 	bne.w	17018 <d_print_comp_inner+0x1ec>
   17c48:	f7ff b9e5 	b.w	17016 <d_print_comp_inner+0x1ea>
   17c4c:	686a      	ldr	r2, [r5, #4]
   17c4e:	f001 fe91 	bl	19974 <d_print_comp>
   17c52:	f7ff b9b9 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17c56:	ab14      	add	r3, sp, #80	; 0x50
   17c58:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17c5c:	f843 2d40 	str.w	r2, [r3, #-64]!
   17c60:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17c64:	68aa      	ldr	r2, [r5, #8]
   17c66:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17c6a:	9307      	str	r3, [sp, #28]
   17c6c:	2600      	movs	r6, #0
   17c6e:	9505      	str	r5, [sp, #20]
   17c70:	9606      	str	r6, [sp, #24]
   17c72:	f001 fe7f 	bl	19974 <d_print_comp>
   17c76:	9b06      	ldr	r3, [sp, #24]
   17c78:	b923      	cbnz	r3, 17c84 <d_print_comp_inner+0xe58>
   17c7a:	462a      	mov	r2, r5
   17c7c:	4641      	mov	r1, r8
   17c7e:	4620      	mov	r0, r4
   17c80:	f001 fe88 	bl	19994 <d_print_mod>
   17c84:	9b04      	ldr	r3, [sp, #16]
   17c86:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17c8a:	f7ff b99d 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17c8e:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17c92:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17c96:	f849 bd40 	str.w	fp, [r9, #-64]!
   17c9a:	2200      	movs	r2, #0
   17c9c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17ca0:	f8cd b000 	str.w	fp, [sp]
   17ca4:	4659      	mov	r1, fp
   17ca6:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17caa:	9505      	str	r5, [sp, #20]
   17cac:	9206      	str	r2, [sp, #24]
   17cae:	9307      	str	r3, [sp, #28]
   17cb0:	2900      	cmp	r1, #0
   17cb2:	f001 83a0 	beq.w	193f6 <d_print_comp_inner+0x25ca>
   17cb6:	684b      	ldr	r3, [r1, #4]
   17cb8:	781b      	ldrb	r3, [r3, #0]
   17cba:	3b19      	subs	r3, #25
   17cbc:	2b02      	cmp	r3, #2
   17cbe:	f201 839a 	bhi.w	193f6 <d_print_comp_inner+0x25ca>
   17cc2:	46ac      	mov	ip, r5
   17cc4:	2701      	movs	r7, #1
   17cc6:	460e      	mov	r6, r1
   17cc8:	464d      	mov	r5, r9
   17cca:	e004      	b.n	17cd6 <d_print_comp_inner+0xeaa>
   17ccc:	6873      	ldr	r3, [r6, #4]
   17cce:	781b      	ldrb	r3, [r3, #0]
   17cd0:	3b19      	subs	r3, #25
   17cd2:	2b02      	cmp	r3, #2
   17cd4:	d81b      	bhi.n	17d0e <d_print_comp_inner+0xee2>
   17cd6:	68b3      	ldr	r3, [r6, #8]
   17cd8:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17cdc:	aa14      	add	r2, sp, #80	; 0x50
   17cde:	eb02 0b0e 	add.w	fp, r2, lr
   17ce2:	b98b      	cbnz	r3, 17d08 <d_print_comp_inner+0xedc>
   17ce4:	2f03      	cmp	r7, #3
   17ce6:	f201 80f9 	bhi.w	18edc <d_print_comp_inner+0x20b0>
   17cea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17cee:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17cf2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17cf6:	f84b 5c40 	str.w	r5, [fp, #-64]
   17cfa:	2301      	movs	r3, #1
   17cfc:	eb09 050e 	add.w	r5, r9, lr
   17d00:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17d04:	3701      	adds	r7, #1
   17d06:	60b3      	str	r3, [r6, #8]
   17d08:	6836      	ldr	r6, [r6, #0]
   17d0a:	2e00      	cmp	r6, #0
   17d0c:	d1de      	bne.n	17ccc <d_print_comp_inner+0xea0>
   17d0e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17d12:	4641      	mov	r1, r8
   17d14:	4620      	mov	r0, r4
   17d16:	4665      	mov	r5, ip
   17d18:	f001 fe2c 	bl	19974 <d_print_comp>
   17d1c:	9b06      	ldr	r3, [sp, #24]
   17d1e:	9a00      	ldr	r2, [sp, #0]
   17d20:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17d24:	2b00      	cmp	r3, #0
   17d26:	f47f a94f 	bne.w	16fc8 <d_print_comp_inner+0x19c>
   17d2a:	2f01      	cmp	r7, #1
   17d2c:	d00c      	beq.n	17d48 <d_print_comp_inner+0xf1c>
   17d2e:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17d32:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17d36:	3f01      	subs	r7, #1
   17d38:	4641      	mov	r1, r8
   17d3a:	4620      	mov	r0, r4
   17d3c:	f001 fe2a 	bl	19994 <d_print_mod>
   17d40:	2f01      	cmp	r7, #1
   17d42:	f1a9 0910 	sub.w	r9, r9, #16
   17d46:	d1f4      	bne.n	17d32 <d_print_comp_inner+0xf06>
   17d48:	1d2a      	adds	r2, r5, #4
   17d4a:	4641      	mov	r1, r8
   17d4c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17d50:	4620      	mov	r0, r4
   17d52:	f002 fa27 	bl	1a1a4 <d_print_array_type.isra.10>
   17d56:	f7ff b937 	b.w	16fc8 <d_print_comp_inner+0x19c>
   17d5a:	bf00      	nop
   17d5c:	000247db 	.word	0x000247db
   17d60:	000247cf 	.word	0x000247cf
   17d64:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17d68:	2b00      	cmp	r3, #0
   17d6a:	f040 8674 	bne.w	18a56 <d_print_comp_inner+0x1c2a>
   17d6e:	686a      	ldr	r2, [r5, #4]
   17d70:	4bd5      	ldr	r3, [pc, #852]	; (180c8 <d_print_comp_inner+0x129c>)
   17d72:	6851      	ldr	r1, [r2, #4]
   17d74:	4299      	cmp	r1, r3
   17d76:	f000 866a 	beq.w	18a4e <d_print_comp_inner+0x1c22>
   17d7a:	4641      	mov	r1, r8
   17d7c:	4620      	mov	r0, r4
   17d7e:	f001 fdf9 	bl	19974 <d_print_comp>
   17d82:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17d86:	2bff      	cmp	r3, #255	; 0xff
   17d88:	f001 82b2 	beq.w	192f0 <d_print_comp_inner+0x24c4>
   17d8c:	1c59      	adds	r1, r3, #1
   17d8e:	2220      	movs	r2, #32
   17d90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d94:	54e2      	strb	r2, [r4, r3]
   17d96:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17d9a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17d9e:	2b00      	cmp	r3, #0
   17da0:	f000 8595 	beq.w	188ce <d_print_comp_inner+0x1aa2>
   17da4:	4dc9      	ldr	r5, [pc, #804]	; (180cc <d_print_comp_inner+0x12a0>)
   17da6:	f04f 0800 	mov.w	r8, #0
   17daa:	1daf      	adds	r7, r5, #6
   17dac:	e009      	b.n	17dc2 <d_print_comp_inner+0xf96>
   17dae:	460b      	mov	r3, r1
   17db0:	3101      	adds	r1, #1
   17db2:	42bd      	cmp	r5, r7
   17db4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17db8:	54e6      	strb	r6, [r4, r3]
   17dba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17dbe:	f43f a903 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   17dc2:	29ff      	cmp	r1, #255	; 0xff
   17dc4:	f815 6b01 	ldrb.w	r6, [r5], #1
   17dc8:	d1f1      	bne.n	17dae <d_print_comp_inner+0xf82>
   17dca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17dce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17dd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17dd6:	4620      	mov	r0, r4
   17dd8:	4798      	blx	r3
   17dda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17dde:	3301      	adds	r3, #1
   17de0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17de4:	2101      	movs	r1, #1
   17de6:	2300      	movs	r3, #0
   17de8:	e7e3      	b.n	17db2 <d_print_comp_inner+0xf86>
   17dea:	4eb9      	ldr	r6, [pc, #740]	; (180d0 <d_print_comp_inner+0x12a4>)
   17dec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17df0:	f106 090e 	add.w	r9, r6, #14
   17df4:	f04f 0800 	mov.w	r8, #0
   17df8:	e009      	b.n	17e0e <d_print_comp_inner+0xfe2>
   17dfa:	460b      	mov	r3, r1
   17dfc:	3101      	adds	r1, #1
   17dfe:	45b1      	cmp	r9, r6
   17e00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e04:	54e7      	strb	r7, [r4, r3]
   17e06:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e0a:	f000 83b3 	beq.w	18574 <d_print_comp_inner+0x1748>
   17e0e:	29ff      	cmp	r1, #255	; 0xff
   17e10:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e14:	d1f1      	bne.n	17dfa <d_print_comp_inner+0xfce>
   17e16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17e1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e22:	4620      	mov	r0, r4
   17e24:	4798      	blx	r3
   17e26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e2a:	3301      	adds	r3, #1
   17e2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e30:	2101      	movs	r1, #1
   17e32:	2300      	movs	r3, #0
   17e34:	e7e3      	b.n	17dfe <d_print_comp_inner+0xfd2>
   17e36:	4ea7      	ldr	r6, [pc, #668]	; (180d4 <d_print_comp_inner+0x12a8>)
   17e38:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e3c:	f106 0a1a 	add.w	sl, r6, #26
   17e40:	f04f 0900 	mov.w	r9, #0
   17e44:	e009      	b.n	17e5a <d_print_comp_inner+0x102e>
   17e46:	460b      	mov	r3, r1
   17e48:	3101      	adds	r1, #1
   17e4a:	4556      	cmp	r6, sl
   17e4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e50:	54e7      	strb	r7, [r4, r3]
   17e52:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e56:	f000 82ef 	beq.w	18438 <d_print_comp_inner+0x160c>
   17e5a:	29ff      	cmp	r1, #255	; 0xff
   17e5c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e60:	d1f1      	bne.n	17e46 <d_print_comp_inner+0x101a>
   17e62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e66:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e6e:	4620      	mov	r0, r4
   17e70:	4798      	blx	r3
   17e72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e76:	3301      	adds	r3, #1
   17e78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e7c:	2101      	movs	r1, #1
   17e7e:	2300      	movs	r3, #0
   17e80:	e7e3      	b.n	17e4a <d_print_comp_inner+0x101e>
   17e82:	6869      	ldr	r1, [r5, #4]
   17e84:	f7fc ff2a 	bl	14cdc <d_find_pack>
   17e88:	f04f 0900 	mov.w	r9, #0
   17e8c:	2800      	cmp	r0, #0
   17e8e:	f001 835d 	beq.w	1954c <d_print_comp_inner+0x2720>
   17e92:	7803      	ldrb	r3, [r0, #0]
   17e94:	2b2f      	cmp	r3, #47	; 0x2f
   17e96:	f040 8457 	bne.w	18748 <d_print_comp_inner+0x191c>
   17e9a:	6843      	ldr	r3, [r0, #4]
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	f000 8453 	beq.w	18748 <d_print_comp_inner+0x191c>
   17ea2:	6880      	ldr	r0, [r0, #8]
   17ea4:	f109 0901 	add.w	r9, r9, #1
   17ea8:	2800      	cmp	r0, #0
   17eaa:	d1f2      	bne.n	17e92 <d_print_comp_inner+0x1066>
   17eac:	686b      	ldr	r3, [r5, #4]
   17eae:	9300      	str	r3, [sp, #0]
   17eb0:	f109 33ff 	add.w	r3, r9, #4294967295
   17eb4:	9301      	str	r3, [sp, #4]
   17eb6:	f04f 0a00 	mov.w	sl, #0
   17eba:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17ebe:	9a00      	ldr	r2, [sp, #0]
   17ec0:	4641      	mov	r1, r8
   17ec2:	4620      	mov	r0, r4
   17ec4:	f001 fd56 	bl	19974 <d_print_comp>
   17ec8:	9b01      	ldr	r3, [sp, #4]
   17eca:	42bb      	cmp	r3, r7
   17ecc:	f340 81ab 	ble.w	18226 <d_print_comp_inner+0x13fa>
   17ed0:	4d81      	ldr	r5, [pc, #516]	; (180d8 <d_print_comp_inner+0x12ac>)
   17ed2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17ed6:	f105 0b02 	add.w	fp, r5, #2
   17eda:	e009      	b.n	17ef0 <d_print_comp_inner+0x10c4>
   17edc:	460b      	mov	r3, r1
   17ede:	3101      	adds	r1, #1
   17ee0:	45ab      	cmp	fp, r5
   17ee2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ee6:	54e6      	strb	r6, [r4, r3]
   17ee8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17eec:	f000 819b 	beq.w	18226 <d_print_comp_inner+0x13fa>
   17ef0:	29ff      	cmp	r1, #255	; 0xff
   17ef2:	f815 6b01 	ldrb.w	r6, [r5], #1
   17ef6:	d1f1      	bne.n	17edc <d_print_comp_inner+0x10b0>
   17ef8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17efc:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17f00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f04:	4620      	mov	r0, r4
   17f06:	4798      	blx	r3
   17f08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f0c:	3301      	adds	r3, #1
   17f0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f12:	2101      	movs	r1, #1
   17f14:	2300      	movs	r3, #0
   17f16:	e7e3      	b.n	17ee0 <d_print_comp_inner+0x10b4>
   17f18:	4e70      	ldr	r6, [pc, #448]	; (180dc <d_print_comp_inner+0x12b0>)
   17f1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f1e:	f106 0a16 	add.w	sl, r6, #22
   17f22:	f04f 0900 	mov.w	r9, #0
   17f26:	e009      	b.n	17f3c <d_print_comp_inner+0x1110>
   17f28:	460b      	mov	r3, r1
   17f2a:	3101      	adds	r1, #1
   17f2c:	45b2      	cmp	sl, r6
   17f2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f32:	54e7      	strb	r7, [r4, r3]
   17f34:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f38:	f000 835f 	beq.w	185fa <d_print_comp_inner+0x17ce>
   17f3c:	29ff      	cmp	r1, #255	; 0xff
   17f3e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17f42:	d1f1      	bne.n	17f28 <d_print_comp_inner+0x10fc>
   17f44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f50:	4620      	mov	r0, r4
   17f52:	4798      	blx	r3
   17f54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f58:	3301      	adds	r3, #1
   17f5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f5e:	2101      	movs	r1, #1
   17f60:	2300      	movs	r3, #0
   17f62:	e7e3      	b.n	17f2c <d_print_comp_inner+0x1100>
   17f64:	4e5e      	ldr	r6, [pc, #376]	; (180e0 <d_print_comp_inner+0x12b4>)
   17f66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f6a:	f106 0a0e 	add.w	sl, r6, #14
   17f6e:	f04f 0900 	mov.w	r9, #0
   17f72:	e009      	b.n	17f88 <d_print_comp_inner+0x115c>
   17f74:	460b      	mov	r3, r1
   17f76:	3101      	adds	r1, #1
   17f78:	4556      	cmp	r6, sl
   17f7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f7e:	54e7      	strb	r7, [r4, r3]
   17f80:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f84:	f000 83a0 	beq.w	186c8 <d_print_comp_inner+0x189c>
   17f88:	29ff      	cmp	r1, #255	; 0xff
   17f8a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17f8e:	d1f1      	bne.n	17f74 <d_print_comp_inner+0x1148>
   17f90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f94:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f9c:	4620      	mov	r0, r4
   17f9e:	4798      	blx	r3
   17fa0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fa4:	3301      	adds	r3, #1
   17fa6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17faa:	2101      	movs	r1, #1
   17fac:	2300      	movs	r3, #0
   17fae:	e7e3      	b.n	17f78 <d_print_comp_inner+0x114c>
   17fb0:	686a      	ldr	r2, [r5, #4]
   17fb2:	7811      	ldrb	r1, [r2, #0]
   17fb4:	2927      	cmp	r1, #39	; 0x27
   17fb6:	f000 8615 	beq.w	18be4 <d_print_comp_inner+0x1db8>
   17fba:	2600      	movs	r6, #0
   17fbc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17fc0:	29ff      	cmp	r1, #255	; 0xff
   17fc2:	f001 80c5 	beq.w	19150 <d_print_comp_inner+0x2324>
   17fc6:	2328      	movs	r3, #40	; 0x28
   17fc8:	1c4a      	adds	r2, r1, #1
   17fca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17fce:	5463      	strb	r3, [r4, r1]
   17fd0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17fd4:	686a      	ldr	r2, [r5, #4]
   17fd6:	4641      	mov	r1, r8
   17fd8:	4620      	mov	r0, r4
   17fda:	f001 fccb 	bl	19974 <d_print_comp>
   17fde:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17fe2:	2bff      	cmp	r3, #255	; 0xff
   17fe4:	f001 8099 	beq.w	1911a <d_print_comp_inner+0x22ee>
   17fe8:	1c59      	adds	r1, r3, #1
   17fea:	2229      	movs	r2, #41	; 0x29
   17fec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ff0:	54e2      	strb	r2, [r4, r3]
   17ff2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ff6:	782b      	ldrb	r3, [r5, #0]
   17ff8:	2b3d      	cmp	r3, #61	; 0x3d
   17ffa:	f000 86e6 	beq.w	18dca <d_print_comp_inner+0x1f9e>
   17ffe:	2e08      	cmp	r6, #8
   18000:	f000 867f 	beq.w	18d02 <d_print_comp_inner+0x1ed6>
   18004:	68aa      	ldr	r2, [r5, #8]
   18006:	4641      	mov	r1, r8
   18008:	4620      	mov	r0, r4
   1800a:	f001 fcb3 	bl	19974 <d_print_comp>
   1800e:	f7fe bfdb 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18012:	2301      	movs	r3, #1
   18014:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   18018:	f7fe bfd6 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1801c:	686a      	ldr	r2, [r5, #4]
   1801e:	4931      	ldr	r1, [pc, #196]	; (180e4 <d_print_comp_inner+0x12b8>)
   18020:	a804      	add	r0, sp, #16
   18022:	f006 fda3 	bl	1eb6c <sprintf>
   18026:	a804      	add	r0, sp, #16
   18028:	f006 ff4a 	bl	1eec0 <strlen>
   1802c:	2800      	cmp	r0, #0
   1802e:	f43e afcb 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18032:	ad04      	add	r5, sp, #16
   18034:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18038:	182f      	adds	r7, r5, r0
   1803a:	f04f 0800 	mov.w	r8, #0
   1803e:	e009      	b.n	18054 <d_print_comp_inner+0x1228>
   18040:	460b      	mov	r3, r1
   18042:	3101      	adds	r1, #1
   18044:	42bd      	cmp	r5, r7
   18046:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1804a:	54e6      	strb	r6, [r4, r3]
   1804c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18050:	f43e afba 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18054:	29ff      	cmp	r1, #255	; 0xff
   18056:	f815 6b01 	ldrb.w	r6, [r5], #1
   1805a:	d1f1      	bne.n	18040 <d_print_comp_inner+0x1214>
   1805c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18060:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18068:	4620      	mov	r0, r4
   1806a:	4798      	blx	r3
   1806c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18070:	3301      	adds	r3, #1
   18072:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18076:	2101      	movs	r1, #1
   18078:	2300      	movs	r3, #0
   1807a:	e7e3      	b.n	18044 <d_print_comp_inner+0x1218>
   1807c:	4e1a      	ldr	r6, [pc, #104]	; (180e8 <d_print_comp_inner+0x12bc>)
   1807e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18082:	f106 0a1c 	add.w	sl, r6, #28
   18086:	f04f 0900 	mov.w	r9, #0
   1808a:	e009      	b.n	180a0 <d_print_comp_inner+0x1274>
   1808c:	460b      	mov	r3, r1
   1808e:	3101      	adds	r1, #1
   18090:	4556      	cmp	r6, sl
   18092:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18096:	54e7      	strb	r7, [r4, r3]
   18098:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1809c:	f000 82fa 	beq.w	18694 <d_print_comp_inner+0x1868>
   180a0:	29ff      	cmp	r1, #255	; 0xff
   180a2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   180a6:	d1f1      	bne.n	1808c <d_print_comp_inner+0x1260>
   180a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   180b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180b4:	4620      	mov	r0, r4
   180b6:	4798      	blx	r3
   180b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180bc:	3301      	adds	r3, #1
   180be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180c2:	2101      	movs	r1, #1
   180c4:	2300      	movs	r3, #0
   180c6:	e7e3      	b.n	18090 <d_print_comp_inner+0x1264>
   180c8:	00023f98 	.word	0x00023f98
   180cc:	000247bc 	.word	0x000247bc
   180d0:	0002489b 	.word	0x0002489b
   180d4:	00024797 	.word	0x00024797
   180d8:	000247cc 	.word	0x000247cc
   180dc:	0002479b 	.word	0x0002479b
   180e0:	0002481f 	.word	0x0002481f
   180e4:	000245f0 	.word	0x000245f0
   180e8:	0002486b 	.word	0x0002486b
   180ec:	68ab      	ldr	r3, [r5, #8]
   180ee:	781a      	ldrb	r2, [r3, #0]
   180f0:	2a3a      	cmp	r2, #58	; 0x3a
   180f2:	f47e af7d 	bne.w	16ff0 <d_print_comp_inner+0x1c4>
   180f6:	689b      	ldr	r3, [r3, #8]
   180f8:	781b      	ldrb	r3, [r3, #0]
   180fa:	2b3b      	cmp	r3, #59	; 0x3b
   180fc:	f47e af78 	bne.w	16ff0 <d_print_comp_inner+0x1c4>
   18100:	f105 0308 	add.w	r3, r5, #8
   18104:	686a      	ldr	r2, [r5, #4]
   18106:	f002 fabf 	bl	1a688 <d_maybe_print_fold_expression.isra.15>
   1810a:	4606      	mov	r6, r0
   1810c:	2800      	cmp	r0, #0
   1810e:	f47e af5b 	bne.w	16fc8 <d_print_comp_inner+0x19c>
   18112:	f8d5 a004 	ldr.w	sl, [r5, #4]
   18116:	68aa      	ldr	r2, [r5, #8]
   18118:	f8da 1004 	ldr.w	r1, [sl, #4]
   1811c:	6893      	ldr	r3, [r2, #8]
   1811e:	6808      	ldr	r0, [r1, #0]
   18120:	49d6      	ldr	r1, [pc, #856]	; (1847c <d_print_comp_inner+0x1650>)
   18122:	f8d2 9004 	ldr.w	r9, [r2, #4]
   18126:	685f      	ldr	r7, [r3, #4]
   18128:	689d      	ldr	r5, [r3, #8]
   1812a:	f006 fd4d 	bl	1ebc8 <strcmp>
   1812e:	2800      	cmp	r0, #0
   18130:	f001 82e2 	beq.w	196f8 <d_print_comp_inner+0x28cc>
   18134:	2204      	movs	r2, #4
   18136:	49d2      	ldr	r1, [pc, #840]	; (18480 <d_print_comp_inner+0x1654>)
   18138:	4620      	mov	r0, r4
   1813a:	f7fc fba3 	bl	14884 <d_append_buffer>
   1813e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18142:	b183      	cbz	r3, 18166 <d_print_comp_inner+0x133a>
   18144:	4641      	mov	r1, r8
   18146:	464a      	mov	r2, r9
   18148:	4620      	mov	r0, r4
   1814a:	f002 fa39 	bl	1a5c0 <d_print_subexpr>
   1814e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18152:	29ff      	cmp	r1, #255	; 0xff
   18154:	f001 83ec 	beq.w	19930 <d_print_comp_inner+0x2b04>
   18158:	2320      	movs	r3, #32
   1815a:	1c4a      	adds	r2, r1, #1
   1815c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18160:	5463      	strb	r3, [r4, r1]
   18162:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18166:	463a      	mov	r2, r7
   18168:	4641      	mov	r1, r8
   1816a:	4620      	mov	r0, r4
   1816c:	f001 fc02 	bl	19974 <d_print_comp>
   18170:	2d00      	cmp	r5, #0
   18172:	f43e af29 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18176:	462a      	mov	r2, r5
   18178:	4641      	mov	r1, r8
   1817a:	4620      	mov	r0, r4
   1817c:	f002 fa20 	bl	1a5c0 <d_print_subexpr>
   18180:	f7fe bf22 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18184:	4ebf      	ldr	r6, [pc, #764]	; (18484 <d_print_comp_inner+0x1658>)
   18186:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1818a:	f106 0a08 	add.w	sl, r6, #8
   1818e:	f04f 0900 	mov.w	r9, #0
   18192:	e009      	b.n	181a8 <d_print_comp_inner+0x137c>
   18194:	460b      	mov	r3, r1
   18196:	3101      	adds	r1, #1
   18198:	4556      	cmp	r6, sl
   1819a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1819e:	54e7      	strb	r7, [r4, r3]
   181a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   181a4:	f000 80d8 	beq.w	18358 <d_print_comp_inner+0x152c>
   181a8:	29ff      	cmp	r1, #255	; 0xff
   181aa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   181ae:	d1f1      	bne.n	18194 <d_print_comp_inner+0x1368>
   181b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   181b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   181bc:	4620      	mov	r0, r4
   181be:	4798      	blx	r3
   181c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   181c4:	3301      	adds	r3, #1
   181c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   181ca:	2101      	movs	r1, #1
   181cc:	2300      	movs	r3, #0
   181ce:	e7e3      	b.n	18198 <d_print_comp_inner+0x136c>
   181d0:	4ead      	ldr	r6, [pc, #692]	; (18488 <d_print_comp_inner+0x165c>)
   181d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   181d6:	f106 0a1d 	add.w	sl, r6, #29
   181da:	f04f 0900 	mov.w	r9, #0
   181de:	e009      	b.n	181f4 <d_print_comp_inner+0x13c8>
   181e0:	460b      	mov	r3, r1
   181e2:	3101      	adds	r1, #1
   181e4:	45b2      	cmp	sl, r6
   181e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   181ea:	54e7      	strb	r7, [r4, r3]
   181ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   181f0:	f000 81fc 	beq.w	185ec <d_print_comp_inner+0x17c0>
   181f4:	29ff      	cmp	r1, #255	; 0xff
   181f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   181fa:	d1f1      	bne.n	181e0 <d_print_comp_inner+0x13b4>
   181fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18200:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18204:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18208:	4620      	mov	r0, r4
   1820a:	4798      	blx	r3
   1820c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18210:	3301      	adds	r3, #1
   18212:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18216:	2101      	movs	r1, #1
   18218:	2300      	movs	r3, #0
   1821a:	e7e3      	b.n	181e4 <d_print_comp_inner+0x13b8>
   1821c:	2301      	movs	r3, #1
   1821e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   18222:	f7fe bed1 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18226:	3701      	adds	r7, #1
   18228:	454f      	cmp	r7, r9
   1822a:	f47f ae46 	bne.w	17eba <d_print_comp_inner+0x108e>
   1822e:	f7fe becb 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18232:	6876      	ldr	r6, [r6, #4]
   18234:	2e00      	cmp	r6, #0
   18236:	f001 806e 	beq.w	19316 <d_print_comp_inner+0x24ea>
   1823a:	2f04      	cmp	r7, #4
   1823c:	f103 0310 	add.w	r3, r3, #16
   18240:	f47f a9bd 	bne.w	175be <d_print_comp_inner+0x792>
   18244:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18248:	2301      	movs	r3, #1
   1824a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1824e:	f7fe bebb 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18252:	4e8e      	ldr	r6, [pc, #568]	; (1848c <d_print_comp_inner+0x1660>)
   18254:	686a      	ldr	r2, [r5, #4]
   18256:	4641      	mov	r1, r8
   18258:	4620      	mov	r0, r4
   1825a:	f001 fb8b 	bl	19974 <d_print_comp>
   1825e:	f106 0a04 	add.w	sl, r6, #4
   18262:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18266:	f04f 0900 	mov.w	r9, #0
   1826a:	e008      	b.n	1827e <d_print_comp_inner+0x1452>
   1826c:	460b      	mov	r3, r1
   1826e:	3101      	adds	r1, #1
   18270:	45b2      	cmp	sl, r6
   18272:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18276:	54e7      	strb	r7, [r4, r3]
   18278:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1827c:	d013      	beq.n	182a6 <d_print_comp_inner+0x147a>
   1827e:	29ff      	cmp	r1, #255	; 0xff
   18280:	f816 7b01 	ldrb.w	r7, [r6], #1
   18284:	d1f2      	bne.n	1826c <d_print_comp_inner+0x1440>
   18286:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1828a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1828e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18292:	4620      	mov	r0, r4
   18294:	4798      	blx	r3
   18296:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1829a:	3301      	adds	r3, #1
   1829c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   182a0:	2101      	movs	r1, #1
   182a2:	2300      	movs	r3, #0
   182a4:	e7e4      	b.n	18270 <d_print_comp_inner+0x1444>
   182a6:	68aa      	ldr	r2, [r5, #8]
   182a8:	4641      	mov	r1, r8
   182aa:	4620      	mov	r0, r4
   182ac:	f001 fb62 	bl	19974 <d_print_comp>
   182b0:	f7fe be8a 	b.w	16fc8 <d_print_comp_inner+0x19c>
   182b4:	686a      	ldr	r2, [r5, #4]
   182b6:	4641      	mov	r1, r8
   182b8:	4620      	mov	r0, r4
   182ba:	f001 fb5b 	bl	19974 <d_print_comp>
   182be:	f7fe be83 	b.w	16fc8 <d_print_comp_inner+0x19c>
   182c2:	686a      	ldr	r2, [r5, #4]
   182c4:	4641      	mov	r1, r8
   182c6:	4620      	mov	r0, r4
   182c8:	f001 fb54 	bl	19974 <d_print_comp>
   182cc:	f7fe be7c 	b.w	16fc8 <d_print_comp_inner+0x19c>
   182d0:	686a      	ldr	r2, [r5, #4]
   182d2:	4641      	mov	r1, r8
   182d4:	4620      	mov	r0, r4
   182d6:	f001 fb4d 	bl	19974 <d_print_comp>
   182da:	f7fe be75 	b.w	16fc8 <d_print_comp_inner+0x19c>
   182de:	686a      	ldr	r2, [r5, #4]
   182e0:	4641      	mov	r1, r8
   182e2:	4620      	mov	r0, r4
   182e4:	f001 fb46 	bl	19974 <d_print_comp>
   182e8:	f7fe be6e 	b.w	16fc8 <d_print_comp_inner+0x19c>
   182ec:	686a      	ldr	r2, [r5, #4]
   182ee:	4641      	mov	r1, r8
   182f0:	4620      	mov	r0, r4
   182f2:	f001 fb3f 	bl	19974 <d_print_comp>
   182f6:	f7fe be67 	b.w	16fc8 <d_print_comp_inner+0x19c>
   182fa:	686a      	ldr	r2, [r5, #4]
   182fc:	4641      	mov	r1, r8
   182fe:	4620      	mov	r0, r4
   18300:	f001 fb38 	bl	19974 <d_print_comp>
   18304:	f7fe be60 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18308:	686a      	ldr	r2, [r5, #4]
   1830a:	4641      	mov	r1, r8
   1830c:	4620      	mov	r0, r4
   1830e:	f001 fb31 	bl	19974 <d_print_comp>
   18312:	f7fe be59 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18316:	686a      	ldr	r2, [r5, #4]
   18318:	4641      	mov	r1, r8
   1831a:	4620      	mov	r0, r4
   1831c:	f001 fb2a 	bl	19974 <d_print_comp>
   18320:	f7fe be52 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18324:	686a      	ldr	r2, [r5, #4]
   18326:	4641      	mov	r1, r8
   18328:	4620      	mov	r0, r4
   1832a:	f001 fb23 	bl	19974 <d_print_comp>
   1832e:	f7fe be4b 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18332:	4641      	mov	r1, r8
   18334:	68aa      	ldr	r2, [r5, #8]
   18336:	4620      	mov	r0, r4
   18338:	f001 fb1c 	bl	19974 <d_print_comp>
   1833c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18340:	29ff      	cmp	r1, #255	; 0xff
   18342:	f000 8560 	beq.w	18e06 <d_print_comp_inner+0x1fda>
   18346:	1c4a      	adds	r2, r1, #1
   18348:	235d      	movs	r3, #93	; 0x5d
   1834a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1834e:	5463      	strb	r3, [r4, r1]
   18350:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18354:	f7fe be38 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18358:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1835c:	4e4c      	ldr	r6, [pc, #304]	; (18490 <d_print_comp_inner+0x1664>)
   1835e:	3301      	adds	r3, #1
   18360:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18364:	4641      	mov	r1, r8
   18366:	686a      	ldr	r2, [r5, #4]
   18368:	4620      	mov	r0, r4
   1836a:	f001 fb03 	bl	19974 <d_print_comp>
   1836e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18372:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18376:	3b01      	subs	r3, #1
   18378:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1837c:	f106 0902 	add.w	r9, r6, #2
   18380:	f04f 0800 	mov.w	r8, #0
   18384:	e008      	b.n	18398 <d_print_comp_inner+0x156c>
   18386:	460b      	mov	r3, r1
   18388:	3101      	adds	r1, #1
   1838a:	454e      	cmp	r6, r9
   1838c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18390:	54e7      	strb	r7, [r4, r3]
   18392:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18396:	d013      	beq.n	183c0 <d_print_comp_inner+0x1594>
   18398:	29ff      	cmp	r1, #255	; 0xff
   1839a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1839e:	d1f2      	bne.n	18386 <d_print_comp_inner+0x155a>
   183a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   183a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   183ac:	4620      	mov	r0, r4
   183ae:	4798      	blx	r3
   183b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183b4:	3301      	adds	r3, #1
   183b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183ba:	2101      	movs	r1, #1
   183bc:	2300      	movs	r3, #0
   183be:	e7e4      	b.n	1838a <d_print_comp_inner+0x155e>
   183c0:	68aa      	ldr	r2, [r5, #8]
   183c2:	4934      	ldr	r1, [pc, #208]	; (18494 <d_print_comp_inner+0x1668>)
   183c4:	3201      	adds	r2, #1
   183c6:	a804      	add	r0, sp, #16
   183c8:	f006 fbd0 	bl	1eb6c <sprintf>
   183cc:	a804      	add	r0, sp, #16
   183ce:	f006 fd77 	bl	1eec0 <strlen>
   183d2:	b318      	cbz	r0, 1841c <d_print_comp_inner+0x15f0>
   183d4:	ad04      	add	r5, sp, #16
   183d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   183da:	182f      	adds	r7, r5, r0
   183dc:	f04f 0800 	mov.w	r8, #0
   183e0:	e008      	b.n	183f4 <d_print_comp_inner+0x15c8>
   183e2:	460b      	mov	r3, r1
   183e4:	3101      	adds	r1, #1
   183e6:	42af      	cmp	r7, r5
   183e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183ec:	54e6      	strb	r6, [r4, r3]
   183ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   183f2:	d015      	beq.n	18420 <d_print_comp_inner+0x15f4>
   183f4:	29ff      	cmp	r1, #255	; 0xff
   183f6:	f815 6b01 	ldrb.w	r6, [r5], #1
   183fa:	d1f2      	bne.n	183e2 <d_print_comp_inner+0x15b6>
   183fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18400:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18404:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18408:	4620      	mov	r0, r4
   1840a:	4798      	blx	r3
   1840c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18410:	3301      	adds	r3, #1
   18412:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18416:	2101      	movs	r1, #1
   18418:	2300      	movs	r3, #0
   1841a:	e7e4      	b.n	183e6 <d_print_comp_inner+0x15ba>
   1841c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18420:	29ff      	cmp	r1, #255	; 0xff
   18422:	f000 8560 	beq.w	18ee6 <d_print_comp_inner+0x20ba>
   18426:	1c4a      	adds	r2, r1, #1
   18428:	237d      	movs	r3, #125	; 0x7d
   1842a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1842e:	5463      	strb	r3, [r4, r1]
   18430:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18434:	f7fe bdc8 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18438:	686a      	ldr	r2, [r5, #4]
   1843a:	4641      	mov	r1, r8
   1843c:	4620      	mov	r0, r4
   1843e:	f001 fa99 	bl	19974 <d_print_comp>
   18442:	f7fe bdc1 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18446:	4641      	mov	r1, r8
   18448:	68aa      	ldr	r2, [r5, #8]
   1844a:	4620      	mov	r0, r4
   1844c:	f001 fa92 	bl	19974 <d_print_comp>
   18450:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18454:	29ff      	cmp	r1, #255	; 0xff
   18456:	f000 850b 	beq.w	18e70 <d_print_comp_inner+0x2044>
   1845a:	1c4a      	adds	r2, r1, #1
   1845c:	235d      	movs	r3, #93	; 0x5d
   1845e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18462:	5463      	strb	r3, [r4, r1]
   18464:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18468:	f7fe bdae 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1846c:	686a      	ldr	r2, [r5, #4]
   1846e:	4641      	mov	r1, r8
   18470:	4620      	mov	r0, r4
   18472:	f001 fa7f 	bl	19974 <d_print_comp>
   18476:	f7fe bda7 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1847a:	bf00      	nop
   1847c:	00024604 	.word	0x00024604
   18480:	000247fc 	.word	0x000247fc
   18484:	0002488b 	.word	0x0002488b
   18488:	0002484b 	.word	0x0002484b
   1848c:	000246a0 	.word	0x000246a0
   18490:	00024898 	.word	0x00024898
   18494:	000245f0 	.word	0x000245f0
   18498:	f8da 5004 	ldr.w	r5, [sl, #4]
   1849c:	782b      	ldrb	r3, [r5, #0]
   1849e:	3b61      	subs	r3, #97	; 0x61
   184a0:	2b19      	cmp	r3, #25
   184a2:	d809      	bhi.n	184b8 <d_print_comp_inner+0x168c>
   184a4:	29ff      	cmp	r1, #255	; 0xff
   184a6:	f000 8793 	beq.w	193d0 <d_print_comp_inner+0x25a4>
   184aa:	2320      	movs	r3, #32
   184ac:	1c4a      	adds	r2, r1, #1
   184ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   184b2:	5463      	strb	r3, [r4, r1]
   184b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   184b8:	19eb      	adds	r3, r5, r7
   184ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   184be:	2b20      	cmp	r3, #32
   184c0:	bf08      	it	eq
   184c2:	f107 37ff 	addeq.w	r7, r7, #4294967295
   184c6:	2f00      	cmp	r7, #0
   184c8:	f43e ad7e 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   184cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184d0:	442f      	add	r7, r5
   184d2:	f04f 0800 	mov.w	r8, #0
   184d6:	e009      	b.n	184ec <d_print_comp_inner+0x16c0>
   184d8:	460b      	mov	r3, r1
   184da:	3101      	adds	r1, #1
   184dc:	42af      	cmp	r7, r5
   184de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184e2:	54e6      	strb	r6, [r4, r3]
   184e4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184e8:	f43e ad6e 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   184ec:	29ff      	cmp	r1, #255	; 0xff
   184ee:	f815 6b01 	ldrb.w	r6, [r5], #1
   184f2:	d1f1      	bne.n	184d8 <d_print_comp_inner+0x16ac>
   184f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184f8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   184fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18500:	4620      	mov	r0, r4
   18502:	4798      	blx	r3
   18504:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18508:	3301      	adds	r3, #1
   1850a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1850e:	2101      	movs	r1, #1
   18510:	2300      	movs	r3, #0
   18512:	e7e3      	b.n	184dc <d_print_comp_inner+0x16b0>
   18514:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18518:	b13a      	cbz	r2, 1852a <d_print_comp_inner+0x16fe>
   1851a:	ab14      	add	r3, sp, #80	; 0x50
   1851c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18520:	f843 1d48 	str.w	r1, [r3, #-72]!
   18524:	9203      	str	r2, [sp, #12]
   18526:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1852a:	686b      	ldr	r3, [r5, #4]
   1852c:	781a      	ldrb	r2, [r3, #0]
   1852e:	2a04      	cmp	r2, #4
   18530:	f000 830e 	beq.w	18b50 <d_print_comp_inner+0x1d24>
   18534:	a804      	add	r0, sp, #16
   18536:	461a      	mov	r2, r3
   18538:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   1853c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18540:	4641      	mov	r1, r8
   18542:	4620      	mov	r0, r4
   18544:	9304      	str	r3, [sp, #16]
   18546:	9505      	str	r5, [sp, #20]
   18548:	f7fe fc70 	bl	16e2c <d_print_comp_inner>
   1854c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18550:	9a05      	ldr	r2, [sp, #20]
   18552:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18556:	2b00      	cmp	r3, #0
   18558:	f43e ad36 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   1855c:	9b02      	ldr	r3, [sp, #8]
   1855e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18562:	f7fe bd31 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18566:	68aa      	ldr	r2, [r5, #8]
   18568:	4641      	mov	r1, r8
   1856a:	4620      	mov	r0, r4
   1856c:	f001 fa02 	bl	19974 <d_print_comp>
   18570:	f7fe bd2a 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18574:	686a      	ldr	r2, [r5, #4]
   18576:	49d8      	ldr	r1, [pc, #864]	; (188d8 <d_print_comp_inner+0x1aac>)
   18578:	3201      	adds	r2, #1
   1857a:	a804      	add	r0, sp, #16
   1857c:	f006 faf6 	bl	1eb6c <sprintf>
   18580:	a804      	add	r0, sp, #16
   18582:	f006 fc9d 	bl	1eec0 <strlen>
   18586:	b318      	cbz	r0, 185d0 <d_print_comp_inner+0x17a4>
   18588:	ad04      	add	r5, sp, #16
   1858a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1858e:	182f      	adds	r7, r5, r0
   18590:	f04f 0800 	mov.w	r8, #0
   18594:	e008      	b.n	185a8 <d_print_comp_inner+0x177c>
   18596:	460b      	mov	r3, r1
   18598:	3101      	adds	r1, #1
   1859a:	42bd      	cmp	r5, r7
   1859c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185a0:	54e6      	strb	r6, [r4, r3]
   185a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   185a6:	d015      	beq.n	185d4 <d_print_comp_inner+0x17a8>
   185a8:	29ff      	cmp	r1, #255	; 0xff
   185aa:	f815 6b01 	ldrb.w	r6, [r5], #1
   185ae:	d1f2      	bne.n	18596 <d_print_comp_inner+0x176a>
   185b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185b4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   185b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   185bc:	4620      	mov	r0, r4
   185be:	4798      	blx	r3
   185c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   185c4:	3301      	adds	r3, #1
   185c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   185ca:	2101      	movs	r1, #1
   185cc:	2300      	movs	r3, #0
   185ce:	e7e4      	b.n	1859a <d_print_comp_inner+0x176e>
   185d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185d4:	29ff      	cmp	r1, #255	; 0xff
   185d6:	f000 8404 	beq.w	18de2 <d_print_comp_inner+0x1fb6>
   185da:	1c4a      	adds	r2, r1, #1
   185dc:	237d      	movs	r3, #125	; 0x7d
   185de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   185e2:	5463      	strb	r3, [r4, r1]
   185e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   185e8:	f7fe bcee 	b.w	16fc8 <d_print_comp_inner+0x19c>
   185ec:	686a      	ldr	r2, [r5, #4]
   185ee:	4641      	mov	r1, r8
   185f0:	4620      	mov	r0, r4
   185f2:	f001 f9bf 	bl	19974 <d_print_comp>
   185f6:	f7fe bce7 	b.w	16fc8 <d_print_comp_inner+0x19c>
   185fa:	686a      	ldr	r2, [r5, #4]
   185fc:	4641      	mov	r1, r8
   185fe:	4620      	mov	r0, r4
   18600:	f001 f9b8 	bl	19974 <d_print_comp>
   18604:	f7fe bce0 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18608:	686a      	ldr	r2, [r5, #4]
   1860a:	4641      	mov	r1, r8
   1860c:	4620      	mov	r0, r4
   1860e:	f001 f9b1 	bl	19974 <d_print_comp>
   18612:	f7fe bcd9 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18616:	4eb1      	ldr	r6, [pc, #708]	; (188dc <d_print_comp_inner+0x1ab0>)
   18618:	68aa      	ldr	r2, [r5, #8]
   1861a:	4641      	mov	r1, r8
   1861c:	4620      	mov	r0, r4
   1861e:	f001 f9a9 	bl	19974 <d_print_comp>
   18622:	f106 0a05 	add.w	sl, r6, #5
   18626:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1862a:	f04f 0900 	mov.w	r9, #0
   1862e:	e008      	b.n	18642 <d_print_comp_inner+0x1816>
   18630:	460b      	mov	r3, r1
   18632:	3101      	adds	r1, #1
   18634:	4556      	cmp	r6, sl
   18636:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1863a:	54e7      	strb	r7, [r4, r3]
   1863c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18640:	d013      	beq.n	1866a <d_print_comp_inner+0x183e>
   18642:	29ff      	cmp	r1, #255	; 0xff
   18644:	f816 7b01 	ldrb.w	r7, [r6], #1
   18648:	d1f2      	bne.n	18630 <d_print_comp_inner+0x1804>
   1864a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1864e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18652:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18656:	4620      	mov	r0, r4
   18658:	4798      	blx	r3
   1865a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1865e:	3301      	adds	r3, #1
   18660:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18664:	2101      	movs	r1, #1
   18666:	2300      	movs	r3, #0
   18668:	e7e4      	b.n	18634 <d_print_comp_inner+0x1808>
   1866a:	686a      	ldr	r2, [r5, #4]
   1866c:	4641      	mov	r1, r8
   1866e:	4620      	mov	r0, r4
   18670:	f001 f980 	bl	19974 <d_print_comp>
   18674:	f7fe bca8 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18678:	686a      	ldr	r2, [r5, #4]
   1867a:	4641      	mov	r1, r8
   1867c:	4620      	mov	r0, r4
   1867e:	f001 f979 	bl	19974 <d_print_comp>
   18682:	f7fe bca1 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18686:	686a      	ldr	r2, [r5, #4]
   18688:	4641      	mov	r1, r8
   1868a:	4620      	mov	r0, r4
   1868c:	f001 f972 	bl	19974 <d_print_comp>
   18690:	f7fe bc9a 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18694:	686a      	ldr	r2, [r5, #4]
   18696:	4641      	mov	r1, r8
   18698:	4620      	mov	r0, r4
   1869a:	f001 f96b 	bl	19974 <d_print_comp>
   1869e:	f7fe bc93 	b.w	16fc8 <d_print_comp_inner+0x19c>
   186a2:	4641      	mov	r1, r8
   186a4:	686a      	ldr	r2, [r5, #4]
   186a6:	4620      	mov	r0, r4
   186a8:	f001 f964 	bl	19974 <d_print_comp>
   186ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186b0:	29ff      	cmp	r1, #255	; 0xff
   186b2:	f000 842a 	beq.w	18f0a <d_print_comp_inner+0x20de>
   186b6:	1c4a      	adds	r2, r1, #1
   186b8:	2329      	movs	r3, #41	; 0x29
   186ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   186be:	5463      	strb	r3, [r4, r1]
   186c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   186c4:	f7fe bc80 	b.w	16fc8 <d_print_comp_inner+0x19c>
   186c8:	686a      	ldr	r2, [r5, #4]
   186ca:	4641      	mov	r1, r8
   186cc:	4620      	mov	r0, r4
   186ce:	f001 f951 	bl	19974 <d_print_comp>
   186d2:	f7fe bc79 	b.w	16fc8 <d_print_comp_inner+0x19c>
   186d6:	2f04      	cmp	r7, #4
   186d8:	f1a6 0410 	sub.w	r4, r6, #16
   186dc:	f106 0e10 	add.w	lr, r6, #16
   186e0:	f000 8722 	beq.w	19528 <d_print_comp_inner+0x26fc>
   186e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   186e8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   186ec:	2300      	movs	r3, #0
   186ee:	f84e 4c10 	str.w	r4, [lr, #-16]
   186f2:	e906 1008 	stmdb	r6, {r3, ip}
   186f6:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   186fa:	f846 5c0c 	str.w	r5, [r6, #-12]
   186fe:	686d      	ldr	r5, [r5, #4]
   18700:	3701      	adds	r7, #1
   18702:	4676      	mov	r6, lr
   18704:	f7fe bf84 	b.w	17610 <d_print_comp_inner+0x7e4>
   18708:	68aa      	ldr	r2, [r5, #8]
   1870a:	9300      	str	r3, [sp, #0]
   1870c:	460e      	mov	r6, r1
   1870e:	4620      	mov	r0, r4
   18710:	4641      	mov	r1, r8
   18712:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   18716:	f001 f92d 	bl	19974 <d_print_comp>
   1871a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1871e:	9b00      	ldr	r3, [sp, #0]
   18720:	4295      	cmp	r5, r2
   18722:	f47e ac51 	bne.w	16fc8 <d_print_comp_inner+0x19c>
   18726:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1872a:	42b2      	cmp	r2, r6
   1872c:	f47e ac4c 	bne.w	16fc8 <d_print_comp_inner+0x19c>
   18730:	3b01      	subs	r3, #1
   18732:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18736:	f7fe bc47 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1873a:	462a      	mov	r2, r5
   1873c:	4641      	mov	r1, r8
   1873e:	4620      	mov	r0, r4
   18740:	f001 f928 	bl	19994 <d_print_mod>
   18744:	f7fe bc70 	b.w	17028 <d_print_comp_inner+0x1fc>
   18748:	686b      	ldr	r3, [r5, #4]
   1874a:	9300      	str	r3, [sp, #0]
   1874c:	f1b9 0f00 	cmp.w	r9, #0
   18750:	f47f abae 	bne.w	17eb0 <d_print_comp_inner+0x1084>
   18754:	f7fe bc38 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18758:	463a      	mov	r2, r7
   1875a:	a804      	add	r0, sp, #16
   1875c:	495e      	ldr	r1, [pc, #376]	; (188d8 <d_print_comp_inner+0x1aac>)
   1875e:	f006 fa05 	bl	1eb6c <sprintf>
   18762:	a804      	add	r0, sp, #16
   18764:	f006 fbac 	bl	1eec0 <strlen>
   18768:	b318      	cbz	r0, 187b2 <d_print_comp_inner+0x1986>
   1876a:	ad04      	add	r5, sp, #16
   1876c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18770:	182f      	adds	r7, r5, r0
   18772:	f04f 0800 	mov.w	r8, #0
   18776:	e008      	b.n	1878a <d_print_comp_inner+0x195e>
   18778:	460b      	mov	r3, r1
   1877a:	3101      	adds	r1, #1
   1877c:	42af      	cmp	r7, r5
   1877e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18782:	54e6      	strb	r6, [r4, r3]
   18784:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18788:	d015      	beq.n	187b6 <d_print_comp_inner+0x198a>
   1878a:	29ff      	cmp	r1, #255	; 0xff
   1878c:	f815 6b01 	ldrb.w	r6, [r5], #1
   18790:	d1f2      	bne.n	18778 <d_print_comp_inner+0x194c>
   18792:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18796:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1879a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1879e:	4620      	mov	r0, r4
   187a0:	4798      	blx	r3
   187a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187a6:	3301      	adds	r3, #1
   187a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187ac:	2101      	movs	r1, #1
   187ae:	2300      	movs	r3, #0
   187b0:	e7e4      	b.n	1877c <d_print_comp_inner+0x1950>
   187b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187b6:	29ff      	cmp	r1, #255	; 0xff
   187b8:	f000 84dd 	beq.w	19176 <d_print_comp_inner+0x234a>
   187bc:	1c4a      	adds	r2, r1, #1
   187be:	237d      	movs	r3, #125	; 0x7d
   187c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   187c4:	5463      	strb	r3, [r4, r1]
   187c6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   187ca:	f7fe bbfd 	b.w	16fc8 <d_print_comp_inner+0x19c>
   187ce:	2700      	movs	r7, #0
   187d0:	f7ff ba1f 	b.w	17c12 <d_print_comp_inner+0xde6>
   187d4:	68df      	ldr	r7, [r3, #12]
   187d6:	689d      	ldr	r5, [r3, #8]
   187d8:	2f00      	cmp	r7, #0
   187da:	f43e abf5 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   187de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   187e2:	442f      	add	r7, r5
   187e4:	f04f 0800 	mov.w	r8, #0
   187e8:	e009      	b.n	187fe <d_print_comp_inner+0x19d2>
   187ea:	460b      	mov	r3, r1
   187ec:	3101      	adds	r1, #1
   187ee:	42bd      	cmp	r5, r7
   187f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187f4:	54e6      	strb	r6, [r4, r3]
   187f6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   187fa:	f43e abe5 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   187fe:	29ff      	cmp	r1, #255	; 0xff
   18800:	f815 6b01 	ldrb.w	r6, [r5], #1
   18804:	d1f1      	bne.n	187ea <d_print_comp_inner+0x19be>
   18806:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1880a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1880e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18812:	4620      	mov	r0, r4
   18814:	4798      	blx	r3
   18816:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1881a:	3301      	adds	r3, #1
   1881c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18820:	2101      	movs	r1, #1
   18822:	2300      	movs	r3, #0
   18824:	e7e3      	b.n	187ee <d_print_comp_inner+0x19c2>
   18826:	686e      	ldr	r6, [r5, #4]
   18828:	68af      	ldr	r7, [r5, #8]
   1882a:	4437      	add	r7, r6
   1882c:	42be      	cmp	r6, r7
   1882e:	f4be abcb 	bcs.w	16fc8 <d_print_comp_inner+0x19c>
   18832:	f04f 0800 	mov.w	r8, #0
   18836:	e00d      	b.n	18854 <d_print_comp_inner+0x1a28>
   18838:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1883c:	29ff      	cmp	r1, #255	; 0xff
   1883e:	d036      	beq.n	188ae <d_print_comp_inner+0x1a82>
   18840:	1c4b      	adds	r3, r1, #1
   18842:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18846:	5465      	strb	r5, [r4, r1]
   18848:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1884c:	3601      	adds	r6, #1
   1884e:	42b7      	cmp	r7, r6
   18850:	f67e abba 	bls.w	16fc8 <d_print_comp_inner+0x19c>
   18854:	1bbb      	subs	r3, r7, r6
   18856:	2b03      	cmp	r3, #3
   18858:	7835      	ldrb	r5, [r6, #0]
   1885a:	dded      	ble.n	18838 <d_print_comp_inner+0x1a0c>
   1885c:	2d5f      	cmp	r5, #95	; 0x5f
   1885e:	d1eb      	bne.n	18838 <d_print_comp_inner+0x1a0c>
   18860:	7873      	ldrb	r3, [r6, #1]
   18862:	2b5f      	cmp	r3, #95	; 0x5f
   18864:	d1e8      	bne.n	18838 <d_print_comp_inner+0x1a0c>
   18866:	78b3      	ldrb	r3, [r6, #2]
   18868:	2b55      	cmp	r3, #85	; 0x55
   1886a:	d1e5      	bne.n	18838 <d_print_comp_inner+0x1a0c>
   1886c:	1cf3      	adds	r3, r6, #3
   1886e:	429f      	cmp	r7, r3
   18870:	d9e2      	bls.n	18838 <d_print_comp_inner+0x1a0c>
   18872:	2000      	movs	r0, #0
   18874:	e006      	b.n	18884 <d_print_comp_inner+0x1a58>
   18876:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   1887a:	429f      	cmp	r7, r3
   1887c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18880:	f000 85c7 	beq.w	19412 <d_print_comp_inner+0x25e6>
   18884:	4699      	mov	r9, r3
   18886:	f813 5b01 	ldrb.w	r5, [r3], #1
   1888a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   1888e:	b2d1      	uxtb	r1, r2
   18890:	2909      	cmp	r1, #9
   18892:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   18896:	d9f0      	bls.n	1887a <d_print_comp_inner+0x1a4e>
   18898:	f1be 0f05 	cmp.w	lr, #5
   1889c:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   188a0:	d9e9      	bls.n	18876 <d_print_comp_inner+0x1a4a>
   188a2:	2a05      	cmp	r2, #5
   188a4:	f200 8743 	bhi.w	1972e <d_print_comp_inner+0x2902>
   188a8:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   188ac:	e7e5      	b.n	1887a <d_print_comp_inner+0x1a4e>
   188ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   188b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188ba:	4620      	mov	r0, r4
   188bc:	4798      	blx	r3
   188be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188c2:	3301      	adds	r3, #1
   188c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   188c8:	2100      	movs	r1, #0
   188ca:	2301      	movs	r3, #1
   188cc:	e7b9      	b.n	18842 <d_print_comp_inner+0x1a16>
   188ce:	4d04      	ldr	r5, [pc, #16]	; (188e0 <d_print_comp_inner+0x1ab4>)
   188d0:	4698      	mov	r8, r3
   188d2:	1daf      	adds	r7, r5, #6
   188d4:	e010      	b.n	188f8 <d_print_comp_inner+0x1acc>
   188d6:	bf00      	nop
   188d8:	000245f0 	.word	0x000245f0
   188dc:	00024764 	.word	0x00024764
   188e0:	000247c4 	.word	0x000247c4
   188e4:	460b      	mov	r3, r1
   188e6:	3101      	adds	r1, #1
   188e8:	42bd      	cmp	r5, r7
   188ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   188ee:	54e6      	strb	r6, [r4, r3]
   188f0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   188f4:	f43e ab68 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   188f8:	29ff      	cmp	r1, #255	; 0xff
   188fa:	f815 6b01 	ldrb.w	r6, [r5], #1
   188fe:	d1f1      	bne.n	188e4 <d_print_comp_inner+0x1ab8>
   18900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18904:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1890c:	4620      	mov	r0, r4
   1890e:	4798      	blx	r3
   18910:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18914:	3301      	adds	r3, #1
   18916:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1891a:	2101      	movs	r1, #1
   1891c:	2300      	movs	r3, #0
   1891e:	e7e3      	b.n	188e8 <d_print_comp_inner+0x1abc>
   18920:	782b      	ldrb	r3, [r5, #0]
   18922:	2b2f      	cmp	r3, #47	; 0x2f
   18924:	f47e ab6a 	bne.w	16ffc <d_print_comp_inner+0x1d0>
   18928:	4601      	mov	r1, r0
   1892a:	460d      	mov	r5, r1
   1892c:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18930:	f7fe bb66 	b.w	17000 <d_print_comp_inner+0x1d4>
   18934:	4dd7      	ldr	r5, [pc, #860]	; (18c94 <d_print_comp_inner+0x1e68>)
   18936:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1893a:	f105 0804 	add.w	r8, r5, #4
   1893e:	e009      	b.n	18954 <d_print_comp_inner+0x1b28>
   18940:	460b      	mov	r3, r1
   18942:	3101      	adds	r1, #1
   18944:	45a8      	cmp	r8, r5
   18946:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1894a:	54e6      	strb	r6, [r4, r3]
   1894c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18950:	f43e ab3a 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18954:	29ff      	cmp	r1, #255	; 0xff
   18956:	f815 6b01 	ldrb.w	r6, [r5], #1
   1895a:	d1f1      	bne.n	18940 <d_print_comp_inner+0x1b14>
   1895c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18960:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18964:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18968:	4620      	mov	r0, r4
   1896a:	4798      	blx	r3
   1896c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18970:	3301      	adds	r3, #1
   18972:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18976:	2101      	movs	r1, #1
   18978:	2300      	movs	r3, #0
   1897a:	e7e3      	b.n	18944 <d_print_comp_inner+0x1b18>
   1897c:	4ec6      	ldr	r6, [pc, #792]	; (18c98 <d_print_comp_inner+0x1e6c>)
   1897e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18982:	f106 0905 	add.w	r9, r6, #5
   18986:	f04f 0800 	mov.w	r8, #0
   1898a:	e008      	b.n	1899e <d_print_comp_inner+0x1b72>
   1898c:	460b      	mov	r3, r1
   1898e:	3101      	adds	r1, #1
   18990:	45b1      	cmp	r9, r6
   18992:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18996:	54e7      	strb	r7, [r4, r3]
   18998:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1899c:	d013      	beq.n	189c6 <d_print_comp_inner+0x1b9a>
   1899e:	29ff      	cmp	r1, #255	; 0xff
   189a0:	f816 7b01 	ldrb.w	r7, [r6], #1
   189a4:	d1f2      	bne.n	1898c <d_print_comp_inner+0x1b60>
   189a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   189ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189b2:	4620      	mov	r0, r4
   189b4:	4798      	blx	r3
   189b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189ba:	3301      	adds	r3, #1
   189bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189c0:	2101      	movs	r1, #1
   189c2:	2300      	movs	r3, #0
   189c4:	e7e4      	b.n	18990 <d_print_comp_inner+0x1b64>
   189c6:	686a      	ldr	r2, [r5, #4]
   189c8:	49b4      	ldr	r1, [pc, #720]	; (18c9c <d_print_comp_inner+0x1e70>)
   189ca:	3201      	adds	r2, #1
   189cc:	a804      	add	r0, sp, #16
   189ce:	f006 f8cd 	bl	1eb6c <sprintf>
   189d2:	a804      	add	r0, sp, #16
   189d4:	f006 fa74 	bl	1eec0 <strlen>
   189d8:	2800      	cmp	r0, #0
   189da:	f43e aaf5 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   189de:	ad04      	add	r5, sp, #16
   189e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189e4:	182f      	adds	r7, r5, r0
   189e6:	f04f 0800 	mov.w	r8, #0
   189ea:	e009      	b.n	18a00 <d_print_comp_inner+0x1bd4>
   189ec:	460b      	mov	r3, r1
   189ee:	3101      	adds	r1, #1
   189f0:	42af      	cmp	r7, r5
   189f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   189f6:	54e6      	strb	r6, [r4, r3]
   189f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   189fc:	f43e aae4 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18a00:	29ff      	cmp	r1, #255	; 0xff
   18a02:	f815 6b01 	ldrb.w	r6, [r5], #1
   18a06:	d1f1      	bne.n	189ec <d_print_comp_inner+0x1bc0>
   18a08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18a10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a14:	4620      	mov	r0, r4
   18a16:	4798      	blx	r3
   18a18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a1c:	3301      	adds	r3, #1
   18a1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a22:	2101      	movs	r1, #1
   18a24:	2300      	movs	r3, #0
   18a26:	e7e3      	b.n	189f0 <d_print_comp_inner+0x1bc4>
   18a28:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   18a2c:	f105 0208 	add.w	r2, r5, #8
   18a30:	4641      	mov	r1, r8
   18a32:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   18a36:	f001 fc91 	bl	1a35c <d_print_function_type.isra.11>
   18a3a:	686a      	ldr	r2, [r5, #4]
   18a3c:	2a00      	cmp	r2, #0
   18a3e:	f43e aac3 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18a42:	4641      	mov	r1, r8
   18a44:	4620      	mov	r0, r4
   18a46:	f000 ff95 	bl	19974 <d_print_comp>
   18a4a:	f7fe babd 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18a4e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a52:	f7ff b9a2 	b.w	17d9a <d_print_comp_inner+0xf6e>
   18a56:	4e92      	ldr	r6, [pc, #584]	; (18ca0 <d_print_comp_inner+0x1e74>)
   18a58:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18a5c:	f106 0a05 	add.w	sl, r6, #5
   18a60:	f04f 0900 	mov.w	r9, #0
   18a64:	e009      	b.n	18a7a <d_print_comp_inner+0x1c4e>
   18a66:	460b      	mov	r3, r1
   18a68:	3101      	adds	r1, #1
   18a6a:	45b2      	cmp	sl, r6
   18a6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18a70:	54e7      	strb	r7, [r4, r3]
   18a72:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18a76:	f43f a97a 	beq.w	17d6e <d_print_comp_inner+0xf42>
   18a7a:	29ff      	cmp	r1, #255	; 0xff
   18a7c:	f816 7b01 	ldrb.w	r7, [r6], #1
   18a80:	d1f1      	bne.n	18a66 <d_print_comp_inner+0x1c3a>
   18a82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a86:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18a8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a8e:	4620      	mov	r0, r4
   18a90:	4798      	blx	r3
   18a92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a96:	3301      	adds	r3, #1
   18a98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a9c:	2101      	movs	r1, #1
   18a9e:	2300      	movs	r3, #0
   18aa0:	e7e3      	b.n	18a6a <d_print_comp_inner+0x1c3e>
   18aa2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18aa6:	497f      	ldr	r1, [pc, #508]	; (18ca4 <d_print_comp_inner+0x1e78>)
   18aa8:	681f      	ldr	r7, [r3, #0]
   18aaa:	4638      	mov	r0, r7
   18aac:	f006 f88c 	bl	1ebc8 <strcmp>
   18ab0:	f896 a000 	ldrb.w	sl, [r6]
   18ab4:	b918      	cbnz	r0, 18abe <d_print_comp_inner+0x1c92>
   18ab6:	f1ba 0f03 	cmp.w	sl, #3
   18aba:	f000 851b 	beq.w	194f4 <d_print_comp_inner+0x26c8>
   18abe:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   18ac2:	f000 85fd 	beq.w	196c0 <d_print_comp_inner+0x2894>
   18ac6:	4978      	ldr	r1, [pc, #480]	; (18ca8 <d_print_comp_inner+0x1e7c>)
   18ac8:	4638      	mov	r0, r7
   18aca:	f006 f87d 	bl	1ebc8 <strcmp>
   18ace:	4605      	mov	r5, r0
   18ad0:	2800      	cmp	r0, #0
   18ad2:	f000 8135 	beq.w	18d40 <d_print_comp_inner+0x1f14>
   18ad6:	4975      	ldr	r1, [pc, #468]	; (18cac <d_print_comp_inner+0x1e80>)
   18ad8:	4638      	mov	r0, r7
   18ada:	f006 f875 	bl	1ebc8 <strcmp>
   18ade:	2800      	cmp	r0, #0
   18ae0:	f000 82b6 	beq.w	19050 <d_print_comp_inner+0x2224>
   18ae4:	464a      	mov	r2, r9
   18ae6:	4641      	mov	r1, r8
   18ae8:	4620      	mov	r0, r4
   18aea:	f001 fd2b 	bl	1a544 <d_print_expr_op>
   18aee:	2f00      	cmp	r7, #0
   18af0:	f43f a837 	beq.w	17b62 <d_print_comp_inner+0xd36>
   18af4:	496e      	ldr	r1, [pc, #440]	; (18cb0 <d_print_comp_inner+0x1e84>)
   18af6:	4638      	mov	r0, r7
   18af8:	f006 f866 	bl	1ebc8 <strcmp>
   18afc:	2800      	cmp	r0, #0
   18afe:	f000 8384 	beq.w	1920a <d_print_comp_inner+0x23de>
   18b02:	4638      	mov	r0, r7
   18b04:	496b      	ldr	r1, [pc, #428]	; (18cb4 <d_print_comp_inner+0x1e88>)
   18b06:	f006 f85f 	bl	1ebc8 <strcmp>
   18b0a:	4605      	mov	r5, r0
   18b0c:	2800      	cmp	r0, #0
   18b0e:	f47f a828 	bne.w	17b62 <d_print_comp_inner+0xd36>
   18b12:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18b16:	2bff      	cmp	r3, #255	; 0xff
   18b18:	f000 84db 	beq.w	194d2 <d_print_comp_inner+0x26a6>
   18b1c:	1c58      	adds	r0, r3, #1
   18b1e:	2528      	movs	r5, #40	; 0x28
   18b20:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18b24:	4641      	mov	r1, r8
   18b26:	54e5      	strb	r5, [r4, r3]
   18b28:	4632      	mov	r2, r6
   18b2a:	4620      	mov	r0, r4
   18b2c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18b30:	f000 ff20 	bl	19974 <d_print_comp>
   18b34:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b38:	29ff      	cmp	r1, #255	; 0xff
   18b3a:	f000 846d 	beq.w	19418 <d_print_comp_inner+0x25ec>
   18b3e:	2329      	movs	r3, #41	; 0x29
   18b40:	1c4a      	adds	r2, r1, #1
   18b42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b46:	5463      	strb	r3, [r4, r1]
   18b48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b4c:	f7fe ba3c 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18b50:	f10d 0910 	add.w	r9, sp, #16
   18b54:	685a      	ldr	r2, [r3, #4]
   18b56:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18b5a:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18b5e:	4641      	mov	r1, r8
   18b60:	4620      	mov	r0, r4
   18b62:	9204      	str	r2, [sp, #16]
   18b64:	9305      	str	r3, [sp, #20]
   18b66:	f7fe f961 	bl	16e2c <d_print_comp_inner>
   18b6a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18b6e:	9a05      	ldr	r2, [sp, #20]
   18b70:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18b74:	b113      	cbz	r3, 18b7c <d_print_comp_inner+0x1d50>
   18b76:	9b02      	ldr	r3, [sp, #8]
   18b78:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18b7c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18b80:	2b3c      	cmp	r3, #60	; 0x3c
   18b82:	f000 83d9 	beq.w	19338 <d_print_comp_inner+0x250c>
   18b86:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b8a:	29ff      	cmp	r1, #255	; 0xff
   18b8c:	f000 8467 	beq.w	1945e <d_print_comp_inner+0x2632>
   18b90:	1c4a      	adds	r2, r1, #1
   18b92:	233c      	movs	r3, #60	; 0x3c
   18b94:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b98:	5463      	strb	r3, [r4, r1]
   18b9a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b9e:	686b      	ldr	r3, [r5, #4]
   18ba0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18ba4:	689b      	ldr	r3, [r3, #8]
   18ba6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18baa:	461a      	mov	r2, r3
   18bac:	4641      	mov	r1, r8
   18bae:	4620      	mov	r0, r4
   18bb0:	9304      	str	r3, [sp, #16]
   18bb2:	9505      	str	r5, [sp, #20]
   18bb4:	f7fe f93a 	bl	16e2c <d_print_comp_inner>
   18bb8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18bbc:	9a05      	ldr	r2, [sp, #20]
   18bbe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18bc2:	2b3e      	cmp	r3, #62	; 0x3e
   18bc4:	f000 83ab 	beq.w	1931e <d_print_comp_inner+0x24f2>
   18bc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18bcc:	29ff      	cmp	r1, #255	; 0xff
   18bce:	f000 849a 	beq.w	19506 <d_print_comp_inner+0x26da>
   18bd2:	233e      	movs	r3, #62	; 0x3e
   18bd4:	1c4a      	adds	r2, r1, #1
   18bd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18bda:	5463      	strb	r3, [r4, r1]
   18bdc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18be0:	f7fe b9f2 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18be4:	6852      	ldr	r2, [r2, #4]
   18be6:	7c16      	ldrb	r6, [r2, #16]
   18be8:	2e00      	cmp	r6, #0
   18bea:	f43f a9e7 	beq.w	17fbc <d_print_comp_inner+0x1190>
   18bee:	2e06      	cmp	r6, #6
   18bf0:	f240 8337 	bls.w	19262 <d_print_comp_inner+0x2436>
   18bf4:	2e07      	cmp	r6, #7
   18bf6:	f47f a9e1 	bne.w	17fbc <d_print_comp_inner+0x1190>
   18bfa:	68aa      	ldr	r2, [r5, #8]
   18bfc:	7811      	ldrb	r1, [r2, #0]
   18bfe:	2900      	cmp	r1, #0
   18c00:	f47f a9dc 	bne.w	17fbc <d_print_comp_inner+0x1190>
   18c04:	6891      	ldr	r1, [r2, #8]
   18c06:	2901      	cmp	r1, #1
   18c08:	f47f a9d8 	bne.w	17fbc <d_print_comp_inner+0x1190>
   18c0c:	2b3c      	cmp	r3, #60	; 0x3c
   18c0e:	f47f a9d5 	bne.w	17fbc <d_print_comp_inner+0x1190>
   18c12:	6853      	ldr	r3, [r2, #4]
   18c14:	781b      	ldrb	r3, [r3, #0]
   18c16:	2b30      	cmp	r3, #48	; 0x30
   18c18:	f000 8626 	beq.w	19868 <d_print_comp_inner+0x2a3c>
   18c1c:	2b31      	cmp	r3, #49	; 0x31
   18c1e:	f47f a9cd 	bne.w	17fbc <d_print_comp_inner+0x1190>
   18c22:	2204      	movs	r2, #4
   18c24:	4924      	ldr	r1, [pc, #144]	; (18cb8 <d_print_comp_inner+0x1e8c>)
   18c26:	f7fb fe2d 	bl	14884 <d_append_buffer>
   18c2a:	f7fe b9cd 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18c2e:	4e23      	ldr	r6, [pc, #140]	; (18cbc <d_print_comp_inner+0x1e90>)
   18c30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c34:	f106 0a02 	add.w	sl, r6, #2
   18c38:	e009      	b.n	18c4e <d_print_comp_inner+0x1e22>
   18c3a:	460b      	mov	r3, r1
   18c3c:	3101      	adds	r1, #1
   18c3e:	45b2      	cmp	sl, r6
   18c40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c44:	54e7      	strb	r7, [r4, r3]
   18c46:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18c4a:	f43e ad52 	beq.w	176f2 <d_print_comp_inner+0x8c6>
   18c4e:	29ff      	cmp	r1, #255	; 0xff
   18c50:	f816 7b01 	ldrb.w	r7, [r6], #1
   18c54:	d1f1      	bne.n	18c3a <d_print_comp_inner+0x1e0e>
   18c56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c5a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18c5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c62:	4620      	mov	r0, r4
   18c64:	4798      	blx	r3
   18c66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c6a:	3301      	adds	r3, #1
   18c6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c70:	2101      	movs	r1, #1
   18c72:	2300      	movs	r3, #0
   18c74:	e7e3      	b.n	18c3e <d_print_comp_inner+0x1e12>
   18c76:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c7a:	29ff      	cmp	r1, #255	; 0xff
   18c7c:	f000 84e4 	beq.w	19648 <d_print_comp_inner+0x281c>
   18c80:	2220      	movs	r2, #32
   18c82:	1c4b      	adds	r3, r1, #1
   18c84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18c88:	5462      	strb	r2, [r4, r1]
   18c8a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18c8e:	f7fe bdbb 	b.w	17808 <d_print_comp_inner+0x9dc>
   18c92:	bf00      	nop
   18c94:	0002483c 	.word	0x0002483c
   18c98:	00024664 	.word	0x00024664
   18c9c:	000245f0 	.word	0x000245f0
   18ca0:	000247b4 	.word	0x000247b4
   18ca4:	000247e8 	.word	0x000247e8
   18ca8:	000248b8 	.word	0x000248b8
   18cac:	000245f4 	.word	0x000245f4
   18cb0:	000247ec 	.word	0x000247ec
   18cb4:	00024af8 	.word	0x00024af8
   18cb8:	00024818 	.word	0x00024818
   18cbc:	00024640 	.word	0x00024640
   18cc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18cc4:	29ff      	cmp	r1, #255	; 0xff
   18cc6:	f000 8465 	beq.w	19594 <d_print_comp_inner+0x2768>
   18cca:	2220      	movs	r2, #32
   18ccc:	1c4b      	adds	r3, r1, #1
   18cce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18cd2:	5462      	strb	r2, [r4, r1]
   18cd4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18cd8:	f7fe bd80 	b.w	177dc <d_print_comp_inner+0x9b0>
   18cdc:	2700      	movs	r7, #0
   18cde:	55a7      	strb	r7, [r4, r6]
   18ce0:	4631      	mov	r1, r6
   18ce2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ce6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18cea:	4620      	mov	r0, r4
   18cec:	4798      	blx	r3
   18cee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cf2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18cf6:	3301      	adds	r3, #1
   18cf8:	463e      	mov	r6, r7
   18cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cfe:	f7fe be31 	b.w	17964 <d_print_comp_inner+0xb38>
   18d02:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d06:	29ff      	cmp	r1, #255	; 0xff
   18d08:	f000 8465 	beq.w	195d6 <d_print_comp_inner+0x27aa>
   18d0c:	1c4a      	adds	r2, r1, #1
   18d0e:	235b      	movs	r3, #91	; 0x5b
   18d10:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d14:	5463      	strb	r3, [r4, r1]
   18d16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d1a:	4641      	mov	r1, r8
   18d1c:	68aa      	ldr	r2, [r5, #8]
   18d1e:	4620      	mov	r0, r4
   18d20:	f000 fe28 	bl	19974 <d_print_comp>
   18d24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d28:	29ff      	cmp	r1, #255	; 0xff
   18d2a:	f000 8312 	beq.w	19352 <d_print_comp_inner+0x2526>
   18d2e:	235d      	movs	r3, #93	; 0x5d
   18d30:	1c4a      	adds	r2, r1, #1
   18d32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d36:	5463      	strb	r3, [r4, r1]
   18d38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d3c:	f7fe b944 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18d40:	4631      	mov	r1, r6
   18d42:	4620      	mov	r0, r4
   18d44:	f7fb ffca 	bl	14cdc <d_find_pack>
   18d48:	b928      	cbnz	r0, 18d56 <d_print_comp_inner+0x1f2a>
   18d4a:	e007      	b.n	18d5c <d_print_comp_inner+0x1f30>
   18d4c:	6843      	ldr	r3, [r0, #4]
   18d4e:	b12b      	cbz	r3, 18d5c <d_print_comp_inner+0x1f30>
   18d50:	6880      	ldr	r0, [r0, #8]
   18d52:	3501      	adds	r5, #1
   18d54:	b110      	cbz	r0, 18d5c <d_print_comp_inner+0x1f30>
   18d56:	7803      	ldrb	r3, [r0, #0]
   18d58:	2b2f      	cmp	r3, #47	; 0x2f
   18d5a:	d0f7      	beq.n	18d4c <d_print_comp_inner+0x1f20>
   18d5c:	462a      	mov	r2, r5
   18d5e:	a804      	add	r0, sp, #16
   18d60:	49d4      	ldr	r1, [pc, #848]	; (190b4 <d_print_comp_inner+0x2288>)
   18d62:	f005 ff03 	bl	1eb6c <sprintf>
   18d66:	a804      	add	r0, sp, #16
   18d68:	f006 f8aa 	bl	1eec0 <strlen>
   18d6c:	2800      	cmp	r0, #0
   18d6e:	f43e a92b 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18d72:	ad04      	add	r5, sp, #16
   18d74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d78:	182f      	adds	r7, r5, r0
   18d7a:	f04f 0800 	mov.w	r8, #0
   18d7e:	e009      	b.n	18d94 <d_print_comp_inner+0x1f68>
   18d80:	460b      	mov	r3, r1
   18d82:	3101      	adds	r1, #1
   18d84:	42bd      	cmp	r5, r7
   18d86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18d8a:	54e6      	strb	r6, [r4, r3]
   18d8c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18d90:	f43e a91a 	beq.w	16fc8 <d_print_comp_inner+0x19c>
   18d94:	29ff      	cmp	r1, #255	; 0xff
   18d96:	f815 6b01 	ldrb.w	r6, [r5], #1
   18d9a:	d1f1      	bne.n	18d80 <d_print_comp_inner+0x1f54>
   18d9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18da0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18da4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18da8:	4620      	mov	r0, r4
   18daa:	4798      	blx	r3
   18dac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18db0:	3301      	adds	r3, #1
   18db2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18db6:	2101      	movs	r1, #1
   18db8:	2300      	movs	r3, #0
   18dba:	e7e3      	b.n	18d84 <d_print_comp_inner+0x1f58>
   18dbc:	686a      	ldr	r2, [r5, #4]
   18dbe:	4641      	mov	r1, r8
   18dc0:	4620      	mov	r0, r4
   18dc2:	f000 fdd7 	bl	19974 <d_print_comp>
   18dc6:	f7fe b8ff 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18dca:	29ff      	cmp	r1, #255	; 0xff
   18dcc:	f000 83d2 	beq.w	19574 <d_print_comp_inner+0x2748>
   18dd0:	232d      	movs	r3, #45	; 0x2d
   18dd2:	1c4a      	adds	r2, r1, #1
   18dd4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18dd8:	5463      	strb	r3, [r4, r1]
   18dda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18dde:	f7ff b90e 	b.w	17ffe <d_print_comp_inner+0x11d2>
   18de2:	2500      	movs	r5, #0
   18de4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18de8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18dec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18df0:	4620      	mov	r0, r4
   18df2:	4798      	blx	r3
   18df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18df8:	3301      	adds	r3, #1
   18dfa:	4629      	mov	r1, r5
   18dfc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e00:	2201      	movs	r2, #1
   18e02:	f7ff bbeb 	b.w	185dc <d_print_comp_inner+0x17b0>
   18e06:	2500      	movs	r5, #0
   18e08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e10:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e14:	4620      	mov	r0, r4
   18e16:	4798      	blx	r3
   18e18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e1c:	3301      	adds	r3, #1
   18e1e:	4629      	mov	r1, r5
   18e20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e24:	2201      	movs	r2, #1
   18e26:	f7ff ba8f 	b.w	18348 <d_print_comp_inner+0x151c>
   18e2a:	2600      	movs	r6, #0
   18e2c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18e30:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18e34:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18e38:	4798      	blx	r3
   18e3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e3e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18e42:	3301      	adds	r3, #1
   18e44:	4631      	mov	r1, r6
   18e46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e4a:	f7fe bd43 	b.w	178d4 <d_print_comp_inner+0xaa8>
   18e4e:	2600      	movs	r6, #0
   18e50:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18e54:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18e58:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18e5c:	4798      	blx	r3
   18e5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e62:	3301      	adds	r3, #1
   18e64:	4631      	mov	r1, r6
   18e66:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e6a:	2201      	movs	r2, #1
   18e6c:	f7fe bb74 	b.w	17558 <d_print_comp_inner+0x72c>
   18e70:	2500      	movs	r5, #0
   18e72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e7a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e7e:	4620      	mov	r0, r4
   18e80:	4798      	blx	r3
   18e82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e86:	3301      	adds	r3, #1
   18e88:	4629      	mov	r1, r5
   18e8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e8e:	2201      	movs	r2, #1
   18e90:	f7ff bae4 	b.w	1845c <d_print_comp_inner+0x1630>
   18e94:	220d      	movs	r2, #13
   18e96:	4988      	ldr	r1, [pc, #544]	; (190b8 <d_print_comp_inner+0x228c>)
   18e98:	4620      	mov	r0, r4
   18e9a:	f7fb fcf3 	bl	14884 <d_append_buffer>
   18e9e:	68a9      	ldr	r1, [r5, #8]
   18ea0:	4620      	mov	r0, r4
   18ea2:	3101      	adds	r1, #1
   18ea4:	f7fb ff9e 	bl	14de4 <d_append_num>
   18ea8:	2203      	movs	r2, #3
   18eaa:	4984      	ldr	r1, [pc, #528]	; (190bc <d_print_comp_inner+0x2290>)
   18eac:	4620      	mov	r0, r4
   18eae:	f7fb fce9 	bl	14884 <d_append_buffer>
   18eb2:	686d      	ldr	r5, [r5, #4]
   18eb4:	f7fe bc22 	b.w	176fc <d_print_comp_inner+0x8d0>
   18eb8:	2500      	movs	r5, #0
   18eba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ebe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ec2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ec6:	4620      	mov	r0, r4
   18ec8:	4798      	blx	r3
   18eca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ece:	3301      	adds	r3, #1
   18ed0:	4629      	mov	r1, r5
   18ed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ed6:	2201      	movs	r2, #1
   18ed8:	f7fe be08 	b.w	17aec <d_print_comp_inner+0xcc0>
   18edc:	2301      	movs	r3, #1
   18ede:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18ee2:	f7fe b871 	b.w	16fc8 <d_print_comp_inner+0x19c>
   18ee6:	2500      	movs	r5, #0
   18ee8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18eec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ef0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ef4:	4620      	mov	r0, r4
   18ef6:	4798      	blx	r3
   18ef8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18efc:	3301      	adds	r3, #1
   18efe:	4629      	mov	r1, r5
   18f00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f04:	2201      	movs	r2, #1
   18f06:	f7ff ba8f 	b.w	18428 <d_print_comp_inner+0x15fc>
   18f0a:	2500      	movs	r5, #0
   18f0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f14:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f18:	4620      	mov	r0, r4
   18f1a:	4798      	blx	r3
   18f1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f20:	3301      	adds	r3, #1
   18f22:	4629      	mov	r1, r5
   18f24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f28:	2201      	movs	r2, #1
   18f2a:	f7ff bbc5 	b.w	186b8 <d_print_comp_inner+0x188c>
   18f2e:	a914      	add	r1, sp, #80	; 0x50
   18f30:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18f34:	f841 0d40 	str.w	r0, [r1, #-64]!
   18f38:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18f3c:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18f40:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18f44:	4620      	mov	r0, r4
   18f46:	4641      	mov	r1, r8
   18f48:	9306      	str	r3, [sp, #24]
   18f4a:	9607      	str	r6, [sp, #28]
   18f4c:	9505      	str	r5, [sp, #20]
   18f4e:	f000 fd11 	bl	19974 <d_print_comp>
   18f52:	9e06      	ldr	r6, [sp, #24]
   18f54:	9b04      	ldr	r3, [sp, #16]
   18f56:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18f5a:	2e00      	cmp	r6, #0
   18f5c:	f47e a834 	bne.w	16fc8 <d_print_comp_inner+0x19c>
   18f60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f64:	29ff      	cmp	r1, #255	; 0xff
   18f66:	f000 8409 	beq.w	1977c <d_print_comp_inner+0x2950>
   18f6a:	2320      	movs	r3, #32
   18f6c:	1c4a      	adds	r2, r1, #1
   18f6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f72:	5463      	strb	r3, [r4, r1]
   18f74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f78:	f7fe be0b 	b.w	17b92 <d_print_comp_inner+0xd66>
   18f7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18f80:	2b00      	cmp	r3, #0
   18f82:	f6fe abff 	blt.w	17784 <d_print_comp_inner+0x958>
   18f86:	2b00      	cmp	r3, #0
   18f88:	f000 829d 	beq.w	194c6 <d_print_comp_inner+0x269a>
   18f8c:	6880      	ldr	r0, [r0, #8]
   18f8e:	3b01      	subs	r3, #1
   18f90:	2800      	cmp	r0, #0
   18f92:	f43e a82d 	beq.w	16ff0 <d_print_comp_inner+0x1c4>
   18f96:	7802      	ldrb	r2, [r0, #0]
   18f98:	2a2f      	cmp	r2, #47	; 0x2f
   18f9a:	d0f4      	beq.n	18f86 <d_print_comp_inner+0x215a>
   18f9c:	f7fe b828 	b.w	16ff0 <d_print_comp_inner+0x1c4>
   18fa0:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18fa4:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18fa8:	f1be 0f00 	cmp.w	lr, #0
   18fac:	dd14      	ble.n	18fd8 <d_print_comp_inner+0x21ac>
   18fae:	6813      	ldr	r3, [r2, #0]
   18fb0:	4299      	cmp	r1, r3
   18fb2:	f000 83f5 	beq.w	197a0 <d_print_comp_inner+0x2974>
   18fb6:	f102 0008 	add.w	r0, r2, #8
   18fba:	463b      	mov	r3, r7
   18fbc:	46a4      	mov	ip, r4
   18fbe:	e004      	b.n	18fca <d_print_comp_inner+0x219e>
   18fc0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18fc4:	42a1      	cmp	r1, r4
   18fc6:	f000 81d4 	beq.w	19372 <d_print_comp_inner+0x2546>
   18fca:	3301      	adds	r3, #1
   18fcc:	459e      	cmp	lr, r3
   18fce:	4681      	mov	r9, r0
   18fd0:	f100 0008 	add.w	r0, r0, #8
   18fd4:	d1f4      	bne.n	18fc0 <d_print_comp_inner+0x2194>
   18fd6:	4664      	mov	r4, ip
   18fd8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18fdc:	459e      	cmp	lr, r3
   18fde:	f280 84b9 	bge.w	19954 <d_print_comp_inner+0x2b28>
   18fe2:	f10e 0301 	add.w	r3, lr, #1
   18fe6:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18fea:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18fee:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18ff2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18ff6:	3004      	adds	r0, #4
   18ff8:	468e      	mov	lr, r1
   18ffa:	2a00      	cmp	r2, #0
   18ffc:	f000 848d 	beq.w	1991a <d_print_comp_inner+0x2aee>
   19000:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   19004:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   19008:	428b      	cmp	r3, r1
   1900a:	f103 0c01 	add.w	ip, r3, #1
   1900e:	f280 84a1 	bge.w	19954 <d_print_comp_inner+0x2b28>
   19012:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   19016:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   1901a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1901e:	6851      	ldr	r1, [r2, #4]
   19020:	6059      	str	r1, [r3, #4]
   19022:	6003      	str	r3, [r0, #0]
   19024:	6812      	ldr	r2, [r2, #0]
   19026:	4618      	mov	r0, r3
   19028:	e7e7      	b.n	18ffa <d_print_comp_inner+0x21ce>
   1902a:	2500      	movs	r5, #0
   1902c:	4619      	mov	r1, r3
   1902e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19032:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19036:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1903a:	4620      	mov	r0, r4
   1903c:	4798      	blx	r3
   1903e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19042:	1c5a      	adds	r2, r3, #1
   19044:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19048:	462b      	mov	r3, r5
   1904a:	2201      	movs	r2, #1
   1904c:	f7fe bd3d 	b.w	17aca <d_print_comp_inner+0xc9e>
   19050:	2e00      	cmp	r6, #0
   19052:	f000 844d 	beq.w	198f0 <d_print_comp_inner+0x2ac4>
   19056:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   1905a:	f040 8488 	bne.w	1996e <d_print_comp_inner+0x2b42>
   1905e:	6873      	ldr	r3, [r6, #4]
   19060:	b373      	cbz	r3, 190c0 <d_print_comp_inner+0x2294>
   19062:	4607      	mov	r7, r0
   19064:	e007      	b.n	19076 <d_print_comp_inner+0x224a>
   19066:	3701      	adds	r7, #1
   19068:	68b6      	ldr	r6, [r6, #8]
   1906a:	b356      	cbz	r6, 190c2 <d_print_comp_inner+0x2296>
   1906c:	7833      	ldrb	r3, [r6, #0]
   1906e:	2b2f      	cmp	r3, #47	; 0x2f
   19070:	d127      	bne.n	190c2 <d_print_comp_inner+0x2296>
   19072:	6873      	ldr	r3, [r6, #4]
   19074:	b32b      	cbz	r3, 190c2 <d_print_comp_inner+0x2296>
   19076:	781a      	ldrb	r2, [r3, #0]
   19078:	2a4a      	cmp	r2, #74	; 0x4a
   1907a:	d1f4      	bne.n	19066 <d_print_comp_inner+0x223a>
   1907c:	6859      	ldr	r1, [r3, #4]
   1907e:	4620      	mov	r0, r4
   19080:	f7fb fe2c 	bl	14cdc <d_find_pack>
   19084:	b198      	cbz	r0, 190ae <d_print_comp_inner+0x2282>
   19086:	7803      	ldrb	r3, [r0, #0]
   19088:	2b2f      	cmp	r3, #47	; 0x2f
   1908a:	f040 846c 	bne.w	19966 <d_print_comp_inner+0x2b3a>
   1908e:	6843      	ldr	r3, [r0, #4]
   19090:	2b00      	cmp	r3, #0
   19092:	f000 8464 	beq.w	1995e <d_print_comp_inner+0x2b32>
   19096:	4603      	mov	r3, r0
   19098:	2000      	movs	r0, #0
   1909a:	e004      	b.n	190a6 <d_print_comp_inner+0x227a>
   1909c:	781a      	ldrb	r2, [r3, #0]
   1909e:	2a2f      	cmp	r2, #47	; 0x2f
   190a0:	d105      	bne.n	190ae <d_print_comp_inner+0x2282>
   190a2:	685a      	ldr	r2, [r3, #4]
   190a4:	b11a      	cbz	r2, 190ae <d_print_comp_inner+0x2282>
   190a6:	689b      	ldr	r3, [r3, #8]
   190a8:	3001      	adds	r0, #1
   190aa:	2b00      	cmp	r3, #0
   190ac:	d1f6      	bne.n	1909c <d_print_comp_inner+0x2270>
   190ae:	4407      	add	r7, r0
   190b0:	e7da      	b.n	19068 <d_print_comp_inner+0x223c>
   190b2:	bf00      	nop
   190b4:	000245f0 	.word	0x000245f0
   190b8:	00024644 	.word	0x00024644
   190bc:	00024654 	.word	0x00024654
   190c0:	461f      	mov	r7, r3
   190c2:	4639      	mov	r1, r7
   190c4:	4620      	mov	r0, r4
   190c6:	f7fb fe8d 	bl	14de4 <d_append_num>
   190ca:	f7fd bf7d 	b.w	16fc8 <d_print_comp_inner+0x19c>
   190ce:	2500      	movs	r5, #0
   190d0:	4619      	mov	r1, r3
   190d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190de:	4620      	mov	r0, r4
   190e0:	4798      	blx	r3
   190e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190e6:	1c5a      	adds	r2, r3, #1
   190e8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   190ec:	462b      	mov	r3, r5
   190ee:	2101      	movs	r1, #1
   190f0:	f7fe bb8e 	b.w	17810 <d_print_comp_inner+0x9e4>
   190f4:	2600      	movs	r6, #0
   190f6:	4619      	mov	r1, r3
   190f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19100:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19104:	4620      	mov	r0, r4
   19106:	4798      	blx	r3
   19108:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1910c:	1c5a      	adds	r2, r3, #1
   1910e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19112:	4633      	mov	r3, r6
   19114:	2101      	movs	r1, #1
   19116:	f7fe bb65 	b.w	177e4 <d_print_comp_inner+0x9b8>
   1911a:	2200      	movs	r2, #0
   1911c:	4619      	mov	r1, r3
   1911e:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   19122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19126:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1912a:	4620      	mov	r0, r4
   1912c:	4798      	blx	r3
   1912e:	2329      	movs	r3, #41	; 0x29
   19130:	7023      	strb	r3, [r4, #0]
   19132:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19136:	782a      	ldrb	r2, [r5, #0]
   19138:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1913c:	2101      	movs	r1, #1
   1913e:	3301      	adds	r3, #1
   19140:	2a3d      	cmp	r2, #61	; 0x3d
   19142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19146:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1914a:	f47e af58 	bne.w	17ffe <d_print_comp_inner+0x11d2>
   1914e:	e63f      	b.n	18dd0 <d_print_comp_inner+0x1fa4>
   19150:	2700      	movs	r7, #0
   19152:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19156:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1915a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1915e:	4620      	mov	r0, r4
   19160:	4798      	blx	r3
   19162:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19166:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1916a:	3301      	adds	r3, #1
   1916c:	4639      	mov	r1, r7
   1916e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19172:	f7fe bf28 	b.w	17fc6 <d_print_comp_inner+0x119a>
   19176:	2500      	movs	r5, #0
   19178:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1917c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19180:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19184:	4620      	mov	r0, r4
   19186:	4798      	blx	r3
   19188:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1918c:	3301      	adds	r3, #1
   1918e:	4629      	mov	r1, r5
   19190:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19194:	2201      	movs	r2, #1
   19196:	f7ff bb12 	b.w	187be <d_print_comp_inner+0x1992>
   1919a:	781b      	ldrb	r3, [r3, #0]
   1919c:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   191a0:	2901      	cmp	r1, #1
   191a2:	d903      	bls.n	191ac <d_print_comp_inner+0x2380>
   191a4:	3b72      	subs	r3, #114	; 0x72
   191a6:	2b01      	cmp	r3, #1
   191a8:	f63d aead 	bhi.w	16f06 <d_print_comp_inner+0xda>
   191ac:	4641      	mov	r1, r8
   191ae:	4620      	mov	r0, r4
   191b0:	f001 f9c8 	bl	1a544 <d_print_expr_op>
   191b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191b8:	29ff      	cmp	r1, #255	; 0xff
   191ba:	f000 8271 	beq.w	196a0 <d_print_comp_inner+0x2874>
   191be:	1c4a      	adds	r2, r1, #1
   191c0:	233c      	movs	r3, #60	; 0x3c
   191c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   191c6:	5463      	strb	r3, [r4, r1]
   191c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   191cc:	68ab      	ldr	r3, [r5, #8]
   191ce:	4641      	mov	r1, r8
   191d0:	685a      	ldr	r2, [r3, #4]
   191d2:	4620      	mov	r0, r4
   191d4:	f000 fbce 	bl	19974 <d_print_comp>
   191d8:	2202      	movs	r2, #2
   191da:	49d5      	ldr	r1, [pc, #852]	; (19530 <d_print_comp_inner+0x2704>)
   191dc:	4620      	mov	r0, r4
   191de:	f7fb fb51 	bl	14884 <d_append_buffer>
   191e2:	68ab      	ldr	r3, [r5, #8]
   191e4:	4641      	mov	r1, r8
   191e6:	689a      	ldr	r2, [r3, #8]
   191e8:	4620      	mov	r0, r4
   191ea:	f000 fbc3 	bl	19974 <d_print_comp>
   191ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   191f2:	29ff      	cmp	r1, #255	; 0xff
   191f4:	f000 81df 	beq.w	195b6 <d_print_comp_inner+0x278a>
   191f8:	2329      	movs	r3, #41	; 0x29
   191fa:	1c4a      	adds	r2, r1, #1
   191fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19200:	5463      	strb	r3, [r4, r1]
   19202:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19206:	f7fd bedf 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1920a:	4632      	mov	r2, r6
   1920c:	4641      	mov	r1, r8
   1920e:	4620      	mov	r0, r4
   19210:	f000 fbb0 	bl	19974 <d_print_comp>
   19214:	f7fd bed8 	b.w	16fc8 <d_print_comp_inner+0x19c>
   19218:	2600      	movs	r6, #0
   1921a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1921e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19222:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19226:	4620      	mov	r0, r4
   19228:	4798      	blx	r3
   1922a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1922e:	3301      	adds	r3, #1
   19230:	4631      	mov	r1, r6
   19232:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19236:	2201      	movs	r2, #1
   19238:	f7fe ba55 	b.w	176e6 <d_print_comp_inner+0x8ba>
   1923c:	49bd      	ldr	r1, [pc, #756]	; (19534 <d_print_comp_inner+0x2708>)
   1923e:	6870      	ldr	r0, [r6, #4]
   19240:	f005 feac 	bl	1ef9c <strncmp>
   19244:	2800      	cmp	r0, #0
   19246:	f47e aabd 	bne.w	177c4 <d_print_comp_inner+0x998>
   1924a:	68aa      	ldr	r2, [r5, #8]
   1924c:	4641      	mov	r1, r8
   1924e:	4620      	mov	r0, r4
   19250:	f000 fb90 	bl	19974 <d_print_comp>
   19254:	2202      	movs	r2, #2
   19256:	49b8      	ldr	r1, [pc, #736]	; (19538 <d_print_comp_inner+0x270c>)
   19258:	4620      	mov	r0, r4
   1925a:	f7fb fb13 	bl	14884 <d_append_buffer>
   1925e:	f7fe badd 	b.w	1781c <d_print_comp_inner+0x9f0>
   19262:	68aa      	ldr	r2, [r5, #8]
   19264:	7817      	ldrb	r7, [r2, #0]
   19266:	2f00      	cmp	r7, #0
   19268:	f47e aea8 	bne.w	17fbc <d_print_comp_inner+0x1190>
   1926c:	2b3d      	cmp	r3, #61	; 0x3d
   1926e:	f000 82ef 	beq.w	19850 <d_print_comp_inner+0x2a24>
   19272:	68aa      	ldr	r2, [r5, #8]
   19274:	4641      	mov	r1, r8
   19276:	4620      	mov	r0, r4
   19278:	3e02      	subs	r6, #2
   1927a:	f000 fb7b 	bl	19974 <d_print_comp>
   1927e:	2e04      	cmp	r6, #4
   19280:	f63d aea2 	bhi.w	16fc8 <d_print_comp_inner+0x19c>
   19284:	e8df f006 	tbb	[pc, r6]
   19288:	0a111826 	.word	0x0a111826
   1928c:	03          	.byte	0x03
   1928d:	00          	.byte	0x00
   1928e:	4620      	mov	r0, r4
   19290:	2203      	movs	r2, #3
   19292:	49aa      	ldr	r1, [pc, #680]	; (1953c <d_print_comp_inner+0x2710>)
   19294:	f7fb faf6 	bl	14884 <d_append_buffer>
   19298:	f7fd be96 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1929c:	4620      	mov	r0, r4
   1929e:	2202      	movs	r2, #2
   192a0:	49a7      	ldr	r1, [pc, #668]	; (19540 <d_print_comp_inner+0x2714>)
   192a2:	f7fb faef 	bl	14884 <d_append_buffer>
   192a6:	f7fd be8f 	b.w	16fc8 <d_print_comp_inner+0x19c>
   192aa:	4620      	mov	r0, r4
   192ac:	2202      	movs	r2, #2
   192ae:	49a5      	ldr	r1, [pc, #660]	; (19544 <d_print_comp_inner+0x2718>)
   192b0:	f7fb fae8 	bl	14884 <d_append_buffer>
   192b4:	f7fd be88 	b.w	16fc8 <d_print_comp_inner+0x19c>
   192b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   192bc:	29ff      	cmp	r1, #255	; 0xff
   192be:	f000 831a 	beq.w	198f6 <d_print_comp_inner+0x2aca>
   192c2:	236c      	movs	r3, #108	; 0x6c
   192c4:	1c4a      	adds	r2, r1, #1
   192c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   192ca:	5463      	strb	r3, [r4, r1]
   192cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   192d0:	f7fd be7a 	b.w	16fc8 <d_print_comp_inner+0x19c>
   192d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   192d8:	29ff      	cmp	r1, #255	; 0xff
   192da:	f000 82db 	beq.w	19894 <d_print_comp_inner+0x2a68>
   192de:	2375      	movs	r3, #117	; 0x75
   192e0:	1c4a      	adds	r2, r1, #1
   192e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   192e6:	5463      	strb	r3, [r4, r1]
   192e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   192ec:	f7fd be6c 	b.w	16fc8 <d_print_comp_inner+0x19c>
   192f0:	2600      	movs	r6, #0
   192f2:	4619      	mov	r1, r3
   192f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192fc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19300:	4620      	mov	r0, r4
   19302:	4798      	blx	r3
   19304:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19308:	1c5a      	adds	r2, r3, #1
   1930a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1930e:	4633      	mov	r3, r6
   19310:	2101      	movs	r1, #1
   19312:	f7fe bd3c 	b.w	17d8e <d_print_comp_inner+0xf62>
   19316:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1931a:	f7fe bf95 	b.w	18248 <d_print_comp_inner+0x141c>
   1931e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19322:	29ff      	cmp	r1, #255	; 0xff
   19324:	f000 8244 	beq.w	197b0 <d_print_comp_inner+0x2984>
   19328:	2320      	movs	r3, #32
   1932a:	1c4a      	adds	r2, r1, #1
   1932c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19330:	5463      	strb	r3, [r4, r1]
   19332:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19336:	e447      	b.n	18bc8 <d_print_comp_inner+0x1d9c>
   19338:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1933c:	29ff      	cmp	r1, #255	; 0xff
   1933e:	f000 826e 	beq.w	1981e <d_print_comp_inner+0x29f2>
   19342:	2320      	movs	r3, #32
   19344:	1c4a      	adds	r2, r1, #1
   19346:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1934a:	5463      	strb	r3, [r4, r1]
   1934c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19350:	e419      	b.n	18b86 <d_print_comp_inner+0x1d5a>
   19352:	2500      	movs	r5, #0
   19354:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19358:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1935c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19360:	4620      	mov	r0, r4
   19362:	4798      	blx	r3
   19364:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19368:	3301      	adds	r3, #1
   1936a:	4629      	mov	r1, r5
   1936c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19370:	e4dd      	b.n	18d2e <d_print_comp_inner+0x1f02>
   19372:	4664      	mov	r4, ip
   19374:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   19378:	b1d8      	cbz	r0, 193b2 <d_print_comp_inner+0x2586>
   1937a:	6802      	ldr	r2, [r0, #0]
   1937c:	4291      	cmp	r1, r2
   1937e:	d00a      	beq.n	19396 <d_print_comp_inner+0x256a>
   19380:	4603      	mov	r3, r0
   19382:	e004      	b.n	1938e <d_print_comp_inner+0x2562>
   19384:	685b      	ldr	r3, [r3, #4]
   19386:	b1a3      	cbz	r3, 193b2 <d_print_comp_inner+0x2586>
   19388:	681a      	ldr	r2, [r3, #0]
   1938a:	4291      	cmp	r1, r2
   1938c:	d003      	beq.n	19396 <d_print_comp_inner+0x256a>
   1938e:	4295      	cmp	r5, r2
   19390:	d1f8      	bne.n	19384 <d_print_comp_inner+0x2558>
   19392:	4298      	cmp	r0, r3
   19394:	d0f6      	beq.n	19384 <d_print_comp_inner+0x2558>
   19396:	3104      	adds	r1, #4
   19398:	4620      	mov	r0, r4
   1939a:	f7fb fc83 	bl	14ca4 <d_lookup_template_argument.isra.6>
   1939e:	2800      	cmp	r0, #0
   193a0:	f43d ae26 	beq.w	16ff0 <d_print_comp_inner+0x1c4>
   193a4:	7803      	ldrb	r3, [r0, #0]
   193a6:	2b2f      	cmp	r3, #47	; 0x2f
   193a8:	f43d ae11 	beq.w	16fce <d_print_comp_inner+0x1a2>
   193ac:	4601      	mov	r1, r0
   193ae:	f7fe bc30 	b.w	17c12 <d_print_comp_inner+0xde6>
   193b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   193b6:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   193ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   193be:	3104      	adds	r1, #4
   193c0:	4620      	mov	r0, r4
   193c2:	f7fb fc6f 	bl	14ca4 <d_lookup_template_argument.isra.6>
   193c6:	2800      	cmp	r0, #0
   193c8:	f43d ae10 	beq.w	16fec <d_print_comp_inner+0x1c0>
   193cc:	2701      	movs	r7, #1
   193ce:	e7e9      	b.n	193a4 <d_print_comp_inner+0x2578>
   193d0:	2600      	movs	r6, #0
   193d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193d6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   193da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193de:	4620      	mov	r0, r4
   193e0:	4798      	blx	r3
   193e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193e6:	f8da 5004 	ldr.w	r5, [sl, #4]
   193ea:	3301      	adds	r3, #1
   193ec:	4631      	mov	r1, r6
   193ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193f2:	f7ff b85a 	b.w	184aa <d_print_comp_inner+0x167e>
   193f6:	68aa      	ldr	r2, [r5, #8]
   193f8:	4641      	mov	r1, r8
   193fa:	4620      	mov	r0, r4
   193fc:	f000 faba 	bl	19974 <d_print_comp>
   19400:	9b06      	ldr	r3, [sp, #24]
   19402:	9a00      	ldr	r2, [sp, #0]
   19404:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19408:	2b00      	cmp	r3, #0
   1940a:	f43e ac9d 	beq.w	17d48 <d_print_comp_inner+0xf1c>
   1940e:	f7fd bddb 	b.w	16fc8 <d_print_comp_inner+0x19c>
   19412:	255f      	movs	r5, #95	; 0x5f
   19414:	f7ff ba10 	b.w	18838 <d_print_comp_inner+0x1a0c>
   19418:	2500      	movs	r5, #0
   1941a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1941e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19422:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19426:	4620      	mov	r0, r4
   19428:	4798      	blx	r3
   1942a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1942e:	3301      	adds	r3, #1
   19430:	4629      	mov	r1, r5
   19432:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19436:	f7ff bb82 	b.w	18b3e <d_print_comp_inner+0x1d12>
   1943a:	4648      	mov	r0, r9
   1943c:	4942      	ldr	r1, [pc, #264]	; (19548 <d_print_comp_inner+0x271c>)
   1943e:	f005 fbc3 	bl	1ebc8 <strcmp>
   19442:	b120      	cbz	r0, 1944e <d_print_comp_inner+0x2622>
   19444:	463a      	mov	r2, r7
   19446:	4641      	mov	r1, r8
   19448:	4620      	mov	r0, r4
   1944a:	f001 f87b 	bl	1a544 <d_print_expr_op>
   1944e:	68ab      	ldr	r3, [r5, #8]
   19450:	4641      	mov	r1, r8
   19452:	689a      	ldr	r2, [r3, #8]
   19454:	4620      	mov	r0, r4
   19456:	f001 f8b3 	bl	1a5c0 <d_print_subexpr>
   1945a:	f7fd bd9d 	b.w	16f98 <d_print_comp_inner+0x16c>
   1945e:	2600      	movs	r6, #0
   19460:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19464:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19468:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1946c:	4620      	mov	r0, r4
   1946e:	4798      	blx	r3
   19470:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19474:	3301      	adds	r3, #1
   19476:	4631      	mov	r1, r6
   19478:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1947c:	f7ff bb88 	b.w	18b90 <d_print_comp_inner+0x1d64>
   19480:	2500      	movs	r5, #0
   19482:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19486:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1948a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1948e:	4620      	mov	r0, r4
   19490:	4798      	blx	r3
   19492:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19496:	3301      	adds	r3, #1
   19498:	4629      	mov	r1, r5
   1949a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1949e:	f7fe bb59 	b.w	17b54 <d_print_comp_inner+0xd28>
   194a2:	2500      	movs	r5, #0
   194a4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   194a8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   194ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   194b0:	4798      	blx	r3
   194b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194b6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   194ba:	3301      	adds	r3, #1
   194bc:	4629      	mov	r1, r5
   194be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194c2:	f7fe bb2b 	b.w	17b1c <d_print_comp_inner+0xcf0>
   194c6:	6840      	ldr	r0, [r0, #4]
   194c8:	2800      	cmp	r0, #0
   194ca:	f43d ad91 	beq.w	16ff0 <d_print_comp_inner+0x1c4>
   194ce:	f7fe b959 	b.w	17784 <d_print_comp_inner+0x958>
   194d2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   194d6:	4619      	mov	r1, r3
   194d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194e0:	4620      	mov	r0, r4
   194e2:	4798      	blx	r3
   194e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194e8:	1c5a      	adds	r2, r3, #1
   194ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   194ee:	462b      	mov	r3, r5
   194f0:	f7ff bb14 	b.w	18b1c <d_print_comp_inner+0x1cf0>
   194f4:	6873      	ldr	r3, [r6, #4]
   194f6:	781a      	ldrb	r2, [r3, #0]
   194f8:	2a01      	cmp	r2, #1
   194fa:	f000 8153 	beq.w	197a4 <d_print_comp_inner+0x2978>
   194fe:	f896 a000 	ldrb.w	sl, [r6]
   19502:	f7ff bae0 	b.w	18ac6 <d_print_comp_inner+0x1c9a>
   19506:	2500      	movs	r5, #0
   19508:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1950c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19510:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19514:	4620      	mov	r0, r4
   19516:	4798      	blx	r3
   19518:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1951c:	3301      	adds	r3, #1
   1951e:	4629      	mov	r1, r5
   19520:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19524:	f7ff bb55 	b.w	18bd2 <d_print_comp_inner+0x1da6>
   19528:	4654      	mov	r4, sl
   1952a:	f7fe be8d 	b.w	18248 <d_print_comp_inner+0x141c>
   1952e:	bf00      	nop
   19530:	000247f0 	.word	0x000247f0
   19534:	00024658 	.word	0x00024658
   19538:	00024660 	.word	0x00024660
   1953c:	0002480c 	.word	0x0002480c
   19540:	00024808 	.word	0x00024808
   19544:	00024804 	.word	0x00024804
   19548:	000245f8 	.word	0x000245f8
   1954c:	686a      	ldr	r2, [r5, #4]
   1954e:	4641      	mov	r1, r8
   19550:	4620      	mov	r0, r4
   19552:	f001 f835 	bl	1a5c0 <d_print_subexpr>
   19556:	4620      	mov	r0, r4
   19558:	2203      	movs	r2, #3
   1955a:	49e2      	ldr	r1, [pc, #904]	; (198e4 <d_print_comp_inner+0x2ab8>)
   1955c:	f7fb f992 	bl	14884 <d_append_buffer>
   19560:	f7fd bd32 	b.w	16fc8 <d_print_comp_inner+0x19c>
   19564:	ab14      	add	r3, sp, #80	; 0x50
   19566:	9603      	str	r6, [sp, #12]
   19568:	f843 cd48 	str.w	ip, [r3, #-72]!
   1956c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19570:	f7fe b85a 	b.w	17628 <d_print_comp_inner+0x7fc>
   19574:	2700      	movs	r7, #0
   19576:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1957a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1957e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19582:	4620      	mov	r0, r4
   19584:	4798      	blx	r3
   19586:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1958a:	3301      	adds	r3, #1
   1958c:	4639      	mov	r1, r7
   1958e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19592:	e41d      	b.n	18dd0 <d_print_comp_inner+0x1fa4>
   19594:	2600      	movs	r6, #0
   19596:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1959a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1959e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195a2:	4620      	mov	r0, r4
   195a4:	4798      	blx	r3
   195a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195aa:	3301      	adds	r3, #1
   195ac:	4631      	mov	r1, r6
   195ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195b2:	f7ff bb8a 	b.w	18cca <d_print_comp_inner+0x1e9e>
   195b6:	2500      	movs	r5, #0
   195b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195bc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195c4:	4620      	mov	r0, r4
   195c6:	4798      	blx	r3
   195c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195cc:	3301      	adds	r3, #1
   195ce:	4629      	mov	r1, r5
   195d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195d4:	e610      	b.n	191f8 <d_print_comp_inner+0x23cc>
   195d6:	2600      	movs	r6, #0
   195d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195dc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   195e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195e4:	4620      	mov	r0, r4
   195e6:	4798      	blx	r3
   195e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195ec:	3301      	adds	r3, #1
   195ee:	4631      	mov	r1, r6
   195f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195f4:	f7ff bb8a 	b.w	18d0c <d_print_comp_inner+0x1ee0>
   195f8:	685a      	ldr	r2, [r3, #4]
   195fa:	6891      	ldr	r1, [r2, #8]
   195fc:	2901      	cmp	r1, #1
   195fe:	f47d ac90 	bne.w	16f22 <d_print_comp_inner+0xf6>
   19602:	6852      	ldr	r2, [r2, #4]
   19604:	7812      	ldrb	r2, [r2, #0]
   19606:	2a3e      	cmp	r2, #62	; 0x3e
   19608:	f47d ac8b 	bne.w	16f22 <d_print_comp_inner+0xf6>
   1960c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19610:	29ff      	cmp	r1, #255	; 0xff
   19612:	d10f      	bne.n	19634 <d_print_comp_inner+0x2808>
   19614:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19618:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1961c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19620:	4620      	mov	r0, r4
   19622:	4798      	blx	r3
   19624:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19628:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1962c:	3301      	adds	r3, #1
   1962e:	4631      	mov	r1, r6
   19630:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19634:	2328      	movs	r3, #40	; 0x28
   19636:	1c4a      	adds	r2, r1, #1
   19638:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1963c:	5463      	strb	r3, [r4, r1]
   1963e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19642:	686b      	ldr	r3, [r5, #4]
   19644:	f7fd bc6d 	b.w	16f22 <d_print_comp_inner+0xf6>
   19648:	2500      	movs	r5, #0
   1964a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1964e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19652:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19656:	4620      	mov	r0, r4
   19658:	4798      	blx	r3
   1965a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1965e:	3301      	adds	r3, #1
   19660:	4629      	mov	r1, r5
   19662:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19666:	f7ff bb0b 	b.w	18c80 <d_print_comp_inner+0x1e54>
   1966a:	f8db b004 	ldr.w	fp, [fp, #4]
   1966e:	f1bb 0f00 	cmp.w	fp, #0
   19672:	f43e ade9 	beq.w	18248 <d_print_comp_inner+0x141c>
   19676:	f7fd bfc3 	b.w	17600 <d_print_comp_inner+0x7d4>
   1967a:	9b02      	ldr	r3, [sp, #8]
   1967c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19680:	f7fd bfdb 	b.w	1763a <d_print_comp_inner+0x80e>
   19684:	6893      	ldr	r3, [r2, #8]
   19686:	781b      	ldrb	r3, [r3, #0]
   19688:	2b29      	cmp	r3, #41	; 0x29
   1968a:	bf1c      	itt	ne
   1968c:	2301      	movne	r3, #1
   1968e:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   19692:	6852      	ldr	r2, [r2, #4]
   19694:	4641      	mov	r1, r8
   19696:	4620      	mov	r0, r4
   19698:	f000 ff92 	bl	1a5c0 <d_print_subexpr>
   1969c:	f7fd bc52 	b.w	16f44 <d_print_comp_inner+0x118>
   196a0:	2600      	movs	r6, #0
   196a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196a6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   196aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196ae:	4620      	mov	r0, r4
   196b0:	4798      	blx	r3
   196b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196b6:	3301      	adds	r3, #1
   196b8:	4631      	mov	r1, r6
   196ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196be:	e57e      	b.n	191be <d_print_comp_inner+0x2392>
   196c0:	6872      	ldr	r2, [r6, #4]
   196c2:	4641      	mov	r1, r8
   196c4:	4620      	mov	r0, r4
   196c6:	f000 ff7b 	bl	1a5c0 <d_print_subexpr>
   196ca:	464a      	mov	r2, r9
   196cc:	4641      	mov	r1, r8
   196ce:	4620      	mov	r0, r4
   196d0:	f000 ff38 	bl	1a544 <d_print_expr_op>
   196d4:	f7fd bc78 	b.w	16fc8 <d_print_comp_inner+0x19c>
   196d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196dc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   196e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196e4:	4620      	mov	r0, r4
   196e6:	4798      	blx	r3
   196e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196ec:	3301      	adds	r3, #1
   196ee:	4629      	mov	r1, r5
   196f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196f4:	f7fd bfad 	b.w	17652 <d_print_comp_inner+0x826>
   196f8:	464a      	mov	r2, r9
   196fa:	4641      	mov	r1, r8
   196fc:	4620      	mov	r0, r4
   196fe:	f000 ff5f 	bl	1a5c0 <d_print_subexpr>
   19702:	4652      	mov	r2, sl
   19704:	4641      	mov	r1, r8
   19706:	4620      	mov	r0, r4
   19708:	f000 ff1c 	bl	1a544 <d_print_expr_op>
   1970c:	463a      	mov	r2, r7
   1970e:	4641      	mov	r1, r8
   19710:	4620      	mov	r0, r4
   19712:	f000 ff55 	bl	1a5c0 <d_print_subexpr>
   19716:	4620      	mov	r0, r4
   19718:	2203      	movs	r2, #3
   1971a:	4973      	ldr	r1, [pc, #460]	; (198e8 <d_print_comp_inner+0x2abc>)
   1971c:	f7fb f8b2 	bl	14884 <d_append_buffer>
   19720:	462a      	mov	r2, r5
   19722:	4641      	mov	r1, r8
   19724:	4620      	mov	r0, r4
   19726:	f000 ff4b 	bl	1a5c0 <d_print_subexpr>
   1972a:	f7fd bc4d 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1972e:	454f      	cmp	r7, r9
   19730:	f67f ae6f 	bls.w	19412 <d_print_comp_inner+0x25e6>
   19734:	2d5f      	cmp	r5, #95	; 0x5f
   19736:	f47f ae6c 	bne.w	19412 <d_print_comp_inner+0x25e6>
   1973a:	28ff      	cmp	r0, #255	; 0xff
   1973c:	f63f a87c 	bhi.w	18838 <d_print_comp_inner+0x1a0c>
   19740:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19744:	29ff      	cmp	r1, #255	; 0xff
   19746:	b2c5      	uxtb	r5, r0
   19748:	d10f      	bne.n	1976a <d_print_comp_inner+0x293e>
   1974a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1974e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19752:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19756:	4620      	mov	r0, r4
   19758:	4798      	blx	r3
   1975a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1975e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   19762:	3301      	adds	r3, #1
   19764:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19768:	2100      	movs	r1, #0
   1976a:	1c4b      	adds	r3, r1, #1
   1976c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19770:	464e      	mov	r6, r9
   19772:	5465      	strb	r5, [r4, r1]
   19774:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19778:	f7ff b868 	b.w	1884c <d_print_comp_inner+0x1a20>
   1977c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19780:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19784:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19788:	4620      	mov	r0, r4
   1978a:	4798      	blx	r3
   1978c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19790:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19794:	3301      	adds	r3, #1
   19796:	4631      	mov	r1, r6
   19798:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1979c:	f7ff bbe5 	b.w	18f6a <d_print_comp_inner+0x213e>
   197a0:	4691      	mov	r9, r2
   197a2:	e5e7      	b.n	19374 <d_print_comp_inner+0x2548>
   197a4:	68b2      	ldr	r2, [r6, #8]
   197a6:	7812      	ldrb	r2, [r2, #0]
   197a8:	2a29      	cmp	r2, #41	; 0x29
   197aa:	bf08      	it	eq
   197ac:	461e      	moveq	r6, r3
   197ae:	e6a6      	b.n	194fe <d_print_comp_inner+0x26d2>
   197b0:	2500      	movs	r5, #0
   197b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197b6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   197ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197be:	4620      	mov	r0, r4
   197c0:	4798      	blx	r3
   197c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197c6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   197ca:	3301      	adds	r3, #1
   197cc:	4629      	mov	r1, r5
   197ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197d2:	e5a9      	b.n	19328 <d_print_comp_inner+0x24fc>
   197d4:	2600      	movs	r6, #0
   197d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197da:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   197de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197e2:	4620      	mov	r0, r4
   197e4:	4798      	blx	r3
   197e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197ea:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   197ee:	3301      	adds	r3, #1
   197f0:	4631      	mov	r1, r6
   197f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197f6:	f7fd bbc8 	b.w	16f8a <d_print_comp_inner+0x15e>
   197fa:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   197fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19802:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19806:	4620      	mov	r0, r4
   19808:	4798      	blx	r3
   1980a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1980e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19812:	3301      	adds	r3, #1
   19814:	4631      	mov	r1, r6
   19816:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1981a:	f7fd bba4 	b.w	16f66 <d_print_comp_inner+0x13a>
   1981e:	2600      	movs	r6, #0
   19820:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19824:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19828:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1982c:	4620      	mov	r0, r4
   1982e:	4798      	blx	r3
   19830:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19834:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19838:	3301      	adds	r3, #1
   1983a:	4631      	mov	r1, r6
   1983c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19840:	e57f      	b.n	19342 <d_print_comp_inner+0x2516>
   19842:	6841      	ldr	r1, [r0, #4]
   19844:	2900      	cmp	r1, #0
   19846:	f43d abd0 	beq.w	16fea <d_print_comp_inner+0x1be>
   1984a:	780b      	ldrb	r3, [r1, #0]
   1984c:	f7fe b9e1 	b.w	17c12 <d_print_comp_inner+0xde6>
   19850:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19854:	29ff      	cmp	r1, #255	; 0xff
   19856:	d00d      	beq.n	19874 <d_print_comp_inner+0x2a48>
   19858:	232d      	movs	r3, #45	; 0x2d
   1985a:	1c4a      	adds	r2, r1, #1
   1985c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19860:	5463      	strb	r3, [r4, r1]
   19862:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19866:	e504      	b.n	19272 <d_print_comp_inner+0x2446>
   19868:	2205      	movs	r2, #5
   1986a:	4920      	ldr	r1, [pc, #128]	; (198ec <d_print_comp_inner+0x2ac0>)
   1986c:	f7fb f80a 	bl	14884 <d_append_buffer>
   19870:	f7fd bbaa 	b.w	16fc8 <d_print_comp_inner+0x19c>
   19874:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19878:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   1987c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19880:	4798      	blx	r3
   19882:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19886:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1988a:	3301      	adds	r3, #1
   1988c:	4639      	mov	r1, r7
   1988e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19892:	e7e1      	b.n	19858 <d_print_comp_inner+0x2a2c>
   19894:	2500      	movs	r5, #0
   19896:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1989a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1989e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198a2:	4620      	mov	r0, r4
   198a4:	4798      	blx	r3
   198a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198aa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   198ae:	3301      	adds	r3, #1
   198b0:	4629      	mov	r1, r5
   198b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198b6:	e512      	b.n	192de <d_print_comp_inner+0x24b2>
   198b8:	2700      	movs	r7, #0
   198ba:	f7ff b913 	b.w	18ae4 <d_print_comp_inner+0x1cb8>
   198be:	2500      	movs	r5, #0
   198c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   198c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198cc:	4620      	mov	r0, r4
   198ce:	4798      	blx	r3
   198d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198d4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   198d8:	3301      	adds	r3, #1
   198da:	4629      	mov	r1, r5
   198dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198e0:	f7fd bb6b 	b.w	16fba <d_print_comp_inner+0x18e>
   198e4:	00022d54 	.word	0x00022d54
   198e8:	000247f8 	.word	0x000247f8
   198ec:	00024810 	.word	0x00024810
   198f0:	4637      	mov	r7, r6
   198f2:	f7ff bbe6 	b.w	190c2 <d_print_comp_inner+0x2296>
   198f6:	2500      	movs	r5, #0
   198f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19900:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19904:	4620      	mov	r0, r4
   19906:	4798      	blx	r3
   19908:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1990c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19910:	3301      	adds	r3, #1
   19912:	4629      	mov	r1, r5
   19914:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19918:	e4d3      	b.n	192c2 <d_print_comp_inner+0x2496>
   1991a:	4671      	mov	r1, lr
   1991c:	6002      	str	r2, [r0, #0]
   1991e:	3104      	adds	r1, #4
   19920:	4620      	mov	r0, r4
   19922:	f7fb f9bf 	bl	14ca4 <d_lookup_template_argument.isra.6>
   19926:	2800      	cmp	r0, #0
   19928:	f47f ad3c 	bne.w	193a4 <d_print_comp_inner+0x2578>
   1992c:	f7fd bb60 	b.w	16ff0 <d_print_comp_inner+0x1c4>
   19930:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19934:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19938:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1993c:	4620      	mov	r0, r4
   1993e:	4798      	blx	r3
   19940:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19944:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19948:	3301      	adds	r3, #1
   1994a:	4631      	mov	r1, r6
   1994c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19950:	f7fe bc02 	b.w	18158 <d_print_comp_inner+0x132c>
   19954:	2301      	movs	r3, #1
   19956:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1995a:	f7fd bb35 	b.w	16fc8 <d_print_comp_inner+0x19c>
   1995e:	4618      	mov	r0, r3
   19960:	4407      	add	r7, r0
   19962:	f7ff bb81 	b.w	19068 <d_print_comp_inner+0x223c>
   19966:	2000      	movs	r0, #0
   19968:	4407      	add	r7, r0
   1996a:	f7ff bb7d 	b.w	19068 <d_print_comp_inner+0x223c>
   1996e:	4607      	mov	r7, r0
   19970:	f7ff bba7 	b.w	190c2 <d_print_comp_inner+0x2296>

00019974 <d_print_comp>:
   19974:	b510      	push	{r4, lr}
   19976:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1997a:	b082      	sub	sp, #8
   1997c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19980:	4604      	mov	r4, r0
   19982:	e88d 000c 	stmia.w	sp, {r2, r3}
   19986:	f7fd fa51 	bl	16e2c <d_print_comp_inner>
   1998a:	9b01      	ldr	r3, [sp, #4]
   1998c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19990:	b002      	add	sp, #8
   19992:	bd10      	pop	{r4, pc}

00019994 <d_print_mod>:
   19994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19998:	7813      	ldrb	r3, [r2, #0]
   1999a:	3b03      	subs	r3, #3
   1999c:	b082      	sub	sp, #8
   1999e:	4615      	mov	r5, r2
   199a0:	4604      	mov	r4, r0
   199a2:	4688      	mov	r8, r1
   199a4:	2b49      	cmp	r3, #73	; 0x49
   199a6:	f200 8223 	bhi.w	19df0 <d_print_mod+0x45c>
   199aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   199ae:	01e7      	.short	0x01e7
   199b0:	02210221 	.word	0x02210221
   199b4:	02210221 	.word	0x02210221
   199b8:	02210221 	.word	0x02210221
   199bc:	02210221 	.word	0x02210221
   199c0:	02210221 	.word	0x02210221
   199c4:	02210221 	.word	0x02210221
   199c8:	02210221 	.word	0x02210221
   199cc:	02210221 	.word	0x02210221
   199d0:	02210221 	.word	0x02210221
   199d4:	02210221 	.word	0x02210221
   199d8:	01e90221 	.word	0x01e90221
   199dc:	01a80182 	.word	0x01a80182
   199e0:	018201e9 	.word	0x018201e9
   199e4:	01cd01a8 	.word	0x01cd01a8
   199e8:	006f01da 	.word	0x006f01da
   199ec:	009c008c 	.word	0x009c008c
   199f0:	00cf00ab 	.word	0x00cf00ab
   199f4:	022100f4 	.word	0x022100f4
   199f8:	02210221 	.word	0x02210221
   199fc:	01190221 	.word	0x01190221
   19a00:	015c0221 	.word	0x015c0221
   19a04:	02210221 	.word	0x02210221
   19a08:	02210221 	.word	0x02210221
   19a0c:	02210221 	.word	0x02210221
   19a10:	02210221 	.word	0x02210221
   19a14:	02210221 	.word	0x02210221
   19a18:	02210221 	.word	0x02210221
   19a1c:	02210221 	.word	0x02210221
   19a20:	02210221 	.word	0x02210221
   19a24:	02210221 	.word	0x02210221
   19a28:	02210221 	.word	0x02210221
   19a2c:	02210221 	.word	0x02210221
   19a30:	02210221 	.word	0x02210221
   19a34:	02210221 	.word	0x02210221
   19a38:	02210221 	.word	0x02210221
   19a3c:	02210221 	.word	0x02210221
   19a40:	004a      	.short	0x004a
   19a42:	4dd3      	ldr	r5, [pc, #844]	; (19d90 <d_print_mod+0x3fc>)
   19a44:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a48:	f105 0711 	add.w	r7, r5, #17
   19a4c:	f04f 0800 	mov.w	r8, #0
   19a50:	e008      	b.n	19a64 <d_print_mod+0xd0>
   19a52:	460b      	mov	r3, r1
   19a54:	3101      	adds	r1, #1
   19a56:	42bd      	cmp	r5, r7
   19a58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a5c:	54e6      	strb	r6, [r4, r3]
   19a5e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a62:	d02d      	beq.n	19ac0 <d_print_mod+0x12c>
   19a64:	29ff      	cmp	r1, #255	; 0xff
   19a66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19a6a:	d1f2      	bne.n	19a52 <d_print_mod+0xbe>
   19a6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a70:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a78:	4620      	mov	r0, r4
   19a7a:	4798      	blx	r3
   19a7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a80:	3301      	adds	r3, #1
   19a82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a86:	2101      	movs	r1, #1
   19a88:	2300      	movs	r3, #0
   19a8a:	e7e4      	b.n	19a56 <d_print_mod+0xc2>
   19a8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a90:	29ff      	cmp	r1, #255	; 0xff
   19a92:	f000 81f7 	beq.w	19e84 <d_print_mod+0x4f0>
   19a96:	1c4a      	adds	r2, r1, #1
   19a98:	2320      	movs	r3, #32
   19a9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19a9e:	5463      	strb	r3, [r4, r1]
   19aa0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19aa4:	68aa      	ldr	r2, [r5, #8]
   19aa6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19aaa:	9200      	str	r2, [sp, #0]
   19aac:	4641      	mov	r1, r8
   19aae:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19ab2:	4620      	mov	r0, r4
   19ab4:	9301      	str	r3, [sp, #4]
   19ab6:	f7fd f9b9 	bl	16e2c <d_print_comp_inner>
   19aba:	9b01      	ldr	r3, [sp, #4]
   19abc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19ac0:	b002      	add	sp, #8
   19ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ac6:	f011 0504 	ands.w	r5, r1, #4
   19aca:	d1f9      	bne.n	19ac0 <d_print_mod+0x12c>
   19acc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19ad0:	2bff      	cmp	r3, #255	; 0xff
   19ad2:	f000 821c 	beq.w	19f0e <d_print_mod+0x57a>
   19ad6:	222a      	movs	r2, #42	; 0x2a
   19ad8:	1c59      	adds	r1, r3, #1
   19ada:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ade:	54e2      	strb	r2, [r4, r3]
   19ae0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19ae4:	e7ec      	b.n	19ac0 <d_print_mod+0x12c>
   19ae6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19aea:	29ff      	cmp	r1, #255	; 0xff
   19aec:	f000 81b9 	beq.w	19e62 <d_print_mod+0x4ce>
   19af0:	1c4a      	adds	r2, r1, #1
   19af2:	2326      	movs	r3, #38	; 0x26
   19af4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19af8:	5463      	strb	r3, [r4, r1]
   19afa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19afe:	b002      	add	sp, #8
   19b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b08:	4da2      	ldr	r5, [pc, #648]	; (19d94 <d_print_mod+0x400>)
   19b0a:	f04f 0800 	mov.w	r8, #0
   19b0e:	1caf      	adds	r7, r5, #2
   19b10:	e008      	b.n	19b24 <d_print_mod+0x190>
   19b12:	460b      	mov	r3, r1
   19b14:	3101      	adds	r1, #1
   19b16:	42bd      	cmp	r5, r7
   19b18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b1c:	54e6      	strb	r6, [r4, r3]
   19b1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b22:	d0cd      	beq.n	19ac0 <d_print_mod+0x12c>
   19b24:	29ff      	cmp	r1, #255	; 0xff
   19b26:	f815 6b01 	ldrb.w	r6, [r5], #1
   19b2a:	d1f2      	bne.n	19b12 <d_print_mod+0x17e>
   19b2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b38:	4620      	mov	r0, r4
   19b3a:	4798      	blx	r3
   19b3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b40:	3301      	adds	r3, #1
   19b42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b46:	2101      	movs	r1, #1
   19b48:	2300      	movs	r3, #0
   19b4a:	e7e4      	b.n	19b16 <d_print_mod+0x182>
   19b4c:	4d92      	ldr	r5, [pc, #584]	; (19d98 <d_print_mod+0x404>)
   19b4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b52:	f105 0708 	add.w	r7, r5, #8
   19b56:	f04f 0800 	mov.w	r8, #0
   19b5a:	e008      	b.n	19b6e <d_print_mod+0x1da>
   19b5c:	460b      	mov	r3, r1
   19b5e:	3101      	adds	r1, #1
   19b60:	42bd      	cmp	r5, r7
   19b62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b66:	54e6      	strb	r6, [r4, r3]
   19b68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b6c:	d0a8      	beq.n	19ac0 <d_print_mod+0x12c>
   19b6e:	29ff      	cmp	r1, #255	; 0xff
   19b70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19b74:	d1f2      	bne.n	19b5c <d_print_mod+0x1c8>
   19b76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b82:	4620      	mov	r0, r4
   19b84:	4798      	blx	r3
   19b86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b8a:	3301      	adds	r3, #1
   19b8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b90:	2101      	movs	r1, #1
   19b92:	2300      	movs	r3, #0
   19b94:	e7e4      	b.n	19b60 <d_print_mod+0x1cc>
   19b96:	4d81      	ldr	r5, [pc, #516]	; (19d9c <d_print_mod+0x408>)
   19b98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b9c:	f105 070a 	add.w	r7, r5, #10
   19ba0:	f04f 0800 	mov.w	r8, #0
   19ba4:	e008      	b.n	19bb8 <d_print_mod+0x224>
   19ba6:	460b      	mov	r3, r1
   19ba8:	3101      	adds	r1, #1
   19baa:	42bd      	cmp	r5, r7
   19bac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bb0:	54e6      	strb	r6, [r4, r3]
   19bb2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19bb6:	d083      	beq.n	19ac0 <d_print_mod+0x12c>
   19bb8:	29ff      	cmp	r1, #255	; 0xff
   19bba:	f815 6b01 	ldrb.w	r6, [r5], #1
   19bbe:	d1f2      	bne.n	19ba6 <d_print_mod+0x212>
   19bc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19bc4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19bc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19bcc:	4620      	mov	r0, r4
   19bce:	4798      	blx	r3
   19bd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bd4:	3301      	adds	r3, #1
   19bd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bda:	2101      	movs	r1, #1
   19bdc:	2300      	movs	r3, #0
   19bde:	e7e4      	b.n	19baa <d_print_mod+0x216>
   19be0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19be4:	2b28      	cmp	r3, #40	; 0x28
   19be6:	d00b      	beq.n	19c00 <d_print_mod+0x26c>
   19be8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19bec:	2bff      	cmp	r3, #255	; 0xff
   19bee:	f000 8126 	beq.w	19e3e <d_print_mod+0x4aa>
   19bf2:	2220      	movs	r2, #32
   19bf4:	1c59      	adds	r1, r3, #1
   19bf6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bfa:	54e2      	strb	r2, [r4, r3]
   19bfc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19c00:	686a      	ldr	r2, [r5, #4]
   19c02:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19c06:	4d66      	ldr	r5, [pc, #408]	; (19da0 <d_print_mod+0x40c>)
   19c08:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19c0c:	4641      	mov	r1, r8
   19c0e:	4620      	mov	r0, r4
   19c10:	9301      	str	r3, [sp, #4]
   19c12:	9200      	str	r2, [sp, #0]
   19c14:	f7fd f90a 	bl	16e2c <d_print_comp_inner>
   19c18:	9b01      	ldr	r3, [sp, #4]
   19c1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19c1e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19c22:	1cef      	adds	r7, r5, #3
   19c24:	f04f 0800 	mov.w	r8, #0
   19c28:	e009      	b.n	19c3e <d_print_mod+0x2aa>
   19c2a:	460b      	mov	r3, r1
   19c2c:	3101      	adds	r1, #1
   19c2e:	42bd      	cmp	r5, r7
   19c30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c34:	54e6      	strb	r6, [r4, r3]
   19c36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19c3a:	f43f af41 	beq.w	19ac0 <d_print_mod+0x12c>
   19c3e:	29ff      	cmp	r1, #255	; 0xff
   19c40:	f815 6b01 	ldrb.w	r6, [r5], #1
   19c44:	d1f1      	bne.n	19c2a <d_print_mod+0x296>
   19c46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19c4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c52:	4620      	mov	r0, r4
   19c54:	4798      	blx	r3
   19c56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c5a:	3301      	adds	r3, #1
   19c5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c60:	2101      	movs	r1, #1
   19c62:	2300      	movs	r3, #0
   19c64:	e7e3      	b.n	19c2e <d_print_mod+0x29a>
   19c66:	4e4f      	ldr	r6, [pc, #316]	; (19da4 <d_print_mod+0x410>)
   19c68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c6c:	f106 0a0a 	add.w	sl, r6, #10
   19c70:	f04f 0900 	mov.w	r9, #0
   19c74:	e009      	b.n	19c8a <d_print_mod+0x2f6>
   19c76:	460b      	mov	r3, r1
   19c78:	3101      	adds	r1, #1
   19c7a:	4556      	cmp	r6, sl
   19c7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c80:	54e7      	strb	r7, [r4, r3]
   19c82:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19c86:	f000 80c0 	beq.w	19e0a <d_print_mod+0x476>
   19c8a:	29ff      	cmp	r1, #255	; 0xff
   19c8c:	f816 7b01 	ldrb.w	r7, [r6], #1
   19c90:	d1f1      	bne.n	19c76 <d_print_mod+0x2e2>
   19c92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c96:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19c9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c9e:	4620      	mov	r0, r4
   19ca0:	4798      	blx	r3
   19ca2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ca6:	3301      	adds	r3, #1
   19ca8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cac:	2101      	movs	r1, #1
   19cae:	2300      	movs	r3, #0
   19cb0:	e7e3      	b.n	19c7a <d_print_mod+0x2e6>
   19cb2:	4d3d      	ldr	r5, [pc, #244]	; (19da8 <d_print_mod+0x414>)
   19cb4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19cb8:	f105 0709 	add.w	r7, r5, #9
   19cbc:	f04f 0800 	mov.w	r8, #0
   19cc0:	e009      	b.n	19cd6 <d_print_mod+0x342>
   19cc2:	460b      	mov	r3, r1
   19cc4:	3101      	adds	r1, #1
   19cc6:	42bd      	cmp	r5, r7
   19cc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ccc:	54e6      	strb	r6, [r4, r3]
   19cce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19cd2:	f43f aef5 	beq.w	19ac0 <d_print_mod+0x12c>
   19cd6:	29ff      	cmp	r1, #255	; 0xff
   19cd8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19cdc:	d1f1      	bne.n	19cc2 <d_print_mod+0x32e>
   19cde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ce2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ce6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19cea:	4620      	mov	r0, r4
   19cec:	4798      	blx	r3
   19cee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19cf2:	3301      	adds	r3, #1
   19cf4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cf8:	2101      	movs	r1, #1
   19cfa:	2300      	movs	r3, #0
   19cfc:	e7e3      	b.n	19cc6 <d_print_mod+0x332>
   19cfe:	4d2b      	ldr	r5, [pc, #172]	; (19dac <d_print_mod+0x418>)
   19d00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19d04:	1daf      	adds	r7, r5, #6
   19d06:	f04f 0800 	mov.w	r8, #0
   19d0a:	e009      	b.n	19d20 <d_print_mod+0x38c>
   19d0c:	460b      	mov	r3, r1
   19d0e:	3101      	adds	r1, #1
   19d10:	42bd      	cmp	r5, r7
   19d12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d16:	54e6      	strb	r6, [r4, r3]
   19d18:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19d1c:	f43f aed0 	beq.w	19ac0 <d_print_mod+0x12c>
   19d20:	29ff      	cmp	r1, #255	; 0xff
   19d22:	f815 6b01 	ldrb.w	r6, [r5], #1
   19d26:	d1f1      	bne.n	19d0c <d_print_mod+0x378>
   19d28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d34:	4620      	mov	r0, r4
   19d36:	4798      	blx	r3
   19d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d3c:	3301      	adds	r3, #1
   19d3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d42:	2101      	movs	r1, #1
   19d44:	2300      	movs	r3, #0
   19d46:	e7e3      	b.n	19d10 <d_print_mod+0x37c>
   19d48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19d4c:	2bff      	cmp	r3, #255	; 0xff
   19d4e:	f000 80cc 	beq.w	19eea <d_print_mod+0x556>
   19d52:	2220      	movs	r2, #32
   19d54:	1c59      	adds	r1, r3, #1
   19d56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d5a:	54e2      	strb	r2, [r4, r3]
   19d5c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19d60:	e6c3      	b.n	19aea <d_print_mod+0x156>
   19d62:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19d66:	2bff      	cmp	r3, #255	; 0xff
   19d68:	f000 80ad 	beq.w	19ec6 <d_print_mod+0x532>
   19d6c:	2220      	movs	r2, #32
   19d6e:	1c59      	adds	r1, r3, #1
   19d70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d74:	54e2      	strb	r2, [r4, r3]
   19d76:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19d7a:	e6c5      	b.n	19b08 <d_print_mod+0x174>
   19d7c:	686a      	ldr	r2, [r5, #4]
   19d7e:	e692      	b.n	19aa6 <d_print_mod+0x112>
   19d80:	4d0b      	ldr	r5, [pc, #44]	; (19db0 <d_print_mod+0x41c>)
   19d82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19d86:	f105 0709 	add.w	r7, r5, #9
   19d8a:	f04f 0800 	mov.w	r8, #0
   19d8e:	e01b      	b.n	19dc8 <d_print_mod+0x434>
   19d90:	000248db 	.word	0x000248db
   19d94:	000248f0 	.word	0x000248f0
   19d98:	000248f3 	.word	0x000248f3
   19d9c:	00024900 	.word	0x00024900
   19da0:	0002490c 	.word	0x0002490c
   19da4:	00024910 	.word	0x00024910
   19da8:	000248c7 	.word	0x000248c7
   19dac:	000248d4 	.word	0x000248d4
   19db0:	000248bb 	.word	0x000248bb
   19db4:	460b      	mov	r3, r1
   19db6:	3101      	adds	r1, #1
   19db8:	42af      	cmp	r7, r5
   19dba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19dbe:	54e6      	strb	r6, [r4, r3]
   19dc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19dc4:	f43f ae7c 	beq.w	19ac0 <d_print_mod+0x12c>
   19dc8:	29ff      	cmp	r1, #255	; 0xff
   19dca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19dce:	d1f1      	bne.n	19db4 <d_print_mod+0x420>
   19dd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19dd4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19dd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ddc:	4620      	mov	r0, r4
   19dde:	4798      	blx	r3
   19de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19de4:	3301      	adds	r3, #1
   19de6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19dea:	2101      	movs	r1, #1
   19dec:	2300      	movs	r3, #0
   19dee:	e7e3      	b.n	19db8 <d_print_mod+0x424>
   19df0:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19df4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19df8:	462a      	mov	r2, r5
   19dfa:	9301      	str	r3, [sp, #4]
   19dfc:	9500      	str	r5, [sp, #0]
   19dfe:	f7fd f815 	bl	16e2c <d_print_comp_inner>
   19e02:	9b01      	ldr	r3, [sp, #4]
   19e04:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19e08:	e65a      	b.n	19ac0 <d_print_mod+0x12c>
   19e0a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19e0e:	686a      	ldr	r2, [r5, #4]
   19e10:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19e14:	4641      	mov	r1, r8
   19e16:	4620      	mov	r0, r4
   19e18:	9301      	str	r3, [sp, #4]
   19e1a:	9200      	str	r2, [sp, #0]
   19e1c:	f7fd f806 	bl	16e2c <d_print_comp_inner>
   19e20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19e24:	9b01      	ldr	r3, [sp, #4]
   19e26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19e2a:	29ff      	cmp	r1, #255	; 0xff
   19e2c:	d03a      	beq.n	19ea4 <d_print_mod+0x510>
   19e2e:	1c4a      	adds	r2, r1, #1
   19e30:	2329      	movs	r3, #41	; 0x29
   19e32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19e36:	5463      	strb	r3, [r4, r1]
   19e38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19e3c:	e640      	b.n	19ac0 <d_print_mod+0x12c>
   19e3e:	2600      	movs	r6, #0
   19e40:	4619      	mov	r1, r3
   19e42:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19e46:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19e4a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19e4e:	4798      	blx	r3
   19e50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e54:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19e58:	1c5a      	adds	r2, r3, #1
   19e5a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e5e:	4633      	mov	r3, r6
   19e60:	e6c7      	b.n	19bf2 <d_print_mod+0x25e>
   19e62:	2500      	movs	r5, #0
   19e64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e6c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19e70:	4620      	mov	r0, r4
   19e72:	4798      	blx	r3
   19e74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e78:	3301      	adds	r3, #1
   19e7a:	4629      	mov	r1, r5
   19e7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e80:	2201      	movs	r2, #1
   19e82:	e636      	b.n	19af2 <d_print_mod+0x15e>
   19e84:	2600      	movs	r6, #0
   19e86:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19e8a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19e8e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19e92:	4798      	blx	r3
   19e94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e98:	3301      	adds	r3, #1
   19e9a:	4631      	mov	r1, r6
   19e9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ea0:	2201      	movs	r2, #1
   19ea2:	e5f9      	b.n	19a98 <d_print_mod+0x104>
   19ea4:	2500      	movs	r5, #0
   19ea6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19eae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19eb2:	4620      	mov	r0, r4
   19eb4:	4798      	blx	r3
   19eb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19eba:	3301      	adds	r3, #1
   19ebc:	4629      	mov	r1, r5
   19ebe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ec2:	2201      	movs	r2, #1
   19ec4:	e7b4      	b.n	19e30 <d_print_mod+0x49c>
   19ec6:	2500      	movs	r5, #0
   19ec8:	4619      	mov	r1, r3
   19eca:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19ece:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19ed2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19ed6:	4798      	blx	r3
   19ed8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19edc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19ee0:	1c5a      	adds	r2, r3, #1
   19ee2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19ee6:	462b      	mov	r3, r5
   19ee8:	e740      	b.n	19d6c <d_print_mod+0x3d8>
   19eea:	2500      	movs	r5, #0
   19eec:	4619      	mov	r1, r3
   19eee:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19ef2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19ef6:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19efa:	4798      	blx	r3
   19efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f00:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19f04:	1c5a      	adds	r2, r3, #1
   19f06:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19f0a:	462b      	mov	r3, r5
   19f0c:	e721      	b.n	19d52 <d_print_mod+0x3be>
   19f0e:	4619      	mov	r1, r3
   19f10:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19f14:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19f18:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19f1c:	4798      	blx	r3
   19f1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f22:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19f26:	1c5a      	adds	r2, r3, #1
   19f28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19f2c:	462b      	mov	r3, r5
   19f2e:	e5d2      	b.n	19ad6 <d_print_mod+0x142>

00019f30 <d_print_mod_list>:
   19f30:	2a00      	cmp	r2, #0
   19f32:	f000 80a1 	beq.w	1a078 <d_print_mod_list+0x148>
   19f36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f3a:	461e      	mov	r6, r3
   19f3c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19f40:	b089      	sub	sp, #36	; 0x24
   19f42:	4605      	mov	r5, r0
   19f44:	bb43      	cbnz	r3, 19f98 <d_print_mod_list+0x68>
   19f46:	460f      	mov	r7, r1
   19f48:	4614      	mov	r4, r2
   19f4a:	f04f 0801 	mov.w	r8, #1
   19f4e:	e002      	b.n	19f56 <d_print_mod_list+0x26>
   19f50:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19f54:	bb03      	cbnz	r3, 19f98 <d_print_mod_list+0x68>
   19f56:	68a3      	ldr	r3, [r4, #8]
   19f58:	b9db      	cbnz	r3, 19f92 <d_print_mod_list+0x62>
   19f5a:	6862      	ldr	r2, [r4, #4]
   19f5c:	7813      	ldrb	r3, [r2, #0]
   19f5e:	b92e      	cbnz	r6, 19f6c <d_print_mod_list+0x3c>
   19f60:	f1a3 011c 	sub.w	r1, r3, #28
   19f64:	2904      	cmp	r1, #4
   19f66:	d914      	bls.n	19f92 <d_print_mod_list+0x62>
   19f68:	2b4c      	cmp	r3, #76	; 0x4c
   19f6a:	d012      	beq.n	19f92 <d_print_mod_list+0x62>
   19f6c:	68e1      	ldr	r1, [r4, #12]
   19f6e:	f8c4 8008 	str.w	r8, [r4, #8]
   19f72:	2b29      	cmp	r3, #41	; 0x29
   19f74:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19f78:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19f7c:	d00f      	beq.n	19f9e <d_print_mod_list+0x6e>
   19f7e:	2b2a      	cmp	r3, #42	; 0x2a
   19f80:	d018      	beq.n	19fb4 <d_print_mod_list+0x84>
   19f82:	2b02      	cmp	r3, #2
   19f84:	d021      	beq.n	19fca <d_print_mod_list+0x9a>
   19f86:	4639      	mov	r1, r7
   19f88:	4628      	mov	r0, r5
   19f8a:	f7ff fd03 	bl	19994 <d_print_mod>
   19f8e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19f92:	6824      	ldr	r4, [r4, #0]
   19f94:	2c00      	cmp	r4, #0
   19f96:	d1db      	bne.n	19f50 <d_print_mod_list+0x20>
   19f98:	b009      	add	sp, #36	; 0x24
   19f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f9e:	6823      	ldr	r3, [r4, #0]
   19fa0:	3208      	adds	r2, #8
   19fa2:	4639      	mov	r1, r7
   19fa4:	4628      	mov	r0, r5
   19fa6:	f000 f9d9 	bl	1a35c <d_print_function_type.isra.11>
   19faa:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19fae:	b009      	add	sp, #36	; 0x24
   19fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fb4:	6823      	ldr	r3, [r4, #0]
   19fb6:	3204      	adds	r2, #4
   19fb8:	4639      	mov	r1, r7
   19fba:	4628      	mov	r0, r5
   19fbc:	f000 f8f2 	bl	1a1a4 <d_print_array_type.isra.10>
   19fc0:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19fc4:	b009      	add	sp, #36	; 0x24
   19fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fca:	2600      	movs	r6, #0
   19fcc:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19fd0:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19fd4:	6852      	ldr	r2, [r2, #4]
   19fd6:	4639      	mov	r1, r7
   19fd8:	4628      	mov	r0, r5
   19fda:	f7ff fccb 	bl	19974 <d_print_comp>
   19fde:	f017 0a04 	ands.w	sl, r7, #4
   19fe2:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19fe6:	d023      	beq.n	1a030 <d_print_mod_list+0x100>
   19fe8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19fec:	29ff      	cmp	r1, #255	; 0xff
   19fee:	f000 80c1 	beq.w	1a174 <d_print_mod_list+0x244>
   19ff2:	1c4a      	adds	r2, r1, #1
   19ff4:	232e      	movs	r3, #46	; 0x2e
   19ff6:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19ffa:	546b      	strb	r3, [r5, r1]
   19ffc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   1a000:	6863      	ldr	r3, [r4, #4]
   1a002:	689c      	ldr	r4, [r3, #8]
   1a004:	7823      	ldrb	r3, [r4, #0]
   1a006:	2b46      	cmp	r3, #70	; 0x46
   1a008:	d037      	beq.n	1a07a <d_print_mod_list+0x14a>
   1a00a:	f1a3 021c 	sub.w	r2, r3, #28
   1a00e:	2a04      	cmp	r2, #4
   1a010:	d90b      	bls.n	1a02a <d_print_mod_list+0xfa>
   1a012:	2b4c      	cmp	r3, #76	; 0x4c
   1a014:	d009      	beq.n	1a02a <d_print_mod_list+0xfa>
   1a016:	4622      	mov	r2, r4
   1a018:	4639      	mov	r1, r7
   1a01a:	4628      	mov	r0, r5
   1a01c:	f7ff fcaa 	bl	19974 <d_print_comp>
   1a020:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a024:	b009      	add	sp, #36	; 0x24
   1a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a02a:	6864      	ldr	r4, [r4, #4]
   1a02c:	7823      	ldrb	r3, [r4, #0]
   1a02e:	e7ec      	b.n	1a00a <d_print_mod_list+0xda>
   1a030:	4e58      	ldr	r6, [pc, #352]	; (1a194 <d_print_mod_list+0x264>)
   1a032:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a036:	f106 0b02 	add.w	fp, r6, #2
   1a03a:	e009      	b.n	1a050 <d_print_mod_list+0x120>
   1a03c:	460b      	mov	r3, r1
   1a03e:	3101      	adds	r1, #1
   1a040:	455e      	cmp	r6, fp
   1a042:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a046:	f805 8003 	strb.w	r8, [r5, r3]
   1a04a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a04e:	d0d7      	beq.n	1a000 <d_print_mod_list+0xd0>
   1a050:	29ff      	cmp	r1, #255	; 0xff
   1a052:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a056:	d1f1      	bne.n	1a03c <d_print_mod_list+0x10c>
   1a058:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a05c:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   1a060:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a064:	4628      	mov	r0, r5
   1a066:	4798      	blx	r3
   1a068:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a06c:	3301      	adds	r3, #1
   1a06e:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a072:	2101      	movs	r1, #1
   1a074:	2300      	movs	r3, #0
   1a076:	e7e3      	b.n	1a040 <d_print_mod_list+0x110>
   1a078:	4770      	bx	lr
   1a07a:	4e47      	ldr	r6, [pc, #284]	; (1a198 <d_print_mod_list+0x268>)
   1a07c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a080:	f106 0a0d 	add.w	sl, r6, #13
   1a084:	f04f 0b00 	mov.w	fp, #0
   1a088:	e009      	b.n	1a09e <d_print_mod_list+0x16e>
   1a08a:	460b      	mov	r3, r1
   1a08c:	3101      	adds	r1, #1
   1a08e:	45b2      	cmp	sl, r6
   1a090:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a094:	f805 8003 	strb.w	r8, [r5, r3]
   1a098:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a09c:	d013      	beq.n	1a0c6 <d_print_mod_list+0x196>
   1a09e:	29ff      	cmp	r1, #255	; 0xff
   1a0a0:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a0a4:	d1f1      	bne.n	1a08a <d_print_mod_list+0x15a>
   1a0a6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a0aa:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a0ae:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a0b2:	4628      	mov	r0, r5
   1a0b4:	4798      	blx	r3
   1a0b6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a0ba:	3301      	adds	r3, #1
   1a0bc:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a0c0:	2101      	movs	r1, #1
   1a0c2:	2300      	movs	r3, #0
   1a0c4:	e7e3      	b.n	1a08e <d_print_mod_list+0x15e>
   1a0c6:	68a2      	ldr	r2, [r4, #8]
   1a0c8:	4934      	ldr	r1, [pc, #208]	; (1a19c <d_print_mod_list+0x26c>)
   1a0ca:	3201      	adds	r2, #1
   1a0cc:	a801      	add	r0, sp, #4
   1a0ce:	f004 fd4d 	bl	1eb6c <sprintf>
   1a0d2:	a801      	add	r0, sp, #4
   1a0d4:	f004 fef4 	bl	1eec0 <strlen>
   1a0d8:	b328      	cbz	r0, 1a126 <d_print_mod_list+0x1f6>
   1a0da:	ae01      	add	r6, sp, #4
   1a0dc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a0e0:	eb06 0a00 	add.w	sl, r6, r0
   1a0e4:	f04f 0b00 	mov.w	fp, #0
   1a0e8:	e009      	b.n	1a0fe <d_print_mod_list+0x1ce>
   1a0ea:	460b      	mov	r3, r1
   1a0ec:	3101      	adds	r1, #1
   1a0ee:	45b2      	cmp	sl, r6
   1a0f0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a0f4:	f805 8003 	strb.w	r8, [r5, r3]
   1a0f8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a0fc:	d015      	beq.n	1a12a <d_print_mod_list+0x1fa>
   1a0fe:	29ff      	cmp	r1, #255	; 0xff
   1a100:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a104:	d1f1      	bne.n	1a0ea <d_print_mod_list+0x1ba>
   1a106:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a10a:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a10e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a112:	4628      	mov	r0, r5
   1a114:	4798      	blx	r3
   1a116:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a11a:	3301      	adds	r3, #1
   1a11c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a120:	2101      	movs	r1, #1
   1a122:	2300      	movs	r3, #0
   1a124:	e7e3      	b.n	1a0ee <d_print_mod_list+0x1be>
   1a126:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a12a:	4e1d      	ldr	r6, [pc, #116]	; (1a1a0 <d_print_mod_list+0x270>)
   1a12c:	f04f 0b00 	mov.w	fp, #0
   1a130:	f106 0a03 	add.w	sl, r6, #3
   1a134:	e00a      	b.n	1a14c <d_print_mod_list+0x21c>
   1a136:	460b      	mov	r3, r1
   1a138:	3101      	adds	r1, #1
   1a13a:	45b2      	cmp	sl, r6
   1a13c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a140:	f805 8003 	strb.w	r8, [r5, r3]
   1a144:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a148:	f43f af6f 	beq.w	1a02a <d_print_mod_list+0xfa>
   1a14c:	29ff      	cmp	r1, #255	; 0xff
   1a14e:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a152:	d1f0      	bne.n	1a136 <d_print_mod_list+0x206>
   1a154:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a158:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a15c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a160:	4628      	mov	r0, r5
   1a162:	4798      	blx	r3
   1a164:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a168:	3301      	adds	r3, #1
   1a16a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a16e:	2101      	movs	r1, #1
   1a170:	2300      	movs	r3, #0
   1a172:	e7e2      	b.n	1a13a <d_print_mod_list+0x20a>
   1a174:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a178:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a17c:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1a180:	4628      	mov	r0, r5
   1a182:	4798      	blx	r3
   1a184:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a188:	3301      	adds	r3, #1
   1a18a:	4631      	mov	r1, r6
   1a18c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a190:	2201      	movs	r2, #1
   1a192:	e72f      	b.n	19ff4 <d_print_mod_list+0xc4>
   1a194:	00024640 	.word	0x00024640
   1a198:	00024644 	.word	0x00024644
   1a19c:	000245f0 	.word	0x000245f0
   1a1a0:	00024654 	.word	0x00024654

0001a1a4 <d_print_array_type.isra.10>:
   1a1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1a8:	4604      	mov	r4, r0
   1a1aa:	460f      	mov	r7, r1
   1a1ac:	4690      	mov	r8, r2
   1a1ae:	b163      	cbz	r3, 1a1ca <d_print_array_type.isra.10+0x26>
   1a1b0:	461e      	mov	r6, r3
   1a1b2:	461a      	mov	r2, r3
   1a1b4:	6893      	ldr	r3, [r2, #8]
   1a1b6:	b393      	cbz	r3, 1a21e <d_print_array_type.isra.10+0x7a>
   1a1b8:	6812      	ldr	r2, [r2, #0]
   1a1ba:	2a00      	cmp	r2, #0
   1a1bc:	d1fa      	bne.n	1a1b4 <d_print_array_type.isra.10+0x10>
   1a1be:	4613      	mov	r3, r2
   1a1c0:	4639      	mov	r1, r7
   1a1c2:	4632      	mov	r2, r6
   1a1c4:	4620      	mov	r0, r4
   1a1c6:	f7ff feb3 	bl	19f30 <d_print_mod_list>
   1a1ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a1ce:	29ff      	cmp	r1, #255	; 0xff
   1a1d0:	f000 808d 	beq.w	1a2ee <d_print_array_type.isra.10+0x14a>
   1a1d4:	1c4b      	adds	r3, r1, #1
   1a1d6:	2220      	movs	r2, #32
   1a1d8:	2bff      	cmp	r3, #255	; 0xff
   1a1da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a1de:	5462      	strb	r2, [r4, r1]
   1a1e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1e4:	d068      	beq.n	1a2b8 <d_print_array_type.isra.10+0x114>
   1a1e6:	225b      	movs	r2, #91	; 0x5b
   1a1e8:	1c59      	adds	r1, r3, #1
   1a1ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1ee:	54e2      	strb	r2, [r4, r3]
   1a1f0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1f4:	f8d8 2000 	ldr.w	r2, [r8]
   1a1f8:	b12a      	cbz	r2, 1a206 <d_print_array_type.isra.10+0x62>
   1a1fa:	4639      	mov	r1, r7
   1a1fc:	4620      	mov	r0, r4
   1a1fe:	f7ff fbb9 	bl	19974 <d_print_comp>
   1a202:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a206:	29ff      	cmp	r1, #255	; 0xff
   1a208:	f000 8082 	beq.w	1a310 <d_print_array_type.isra.10+0x16c>
   1a20c:	1c4a      	adds	r2, r1, #1
   1a20e:	235d      	movs	r3, #93	; 0x5d
   1a210:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a214:	5463      	strb	r3, [r4, r1]
   1a216:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a21a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a21e:	6852      	ldr	r2, [r2, #4]
   1a220:	7812      	ldrb	r2, [r2, #0]
   1a222:	2a2a      	cmp	r2, #42	; 0x2a
   1a224:	d03f      	beq.n	1a2a6 <d_print_array_type.isra.10+0x102>
   1a226:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a358 <d_print_array_type.isra.10+0x1b4>
   1a22a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a22e:	461d      	mov	r5, r3
   1a230:	f109 0b02 	add.w	fp, r9, #2
   1a234:	e00a      	b.n	1a24c <d_print_array_type.isra.10+0xa8>
   1a236:	460b      	mov	r3, r1
   1a238:	45cb      	cmp	fp, r9
   1a23a:	f101 0101 	add.w	r1, r1, #1
   1a23e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a242:	f804 a003 	strb.w	sl, [r4, r3]
   1a246:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a24a:	d01a      	beq.n	1a282 <d_print_array_type.isra.10+0xde>
   1a24c:	29ff      	cmp	r1, #255	; 0xff
   1a24e:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a252:	d1f0      	bne.n	1a236 <d_print_array_type.isra.10+0x92>
   1a254:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a258:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a25c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a260:	4620      	mov	r0, r4
   1a262:	4798      	blx	r3
   1a264:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a268:	3301      	adds	r3, #1
   1a26a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a26e:	2300      	movs	r3, #0
   1a270:	2101      	movs	r1, #1
   1a272:	45cb      	cmp	fp, r9
   1a274:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a278:	f804 a003 	strb.w	sl, [r4, r3]
   1a27c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a280:	d1e4      	bne.n	1a24c <d_print_array_type.isra.10+0xa8>
   1a282:	2300      	movs	r3, #0
   1a284:	4632      	mov	r2, r6
   1a286:	4639      	mov	r1, r7
   1a288:	4620      	mov	r0, r4
   1a28a:	f7ff fe51 	bl	19f30 <d_print_mod_list>
   1a28e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a292:	2bff      	cmp	r3, #255	; 0xff
   1a294:	d04d      	beq.n	1a332 <d_print_array_type.isra.10+0x18e>
   1a296:	1c59      	adds	r1, r3, #1
   1a298:	2229      	movs	r2, #41	; 0x29
   1a29a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a29e:	54e2      	strb	r2, [r4, r3]
   1a2a0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a2a4:	e793      	b.n	1a1ce <d_print_array_type.isra.10+0x2a>
   1a2a6:	4632      	mov	r2, r6
   1a2a8:	4639      	mov	r1, r7
   1a2aa:	4620      	mov	r0, r4
   1a2ac:	f7ff fe40 	bl	19f30 <d_print_mod_list>
   1a2b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a2b4:	2bff      	cmp	r3, #255	; 0xff
   1a2b6:	d196      	bne.n	1a1e6 <d_print_array_type.isra.10+0x42>
   1a2b8:	2200      	movs	r2, #0
   1a2ba:	4619      	mov	r1, r3
   1a2bc:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a2c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2c8:	4620      	mov	r0, r4
   1a2ca:	4798      	blx	r3
   1a2cc:	235b      	movs	r3, #91	; 0x5b
   1a2ce:	7023      	strb	r3, [r4, #0]
   1a2d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a2d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2d8:	f8d8 2000 	ldr.w	r2, [r8]
   1a2dc:	3301      	adds	r3, #1
   1a2de:	2101      	movs	r1, #1
   1a2e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2e8:	2a00      	cmp	r2, #0
   1a2ea:	d186      	bne.n	1a1fa <d_print_array_type.isra.10+0x56>
   1a2ec:	e78e      	b.n	1a20c <d_print_array_type.isra.10+0x68>
   1a2ee:	2500      	movs	r5, #0
   1a2f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a2f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2fc:	4620      	mov	r0, r4
   1a2fe:	4798      	blx	r3
   1a300:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a304:	3301      	adds	r3, #1
   1a306:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a30a:	4629      	mov	r1, r5
   1a30c:	2301      	movs	r3, #1
   1a30e:	e762      	b.n	1a1d6 <d_print_array_type.isra.10+0x32>
   1a310:	2500      	movs	r5, #0
   1a312:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a316:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a31a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a31e:	4620      	mov	r0, r4
   1a320:	4798      	blx	r3
   1a322:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a326:	3301      	adds	r3, #1
   1a328:	4629      	mov	r1, r5
   1a32a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a32e:	2201      	movs	r2, #1
   1a330:	e76d      	b.n	1a20e <d_print_array_type.isra.10+0x6a>
   1a332:	2500      	movs	r5, #0
   1a334:	4619      	mov	r1, r3
   1a336:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a33a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a33e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a342:	4620      	mov	r0, r4
   1a344:	4798      	blx	r3
   1a346:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a34a:	1c5a      	adds	r2, r3, #1
   1a34c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a350:	462b      	mov	r3, r5
   1a352:	2101      	movs	r1, #1
   1a354:	e7a0      	b.n	1a298 <d_print_array_type.isra.10+0xf4>
   1a356:	bf00      	nop
   1a358:	00024838 	.word	0x00024838

0001a35c <d_print_function_type.isra.11>:
   1a35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a360:	4604      	mov	r4, r0
   1a362:	b083      	sub	sp, #12
   1a364:	460e      	mov	r6, r1
   1a366:	4617      	mov	r7, r2
   1a368:	461d      	mov	r5, r3
   1a36a:	b34b      	cbz	r3, 1a3c0 <d_print_function_type.isra.11+0x64>
   1a36c:	689b      	ldr	r3, [r3, #8]
   1a36e:	bb3b      	cbnz	r3, 1a3c0 <d_print_function_type.isra.11+0x64>
   1a370:	462a      	mov	r2, r5
   1a372:	2001      	movs	r0, #1
   1a374:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a540 <d_print_function_type.isra.11+0x1e4>
   1a378:	e006      	b.n	1a388 <d_print_function_type.isra.11+0x2c>
   1a37a:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a37e:	d15a      	bne.n	1a436 <d_print_function_type.isra.11+0xda>
   1a380:	6812      	ldr	r2, [r2, #0]
   1a382:	b1ea      	cbz	r2, 1a3c0 <d_print_function_type.isra.11+0x64>
   1a384:	6893      	ldr	r3, [r2, #8]
   1a386:	b9db      	cbnz	r3, 1a3c0 <d_print_function_type.isra.11+0x64>
   1a388:	6853      	ldr	r3, [r2, #4]
   1a38a:	781b      	ldrb	r3, [r3, #0]
   1a38c:	3b19      	subs	r3, #25
   1a38e:	b2db      	uxtb	r3, r3
   1a390:	2b12      	cmp	r3, #18
   1a392:	fa00 f103 	lsl.w	r1, r0, r3
   1a396:	d8f3      	bhi.n	1a380 <d_print_function_type.isra.11+0x24>
   1a398:	ea11 0f0e 	tst.w	r1, lr
   1a39c:	d0ed      	beq.n	1a37a <d_print_function_type.isra.11+0x1e>
   1a39e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a3a2:	2b20      	cmp	r3, #32
   1a3a4:	d04d      	beq.n	1a442 <d_print_function_type.isra.11+0xe6>
   1a3a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a3aa:	2bff      	cmp	r3, #255	; 0xff
   1a3ac:	f000 80b4 	beq.w	1a518 <d_print_function_type.isra.11+0x1bc>
   1a3b0:	1c59      	adds	r1, r3, #1
   1a3b2:	2220      	movs	r2, #32
   1a3b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a3b8:	54e2      	strb	r2, [r4, r3]
   1a3ba:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a3be:	e042      	b.n	1a446 <d_print_function_type.isra.11+0xea>
   1a3c0:	2300      	movs	r3, #0
   1a3c2:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a3c6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a3ca:	4631      	mov	r1, r6
   1a3cc:	462a      	mov	r2, r5
   1a3ce:	4620      	mov	r0, r4
   1a3d0:	f7ff fdae 	bl	19f30 <d_print_mod_list>
   1a3d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a3d8:	29ff      	cmp	r1, #255	; 0xff
   1a3da:	d056      	beq.n	1a48a <d_print_function_type.isra.11+0x12e>
   1a3dc:	1c4b      	adds	r3, r1, #1
   1a3de:	2228      	movs	r2, #40	; 0x28
   1a3e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a3e4:	5462      	strb	r2, [r4, r1]
   1a3e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a3ea:	6838      	ldr	r0, [r7, #0]
   1a3ec:	b178      	cbz	r0, 1a40e <d_print_function_type.isra.11+0xb2>
   1a3ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a3f2:	9000      	str	r0, [sp, #0]
   1a3f4:	4602      	mov	r2, r0
   1a3f6:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a3fa:	4631      	mov	r1, r6
   1a3fc:	4620      	mov	r0, r4
   1a3fe:	9301      	str	r3, [sp, #4]
   1a400:	f7fc fd14 	bl	16e2c <d_print_comp_inner>
   1a404:	9a01      	ldr	r2, [sp, #4]
   1a406:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a40a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a40e:	2bff      	cmp	r3, #255	; 0xff
   1a410:	d04d      	beq.n	1a4ae <d_print_function_type.isra.11+0x152>
   1a412:	1c5a      	adds	r2, r3, #1
   1a414:	2029      	movs	r0, #41	; 0x29
   1a416:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a41a:	4631      	mov	r1, r6
   1a41c:	54e0      	strb	r0, [r4, r3]
   1a41e:	462a      	mov	r2, r5
   1a420:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a424:	2301      	movs	r3, #1
   1a426:	4620      	mov	r0, r4
   1a428:	f7ff fd82 	bl	19f30 <d_print_mod_list>
   1a42c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a430:	b003      	add	sp, #12
   1a432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a436:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a43a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a43e:	2a28      	cmp	r2, #40	; 0x28
   1a440:	d1af      	bne.n	1a3a2 <d_print_function_type.isra.11+0x46>
   1a442:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a446:	29ff      	cmp	r1, #255	; 0xff
   1a448:	d054      	beq.n	1a4f4 <d_print_function_type.isra.11+0x198>
   1a44a:	1c4a      	adds	r2, r1, #1
   1a44c:	2328      	movs	r3, #40	; 0x28
   1a44e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a452:	5463      	strb	r3, [r4, r1]
   1a454:	f04f 0900 	mov.w	r9, #0
   1a458:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a45c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a460:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a464:	464b      	mov	r3, r9
   1a466:	462a      	mov	r2, r5
   1a468:	4631      	mov	r1, r6
   1a46a:	4620      	mov	r0, r4
   1a46c:	f7ff fd60 	bl	19f30 <d_print_mod_list>
   1a470:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a474:	2bff      	cmp	r3, #255	; 0xff
   1a476:	d02c      	beq.n	1a4d2 <d_print_function_type.isra.11+0x176>
   1a478:	1c59      	adds	r1, r3, #1
   1a47a:	2229      	movs	r2, #41	; 0x29
   1a47c:	29ff      	cmp	r1, #255	; 0xff
   1a47e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a482:	54e2      	strb	r2, [r4, r3]
   1a484:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a488:	d1a8      	bne.n	1a3dc <d_print_function_type.isra.11+0x80>
   1a48a:	f04f 0900 	mov.w	r9, #0
   1a48e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a492:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a496:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a49a:	4620      	mov	r0, r4
   1a49c:	4798      	blx	r3
   1a49e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4a2:	3301      	adds	r3, #1
   1a4a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4a8:	4649      	mov	r1, r9
   1a4aa:	2301      	movs	r3, #1
   1a4ac:	e797      	b.n	1a3de <d_print_function_type.isra.11+0x82>
   1a4ae:	2700      	movs	r7, #0
   1a4b0:	4619      	mov	r1, r3
   1a4b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4ba:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a4be:	4620      	mov	r0, r4
   1a4c0:	4798      	blx	r3
   1a4c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4c6:	1c5a      	adds	r2, r3, #1
   1a4c8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a4cc:	463b      	mov	r3, r7
   1a4ce:	2201      	movs	r2, #1
   1a4d0:	e7a0      	b.n	1a414 <d_print_function_type.isra.11+0xb8>
   1a4d2:	4619      	mov	r1, r3
   1a4d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a4e0:	4620      	mov	r0, r4
   1a4e2:	4798      	blx	r3
   1a4e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4e8:	1c5a      	adds	r2, r3, #1
   1a4ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a4ee:	464b      	mov	r3, r9
   1a4f0:	2101      	movs	r1, #1
   1a4f2:	e7c2      	b.n	1a47a <d_print_function_type.isra.11+0x11e>
   1a4f4:	f04f 0800 	mov.w	r8, #0
   1a4f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a500:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a504:	4620      	mov	r0, r4
   1a506:	4798      	blx	r3
   1a508:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a50c:	3301      	adds	r3, #1
   1a50e:	4641      	mov	r1, r8
   1a510:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a514:	2201      	movs	r2, #1
   1a516:	e799      	b.n	1a44c <d_print_function_type.isra.11+0xf0>
   1a518:	f04f 0800 	mov.w	r8, #0
   1a51c:	4619      	mov	r1, r3
   1a51e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a522:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a526:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a52a:	4620      	mov	r0, r4
   1a52c:	4798      	blx	r3
   1a52e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a532:	1c5a      	adds	r2, r3, #1
   1a534:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a538:	4643      	mov	r3, r8
   1a53a:	2101      	movs	r1, #1
   1a53c:	e739      	b.n	1a3b2 <d_print_function_type.isra.11+0x56>
   1a53e:	bf00      	nop
   1a540:	00043107 	.word	0x00043107

0001a544 <d_print_expr_op>:
   1a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a548:	7815      	ldrb	r5, [r2, #0]
   1a54a:	2d31      	cmp	r5, #49	; 0x31
   1a54c:	b082      	sub	sp, #8
   1a54e:	4613      	mov	r3, r2
   1a550:	4604      	mov	r4, r0
   1a552:	d00d      	beq.n	1a570 <d_print_expr_op+0x2c>
   1a554:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a558:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a55c:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a560:	f7fc fc64 	bl	16e2c <d_print_comp_inner>
   1a564:	9b01      	ldr	r3, [sp, #4]
   1a566:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a56a:	b002      	add	sp, #8
   1a56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a570:	6853      	ldr	r3, [r2, #4]
   1a572:	689f      	ldr	r7, [r3, #8]
   1a574:	685d      	ldr	r5, [r3, #4]
   1a576:	2f00      	cmp	r7, #0
   1a578:	d0f7      	beq.n	1a56a <d_print_expr_op+0x26>
   1a57a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a57e:	442f      	add	r7, r5
   1a580:	f04f 0800 	mov.w	r8, #0
   1a584:	e008      	b.n	1a598 <d_print_expr_op+0x54>
   1a586:	460b      	mov	r3, r1
   1a588:	3101      	adds	r1, #1
   1a58a:	42bd      	cmp	r5, r7
   1a58c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a590:	54e6      	strb	r6, [r4, r3]
   1a592:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a596:	d0e8      	beq.n	1a56a <d_print_expr_op+0x26>
   1a598:	29ff      	cmp	r1, #255	; 0xff
   1a59a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a59e:	d1f2      	bne.n	1a586 <d_print_expr_op+0x42>
   1a5a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a5a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a5ac:	4620      	mov	r0, r4
   1a5ae:	4798      	blx	r3
   1a5b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5b4:	3301      	adds	r3, #1
   1a5b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5ba:	2101      	movs	r1, #1
   1a5bc:	2300      	movs	r3, #0
   1a5be:	e7e4      	b.n	1a58a <d_print_expr_op+0x46>

0001a5c0 <d_print_subexpr>:
   1a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5c2:	7813      	ldrb	r3, [r2, #0]
   1a5c4:	2b01      	cmp	r3, #1
   1a5c6:	b083      	sub	sp, #12
   1a5c8:	4615      	mov	r5, r2
   1a5ca:	460e      	mov	r6, r1
   1a5cc:	4604      	mov	r4, r0
   1a5ce:	d929      	bls.n	1a624 <d_print_subexpr+0x64>
   1a5d0:	2b30      	cmp	r3, #48	; 0x30
   1a5d2:	d027      	beq.n	1a624 <d_print_subexpr+0x64>
   1a5d4:	2b06      	cmp	r3, #6
   1a5d6:	d025      	beq.n	1a624 <d_print_subexpr+0x64>
   1a5d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a5dc:	29ff      	cmp	r1, #255	; 0xff
   1a5de:	d031      	beq.n	1a644 <d_print_subexpr+0x84>
   1a5e0:	1c4a      	adds	r2, r1, #1
   1a5e2:	2328      	movs	r3, #40	; 0x28
   1a5e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a5e8:	5463      	strb	r3, [r4, r1]
   1a5ea:	462a      	mov	r2, r5
   1a5ec:	4631      	mov	r1, r6
   1a5ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a5f2:	4620      	mov	r0, r4
   1a5f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a5f8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a5fc:	9301      	str	r3, [sp, #4]
   1a5fe:	9500      	str	r5, [sp, #0]
   1a600:	f7fc fc14 	bl	16e2c <d_print_comp_inner>
   1a604:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a608:	9b01      	ldr	r3, [sp, #4]
   1a60a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a60e:	29ff      	cmp	r1, #255	; 0xff
   1a610:	d028      	beq.n	1a664 <d_print_subexpr+0xa4>
   1a612:	1c4a      	adds	r2, r1, #1
   1a614:	2329      	movs	r3, #41	; 0x29
   1a616:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a61a:	5463      	strb	r3, [r4, r1]
   1a61c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a620:	b003      	add	sp, #12
   1a622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a624:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a628:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a62c:	4631      	mov	r1, r6
   1a62e:	462a      	mov	r2, r5
   1a630:	4620      	mov	r0, r4
   1a632:	9301      	str	r3, [sp, #4]
   1a634:	9500      	str	r5, [sp, #0]
   1a636:	f7fc fbf9 	bl	16e2c <d_print_comp_inner>
   1a63a:	9b01      	ldr	r3, [sp, #4]
   1a63c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a640:	b003      	add	sp, #12
   1a642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a644:	2700      	movs	r7, #0
   1a646:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a64a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a64e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a652:	4798      	blx	r3
   1a654:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a658:	3301      	adds	r3, #1
   1a65a:	4639      	mov	r1, r7
   1a65c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a660:	2201      	movs	r2, #1
   1a662:	e7be      	b.n	1a5e2 <d_print_subexpr+0x22>
   1a664:	2500      	movs	r5, #0
   1a666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a66a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a66e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a672:	4620      	mov	r0, r4
   1a674:	4798      	blx	r3
   1a676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a67a:	3301      	adds	r3, #1
   1a67c:	4629      	mov	r1, r5
   1a67e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a682:	2201      	movs	r2, #1
   1a684:	e7c6      	b.n	1a614 <d_print_subexpr+0x54>
   1a686:	bf00      	nop

0001a688 <d_maybe_print_fold_expression.isra.15>:
   1a688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a68c:	6852      	ldr	r2, [r2, #4]
   1a68e:	6812      	ldr	r2, [r2, #0]
   1a690:	7815      	ldrb	r5, [r2, #0]
   1a692:	2d66      	cmp	r5, #102	; 0x66
   1a694:	d002      	beq.n	1a69c <d_maybe_print_fold_expression.isra.15+0x14>
   1a696:	2000      	movs	r0, #0
   1a698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a69c:	681b      	ldr	r3, [r3, #0]
   1a69e:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a6a2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a6a6:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a6aa:	f899 3000 	ldrb.w	r3, [r9]
   1a6ae:	2b3b      	cmp	r3, #59	; 0x3b
   1a6b0:	f04f 33ff 	mov.w	r3, #4294967295
   1a6b4:	bf04      	itt	eq
   1a6b6:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a6ba:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a6be:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a6c2:	7853      	ldrb	r3, [r2, #1]
   1a6c4:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a6c8:	bf18      	it	ne
   1a6ca:	2500      	movne	r5, #0
   1a6cc:	460e      	mov	r6, r1
   1a6ce:	4604      	mov	r4, r0
   1a6d0:	2b26      	cmp	r3, #38	; 0x26
   1a6d2:	d82b      	bhi.n	1a72c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a6d4:	e8df f003 	tbb	[pc, r3]
   1a6d8:	2a2a2a90 	.word	0x2a2a2a90
   1a6dc:	2a902a2a 	.word	0x2a902a2a
   1a6e0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a6e4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a6e8:	2a2a2a2a 	.word	0x2a2a2a2a
   1a6ec:	2a2a2a2a 	.word	0x2a2a2a2a
   1a6f0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a6f4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a6f8:	2a2a2a6a 	.word	0x2a2a2a6a
   1a6fc:	2a2a      	.short	0x2a2a
   1a6fe:	2f          	.byte	0x2f
   1a6ff:	00          	.byte	0x00
   1a700:	4642      	mov	r2, r8
   1a702:	4631      	mov	r1, r6
   1a704:	4620      	mov	r0, r4
   1a706:	f7ff ff1d 	bl	1a544 <d_print_expr_op>
   1a70a:	464a      	mov	r2, r9
   1a70c:	4631      	mov	r1, r6
   1a70e:	4620      	mov	r0, r4
   1a710:	f7ff ff56 	bl	1a5c0 <d_print_subexpr>
   1a714:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a718:	29ff      	cmp	r1, #255	; 0xff
   1a71a:	f000 80b2 	beq.w	1a882 <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a71e:	1c4a      	adds	r2, r1, #1
   1a720:	2329      	movs	r3, #41	; 0x29
   1a722:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a726:	5463      	strb	r3, [r4, r1]
   1a728:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a72c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a730:	2001      	movs	r0, #1
   1a732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a736:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a73a:	29ff      	cmp	r1, #255	; 0xff
   1a73c:	f000 80c5 	beq.w	1a8ca <d_maybe_print_fold_expression.isra.15+0x242>
   1a740:	1c4a      	adds	r2, r1, #1
   1a742:	2328      	movs	r3, #40	; 0x28
   1a744:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a748:	4620      	mov	r0, r4
   1a74a:	5463      	strb	r3, [r4, r1]
   1a74c:	464a      	mov	r2, r9
   1a74e:	4631      	mov	r1, r6
   1a750:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a754:	4d65      	ldr	r5, [pc, #404]	; (1a8ec <d_maybe_print_fold_expression.isra.15+0x264>)
   1a756:	f7ff ff33 	bl	1a5c0 <d_print_subexpr>
   1a75a:	4642      	mov	r2, r8
   1a75c:	4631      	mov	r1, r6
   1a75e:	4620      	mov	r0, r4
   1a760:	f7ff fef0 	bl	1a544 <d_print_expr_op>
   1a764:	f105 0904 	add.w	r9, r5, #4
   1a768:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a76c:	f04f 0800 	mov.w	r8, #0
   1a770:	e008      	b.n	1a784 <d_maybe_print_fold_expression.isra.15+0xfc>
   1a772:	460b      	mov	r3, r1
   1a774:	3101      	adds	r1, #1
   1a776:	45a9      	cmp	r9, r5
   1a778:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a77c:	54e6      	strb	r6, [r4, r3]
   1a77e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a782:	d0d3      	beq.n	1a72c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a784:	29ff      	cmp	r1, #255	; 0xff
   1a786:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a78a:	d1f2      	bne.n	1a772 <d_maybe_print_fold_expression.isra.15+0xea>
   1a78c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a790:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a794:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a798:	4620      	mov	r0, r4
   1a79a:	4798      	blx	r3
   1a79c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7a0:	3301      	adds	r3, #1
   1a7a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a7a6:	2101      	movs	r1, #1
   1a7a8:	2300      	movs	r3, #0
   1a7aa:	e7e4      	b.n	1a776 <d_maybe_print_fold_expression.isra.15+0xee>
   1a7ac:	4d50      	ldr	r5, [pc, #320]	; (1a8f0 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a7ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a7b2:	f105 0b04 	add.w	fp, r5, #4
   1a7b6:	e009      	b.n	1a7cc <d_maybe_print_fold_expression.isra.15+0x144>
   1a7b8:	460b      	mov	r3, r1
   1a7ba:	3101      	adds	r1, #1
   1a7bc:	455d      	cmp	r5, fp
   1a7be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a7c2:	f804 a003 	strb.w	sl, [r4, r3]
   1a7c6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a7ca:	d099      	beq.n	1a700 <d_maybe_print_fold_expression.isra.15+0x78>
   1a7cc:	29ff      	cmp	r1, #255	; 0xff
   1a7ce:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a7d2:	d1f1      	bne.n	1a7b8 <d_maybe_print_fold_expression.isra.15+0x130>
   1a7d4:	f04f 0300 	mov.w	r3, #0
   1a7d8:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a7dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a7e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a7e4:	4620      	mov	r0, r4
   1a7e6:	4798      	blx	r3
   1a7e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7ec:	3301      	adds	r3, #1
   1a7ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a7f2:	2101      	movs	r1, #1
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	e7e1      	b.n	1a7bc <d_maybe_print_fold_expression.isra.15+0x134>
   1a7f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a7fc:	2bff      	cmp	r3, #255	; 0xff
   1a7fe:	d051      	beq.n	1a8a4 <d_maybe_print_fold_expression.isra.15+0x21c>
   1a800:	1c59      	adds	r1, r3, #1
   1a802:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a806:	464a      	mov	r2, r9
   1a808:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a80c:	4620      	mov	r0, r4
   1a80e:	f804 e003 	strb.w	lr, [r4, r3]
   1a812:	4631      	mov	r1, r6
   1a814:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a818:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a8f4 <d_maybe_print_fold_expression.isra.15+0x26c>
   1a81c:	f7ff fed0 	bl	1a5c0 <d_print_subexpr>
   1a820:	4631      	mov	r1, r6
   1a822:	4642      	mov	r2, r8
   1a824:	4620      	mov	r0, r4
   1a826:	f7ff fe8d 	bl	1a544 <d_print_expr_op>
   1a82a:	f109 0b03 	add.w	fp, r9, #3
   1a82e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a832:	e009      	b.n	1a848 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a834:	460b      	mov	r3, r1
   1a836:	3101      	adds	r1, #1
   1a838:	45cb      	cmp	fp, r9
   1a83a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a83e:	f804 a003 	strb.w	sl, [r4, r3]
   1a842:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a846:	d015      	beq.n	1a874 <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a848:	29ff      	cmp	r1, #255	; 0xff
   1a84a:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a84e:	d1f1      	bne.n	1a834 <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a850:	f04f 0300 	mov.w	r3, #0
   1a854:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a858:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a85c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a860:	4620      	mov	r0, r4
   1a862:	4798      	blx	r3
   1a864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a868:	3301      	adds	r3, #1
   1a86a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a86e:	2101      	movs	r1, #1
   1a870:	2300      	movs	r3, #0
   1a872:	e7e1      	b.n	1a838 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a874:	4642      	mov	r2, r8
   1a876:	4631      	mov	r1, r6
   1a878:	4620      	mov	r0, r4
   1a87a:	f7ff fe63 	bl	1a544 <d_print_expr_op>
   1a87e:	462a      	mov	r2, r5
   1a880:	e744      	b.n	1a70c <d_maybe_print_fold_expression.isra.15+0x84>
   1a882:	2500      	movs	r5, #0
   1a884:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a888:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a88c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a890:	4620      	mov	r0, r4
   1a892:	4798      	blx	r3
   1a894:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a898:	3301      	adds	r3, #1
   1a89a:	4629      	mov	r1, r5
   1a89c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8a0:	2201      	movs	r2, #1
   1a8a2:	e73d      	b.n	1a720 <d_maybe_print_fold_expression.isra.15+0x98>
   1a8a4:	f04f 0a00 	mov.w	sl, #0
   1a8a8:	4619      	mov	r1, r3
   1a8aa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a8ae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a8b2:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a8b6:	4798      	blx	r3
   1a8b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8bc:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a8c0:	1c5a      	adds	r2, r3, #1
   1a8c2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a8c6:	4653      	mov	r3, sl
   1a8c8:	e79a      	b.n	1a800 <d_maybe_print_fold_expression.isra.15+0x178>
   1a8ca:	2500      	movs	r5, #0
   1a8cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a8d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a8d4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a8d8:	4798      	blx	r3
   1a8da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8de:	3301      	adds	r3, #1
   1a8e0:	4629      	mov	r1, r5
   1a8e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8e6:	2201      	movs	r2, #1
   1a8e8:	e72b      	b.n	1a742 <d_maybe_print_fold_expression.isra.15+0xba>
   1a8ea:	bf00      	nop
   1a8ec:	00024924 	.word	0x00024924
   1a8f0:	0002491c 	.word	0x0002491c
   1a8f4:	00022d54 	.word	0x00022d54

0001a8f8 <d_demangle_callback.constprop.17>:
   1a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8fc:	b0e7      	sub	sp, #412	; 0x19c
   1a8fe:	f890 9000 	ldrb.w	r9, [r0]
   1a902:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a906:	af00      	add	r7, sp, #0
   1a908:	4605      	mov	r5, r0
   1a90a:	4688      	mov	r8, r1
   1a90c:	4616      	mov	r6, r2
   1a90e:	f000 80f1 	beq.w	1aaf4 <d_demangle_callback.constprop.17+0x1fc>
   1a912:	2208      	movs	r2, #8
   1a914:	49bd      	ldr	r1, [pc, #756]	; (1ac0c <d_demangle_callback.constprop.17+0x314>)
   1a916:	4628      	mov	r0, r5
   1a918:	f004 fb40 	bl	1ef9c <strncmp>
   1a91c:	b948      	cbnz	r0, 1a932 <d_demangle_callback.constprop.17+0x3a>
   1a91e:	7a2b      	ldrb	r3, [r5, #8]
   1a920:	2b2e      	cmp	r3, #46	; 0x2e
   1a922:	f000 80d6 	beq.w	1aad2 <d_demangle_callback.constprop.17+0x1da>
   1a926:	2b5f      	cmp	r3, #95	; 0x5f
   1a928:	f000 80d3 	beq.w	1aad2 <d_demangle_callback.constprop.17+0x1da>
   1a92c:	2b24      	cmp	r3, #36	; 0x24
   1a92e:	f000 80d0 	beq.w	1aad2 <d_demangle_callback.constprop.17+0x1da>
   1a932:	f04f 0a00 	mov.w	sl, #0
   1a936:	4628      	mov	r0, r5
   1a938:	f004 fac2 	bl	1eec0 <strlen>
   1a93c:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a940:	0083      	lsls	r3, r0, #2
   1a942:	eb03 020b 	add.w	r2, r3, fp
   1a946:	0092      	lsls	r2, r2, #2
   1a948:	3208      	adds	r2, #8
   1a94a:	330a      	adds	r3, #10
   1a94c:	ebad 0d02 	sub.w	sp, sp, r2
   1a950:	f023 0307 	bic.w	r3, r3, #7
   1a954:	2400      	movs	r4, #0
   1a956:	466a      	mov	r2, sp
   1a958:	1829      	adds	r1, r5, r0
   1a95a:	ebad 0d03 	sub.w	sp, sp, r3
   1a95e:	f1ba 0f01 	cmp.w	sl, #1
   1a962:	f04f 0311 	mov.w	r3, #17
   1a966:	627a      	str	r2, [r7, #36]	; 0x24
   1a968:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a96c:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a970:	617d      	str	r5, [r7, #20]
   1a972:	623d      	str	r5, [r7, #32]
   1a974:	63b8      	str	r0, [r7, #56]	; 0x38
   1a976:	61b9      	str	r1, [r7, #24]
   1a978:	61fb      	str	r3, [r7, #28]
   1a97a:	62bc      	str	r4, [r7, #40]	; 0x28
   1a97c:	637c      	str	r4, [r7, #52]	; 0x34
   1a97e:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a980:	643c      	str	r4, [r7, #64]	; 0x40
   1a982:	647c      	str	r4, [r7, #68]	; 0x44
   1a984:	64bc      	str	r4, [r7, #72]	; 0x48
   1a986:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a988:	f000 80bb 	beq.w	1ab02 <d_demangle_callback.constprop.17+0x20a>
   1a98c:	f0c0 80cf 	bcc.w	1ab2e <d_demangle_callback.constprop.17+0x236>
   1a990:	7aeb      	ldrb	r3, [r5, #11]
   1a992:	f1ba 0f02 	cmp.w	sl, #2
   1a996:	bf18      	it	ne
   1a998:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a99c:	f105 0a0b 	add.w	sl, r5, #11
   1a9a0:	bf08      	it	eq
   1a9a2:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a9a6:	2b5f      	cmp	r3, #95	; 0x5f
   1a9a8:	f8c7 a020 	str.w	sl, [r7, #32]
   1a9ac:	f000 80b2 	beq.w	1ab14 <d_demangle_callback.constprop.17+0x21c>
   1a9b0:	4650      	mov	r0, sl
   1a9b2:	607a      	str	r2, [r7, #4]
   1a9b4:	f004 fa84 	bl	1eec0 <strlen>
   1a9b8:	f1bb 0f00 	cmp.w	fp, #0
   1a9bc:	687a      	ldr	r2, [r7, #4]
   1a9be:	f340 80bf 	ble.w	1ab40 <d_demangle_callback.constprop.17+0x248>
   1a9c2:	2301      	movs	r3, #1
   1a9c4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a9c6:	2800      	cmp	r0, #0
   1a9c8:	f000 80ba 	beq.w	1ab40 <d_demangle_callback.constprop.17+0x248>
   1a9cc:	2300      	movs	r3, #0
   1a9ce:	f8c2 a004 	str.w	sl, [r2, #4]
   1a9d2:	6090      	str	r0, [r2, #8]
   1a9d4:	7013      	strb	r3, [r2, #0]
   1a9d6:	4649      	mov	r1, r9
   1a9d8:	2300      	movs	r3, #0
   1a9da:	f107 0014 	add.w	r0, r7, #20
   1a9de:	f7f9 fe31 	bl	14644 <d_make_comp>
   1a9e2:	6a3c      	ldr	r4, [r7, #32]
   1a9e4:	4605      	mov	r5, r0
   1a9e6:	4620      	mov	r0, r4
   1a9e8:	f004 fa6a 	bl	1eec0 <strlen>
   1a9ec:	1823      	adds	r3, r4, r0
   1a9ee:	623b      	str	r3, [r7, #32]
   1a9f0:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a9f4:	f1b9 0f00 	cmp.w	r9, #0
   1a9f8:	f040 8086 	bne.w	1ab08 <d_demangle_callback.constprop.17+0x210>
   1a9fc:	2d00      	cmp	r5, #0
   1a9fe:	f000 8083 	beq.w	1ab08 <d_demangle_callback.constprop.17+0x210>
   1aa02:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1aa06:	462a      	mov	r2, r5
   1aa08:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1aa0c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1aa10:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1aa14:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1aa18:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1aa1c:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1aa20:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1aa24:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1aa28:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1aa2c:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1aa30:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1aa34:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1aa38:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1aa3c:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1aa40:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1aa44:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1aa48:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1aa4c:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1aa50:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1aa54:	f7f9 fec4 	bl	147e0 <d_count_templates_scopes>
   1aa58:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1aa5c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1aa60:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1aa64:	613b      	str	r3, [r7, #16]
   1aa66:	00d0      	lsls	r0, r2, #3
   1aa68:	fb01 f102 	mul.w	r1, r1, r2
   1aa6c:	3008      	adds	r0, #8
   1aa6e:	46e8      	mov	r8, sp
   1aa70:	00ca      	lsls	r2, r1, #3
   1aa72:	ebad 0d00 	sub.w	sp, sp, r0
   1aa76:	4668      	mov	r0, sp
   1aa78:	3208      	adds	r2, #8
   1aa7a:	ebad 0d02 	sub.w	sp, sp, r2
   1aa7e:	f107 060c 	add.w	r6, r7, #12
   1aa82:	462a      	mov	r2, r5
   1aa84:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1aa88:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1aa8c:	4620      	mov	r0, r4
   1aa8e:	2111      	movs	r1, #17
   1aa90:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1aa94:	60fd      	str	r5, [r7, #12]
   1aa96:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1aa9a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1aa9e:	f7fc f9c5 	bl	16e2c <d_print_comp_inner>
   1aaa2:	693b      	ldr	r3, [r7, #16]
   1aaa4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1aaa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1aaac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aab0:	f804 9001 	strb.w	r9, [r4, r1]
   1aab4:	4620      	mov	r0, r4
   1aab6:	46c5      	mov	sp, r8
   1aab8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aabc:	4798      	blx	r3
   1aabe:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1aac2:	fab0 f080 	clz	r0, r0
   1aac6:	0940      	lsrs	r0, r0, #5
   1aac8:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1aacc:	46bd      	mov	sp, r7
   1aace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aad2:	7a6b      	ldrb	r3, [r5, #9]
   1aad4:	2b44      	cmp	r3, #68	; 0x44
   1aad6:	d002      	beq.n	1aade <d_demangle_callback.constprop.17+0x1e6>
   1aad8:	2b49      	cmp	r3, #73	; 0x49
   1aada:	f47f af2a 	bne.w	1a932 <d_demangle_callback.constprop.17+0x3a>
   1aade:	7aaa      	ldrb	r2, [r5, #10]
   1aae0:	2a5f      	cmp	r2, #95	; 0x5f
   1aae2:	f47f af26 	bne.w	1a932 <d_demangle_callback.constprop.17+0x3a>
   1aae6:	2b49      	cmp	r3, #73	; 0x49
   1aae8:	bf14      	ite	ne
   1aaea:	f04f 0a03 	movne.w	sl, #3
   1aaee:	f04f 0a02 	moveq.w	sl, #2
   1aaf2:	e720      	b.n	1a936 <d_demangle_callback.constprop.17+0x3e>
   1aaf4:	7843      	ldrb	r3, [r0, #1]
   1aaf6:	2b5a      	cmp	r3, #90	; 0x5a
   1aaf8:	f47f af0b 	bne.w	1a912 <d_demangle_callback.constprop.17+0x1a>
   1aafc:	f04f 0a01 	mov.w	sl, #1
   1ab00:	e719      	b.n	1a936 <d_demangle_callback.constprop.17+0x3e>
   1ab02:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1ab06:	d01d      	beq.n	1ab44 <d_demangle_callback.constprop.17+0x24c>
   1ab08:	2000      	movs	r0, #0
   1ab0a:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1ab0e:	46bd      	mov	sp, r7
   1ab10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab14:	7b2b      	ldrb	r3, [r5, #12]
   1ab16:	2b5a      	cmp	r3, #90	; 0x5a
   1ab18:	f47f af4a 	bne.w	1a9b0 <d_demangle_callback.constprop.17+0xb8>
   1ab1c:	350d      	adds	r5, #13
   1ab1e:	4621      	mov	r1, r4
   1ab20:	f107 0014 	add.w	r0, r7, #20
   1ab24:	623d      	str	r5, [r7, #32]
   1ab26:	f7fb fe35 	bl	16794 <d_encoding>
   1ab2a:	4602      	mov	r2, r0
   1ab2c:	e753      	b.n	1a9d6 <d_demangle_callback.constprop.17+0xde>
   1ab2e:	f107 0014 	add.w	r0, r7, #20
   1ab32:	f7fb f817 	bl	15b64 <d_type>
   1ab36:	6a3b      	ldr	r3, [r7, #32]
   1ab38:	4605      	mov	r5, r0
   1ab3a:	f893 9000 	ldrb.w	r9, [r3]
   1ab3e:	e759      	b.n	1a9f4 <d_demangle_callback.constprop.17+0xfc>
   1ab40:	2200      	movs	r2, #0
   1ab42:	e748      	b.n	1a9d6 <d_demangle_callback.constprop.17+0xde>
   1ab44:	786b      	ldrb	r3, [r5, #1]
   1ab46:	2b5a      	cmp	r3, #90	; 0x5a
   1ab48:	d1de      	bne.n	1ab08 <d_demangle_callback.constprop.17+0x210>
   1ab4a:	3502      	adds	r5, #2
   1ab4c:	4651      	mov	r1, sl
   1ab4e:	f107 0014 	add.w	r0, r7, #20
   1ab52:	623d      	str	r5, [r7, #32]
   1ab54:	f7fb fe1e 	bl	16794 <d_encoding>
   1ab58:	69fb      	ldr	r3, [r7, #28]
   1ab5a:	07db      	lsls	r3, r3, #31
   1ab5c:	4605      	mov	r5, r0
   1ab5e:	d551      	bpl.n	1ac04 <d_demangle_callback.constprop.17+0x30c>
   1ab60:	6a38      	ldr	r0, [r7, #32]
   1ab62:	f890 9000 	ldrb.w	r9, [r0]
   1ab66:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1ab6a:	f47f af43 	bne.w	1a9f4 <d_demangle_callback.constprop.17+0xfc>
   1ab6e:	7843      	ldrb	r3, [r0, #1]
   1ab70:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1ab74:	2a19      	cmp	r2, #25
   1ab76:	d939      	bls.n	1abec <d_demangle_callback.constprop.17+0x2f4>
   1ab78:	2b5f      	cmp	r3, #95	; 0x5f
   1ab7a:	d037      	beq.n	1abec <d_demangle_callback.constprop.17+0x2f4>
   1ab7c:	3b30      	subs	r3, #48	; 0x30
   1ab7e:	2b09      	cmp	r3, #9
   1ab80:	d840      	bhi.n	1ac04 <d_demangle_callback.constprop.17+0x30c>
   1ab82:	7803      	ldrb	r3, [r0, #0]
   1ab84:	4602      	mov	r2, r0
   1ab86:	2b2e      	cmp	r3, #46	; 0x2e
   1ab88:	d112      	bne.n	1abb0 <d_demangle_callback.constprop.17+0x2b8>
   1ab8a:	7853      	ldrb	r3, [r2, #1]
   1ab8c:	3b30      	subs	r3, #48	; 0x30
   1ab8e:	2b09      	cmp	r3, #9
   1ab90:	d80e      	bhi.n	1abb0 <d_demangle_callback.constprop.17+0x2b8>
   1ab92:	7893      	ldrb	r3, [r2, #2]
   1ab94:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1ab98:	2909      	cmp	r1, #9
   1ab9a:	f102 0202 	add.w	r2, r2, #2
   1ab9e:	d8f2      	bhi.n	1ab86 <d_demangle_callback.constprop.17+0x28e>
   1aba0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1aba4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aba8:	2909      	cmp	r1, #9
   1abaa:	d9f9      	bls.n	1aba0 <d_demangle_callback.constprop.17+0x2a8>
   1abac:	2b2e      	cmp	r3, #46	; 0x2e
   1abae:	d0ec      	beq.n	1ab8a <d_demangle_callback.constprop.17+0x292>
   1abb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abb4:	623a      	str	r2, [r7, #32]
   1abb6:	4299      	cmp	r1, r3
   1abb8:	da16      	bge.n	1abe8 <d_demangle_callback.constprop.17+0x2f0>
   1abba:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1abbe:	1c4b      	adds	r3, r1, #1
   1abc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1abc4:	62bb      	str	r3, [r7, #40]	; 0x28
   1abc6:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1abca:	d00d      	beq.n	1abe8 <d_demangle_callback.constprop.17+0x2f0>
   1abcc:	1a12      	subs	r2, r2, r0
   1abce:	d00b      	beq.n	1abe8 <d_demangle_callback.constprop.17+0x2f0>
   1abd0:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1abd4:	6058      	str	r0, [r3, #4]
   1abd6:	609a      	str	r2, [r3, #8]
   1abd8:	462a      	mov	r2, r5
   1abda:	214d      	movs	r1, #77	; 0x4d
   1abdc:	f107 0014 	add.w	r0, r7, #20
   1abe0:	f7f9 fd30 	bl	14644 <d_make_comp>
   1abe4:	4605      	mov	r5, r0
   1abe6:	e7bb      	b.n	1ab60 <d_demangle_callback.constprop.17+0x268>
   1abe8:	2300      	movs	r3, #0
   1abea:	e7f5      	b.n	1abd8 <d_demangle_callback.constprop.17+0x2e0>
   1abec:	1c81      	adds	r1, r0, #2
   1abee:	460a      	mov	r2, r1
   1abf0:	f811 3b01 	ldrb.w	r3, [r1], #1
   1abf4:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1abf8:	f1be 0f19 	cmp.w	lr, #25
   1abfc:	d9f7      	bls.n	1abee <d_demangle_callback.constprop.17+0x2f6>
   1abfe:	2b5f      	cmp	r3, #95	; 0x5f
   1ac00:	d0f5      	beq.n	1abee <d_demangle_callback.constprop.17+0x2f6>
   1ac02:	e7c0      	b.n	1ab86 <d_demangle_callback.constprop.17+0x28e>
   1ac04:	6a3b      	ldr	r3, [r7, #32]
   1ac06:	f893 9000 	ldrb.w	r9, [r3]
   1ac0a:	e6f3      	b.n	1a9f4 <d_demangle_callback.constprop.17+0xfc>
   1ac0c:	000245cc 	.word	0x000245cc

0001ac10 <__cxa_demangle>:
   1ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac14:	b084      	sub	sp, #16
   1ac16:	b378      	cbz	r0, 1ac78 <__cxa_demangle+0x68>
   1ac18:	b101      	cbz	r1, 1ac1c <__cxa_demangle+0xc>
   1ac1a:	b36a      	cbz	r2, 1ac78 <__cxa_demangle+0x68>
   1ac1c:	2400      	movs	r4, #0
   1ac1e:	4616      	mov	r6, r2
   1ac20:	460d      	mov	r5, r1
   1ac22:	466a      	mov	r2, sp
   1ac24:	4927      	ldr	r1, [pc, #156]	; (1acc4 <__cxa_demangle+0xb4>)
   1ac26:	9400      	str	r4, [sp, #0]
   1ac28:	461f      	mov	r7, r3
   1ac2a:	9401      	str	r4, [sp, #4]
   1ac2c:	9402      	str	r4, [sp, #8]
   1ac2e:	9403      	str	r4, [sp, #12]
   1ac30:	f7ff fe62 	bl	1a8f8 <d_demangle_callback.constprop.17>
   1ac34:	2800      	cmp	r0, #0
   1ac36:	d03f      	beq.n	1acb8 <__cxa_demangle+0xa8>
   1ac38:	9b03      	ldr	r3, [sp, #12]
   1ac3a:	b1d3      	cbz	r3, 1ac72 <__cxa_demangle+0x62>
   1ac3c:	f04f 0801 	mov.w	r8, #1
   1ac40:	9c00      	ldr	r4, [sp, #0]
   1ac42:	b35c      	cbz	r4, 1ac9c <__cxa_demangle+0x8c>
   1ac44:	b33d      	cbz	r5, 1ac96 <__cxa_demangle+0x86>
   1ac46:	4620      	mov	r0, r4
   1ac48:	f004 f93a 	bl	1eec0 <strlen>
   1ac4c:	6833      	ldr	r3, [r6, #0]
   1ac4e:	4298      	cmp	r0, r3
   1ac50:	d21b      	bcs.n	1ac8a <__cxa_demangle+0x7a>
   1ac52:	1c42      	adds	r2, r0, #1
   1ac54:	4621      	mov	r1, r4
   1ac56:	4628      	mov	r0, r5
   1ac58:	f003 fbea 	bl	1e430 <memcpy>
   1ac5c:	4620      	mov	r0, r4
   1ac5e:	f003 f893 	bl	1dd88 <free>
   1ac62:	462c      	mov	r4, r5
   1ac64:	b10f      	cbz	r7, 1ac6a <__cxa_demangle+0x5a>
   1ac66:	2300      	movs	r3, #0
   1ac68:	603b      	str	r3, [r7, #0]
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	b004      	add	sp, #16
   1ac6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac72:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1ac76:	e7e3      	b.n	1ac40 <__cxa_demangle+0x30>
   1ac78:	b113      	cbz	r3, 1ac80 <__cxa_demangle+0x70>
   1ac7a:	f06f 0202 	mvn.w	r2, #2
   1ac7e:	601a      	str	r2, [r3, #0]
   1ac80:	2400      	movs	r4, #0
   1ac82:	4620      	mov	r0, r4
   1ac84:	b004      	add	sp, #16
   1ac86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac8a:	4628      	mov	r0, r5
   1ac8c:	f003 f87c 	bl	1dd88 <free>
   1ac90:	f8c6 8000 	str.w	r8, [r6]
   1ac94:	e7e6      	b.n	1ac64 <__cxa_demangle+0x54>
   1ac96:	2e00      	cmp	r6, #0
   1ac98:	d1fa      	bne.n	1ac90 <__cxa_demangle+0x80>
   1ac9a:	e7e3      	b.n	1ac64 <__cxa_demangle+0x54>
   1ac9c:	2f00      	cmp	r7, #0
   1ac9e:	d0ef      	beq.n	1ac80 <__cxa_demangle+0x70>
   1aca0:	f1b8 0f01 	cmp.w	r8, #1
   1aca4:	d004      	beq.n	1acb0 <__cxa_demangle+0xa0>
   1aca6:	f06f 0301 	mvn.w	r3, #1
   1acaa:	603b      	str	r3, [r7, #0]
   1acac:	2400      	movs	r4, #0
   1acae:	e7dc      	b.n	1ac6a <__cxa_demangle+0x5a>
   1acb0:	f04f 33ff 	mov.w	r3, #4294967295
   1acb4:	603b      	str	r3, [r7, #0]
   1acb6:	e7d8      	b.n	1ac6a <__cxa_demangle+0x5a>
   1acb8:	9800      	ldr	r0, [sp, #0]
   1acba:	f003 f865 	bl	1dd88 <free>
   1acbe:	2f00      	cmp	r7, #0
   1acc0:	d1f1      	bne.n	1aca6 <__cxa_demangle+0x96>
   1acc2:	e7dd      	b.n	1ac80 <__cxa_demangle+0x70>
   1acc4:	00014d69 	.word	0x00014d69

0001acc8 <__gcclibcxx_demangle_callback>:
   1acc8:	b160      	cbz	r0, 1ace4 <__gcclibcxx_demangle_callback+0x1c>
   1acca:	b508      	push	{r3, lr}
   1accc:	b139      	cbz	r1, 1acde <__gcclibcxx_demangle_callback+0x16>
   1acce:	f7ff fe13 	bl	1a8f8 <d_demangle_callback.constprop.17>
   1acd2:	2800      	cmp	r0, #0
   1acd4:	bf0c      	ite	eq
   1acd6:	f06f 0001 	mvneq.w	r0, #1
   1acda:	2000      	movne	r0, #0
   1acdc:	bd08      	pop	{r3, pc}
   1acde:	f06f 0002 	mvn.w	r0, #2
   1ace2:	bd08      	pop	{r3, pc}
   1ace4:	f06f 0002 	mvn.w	r0, #2
   1ace8:	4770      	bx	lr
   1acea:	bf00      	nop

0001acec <__cxa_current_exception_type>:
   1acec:	b508      	push	{r3, lr}
   1acee:	f7f9 f8f5 	bl	13edc <__cxa_get_globals>
   1acf2:	6800      	ldr	r0, [r0, #0]
   1acf4:	b130      	cbz	r0, 1ad04 <__cxa_current_exception_type+0x18>
   1acf6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1acfa:	2b01      	cmp	r3, #1
   1acfc:	bf04      	itt	eq
   1acfe:	6800      	ldreq	r0, [r0, #0]
   1ad00:	3878      	subeq	r0, #120	; 0x78
   1ad02:	6800      	ldr	r0, [r0, #0]
   1ad04:	bd08      	pop	{r3, pc}
   1ad06:	bf00      	nop

0001ad08 <powf>:
   1ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad0a:	ed2d 8b04 	vpush	{d8-d9}
   1ad0e:	4db3      	ldr	r5, [pc, #716]	; (1afdc <powf+0x2d4>)
   1ad10:	b08b      	sub	sp, #44	; 0x2c
   1ad12:	eef0 8a40 	vmov.f32	s17, s0
   1ad16:	eeb0 8a60 	vmov.f32	s16, s1
   1ad1a:	f000 f9df 	bl	1b0dc <__ieee754_powf>
   1ad1e:	f995 4000 	ldrsb.w	r4, [r5]
   1ad22:	1c63      	adds	r3, r4, #1
   1ad24:	eeb0 9a40 	vmov.f32	s18, s0
   1ad28:	d02e      	beq.n	1ad88 <powf+0x80>
   1ad2a:	eeb4 8a48 	vcmp.f32	s16, s16
   1ad2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad32:	d629      	bvs.n	1ad88 <powf+0x80>
   1ad34:	eef4 8a68 	vcmp.f32	s17, s17
   1ad38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad3c:	f180 80a2 	bvs.w	1ae84 <powf+0x17c>
   1ad40:	eef5 8a40 	vcmp.f32	s17, #0.0
   1ad44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad48:	d124      	bne.n	1ad94 <powf+0x8c>
   1ad4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad52:	d159      	bne.n	1ae08 <powf+0x100>
   1ad54:	2301      	movs	r3, #1
   1ad56:	4aa2      	ldr	r2, [pc, #648]	; (1afe0 <powf+0x2d8>)
   1ad58:	9300      	str	r3, [sp, #0]
   1ad5a:	ee18 0a90 	vmov	r0, s17
   1ad5e:	2300      	movs	r3, #0
   1ad60:	9201      	str	r2, [sp, #4]
   1ad62:	9308      	str	r3, [sp, #32]
   1ad64:	f000 ff3a 	bl	1bbdc <__aeabi_f2d>
   1ad68:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad6c:	ee18 0a10 	vmov	r0, s16
   1ad70:	f000 ff34 	bl	1bbdc <__aeabi_f2d>
   1ad74:	2200      	movs	r2, #0
   1ad76:	2300      	movs	r3, #0
   1ad78:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad80:	2c00      	cmp	r4, #0
   1ad82:	d067      	beq.n	1ae54 <powf+0x14c>
   1ad84:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1ad88:	eeb0 0a49 	vmov.f32	s0, s18
   1ad8c:	b00b      	add	sp, #44	; 0x2c
   1ad8e:	ecbd 8b04 	vpop	{d8-d9}
   1ad92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad94:	f000 fd3a 	bl	1b80c <finitef>
   1ad98:	4604      	mov	r4, r0
   1ad9a:	2800      	cmp	r0, #0
   1ad9c:	f000 8091 	beq.w	1aec2 <powf+0x1ba>
   1ada0:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1ada4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ada8:	d1ee      	bne.n	1ad88 <powf+0x80>
   1adaa:	eeb0 0a68 	vmov.f32	s0, s17
   1adae:	f000 fd2d 	bl	1b80c <finitef>
   1adb2:	2800      	cmp	r0, #0
   1adb4:	d0e8      	beq.n	1ad88 <powf+0x80>
   1adb6:	eeb0 0a48 	vmov.f32	s0, s16
   1adba:	f000 fd27 	bl	1b80c <finitef>
   1adbe:	2800      	cmp	r0, #0
   1adc0:	d0e2      	beq.n	1ad88 <powf+0x80>
   1adc2:	2304      	movs	r3, #4
   1adc4:	4a86      	ldr	r2, [pc, #536]	; (1afe0 <powf+0x2d8>)
   1adc6:	9300      	str	r3, [sp, #0]
   1adc8:	ee18 0a90 	vmov	r0, s17
   1adcc:	2300      	movs	r3, #0
   1adce:	9308      	str	r3, [sp, #32]
   1add0:	9201      	str	r2, [sp, #4]
   1add2:	f000 ff03 	bl	1bbdc <__aeabi_f2d>
   1add6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1adda:	ee18 0a10 	vmov	r0, s16
   1adde:	f000 fefd 	bl	1bbdc <__aeabi_f2d>
   1ade2:	2600      	movs	r6, #0
   1ade4:	2700      	movs	r7, #0
   1ade6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1adea:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1adee:	f995 3000 	ldrsb.w	r3, [r5]
   1adf2:	2b02      	cmp	r3, #2
   1adf4:	d003      	beq.n	1adfe <powf+0xf6>
   1adf6:	4668      	mov	r0, sp
   1adf8:	f000 fc6c 	bl	1b6d4 <matherr>
   1adfc:	bb80      	cbnz	r0, 1ae60 <powf+0x158>
   1adfe:	f002 fd15 	bl	1d82c <__errno>
   1ae02:	2322      	movs	r3, #34	; 0x22
   1ae04:	6003      	str	r3, [r0, #0]
   1ae06:	e02b      	b.n	1ae60 <powf+0x158>
   1ae08:	eeb0 0a48 	vmov.f32	s0, s16
   1ae0c:	f000 fcfe 	bl	1b80c <finitef>
   1ae10:	2800      	cmp	r0, #0
   1ae12:	d0b9      	beq.n	1ad88 <powf+0x80>
   1ae14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ae18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae1c:	d5b4      	bpl.n	1ad88 <powf+0x80>
   1ae1e:	2301      	movs	r3, #1
   1ae20:	4a6f      	ldr	r2, [pc, #444]	; (1afe0 <powf+0x2d8>)
   1ae22:	9300      	str	r3, [sp, #0]
   1ae24:	ee18 0a90 	vmov	r0, s17
   1ae28:	2300      	movs	r3, #0
   1ae2a:	9308      	str	r3, [sp, #32]
   1ae2c:	9201      	str	r2, [sp, #4]
   1ae2e:	f000 fed5 	bl	1bbdc <__aeabi_f2d>
   1ae32:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae36:	ee18 0a10 	vmov	r0, s16
   1ae3a:	f000 fecf 	bl	1bbdc <__aeabi_f2d>
   1ae3e:	f995 3000 	ldrsb.w	r3, [r5]
   1ae42:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae46:	2b00      	cmp	r3, #0
   1ae48:	f040 809b 	bne.w	1af82 <powf+0x27a>
   1ae4c:	2200      	movs	r2, #0
   1ae4e:	2300      	movs	r3, #0
   1ae50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae54:	4668      	mov	r0, sp
   1ae56:	f000 fc3d 	bl	1b6d4 <matherr>
   1ae5a:	2800      	cmp	r0, #0
   1ae5c:	f000 808c 	beq.w	1af78 <powf+0x270>
   1ae60:	9b08      	ldr	r3, [sp, #32]
   1ae62:	b11b      	cbz	r3, 1ae6c <powf+0x164>
   1ae64:	f002 fce2 	bl	1d82c <__errno>
   1ae68:	9b08      	ldr	r3, [sp, #32]
   1ae6a:	6003      	str	r3, [r0, #0]
   1ae6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ae70:	f001 f9ea 	bl	1c248 <__aeabi_d2f>
   1ae74:	ee09 0a10 	vmov	s18, r0
   1ae78:	eeb0 0a49 	vmov.f32	s0, s18
   1ae7c:	b00b      	add	sp, #44	; 0x2c
   1ae7e:	ecbd 8b04 	vpop	{d8-d9}
   1ae82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae84:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ae88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae8c:	f47f af7c 	bne.w	1ad88 <powf+0x80>
   1ae90:	2301      	movs	r3, #1
   1ae92:	4a53      	ldr	r2, [pc, #332]	; (1afe0 <powf+0x2d8>)
   1ae94:	9300      	str	r3, [sp, #0]
   1ae96:	ee18 0a90 	vmov	r0, s17
   1ae9a:	2300      	movs	r3, #0
   1ae9c:	9201      	str	r2, [sp, #4]
   1ae9e:	9308      	str	r3, [sp, #32]
   1aea0:	f000 fe9c 	bl	1bbdc <__aeabi_f2d>
   1aea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aea8:	ee18 0a10 	vmov	r0, s16
   1aeac:	f000 fe96 	bl	1bbdc <__aeabi_f2d>
   1aeb0:	4b4c      	ldr	r3, [pc, #304]	; (1afe4 <powf+0x2dc>)
   1aeb2:	2200      	movs	r2, #0
   1aeb4:	2c02      	cmp	r4, #2
   1aeb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aeba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aebe:	d1c9      	bne.n	1ae54 <powf+0x14c>
   1aec0:	e760      	b.n	1ad84 <powf+0x7c>
   1aec2:	eeb0 0a68 	vmov.f32	s0, s17
   1aec6:	f000 fca1 	bl	1b80c <finitef>
   1aeca:	2800      	cmp	r0, #0
   1aecc:	f43f af68 	beq.w	1ada0 <powf+0x98>
   1aed0:	eeb0 0a48 	vmov.f32	s0, s16
   1aed4:	f000 fc9a 	bl	1b80c <finitef>
   1aed8:	2800      	cmp	r0, #0
   1aeda:	f43f af61 	beq.w	1ada0 <powf+0x98>
   1aede:	eeb4 9a49 	vcmp.f32	s18, s18
   1aee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aee6:	f180 8087 	bvs.w	1aff8 <powf+0x2f0>
   1aeea:	4b3d      	ldr	r3, [pc, #244]	; (1afe0 <powf+0x2d8>)
   1aeec:	9408      	str	r4, [sp, #32]
   1aeee:	2203      	movs	r2, #3
   1aef0:	ee18 0a90 	vmov	r0, s17
   1aef4:	e88d 000c 	stmia.w	sp, {r2, r3}
   1aef8:	f000 fe70 	bl	1bbdc <__aeabi_f2d>
   1aefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1af00:	ee18 0a10 	vmov	r0, s16
   1af04:	f000 fe6a 	bl	1bbdc <__aeabi_f2d>
   1af08:	f995 3000 	ldrsb.w	r3, [r5]
   1af0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1af10:	2b00      	cmp	r3, #0
   1af12:	d13d      	bne.n	1af90 <powf+0x288>
   1af14:	4b34      	ldr	r3, [pc, #208]	; (1afe8 <powf+0x2e0>)
   1af16:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1af1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af22:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af26:	f57f af66 	bpl.w	1adf6 <powf+0xee>
   1af2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1af2e:	ee68 7a27 	vmul.f32	s15, s16, s15
   1af32:	ee17 0a90 	vmov	r0, s15
   1af36:	f000 fe51 	bl	1bbdc <__aeabi_f2d>
   1af3a:	4606      	mov	r6, r0
   1af3c:	460f      	mov	r7, r1
   1af3e:	ec47 6b10 	vmov	d0, r6, r7
   1af42:	f000 fbc9 	bl	1b6d8 <rint>
   1af46:	4630      	mov	r0, r6
   1af48:	ec53 2b10 	vmov	r2, r3, d0
   1af4c:	4639      	mov	r1, r7
   1af4e:	f001 f901 	bl	1c154 <__aeabi_dcmpeq>
   1af52:	2800      	cmp	r0, #0
   1af54:	d13f      	bne.n	1afd6 <powf+0x2ce>
   1af56:	4925      	ldr	r1, [pc, #148]	; (1afec <powf+0x2e4>)
   1af58:	f995 3000 	ldrsb.w	r3, [r5]
   1af5c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1af60:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1af64:	e745      	b.n	1adf2 <powf+0xea>
   1af66:	4610      	mov	r0, r2
   1af68:	4619      	mov	r1, r3
   1af6a:	f000 ffb5 	bl	1bed8 <__aeabi_ddiv>
   1af6e:	2c02      	cmp	r4, #2
   1af70:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1af74:	f47f af6e 	bne.w	1ae54 <powf+0x14c>
   1af78:	f002 fc58 	bl	1d82c <__errno>
   1af7c:	2321      	movs	r3, #33	; 0x21
   1af7e:	6003      	str	r3, [r0, #0]
   1af80:	e76e      	b.n	1ae60 <powf+0x158>
   1af82:	491b      	ldr	r1, [pc, #108]	; (1aff0 <powf+0x2e8>)
   1af84:	2000      	movs	r0, #0
   1af86:	2b02      	cmp	r3, #2
   1af88:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1af8c:	d0f4      	beq.n	1af78 <powf+0x270>
   1af8e:	e761      	b.n	1ae54 <powf+0x14c>
   1af90:	4918      	ldr	r1, [pc, #96]	; (1aff4 <powf+0x2ec>)
   1af92:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1af96:	2000      	movs	r0, #0
   1af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1afa0:	f57f af27 	bpl.w	1adf2 <powf+0xea>
   1afa4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1afa8:	ee68 7a27 	vmul.f32	s15, s16, s15
   1afac:	ee17 0a90 	vmov	r0, s15
   1afb0:	f000 fe14 	bl	1bbdc <__aeabi_f2d>
   1afb4:	4606      	mov	r6, r0
   1afb6:	460f      	mov	r7, r1
   1afb8:	ec47 6b10 	vmov	d0, r6, r7
   1afbc:	f000 fb8c 	bl	1b6d8 <rint>
   1afc0:	4630      	mov	r0, r6
   1afc2:	ec53 2b10 	vmov	r2, r3, d0
   1afc6:	4639      	mov	r1, r7
   1afc8:	f001 f8c4 	bl	1c154 <__aeabi_dcmpeq>
   1afcc:	b918      	cbnz	r0, 1afd6 <powf+0x2ce>
   1afce:	4b08      	ldr	r3, [pc, #32]	; (1aff0 <powf+0x2e8>)
   1afd0:	2200      	movs	r2, #0
   1afd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1afd6:	f995 3000 	ldrsb.w	r3, [r5]
   1afda:	e70a      	b.n	1adf2 <powf+0xea>
   1afdc:	200000fc 	.word	0x200000fc
   1afe0:	00024e18 	.word	0x00024e18
   1afe4:	3ff00000 	.word	0x3ff00000
   1afe8:	47efffff 	.word	0x47efffff
   1afec:	c7efffff 	.word	0xc7efffff
   1aff0:	fff00000 	.word	0xfff00000
   1aff4:	7ff00000 	.word	0x7ff00000
   1aff8:	4b0c      	ldr	r3, [pc, #48]	; (1b02c <powf+0x324>)
   1affa:	9408      	str	r4, [sp, #32]
   1affc:	2201      	movs	r2, #1
   1affe:	ee18 0a90 	vmov	r0, s17
   1b002:	e88d 000c 	stmia.w	sp, {r2, r3}
   1b006:	f000 fde9 	bl	1bbdc <__aeabi_f2d>
   1b00a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b00e:	ee18 0a10 	vmov	r0, s16
   1b012:	f000 fde3 	bl	1bbdc <__aeabi_f2d>
   1b016:	f995 4000 	ldrsb.w	r4, [r5]
   1b01a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b01e:	2200      	movs	r2, #0
   1b020:	2300      	movs	r3, #0
   1b022:	2c00      	cmp	r4, #0
   1b024:	d19f      	bne.n	1af66 <powf+0x25e>
   1b026:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b02a:	e713      	b.n	1ae54 <powf+0x14c>
   1b02c:	00024e18 	.word	0x00024e18

0001b030 <sqrtf>:
   1b030:	b510      	push	{r4, lr}
   1b032:	ed2d 8b02 	vpush	{d8}
   1b036:	b08a      	sub	sp, #40	; 0x28
   1b038:	eeb0 8a40 	vmov.f32	s16, s0
   1b03c:	f000 fb46 	bl	1b6cc <__ieee754_sqrtf>
   1b040:	4b24      	ldr	r3, [pc, #144]	; (1b0d4 <sqrtf+0xa4>)
   1b042:	f993 4000 	ldrsb.w	r4, [r3]
   1b046:	1c63      	adds	r3, r4, #1
   1b048:	d009      	beq.n	1b05e <sqrtf+0x2e>
   1b04a:	eeb4 8a48 	vcmp.f32	s16, s16
   1b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b052:	d604      	bvs.n	1b05e <sqrtf+0x2e>
   1b054:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1b058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b05c:	d403      	bmi.n	1b066 <sqrtf+0x36>
   1b05e:	b00a      	add	sp, #40	; 0x28
   1b060:	ecbd 8b02 	vpop	{d8}
   1b064:	bd10      	pop	{r4, pc}
   1b066:	2301      	movs	r3, #1
   1b068:	4a1b      	ldr	r2, [pc, #108]	; (1b0d8 <sqrtf+0xa8>)
   1b06a:	9300      	str	r3, [sp, #0]
   1b06c:	ee18 0a10 	vmov	r0, s16
   1b070:	2300      	movs	r3, #0
   1b072:	9201      	str	r2, [sp, #4]
   1b074:	9308      	str	r3, [sp, #32]
   1b076:	f000 fdb1 	bl	1bbdc <__aeabi_f2d>
   1b07a:	2200      	movs	r2, #0
   1b07c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b080:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b084:	2300      	movs	r3, #0
   1b086:	b1bc      	cbz	r4, 1b0b8 <sqrtf+0x88>
   1b088:	4610      	mov	r0, r2
   1b08a:	4619      	mov	r1, r3
   1b08c:	f000 ff24 	bl	1bed8 <__aeabi_ddiv>
   1b090:	2c02      	cmp	r4, #2
   1b092:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b096:	d111      	bne.n	1b0bc <sqrtf+0x8c>
   1b098:	f002 fbc8 	bl	1d82c <__errno>
   1b09c:	2321      	movs	r3, #33	; 0x21
   1b09e:	6003      	str	r3, [r0, #0]
   1b0a0:	9b08      	ldr	r3, [sp, #32]
   1b0a2:	b98b      	cbnz	r3, 1b0c8 <sqrtf+0x98>
   1b0a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b0a8:	f001 f8ce 	bl	1c248 <__aeabi_d2f>
   1b0ac:	ee00 0a10 	vmov	s0, r0
   1b0b0:	b00a      	add	sp, #40	; 0x28
   1b0b2:	ecbd 8b02 	vpop	{d8}
   1b0b6:	bd10      	pop	{r4, pc}
   1b0b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b0bc:	4668      	mov	r0, sp
   1b0be:	f000 fb09 	bl	1b6d4 <matherr>
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	d1ec      	bne.n	1b0a0 <sqrtf+0x70>
   1b0c6:	e7e7      	b.n	1b098 <sqrtf+0x68>
   1b0c8:	f002 fbb0 	bl	1d82c <__errno>
   1b0cc:	9b08      	ldr	r3, [sp, #32]
   1b0ce:	6003      	str	r3, [r0, #0]
   1b0d0:	e7e8      	b.n	1b0a4 <sqrtf+0x74>
   1b0d2:	bf00      	nop
   1b0d4:	200000fc 	.word	0x200000fc
   1b0d8:	00024e20 	.word	0x00024e20

0001b0dc <__ieee754_powf>:
   1b0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b0e0:	ed2d 8b02 	vpush	{d8}
   1b0e4:	b082      	sub	sp, #8
   1b0e6:	edcd 0a00 	vstr	s1, [sp]
   1b0ea:	9c00      	ldr	r4, [sp, #0]
   1b0ec:	ed8d 0a01 	vstr	s0, [sp, #4]
   1b0f0:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1b0f4:	d014      	beq.n	1b120 <__ieee754_powf+0x44>
   1b0f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1b0fa:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1b0fe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b102:	dd07      	ble.n	1b114 <__ieee754_powf+0x38>
   1b104:	4858      	ldr	r0, [pc, #352]	; (1b268 <__ieee754_powf+0x18c>)
   1b106:	b002      	add	sp, #8
   1b108:	ecbd 8b02 	vpop	{d8}
   1b10c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b110:	f000 bb86 	b.w	1b820 <nanf>
   1b114:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b118:	dd09      	ble.n	1b12e <__ieee754_powf+0x52>
   1b11a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b11e:	d1f1      	bne.n	1b104 <__ieee754_powf+0x28>
   1b120:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1b124:	b002      	add	sp, #8
   1b126:	ecbd 8b02 	vpop	{d8}
   1b12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b12e:	f1b8 0f00 	cmp.w	r8, #0
   1b132:	db4d      	blt.n	1b1d0 <__ieee754_powf+0xf4>
   1b134:	f04f 0a00 	mov.w	sl, #0
   1b138:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b13c:	d03f      	beq.n	1b1be <__ieee754_powf+0xe2>
   1b13e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b142:	d058      	beq.n	1b1f6 <__ieee754_powf+0x11a>
   1b144:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b148:	d06e      	beq.n	1b228 <__ieee754_powf+0x14c>
   1b14a:	9d01      	ldr	r5, [sp, #4]
   1b14c:	f8dd 9000 	ldr.w	r9, [sp]
   1b150:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1b154:	ee00 5a10 	vmov	s0, r5
   1b158:	d01c      	beq.n	1b194 <__ieee754_powf+0xb8>
   1b15a:	f000 fb4f 	bl	1b7fc <fabsf>
   1b15e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b162:	d04d      	beq.n	1b200 <__ieee754_powf+0x124>
   1b164:	2f00      	cmp	r7, #0
   1b166:	d04b      	beq.n	1b200 <__ieee754_powf+0x124>
   1b168:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b16c:	d048      	beq.n	1b200 <__ieee754_powf+0x124>
   1b16e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1b172:	3b01      	subs	r3, #1
   1b174:	ea5a 0203 	orrs.w	r2, sl, r3
   1b178:	d06e      	beq.n	1b258 <__ieee754_powf+0x17c>
   1b17a:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1b17e:	dd7b      	ble.n	1b278 <__ieee754_powf+0x19c>
   1b180:	4a3a      	ldr	r2, [pc, #232]	; (1b26c <__ieee754_powf+0x190>)
   1b182:	4297      	cmp	r7, r2
   1b184:	f300 81c8 	bgt.w	1b518 <__ieee754_powf+0x43c>
   1b188:	2c00      	cmp	r4, #0
   1b18a:	f2c0 81cb 	blt.w	1b524 <__ieee754_powf+0x448>
   1b18e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b270 <__ieee754_powf+0x194>
   1b192:	e7c7      	b.n	1b124 <__ieee754_powf+0x48>
   1b194:	f1b8 0f00 	cmp.w	r8, #0
   1b198:	da4b      	bge.n	1b232 <__ieee754_powf+0x156>
   1b19a:	f000 fb2f 	bl	1b7fc <fabsf>
   1b19e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b1a2:	d001      	beq.n	1b1a8 <__ieee754_powf+0xcc>
   1b1a4:	2f00      	cmp	r7, #0
   1b1a6:	d1df      	bne.n	1b168 <__ieee754_powf+0x8c>
   1b1a8:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1b1ac:	ea57 030a 	orrs.w	r3, r7, sl
   1b1b0:	d04d      	beq.n	1b24e <__ieee754_powf+0x172>
   1b1b2:	f1ba 0f01 	cmp.w	sl, #1
   1b1b6:	d1b5      	bne.n	1b124 <__ieee754_powf+0x48>
   1b1b8:	eeb1 0a40 	vneg.f32	s0, s0
   1b1bc:	e7b2      	b.n	1b124 <__ieee754_powf+0x48>
   1b1be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b1c2:	d0ad      	beq.n	1b120 <__ieee754_powf+0x44>
   1b1c4:	dd29      	ble.n	1b21a <__ieee754_powf+0x13e>
   1b1c6:	2c00      	cmp	r4, #0
   1b1c8:	dbe1      	blt.n	1b18e <__ieee754_powf+0xb2>
   1b1ca:	ed9d 0a00 	vldr	s0, [sp]
   1b1ce:	e7a9      	b.n	1b124 <__ieee754_powf+0x48>
   1b1d0:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1b1d4:	da1e      	bge.n	1b214 <__ieee754_powf+0x138>
   1b1d6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b1da:	db09      	blt.n	1b1f0 <__ieee754_powf+0x114>
   1b1dc:	15f3      	asrs	r3, r6, #23
   1b1de:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1b1e2:	fa46 f203 	asr.w	r2, r6, r3
   1b1e6:	fa02 f303 	lsl.w	r3, r2, r3
   1b1ea:	429e      	cmp	r6, r3
   1b1ec:	f000 818f 	beq.w	1b50e <__ieee754_powf+0x432>
   1b1f0:	f04f 0a00 	mov.w	sl, #0
   1b1f4:	e7a3      	b.n	1b13e <__ieee754_powf+0x62>
   1b1f6:	2c00      	cmp	r4, #0
   1b1f8:	db22      	blt.n	1b240 <__ieee754_powf+0x164>
   1b1fa:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b1fe:	e791      	b.n	1b124 <__ieee754_powf+0x48>
   1b200:	2c00      	cmp	r4, #0
   1b202:	bfbc      	itt	lt
   1b204:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b208:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b20c:	f1b8 0f00 	cmp.w	r8, #0
   1b210:	da88      	bge.n	1b124 <__ieee754_powf+0x48>
   1b212:	e7c9      	b.n	1b1a8 <__ieee754_powf+0xcc>
   1b214:	f04f 0a02 	mov.w	sl, #2
   1b218:	e78e      	b.n	1b138 <__ieee754_powf+0x5c>
   1b21a:	2c00      	cmp	r4, #0
   1b21c:	dab7      	bge.n	1b18e <__ieee754_powf+0xb2>
   1b21e:	eddd 7a00 	vldr	s15, [sp]
   1b222:	eeb1 0a67 	vneg.f32	s0, s15
   1b226:	e77d      	b.n	1b124 <__ieee754_powf+0x48>
   1b228:	eddd 7a01 	vldr	s15, [sp, #4]
   1b22c:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b230:	e778      	b.n	1b124 <__ieee754_powf+0x48>
   1b232:	b002      	add	sp, #8
   1b234:	ecbd 8b02 	vpop	{d8}
   1b238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b23c:	f000 ba46 	b.w	1b6cc <__ieee754_sqrtf>
   1b240:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b244:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b248:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b24c:	e76a      	b.n	1b124 <__ieee754_powf+0x48>
   1b24e:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b252:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b256:	e765      	b.n	1b124 <__ieee754_powf+0x48>
   1b258:	ee07 5a90 	vmov	s15, r5
   1b25c:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b260:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b264:	e75e      	b.n	1b124 <__ieee754_powf+0x48>
   1b266:	bf00      	nop
   1b268:	00022c74 	.word	0x00022c74
   1b26c:	3f7ffff7 	.word	0x3f7ffff7
   1b270:	00000000 	.word	0x00000000
   1b274:	4b800000 	.word	0x4b800000
   1b278:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b27c:	f280 815f 	bge.w	1b53e <__ieee754_powf+0x462>
   1b280:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b274 <__ieee754_powf+0x198>
   1b284:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b288:	f06f 0217 	mvn.w	r2, #23
   1b28c:	ee17 7a90 	vmov	r7, s15
   1b290:	48ee      	ldr	r0, [pc, #952]	; (1b64c <__ieee754_powf+0x570>)
   1b292:	15f9      	asrs	r1, r7, #23
   1b294:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b298:	397f      	subs	r1, #127	; 0x7f
   1b29a:	4287      	cmp	r7, r0
   1b29c:	4411      	add	r1, r2
   1b29e:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b2a2:	f340 8144 	ble.w	1b52e <__ieee754_powf+0x452>
   1b2a6:	48ea      	ldr	r0, [pc, #936]	; (1b650 <__ieee754_powf+0x574>)
   1b2a8:	4287      	cmp	r7, r0
   1b2aa:	f340 8191 	ble.w	1b5d0 <__ieee754_powf+0x4f4>
   1b2ae:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b654 <__ieee754_powf+0x578>
   1b2b2:	3101      	adds	r1, #1
   1b2b4:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b2b8:	eef0 3a64 	vmov.f32	s7, s9
   1b2bc:	2500      	movs	r5, #0
   1b2be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b2c2:	ee06 2a90 	vmov	s13, r2
   1b2c6:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b2ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b2ce:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b2d2:	1052      	asrs	r2, r2, #1
   1b2d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b2d8:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b2dc:	442a      	add	r2, r5
   1b2de:	48de      	ldr	r0, [pc, #888]	; (1b658 <__ieee754_powf+0x57c>)
   1b2e0:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b2e4:	ee07 2a90 	vmov	s15, r2
   1b2e8:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b2ec:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b2f0:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b65c <__ieee754_powf+0x580>
   1b2f4:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b660 <__ieee754_powf+0x584>
   1b2f8:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b664 <__ieee754_powf+0x588>
   1b2fc:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b668 <__ieee754_powf+0x58c>
   1b300:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b66c <__ieee754_powf+0x590>
   1b304:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b670 <__ieee754_powf+0x594>
   1b308:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b674 <__ieee754_powf+0x598>
   1b30c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b678 <__ieee754_powf+0x59c>
   1b310:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b314:	ee14 2a10 	vmov	r2, s8
   1b318:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b31c:	4002      	ands	r2, r0
   1b31e:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b322:	eeb0 5a61 	vmov.f32	s10, s3
   1b326:	ee05 2a90 	vmov	s11, r2
   1b32a:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b32e:	eef1 1a65 	vneg.f32	s3, s11
   1b332:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b336:	eef0 7a60 	vmov.f32	s15, s1
   1b33a:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b33e:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b342:	eeb0 5a41 	vmov.f32	s10, s2
   1b346:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b34a:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b34e:	eeb0 7a42 	vmov.f32	s14, s4
   1b352:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b356:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b35a:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b35e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b362:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b366:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b36a:	eeb0 7a45 	vmov.f32	s14, s10
   1b36e:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b372:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b67c <__ieee754_powf+0x5a0>
   1b376:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b37a:	ee07 1a10 	vmov	s14, r1
   1b37e:	ee16 2a10 	vmov	r2, s12
   1b382:	4002      	ands	r2, r0
   1b384:	ee06 2a10 	vmov	s12, r2
   1b388:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b38c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b390:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b394:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b398:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b39c:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b3a0:	eef0 6a67 	vmov.f32	s13, s15
   1b3a4:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b3a8:	ee16 2a90 	vmov	r2, s13
   1b3ac:	4002      	ands	r2, r0
   1b3ae:	ee06 2a90 	vmov	s13, r2
   1b3b2:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b3b6:	ee05 2a90 	vmov	s11, r2
   1b3ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b3be:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b3c2:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b3c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b3ca:	eef0 6a67 	vmov.f32	s13, s15
   1b3ce:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b3d2:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b3d6:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b3da:	ee16 2a90 	vmov	r2, s13
   1b3de:	4002      	ands	r2, r0
   1b3e0:	ee06 2a90 	vmov	s13, r2
   1b3e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b3e8:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b3ec:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b3f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b3f4:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b3f8:	f024 040f 	bic.w	r4, r4, #15
   1b3fc:	ee07 9a10 	vmov	s14, r9
   1b400:	ee06 4a10 	vmov	s12, r4
   1b404:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b408:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b40c:	ee07 4a10 	vmov	s14, r4
   1b410:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b414:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b418:	ea5a 0303 	orrs.w	r3, sl, r3
   1b41c:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b420:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b424:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b428:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b42c:	ee16 2a90 	vmov	r2, s13
   1b430:	bf14      	ite	ne
   1b432:	eeb0 8a46 	vmovne.f32	s16, s12
   1b436:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b43a:	2a00      	cmp	r2, #0
   1b43c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b440:	f340 80b3 	ble.w	1b5aa <__ieee754_powf+0x4ce>
   1b444:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b448:	f300 8086 	bgt.w	1b558 <__ieee754_powf+0x47c>
   1b44c:	d079      	beq.n	1b542 <__ieee754_powf+0x466>
   1b44e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b452:	f300 8088 	bgt.w	1b566 <__ieee754_powf+0x48a>
   1b456:	2100      	movs	r1, #0
   1b458:	4608      	mov	r0, r1
   1b45a:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b45e:	f023 030f 	bic.w	r3, r3, #15
   1b462:	ee06 3a10 	vmov	s12, r3
   1b466:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b680 <__ieee754_powf+0x5a4>
   1b46a:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b684 <__ieee754_powf+0x5a8>
   1b46e:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b688 <__ieee754_powf+0x5ac>
   1b472:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b68c <__ieee754_powf+0x5b0>
   1b476:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b690 <__ieee754_powf+0x5b4>
   1b47a:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b694 <__ieee754_powf+0x5b8>
   1b47e:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b698 <__ieee754_powf+0x5bc>
   1b482:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b69c <__ieee754_powf+0x5c0>
   1b486:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b48a:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b48e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b492:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b496:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b49a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b49e:	eef0 7a47 	vmov.f32	s15, s14
   1b4a2:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b4a6:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b4aa:	eef0 1a47 	vmov.f32	s3, s14
   1b4ae:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b4b2:	eeb0 6a63 	vmov.f32	s12, s7
   1b4b6:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b4ba:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b4be:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b4c2:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b4c6:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b4ca:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b4ce:	eeb0 6a45 	vmov.f32	s12, s10
   1b4d2:	eeb0 5a47 	vmov.f32	s10, s14
   1b4d6:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b4da:	eef0 6a45 	vmov.f32	s13, s10
   1b4de:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b4e2:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b4e6:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b4ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b4ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b4f2:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b4f6:	ee10 3a10 	vmov	r3, s0
   1b4fa:	440b      	add	r3, r1
   1b4fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b500:	f2c0 80a0 	blt.w	1b644 <__ieee754_powf+0x568>
   1b504:	ee00 3a10 	vmov	s0, r3
   1b508:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b50c:	e60a      	b.n	1b124 <__ieee754_powf+0x48>
   1b50e:	f002 0201 	and.w	r2, r2, #1
   1b512:	f1c2 0a02 	rsb	sl, r2, #2
   1b516:	e612      	b.n	1b13e <__ieee754_powf+0x62>
   1b518:	4a61      	ldr	r2, [pc, #388]	; (1b6a0 <__ieee754_powf+0x5c4>)
   1b51a:	4297      	cmp	r7, r2
   1b51c:	dd61      	ble.n	1b5e2 <__ieee754_powf+0x506>
   1b51e:	2c00      	cmp	r4, #0
   1b520:	f77f ae35 	ble.w	1b18e <__ieee754_powf+0xb2>
   1b524:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b6a4 <__ieee754_powf+0x5c8>
   1b528:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b52c:	e5fa      	b.n	1b124 <__ieee754_powf+0x48>
   1b52e:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b654 <__ieee754_powf+0x578>
   1b532:	2500      	movs	r5, #0
   1b534:	eef0 3a64 	vmov.f32	s7, s9
   1b538:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b53c:	e6c1      	b.n	1b2c2 <__ieee754_powf+0x1e6>
   1b53e:	2200      	movs	r2, #0
   1b540:	e6a6      	b.n	1b290 <__ieee754_powf+0x1b4>
   1b542:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b6a8 <__ieee754_powf+0x5cc>
   1b546:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b54a:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b54e:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b556:	dd06      	ble.n	1b566 <__ieee754_powf+0x48a>
   1b558:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b6a4 <__ieee754_powf+0x5c8>
   1b55c:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b560:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b564:	e5de      	b.n	1b124 <__ieee754_powf+0x48>
   1b566:	15db      	asrs	r3, r3, #23
   1b568:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b56c:	3b7e      	subs	r3, #126	; 0x7e
   1b56e:	fa41 f303 	asr.w	r3, r1, r3
   1b572:	4413      	add	r3, r2
   1b574:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b578:	4c4c      	ldr	r4, [pc, #304]	; (1b6ac <__ieee754_powf+0x5d0>)
   1b57a:	397f      	subs	r1, #127	; 0x7f
   1b57c:	410c      	asrs	r4, r1
   1b57e:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b582:	ea23 0304 	bic.w	r3, r3, r4
   1b586:	ee06 3a90 	vmov	s13, r3
   1b58a:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b58e:	f1c1 0117 	rsb	r1, r1, #23
   1b592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b596:	4108      	asrs	r0, r1
   1b598:	2a00      	cmp	r2, #0
   1b59a:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b59e:	bfb8      	it	lt
   1b5a0:	4240      	neglt	r0, r0
   1b5a2:	05c1      	lsls	r1, r0, #23
   1b5a4:	ee16 2a90 	vmov	r2, s13
   1b5a8:	e757      	b.n	1b45a <__ieee754_powf+0x37e>
   1b5aa:	4941      	ldr	r1, [pc, #260]	; (1b6b0 <__ieee754_powf+0x5d4>)
   1b5ac:	428b      	cmp	r3, r1
   1b5ae:	dc08      	bgt.n	1b5c2 <__ieee754_powf+0x4e6>
   1b5b0:	f47f af4d 	bne.w	1b44e <__ieee754_powf+0x372>
   1b5b4:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b5b8:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b5c0:	d8d1      	bhi.n	1b566 <__ieee754_powf+0x48a>
   1b5c2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b6b4 <__ieee754_powf+0x5d8>
   1b5c6:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b5ca:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b5ce:	e5a9      	b.n	1b124 <__ieee754_powf+0x48>
   1b5d0:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b6b8 <__ieee754_powf+0x5dc>
   1b5d4:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b6bc <__ieee754_powf+0x5e0>
   1b5d8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b5dc:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b5e0:	e66f      	b.n	1b2c2 <__ieee754_powf+0x1e6>
   1b5e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b5e6:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b5ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b668 <__ieee754_powf+0x58c>
   1b5ee:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b6c0 <__ieee754_powf+0x5e4>
   1b5f2:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b6c4 <__ieee754_powf+0x5e8>
   1b5f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b6c8 <__ieee754_powf+0x5ec>
   1b5fa:	eeb1 6a40 	vneg.f32	s12, s0
   1b5fe:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b602:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b606:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b60a:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b60e:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b612:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b616:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b61a:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b61e:	eef0 6a67 	vmov.f32	s13, s15
   1b622:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b626:	ee16 2a90 	vmov	r2, s13
   1b62a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b62e:	f022 020f 	bic.w	r2, r2, #15
   1b632:	ee07 2a10 	vmov	s14, r2
   1b636:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b63a:	ee06 2a90 	vmov	s13, r2
   1b63e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b642:	e6d7      	b.n	1b3f4 <__ieee754_powf+0x318>
   1b644:	f000 f8f2 	bl	1b82c <scalbnf>
   1b648:	e75e      	b.n	1b508 <__ieee754_powf+0x42c>
   1b64a:	bf00      	nop
   1b64c:	001cc471 	.word	0x001cc471
   1b650:	005db3d6 	.word	0x005db3d6
   1b654:	00000000 	.word	0x00000000
   1b658:	fffff000 	.word	0xfffff000
   1b65c:	3e53f142 	.word	0x3e53f142
   1b660:	3e6c3255 	.word	0x3e6c3255
   1b664:	3e8ba305 	.word	0x3e8ba305
   1b668:	3eaaaaab 	.word	0x3eaaaaab
   1b66c:	3edb6db7 	.word	0x3edb6db7
   1b670:	3f19999a 	.word	0x3f19999a
   1b674:	3f76384f 	.word	0x3f76384f
   1b678:	369dc3a0 	.word	0x369dc3a0
   1b67c:	3f763800 	.word	0x3f763800
   1b680:	35bfbe8c 	.word	0x35bfbe8c
   1b684:	3f317218 	.word	0x3f317218
   1b688:	3f317200 	.word	0x3f317200
   1b68c:	b5ddea0e 	.word	0xb5ddea0e
   1b690:	3331bb4c 	.word	0x3331bb4c
   1b694:	388ab355 	.word	0x388ab355
   1b698:	bb360b61 	.word	0xbb360b61
   1b69c:	3e2aaaab 	.word	0x3e2aaaab
   1b6a0:	3f800007 	.word	0x3f800007
   1b6a4:	7149f2ca 	.word	0x7149f2ca
   1b6a8:	3338aa3c 	.word	0x3338aa3c
   1b6ac:	007fffff 	.word	0x007fffff
   1b6b0:	43160000 	.word	0x43160000
   1b6b4:	0da24260 	.word	0x0da24260
   1b6b8:	3f15c000 	.word	0x3f15c000
   1b6bc:	35d1cfdc 	.word	0x35d1cfdc
   1b6c0:	3fb8aa3b 	.word	0x3fb8aa3b
   1b6c4:	36eca570 	.word	0x36eca570
   1b6c8:	3fb8aa00 	.word	0x3fb8aa00

0001b6cc <__ieee754_sqrtf>:
   1b6cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b6d0:	4770      	bx	lr
   1b6d2:	bf00      	nop

0001b6d4 <matherr>:
   1b6d4:	2000      	movs	r0, #0
   1b6d6:	4770      	bx	lr

0001b6d8 <rint>:
   1b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6da:	ec53 2b10 	vmov	r2, r3, d0
   1b6de:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b6e2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b6e6:	2813      	cmp	r0, #19
   1b6e8:	b083      	sub	sp, #12
   1b6ea:	4619      	mov	r1, r3
   1b6ec:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b6f0:	ee10 5a10 	vmov	r5, s0
   1b6f4:	dc2f      	bgt.n	1b756 <rint+0x7e>
   1b6f6:	2800      	cmp	r0, #0
   1b6f8:	db49      	blt.n	1b78e <rint+0xb6>
   1b6fa:	4e3e      	ldr	r6, [pc, #248]	; (1b7f4 <rint+0x11c>)
   1b6fc:	4106      	asrs	r6, r0
   1b6fe:	ea03 0706 	and.w	r7, r3, r6
   1b702:	4317      	orrs	r7, r2
   1b704:	d02c      	beq.n	1b760 <rint+0x88>
   1b706:	0876      	lsrs	r6, r6, #1
   1b708:	4033      	ands	r3, r6
   1b70a:	431d      	orrs	r5, r3
   1b70c:	d00c      	beq.n	1b728 <rint+0x50>
   1b70e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b712:	2813      	cmp	r0, #19
   1b714:	ea21 0606 	bic.w	r6, r1, r6
   1b718:	fa43 f100 	asr.w	r1, r3, r0
   1b71c:	ea41 0106 	orr.w	r1, r1, r6
   1b720:	bf0c      	ite	eq
   1b722:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b726:	2500      	movne	r5, #0
   1b728:	4833      	ldr	r0, [pc, #204]	; (1b7f8 <rint+0x120>)
   1b72a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b72e:	462a      	mov	r2, r5
   1b730:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b734:	4610      	mov	r0, r2
   1b736:	462b      	mov	r3, r5
   1b738:	4622      	mov	r2, r4
   1b73a:	f000 f8f1 	bl	1b920 <__adddf3>
   1b73e:	e9cd 0100 	strd	r0, r1, [sp]
   1b742:	4622      	mov	r2, r4
   1b744:	462b      	mov	r3, r5
   1b746:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b74a:	f000 f8e7 	bl	1b91c <__aeabi_dsub>
   1b74e:	ec41 0b10 	vmov	d0, r0, r1
   1b752:	b003      	add	sp, #12
   1b754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b756:	2833      	cmp	r0, #51	; 0x33
   1b758:	dd06      	ble.n	1b768 <rint+0x90>
   1b75a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b75e:	d040      	beq.n	1b7e2 <rint+0x10a>
   1b760:	ec43 2b10 	vmov	d0, r2, r3
   1b764:	b003      	add	sp, #12
   1b766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b768:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b76c:	f04f 30ff 	mov.w	r0, #4294967295
   1b770:	40f0      	lsrs	r0, r6
   1b772:	4202      	tst	r2, r0
   1b774:	d0f4      	beq.n	1b760 <rint+0x88>
   1b776:	0840      	lsrs	r0, r0, #1
   1b778:	4202      	tst	r2, r0
   1b77a:	d0d5      	beq.n	1b728 <rint+0x50>
   1b77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b780:	ea25 0000 	bic.w	r0, r5, r0
   1b784:	fa43 f606 	asr.w	r6, r3, r6
   1b788:	ea46 0500 	orr.w	r5, r6, r0
   1b78c:	e7cc      	b.n	1b728 <rint+0x50>
   1b78e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b792:	4310      	orrs	r0, r2
   1b794:	d0e4      	beq.n	1b760 <rint+0x88>
   1b796:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b79a:	4310      	orrs	r0, r2
   1b79c:	4247      	negs	r7, r0
   1b79e:	4307      	orrs	r7, r0
   1b7a0:	4d15      	ldr	r5, [pc, #84]	; (1b7f8 <rint+0x120>)
   1b7a2:	0c5e      	lsrs	r6, r3, #17
   1b7a4:	0b3f      	lsrs	r7, r7, #12
   1b7a6:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b7aa:	0476      	lsls	r6, r6, #17
   1b7ac:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b7b0:	ea43 0106 	orr.w	r1, r3, r6
   1b7b4:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b7b8:	ee10 0a10 	vmov	r0, s0
   1b7bc:	4632      	mov	r2, r6
   1b7be:	463b      	mov	r3, r7
   1b7c0:	f000 f8ae 	bl	1b920 <__adddf3>
   1b7c4:	e9cd 0100 	strd	r0, r1, [sp]
   1b7c8:	463b      	mov	r3, r7
   1b7ca:	4632      	mov	r2, r6
   1b7cc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b7d0:	f000 f8a4 	bl	1b91c <__aeabi_dsub>
   1b7d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b7d8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b7dc:	ec41 0b10 	vmov	d0, r0, r1
   1b7e0:	e7c0      	b.n	1b764 <rint+0x8c>
   1b7e2:	ee10 0a10 	vmov	r0, s0
   1b7e6:	4619      	mov	r1, r3
   1b7e8:	f000 f89a 	bl	1b920 <__adddf3>
   1b7ec:	ec41 0b10 	vmov	d0, r0, r1
   1b7f0:	e7b8      	b.n	1b764 <rint+0x8c>
   1b7f2:	bf00      	nop
   1b7f4:	000fffff 	.word	0x000fffff
   1b7f8:	00024e28 	.word	0x00024e28

0001b7fc <fabsf>:
   1b7fc:	ee10 3a10 	vmov	r3, s0
   1b800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b804:	ee00 3a10 	vmov	s0, r3
   1b808:	4770      	bx	lr
   1b80a:	bf00      	nop

0001b80c <finitef>:
   1b80c:	ee10 3a10 	vmov	r3, s0
   1b810:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b814:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b818:	bfac      	ite	ge
   1b81a:	2000      	movge	r0, #0
   1b81c:	2001      	movlt	r0, #1
   1b81e:	4770      	bx	lr

0001b820 <nanf>:
   1b820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b828 <nanf+0x8>
   1b824:	4770      	bx	lr
   1b826:	bf00      	nop
   1b828:	7fc00000 	.word	0x7fc00000

0001b82c <scalbnf>:
   1b82c:	b508      	push	{r3, lr}
   1b82e:	ee10 3a10 	vmov	r3, s0
   1b832:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b836:	ed2d 8b02 	vpush	{d8}
   1b83a:	d011      	beq.n	1b860 <scalbnf+0x34>
   1b83c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b840:	d211      	bcs.n	1b866 <scalbnf+0x3a>
   1b842:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b846:	d313      	bcc.n	1b870 <scalbnf+0x44>
   1b848:	0dd2      	lsrs	r2, r2, #23
   1b84a:	4402      	add	r2, r0
   1b84c:	2afe      	cmp	r2, #254	; 0xfe
   1b84e:	dc2e      	bgt.n	1b8ae <scalbnf+0x82>
   1b850:	2a00      	cmp	r2, #0
   1b852:	dd1a      	ble.n	1b88a <scalbnf+0x5e>
   1b854:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b858:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b85c:	ee00 3a10 	vmov	s0, r3
   1b860:	ecbd 8b02 	vpop	{d8}
   1b864:	bd08      	pop	{r3, pc}
   1b866:	ecbd 8b02 	vpop	{d8}
   1b86a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b86e:	bd08      	pop	{r3, pc}
   1b870:	4b1d      	ldr	r3, [pc, #116]	; (1b8e8 <scalbnf+0xbc>)
   1b872:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b8ec <scalbnf+0xc0>
   1b876:	4298      	cmp	r0, r3
   1b878:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b87c:	db22      	blt.n	1b8c4 <scalbnf+0x98>
   1b87e:	ee10 3a10 	vmov	r3, s0
   1b882:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b886:	3a19      	subs	r2, #25
   1b888:	e7df      	b.n	1b84a <scalbnf+0x1e>
   1b88a:	f112 0f16 	cmn.w	r2, #22
   1b88e:	da1e      	bge.n	1b8ce <scalbnf+0xa2>
   1b890:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b894:	4298      	cmp	r0, r3
   1b896:	dc0a      	bgt.n	1b8ae <scalbnf+0x82>
   1b898:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b8f0 <scalbnf+0xc4>
   1b89c:	eef0 0a40 	vmov.f32	s1, s0
   1b8a0:	eeb0 0a48 	vmov.f32	s0, s16
   1b8a4:	f000 f82a 	bl	1b8fc <copysignf>
   1b8a8:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b8ac:	e7d8      	b.n	1b860 <scalbnf+0x34>
   1b8ae:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b8f4 <scalbnf+0xc8>
   1b8b2:	eef0 0a40 	vmov.f32	s1, s0
   1b8b6:	eeb0 0a48 	vmov.f32	s0, s16
   1b8ba:	f000 f81f 	bl	1b8fc <copysignf>
   1b8be:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b8c2:	e7cd      	b.n	1b860 <scalbnf+0x34>
   1b8c4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b8f0 <scalbnf+0xc4>
   1b8c8:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b8cc:	e7c8      	b.n	1b860 <scalbnf+0x34>
   1b8ce:	3219      	adds	r2, #25
   1b8d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b8d4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b8d8:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b8f8 <scalbnf+0xcc>
   1b8dc:	ee00 3a10 	vmov	s0, r3
   1b8e0:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b8e4:	e7bc      	b.n	1b860 <scalbnf+0x34>
   1b8e6:	bf00      	nop
   1b8e8:	ffff3cb0 	.word	0xffff3cb0
   1b8ec:	4c000000 	.word	0x4c000000
   1b8f0:	0da24260 	.word	0x0da24260
   1b8f4:	7149f2ca 	.word	0x7149f2ca
   1b8f8:	33000000 	.word	0x33000000

0001b8fc <copysignf>:
   1b8fc:	ee10 3a10 	vmov	r3, s0
   1b900:	ee10 2a90 	vmov	r2, s1
   1b904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b908:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b90c:	4313      	orrs	r3, r2
   1b90e:	ee00 3a10 	vmov	s0, r3
   1b912:	4770      	bx	lr

0001b914 <__aeabi_drsub>:
   1b914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b918:	e002      	b.n	1b920 <__adddf3>
   1b91a:	bf00      	nop

0001b91c <__aeabi_dsub>:
   1b91c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b920 <__adddf3>:
   1b920:	b530      	push	{r4, r5, lr}
   1b922:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b926:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b92a:	ea94 0f05 	teq	r4, r5
   1b92e:	bf08      	it	eq
   1b930:	ea90 0f02 	teqeq	r0, r2
   1b934:	bf1f      	itttt	ne
   1b936:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b93a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b93e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b942:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b946:	f000 80e2 	beq.w	1bb0e <__adddf3+0x1ee>
   1b94a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b94e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b952:	bfb8      	it	lt
   1b954:	426d      	neglt	r5, r5
   1b956:	dd0c      	ble.n	1b972 <__adddf3+0x52>
   1b958:	442c      	add	r4, r5
   1b95a:	ea80 0202 	eor.w	r2, r0, r2
   1b95e:	ea81 0303 	eor.w	r3, r1, r3
   1b962:	ea82 0000 	eor.w	r0, r2, r0
   1b966:	ea83 0101 	eor.w	r1, r3, r1
   1b96a:	ea80 0202 	eor.w	r2, r0, r2
   1b96e:	ea81 0303 	eor.w	r3, r1, r3
   1b972:	2d36      	cmp	r5, #54	; 0x36
   1b974:	bf88      	it	hi
   1b976:	bd30      	pophi	{r4, r5, pc}
   1b978:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b97c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b980:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b984:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b988:	d002      	beq.n	1b990 <__adddf3+0x70>
   1b98a:	4240      	negs	r0, r0
   1b98c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b990:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b994:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b998:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b99c:	d002      	beq.n	1b9a4 <__adddf3+0x84>
   1b99e:	4252      	negs	r2, r2
   1b9a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b9a4:	ea94 0f05 	teq	r4, r5
   1b9a8:	f000 80a7 	beq.w	1bafa <__adddf3+0x1da>
   1b9ac:	f1a4 0401 	sub.w	r4, r4, #1
   1b9b0:	f1d5 0e20 	rsbs	lr, r5, #32
   1b9b4:	db0d      	blt.n	1b9d2 <__adddf3+0xb2>
   1b9b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b9ba:	fa22 f205 	lsr.w	r2, r2, r5
   1b9be:	1880      	adds	r0, r0, r2
   1b9c0:	f141 0100 	adc.w	r1, r1, #0
   1b9c4:	fa03 f20e 	lsl.w	r2, r3, lr
   1b9c8:	1880      	adds	r0, r0, r2
   1b9ca:	fa43 f305 	asr.w	r3, r3, r5
   1b9ce:	4159      	adcs	r1, r3
   1b9d0:	e00e      	b.n	1b9f0 <__adddf3+0xd0>
   1b9d2:	f1a5 0520 	sub.w	r5, r5, #32
   1b9d6:	f10e 0e20 	add.w	lr, lr, #32
   1b9da:	2a01      	cmp	r2, #1
   1b9dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b9e0:	bf28      	it	cs
   1b9e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b9e6:	fa43 f305 	asr.w	r3, r3, r5
   1b9ea:	18c0      	adds	r0, r0, r3
   1b9ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b9f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b9f4:	d507      	bpl.n	1ba06 <__adddf3+0xe6>
   1b9f6:	f04f 0e00 	mov.w	lr, #0
   1b9fa:	f1dc 0c00 	rsbs	ip, ip, #0
   1b9fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   1ba02:	eb6e 0101 	sbc.w	r1, lr, r1
   1ba06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1ba0a:	d31b      	bcc.n	1ba44 <__adddf3+0x124>
   1ba0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1ba10:	d30c      	bcc.n	1ba2c <__adddf3+0x10c>
   1ba12:	0849      	lsrs	r1, r1, #1
   1ba14:	ea5f 0030 	movs.w	r0, r0, rrx
   1ba18:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1ba1c:	f104 0401 	add.w	r4, r4, #1
   1ba20:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1ba24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1ba28:	f080 809a 	bcs.w	1bb60 <__adddf3+0x240>
   1ba2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ba30:	bf08      	it	eq
   1ba32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ba36:	f150 0000 	adcs.w	r0, r0, #0
   1ba3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ba3e:	ea41 0105 	orr.w	r1, r1, r5
   1ba42:	bd30      	pop	{r4, r5, pc}
   1ba44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1ba48:	4140      	adcs	r0, r0
   1ba4a:	eb41 0101 	adc.w	r1, r1, r1
   1ba4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ba52:	f1a4 0401 	sub.w	r4, r4, #1
   1ba56:	d1e9      	bne.n	1ba2c <__adddf3+0x10c>
   1ba58:	f091 0f00 	teq	r1, #0
   1ba5c:	bf04      	itt	eq
   1ba5e:	4601      	moveq	r1, r0
   1ba60:	2000      	moveq	r0, #0
   1ba62:	fab1 f381 	clz	r3, r1
   1ba66:	bf08      	it	eq
   1ba68:	3320      	addeq	r3, #32
   1ba6a:	f1a3 030b 	sub.w	r3, r3, #11
   1ba6e:	f1b3 0220 	subs.w	r2, r3, #32
   1ba72:	da0c      	bge.n	1ba8e <__adddf3+0x16e>
   1ba74:	320c      	adds	r2, #12
   1ba76:	dd08      	ble.n	1ba8a <__adddf3+0x16a>
   1ba78:	f102 0c14 	add.w	ip, r2, #20
   1ba7c:	f1c2 020c 	rsb	r2, r2, #12
   1ba80:	fa01 f00c 	lsl.w	r0, r1, ip
   1ba84:	fa21 f102 	lsr.w	r1, r1, r2
   1ba88:	e00c      	b.n	1baa4 <__adddf3+0x184>
   1ba8a:	f102 0214 	add.w	r2, r2, #20
   1ba8e:	bfd8      	it	le
   1ba90:	f1c2 0c20 	rsble	ip, r2, #32
   1ba94:	fa01 f102 	lsl.w	r1, r1, r2
   1ba98:	fa20 fc0c 	lsr.w	ip, r0, ip
   1ba9c:	bfdc      	itt	le
   1ba9e:	ea41 010c 	orrle.w	r1, r1, ip
   1baa2:	4090      	lslle	r0, r2
   1baa4:	1ae4      	subs	r4, r4, r3
   1baa6:	bfa2      	ittt	ge
   1baa8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1baac:	4329      	orrge	r1, r5
   1baae:	bd30      	popge	{r4, r5, pc}
   1bab0:	ea6f 0404 	mvn.w	r4, r4
   1bab4:	3c1f      	subs	r4, #31
   1bab6:	da1c      	bge.n	1baf2 <__adddf3+0x1d2>
   1bab8:	340c      	adds	r4, #12
   1baba:	dc0e      	bgt.n	1bada <__adddf3+0x1ba>
   1babc:	f104 0414 	add.w	r4, r4, #20
   1bac0:	f1c4 0220 	rsb	r2, r4, #32
   1bac4:	fa20 f004 	lsr.w	r0, r0, r4
   1bac8:	fa01 f302 	lsl.w	r3, r1, r2
   1bacc:	ea40 0003 	orr.w	r0, r0, r3
   1bad0:	fa21 f304 	lsr.w	r3, r1, r4
   1bad4:	ea45 0103 	orr.w	r1, r5, r3
   1bad8:	bd30      	pop	{r4, r5, pc}
   1bada:	f1c4 040c 	rsb	r4, r4, #12
   1bade:	f1c4 0220 	rsb	r2, r4, #32
   1bae2:	fa20 f002 	lsr.w	r0, r0, r2
   1bae6:	fa01 f304 	lsl.w	r3, r1, r4
   1baea:	ea40 0003 	orr.w	r0, r0, r3
   1baee:	4629      	mov	r1, r5
   1baf0:	bd30      	pop	{r4, r5, pc}
   1baf2:	fa21 f004 	lsr.w	r0, r1, r4
   1baf6:	4629      	mov	r1, r5
   1baf8:	bd30      	pop	{r4, r5, pc}
   1bafa:	f094 0f00 	teq	r4, #0
   1bafe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1bb02:	bf06      	itte	eq
   1bb04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1bb08:	3401      	addeq	r4, #1
   1bb0a:	3d01      	subne	r5, #1
   1bb0c:	e74e      	b.n	1b9ac <__adddf3+0x8c>
   1bb0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1bb12:	bf18      	it	ne
   1bb14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1bb18:	d029      	beq.n	1bb6e <__adddf3+0x24e>
   1bb1a:	ea94 0f05 	teq	r4, r5
   1bb1e:	bf08      	it	eq
   1bb20:	ea90 0f02 	teqeq	r0, r2
   1bb24:	d005      	beq.n	1bb32 <__adddf3+0x212>
   1bb26:	ea54 0c00 	orrs.w	ip, r4, r0
   1bb2a:	bf04      	itt	eq
   1bb2c:	4619      	moveq	r1, r3
   1bb2e:	4610      	moveq	r0, r2
   1bb30:	bd30      	pop	{r4, r5, pc}
   1bb32:	ea91 0f03 	teq	r1, r3
   1bb36:	bf1e      	ittt	ne
   1bb38:	2100      	movne	r1, #0
   1bb3a:	2000      	movne	r0, #0
   1bb3c:	bd30      	popne	{r4, r5, pc}
   1bb3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1bb42:	d105      	bne.n	1bb50 <__adddf3+0x230>
   1bb44:	0040      	lsls	r0, r0, #1
   1bb46:	4149      	adcs	r1, r1
   1bb48:	bf28      	it	cs
   1bb4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1bb4e:	bd30      	pop	{r4, r5, pc}
   1bb50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1bb54:	bf3c      	itt	cc
   1bb56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1bb5a:	bd30      	popcc	{r4, r5, pc}
   1bb5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bb60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1bb64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bb68:	f04f 0000 	mov.w	r0, #0
   1bb6c:	bd30      	pop	{r4, r5, pc}
   1bb6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1bb72:	bf1a      	itte	ne
   1bb74:	4619      	movne	r1, r3
   1bb76:	4610      	movne	r0, r2
   1bb78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1bb7c:	bf1c      	itt	ne
   1bb7e:	460b      	movne	r3, r1
   1bb80:	4602      	movne	r2, r0
   1bb82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bb86:	bf06      	itte	eq
   1bb88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1bb8c:	ea91 0f03 	teqeq	r1, r3
   1bb90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1bb94:	bd30      	pop	{r4, r5, pc}
   1bb96:	bf00      	nop

0001bb98 <__aeabi_ui2d>:
   1bb98:	f090 0f00 	teq	r0, #0
   1bb9c:	bf04      	itt	eq
   1bb9e:	2100      	moveq	r1, #0
   1bba0:	4770      	bxeq	lr
   1bba2:	b530      	push	{r4, r5, lr}
   1bba4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bba8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bbac:	f04f 0500 	mov.w	r5, #0
   1bbb0:	f04f 0100 	mov.w	r1, #0
   1bbb4:	e750      	b.n	1ba58 <__adddf3+0x138>
   1bbb6:	bf00      	nop

0001bbb8 <__aeabi_i2d>:
   1bbb8:	f090 0f00 	teq	r0, #0
   1bbbc:	bf04      	itt	eq
   1bbbe:	2100      	moveq	r1, #0
   1bbc0:	4770      	bxeq	lr
   1bbc2:	b530      	push	{r4, r5, lr}
   1bbc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bbc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bbcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1bbd0:	bf48      	it	mi
   1bbd2:	4240      	negmi	r0, r0
   1bbd4:	f04f 0100 	mov.w	r1, #0
   1bbd8:	e73e      	b.n	1ba58 <__adddf3+0x138>
   1bbda:	bf00      	nop

0001bbdc <__aeabi_f2d>:
   1bbdc:	0042      	lsls	r2, r0, #1
   1bbde:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1bbe2:	ea4f 0131 	mov.w	r1, r1, rrx
   1bbe6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1bbea:	bf1f      	itttt	ne
   1bbec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1bbf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bbf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1bbf8:	4770      	bxne	lr
   1bbfa:	f092 0f00 	teq	r2, #0
   1bbfe:	bf14      	ite	ne
   1bc00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bc04:	4770      	bxeq	lr
   1bc06:	b530      	push	{r4, r5, lr}
   1bc08:	f44f 7460 	mov.w	r4, #896	; 0x380
   1bc0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bc10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bc14:	e720      	b.n	1ba58 <__adddf3+0x138>
   1bc16:	bf00      	nop

0001bc18 <__aeabi_ul2d>:
   1bc18:	ea50 0201 	orrs.w	r2, r0, r1
   1bc1c:	bf08      	it	eq
   1bc1e:	4770      	bxeq	lr
   1bc20:	b530      	push	{r4, r5, lr}
   1bc22:	f04f 0500 	mov.w	r5, #0
   1bc26:	e00a      	b.n	1bc3e <__aeabi_l2d+0x16>

0001bc28 <__aeabi_l2d>:
   1bc28:	ea50 0201 	orrs.w	r2, r0, r1
   1bc2c:	bf08      	it	eq
   1bc2e:	4770      	bxeq	lr
   1bc30:	b530      	push	{r4, r5, lr}
   1bc32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1bc36:	d502      	bpl.n	1bc3e <__aeabi_l2d+0x16>
   1bc38:	4240      	negs	r0, r0
   1bc3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bc3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bc42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bc46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1bc4a:	f43f aedc 	beq.w	1ba06 <__adddf3+0xe6>
   1bc4e:	f04f 0203 	mov.w	r2, #3
   1bc52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bc56:	bf18      	it	ne
   1bc58:	3203      	addne	r2, #3
   1bc5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bc5e:	bf18      	it	ne
   1bc60:	3203      	addne	r2, #3
   1bc62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1bc66:	f1c2 0320 	rsb	r3, r2, #32
   1bc6a:	fa00 fc03 	lsl.w	ip, r0, r3
   1bc6e:	fa20 f002 	lsr.w	r0, r0, r2
   1bc72:	fa01 fe03 	lsl.w	lr, r1, r3
   1bc76:	ea40 000e 	orr.w	r0, r0, lr
   1bc7a:	fa21 f102 	lsr.w	r1, r1, r2
   1bc7e:	4414      	add	r4, r2
   1bc80:	e6c1      	b.n	1ba06 <__adddf3+0xe6>
   1bc82:	bf00      	nop

0001bc84 <__aeabi_dmul>:
   1bc84:	b570      	push	{r4, r5, r6, lr}
   1bc86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bc8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bc8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bc92:	bf1d      	ittte	ne
   1bc94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bc98:	ea94 0f0c 	teqne	r4, ip
   1bc9c:	ea95 0f0c 	teqne	r5, ip
   1bca0:	f000 f8de 	bleq	1be60 <__aeabi_dmul+0x1dc>
   1bca4:	442c      	add	r4, r5
   1bca6:	ea81 0603 	eor.w	r6, r1, r3
   1bcaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1bcae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1bcb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1bcb6:	bf18      	it	ne
   1bcb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1bcbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bcc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bcc4:	d038      	beq.n	1bd38 <__aeabi_dmul+0xb4>
   1bcc6:	fba0 ce02 	umull	ip, lr, r0, r2
   1bcca:	f04f 0500 	mov.w	r5, #0
   1bcce:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bcd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bcd6:	fbe0 e503 	umlal	lr, r5, r0, r3
   1bcda:	f04f 0600 	mov.w	r6, #0
   1bcde:	fbe1 5603 	umlal	r5, r6, r1, r3
   1bce2:	f09c 0f00 	teq	ip, #0
   1bce6:	bf18      	it	ne
   1bce8:	f04e 0e01 	orrne.w	lr, lr, #1
   1bcec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bcf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bcf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1bcf8:	d204      	bcs.n	1bd04 <__aeabi_dmul+0x80>
   1bcfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1bcfe:	416d      	adcs	r5, r5
   1bd00:	eb46 0606 	adc.w	r6, r6, r6
   1bd04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1bd08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bd0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bd10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1bd14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bd18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bd1c:	bf88      	it	hi
   1bd1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bd22:	d81e      	bhi.n	1bd62 <__aeabi_dmul+0xde>
   1bd24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bd28:	bf08      	it	eq
   1bd2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bd2e:	f150 0000 	adcs.w	r0, r0, #0
   1bd32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bd36:	bd70      	pop	{r4, r5, r6, pc}
   1bd38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bd3c:	ea46 0101 	orr.w	r1, r6, r1
   1bd40:	ea40 0002 	orr.w	r0, r0, r2
   1bd44:	ea81 0103 	eor.w	r1, r1, r3
   1bd48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bd4c:	bfc2      	ittt	gt
   1bd4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bd52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bd56:	bd70      	popgt	{r4, r5, r6, pc}
   1bd58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bd5c:	f04f 0e00 	mov.w	lr, #0
   1bd60:	3c01      	subs	r4, #1
   1bd62:	f300 80ab 	bgt.w	1bebc <__aeabi_dmul+0x238>
   1bd66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bd6a:	bfde      	ittt	le
   1bd6c:	2000      	movle	r0, #0
   1bd6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bd72:	bd70      	pople	{r4, r5, r6, pc}
   1bd74:	f1c4 0400 	rsb	r4, r4, #0
   1bd78:	3c20      	subs	r4, #32
   1bd7a:	da35      	bge.n	1bde8 <__aeabi_dmul+0x164>
   1bd7c:	340c      	adds	r4, #12
   1bd7e:	dc1b      	bgt.n	1bdb8 <__aeabi_dmul+0x134>
   1bd80:	f104 0414 	add.w	r4, r4, #20
   1bd84:	f1c4 0520 	rsb	r5, r4, #32
   1bd88:	fa00 f305 	lsl.w	r3, r0, r5
   1bd8c:	fa20 f004 	lsr.w	r0, r0, r4
   1bd90:	fa01 f205 	lsl.w	r2, r1, r5
   1bd94:	ea40 0002 	orr.w	r0, r0, r2
   1bd98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bd9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bda0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bda4:	fa21 f604 	lsr.w	r6, r1, r4
   1bda8:	eb42 0106 	adc.w	r1, r2, r6
   1bdac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bdb0:	bf08      	it	eq
   1bdb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bdb6:	bd70      	pop	{r4, r5, r6, pc}
   1bdb8:	f1c4 040c 	rsb	r4, r4, #12
   1bdbc:	f1c4 0520 	rsb	r5, r4, #32
   1bdc0:	fa00 f304 	lsl.w	r3, r0, r4
   1bdc4:	fa20 f005 	lsr.w	r0, r0, r5
   1bdc8:	fa01 f204 	lsl.w	r2, r1, r4
   1bdcc:	ea40 0002 	orr.w	r0, r0, r2
   1bdd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bdd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bdd8:	f141 0100 	adc.w	r1, r1, #0
   1bddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bde0:	bf08      	it	eq
   1bde2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bde6:	bd70      	pop	{r4, r5, r6, pc}
   1bde8:	f1c4 0520 	rsb	r5, r4, #32
   1bdec:	fa00 f205 	lsl.w	r2, r0, r5
   1bdf0:	ea4e 0e02 	orr.w	lr, lr, r2
   1bdf4:	fa20 f304 	lsr.w	r3, r0, r4
   1bdf8:	fa01 f205 	lsl.w	r2, r1, r5
   1bdfc:	ea43 0302 	orr.w	r3, r3, r2
   1be00:	fa21 f004 	lsr.w	r0, r1, r4
   1be04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1be08:	fa21 f204 	lsr.w	r2, r1, r4
   1be0c:	ea20 0002 	bic.w	r0, r0, r2
   1be10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1be14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1be18:	bf08      	it	eq
   1be1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1be1e:	bd70      	pop	{r4, r5, r6, pc}
   1be20:	f094 0f00 	teq	r4, #0
   1be24:	d10f      	bne.n	1be46 <__aeabi_dmul+0x1c2>
   1be26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1be2a:	0040      	lsls	r0, r0, #1
   1be2c:	eb41 0101 	adc.w	r1, r1, r1
   1be30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1be34:	bf08      	it	eq
   1be36:	3c01      	subeq	r4, #1
   1be38:	d0f7      	beq.n	1be2a <__aeabi_dmul+0x1a6>
   1be3a:	ea41 0106 	orr.w	r1, r1, r6
   1be3e:	f095 0f00 	teq	r5, #0
   1be42:	bf18      	it	ne
   1be44:	4770      	bxne	lr
   1be46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1be4a:	0052      	lsls	r2, r2, #1
   1be4c:	eb43 0303 	adc.w	r3, r3, r3
   1be50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1be54:	bf08      	it	eq
   1be56:	3d01      	subeq	r5, #1
   1be58:	d0f7      	beq.n	1be4a <__aeabi_dmul+0x1c6>
   1be5a:	ea43 0306 	orr.w	r3, r3, r6
   1be5e:	4770      	bx	lr
   1be60:	ea94 0f0c 	teq	r4, ip
   1be64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1be68:	bf18      	it	ne
   1be6a:	ea95 0f0c 	teqne	r5, ip
   1be6e:	d00c      	beq.n	1be8a <__aeabi_dmul+0x206>
   1be70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1be74:	bf18      	it	ne
   1be76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1be7a:	d1d1      	bne.n	1be20 <__aeabi_dmul+0x19c>
   1be7c:	ea81 0103 	eor.w	r1, r1, r3
   1be80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1be84:	f04f 0000 	mov.w	r0, #0
   1be88:	bd70      	pop	{r4, r5, r6, pc}
   1be8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1be8e:	bf06      	itte	eq
   1be90:	4610      	moveq	r0, r2
   1be92:	4619      	moveq	r1, r3
   1be94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1be98:	d019      	beq.n	1bece <__aeabi_dmul+0x24a>
   1be9a:	ea94 0f0c 	teq	r4, ip
   1be9e:	d102      	bne.n	1bea6 <__aeabi_dmul+0x222>
   1bea0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bea4:	d113      	bne.n	1bece <__aeabi_dmul+0x24a>
   1bea6:	ea95 0f0c 	teq	r5, ip
   1beaa:	d105      	bne.n	1beb8 <__aeabi_dmul+0x234>
   1beac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1beb0:	bf1c      	itt	ne
   1beb2:	4610      	movne	r0, r2
   1beb4:	4619      	movne	r1, r3
   1beb6:	d10a      	bne.n	1bece <__aeabi_dmul+0x24a>
   1beb8:	ea81 0103 	eor.w	r1, r1, r3
   1bebc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bec0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bec4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bec8:	f04f 0000 	mov.w	r0, #0
   1becc:	bd70      	pop	{r4, r5, r6, pc}
   1bece:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bed2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bed6:	bd70      	pop	{r4, r5, r6, pc}

0001bed8 <__aeabi_ddiv>:
   1bed8:	b570      	push	{r4, r5, r6, lr}
   1beda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bede:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bee2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bee6:	bf1d      	ittte	ne
   1bee8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1beec:	ea94 0f0c 	teqne	r4, ip
   1bef0:	ea95 0f0c 	teqne	r5, ip
   1bef4:	f000 f8a7 	bleq	1c046 <__aeabi_ddiv+0x16e>
   1bef8:	eba4 0405 	sub.w	r4, r4, r5
   1befc:	ea81 0e03 	eor.w	lr, r1, r3
   1bf00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bf04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bf08:	f000 8088 	beq.w	1c01c <__aeabi_ddiv+0x144>
   1bf0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bf10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1bf14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1bf18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bf1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bf20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bf24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bf28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1bf2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bf30:	429d      	cmp	r5, r3
   1bf32:	bf08      	it	eq
   1bf34:	4296      	cmpeq	r6, r2
   1bf36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1bf3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bf3e:	d202      	bcs.n	1bf46 <__aeabi_ddiv+0x6e>
   1bf40:	085b      	lsrs	r3, r3, #1
   1bf42:	ea4f 0232 	mov.w	r2, r2, rrx
   1bf46:	1ab6      	subs	r6, r6, r2
   1bf48:	eb65 0503 	sbc.w	r5, r5, r3
   1bf4c:	085b      	lsrs	r3, r3, #1
   1bf4e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bf52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bf56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bf5a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bf5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bf62:	bf22      	ittt	cs
   1bf64:	1ab6      	subcs	r6, r6, r2
   1bf66:	4675      	movcs	r5, lr
   1bf68:	ea40 000c 	orrcs.w	r0, r0, ip
   1bf6c:	085b      	lsrs	r3, r3, #1
   1bf6e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bf72:	ebb6 0e02 	subs.w	lr, r6, r2
   1bf76:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bf7a:	bf22      	ittt	cs
   1bf7c:	1ab6      	subcs	r6, r6, r2
   1bf7e:	4675      	movcs	r5, lr
   1bf80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bf84:	085b      	lsrs	r3, r3, #1
   1bf86:	ea4f 0232 	mov.w	r2, r2, rrx
   1bf8a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bf8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bf92:	bf22      	ittt	cs
   1bf94:	1ab6      	subcs	r6, r6, r2
   1bf96:	4675      	movcs	r5, lr
   1bf98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bf9c:	085b      	lsrs	r3, r3, #1
   1bf9e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bfa2:	ebb6 0e02 	subs.w	lr, r6, r2
   1bfa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bfaa:	bf22      	ittt	cs
   1bfac:	1ab6      	subcs	r6, r6, r2
   1bfae:	4675      	movcs	r5, lr
   1bfb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bfb4:	ea55 0e06 	orrs.w	lr, r5, r6
   1bfb8:	d018      	beq.n	1bfec <__aeabi_ddiv+0x114>
   1bfba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bfbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bfc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bfc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bfca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bfce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bfd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bfd6:	d1c0      	bne.n	1bf5a <__aeabi_ddiv+0x82>
   1bfd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bfdc:	d10b      	bne.n	1bff6 <__aeabi_ddiv+0x11e>
   1bfde:	ea41 0100 	orr.w	r1, r1, r0
   1bfe2:	f04f 0000 	mov.w	r0, #0
   1bfe6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bfea:	e7b6      	b.n	1bf5a <__aeabi_ddiv+0x82>
   1bfec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bff0:	bf04      	itt	eq
   1bff2:	4301      	orreq	r1, r0
   1bff4:	2000      	moveq	r0, #0
   1bff6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bffa:	bf88      	it	hi
   1bffc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c000:	f63f aeaf 	bhi.w	1bd62 <__aeabi_dmul+0xde>
   1c004:	ebb5 0c03 	subs.w	ip, r5, r3
   1c008:	bf04      	itt	eq
   1c00a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1c00e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c012:	f150 0000 	adcs.w	r0, r0, #0
   1c016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c01a:	bd70      	pop	{r4, r5, r6, pc}
   1c01c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1c020:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1c024:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1c028:	bfc2      	ittt	gt
   1c02a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c02e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c032:	bd70      	popgt	{r4, r5, r6, pc}
   1c034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c038:	f04f 0e00 	mov.w	lr, #0
   1c03c:	3c01      	subs	r4, #1
   1c03e:	e690      	b.n	1bd62 <__aeabi_dmul+0xde>
   1c040:	ea45 0e06 	orr.w	lr, r5, r6
   1c044:	e68d      	b.n	1bd62 <__aeabi_dmul+0xde>
   1c046:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c04a:	ea94 0f0c 	teq	r4, ip
   1c04e:	bf08      	it	eq
   1c050:	ea95 0f0c 	teqeq	r5, ip
   1c054:	f43f af3b 	beq.w	1bece <__aeabi_dmul+0x24a>
   1c058:	ea94 0f0c 	teq	r4, ip
   1c05c:	d10a      	bne.n	1c074 <__aeabi_ddiv+0x19c>
   1c05e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c062:	f47f af34 	bne.w	1bece <__aeabi_dmul+0x24a>
   1c066:	ea95 0f0c 	teq	r5, ip
   1c06a:	f47f af25 	bne.w	1beb8 <__aeabi_dmul+0x234>
   1c06e:	4610      	mov	r0, r2
   1c070:	4619      	mov	r1, r3
   1c072:	e72c      	b.n	1bece <__aeabi_dmul+0x24a>
   1c074:	ea95 0f0c 	teq	r5, ip
   1c078:	d106      	bne.n	1c088 <__aeabi_ddiv+0x1b0>
   1c07a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c07e:	f43f aefd 	beq.w	1be7c <__aeabi_dmul+0x1f8>
   1c082:	4610      	mov	r0, r2
   1c084:	4619      	mov	r1, r3
   1c086:	e722      	b.n	1bece <__aeabi_dmul+0x24a>
   1c088:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c08c:	bf18      	it	ne
   1c08e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c092:	f47f aec5 	bne.w	1be20 <__aeabi_dmul+0x19c>
   1c096:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1c09a:	f47f af0d 	bne.w	1beb8 <__aeabi_dmul+0x234>
   1c09e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1c0a2:	f47f aeeb 	bne.w	1be7c <__aeabi_dmul+0x1f8>
   1c0a6:	e712      	b.n	1bece <__aeabi_dmul+0x24a>

0001c0a8 <__gedf2>:
   1c0a8:	f04f 3cff 	mov.w	ip, #4294967295
   1c0ac:	e006      	b.n	1c0bc <__cmpdf2+0x4>
   1c0ae:	bf00      	nop

0001c0b0 <__ledf2>:
   1c0b0:	f04f 0c01 	mov.w	ip, #1
   1c0b4:	e002      	b.n	1c0bc <__cmpdf2+0x4>
   1c0b6:	bf00      	nop

0001c0b8 <__cmpdf2>:
   1c0b8:	f04f 0c01 	mov.w	ip, #1
   1c0bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c0c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c0c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c0c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c0cc:	bf18      	it	ne
   1c0ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1c0d2:	d01b      	beq.n	1c10c <__cmpdf2+0x54>
   1c0d4:	b001      	add	sp, #4
   1c0d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1c0da:	bf0c      	ite	eq
   1c0dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1c0e0:	ea91 0f03 	teqne	r1, r3
   1c0e4:	bf02      	ittt	eq
   1c0e6:	ea90 0f02 	teqeq	r0, r2
   1c0ea:	2000      	moveq	r0, #0
   1c0ec:	4770      	bxeq	lr
   1c0ee:	f110 0f00 	cmn.w	r0, #0
   1c0f2:	ea91 0f03 	teq	r1, r3
   1c0f6:	bf58      	it	pl
   1c0f8:	4299      	cmppl	r1, r3
   1c0fa:	bf08      	it	eq
   1c0fc:	4290      	cmpeq	r0, r2
   1c0fe:	bf2c      	ite	cs
   1c100:	17d8      	asrcs	r0, r3, #31
   1c102:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c106:	f040 0001 	orr.w	r0, r0, #1
   1c10a:	4770      	bx	lr
   1c10c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c110:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c114:	d102      	bne.n	1c11c <__cmpdf2+0x64>
   1c116:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c11a:	d107      	bne.n	1c12c <__cmpdf2+0x74>
   1c11c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c124:	d1d6      	bne.n	1c0d4 <__cmpdf2+0x1c>
   1c126:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c12a:	d0d3      	beq.n	1c0d4 <__cmpdf2+0x1c>
   1c12c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c130:	4770      	bx	lr
   1c132:	bf00      	nop

0001c134 <__aeabi_cdrcmple>:
   1c134:	4684      	mov	ip, r0
   1c136:	4610      	mov	r0, r2
   1c138:	4662      	mov	r2, ip
   1c13a:	468c      	mov	ip, r1
   1c13c:	4619      	mov	r1, r3
   1c13e:	4663      	mov	r3, ip
   1c140:	e000      	b.n	1c144 <__aeabi_cdcmpeq>
   1c142:	bf00      	nop

0001c144 <__aeabi_cdcmpeq>:
   1c144:	b501      	push	{r0, lr}
   1c146:	f7ff ffb7 	bl	1c0b8 <__cmpdf2>
   1c14a:	2800      	cmp	r0, #0
   1c14c:	bf48      	it	mi
   1c14e:	f110 0f00 	cmnmi.w	r0, #0
   1c152:	bd01      	pop	{r0, pc}

0001c154 <__aeabi_dcmpeq>:
   1c154:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c158:	f7ff fff4 	bl	1c144 <__aeabi_cdcmpeq>
   1c15c:	bf0c      	ite	eq
   1c15e:	2001      	moveq	r0, #1
   1c160:	2000      	movne	r0, #0
   1c162:	f85d fb08 	ldr.w	pc, [sp], #8
   1c166:	bf00      	nop

0001c168 <__aeabi_dcmplt>:
   1c168:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c16c:	f7ff ffea 	bl	1c144 <__aeabi_cdcmpeq>
   1c170:	bf34      	ite	cc
   1c172:	2001      	movcc	r0, #1
   1c174:	2000      	movcs	r0, #0
   1c176:	f85d fb08 	ldr.w	pc, [sp], #8
   1c17a:	bf00      	nop

0001c17c <__aeabi_dcmple>:
   1c17c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c180:	f7ff ffe0 	bl	1c144 <__aeabi_cdcmpeq>
   1c184:	bf94      	ite	ls
   1c186:	2001      	movls	r0, #1
   1c188:	2000      	movhi	r0, #0
   1c18a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c18e:	bf00      	nop

0001c190 <__aeabi_dcmpge>:
   1c190:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c194:	f7ff ffce 	bl	1c134 <__aeabi_cdrcmple>
   1c198:	bf94      	ite	ls
   1c19a:	2001      	movls	r0, #1
   1c19c:	2000      	movhi	r0, #0
   1c19e:	f85d fb08 	ldr.w	pc, [sp], #8
   1c1a2:	bf00      	nop

0001c1a4 <__aeabi_dcmpgt>:
   1c1a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c1a8:	f7ff ffc4 	bl	1c134 <__aeabi_cdrcmple>
   1c1ac:	bf34      	ite	cc
   1c1ae:	2001      	movcc	r0, #1
   1c1b0:	2000      	movcs	r0, #0
   1c1b2:	f85d fb08 	ldr.w	pc, [sp], #8
   1c1b6:	bf00      	nop

0001c1b8 <__aeabi_d2iz>:
   1c1b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c1bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c1c0:	d215      	bcs.n	1c1ee <__aeabi_d2iz+0x36>
   1c1c2:	d511      	bpl.n	1c1e8 <__aeabi_d2iz+0x30>
   1c1c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c1c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c1cc:	d912      	bls.n	1c1f4 <__aeabi_d2iz+0x3c>
   1c1ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c1d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c1d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c1da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c1de:	fa23 f002 	lsr.w	r0, r3, r2
   1c1e2:	bf18      	it	ne
   1c1e4:	4240      	negne	r0, r0
   1c1e6:	4770      	bx	lr
   1c1e8:	f04f 0000 	mov.w	r0, #0
   1c1ec:	4770      	bx	lr
   1c1ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c1f2:	d105      	bne.n	1c200 <__aeabi_d2iz+0x48>
   1c1f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c1f8:	bf08      	it	eq
   1c1fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c1fe:	4770      	bx	lr
   1c200:	f04f 0000 	mov.w	r0, #0
   1c204:	4770      	bx	lr
   1c206:	bf00      	nop

0001c208 <__aeabi_d2uiz>:
   1c208:	004a      	lsls	r2, r1, #1
   1c20a:	d211      	bcs.n	1c230 <__aeabi_d2uiz+0x28>
   1c20c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c210:	d211      	bcs.n	1c236 <__aeabi_d2uiz+0x2e>
   1c212:	d50d      	bpl.n	1c230 <__aeabi_d2uiz+0x28>
   1c214:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c218:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c21c:	d40e      	bmi.n	1c23c <__aeabi_d2uiz+0x34>
   1c21e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c226:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c22a:	fa23 f002 	lsr.w	r0, r3, r2
   1c22e:	4770      	bx	lr
   1c230:	f04f 0000 	mov.w	r0, #0
   1c234:	4770      	bx	lr
   1c236:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c23a:	d102      	bne.n	1c242 <__aeabi_d2uiz+0x3a>
   1c23c:	f04f 30ff 	mov.w	r0, #4294967295
   1c240:	4770      	bx	lr
   1c242:	f04f 0000 	mov.w	r0, #0
   1c246:	4770      	bx	lr

0001c248 <__aeabi_d2f>:
   1c248:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c24c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c250:	bf24      	itt	cs
   1c252:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c256:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c25a:	d90d      	bls.n	1c278 <__aeabi_d2f+0x30>
   1c25c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c260:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c264:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c268:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c26c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c270:	bf08      	it	eq
   1c272:	f020 0001 	biceq.w	r0, r0, #1
   1c276:	4770      	bx	lr
   1c278:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c27c:	d121      	bne.n	1c2c2 <__aeabi_d2f+0x7a>
   1c27e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c282:	bfbc      	itt	lt
   1c284:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c288:	4770      	bxlt	lr
   1c28a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c28e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c292:	f1c2 0218 	rsb	r2, r2, #24
   1c296:	f1c2 0c20 	rsb	ip, r2, #32
   1c29a:	fa10 f30c 	lsls.w	r3, r0, ip
   1c29e:	fa20 f002 	lsr.w	r0, r0, r2
   1c2a2:	bf18      	it	ne
   1c2a4:	f040 0001 	orrne.w	r0, r0, #1
   1c2a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c2ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c2b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c2b4:	ea40 000c 	orr.w	r0, r0, ip
   1c2b8:	fa23 f302 	lsr.w	r3, r3, r2
   1c2bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c2c0:	e7cc      	b.n	1c25c <__aeabi_d2f+0x14>
   1c2c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c2c6:	d107      	bne.n	1c2d8 <__aeabi_d2f+0x90>
   1c2c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c2cc:	bf1e      	ittt	ne
   1c2ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c2d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c2d6:	4770      	bxne	lr
   1c2d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c2dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c2e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c2e4:	4770      	bx	lr
   1c2e6:	bf00      	nop

0001c2e8 <__aeabi_frsub>:
   1c2e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c2ec:	e002      	b.n	1c2f4 <__addsf3>
   1c2ee:	bf00      	nop

0001c2f0 <__aeabi_fsub>:
   1c2f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c2f4 <__addsf3>:
   1c2f4:	0042      	lsls	r2, r0, #1
   1c2f6:	bf1f      	itttt	ne
   1c2f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c2fc:	ea92 0f03 	teqne	r2, r3
   1c300:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c304:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c308:	d06a      	beq.n	1c3e0 <__addsf3+0xec>
   1c30a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c30e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c312:	bfc1      	itttt	gt
   1c314:	18d2      	addgt	r2, r2, r3
   1c316:	4041      	eorgt	r1, r0
   1c318:	4048      	eorgt	r0, r1
   1c31a:	4041      	eorgt	r1, r0
   1c31c:	bfb8      	it	lt
   1c31e:	425b      	neglt	r3, r3
   1c320:	2b19      	cmp	r3, #25
   1c322:	bf88      	it	hi
   1c324:	4770      	bxhi	lr
   1c326:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c32a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c32e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c332:	bf18      	it	ne
   1c334:	4240      	negne	r0, r0
   1c336:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c33a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c33e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c342:	bf18      	it	ne
   1c344:	4249      	negne	r1, r1
   1c346:	ea92 0f03 	teq	r2, r3
   1c34a:	d03f      	beq.n	1c3cc <__addsf3+0xd8>
   1c34c:	f1a2 0201 	sub.w	r2, r2, #1
   1c350:	fa41 fc03 	asr.w	ip, r1, r3
   1c354:	eb10 000c 	adds.w	r0, r0, ip
   1c358:	f1c3 0320 	rsb	r3, r3, #32
   1c35c:	fa01 f103 	lsl.w	r1, r1, r3
   1c360:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c364:	d502      	bpl.n	1c36c <__addsf3+0x78>
   1c366:	4249      	negs	r1, r1
   1c368:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c36c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c370:	d313      	bcc.n	1c39a <__addsf3+0xa6>
   1c372:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c376:	d306      	bcc.n	1c386 <__addsf3+0x92>
   1c378:	0840      	lsrs	r0, r0, #1
   1c37a:	ea4f 0131 	mov.w	r1, r1, rrx
   1c37e:	f102 0201 	add.w	r2, r2, #1
   1c382:	2afe      	cmp	r2, #254	; 0xfe
   1c384:	d251      	bcs.n	1c42a <__addsf3+0x136>
   1c386:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c38a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c38e:	bf08      	it	eq
   1c390:	f020 0001 	biceq.w	r0, r0, #1
   1c394:	ea40 0003 	orr.w	r0, r0, r3
   1c398:	4770      	bx	lr
   1c39a:	0049      	lsls	r1, r1, #1
   1c39c:	eb40 0000 	adc.w	r0, r0, r0
   1c3a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c3a4:	f1a2 0201 	sub.w	r2, r2, #1
   1c3a8:	d1ed      	bne.n	1c386 <__addsf3+0x92>
   1c3aa:	fab0 fc80 	clz	ip, r0
   1c3ae:	f1ac 0c08 	sub.w	ip, ip, #8
   1c3b2:	ebb2 020c 	subs.w	r2, r2, ip
   1c3b6:	fa00 f00c 	lsl.w	r0, r0, ip
   1c3ba:	bfaa      	itet	ge
   1c3bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c3c0:	4252      	neglt	r2, r2
   1c3c2:	4318      	orrge	r0, r3
   1c3c4:	bfbc      	itt	lt
   1c3c6:	40d0      	lsrlt	r0, r2
   1c3c8:	4318      	orrlt	r0, r3
   1c3ca:	4770      	bx	lr
   1c3cc:	f092 0f00 	teq	r2, #0
   1c3d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c3d4:	bf06      	itte	eq
   1c3d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c3da:	3201      	addeq	r2, #1
   1c3dc:	3b01      	subne	r3, #1
   1c3de:	e7b5      	b.n	1c34c <__addsf3+0x58>
   1c3e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c3e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c3e8:	bf18      	it	ne
   1c3ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c3ee:	d021      	beq.n	1c434 <__addsf3+0x140>
   1c3f0:	ea92 0f03 	teq	r2, r3
   1c3f4:	d004      	beq.n	1c400 <__addsf3+0x10c>
   1c3f6:	f092 0f00 	teq	r2, #0
   1c3fa:	bf08      	it	eq
   1c3fc:	4608      	moveq	r0, r1
   1c3fe:	4770      	bx	lr
   1c400:	ea90 0f01 	teq	r0, r1
   1c404:	bf1c      	itt	ne
   1c406:	2000      	movne	r0, #0
   1c408:	4770      	bxne	lr
   1c40a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c40e:	d104      	bne.n	1c41a <__addsf3+0x126>
   1c410:	0040      	lsls	r0, r0, #1
   1c412:	bf28      	it	cs
   1c414:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c418:	4770      	bx	lr
   1c41a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c41e:	bf3c      	itt	cc
   1c420:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c424:	4770      	bxcc	lr
   1c426:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c42a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c42e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c432:	4770      	bx	lr
   1c434:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c438:	bf16      	itet	ne
   1c43a:	4608      	movne	r0, r1
   1c43c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c440:	4601      	movne	r1, r0
   1c442:	0242      	lsls	r2, r0, #9
   1c444:	bf06      	itte	eq
   1c446:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c44a:	ea90 0f01 	teqeq	r0, r1
   1c44e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c452:	4770      	bx	lr

0001c454 <__aeabi_ui2f>:
   1c454:	f04f 0300 	mov.w	r3, #0
   1c458:	e004      	b.n	1c464 <__aeabi_i2f+0x8>
   1c45a:	bf00      	nop

0001c45c <__aeabi_i2f>:
   1c45c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c460:	bf48      	it	mi
   1c462:	4240      	negmi	r0, r0
   1c464:	ea5f 0c00 	movs.w	ip, r0
   1c468:	bf08      	it	eq
   1c46a:	4770      	bxeq	lr
   1c46c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c470:	4601      	mov	r1, r0
   1c472:	f04f 0000 	mov.w	r0, #0
   1c476:	e01c      	b.n	1c4b2 <__aeabi_l2f+0x2a>

0001c478 <__aeabi_ul2f>:
   1c478:	ea50 0201 	orrs.w	r2, r0, r1
   1c47c:	bf08      	it	eq
   1c47e:	4770      	bxeq	lr
   1c480:	f04f 0300 	mov.w	r3, #0
   1c484:	e00a      	b.n	1c49c <__aeabi_l2f+0x14>
   1c486:	bf00      	nop

0001c488 <__aeabi_l2f>:
   1c488:	ea50 0201 	orrs.w	r2, r0, r1
   1c48c:	bf08      	it	eq
   1c48e:	4770      	bxeq	lr
   1c490:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c494:	d502      	bpl.n	1c49c <__aeabi_l2f+0x14>
   1c496:	4240      	negs	r0, r0
   1c498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c49c:	ea5f 0c01 	movs.w	ip, r1
   1c4a0:	bf02      	ittt	eq
   1c4a2:	4684      	moveq	ip, r0
   1c4a4:	4601      	moveq	r1, r0
   1c4a6:	2000      	moveq	r0, #0
   1c4a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c4ac:	bf08      	it	eq
   1c4ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c4b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c4b6:	fabc f28c 	clz	r2, ip
   1c4ba:	3a08      	subs	r2, #8
   1c4bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c4c0:	db10      	blt.n	1c4e4 <__aeabi_l2f+0x5c>
   1c4c2:	fa01 fc02 	lsl.w	ip, r1, r2
   1c4c6:	4463      	add	r3, ip
   1c4c8:	fa00 fc02 	lsl.w	ip, r0, r2
   1c4cc:	f1c2 0220 	rsb	r2, r2, #32
   1c4d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c4d4:	fa20 f202 	lsr.w	r2, r0, r2
   1c4d8:	eb43 0002 	adc.w	r0, r3, r2
   1c4dc:	bf08      	it	eq
   1c4de:	f020 0001 	biceq.w	r0, r0, #1
   1c4e2:	4770      	bx	lr
   1c4e4:	f102 0220 	add.w	r2, r2, #32
   1c4e8:	fa01 fc02 	lsl.w	ip, r1, r2
   1c4ec:	f1c2 0220 	rsb	r2, r2, #32
   1c4f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c4f4:	fa21 f202 	lsr.w	r2, r1, r2
   1c4f8:	eb43 0002 	adc.w	r0, r3, r2
   1c4fc:	bf08      	it	eq
   1c4fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c502:	4770      	bx	lr

0001c504 <__aeabi_ldivmod>:
   1c504:	b97b      	cbnz	r3, 1c526 <__aeabi_ldivmod+0x22>
   1c506:	b972      	cbnz	r2, 1c526 <__aeabi_ldivmod+0x22>
   1c508:	2900      	cmp	r1, #0
   1c50a:	bfbe      	ittt	lt
   1c50c:	2000      	movlt	r0, #0
   1c50e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c512:	e006      	blt.n	1c522 <__aeabi_ldivmod+0x1e>
   1c514:	bf08      	it	eq
   1c516:	2800      	cmpeq	r0, #0
   1c518:	bf1c      	itt	ne
   1c51a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c51e:	f04f 30ff 	movne.w	r0, #4294967295
   1c522:	f001 b979 	b.w	1d818 <__aeabi_idiv0>
   1c526:	f1ad 0c08 	sub.w	ip, sp, #8
   1c52a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c52e:	2900      	cmp	r1, #0
   1c530:	db09      	blt.n	1c546 <__aeabi_ldivmod+0x42>
   1c532:	2b00      	cmp	r3, #0
   1c534:	db1a      	blt.n	1c56c <__aeabi_ldivmod+0x68>
   1c536:	f000 f885 	bl	1c644 <__udivmoddi4>
   1c53a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c53e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c542:	b004      	add	sp, #16
   1c544:	4770      	bx	lr
   1c546:	4240      	negs	r0, r0
   1c548:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c54c:	2b00      	cmp	r3, #0
   1c54e:	db1b      	blt.n	1c588 <__aeabi_ldivmod+0x84>
   1c550:	f000 f878 	bl	1c644 <__udivmoddi4>
   1c554:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c55c:	b004      	add	sp, #16
   1c55e:	4240      	negs	r0, r0
   1c560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c564:	4252      	negs	r2, r2
   1c566:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c56a:	4770      	bx	lr
   1c56c:	4252      	negs	r2, r2
   1c56e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c572:	f000 f867 	bl	1c644 <__udivmoddi4>
   1c576:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c57e:	b004      	add	sp, #16
   1c580:	4240      	negs	r0, r0
   1c582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c586:	4770      	bx	lr
   1c588:	4252      	negs	r2, r2
   1c58a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c58e:	f000 f859 	bl	1c644 <__udivmoddi4>
   1c592:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c59a:	b004      	add	sp, #16
   1c59c:	4252      	negs	r2, r2
   1c59e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c5a2:	4770      	bx	lr

0001c5a4 <__aeabi_uldivmod>:
   1c5a4:	b953      	cbnz	r3, 1c5bc <__aeabi_uldivmod+0x18>
   1c5a6:	b94a      	cbnz	r2, 1c5bc <__aeabi_uldivmod+0x18>
   1c5a8:	2900      	cmp	r1, #0
   1c5aa:	bf08      	it	eq
   1c5ac:	2800      	cmpeq	r0, #0
   1c5ae:	bf1c      	itt	ne
   1c5b0:	f04f 31ff 	movne.w	r1, #4294967295
   1c5b4:	f04f 30ff 	movne.w	r0, #4294967295
   1c5b8:	f001 b92e 	b.w	1d818 <__aeabi_idiv0>
   1c5bc:	f1ad 0c08 	sub.w	ip, sp, #8
   1c5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c5c4:	f000 f83e 	bl	1c644 <__udivmoddi4>
   1c5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c5d0:	b004      	add	sp, #16
   1c5d2:	4770      	bx	lr

0001c5d4 <__aeabi_f2lz>:
   1c5d4:	ee07 0a90 	vmov	s15, r0
   1c5d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c5e0:	d401      	bmi.n	1c5e6 <__aeabi_f2lz+0x12>
   1c5e2:	f000 b809 	b.w	1c5f8 <__aeabi_f2ulz>
   1c5e6:	b508      	push	{r3, lr}
   1c5e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c5ec:	f000 f804 	bl	1c5f8 <__aeabi_f2ulz>
   1c5f0:	4240      	negs	r0, r0
   1c5f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c5f6:	bd08      	pop	{r3, pc}

0001c5f8 <__aeabi_f2ulz>:
   1c5f8:	b5d0      	push	{r4, r6, r7, lr}
   1c5fa:	f7ff faef 	bl	1bbdc <__aeabi_f2d>
   1c5fe:	2200      	movs	r2, #0
   1c600:	4b0e      	ldr	r3, [pc, #56]	; (1c63c <__aeabi_f2ulz+0x44>)
   1c602:	4606      	mov	r6, r0
   1c604:	460f      	mov	r7, r1
   1c606:	f7ff fb3d 	bl	1bc84 <__aeabi_dmul>
   1c60a:	f7ff fdfd 	bl	1c208 <__aeabi_d2uiz>
   1c60e:	4604      	mov	r4, r0
   1c610:	f7ff fac2 	bl	1bb98 <__aeabi_ui2d>
   1c614:	2200      	movs	r2, #0
   1c616:	4b0a      	ldr	r3, [pc, #40]	; (1c640 <__aeabi_f2ulz+0x48>)
   1c618:	f7ff fb34 	bl	1bc84 <__aeabi_dmul>
   1c61c:	4602      	mov	r2, r0
   1c61e:	460b      	mov	r3, r1
   1c620:	4630      	mov	r0, r6
   1c622:	4639      	mov	r1, r7
   1c624:	f7ff f97a 	bl	1b91c <__aeabi_dsub>
   1c628:	f7ff fdee 	bl	1c208 <__aeabi_d2uiz>
   1c62c:	4623      	mov	r3, r4
   1c62e:	2200      	movs	r2, #0
   1c630:	ea42 0200 	orr.w	r2, r2, r0
   1c634:	4610      	mov	r0, r2
   1c636:	4619      	mov	r1, r3
   1c638:	bdd0      	pop	{r4, r6, r7, pc}
   1c63a:	bf00      	nop
   1c63c:	3df00000 	.word	0x3df00000
   1c640:	41f00000 	.word	0x41f00000

0001c644 <__udivmoddi4>:
   1c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c648:	468c      	mov	ip, r1
   1c64a:	460d      	mov	r5, r1
   1c64c:	4604      	mov	r4, r0
   1c64e:	9e08      	ldr	r6, [sp, #32]
   1c650:	2b00      	cmp	r3, #0
   1c652:	d151      	bne.n	1c6f8 <__udivmoddi4+0xb4>
   1c654:	428a      	cmp	r2, r1
   1c656:	4617      	mov	r7, r2
   1c658:	d96d      	bls.n	1c736 <__udivmoddi4+0xf2>
   1c65a:	fab2 fe82 	clz	lr, r2
   1c65e:	f1be 0f00 	cmp.w	lr, #0
   1c662:	d00b      	beq.n	1c67c <__udivmoddi4+0x38>
   1c664:	f1ce 0c20 	rsb	ip, lr, #32
   1c668:	fa01 f50e 	lsl.w	r5, r1, lr
   1c66c:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c670:	fa02 f70e 	lsl.w	r7, r2, lr
   1c674:	ea4c 0c05 	orr.w	ip, ip, r5
   1c678:	fa00 f40e 	lsl.w	r4, r0, lr
   1c67c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c680:	0c25      	lsrs	r5, r4, #16
   1c682:	fbbc f8fa 	udiv	r8, ip, sl
   1c686:	fa1f f987 	uxth.w	r9, r7
   1c68a:	fb0a cc18 	mls	ip, sl, r8, ip
   1c68e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c692:	fb08 f309 	mul.w	r3, r8, r9
   1c696:	42ab      	cmp	r3, r5
   1c698:	d90a      	bls.n	1c6b0 <__udivmoddi4+0x6c>
   1c69a:	19ed      	adds	r5, r5, r7
   1c69c:	f108 32ff 	add.w	r2, r8, #4294967295
   1c6a0:	f080 8123 	bcs.w	1c8ea <__udivmoddi4+0x2a6>
   1c6a4:	42ab      	cmp	r3, r5
   1c6a6:	f240 8120 	bls.w	1c8ea <__udivmoddi4+0x2a6>
   1c6aa:	f1a8 0802 	sub.w	r8, r8, #2
   1c6ae:	443d      	add	r5, r7
   1c6b0:	1aed      	subs	r5, r5, r3
   1c6b2:	b2a4      	uxth	r4, r4
   1c6b4:	fbb5 f0fa 	udiv	r0, r5, sl
   1c6b8:	fb0a 5510 	mls	r5, sl, r0, r5
   1c6bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c6c0:	fb00 f909 	mul.w	r9, r0, r9
   1c6c4:	45a1      	cmp	r9, r4
   1c6c6:	d909      	bls.n	1c6dc <__udivmoddi4+0x98>
   1c6c8:	19e4      	adds	r4, r4, r7
   1c6ca:	f100 33ff 	add.w	r3, r0, #4294967295
   1c6ce:	f080 810a 	bcs.w	1c8e6 <__udivmoddi4+0x2a2>
   1c6d2:	45a1      	cmp	r9, r4
   1c6d4:	f240 8107 	bls.w	1c8e6 <__udivmoddi4+0x2a2>
   1c6d8:	3802      	subs	r0, #2
   1c6da:	443c      	add	r4, r7
   1c6dc:	eba4 0409 	sub.w	r4, r4, r9
   1c6e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c6e4:	2100      	movs	r1, #0
   1c6e6:	2e00      	cmp	r6, #0
   1c6e8:	d061      	beq.n	1c7ae <__udivmoddi4+0x16a>
   1c6ea:	fa24 f40e 	lsr.w	r4, r4, lr
   1c6ee:	2300      	movs	r3, #0
   1c6f0:	6034      	str	r4, [r6, #0]
   1c6f2:	6073      	str	r3, [r6, #4]
   1c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6f8:	428b      	cmp	r3, r1
   1c6fa:	d907      	bls.n	1c70c <__udivmoddi4+0xc8>
   1c6fc:	2e00      	cmp	r6, #0
   1c6fe:	d054      	beq.n	1c7aa <__udivmoddi4+0x166>
   1c700:	2100      	movs	r1, #0
   1c702:	e886 0021 	stmia.w	r6, {r0, r5}
   1c706:	4608      	mov	r0, r1
   1c708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c70c:	fab3 f183 	clz	r1, r3
   1c710:	2900      	cmp	r1, #0
   1c712:	f040 808e 	bne.w	1c832 <__udivmoddi4+0x1ee>
   1c716:	42ab      	cmp	r3, r5
   1c718:	d302      	bcc.n	1c720 <__udivmoddi4+0xdc>
   1c71a:	4282      	cmp	r2, r0
   1c71c:	f200 80fa 	bhi.w	1c914 <__udivmoddi4+0x2d0>
   1c720:	1a84      	subs	r4, r0, r2
   1c722:	eb65 0503 	sbc.w	r5, r5, r3
   1c726:	2001      	movs	r0, #1
   1c728:	46ac      	mov	ip, r5
   1c72a:	2e00      	cmp	r6, #0
   1c72c:	d03f      	beq.n	1c7ae <__udivmoddi4+0x16a>
   1c72e:	e886 1010 	stmia.w	r6, {r4, ip}
   1c732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c736:	b912      	cbnz	r2, 1c73e <__udivmoddi4+0xfa>
   1c738:	2701      	movs	r7, #1
   1c73a:	fbb7 f7f2 	udiv	r7, r7, r2
   1c73e:	fab7 fe87 	clz	lr, r7
   1c742:	f1be 0f00 	cmp.w	lr, #0
   1c746:	d134      	bne.n	1c7b2 <__udivmoddi4+0x16e>
   1c748:	1beb      	subs	r3, r5, r7
   1c74a:	0c3a      	lsrs	r2, r7, #16
   1c74c:	fa1f fc87 	uxth.w	ip, r7
   1c750:	2101      	movs	r1, #1
   1c752:	fbb3 f8f2 	udiv	r8, r3, r2
   1c756:	0c25      	lsrs	r5, r4, #16
   1c758:	fb02 3318 	mls	r3, r2, r8, r3
   1c75c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c760:	fb0c f308 	mul.w	r3, ip, r8
   1c764:	42ab      	cmp	r3, r5
   1c766:	d907      	bls.n	1c778 <__udivmoddi4+0x134>
   1c768:	19ed      	adds	r5, r5, r7
   1c76a:	f108 30ff 	add.w	r0, r8, #4294967295
   1c76e:	d202      	bcs.n	1c776 <__udivmoddi4+0x132>
   1c770:	42ab      	cmp	r3, r5
   1c772:	f200 80d1 	bhi.w	1c918 <__udivmoddi4+0x2d4>
   1c776:	4680      	mov	r8, r0
   1c778:	1aed      	subs	r5, r5, r3
   1c77a:	b2a3      	uxth	r3, r4
   1c77c:	fbb5 f0f2 	udiv	r0, r5, r2
   1c780:	fb02 5510 	mls	r5, r2, r0, r5
   1c784:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c788:	fb0c fc00 	mul.w	ip, ip, r0
   1c78c:	45a4      	cmp	ip, r4
   1c78e:	d907      	bls.n	1c7a0 <__udivmoddi4+0x15c>
   1c790:	19e4      	adds	r4, r4, r7
   1c792:	f100 33ff 	add.w	r3, r0, #4294967295
   1c796:	d202      	bcs.n	1c79e <__udivmoddi4+0x15a>
   1c798:	45a4      	cmp	ip, r4
   1c79a:	f200 80b8 	bhi.w	1c90e <__udivmoddi4+0x2ca>
   1c79e:	4618      	mov	r0, r3
   1c7a0:	eba4 040c 	sub.w	r4, r4, ip
   1c7a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c7a8:	e79d      	b.n	1c6e6 <__udivmoddi4+0xa2>
   1c7aa:	4631      	mov	r1, r6
   1c7ac:	4630      	mov	r0, r6
   1c7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c7b2:	f1ce 0420 	rsb	r4, lr, #32
   1c7b6:	fa05 f30e 	lsl.w	r3, r5, lr
   1c7ba:	fa07 f70e 	lsl.w	r7, r7, lr
   1c7be:	fa20 f804 	lsr.w	r8, r0, r4
   1c7c2:	0c3a      	lsrs	r2, r7, #16
   1c7c4:	fa25 f404 	lsr.w	r4, r5, r4
   1c7c8:	ea48 0803 	orr.w	r8, r8, r3
   1c7cc:	fbb4 f1f2 	udiv	r1, r4, r2
   1c7d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c7d4:	fb02 4411 	mls	r4, r2, r1, r4
   1c7d8:	fa1f fc87 	uxth.w	ip, r7
   1c7dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c7e0:	fb01 f30c 	mul.w	r3, r1, ip
   1c7e4:	42ab      	cmp	r3, r5
   1c7e6:	fa00 f40e 	lsl.w	r4, r0, lr
   1c7ea:	d909      	bls.n	1c800 <__udivmoddi4+0x1bc>
   1c7ec:	19ed      	adds	r5, r5, r7
   1c7ee:	f101 30ff 	add.w	r0, r1, #4294967295
   1c7f2:	f080 808a 	bcs.w	1c90a <__udivmoddi4+0x2c6>
   1c7f6:	42ab      	cmp	r3, r5
   1c7f8:	f240 8087 	bls.w	1c90a <__udivmoddi4+0x2c6>
   1c7fc:	3902      	subs	r1, #2
   1c7fe:	443d      	add	r5, r7
   1c800:	1aeb      	subs	r3, r5, r3
   1c802:	fa1f f588 	uxth.w	r5, r8
   1c806:	fbb3 f0f2 	udiv	r0, r3, r2
   1c80a:	fb02 3310 	mls	r3, r2, r0, r3
   1c80e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c812:	fb00 f30c 	mul.w	r3, r0, ip
   1c816:	42ab      	cmp	r3, r5
   1c818:	d907      	bls.n	1c82a <__udivmoddi4+0x1e6>
   1c81a:	19ed      	adds	r5, r5, r7
   1c81c:	f100 38ff 	add.w	r8, r0, #4294967295
   1c820:	d26f      	bcs.n	1c902 <__udivmoddi4+0x2be>
   1c822:	42ab      	cmp	r3, r5
   1c824:	d96d      	bls.n	1c902 <__udivmoddi4+0x2be>
   1c826:	3802      	subs	r0, #2
   1c828:	443d      	add	r5, r7
   1c82a:	1aeb      	subs	r3, r5, r3
   1c82c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c830:	e78f      	b.n	1c752 <__udivmoddi4+0x10e>
   1c832:	f1c1 0720 	rsb	r7, r1, #32
   1c836:	fa22 f807 	lsr.w	r8, r2, r7
   1c83a:	408b      	lsls	r3, r1
   1c83c:	fa05 f401 	lsl.w	r4, r5, r1
   1c840:	ea48 0303 	orr.w	r3, r8, r3
   1c844:	fa20 fe07 	lsr.w	lr, r0, r7
   1c848:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c84c:	40fd      	lsrs	r5, r7
   1c84e:	ea4e 0e04 	orr.w	lr, lr, r4
   1c852:	fbb5 f9fc 	udiv	r9, r5, ip
   1c856:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c85a:	fb0c 5519 	mls	r5, ip, r9, r5
   1c85e:	fa1f f883 	uxth.w	r8, r3
   1c862:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c866:	fb09 f408 	mul.w	r4, r9, r8
   1c86a:	42ac      	cmp	r4, r5
   1c86c:	fa02 f201 	lsl.w	r2, r2, r1
   1c870:	fa00 fa01 	lsl.w	sl, r0, r1
   1c874:	d908      	bls.n	1c888 <__udivmoddi4+0x244>
   1c876:	18ed      	adds	r5, r5, r3
   1c878:	f109 30ff 	add.w	r0, r9, #4294967295
   1c87c:	d243      	bcs.n	1c906 <__udivmoddi4+0x2c2>
   1c87e:	42ac      	cmp	r4, r5
   1c880:	d941      	bls.n	1c906 <__udivmoddi4+0x2c2>
   1c882:	f1a9 0902 	sub.w	r9, r9, #2
   1c886:	441d      	add	r5, r3
   1c888:	1b2d      	subs	r5, r5, r4
   1c88a:	fa1f fe8e 	uxth.w	lr, lr
   1c88e:	fbb5 f0fc 	udiv	r0, r5, ip
   1c892:	fb0c 5510 	mls	r5, ip, r0, r5
   1c896:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c89a:	fb00 f808 	mul.w	r8, r0, r8
   1c89e:	45a0      	cmp	r8, r4
   1c8a0:	d907      	bls.n	1c8b2 <__udivmoddi4+0x26e>
   1c8a2:	18e4      	adds	r4, r4, r3
   1c8a4:	f100 35ff 	add.w	r5, r0, #4294967295
   1c8a8:	d229      	bcs.n	1c8fe <__udivmoddi4+0x2ba>
   1c8aa:	45a0      	cmp	r8, r4
   1c8ac:	d927      	bls.n	1c8fe <__udivmoddi4+0x2ba>
   1c8ae:	3802      	subs	r0, #2
   1c8b0:	441c      	add	r4, r3
   1c8b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c8b6:	eba4 0408 	sub.w	r4, r4, r8
   1c8ba:	fba0 8902 	umull	r8, r9, r0, r2
   1c8be:	454c      	cmp	r4, r9
   1c8c0:	46c6      	mov	lr, r8
   1c8c2:	464d      	mov	r5, r9
   1c8c4:	d315      	bcc.n	1c8f2 <__udivmoddi4+0x2ae>
   1c8c6:	d012      	beq.n	1c8ee <__udivmoddi4+0x2aa>
   1c8c8:	b156      	cbz	r6, 1c8e0 <__udivmoddi4+0x29c>
   1c8ca:	ebba 030e 	subs.w	r3, sl, lr
   1c8ce:	eb64 0405 	sbc.w	r4, r4, r5
   1c8d2:	fa04 f707 	lsl.w	r7, r4, r7
   1c8d6:	40cb      	lsrs	r3, r1
   1c8d8:	431f      	orrs	r7, r3
   1c8da:	40cc      	lsrs	r4, r1
   1c8dc:	6037      	str	r7, [r6, #0]
   1c8de:	6074      	str	r4, [r6, #4]
   1c8e0:	2100      	movs	r1, #0
   1c8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c8e6:	4618      	mov	r0, r3
   1c8e8:	e6f8      	b.n	1c6dc <__udivmoddi4+0x98>
   1c8ea:	4690      	mov	r8, r2
   1c8ec:	e6e0      	b.n	1c6b0 <__udivmoddi4+0x6c>
   1c8ee:	45c2      	cmp	sl, r8
   1c8f0:	d2ea      	bcs.n	1c8c8 <__udivmoddi4+0x284>
   1c8f2:	ebb8 0e02 	subs.w	lr, r8, r2
   1c8f6:	eb69 0503 	sbc.w	r5, r9, r3
   1c8fa:	3801      	subs	r0, #1
   1c8fc:	e7e4      	b.n	1c8c8 <__udivmoddi4+0x284>
   1c8fe:	4628      	mov	r0, r5
   1c900:	e7d7      	b.n	1c8b2 <__udivmoddi4+0x26e>
   1c902:	4640      	mov	r0, r8
   1c904:	e791      	b.n	1c82a <__udivmoddi4+0x1e6>
   1c906:	4681      	mov	r9, r0
   1c908:	e7be      	b.n	1c888 <__udivmoddi4+0x244>
   1c90a:	4601      	mov	r1, r0
   1c90c:	e778      	b.n	1c800 <__udivmoddi4+0x1bc>
   1c90e:	3802      	subs	r0, #2
   1c910:	443c      	add	r4, r7
   1c912:	e745      	b.n	1c7a0 <__udivmoddi4+0x15c>
   1c914:	4608      	mov	r0, r1
   1c916:	e708      	b.n	1c72a <__udivmoddi4+0xe6>
   1c918:	f1a8 0802 	sub.w	r8, r8, #2
   1c91c:	443d      	add	r5, r7
   1c91e:	e72b      	b.n	1c778 <__udivmoddi4+0x134>

0001c920 <selfrel_offset31>:
   1c920:	6803      	ldr	r3, [r0, #0]
   1c922:	005a      	lsls	r2, r3, #1
   1c924:	bf4c      	ite	mi
   1c926:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c92a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c92e:	4418      	add	r0, r3
   1c930:	4770      	bx	lr
   1c932:	bf00      	nop

0001c934 <search_EIT_table>:
   1c934:	b361      	cbz	r1, 1c990 <search_EIT_table+0x5c>
   1c936:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c93a:	f101 3aff 	add.w	sl, r1, #4294967295
   1c93e:	4690      	mov	r8, r2
   1c940:	4606      	mov	r6, r0
   1c942:	46d1      	mov	r9, sl
   1c944:	2700      	movs	r7, #0
   1c946:	eb07 0409 	add.w	r4, r7, r9
   1c94a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c94e:	1064      	asrs	r4, r4, #1
   1c950:	00e5      	lsls	r5, r4, #3
   1c952:	1971      	adds	r1, r6, r5
   1c954:	4608      	mov	r0, r1
   1c956:	f7ff ffe3 	bl	1c920 <selfrel_offset31>
   1c95a:	45a2      	cmp	sl, r4
   1c95c:	4683      	mov	fp, r0
   1c95e:	f105 0008 	add.w	r0, r5, #8
   1c962:	4430      	add	r0, r6
   1c964:	d009      	beq.n	1c97a <search_EIT_table+0x46>
   1c966:	f7ff ffdb 	bl	1c920 <selfrel_offset31>
   1c96a:	45c3      	cmp	fp, r8
   1c96c:	f100 30ff 	add.w	r0, r0, #4294967295
   1c970:	d805      	bhi.n	1c97e <search_EIT_table+0x4a>
   1c972:	4540      	cmp	r0, r8
   1c974:	d209      	bcs.n	1c98a <search_EIT_table+0x56>
   1c976:	1c67      	adds	r7, r4, #1
   1c978:	e7e5      	b.n	1c946 <search_EIT_table+0x12>
   1c97a:	45c3      	cmp	fp, r8
   1c97c:	d905      	bls.n	1c98a <search_EIT_table+0x56>
   1c97e:	42a7      	cmp	r7, r4
   1c980:	d002      	beq.n	1c988 <search_EIT_table+0x54>
   1c982:	f104 39ff 	add.w	r9, r4, #4294967295
   1c986:	e7de      	b.n	1c946 <search_EIT_table+0x12>
   1c988:	2100      	movs	r1, #0
   1c98a:	4608      	mov	r0, r1
   1c98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c990:	4608      	mov	r0, r1
   1c992:	4770      	bx	lr

0001c994 <__gnu_unwind_get_pr_addr>:
   1c994:	2801      	cmp	r0, #1
   1c996:	d007      	beq.n	1c9a8 <__gnu_unwind_get_pr_addr+0x14>
   1c998:	2802      	cmp	r0, #2
   1c99a:	d007      	beq.n	1c9ac <__gnu_unwind_get_pr_addr+0x18>
   1c99c:	4b04      	ldr	r3, [pc, #16]	; (1c9b0 <__gnu_unwind_get_pr_addr+0x1c>)
   1c99e:	2800      	cmp	r0, #0
   1c9a0:	bf0c      	ite	eq
   1c9a2:	4618      	moveq	r0, r3
   1c9a4:	2000      	movne	r0, #0
   1c9a6:	4770      	bx	lr
   1c9a8:	4802      	ldr	r0, [pc, #8]	; (1c9b4 <__gnu_unwind_get_pr_addr+0x20>)
   1c9aa:	4770      	bx	lr
   1c9ac:	4802      	ldr	r0, [pc, #8]	; (1c9b8 <__gnu_unwind_get_pr_addr+0x24>)
   1c9ae:	4770      	bx	lr
   1c9b0:	0001d099 	.word	0x0001d099
   1c9b4:	0001d09d 	.word	0x0001d09d
   1c9b8:	0001d0a1 	.word	0x0001d0a1

0001c9bc <get_eit_entry>:
   1c9bc:	b530      	push	{r4, r5, lr}
   1c9be:	4b24      	ldr	r3, [pc, #144]	; (1ca50 <get_eit_entry+0x94>)
   1c9c0:	b083      	sub	sp, #12
   1c9c2:	4604      	mov	r4, r0
   1c9c4:	1e8d      	subs	r5, r1, #2
   1c9c6:	b37b      	cbz	r3, 1ca28 <get_eit_entry+0x6c>
   1c9c8:	a901      	add	r1, sp, #4
   1c9ca:	4628      	mov	r0, r5
   1c9cc:	f3af 8000 	nop.w
   1c9d0:	b320      	cbz	r0, 1ca1c <get_eit_entry+0x60>
   1c9d2:	9901      	ldr	r1, [sp, #4]
   1c9d4:	462a      	mov	r2, r5
   1c9d6:	f7ff ffad 	bl	1c934 <search_EIT_table>
   1c9da:	4601      	mov	r1, r0
   1c9dc:	b1f0      	cbz	r0, 1ca1c <get_eit_entry+0x60>
   1c9de:	f7ff ff9f 	bl	1c920 <selfrel_offset31>
   1c9e2:	684b      	ldr	r3, [r1, #4]
   1c9e4:	64a0      	str	r0, [r4, #72]	; 0x48
   1c9e6:	2b01      	cmp	r3, #1
   1c9e8:	d012      	beq.n	1ca10 <get_eit_entry+0x54>
   1c9ea:	2b00      	cmp	r3, #0
   1c9ec:	f101 0004 	add.w	r0, r1, #4
   1c9f0:	db20      	blt.n	1ca34 <get_eit_entry+0x78>
   1c9f2:	f7ff ff95 	bl	1c920 <selfrel_offset31>
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c9fa:	6523      	str	r3, [r4, #80]	; 0x50
   1c9fc:	6803      	ldr	r3, [r0, #0]
   1c9fe:	2b00      	cmp	r3, #0
   1ca00:	db1c      	blt.n	1ca3c <get_eit_entry+0x80>
   1ca02:	f7ff ff8d 	bl	1c920 <selfrel_offset31>
   1ca06:	2300      	movs	r3, #0
   1ca08:	6120      	str	r0, [r4, #16]
   1ca0a:	4618      	mov	r0, r3
   1ca0c:	b003      	add	sp, #12
   1ca0e:	bd30      	pop	{r4, r5, pc}
   1ca10:	2300      	movs	r3, #0
   1ca12:	6123      	str	r3, [r4, #16]
   1ca14:	2305      	movs	r3, #5
   1ca16:	4618      	mov	r0, r3
   1ca18:	b003      	add	sp, #12
   1ca1a:	bd30      	pop	{r4, r5, pc}
   1ca1c:	2300      	movs	r3, #0
   1ca1e:	6123      	str	r3, [r4, #16]
   1ca20:	2309      	movs	r3, #9
   1ca22:	4618      	mov	r0, r3
   1ca24:	b003      	add	sp, #12
   1ca26:	bd30      	pop	{r4, r5, pc}
   1ca28:	490a      	ldr	r1, [pc, #40]	; (1ca54 <get_eit_entry+0x98>)
   1ca2a:	480b      	ldr	r0, [pc, #44]	; (1ca58 <get_eit_entry+0x9c>)
   1ca2c:	1a09      	subs	r1, r1, r0
   1ca2e:	10c9      	asrs	r1, r1, #3
   1ca30:	9101      	str	r1, [sp, #4]
   1ca32:	e7cf      	b.n	1c9d4 <get_eit_entry+0x18>
   1ca34:	2301      	movs	r3, #1
   1ca36:	64e0      	str	r0, [r4, #76]	; 0x4c
   1ca38:	6523      	str	r3, [r4, #80]	; 0x50
   1ca3a:	e7df      	b.n	1c9fc <get_eit_entry+0x40>
   1ca3c:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1ca40:	f7ff ffa8 	bl	1c994 <__gnu_unwind_get_pr_addr>
   1ca44:	2800      	cmp	r0, #0
   1ca46:	6120      	str	r0, [r4, #16]
   1ca48:	bf14      	ite	ne
   1ca4a:	2300      	movne	r3, #0
   1ca4c:	2309      	moveq	r3, #9
   1ca4e:	e7dc      	b.n	1ca0a <get_eit_entry+0x4e>
   1ca50:	00000000 	.word	0x00000000
   1ca54:	0002536c 	.word	0x0002536c
   1ca58:	000251e4 	.word	0x000251e4

0001ca5c <restore_non_core_regs>:
   1ca5c:	6803      	ldr	r3, [r0, #0]
   1ca5e:	07da      	lsls	r2, r3, #31
   1ca60:	b510      	push	{r4, lr}
   1ca62:	4604      	mov	r4, r0
   1ca64:	d406      	bmi.n	1ca74 <restore_non_core_regs+0x18>
   1ca66:	079b      	lsls	r3, r3, #30
   1ca68:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1ca6c:	d509      	bpl.n	1ca82 <restore_non_core_regs+0x26>
   1ca6e:	f000 fc51 	bl	1d314 <__gnu_Unwind_Restore_VFP_D>
   1ca72:	6823      	ldr	r3, [r4, #0]
   1ca74:	0759      	lsls	r1, r3, #29
   1ca76:	d509      	bpl.n	1ca8c <restore_non_core_regs+0x30>
   1ca78:	071a      	lsls	r2, r3, #28
   1ca7a:	d50e      	bpl.n	1ca9a <restore_non_core_regs+0x3e>
   1ca7c:	06db      	lsls	r3, r3, #27
   1ca7e:	d513      	bpl.n	1caa8 <restore_non_core_regs+0x4c>
   1ca80:	bd10      	pop	{r4, pc}
   1ca82:	f000 fc3f 	bl	1d304 <__gnu_Unwind_Restore_VFP>
   1ca86:	6823      	ldr	r3, [r4, #0]
   1ca88:	0759      	lsls	r1, r3, #29
   1ca8a:	d4f5      	bmi.n	1ca78 <restore_non_core_regs+0x1c>
   1ca8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1ca90:	f000 fc48 	bl	1d324 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1ca94:	6823      	ldr	r3, [r4, #0]
   1ca96:	071a      	lsls	r2, r3, #28
   1ca98:	d4f0      	bmi.n	1ca7c <restore_non_core_regs+0x20>
   1ca9a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1ca9e:	f000 fc49 	bl	1d334 <__gnu_Unwind_Restore_WMMXD>
   1caa2:	6823      	ldr	r3, [r4, #0]
   1caa4:	06db      	lsls	r3, r3, #27
   1caa6:	d4eb      	bmi.n	1ca80 <restore_non_core_regs+0x24>
   1caa8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1caac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cab0:	f000 bc84 	b.w	1d3bc <__gnu_Unwind_Restore_WMMXC>

0001cab4 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1cab4:	6803      	ldr	r3, [r0, #0]
   1cab6:	b103      	cbz	r3, 1caba <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1cab8:	4403      	add	r3, r0
   1caba:	4618      	mov	r0, r3
   1cabc:	4770      	bx	lr
   1cabe:	bf00      	nop

0001cac0 <__gnu_unwind_24bit.isra.1>:
   1cac0:	2009      	movs	r0, #9
   1cac2:	4770      	bx	lr

0001cac4 <_Unwind_DebugHook>:
   1cac4:	4770      	bx	lr
   1cac6:	bf00      	nop

0001cac8 <unwind_phase2>:
   1cac8:	b570      	push	{r4, r5, r6, lr}
   1caca:	4604      	mov	r4, r0
   1cacc:	460d      	mov	r5, r1
   1cace:	e008      	b.n	1cae2 <unwind_phase2+0x1a>
   1cad0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1cad2:	6163      	str	r3, [r4, #20]
   1cad4:	462a      	mov	r2, r5
   1cad6:	6923      	ldr	r3, [r4, #16]
   1cad8:	4621      	mov	r1, r4
   1cada:	2001      	movs	r0, #1
   1cadc:	4798      	blx	r3
   1cade:	2808      	cmp	r0, #8
   1cae0:	d108      	bne.n	1caf4 <unwind_phase2+0x2c>
   1cae2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cae4:	4620      	mov	r0, r4
   1cae6:	f7ff ff69 	bl	1c9bc <get_eit_entry>
   1caea:	4606      	mov	r6, r0
   1caec:	2800      	cmp	r0, #0
   1caee:	d0ef      	beq.n	1cad0 <unwind_phase2+0x8>
   1caf0:	f000 fe94 	bl	1d81c <abort>
   1caf4:	2807      	cmp	r0, #7
   1caf6:	d1fb      	bne.n	1caf0 <unwind_phase2+0x28>
   1caf8:	4630      	mov	r0, r6
   1cafa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cafc:	f7ff ffe2 	bl	1cac4 <_Unwind_DebugHook>
   1cb00:	1d28      	adds	r0, r5, #4
   1cb02:	f000 fbf3 	bl	1d2ec <__restore_core_regs>
   1cb06:	bf00      	nop

0001cb08 <unwind_phase2_forced>:
   1cb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb0c:	1d0c      	adds	r4, r1, #4
   1cb0e:	4605      	mov	r5, r0
   1cb10:	4692      	mov	sl, r2
   1cb12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1cb14:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1cb18:	ae03      	add	r6, sp, #12
   1cb1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1cb1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1cb1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1cb20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1cb22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1cb24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1cb28:	ac02      	add	r4, sp, #8
   1cb2a:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1cb2e:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1cb32:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1cb36:	2300      	movs	r3, #0
   1cb38:	4628      	mov	r0, r5
   1cb3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cb3c:	6023      	str	r3, [r4, #0]
   1cb3e:	f7ff ff3d 	bl	1c9bc <get_eit_entry>
   1cb42:	f1ba 0f00 	cmp.w	sl, #0
   1cb46:	4607      	mov	r7, r0
   1cb48:	bf14      	ite	ne
   1cb4a:	260a      	movne	r6, #10
   1cb4c:	2609      	moveq	r6, #9
   1cb4e:	b17f      	cbz	r7, 1cb70 <unwind_phase2_forced+0x68>
   1cb50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cb52:	f046 0110 	orr.w	r1, r6, #16
   1cb56:	e88d 0210 	stmia.w	sp, {r4, r9}
   1cb5a:	462a      	mov	r2, r5
   1cb5c:	6463      	str	r3, [r4, #68]	; 0x44
   1cb5e:	2001      	movs	r0, #1
   1cb60:	462b      	mov	r3, r5
   1cb62:	47c0      	blx	r8
   1cb64:	bb78      	cbnz	r0, 1cbc6 <unwind_phase2_forced+0xbe>
   1cb66:	4638      	mov	r0, r7
   1cb68:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cb70:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1cb72:	616b      	str	r3, [r5, #20]
   1cb74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1cb78:	4621      	mov	r1, r4
   1cb7a:	a87a      	add	r0, sp, #488	; 0x1e8
   1cb7c:	f001 fc58 	bl	1e430 <memcpy>
   1cb80:	692b      	ldr	r3, [r5, #16]
   1cb82:	aa7a      	add	r2, sp, #488	; 0x1e8
   1cb84:	4629      	mov	r1, r5
   1cb86:	4630      	mov	r0, r6
   1cb88:	4798      	blx	r3
   1cb8a:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1cb8c:	4682      	mov	sl, r0
   1cb8e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1cb92:	4631      	mov	r1, r6
   1cb94:	6463      	str	r3, [r4, #68]	; 0x44
   1cb96:	462a      	mov	r2, r5
   1cb98:	462b      	mov	r3, r5
   1cb9a:	2001      	movs	r0, #1
   1cb9c:	47c0      	blx	r8
   1cb9e:	b990      	cbnz	r0, 1cbc6 <unwind_phase2_forced+0xbe>
   1cba0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1cba4:	a97a      	add	r1, sp, #488	; 0x1e8
   1cba6:	4620      	mov	r0, r4
   1cba8:	f001 fc42 	bl	1e430 <memcpy>
   1cbac:	f1ba 0f08 	cmp.w	sl, #8
   1cbb0:	d106      	bne.n	1cbc0 <unwind_phase2_forced+0xb8>
   1cbb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cbb4:	4628      	mov	r0, r5
   1cbb6:	f7ff ff01 	bl	1c9bc <get_eit_entry>
   1cbba:	2609      	movs	r6, #9
   1cbbc:	4607      	mov	r7, r0
   1cbbe:	e7c6      	b.n	1cb4e <unwind_phase2_forced+0x46>
   1cbc0:	f1ba 0f07 	cmp.w	sl, #7
   1cbc4:	d005      	beq.n	1cbd2 <unwind_phase2_forced+0xca>
   1cbc6:	2709      	movs	r7, #9
   1cbc8:	4638      	mov	r0, r7
   1cbca:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cbd2:	4638      	mov	r0, r7
   1cbd4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cbd6:	f7ff ff75 	bl	1cac4 <_Unwind_DebugHook>
   1cbda:	a803      	add	r0, sp, #12
   1cbdc:	f000 fb86 	bl	1d2ec <__restore_core_regs>

0001cbe0 <_Unwind_GetCFA>:
   1cbe0:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1cbe2:	4770      	bx	lr

0001cbe4 <__gnu_Unwind_RaiseException>:
   1cbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbe6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1cbe8:	640b      	str	r3, [r1, #64]	; 0x40
   1cbea:	1d0e      	adds	r6, r1, #4
   1cbec:	460f      	mov	r7, r1
   1cbee:	4604      	mov	r4, r0
   1cbf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cbf2:	b0f9      	sub	sp, #484	; 0x1e4
   1cbf4:	ad01      	add	r5, sp, #4
   1cbf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cbf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cbfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cbfc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cbfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cc00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cc04:	f04f 36ff 	mov.w	r6, #4294967295
   1cc08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1cc0c:	9600      	str	r6, [sp, #0]
   1cc0e:	e006      	b.n	1cc1e <__gnu_Unwind_RaiseException+0x3a>
   1cc10:	6923      	ldr	r3, [r4, #16]
   1cc12:	466a      	mov	r2, sp
   1cc14:	4621      	mov	r1, r4
   1cc16:	4798      	blx	r3
   1cc18:	2808      	cmp	r0, #8
   1cc1a:	4605      	mov	r5, r0
   1cc1c:	d108      	bne.n	1cc30 <__gnu_Unwind_RaiseException+0x4c>
   1cc1e:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cc20:	4620      	mov	r0, r4
   1cc22:	f7ff fecb 	bl	1c9bc <get_eit_entry>
   1cc26:	2800      	cmp	r0, #0
   1cc28:	d0f2      	beq.n	1cc10 <__gnu_Unwind_RaiseException+0x2c>
   1cc2a:	2009      	movs	r0, #9
   1cc2c:	b079      	add	sp, #484	; 0x1e4
   1cc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc30:	4668      	mov	r0, sp
   1cc32:	f7ff ff13 	bl	1ca5c <restore_non_core_regs>
   1cc36:	2d06      	cmp	r5, #6
   1cc38:	d1f7      	bne.n	1cc2a <__gnu_Unwind_RaiseException+0x46>
   1cc3a:	4639      	mov	r1, r7
   1cc3c:	4620      	mov	r0, r4
   1cc3e:	f7ff ff43 	bl	1cac8 <unwind_phase2>
   1cc42:	bf00      	nop

0001cc44 <__gnu_Unwind_ForcedUnwind>:
   1cc44:	b430      	push	{r4, r5}
   1cc46:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1cc48:	60c1      	str	r1, [r0, #12]
   1cc4a:	6182      	str	r2, [r0, #24]
   1cc4c:	4619      	mov	r1, r3
   1cc4e:	641d      	str	r5, [r3, #64]	; 0x40
   1cc50:	2200      	movs	r2, #0
   1cc52:	bc30      	pop	{r4, r5}
   1cc54:	e758      	b.n	1cb08 <unwind_phase2_forced>
   1cc56:	bf00      	nop

0001cc58 <__gnu_Unwind_Resume>:
   1cc58:	b570      	push	{r4, r5, r6, lr}
   1cc5a:	68c6      	ldr	r6, [r0, #12]
   1cc5c:	6943      	ldr	r3, [r0, #20]
   1cc5e:	640b      	str	r3, [r1, #64]	; 0x40
   1cc60:	b126      	cbz	r6, 1cc6c <__gnu_Unwind_Resume+0x14>
   1cc62:	2201      	movs	r2, #1
   1cc64:	f7ff ff50 	bl	1cb08 <unwind_phase2_forced>
   1cc68:	f000 fdd8 	bl	1d81c <abort>
   1cc6c:	6903      	ldr	r3, [r0, #16]
   1cc6e:	460a      	mov	r2, r1
   1cc70:	4604      	mov	r4, r0
   1cc72:	460d      	mov	r5, r1
   1cc74:	4601      	mov	r1, r0
   1cc76:	2002      	movs	r0, #2
   1cc78:	4798      	blx	r3
   1cc7a:	2807      	cmp	r0, #7
   1cc7c:	d007      	beq.n	1cc8e <__gnu_Unwind_Resume+0x36>
   1cc7e:	2808      	cmp	r0, #8
   1cc80:	d103      	bne.n	1cc8a <__gnu_Unwind_Resume+0x32>
   1cc82:	4629      	mov	r1, r5
   1cc84:	4620      	mov	r0, r4
   1cc86:	f7ff ff1f 	bl	1cac8 <unwind_phase2>
   1cc8a:	f000 fdc7 	bl	1d81c <abort>
   1cc8e:	4630      	mov	r0, r6
   1cc90:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cc92:	f7ff ff17 	bl	1cac4 <_Unwind_DebugHook>
   1cc96:	1d28      	adds	r0, r5, #4
   1cc98:	f000 fb28 	bl	1d2ec <__restore_core_regs>

0001cc9c <__gnu_Unwind_Resume_or_Rethrow>:
   1cc9c:	68c2      	ldr	r2, [r0, #12]
   1cc9e:	b11a      	cbz	r2, 1cca8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1cca0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1cca2:	640a      	str	r2, [r1, #64]	; 0x40
   1cca4:	2200      	movs	r2, #0
   1cca6:	e72f      	b.n	1cb08 <unwind_phase2_forced>
   1cca8:	e79c      	b.n	1cbe4 <__gnu_Unwind_RaiseException>
   1ccaa:	bf00      	nop

0001ccac <_Unwind_Complete>:
   1ccac:	4770      	bx	lr
   1ccae:	bf00      	nop

0001ccb0 <_Unwind_DeleteException>:
   1ccb0:	6883      	ldr	r3, [r0, #8]
   1ccb2:	b113      	cbz	r3, 1ccba <_Unwind_DeleteException+0xa>
   1ccb4:	4601      	mov	r1, r0
   1ccb6:	2001      	movs	r0, #1
   1ccb8:	4718      	bx	r3
   1ccba:	4770      	bx	lr

0001ccbc <_Unwind_VRS_Get>:
   1ccbc:	b500      	push	{lr}
   1ccbe:	2904      	cmp	r1, #4
   1ccc0:	d807      	bhi.n	1ccd2 <_Unwind_VRS_Get+0x16>
   1ccc2:	e8df f001 	tbb	[pc, r1]
   1ccc6:	0903      	.short	0x0903
   1ccc8:	0906      	.short	0x0906
   1ccca:	09          	.byte	0x09
   1cccb:	00          	.byte	0x00
   1cccc:	b90b      	cbnz	r3, 1ccd2 <_Unwind_VRS_Get+0x16>
   1ccce:	2a0f      	cmp	r2, #15
   1ccd0:	d905      	bls.n	1ccde <_Unwind_VRS_Get+0x22>
   1ccd2:	2002      	movs	r0, #2
   1ccd4:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccd8:	2001      	movs	r0, #1
   1ccda:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccde:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cce2:	4618      	mov	r0, r3
   1cce4:	6853      	ldr	r3, [r2, #4]
   1cce6:	9a01      	ldr	r2, [sp, #4]
   1cce8:	6013      	str	r3, [r2, #0]
   1ccea:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccee:	bf00      	nop

0001ccf0 <_Unwind_GetGR>:
   1ccf0:	b510      	push	{r4, lr}
   1ccf2:	b084      	sub	sp, #16
   1ccf4:	2300      	movs	r3, #0
   1ccf6:	ac03      	add	r4, sp, #12
   1ccf8:	460a      	mov	r2, r1
   1ccfa:	9400      	str	r4, [sp, #0]
   1ccfc:	4619      	mov	r1, r3
   1ccfe:	f7ff ffdd 	bl	1ccbc <_Unwind_VRS_Get>
   1cd02:	9803      	ldr	r0, [sp, #12]
   1cd04:	b004      	add	sp, #16
   1cd06:	bd10      	pop	{r4, pc}

0001cd08 <_Unwind_VRS_Set>:
   1cd08:	b500      	push	{lr}
   1cd0a:	2904      	cmp	r1, #4
   1cd0c:	d807      	bhi.n	1cd1e <_Unwind_VRS_Set+0x16>
   1cd0e:	e8df f001 	tbb	[pc, r1]
   1cd12:	0903      	.short	0x0903
   1cd14:	0906      	.short	0x0906
   1cd16:	09          	.byte	0x09
   1cd17:	00          	.byte	0x00
   1cd18:	b90b      	cbnz	r3, 1cd1e <_Unwind_VRS_Set+0x16>
   1cd1a:	2a0f      	cmp	r2, #15
   1cd1c:	d905      	bls.n	1cd2a <_Unwind_VRS_Set+0x22>
   1cd1e:	2002      	movs	r0, #2
   1cd20:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd24:	2001      	movs	r0, #1
   1cd26:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd2a:	9901      	ldr	r1, [sp, #4]
   1cd2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cd30:	6809      	ldr	r1, [r1, #0]
   1cd32:	6051      	str	r1, [r2, #4]
   1cd34:	4618      	mov	r0, r3
   1cd36:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd3a:	bf00      	nop

0001cd3c <_Unwind_SetGR>:
   1cd3c:	b510      	push	{r4, lr}
   1cd3e:	b084      	sub	sp, #16
   1cd40:	ac04      	add	r4, sp, #16
   1cd42:	2300      	movs	r3, #0
   1cd44:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cd48:	460a      	mov	r2, r1
   1cd4a:	9400      	str	r4, [sp, #0]
   1cd4c:	4619      	mov	r1, r3
   1cd4e:	f7ff ffdb 	bl	1cd08 <_Unwind_VRS_Set>
   1cd52:	b004      	add	sp, #16
   1cd54:	bd10      	pop	{r4, pc}
   1cd56:	bf00      	nop

0001cd58 <__gnu_Unwind_Backtrace>:
   1cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd5a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cd5c:	6413      	str	r3, [r2, #64]	; 0x40
   1cd5e:	1d15      	adds	r5, r2, #4
   1cd60:	4607      	mov	r7, r0
   1cd62:	460e      	mov	r6, r1
   1cd64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cd66:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1cd6a:	ac17      	add	r4, sp, #92	; 0x5c
   1cd6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cd6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cd70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cd72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cd74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cd76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cd7a:	f04f 35ff 	mov.w	r5, #4294967295
   1cd7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cd82:	9516      	str	r5, [sp, #88]	; 0x58
   1cd84:	e010      	b.n	1cda8 <__gnu_Unwind_Backtrace+0x50>
   1cd86:	a816      	add	r0, sp, #88	; 0x58
   1cd88:	f7ff ffd8 	bl	1cd3c <_Unwind_SetGR>
   1cd8c:	4631      	mov	r1, r6
   1cd8e:	a816      	add	r0, sp, #88	; 0x58
   1cd90:	47b8      	blx	r7
   1cd92:	aa16      	add	r2, sp, #88	; 0x58
   1cd94:	4669      	mov	r1, sp
   1cd96:	b978      	cbnz	r0, 1cdb8 <__gnu_Unwind_Backtrace+0x60>
   1cd98:	9b04      	ldr	r3, [sp, #16]
   1cd9a:	2008      	movs	r0, #8
   1cd9c:	4798      	blx	r3
   1cd9e:	2805      	cmp	r0, #5
   1cda0:	4604      	mov	r4, r0
   1cda2:	d00a      	beq.n	1cdba <__gnu_Unwind_Backtrace+0x62>
   1cda4:	2809      	cmp	r0, #9
   1cda6:	d007      	beq.n	1cdb8 <__gnu_Unwind_Backtrace+0x60>
   1cda8:	9926      	ldr	r1, [sp, #152]	; 0x98
   1cdaa:	4668      	mov	r0, sp
   1cdac:	f7ff fe06 	bl	1c9bc <get_eit_entry>
   1cdb0:	466a      	mov	r2, sp
   1cdb2:	210c      	movs	r1, #12
   1cdb4:	2800      	cmp	r0, #0
   1cdb6:	d0e6      	beq.n	1cd86 <__gnu_Unwind_Backtrace+0x2e>
   1cdb8:	2409      	movs	r4, #9
   1cdba:	a816      	add	r0, sp, #88	; 0x58
   1cdbc:	f7ff fe4e 	bl	1ca5c <restore_non_core_regs>
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1cdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cdc8 <__gnu_unwind_pr_common>:
   1cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdcc:	460d      	mov	r5, r1
   1cdce:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1cdd0:	b08b      	sub	sp, #44	; 0x2c
   1cdd2:	1d0c      	adds	r4, r1, #4
   1cdd4:	6809      	ldr	r1, [r1, #0]
   1cdd6:	9107      	str	r1, [sp, #28]
   1cdd8:	4691      	mov	r9, r2
   1cdda:	9408      	str	r4, [sp, #32]
   1cddc:	f000 0b03 	and.w	fp, r0, #3
   1cde0:	461e      	mov	r6, r3
   1cde2:	2b00      	cmp	r3, #0
   1cde4:	d160      	bne.n	1cea8 <__gnu_unwind_pr_common+0xe0>
   1cde6:	0209      	lsls	r1, r1, #8
   1cde8:	2303      	movs	r3, #3
   1cdea:	9107      	str	r1, [sp, #28]
   1cdec:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1cdf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cdf4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cdf6:	f1bb 0f02 	cmp.w	fp, #2
   1cdfa:	bf08      	it	eq
   1cdfc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1cdfe:	f013 0301 	ands.w	r3, r3, #1
   1ce02:	d140      	bne.n	1ce86 <__gnu_unwind_pr_common+0xbe>
   1ce04:	9301      	str	r3, [sp, #4]
   1ce06:	f000 0308 	and.w	r3, r0, #8
   1ce0a:	9303      	str	r3, [sp, #12]
   1ce0c:	f8d4 8000 	ldr.w	r8, [r4]
   1ce10:	f1b8 0f00 	cmp.w	r8, #0
   1ce14:	d039      	beq.n	1ce8a <__gnu_unwind_pr_common+0xc2>
   1ce16:	2e02      	cmp	r6, #2
   1ce18:	d043      	beq.n	1cea2 <__gnu_unwind_pr_common+0xda>
   1ce1a:	f8b4 8000 	ldrh.w	r8, [r4]
   1ce1e:	8867      	ldrh	r7, [r4, #2]
   1ce20:	3404      	adds	r4, #4
   1ce22:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1ce24:	f027 0a01 	bic.w	sl, r7, #1
   1ce28:	210f      	movs	r1, #15
   1ce2a:	4648      	mov	r0, r9
   1ce2c:	449a      	add	sl, r3
   1ce2e:	f7ff ff5f 	bl	1ccf0 <_Unwind_GetGR>
   1ce32:	4582      	cmp	sl, r0
   1ce34:	d833      	bhi.n	1ce9e <__gnu_unwind_pr_common+0xd6>
   1ce36:	f028 0301 	bic.w	r3, r8, #1
   1ce3a:	449a      	add	sl, r3
   1ce3c:	4550      	cmp	r0, sl
   1ce3e:	bf2c      	ite	cs
   1ce40:	2000      	movcs	r0, #0
   1ce42:	2001      	movcc	r0, #1
   1ce44:	007f      	lsls	r7, r7, #1
   1ce46:	f007 0702 	and.w	r7, r7, #2
   1ce4a:	f008 0801 	and.w	r8, r8, #1
   1ce4e:	ea47 0708 	orr.w	r7, r7, r8
   1ce52:	2f01      	cmp	r7, #1
   1ce54:	d03e      	beq.n	1ced4 <__gnu_unwind_pr_common+0x10c>
   1ce56:	d335      	bcc.n	1cec4 <__gnu_unwind_pr_common+0xfc>
   1ce58:	2f02      	cmp	r7, #2
   1ce5a:	d11c      	bne.n	1ce96 <__gnu_unwind_pr_common+0xce>
   1ce5c:	6823      	ldr	r3, [r4, #0]
   1ce5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1ce62:	9202      	str	r2, [sp, #8]
   1ce64:	f1bb 0f00 	cmp.w	fp, #0
   1ce68:	d176      	bne.n	1cf58 <__gnu_unwind_pr_common+0x190>
   1ce6a:	b128      	cbz	r0, 1ce78 <__gnu_unwind_pr_common+0xb0>
   1ce6c:	9903      	ldr	r1, [sp, #12]
   1ce6e:	2900      	cmp	r1, #0
   1ce70:	d07e      	beq.n	1cf70 <__gnu_unwind_pr_common+0x1a8>
   1ce72:	2a00      	cmp	r2, #0
   1ce74:	f000 80a6 	beq.w	1cfc4 <__gnu_unwind_pr_common+0x1fc>
   1ce78:	2b00      	cmp	r3, #0
   1ce7a:	db77      	blt.n	1cf6c <__gnu_unwind_pr_common+0x1a4>
   1ce7c:	9b02      	ldr	r3, [sp, #8]
   1ce7e:	3301      	adds	r3, #1
   1ce80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1ce84:	e7c2      	b.n	1ce0c <__gnu_unwind_pr_common+0x44>
   1ce86:	2300      	movs	r3, #0
   1ce88:	9301      	str	r3, [sp, #4]
   1ce8a:	2e02      	cmp	r6, #2
   1ce8c:	dd3e      	ble.n	1cf0c <__gnu_unwind_pr_common+0x144>
   1ce8e:	f7ff fe17 	bl	1cac0 <__gnu_unwind_24bit.isra.1>
   1ce92:	2800      	cmp	r0, #0
   1ce94:	d040      	beq.n	1cf18 <__gnu_unwind_pr_common+0x150>
   1ce96:	2009      	movs	r0, #9
   1ce98:	b00b      	add	sp, #44	; 0x2c
   1ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce9e:	2000      	movs	r0, #0
   1cea0:	e7d0      	b.n	1ce44 <__gnu_unwind_pr_common+0x7c>
   1cea2:	6867      	ldr	r7, [r4, #4]
   1cea4:	3408      	adds	r4, #8
   1cea6:	e7bc      	b.n	1ce22 <__gnu_unwind_pr_common+0x5a>
   1cea8:	2b02      	cmp	r3, #2
   1ceaa:	dca3      	bgt.n	1cdf4 <__gnu_unwind_pr_common+0x2c>
   1ceac:	0c0b      	lsrs	r3, r1, #16
   1ceae:	b2da      	uxtb	r2, r3
   1ceb0:	0409      	lsls	r1, r1, #16
   1ceb2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1ceb6:	2302      	movs	r3, #2
   1ceb8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1cebc:	9107      	str	r1, [sp, #28]
   1cebe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cec2:	e797      	b.n	1cdf4 <__gnu_unwind_pr_common+0x2c>
   1cec4:	f1bb 0f00 	cmp.w	fp, #0
   1cec8:	d002      	beq.n	1ced0 <__gnu_unwind_pr_common+0x108>
   1ceca:	2800      	cmp	r0, #0
   1cecc:	f040 80bd 	bne.w	1d04a <__gnu_unwind_pr_common+0x282>
   1ced0:	3404      	adds	r4, #4
   1ced2:	e79b      	b.n	1ce0c <__gnu_unwind_pr_common+0x44>
   1ced4:	f1bb 0f00 	cmp.w	fp, #0
   1ced8:	d125      	bne.n	1cf26 <__gnu_unwind_pr_common+0x15e>
   1ceda:	b1a8      	cbz	r0, 1cf08 <__gnu_unwind_pr_common+0x140>
   1cedc:	e894 000c 	ldmia.w	r4, {r2, r3}
   1cee0:	1c99      	adds	r1, r3, #2
   1cee2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1cee6:	d0d6      	beq.n	1ce96 <__gnu_unwind_pr_common+0xce>
   1cee8:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1ceec:	3301      	adds	r3, #1
   1ceee:	9106      	str	r1, [sp, #24]
   1cef0:	f000 80a3 	beq.w	1d03a <__gnu_unwind_pr_common+0x272>
   1cef4:	1d20      	adds	r0, r4, #4
   1cef6:	f7ff fddd 	bl	1cab4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1cefa:	ab06      	add	r3, sp, #24
   1cefc:	4601      	mov	r1, r0
   1cefe:	4628      	mov	r0, r5
   1cf00:	f7f6 fe00 	bl	13b04 <__cxa_type_match>
   1cf04:	2800      	cmp	r0, #0
   1cf06:	d177      	bne.n	1cff8 <__gnu_unwind_pr_common+0x230>
   1cf08:	3408      	adds	r4, #8
   1cf0a:	e77f      	b.n	1ce0c <__gnu_unwind_pr_common+0x44>
   1cf0c:	a907      	add	r1, sp, #28
   1cf0e:	4648      	mov	r0, r9
   1cf10:	f000 faee 	bl	1d4f0 <__gnu_unwind_execute>
   1cf14:	2800      	cmp	r0, #0
   1cf16:	d1be      	bne.n	1ce96 <__gnu_unwind_pr_common+0xce>
   1cf18:	9b01      	ldr	r3, [sp, #4]
   1cf1a:	2b00      	cmp	r3, #0
   1cf1c:	d15c      	bne.n	1cfd8 <__gnu_unwind_pr_common+0x210>
   1cf1e:	2008      	movs	r0, #8
   1cf20:	b00b      	add	sp, #44	; 0x2c
   1cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf26:	210d      	movs	r1, #13
   1cf28:	4648      	mov	r0, r9
   1cf2a:	6a2f      	ldr	r7, [r5, #32]
   1cf2c:	f7ff fee0 	bl	1ccf0 <_Unwind_GetGR>
   1cf30:	4287      	cmp	r7, r0
   1cf32:	d1e9      	bne.n	1cf08 <__gnu_unwind_pr_common+0x140>
   1cf34:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cf36:	429c      	cmp	r4, r3
   1cf38:	d1e6      	bne.n	1cf08 <__gnu_unwind_pr_common+0x140>
   1cf3a:	4620      	mov	r0, r4
   1cf3c:	f7ff fcf0 	bl	1c920 <selfrel_offset31>
   1cf40:	210f      	movs	r1, #15
   1cf42:	4602      	mov	r2, r0
   1cf44:	4648      	mov	r0, r9
   1cf46:	f7ff fef9 	bl	1cd3c <_Unwind_SetGR>
   1cf4a:	4648      	mov	r0, r9
   1cf4c:	462a      	mov	r2, r5
   1cf4e:	2100      	movs	r1, #0
   1cf50:	f7ff fef4 	bl	1cd3c <_Unwind_SetGR>
   1cf54:	2007      	movs	r0, #7
   1cf56:	e79f      	b.n	1ce98 <__gnu_unwind_pr_common+0xd0>
   1cf58:	210d      	movs	r1, #13
   1cf5a:	4648      	mov	r0, r9
   1cf5c:	6a2f      	ldr	r7, [r5, #32]
   1cf5e:	f7ff fec7 	bl	1ccf0 <_Unwind_GetGR>
   1cf62:	4287      	cmp	r7, r0
   1cf64:	d058      	beq.n	1d018 <__gnu_unwind_pr_common+0x250>
   1cf66:	6823      	ldr	r3, [r4, #0]
   1cf68:	2b00      	cmp	r3, #0
   1cf6a:	da87      	bge.n	1ce7c <__gnu_unwind_pr_common+0xb4>
   1cf6c:	3404      	adds	r4, #4
   1cf6e:	e785      	b.n	1ce7c <__gnu_unwind_pr_common+0xb4>
   1cf70:	9b02      	ldr	r3, [sp, #8]
   1cf72:	b33b      	cbz	r3, 1cfc4 <__gnu_unwind_pr_common+0x1fc>
   1cf74:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cf78:	1d27      	adds	r7, r4, #4
   1cf7a:	f8cd b010 	str.w	fp, [sp, #16]
   1cf7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cf82:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cf86:	9605      	str	r6, [sp, #20]
   1cf88:	46a3      	mov	fp, r4
   1cf8a:	461c      	mov	r4, r3
   1cf8c:	e002      	b.n	1cf94 <__gnu_unwind_pr_common+0x1cc>
   1cf8e:	45b2      	cmp	sl, r6
   1cf90:	46b0      	mov	r8, r6
   1cf92:	d016      	beq.n	1cfc2 <__gnu_unwind_pr_common+0x1fa>
   1cf94:	4638      	mov	r0, r7
   1cf96:	9406      	str	r4, [sp, #24]
   1cf98:	f7ff fd8c 	bl	1cab4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1cf9c:	ab06      	add	r3, sp, #24
   1cf9e:	4601      	mov	r1, r0
   1cfa0:	2200      	movs	r2, #0
   1cfa2:	4628      	mov	r0, r5
   1cfa4:	f7f6 fdae 	bl	13b04 <__cxa_type_match>
   1cfa8:	f108 0601 	add.w	r6, r8, #1
   1cfac:	3704      	adds	r7, #4
   1cfae:	2800      	cmp	r0, #0
   1cfb0:	d0ed      	beq.n	1cf8e <__gnu_unwind_pr_common+0x1c6>
   1cfb2:	9b02      	ldr	r3, [sp, #8]
   1cfb4:	9e05      	ldr	r6, [sp, #20]
   1cfb6:	4543      	cmp	r3, r8
   1cfb8:	465c      	mov	r4, fp
   1cfba:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cfbe:	d1d2      	bne.n	1cf66 <__gnu_unwind_pr_common+0x19e>
   1cfc0:	e000      	b.n	1cfc4 <__gnu_unwind_pr_common+0x1fc>
   1cfc2:	465c      	mov	r4, fp
   1cfc4:	4648      	mov	r0, r9
   1cfc6:	210d      	movs	r1, #13
   1cfc8:	f7ff fe92 	bl	1ccf0 <_Unwind_GetGR>
   1cfcc:	9b06      	ldr	r3, [sp, #24]
   1cfce:	6228      	str	r0, [r5, #32]
   1cfd0:	62ac      	str	r4, [r5, #40]	; 0x28
   1cfd2:	626b      	str	r3, [r5, #36]	; 0x24
   1cfd4:	2006      	movs	r0, #6
   1cfd6:	e75f      	b.n	1ce98 <__gnu_unwind_pr_common+0xd0>
   1cfd8:	210f      	movs	r1, #15
   1cfda:	4648      	mov	r0, r9
   1cfdc:	f7ff fe88 	bl	1ccf0 <_Unwind_GetGR>
   1cfe0:	210e      	movs	r1, #14
   1cfe2:	4602      	mov	r2, r0
   1cfe4:	4648      	mov	r0, r9
   1cfe6:	f7ff fea9 	bl	1cd3c <_Unwind_SetGR>
   1cfea:	4648      	mov	r0, r9
   1cfec:	4a29      	ldr	r2, [pc, #164]	; (1d094 <__gnu_unwind_pr_common+0x2cc>)
   1cfee:	210f      	movs	r1, #15
   1cff0:	f7ff fea4 	bl	1cd3c <_Unwind_SetGR>
   1cff4:	2007      	movs	r0, #7
   1cff6:	e74f      	b.n	1ce98 <__gnu_unwind_pr_common+0xd0>
   1cff8:	4607      	mov	r7, r0
   1cffa:	210d      	movs	r1, #13
   1cffc:	4648      	mov	r0, r9
   1cffe:	f7ff fe77 	bl	1ccf0 <_Unwind_GetGR>
   1d002:	2f02      	cmp	r7, #2
   1d004:	6228      	str	r0, [r5, #32]
   1d006:	d11d      	bne.n	1d044 <__gnu_unwind_pr_common+0x27c>
   1d008:	462b      	mov	r3, r5
   1d00a:	9a06      	ldr	r2, [sp, #24]
   1d00c:	f843 2f2c 	str.w	r2, [r3, #44]!
   1d010:	626b      	str	r3, [r5, #36]	; 0x24
   1d012:	62ac      	str	r4, [r5, #40]	; 0x28
   1d014:	2006      	movs	r0, #6
   1d016:	e73f      	b.n	1ce98 <__gnu_unwind_pr_common+0xd0>
   1d018:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d01a:	429c      	cmp	r4, r3
   1d01c:	d1a3      	bne.n	1cf66 <__gnu_unwind_pr_common+0x19e>
   1d01e:	2204      	movs	r2, #4
   1d020:	2700      	movs	r7, #0
   1d022:	18a3      	adds	r3, r4, r2
   1d024:	9902      	ldr	r1, [sp, #8]
   1d026:	62a9      	str	r1, [r5, #40]	; 0x28
   1d028:	62ef      	str	r7, [r5, #44]	; 0x2c
   1d02a:	632a      	str	r2, [r5, #48]	; 0x30
   1d02c:	636b      	str	r3, [r5, #52]	; 0x34
   1d02e:	6823      	ldr	r3, [r4, #0]
   1d030:	42bb      	cmp	r3, r7
   1d032:	db1d      	blt.n	1d070 <__gnu_unwind_pr_common+0x2a8>
   1d034:	2301      	movs	r3, #1
   1d036:	9301      	str	r3, [sp, #4]
   1d038:	e720      	b.n	1ce7c <__gnu_unwind_pr_common+0xb4>
   1d03a:	4648      	mov	r0, r9
   1d03c:	210d      	movs	r1, #13
   1d03e:	f7ff fe57 	bl	1ccf0 <_Unwind_GetGR>
   1d042:	6228      	str	r0, [r5, #32]
   1d044:	9b06      	ldr	r3, [sp, #24]
   1d046:	626b      	str	r3, [r5, #36]	; 0x24
   1d048:	e7e3      	b.n	1d012 <__gnu_unwind_pr_common+0x24a>
   1d04a:	4620      	mov	r0, r4
   1d04c:	f7ff fc68 	bl	1c920 <selfrel_offset31>
   1d050:	3404      	adds	r4, #4
   1d052:	4606      	mov	r6, r0
   1d054:	63ac      	str	r4, [r5, #56]	; 0x38
   1d056:	4628      	mov	r0, r5
   1d058:	f7f6 fdb0 	bl	13bbc <__cxa_begin_cleanup>
   1d05c:	2800      	cmp	r0, #0
   1d05e:	f43f af1a 	beq.w	1ce96 <__gnu_unwind_pr_common+0xce>
   1d062:	4648      	mov	r0, r9
   1d064:	4632      	mov	r2, r6
   1d066:	210f      	movs	r1, #15
   1d068:	f7ff fe68 	bl	1cd3c <_Unwind_SetGR>
   1d06c:	2007      	movs	r0, #7
   1d06e:	e713      	b.n	1ce98 <__gnu_unwind_pr_common+0xd0>
   1d070:	4608      	mov	r0, r1
   1d072:	3001      	adds	r0, #1
   1d074:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1d078:	f7ff fc52 	bl	1c920 <selfrel_offset31>
   1d07c:	210f      	movs	r1, #15
   1d07e:	4602      	mov	r2, r0
   1d080:	4648      	mov	r0, r9
   1d082:	f7ff fe5b 	bl	1cd3c <_Unwind_SetGR>
   1d086:	4648      	mov	r0, r9
   1d088:	462a      	mov	r2, r5
   1d08a:	4639      	mov	r1, r7
   1d08c:	f7ff fe56 	bl	1cd3c <_Unwind_SetGR>
   1d090:	2007      	movs	r0, #7
   1d092:	e701      	b.n	1ce98 <__gnu_unwind_pr_common+0xd0>
   1d094:	00013ced 	.word	0x00013ced

0001d098 <__aeabi_unwind_cpp_pr0>:
   1d098:	2300      	movs	r3, #0
   1d09a:	e695      	b.n	1cdc8 <__gnu_unwind_pr_common>

0001d09c <__aeabi_unwind_cpp_pr1>:
   1d09c:	2301      	movs	r3, #1
   1d09e:	e693      	b.n	1cdc8 <__gnu_unwind_pr_common>

0001d0a0 <__aeabi_unwind_cpp_pr2>:
   1d0a0:	2302      	movs	r3, #2
   1d0a2:	e691      	b.n	1cdc8 <__gnu_unwind_pr_common>

0001d0a4 <_Unwind_VRS_Pop>:
   1d0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0a6:	4604      	mov	r4, r0
   1d0a8:	b0c5      	sub	sp, #276	; 0x114
   1d0aa:	2904      	cmp	r1, #4
   1d0ac:	d80d      	bhi.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d0ae:	e8df f001 	tbb	[pc, r1]
   1d0b2:	0353      	.short	0x0353
   1d0b4:	310c      	.short	0x310c
   1d0b6:	0f          	.byte	0x0f
   1d0b7:	00          	.byte	0x00
   1d0b8:	2b01      	cmp	r3, #1
   1d0ba:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1d0be:	b295      	uxth	r5, r2
   1d0c0:	d162      	bne.n	1d188 <_Unwind_VRS_Pop+0xe4>
   1d0c2:	1972      	adds	r2, r6, r5
   1d0c4:	2a10      	cmp	r2, #16
   1d0c6:	f240 809b 	bls.w	1d200 <_Unwind_VRS_Pop+0x15c>
   1d0ca:	2002      	movs	r0, #2
   1d0cc:	b045      	add	sp, #276	; 0x114
   1d0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d0d0:	2b00      	cmp	r3, #0
   1d0d2:	d1fa      	bne.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d0d4:	2a10      	cmp	r2, #16
   1d0d6:	d8f8      	bhi.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d0d8:	6823      	ldr	r3, [r4, #0]
   1d0da:	06d8      	lsls	r0, r3, #27
   1d0dc:	f100 80c6 	bmi.w	1d26c <_Unwind_VRS_Pop+0x1c8>
   1d0e0:	ae22      	add	r6, sp, #136	; 0x88
   1d0e2:	4630      	mov	r0, r6
   1d0e4:	9201      	str	r2, [sp, #4]
   1d0e6:	f000 f973 	bl	1d3d0 <__gnu_Unwind_Save_WMMXC>
   1d0ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d0ec:	9a01      	ldr	r2, [sp, #4]
   1d0ee:	2300      	movs	r3, #0
   1d0f0:	2501      	movs	r5, #1
   1d0f2:	fa05 f103 	lsl.w	r1, r5, r3
   1d0f6:	4211      	tst	r1, r2
   1d0f8:	d003      	beq.n	1d102 <_Unwind_VRS_Pop+0x5e>
   1d0fa:	6801      	ldr	r1, [r0, #0]
   1d0fc:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1d100:	3004      	adds	r0, #4
   1d102:	3301      	adds	r3, #1
   1d104:	2b04      	cmp	r3, #4
   1d106:	d1f4      	bne.n	1d0f2 <_Unwind_VRS_Pop+0x4e>
   1d108:	63a0      	str	r0, [r4, #56]	; 0x38
   1d10a:	4630      	mov	r0, r6
   1d10c:	f000 f956 	bl	1d3bc <__gnu_Unwind_Restore_WMMXC>
   1d110:	2000      	movs	r0, #0
   1d112:	e7db      	b.n	1d0cc <_Unwind_VRS_Pop+0x28>
   1d114:	2b03      	cmp	r3, #3
   1d116:	d1d8      	bne.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d118:	0c15      	lsrs	r5, r2, #16
   1d11a:	b297      	uxth	r7, r2
   1d11c:	19eb      	adds	r3, r5, r7
   1d11e:	2b10      	cmp	r3, #16
   1d120:	d8d3      	bhi.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d122:	6823      	ldr	r3, [r4, #0]
   1d124:	071e      	lsls	r6, r3, #28
   1d126:	f100 80b5 	bmi.w	1d294 <_Unwind_VRS_Pop+0x1f0>
   1d12a:	ae22      	add	r6, sp, #136	; 0x88
   1d12c:	4630      	mov	r0, r6
   1d12e:	f000 f923 	bl	1d378 <__gnu_Unwind_Save_WMMXD>
   1d132:	00ed      	lsls	r5, r5, #3
   1d134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d136:	b14f      	cbz	r7, 1d14c <_Unwind_VRS_Pop+0xa8>
   1d138:	3d04      	subs	r5, #4
   1d13a:	1971      	adds	r1, r6, r5
   1d13c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1d140:	f853 2b04 	ldr.w	r2, [r3], #4
   1d144:	f841 2f04 	str.w	r2, [r1, #4]!
   1d148:	4283      	cmp	r3, r0
   1d14a:	d1f9      	bne.n	1d140 <_Unwind_VRS_Pop+0x9c>
   1d14c:	4630      	mov	r0, r6
   1d14e:	63a3      	str	r3, [r4, #56]	; 0x38
   1d150:	f000 f8f0 	bl	1d334 <__gnu_Unwind_Restore_WMMXD>
   1d154:	2000      	movs	r0, #0
   1d156:	e7b9      	b.n	1d0cc <_Unwind_VRS_Pop+0x28>
   1d158:	2b00      	cmp	r3, #0
   1d15a:	d1b6      	bne.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d15c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1d15e:	b297      	uxth	r7, r2
   1d160:	1d20      	adds	r0, r4, #4
   1d162:	2601      	movs	r6, #1
   1d164:	fa06 f103 	lsl.w	r1, r6, r3
   1d168:	4239      	tst	r1, r7
   1d16a:	f103 0301 	add.w	r3, r3, #1
   1d16e:	d002      	beq.n	1d176 <_Unwind_VRS_Pop+0xd2>
   1d170:	6829      	ldr	r1, [r5, #0]
   1d172:	6001      	str	r1, [r0, #0]
   1d174:	3504      	adds	r5, #4
   1d176:	2b10      	cmp	r3, #16
   1d178:	f100 0004 	add.w	r0, r0, #4
   1d17c:	d1f2      	bne.n	1d164 <_Unwind_VRS_Pop+0xc0>
   1d17e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1d182:	d13b      	bne.n	1d1fc <_Unwind_VRS_Pop+0x158>
   1d184:	63a5      	str	r5, [r4, #56]	; 0x38
   1d186:	e7a1      	b.n	1d0cc <_Unwind_VRS_Pop+0x28>
   1d188:	2b05      	cmp	r3, #5
   1d18a:	d19e      	bne.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d18c:	1977      	adds	r7, r6, r5
   1d18e:	2f20      	cmp	r7, #32
   1d190:	d89b      	bhi.n	1d0ca <_Unwind_VRS_Pop+0x26>
   1d192:	2e0f      	cmp	r6, #15
   1d194:	d966      	bls.n	1d264 <_Unwind_VRS_Pop+0x1c0>
   1d196:	462f      	mov	r7, r5
   1d198:	2d00      	cmp	r5, #0
   1d19a:	d13a      	bne.n	1d212 <_Unwind_VRS_Pop+0x16e>
   1d19c:	462a      	mov	r2, r5
   1d19e:	2700      	movs	r7, #0
   1d1a0:	2a00      	cmp	r2, #0
   1d1a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d1a4:	dd72      	ble.n	1d28c <_Unwind_VRS_Pop+0x1e8>
   1d1a6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1d1aa:	4601      	mov	r1, r0
   1d1ac:	a844      	add	r0, sp, #272	; 0x110
   1d1ae:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d1b2:	388c      	subs	r0, #140	; 0x8c
   1d1b4:	f851 5b04 	ldr.w	r5, [r1], #4
   1d1b8:	f840 5f04 	str.w	r5, [r0, #4]!
   1d1bc:	4291      	cmp	r1, r2
   1d1be:	d1f9      	bne.n	1d1b4 <_Unwind_VRS_Pop+0x110>
   1d1c0:	4608      	mov	r0, r1
   1d1c2:	b197      	cbz	r7, 1d1ea <_Unwind_VRS_Pop+0x146>
   1d1c4:	2e10      	cmp	r6, #16
   1d1c6:	4632      	mov	r2, r6
   1d1c8:	a944      	add	r1, sp, #272	; 0x110
   1d1ca:	bf38      	it	cc
   1d1cc:	2210      	movcc	r2, #16
   1d1ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1d1d2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1d1d6:	0079      	lsls	r1, r7, #1
   1d1d8:	3a04      	subs	r2, #4
   1d1da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d1de:	f850 5b04 	ldr.w	r5, [r0], #4
   1d1e2:	f842 5f04 	str.w	r5, [r2, #4]!
   1d1e6:	4288      	cmp	r0, r1
   1d1e8:	d1f9      	bne.n	1d1de <_Unwind_VRS_Pop+0x13a>
   1d1ea:	2b01      	cmp	r3, #1
   1d1ec:	d048      	beq.n	1d280 <_Unwind_VRS_Pop+0x1dc>
   1d1ee:	2e0f      	cmp	r6, #15
   1d1f0:	63a1      	str	r1, [r4, #56]	; 0x38
   1d1f2:	d933      	bls.n	1d25c <_Unwind_VRS_Pop+0x1b8>
   1d1f4:	b117      	cbz	r7, 1d1fc <_Unwind_VRS_Pop+0x158>
   1d1f6:	a802      	add	r0, sp, #8
   1d1f8:	f000 f894 	bl	1d324 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d1fc:	2000      	movs	r0, #0
   1d1fe:	e765      	b.n	1d0cc <_Unwind_VRS_Pop+0x28>
   1d200:	2e0f      	cmp	r6, #15
   1d202:	f63f af62 	bhi.w	1d0ca <_Unwind_VRS_Pop+0x26>
   1d206:	2700      	movs	r7, #0
   1d208:	6822      	ldr	r2, [r4, #0]
   1d20a:	07d1      	lsls	r1, r2, #31
   1d20c:	d417      	bmi.n	1d23e <_Unwind_VRS_Pop+0x19a>
   1d20e:	2f00      	cmp	r7, #0
   1d210:	d060      	beq.n	1d2d4 <_Unwind_VRS_Pop+0x230>
   1d212:	6822      	ldr	r2, [r4, #0]
   1d214:	0751      	lsls	r1, r2, #29
   1d216:	d445      	bmi.n	1d2a4 <_Unwind_VRS_Pop+0x200>
   1d218:	2b01      	cmp	r3, #1
   1d21a:	d04d      	beq.n	1d2b8 <_Unwind_VRS_Pop+0x214>
   1d21c:	2e0f      	cmp	r6, #15
   1d21e:	d806      	bhi.n	1d22e <_Unwind_VRS_Pop+0x18a>
   1d220:	a822      	add	r0, sp, #136	; 0x88
   1d222:	9301      	str	r3, [sp, #4]
   1d224:	f000 f87a 	bl	1d31c <__gnu_Unwind_Save_VFP_D>
   1d228:	9b01      	ldr	r3, [sp, #4]
   1d22a:	2f00      	cmp	r7, #0
   1d22c:	d0b6      	beq.n	1d19c <_Unwind_VRS_Pop+0xf8>
   1d22e:	a802      	add	r0, sp, #8
   1d230:	9301      	str	r3, [sp, #4]
   1d232:	f000 f87b 	bl	1d32c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d236:	9b01      	ldr	r3, [sp, #4]
   1d238:	f1c6 0210 	rsb	r2, r6, #16
   1d23c:	e7b0      	b.n	1d1a0 <_Unwind_VRS_Pop+0xfc>
   1d23e:	f022 0101 	bic.w	r1, r2, #1
   1d242:	2b05      	cmp	r3, #5
   1d244:	6021      	str	r1, [r4, #0]
   1d246:	9301      	str	r3, [sp, #4]
   1d248:	4620      	mov	r0, r4
   1d24a:	d03b      	beq.n	1d2c4 <_Unwind_VRS_Pop+0x220>
   1d24c:	f022 0203 	bic.w	r2, r2, #3
   1d250:	f840 2b48 	str.w	r2, [r0], #72
   1d254:	f000 f85a 	bl	1d30c <__gnu_Unwind_Save_VFP>
   1d258:	9b01      	ldr	r3, [sp, #4]
   1d25a:	e7d8      	b.n	1d20e <_Unwind_VRS_Pop+0x16a>
   1d25c:	a822      	add	r0, sp, #136	; 0x88
   1d25e:	f000 f859 	bl	1d314 <__gnu_Unwind_Restore_VFP_D>
   1d262:	e7c7      	b.n	1d1f4 <_Unwind_VRS_Pop+0x150>
   1d264:	2f10      	cmp	r7, #16
   1d266:	d9ce      	bls.n	1d206 <_Unwind_VRS_Pop+0x162>
   1d268:	3f10      	subs	r7, #16
   1d26a:	e7cd      	b.n	1d208 <_Unwind_VRS_Pop+0x164>
   1d26c:	f023 0310 	bic.w	r3, r3, #16
   1d270:	6023      	str	r3, [r4, #0]
   1d272:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d276:	9201      	str	r2, [sp, #4]
   1d278:	f000 f8aa 	bl	1d3d0 <__gnu_Unwind_Save_WMMXC>
   1d27c:	9a01      	ldr	r2, [sp, #4]
   1d27e:	e72f      	b.n	1d0e0 <_Unwind_VRS_Pop+0x3c>
   1d280:	3104      	adds	r1, #4
   1d282:	63a1      	str	r1, [r4, #56]	; 0x38
   1d284:	a822      	add	r0, sp, #136	; 0x88
   1d286:	f000 f83d 	bl	1d304 <__gnu_Unwind_Restore_VFP>
   1d28a:	e7b7      	b.n	1d1fc <_Unwind_VRS_Pop+0x158>
   1d28c:	2f00      	cmp	r7, #0
   1d28e:	d199      	bne.n	1d1c4 <_Unwind_VRS_Pop+0x120>
   1d290:	4601      	mov	r1, r0
   1d292:	e7aa      	b.n	1d1ea <_Unwind_VRS_Pop+0x146>
   1d294:	f023 0308 	bic.w	r3, r3, #8
   1d298:	6023      	str	r3, [r4, #0]
   1d29a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d29e:	f000 f86b 	bl	1d378 <__gnu_Unwind_Save_WMMXD>
   1d2a2:	e742      	b.n	1d12a <_Unwind_VRS_Pop+0x86>
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	f022 0204 	bic.w	r2, r2, #4
   1d2aa:	f840 2bd0 	str.w	r2, [r0], #208
   1d2ae:	9301      	str	r3, [sp, #4]
   1d2b0:	f000 f83c 	bl	1d32c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d2b4:	9b01      	ldr	r3, [sp, #4]
   1d2b6:	e7af      	b.n	1d218 <_Unwind_VRS_Pop+0x174>
   1d2b8:	a822      	add	r0, sp, #136	; 0x88
   1d2ba:	9301      	str	r3, [sp, #4]
   1d2bc:	f000 f826 	bl	1d30c <__gnu_Unwind_Save_VFP>
   1d2c0:	9b01      	ldr	r3, [sp, #4]
   1d2c2:	e7b9      	b.n	1d238 <_Unwind_VRS_Pop+0x194>
   1d2c4:	f041 0102 	orr.w	r1, r1, #2
   1d2c8:	f840 1b48 	str.w	r1, [r0], #72
   1d2cc:	f000 f826 	bl	1d31c <__gnu_Unwind_Save_VFP_D>
   1d2d0:	9b01      	ldr	r3, [sp, #4]
   1d2d2:	e79c      	b.n	1d20e <_Unwind_VRS_Pop+0x16a>
   1d2d4:	2b01      	cmp	r3, #1
   1d2d6:	d003      	beq.n	1d2e0 <_Unwind_VRS_Pop+0x23c>
   1d2d8:	2e0f      	cmp	r6, #15
   1d2da:	f63f af5f 	bhi.w	1d19c <_Unwind_VRS_Pop+0xf8>
   1d2de:	e79f      	b.n	1d220 <_Unwind_VRS_Pop+0x17c>
   1d2e0:	a822      	add	r0, sp, #136	; 0x88
   1d2e2:	9301      	str	r3, [sp, #4]
   1d2e4:	f000 f812 	bl	1d30c <__gnu_Unwind_Save_VFP>
   1d2e8:	9b01      	ldr	r3, [sp, #4]
   1d2ea:	e757      	b.n	1d19c <_Unwind_VRS_Pop+0xf8>

0001d2ec <__restore_core_regs>:
   1d2ec:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d2f0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d2f4:	469c      	mov	ip, r3
   1d2f6:	46a6      	mov	lr, r4
   1d2f8:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d2fc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d300:	46e5      	mov	sp, ip
   1d302:	bd00      	pop	{pc}

0001d304 <__gnu_Unwind_Restore_VFP>:
   1d304:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d308:	4770      	bx	lr
   1d30a:	bf00      	nop

0001d30c <__gnu_Unwind_Save_VFP>:
   1d30c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d310:	4770      	bx	lr
   1d312:	bf00      	nop

0001d314 <__gnu_Unwind_Restore_VFP_D>:
   1d314:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d318:	4770      	bx	lr
   1d31a:	bf00      	nop

0001d31c <__gnu_Unwind_Save_VFP_D>:
   1d31c:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d320:	4770      	bx	lr
   1d322:	bf00      	nop

0001d324 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d324:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d328:	4770      	bx	lr
   1d32a:	bf00      	nop

0001d32c <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d32c:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d330:	4770      	bx	lr
   1d332:	bf00      	nop

0001d334 <__gnu_Unwind_Restore_WMMXD>:
   1d334:	ecf0 0102 	ldfe	f0, [r0], #8
   1d338:	ecf0 1102 	ldfe	f1, [r0], #8
   1d33c:	ecf0 2102 	ldfe	f2, [r0], #8
   1d340:	ecf0 3102 	ldfe	f3, [r0], #8
   1d344:	ecf0 4102 	ldfe	f4, [r0], #8
   1d348:	ecf0 5102 	ldfe	f5, [r0], #8
   1d34c:	ecf0 6102 	ldfe	f6, [r0], #8
   1d350:	ecf0 7102 	ldfe	f7, [r0], #8
   1d354:	ecf0 8102 	ldfp	f0, [r0], #8
   1d358:	ecf0 9102 	ldfp	f1, [r0], #8
   1d35c:	ecf0 a102 	ldfp	f2, [r0], #8
   1d360:	ecf0 b102 	ldfp	f3, [r0], #8
   1d364:	ecf0 c102 	ldfp	f4, [r0], #8
   1d368:	ecf0 d102 	ldfp	f5, [r0], #8
   1d36c:	ecf0 e102 	ldfp	f6, [r0], #8
   1d370:	ecf0 f102 	ldfp	f7, [r0], #8
   1d374:	4770      	bx	lr
   1d376:	bf00      	nop

0001d378 <__gnu_Unwind_Save_WMMXD>:
   1d378:	ece0 0102 	stfe	f0, [r0], #8
   1d37c:	ece0 1102 	stfe	f1, [r0], #8
   1d380:	ece0 2102 	stfe	f2, [r0], #8
   1d384:	ece0 3102 	stfe	f3, [r0], #8
   1d388:	ece0 4102 	stfe	f4, [r0], #8
   1d38c:	ece0 5102 	stfe	f5, [r0], #8
   1d390:	ece0 6102 	stfe	f6, [r0], #8
   1d394:	ece0 7102 	stfe	f7, [r0], #8
   1d398:	ece0 8102 	stfp	f0, [r0], #8
   1d39c:	ece0 9102 	stfp	f1, [r0], #8
   1d3a0:	ece0 a102 	stfp	f2, [r0], #8
   1d3a4:	ece0 b102 	stfp	f3, [r0], #8
   1d3a8:	ece0 c102 	stfp	f4, [r0], #8
   1d3ac:	ece0 d102 	stfp	f5, [r0], #8
   1d3b0:	ece0 e102 	stfp	f6, [r0], #8
   1d3b4:	ece0 f102 	stfp	f7, [r0], #8
   1d3b8:	4770      	bx	lr
   1d3ba:	bf00      	nop

0001d3bc <__gnu_Unwind_Restore_WMMXC>:
   1d3bc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d3c0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d3c4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d3c8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d3cc:	4770      	bx	lr
   1d3ce:	bf00      	nop

0001d3d0 <__gnu_Unwind_Save_WMMXC>:
   1d3d0:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d3d4:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d3d8:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d3dc:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d3e0:	4770      	bx	lr
   1d3e2:	bf00      	nop

0001d3e4 <_Unwind_RaiseException>:
   1d3e4:	46ec      	mov	ip, sp
   1d3e6:	b500      	push	{lr}
   1d3e8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d3ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d3f0:	f04f 0300 	mov.w	r3, #0
   1d3f4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d3f8:	a901      	add	r1, sp, #4
   1d3fa:	f7ff fbf3 	bl	1cbe4 <__gnu_Unwind_RaiseException>
   1d3fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d402:	b012      	add	sp, #72	; 0x48
   1d404:	4770      	bx	lr
   1d406:	bf00      	nop

0001d408 <_Unwind_Resume>:
   1d408:	46ec      	mov	ip, sp
   1d40a:	b500      	push	{lr}
   1d40c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d410:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d414:	f04f 0300 	mov.w	r3, #0
   1d418:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d41c:	a901      	add	r1, sp, #4
   1d41e:	f7ff fc1b 	bl	1cc58 <__gnu_Unwind_Resume>
   1d422:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d426:	b012      	add	sp, #72	; 0x48
   1d428:	4770      	bx	lr
   1d42a:	bf00      	nop

0001d42c <_Unwind_Resume_or_Rethrow>:
   1d42c:	46ec      	mov	ip, sp
   1d42e:	b500      	push	{lr}
   1d430:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d434:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d438:	f04f 0300 	mov.w	r3, #0
   1d43c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d440:	a901      	add	r1, sp, #4
   1d442:	f7ff fc2b 	bl	1cc9c <__gnu_Unwind_Resume_or_Rethrow>
   1d446:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d44a:	b012      	add	sp, #72	; 0x48
   1d44c:	4770      	bx	lr
   1d44e:	bf00      	nop

0001d450 <_Unwind_ForcedUnwind>:
   1d450:	46ec      	mov	ip, sp
   1d452:	b500      	push	{lr}
   1d454:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d458:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d45c:	f04f 0300 	mov.w	r3, #0
   1d460:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d464:	ab01      	add	r3, sp, #4
   1d466:	f7ff fbed 	bl	1cc44 <__gnu_Unwind_ForcedUnwind>
   1d46a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d46e:	b012      	add	sp, #72	; 0x48
   1d470:	4770      	bx	lr
   1d472:	bf00      	nop

0001d474 <_Unwind_Backtrace>:
   1d474:	46ec      	mov	ip, sp
   1d476:	b500      	push	{lr}
   1d478:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d47c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d480:	f04f 0300 	mov.w	r3, #0
   1d484:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d488:	aa01      	add	r2, sp, #4
   1d48a:	f7ff fc65 	bl	1cd58 <__gnu_Unwind_Backtrace>
   1d48e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d492:	b012      	add	sp, #72	; 0x48
   1d494:	4770      	bx	lr
   1d496:	bf00      	nop

0001d498 <next_unwind_byte>:
   1d498:	7a02      	ldrb	r2, [r0, #8]
   1d49a:	b91a      	cbnz	r2, 1d4a4 <next_unwind_byte+0xc>
   1d49c:	7a43      	ldrb	r3, [r0, #9]
   1d49e:	b943      	cbnz	r3, 1d4b2 <next_unwind_byte+0x1a>
   1d4a0:	20b0      	movs	r0, #176	; 0xb0
   1d4a2:	4770      	bx	lr
   1d4a4:	6803      	ldr	r3, [r0, #0]
   1d4a6:	3a01      	subs	r2, #1
   1d4a8:	7202      	strb	r2, [r0, #8]
   1d4aa:	021a      	lsls	r2, r3, #8
   1d4ac:	6002      	str	r2, [r0, #0]
   1d4ae:	0e18      	lsrs	r0, r3, #24
   1d4b0:	4770      	bx	lr
   1d4b2:	6842      	ldr	r2, [r0, #4]
   1d4b4:	3b01      	subs	r3, #1
   1d4b6:	b410      	push	{r4}
   1d4b8:	7243      	strb	r3, [r0, #9]
   1d4ba:	6813      	ldr	r3, [r2, #0]
   1d4bc:	2103      	movs	r1, #3
   1d4be:	1d14      	adds	r4, r2, #4
   1d4c0:	7201      	strb	r1, [r0, #8]
   1d4c2:	021a      	lsls	r2, r3, #8
   1d4c4:	6044      	str	r4, [r0, #4]
   1d4c6:	6002      	str	r2, [r0, #0]
   1d4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d4cc:	0e18      	lsrs	r0, r3, #24
   1d4ce:	4770      	bx	lr

0001d4d0 <_Unwind_GetGR.constprop.0>:
   1d4d0:	b500      	push	{lr}
   1d4d2:	b085      	sub	sp, #20
   1d4d4:	aa03      	add	r2, sp, #12
   1d4d6:	2300      	movs	r3, #0
   1d4d8:	9200      	str	r2, [sp, #0]
   1d4da:	4619      	mov	r1, r3
   1d4dc:	220c      	movs	r2, #12
   1d4de:	f7ff fbed 	bl	1ccbc <_Unwind_VRS_Get>
   1d4e2:	9803      	ldr	r0, [sp, #12]
   1d4e4:	b005      	add	sp, #20
   1d4e6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d4ea:	bf00      	nop

0001d4ec <unwind_UCB_from_context>:
   1d4ec:	e7f0      	b.n	1d4d0 <_Unwind_GetGR.constprop.0>
   1d4ee:	bf00      	nop

0001d4f0 <__gnu_unwind_execute>:
   1d4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d4f4:	4606      	mov	r6, r0
   1d4f6:	b085      	sub	sp, #20
   1d4f8:	460f      	mov	r7, r1
   1d4fa:	f04f 0800 	mov.w	r8, #0
   1d4fe:	4638      	mov	r0, r7
   1d500:	f7ff ffca 	bl	1d498 <next_unwind_byte>
   1d504:	28b0      	cmp	r0, #176	; 0xb0
   1d506:	4604      	mov	r4, r0
   1d508:	d023      	beq.n	1d552 <__gnu_unwind_execute+0x62>
   1d50a:	0605      	lsls	r5, r0, #24
   1d50c:	d427      	bmi.n	1d55e <__gnu_unwind_execute+0x6e>
   1d50e:	2300      	movs	r3, #0
   1d510:	f10d 090c 	add.w	r9, sp, #12
   1d514:	4619      	mov	r1, r3
   1d516:	0085      	lsls	r5, r0, #2
   1d518:	220d      	movs	r2, #13
   1d51a:	f8cd 9000 	str.w	r9, [sp]
   1d51e:	4630      	mov	r0, r6
   1d520:	f7ff fbcc 	bl	1ccbc <_Unwind_VRS_Get>
   1d524:	b2ed      	uxtb	r5, r5
   1d526:	9b03      	ldr	r3, [sp, #12]
   1d528:	f8cd 9000 	str.w	r9, [sp]
   1d52c:	0660      	lsls	r0, r4, #25
   1d52e:	f105 0504 	add.w	r5, r5, #4
   1d532:	bf4c      	ite	mi
   1d534:	1b5d      	submi	r5, r3, r5
   1d536:	18ed      	addpl	r5, r5, r3
   1d538:	2300      	movs	r3, #0
   1d53a:	4619      	mov	r1, r3
   1d53c:	220d      	movs	r2, #13
   1d53e:	4630      	mov	r0, r6
   1d540:	9503      	str	r5, [sp, #12]
   1d542:	f7ff fbe1 	bl	1cd08 <_Unwind_VRS_Set>
   1d546:	4638      	mov	r0, r7
   1d548:	f7ff ffa6 	bl	1d498 <next_unwind_byte>
   1d54c:	28b0      	cmp	r0, #176	; 0xb0
   1d54e:	4604      	mov	r4, r0
   1d550:	d1db      	bne.n	1d50a <__gnu_unwind_execute+0x1a>
   1d552:	f1b8 0f00 	cmp.w	r8, #0
   1d556:	f000 8095 	beq.w	1d684 <__gnu_unwind_execute+0x194>
   1d55a:	2000      	movs	r0, #0
   1d55c:	e01c      	b.n	1d598 <__gnu_unwind_execute+0xa8>
   1d55e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d562:	2b80      	cmp	r3, #128	; 0x80
   1d564:	d05d      	beq.n	1d622 <__gnu_unwind_execute+0x132>
   1d566:	2b90      	cmp	r3, #144	; 0x90
   1d568:	d019      	beq.n	1d59e <__gnu_unwind_execute+0xae>
   1d56a:	2ba0      	cmp	r3, #160	; 0xa0
   1d56c:	d02c      	beq.n	1d5c8 <__gnu_unwind_execute+0xd8>
   1d56e:	2bb0      	cmp	r3, #176	; 0xb0
   1d570:	d03f      	beq.n	1d5f2 <__gnu_unwind_execute+0x102>
   1d572:	2bc0      	cmp	r3, #192	; 0xc0
   1d574:	d06c      	beq.n	1d650 <__gnu_unwind_execute+0x160>
   1d576:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d57a:	2bd0      	cmp	r3, #208	; 0xd0
   1d57c:	d10b      	bne.n	1d596 <__gnu_unwind_execute+0xa6>
   1d57e:	f000 0207 	and.w	r2, r0, #7
   1d582:	3201      	adds	r2, #1
   1d584:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d588:	2305      	movs	r3, #5
   1d58a:	2101      	movs	r1, #1
   1d58c:	4630      	mov	r0, r6
   1d58e:	f7ff fd89 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d592:	2800      	cmp	r0, #0
   1d594:	d0b3      	beq.n	1d4fe <__gnu_unwind_execute+0xe>
   1d596:	2009      	movs	r0, #9
   1d598:	b005      	add	sp, #20
   1d59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d59e:	f000 030d 	and.w	r3, r0, #13
   1d5a2:	2b0d      	cmp	r3, #13
   1d5a4:	d0f7      	beq.n	1d596 <__gnu_unwind_execute+0xa6>
   1d5a6:	ad03      	add	r5, sp, #12
   1d5a8:	2300      	movs	r3, #0
   1d5aa:	f000 020f 	and.w	r2, r0, #15
   1d5ae:	4619      	mov	r1, r3
   1d5b0:	9500      	str	r5, [sp, #0]
   1d5b2:	4630      	mov	r0, r6
   1d5b4:	f7ff fb82 	bl	1ccbc <_Unwind_VRS_Get>
   1d5b8:	2300      	movs	r3, #0
   1d5ba:	9500      	str	r5, [sp, #0]
   1d5bc:	4619      	mov	r1, r3
   1d5be:	220d      	movs	r2, #13
   1d5c0:	4630      	mov	r0, r6
   1d5c2:	f7ff fba1 	bl	1cd08 <_Unwind_VRS_Set>
   1d5c6:	e79a      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d5c8:	43c2      	mvns	r2, r0
   1d5ca:	f002 0307 	and.w	r3, r2, #7
   1d5ce:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d5d2:	411a      	asrs	r2, r3
   1d5d4:	0701      	lsls	r1, r0, #28
   1d5d6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d5da:	f04f 0300 	mov.w	r3, #0
   1d5de:	bf48      	it	mi
   1d5e0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d5e4:	4619      	mov	r1, r3
   1d5e6:	4630      	mov	r0, r6
   1d5e8:	f7ff fd5c 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d5ec:	2800      	cmp	r0, #0
   1d5ee:	d1d2      	bne.n	1d596 <__gnu_unwind_execute+0xa6>
   1d5f0:	e785      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d5f2:	28b1      	cmp	r0, #177	; 0xb1
   1d5f4:	d057      	beq.n	1d6a6 <__gnu_unwind_execute+0x1b6>
   1d5f6:	28b2      	cmp	r0, #178	; 0xb2
   1d5f8:	d068      	beq.n	1d6cc <__gnu_unwind_execute+0x1dc>
   1d5fa:	28b3      	cmp	r0, #179	; 0xb3
   1d5fc:	f000 8095 	beq.w	1d72a <__gnu_unwind_execute+0x23a>
   1d600:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d604:	2bb4      	cmp	r3, #180	; 0xb4
   1d606:	d0c6      	beq.n	1d596 <__gnu_unwind_execute+0xa6>
   1d608:	f000 0207 	and.w	r2, r0, #7
   1d60c:	3201      	adds	r2, #1
   1d60e:	2301      	movs	r3, #1
   1d610:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d614:	4619      	mov	r1, r3
   1d616:	4630      	mov	r0, r6
   1d618:	f7ff fd44 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d61c:	2800      	cmp	r0, #0
   1d61e:	d1ba      	bne.n	1d596 <__gnu_unwind_execute+0xa6>
   1d620:	e76d      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d622:	4638      	mov	r0, r7
   1d624:	f7ff ff38 	bl	1d498 <next_unwind_byte>
   1d628:	0224      	lsls	r4, r4, #8
   1d62a:	4304      	orrs	r4, r0
   1d62c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d630:	d0b1      	beq.n	1d596 <__gnu_unwind_execute+0xa6>
   1d632:	0124      	lsls	r4, r4, #4
   1d634:	2300      	movs	r3, #0
   1d636:	b2a2      	uxth	r2, r4
   1d638:	4619      	mov	r1, r3
   1d63a:	4630      	mov	r0, r6
   1d63c:	f7ff fd32 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d640:	2800      	cmp	r0, #0
   1d642:	d1a8      	bne.n	1d596 <__gnu_unwind_execute+0xa6>
   1d644:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d648:	bf18      	it	ne
   1d64a:	f04f 0801 	movne.w	r8, #1
   1d64e:	e756      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d650:	28c6      	cmp	r0, #198	; 0xc6
   1d652:	d07d      	beq.n	1d750 <__gnu_unwind_execute+0x260>
   1d654:	28c7      	cmp	r0, #199	; 0xc7
   1d656:	f000 8086 	beq.w	1d766 <__gnu_unwind_execute+0x276>
   1d65a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d65e:	2bc0      	cmp	r3, #192	; 0xc0
   1d660:	f000 8094 	beq.w	1d78c <__gnu_unwind_execute+0x29c>
   1d664:	28c8      	cmp	r0, #200	; 0xc8
   1d666:	f000 809f 	beq.w	1d7a8 <__gnu_unwind_execute+0x2b8>
   1d66a:	28c9      	cmp	r0, #201	; 0xc9
   1d66c:	d193      	bne.n	1d596 <__gnu_unwind_execute+0xa6>
   1d66e:	4638      	mov	r0, r7
   1d670:	f7ff ff12 	bl	1d498 <next_unwind_byte>
   1d674:	0302      	lsls	r2, r0, #12
   1d676:	f000 000f 	and.w	r0, r0, #15
   1d67a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d67e:	3001      	adds	r0, #1
   1d680:	4302      	orrs	r2, r0
   1d682:	e781      	b.n	1d588 <__gnu_unwind_execute+0x98>
   1d684:	ac03      	add	r4, sp, #12
   1d686:	4643      	mov	r3, r8
   1d688:	220e      	movs	r2, #14
   1d68a:	4641      	mov	r1, r8
   1d68c:	9400      	str	r4, [sp, #0]
   1d68e:	4630      	mov	r0, r6
   1d690:	f7ff fb14 	bl	1ccbc <_Unwind_VRS_Get>
   1d694:	9400      	str	r4, [sp, #0]
   1d696:	4630      	mov	r0, r6
   1d698:	4643      	mov	r3, r8
   1d69a:	220f      	movs	r2, #15
   1d69c:	4641      	mov	r1, r8
   1d69e:	f7ff fb33 	bl	1cd08 <_Unwind_VRS_Set>
   1d6a2:	4640      	mov	r0, r8
   1d6a4:	e778      	b.n	1d598 <__gnu_unwind_execute+0xa8>
   1d6a6:	4638      	mov	r0, r7
   1d6a8:	f7ff fef6 	bl	1d498 <next_unwind_byte>
   1d6ac:	2800      	cmp	r0, #0
   1d6ae:	f43f af72 	beq.w	1d596 <__gnu_unwind_execute+0xa6>
   1d6b2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d6b6:	f47f af6e 	bne.w	1d596 <__gnu_unwind_execute+0xa6>
   1d6ba:	4602      	mov	r2, r0
   1d6bc:	4619      	mov	r1, r3
   1d6be:	4630      	mov	r0, r6
   1d6c0:	f7ff fcf0 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d6c4:	2800      	cmp	r0, #0
   1d6c6:	f47f af66 	bne.w	1d596 <__gnu_unwind_execute+0xa6>
   1d6ca:	e718      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d6cc:	2300      	movs	r3, #0
   1d6ce:	f10d 090c 	add.w	r9, sp, #12
   1d6d2:	220d      	movs	r2, #13
   1d6d4:	4619      	mov	r1, r3
   1d6d6:	f8cd 9000 	str.w	r9, [sp]
   1d6da:	4630      	mov	r0, r6
   1d6dc:	f7ff faee 	bl	1ccbc <_Unwind_VRS_Get>
   1d6e0:	4638      	mov	r0, r7
   1d6e2:	f7ff fed9 	bl	1d498 <next_unwind_byte>
   1d6e6:	0602      	lsls	r2, r0, #24
   1d6e8:	f04f 0402 	mov.w	r4, #2
   1d6ec:	d50c      	bpl.n	1d708 <__gnu_unwind_execute+0x218>
   1d6ee:	9b03      	ldr	r3, [sp, #12]
   1d6f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d6f4:	40a0      	lsls	r0, r4
   1d6f6:	4403      	add	r3, r0
   1d6f8:	4638      	mov	r0, r7
   1d6fa:	9303      	str	r3, [sp, #12]
   1d6fc:	f7ff fecc 	bl	1d498 <next_unwind_byte>
   1d700:	0603      	lsls	r3, r0, #24
   1d702:	f104 0407 	add.w	r4, r4, #7
   1d706:	d4f2      	bmi.n	1d6ee <__gnu_unwind_execute+0x1fe>
   1d708:	9b03      	ldr	r3, [sp, #12]
   1d70a:	f8cd 9000 	str.w	r9, [sp]
   1d70e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d712:	40a2      	lsls	r2, r4
   1d714:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d718:	2300      	movs	r3, #0
   1d71a:	4414      	add	r4, r2
   1d71c:	4619      	mov	r1, r3
   1d71e:	220d      	movs	r2, #13
   1d720:	4630      	mov	r0, r6
   1d722:	9403      	str	r4, [sp, #12]
   1d724:	f7ff faf0 	bl	1cd08 <_Unwind_VRS_Set>
   1d728:	e6e9      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d72a:	4638      	mov	r0, r7
   1d72c:	f7ff feb4 	bl	1d498 <next_unwind_byte>
   1d730:	0301      	lsls	r1, r0, #12
   1d732:	f000 000f 	and.w	r0, r0, #15
   1d736:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d73a:	1c42      	adds	r2, r0, #1
   1d73c:	2301      	movs	r3, #1
   1d73e:	430a      	orrs	r2, r1
   1d740:	4630      	mov	r0, r6
   1d742:	4619      	mov	r1, r3
   1d744:	f7ff fcae 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d748:	2800      	cmp	r0, #0
   1d74a:	f47f af24 	bne.w	1d596 <__gnu_unwind_execute+0xa6>
   1d74e:	e6d6      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d750:	4638      	mov	r0, r7
   1d752:	f7ff fea1 	bl	1d498 <next_unwind_byte>
   1d756:	0301      	lsls	r1, r0, #12
   1d758:	f000 000f 	and.w	r0, r0, #15
   1d75c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d760:	1c42      	adds	r2, r0, #1
   1d762:	2303      	movs	r3, #3
   1d764:	e7eb      	b.n	1d73e <__gnu_unwind_execute+0x24e>
   1d766:	4638      	mov	r0, r7
   1d768:	f7ff fe96 	bl	1d498 <next_unwind_byte>
   1d76c:	2800      	cmp	r0, #0
   1d76e:	f43f af12 	beq.w	1d596 <__gnu_unwind_execute+0xa6>
   1d772:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d776:	f47f af0e 	bne.w	1d596 <__gnu_unwind_execute+0xa6>
   1d77a:	4602      	mov	r2, r0
   1d77c:	2104      	movs	r1, #4
   1d77e:	4630      	mov	r0, r6
   1d780:	f7ff fc90 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d784:	2800      	cmp	r0, #0
   1d786:	f47f af06 	bne.w	1d596 <__gnu_unwind_execute+0xa6>
   1d78a:	e6b8      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d78c:	f000 020f 	and.w	r2, r0, #15
   1d790:	3201      	adds	r2, #1
   1d792:	2303      	movs	r3, #3
   1d794:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d798:	4619      	mov	r1, r3
   1d79a:	4630      	mov	r0, r6
   1d79c:	f7ff fc82 	bl	1d0a4 <_Unwind_VRS_Pop>
   1d7a0:	2800      	cmp	r0, #0
   1d7a2:	f47f aef8 	bne.w	1d596 <__gnu_unwind_execute+0xa6>
   1d7a6:	e6aa      	b.n	1d4fe <__gnu_unwind_execute+0xe>
   1d7a8:	4638      	mov	r0, r7
   1d7aa:	f7ff fe75 	bl	1d498 <next_unwind_byte>
   1d7ae:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d7b2:	f000 030f 	and.w	r3, r0, #15
   1d7b6:	3210      	adds	r2, #16
   1d7b8:	3301      	adds	r3, #1
   1d7ba:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d7be:	e6e3      	b.n	1d588 <__gnu_unwind_execute+0x98>

0001d7c0 <__gnu_unwind_frame>:
   1d7c0:	b510      	push	{r4, lr}
   1d7c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d7c4:	b084      	sub	sp, #16
   1d7c6:	685a      	ldr	r2, [r3, #4]
   1d7c8:	2003      	movs	r0, #3
   1d7ca:	f88d 000c 	strb.w	r0, [sp, #12]
   1d7ce:	79dc      	ldrb	r4, [r3, #7]
   1d7d0:	f88d 400d 	strb.w	r4, [sp, #13]
   1d7d4:	0212      	lsls	r2, r2, #8
   1d7d6:	3308      	adds	r3, #8
   1d7d8:	4608      	mov	r0, r1
   1d7da:	a901      	add	r1, sp, #4
   1d7dc:	9201      	str	r2, [sp, #4]
   1d7de:	9302      	str	r3, [sp, #8]
   1d7e0:	f7ff fe86 	bl	1d4f0 <__gnu_unwind_execute>
   1d7e4:	b004      	add	sp, #16
   1d7e6:	bd10      	pop	{r4, pc}

0001d7e8 <_Unwind_GetRegionStart>:
   1d7e8:	b508      	push	{r3, lr}
   1d7ea:	f7ff fe7f 	bl	1d4ec <unwind_UCB_from_context>
   1d7ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d7f0:	bd08      	pop	{r3, pc}
   1d7f2:	bf00      	nop

0001d7f4 <_Unwind_GetLanguageSpecificData>:
   1d7f4:	b508      	push	{r3, lr}
   1d7f6:	f7ff fe79 	bl	1d4ec <unwind_UCB_from_context>
   1d7fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d7fc:	79c3      	ldrb	r3, [r0, #7]
   1d7fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d802:	3008      	adds	r0, #8
   1d804:	bd08      	pop	{r3, pc}
   1d806:	bf00      	nop

0001d808 <_Unwind_GetTextRelBase>:
   1d808:	b508      	push	{r3, lr}
   1d80a:	f000 f807 	bl	1d81c <abort>
   1d80e:	bf00      	nop

0001d810 <_Unwind_GetDataRelBase>:
   1d810:	b508      	push	{r3, lr}
   1d812:	f7ff fff9 	bl	1d808 <_Unwind_GetTextRelBase>
   1d816:	bf00      	nop

0001d818 <__aeabi_idiv0>:
   1d818:	4770      	bx	lr
   1d81a:	bf00      	nop

0001d81c <abort>:
   1d81c:	b508      	push	{r3, lr}
   1d81e:	2006      	movs	r0, #6
   1d820:	f001 f986 	bl	1eb30 <raise>
   1d824:	2001      	movs	r0, #1
   1d826:	f005 f92b 	bl	22a80 <_exit>
   1d82a:	bf00      	nop

0001d82c <__errno>:
   1d82c:	4b01      	ldr	r3, [pc, #4]	; (1d834 <__errno+0x8>)
   1d82e:	6818      	ldr	r0, [r3, #0]
   1d830:	4770      	bx	lr
   1d832:	bf00      	nop
   1d834:	20000100 	.word	0x20000100

0001d838 <fputc>:
   1d838:	4b14      	ldr	r3, [pc, #80]	; (1d88c <fputc+0x54>)
   1d83a:	b570      	push	{r4, r5, r6, lr}
   1d83c:	681d      	ldr	r5, [r3, #0]
   1d83e:	4606      	mov	r6, r0
   1d840:	460c      	mov	r4, r1
   1d842:	b10d      	cbz	r5, 1d848 <fputc+0x10>
   1d844:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d846:	b1c3      	cbz	r3, 1d87a <fputc+0x42>
   1d848:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d84a:	07d8      	lsls	r0, r3, #31
   1d84c:	d402      	bmi.n	1d854 <fputc+0x1c>
   1d84e:	89a3      	ldrh	r3, [r4, #12]
   1d850:	0599      	lsls	r1, r3, #22
   1d852:	d516      	bpl.n	1d882 <fputc+0x4a>
   1d854:	4628      	mov	r0, r5
   1d856:	4622      	mov	r2, r4
   1d858:	4631      	mov	r1, r6
   1d85a:	f000 ff41 	bl	1e6e0 <_putc_r>
   1d85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d860:	07da      	lsls	r2, r3, #31
   1d862:	4605      	mov	r5, r0
   1d864:	d402      	bmi.n	1d86c <fputc+0x34>
   1d866:	89a3      	ldrh	r3, [r4, #12]
   1d868:	059b      	lsls	r3, r3, #22
   1d86a:	d501      	bpl.n	1d870 <fputc+0x38>
   1d86c:	4628      	mov	r0, r5
   1d86e:	bd70      	pop	{r4, r5, r6, pc}
   1d870:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d872:	f000 fa7f 	bl	1dd74 <__retarget_lock_release_recursive>
   1d876:	4628      	mov	r0, r5
   1d878:	bd70      	pop	{r4, r5, r6, pc}
   1d87a:	4628      	mov	r0, r5
   1d87c:	f004 f81a 	bl	218b4 <__sinit>
   1d880:	e7e2      	b.n	1d848 <fputc+0x10>
   1d882:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d884:	f000 fa74 	bl	1dd70 <__retarget_lock_acquire_recursive>
   1d888:	e7e4      	b.n	1d854 <fputc+0x1c>
   1d88a:	bf00      	nop
   1d88c:	20000100 	.word	0x20000100

0001d890 <_fputs_r>:
   1d890:	b530      	push	{r4, r5, lr}
   1d892:	b087      	sub	sp, #28
   1d894:	4605      	mov	r5, r0
   1d896:	4608      	mov	r0, r1
   1d898:	4614      	mov	r4, r2
   1d89a:	9101      	str	r1, [sp, #4]
   1d89c:	f001 fb10 	bl	1eec0 <strlen>
   1d8a0:	aa01      	add	r2, sp, #4
   1d8a2:	2301      	movs	r3, #1
   1d8a4:	9005      	str	r0, [sp, #20]
   1d8a6:	9002      	str	r0, [sp, #8]
   1d8a8:	9203      	str	r2, [sp, #12]
   1d8aa:	9304      	str	r3, [sp, #16]
   1d8ac:	b10d      	cbz	r5, 1d8b2 <_fputs_r+0x22>
   1d8ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d8b0:	b333      	cbz	r3, 1d900 <_fputs_r+0x70>
   1d8b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d8b4:	f013 0f01 	tst.w	r3, #1
   1d8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d8bc:	b29a      	uxth	r2, r3
   1d8be:	d101      	bne.n	1d8c4 <_fputs_r+0x34>
   1d8c0:	0590      	lsls	r0, r2, #22
   1d8c2:	d521      	bpl.n	1d908 <_fputs_r+0x78>
   1d8c4:	0491      	lsls	r1, r2, #18
   1d8c6:	d406      	bmi.n	1d8d6 <_fputs_r+0x46>
   1d8c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d8ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d8ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d8d2:	81a3      	strh	r3, [r4, #12]
   1d8d4:	6662      	str	r2, [r4, #100]	; 0x64
   1d8d6:	4628      	mov	r0, r5
   1d8d8:	aa03      	add	r2, sp, #12
   1d8da:	4621      	mov	r1, r4
   1d8dc:	f000 f824 	bl	1d928 <__sfvwrite_r>
   1d8e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d8e2:	07da      	lsls	r2, r3, #31
   1d8e4:	4605      	mov	r5, r0
   1d8e6:	d402      	bmi.n	1d8ee <_fputs_r+0x5e>
   1d8e8:	89a3      	ldrh	r3, [r4, #12]
   1d8ea:	059b      	lsls	r3, r3, #22
   1d8ec:	d502      	bpl.n	1d8f4 <_fputs_r+0x64>
   1d8ee:	4628      	mov	r0, r5
   1d8f0:	b007      	add	sp, #28
   1d8f2:	bd30      	pop	{r4, r5, pc}
   1d8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d8f6:	f000 fa3d 	bl	1dd74 <__retarget_lock_release_recursive>
   1d8fa:	4628      	mov	r0, r5
   1d8fc:	b007      	add	sp, #28
   1d8fe:	bd30      	pop	{r4, r5, pc}
   1d900:	4628      	mov	r0, r5
   1d902:	f003 ffd7 	bl	218b4 <__sinit>
   1d906:	e7d4      	b.n	1d8b2 <_fputs_r+0x22>
   1d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d90a:	f000 fa31 	bl	1dd70 <__retarget_lock_acquire_recursive>
   1d90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d912:	b29a      	uxth	r2, r3
   1d914:	e7d6      	b.n	1d8c4 <_fputs_r+0x34>
   1d916:	bf00      	nop

0001d918 <fputs>:
   1d918:	4b02      	ldr	r3, [pc, #8]	; (1d924 <fputs+0xc>)
   1d91a:	460a      	mov	r2, r1
   1d91c:	4601      	mov	r1, r0
   1d91e:	6818      	ldr	r0, [r3, #0]
   1d920:	f7ff bfb6 	b.w	1d890 <_fputs_r>
   1d924:	20000100 	.word	0x20000100

0001d928 <__sfvwrite_r>:
   1d928:	6893      	ldr	r3, [r2, #8]
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	d073      	beq.n	1da16 <__sfvwrite_r+0xee>
   1d92e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d932:	898b      	ldrh	r3, [r1, #12]
   1d934:	b083      	sub	sp, #12
   1d936:	460c      	mov	r4, r1
   1d938:	0719      	lsls	r1, r3, #28
   1d93a:	9000      	str	r0, [sp, #0]
   1d93c:	4616      	mov	r6, r2
   1d93e:	d526      	bpl.n	1d98e <__sfvwrite_r+0x66>
   1d940:	6922      	ldr	r2, [r4, #16]
   1d942:	b322      	cbz	r2, 1d98e <__sfvwrite_r+0x66>
   1d944:	f013 0002 	ands.w	r0, r3, #2
   1d948:	6835      	ldr	r5, [r6, #0]
   1d94a:	d02c      	beq.n	1d9a6 <__sfvwrite_r+0x7e>
   1d94c:	f04f 0900 	mov.w	r9, #0
   1d950:	4fb0      	ldr	r7, [pc, #704]	; (1dc14 <__sfvwrite_r+0x2ec>)
   1d952:	46c8      	mov	r8, r9
   1d954:	46b2      	mov	sl, r6
   1d956:	45b8      	cmp	r8, r7
   1d958:	4643      	mov	r3, r8
   1d95a:	464a      	mov	r2, r9
   1d95c:	bf28      	it	cs
   1d95e:	463b      	movcs	r3, r7
   1d960:	9800      	ldr	r0, [sp, #0]
   1d962:	f1b8 0f00 	cmp.w	r8, #0
   1d966:	d050      	beq.n	1da0a <__sfvwrite_r+0xe2>
   1d968:	69e1      	ldr	r1, [r4, #28]
   1d96a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d96c:	47b0      	blx	r6
   1d96e:	2800      	cmp	r0, #0
   1d970:	dd58      	ble.n	1da24 <__sfvwrite_r+0xfc>
   1d972:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d976:	1a1b      	subs	r3, r3, r0
   1d978:	4481      	add	r9, r0
   1d97a:	eba8 0800 	sub.w	r8, r8, r0
   1d97e:	f8ca 3008 	str.w	r3, [sl, #8]
   1d982:	2b00      	cmp	r3, #0
   1d984:	d1e7      	bne.n	1d956 <__sfvwrite_r+0x2e>
   1d986:	2000      	movs	r0, #0
   1d988:	b003      	add	sp, #12
   1d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d98e:	4621      	mov	r1, r4
   1d990:	9800      	ldr	r0, [sp, #0]
   1d992:	f002 fe67 	bl	20664 <__swsetup_r>
   1d996:	2800      	cmp	r0, #0
   1d998:	f040 8133 	bne.w	1dc02 <__sfvwrite_r+0x2da>
   1d99c:	89a3      	ldrh	r3, [r4, #12]
   1d99e:	6835      	ldr	r5, [r6, #0]
   1d9a0:	f013 0002 	ands.w	r0, r3, #2
   1d9a4:	d1d2      	bne.n	1d94c <__sfvwrite_r+0x24>
   1d9a6:	f013 0901 	ands.w	r9, r3, #1
   1d9aa:	d145      	bne.n	1da38 <__sfvwrite_r+0x110>
   1d9ac:	464f      	mov	r7, r9
   1d9ae:	9601      	str	r6, [sp, #4]
   1d9b0:	b337      	cbz	r7, 1da00 <__sfvwrite_r+0xd8>
   1d9b2:	059a      	lsls	r2, r3, #22
   1d9b4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d9b8:	f140 8083 	bpl.w	1dac2 <__sfvwrite_r+0x19a>
   1d9bc:	4547      	cmp	r7, r8
   1d9be:	46c3      	mov	fp, r8
   1d9c0:	f0c0 80ab 	bcc.w	1db1a <__sfvwrite_r+0x1f2>
   1d9c4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d9c8:	f040 80ac 	bne.w	1db24 <__sfvwrite_r+0x1fc>
   1d9cc:	6820      	ldr	r0, [r4, #0]
   1d9ce:	46ba      	mov	sl, r7
   1d9d0:	465a      	mov	r2, fp
   1d9d2:	4649      	mov	r1, r9
   1d9d4:	f000 fdc6 	bl	1e564 <memmove>
   1d9d8:	68a2      	ldr	r2, [r4, #8]
   1d9da:	6823      	ldr	r3, [r4, #0]
   1d9dc:	eba2 0208 	sub.w	r2, r2, r8
   1d9e0:	445b      	add	r3, fp
   1d9e2:	60a2      	str	r2, [r4, #8]
   1d9e4:	6023      	str	r3, [r4, #0]
   1d9e6:	9a01      	ldr	r2, [sp, #4]
   1d9e8:	6893      	ldr	r3, [r2, #8]
   1d9ea:	eba3 030a 	sub.w	r3, r3, sl
   1d9ee:	44d1      	add	r9, sl
   1d9f0:	eba7 070a 	sub.w	r7, r7, sl
   1d9f4:	6093      	str	r3, [r2, #8]
   1d9f6:	2b00      	cmp	r3, #0
   1d9f8:	d0c5      	beq.n	1d986 <__sfvwrite_r+0x5e>
   1d9fa:	89a3      	ldrh	r3, [r4, #12]
   1d9fc:	2f00      	cmp	r7, #0
   1d9fe:	d1d8      	bne.n	1d9b2 <__sfvwrite_r+0x8a>
   1da00:	f8d5 9000 	ldr.w	r9, [r5]
   1da04:	686f      	ldr	r7, [r5, #4]
   1da06:	3508      	adds	r5, #8
   1da08:	e7d2      	b.n	1d9b0 <__sfvwrite_r+0x88>
   1da0a:	f8d5 9000 	ldr.w	r9, [r5]
   1da0e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1da12:	3508      	adds	r5, #8
   1da14:	e79f      	b.n	1d956 <__sfvwrite_r+0x2e>
   1da16:	2000      	movs	r0, #0
   1da18:	4770      	bx	lr
   1da1a:	4621      	mov	r1, r4
   1da1c:	9800      	ldr	r0, [sp, #0]
   1da1e:	f003 fef1 	bl	21804 <_fflush_r>
   1da22:	b370      	cbz	r0, 1da82 <__sfvwrite_r+0x15a>
   1da24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1da2c:	f04f 30ff 	mov.w	r0, #4294967295
   1da30:	81a3      	strh	r3, [r4, #12]
   1da32:	b003      	add	sp, #12
   1da34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da38:	4681      	mov	r9, r0
   1da3a:	4633      	mov	r3, r6
   1da3c:	464e      	mov	r6, r9
   1da3e:	46a8      	mov	r8, r5
   1da40:	469a      	mov	sl, r3
   1da42:	464d      	mov	r5, r9
   1da44:	b34e      	cbz	r6, 1da9a <__sfvwrite_r+0x172>
   1da46:	b380      	cbz	r0, 1daaa <__sfvwrite_r+0x182>
   1da48:	6820      	ldr	r0, [r4, #0]
   1da4a:	6923      	ldr	r3, [r4, #16]
   1da4c:	6962      	ldr	r2, [r4, #20]
   1da4e:	45b1      	cmp	r9, r6
   1da50:	46cb      	mov	fp, r9
   1da52:	bf28      	it	cs
   1da54:	46b3      	movcs	fp, r6
   1da56:	4298      	cmp	r0, r3
   1da58:	465f      	mov	r7, fp
   1da5a:	d904      	bls.n	1da66 <__sfvwrite_r+0x13e>
   1da5c:	68a3      	ldr	r3, [r4, #8]
   1da5e:	4413      	add	r3, r2
   1da60:	459b      	cmp	fp, r3
   1da62:	f300 80a6 	bgt.w	1dbb2 <__sfvwrite_r+0x28a>
   1da66:	4593      	cmp	fp, r2
   1da68:	db4b      	blt.n	1db02 <__sfvwrite_r+0x1da>
   1da6a:	4613      	mov	r3, r2
   1da6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1da6e:	69e1      	ldr	r1, [r4, #28]
   1da70:	9800      	ldr	r0, [sp, #0]
   1da72:	462a      	mov	r2, r5
   1da74:	47b8      	blx	r7
   1da76:	1e07      	subs	r7, r0, #0
   1da78:	ddd4      	ble.n	1da24 <__sfvwrite_r+0xfc>
   1da7a:	ebb9 0907 	subs.w	r9, r9, r7
   1da7e:	d0cc      	beq.n	1da1a <__sfvwrite_r+0xf2>
   1da80:	2001      	movs	r0, #1
   1da82:	f8da 3008 	ldr.w	r3, [sl, #8]
   1da86:	1bdb      	subs	r3, r3, r7
   1da88:	443d      	add	r5, r7
   1da8a:	1bf6      	subs	r6, r6, r7
   1da8c:	f8ca 3008 	str.w	r3, [sl, #8]
   1da90:	2b00      	cmp	r3, #0
   1da92:	f43f af78 	beq.w	1d986 <__sfvwrite_r+0x5e>
   1da96:	2e00      	cmp	r6, #0
   1da98:	d1d5      	bne.n	1da46 <__sfvwrite_r+0x11e>
   1da9a:	f108 0308 	add.w	r3, r8, #8
   1da9e:	e913 0060 	ldmdb	r3, {r5, r6}
   1daa2:	4698      	mov	r8, r3
   1daa4:	3308      	adds	r3, #8
   1daa6:	2e00      	cmp	r6, #0
   1daa8:	d0f9      	beq.n	1da9e <__sfvwrite_r+0x176>
   1daaa:	4632      	mov	r2, r6
   1daac:	210a      	movs	r1, #10
   1daae:	4628      	mov	r0, r5
   1dab0:	f000 fc3e 	bl	1e330 <memchr>
   1dab4:	2800      	cmp	r0, #0
   1dab6:	f000 80a1 	beq.w	1dbfc <__sfvwrite_r+0x2d4>
   1daba:	3001      	adds	r0, #1
   1dabc:	eba0 0905 	sub.w	r9, r0, r5
   1dac0:	e7c2      	b.n	1da48 <__sfvwrite_r+0x120>
   1dac2:	6820      	ldr	r0, [r4, #0]
   1dac4:	6923      	ldr	r3, [r4, #16]
   1dac6:	4298      	cmp	r0, r3
   1dac8:	d802      	bhi.n	1dad0 <__sfvwrite_r+0x1a8>
   1daca:	6963      	ldr	r3, [r4, #20]
   1dacc:	429f      	cmp	r7, r3
   1dace:	d25d      	bcs.n	1db8c <__sfvwrite_r+0x264>
   1dad0:	45b8      	cmp	r8, r7
   1dad2:	bf28      	it	cs
   1dad4:	46b8      	movcs	r8, r7
   1dad6:	4642      	mov	r2, r8
   1dad8:	4649      	mov	r1, r9
   1dada:	f000 fd43 	bl	1e564 <memmove>
   1dade:	68a3      	ldr	r3, [r4, #8]
   1dae0:	6822      	ldr	r2, [r4, #0]
   1dae2:	eba3 0308 	sub.w	r3, r3, r8
   1dae6:	4442      	add	r2, r8
   1dae8:	60a3      	str	r3, [r4, #8]
   1daea:	6022      	str	r2, [r4, #0]
   1daec:	b10b      	cbz	r3, 1daf2 <__sfvwrite_r+0x1ca>
   1daee:	46c2      	mov	sl, r8
   1daf0:	e779      	b.n	1d9e6 <__sfvwrite_r+0xbe>
   1daf2:	4621      	mov	r1, r4
   1daf4:	9800      	ldr	r0, [sp, #0]
   1daf6:	f003 fe85 	bl	21804 <_fflush_r>
   1dafa:	2800      	cmp	r0, #0
   1dafc:	d192      	bne.n	1da24 <__sfvwrite_r+0xfc>
   1dafe:	46c2      	mov	sl, r8
   1db00:	e771      	b.n	1d9e6 <__sfvwrite_r+0xbe>
   1db02:	465a      	mov	r2, fp
   1db04:	4629      	mov	r1, r5
   1db06:	f000 fd2d 	bl	1e564 <memmove>
   1db0a:	68a2      	ldr	r2, [r4, #8]
   1db0c:	6823      	ldr	r3, [r4, #0]
   1db0e:	eba2 020b 	sub.w	r2, r2, fp
   1db12:	445b      	add	r3, fp
   1db14:	60a2      	str	r2, [r4, #8]
   1db16:	6023      	str	r3, [r4, #0]
   1db18:	e7af      	b.n	1da7a <__sfvwrite_r+0x152>
   1db1a:	6820      	ldr	r0, [r4, #0]
   1db1c:	46b8      	mov	r8, r7
   1db1e:	46ba      	mov	sl, r7
   1db20:	46bb      	mov	fp, r7
   1db22:	e755      	b.n	1d9d0 <__sfvwrite_r+0xa8>
   1db24:	6962      	ldr	r2, [r4, #20]
   1db26:	6820      	ldr	r0, [r4, #0]
   1db28:	6921      	ldr	r1, [r4, #16]
   1db2a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1db2e:	eba0 0a01 	sub.w	sl, r0, r1
   1db32:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1db36:	f10a 0001 	add.w	r0, sl, #1
   1db3a:	ea4f 0868 	mov.w	r8, r8, asr #1
   1db3e:	4438      	add	r0, r7
   1db40:	4540      	cmp	r0, r8
   1db42:	4642      	mov	r2, r8
   1db44:	bf84      	itt	hi
   1db46:	4680      	movhi	r8, r0
   1db48:	4642      	movhi	r2, r8
   1db4a:	055b      	lsls	r3, r3, #21
   1db4c:	d544      	bpl.n	1dbd8 <__sfvwrite_r+0x2b0>
   1db4e:	4611      	mov	r1, r2
   1db50:	9800      	ldr	r0, [sp, #0]
   1db52:	f000 f921 	bl	1dd98 <_malloc_r>
   1db56:	4683      	mov	fp, r0
   1db58:	2800      	cmp	r0, #0
   1db5a:	d055      	beq.n	1dc08 <__sfvwrite_r+0x2e0>
   1db5c:	4652      	mov	r2, sl
   1db5e:	6921      	ldr	r1, [r4, #16]
   1db60:	f000 fc66 	bl	1e430 <memcpy>
   1db64:	89a3      	ldrh	r3, [r4, #12]
   1db66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1db6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1db6e:	81a3      	strh	r3, [r4, #12]
   1db70:	eb0b 000a 	add.w	r0, fp, sl
   1db74:	eba8 030a 	sub.w	r3, r8, sl
   1db78:	f8c4 b010 	str.w	fp, [r4, #16]
   1db7c:	f8c4 8014 	str.w	r8, [r4, #20]
   1db80:	6020      	str	r0, [r4, #0]
   1db82:	60a3      	str	r3, [r4, #8]
   1db84:	46b8      	mov	r8, r7
   1db86:	46ba      	mov	sl, r7
   1db88:	46bb      	mov	fp, r7
   1db8a:	e721      	b.n	1d9d0 <__sfvwrite_r+0xa8>
   1db8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1db90:	42b9      	cmp	r1, r7
   1db92:	bf28      	it	cs
   1db94:	4639      	movcs	r1, r7
   1db96:	464a      	mov	r2, r9
   1db98:	fb91 f1f3 	sdiv	r1, r1, r3
   1db9c:	9800      	ldr	r0, [sp, #0]
   1db9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dba0:	fb03 f301 	mul.w	r3, r3, r1
   1dba4:	69e1      	ldr	r1, [r4, #28]
   1dba6:	47b0      	blx	r6
   1dba8:	f1b0 0a00 	subs.w	sl, r0, #0
   1dbac:	f73f af1b 	bgt.w	1d9e6 <__sfvwrite_r+0xbe>
   1dbb0:	e738      	b.n	1da24 <__sfvwrite_r+0xfc>
   1dbb2:	461a      	mov	r2, r3
   1dbb4:	4629      	mov	r1, r5
   1dbb6:	9301      	str	r3, [sp, #4]
   1dbb8:	f000 fcd4 	bl	1e564 <memmove>
   1dbbc:	6822      	ldr	r2, [r4, #0]
   1dbbe:	9b01      	ldr	r3, [sp, #4]
   1dbc0:	9800      	ldr	r0, [sp, #0]
   1dbc2:	441a      	add	r2, r3
   1dbc4:	6022      	str	r2, [r4, #0]
   1dbc6:	4621      	mov	r1, r4
   1dbc8:	f003 fe1c 	bl	21804 <_fflush_r>
   1dbcc:	9b01      	ldr	r3, [sp, #4]
   1dbce:	2800      	cmp	r0, #0
   1dbd0:	f47f af28 	bne.w	1da24 <__sfvwrite_r+0xfc>
   1dbd4:	461f      	mov	r7, r3
   1dbd6:	e750      	b.n	1da7a <__sfvwrite_r+0x152>
   1dbd8:	9800      	ldr	r0, [sp, #0]
   1dbda:	f000 fdc1 	bl	1e760 <_realloc_r>
   1dbde:	4683      	mov	fp, r0
   1dbe0:	2800      	cmp	r0, #0
   1dbe2:	d1c5      	bne.n	1db70 <__sfvwrite_r+0x248>
   1dbe4:	9d00      	ldr	r5, [sp, #0]
   1dbe6:	6921      	ldr	r1, [r4, #16]
   1dbe8:	4628      	mov	r0, r5
   1dbea:	f003 ff05 	bl	219f8 <_free_r>
   1dbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dbf2:	220c      	movs	r2, #12
   1dbf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1dbf8:	602a      	str	r2, [r5, #0]
   1dbfa:	e715      	b.n	1da28 <__sfvwrite_r+0x100>
   1dbfc:	f106 0901 	add.w	r9, r6, #1
   1dc00:	e722      	b.n	1da48 <__sfvwrite_r+0x120>
   1dc02:	f04f 30ff 	mov.w	r0, #4294967295
   1dc06:	e6bf      	b.n	1d988 <__sfvwrite_r+0x60>
   1dc08:	9a00      	ldr	r2, [sp, #0]
   1dc0a:	230c      	movs	r3, #12
   1dc0c:	6013      	str	r3, [r2, #0]
   1dc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dc12:	e709      	b.n	1da28 <__sfvwrite_r+0x100>
   1dc14:	7ffffc00 	.word	0x7ffffc00

0001dc18 <_fwrite_r>:
   1dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc1c:	b086      	sub	sp, #24
   1dc1e:	fb02 f503 	mul.w	r5, r2, r3
   1dc22:	4690      	mov	r8, r2
   1dc24:	461e      	mov	r6, r3
   1dc26:	aa01      	add	r2, sp, #4
   1dc28:	2301      	movs	r3, #1
   1dc2a:	9101      	str	r1, [sp, #4]
   1dc2c:	9502      	str	r5, [sp, #8]
   1dc2e:	9505      	str	r5, [sp, #20]
   1dc30:	9203      	str	r2, [sp, #12]
   1dc32:	9304      	str	r3, [sp, #16]
   1dc34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1dc36:	4607      	mov	r7, r0
   1dc38:	b110      	cbz	r0, 1dc40 <_fwrite_r+0x28>
   1dc3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1dc3c:	2b00      	cmp	r3, #0
   1dc3e:	d031      	beq.n	1dca4 <_fwrite_r+0x8c>
   1dc40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dc42:	f013 0f01 	tst.w	r3, #1
   1dc46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dc4a:	b29a      	uxth	r2, r3
   1dc4c:	d101      	bne.n	1dc52 <_fwrite_r+0x3a>
   1dc4e:	0591      	lsls	r1, r2, #22
   1dc50:	d52b      	bpl.n	1dcaa <_fwrite_r+0x92>
   1dc52:	0492      	lsls	r2, r2, #18
   1dc54:	d406      	bmi.n	1dc64 <_fwrite_r+0x4c>
   1dc56:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1dc58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1dc5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1dc60:	81a3      	strh	r3, [r4, #12]
   1dc62:	6662      	str	r2, [r4, #100]	; 0x64
   1dc64:	4638      	mov	r0, r7
   1dc66:	aa03      	add	r2, sp, #12
   1dc68:	4621      	mov	r1, r4
   1dc6a:	f7ff fe5d 	bl	1d928 <__sfvwrite_r>
   1dc6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dc70:	b940      	cbnz	r0, 1dc84 <_fwrite_r+0x6c>
   1dc72:	07d8      	lsls	r0, r3, #31
   1dc74:	d402      	bmi.n	1dc7c <_fwrite_r+0x64>
   1dc76:	89a3      	ldrh	r3, [r4, #12]
   1dc78:	0599      	lsls	r1, r3, #22
   1dc7a:	d51d      	bpl.n	1dcb8 <_fwrite_r+0xa0>
   1dc7c:	4630      	mov	r0, r6
   1dc7e:	b006      	add	sp, #24
   1dc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc84:	07da      	lsls	r2, r3, #31
   1dc86:	d506      	bpl.n	1dc96 <_fwrite_r+0x7e>
   1dc88:	9805      	ldr	r0, [sp, #20]
   1dc8a:	1a2d      	subs	r5, r5, r0
   1dc8c:	fbb5 f0f8 	udiv	r0, r5, r8
   1dc90:	b006      	add	sp, #24
   1dc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc96:	89a3      	ldrh	r3, [r4, #12]
   1dc98:	059b      	lsls	r3, r3, #22
   1dc9a:	d4f5      	bmi.n	1dc88 <_fwrite_r+0x70>
   1dc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dc9e:	f000 f869 	bl	1dd74 <__retarget_lock_release_recursive>
   1dca2:	e7f1      	b.n	1dc88 <_fwrite_r+0x70>
   1dca4:	f003 fe06 	bl	218b4 <__sinit>
   1dca8:	e7ca      	b.n	1dc40 <_fwrite_r+0x28>
   1dcaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dcac:	f000 f860 	bl	1dd70 <__retarget_lock_acquire_recursive>
   1dcb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dcb4:	b29a      	uxth	r2, r3
   1dcb6:	e7cc      	b.n	1dc52 <_fwrite_r+0x3a>
   1dcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dcba:	f000 f85b 	bl	1dd74 <__retarget_lock_release_recursive>
   1dcbe:	4630      	mov	r0, r6
   1dcc0:	e7e6      	b.n	1dc90 <_fwrite_r+0x78>
   1dcc2:	bf00      	nop

0001dcc4 <fwrite>:
   1dcc4:	b510      	push	{r4, lr}
   1dcc6:	b082      	sub	sp, #8
   1dcc8:	4c05      	ldr	r4, [pc, #20]	; (1dce0 <fwrite+0x1c>)
   1dcca:	9300      	str	r3, [sp, #0]
   1dccc:	6824      	ldr	r4, [r4, #0]
   1dcce:	4613      	mov	r3, r2
   1dcd0:	460a      	mov	r2, r1
   1dcd2:	4601      	mov	r1, r0
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	f7ff ff9f 	bl	1dc18 <_fwrite_r>
   1dcda:	b002      	add	sp, #8
   1dcdc:	bd10      	pop	{r4, pc}
   1dcde:	bf00      	nop
   1dce0:	20000100 	.word	0x20000100

0001dce4 <__libc_init_array>:
   1dce4:	b570      	push	{r4, r5, r6, lr}
   1dce6:	4e0f      	ldr	r6, [pc, #60]	; (1dd24 <__libc_init_array+0x40>)
   1dce8:	4d0f      	ldr	r5, [pc, #60]	; (1dd28 <__libc_init_array+0x44>)
   1dcea:	1b76      	subs	r6, r6, r5
   1dcec:	10b6      	asrs	r6, r6, #2
   1dcee:	bf18      	it	ne
   1dcf0:	2400      	movne	r4, #0
   1dcf2:	d005      	beq.n	1dd00 <__libc_init_array+0x1c>
   1dcf4:	3401      	adds	r4, #1
   1dcf6:	f855 3b04 	ldr.w	r3, [r5], #4
   1dcfa:	4798      	blx	r3
   1dcfc:	42a6      	cmp	r6, r4
   1dcfe:	d1f9      	bne.n	1dcf4 <__libc_init_array+0x10>
   1dd00:	4e0a      	ldr	r6, [pc, #40]	; (1dd2c <__libc_init_array+0x48>)
   1dd02:	4d0b      	ldr	r5, [pc, #44]	; (1dd30 <__libc_init_array+0x4c>)
   1dd04:	1b76      	subs	r6, r6, r5
   1dd06:	f004 fecf 	bl	22aa8 <_init>
   1dd0a:	10b6      	asrs	r6, r6, #2
   1dd0c:	bf18      	it	ne
   1dd0e:	2400      	movne	r4, #0
   1dd10:	d006      	beq.n	1dd20 <__libc_init_array+0x3c>
   1dd12:	3401      	adds	r4, #1
   1dd14:	f855 3b04 	ldr.w	r3, [r5], #4
   1dd18:	4798      	blx	r3
   1dd1a:	42a6      	cmp	r6, r4
   1dd1c:	d1f9      	bne.n	1dd12 <__libc_init_array+0x2e>
   1dd1e:	bd70      	pop	{r4, r5, r6, pc}
   1dd20:	bd70      	pop	{r4, r5, r6, pc}
   1dd22:	bf00      	nop
   1dd24:	00022ac0 	.word	0x00022ac0
   1dd28:	00022ac0 	.word	0x00022ac0
   1dd2c:	00022af8 	.word	0x00022af8
   1dd30:	00022ac0 	.word	0x00022ac0

0001dd34 <__itoa>:
   1dd34:	1e93      	subs	r3, r2, #2
   1dd36:	2b22      	cmp	r3, #34	; 0x22
   1dd38:	d810      	bhi.n	1dd5c <__itoa+0x28>
   1dd3a:	2a0a      	cmp	r2, #10
   1dd3c:	b510      	push	{r4, lr}
   1dd3e:	d006      	beq.n	1dd4e <__itoa+0x1a>
   1dd40:	2300      	movs	r3, #0
   1dd42:	460c      	mov	r4, r1
   1dd44:	4419      	add	r1, r3
   1dd46:	f002 fbd1 	bl	204ec <__utoa>
   1dd4a:	4620      	mov	r0, r4
   1dd4c:	bd10      	pop	{r4, pc}
   1dd4e:	2800      	cmp	r0, #0
   1dd50:	daf6      	bge.n	1dd40 <__itoa+0xc>
   1dd52:	232d      	movs	r3, #45	; 0x2d
   1dd54:	700b      	strb	r3, [r1, #0]
   1dd56:	4240      	negs	r0, r0
   1dd58:	2301      	movs	r3, #1
   1dd5a:	e7f2      	b.n	1dd42 <__itoa+0xe>
   1dd5c:	2000      	movs	r0, #0
   1dd5e:	7008      	strb	r0, [r1, #0]
   1dd60:	4770      	bx	lr
   1dd62:	bf00      	nop

0001dd64 <itoa>:
   1dd64:	f7ff bfe6 	b.w	1dd34 <__itoa>

0001dd68 <__retarget_lock_init_recursive>:
   1dd68:	4770      	bx	lr
   1dd6a:	bf00      	nop

0001dd6c <__retarget_lock_close_recursive>:
   1dd6c:	4770      	bx	lr
   1dd6e:	bf00      	nop

0001dd70 <__retarget_lock_acquire_recursive>:
   1dd70:	4770      	bx	lr
   1dd72:	bf00      	nop

0001dd74 <__retarget_lock_release_recursive>:
   1dd74:	4770      	bx	lr
   1dd76:	bf00      	nop

0001dd78 <malloc>:
   1dd78:	4b02      	ldr	r3, [pc, #8]	; (1dd84 <malloc+0xc>)
   1dd7a:	4601      	mov	r1, r0
   1dd7c:	6818      	ldr	r0, [r3, #0]
   1dd7e:	f000 b80b 	b.w	1dd98 <_malloc_r>
   1dd82:	bf00      	nop
   1dd84:	20000100 	.word	0x20000100

0001dd88 <free>:
   1dd88:	4b02      	ldr	r3, [pc, #8]	; (1dd94 <free+0xc>)
   1dd8a:	4601      	mov	r1, r0
   1dd8c:	6818      	ldr	r0, [r3, #0]
   1dd8e:	f003 be33 	b.w	219f8 <_free_r>
   1dd92:	bf00      	nop
   1dd94:	20000100 	.word	0x20000100

0001dd98 <_malloc_r>:
   1dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd9c:	f101 060b 	add.w	r6, r1, #11
   1dda0:	2e16      	cmp	r6, #22
   1dda2:	b083      	sub	sp, #12
   1dda4:	4605      	mov	r5, r0
   1dda6:	f240 809e 	bls.w	1dee6 <_malloc_r+0x14e>
   1ddaa:	f036 0607 	bics.w	r6, r6, #7
   1ddae:	f100 80bd 	bmi.w	1df2c <_malloc_r+0x194>
   1ddb2:	42b1      	cmp	r1, r6
   1ddb4:	f200 80ba 	bhi.w	1df2c <_malloc_r+0x194>
   1ddb8:	f000 fc86 	bl	1e6c8 <__malloc_lock>
   1ddbc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1ddc0:	f0c0 8293 	bcc.w	1e2ea <_malloc_r+0x552>
   1ddc4:	0a73      	lsrs	r3, r6, #9
   1ddc6:	f000 80b8 	beq.w	1df3a <_malloc_r+0x1a2>
   1ddca:	2b04      	cmp	r3, #4
   1ddcc:	f200 8179 	bhi.w	1e0c2 <_malloc_r+0x32a>
   1ddd0:	09b3      	lsrs	r3, r6, #6
   1ddd2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1ddd6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1ddda:	00c3      	lsls	r3, r0, #3
   1dddc:	4fbf      	ldr	r7, [pc, #764]	; (1e0dc <_malloc_r+0x344>)
   1ddde:	443b      	add	r3, r7
   1dde0:	f1a3 0108 	sub.w	r1, r3, #8
   1dde4:	685c      	ldr	r4, [r3, #4]
   1dde6:	42a1      	cmp	r1, r4
   1dde8:	d106      	bne.n	1ddf8 <_malloc_r+0x60>
   1ddea:	e00c      	b.n	1de06 <_malloc_r+0x6e>
   1ddec:	2a00      	cmp	r2, #0
   1ddee:	f280 80aa 	bge.w	1df46 <_malloc_r+0x1ae>
   1ddf2:	68e4      	ldr	r4, [r4, #12]
   1ddf4:	42a1      	cmp	r1, r4
   1ddf6:	d006      	beq.n	1de06 <_malloc_r+0x6e>
   1ddf8:	6863      	ldr	r3, [r4, #4]
   1ddfa:	f023 0303 	bic.w	r3, r3, #3
   1ddfe:	1b9a      	subs	r2, r3, r6
   1de00:	2a0f      	cmp	r2, #15
   1de02:	ddf3      	ble.n	1ddec <_malloc_r+0x54>
   1de04:	4670      	mov	r0, lr
   1de06:	693c      	ldr	r4, [r7, #16]
   1de08:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1e0f0 <_malloc_r+0x358>
   1de0c:	4574      	cmp	r4, lr
   1de0e:	f000 81ab 	beq.w	1e168 <_malloc_r+0x3d0>
   1de12:	6863      	ldr	r3, [r4, #4]
   1de14:	f023 0303 	bic.w	r3, r3, #3
   1de18:	1b9a      	subs	r2, r3, r6
   1de1a:	2a0f      	cmp	r2, #15
   1de1c:	f300 8190 	bgt.w	1e140 <_malloc_r+0x3a8>
   1de20:	2a00      	cmp	r2, #0
   1de22:	f8c7 e014 	str.w	lr, [r7, #20]
   1de26:	f8c7 e010 	str.w	lr, [r7, #16]
   1de2a:	f280 809d 	bge.w	1df68 <_malloc_r+0x1d0>
   1de2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1de32:	f080 8161 	bcs.w	1e0f8 <_malloc_r+0x360>
   1de36:	08db      	lsrs	r3, r3, #3
   1de38:	f103 0c01 	add.w	ip, r3, #1
   1de3c:	1099      	asrs	r1, r3, #2
   1de3e:	687a      	ldr	r2, [r7, #4]
   1de40:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1de44:	f8c4 8008 	str.w	r8, [r4, #8]
   1de48:	2301      	movs	r3, #1
   1de4a:	408b      	lsls	r3, r1
   1de4c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1de50:	4313      	orrs	r3, r2
   1de52:	3908      	subs	r1, #8
   1de54:	60e1      	str	r1, [r4, #12]
   1de56:	607b      	str	r3, [r7, #4]
   1de58:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1de5c:	f8c8 400c 	str.w	r4, [r8, #12]
   1de60:	1082      	asrs	r2, r0, #2
   1de62:	2401      	movs	r4, #1
   1de64:	4094      	lsls	r4, r2
   1de66:	429c      	cmp	r4, r3
   1de68:	f200 808b 	bhi.w	1df82 <_malloc_r+0x1ea>
   1de6c:	421c      	tst	r4, r3
   1de6e:	d106      	bne.n	1de7e <_malloc_r+0xe6>
   1de70:	f020 0003 	bic.w	r0, r0, #3
   1de74:	0064      	lsls	r4, r4, #1
   1de76:	421c      	tst	r4, r3
   1de78:	f100 0004 	add.w	r0, r0, #4
   1de7c:	d0fa      	beq.n	1de74 <_malloc_r+0xdc>
   1de7e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1de82:	46cc      	mov	ip, r9
   1de84:	4680      	mov	r8, r0
   1de86:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1de8a:	459c      	cmp	ip, r3
   1de8c:	d107      	bne.n	1de9e <_malloc_r+0x106>
   1de8e:	e16d      	b.n	1e16c <_malloc_r+0x3d4>
   1de90:	2a00      	cmp	r2, #0
   1de92:	f280 817b 	bge.w	1e18c <_malloc_r+0x3f4>
   1de96:	68db      	ldr	r3, [r3, #12]
   1de98:	459c      	cmp	ip, r3
   1de9a:	f000 8167 	beq.w	1e16c <_malloc_r+0x3d4>
   1de9e:	6859      	ldr	r1, [r3, #4]
   1dea0:	f021 0103 	bic.w	r1, r1, #3
   1dea4:	1b8a      	subs	r2, r1, r6
   1dea6:	2a0f      	cmp	r2, #15
   1dea8:	ddf2      	ble.n	1de90 <_malloc_r+0xf8>
   1deaa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1deae:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1deb2:	9300      	str	r3, [sp, #0]
   1deb4:	199c      	adds	r4, r3, r6
   1deb6:	4628      	mov	r0, r5
   1deb8:	f046 0601 	orr.w	r6, r6, #1
   1debc:	f042 0501 	orr.w	r5, r2, #1
   1dec0:	605e      	str	r6, [r3, #4]
   1dec2:	f8c8 c00c 	str.w	ip, [r8, #12]
   1dec6:	f8cc 8008 	str.w	r8, [ip, #8]
   1deca:	617c      	str	r4, [r7, #20]
   1decc:	613c      	str	r4, [r7, #16]
   1dece:	f8c4 e00c 	str.w	lr, [r4, #12]
   1ded2:	f8c4 e008 	str.w	lr, [r4, #8]
   1ded6:	6065      	str	r5, [r4, #4]
   1ded8:	505a      	str	r2, [r3, r1]
   1deda:	f000 fbfb 	bl	1e6d4 <__malloc_unlock>
   1dede:	9b00      	ldr	r3, [sp, #0]
   1dee0:	f103 0408 	add.w	r4, r3, #8
   1dee4:	e01e      	b.n	1df24 <_malloc_r+0x18c>
   1dee6:	2910      	cmp	r1, #16
   1dee8:	d820      	bhi.n	1df2c <_malloc_r+0x194>
   1deea:	f000 fbed 	bl	1e6c8 <__malloc_lock>
   1deee:	2610      	movs	r6, #16
   1def0:	2318      	movs	r3, #24
   1def2:	2002      	movs	r0, #2
   1def4:	4f79      	ldr	r7, [pc, #484]	; (1e0dc <_malloc_r+0x344>)
   1def6:	443b      	add	r3, r7
   1def8:	f1a3 0208 	sub.w	r2, r3, #8
   1defc:	685c      	ldr	r4, [r3, #4]
   1defe:	4294      	cmp	r4, r2
   1df00:	f000 813d 	beq.w	1e17e <_malloc_r+0x3e6>
   1df04:	6863      	ldr	r3, [r4, #4]
   1df06:	68e1      	ldr	r1, [r4, #12]
   1df08:	68a6      	ldr	r6, [r4, #8]
   1df0a:	f023 0303 	bic.w	r3, r3, #3
   1df0e:	4423      	add	r3, r4
   1df10:	4628      	mov	r0, r5
   1df12:	685a      	ldr	r2, [r3, #4]
   1df14:	60f1      	str	r1, [r6, #12]
   1df16:	f042 0201 	orr.w	r2, r2, #1
   1df1a:	608e      	str	r6, [r1, #8]
   1df1c:	605a      	str	r2, [r3, #4]
   1df1e:	f000 fbd9 	bl	1e6d4 <__malloc_unlock>
   1df22:	3408      	adds	r4, #8
   1df24:	4620      	mov	r0, r4
   1df26:	b003      	add	sp, #12
   1df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df2c:	2400      	movs	r4, #0
   1df2e:	230c      	movs	r3, #12
   1df30:	4620      	mov	r0, r4
   1df32:	602b      	str	r3, [r5, #0]
   1df34:	b003      	add	sp, #12
   1df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df3a:	2040      	movs	r0, #64	; 0x40
   1df3c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1df40:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1df44:	e74a      	b.n	1dddc <_malloc_r+0x44>
   1df46:	4423      	add	r3, r4
   1df48:	68e1      	ldr	r1, [r4, #12]
   1df4a:	685a      	ldr	r2, [r3, #4]
   1df4c:	68a6      	ldr	r6, [r4, #8]
   1df4e:	f042 0201 	orr.w	r2, r2, #1
   1df52:	60f1      	str	r1, [r6, #12]
   1df54:	4628      	mov	r0, r5
   1df56:	608e      	str	r6, [r1, #8]
   1df58:	605a      	str	r2, [r3, #4]
   1df5a:	f000 fbbb 	bl	1e6d4 <__malloc_unlock>
   1df5e:	3408      	adds	r4, #8
   1df60:	4620      	mov	r0, r4
   1df62:	b003      	add	sp, #12
   1df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df68:	4423      	add	r3, r4
   1df6a:	4628      	mov	r0, r5
   1df6c:	685a      	ldr	r2, [r3, #4]
   1df6e:	f042 0201 	orr.w	r2, r2, #1
   1df72:	605a      	str	r2, [r3, #4]
   1df74:	f000 fbae 	bl	1e6d4 <__malloc_unlock>
   1df78:	3408      	adds	r4, #8
   1df7a:	4620      	mov	r0, r4
   1df7c:	b003      	add	sp, #12
   1df7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df82:	68bc      	ldr	r4, [r7, #8]
   1df84:	6863      	ldr	r3, [r4, #4]
   1df86:	f023 0803 	bic.w	r8, r3, #3
   1df8a:	45b0      	cmp	r8, r6
   1df8c:	d304      	bcc.n	1df98 <_malloc_r+0x200>
   1df8e:	eba8 0306 	sub.w	r3, r8, r6
   1df92:	2b0f      	cmp	r3, #15
   1df94:	f300 8085 	bgt.w	1e0a2 <_malloc_r+0x30a>
   1df98:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1e0f4 <_malloc_r+0x35c>
   1df9c:	4b50      	ldr	r3, [pc, #320]	; (1e0e0 <_malloc_r+0x348>)
   1df9e:	f8d9 2000 	ldr.w	r2, [r9]
   1dfa2:	681b      	ldr	r3, [r3, #0]
   1dfa4:	3201      	adds	r2, #1
   1dfa6:	4433      	add	r3, r6
   1dfa8:	eb04 0a08 	add.w	sl, r4, r8
   1dfac:	f000 8155 	beq.w	1e25a <_malloc_r+0x4c2>
   1dfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1dfb4:	330f      	adds	r3, #15
   1dfb6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1dfba:	f02b 0b0f 	bic.w	fp, fp, #15
   1dfbe:	4659      	mov	r1, fp
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f000 fd73 	bl	1eaac <_sbrk_r>
   1dfc6:	1c41      	adds	r1, r0, #1
   1dfc8:	4602      	mov	r2, r0
   1dfca:	f000 80fc 	beq.w	1e1c6 <_malloc_r+0x42e>
   1dfce:	4582      	cmp	sl, r0
   1dfd0:	f200 80f7 	bhi.w	1e1c2 <_malloc_r+0x42a>
   1dfd4:	4b43      	ldr	r3, [pc, #268]	; (1e0e4 <_malloc_r+0x34c>)
   1dfd6:	6819      	ldr	r1, [r3, #0]
   1dfd8:	4459      	add	r1, fp
   1dfda:	6019      	str	r1, [r3, #0]
   1dfdc:	f000 814d 	beq.w	1e27a <_malloc_r+0x4e2>
   1dfe0:	f8d9 0000 	ldr.w	r0, [r9]
   1dfe4:	3001      	adds	r0, #1
   1dfe6:	bf1b      	ittet	ne
   1dfe8:	eba2 0a0a 	subne.w	sl, r2, sl
   1dfec:	4451      	addne	r1, sl
   1dfee:	f8c9 2000 	streq.w	r2, [r9]
   1dff2:	6019      	strne	r1, [r3, #0]
   1dff4:	f012 0107 	ands.w	r1, r2, #7
   1dff8:	f000 8115 	beq.w	1e226 <_malloc_r+0x48e>
   1dffc:	f1c1 0008 	rsb	r0, r1, #8
   1e000:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1e004:	4402      	add	r2, r0
   1e006:	3108      	adds	r1, #8
   1e008:	eb02 090b 	add.w	r9, r2, fp
   1e00c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1e010:	eba1 0909 	sub.w	r9, r1, r9
   1e014:	4649      	mov	r1, r9
   1e016:	4628      	mov	r0, r5
   1e018:	9301      	str	r3, [sp, #4]
   1e01a:	9200      	str	r2, [sp, #0]
   1e01c:	f000 fd46 	bl	1eaac <_sbrk_r>
   1e020:	1c43      	adds	r3, r0, #1
   1e022:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1e026:	f000 8143 	beq.w	1e2b0 <_malloc_r+0x518>
   1e02a:	1a80      	subs	r0, r0, r2
   1e02c:	4448      	add	r0, r9
   1e02e:	f040 0001 	orr.w	r0, r0, #1
   1e032:	6819      	ldr	r1, [r3, #0]
   1e034:	60ba      	str	r2, [r7, #8]
   1e036:	4449      	add	r1, r9
   1e038:	42bc      	cmp	r4, r7
   1e03a:	6050      	str	r0, [r2, #4]
   1e03c:	6019      	str	r1, [r3, #0]
   1e03e:	d017      	beq.n	1e070 <_malloc_r+0x2d8>
   1e040:	f1b8 0f0f 	cmp.w	r8, #15
   1e044:	f240 80fb 	bls.w	1e23e <_malloc_r+0x4a6>
   1e048:	6860      	ldr	r0, [r4, #4]
   1e04a:	f1a8 020c 	sub.w	r2, r8, #12
   1e04e:	f022 0207 	bic.w	r2, r2, #7
   1e052:	eb04 0e02 	add.w	lr, r4, r2
   1e056:	f000 0001 	and.w	r0, r0, #1
   1e05a:	f04f 0c05 	mov.w	ip, #5
   1e05e:	4310      	orrs	r0, r2
   1e060:	2a0f      	cmp	r2, #15
   1e062:	6060      	str	r0, [r4, #4]
   1e064:	f8ce c004 	str.w	ip, [lr, #4]
   1e068:	f8ce c008 	str.w	ip, [lr, #8]
   1e06c:	f200 8117 	bhi.w	1e29e <_malloc_r+0x506>
   1e070:	4b1d      	ldr	r3, [pc, #116]	; (1e0e8 <_malloc_r+0x350>)
   1e072:	68bc      	ldr	r4, [r7, #8]
   1e074:	681a      	ldr	r2, [r3, #0]
   1e076:	4291      	cmp	r1, r2
   1e078:	bf88      	it	hi
   1e07a:	6019      	strhi	r1, [r3, #0]
   1e07c:	4b1b      	ldr	r3, [pc, #108]	; (1e0ec <_malloc_r+0x354>)
   1e07e:	681a      	ldr	r2, [r3, #0]
   1e080:	4291      	cmp	r1, r2
   1e082:	6862      	ldr	r2, [r4, #4]
   1e084:	bf88      	it	hi
   1e086:	6019      	strhi	r1, [r3, #0]
   1e088:	f022 0203 	bic.w	r2, r2, #3
   1e08c:	4296      	cmp	r6, r2
   1e08e:	eba2 0306 	sub.w	r3, r2, r6
   1e092:	d801      	bhi.n	1e098 <_malloc_r+0x300>
   1e094:	2b0f      	cmp	r3, #15
   1e096:	dc04      	bgt.n	1e0a2 <_malloc_r+0x30a>
   1e098:	4628      	mov	r0, r5
   1e09a:	f000 fb1b 	bl	1e6d4 <__malloc_unlock>
   1e09e:	2400      	movs	r4, #0
   1e0a0:	e740      	b.n	1df24 <_malloc_r+0x18c>
   1e0a2:	19a2      	adds	r2, r4, r6
   1e0a4:	f043 0301 	orr.w	r3, r3, #1
   1e0a8:	f046 0601 	orr.w	r6, r6, #1
   1e0ac:	6066      	str	r6, [r4, #4]
   1e0ae:	4628      	mov	r0, r5
   1e0b0:	60ba      	str	r2, [r7, #8]
   1e0b2:	6053      	str	r3, [r2, #4]
   1e0b4:	f000 fb0e 	bl	1e6d4 <__malloc_unlock>
   1e0b8:	3408      	adds	r4, #8
   1e0ba:	4620      	mov	r0, r4
   1e0bc:	b003      	add	sp, #12
   1e0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0c2:	2b14      	cmp	r3, #20
   1e0c4:	d971      	bls.n	1e1aa <_malloc_r+0x412>
   1e0c6:	2b54      	cmp	r3, #84	; 0x54
   1e0c8:	f200 80a3 	bhi.w	1e212 <_malloc_r+0x47a>
   1e0cc:	0b33      	lsrs	r3, r6, #12
   1e0ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1e0d2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1e0d6:	00c3      	lsls	r3, r0, #3
   1e0d8:	e680      	b.n	1dddc <_malloc_r+0x44>
   1e0da:	bf00      	nop
   1e0dc:	2000069c 	.word	0x2000069c
   1e0e0:	200022e0 	.word	0x200022e0
   1e0e4:	200022b0 	.word	0x200022b0
   1e0e8:	200022d8 	.word	0x200022d8
   1e0ec:	200022dc 	.word	0x200022dc
   1e0f0:	200006a4 	.word	0x200006a4
   1e0f4:	20000aa4 	.word	0x20000aa4
   1e0f8:	0a5a      	lsrs	r2, r3, #9
   1e0fa:	2a04      	cmp	r2, #4
   1e0fc:	d95b      	bls.n	1e1b6 <_malloc_r+0x41e>
   1e0fe:	2a14      	cmp	r2, #20
   1e100:	f200 80ae 	bhi.w	1e260 <_malloc_r+0x4c8>
   1e104:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1e108:	00c9      	lsls	r1, r1, #3
   1e10a:	325b      	adds	r2, #91	; 0x5b
   1e10c:	eb07 0c01 	add.w	ip, r7, r1
   1e110:	5879      	ldr	r1, [r7, r1]
   1e112:	f1ac 0c08 	sub.w	ip, ip, #8
   1e116:	458c      	cmp	ip, r1
   1e118:	f000 8088 	beq.w	1e22c <_malloc_r+0x494>
   1e11c:	684a      	ldr	r2, [r1, #4]
   1e11e:	f022 0203 	bic.w	r2, r2, #3
   1e122:	4293      	cmp	r3, r2
   1e124:	d273      	bcs.n	1e20e <_malloc_r+0x476>
   1e126:	6889      	ldr	r1, [r1, #8]
   1e128:	458c      	cmp	ip, r1
   1e12a:	d1f7      	bne.n	1e11c <_malloc_r+0x384>
   1e12c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1e130:	687b      	ldr	r3, [r7, #4]
   1e132:	60e2      	str	r2, [r4, #12]
   1e134:	f8c4 c008 	str.w	ip, [r4, #8]
   1e138:	6094      	str	r4, [r2, #8]
   1e13a:	f8cc 400c 	str.w	r4, [ip, #12]
   1e13e:	e68f      	b.n	1de60 <_malloc_r+0xc8>
   1e140:	19a1      	adds	r1, r4, r6
   1e142:	f046 0c01 	orr.w	ip, r6, #1
   1e146:	f042 0601 	orr.w	r6, r2, #1
   1e14a:	f8c4 c004 	str.w	ip, [r4, #4]
   1e14e:	4628      	mov	r0, r5
   1e150:	6179      	str	r1, [r7, #20]
   1e152:	6139      	str	r1, [r7, #16]
   1e154:	f8c1 e00c 	str.w	lr, [r1, #12]
   1e158:	f8c1 e008 	str.w	lr, [r1, #8]
   1e15c:	604e      	str	r6, [r1, #4]
   1e15e:	50e2      	str	r2, [r4, r3]
   1e160:	f000 fab8 	bl	1e6d4 <__malloc_unlock>
   1e164:	3408      	adds	r4, #8
   1e166:	e6dd      	b.n	1df24 <_malloc_r+0x18c>
   1e168:	687b      	ldr	r3, [r7, #4]
   1e16a:	e679      	b.n	1de60 <_malloc_r+0xc8>
   1e16c:	f108 0801 	add.w	r8, r8, #1
   1e170:	f018 0f03 	tst.w	r8, #3
   1e174:	f10c 0c08 	add.w	ip, ip, #8
   1e178:	f47f ae85 	bne.w	1de86 <_malloc_r+0xee>
   1e17c:	e02d      	b.n	1e1da <_malloc_r+0x442>
   1e17e:	68dc      	ldr	r4, [r3, #12]
   1e180:	42a3      	cmp	r3, r4
   1e182:	bf08      	it	eq
   1e184:	3002      	addeq	r0, #2
   1e186:	f43f ae3e 	beq.w	1de06 <_malloc_r+0x6e>
   1e18a:	e6bb      	b.n	1df04 <_malloc_r+0x16c>
   1e18c:	4419      	add	r1, r3
   1e18e:	461c      	mov	r4, r3
   1e190:	684a      	ldr	r2, [r1, #4]
   1e192:	68db      	ldr	r3, [r3, #12]
   1e194:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e198:	f042 0201 	orr.w	r2, r2, #1
   1e19c:	604a      	str	r2, [r1, #4]
   1e19e:	4628      	mov	r0, r5
   1e1a0:	60f3      	str	r3, [r6, #12]
   1e1a2:	609e      	str	r6, [r3, #8]
   1e1a4:	f000 fa96 	bl	1e6d4 <__malloc_unlock>
   1e1a8:	e6bc      	b.n	1df24 <_malloc_r+0x18c>
   1e1aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e1ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e1b2:	00c3      	lsls	r3, r0, #3
   1e1b4:	e612      	b.n	1dddc <_malloc_r+0x44>
   1e1b6:	099a      	lsrs	r2, r3, #6
   1e1b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e1bc:	00c9      	lsls	r1, r1, #3
   1e1be:	3238      	adds	r2, #56	; 0x38
   1e1c0:	e7a4      	b.n	1e10c <_malloc_r+0x374>
   1e1c2:	42bc      	cmp	r4, r7
   1e1c4:	d054      	beq.n	1e270 <_malloc_r+0x4d8>
   1e1c6:	68bc      	ldr	r4, [r7, #8]
   1e1c8:	6862      	ldr	r2, [r4, #4]
   1e1ca:	f022 0203 	bic.w	r2, r2, #3
   1e1ce:	e75d      	b.n	1e08c <_malloc_r+0x2f4>
   1e1d0:	f859 3908 	ldr.w	r3, [r9], #-8
   1e1d4:	4599      	cmp	r9, r3
   1e1d6:	f040 8086 	bne.w	1e2e6 <_malloc_r+0x54e>
   1e1da:	f010 0f03 	tst.w	r0, #3
   1e1de:	f100 30ff 	add.w	r0, r0, #4294967295
   1e1e2:	d1f5      	bne.n	1e1d0 <_malloc_r+0x438>
   1e1e4:	687b      	ldr	r3, [r7, #4]
   1e1e6:	ea23 0304 	bic.w	r3, r3, r4
   1e1ea:	607b      	str	r3, [r7, #4]
   1e1ec:	0064      	lsls	r4, r4, #1
   1e1ee:	429c      	cmp	r4, r3
   1e1f0:	f63f aec7 	bhi.w	1df82 <_malloc_r+0x1ea>
   1e1f4:	2c00      	cmp	r4, #0
   1e1f6:	f43f aec4 	beq.w	1df82 <_malloc_r+0x1ea>
   1e1fa:	421c      	tst	r4, r3
   1e1fc:	4640      	mov	r0, r8
   1e1fe:	f47f ae3e 	bne.w	1de7e <_malloc_r+0xe6>
   1e202:	0064      	lsls	r4, r4, #1
   1e204:	421c      	tst	r4, r3
   1e206:	f100 0004 	add.w	r0, r0, #4
   1e20a:	d0fa      	beq.n	1e202 <_malloc_r+0x46a>
   1e20c:	e637      	b.n	1de7e <_malloc_r+0xe6>
   1e20e:	468c      	mov	ip, r1
   1e210:	e78c      	b.n	1e12c <_malloc_r+0x394>
   1e212:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e216:	d815      	bhi.n	1e244 <_malloc_r+0x4ac>
   1e218:	0bf3      	lsrs	r3, r6, #15
   1e21a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e21e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e222:	00c3      	lsls	r3, r0, #3
   1e224:	e5da      	b.n	1dddc <_malloc_r+0x44>
   1e226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e22a:	e6ed      	b.n	1e008 <_malloc_r+0x270>
   1e22c:	687b      	ldr	r3, [r7, #4]
   1e22e:	1092      	asrs	r2, r2, #2
   1e230:	2101      	movs	r1, #1
   1e232:	fa01 f202 	lsl.w	r2, r1, r2
   1e236:	4313      	orrs	r3, r2
   1e238:	607b      	str	r3, [r7, #4]
   1e23a:	4662      	mov	r2, ip
   1e23c:	e779      	b.n	1e132 <_malloc_r+0x39a>
   1e23e:	2301      	movs	r3, #1
   1e240:	6053      	str	r3, [r2, #4]
   1e242:	e729      	b.n	1e098 <_malloc_r+0x300>
   1e244:	f240 5254 	movw	r2, #1364	; 0x554
   1e248:	4293      	cmp	r3, r2
   1e24a:	d822      	bhi.n	1e292 <_malloc_r+0x4fa>
   1e24c:	0cb3      	lsrs	r3, r6, #18
   1e24e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e252:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e256:	00c3      	lsls	r3, r0, #3
   1e258:	e5c0      	b.n	1dddc <_malloc_r+0x44>
   1e25a:	f103 0b10 	add.w	fp, r3, #16
   1e25e:	e6ae      	b.n	1dfbe <_malloc_r+0x226>
   1e260:	2a54      	cmp	r2, #84	; 0x54
   1e262:	d829      	bhi.n	1e2b8 <_malloc_r+0x520>
   1e264:	0b1a      	lsrs	r2, r3, #12
   1e266:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e26a:	00c9      	lsls	r1, r1, #3
   1e26c:	326e      	adds	r2, #110	; 0x6e
   1e26e:	e74d      	b.n	1e10c <_malloc_r+0x374>
   1e270:	4b20      	ldr	r3, [pc, #128]	; (1e2f4 <_malloc_r+0x55c>)
   1e272:	6819      	ldr	r1, [r3, #0]
   1e274:	4459      	add	r1, fp
   1e276:	6019      	str	r1, [r3, #0]
   1e278:	e6b2      	b.n	1dfe0 <_malloc_r+0x248>
   1e27a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e27e:	2800      	cmp	r0, #0
   1e280:	f47f aeae 	bne.w	1dfe0 <_malloc_r+0x248>
   1e284:	eb08 030b 	add.w	r3, r8, fp
   1e288:	68ba      	ldr	r2, [r7, #8]
   1e28a:	f043 0301 	orr.w	r3, r3, #1
   1e28e:	6053      	str	r3, [r2, #4]
   1e290:	e6ee      	b.n	1e070 <_malloc_r+0x2d8>
   1e292:	207f      	movs	r0, #127	; 0x7f
   1e294:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e298:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e29c:	e59e      	b.n	1dddc <_malloc_r+0x44>
   1e29e:	f104 0108 	add.w	r1, r4, #8
   1e2a2:	4628      	mov	r0, r5
   1e2a4:	9300      	str	r3, [sp, #0]
   1e2a6:	f003 fba7 	bl	219f8 <_free_r>
   1e2aa:	9b00      	ldr	r3, [sp, #0]
   1e2ac:	6819      	ldr	r1, [r3, #0]
   1e2ae:	e6df      	b.n	1e070 <_malloc_r+0x2d8>
   1e2b0:	2001      	movs	r0, #1
   1e2b2:	f04f 0900 	mov.w	r9, #0
   1e2b6:	e6bc      	b.n	1e032 <_malloc_r+0x29a>
   1e2b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e2bc:	d805      	bhi.n	1e2ca <_malloc_r+0x532>
   1e2be:	0bda      	lsrs	r2, r3, #15
   1e2c0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e2c4:	00c9      	lsls	r1, r1, #3
   1e2c6:	3277      	adds	r2, #119	; 0x77
   1e2c8:	e720      	b.n	1e10c <_malloc_r+0x374>
   1e2ca:	f240 5154 	movw	r1, #1364	; 0x554
   1e2ce:	428a      	cmp	r2, r1
   1e2d0:	d805      	bhi.n	1e2de <_malloc_r+0x546>
   1e2d2:	0c9a      	lsrs	r2, r3, #18
   1e2d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e2d8:	00c9      	lsls	r1, r1, #3
   1e2da:	327c      	adds	r2, #124	; 0x7c
   1e2dc:	e716      	b.n	1e10c <_malloc_r+0x374>
   1e2de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e2e2:	227e      	movs	r2, #126	; 0x7e
   1e2e4:	e712      	b.n	1e10c <_malloc_r+0x374>
   1e2e6:	687b      	ldr	r3, [r7, #4]
   1e2e8:	e780      	b.n	1e1ec <_malloc_r+0x454>
   1e2ea:	08f0      	lsrs	r0, r6, #3
   1e2ec:	f106 0308 	add.w	r3, r6, #8
   1e2f0:	e600      	b.n	1def4 <_malloc_r+0x15c>
   1e2f2:	bf00      	nop
   1e2f4:	200022b0 	.word	0x200022b0

0001e2f8 <__ascii_mbtowc>:
   1e2f8:	b082      	sub	sp, #8
   1e2fa:	b149      	cbz	r1, 1e310 <__ascii_mbtowc+0x18>
   1e2fc:	b15a      	cbz	r2, 1e316 <__ascii_mbtowc+0x1e>
   1e2fe:	b16b      	cbz	r3, 1e31c <__ascii_mbtowc+0x24>
   1e300:	7813      	ldrb	r3, [r2, #0]
   1e302:	600b      	str	r3, [r1, #0]
   1e304:	7812      	ldrb	r2, [r2, #0]
   1e306:	1c10      	adds	r0, r2, #0
   1e308:	bf18      	it	ne
   1e30a:	2001      	movne	r0, #1
   1e30c:	b002      	add	sp, #8
   1e30e:	4770      	bx	lr
   1e310:	a901      	add	r1, sp, #4
   1e312:	2a00      	cmp	r2, #0
   1e314:	d1f3      	bne.n	1e2fe <__ascii_mbtowc+0x6>
   1e316:	4610      	mov	r0, r2
   1e318:	b002      	add	sp, #8
   1e31a:	4770      	bx	lr
   1e31c:	f06f 0001 	mvn.w	r0, #1
   1e320:	e7f4      	b.n	1e30c <__ascii_mbtowc+0x14>
   1e322:	bf00      	nop
	...

0001e330 <memchr>:
   1e330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e334:	2a10      	cmp	r2, #16
   1e336:	db2b      	blt.n	1e390 <memchr+0x60>
   1e338:	f010 0f07 	tst.w	r0, #7
   1e33c:	d008      	beq.n	1e350 <memchr+0x20>
   1e33e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e342:	3a01      	subs	r2, #1
   1e344:	428b      	cmp	r3, r1
   1e346:	d02d      	beq.n	1e3a4 <memchr+0x74>
   1e348:	f010 0f07 	tst.w	r0, #7
   1e34c:	b342      	cbz	r2, 1e3a0 <memchr+0x70>
   1e34e:	d1f6      	bne.n	1e33e <memchr+0xe>
   1e350:	b4f0      	push	{r4, r5, r6, r7}
   1e352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e35a:	f022 0407 	bic.w	r4, r2, #7
   1e35e:	f07f 0700 	mvns.w	r7, #0
   1e362:	2300      	movs	r3, #0
   1e364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e368:	3c08      	subs	r4, #8
   1e36a:	ea85 0501 	eor.w	r5, r5, r1
   1e36e:	ea86 0601 	eor.w	r6, r6, r1
   1e372:	fa85 f547 	uadd8	r5, r5, r7
   1e376:	faa3 f587 	sel	r5, r3, r7
   1e37a:	fa86 f647 	uadd8	r6, r6, r7
   1e37e:	faa5 f687 	sel	r6, r5, r7
   1e382:	b98e      	cbnz	r6, 1e3a8 <memchr+0x78>
   1e384:	d1ee      	bne.n	1e364 <memchr+0x34>
   1e386:	bcf0      	pop	{r4, r5, r6, r7}
   1e388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e38c:	f002 0207 	and.w	r2, r2, #7
   1e390:	b132      	cbz	r2, 1e3a0 <memchr+0x70>
   1e392:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e396:	3a01      	subs	r2, #1
   1e398:	ea83 0301 	eor.w	r3, r3, r1
   1e39c:	b113      	cbz	r3, 1e3a4 <memchr+0x74>
   1e39e:	d1f8      	bne.n	1e392 <memchr+0x62>
   1e3a0:	2000      	movs	r0, #0
   1e3a2:	4770      	bx	lr
   1e3a4:	3801      	subs	r0, #1
   1e3a6:	4770      	bx	lr
   1e3a8:	2d00      	cmp	r5, #0
   1e3aa:	bf06      	itte	eq
   1e3ac:	4635      	moveq	r5, r6
   1e3ae:	3803      	subeq	r0, #3
   1e3b0:	3807      	subne	r0, #7
   1e3b2:	f015 0f01 	tst.w	r5, #1
   1e3b6:	d107      	bne.n	1e3c8 <memchr+0x98>
   1e3b8:	3001      	adds	r0, #1
   1e3ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e3be:	bf02      	ittt	eq
   1e3c0:	3001      	addeq	r0, #1
   1e3c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e3c6:	3001      	addeq	r0, #1
   1e3c8:	bcf0      	pop	{r4, r5, r6, r7}
   1e3ca:	3801      	subs	r0, #1
   1e3cc:	4770      	bx	lr
   1e3ce:	bf00      	nop

0001e3d0 <memcmp>:
   1e3d0:	2a03      	cmp	r2, #3
   1e3d2:	b470      	push	{r4, r5, r6}
   1e3d4:	d922      	bls.n	1e41c <memcmp+0x4c>
   1e3d6:	ea40 0301 	orr.w	r3, r0, r1
   1e3da:	079b      	lsls	r3, r3, #30
   1e3dc:	d011      	beq.n	1e402 <memcmp+0x32>
   1e3de:	7803      	ldrb	r3, [r0, #0]
   1e3e0:	780c      	ldrb	r4, [r1, #0]
   1e3e2:	42a3      	cmp	r3, r4
   1e3e4:	d11d      	bne.n	1e422 <memcmp+0x52>
   1e3e6:	440a      	add	r2, r1
   1e3e8:	3101      	adds	r1, #1
   1e3ea:	e005      	b.n	1e3f8 <memcmp+0x28>
   1e3ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e3f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e3f4:	42a3      	cmp	r3, r4
   1e3f6:	d114      	bne.n	1e422 <memcmp+0x52>
   1e3f8:	4291      	cmp	r1, r2
   1e3fa:	d1f7      	bne.n	1e3ec <memcmp+0x1c>
   1e3fc:	2000      	movs	r0, #0
   1e3fe:	bc70      	pop	{r4, r5, r6}
   1e400:	4770      	bx	lr
   1e402:	680d      	ldr	r5, [r1, #0]
   1e404:	6806      	ldr	r6, [r0, #0]
   1e406:	42ae      	cmp	r6, r5
   1e408:	460c      	mov	r4, r1
   1e40a:	4603      	mov	r3, r0
   1e40c:	f101 0104 	add.w	r1, r1, #4
   1e410:	f100 0004 	add.w	r0, r0, #4
   1e414:	d108      	bne.n	1e428 <memcmp+0x58>
   1e416:	3a04      	subs	r2, #4
   1e418:	2a03      	cmp	r2, #3
   1e41a:	d8f2      	bhi.n	1e402 <memcmp+0x32>
   1e41c:	2a00      	cmp	r2, #0
   1e41e:	d1de      	bne.n	1e3de <memcmp+0xe>
   1e420:	e7ec      	b.n	1e3fc <memcmp+0x2c>
   1e422:	1b18      	subs	r0, r3, r4
   1e424:	bc70      	pop	{r4, r5, r6}
   1e426:	4770      	bx	lr
   1e428:	4621      	mov	r1, r4
   1e42a:	4618      	mov	r0, r3
   1e42c:	e7d7      	b.n	1e3de <memcmp+0xe>
   1e42e:	bf00      	nop

0001e430 <memcpy>:
   1e430:	4684      	mov	ip, r0
   1e432:	ea41 0300 	orr.w	r3, r1, r0
   1e436:	f013 0303 	ands.w	r3, r3, #3
   1e43a:	d16d      	bne.n	1e518 <memcpy+0xe8>
   1e43c:	3a40      	subs	r2, #64	; 0x40
   1e43e:	d341      	bcc.n	1e4c4 <memcpy+0x94>
   1e440:	f851 3b04 	ldr.w	r3, [r1], #4
   1e444:	f840 3b04 	str.w	r3, [r0], #4
   1e448:	f851 3b04 	ldr.w	r3, [r1], #4
   1e44c:	f840 3b04 	str.w	r3, [r0], #4
   1e450:	f851 3b04 	ldr.w	r3, [r1], #4
   1e454:	f840 3b04 	str.w	r3, [r0], #4
   1e458:	f851 3b04 	ldr.w	r3, [r1], #4
   1e45c:	f840 3b04 	str.w	r3, [r0], #4
   1e460:	f851 3b04 	ldr.w	r3, [r1], #4
   1e464:	f840 3b04 	str.w	r3, [r0], #4
   1e468:	f851 3b04 	ldr.w	r3, [r1], #4
   1e46c:	f840 3b04 	str.w	r3, [r0], #4
   1e470:	f851 3b04 	ldr.w	r3, [r1], #4
   1e474:	f840 3b04 	str.w	r3, [r0], #4
   1e478:	f851 3b04 	ldr.w	r3, [r1], #4
   1e47c:	f840 3b04 	str.w	r3, [r0], #4
   1e480:	f851 3b04 	ldr.w	r3, [r1], #4
   1e484:	f840 3b04 	str.w	r3, [r0], #4
   1e488:	f851 3b04 	ldr.w	r3, [r1], #4
   1e48c:	f840 3b04 	str.w	r3, [r0], #4
   1e490:	f851 3b04 	ldr.w	r3, [r1], #4
   1e494:	f840 3b04 	str.w	r3, [r0], #4
   1e498:	f851 3b04 	ldr.w	r3, [r1], #4
   1e49c:	f840 3b04 	str.w	r3, [r0], #4
   1e4a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4a4:	f840 3b04 	str.w	r3, [r0], #4
   1e4a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4ac:	f840 3b04 	str.w	r3, [r0], #4
   1e4b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4b4:	f840 3b04 	str.w	r3, [r0], #4
   1e4b8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4bc:	f840 3b04 	str.w	r3, [r0], #4
   1e4c0:	3a40      	subs	r2, #64	; 0x40
   1e4c2:	d2bd      	bcs.n	1e440 <memcpy+0x10>
   1e4c4:	3230      	adds	r2, #48	; 0x30
   1e4c6:	d311      	bcc.n	1e4ec <memcpy+0xbc>
   1e4c8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4cc:	f840 3b04 	str.w	r3, [r0], #4
   1e4d0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4d4:	f840 3b04 	str.w	r3, [r0], #4
   1e4d8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4dc:	f840 3b04 	str.w	r3, [r0], #4
   1e4e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4e4:	f840 3b04 	str.w	r3, [r0], #4
   1e4e8:	3a10      	subs	r2, #16
   1e4ea:	d2ed      	bcs.n	1e4c8 <memcpy+0x98>
   1e4ec:	320c      	adds	r2, #12
   1e4ee:	d305      	bcc.n	1e4fc <memcpy+0xcc>
   1e4f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e4f4:	f840 3b04 	str.w	r3, [r0], #4
   1e4f8:	3a04      	subs	r2, #4
   1e4fa:	d2f9      	bcs.n	1e4f0 <memcpy+0xc0>
   1e4fc:	3204      	adds	r2, #4
   1e4fe:	d008      	beq.n	1e512 <memcpy+0xe2>
   1e500:	07d2      	lsls	r2, r2, #31
   1e502:	bf1c      	itt	ne
   1e504:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e508:	f800 3b01 	strbne.w	r3, [r0], #1
   1e50c:	d301      	bcc.n	1e512 <memcpy+0xe2>
   1e50e:	880b      	ldrh	r3, [r1, #0]
   1e510:	8003      	strh	r3, [r0, #0]
   1e512:	4660      	mov	r0, ip
   1e514:	4770      	bx	lr
   1e516:	bf00      	nop
   1e518:	2a08      	cmp	r2, #8
   1e51a:	d313      	bcc.n	1e544 <memcpy+0x114>
   1e51c:	078b      	lsls	r3, r1, #30
   1e51e:	d08d      	beq.n	1e43c <memcpy+0xc>
   1e520:	f010 0303 	ands.w	r3, r0, #3
   1e524:	d08a      	beq.n	1e43c <memcpy+0xc>
   1e526:	f1c3 0304 	rsb	r3, r3, #4
   1e52a:	1ad2      	subs	r2, r2, r3
   1e52c:	07db      	lsls	r3, r3, #31
   1e52e:	bf1c      	itt	ne
   1e530:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e534:	f800 3b01 	strbne.w	r3, [r0], #1
   1e538:	d380      	bcc.n	1e43c <memcpy+0xc>
   1e53a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e53e:	f820 3b02 	strh.w	r3, [r0], #2
   1e542:	e77b      	b.n	1e43c <memcpy+0xc>
   1e544:	3a04      	subs	r2, #4
   1e546:	d3d9      	bcc.n	1e4fc <memcpy+0xcc>
   1e548:	3a01      	subs	r2, #1
   1e54a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e54e:	f800 3b01 	strb.w	r3, [r0], #1
   1e552:	d2f9      	bcs.n	1e548 <memcpy+0x118>
   1e554:	780b      	ldrb	r3, [r1, #0]
   1e556:	7003      	strb	r3, [r0, #0]
   1e558:	784b      	ldrb	r3, [r1, #1]
   1e55a:	7043      	strb	r3, [r0, #1]
   1e55c:	788b      	ldrb	r3, [r1, #2]
   1e55e:	7083      	strb	r3, [r0, #2]
   1e560:	4660      	mov	r0, ip
   1e562:	4770      	bx	lr

0001e564 <memmove>:
   1e564:	4288      	cmp	r0, r1
   1e566:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e568:	d90d      	bls.n	1e586 <memmove+0x22>
   1e56a:	188b      	adds	r3, r1, r2
   1e56c:	4298      	cmp	r0, r3
   1e56e:	d20a      	bcs.n	1e586 <memmove+0x22>
   1e570:	1884      	adds	r4, r0, r2
   1e572:	2a00      	cmp	r2, #0
   1e574:	d051      	beq.n	1e61a <memmove+0xb6>
   1e576:	4622      	mov	r2, r4
   1e578:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e57c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e580:	4299      	cmp	r1, r3
   1e582:	d1f9      	bne.n	1e578 <memmove+0x14>
   1e584:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e586:	2a0f      	cmp	r2, #15
   1e588:	d948      	bls.n	1e61c <memmove+0xb8>
   1e58a:	ea41 0300 	orr.w	r3, r1, r0
   1e58e:	079b      	lsls	r3, r3, #30
   1e590:	d146      	bne.n	1e620 <memmove+0xbc>
   1e592:	f100 0410 	add.w	r4, r0, #16
   1e596:	f101 0310 	add.w	r3, r1, #16
   1e59a:	4615      	mov	r5, r2
   1e59c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e5a0:	f844 6c10 	str.w	r6, [r4, #-16]
   1e5a4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e5a8:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e5ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e5b0:	f844 6c08 	str.w	r6, [r4, #-8]
   1e5b4:	3d10      	subs	r5, #16
   1e5b6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e5ba:	f844 6c04 	str.w	r6, [r4, #-4]
   1e5be:	2d0f      	cmp	r5, #15
   1e5c0:	f103 0310 	add.w	r3, r3, #16
   1e5c4:	f104 0410 	add.w	r4, r4, #16
   1e5c8:	d8e8      	bhi.n	1e59c <memmove+0x38>
   1e5ca:	f1a2 0310 	sub.w	r3, r2, #16
   1e5ce:	f023 030f 	bic.w	r3, r3, #15
   1e5d2:	f002 0e0f 	and.w	lr, r2, #15
   1e5d6:	3310      	adds	r3, #16
   1e5d8:	f1be 0f03 	cmp.w	lr, #3
   1e5dc:	4419      	add	r1, r3
   1e5de:	4403      	add	r3, r0
   1e5e0:	d921      	bls.n	1e626 <memmove+0xc2>
   1e5e2:	1f1e      	subs	r6, r3, #4
   1e5e4:	460d      	mov	r5, r1
   1e5e6:	4674      	mov	r4, lr
   1e5e8:	3c04      	subs	r4, #4
   1e5ea:	f855 7b04 	ldr.w	r7, [r5], #4
   1e5ee:	f846 7f04 	str.w	r7, [r6, #4]!
   1e5f2:	2c03      	cmp	r4, #3
   1e5f4:	d8f8      	bhi.n	1e5e8 <memmove+0x84>
   1e5f6:	f1ae 0404 	sub.w	r4, lr, #4
   1e5fa:	f024 0403 	bic.w	r4, r4, #3
   1e5fe:	3404      	adds	r4, #4
   1e600:	4421      	add	r1, r4
   1e602:	4423      	add	r3, r4
   1e604:	f002 0203 	and.w	r2, r2, #3
   1e608:	b162      	cbz	r2, 1e624 <memmove+0xc0>
   1e60a:	3b01      	subs	r3, #1
   1e60c:	440a      	add	r2, r1
   1e60e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e612:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e616:	428a      	cmp	r2, r1
   1e618:	d1f9      	bne.n	1e60e <memmove+0xaa>
   1e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e61c:	4603      	mov	r3, r0
   1e61e:	e7f3      	b.n	1e608 <memmove+0xa4>
   1e620:	4603      	mov	r3, r0
   1e622:	e7f2      	b.n	1e60a <memmove+0xa6>
   1e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e626:	4672      	mov	r2, lr
   1e628:	e7ee      	b.n	1e608 <memmove+0xa4>
   1e62a:	bf00      	nop

0001e62c <memset>:
   1e62c:	b470      	push	{r4, r5, r6}
   1e62e:	0786      	lsls	r6, r0, #30
   1e630:	d046      	beq.n	1e6c0 <memset+0x94>
   1e632:	1e54      	subs	r4, r2, #1
   1e634:	2a00      	cmp	r2, #0
   1e636:	d041      	beq.n	1e6bc <memset+0x90>
   1e638:	b2ca      	uxtb	r2, r1
   1e63a:	4603      	mov	r3, r0
   1e63c:	e002      	b.n	1e644 <memset+0x18>
   1e63e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e642:	d33b      	bcc.n	1e6bc <memset+0x90>
   1e644:	f803 2b01 	strb.w	r2, [r3], #1
   1e648:	079d      	lsls	r5, r3, #30
   1e64a:	d1f8      	bne.n	1e63e <memset+0x12>
   1e64c:	2c03      	cmp	r4, #3
   1e64e:	d92e      	bls.n	1e6ae <memset+0x82>
   1e650:	b2cd      	uxtb	r5, r1
   1e652:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e656:	2c0f      	cmp	r4, #15
   1e658:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e65c:	d919      	bls.n	1e692 <memset+0x66>
   1e65e:	f103 0210 	add.w	r2, r3, #16
   1e662:	4626      	mov	r6, r4
   1e664:	3e10      	subs	r6, #16
   1e666:	2e0f      	cmp	r6, #15
   1e668:	f842 5c10 	str.w	r5, [r2, #-16]
   1e66c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e670:	f842 5c08 	str.w	r5, [r2, #-8]
   1e674:	f842 5c04 	str.w	r5, [r2, #-4]
   1e678:	f102 0210 	add.w	r2, r2, #16
   1e67c:	d8f2      	bhi.n	1e664 <memset+0x38>
   1e67e:	f1a4 0210 	sub.w	r2, r4, #16
   1e682:	f022 020f 	bic.w	r2, r2, #15
   1e686:	f004 040f 	and.w	r4, r4, #15
   1e68a:	3210      	adds	r2, #16
   1e68c:	2c03      	cmp	r4, #3
   1e68e:	4413      	add	r3, r2
   1e690:	d90d      	bls.n	1e6ae <memset+0x82>
   1e692:	461e      	mov	r6, r3
   1e694:	4622      	mov	r2, r4
   1e696:	3a04      	subs	r2, #4
   1e698:	2a03      	cmp	r2, #3
   1e69a:	f846 5b04 	str.w	r5, [r6], #4
   1e69e:	d8fa      	bhi.n	1e696 <memset+0x6a>
   1e6a0:	1f22      	subs	r2, r4, #4
   1e6a2:	f022 0203 	bic.w	r2, r2, #3
   1e6a6:	3204      	adds	r2, #4
   1e6a8:	4413      	add	r3, r2
   1e6aa:	f004 0403 	and.w	r4, r4, #3
   1e6ae:	b12c      	cbz	r4, 1e6bc <memset+0x90>
   1e6b0:	b2c9      	uxtb	r1, r1
   1e6b2:	441c      	add	r4, r3
   1e6b4:	f803 1b01 	strb.w	r1, [r3], #1
   1e6b8:	429c      	cmp	r4, r3
   1e6ba:	d1fb      	bne.n	1e6b4 <memset+0x88>
   1e6bc:	bc70      	pop	{r4, r5, r6}
   1e6be:	4770      	bx	lr
   1e6c0:	4614      	mov	r4, r2
   1e6c2:	4603      	mov	r3, r0
   1e6c4:	e7c2      	b.n	1e64c <memset+0x20>
   1e6c6:	bf00      	nop

0001e6c8 <__malloc_lock>:
   1e6c8:	4801      	ldr	r0, [pc, #4]	; (1e6d0 <__malloc_lock+0x8>)
   1e6ca:	f7ff bb51 	b.w	1dd70 <__retarget_lock_acquire_recursive>
   1e6ce:	bf00      	nop
   1e6d0:	20002398 	.word	0x20002398

0001e6d4 <__malloc_unlock>:
   1e6d4:	4801      	ldr	r0, [pc, #4]	; (1e6dc <__malloc_unlock+0x8>)
   1e6d6:	f7ff bb4d 	b.w	1dd74 <__retarget_lock_release_recursive>
   1e6da:	bf00      	nop
   1e6dc:	20002398 	.word	0x20002398

0001e6e0 <_putc_r>:
   1e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6e2:	460e      	mov	r6, r1
   1e6e4:	4614      	mov	r4, r2
   1e6e6:	4607      	mov	r7, r0
   1e6e8:	b108      	cbz	r0, 1e6ee <_putc_r+0xe>
   1e6ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e6ec:	b34b      	cbz	r3, 1e742 <_putc_r+0x62>
   1e6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e6f0:	07d8      	lsls	r0, r3, #31
   1e6f2:	d402      	bmi.n	1e6fa <_putc_r+0x1a>
   1e6f4:	89a3      	ldrh	r3, [r4, #12]
   1e6f6:	0599      	lsls	r1, r3, #22
   1e6f8:	d526      	bpl.n	1e748 <_putc_r+0x68>
   1e6fa:	68a3      	ldr	r3, [r4, #8]
   1e6fc:	3b01      	subs	r3, #1
   1e6fe:	2b00      	cmp	r3, #0
   1e700:	60a3      	str	r3, [r4, #8]
   1e702:	db11      	blt.n	1e728 <_putc_r+0x48>
   1e704:	b2f5      	uxtb	r5, r6
   1e706:	6823      	ldr	r3, [r4, #0]
   1e708:	1c5a      	adds	r2, r3, #1
   1e70a:	6022      	str	r2, [r4, #0]
   1e70c:	701e      	strb	r6, [r3, #0]
   1e70e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e710:	07da      	lsls	r2, r3, #31
   1e712:	d402      	bmi.n	1e71a <_putc_r+0x3a>
   1e714:	89a3      	ldrh	r3, [r4, #12]
   1e716:	059b      	lsls	r3, r3, #22
   1e718:	d501      	bpl.n	1e71e <_putc_r+0x3e>
   1e71a:	4628      	mov	r0, r5
   1e71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e71e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e720:	f7ff fb28 	bl	1dd74 <__retarget_lock_release_recursive>
   1e724:	4628      	mov	r0, r5
   1e726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e728:	69a2      	ldr	r2, [r4, #24]
   1e72a:	4293      	cmp	r3, r2
   1e72c:	db02      	blt.n	1e734 <_putc_r+0x54>
   1e72e:	b2f5      	uxtb	r5, r6
   1e730:	2d0a      	cmp	r5, #10
   1e732:	d1e8      	bne.n	1e706 <_putc_r+0x26>
   1e734:	4631      	mov	r1, r6
   1e736:	4638      	mov	r0, r7
   1e738:	4622      	mov	r2, r4
   1e73a:	f001 ff17 	bl	2056c <__swbuf_r>
   1e73e:	4605      	mov	r5, r0
   1e740:	e7e5      	b.n	1e70e <_putc_r+0x2e>
   1e742:	f003 f8b7 	bl	218b4 <__sinit>
   1e746:	e7d2      	b.n	1e6ee <_putc_r+0xe>
   1e748:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e74a:	f7ff fb11 	bl	1dd70 <__retarget_lock_acquire_recursive>
   1e74e:	e7d4      	b.n	1e6fa <_putc_r+0x1a>

0001e750 <realloc>:
   1e750:	4b02      	ldr	r3, [pc, #8]	; (1e75c <realloc+0xc>)
   1e752:	460a      	mov	r2, r1
   1e754:	4601      	mov	r1, r0
   1e756:	6818      	ldr	r0, [r3, #0]
   1e758:	f000 b802 	b.w	1e760 <_realloc_r>
   1e75c:	20000100 	.word	0x20000100

0001e760 <_realloc_r>:
   1e760:	2900      	cmp	r1, #0
   1e762:	f000 8095 	beq.w	1e890 <_realloc_r+0x130>
   1e766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e76a:	460d      	mov	r5, r1
   1e76c:	4616      	mov	r6, r2
   1e76e:	b083      	sub	sp, #12
   1e770:	4680      	mov	r8, r0
   1e772:	f106 070b 	add.w	r7, r6, #11
   1e776:	f7ff ffa7 	bl	1e6c8 <__malloc_lock>
   1e77a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e77e:	2f16      	cmp	r7, #22
   1e780:	f02e 0403 	bic.w	r4, lr, #3
   1e784:	f1a5 0908 	sub.w	r9, r5, #8
   1e788:	d83c      	bhi.n	1e804 <_realloc_r+0xa4>
   1e78a:	2210      	movs	r2, #16
   1e78c:	4617      	mov	r7, r2
   1e78e:	42be      	cmp	r6, r7
   1e790:	d83d      	bhi.n	1e80e <_realloc_r+0xae>
   1e792:	4294      	cmp	r4, r2
   1e794:	da43      	bge.n	1e81e <_realloc_r+0xbe>
   1e796:	4bc4      	ldr	r3, [pc, #784]	; (1eaa8 <_realloc_r+0x348>)
   1e798:	6899      	ldr	r1, [r3, #8]
   1e79a:	eb09 0004 	add.w	r0, r9, r4
   1e79e:	4288      	cmp	r0, r1
   1e7a0:	f000 80b4 	beq.w	1e90c <_realloc_r+0x1ac>
   1e7a4:	6843      	ldr	r3, [r0, #4]
   1e7a6:	f023 0101 	bic.w	r1, r3, #1
   1e7aa:	4401      	add	r1, r0
   1e7ac:	6849      	ldr	r1, [r1, #4]
   1e7ae:	07c9      	lsls	r1, r1, #31
   1e7b0:	d54c      	bpl.n	1e84c <_realloc_r+0xec>
   1e7b2:	f01e 0f01 	tst.w	lr, #1
   1e7b6:	f000 809b 	beq.w	1e8f0 <_realloc_r+0x190>
   1e7ba:	4631      	mov	r1, r6
   1e7bc:	4640      	mov	r0, r8
   1e7be:	f7ff faeb 	bl	1dd98 <_malloc_r>
   1e7c2:	4606      	mov	r6, r0
   1e7c4:	2800      	cmp	r0, #0
   1e7c6:	d03a      	beq.n	1e83e <_realloc_r+0xde>
   1e7c8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e7cc:	f023 0301 	bic.w	r3, r3, #1
   1e7d0:	444b      	add	r3, r9
   1e7d2:	f1a0 0208 	sub.w	r2, r0, #8
   1e7d6:	429a      	cmp	r2, r3
   1e7d8:	f000 8121 	beq.w	1ea1e <_realloc_r+0x2be>
   1e7dc:	1f22      	subs	r2, r4, #4
   1e7de:	2a24      	cmp	r2, #36	; 0x24
   1e7e0:	f200 8107 	bhi.w	1e9f2 <_realloc_r+0x292>
   1e7e4:	2a13      	cmp	r2, #19
   1e7e6:	f200 80db 	bhi.w	1e9a0 <_realloc_r+0x240>
   1e7ea:	4603      	mov	r3, r0
   1e7ec:	462a      	mov	r2, r5
   1e7ee:	6811      	ldr	r1, [r2, #0]
   1e7f0:	6019      	str	r1, [r3, #0]
   1e7f2:	6851      	ldr	r1, [r2, #4]
   1e7f4:	6059      	str	r1, [r3, #4]
   1e7f6:	6892      	ldr	r2, [r2, #8]
   1e7f8:	609a      	str	r2, [r3, #8]
   1e7fa:	4629      	mov	r1, r5
   1e7fc:	4640      	mov	r0, r8
   1e7fe:	f003 f8fb 	bl	219f8 <_free_r>
   1e802:	e01c      	b.n	1e83e <_realloc_r+0xde>
   1e804:	f027 0707 	bic.w	r7, r7, #7
   1e808:	2f00      	cmp	r7, #0
   1e80a:	463a      	mov	r2, r7
   1e80c:	dabf      	bge.n	1e78e <_realloc_r+0x2e>
   1e80e:	2600      	movs	r6, #0
   1e810:	230c      	movs	r3, #12
   1e812:	4630      	mov	r0, r6
   1e814:	f8c8 3000 	str.w	r3, [r8]
   1e818:	b003      	add	sp, #12
   1e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e81e:	462e      	mov	r6, r5
   1e820:	1be3      	subs	r3, r4, r7
   1e822:	2b0f      	cmp	r3, #15
   1e824:	d81e      	bhi.n	1e864 <_realloc_r+0x104>
   1e826:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e82a:	f003 0301 	and.w	r3, r3, #1
   1e82e:	4323      	orrs	r3, r4
   1e830:	444c      	add	r4, r9
   1e832:	f8c9 3004 	str.w	r3, [r9, #4]
   1e836:	6863      	ldr	r3, [r4, #4]
   1e838:	f043 0301 	orr.w	r3, r3, #1
   1e83c:	6063      	str	r3, [r4, #4]
   1e83e:	4640      	mov	r0, r8
   1e840:	f7ff ff48 	bl	1e6d4 <__malloc_unlock>
   1e844:	4630      	mov	r0, r6
   1e846:	b003      	add	sp, #12
   1e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e84c:	f023 0303 	bic.w	r3, r3, #3
   1e850:	18e1      	adds	r1, r4, r3
   1e852:	4291      	cmp	r1, r2
   1e854:	db1f      	blt.n	1e896 <_realloc_r+0x136>
   1e856:	68c3      	ldr	r3, [r0, #12]
   1e858:	6882      	ldr	r2, [r0, #8]
   1e85a:	462e      	mov	r6, r5
   1e85c:	60d3      	str	r3, [r2, #12]
   1e85e:	460c      	mov	r4, r1
   1e860:	609a      	str	r2, [r3, #8]
   1e862:	e7dd      	b.n	1e820 <_realloc_r+0xc0>
   1e864:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e868:	eb09 0107 	add.w	r1, r9, r7
   1e86c:	f002 0201 	and.w	r2, r2, #1
   1e870:	444c      	add	r4, r9
   1e872:	f043 0301 	orr.w	r3, r3, #1
   1e876:	4317      	orrs	r7, r2
   1e878:	f8c9 7004 	str.w	r7, [r9, #4]
   1e87c:	604b      	str	r3, [r1, #4]
   1e87e:	6863      	ldr	r3, [r4, #4]
   1e880:	f043 0301 	orr.w	r3, r3, #1
   1e884:	3108      	adds	r1, #8
   1e886:	6063      	str	r3, [r4, #4]
   1e888:	4640      	mov	r0, r8
   1e88a:	f003 f8b5 	bl	219f8 <_free_r>
   1e88e:	e7d6      	b.n	1e83e <_realloc_r+0xde>
   1e890:	4611      	mov	r1, r2
   1e892:	f7ff ba81 	b.w	1dd98 <_malloc_r>
   1e896:	f01e 0f01 	tst.w	lr, #1
   1e89a:	d18e      	bne.n	1e7ba <_realloc_r+0x5a>
   1e89c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e8a0:	eba9 0a01 	sub.w	sl, r9, r1
   1e8a4:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e8a8:	f021 0103 	bic.w	r1, r1, #3
   1e8ac:	440b      	add	r3, r1
   1e8ae:	4423      	add	r3, r4
   1e8b0:	4293      	cmp	r3, r2
   1e8b2:	db25      	blt.n	1e900 <_realloc_r+0x1a0>
   1e8b4:	68c2      	ldr	r2, [r0, #12]
   1e8b6:	6881      	ldr	r1, [r0, #8]
   1e8b8:	4656      	mov	r6, sl
   1e8ba:	60ca      	str	r2, [r1, #12]
   1e8bc:	6091      	str	r1, [r2, #8]
   1e8be:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e8c2:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e8c6:	1f22      	subs	r2, r4, #4
   1e8c8:	2a24      	cmp	r2, #36	; 0x24
   1e8ca:	60c1      	str	r1, [r0, #12]
   1e8cc:	6088      	str	r0, [r1, #8]
   1e8ce:	f200 8094 	bhi.w	1e9fa <_realloc_r+0x29a>
   1e8d2:	2a13      	cmp	r2, #19
   1e8d4:	d96f      	bls.n	1e9b6 <_realloc_r+0x256>
   1e8d6:	6829      	ldr	r1, [r5, #0]
   1e8d8:	f8ca 1008 	str.w	r1, [sl, #8]
   1e8dc:	6869      	ldr	r1, [r5, #4]
   1e8de:	f8ca 100c 	str.w	r1, [sl, #12]
   1e8e2:	2a1b      	cmp	r2, #27
   1e8e4:	f200 80a2 	bhi.w	1ea2c <_realloc_r+0x2cc>
   1e8e8:	3508      	adds	r5, #8
   1e8ea:	f10a 0210 	add.w	r2, sl, #16
   1e8ee:	e063      	b.n	1e9b8 <_realloc_r+0x258>
   1e8f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e8f4:	eba9 0a03 	sub.w	sl, r9, r3
   1e8f8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e8fc:	f021 0103 	bic.w	r1, r1, #3
   1e900:	1863      	adds	r3, r4, r1
   1e902:	4293      	cmp	r3, r2
   1e904:	f6ff af59 	blt.w	1e7ba <_realloc_r+0x5a>
   1e908:	4656      	mov	r6, sl
   1e90a:	e7d8      	b.n	1e8be <_realloc_r+0x15e>
   1e90c:	6841      	ldr	r1, [r0, #4]
   1e90e:	f021 0b03 	bic.w	fp, r1, #3
   1e912:	44a3      	add	fp, r4
   1e914:	f107 0010 	add.w	r0, r7, #16
   1e918:	4583      	cmp	fp, r0
   1e91a:	da56      	bge.n	1e9ca <_realloc_r+0x26a>
   1e91c:	f01e 0f01 	tst.w	lr, #1
   1e920:	f47f af4b 	bne.w	1e7ba <_realloc_r+0x5a>
   1e924:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e928:	eba9 0a01 	sub.w	sl, r9, r1
   1e92c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e930:	f021 0103 	bic.w	r1, r1, #3
   1e934:	448b      	add	fp, r1
   1e936:	4558      	cmp	r0, fp
   1e938:	dce2      	bgt.n	1e900 <_realloc_r+0x1a0>
   1e93a:	4656      	mov	r6, sl
   1e93c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e940:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e944:	1f22      	subs	r2, r4, #4
   1e946:	2a24      	cmp	r2, #36	; 0x24
   1e948:	60c1      	str	r1, [r0, #12]
   1e94a:	6088      	str	r0, [r1, #8]
   1e94c:	f200 808f 	bhi.w	1ea6e <_realloc_r+0x30e>
   1e950:	2a13      	cmp	r2, #19
   1e952:	f240 808a 	bls.w	1ea6a <_realloc_r+0x30a>
   1e956:	6829      	ldr	r1, [r5, #0]
   1e958:	f8ca 1008 	str.w	r1, [sl, #8]
   1e95c:	6869      	ldr	r1, [r5, #4]
   1e95e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e962:	2a1b      	cmp	r2, #27
   1e964:	f200 808a 	bhi.w	1ea7c <_realloc_r+0x31c>
   1e968:	3508      	adds	r5, #8
   1e96a:	f10a 0210 	add.w	r2, sl, #16
   1e96e:	6829      	ldr	r1, [r5, #0]
   1e970:	6011      	str	r1, [r2, #0]
   1e972:	6869      	ldr	r1, [r5, #4]
   1e974:	6051      	str	r1, [r2, #4]
   1e976:	68a9      	ldr	r1, [r5, #8]
   1e978:	6091      	str	r1, [r2, #8]
   1e97a:	eb0a 0107 	add.w	r1, sl, r7
   1e97e:	ebab 0207 	sub.w	r2, fp, r7
   1e982:	f042 0201 	orr.w	r2, r2, #1
   1e986:	6099      	str	r1, [r3, #8]
   1e988:	604a      	str	r2, [r1, #4]
   1e98a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e98e:	f003 0301 	and.w	r3, r3, #1
   1e992:	431f      	orrs	r7, r3
   1e994:	4640      	mov	r0, r8
   1e996:	f8ca 7004 	str.w	r7, [sl, #4]
   1e99a:	f7ff fe9b 	bl	1e6d4 <__malloc_unlock>
   1e99e:	e751      	b.n	1e844 <_realloc_r+0xe4>
   1e9a0:	682b      	ldr	r3, [r5, #0]
   1e9a2:	6003      	str	r3, [r0, #0]
   1e9a4:	686b      	ldr	r3, [r5, #4]
   1e9a6:	6043      	str	r3, [r0, #4]
   1e9a8:	2a1b      	cmp	r2, #27
   1e9aa:	d82d      	bhi.n	1ea08 <_realloc_r+0x2a8>
   1e9ac:	f100 0308 	add.w	r3, r0, #8
   1e9b0:	f105 0208 	add.w	r2, r5, #8
   1e9b4:	e71b      	b.n	1e7ee <_realloc_r+0x8e>
   1e9b6:	4632      	mov	r2, r6
   1e9b8:	6829      	ldr	r1, [r5, #0]
   1e9ba:	6011      	str	r1, [r2, #0]
   1e9bc:	6869      	ldr	r1, [r5, #4]
   1e9be:	6051      	str	r1, [r2, #4]
   1e9c0:	68a9      	ldr	r1, [r5, #8]
   1e9c2:	6091      	str	r1, [r2, #8]
   1e9c4:	461c      	mov	r4, r3
   1e9c6:	46d1      	mov	r9, sl
   1e9c8:	e72a      	b.n	1e820 <_realloc_r+0xc0>
   1e9ca:	eb09 0107 	add.w	r1, r9, r7
   1e9ce:	ebab 0b07 	sub.w	fp, fp, r7
   1e9d2:	f04b 0201 	orr.w	r2, fp, #1
   1e9d6:	6099      	str	r1, [r3, #8]
   1e9d8:	604a      	str	r2, [r1, #4]
   1e9da:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e9de:	f003 0301 	and.w	r3, r3, #1
   1e9e2:	431f      	orrs	r7, r3
   1e9e4:	4640      	mov	r0, r8
   1e9e6:	f845 7c04 	str.w	r7, [r5, #-4]
   1e9ea:	f7ff fe73 	bl	1e6d4 <__malloc_unlock>
   1e9ee:	462e      	mov	r6, r5
   1e9f0:	e728      	b.n	1e844 <_realloc_r+0xe4>
   1e9f2:	4629      	mov	r1, r5
   1e9f4:	f7ff fdb6 	bl	1e564 <memmove>
   1e9f8:	e6ff      	b.n	1e7fa <_realloc_r+0x9a>
   1e9fa:	4629      	mov	r1, r5
   1e9fc:	4630      	mov	r0, r6
   1e9fe:	461c      	mov	r4, r3
   1ea00:	46d1      	mov	r9, sl
   1ea02:	f7ff fdaf 	bl	1e564 <memmove>
   1ea06:	e70b      	b.n	1e820 <_realloc_r+0xc0>
   1ea08:	68ab      	ldr	r3, [r5, #8]
   1ea0a:	6083      	str	r3, [r0, #8]
   1ea0c:	68eb      	ldr	r3, [r5, #12]
   1ea0e:	60c3      	str	r3, [r0, #12]
   1ea10:	2a24      	cmp	r2, #36	; 0x24
   1ea12:	d017      	beq.n	1ea44 <_realloc_r+0x2e4>
   1ea14:	f100 0310 	add.w	r3, r0, #16
   1ea18:	f105 0210 	add.w	r2, r5, #16
   1ea1c:	e6e7      	b.n	1e7ee <_realloc_r+0x8e>
   1ea1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1ea22:	f023 0303 	bic.w	r3, r3, #3
   1ea26:	441c      	add	r4, r3
   1ea28:	462e      	mov	r6, r5
   1ea2a:	e6f9      	b.n	1e820 <_realloc_r+0xc0>
   1ea2c:	68a9      	ldr	r1, [r5, #8]
   1ea2e:	f8ca 1010 	str.w	r1, [sl, #16]
   1ea32:	68e9      	ldr	r1, [r5, #12]
   1ea34:	f8ca 1014 	str.w	r1, [sl, #20]
   1ea38:	2a24      	cmp	r2, #36	; 0x24
   1ea3a:	d00c      	beq.n	1ea56 <_realloc_r+0x2f6>
   1ea3c:	3510      	adds	r5, #16
   1ea3e:	f10a 0218 	add.w	r2, sl, #24
   1ea42:	e7b9      	b.n	1e9b8 <_realloc_r+0x258>
   1ea44:	692b      	ldr	r3, [r5, #16]
   1ea46:	6103      	str	r3, [r0, #16]
   1ea48:	696b      	ldr	r3, [r5, #20]
   1ea4a:	6143      	str	r3, [r0, #20]
   1ea4c:	f105 0218 	add.w	r2, r5, #24
   1ea50:	f100 0318 	add.w	r3, r0, #24
   1ea54:	e6cb      	b.n	1e7ee <_realloc_r+0x8e>
   1ea56:	692a      	ldr	r2, [r5, #16]
   1ea58:	f8ca 2018 	str.w	r2, [sl, #24]
   1ea5c:	696a      	ldr	r2, [r5, #20]
   1ea5e:	f8ca 201c 	str.w	r2, [sl, #28]
   1ea62:	3518      	adds	r5, #24
   1ea64:	f10a 0220 	add.w	r2, sl, #32
   1ea68:	e7a6      	b.n	1e9b8 <_realloc_r+0x258>
   1ea6a:	4632      	mov	r2, r6
   1ea6c:	e77f      	b.n	1e96e <_realloc_r+0x20e>
   1ea6e:	4629      	mov	r1, r5
   1ea70:	4630      	mov	r0, r6
   1ea72:	9301      	str	r3, [sp, #4]
   1ea74:	f7ff fd76 	bl	1e564 <memmove>
   1ea78:	9b01      	ldr	r3, [sp, #4]
   1ea7a:	e77e      	b.n	1e97a <_realloc_r+0x21a>
   1ea7c:	68a9      	ldr	r1, [r5, #8]
   1ea7e:	f8ca 1010 	str.w	r1, [sl, #16]
   1ea82:	68e9      	ldr	r1, [r5, #12]
   1ea84:	f8ca 1014 	str.w	r1, [sl, #20]
   1ea88:	2a24      	cmp	r2, #36	; 0x24
   1ea8a:	d003      	beq.n	1ea94 <_realloc_r+0x334>
   1ea8c:	3510      	adds	r5, #16
   1ea8e:	f10a 0218 	add.w	r2, sl, #24
   1ea92:	e76c      	b.n	1e96e <_realloc_r+0x20e>
   1ea94:	692a      	ldr	r2, [r5, #16]
   1ea96:	f8ca 2018 	str.w	r2, [sl, #24]
   1ea9a:	696a      	ldr	r2, [r5, #20]
   1ea9c:	f8ca 201c 	str.w	r2, [sl, #28]
   1eaa0:	3518      	adds	r5, #24
   1eaa2:	f10a 0220 	add.w	r2, sl, #32
   1eaa6:	e762      	b.n	1e96e <_realloc_r+0x20e>
   1eaa8:	2000069c 	.word	0x2000069c

0001eaac <_sbrk_r>:
   1eaac:	b538      	push	{r3, r4, r5, lr}
   1eaae:	4c07      	ldr	r4, [pc, #28]	; (1eacc <_sbrk_r+0x20>)
   1eab0:	2300      	movs	r3, #0
   1eab2:	4605      	mov	r5, r0
   1eab4:	4608      	mov	r0, r1
   1eab6:	6023      	str	r3, [r4, #0]
   1eab8:	f003 ff6c 	bl	22994 <_sbrk>
   1eabc:	1c43      	adds	r3, r0, #1
   1eabe:	d000      	beq.n	1eac2 <_sbrk_r+0x16>
   1eac0:	bd38      	pop	{r3, r4, r5, pc}
   1eac2:	6823      	ldr	r3, [r4, #0]
   1eac4:	2b00      	cmp	r3, #0
   1eac6:	d0fb      	beq.n	1eac0 <_sbrk_r+0x14>
   1eac8:	602b      	str	r3, [r5, #0]
   1eaca:	bd38      	pop	{r3, r4, r5, pc}
   1eacc:	200023ac 	.word	0x200023ac

0001ead0 <_raise_r>:
   1ead0:	291f      	cmp	r1, #31
   1ead2:	d828      	bhi.n	1eb26 <_raise_r+0x56>
   1ead4:	b520      	push	{r5, lr}
   1ead6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1eada:	b082      	sub	sp, #8
   1eadc:	4605      	mov	r5, r0
   1eade:	b1aa      	cbz	r2, 1eb0c <_raise_r+0x3c>
   1eae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1eae4:	b193      	cbz	r3, 1eb0c <_raise_r+0x3c>
   1eae6:	2b01      	cmp	r3, #1
   1eae8:	d00e      	beq.n	1eb08 <_raise_r+0x38>
   1eaea:	1c58      	adds	r0, r3, #1
   1eaec:	d007      	beq.n	1eafe <_raise_r+0x2e>
   1eaee:	2500      	movs	r5, #0
   1eaf0:	4608      	mov	r0, r1
   1eaf2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1eaf6:	4798      	blx	r3
   1eaf8:	4628      	mov	r0, r5
   1eafa:	b002      	add	sp, #8
   1eafc:	bd20      	pop	{r5, pc}
   1eafe:	2316      	movs	r3, #22
   1eb00:	2001      	movs	r0, #1
   1eb02:	602b      	str	r3, [r5, #0]
   1eb04:	b002      	add	sp, #8
   1eb06:	bd20      	pop	{r5, pc}
   1eb08:	2000      	movs	r0, #0
   1eb0a:	e7f6      	b.n	1eafa <_raise_r+0x2a>
   1eb0c:	4628      	mov	r0, r5
   1eb0e:	9101      	str	r1, [sp, #4]
   1eb10:	f000 f82a 	bl	1eb68 <_getpid_r>
   1eb14:	9901      	ldr	r1, [sp, #4]
   1eb16:	460a      	mov	r2, r1
   1eb18:	4601      	mov	r1, r0
   1eb1a:	4628      	mov	r0, r5
   1eb1c:	b002      	add	sp, #8
   1eb1e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1eb22:	f000 b80d 	b.w	1eb40 <_kill_r>
   1eb26:	2316      	movs	r3, #22
   1eb28:	6003      	str	r3, [r0, #0]
   1eb2a:	f04f 30ff 	mov.w	r0, #4294967295
   1eb2e:	4770      	bx	lr

0001eb30 <raise>:
   1eb30:	4b02      	ldr	r3, [pc, #8]	; (1eb3c <raise+0xc>)
   1eb32:	4601      	mov	r1, r0
   1eb34:	6818      	ldr	r0, [r3, #0]
   1eb36:	f7ff bfcb 	b.w	1ead0 <_raise_r>
   1eb3a:	bf00      	nop
   1eb3c:	20000100 	.word	0x20000100

0001eb40 <_kill_r>:
   1eb40:	b538      	push	{r3, r4, r5, lr}
   1eb42:	460b      	mov	r3, r1
   1eb44:	4c07      	ldr	r4, [pc, #28]	; (1eb64 <_kill_r+0x24>)
   1eb46:	4605      	mov	r5, r0
   1eb48:	4611      	mov	r1, r2
   1eb4a:	4618      	mov	r0, r3
   1eb4c:	2300      	movs	r3, #0
   1eb4e:	6023      	str	r3, [r4, #0]
   1eb50:	f003 ff9a 	bl	22a88 <_kill>
   1eb54:	1c43      	adds	r3, r0, #1
   1eb56:	d000      	beq.n	1eb5a <_kill_r+0x1a>
   1eb58:	bd38      	pop	{r3, r4, r5, pc}
   1eb5a:	6823      	ldr	r3, [r4, #0]
   1eb5c:	2b00      	cmp	r3, #0
   1eb5e:	d0fb      	beq.n	1eb58 <_kill_r+0x18>
   1eb60:	602b      	str	r3, [r5, #0]
   1eb62:	bd38      	pop	{r3, r4, r5, pc}
   1eb64:	200023ac 	.word	0x200023ac

0001eb68 <_getpid_r>:
   1eb68:	f003 bf12 	b.w	22990 <_getpid>

0001eb6c <sprintf>:
   1eb6c:	b40e      	push	{r1, r2, r3}
   1eb6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb70:	b09c      	sub	sp, #112	; 0x70
   1eb72:	ab21      	add	r3, sp, #132	; 0x84
   1eb74:	490f      	ldr	r1, [pc, #60]	; (1ebb4 <sprintf+0x48>)
   1eb76:	f853 2b04 	ldr.w	r2, [r3], #4
   1eb7a:	9301      	str	r3, [sp, #4]
   1eb7c:	4605      	mov	r5, r0
   1eb7e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1eb82:	6808      	ldr	r0, [r1, #0]
   1eb84:	9502      	str	r5, [sp, #8]
   1eb86:	f44f 7702 	mov.w	r7, #520	; 0x208
   1eb8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1eb8e:	a902      	add	r1, sp, #8
   1eb90:	9506      	str	r5, [sp, #24]
   1eb92:	f8ad 7014 	strh.w	r7, [sp, #20]
   1eb96:	9404      	str	r4, [sp, #16]
   1eb98:	9407      	str	r4, [sp, #28]
   1eb9a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1eb9e:	f000 fa4f 	bl	1f040 <_svfprintf_r>
   1eba2:	9b02      	ldr	r3, [sp, #8]
   1eba4:	2200      	movs	r2, #0
   1eba6:	701a      	strb	r2, [r3, #0]
   1eba8:	b01c      	add	sp, #112	; 0x70
   1ebaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ebae:	b003      	add	sp, #12
   1ebb0:	4770      	bx	lr
   1ebb2:	bf00      	nop
   1ebb4:	20000100 	.word	0x20000100
	...
   1ebc0:	eba2 0003 	sub.w	r0, r2, r3
   1ebc4:	4770      	bx	lr
   1ebc6:	bf00      	nop

0001ebc8 <strcmp>:
   1ebc8:	7802      	ldrb	r2, [r0, #0]
   1ebca:	780b      	ldrb	r3, [r1, #0]
   1ebcc:	2a01      	cmp	r2, #1
   1ebce:	bf28      	it	cs
   1ebd0:	429a      	cmpcs	r2, r3
   1ebd2:	d1f5      	bne.n	1ebc0 <sprintf+0x54>
   1ebd4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1ebd8:	ea40 0401 	orr.w	r4, r0, r1
   1ebdc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1ebe0:	f06f 0c00 	mvn.w	ip, #0
   1ebe4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1ebe8:	b312      	cbz	r2, 1ec30 <strcmp+0x68>
   1ebea:	ea80 0401 	eor.w	r4, r0, r1
   1ebee:	f014 0f07 	tst.w	r4, #7
   1ebf2:	d16a      	bne.n	1ecca <strcmp+0x102>
   1ebf4:	f000 0407 	and.w	r4, r0, #7
   1ebf8:	f020 0007 	bic.w	r0, r0, #7
   1ebfc:	f004 0503 	and.w	r5, r4, #3
   1ec00:	f021 0107 	bic.w	r1, r1, #7
   1ec04:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ec08:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ec0c:	f014 0f04 	tst.w	r4, #4
   1ec10:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ec14:	fa0c f405 	lsl.w	r4, ip, r5
   1ec18:	ea62 0204 	orn	r2, r2, r4
   1ec1c:	ea66 0604 	orn	r6, r6, r4
   1ec20:	d00a      	beq.n	1ec38 <strcmp+0x70>
   1ec22:	ea63 0304 	orn	r3, r3, r4
   1ec26:	4662      	mov	r2, ip
   1ec28:	ea67 0704 	orn	r7, r7, r4
   1ec2c:	4666      	mov	r6, ip
   1ec2e:	e003      	b.n	1ec38 <strcmp+0x70>
   1ec30:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ec34:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ec38:	fa82 f54c 	uadd8	r5, r2, ip
   1ec3c:	ea82 0406 	eor.w	r4, r2, r6
   1ec40:	faa4 f48c 	sel	r4, r4, ip
   1ec44:	bb6c      	cbnz	r4, 1eca2 <strcmp+0xda>
   1ec46:	fa83 f54c 	uadd8	r5, r3, ip
   1ec4a:	ea83 0507 	eor.w	r5, r3, r7
   1ec4e:	faa5 f58c 	sel	r5, r5, ip
   1ec52:	b995      	cbnz	r5, 1ec7a <strcmp+0xb2>
   1ec54:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1ec58:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1ec5c:	fa82 f54c 	uadd8	r5, r2, ip
   1ec60:	ea82 0406 	eor.w	r4, r2, r6
   1ec64:	faa4 f48c 	sel	r4, r4, ip
   1ec68:	fa83 f54c 	uadd8	r5, r3, ip
   1ec6c:	ea83 0507 	eor.w	r5, r3, r7
   1ec70:	faa5 f58c 	sel	r5, r5, ip
   1ec74:	4325      	orrs	r5, r4
   1ec76:	d0db      	beq.n	1ec30 <strcmp+0x68>
   1ec78:	b99c      	cbnz	r4, 1eca2 <strcmp+0xda>
   1ec7a:	ba2d      	rev	r5, r5
   1ec7c:	fab5 f485 	clz	r4, r5
   1ec80:	f024 0407 	bic.w	r4, r4, #7
   1ec84:	fa27 f104 	lsr.w	r1, r7, r4
   1ec88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ec8c:	fa23 f304 	lsr.w	r3, r3, r4
   1ec90:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ec94:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ec98:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec9c:	eba0 0001 	sub.w	r0, r0, r1
   1eca0:	4770      	bx	lr
   1eca2:	ba24      	rev	r4, r4
   1eca4:	fab4 f484 	clz	r4, r4
   1eca8:	f024 0407 	bic.w	r4, r4, #7
   1ecac:	fa26 f104 	lsr.w	r1, r6, r4
   1ecb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ecb4:	fa22 f204 	lsr.w	r2, r2, r4
   1ecb8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ecbc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ecc0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ecc4:	eba0 0001 	sub.w	r0, r0, r1
   1ecc8:	4770      	bx	lr
   1ecca:	f014 0f03 	tst.w	r4, #3
   1ecce:	d13c      	bne.n	1ed4a <strcmp+0x182>
   1ecd0:	f010 0403 	ands.w	r4, r0, #3
   1ecd4:	d128      	bne.n	1ed28 <strcmp+0x160>
   1ecd6:	f850 2b08 	ldr.w	r2, [r0], #8
   1ecda:	f851 3b08 	ldr.w	r3, [r1], #8
   1ecde:	fa82 f54c 	uadd8	r5, r2, ip
   1ece2:	ea82 0503 	eor.w	r5, r2, r3
   1ece6:	faa5 f58c 	sel	r5, r5, ip
   1ecea:	b95d      	cbnz	r5, 1ed04 <strcmp+0x13c>
   1ecec:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1ecf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ecf4:	fa82 f54c 	uadd8	r5, r2, ip
   1ecf8:	ea82 0503 	eor.w	r5, r2, r3
   1ecfc:	faa5 f58c 	sel	r5, r5, ip
   1ed00:	2d00      	cmp	r5, #0
   1ed02:	d0e8      	beq.n	1ecd6 <strcmp+0x10e>
   1ed04:	ba2d      	rev	r5, r5
   1ed06:	fab5 f485 	clz	r4, r5
   1ed0a:	f024 0407 	bic.w	r4, r4, #7
   1ed0e:	fa23 f104 	lsr.w	r1, r3, r4
   1ed12:	fa22 f204 	lsr.w	r2, r2, r4
   1ed16:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ed1a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ed1e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ed22:	eba0 0001 	sub.w	r0, r0, r1
   1ed26:	4770      	bx	lr
   1ed28:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1ed2c:	f020 0003 	bic.w	r0, r0, #3
   1ed30:	f850 2b08 	ldr.w	r2, [r0], #8
   1ed34:	f021 0103 	bic.w	r1, r1, #3
   1ed38:	f851 3b08 	ldr.w	r3, [r1], #8
   1ed3c:	fa0c f404 	lsl.w	r4, ip, r4
   1ed40:	ea62 0204 	orn	r2, r2, r4
   1ed44:	ea63 0304 	orn	r3, r3, r4
   1ed48:	e7c9      	b.n	1ecde <strcmp+0x116>
   1ed4a:	f010 0403 	ands.w	r4, r0, #3
   1ed4e:	d01a      	beq.n	1ed86 <strcmp+0x1be>
   1ed50:	eba1 0104 	sub.w	r1, r1, r4
   1ed54:	f020 0003 	bic.w	r0, r0, #3
   1ed58:	07e4      	lsls	r4, r4, #31
   1ed5a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ed5e:	d006      	beq.n	1ed6e <strcmp+0x1a6>
   1ed60:	d20f      	bcs.n	1ed82 <strcmp+0x1ba>
   1ed62:	788b      	ldrb	r3, [r1, #2]
   1ed64:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1ed68:	1ae4      	subs	r4, r4, r3
   1ed6a:	d106      	bne.n	1ed7a <strcmp+0x1b2>
   1ed6c:	b12b      	cbz	r3, 1ed7a <strcmp+0x1b2>
   1ed6e:	78cb      	ldrb	r3, [r1, #3]
   1ed70:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1ed74:	1ae4      	subs	r4, r4, r3
   1ed76:	d100      	bne.n	1ed7a <strcmp+0x1b2>
   1ed78:	b91b      	cbnz	r3, 1ed82 <strcmp+0x1ba>
   1ed7a:	4620      	mov	r0, r4
   1ed7c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1ed80:	4770      	bx	lr
   1ed82:	f101 0104 	add.w	r1, r1, #4
   1ed86:	f850 2b04 	ldr.w	r2, [r0], #4
   1ed8a:	07cc      	lsls	r4, r1, #31
   1ed8c:	f021 0103 	bic.w	r1, r1, #3
   1ed90:	f851 3b04 	ldr.w	r3, [r1], #4
   1ed94:	d848      	bhi.n	1ee28 <strcmp+0x260>
   1ed96:	d224      	bcs.n	1ede2 <strcmp+0x21a>
   1ed98:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1ed9c:	fa82 f54c 	uadd8	r5, r2, ip
   1eda0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1eda4:	faa5 f58c 	sel	r5, r5, ip
   1eda8:	d10a      	bne.n	1edc0 <strcmp+0x1f8>
   1edaa:	b965      	cbnz	r5, 1edc6 <strcmp+0x1fe>
   1edac:	f851 3b04 	ldr.w	r3, [r1], #4
   1edb0:	ea84 0402 	eor.w	r4, r4, r2
   1edb4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1edb8:	d10e      	bne.n	1edd8 <strcmp+0x210>
   1edba:	f850 2b04 	ldr.w	r2, [r0], #4
   1edbe:	e7eb      	b.n	1ed98 <strcmp+0x1d0>
   1edc0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1edc4:	e055      	b.n	1ee72 <strcmp+0x2aa>
   1edc6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1edca:	d14d      	bne.n	1ee68 <strcmp+0x2a0>
   1edcc:	7808      	ldrb	r0, [r1, #0]
   1edce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1edd2:	f1c0 0000 	rsb	r0, r0, #0
   1edd6:	4770      	bx	lr
   1edd8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1eddc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1ede0:	e047      	b.n	1ee72 <strcmp+0x2aa>
   1ede2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1ede6:	fa82 f54c 	uadd8	r5, r2, ip
   1edea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1edee:	faa5 f58c 	sel	r5, r5, ip
   1edf2:	d10a      	bne.n	1ee0a <strcmp+0x242>
   1edf4:	b965      	cbnz	r5, 1ee10 <strcmp+0x248>
   1edf6:	f851 3b04 	ldr.w	r3, [r1], #4
   1edfa:	ea84 0402 	eor.w	r4, r4, r2
   1edfe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ee02:	d10c      	bne.n	1ee1e <strcmp+0x256>
   1ee04:	f850 2b04 	ldr.w	r2, [r0], #4
   1ee08:	e7eb      	b.n	1ede2 <strcmp+0x21a>
   1ee0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ee0e:	e030      	b.n	1ee72 <strcmp+0x2aa>
   1ee10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ee14:	d128      	bne.n	1ee68 <strcmp+0x2a0>
   1ee16:	880b      	ldrh	r3, [r1, #0]
   1ee18:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ee1c:	e029      	b.n	1ee72 <strcmp+0x2aa>
   1ee1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ee22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1ee26:	e024      	b.n	1ee72 <strcmp+0x2aa>
   1ee28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1ee2c:	fa82 f54c 	uadd8	r5, r2, ip
   1ee30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1ee34:	faa5 f58c 	sel	r5, r5, ip
   1ee38:	d10a      	bne.n	1ee50 <strcmp+0x288>
   1ee3a:	b965      	cbnz	r5, 1ee56 <strcmp+0x28e>
   1ee3c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ee40:	ea84 0402 	eor.w	r4, r4, r2
   1ee44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1ee48:	d109      	bne.n	1ee5e <strcmp+0x296>
   1ee4a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ee4e:	e7eb      	b.n	1ee28 <strcmp+0x260>
   1ee50:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ee54:	e00d      	b.n	1ee72 <strcmp+0x2aa>
   1ee56:	f015 0fff 	tst.w	r5, #255	; 0xff
   1ee5a:	d105      	bne.n	1ee68 <strcmp+0x2a0>
   1ee5c:	680b      	ldr	r3, [r1, #0]
   1ee5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1ee62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ee66:	e004      	b.n	1ee72 <strcmp+0x2aa>
   1ee68:	f04f 0000 	mov.w	r0, #0
   1ee6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ee70:	4770      	bx	lr
   1ee72:	ba12      	rev	r2, r2
   1ee74:	ba1b      	rev	r3, r3
   1ee76:	fa82 f44c 	uadd8	r4, r2, ip
   1ee7a:	ea82 0403 	eor.w	r4, r2, r3
   1ee7e:	faa4 f58c 	sel	r5, r4, ip
   1ee82:	fab5 f485 	clz	r4, r5
   1ee86:	fa02 f204 	lsl.w	r2, r2, r4
   1ee8a:	fa03 f304 	lsl.w	r3, r3, r4
   1ee8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1ee92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ee96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1ee9a:	4770      	bx	lr
	...

0001eec0 <strlen>:
   1eec0:	f890 f000 	pld	[r0]
   1eec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1eec8:	f020 0107 	bic.w	r1, r0, #7
   1eecc:	f06f 0c00 	mvn.w	ip, #0
   1eed0:	f010 0407 	ands.w	r4, r0, #7
   1eed4:	f891 f020 	pld	[r1, #32]
   1eed8:	f040 8049 	bne.w	1ef6e <strlen+0xae>
   1eedc:	f04f 0400 	mov.w	r4, #0
   1eee0:	f06f 0007 	mvn.w	r0, #7
   1eee4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eee8:	f891 f040 	pld	[r1, #64]	; 0x40
   1eeec:	f100 0008 	add.w	r0, r0, #8
   1eef0:	fa82 f24c 	uadd8	r2, r2, ip
   1eef4:	faa4 f28c 	sel	r2, r4, ip
   1eef8:	fa83 f34c 	uadd8	r3, r3, ip
   1eefc:	faa2 f38c 	sel	r3, r2, ip
   1ef00:	bb4b      	cbnz	r3, 1ef56 <strlen+0x96>
   1ef02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ef06:	fa82 f24c 	uadd8	r2, r2, ip
   1ef0a:	f100 0008 	add.w	r0, r0, #8
   1ef0e:	faa4 f28c 	sel	r2, r4, ip
   1ef12:	fa83 f34c 	uadd8	r3, r3, ip
   1ef16:	faa2 f38c 	sel	r3, r2, ip
   1ef1a:	b9e3      	cbnz	r3, 1ef56 <strlen+0x96>
   1ef1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1ef20:	fa82 f24c 	uadd8	r2, r2, ip
   1ef24:	f100 0008 	add.w	r0, r0, #8
   1ef28:	faa4 f28c 	sel	r2, r4, ip
   1ef2c:	fa83 f34c 	uadd8	r3, r3, ip
   1ef30:	faa2 f38c 	sel	r3, r2, ip
   1ef34:	b97b      	cbnz	r3, 1ef56 <strlen+0x96>
   1ef36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1ef3a:	f101 0120 	add.w	r1, r1, #32
   1ef3e:	fa82 f24c 	uadd8	r2, r2, ip
   1ef42:	f100 0008 	add.w	r0, r0, #8
   1ef46:	faa4 f28c 	sel	r2, r4, ip
   1ef4a:	fa83 f34c 	uadd8	r3, r3, ip
   1ef4e:	faa2 f38c 	sel	r3, r2, ip
   1ef52:	2b00      	cmp	r3, #0
   1ef54:	d0c6      	beq.n	1eee4 <strlen+0x24>
   1ef56:	2a00      	cmp	r2, #0
   1ef58:	bf04      	itt	eq
   1ef5a:	3004      	addeq	r0, #4
   1ef5c:	461a      	moveq	r2, r3
   1ef5e:	ba12      	rev	r2, r2
   1ef60:	fab2 f282 	clz	r2, r2
   1ef64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1ef68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1ef6c:	4770      	bx	lr
   1ef6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ef72:	f004 0503 	and.w	r5, r4, #3
   1ef76:	f1c4 0000 	rsb	r0, r4, #0
   1ef7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ef7e:	f014 0f04 	tst.w	r4, #4
   1ef82:	f891 f040 	pld	[r1, #64]	; 0x40
   1ef86:	fa0c f505 	lsl.w	r5, ip, r5
   1ef8a:	ea62 0205 	orn	r2, r2, r5
   1ef8e:	bf1c      	itt	ne
   1ef90:	ea63 0305 	ornne	r3, r3, r5
   1ef94:	4662      	movne	r2, ip
   1ef96:	f04f 0400 	mov.w	r4, #0
   1ef9a:	e7a9      	b.n	1eef0 <strlen+0x30>

0001ef9c <strncmp>:
   1ef9c:	2a00      	cmp	r2, #0
   1ef9e:	d041      	beq.n	1f024 <strncmp+0x88>
   1efa0:	ea40 0301 	orr.w	r3, r0, r1
   1efa4:	f013 0303 	ands.w	r3, r3, #3
   1efa8:	b4f0      	push	{r4, r5, r6, r7}
   1efaa:	d125      	bne.n	1eff8 <strncmp+0x5c>
   1efac:	2a03      	cmp	r2, #3
   1efae:	d923      	bls.n	1eff8 <strncmp+0x5c>
   1efb0:	6804      	ldr	r4, [r0, #0]
   1efb2:	680d      	ldr	r5, [r1, #0]
   1efb4:	42ac      	cmp	r4, r5
   1efb6:	d11f      	bne.n	1eff8 <strncmp+0x5c>
   1efb8:	3a04      	subs	r2, #4
   1efba:	d038      	beq.n	1f02e <strncmp+0x92>
   1efbc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1efc0:	ea25 0404 	bic.w	r4, r5, r4
   1efc4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1efc8:	d12e      	bne.n	1f028 <strncmp+0x8c>
   1efca:	3004      	adds	r0, #4
   1efcc:	3104      	adds	r1, #4
   1efce:	e00f      	b.n	1eff0 <strncmp+0x54>
   1efd0:	f850 3b04 	ldr.w	r3, [r0], #4
   1efd4:	680e      	ldr	r6, [r1, #0]
   1efd6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1efda:	42b3      	cmp	r3, r6
   1efdc:	ea24 0403 	bic.w	r4, r4, r3
   1efe0:	f101 0104 	add.w	r1, r1, #4
   1efe4:	d126      	bne.n	1f034 <strncmp+0x98>
   1efe6:	3a04      	subs	r2, #4
   1efe8:	d021      	beq.n	1f02e <strncmp+0x92>
   1efea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1efee:	d11b      	bne.n	1f028 <strncmp+0x8c>
   1eff0:	2a03      	cmp	r2, #3
   1eff2:	4607      	mov	r7, r0
   1eff4:	460d      	mov	r5, r1
   1eff6:	d8eb      	bhi.n	1efd0 <strncmp+0x34>
   1eff8:	7805      	ldrb	r5, [r0, #0]
   1effa:	780c      	ldrb	r4, [r1, #0]
   1effc:	42ac      	cmp	r4, r5
   1effe:	f102 33ff 	add.w	r3, r2, #4294967295
   1f002:	d11a      	bne.n	1f03a <strncmp+0x9e>
   1f004:	b183      	cbz	r3, 1f028 <strncmp+0x8c>
   1f006:	b914      	cbnz	r4, 1f00e <strncmp+0x72>
   1f008:	e00e      	b.n	1f028 <strncmp+0x8c>
   1f00a:	b16b      	cbz	r3, 1f028 <strncmp+0x8c>
   1f00c:	b17a      	cbz	r2, 1f02e <strncmp+0x92>
   1f00e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1f012:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f016:	42a2      	cmp	r2, r4
   1f018:	f103 33ff 	add.w	r3, r3, #4294967295
   1f01c:	d0f5      	beq.n	1f00a <strncmp+0x6e>
   1f01e:	1b10      	subs	r0, r2, r4
   1f020:	bcf0      	pop	{r4, r5, r6, r7}
   1f022:	4770      	bx	lr
   1f024:	4610      	mov	r0, r2
   1f026:	4770      	bx	lr
   1f028:	2000      	movs	r0, #0
   1f02a:	bcf0      	pop	{r4, r5, r6, r7}
   1f02c:	4770      	bx	lr
   1f02e:	4610      	mov	r0, r2
   1f030:	bcf0      	pop	{r4, r5, r6, r7}
   1f032:	4770      	bx	lr
   1f034:	4629      	mov	r1, r5
   1f036:	4638      	mov	r0, r7
   1f038:	e7de      	b.n	1eff8 <strncmp+0x5c>
   1f03a:	462a      	mov	r2, r5
   1f03c:	e7ef      	b.n	1f01e <strncmp+0x82>
   1f03e:	bf00      	nop

0001f040 <_svfprintf_r>:
   1f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f044:	b0c1      	sub	sp, #260	; 0x104
   1f046:	460c      	mov	r4, r1
   1f048:	9107      	str	r1, [sp, #28]
   1f04a:	4692      	mov	sl, r2
   1f04c:	930b      	str	r3, [sp, #44]	; 0x2c
   1f04e:	9008      	str	r0, [sp, #32]
   1f050:	f002 fde2 	bl	21c18 <_localeconv_r>
   1f054:	6803      	ldr	r3, [r0, #0]
   1f056:	9314      	str	r3, [sp, #80]	; 0x50
   1f058:	4618      	mov	r0, r3
   1f05a:	f7ff ff31 	bl	1eec0 <strlen>
   1f05e:	89a3      	ldrh	r3, [r4, #12]
   1f060:	9013      	str	r0, [sp, #76]	; 0x4c
   1f062:	0619      	lsls	r1, r3, #24
   1f064:	d503      	bpl.n	1f06e <_svfprintf_r+0x2e>
   1f066:	6923      	ldr	r3, [r4, #16]
   1f068:	2b00      	cmp	r3, #0
   1f06a:	f001 801b 	beq.w	200a4 <_svfprintf_r+0x1064>
   1f06e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f2c0 <_svfprintf_r+0x280>
   1f072:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f076:	2300      	movs	r3, #0
   1f078:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1f07c:	930f      	str	r3, [sp, #60]	; 0x3c
   1f07e:	9325      	str	r3, [sp, #148]	; 0x94
   1f080:	9324      	str	r3, [sp, #144]	; 0x90
   1f082:	9312      	str	r3, [sp, #72]	; 0x48
   1f084:	9315      	str	r3, [sp, #84]	; 0x54
   1f086:	9305      	str	r3, [sp, #20]
   1f088:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1f08c:	46c8      	mov	r8, r9
   1f08e:	f89a 3000 	ldrb.w	r3, [sl]
   1f092:	4654      	mov	r4, sl
   1f094:	b1e3      	cbz	r3, 1f0d0 <_svfprintf_r+0x90>
   1f096:	2b25      	cmp	r3, #37	; 0x25
   1f098:	d102      	bne.n	1f0a0 <_svfprintf_r+0x60>
   1f09a:	e019      	b.n	1f0d0 <_svfprintf_r+0x90>
   1f09c:	2b25      	cmp	r3, #37	; 0x25
   1f09e:	d003      	beq.n	1f0a8 <_svfprintf_r+0x68>
   1f0a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f0a4:	2b00      	cmp	r3, #0
   1f0a6:	d1f9      	bne.n	1f09c <_svfprintf_r+0x5c>
   1f0a8:	eba4 050a 	sub.w	r5, r4, sl
   1f0ac:	b185      	cbz	r5, 1f0d0 <_svfprintf_r+0x90>
   1f0ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f0b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f0b2:	f8c8 a000 	str.w	sl, [r8]
   1f0b6:	3301      	adds	r3, #1
   1f0b8:	442a      	add	r2, r5
   1f0ba:	2b07      	cmp	r3, #7
   1f0bc:	f8c8 5004 	str.w	r5, [r8, #4]
   1f0c0:	9225      	str	r2, [sp, #148]	; 0x94
   1f0c2:	9324      	str	r3, [sp, #144]	; 0x90
   1f0c4:	dc7f      	bgt.n	1f1c6 <_svfprintf_r+0x186>
   1f0c6:	f108 0808 	add.w	r8, r8, #8
   1f0ca:	9b05      	ldr	r3, [sp, #20]
   1f0cc:	442b      	add	r3, r5
   1f0ce:	9305      	str	r3, [sp, #20]
   1f0d0:	7823      	ldrb	r3, [r4, #0]
   1f0d2:	2b00      	cmp	r3, #0
   1f0d4:	d07f      	beq.n	1f1d6 <_svfprintf_r+0x196>
   1f0d6:	2300      	movs	r3, #0
   1f0d8:	461a      	mov	r2, r3
   1f0da:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f0de:	4619      	mov	r1, r3
   1f0e0:	9309      	str	r3, [sp, #36]	; 0x24
   1f0e2:	469b      	mov	fp, r3
   1f0e4:	f04f 30ff 	mov.w	r0, #4294967295
   1f0e8:	7863      	ldrb	r3, [r4, #1]
   1f0ea:	9006      	str	r0, [sp, #24]
   1f0ec:	f104 0a01 	add.w	sl, r4, #1
   1f0f0:	f10a 0a01 	add.w	sl, sl, #1
   1f0f4:	f1a3 0020 	sub.w	r0, r3, #32
   1f0f8:	2858      	cmp	r0, #88	; 0x58
   1f0fa:	f200 83d3 	bhi.w	1f8a4 <_svfprintf_r+0x864>
   1f0fe:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f102:	023f      	.short	0x023f
   1f104:	03d103d1 	.word	0x03d103d1
   1f108:	03d10247 	.word	0x03d10247
   1f10c:	03d103d1 	.word	0x03d103d1
   1f110:	03d103d1 	.word	0x03d103d1
   1f114:	024c03d1 	.word	0x024c03d1
   1f118:	03d1020a 	.word	0x03d1020a
   1f11c:	0273005d 	.word	0x0273005d
   1f120:	028e03d1 	.word	0x028e03d1
   1f124:	03c103c1 	.word	0x03c103c1
   1f128:	03c103c1 	.word	0x03c103c1
   1f12c:	03c103c1 	.word	0x03c103c1
   1f130:	03c103c1 	.word	0x03c103c1
   1f134:	03d103c1 	.word	0x03d103c1
   1f138:	03d103d1 	.word	0x03d103d1
   1f13c:	03d103d1 	.word	0x03d103d1
   1f140:	03d103d1 	.word	0x03d103d1
   1f144:	03d103d1 	.word	0x03d103d1
   1f148:	033f03d1 	.word	0x033f03d1
   1f14c:	03d1035f 	.word	0x03d1035f
   1f150:	03d1035f 	.word	0x03d1035f
   1f154:	03d103d1 	.word	0x03d103d1
   1f158:	03aa03d1 	.word	0x03aa03d1
   1f15c:	03d103d1 	.word	0x03d103d1
   1f160:	03d103af 	.word	0x03d103af
   1f164:	03d103d1 	.word	0x03d103d1
   1f168:	03d103d1 	.word	0x03d103d1
   1f16c:	03d10261 	.word	0x03d10261
   1f170:	032603d1 	.word	0x032603d1
   1f174:	03d103d1 	.word	0x03d103d1
   1f178:	03d103d1 	.word	0x03d103d1
   1f17c:	03d103d1 	.word	0x03d103d1
   1f180:	03d103d1 	.word	0x03d103d1
   1f184:	03d103d1 	.word	0x03d103d1
   1f188:	02e302ce 	.word	0x02e302ce
   1f18c:	035f035f 	.word	0x035f035f
   1f190:	0293035f 	.word	0x0293035f
   1f194:	03d102e3 	.word	0x03d102e3
   1f198:	029803d1 	.word	0x029803d1
   1f19c:	02a503d1 	.word	0x02a503d1
   1f1a0:	02bc01d3 	.word	0x02bc01d3
   1f1a4:	03d1020f 	.word	0x03d1020f
   1f1a8:	03d101e8 	.word	0x03d101e8
   1f1ac:	03d1007e 	.word	0x03d1007e
   1f1b0:	021403d1 	.word	0x021403d1
   1f1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f1b6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f1b8:	4240      	negs	r0, r0
   1f1ba:	9009      	str	r0, [sp, #36]	; 0x24
   1f1bc:	f04b 0b04 	orr.w	fp, fp, #4
   1f1c0:	f89a 3000 	ldrb.w	r3, [sl]
   1f1c4:	e794      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f1c6:	aa23      	add	r2, sp, #140	; 0x8c
   1f1c8:	9907      	ldr	r1, [sp, #28]
   1f1ca:	9808      	ldr	r0, [sp, #32]
   1f1cc:	f003 f8ea 	bl	223a4 <__ssprint_r>
   1f1d0:	b940      	cbnz	r0, 1f1e4 <_svfprintf_r+0x1a4>
   1f1d2:	46c8      	mov	r8, r9
   1f1d4:	e779      	b.n	1f0ca <_svfprintf_r+0x8a>
   1f1d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f1d8:	b123      	cbz	r3, 1f1e4 <_svfprintf_r+0x1a4>
   1f1da:	9808      	ldr	r0, [sp, #32]
   1f1dc:	9907      	ldr	r1, [sp, #28]
   1f1de:	aa23      	add	r2, sp, #140	; 0x8c
   1f1e0:	f003 f8e0 	bl	223a4 <__ssprint_r>
   1f1e4:	9b07      	ldr	r3, [sp, #28]
   1f1e6:	899b      	ldrh	r3, [r3, #12]
   1f1e8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f1ec:	9b05      	ldr	r3, [sp, #20]
   1f1ee:	bf18      	it	ne
   1f1f0:	f04f 33ff 	movne.w	r3, #4294967295
   1f1f4:	9305      	str	r3, [sp, #20]
   1f1f6:	9805      	ldr	r0, [sp, #20]
   1f1f8:	b041      	add	sp, #260	; 0x104
   1f1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1fe:	f01b 0f20 	tst.w	fp, #32
   1f202:	930d      	str	r3, [sp, #52]	; 0x34
   1f204:	f040 81e5 	bne.w	1f5d2 <_svfprintf_r+0x592>
   1f208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f20a:	f01b 0f10 	tst.w	fp, #16
   1f20e:	4613      	mov	r3, r2
   1f210:	f040 8588 	bne.w	1fd24 <_svfprintf_r+0xce4>
   1f214:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f218:	f000 8584 	beq.w	1fd24 <_svfprintf_r+0xce4>
   1f21c:	8814      	ldrh	r4, [r2, #0]
   1f21e:	3204      	adds	r2, #4
   1f220:	2500      	movs	r5, #0
   1f222:	2301      	movs	r3, #1
   1f224:	920b      	str	r2, [sp, #44]	; 0x2c
   1f226:	2700      	movs	r7, #0
   1f228:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f22c:	9906      	ldr	r1, [sp, #24]
   1f22e:	1c4a      	adds	r2, r1, #1
   1f230:	f000 826d 	beq.w	1f70e <_svfprintf_r+0x6ce>
   1f234:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1f238:	9203      	str	r2, [sp, #12]
   1f23a:	ea54 0205 	orrs.w	r2, r4, r5
   1f23e:	f040 826c 	bne.w	1f71a <_svfprintf_r+0x6da>
   1f242:	2900      	cmp	r1, #0
   1f244:	f040 8451 	bne.w	1faea <_svfprintf_r+0xaaa>
   1f248:	2b00      	cmp	r3, #0
   1f24a:	f040 850b 	bne.w	1fc64 <_svfprintf_r+0xc24>
   1f24e:	f01b 0301 	ands.w	r3, fp, #1
   1f252:	930a      	str	r3, [sp, #40]	; 0x28
   1f254:	f000 861a 	beq.w	1fe8c <_svfprintf_r+0xe4c>
   1f258:	ae40      	add	r6, sp, #256	; 0x100
   1f25a:	2330      	movs	r3, #48	; 0x30
   1f25c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f260:	9b06      	ldr	r3, [sp, #24]
   1f262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f264:	4293      	cmp	r3, r2
   1f266:	bfb8      	it	lt
   1f268:	4613      	movlt	r3, r2
   1f26a:	9304      	str	r3, [sp, #16]
   1f26c:	2300      	movs	r3, #0
   1f26e:	930e      	str	r3, [sp, #56]	; 0x38
   1f270:	b117      	cbz	r7, 1f278 <_svfprintf_r+0x238>
   1f272:	9b04      	ldr	r3, [sp, #16]
   1f274:	3301      	adds	r3, #1
   1f276:	9304      	str	r3, [sp, #16]
   1f278:	9b03      	ldr	r3, [sp, #12]
   1f27a:	f013 0302 	ands.w	r3, r3, #2
   1f27e:	930c      	str	r3, [sp, #48]	; 0x30
   1f280:	d002      	beq.n	1f288 <_svfprintf_r+0x248>
   1f282:	9b04      	ldr	r3, [sp, #16]
   1f284:	3302      	adds	r3, #2
   1f286:	9304      	str	r3, [sp, #16]
   1f288:	9b03      	ldr	r3, [sp, #12]
   1f28a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f28e:	f040 8320 	bne.w	1f8d2 <_svfprintf_r+0x892>
   1f292:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f294:	9a04      	ldr	r2, [sp, #16]
   1f296:	eba3 0b02 	sub.w	fp, r3, r2
   1f29a:	f1bb 0f00 	cmp.w	fp, #0
   1f29e:	f340 8318 	ble.w	1f8d2 <_svfprintf_r+0x892>
   1f2a2:	f1bb 0f10 	cmp.w	fp, #16
   1f2a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f2a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f2aa:	dd30      	ble.n	1f30e <_svfprintf_r+0x2ce>
   1f2ac:	4643      	mov	r3, r8
   1f2ae:	4621      	mov	r1, r4
   1f2b0:	46a8      	mov	r8, r5
   1f2b2:	2710      	movs	r7, #16
   1f2b4:	9c08      	ldr	r4, [sp, #32]
   1f2b6:	9d07      	ldr	r5, [sp, #28]
   1f2b8:	e00d      	b.n	1f2d6 <_svfprintf_r+0x296>
   1f2ba:	bf00      	nop
   1f2bc:	f3af 8000 	nop.w
	...
   1f2c8:	f1ab 0b10 	sub.w	fp, fp, #16
   1f2cc:	f1bb 0f10 	cmp.w	fp, #16
   1f2d0:	f103 0308 	add.w	r3, r3, #8
   1f2d4:	dd18      	ble.n	1f308 <_svfprintf_r+0x2c8>
   1f2d6:	3201      	adds	r2, #1
   1f2d8:	48b7      	ldr	r0, [pc, #732]	; (1f5b8 <_svfprintf_r+0x578>)
   1f2da:	9224      	str	r2, [sp, #144]	; 0x90
   1f2dc:	3110      	adds	r1, #16
   1f2de:	2a07      	cmp	r2, #7
   1f2e0:	9125      	str	r1, [sp, #148]	; 0x94
   1f2e2:	e883 0081 	stmia.w	r3, {r0, r7}
   1f2e6:	ddef      	ble.n	1f2c8 <_svfprintf_r+0x288>
   1f2e8:	aa23      	add	r2, sp, #140	; 0x8c
   1f2ea:	4629      	mov	r1, r5
   1f2ec:	4620      	mov	r0, r4
   1f2ee:	f003 f859 	bl	223a4 <__ssprint_r>
   1f2f2:	2800      	cmp	r0, #0
   1f2f4:	f47f af76 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1f2f8:	f1ab 0b10 	sub.w	fp, fp, #16
   1f2fc:	f1bb 0f10 	cmp.w	fp, #16
   1f300:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f302:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f304:	464b      	mov	r3, r9
   1f306:	dce6      	bgt.n	1f2d6 <_svfprintf_r+0x296>
   1f308:	4645      	mov	r5, r8
   1f30a:	460c      	mov	r4, r1
   1f30c:	4698      	mov	r8, r3
   1f30e:	3201      	adds	r2, #1
   1f310:	4ba9      	ldr	r3, [pc, #676]	; (1f5b8 <_svfprintf_r+0x578>)
   1f312:	9224      	str	r2, [sp, #144]	; 0x90
   1f314:	445c      	add	r4, fp
   1f316:	2a07      	cmp	r2, #7
   1f318:	9425      	str	r4, [sp, #148]	; 0x94
   1f31a:	e888 0808 	stmia.w	r8, {r3, fp}
   1f31e:	f300 84a6 	bgt.w	1fc6e <_svfprintf_r+0xc2e>
   1f322:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f326:	f108 0808 	add.w	r8, r8, #8
   1f32a:	b177      	cbz	r7, 1f34a <_svfprintf_r+0x30a>
   1f32c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f32e:	3301      	adds	r3, #1
   1f330:	3401      	adds	r4, #1
   1f332:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f336:	2201      	movs	r2, #1
   1f338:	2b07      	cmp	r3, #7
   1f33a:	9425      	str	r4, [sp, #148]	; 0x94
   1f33c:	9324      	str	r3, [sp, #144]	; 0x90
   1f33e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f342:	f300 83f4 	bgt.w	1fb2e <_svfprintf_r+0xaee>
   1f346:	f108 0808 	add.w	r8, r8, #8
   1f34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f34c:	b16b      	cbz	r3, 1f36a <_svfprintf_r+0x32a>
   1f34e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f350:	3301      	adds	r3, #1
   1f352:	3402      	adds	r4, #2
   1f354:	a91c      	add	r1, sp, #112	; 0x70
   1f356:	2202      	movs	r2, #2
   1f358:	2b07      	cmp	r3, #7
   1f35a:	9425      	str	r4, [sp, #148]	; 0x94
   1f35c:	9324      	str	r3, [sp, #144]	; 0x90
   1f35e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f362:	f300 83d9 	bgt.w	1fb18 <_svfprintf_r+0xad8>
   1f366:	f108 0808 	add.w	r8, r8, #8
   1f36a:	2d80      	cmp	r5, #128	; 0x80
   1f36c:	f000 8322 	beq.w	1f9b4 <_svfprintf_r+0x974>
   1f370:	9b06      	ldr	r3, [sp, #24]
   1f372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f374:	1a9f      	subs	r7, r3, r2
   1f376:	2f00      	cmp	r7, #0
   1f378:	dd36      	ble.n	1f3e8 <_svfprintf_r+0x3a8>
   1f37a:	2f10      	cmp	r7, #16
   1f37c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f37e:	4d8f      	ldr	r5, [pc, #572]	; (1f5bc <_svfprintf_r+0x57c>)
   1f380:	dd27      	ble.n	1f3d2 <_svfprintf_r+0x392>
   1f382:	4642      	mov	r2, r8
   1f384:	4621      	mov	r1, r4
   1f386:	46b0      	mov	r8, r6
   1f388:	f04f 0b10 	mov.w	fp, #16
   1f38c:	462e      	mov	r6, r5
   1f38e:	9c08      	ldr	r4, [sp, #32]
   1f390:	9d07      	ldr	r5, [sp, #28]
   1f392:	e004      	b.n	1f39e <_svfprintf_r+0x35e>
   1f394:	3f10      	subs	r7, #16
   1f396:	2f10      	cmp	r7, #16
   1f398:	f102 0208 	add.w	r2, r2, #8
   1f39c:	dd15      	ble.n	1f3ca <_svfprintf_r+0x38a>
   1f39e:	3301      	adds	r3, #1
   1f3a0:	3110      	adds	r1, #16
   1f3a2:	2b07      	cmp	r3, #7
   1f3a4:	9125      	str	r1, [sp, #148]	; 0x94
   1f3a6:	9324      	str	r3, [sp, #144]	; 0x90
   1f3a8:	e882 0840 	stmia.w	r2, {r6, fp}
   1f3ac:	ddf2      	ble.n	1f394 <_svfprintf_r+0x354>
   1f3ae:	aa23      	add	r2, sp, #140	; 0x8c
   1f3b0:	4629      	mov	r1, r5
   1f3b2:	4620      	mov	r0, r4
   1f3b4:	f002 fff6 	bl	223a4 <__ssprint_r>
   1f3b8:	2800      	cmp	r0, #0
   1f3ba:	f47f af13 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1f3be:	3f10      	subs	r7, #16
   1f3c0:	2f10      	cmp	r7, #16
   1f3c2:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f3c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f3c6:	464a      	mov	r2, r9
   1f3c8:	dce9      	bgt.n	1f39e <_svfprintf_r+0x35e>
   1f3ca:	4635      	mov	r5, r6
   1f3cc:	460c      	mov	r4, r1
   1f3ce:	4646      	mov	r6, r8
   1f3d0:	4690      	mov	r8, r2
   1f3d2:	3301      	adds	r3, #1
   1f3d4:	443c      	add	r4, r7
   1f3d6:	2b07      	cmp	r3, #7
   1f3d8:	9425      	str	r4, [sp, #148]	; 0x94
   1f3da:	9324      	str	r3, [sp, #144]	; 0x90
   1f3dc:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f3e0:	f300 838f 	bgt.w	1fb02 <_svfprintf_r+0xac2>
   1f3e4:	f108 0808 	add.w	r8, r8, #8
   1f3e8:	9b03      	ldr	r3, [sp, #12]
   1f3ea:	05df      	lsls	r7, r3, #23
   1f3ec:	f100 8273 	bmi.w	1f8d6 <_svfprintf_r+0x896>
   1f3f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f3f2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f3f4:	f8c8 6000 	str.w	r6, [r8]
   1f3f8:	3301      	adds	r3, #1
   1f3fa:	440c      	add	r4, r1
   1f3fc:	2b07      	cmp	r3, #7
   1f3fe:	9425      	str	r4, [sp, #148]	; 0x94
   1f400:	f8c8 1004 	str.w	r1, [r8, #4]
   1f404:	9324      	str	r3, [sp, #144]	; 0x90
   1f406:	f300 835b 	bgt.w	1fac0 <_svfprintf_r+0xa80>
   1f40a:	f108 0808 	add.w	r8, r8, #8
   1f40e:	9b03      	ldr	r3, [sp, #12]
   1f410:	075b      	lsls	r3, r3, #29
   1f412:	d53a      	bpl.n	1f48a <_svfprintf_r+0x44a>
   1f414:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f416:	9a04      	ldr	r2, [sp, #16]
   1f418:	1a9d      	subs	r5, r3, r2
   1f41a:	2d00      	cmp	r5, #0
   1f41c:	dd35      	ble.n	1f48a <_svfprintf_r+0x44a>
   1f41e:	2d10      	cmp	r5, #16
   1f420:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f422:	dd20      	ble.n	1f466 <_svfprintf_r+0x426>
   1f424:	2610      	movs	r6, #16
   1f426:	9f08      	ldr	r7, [sp, #32]
   1f428:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f42c:	e004      	b.n	1f438 <_svfprintf_r+0x3f8>
   1f42e:	3d10      	subs	r5, #16
   1f430:	2d10      	cmp	r5, #16
   1f432:	f108 0808 	add.w	r8, r8, #8
   1f436:	dd16      	ble.n	1f466 <_svfprintf_r+0x426>
   1f438:	3301      	adds	r3, #1
   1f43a:	4a5f      	ldr	r2, [pc, #380]	; (1f5b8 <_svfprintf_r+0x578>)
   1f43c:	9324      	str	r3, [sp, #144]	; 0x90
   1f43e:	3410      	adds	r4, #16
   1f440:	2b07      	cmp	r3, #7
   1f442:	9425      	str	r4, [sp, #148]	; 0x94
   1f444:	e888 0044 	stmia.w	r8, {r2, r6}
   1f448:	ddf1      	ble.n	1f42e <_svfprintf_r+0x3ee>
   1f44a:	aa23      	add	r2, sp, #140	; 0x8c
   1f44c:	4659      	mov	r1, fp
   1f44e:	4638      	mov	r0, r7
   1f450:	f002 ffa8 	bl	223a4 <__ssprint_r>
   1f454:	2800      	cmp	r0, #0
   1f456:	f47f aec5 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1f45a:	3d10      	subs	r5, #16
   1f45c:	2d10      	cmp	r5, #16
   1f45e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f460:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f462:	46c8      	mov	r8, r9
   1f464:	dce8      	bgt.n	1f438 <_svfprintf_r+0x3f8>
   1f466:	3301      	adds	r3, #1
   1f468:	4a53      	ldr	r2, [pc, #332]	; (1f5b8 <_svfprintf_r+0x578>)
   1f46a:	9324      	str	r3, [sp, #144]	; 0x90
   1f46c:	442c      	add	r4, r5
   1f46e:	2b07      	cmp	r3, #7
   1f470:	9425      	str	r4, [sp, #148]	; 0x94
   1f472:	e888 0024 	stmia.w	r8, {r2, r5}
   1f476:	dd08      	ble.n	1f48a <_svfprintf_r+0x44a>
   1f478:	aa23      	add	r2, sp, #140	; 0x8c
   1f47a:	9907      	ldr	r1, [sp, #28]
   1f47c:	9808      	ldr	r0, [sp, #32]
   1f47e:	f002 ff91 	bl	223a4 <__ssprint_r>
   1f482:	2800      	cmp	r0, #0
   1f484:	f47f aeae 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1f488:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f48a:	9b05      	ldr	r3, [sp, #20]
   1f48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f48e:	9904      	ldr	r1, [sp, #16]
   1f490:	428a      	cmp	r2, r1
   1f492:	bfac      	ite	ge
   1f494:	189b      	addge	r3, r3, r2
   1f496:	185b      	addlt	r3, r3, r1
   1f498:	9305      	str	r3, [sp, #20]
   1f49a:	2c00      	cmp	r4, #0
   1f49c:	f040 831b 	bne.w	1fad6 <_svfprintf_r+0xa96>
   1f4a0:	2300      	movs	r3, #0
   1f4a2:	9324      	str	r3, [sp, #144]	; 0x90
   1f4a4:	46c8      	mov	r8, r9
   1f4a6:	e5f2      	b.n	1f08e <_svfprintf_r+0x4e>
   1f4a8:	930d      	str	r3, [sp, #52]	; 0x34
   1f4aa:	f01b 0320 	ands.w	r3, fp, #32
   1f4ae:	f040 81de 	bne.w	1f86e <_svfprintf_r+0x82e>
   1f4b2:	f01b 0210 	ands.w	r2, fp, #16
   1f4b6:	f040 842d 	bne.w	1fd14 <_svfprintf_r+0xcd4>
   1f4ba:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f4be:	f000 8429 	beq.w	1fd14 <_svfprintf_r+0xcd4>
   1f4c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f4c4:	4613      	mov	r3, r2
   1f4c6:	460a      	mov	r2, r1
   1f4c8:	3204      	adds	r2, #4
   1f4ca:	880c      	ldrh	r4, [r1, #0]
   1f4cc:	920b      	str	r2, [sp, #44]	; 0x2c
   1f4ce:	2500      	movs	r5, #0
   1f4d0:	e6a9      	b.n	1f226 <_svfprintf_r+0x1e6>
   1f4d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f4d4:	930d      	str	r3, [sp, #52]	; 0x34
   1f4d6:	6816      	ldr	r6, [r2, #0]
   1f4d8:	2400      	movs	r4, #0
   1f4da:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f4de:	1d15      	adds	r5, r2, #4
   1f4e0:	2e00      	cmp	r6, #0
   1f4e2:	f000 86b5 	beq.w	20250 <_svfprintf_r+0x1210>
   1f4e6:	9a06      	ldr	r2, [sp, #24]
   1f4e8:	1c53      	adds	r3, r2, #1
   1f4ea:	f000 8617 	beq.w	2011c <_svfprintf_r+0x10dc>
   1f4ee:	4621      	mov	r1, r4
   1f4f0:	4630      	mov	r0, r6
   1f4f2:	f7fe ff1d 	bl	1e330 <memchr>
   1f4f6:	2800      	cmp	r0, #0
   1f4f8:	f000 8708 	beq.w	2030c <_svfprintf_r+0x12cc>
   1f4fc:	1b83      	subs	r3, r0, r6
   1f4fe:	930a      	str	r3, [sp, #40]	; 0x28
   1f500:	9406      	str	r4, [sp, #24]
   1f502:	950b      	str	r5, [sp, #44]	; 0x2c
   1f504:	f8cd b00c 	str.w	fp, [sp, #12]
   1f508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f50c:	9304      	str	r3, [sp, #16]
   1f50e:	940e      	str	r4, [sp, #56]	; 0x38
   1f510:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f514:	e6ac      	b.n	1f270 <_svfprintf_r+0x230>
   1f516:	f89a 3000 	ldrb.w	r3, [sl]
   1f51a:	2201      	movs	r2, #1
   1f51c:	212b      	movs	r1, #43	; 0x2b
   1f51e:	e5e7      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f520:	f04b 0b20 	orr.w	fp, fp, #32
   1f524:	f89a 3000 	ldrb.w	r3, [sl]
   1f528:	e5e2      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f52a:	930d      	str	r3, [sp, #52]	; 0x34
   1f52c:	2a00      	cmp	r2, #0
   1f52e:	f040 87aa 	bne.w	20486 <_svfprintf_r+0x1446>
   1f532:	4b23      	ldr	r3, [pc, #140]	; (1f5c0 <_svfprintf_r+0x580>)
   1f534:	9312      	str	r3, [sp, #72]	; 0x48
   1f536:	f01b 0f20 	tst.w	fp, #32
   1f53a:	f040 8112 	bne.w	1f762 <_svfprintf_r+0x722>
   1f53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f540:	f01b 0f10 	tst.w	fp, #16
   1f544:	4613      	mov	r3, r2
   1f546:	f040 83e0 	bne.w	1fd0a <_svfprintf_r+0xcca>
   1f54a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f54e:	f000 83dc 	beq.w	1fd0a <_svfprintf_r+0xcca>
   1f552:	3304      	adds	r3, #4
   1f554:	8814      	ldrh	r4, [r2, #0]
   1f556:	930b      	str	r3, [sp, #44]	; 0x2c
   1f558:	2500      	movs	r5, #0
   1f55a:	f01b 0f01 	tst.w	fp, #1
   1f55e:	f000 810d 	beq.w	1f77c <_svfprintf_r+0x73c>
   1f562:	ea54 0305 	orrs.w	r3, r4, r5
   1f566:	f000 8109 	beq.w	1f77c <_svfprintf_r+0x73c>
   1f56a:	2330      	movs	r3, #48	; 0x30
   1f56c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f570:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f574:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f578:	f04b 0b02 	orr.w	fp, fp, #2
   1f57c:	2302      	movs	r3, #2
   1f57e:	e652      	b.n	1f226 <_svfprintf_r+0x1e6>
   1f580:	f89a 3000 	ldrb.w	r3, [sl]
   1f584:	2900      	cmp	r1, #0
   1f586:	f47f adb3 	bne.w	1f0f0 <_svfprintf_r+0xb0>
   1f58a:	2201      	movs	r2, #1
   1f58c:	2120      	movs	r1, #32
   1f58e:	e5af      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f590:	f04b 0b01 	orr.w	fp, fp, #1
   1f594:	f89a 3000 	ldrb.w	r3, [sl]
   1f598:	e5aa      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f59a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f59c:	6823      	ldr	r3, [r4, #0]
   1f59e:	9309      	str	r3, [sp, #36]	; 0x24
   1f5a0:	4618      	mov	r0, r3
   1f5a2:	2800      	cmp	r0, #0
   1f5a4:	4623      	mov	r3, r4
   1f5a6:	f103 0304 	add.w	r3, r3, #4
   1f5aa:	f6ff ae03 	blt.w	1f1b4 <_svfprintf_r+0x174>
   1f5ae:	930b      	str	r3, [sp, #44]	; 0x2c
   1f5b0:	f89a 3000 	ldrb.w	r3, [sl]
   1f5b4:	e59c      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f5b6:	bf00      	nop
   1f5b8:	00024e8c 	.word	0x00024e8c
   1f5bc:	00024e9c 	.word	0x00024e9c
   1f5c0:	00024e6c 	.word	0x00024e6c
   1f5c4:	f04b 0b10 	orr.w	fp, fp, #16
   1f5c8:	f01b 0f20 	tst.w	fp, #32
   1f5cc:	930d      	str	r3, [sp, #52]	; 0x34
   1f5ce:	f43f ae1b 	beq.w	1f208 <_svfprintf_r+0x1c8>
   1f5d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f5d4:	3507      	adds	r5, #7
   1f5d6:	f025 0307 	bic.w	r3, r5, #7
   1f5da:	f103 0208 	add.w	r2, r3, #8
   1f5de:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f5e2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f5e4:	2301      	movs	r3, #1
   1f5e6:	e61e      	b.n	1f226 <_svfprintf_r+0x1e6>
   1f5e8:	f89a 3000 	ldrb.w	r3, [sl]
   1f5ec:	2b2a      	cmp	r3, #42	; 0x2a
   1f5ee:	f10a 0401 	add.w	r4, sl, #1
   1f5f2:	f000 873b 	beq.w	2046c <_svfprintf_r+0x142c>
   1f5f6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f5fa:	2809      	cmp	r0, #9
   1f5fc:	46a2      	mov	sl, r4
   1f5fe:	f200 8691 	bhi.w	20324 <_svfprintf_r+0x12e4>
   1f602:	2300      	movs	r3, #0
   1f604:	461c      	mov	r4, r3
   1f606:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f60a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f60e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f612:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f616:	2809      	cmp	r0, #9
   1f618:	d9f5      	bls.n	1f606 <_svfprintf_r+0x5c6>
   1f61a:	9406      	str	r4, [sp, #24]
   1f61c:	e56a      	b.n	1f0f4 <_svfprintf_r+0xb4>
   1f61e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f622:	f89a 3000 	ldrb.w	r3, [sl]
   1f626:	e563      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f628:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f62c:	f89a 3000 	ldrb.w	r3, [sl]
   1f630:	e55e      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f632:	f89a 3000 	ldrb.w	r3, [sl]
   1f636:	2b6c      	cmp	r3, #108	; 0x6c
   1f638:	bf03      	ittte	eq
   1f63a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f63e:	f04b 0b20 	orreq.w	fp, fp, #32
   1f642:	f10a 0a01 	addeq.w	sl, sl, #1
   1f646:	f04b 0b10 	orrne.w	fp, fp, #16
   1f64a:	e551      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f64c:	2a00      	cmp	r2, #0
   1f64e:	f040 871e 	bne.w	2048e <_svfprintf_r+0x144e>
   1f652:	f01b 0f20 	tst.w	fp, #32
   1f656:	f040 8509 	bne.w	2006c <_svfprintf_r+0x102c>
   1f65a:	f01b 0f10 	tst.w	fp, #16
   1f65e:	f040 84bc 	bne.w	1ffda <_svfprintf_r+0xf9a>
   1f662:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f666:	f000 84b8 	beq.w	1ffda <_svfprintf_r+0xf9a>
   1f66a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f66c:	6813      	ldr	r3, [r2, #0]
   1f66e:	3204      	adds	r2, #4
   1f670:	920b      	str	r2, [sp, #44]	; 0x2c
   1f672:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f676:	801a      	strh	r2, [r3, #0]
   1f678:	e509      	b.n	1f08e <_svfprintf_r+0x4e>
   1f67a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f67c:	4bb9      	ldr	r3, [pc, #740]	; (1f964 <_svfprintf_r+0x924>)
   1f67e:	680c      	ldr	r4, [r1, #0]
   1f680:	9312      	str	r3, [sp, #72]	; 0x48
   1f682:	2230      	movs	r2, #48	; 0x30
   1f684:	2378      	movs	r3, #120	; 0x78
   1f686:	3104      	adds	r1, #4
   1f688:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f68c:	930d      	str	r3, [sp, #52]	; 0x34
   1f68e:	f04b 0b02 	orr.w	fp, fp, #2
   1f692:	910b      	str	r1, [sp, #44]	; 0x2c
   1f694:	2500      	movs	r5, #0
   1f696:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f69a:	2302      	movs	r3, #2
   1f69c:	e5c3      	b.n	1f226 <_svfprintf_r+0x1e6>
   1f69e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f6a0:	930d      	str	r3, [sp, #52]	; 0x34
   1f6a2:	680a      	ldr	r2, [r1, #0]
   1f6a4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f6a8:	2300      	movs	r3, #0
   1f6aa:	460a      	mov	r2, r1
   1f6ac:	461f      	mov	r7, r3
   1f6ae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f6b2:	3204      	adds	r2, #4
   1f6b4:	2301      	movs	r3, #1
   1f6b6:	9304      	str	r3, [sp, #16]
   1f6b8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f6bc:	9706      	str	r7, [sp, #24]
   1f6be:	970e      	str	r7, [sp, #56]	; 0x38
   1f6c0:	920b      	str	r2, [sp, #44]	; 0x2c
   1f6c2:	930a      	str	r3, [sp, #40]	; 0x28
   1f6c4:	ae26      	add	r6, sp, #152	; 0x98
   1f6c6:	e5d7      	b.n	1f278 <_svfprintf_r+0x238>
   1f6c8:	930d      	str	r3, [sp, #52]	; 0x34
   1f6ca:	2a00      	cmp	r2, #0
   1f6cc:	f040 86fe 	bne.w	204cc <_svfprintf_r+0x148c>
   1f6d0:	f01b 0f20 	tst.w	fp, #32
   1f6d4:	d15d      	bne.n	1f792 <_svfprintf_r+0x752>
   1f6d6:	f01b 0f10 	tst.w	fp, #16
   1f6da:	f040 8335 	bne.w	1fd48 <_svfprintf_r+0xd08>
   1f6de:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f6e2:	f000 8331 	beq.w	1fd48 <_svfprintf_r+0xd08>
   1f6e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f6e8:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f6ec:	3104      	adds	r1, #4
   1f6ee:	17e5      	asrs	r5, r4, #31
   1f6f0:	4622      	mov	r2, r4
   1f6f2:	462b      	mov	r3, r5
   1f6f4:	910b      	str	r1, [sp, #44]	; 0x2c
   1f6f6:	2a00      	cmp	r2, #0
   1f6f8:	f173 0300 	sbcs.w	r3, r3, #0
   1f6fc:	db58      	blt.n	1f7b0 <_svfprintf_r+0x770>
   1f6fe:	9906      	ldr	r1, [sp, #24]
   1f700:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f704:	1c4a      	adds	r2, r1, #1
   1f706:	f04f 0301 	mov.w	r3, #1
   1f70a:	f47f ad93 	bne.w	1f234 <_svfprintf_r+0x1f4>
   1f70e:	ea54 0205 	orrs.w	r2, r4, r5
   1f712:	f000 81ec 	beq.w	1faee <_svfprintf_r+0xaae>
   1f716:	f8cd b00c 	str.w	fp, [sp, #12]
   1f71a:	2b01      	cmp	r3, #1
   1f71c:	f000 8283 	beq.w	1fc26 <_svfprintf_r+0xbe6>
   1f720:	2b02      	cmp	r3, #2
   1f722:	f040 8213 	bne.w	1fb4c <_svfprintf_r+0xb0c>
   1f726:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f728:	464e      	mov	r6, r9
   1f72a:	0923      	lsrs	r3, r4, #4
   1f72c:	f004 010f 	and.w	r1, r4, #15
   1f730:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f734:	092a      	lsrs	r2, r5, #4
   1f736:	461c      	mov	r4, r3
   1f738:	4615      	mov	r5, r2
   1f73a:	5c43      	ldrb	r3, [r0, r1]
   1f73c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f740:	ea54 0305 	orrs.w	r3, r4, r5
   1f744:	d1f1      	bne.n	1f72a <_svfprintf_r+0x6ea>
   1f746:	eba9 0306 	sub.w	r3, r9, r6
   1f74a:	930a      	str	r3, [sp, #40]	; 0x28
   1f74c:	e588      	b.n	1f260 <_svfprintf_r+0x220>
   1f74e:	930d      	str	r3, [sp, #52]	; 0x34
   1f750:	2a00      	cmp	r2, #0
   1f752:	f040 86b7 	bne.w	204c4 <_svfprintf_r+0x1484>
   1f756:	4b84      	ldr	r3, [pc, #528]	; (1f968 <_svfprintf_r+0x928>)
   1f758:	9312      	str	r3, [sp, #72]	; 0x48
   1f75a:	f01b 0f20 	tst.w	fp, #32
   1f75e:	f43f aeee 	beq.w	1f53e <_svfprintf_r+0x4fe>
   1f762:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f764:	3507      	adds	r5, #7
   1f766:	f025 0307 	bic.w	r3, r5, #7
   1f76a:	f103 0208 	add.w	r2, r3, #8
   1f76e:	f01b 0f01 	tst.w	fp, #1
   1f772:	920b      	str	r2, [sp, #44]	; 0x2c
   1f774:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f778:	f47f aef3 	bne.w	1f562 <_svfprintf_r+0x522>
   1f77c:	2302      	movs	r3, #2
   1f77e:	e552      	b.n	1f226 <_svfprintf_r+0x1e6>
   1f780:	930d      	str	r3, [sp, #52]	; 0x34
   1f782:	2a00      	cmp	r2, #0
   1f784:	f040 869a 	bne.w	204bc <_svfprintf_r+0x147c>
   1f788:	f04b 0b10 	orr.w	fp, fp, #16
   1f78c:	f01b 0f20 	tst.w	fp, #32
   1f790:	d0a1      	beq.n	1f6d6 <_svfprintf_r+0x696>
   1f792:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f794:	3507      	adds	r5, #7
   1f796:	f025 0507 	bic.w	r5, r5, #7
   1f79a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f79e:	2a00      	cmp	r2, #0
   1f7a0:	f105 0108 	add.w	r1, r5, #8
   1f7a4:	461d      	mov	r5, r3
   1f7a6:	f173 0300 	sbcs.w	r3, r3, #0
   1f7aa:	910b      	str	r1, [sp, #44]	; 0x2c
   1f7ac:	4614      	mov	r4, r2
   1f7ae:	daa6      	bge.n	1f6fe <_svfprintf_r+0x6be>
   1f7b0:	272d      	movs	r7, #45	; 0x2d
   1f7b2:	4264      	negs	r4, r4
   1f7b4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f7b8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f7bc:	2301      	movs	r3, #1
   1f7be:	e535      	b.n	1f22c <_svfprintf_r+0x1ec>
   1f7c0:	930d      	str	r3, [sp, #52]	; 0x34
   1f7c2:	2a00      	cmp	r2, #0
   1f7c4:	f040 8676 	bne.w	204b4 <_svfprintf_r+0x1474>
   1f7c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f7ca:	f01b 0f08 	tst.w	fp, #8
   1f7ce:	f105 0507 	add.w	r5, r5, #7
   1f7d2:	f000 83e8 	beq.w	1ffa6 <_svfprintf_r+0xf66>
   1f7d6:	f025 0307 	bic.w	r3, r5, #7
   1f7da:	ed93 7b00 	vldr	d7, [r3]
   1f7de:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f7e2:	f103 0208 	add.w	r2, r3, #8
   1f7e6:	920b      	str	r2, [sp, #44]	; 0x2c
   1f7e8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f7ec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f7f0:	9116      	str	r1, [sp, #88]	; 0x58
   1f7f2:	9317      	str	r3, [sp, #92]	; 0x5c
   1f7f4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f7f8:	f04f 32ff 	mov.w	r2, #4294967295
   1f7fc:	4620      	mov	r0, r4
   1f7fe:	4629      	mov	r1, r5
   1f800:	4b5a      	ldr	r3, [pc, #360]	; (1f96c <_svfprintf_r+0x92c>)
   1f802:	f002 ffa5 	bl	22750 <__aeabi_dcmpun>
   1f806:	2800      	cmp	r0, #0
   1f808:	f040 834f 	bne.w	1feaa <_svfprintf_r+0xe6a>
   1f80c:	f04f 32ff 	mov.w	r2, #4294967295
   1f810:	4b56      	ldr	r3, [pc, #344]	; (1f96c <_svfprintf_r+0x92c>)
   1f812:	4620      	mov	r0, r4
   1f814:	4629      	mov	r1, r5
   1f816:	f7fc fcb1 	bl	1c17c <__aeabi_dcmple>
   1f81a:	2800      	cmp	r0, #0
   1f81c:	f040 8345 	bne.w	1feaa <_svfprintf_r+0xe6a>
   1f820:	2200      	movs	r2, #0
   1f822:	2300      	movs	r3, #0
   1f824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f828:	f7fc fc9e 	bl	1c168 <__aeabi_dcmplt>
   1f82c:	2800      	cmp	r0, #0
   1f82e:	f040 8533 	bne.w	20298 <_svfprintf_r+0x1258>
   1f832:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f836:	4e4e      	ldr	r6, [pc, #312]	; (1f970 <_svfprintf_r+0x930>)
   1f838:	4b4e      	ldr	r3, [pc, #312]	; (1f974 <_svfprintf_r+0x934>)
   1f83a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f83e:	9003      	str	r0, [sp, #12]
   1f840:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f842:	2203      	movs	r2, #3
   1f844:	2100      	movs	r1, #0
   1f846:	9204      	str	r2, [sp, #16]
   1f848:	9106      	str	r1, [sp, #24]
   1f84a:	2847      	cmp	r0, #71	; 0x47
   1f84c:	bfd8      	it	le
   1f84e:	461e      	movle	r6, r3
   1f850:	920a      	str	r2, [sp, #40]	; 0x28
   1f852:	910e      	str	r1, [sp, #56]	; 0x38
   1f854:	e50c      	b.n	1f270 <_svfprintf_r+0x230>
   1f856:	f04b 0b08 	orr.w	fp, fp, #8
   1f85a:	f89a 3000 	ldrb.w	r3, [sl]
   1f85e:	e447      	b.n	1f0f0 <_svfprintf_r+0xb0>
   1f860:	f04b 0b10 	orr.w	fp, fp, #16
   1f864:	930d      	str	r3, [sp, #52]	; 0x34
   1f866:	f01b 0320 	ands.w	r3, fp, #32
   1f86a:	f43f ae22 	beq.w	1f4b2 <_svfprintf_r+0x472>
   1f86e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f870:	3507      	adds	r5, #7
   1f872:	f025 0307 	bic.w	r3, r5, #7
   1f876:	f103 0208 	add.w	r2, r3, #8
   1f87a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f87e:	920b      	str	r2, [sp, #44]	; 0x2c
   1f880:	2300      	movs	r3, #0
   1f882:	e4d0      	b.n	1f226 <_svfprintf_r+0x1e6>
   1f884:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f888:	2300      	movs	r3, #0
   1f88a:	461c      	mov	r4, r3
   1f88c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f890:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f894:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f898:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f89c:	2809      	cmp	r0, #9
   1f89e:	d9f5      	bls.n	1f88c <_svfprintf_r+0x84c>
   1f8a0:	9409      	str	r4, [sp, #36]	; 0x24
   1f8a2:	e427      	b.n	1f0f4 <_svfprintf_r+0xb4>
   1f8a4:	930d      	str	r3, [sp, #52]	; 0x34
   1f8a6:	2a00      	cmp	r2, #0
   1f8a8:	f040 85f5 	bne.w	20496 <_svfprintf_r+0x1456>
   1f8ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f8ae:	2a00      	cmp	r2, #0
   1f8b0:	f43f ac91 	beq.w	1f1d6 <_svfprintf_r+0x196>
   1f8b4:	2300      	movs	r3, #0
   1f8b6:	2101      	movs	r1, #1
   1f8b8:	461f      	mov	r7, r3
   1f8ba:	9104      	str	r1, [sp, #16]
   1f8bc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f8c0:	f8cd b00c 	str.w	fp, [sp, #12]
   1f8c4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f8c8:	9306      	str	r3, [sp, #24]
   1f8ca:	930e      	str	r3, [sp, #56]	; 0x38
   1f8cc:	910a      	str	r1, [sp, #40]	; 0x28
   1f8ce:	ae26      	add	r6, sp, #152	; 0x98
   1f8d0:	e4d2      	b.n	1f278 <_svfprintf_r+0x238>
   1f8d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f8d4:	e529      	b.n	1f32a <_svfprintf_r+0x2ea>
   1f8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f8d8:	2b65      	cmp	r3, #101	; 0x65
   1f8da:	f340 80a9 	ble.w	1fa30 <_svfprintf_r+0x9f0>
   1f8de:	2200      	movs	r2, #0
   1f8e0:	2300      	movs	r3, #0
   1f8e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f8e6:	f7fc fc35 	bl	1c154 <__aeabi_dcmpeq>
   1f8ea:	2800      	cmp	r0, #0
   1f8ec:	f000 8152 	beq.w	1fb94 <_svfprintf_r+0xb54>
   1f8f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f8f2:	4a21      	ldr	r2, [pc, #132]	; (1f978 <_svfprintf_r+0x938>)
   1f8f4:	f8c8 2000 	str.w	r2, [r8]
   1f8f8:	3301      	adds	r3, #1
   1f8fa:	3401      	adds	r4, #1
   1f8fc:	2201      	movs	r2, #1
   1f8fe:	2b07      	cmp	r3, #7
   1f900:	9425      	str	r4, [sp, #148]	; 0x94
   1f902:	9324      	str	r3, [sp, #144]	; 0x90
   1f904:	f8c8 2004 	str.w	r2, [r8, #4]
   1f908:	f300 836f 	bgt.w	1ffea <_svfprintf_r+0xfaa>
   1f90c:	f108 0808 	add.w	r8, r8, #8
   1f910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f914:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f916:	4293      	cmp	r3, r2
   1f918:	db03      	blt.n	1f922 <_svfprintf_r+0x8e2>
   1f91a:	9b03      	ldr	r3, [sp, #12]
   1f91c:	07dd      	lsls	r5, r3, #31
   1f91e:	f57f ad76 	bpl.w	1f40e <_svfprintf_r+0x3ce>
   1f922:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f924:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f926:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f928:	f8c8 2000 	str.w	r2, [r8]
   1f92c:	3301      	adds	r3, #1
   1f92e:	440c      	add	r4, r1
   1f930:	2b07      	cmp	r3, #7
   1f932:	f8c8 1004 	str.w	r1, [r8, #4]
   1f936:	9425      	str	r4, [sp, #148]	; 0x94
   1f938:	9324      	str	r3, [sp, #144]	; 0x90
   1f93a:	f300 83a3 	bgt.w	20084 <_svfprintf_r+0x1044>
   1f93e:	f108 0808 	add.w	r8, r8, #8
   1f942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f944:	1e5e      	subs	r6, r3, #1
   1f946:	2e00      	cmp	r6, #0
   1f948:	f77f ad61 	ble.w	1f40e <_svfprintf_r+0x3ce>
   1f94c:	2e10      	cmp	r6, #16
   1f94e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f950:	4d0a      	ldr	r5, [pc, #40]	; (1f97c <_svfprintf_r+0x93c>)
   1f952:	f340 81ef 	ble.w	1fd34 <_svfprintf_r+0xcf4>
   1f956:	4622      	mov	r2, r4
   1f958:	2710      	movs	r7, #16
   1f95a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f95e:	9c07      	ldr	r4, [sp, #28]
   1f960:	e014      	b.n	1f98c <_svfprintf_r+0x94c>
   1f962:	bf00      	nop
   1f964:	00024e6c 	.word	0x00024e6c
   1f968:	00024e58 	.word	0x00024e58
   1f96c:	7fefffff 	.word	0x7fefffff
   1f970:	00024e4c 	.word	0x00024e4c
   1f974:	00024e48 	.word	0x00024e48
   1f978:	00024e88 	.word	0x00024e88
   1f97c:	00024e9c 	.word	0x00024e9c
   1f980:	f108 0808 	add.w	r8, r8, #8
   1f984:	3e10      	subs	r6, #16
   1f986:	2e10      	cmp	r6, #16
   1f988:	f340 81d3 	ble.w	1fd32 <_svfprintf_r+0xcf2>
   1f98c:	3301      	adds	r3, #1
   1f98e:	3210      	adds	r2, #16
   1f990:	2b07      	cmp	r3, #7
   1f992:	9225      	str	r2, [sp, #148]	; 0x94
   1f994:	9324      	str	r3, [sp, #144]	; 0x90
   1f996:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f99a:	ddf1      	ble.n	1f980 <_svfprintf_r+0x940>
   1f99c:	aa23      	add	r2, sp, #140	; 0x8c
   1f99e:	4621      	mov	r1, r4
   1f9a0:	4658      	mov	r0, fp
   1f9a2:	f002 fcff 	bl	223a4 <__ssprint_r>
   1f9a6:	2800      	cmp	r0, #0
   1f9a8:	f47f ac1c 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1f9ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f9ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f9b0:	46c8      	mov	r8, r9
   1f9b2:	e7e7      	b.n	1f984 <_svfprintf_r+0x944>
   1f9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9b6:	9a04      	ldr	r2, [sp, #16]
   1f9b8:	1a9f      	subs	r7, r3, r2
   1f9ba:	2f00      	cmp	r7, #0
   1f9bc:	f77f acd8 	ble.w	1f370 <_svfprintf_r+0x330>
   1f9c0:	2f10      	cmp	r7, #16
   1f9c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f9c4:	4db7      	ldr	r5, [pc, #732]	; (1fca4 <_svfprintf_r+0xc64>)
   1f9c6:	dd27      	ble.n	1fa18 <_svfprintf_r+0x9d8>
   1f9c8:	4642      	mov	r2, r8
   1f9ca:	4621      	mov	r1, r4
   1f9cc:	46b0      	mov	r8, r6
   1f9ce:	f04f 0b10 	mov.w	fp, #16
   1f9d2:	462e      	mov	r6, r5
   1f9d4:	9c08      	ldr	r4, [sp, #32]
   1f9d6:	9d07      	ldr	r5, [sp, #28]
   1f9d8:	e004      	b.n	1f9e4 <_svfprintf_r+0x9a4>
   1f9da:	3f10      	subs	r7, #16
   1f9dc:	2f10      	cmp	r7, #16
   1f9de:	f102 0208 	add.w	r2, r2, #8
   1f9e2:	dd15      	ble.n	1fa10 <_svfprintf_r+0x9d0>
   1f9e4:	3301      	adds	r3, #1
   1f9e6:	3110      	adds	r1, #16
   1f9e8:	2b07      	cmp	r3, #7
   1f9ea:	9125      	str	r1, [sp, #148]	; 0x94
   1f9ec:	9324      	str	r3, [sp, #144]	; 0x90
   1f9ee:	e882 0840 	stmia.w	r2, {r6, fp}
   1f9f2:	ddf2      	ble.n	1f9da <_svfprintf_r+0x99a>
   1f9f4:	aa23      	add	r2, sp, #140	; 0x8c
   1f9f6:	4629      	mov	r1, r5
   1f9f8:	4620      	mov	r0, r4
   1f9fa:	f002 fcd3 	bl	223a4 <__ssprint_r>
   1f9fe:	2800      	cmp	r0, #0
   1fa00:	f47f abf0 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fa04:	3f10      	subs	r7, #16
   1fa06:	2f10      	cmp	r7, #16
   1fa08:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fa0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fa0c:	464a      	mov	r2, r9
   1fa0e:	dce9      	bgt.n	1f9e4 <_svfprintf_r+0x9a4>
   1fa10:	4635      	mov	r5, r6
   1fa12:	460c      	mov	r4, r1
   1fa14:	4646      	mov	r6, r8
   1fa16:	4690      	mov	r8, r2
   1fa18:	3301      	adds	r3, #1
   1fa1a:	443c      	add	r4, r7
   1fa1c:	2b07      	cmp	r3, #7
   1fa1e:	9425      	str	r4, [sp, #148]	; 0x94
   1fa20:	9324      	str	r3, [sp, #144]	; 0x90
   1fa22:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fa26:	f300 8234 	bgt.w	1fe92 <_svfprintf_r+0xe52>
   1fa2a:	f108 0808 	add.w	r8, r8, #8
   1fa2e:	e49f      	b.n	1f370 <_svfprintf_r+0x330>
   1fa30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fa32:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fa34:	2b01      	cmp	r3, #1
   1fa36:	f340 8200 	ble.w	1fe3a <_svfprintf_r+0xdfa>
   1fa3a:	3701      	adds	r7, #1
   1fa3c:	3401      	adds	r4, #1
   1fa3e:	2301      	movs	r3, #1
   1fa40:	2f07      	cmp	r7, #7
   1fa42:	9425      	str	r4, [sp, #148]	; 0x94
   1fa44:	9724      	str	r7, [sp, #144]	; 0x90
   1fa46:	f8c8 6000 	str.w	r6, [r8]
   1fa4a:	f8c8 3004 	str.w	r3, [r8, #4]
   1fa4e:	f300 8205 	bgt.w	1fe5c <_svfprintf_r+0xe1c>
   1fa52:	f108 0808 	add.w	r8, r8, #8
   1fa56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fa58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1fa5a:	f8c8 3000 	str.w	r3, [r8]
   1fa5e:	3701      	adds	r7, #1
   1fa60:	4414      	add	r4, r2
   1fa62:	2f07      	cmp	r7, #7
   1fa64:	9425      	str	r4, [sp, #148]	; 0x94
   1fa66:	9724      	str	r7, [sp, #144]	; 0x90
   1fa68:	f8c8 2004 	str.w	r2, [r8, #4]
   1fa6c:	f300 8202 	bgt.w	1fe74 <_svfprintf_r+0xe34>
   1fa70:	f108 0808 	add.w	r8, r8, #8
   1fa74:	2300      	movs	r3, #0
   1fa76:	2200      	movs	r2, #0
   1fa78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fa7c:	f7fc fb6a 	bl	1c154 <__aeabi_dcmpeq>
   1fa80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fa82:	2800      	cmp	r0, #0
   1fa84:	f040 8101 	bne.w	1fc8a <_svfprintf_r+0xc4a>
   1fa88:	3b01      	subs	r3, #1
   1fa8a:	3701      	adds	r7, #1
   1fa8c:	3601      	adds	r6, #1
   1fa8e:	441c      	add	r4, r3
   1fa90:	2f07      	cmp	r7, #7
   1fa92:	9724      	str	r7, [sp, #144]	; 0x90
   1fa94:	9425      	str	r4, [sp, #148]	; 0x94
   1fa96:	f8c8 6000 	str.w	r6, [r8]
   1fa9a:	f8c8 3004 	str.w	r3, [r8, #4]
   1fa9e:	f300 8128 	bgt.w	1fcf2 <_svfprintf_r+0xcb2>
   1faa2:	f108 0808 	add.w	r8, r8, #8
   1faa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1faa8:	f8c8 2004 	str.w	r2, [r8, #4]
   1faac:	3701      	adds	r7, #1
   1faae:	4414      	add	r4, r2
   1fab0:	ab1f      	add	r3, sp, #124	; 0x7c
   1fab2:	2f07      	cmp	r7, #7
   1fab4:	9425      	str	r4, [sp, #148]	; 0x94
   1fab6:	9724      	str	r7, [sp, #144]	; 0x90
   1fab8:	f8c8 3000 	str.w	r3, [r8]
   1fabc:	f77f aca5 	ble.w	1f40a <_svfprintf_r+0x3ca>
   1fac0:	aa23      	add	r2, sp, #140	; 0x8c
   1fac2:	9907      	ldr	r1, [sp, #28]
   1fac4:	9808      	ldr	r0, [sp, #32]
   1fac6:	f002 fc6d 	bl	223a4 <__ssprint_r>
   1faca:	2800      	cmp	r0, #0
   1facc:	f47f ab8a 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fad0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fad2:	46c8      	mov	r8, r9
   1fad4:	e49b      	b.n	1f40e <_svfprintf_r+0x3ce>
   1fad6:	aa23      	add	r2, sp, #140	; 0x8c
   1fad8:	9907      	ldr	r1, [sp, #28]
   1fada:	9808      	ldr	r0, [sp, #32]
   1fadc:	f002 fc62 	bl	223a4 <__ssprint_r>
   1fae0:	2800      	cmp	r0, #0
   1fae2:	f43f acdd 	beq.w	1f4a0 <_svfprintf_r+0x460>
   1fae6:	f7ff bb7d 	b.w	1f1e4 <_svfprintf_r+0x1a4>
   1faea:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1faee:	2b01      	cmp	r3, #1
   1faf0:	f000 8135 	beq.w	1fd5e <_svfprintf_r+0xd1e>
   1faf4:	2b02      	cmp	r3, #2
   1faf6:	d125      	bne.n	1fb44 <_svfprintf_r+0xb04>
   1faf8:	f8cd b00c 	str.w	fp, [sp, #12]
   1fafc:	2400      	movs	r4, #0
   1fafe:	2500      	movs	r5, #0
   1fb00:	e611      	b.n	1f726 <_svfprintf_r+0x6e6>
   1fb02:	aa23      	add	r2, sp, #140	; 0x8c
   1fb04:	9907      	ldr	r1, [sp, #28]
   1fb06:	9808      	ldr	r0, [sp, #32]
   1fb08:	f002 fc4c 	bl	223a4 <__ssprint_r>
   1fb0c:	2800      	cmp	r0, #0
   1fb0e:	f47f ab69 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fb12:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb14:	46c8      	mov	r8, r9
   1fb16:	e467      	b.n	1f3e8 <_svfprintf_r+0x3a8>
   1fb18:	aa23      	add	r2, sp, #140	; 0x8c
   1fb1a:	9907      	ldr	r1, [sp, #28]
   1fb1c:	9808      	ldr	r0, [sp, #32]
   1fb1e:	f002 fc41 	bl	223a4 <__ssprint_r>
   1fb22:	2800      	cmp	r0, #0
   1fb24:	f47f ab5e 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fb28:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb2a:	46c8      	mov	r8, r9
   1fb2c:	e41d      	b.n	1f36a <_svfprintf_r+0x32a>
   1fb2e:	aa23      	add	r2, sp, #140	; 0x8c
   1fb30:	9907      	ldr	r1, [sp, #28]
   1fb32:	9808      	ldr	r0, [sp, #32]
   1fb34:	f002 fc36 	bl	223a4 <__ssprint_r>
   1fb38:	2800      	cmp	r0, #0
   1fb3a:	f47f ab53 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fb3e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb40:	46c8      	mov	r8, r9
   1fb42:	e402      	b.n	1f34a <_svfprintf_r+0x30a>
   1fb44:	f8cd b00c 	str.w	fp, [sp, #12]
   1fb48:	2400      	movs	r4, #0
   1fb4a:	2500      	movs	r5, #0
   1fb4c:	4649      	mov	r1, r9
   1fb4e:	e000      	b.n	1fb52 <_svfprintf_r+0xb12>
   1fb50:	4631      	mov	r1, r6
   1fb52:	08e2      	lsrs	r2, r4, #3
   1fb54:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1fb58:	08e8      	lsrs	r0, r5, #3
   1fb5a:	f004 0307 	and.w	r3, r4, #7
   1fb5e:	4605      	mov	r5, r0
   1fb60:	4614      	mov	r4, r2
   1fb62:	3330      	adds	r3, #48	; 0x30
   1fb64:	ea54 0205 	orrs.w	r2, r4, r5
   1fb68:	f801 3c01 	strb.w	r3, [r1, #-1]
   1fb6c:	f101 36ff 	add.w	r6, r1, #4294967295
   1fb70:	d1ee      	bne.n	1fb50 <_svfprintf_r+0xb10>
   1fb72:	9a03      	ldr	r2, [sp, #12]
   1fb74:	07d2      	lsls	r2, r2, #31
   1fb76:	f57f ade6 	bpl.w	1f746 <_svfprintf_r+0x706>
   1fb7a:	2b30      	cmp	r3, #48	; 0x30
   1fb7c:	f43f ade3 	beq.w	1f746 <_svfprintf_r+0x706>
   1fb80:	3902      	subs	r1, #2
   1fb82:	2330      	movs	r3, #48	; 0x30
   1fb84:	f806 3c01 	strb.w	r3, [r6, #-1]
   1fb88:	eba9 0301 	sub.w	r3, r9, r1
   1fb8c:	930a      	str	r3, [sp, #40]	; 0x28
   1fb8e:	460e      	mov	r6, r1
   1fb90:	f7ff bb66 	b.w	1f260 <_svfprintf_r+0x220>
   1fb94:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fb96:	2900      	cmp	r1, #0
   1fb98:	f340 8231 	ble.w	1fffe <_svfprintf_r+0xfbe>
   1fb9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fb9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fba0:	4293      	cmp	r3, r2
   1fba2:	bfa8      	it	ge
   1fba4:	4613      	movge	r3, r2
   1fba6:	2b00      	cmp	r3, #0
   1fba8:	461f      	mov	r7, r3
   1fbaa:	dd0d      	ble.n	1fbc8 <_svfprintf_r+0xb88>
   1fbac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbae:	f8c8 6000 	str.w	r6, [r8]
   1fbb2:	3301      	adds	r3, #1
   1fbb4:	443c      	add	r4, r7
   1fbb6:	2b07      	cmp	r3, #7
   1fbb8:	9425      	str	r4, [sp, #148]	; 0x94
   1fbba:	f8c8 7004 	str.w	r7, [r8, #4]
   1fbbe:	9324      	str	r3, [sp, #144]	; 0x90
   1fbc0:	f300 8321 	bgt.w	20206 <_svfprintf_r+0x11c6>
   1fbc4:	f108 0808 	add.w	r8, r8, #8
   1fbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fbca:	2f00      	cmp	r7, #0
   1fbcc:	bfa8      	it	ge
   1fbce:	1bdb      	subge	r3, r3, r7
   1fbd0:	2b00      	cmp	r3, #0
   1fbd2:	461f      	mov	r7, r3
   1fbd4:	f340 80d7 	ble.w	1fd86 <_svfprintf_r+0xd46>
   1fbd8:	2f10      	cmp	r7, #16
   1fbda:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbdc:	4d31      	ldr	r5, [pc, #196]	; (1fca4 <_svfprintf_r+0xc64>)
   1fbde:	f340 81f0 	ble.w	1ffc2 <_svfprintf_r+0xf82>
   1fbe2:	4642      	mov	r2, r8
   1fbe4:	4621      	mov	r1, r4
   1fbe6:	46b0      	mov	r8, r6
   1fbe8:	f04f 0b10 	mov.w	fp, #16
   1fbec:	462e      	mov	r6, r5
   1fbee:	9c08      	ldr	r4, [sp, #32]
   1fbf0:	9d07      	ldr	r5, [sp, #28]
   1fbf2:	e004      	b.n	1fbfe <_svfprintf_r+0xbbe>
   1fbf4:	3208      	adds	r2, #8
   1fbf6:	3f10      	subs	r7, #16
   1fbf8:	2f10      	cmp	r7, #16
   1fbfa:	f340 81de 	ble.w	1ffba <_svfprintf_r+0xf7a>
   1fbfe:	3301      	adds	r3, #1
   1fc00:	3110      	adds	r1, #16
   1fc02:	2b07      	cmp	r3, #7
   1fc04:	9125      	str	r1, [sp, #148]	; 0x94
   1fc06:	9324      	str	r3, [sp, #144]	; 0x90
   1fc08:	e882 0840 	stmia.w	r2, {r6, fp}
   1fc0c:	ddf2      	ble.n	1fbf4 <_svfprintf_r+0xbb4>
   1fc0e:	aa23      	add	r2, sp, #140	; 0x8c
   1fc10:	4629      	mov	r1, r5
   1fc12:	4620      	mov	r0, r4
   1fc14:	f002 fbc6 	bl	223a4 <__ssprint_r>
   1fc18:	2800      	cmp	r0, #0
   1fc1a:	f47f aae3 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fc1e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fc20:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fc22:	464a      	mov	r2, r9
   1fc24:	e7e7      	b.n	1fbf6 <_svfprintf_r+0xbb6>
   1fc26:	2d00      	cmp	r5, #0
   1fc28:	bf08      	it	eq
   1fc2a:	2c0a      	cmpeq	r4, #10
   1fc2c:	f0c0 8095 	bcc.w	1fd5a <_svfprintf_r+0xd1a>
   1fc30:	464e      	mov	r6, r9
   1fc32:	4620      	mov	r0, r4
   1fc34:	4629      	mov	r1, r5
   1fc36:	220a      	movs	r2, #10
   1fc38:	2300      	movs	r3, #0
   1fc3a:	f7fc fcb3 	bl	1c5a4 <__aeabi_uldivmod>
   1fc3e:	3230      	adds	r2, #48	; 0x30
   1fc40:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fc44:	4620      	mov	r0, r4
   1fc46:	4629      	mov	r1, r5
   1fc48:	2300      	movs	r3, #0
   1fc4a:	220a      	movs	r2, #10
   1fc4c:	f7fc fcaa 	bl	1c5a4 <__aeabi_uldivmod>
   1fc50:	4604      	mov	r4, r0
   1fc52:	460d      	mov	r5, r1
   1fc54:	ea54 0305 	orrs.w	r3, r4, r5
   1fc58:	d1eb      	bne.n	1fc32 <_svfprintf_r+0xbf2>
   1fc5a:	eba9 0306 	sub.w	r3, r9, r6
   1fc5e:	930a      	str	r3, [sp, #40]	; 0x28
   1fc60:	f7ff bafe 	b.w	1f260 <_svfprintf_r+0x220>
   1fc64:	9b06      	ldr	r3, [sp, #24]
   1fc66:	930a      	str	r3, [sp, #40]	; 0x28
   1fc68:	464e      	mov	r6, r9
   1fc6a:	f7ff baf9 	b.w	1f260 <_svfprintf_r+0x220>
   1fc6e:	aa23      	add	r2, sp, #140	; 0x8c
   1fc70:	9907      	ldr	r1, [sp, #28]
   1fc72:	9808      	ldr	r0, [sp, #32]
   1fc74:	f002 fb96 	bl	223a4 <__ssprint_r>
   1fc78:	2800      	cmp	r0, #0
   1fc7a:	f47f aab3 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fc7e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fc82:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc84:	46c8      	mov	r8, r9
   1fc86:	f7ff bb50 	b.w	1f32a <_svfprintf_r+0x2ea>
   1fc8a:	1e5e      	subs	r6, r3, #1
   1fc8c:	2e00      	cmp	r6, #0
   1fc8e:	f77f af0a 	ble.w	1faa6 <_svfprintf_r+0xa66>
   1fc92:	2e10      	cmp	r6, #16
   1fc94:	4d03      	ldr	r5, [pc, #12]	; (1fca4 <_svfprintf_r+0xc64>)
   1fc96:	dd23      	ble.n	1fce0 <_svfprintf_r+0xca0>
   1fc98:	4622      	mov	r2, r4
   1fc9a:	f04f 0b10 	mov.w	fp, #16
   1fc9e:	9c08      	ldr	r4, [sp, #32]
   1fca0:	e007      	b.n	1fcb2 <_svfprintf_r+0xc72>
   1fca2:	bf00      	nop
   1fca4:	00024e9c 	.word	0x00024e9c
   1fca8:	3e10      	subs	r6, #16
   1fcaa:	2e10      	cmp	r6, #16
   1fcac:	f108 0808 	add.w	r8, r8, #8
   1fcb0:	dd15      	ble.n	1fcde <_svfprintf_r+0xc9e>
   1fcb2:	3701      	adds	r7, #1
   1fcb4:	3210      	adds	r2, #16
   1fcb6:	2f07      	cmp	r7, #7
   1fcb8:	9225      	str	r2, [sp, #148]	; 0x94
   1fcba:	9724      	str	r7, [sp, #144]	; 0x90
   1fcbc:	e888 0820 	stmia.w	r8, {r5, fp}
   1fcc0:	ddf2      	ble.n	1fca8 <_svfprintf_r+0xc68>
   1fcc2:	aa23      	add	r2, sp, #140	; 0x8c
   1fcc4:	9907      	ldr	r1, [sp, #28]
   1fcc6:	4620      	mov	r0, r4
   1fcc8:	f002 fb6c 	bl	223a4 <__ssprint_r>
   1fccc:	2800      	cmp	r0, #0
   1fcce:	f47f aa89 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fcd2:	3e10      	subs	r6, #16
   1fcd4:	2e10      	cmp	r6, #16
   1fcd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fcd8:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fcda:	46c8      	mov	r8, r9
   1fcdc:	dce9      	bgt.n	1fcb2 <_svfprintf_r+0xc72>
   1fcde:	4614      	mov	r4, r2
   1fce0:	3701      	adds	r7, #1
   1fce2:	4434      	add	r4, r6
   1fce4:	2f07      	cmp	r7, #7
   1fce6:	9425      	str	r4, [sp, #148]	; 0x94
   1fce8:	9724      	str	r7, [sp, #144]	; 0x90
   1fcea:	e888 0060 	stmia.w	r8, {r5, r6}
   1fcee:	f77f aed8 	ble.w	1faa2 <_svfprintf_r+0xa62>
   1fcf2:	aa23      	add	r2, sp, #140	; 0x8c
   1fcf4:	9907      	ldr	r1, [sp, #28]
   1fcf6:	9808      	ldr	r0, [sp, #32]
   1fcf8:	f002 fb54 	bl	223a4 <__ssprint_r>
   1fcfc:	2800      	cmp	r0, #0
   1fcfe:	f47f aa71 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fd02:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd04:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fd06:	46c8      	mov	r8, r9
   1fd08:	e6cd      	b.n	1faa6 <_svfprintf_r+0xa66>
   1fd0a:	681c      	ldr	r4, [r3, #0]
   1fd0c:	3304      	adds	r3, #4
   1fd0e:	930b      	str	r3, [sp, #44]	; 0x2c
   1fd10:	2500      	movs	r5, #0
   1fd12:	e422      	b.n	1f55a <_svfprintf_r+0x51a>
   1fd14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fd16:	460a      	mov	r2, r1
   1fd18:	3204      	adds	r2, #4
   1fd1a:	680c      	ldr	r4, [r1, #0]
   1fd1c:	920b      	str	r2, [sp, #44]	; 0x2c
   1fd1e:	2500      	movs	r5, #0
   1fd20:	f7ff ba81 	b.w	1f226 <_svfprintf_r+0x1e6>
   1fd24:	3204      	adds	r2, #4
   1fd26:	681c      	ldr	r4, [r3, #0]
   1fd28:	920b      	str	r2, [sp, #44]	; 0x2c
   1fd2a:	2301      	movs	r3, #1
   1fd2c:	2500      	movs	r5, #0
   1fd2e:	f7ff ba7a 	b.w	1f226 <_svfprintf_r+0x1e6>
   1fd32:	4614      	mov	r4, r2
   1fd34:	3301      	adds	r3, #1
   1fd36:	4434      	add	r4, r6
   1fd38:	2b07      	cmp	r3, #7
   1fd3a:	9425      	str	r4, [sp, #148]	; 0x94
   1fd3c:	9324      	str	r3, [sp, #144]	; 0x90
   1fd3e:	e888 0060 	stmia.w	r8, {r5, r6}
   1fd42:	f77f ab62 	ble.w	1f40a <_svfprintf_r+0x3ca>
   1fd46:	e6bb      	b.n	1fac0 <_svfprintf_r+0xa80>
   1fd48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fd4a:	6814      	ldr	r4, [r2, #0]
   1fd4c:	4613      	mov	r3, r2
   1fd4e:	3304      	adds	r3, #4
   1fd50:	17e5      	asrs	r5, r4, #31
   1fd52:	930b      	str	r3, [sp, #44]	; 0x2c
   1fd54:	4622      	mov	r2, r4
   1fd56:	462b      	mov	r3, r5
   1fd58:	e4cd      	b.n	1f6f6 <_svfprintf_r+0x6b6>
   1fd5a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fd5e:	f8cd b00c 	str.w	fp, [sp, #12]
   1fd62:	ae40      	add	r6, sp, #256	; 0x100
   1fd64:	3430      	adds	r4, #48	; 0x30
   1fd66:	2301      	movs	r3, #1
   1fd68:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1fd6c:	930a      	str	r3, [sp, #40]	; 0x28
   1fd6e:	f7ff ba77 	b.w	1f260 <_svfprintf_r+0x220>
   1fd72:	aa23      	add	r2, sp, #140	; 0x8c
   1fd74:	9907      	ldr	r1, [sp, #28]
   1fd76:	9808      	ldr	r0, [sp, #32]
   1fd78:	f002 fb14 	bl	223a4 <__ssprint_r>
   1fd7c:	2800      	cmp	r0, #0
   1fd7e:	f47f aa31 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fd82:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd84:	46c8      	mov	r8, r9
   1fd86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fd88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fd8a:	429a      	cmp	r2, r3
   1fd8c:	db44      	blt.n	1fe18 <_svfprintf_r+0xdd8>
   1fd8e:	9b03      	ldr	r3, [sp, #12]
   1fd90:	07d9      	lsls	r1, r3, #31
   1fd92:	d441      	bmi.n	1fe18 <_svfprintf_r+0xdd8>
   1fd94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fd96:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fd98:	1a9a      	subs	r2, r3, r2
   1fd9a:	1a1d      	subs	r5, r3, r0
   1fd9c:	4295      	cmp	r5, r2
   1fd9e:	bfa8      	it	ge
   1fda0:	4615      	movge	r5, r2
   1fda2:	2d00      	cmp	r5, #0
   1fda4:	dd0e      	ble.n	1fdc4 <_svfprintf_r+0xd84>
   1fda6:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fda8:	f8c8 5004 	str.w	r5, [r8, #4]
   1fdac:	3101      	adds	r1, #1
   1fdae:	4406      	add	r6, r0
   1fdb0:	442c      	add	r4, r5
   1fdb2:	2907      	cmp	r1, #7
   1fdb4:	f8c8 6000 	str.w	r6, [r8]
   1fdb8:	9425      	str	r4, [sp, #148]	; 0x94
   1fdba:	9124      	str	r1, [sp, #144]	; 0x90
   1fdbc:	f300 823a 	bgt.w	20234 <_svfprintf_r+0x11f4>
   1fdc0:	f108 0808 	add.w	r8, r8, #8
   1fdc4:	2d00      	cmp	r5, #0
   1fdc6:	bfac      	ite	ge
   1fdc8:	1b56      	subge	r6, r2, r5
   1fdca:	4616      	movlt	r6, r2
   1fdcc:	2e00      	cmp	r6, #0
   1fdce:	f77f ab1e 	ble.w	1f40e <_svfprintf_r+0x3ce>
   1fdd2:	2e10      	cmp	r6, #16
   1fdd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdd6:	4db1      	ldr	r5, [pc, #708]	; (2009c <_svfprintf_r+0x105c>)
   1fdd8:	ddac      	ble.n	1fd34 <_svfprintf_r+0xcf4>
   1fdda:	4622      	mov	r2, r4
   1fddc:	2710      	movs	r7, #16
   1fdde:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fde2:	9c07      	ldr	r4, [sp, #28]
   1fde4:	e004      	b.n	1fdf0 <_svfprintf_r+0xdb0>
   1fde6:	f108 0808 	add.w	r8, r8, #8
   1fdea:	3e10      	subs	r6, #16
   1fdec:	2e10      	cmp	r6, #16
   1fdee:	dda0      	ble.n	1fd32 <_svfprintf_r+0xcf2>
   1fdf0:	3301      	adds	r3, #1
   1fdf2:	3210      	adds	r2, #16
   1fdf4:	2b07      	cmp	r3, #7
   1fdf6:	9225      	str	r2, [sp, #148]	; 0x94
   1fdf8:	9324      	str	r3, [sp, #144]	; 0x90
   1fdfa:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fdfe:	ddf2      	ble.n	1fde6 <_svfprintf_r+0xda6>
   1fe00:	aa23      	add	r2, sp, #140	; 0x8c
   1fe02:	4621      	mov	r1, r4
   1fe04:	4658      	mov	r0, fp
   1fe06:	f002 facd 	bl	223a4 <__ssprint_r>
   1fe0a:	2800      	cmp	r0, #0
   1fe0c:	f47f a9ea 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fe10:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fe12:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fe14:	46c8      	mov	r8, r9
   1fe16:	e7e8      	b.n	1fdea <_svfprintf_r+0xdaa>
   1fe18:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fe1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fe1c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fe1e:	f8c8 1000 	str.w	r1, [r8]
   1fe22:	3301      	adds	r3, #1
   1fe24:	4404      	add	r4, r0
   1fe26:	2b07      	cmp	r3, #7
   1fe28:	9425      	str	r4, [sp, #148]	; 0x94
   1fe2a:	f8c8 0004 	str.w	r0, [r8, #4]
   1fe2e:	9324      	str	r3, [sp, #144]	; 0x90
   1fe30:	f300 81f4 	bgt.w	2021c <_svfprintf_r+0x11dc>
   1fe34:	f108 0808 	add.w	r8, r8, #8
   1fe38:	e7ac      	b.n	1fd94 <_svfprintf_r+0xd54>
   1fe3a:	9b03      	ldr	r3, [sp, #12]
   1fe3c:	07da      	lsls	r2, r3, #31
   1fe3e:	f53f adfc 	bmi.w	1fa3a <_svfprintf_r+0x9fa>
   1fe42:	3701      	adds	r7, #1
   1fe44:	3401      	adds	r4, #1
   1fe46:	2301      	movs	r3, #1
   1fe48:	2f07      	cmp	r7, #7
   1fe4a:	9425      	str	r4, [sp, #148]	; 0x94
   1fe4c:	9724      	str	r7, [sp, #144]	; 0x90
   1fe4e:	f8c8 6000 	str.w	r6, [r8]
   1fe52:	f8c8 3004 	str.w	r3, [r8, #4]
   1fe56:	f77f ae24 	ble.w	1faa2 <_svfprintf_r+0xa62>
   1fe5a:	e74a      	b.n	1fcf2 <_svfprintf_r+0xcb2>
   1fe5c:	aa23      	add	r2, sp, #140	; 0x8c
   1fe5e:	9907      	ldr	r1, [sp, #28]
   1fe60:	9808      	ldr	r0, [sp, #32]
   1fe62:	f002 fa9f 	bl	223a4 <__ssprint_r>
   1fe66:	2800      	cmp	r0, #0
   1fe68:	f47f a9bc 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fe6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe6e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fe70:	46c8      	mov	r8, r9
   1fe72:	e5f0      	b.n	1fa56 <_svfprintf_r+0xa16>
   1fe74:	aa23      	add	r2, sp, #140	; 0x8c
   1fe76:	9907      	ldr	r1, [sp, #28]
   1fe78:	9808      	ldr	r0, [sp, #32]
   1fe7a:	f002 fa93 	bl	223a4 <__ssprint_r>
   1fe7e:	2800      	cmp	r0, #0
   1fe80:	f47f a9b0 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fe84:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe86:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fe88:	46c8      	mov	r8, r9
   1fe8a:	e5f3      	b.n	1fa74 <_svfprintf_r+0xa34>
   1fe8c:	464e      	mov	r6, r9
   1fe8e:	f7ff b9e7 	b.w	1f260 <_svfprintf_r+0x220>
   1fe92:	aa23      	add	r2, sp, #140	; 0x8c
   1fe94:	9907      	ldr	r1, [sp, #28]
   1fe96:	9808      	ldr	r0, [sp, #32]
   1fe98:	f002 fa84 	bl	223a4 <__ssprint_r>
   1fe9c:	2800      	cmp	r0, #0
   1fe9e:	f47f a9a1 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fea2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fea4:	46c8      	mov	r8, r9
   1fea6:	f7ff ba63 	b.w	1f370 <_svfprintf_r+0x330>
   1feaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1feae:	4602      	mov	r2, r0
   1feb0:	460b      	mov	r3, r1
   1feb2:	f002 fc4d 	bl	22750 <__aeabi_dcmpun>
   1feb6:	2800      	cmp	r0, #0
   1feb8:	f040 8298 	bne.w	203ec <_svfprintf_r+0x13ac>
   1febc:	9b06      	ldr	r3, [sp, #24]
   1febe:	3301      	adds	r3, #1
   1fec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fec2:	f023 0720 	bic.w	r7, r3, #32
   1fec6:	f000 81d2 	beq.w	2026e <_svfprintf_r+0x122e>
   1feca:	2f47      	cmp	r7, #71	; 0x47
   1fecc:	f000 8120 	beq.w	20110 <_svfprintf_r+0x10d0>
   1fed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fed2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fed6:	2b00      	cmp	r3, #0
   1fed8:	9203      	str	r2, [sp, #12]
   1feda:	f2c0 81f0 	blt.w	202be <_svfprintf_r+0x127e>
   1fede:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fee2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fee6:	2300      	movs	r3, #0
   1fee8:	930c      	str	r3, [sp, #48]	; 0x30
   1feea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1feec:	2b66      	cmp	r3, #102	; 0x66
   1feee:	f000 81c1 	beq.w	20274 <_svfprintf_r+0x1234>
   1fef2:	2b46      	cmp	r3, #70	; 0x46
   1fef4:	f000 80f1 	beq.w	200da <_svfprintf_r+0x109a>
   1fef8:	2f45      	cmp	r7, #69	; 0x45
   1fefa:	bf0c      	ite	eq
   1fefc:	9b06      	ldreq	r3, [sp, #24]
   1fefe:	9d06      	ldrne	r5, [sp, #24]
   1ff00:	9808      	ldr	r0, [sp, #32]
   1ff02:	bf08      	it	eq
   1ff04:	1c5d      	addeq	r5, r3, #1
   1ff06:	aa21      	add	r2, sp, #132	; 0x84
   1ff08:	ab1e      	add	r3, sp, #120	; 0x78
   1ff0a:	9201      	str	r2, [sp, #4]
   1ff0c:	9300      	str	r3, [sp, #0]
   1ff0e:	462a      	mov	r2, r5
   1ff10:	ab1d      	add	r3, sp, #116	; 0x74
   1ff12:	2102      	movs	r1, #2
   1ff14:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1ff18:	f000 fcae 	bl	20878 <_dtoa_r>
   1ff1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff1e:	2b67      	cmp	r3, #103	; 0x67
   1ff20:	4606      	mov	r6, r0
   1ff22:	f040 81d5 	bne.w	202d0 <_svfprintf_r+0x1290>
   1ff26:	f01b 0f01 	tst.w	fp, #1
   1ff2a:	f000 824e 	beq.w	203ca <_svfprintf_r+0x138a>
   1ff2e:	1974      	adds	r4, r6, r5
   1ff30:	2200      	movs	r2, #0
   1ff32:	2300      	movs	r3, #0
   1ff34:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1ff38:	f7fc f90c 	bl	1c154 <__aeabi_dcmpeq>
   1ff3c:	2800      	cmp	r0, #0
   1ff3e:	f040 8160 	bne.w	20202 <_svfprintf_r+0x11c2>
   1ff42:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ff44:	42a3      	cmp	r3, r4
   1ff46:	d206      	bcs.n	1ff56 <_svfprintf_r+0xf16>
   1ff48:	2130      	movs	r1, #48	; 0x30
   1ff4a:	1c5a      	adds	r2, r3, #1
   1ff4c:	9221      	str	r2, [sp, #132]	; 0x84
   1ff4e:	7019      	strb	r1, [r3, #0]
   1ff50:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ff52:	429c      	cmp	r4, r3
   1ff54:	d8f9      	bhi.n	1ff4a <_svfprintf_r+0xf0a>
   1ff56:	1b9b      	subs	r3, r3, r6
   1ff58:	2f47      	cmp	r7, #71	; 0x47
   1ff5a:	930f      	str	r3, [sp, #60]	; 0x3c
   1ff5c:	f000 80f0 	beq.w	20140 <_svfprintf_r+0x1100>
   1ff60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff62:	2b65      	cmp	r3, #101	; 0x65
   1ff64:	f340 81c3 	ble.w	202ee <_svfprintf_r+0x12ae>
   1ff68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff6a:	2b66      	cmp	r3, #102	; 0x66
   1ff6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ff6e:	930e      	str	r3, [sp, #56]	; 0x38
   1ff70:	f000 81c0 	beq.w	202f4 <_svfprintf_r+0x12b4>
   1ff74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ff78:	4619      	mov	r1, r3
   1ff7a:	4291      	cmp	r1, r2
   1ff7c:	f300 8191 	bgt.w	202a2 <_svfprintf_r+0x1262>
   1ff80:	f01b 0f01 	tst.w	fp, #1
   1ff84:	f040 8223 	bne.w	203ce <_svfprintf_r+0x138e>
   1ff88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1ff8c:	9304      	str	r3, [sp, #16]
   1ff8e:	2367      	movs	r3, #103	; 0x67
   1ff90:	920a      	str	r2, [sp, #40]	; 0x28
   1ff92:	930d      	str	r3, [sp, #52]	; 0x34
   1ff94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ff96:	2b00      	cmp	r3, #0
   1ff98:	f040 80cb 	bne.w	20132 <_svfprintf_r+0x10f2>
   1ff9c:	9306      	str	r3, [sp, #24]
   1ff9e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1ffa2:	f7ff b965 	b.w	1f270 <_svfprintf_r+0x230>
   1ffa6:	f025 0507 	bic.w	r5, r5, #7
   1ffaa:	ed95 7b00 	vldr	d7, [r5]
   1ffae:	f105 0308 	add.w	r3, r5, #8
   1ffb2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ffb6:	930b      	str	r3, [sp, #44]	; 0x2c
   1ffb8:	e416      	b.n	1f7e8 <_svfprintf_r+0x7a8>
   1ffba:	4635      	mov	r5, r6
   1ffbc:	460c      	mov	r4, r1
   1ffbe:	4646      	mov	r6, r8
   1ffc0:	4690      	mov	r8, r2
   1ffc2:	3301      	adds	r3, #1
   1ffc4:	443c      	add	r4, r7
   1ffc6:	2b07      	cmp	r3, #7
   1ffc8:	9425      	str	r4, [sp, #148]	; 0x94
   1ffca:	9324      	str	r3, [sp, #144]	; 0x90
   1ffcc:	e888 00a0 	stmia.w	r8, {r5, r7}
   1ffd0:	f73f aecf 	bgt.w	1fd72 <_svfprintf_r+0xd32>
   1ffd4:	f108 0808 	add.w	r8, r8, #8
   1ffd8:	e6d5      	b.n	1fd86 <_svfprintf_r+0xd46>
   1ffda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ffdc:	6813      	ldr	r3, [r2, #0]
   1ffde:	3204      	adds	r2, #4
   1ffe0:	920b      	str	r2, [sp, #44]	; 0x2c
   1ffe2:	9a05      	ldr	r2, [sp, #20]
   1ffe4:	601a      	str	r2, [r3, #0]
   1ffe6:	f7ff b852 	b.w	1f08e <_svfprintf_r+0x4e>
   1ffea:	aa23      	add	r2, sp, #140	; 0x8c
   1ffec:	9907      	ldr	r1, [sp, #28]
   1ffee:	9808      	ldr	r0, [sp, #32]
   1fff0:	f002 f9d8 	bl	223a4 <__ssprint_r>
   1fff4:	2800      	cmp	r0, #0
   1fff6:	f47f a8f5 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   1fffa:	46c8      	mov	r8, r9
   1fffc:	e488      	b.n	1f910 <_svfprintf_r+0x8d0>
   1fffe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20000:	4a27      	ldr	r2, [pc, #156]	; (200a0 <_svfprintf_r+0x1060>)
   20002:	f8c8 2000 	str.w	r2, [r8]
   20006:	3301      	adds	r3, #1
   20008:	3401      	adds	r4, #1
   2000a:	2201      	movs	r2, #1
   2000c:	2b07      	cmp	r3, #7
   2000e:	9425      	str	r4, [sp, #148]	; 0x94
   20010:	9324      	str	r3, [sp, #144]	; 0x90
   20012:	f8c8 2004 	str.w	r2, [r8, #4]
   20016:	dc54      	bgt.n	200c2 <_svfprintf_r+0x1082>
   20018:	f108 0808 	add.w	r8, r8, #8
   2001c:	b929      	cbnz	r1, 2002a <_svfprintf_r+0xfea>
   2001e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20020:	b91b      	cbnz	r3, 2002a <_svfprintf_r+0xfea>
   20022:	9b03      	ldr	r3, [sp, #12]
   20024:	07d8      	lsls	r0, r3, #31
   20026:	f57f a9f2 	bpl.w	1f40e <_svfprintf_r+0x3ce>
   2002a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2002c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   2002e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   20030:	f8c8 2000 	str.w	r2, [r8]
   20034:	3301      	adds	r3, #1
   20036:	4602      	mov	r2, r0
   20038:	4422      	add	r2, r4
   2003a:	2b07      	cmp	r3, #7
   2003c:	9225      	str	r2, [sp, #148]	; 0x94
   2003e:	f8c8 0004 	str.w	r0, [r8, #4]
   20042:	9324      	str	r3, [sp, #144]	; 0x90
   20044:	f300 8195 	bgt.w	20372 <_svfprintf_r+0x1332>
   20048:	f108 0808 	add.w	r8, r8, #8
   2004c:	2900      	cmp	r1, #0
   2004e:	f2c0 816d 	blt.w	2032c <_svfprintf_r+0x12ec>
   20052:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20054:	f8c8 6000 	str.w	r6, [r8]
   20058:	3301      	adds	r3, #1
   2005a:	188c      	adds	r4, r1, r2
   2005c:	2b07      	cmp	r3, #7
   2005e:	9425      	str	r4, [sp, #148]	; 0x94
   20060:	9324      	str	r3, [sp, #144]	; 0x90
   20062:	f8c8 1004 	str.w	r1, [r8, #4]
   20066:	f77f a9d0 	ble.w	1f40a <_svfprintf_r+0x3ca>
   2006a:	e529      	b.n	1fac0 <_svfprintf_r+0xa80>
   2006c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2006e:	9905      	ldr	r1, [sp, #20]
   20070:	6813      	ldr	r3, [r2, #0]
   20072:	17cd      	asrs	r5, r1, #31
   20074:	4608      	mov	r0, r1
   20076:	3204      	adds	r2, #4
   20078:	4629      	mov	r1, r5
   2007a:	920b      	str	r2, [sp, #44]	; 0x2c
   2007c:	e9c3 0100 	strd	r0, r1, [r3]
   20080:	f7ff b805 	b.w	1f08e <_svfprintf_r+0x4e>
   20084:	aa23      	add	r2, sp, #140	; 0x8c
   20086:	9907      	ldr	r1, [sp, #28]
   20088:	9808      	ldr	r0, [sp, #32]
   2008a:	f002 f98b 	bl	223a4 <__ssprint_r>
   2008e:	2800      	cmp	r0, #0
   20090:	f47f a8a8 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   20094:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20096:	46c8      	mov	r8, r9
   20098:	e453      	b.n	1f942 <_svfprintf_r+0x902>
   2009a:	bf00      	nop
   2009c:	00024e9c 	.word	0x00024e9c
   200a0:	00024e88 	.word	0x00024e88
   200a4:	2140      	movs	r1, #64	; 0x40
   200a6:	9808      	ldr	r0, [sp, #32]
   200a8:	f7fd fe76 	bl	1dd98 <_malloc_r>
   200ac:	9a07      	ldr	r2, [sp, #28]
   200ae:	6010      	str	r0, [r2, #0]
   200b0:	6110      	str	r0, [r2, #16]
   200b2:	2800      	cmp	r0, #0
   200b4:	f000 81f6 	beq.w	204a4 <_svfprintf_r+0x1464>
   200b8:	9a07      	ldr	r2, [sp, #28]
   200ba:	2340      	movs	r3, #64	; 0x40
   200bc:	6153      	str	r3, [r2, #20]
   200be:	f7fe bfd6 	b.w	1f06e <_svfprintf_r+0x2e>
   200c2:	aa23      	add	r2, sp, #140	; 0x8c
   200c4:	9907      	ldr	r1, [sp, #28]
   200c6:	9808      	ldr	r0, [sp, #32]
   200c8:	f002 f96c 	bl	223a4 <__ssprint_r>
   200cc:	2800      	cmp	r0, #0
   200ce:	f47f a889 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   200d2:	991d      	ldr	r1, [sp, #116]	; 0x74
   200d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   200d6:	46c8      	mov	r8, r9
   200d8:	e7a0      	b.n	2001c <_svfprintf_r+0xfdc>
   200da:	9d06      	ldr	r5, [sp, #24]
   200dc:	9808      	ldr	r0, [sp, #32]
   200de:	aa21      	add	r2, sp, #132	; 0x84
   200e0:	ab1e      	add	r3, sp, #120	; 0x78
   200e2:	9201      	str	r2, [sp, #4]
   200e4:	9300      	str	r3, [sp, #0]
   200e6:	462a      	mov	r2, r5
   200e8:	ab1d      	add	r3, sp, #116	; 0x74
   200ea:	2103      	movs	r1, #3
   200ec:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   200f0:	f000 fbc2 	bl	20878 <_dtoa_r>
   200f4:	4606      	mov	r6, r0
   200f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   200f8:	2b46      	cmp	r3, #70	; 0x46
   200fa:	eb06 0405 	add.w	r4, r6, r5
   200fe:	f47f af17 	bne.w	1ff30 <_svfprintf_r+0xef0>
   20102:	7833      	ldrb	r3, [r6, #0]
   20104:	2b30      	cmp	r3, #48	; 0x30
   20106:	f000 817d 	beq.w	20404 <_svfprintf_r+0x13c4>
   2010a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   2010c:	442c      	add	r4, r5
   2010e:	e70f      	b.n	1ff30 <_svfprintf_r+0xef0>
   20110:	9b06      	ldr	r3, [sp, #24]
   20112:	2b00      	cmp	r3, #0
   20114:	bf08      	it	eq
   20116:	2301      	moveq	r3, #1
   20118:	9306      	str	r3, [sp, #24]
   2011a:	e6d9      	b.n	1fed0 <_svfprintf_r+0xe90>
   2011c:	4630      	mov	r0, r6
   2011e:	9406      	str	r4, [sp, #24]
   20120:	f7fe fece 	bl	1eec0 <strlen>
   20124:	950b      	str	r5, [sp, #44]	; 0x2c
   20126:	900a      	str	r0, [sp, #40]	; 0x28
   20128:	f8cd b00c 	str.w	fp, [sp, #12]
   2012c:	4603      	mov	r3, r0
   2012e:	f7ff b9eb 	b.w	1f508 <_svfprintf_r+0x4c8>
   20132:	272d      	movs	r7, #45	; 0x2d
   20134:	2300      	movs	r3, #0
   20136:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2013a:	9306      	str	r3, [sp, #24]
   2013c:	f7ff b899 	b.w	1f272 <_svfprintf_r+0x232>
   20140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20142:	930e      	str	r3, [sp, #56]	; 0x38
   20144:	461a      	mov	r2, r3
   20146:	3303      	adds	r3, #3
   20148:	db04      	blt.n	20154 <_svfprintf_r+0x1114>
   2014a:	9b06      	ldr	r3, [sp, #24]
   2014c:	4619      	mov	r1, r3
   2014e:	4291      	cmp	r1, r2
   20150:	f6bf af10 	bge.w	1ff74 <_svfprintf_r+0xf34>
   20154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20156:	3b02      	subs	r3, #2
   20158:	930d      	str	r3, [sp, #52]	; 0x34
   2015a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2015e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   20162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20164:	3b01      	subs	r3, #1
   20166:	2b00      	cmp	r3, #0
   20168:	931d      	str	r3, [sp, #116]	; 0x74
   2016a:	bfbd      	ittte	lt
   2016c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   2016e:	f1c3 0301 	rsblt	r3, r3, #1
   20172:	222d      	movlt	r2, #45	; 0x2d
   20174:	222b      	movge	r2, #43	; 0x2b
   20176:	2b09      	cmp	r3, #9
   20178:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   2017c:	f340 811d 	ble.w	203ba <_svfprintf_r+0x137a>
   20180:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   20184:	4620      	mov	r0, r4
   20186:	4daf      	ldr	r5, [pc, #700]	; (20444 <_svfprintf_r+0x1404>)
   20188:	e000      	b.n	2018c <_svfprintf_r+0x114c>
   2018a:	4610      	mov	r0, r2
   2018c:	fb85 1203 	smull	r1, r2, r5, r3
   20190:	17d9      	asrs	r1, r3, #31
   20192:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   20196:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2019a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2019e:	3230      	adds	r2, #48	; 0x30
   201a0:	2909      	cmp	r1, #9
   201a2:	f800 2c01 	strb.w	r2, [r0, #-1]
   201a6:	460b      	mov	r3, r1
   201a8:	f100 32ff 	add.w	r2, r0, #4294967295
   201ac:	dced      	bgt.n	2018a <_svfprintf_r+0x114a>
   201ae:	3330      	adds	r3, #48	; 0x30
   201b0:	3802      	subs	r0, #2
   201b2:	b2d9      	uxtb	r1, r3
   201b4:	4284      	cmp	r4, r0
   201b6:	f802 1c01 	strb.w	r1, [r2, #-1]
   201ba:	f240 8170 	bls.w	2049e <_svfprintf_r+0x145e>
   201be:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   201c2:	4613      	mov	r3, r2
   201c4:	e001      	b.n	201ca <_svfprintf_r+0x118a>
   201c6:	f813 1b01 	ldrb.w	r1, [r3], #1
   201ca:	f800 1b01 	strb.w	r1, [r0], #1
   201ce:	42a3      	cmp	r3, r4
   201d0:	d1f9      	bne.n	201c6 <_svfprintf_r+0x1186>
   201d2:	3301      	adds	r3, #1
   201d4:	1a9b      	subs	r3, r3, r2
   201d6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   201da:	4413      	add	r3, r2
   201dc:	aa1f      	add	r2, sp, #124	; 0x7c
   201de:	1a9b      	subs	r3, r3, r2
   201e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   201e2:	9315      	str	r3, [sp, #84]	; 0x54
   201e4:	2a01      	cmp	r2, #1
   201e6:	4413      	add	r3, r2
   201e8:	930a      	str	r3, [sp, #40]	; 0x28
   201ea:	f340 8120 	ble.w	2042e <_svfprintf_r+0x13ee>
   201ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   201f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   201f2:	4413      	add	r3, r2
   201f4:	930a      	str	r3, [sp, #40]	; 0x28
   201f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   201fa:	9304      	str	r3, [sp, #16]
   201fc:	2300      	movs	r3, #0
   201fe:	930e      	str	r3, [sp, #56]	; 0x38
   20200:	e6c8      	b.n	1ff94 <_svfprintf_r+0xf54>
   20202:	4623      	mov	r3, r4
   20204:	e6a7      	b.n	1ff56 <_svfprintf_r+0xf16>
   20206:	aa23      	add	r2, sp, #140	; 0x8c
   20208:	9907      	ldr	r1, [sp, #28]
   2020a:	9808      	ldr	r0, [sp, #32]
   2020c:	f002 f8ca 	bl	223a4 <__ssprint_r>
   20210:	2800      	cmp	r0, #0
   20212:	f47e afe7 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   20216:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20218:	46c8      	mov	r8, r9
   2021a:	e4d5      	b.n	1fbc8 <_svfprintf_r+0xb88>
   2021c:	aa23      	add	r2, sp, #140	; 0x8c
   2021e:	9907      	ldr	r1, [sp, #28]
   20220:	9808      	ldr	r0, [sp, #32]
   20222:	f002 f8bf 	bl	223a4 <__ssprint_r>
   20226:	2800      	cmp	r0, #0
   20228:	f47e afdc 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   2022c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2022e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20230:	46c8      	mov	r8, r9
   20232:	e5af      	b.n	1fd94 <_svfprintf_r+0xd54>
   20234:	aa23      	add	r2, sp, #140	; 0x8c
   20236:	9907      	ldr	r1, [sp, #28]
   20238:	9808      	ldr	r0, [sp, #32]
   2023a:	f002 f8b3 	bl	223a4 <__ssprint_r>
   2023e:	2800      	cmp	r0, #0
   20240:	f47e afd0 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   20244:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20248:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2024a:	1a9a      	subs	r2, r3, r2
   2024c:	46c8      	mov	r8, r9
   2024e:	e5b9      	b.n	1fdc4 <_svfprintf_r+0xd84>
   20250:	9b06      	ldr	r3, [sp, #24]
   20252:	960e      	str	r6, [sp, #56]	; 0x38
   20254:	2b06      	cmp	r3, #6
   20256:	bf28      	it	cs
   20258:	2306      	movcs	r3, #6
   2025a:	9606      	str	r6, [sp, #24]
   2025c:	4637      	mov	r7, r6
   2025e:	9304      	str	r3, [sp, #16]
   20260:	950b      	str	r5, [sp, #44]	; 0x2c
   20262:	f8cd b00c 	str.w	fp, [sp, #12]
   20266:	930a      	str	r3, [sp, #40]	; 0x28
   20268:	4e77      	ldr	r6, [pc, #476]	; (20448 <_svfprintf_r+0x1408>)
   2026a:	f7ff b801 	b.w	1f270 <_svfprintf_r+0x230>
   2026e:	2306      	movs	r3, #6
   20270:	9306      	str	r3, [sp, #24]
   20272:	e62d      	b.n	1fed0 <_svfprintf_r+0xe90>
   20274:	9c06      	ldr	r4, [sp, #24]
   20276:	9808      	ldr	r0, [sp, #32]
   20278:	aa21      	add	r2, sp, #132	; 0x84
   2027a:	ab1e      	add	r3, sp, #120	; 0x78
   2027c:	9201      	str	r2, [sp, #4]
   2027e:	9300      	str	r3, [sp, #0]
   20280:	4622      	mov	r2, r4
   20282:	ab1d      	add	r3, sp, #116	; 0x74
   20284:	2103      	movs	r1, #3
   20286:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2028a:	f000 faf5 	bl	20878 <_dtoa_r>
   2028e:	4623      	mov	r3, r4
   20290:	4606      	mov	r6, r0
   20292:	1904      	adds	r4, r0, r4
   20294:	461d      	mov	r5, r3
   20296:	e734      	b.n	20102 <_svfprintf_r+0x10c2>
   20298:	272d      	movs	r7, #45	; 0x2d
   2029a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2029e:	f7ff baca 	b.w	1f836 <_svfprintf_r+0x7f6>
   202a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   202a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   202a6:	4413      	add	r3, r2
   202a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   202aa:	930a      	str	r3, [sp, #40]	; 0x28
   202ac:	2a00      	cmp	r2, #0
   202ae:	f340 80b7 	ble.w	20420 <_svfprintf_r+0x13e0>
   202b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   202b6:	9304      	str	r3, [sp, #16]
   202b8:	2367      	movs	r3, #103	; 0x67
   202ba:	930d      	str	r3, [sp, #52]	; 0x34
   202bc:	e66a      	b.n	1ff94 <_svfprintf_r+0xf54>
   202be:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   202c2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   202c6:	9319      	str	r3, [sp, #100]	; 0x64
   202c8:	232d      	movs	r3, #45	; 0x2d
   202ca:	9118      	str	r1, [sp, #96]	; 0x60
   202cc:	930c      	str	r3, [sp, #48]	; 0x30
   202ce:	e60c      	b.n	1feea <_svfprintf_r+0xeaa>
   202d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   202d2:	2b47      	cmp	r3, #71	; 0x47
   202d4:	f47f ae2b 	bne.w	1ff2e <_svfprintf_r+0xeee>
   202d8:	f01b 0f01 	tst.w	fp, #1
   202dc:	f47f af0b 	bne.w	200f6 <_svfprintf_r+0x10b6>
   202e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   202e2:	2f47      	cmp	r7, #71	; 0x47
   202e4:	eba3 0306 	sub.w	r3, r3, r6
   202e8:	930f      	str	r3, [sp, #60]	; 0x3c
   202ea:	f43f af29 	beq.w	20140 <_svfprintf_r+0x1100>
   202ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   202f0:	930e      	str	r3, [sp, #56]	; 0x38
   202f2:	e732      	b.n	2015a <_svfprintf_r+0x111a>
   202f4:	2b00      	cmp	r3, #0
   202f6:	f340 80af 	ble.w	20458 <_svfprintf_r+0x1418>
   202fa:	9a06      	ldr	r2, [sp, #24]
   202fc:	2a00      	cmp	r2, #0
   202fe:	d16b      	bne.n	203d8 <_svfprintf_r+0x1398>
   20300:	f01b 0f01 	tst.w	fp, #1
   20304:	d168      	bne.n	203d8 <_svfprintf_r+0x1398>
   20306:	9304      	str	r3, [sp, #16]
   20308:	930a      	str	r3, [sp, #40]	; 0x28
   2030a:	e643      	b.n	1ff94 <_svfprintf_r+0xf54>
   2030c:	9b06      	ldr	r3, [sp, #24]
   2030e:	9304      	str	r3, [sp, #16]
   20310:	930a      	str	r3, [sp, #40]	; 0x28
   20312:	9006      	str	r0, [sp, #24]
   20314:	950b      	str	r5, [sp, #44]	; 0x2c
   20316:	f8cd b00c 	str.w	fp, [sp, #12]
   2031a:	900e      	str	r0, [sp, #56]	; 0x38
   2031c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20320:	f7fe bfa6 	b.w	1f270 <_svfprintf_r+0x230>
   20324:	2000      	movs	r0, #0
   20326:	9006      	str	r0, [sp, #24]
   20328:	f7fe bee4 	b.w	1f0f4 <_svfprintf_r+0xb4>
   2032c:	424f      	negs	r7, r1
   2032e:	3110      	adds	r1, #16
   20330:	4d46      	ldr	r5, [pc, #280]	; (2044c <_svfprintf_r+0x140c>)
   20332:	da2b      	bge.n	2038c <_svfprintf_r+0x134c>
   20334:	2410      	movs	r4, #16
   20336:	f8dd b020 	ldr.w	fp, [sp, #32]
   2033a:	e004      	b.n	20346 <_svfprintf_r+0x1306>
   2033c:	f108 0808 	add.w	r8, r8, #8
   20340:	3f10      	subs	r7, #16
   20342:	2f10      	cmp	r7, #16
   20344:	dd22      	ble.n	2038c <_svfprintf_r+0x134c>
   20346:	3301      	adds	r3, #1
   20348:	3210      	adds	r2, #16
   2034a:	2b07      	cmp	r3, #7
   2034c:	9225      	str	r2, [sp, #148]	; 0x94
   2034e:	9324      	str	r3, [sp, #144]	; 0x90
   20350:	f8c8 5000 	str.w	r5, [r8]
   20354:	f8c8 4004 	str.w	r4, [r8, #4]
   20358:	ddf0      	ble.n	2033c <_svfprintf_r+0x12fc>
   2035a:	aa23      	add	r2, sp, #140	; 0x8c
   2035c:	9907      	ldr	r1, [sp, #28]
   2035e:	4658      	mov	r0, fp
   20360:	f002 f820 	bl	223a4 <__ssprint_r>
   20364:	2800      	cmp	r0, #0
   20366:	f47e af3d 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   2036a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2036c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2036e:	46c8      	mov	r8, r9
   20370:	e7e6      	b.n	20340 <_svfprintf_r+0x1300>
   20372:	aa23      	add	r2, sp, #140	; 0x8c
   20374:	9907      	ldr	r1, [sp, #28]
   20376:	9808      	ldr	r0, [sp, #32]
   20378:	f002 f814 	bl	223a4 <__ssprint_r>
   2037c:	2800      	cmp	r0, #0
   2037e:	f47e af31 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   20382:	991d      	ldr	r1, [sp, #116]	; 0x74
   20384:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20386:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20388:	46c8      	mov	r8, r9
   2038a:	e65f      	b.n	2004c <_svfprintf_r+0x100c>
   2038c:	3301      	adds	r3, #1
   2038e:	443a      	add	r2, r7
   20390:	2b07      	cmp	r3, #7
   20392:	e888 00a0 	stmia.w	r8, {r5, r7}
   20396:	9225      	str	r2, [sp, #148]	; 0x94
   20398:	9324      	str	r3, [sp, #144]	; 0x90
   2039a:	f108 0808 	add.w	r8, r8, #8
   2039e:	f77f ae58 	ble.w	20052 <_svfprintf_r+0x1012>
   203a2:	aa23      	add	r2, sp, #140	; 0x8c
   203a4:	9907      	ldr	r1, [sp, #28]
   203a6:	9808      	ldr	r0, [sp, #32]
   203a8:	f001 fffc 	bl	223a4 <__ssprint_r>
   203ac:	2800      	cmp	r0, #0
   203ae:	f47e af19 	bne.w	1f1e4 <_svfprintf_r+0x1a4>
   203b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   203b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   203b6:	46c8      	mov	r8, r9
   203b8:	e64b      	b.n	20052 <_svfprintf_r+0x1012>
   203ba:	3330      	adds	r3, #48	; 0x30
   203bc:	2230      	movs	r2, #48	; 0x30
   203be:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   203c2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   203c6:	ab20      	add	r3, sp, #128	; 0x80
   203c8:	e708      	b.n	201dc <_svfprintf_r+0x119c>
   203ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
   203cc:	e5c3      	b.n	1ff56 <_svfprintf_r+0xf16>
   203ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   203d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   203d2:	4413      	add	r3, r2
   203d4:	930a      	str	r3, [sp, #40]	; 0x28
   203d6:	e76c      	b.n	202b2 <_svfprintf_r+0x1272>
   203d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   203da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   203dc:	4413      	add	r3, r2
   203de:	9a06      	ldr	r2, [sp, #24]
   203e0:	441a      	add	r2, r3
   203e2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   203e6:	920a      	str	r2, [sp, #40]	; 0x28
   203e8:	9304      	str	r3, [sp, #16]
   203ea:	e5d3      	b.n	1ff94 <_svfprintf_r+0xf54>
   203ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   203ee:	4e18      	ldr	r6, [pc, #96]	; (20450 <_svfprintf_r+0x1410>)
   203f0:	2b00      	cmp	r3, #0
   203f2:	bfb6      	itet	lt
   203f4:	272d      	movlt	r7, #45	; 0x2d
   203f6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   203fa:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   203fe:	4b15      	ldr	r3, [pc, #84]	; (20454 <_svfprintf_r+0x1414>)
   20400:	f7ff ba1b 	b.w	1f83a <_svfprintf_r+0x7fa>
   20404:	2200      	movs	r2, #0
   20406:	2300      	movs	r3, #0
   20408:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2040c:	f7fb fea2 	bl	1c154 <__aeabi_dcmpeq>
   20410:	2800      	cmp	r0, #0
   20412:	f47f ae7a 	bne.w	2010a <_svfprintf_r+0x10ca>
   20416:	f1c5 0501 	rsb	r5, r5, #1
   2041a:	951d      	str	r5, [sp, #116]	; 0x74
   2041c:	442c      	add	r4, r5
   2041e:	e587      	b.n	1ff30 <_svfprintf_r+0xef0>
   20420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20424:	f1c3 0301 	rsb	r3, r3, #1
   20428:	441a      	add	r2, r3
   2042a:	4613      	mov	r3, r2
   2042c:	e7d2      	b.n	203d4 <_svfprintf_r+0x1394>
   2042e:	f01b 0301 	ands.w	r3, fp, #1
   20432:	930e      	str	r3, [sp, #56]	; 0x38
   20434:	f47f aedb 	bne.w	201ee <_svfprintf_r+0x11ae>
   20438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2043a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2043e:	9304      	str	r3, [sp, #16]
   20440:	e5a8      	b.n	1ff94 <_svfprintf_r+0xf54>
   20442:	bf00      	nop
   20444:	66666667 	.word	0x66666667
   20448:	00024e80 	.word	0x00024e80
   2044c:	00024e9c 	.word	0x00024e9c
   20450:	00024e54 	.word	0x00024e54
   20454:	00024e50 	.word	0x00024e50
   20458:	9b06      	ldr	r3, [sp, #24]
   2045a:	b913      	cbnz	r3, 20462 <_svfprintf_r+0x1422>
   2045c:	f01b 0f01 	tst.w	fp, #1
   20460:	d002      	beq.n	20468 <_svfprintf_r+0x1428>
   20462:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20464:	3301      	adds	r3, #1
   20466:	e7ba      	b.n	203de <_svfprintf_r+0x139e>
   20468:	2301      	movs	r3, #1
   2046a:	e74c      	b.n	20306 <_svfprintf_r+0x12c6>
   2046c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2046e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   20472:	6828      	ldr	r0, [r5, #0]
   20474:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   20478:	9006      	str	r0, [sp, #24]
   2047a:	4628      	mov	r0, r5
   2047c:	3004      	adds	r0, #4
   2047e:	46a2      	mov	sl, r4
   20480:	900b      	str	r0, [sp, #44]	; 0x2c
   20482:	f7fe be35 	b.w	1f0f0 <_svfprintf_r+0xb0>
   20486:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2048a:	f7ff b852 	b.w	1f532 <_svfprintf_r+0x4f2>
   2048e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20492:	f7ff b8de 	b.w	1f652 <_svfprintf_r+0x612>
   20496:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2049a:	f7ff ba07 	b.w	1f8ac <_svfprintf_r+0x86c>
   2049e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   204a2:	e69b      	b.n	201dc <_svfprintf_r+0x119c>
   204a4:	9a08      	ldr	r2, [sp, #32]
   204a6:	230c      	movs	r3, #12
   204a8:	6013      	str	r3, [r2, #0]
   204aa:	f04f 33ff 	mov.w	r3, #4294967295
   204ae:	9305      	str	r3, [sp, #20]
   204b0:	f7fe bea1 	b.w	1f1f6 <_svfprintf_r+0x1b6>
   204b4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   204b8:	f7ff b986 	b.w	1f7c8 <_svfprintf_r+0x788>
   204bc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   204c0:	f7ff b962 	b.w	1f788 <_svfprintf_r+0x748>
   204c4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   204c8:	f7ff b945 	b.w	1f756 <_svfprintf_r+0x716>
   204cc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   204d0:	f7ff b8fe 	b.w	1f6d0 <_svfprintf_r+0x690>

000204d4 <write>:
   204d4:	b410      	push	{r4}
   204d6:	4c04      	ldr	r4, [pc, #16]	; (204e8 <write+0x14>)
   204d8:	4613      	mov	r3, r2
   204da:	460a      	mov	r2, r1
   204dc:	4601      	mov	r1, r0
   204de:	6820      	ldr	r0, [r4, #0]
   204e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   204e4:	f000 b8a8 	b.w	20638 <_write_r>
   204e8:	20000100 	.word	0x20000100

000204ec <__utoa>:
   204ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   204ee:	f8df e078 	ldr.w	lr, [pc, #120]	; 20568 <__utoa+0x7c>
   204f2:	4616      	mov	r6, r2
   204f4:	4604      	mov	r4, r0
   204f6:	460f      	mov	r7, r1
   204f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   204fc:	b08b      	sub	sp, #44	; 0x2c
   204fe:	466d      	mov	r5, sp
   20500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20508:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2050c:	1eb3      	subs	r3, r6, #2
   2050e:	f845 0b04 	str.w	r0, [r5], #4
   20512:	2b22      	cmp	r3, #34	; 0x22
   20514:	7029      	strb	r1, [r5, #0]
   20516:	d822      	bhi.n	2055e <__utoa+0x72>
   20518:	1e7d      	subs	r5, r7, #1
   2051a:	4628      	mov	r0, r5
   2051c:	2200      	movs	r2, #0
   2051e:	e000      	b.n	20522 <__utoa+0x36>
   20520:	461a      	mov	r2, r3
   20522:	fbb4 f1f6 	udiv	r1, r4, r6
   20526:	ab0a      	add	r3, sp, #40	; 0x28
   20528:	fb06 4411 	mls	r4, r6, r1, r4
   2052c:	4423      	add	r3, r4
   2052e:	460c      	mov	r4, r1
   20530:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   20534:	f800 3f01 	strb.w	r3, [r0, #1]!
   20538:	1c53      	adds	r3, r2, #1
   2053a:	2900      	cmp	r1, #0
   2053c:	d1f0      	bne.n	20520 <__utoa+0x34>
   2053e:	54f9      	strb	r1, [r7, r3]
   20540:	18bb      	adds	r3, r7, r2
   20542:	b14a      	cbz	r2, 20558 <__utoa+0x6c>
   20544:	7819      	ldrb	r1, [r3, #0]
   20546:	7868      	ldrb	r0, [r5, #1]
   20548:	f805 1f01 	strb.w	r1, [r5, #1]!
   2054c:	3401      	adds	r4, #1
   2054e:	1b11      	subs	r1, r2, r4
   20550:	428c      	cmp	r4, r1
   20552:	f803 0901 	strb.w	r0, [r3], #-1
   20556:	dbf5      	blt.n	20544 <__utoa+0x58>
   20558:	4638      	mov	r0, r7
   2055a:	b00b      	add	sp, #44	; 0x2c
   2055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2055e:	2000      	movs	r0, #0
   20560:	7038      	strb	r0, [r7, #0]
   20562:	b00b      	add	sp, #44	; 0x2c
   20564:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20566:	bf00      	nop
   20568:	00024eac 	.word	0x00024eac

0002056c <__swbuf_r>:
   2056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2056e:	460d      	mov	r5, r1
   20570:	4614      	mov	r4, r2
   20572:	4606      	mov	r6, r0
   20574:	b110      	cbz	r0, 2057c <__swbuf_r+0x10>
   20576:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20578:	2b00      	cmp	r3, #0
   2057a:	d04b      	beq.n	20614 <__swbuf_r+0xa8>
   2057c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20580:	69a3      	ldr	r3, [r4, #24]
   20582:	60a3      	str	r3, [r4, #8]
   20584:	b291      	uxth	r1, r2
   20586:	0708      	lsls	r0, r1, #28
   20588:	d539      	bpl.n	205fe <__swbuf_r+0x92>
   2058a:	6923      	ldr	r3, [r4, #16]
   2058c:	2b00      	cmp	r3, #0
   2058e:	d036      	beq.n	205fe <__swbuf_r+0x92>
   20590:	b2ed      	uxtb	r5, r5
   20592:	0489      	lsls	r1, r1, #18
   20594:	462f      	mov	r7, r5
   20596:	d515      	bpl.n	205c4 <__swbuf_r+0x58>
   20598:	6822      	ldr	r2, [r4, #0]
   2059a:	6961      	ldr	r1, [r4, #20]
   2059c:	1ad3      	subs	r3, r2, r3
   2059e:	428b      	cmp	r3, r1
   205a0:	da1c      	bge.n	205dc <__swbuf_r+0x70>
   205a2:	3301      	adds	r3, #1
   205a4:	68a1      	ldr	r1, [r4, #8]
   205a6:	1c50      	adds	r0, r2, #1
   205a8:	3901      	subs	r1, #1
   205aa:	60a1      	str	r1, [r4, #8]
   205ac:	6020      	str	r0, [r4, #0]
   205ae:	7015      	strb	r5, [r2, #0]
   205b0:	6962      	ldr	r2, [r4, #20]
   205b2:	429a      	cmp	r2, r3
   205b4:	d01a      	beq.n	205ec <__swbuf_r+0x80>
   205b6:	89a3      	ldrh	r3, [r4, #12]
   205b8:	07db      	lsls	r3, r3, #31
   205ba:	d501      	bpl.n	205c0 <__swbuf_r+0x54>
   205bc:	2d0a      	cmp	r5, #10
   205be:	d015      	beq.n	205ec <__swbuf_r+0x80>
   205c0:	4638      	mov	r0, r7
   205c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   205c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   205ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   205ce:	81a2      	strh	r2, [r4, #12]
   205d0:	6822      	ldr	r2, [r4, #0]
   205d2:	6661      	str	r1, [r4, #100]	; 0x64
   205d4:	6961      	ldr	r1, [r4, #20]
   205d6:	1ad3      	subs	r3, r2, r3
   205d8:	428b      	cmp	r3, r1
   205da:	dbe2      	blt.n	205a2 <__swbuf_r+0x36>
   205dc:	4621      	mov	r1, r4
   205de:	4630      	mov	r0, r6
   205e0:	f001 f910 	bl	21804 <_fflush_r>
   205e4:	b940      	cbnz	r0, 205f8 <__swbuf_r+0x8c>
   205e6:	6822      	ldr	r2, [r4, #0]
   205e8:	2301      	movs	r3, #1
   205ea:	e7db      	b.n	205a4 <__swbuf_r+0x38>
   205ec:	4621      	mov	r1, r4
   205ee:	4630      	mov	r0, r6
   205f0:	f001 f908 	bl	21804 <_fflush_r>
   205f4:	2800      	cmp	r0, #0
   205f6:	d0e3      	beq.n	205c0 <__swbuf_r+0x54>
   205f8:	f04f 37ff 	mov.w	r7, #4294967295
   205fc:	e7e0      	b.n	205c0 <__swbuf_r+0x54>
   205fe:	4621      	mov	r1, r4
   20600:	4630      	mov	r0, r6
   20602:	f000 f82f 	bl	20664 <__swsetup_r>
   20606:	2800      	cmp	r0, #0
   20608:	d1f6      	bne.n	205f8 <__swbuf_r+0x8c>
   2060a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2060e:	6923      	ldr	r3, [r4, #16]
   20610:	b291      	uxth	r1, r2
   20612:	e7bd      	b.n	20590 <__swbuf_r+0x24>
   20614:	f001 f94e 	bl	218b4 <__sinit>
   20618:	e7b0      	b.n	2057c <__swbuf_r+0x10>
   2061a:	bf00      	nop

0002061c <__ascii_wctomb>:
   2061c:	b121      	cbz	r1, 20628 <__ascii_wctomb+0xc>
   2061e:	2aff      	cmp	r2, #255	; 0xff
   20620:	d804      	bhi.n	2062c <__ascii_wctomb+0x10>
   20622:	700a      	strb	r2, [r1, #0]
   20624:	2001      	movs	r0, #1
   20626:	4770      	bx	lr
   20628:	4608      	mov	r0, r1
   2062a:	4770      	bx	lr
   2062c:	238a      	movs	r3, #138	; 0x8a
   2062e:	6003      	str	r3, [r0, #0]
   20630:	f04f 30ff 	mov.w	r0, #4294967295
   20634:	4770      	bx	lr
   20636:	bf00      	nop

00020638 <_write_r>:
   20638:	b570      	push	{r4, r5, r6, lr}
   2063a:	460d      	mov	r5, r1
   2063c:	4c08      	ldr	r4, [pc, #32]	; (20660 <_write_r+0x28>)
   2063e:	4611      	mov	r1, r2
   20640:	4606      	mov	r6, r0
   20642:	461a      	mov	r2, r3
   20644:	4628      	mov	r0, r5
   20646:	2300      	movs	r3, #0
   20648:	6023      	str	r3, [r4, #0]
   2064a:	f002 f935 	bl	228b8 <_write>
   2064e:	1c43      	adds	r3, r0, #1
   20650:	d000      	beq.n	20654 <_write_r+0x1c>
   20652:	bd70      	pop	{r4, r5, r6, pc}
   20654:	6823      	ldr	r3, [r4, #0]
   20656:	2b00      	cmp	r3, #0
   20658:	d0fb      	beq.n	20652 <_write_r+0x1a>
   2065a:	6033      	str	r3, [r6, #0]
   2065c:	bd70      	pop	{r4, r5, r6, pc}
   2065e:	bf00      	nop
   20660:	200023ac 	.word	0x200023ac

00020664 <__swsetup_r>:
   20664:	b538      	push	{r3, r4, r5, lr}
   20666:	4b30      	ldr	r3, [pc, #192]	; (20728 <__swsetup_r+0xc4>)
   20668:	681b      	ldr	r3, [r3, #0]
   2066a:	4605      	mov	r5, r0
   2066c:	460c      	mov	r4, r1
   2066e:	b113      	cbz	r3, 20676 <__swsetup_r+0x12>
   20670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20672:	2a00      	cmp	r2, #0
   20674:	d038      	beq.n	206e8 <__swsetup_r+0x84>
   20676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2067a:	b293      	uxth	r3, r2
   2067c:	0718      	lsls	r0, r3, #28
   2067e:	d50c      	bpl.n	2069a <__swsetup_r+0x36>
   20680:	6920      	ldr	r0, [r4, #16]
   20682:	b1a8      	cbz	r0, 206b0 <__swsetup_r+0x4c>
   20684:	f013 0201 	ands.w	r2, r3, #1
   20688:	d01e      	beq.n	206c8 <__swsetup_r+0x64>
   2068a:	6963      	ldr	r3, [r4, #20]
   2068c:	2200      	movs	r2, #0
   2068e:	425b      	negs	r3, r3
   20690:	61a3      	str	r3, [r4, #24]
   20692:	60a2      	str	r2, [r4, #8]
   20694:	b1f0      	cbz	r0, 206d4 <__swsetup_r+0x70>
   20696:	2000      	movs	r0, #0
   20698:	bd38      	pop	{r3, r4, r5, pc}
   2069a:	06d9      	lsls	r1, r3, #27
   2069c:	d53c      	bpl.n	20718 <__swsetup_r+0xb4>
   2069e:	0758      	lsls	r0, r3, #29
   206a0:	d426      	bmi.n	206f0 <__swsetup_r+0x8c>
   206a2:	6920      	ldr	r0, [r4, #16]
   206a4:	f042 0308 	orr.w	r3, r2, #8
   206a8:	81a3      	strh	r3, [r4, #12]
   206aa:	b29b      	uxth	r3, r3
   206ac:	2800      	cmp	r0, #0
   206ae:	d1e9      	bne.n	20684 <__swsetup_r+0x20>
   206b0:	f403 7220 	and.w	r2, r3, #640	; 0x280
   206b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   206b8:	d0e4      	beq.n	20684 <__swsetup_r+0x20>
   206ba:	4628      	mov	r0, r5
   206bc:	4621      	mov	r1, r4
   206be:	f001 fae7 	bl	21c90 <__smakebuf_r>
   206c2:	89a3      	ldrh	r3, [r4, #12]
   206c4:	6920      	ldr	r0, [r4, #16]
   206c6:	e7dd      	b.n	20684 <__swsetup_r+0x20>
   206c8:	0799      	lsls	r1, r3, #30
   206ca:	bf58      	it	pl
   206cc:	6962      	ldrpl	r2, [r4, #20]
   206ce:	60a2      	str	r2, [r4, #8]
   206d0:	2800      	cmp	r0, #0
   206d2:	d1e0      	bne.n	20696 <__swsetup_r+0x32>
   206d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   206d8:	061a      	lsls	r2, r3, #24
   206da:	d5dd      	bpl.n	20698 <__swsetup_r+0x34>
   206dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   206e0:	81a3      	strh	r3, [r4, #12]
   206e2:	f04f 30ff 	mov.w	r0, #4294967295
   206e6:	bd38      	pop	{r3, r4, r5, pc}
   206e8:	4618      	mov	r0, r3
   206ea:	f001 f8e3 	bl	218b4 <__sinit>
   206ee:	e7c2      	b.n	20676 <__swsetup_r+0x12>
   206f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   206f2:	b151      	cbz	r1, 2070a <__swsetup_r+0xa6>
   206f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   206f8:	4299      	cmp	r1, r3
   206fa:	d004      	beq.n	20706 <__swsetup_r+0xa2>
   206fc:	4628      	mov	r0, r5
   206fe:	f001 f97b 	bl	219f8 <_free_r>
   20702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20706:	2300      	movs	r3, #0
   20708:	6323      	str	r3, [r4, #48]	; 0x30
   2070a:	2300      	movs	r3, #0
   2070c:	6920      	ldr	r0, [r4, #16]
   2070e:	6063      	str	r3, [r4, #4]
   20710:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   20714:	6020      	str	r0, [r4, #0]
   20716:	e7c5      	b.n	206a4 <__swsetup_r+0x40>
   20718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2071c:	2309      	movs	r3, #9
   2071e:	602b      	str	r3, [r5, #0]
   20720:	f04f 30ff 	mov.w	r0, #4294967295
   20724:	81a2      	strh	r2, [r4, #12]
   20726:	bd38      	pop	{r3, r4, r5, pc}
   20728:	20000100 	.word	0x20000100

0002072c <register_fini>:
   2072c:	4b02      	ldr	r3, [pc, #8]	; (20738 <register_fini+0xc>)
   2072e:	b113      	cbz	r3, 20736 <register_fini+0xa>
   20730:	4802      	ldr	r0, [pc, #8]	; (2073c <register_fini+0x10>)
   20732:	f000 b805 	b.w	20740 <atexit>
   20736:	4770      	bx	lr
   20738:	00000000 	.word	0x00000000
   2073c:	00021925 	.word	0x00021925

00020740 <atexit>:
   20740:	2300      	movs	r3, #0
   20742:	4601      	mov	r1, r0
   20744:	461a      	mov	r2, r3
   20746:	4618      	mov	r0, r3
   20748:	f001 beaa 	b.w	224a0 <__register_exitproc>

0002074c <quorem>:
   2074c:	6902      	ldr	r2, [r0, #16]
   2074e:	690b      	ldr	r3, [r1, #16]
   20750:	4293      	cmp	r3, r2
   20752:	f300 808d 	bgt.w	20870 <quorem+0x124>
   20756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2075a:	f103 38ff 	add.w	r8, r3, #4294967295
   2075e:	f101 0714 	add.w	r7, r1, #20
   20762:	f100 0b14 	add.w	fp, r0, #20
   20766:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2076a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2076e:	ea4f 0488 	mov.w	r4, r8, lsl #2
   20772:	b083      	sub	sp, #12
   20774:	3201      	adds	r2, #1
   20776:	fbb3 f9f2 	udiv	r9, r3, r2
   2077a:	eb0b 0304 	add.w	r3, fp, r4
   2077e:	9400      	str	r4, [sp, #0]
   20780:	eb07 0a04 	add.w	sl, r7, r4
   20784:	9301      	str	r3, [sp, #4]
   20786:	f1b9 0f00 	cmp.w	r9, #0
   2078a:	d039      	beq.n	20800 <quorem+0xb4>
   2078c:	2500      	movs	r5, #0
   2078e:	462e      	mov	r6, r5
   20790:	46bc      	mov	ip, r7
   20792:	46de      	mov	lr, fp
   20794:	f85c 4b04 	ldr.w	r4, [ip], #4
   20798:	f8de 3000 	ldr.w	r3, [lr]
   2079c:	b2a2      	uxth	r2, r4
   2079e:	fb09 5502 	mla	r5, r9, r2, r5
   207a2:	0c22      	lsrs	r2, r4, #16
   207a4:	0c2c      	lsrs	r4, r5, #16
   207a6:	fb09 4202 	mla	r2, r9, r2, r4
   207aa:	b2ad      	uxth	r5, r5
   207ac:	1b75      	subs	r5, r6, r5
   207ae:	b296      	uxth	r6, r2
   207b0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   207b4:	fa15 f383 	uxtah	r3, r5, r3
   207b8:	eb06 4623 	add.w	r6, r6, r3, asr #16
   207bc:	b29b      	uxth	r3, r3
   207be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   207c2:	45e2      	cmp	sl, ip
   207c4:	ea4f 4512 	mov.w	r5, r2, lsr #16
   207c8:	f84e 3b04 	str.w	r3, [lr], #4
   207cc:	ea4f 4626 	mov.w	r6, r6, asr #16
   207d0:	d2e0      	bcs.n	20794 <quorem+0x48>
   207d2:	9b00      	ldr	r3, [sp, #0]
   207d4:	f85b 3003 	ldr.w	r3, [fp, r3]
   207d8:	b993      	cbnz	r3, 20800 <quorem+0xb4>
   207da:	9c01      	ldr	r4, [sp, #4]
   207dc:	1f23      	subs	r3, r4, #4
   207de:	459b      	cmp	fp, r3
   207e0:	d20c      	bcs.n	207fc <quorem+0xb0>
   207e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   207e6:	b94b      	cbnz	r3, 207fc <quorem+0xb0>
   207e8:	f1a4 0308 	sub.w	r3, r4, #8
   207ec:	e002      	b.n	207f4 <quorem+0xa8>
   207ee:	681a      	ldr	r2, [r3, #0]
   207f0:	3b04      	subs	r3, #4
   207f2:	b91a      	cbnz	r2, 207fc <quorem+0xb0>
   207f4:	459b      	cmp	fp, r3
   207f6:	f108 38ff 	add.w	r8, r8, #4294967295
   207fa:	d3f8      	bcc.n	207ee <quorem+0xa2>
   207fc:	f8c0 8010 	str.w	r8, [r0, #16]
   20800:	4604      	mov	r4, r0
   20802:	f001 fc8d 	bl	22120 <__mcmp>
   20806:	2800      	cmp	r0, #0
   20808:	db2e      	blt.n	20868 <quorem+0x11c>
   2080a:	f109 0901 	add.w	r9, r9, #1
   2080e:	465d      	mov	r5, fp
   20810:	2300      	movs	r3, #0
   20812:	f857 1b04 	ldr.w	r1, [r7], #4
   20816:	6828      	ldr	r0, [r5, #0]
   20818:	b28a      	uxth	r2, r1
   2081a:	1a9a      	subs	r2, r3, r2
   2081c:	0c0b      	lsrs	r3, r1, #16
   2081e:	fa12 f280 	uxtah	r2, r2, r0
   20822:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   20826:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2082a:	b292      	uxth	r2, r2
   2082c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   20830:	45ba      	cmp	sl, r7
   20832:	f845 2b04 	str.w	r2, [r5], #4
   20836:	ea4f 4323 	mov.w	r3, r3, asr #16
   2083a:	d2ea      	bcs.n	20812 <quorem+0xc6>
   2083c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20840:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20844:	b982      	cbnz	r2, 20868 <quorem+0x11c>
   20846:	1f1a      	subs	r2, r3, #4
   20848:	4593      	cmp	fp, r2
   2084a:	d20b      	bcs.n	20864 <quorem+0x118>
   2084c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20850:	b942      	cbnz	r2, 20864 <quorem+0x118>
   20852:	3b08      	subs	r3, #8
   20854:	e002      	b.n	2085c <quorem+0x110>
   20856:	681a      	ldr	r2, [r3, #0]
   20858:	3b04      	subs	r3, #4
   2085a:	b91a      	cbnz	r2, 20864 <quorem+0x118>
   2085c:	459b      	cmp	fp, r3
   2085e:	f108 38ff 	add.w	r8, r8, #4294967295
   20862:	d3f8      	bcc.n	20856 <quorem+0x10a>
   20864:	f8c4 8010 	str.w	r8, [r4, #16]
   20868:	4648      	mov	r0, r9
   2086a:	b003      	add	sp, #12
   2086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20870:	2000      	movs	r0, #0
   20872:	4770      	bx	lr
   20874:	0000      	movs	r0, r0
	...

00020878 <_dtoa_r>:
   20878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2087c:	ec57 6b10 	vmov	r6, r7, d0
   20880:	b097      	sub	sp, #92	; 0x5c
   20882:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20884:	9102      	str	r1, [sp, #8]
   20886:	4604      	mov	r4, r0
   20888:	4693      	mov	fp, r2
   2088a:	9303      	str	r3, [sp, #12]
   2088c:	e9cd 6700 	strd	r6, r7, [sp]
   20890:	b14d      	cbz	r5, 208a6 <_dtoa_r+0x2e>
   20892:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20894:	606a      	str	r2, [r5, #4]
   20896:	2301      	movs	r3, #1
   20898:	4093      	lsls	r3, r2
   2089a:	60ab      	str	r3, [r5, #8]
   2089c:	4629      	mov	r1, r5
   2089e:	f001 fa67 	bl	21d70 <_Bfree>
   208a2:	2300      	movs	r3, #0
   208a4:	6423      	str	r3, [r4, #64]	; 0x40
   208a6:	e9dd 2300 	ldrd	r2, r3, [sp]
   208aa:	2b00      	cmp	r3, #0
   208ac:	4699      	mov	r9, r3
   208ae:	db38      	blt.n	20922 <_dtoa_r+0xaa>
   208b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   208b2:	2300      	movs	r3, #0
   208b4:	6013      	str	r3, [r2, #0]
   208b6:	4ba0      	ldr	r3, [pc, #640]	; (20b38 <_dtoa_r+0x2c0>)
   208b8:	ea33 0309 	bics.w	r3, r3, r9
   208bc:	d017      	beq.n	208ee <_dtoa_r+0x76>
   208be:	e9dd 6700 	ldrd	r6, r7, [sp]
   208c2:	2200      	movs	r2, #0
   208c4:	2300      	movs	r3, #0
   208c6:	4630      	mov	r0, r6
   208c8:	4639      	mov	r1, r7
   208ca:	f7fb fc43 	bl	1c154 <__aeabi_dcmpeq>
   208ce:	4680      	mov	r8, r0
   208d0:	2800      	cmp	r0, #0
   208d2:	d02f      	beq.n	20934 <_dtoa_r+0xbc>
   208d4:	9a03      	ldr	r2, [sp, #12]
   208d6:	2301      	movs	r3, #1
   208d8:	6013      	str	r3, [r2, #0]
   208da:	9b21      	ldr	r3, [sp, #132]	; 0x84
   208dc:	2b00      	cmp	r3, #0
   208de:	f000 80c4 	beq.w	20a6a <_dtoa_r+0x1f2>
   208e2:	4896      	ldr	r0, [pc, #600]	; (20b3c <_dtoa_r+0x2c4>)
   208e4:	6018      	str	r0, [r3, #0]
   208e6:	3801      	subs	r0, #1
   208e8:	b017      	add	sp, #92	; 0x5c
   208ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208ee:	9a03      	ldr	r2, [sp, #12]
   208f0:	f242 730f 	movw	r3, #9999	; 0x270f
   208f4:	6013      	str	r3, [r2, #0]
   208f6:	9b00      	ldr	r3, [sp, #0]
   208f8:	b96b      	cbnz	r3, 20916 <_dtoa_r+0x9e>
   208fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   208fe:	b953      	cbnz	r3, 20916 <_dtoa_r+0x9e>
   20900:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20902:	488f      	ldr	r0, [pc, #572]	; (20b40 <_dtoa_r+0x2c8>)
   20904:	2b00      	cmp	r3, #0
   20906:	d0ef      	beq.n	208e8 <_dtoa_r+0x70>
   20908:	f100 0308 	add.w	r3, r0, #8
   2090c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2090e:	6013      	str	r3, [r2, #0]
   20910:	b017      	add	sp, #92	; 0x5c
   20912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20916:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20918:	488a      	ldr	r0, [pc, #552]	; (20b44 <_dtoa_r+0x2cc>)
   2091a:	2b00      	cmp	r3, #0
   2091c:	d0e4      	beq.n	208e8 <_dtoa_r+0x70>
   2091e:	1cc3      	adds	r3, r0, #3
   20920:	e7f4      	b.n	2090c <_dtoa_r+0x94>
   20922:	9a01      	ldr	r2, [sp, #4]
   20924:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   20928:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2092a:	f8cd 9004 	str.w	r9, [sp, #4]
   2092e:	2301      	movs	r3, #1
   20930:	6013      	str	r3, [r2, #0]
   20932:	e7c0      	b.n	208b6 <_dtoa_r+0x3e>
   20934:	aa14      	add	r2, sp, #80	; 0x50
   20936:	a915      	add	r1, sp, #84	; 0x54
   20938:	ec47 6b10 	vmov	d0, r6, r7
   2093c:	4620      	mov	r0, r4
   2093e:	f001 fc8f 	bl	22260 <__d2b>
   20942:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20946:	4682      	mov	sl, r0
   20948:	d073      	beq.n	20a32 <_dtoa_r+0x1ba>
   2094a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2094e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20952:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20956:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2095a:	4630      	mov	r0, r6
   2095c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20960:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   20964:	2200      	movs	r2, #0
   20966:	4b78      	ldr	r3, [pc, #480]	; (20b48 <_dtoa_r+0x2d0>)
   20968:	f7fa ffd8 	bl	1b91c <__aeabi_dsub>
   2096c:	a36c      	add	r3, pc, #432	; (adr r3, 20b20 <_dtoa_r+0x2a8>)
   2096e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20972:	f7fb f987 	bl	1bc84 <__aeabi_dmul>
   20976:	a36c      	add	r3, pc, #432	; (adr r3, 20b28 <_dtoa_r+0x2b0>)
   20978:	e9d3 2300 	ldrd	r2, r3, [r3]
   2097c:	f7fa ffd0 	bl	1b920 <__adddf3>
   20980:	4606      	mov	r6, r0
   20982:	4628      	mov	r0, r5
   20984:	460f      	mov	r7, r1
   20986:	f7fb f917 	bl	1bbb8 <__aeabi_i2d>
   2098a:	a369      	add	r3, pc, #420	; (adr r3, 20b30 <_dtoa_r+0x2b8>)
   2098c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20990:	f7fb f978 	bl	1bc84 <__aeabi_dmul>
   20994:	4602      	mov	r2, r0
   20996:	460b      	mov	r3, r1
   20998:	4630      	mov	r0, r6
   2099a:	4639      	mov	r1, r7
   2099c:	f7fa ffc0 	bl	1b920 <__adddf3>
   209a0:	4606      	mov	r6, r0
   209a2:	460f      	mov	r7, r1
   209a4:	f7fb fc08 	bl	1c1b8 <__aeabi_d2iz>
   209a8:	2200      	movs	r2, #0
   209aa:	9004      	str	r0, [sp, #16]
   209ac:	2300      	movs	r3, #0
   209ae:	4630      	mov	r0, r6
   209b0:	4639      	mov	r1, r7
   209b2:	f7fb fbd9 	bl	1c168 <__aeabi_dcmplt>
   209b6:	2800      	cmp	r0, #0
   209b8:	f040 816f 	bne.w	20c9a <_dtoa_r+0x422>
   209bc:	9e04      	ldr	r6, [sp, #16]
   209be:	2e16      	cmp	r6, #22
   209c0:	f200 8159 	bhi.w	20c76 <_dtoa_r+0x3fe>
   209c4:	4b61      	ldr	r3, [pc, #388]	; (20b4c <_dtoa_r+0x2d4>)
   209c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   209ca:	e9d3 0100 	ldrd	r0, r1, [r3]
   209ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   209d2:	f7fb fbe7 	bl	1c1a4 <__aeabi_dcmpgt>
   209d6:	2800      	cmp	r0, #0
   209d8:	f000 81c4 	beq.w	20d64 <_dtoa_r+0x4ec>
   209dc:	1e73      	subs	r3, r6, #1
   209de:	9304      	str	r3, [sp, #16]
   209e0:	2300      	movs	r3, #0
   209e2:	930c      	str	r3, [sp, #48]	; 0x30
   209e4:	eba8 0505 	sub.w	r5, r8, r5
   209e8:	1e6b      	subs	r3, r5, #1
   209ea:	9305      	str	r3, [sp, #20]
   209ec:	f100 814f 	bmi.w	20c8e <_dtoa_r+0x416>
   209f0:	2300      	movs	r3, #0
   209f2:	9306      	str	r3, [sp, #24]
   209f4:	9b04      	ldr	r3, [sp, #16]
   209f6:	2b00      	cmp	r3, #0
   209f8:	f2c0 8140 	blt.w	20c7c <_dtoa_r+0x404>
   209fc:	9a05      	ldr	r2, [sp, #20]
   209fe:	930b      	str	r3, [sp, #44]	; 0x2c
   20a00:	4611      	mov	r1, r2
   20a02:	4419      	add	r1, r3
   20a04:	2300      	movs	r3, #0
   20a06:	9105      	str	r1, [sp, #20]
   20a08:	930a      	str	r3, [sp, #40]	; 0x28
   20a0a:	9b02      	ldr	r3, [sp, #8]
   20a0c:	2b09      	cmp	r3, #9
   20a0e:	d82e      	bhi.n	20a6e <_dtoa_r+0x1f6>
   20a10:	2b05      	cmp	r3, #5
   20a12:	f340 8651 	ble.w	216b8 <_dtoa_r+0xe40>
   20a16:	3b04      	subs	r3, #4
   20a18:	9302      	str	r3, [sp, #8]
   20a1a:	2700      	movs	r7, #0
   20a1c:	9b02      	ldr	r3, [sp, #8]
   20a1e:	3b02      	subs	r3, #2
   20a20:	2b03      	cmp	r3, #3
   20a22:	f200 8633 	bhi.w	2168c <_dtoa_r+0xe14>
   20a26:	e8df f013 	tbh	[pc, r3, lsl #1]
   20a2a:	03d6      	.short	0x03d6
   20a2c:	03e302cb 	.word	0x03e302cb
   20a30:	0464      	.short	0x0464
   20a32:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20a36:	9d15      	ldr	r5, [sp, #84]	; 0x54
   20a38:	4445      	add	r5, r8
   20a3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   20a3e:	2b20      	cmp	r3, #32
   20a40:	f340 818a 	ble.w	20d58 <_dtoa_r+0x4e0>
   20a44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20a48:	fa09 f903 	lsl.w	r9, r9, r3
   20a4c:	9b00      	ldr	r3, [sp, #0]
   20a4e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20a52:	fa23 f000 	lsr.w	r0, r3, r0
   20a56:	ea40 0009 	orr.w	r0, r0, r9
   20a5a:	f7fb f89d 	bl	1bb98 <__aeabi_ui2d>
   20a5e:	2301      	movs	r3, #1
   20a60:	3d01      	subs	r5, #1
   20a62:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   20a66:	9310      	str	r3, [sp, #64]	; 0x40
   20a68:	e77c      	b.n	20964 <_dtoa_r+0xec>
   20a6a:	4839      	ldr	r0, [pc, #228]	; (20b50 <_dtoa_r+0x2d8>)
   20a6c:	e73c      	b.n	208e8 <_dtoa_r+0x70>
   20a6e:	2100      	movs	r1, #0
   20a70:	6461      	str	r1, [r4, #68]	; 0x44
   20a72:	4620      	mov	r0, r4
   20a74:	468b      	mov	fp, r1
   20a76:	f001 f955 	bl	21d24 <_Balloc>
   20a7a:	f04f 33ff 	mov.w	r3, #4294967295
   20a7e:	9308      	str	r3, [sp, #32]
   20a80:	930d      	str	r3, [sp, #52]	; 0x34
   20a82:	2301      	movs	r3, #1
   20a84:	9007      	str	r0, [sp, #28]
   20a86:	6420      	str	r0, [r4, #64]	; 0x40
   20a88:	f8cd b008 	str.w	fp, [sp, #8]
   20a8c:	9309      	str	r3, [sp, #36]	; 0x24
   20a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20a90:	2b00      	cmp	r3, #0
   20a92:	f2c0 80d0 	blt.w	20c36 <_dtoa_r+0x3be>
   20a96:	9a04      	ldr	r2, [sp, #16]
   20a98:	2a0e      	cmp	r2, #14
   20a9a:	f300 80cc 	bgt.w	20c36 <_dtoa_r+0x3be>
   20a9e:	4b2b      	ldr	r3, [pc, #172]	; (20b4c <_dtoa_r+0x2d4>)
   20aa0:	f1bb 0f00 	cmp.w	fp, #0
   20aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
   20aac:	f2c0 83be 	blt.w	2122c <_dtoa_r+0x9b4>
   20ab0:	e9dd 6700 	ldrd	r6, r7, [sp]
   20ab4:	4642      	mov	r2, r8
   20ab6:	464b      	mov	r3, r9
   20ab8:	4630      	mov	r0, r6
   20aba:	4639      	mov	r1, r7
   20abc:	f7fb fa0c 	bl	1bed8 <__aeabi_ddiv>
   20ac0:	f7fb fb7a 	bl	1c1b8 <__aeabi_d2iz>
   20ac4:	4683      	mov	fp, r0
   20ac6:	f7fb f877 	bl	1bbb8 <__aeabi_i2d>
   20aca:	4642      	mov	r2, r8
   20acc:	464b      	mov	r3, r9
   20ace:	f7fb f8d9 	bl	1bc84 <__aeabi_dmul>
   20ad2:	460b      	mov	r3, r1
   20ad4:	4602      	mov	r2, r0
   20ad6:	4639      	mov	r1, r7
   20ad8:	4630      	mov	r0, r6
   20ada:	f7fa ff1f 	bl	1b91c <__aeabi_dsub>
   20ade:	9d07      	ldr	r5, [sp, #28]
   20ae0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20ae4:	702b      	strb	r3, [r5, #0]
   20ae6:	9b08      	ldr	r3, [sp, #32]
   20ae8:	2b01      	cmp	r3, #1
   20aea:	4606      	mov	r6, r0
   20aec:	460f      	mov	r7, r1
   20aee:	f105 0501 	add.w	r5, r5, #1
   20af2:	d061      	beq.n	20bb8 <_dtoa_r+0x340>
   20af4:	2200      	movs	r2, #0
   20af6:	4b17      	ldr	r3, [pc, #92]	; (20b54 <_dtoa_r+0x2dc>)
   20af8:	f7fb f8c4 	bl	1bc84 <__aeabi_dmul>
   20afc:	2200      	movs	r2, #0
   20afe:	2300      	movs	r3, #0
   20b00:	4606      	mov	r6, r0
   20b02:	460f      	mov	r7, r1
   20b04:	f7fb fb26 	bl	1c154 <__aeabi_dcmpeq>
   20b08:	2800      	cmp	r0, #0
   20b0a:	f040 8081 	bne.w	20c10 <_dtoa_r+0x398>
   20b0e:	f8cd a000 	str.w	sl, [sp]
   20b12:	9402      	str	r4, [sp, #8]
   20b14:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20b18:	9c08      	ldr	r4, [sp, #32]
   20b1a:	e028      	b.n	20b6e <_dtoa_r+0x2f6>
   20b1c:	f3af 8000 	nop.w
   20b20:	636f4361 	.word	0x636f4361
   20b24:	3fd287a7 	.word	0x3fd287a7
   20b28:	8b60c8b3 	.word	0x8b60c8b3
   20b2c:	3fc68a28 	.word	0x3fc68a28
   20b30:	509f79fb 	.word	0x509f79fb
   20b34:	3fd34413 	.word	0x3fd34413
   20b38:	7ff00000 	.word	0x7ff00000
   20b3c:	00024e89 	.word	0x00024e89
   20b40:	00024fd8 	.word	0x00024fd8
   20b44:	00024fe4 	.word	0x00024fe4
   20b48:	3ff80000 	.word	0x3ff80000
   20b4c:	00025010 	.word	0x00025010
   20b50:	00024e88 	.word	0x00024e88
   20b54:	40240000 	.word	0x40240000
   20b58:	f7fb f894 	bl	1bc84 <__aeabi_dmul>
   20b5c:	2200      	movs	r2, #0
   20b5e:	2300      	movs	r3, #0
   20b60:	4606      	mov	r6, r0
   20b62:	460f      	mov	r7, r1
   20b64:	f7fb faf6 	bl	1c154 <__aeabi_dcmpeq>
   20b68:	2800      	cmp	r0, #0
   20b6a:	f040 83c5 	bne.w	212f8 <_dtoa_r+0xa80>
   20b6e:	4642      	mov	r2, r8
   20b70:	464b      	mov	r3, r9
   20b72:	4630      	mov	r0, r6
   20b74:	4639      	mov	r1, r7
   20b76:	f7fb f9af 	bl	1bed8 <__aeabi_ddiv>
   20b7a:	f7fb fb1d 	bl	1c1b8 <__aeabi_d2iz>
   20b7e:	4683      	mov	fp, r0
   20b80:	f7fb f81a 	bl	1bbb8 <__aeabi_i2d>
   20b84:	4642      	mov	r2, r8
   20b86:	464b      	mov	r3, r9
   20b88:	f7fb f87c 	bl	1bc84 <__aeabi_dmul>
   20b8c:	4602      	mov	r2, r0
   20b8e:	460b      	mov	r3, r1
   20b90:	4630      	mov	r0, r6
   20b92:	4639      	mov	r1, r7
   20b94:	f7fa fec2 	bl	1b91c <__aeabi_dsub>
   20b98:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   20b9c:	f805 eb01 	strb.w	lr, [r5], #1
   20ba0:	eba5 0e0a 	sub.w	lr, r5, sl
   20ba4:	45a6      	cmp	lr, r4
   20ba6:	4606      	mov	r6, r0
   20ba8:	460f      	mov	r7, r1
   20baa:	f04f 0200 	mov.w	r2, #0
   20bae:	4b6e      	ldr	r3, [pc, #440]	; (20d68 <_dtoa_r+0x4f0>)
   20bb0:	d1d2      	bne.n	20b58 <_dtoa_r+0x2e0>
   20bb2:	f8dd a000 	ldr.w	sl, [sp]
   20bb6:	9c02      	ldr	r4, [sp, #8]
   20bb8:	4632      	mov	r2, r6
   20bba:	463b      	mov	r3, r7
   20bbc:	4630      	mov	r0, r6
   20bbe:	4639      	mov	r1, r7
   20bc0:	f7fa feae 	bl	1b920 <__adddf3>
   20bc4:	4606      	mov	r6, r0
   20bc6:	460f      	mov	r7, r1
   20bc8:	4602      	mov	r2, r0
   20bca:	460b      	mov	r3, r1
   20bcc:	4640      	mov	r0, r8
   20bce:	4649      	mov	r1, r9
   20bd0:	f7fb faca 	bl	1c168 <__aeabi_dcmplt>
   20bd4:	b948      	cbnz	r0, 20bea <_dtoa_r+0x372>
   20bd6:	4632      	mov	r2, r6
   20bd8:	463b      	mov	r3, r7
   20bda:	4640      	mov	r0, r8
   20bdc:	4649      	mov	r1, r9
   20bde:	f7fb fab9 	bl	1c154 <__aeabi_dcmpeq>
   20be2:	b1a8      	cbz	r0, 20c10 <_dtoa_r+0x398>
   20be4:	f01b 0f01 	tst.w	fp, #1
   20be8:	d012      	beq.n	20c10 <_dtoa_r+0x398>
   20bea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20bee:	9a07      	ldr	r2, [sp, #28]
   20bf0:	1e6b      	subs	r3, r5, #1
   20bf2:	e004      	b.n	20bfe <_dtoa_r+0x386>
   20bf4:	429a      	cmp	r2, r3
   20bf6:	f000 842d 	beq.w	21454 <_dtoa_r+0xbdc>
   20bfa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   20bfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20c02:	f103 0501 	add.w	r5, r3, #1
   20c06:	d0f5      	beq.n	20bf4 <_dtoa_r+0x37c>
   20c08:	f108 0801 	add.w	r8, r8, #1
   20c0c:	f883 8000 	strb.w	r8, [r3]
   20c10:	4651      	mov	r1, sl
   20c12:	4620      	mov	r0, r4
   20c14:	f001 f8ac 	bl	21d70 <_Bfree>
   20c18:	2200      	movs	r2, #0
   20c1a:	9b04      	ldr	r3, [sp, #16]
   20c1c:	702a      	strb	r2, [r5, #0]
   20c1e:	9a03      	ldr	r2, [sp, #12]
   20c20:	3301      	adds	r3, #1
   20c22:	6013      	str	r3, [r2, #0]
   20c24:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20c26:	2b00      	cmp	r3, #0
   20c28:	f000 83a3 	beq.w	21372 <_dtoa_r+0xafa>
   20c2c:	9807      	ldr	r0, [sp, #28]
   20c2e:	601d      	str	r5, [r3, #0]
   20c30:	b017      	add	sp, #92	; 0x5c
   20c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20c38:	2a00      	cmp	r2, #0
   20c3a:	d040      	beq.n	20cbe <_dtoa_r+0x446>
   20c3c:	9a02      	ldr	r2, [sp, #8]
   20c3e:	2a01      	cmp	r2, #1
   20c40:	f340 831c 	ble.w	2127c <_dtoa_r+0xa04>
   20c44:	9b08      	ldr	r3, [sp, #32]
   20c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20c48:	1e5f      	subs	r7, r3, #1
   20c4a:	42ba      	cmp	r2, r7
   20c4c:	f2c0 8394 	blt.w	21378 <_dtoa_r+0xb00>
   20c50:	1bd7      	subs	r7, r2, r7
   20c52:	9b08      	ldr	r3, [sp, #32]
   20c54:	2b00      	cmp	r3, #0
   20c56:	f2c0 847e 	blt.w	21556 <_dtoa_r+0xcde>
   20c5a:	9d06      	ldr	r5, [sp, #24]
   20c5c:	9b08      	ldr	r3, [sp, #32]
   20c5e:	9a06      	ldr	r2, [sp, #24]
   20c60:	441a      	add	r2, r3
   20c62:	9206      	str	r2, [sp, #24]
   20c64:	9a05      	ldr	r2, [sp, #20]
   20c66:	2101      	movs	r1, #1
   20c68:	441a      	add	r2, r3
   20c6a:	4620      	mov	r0, r4
   20c6c:	9205      	str	r2, [sp, #20]
   20c6e:	f001 f919 	bl	21ea4 <__i2b>
   20c72:	4606      	mov	r6, r0
   20c74:	e026      	b.n	20cc4 <_dtoa_r+0x44c>
   20c76:	2301      	movs	r3, #1
   20c78:	930c      	str	r3, [sp, #48]	; 0x30
   20c7a:	e6b3      	b.n	209e4 <_dtoa_r+0x16c>
   20c7c:	9a06      	ldr	r2, [sp, #24]
   20c7e:	9b04      	ldr	r3, [sp, #16]
   20c80:	1ad2      	subs	r2, r2, r3
   20c82:	425b      	negs	r3, r3
   20c84:	930a      	str	r3, [sp, #40]	; 0x28
   20c86:	2300      	movs	r3, #0
   20c88:	9206      	str	r2, [sp, #24]
   20c8a:	930b      	str	r3, [sp, #44]	; 0x2c
   20c8c:	e6bd      	b.n	20a0a <_dtoa_r+0x192>
   20c8e:	f1c5 0301 	rsb	r3, r5, #1
   20c92:	9306      	str	r3, [sp, #24]
   20c94:	2300      	movs	r3, #0
   20c96:	9305      	str	r3, [sp, #20]
   20c98:	e6ac      	b.n	209f4 <_dtoa_r+0x17c>
   20c9a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20c9e:	4648      	mov	r0, r9
   20ca0:	f7fa ff8a 	bl	1bbb8 <__aeabi_i2d>
   20ca4:	4602      	mov	r2, r0
   20ca6:	460b      	mov	r3, r1
   20ca8:	4630      	mov	r0, r6
   20caa:	4639      	mov	r1, r7
   20cac:	f7fb fa52 	bl	1c154 <__aeabi_dcmpeq>
   20cb0:	2800      	cmp	r0, #0
   20cb2:	f47f ae83 	bne.w	209bc <_dtoa_r+0x144>
   20cb6:	f109 33ff 	add.w	r3, r9, #4294967295
   20cba:	9304      	str	r3, [sp, #16]
   20cbc:	e67e      	b.n	209bc <_dtoa_r+0x144>
   20cbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20cc0:	9d06      	ldr	r5, [sp, #24]
   20cc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20cc4:	2d00      	cmp	r5, #0
   20cc6:	dd0c      	ble.n	20ce2 <_dtoa_r+0x46a>
   20cc8:	9905      	ldr	r1, [sp, #20]
   20cca:	2900      	cmp	r1, #0
   20ccc:	460b      	mov	r3, r1
   20cce:	dd08      	ble.n	20ce2 <_dtoa_r+0x46a>
   20cd0:	42a9      	cmp	r1, r5
   20cd2:	9a06      	ldr	r2, [sp, #24]
   20cd4:	bfa8      	it	ge
   20cd6:	462b      	movge	r3, r5
   20cd8:	1ad2      	subs	r2, r2, r3
   20cda:	1aed      	subs	r5, r5, r3
   20cdc:	1acb      	subs	r3, r1, r3
   20cde:	9206      	str	r2, [sp, #24]
   20ce0:	9305      	str	r3, [sp, #20]
   20ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ce4:	b1d3      	cbz	r3, 20d1c <_dtoa_r+0x4a4>
   20ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ce8:	2b00      	cmp	r3, #0
   20cea:	f000 82c0 	beq.w	2126e <_dtoa_r+0x9f6>
   20cee:	2f00      	cmp	r7, #0
   20cf0:	dd10      	ble.n	20d14 <_dtoa_r+0x49c>
   20cf2:	4631      	mov	r1, r6
   20cf4:	463a      	mov	r2, r7
   20cf6:	4620      	mov	r0, r4
   20cf8:	f001 f970 	bl	21fdc <__pow5mult>
   20cfc:	4652      	mov	r2, sl
   20cfe:	4601      	mov	r1, r0
   20d00:	4606      	mov	r6, r0
   20d02:	4620      	mov	r0, r4
   20d04:	f001 f8d8 	bl	21eb8 <__multiply>
   20d08:	4651      	mov	r1, sl
   20d0a:	4680      	mov	r8, r0
   20d0c:	4620      	mov	r0, r4
   20d0e:	f001 f82f 	bl	21d70 <_Bfree>
   20d12:	46c2      	mov	sl, r8
   20d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20d16:	1bda      	subs	r2, r3, r7
   20d18:	f040 82aa 	bne.w	21270 <_dtoa_r+0x9f8>
   20d1c:	2101      	movs	r1, #1
   20d1e:	4620      	mov	r0, r4
   20d20:	f001 f8c0 	bl	21ea4 <__i2b>
   20d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d26:	2b00      	cmp	r3, #0
   20d28:	4681      	mov	r9, r0
   20d2a:	dd1f      	ble.n	20d6c <_dtoa_r+0x4f4>
   20d2c:	4601      	mov	r1, r0
   20d2e:	461a      	mov	r2, r3
   20d30:	4620      	mov	r0, r4
   20d32:	f001 f953 	bl	21fdc <__pow5mult>
   20d36:	9b02      	ldr	r3, [sp, #8]
   20d38:	2b01      	cmp	r3, #1
   20d3a:	4681      	mov	r9, r0
   20d3c:	f340 825b 	ble.w	211f6 <_dtoa_r+0x97e>
   20d40:	f04f 0800 	mov.w	r8, #0
   20d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20d48:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20d4c:	6918      	ldr	r0, [r3, #16]
   20d4e:	f001 f859 	bl	21e04 <__hi0bits>
   20d52:	f1c0 0020 	rsb	r0, r0, #32
   20d56:	e013      	b.n	20d80 <_dtoa_r+0x508>
   20d58:	f1c3 0920 	rsb	r9, r3, #32
   20d5c:	9b00      	ldr	r3, [sp, #0]
   20d5e:	fa03 f009 	lsl.w	r0, r3, r9
   20d62:	e67a      	b.n	20a5a <_dtoa_r+0x1e2>
   20d64:	900c      	str	r0, [sp, #48]	; 0x30
   20d66:	e63d      	b.n	209e4 <_dtoa_r+0x16c>
   20d68:	40240000 	.word	0x40240000
   20d6c:	9b02      	ldr	r3, [sp, #8]
   20d6e:	2b01      	cmp	r3, #1
   20d70:	f340 828d 	ble.w	2128e <_dtoa_r+0xa16>
   20d74:	f04f 0800 	mov.w	r8, #0
   20d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d7a:	2001      	movs	r0, #1
   20d7c:	2b00      	cmp	r3, #0
   20d7e:	d1e1      	bne.n	20d44 <_dtoa_r+0x4cc>
   20d80:	9a05      	ldr	r2, [sp, #20]
   20d82:	4410      	add	r0, r2
   20d84:	f010 001f 	ands.w	r0, r0, #31
   20d88:	f000 80a1 	beq.w	20ece <_dtoa_r+0x656>
   20d8c:	f1c0 0320 	rsb	r3, r0, #32
   20d90:	2b04      	cmp	r3, #4
   20d92:	f340 848c 	ble.w	216ae <_dtoa_r+0xe36>
   20d96:	9b06      	ldr	r3, [sp, #24]
   20d98:	f1c0 001c 	rsb	r0, r0, #28
   20d9c:	4403      	add	r3, r0
   20d9e:	9306      	str	r3, [sp, #24]
   20da0:	4613      	mov	r3, r2
   20da2:	4403      	add	r3, r0
   20da4:	4405      	add	r5, r0
   20da6:	9305      	str	r3, [sp, #20]
   20da8:	9b06      	ldr	r3, [sp, #24]
   20daa:	2b00      	cmp	r3, #0
   20dac:	dd05      	ble.n	20dba <_dtoa_r+0x542>
   20dae:	4651      	mov	r1, sl
   20db0:	461a      	mov	r2, r3
   20db2:	4620      	mov	r0, r4
   20db4:	f001 f962 	bl	2207c <__lshift>
   20db8:	4682      	mov	sl, r0
   20dba:	9b05      	ldr	r3, [sp, #20]
   20dbc:	2b00      	cmp	r3, #0
   20dbe:	dd05      	ble.n	20dcc <_dtoa_r+0x554>
   20dc0:	4649      	mov	r1, r9
   20dc2:	461a      	mov	r2, r3
   20dc4:	4620      	mov	r0, r4
   20dc6:	f001 f959 	bl	2207c <__lshift>
   20dca:	4681      	mov	r9, r0
   20dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20dce:	2b00      	cmp	r3, #0
   20dd0:	f040 8086 	bne.w	20ee0 <_dtoa_r+0x668>
   20dd4:	9b08      	ldr	r3, [sp, #32]
   20dd6:	2b00      	cmp	r3, #0
   20dd8:	f340 8269 	ble.w	212ae <_dtoa_r+0xa36>
   20ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20dde:	2b00      	cmp	r3, #0
   20de0:	f000 8098 	beq.w	20f14 <_dtoa_r+0x69c>
   20de4:	2d00      	cmp	r5, #0
   20de6:	dd05      	ble.n	20df4 <_dtoa_r+0x57c>
   20de8:	4631      	mov	r1, r6
   20dea:	462a      	mov	r2, r5
   20dec:	4620      	mov	r0, r4
   20dee:	f001 f945 	bl	2207c <__lshift>
   20df2:	4606      	mov	r6, r0
   20df4:	f1b8 0f00 	cmp.w	r8, #0
   20df8:	f040 8336 	bne.w	21468 <_dtoa_r+0xbf0>
   20dfc:	46b0      	mov	r8, r6
   20dfe:	9b08      	ldr	r3, [sp, #32]
   20e00:	9a07      	ldr	r2, [sp, #28]
   20e02:	3b01      	subs	r3, #1
   20e04:	18d3      	adds	r3, r2, r3
   20e06:	9308      	str	r3, [sp, #32]
   20e08:	9b00      	ldr	r3, [sp, #0]
   20e0a:	f003 0301 	and.w	r3, r3, #1
   20e0e:	9309      	str	r3, [sp, #36]	; 0x24
   20e10:	4617      	mov	r7, r2
   20e12:	4649      	mov	r1, r9
   20e14:	4650      	mov	r0, sl
   20e16:	f7ff fc99 	bl	2074c <quorem>
   20e1a:	4631      	mov	r1, r6
   20e1c:	4605      	mov	r5, r0
   20e1e:	4650      	mov	r0, sl
   20e20:	f001 f97e 	bl	22120 <__mcmp>
   20e24:	4642      	mov	r2, r8
   20e26:	4649      	mov	r1, r9
   20e28:	4683      	mov	fp, r0
   20e2a:	4620      	mov	r0, r4
   20e2c:	f001 f994 	bl	22158 <__mdiff>
   20e30:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20e34:	9200      	str	r2, [sp, #0]
   20e36:	68c2      	ldr	r2, [r0, #12]
   20e38:	4601      	mov	r1, r0
   20e3a:	2a00      	cmp	r2, #0
   20e3c:	f040 8232 	bne.w	212a4 <_dtoa_r+0xa2c>
   20e40:	9006      	str	r0, [sp, #24]
   20e42:	4650      	mov	r0, sl
   20e44:	f001 f96c 	bl	22120 <__mcmp>
   20e48:	9b06      	ldr	r3, [sp, #24]
   20e4a:	9005      	str	r0, [sp, #20]
   20e4c:	4619      	mov	r1, r3
   20e4e:	4620      	mov	r0, r4
   20e50:	f000 ff8e 	bl	21d70 <_Bfree>
   20e54:	9a05      	ldr	r2, [sp, #20]
   20e56:	b932      	cbnz	r2, 20e66 <_dtoa_r+0x5ee>
   20e58:	9b02      	ldr	r3, [sp, #8]
   20e5a:	b923      	cbnz	r3, 20e66 <_dtoa_r+0x5ee>
   20e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e5e:	2b00      	cmp	r3, #0
   20e60:	f000 83de 	beq.w	21620 <_dtoa_r+0xda8>
   20e64:	9a02      	ldr	r2, [sp, #8]
   20e66:	f1bb 0f00 	cmp.w	fp, #0
   20e6a:	f2c0 82a2 	blt.w	213b2 <_dtoa_r+0xb3a>
   20e6e:	d105      	bne.n	20e7c <_dtoa_r+0x604>
   20e70:	9b02      	ldr	r3, [sp, #8]
   20e72:	b91b      	cbnz	r3, 20e7c <_dtoa_r+0x604>
   20e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e76:	2b00      	cmp	r3, #0
   20e78:	f000 829b 	beq.w	213b2 <_dtoa_r+0xb3a>
   20e7c:	2a00      	cmp	r2, #0
   20e7e:	f300 8307 	bgt.w	21490 <_dtoa_r+0xc18>
   20e82:	f89d 3000 	ldrb.w	r3, [sp]
   20e86:	703b      	strb	r3, [r7, #0]
   20e88:	9b08      	ldr	r3, [sp, #32]
   20e8a:	f107 0b01 	add.w	fp, r7, #1
   20e8e:	429f      	cmp	r7, r3
   20e90:	465d      	mov	r5, fp
   20e92:	f000 8308 	beq.w	214a6 <_dtoa_r+0xc2e>
   20e96:	4651      	mov	r1, sl
   20e98:	2300      	movs	r3, #0
   20e9a:	220a      	movs	r2, #10
   20e9c:	4620      	mov	r0, r4
   20e9e:	f000 ff71 	bl	21d84 <__multadd>
   20ea2:	4546      	cmp	r6, r8
   20ea4:	4682      	mov	sl, r0
   20ea6:	4631      	mov	r1, r6
   20ea8:	f04f 0300 	mov.w	r3, #0
   20eac:	f04f 020a 	mov.w	r2, #10
   20eb0:	4620      	mov	r0, r4
   20eb2:	f000 81f1 	beq.w	21298 <_dtoa_r+0xa20>
   20eb6:	f000 ff65 	bl	21d84 <__multadd>
   20eba:	4641      	mov	r1, r8
   20ebc:	4606      	mov	r6, r0
   20ebe:	2300      	movs	r3, #0
   20ec0:	220a      	movs	r2, #10
   20ec2:	4620      	mov	r0, r4
   20ec4:	f000 ff5e 	bl	21d84 <__multadd>
   20ec8:	465f      	mov	r7, fp
   20eca:	4680      	mov	r8, r0
   20ecc:	e7a1      	b.n	20e12 <_dtoa_r+0x59a>
   20ece:	201c      	movs	r0, #28
   20ed0:	9b06      	ldr	r3, [sp, #24]
   20ed2:	4403      	add	r3, r0
   20ed4:	9306      	str	r3, [sp, #24]
   20ed6:	9b05      	ldr	r3, [sp, #20]
   20ed8:	4403      	add	r3, r0
   20eda:	4405      	add	r5, r0
   20edc:	9305      	str	r3, [sp, #20]
   20ede:	e763      	b.n	20da8 <_dtoa_r+0x530>
   20ee0:	4649      	mov	r1, r9
   20ee2:	4650      	mov	r0, sl
   20ee4:	f001 f91c 	bl	22120 <__mcmp>
   20ee8:	2800      	cmp	r0, #0
   20eea:	f6bf af73 	bge.w	20dd4 <_dtoa_r+0x55c>
   20eee:	9f04      	ldr	r7, [sp, #16]
   20ef0:	4651      	mov	r1, sl
   20ef2:	2300      	movs	r3, #0
   20ef4:	220a      	movs	r2, #10
   20ef6:	4620      	mov	r0, r4
   20ef8:	3f01      	subs	r7, #1
   20efa:	9704      	str	r7, [sp, #16]
   20efc:	f000 ff42 	bl	21d84 <__multadd>
   20f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20f02:	4682      	mov	sl, r0
   20f04:	2b00      	cmp	r3, #0
   20f06:	f040 83a7 	bne.w	21658 <_dtoa_r+0xde0>
   20f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20f0c:	2b00      	cmp	r3, #0
   20f0e:	f340 83b0 	ble.w	21672 <_dtoa_r+0xdfa>
   20f12:	9308      	str	r3, [sp, #32]
   20f14:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20f1c:	465d      	mov	r5, fp
   20f1e:	e002      	b.n	20f26 <_dtoa_r+0x6ae>
   20f20:	f000 ff30 	bl	21d84 <__multadd>
   20f24:	4682      	mov	sl, r0
   20f26:	4649      	mov	r1, r9
   20f28:	4650      	mov	r0, sl
   20f2a:	f7ff fc0f 	bl	2074c <quorem>
   20f2e:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20f32:	f805 7b01 	strb.w	r7, [r5], #1
   20f36:	eba5 030b 	sub.w	r3, r5, fp
   20f3a:	4543      	cmp	r3, r8
   20f3c:	f04f 020a 	mov.w	r2, #10
   20f40:	f04f 0300 	mov.w	r3, #0
   20f44:	4651      	mov	r1, sl
   20f46:	4620      	mov	r0, r4
   20f48:	dbea      	blt.n	20f20 <_dtoa_r+0x6a8>
   20f4a:	9b07      	ldr	r3, [sp, #28]
   20f4c:	9a08      	ldr	r2, [sp, #32]
   20f4e:	9700      	str	r7, [sp, #0]
   20f50:	2a01      	cmp	r2, #1
   20f52:	bfac      	ite	ge
   20f54:	189b      	addge	r3, r3, r2
   20f56:	3301      	addlt	r3, #1
   20f58:	461d      	mov	r5, r3
   20f5a:	f04f 0b00 	mov.w	fp, #0
   20f5e:	4651      	mov	r1, sl
   20f60:	2201      	movs	r2, #1
   20f62:	4620      	mov	r0, r4
   20f64:	f001 f88a 	bl	2207c <__lshift>
   20f68:	4649      	mov	r1, r9
   20f6a:	4682      	mov	sl, r0
   20f6c:	f001 f8d8 	bl	22120 <__mcmp>
   20f70:	2800      	cmp	r0, #0
   20f72:	f340 823a 	ble.w	213ea <_dtoa_r+0xb72>
   20f76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20f7a:	9907      	ldr	r1, [sp, #28]
   20f7c:	1e6b      	subs	r3, r5, #1
   20f7e:	e004      	b.n	20f8a <_dtoa_r+0x712>
   20f80:	428b      	cmp	r3, r1
   20f82:	f000 81af 	beq.w	212e4 <_dtoa_r+0xa6c>
   20f86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20f8a:	2a39      	cmp	r2, #57	; 0x39
   20f8c:	f103 0501 	add.w	r5, r3, #1
   20f90:	d0f6      	beq.n	20f80 <_dtoa_r+0x708>
   20f92:	3201      	adds	r2, #1
   20f94:	701a      	strb	r2, [r3, #0]
   20f96:	4649      	mov	r1, r9
   20f98:	4620      	mov	r0, r4
   20f9a:	f000 fee9 	bl	21d70 <_Bfree>
   20f9e:	2e00      	cmp	r6, #0
   20fa0:	f43f ae36 	beq.w	20c10 <_dtoa_r+0x398>
   20fa4:	f1bb 0f00 	cmp.w	fp, #0
   20fa8:	d005      	beq.n	20fb6 <_dtoa_r+0x73e>
   20faa:	45b3      	cmp	fp, r6
   20fac:	d003      	beq.n	20fb6 <_dtoa_r+0x73e>
   20fae:	4659      	mov	r1, fp
   20fb0:	4620      	mov	r0, r4
   20fb2:	f000 fedd 	bl	21d70 <_Bfree>
   20fb6:	4631      	mov	r1, r6
   20fb8:	4620      	mov	r0, r4
   20fba:	f000 fed9 	bl	21d70 <_Bfree>
   20fbe:	e627      	b.n	20c10 <_dtoa_r+0x398>
   20fc0:	2300      	movs	r3, #0
   20fc2:	9309      	str	r3, [sp, #36]	; 0x24
   20fc4:	9b04      	ldr	r3, [sp, #16]
   20fc6:	445b      	add	r3, fp
   20fc8:	930d      	str	r3, [sp, #52]	; 0x34
   20fca:	3301      	adds	r3, #1
   20fcc:	2b01      	cmp	r3, #1
   20fce:	461e      	mov	r6, r3
   20fd0:	461d      	mov	r5, r3
   20fd2:	9308      	str	r3, [sp, #32]
   20fd4:	bfb8      	it	lt
   20fd6:	2601      	movlt	r6, #1
   20fd8:	2100      	movs	r1, #0
   20fda:	2e17      	cmp	r6, #23
   20fdc:	6461      	str	r1, [r4, #68]	; 0x44
   20fde:	d90a      	bls.n	20ff6 <_dtoa_r+0x77e>
   20fe0:	2201      	movs	r2, #1
   20fe2:	2304      	movs	r3, #4
   20fe4:	005b      	lsls	r3, r3, #1
   20fe6:	f103 0014 	add.w	r0, r3, #20
   20fea:	4286      	cmp	r6, r0
   20fec:	4611      	mov	r1, r2
   20fee:	f102 0201 	add.w	r2, r2, #1
   20ff2:	d2f7      	bcs.n	20fe4 <_dtoa_r+0x76c>
   20ff4:	6461      	str	r1, [r4, #68]	; 0x44
   20ff6:	4620      	mov	r0, r4
   20ff8:	f000 fe94 	bl	21d24 <_Balloc>
   20ffc:	2d0e      	cmp	r5, #14
   20ffe:	9007      	str	r0, [sp, #28]
   21000:	6420      	str	r0, [r4, #64]	; 0x40
   21002:	f63f ad44 	bhi.w	20a8e <_dtoa_r+0x216>
   21006:	2f00      	cmp	r7, #0
   21008:	f43f ad41 	beq.w	20a8e <_dtoa_r+0x216>
   2100c:	9904      	ldr	r1, [sp, #16]
   2100e:	2900      	cmp	r1, #0
   21010:	ed9d 7b00 	vldr	d7, [sp]
   21014:	f340 81f6 	ble.w	21404 <_dtoa_r+0xb8c>
   21018:	4bb9      	ldr	r3, [pc, #740]	; (21300 <_dtoa_r+0xa88>)
   2101a:	f001 020f 	and.w	r2, r1, #15
   2101e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21022:	110d      	asrs	r5, r1, #4
   21024:	e9d3 6700 	ldrd	r6, r7, [r3]
   21028:	06eb      	lsls	r3, r5, #27
   2102a:	f140 81ad 	bpl.w	21388 <_dtoa_r+0xb10>
   2102e:	4bb5      	ldr	r3, [pc, #724]	; (21304 <_dtoa_r+0xa8c>)
   21030:	ec51 0b17 	vmov	r0, r1, d7
   21034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   21038:	f7fa ff4e 	bl	1bed8 <__aeabi_ddiv>
   2103c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21040:	f005 050f 	and.w	r5, r5, #15
   21044:	f04f 0903 	mov.w	r9, #3
   21048:	b18d      	cbz	r5, 2106e <_dtoa_r+0x7f6>
   2104a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 21304 <_dtoa_r+0xa8c>
   2104e:	07e8      	lsls	r0, r5, #31
   21050:	d509      	bpl.n	21066 <_dtoa_r+0x7ee>
   21052:	4630      	mov	r0, r6
   21054:	4639      	mov	r1, r7
   21056:	e9d8 2300 	ldrd	r2, r3, [r8]
   2105a:	f7fa fe13 	bl	1bc84 <__aeabi_dmul>
   2105e:	f109 0901 	add.w	r9, r9, #1
   21062:	4606      	mov	r6, r0
   21064:	460f      	mov	r7, r1
   21066:	106d      	asrs	r5, r5, #1
   21068:	f108 0808 	add.w	r8, r8, #8
   2106c:	d1ef      	bne.n	2104e <_dtoa_r+0x7d6>
   2106e:	463b      	mov	r3, r7
   21070:	4632      	mov	r2, r6
   21072:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21076:	f7fa ff2f 	bl	1bed8 <__aeabi_ddiv>
   2107a:	4607      	mov	r7, r0
   2107c:	4688      	mov	r8, r1
   2107e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21080:	b143      	cbz	r3, 21094 <_dtoa_r+0x81c>
   21082:	2200      	movs	r2, #0
   21084:	4ba0      	ldr	r3, [pc, #640]	; (21308 <_dtoa_r+0xa90>)
   21086:	4638      	mov	r0, r7
   21088:	4641      	mov	r1, r8
   2108a:	f7fb f86d 	bl	1c168 <__aeabi_dcmplt>
   2108e:	2800      	cmp	r0, #0
   21090:	f040 8273 	bne.w	2157a <_dtoa_r+0xd02>
   21094:	4648      	mov	r0, r9
   21096:	f7fa fd8f 	bl	1bbb8 <__aeabi_i2d>
   2109a:	463a      	mov	r2, r7
   2109c:	4643      	mov	r3, r8
   2109e:	f7fa fdf1 	bl	1bc84 <__aeabi_dmul>
   210a2:	4b9a      	ldr	r3, [pc, #616]	; (2130c <_dtoa_r+0xa94>)
   210a4:	2200      	movs	r2, #0
   210a6:	f7fa fc3b 	bl	1b920 <__adddf3>
   210aa:	9b08      	ldr	r3, [sp, #32]
   210ac:	4605      	mov	r5, r0
   210ae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   210b2:	2b00      	cmp	r3, #0
   210b4:	f000 8140 	beq.w	21338 <_dtoa_r+0xac0>
   210b8:	9b04      	ldr	r3, [sp, #16]
   210ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
   210be:	9311      	str	r3, [sp, #68]	; 0x44
   210c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   210c2:	2b00      	cmp	r3, #0
   210c4:	f000 81f6 	beq.w	214b4 <_dtoa_r+0xc3c>
   210c8:	4b8d      	ldr	r3, [pc, #564]	; (21300 <_dtoa_r+0xa88>)
   210ca:	4991      	ldr	r1, [pc, #580]	; (21310 <_dtoa_r+0xa98>)
   210cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   210d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   210d4:	2000      	movs	r0, #0
   210d6:	f7fa feff 	bl	1bed8 <__aeabi_ddiv>
   210da:	462a      	mov	r2, r5
   210dc:	4633      	mov	r3, r6
   210de:	f7fa fc1d 	bl	1b91c <__aeabi_dsub>
   210e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   210e6:	4641      	mov	r1, r8
   210e8:	4638      	mov	r0, r7
   210ea:	f7fb f865 	bl	1c1b8 <__aeabi_d2iz>
   210ee:	4605      	mov	r5, r0
   210f0:	f7fa fd62 	bl	1bbb8 <__aeabi_i2d>
   210f4:	4602      	mov	r2, r0
   210f6:	460b      	mov	r3, r1
   210f8:	4638      	mov	r0, r7
   210fa:	4641      	mov	r1, r8
   210fc:	f7fa fc0e 	bl	1b91c <__aeabi_dsub>
   21100:	3530      	adds	r5, #48	; 0x30
   21102:	fa5f f885 	uxtb.w	r8, r5
   21106:	9d07      	ldr	r5, [sp, #28]
   21108:	4606      	mov	r6, r0
   2110a:	460f      	mov	r7, r1
   2110c:	f885 8000 	strb.w	r8, [r5]
   21110:	4602      	mov	r2, r0
   21112:	460b      	mov	r3, r1
   21114:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21118:	3501      	adds	r5, #1
   2111a:	f7fb f843 	bl	1c1a4 <__aeabi_dcmpgt>
   2111e:	2800      	cmp	r0, #0
   21120:	d156      	bne.n	211d0 <_dtoa_r+0x958>
   21122:	4632      	mov	r2, r6
   21124:	463b      	mov	r3, r7
   21126:	2000      	movs	r0, #0
   21128:	4977      	ldr	r1, [pc, #476]	; (21308 <_dtoa_r+0xa90>)
   2112a:	f7fa fbf7 	bl	1b91c <__aeabi_dsub>
   2112e:	4602      	mov	r2, r0
   21130:	460b      	mov	r3, r1
   21132:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21136:	f7fb f835 	bl	1c1a4 <__aeabi_dcmpgt>
   2113a:	2800      	cmp	r0, #0
   2113c:	f040 8262 	bne.w	21604 <_dtoa_r+0xd8c>
   21140:	f1b9 0f01 	cmp.w	r9, #1
   21144:	f43f aca3 	beq.w	20a8e <_dtoa_r+0x216>
   21148:	9b07      	ldr	r3, [sp, #28]
   2114a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   2114e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   21152:	4499      	add	r9, r3
   21154:	46a0      	mov	r8, r4
   21156:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   2115a:	e00d      	b.n	21178 <_dtoa_r+0x900>
   2115c:	2000      	movs	r0, #0
   2115e:	496a      	ldr	r1, [pc, #424]	; (21308 <_dtoa_r+0xa90>)
   21160:	f7fa fbdc 	bl	1b91c <__aeabi_dsub>
   21164:	4652      	mov	r2, sl
   21166:	465b      	mov	r3, fp
   21168:	f7fa fffe 	bl	1c168 <__aeabi_dcmplt>
   2116c:	2800      	cmp	r0, #0
   2116e:	f040 8244 	bne.w	215fa <_dtoa_r+0xd82>
   21172:	454d      	cmp	r5, r9
   21174:	f000 824a 	beq.w	2160c <_dtoa_r+0xd94>
   21178:	4650      	mov	r0, sl
   2117a:	4659      	mov	r1, fp
   2117c:	2200      	movs	r2, #0
   2117e:	4b65      	ldr	r3, [pc, #404]	; (21314 <_dtoa_r+0xa9c>)
   21180:	f7fa fd80 	bl	1bc84 <__aeabi_dmul>
   21184:	2200      	movs	r2, #0
   21186:	4b63      	ldr	r3, [pc, #396]	; (21314 <_dtoa_r+0xa9c>)
   21188:	4682      	mov	sl, r0
   2118a:	468b      	mov	fp, r1
   2118c:	4630      	mov	r0, r6
   2118e:	4639      	mov	r1, r7
   21190:	f7fa fd78 	bl	1bc84 <__aeabi_dmul>
   21194:	460f      	mov	r7, r1
   21196:	4606      	mov	r6, r0
   21198:	f7fb f80e 	bl	1c1b8 <__aeabi_d2iz>
   2119c:	4604      	mov	r4, r0
   2119e:	f7fa fd0b 	bl	1bbb8 <__aeabi_i2d>
   211a2:	4602      	mov	r2, r0
   211a4:	460b      	mov	r3, r1
   211a6:	4630      	mov	r0, r6
   211a8:	4639      	mov	r1, r7
   211aa:	f7fa fbb7 	bl	1b91c <__aeabi_dsub>
   211ae:	3430      	adds	r4, #48	; 0x30
   211b0:	b2e4      	uxtb	r4, r4
   211b2:	4652      	mov	r2, sl
   211b4:	465b      	mov	r3, fp
   211b6:	f805 4b01 	strb.w	r4, [r5], #1
   211ba:	4606      	mov	r6, r0
   211bc:	460f      	mov	r7, r1
   211be:	f7fa ffd3 	bl	1c168 <__aeabi_dcmplt>
   211c2:	4632      	mov	r2, r6
   211c4:	463b      	mov	r3, r7
   211c6:	2800      	cmp	r0, #0
   211c8:	d0c8      	beq.n	2115c <_dtoa_r+0x8e4>
   211ca:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   211ce:	4644      	mov	r4, r8
   211d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   211d2:	9304      	str	r3, [sp, #16]
   211d4:	e51c      	b.n	20c10 <_dtoa_r+0x398>
   211d6:	2300      	movs	r3, #0
   211d8:	9309      	str	r3, [sp, #36]	; 0x24
   211da:	f1bb 0f00 	cmp.w	fp, #0
   211de:	f340 80da 	ble.w	21396 <_dtoa_r+0xb1e>
   211e2:	465e      	mov	r6, fp
   211e4:	465d      	mov	r5, fp
   211e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   211ea:	f8cd b020 	str.w	fp, [sp, #32]
   211ee:	e6f3      	b.n	20fd8 <_dtoa_r+0x760>
   211f0:	2301      	movs	r3, #1
   211f2:	9309      	str	r3, [sp, #36]	; 0x24
   211f4:	e7f1      	b.n	211da <_dtoa_r+0x962>
   211f6:	9b00      	ldr	r3, [sp, #0]
   211f8:	2b00      	cmp	r3, #0
   211fa:	f47f ada1 	bne.w	20d40 <_dtoa_r+0x4c8>
   211fe:	e9dd 1200 	ldrd	r1, r2, [sp]
   21202:	f3c2 0313 	ubfx	r3, r2, #0, #20
   21206:	2b00      	cmp	r3, #0
   21208:	f47f adb4 	bne.w	20d74 <_dtoa_r+0x4fc>
   2120c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   21210:	0d3f      	lsrs	r7, r7, #20
   21212:	053f      	lsls	r7, r7, #20
   21214:	2f00      	cmp	r7, #0
   21216:	f000 8200 	beq.w	2161a <_dtoa_r+0xda2>
   2121a:	9b06      	ldr	r3, [sp, #24]
   2121c:	3301      	adds	r3, #1
   2121e:	9306      	str	r3, [sp, #24]
   21220:	9b05      	ldr	r3, [sp, #20]
   21222:	3301      	adds	r3, #1
   21224:	9305      	str	r3, [sp, #20]
   21226:	f04f 0801 	mov.w	r8, #1
   2122a:	e5a5      	b.n	20d78 <_dtoa_r+0x500>
   2122c:	9b08      	ldr	r3, [sp, #32]
   2122e:	2b00      	cmp	r3, #0
   21230:	f73f ac3e 	bgt.w	20ab0 <_dtoa_r+0x238>
   21234:	f040 8099 	bne.w	2136a <_dtoa_r+0xaf2>
   21238:	4649      	mov	r1, r9
   2123a:	2200      	movs	r2, #0
   2123c:	4b36      	ldr	r3, [pc, #216]	; (21318 <_dtoa_r+0xaa0>)
   2123e:	4640      	mov	r0, r8
   21240:	f7fa fd20 	bl	1bc84 <__aeabi_dmul>
   21244:	e9dd 2300 	ldrd	r2, r3, [sp]
   21248:	f7fa ffa2 	bl	1c190 <__aeabi_dcmpge>
   2124c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21250:	464e      	mov	r6, r9
   21252:	2800      	cmp	r0, #0
   21254:	d03e      	beq.n	212d4 <_dtoa_r+0xa5c>
   21256:	ea6f 030b 	mvn.w	r3, fp
   2125a:	9d07      	ldr	r5, [sp, #28]
   2125c:	9304      	str	r3, [sp, #16]
   2125e:	4649      	mov	r1, r9
   21260:	4620      	mov	r0, r4
   21262:	f000 fd85 	bl	21d70 <_Bfree>
   21266:	2e00      	cmp	r6, #0
   21268:	f43f acd2 	beq.w	20c10 <_dtoa_r+0x398>
   2126c:	e6a3      	b.n	20fb6 <_dtoa_r+0x73e>
   2126e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21270:	4651      	mov	r1, sl
   21272:	4620      	mov	r0, r4
   21274:	f000 feb2 	bl	21fdc <__pow5mult>
   21278:	4682      	mov	sl, r0
   2127a:	e54f      	b.n	20d1c <_dtoa_r+0x4a4>
   2127c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2127e:	2a00      	cmp	r2, #0
   21280:	f000 816f 	beq.w	21562 <_dtoa_r+0xcea>
   21284:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21288:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2128a:	9d06      	ldr	r5, [sp, #24]
   2128c:	e4e7      	b.n	20c5e <_dtoa_r+0x3e6>
   2128e:	9b00      	ldr	r3, [sp, #0]
   21290:	2b00      	cmp	r3, #0
   21292:	f47f ad6f 	bne.w	20d74 <_dtoa_r+0x4fc>
   21296:	e7b2      	b.n	211fe <_dtoa_r+0x986>
   21298:	f000 fd74 	bl	21d84 <__multadd>
   2129c:	465f      	mov	r7, fp
   2129e:	4606      	mov	r6, r0
   212a0:	4680      	mov	r8, r0
   212a2:	e5b6      	b.n	20e12 <_dtoa_r+0x59a>
   212a4:	4620      	mov	r0, r4
   212a6:	f000 fd63 	bl	21d70 <_Bfree>
   212aa:	2201      	movs	r2, #1
   212ac:	e5db      	b.n	20e66 <_dtoa_r+0x5ee>
   212ae:	9b02      	ldr	r3, [sp, #8]
   212b0:	2b02      	cmp	r3, #2
   212b2:	f77f ad93 	ble.w	20ddc <_dtoa_r+0x564>
   212b6:	9b08      	ldr	r3, [sp, #32]
   212b8:	2b00      	cmp	r3, #0
   212ba:	d1cc      	bne.n	21256 <_dtoa_r+0x9de>
   212bc:	4649      	mov	r1, r9
   212be:	2205      	movs	r2, #5
   212c0:	4620      	mov	r0, r4
   212c2:	f000 fd5f 	bl	21d84 <__multadd>
   212c6:	4601      	mov	r1, r0
   212c8:	4681      	mov	r9, r0
   212ca:	4650      	mov	r0, sl
   212cc:	f000 ff28 	bl	22120 <__mcmp>
   212d0:	2800      	cmp	r0, #0
   212d2:	ddc0      	ble.n	21256 <_dtoa_r+0x9de>
   212d4:	9a04      	ldr	r2, [sp, #16]
   212d6:	9907      	ldr	r1, [sp, #28]
   212d8:	2331      	movs	r3, #49	; 0x31
   212da:	3201      	adds	r2, #1
   212dc:	9204      	str	r2, [sp, #16]
   212de:	700b      	strb	r3, [r1, #0]
   212e0:	1c4d      	adds	r5, r1, #1
   212e2:	e7bc      	b.n	2125e <_dtoa_r+0x9e6>
   212e4:	9a04      	ldr	r2, [sp, #16]
   212e6:	3201      	adds	r2, #1
   212e8:	9204      	str	r2, [sp, #16]
   212ea:	9a07      	ldr	r2, [sp, #28]
   212ec:	2331      	movs	r3, #49	; 0x31
   212ee:	7013      	strb	r3, [r2, #0]
   212f0:	e651      	b.n	20f96 <_dtoa_r+0x71e>
   212f2:	2301      	movs	r3, #1
   212f4:	9309      	str	r3, [sp, #36]	; 0x24
   212f6:	e665      	b.n	20fc4 <_dtoa_r+0x74c>
   212f8:	f8dd a000 	ldr.w	sl, [sp]
   212fc:	9c02      	ldr	r4, [sp, #8]
   212fe:	e487      	b.n	20c10 <_dtoa_r+0x398>
   21300:	00025010 	.word	0x00025010
   21304:	00024fe8 	.word	0x00024fe8
   21308:	3ff00000 	.word	0x3ff00000
   2130c:	401c0000 	.word	0x401c0000
   21310:	3fe00000 	.word	0x3fe00000
   21314:	40240000 	.word	0x40240000
   21318:	40140000 	.word	0x40140000
   2131c:	4648      	mov	r0, r9
   2131e:	f7fa fc4b 	bl	1bbb8 <__aeabi_i2d>
   21322:	463a      	mov	r2, r7
   21324:	4643      	mov	r3, r8
   21326:	f7fa fcad 	bl	1bc84 <__aeabi_dmul>
   2132a:	2200      	movs	r2, #0
   2132c:	4bc4      	ldr	r3, [pc, #784]	; (21640 <_dtoa_r+0xdc8>)
   2132e:	f7fa faf7 	bl	1b920 <__adddf3>
   21332:	4605      	mov	r5, r0
   21334:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21338:	4641      	mov	r1, r8
   2133a:	2200      	movs	r2, #0
   2133c:	4bc1      	ldr	r3, [pc, #772]	; (21644 <_dtoa_r+0xdcc>)
   2133e:	4638      	mov	r0, r7
   21340:	f7fa faec 	bl	1b91c <__aeabi_dsub>
   21344:	462a      	mov	r2, r5
   21346:	4633      	mov	r3, r6
   21348:	4680      	mov	r8, r0
   2134a:	4689      	mov	r9, r1
   2134c:	f7fa ff2a 	bl	1c1a4 <__aeabi_dcmpgt>
   21350:	2800      	cmp	r0, #0
   21352:	f040 80ab 	bne.w	214ac <_dtoa_r+0xc34>
   21356:	462a      	mov	r2, r5
   21358:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2135c:	4640      	mov	r0, r8
   2135e:	4649      	mov	r1, r9
   21360:	f7fa ff02 	bl	1c168 <__aeabi_dcmplt>
   21364:	2800      	cmp	r0, #0
   21366:	f43f ab92 	beq.w	20a8e <_dtoa_r+0x216>
   2136a:	f04f 0900 	mov.w	r9, #0
   2136e:	464e      	mov	r6, r9
   21370:	e771      	b.n	21256 <_dtoa_r+0x9de>
   21372:	9807      	ldr	r0, [sp, #28]
   21374:	f7ff bab8 	b.w	208e8 <_dtoa_r+0x70>
   21378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2137a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2137c:	970a      	str	r7, [sp, #40]	; 0x28
   2137e:	1afb      	subs	r3, r7, r3
   21380:	441a      	add	r2, r3
   21382:	920b      	str	r2, [sp, #44]	; 0x2c
   21384:	2700      	movs	r7, #0
   21386:	e464      	b.n	20c52 <_dtoa_r+0x3da>
   21388:	ed9d 7b00 	vldr	d7, [sp]
   2138c:	f04f 0902 	mov.w	r9, #2
   21390:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21394:	e658      	b.n	21048 <_dtoa_r+0x7d0>
   21396:	2100      	movs	r1, #0
   21398:	6461      	str	r1, [r4, #68]	; 0x44
   2139a:	4620      	mov	r0, r4
   2139c:	f000 fcc2 	bl	21d24 <_Balloc>
   213a0:	f04f 0b01 	mov.w	fp, #1
   213a4:	9007      	str	r0, [sp, #28]
   213a6:	6420      	str	r0, [r4, #64]	; 0x40
   213a8:	f8cd b020 	str.w	fp, [sp, #32]
   213ac:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   213b0:	e629      	b.n	21006 <_dtoa_r+0x78e>
   213b2:	2a00      	cmp	r2, #0
   213b4:	dd12      	ble.n	213dc <_dtoa_r+0xb64>
   213b6:	4651      	mov	r1, sl
   213b8:	2201      	movs	r2, #1
   213ba:	4620      	mov	r0, r4
   213bc:	f000 fe5e 	bl	2207c <__lshift>
   213c0:	4649      	mov	r1, r9
   213c2:	4682      	mov	sl, r0
   213c4:	f000 feac 	bl	22120 <__mcmp>
   213c8:	2800      	cmp	r0, #0
   213ca:	f340 8131 	ble.w	21630 <_dtoa_r+0xdb8>
   213ce:	9b00      	ldr	r3, [sp, #0]
   213d0:	2b39      	cmp	r3, #57	; 0x39
   213d2:	f000 80f7 	beq.w	215c4 <_dtoa_r+0xd4c>
   213d6:	f105 0331 	add.w	r3, r5, #49	; 0x31
   213da:	9300      	str	r3, [sp, #0]
   213dc:	f89d 3000 	ldrb.w	r3, [sp]
   213e0:	703b      	strb	r3, [r7, #0]
   213e2:	46b3      	mov	fp, r6
   213e4:	1c7d      	adds	r5, r7, #1
   213e6:	4646      	mov	r6, r8
   213e8:	e5d5      	b.n	20f96 <_dtoa_r+0x71e>
   213ea:	d104      	bne.n	213f6 <_dtoa_r+0xb7e>
   213ec:	9b00      	ldr	r3, [sp, #0]
   213ee:	07db      	lsls	r3, r3, #31
   213f0:	d501      	bpl.n	213f6 <_dtoa_r+0xb7e>
   213f2:	e5c0      	b.n	20f76 <_dtoa_r+0x6fe>
   213f4:	4615      	mov	r5, r2
   213f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   213fa:	2b30      	cmp	r3, #48	; 0x30
   213fc:	f105 32ff 	add.w	r2, r5, #4294967295
   21400:	d0f8      	beq.n	213f4 <_dtoa_r+0xb7c>
   21402:	e5c8      	b.n	20f96 <_dtoa_r+0x71e>
   21404:	f000 80b4 	beq.w	21570 <_dtoa_r+0xcf8>
   21408:	9b04      	ldr	r3, [sp, #16]
   2140a:	425d      	negs	r5, r3
   2140c:	4b8e      	ldr	r3, [pc, #568]	; (21648 <_dtoa_r+0xdd0>)
   2140e:	f005 020f 	and.w	r2, r5, #15
   21412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21416:	e9d3 2300 	ldrd	r2, r3, [r3]
   2141a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2141e:	f7fa fc31 	bl	1bc84 <__aeabi_dmul>
   21422:	112d      	asrs	r5, r5, #4
   21424:	4607      	mov	r7, r0
   21426:	4688      	mov	r8, r1
   21428:	f000 8128 	beq.w	2167c <_dtoa_r+0xe04>
   2142c:	4e87      	ldr	r6, [pc, #540]	; (2164c <_dtoa_r+0xdd4>)
   2142e:	f04f 0902 	mov.w	r9, #2
   21432:	07e9      	lsls	r1, r5, #31
   21434:	d509      	bpl.n	2144a <_dtoa_r+0xbd2>
   21436:	4638      	mov	r0, r7
   21438:	4641      	mov	r1, r8
   2143a:	e9d6 2300 	ldrd	r2, r3, [r6]
   2143e:	f7fa fc21 	bl	1bc84 <__aeabi_dmul>
   21442:	f109 0901 	add.w	r9, r9, #1
   21446:	4607      	mov	r7, r0
   21448:	4688      	mov	r8, r1
   2144a:	106d      	asrs	r5, r5, #1
   2144c:	f106 0608 	add.w	r6, r6, #8
   21450:	d1ef      	bne.n	21432 <_dtoa_r+0xbba>
   21452:	e614      	b.n	2107e <_dtoa_r+0x806>
   21454:	9907      	ldr	r1, [sp, #28]
   21456:	2230      	movs	r2, #48	; 0x30
   21458:	700a      	strb	r2, [r1, #0]
   2145a:	9a04      	ldr	r2, [sp, #16]
   2145c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21460:	3201      	adds	r2, #1
   21462:	9204      	str	r2, [sp, #16]
   21464:	f7ff bbd0 	b.w	20c08 <_dtoa_r+0x390>
   21468:	6871      	ldr	r1, [r6, #4]
   2146a:	4620      	mov	r0, r4
   2146c:	f000 fc5a 	bl	21d24 <_Balloc>
   21470:	6933      	ldr	r3, [r6, #16]
   21472:	3302      	adds	r3, #2
   21474:	009a      	lsls	r2, r3, #2
   21476:	4605      	mov	r5, r0
   21478:	f106 010c 	add.w	r1, r6, #12
   2147c:	300c      	adds	r0, #12
   2147e:	f7fc ffd7 	bl	1e430 <memcpy>
   21482:	4629      	mov	r1, r5
   21484:	2201      	movs	r2, #1
   21486:	4620      	mov	r0, r4
   21488:	f000 fdf8 	bl	2207c <__lshift>
   2148c:	4680      	mov	r8, r0
   2148e:	e4b6      	b.n	20dfe <_dtoa_r+0x586>
   21490:	9b00      	ldr	r3, [sp, #0]
   21492:	2b39      	cmp	r3, #57	; 0x39
   21494:	f000 8096 	beq.w	215c4 <_dtoa_r+0xd4c>
   21498:	9b00      	ldr	r3, [sp, #0]
   2149a:	3301      	adds	r3, #1
   2149c:	46b3      	mov	fp, r6
   2149e:	703b      	strb	r3, [r7, #0]
   214a0:	1c7d      	adds	r5, r7, #1
   214a2:	4646      	mov	r6, r8
   214a4:	e577      	b.n	20f96 <_dtoa_r+0x71e>
   214a6:	46b3      	mov	fp, r6
   214a8:	4646      	mov	r6, r8
   214aa:	e558      	b.n	20f5e <_dtoa_r+0x6e6>
   214ac:	f04f 0900 	mov.w	r9, #0
   214b0:	464e      	mov	r6, r9
   214b2:	e70f      	b.n	212d4 <_dtoa_r+0xa5c>
   214b4:	4964      	ldr	r1, [pc, #400]	; (21648 <_dtoa_r+0xdd0>)
   214b6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   214ba:	462a      	mov	r2, r5
   214bc:	4633      	mov	r3, r6
   214be:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   214c2:	f7fa fbdf 	bl	1bc84 <__aeabi_dmul>
   214c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   214ca:	4638      	mov	r0, r7
   214cc:	4641      	mov	r1, r8
   214ce:	f7fa fe73 	bl	1c1b8 <__aeabi_d2iz>
   214d2:	4605      	mov	r5, r0
   214d4:	f7fa fb70 	bl	1bbb8 <__aeabi_i2d>
   214d8:	4602      	mov	r2, r0
   214da:	460b      	mov	r3, r1
   214dc:	4638      	mov	r0, r7
   214de:	4641      	mov	r1, r8
   214e0:	f7fa fa1c 	bl	1b91c <__aeabi_dsub>
   214e4:	9a07      	ldr	r2, [sp, #28]
   214e6:	3530      	adds	r5, #48	; 0x30
   214e8:	f1b9 0f01 	cmp.w	r9, #1
   214ec:	7015      	strb	r5, [r2, #0]
   214ee:	4606      	mov	r6, r0
   214f0:	460f      	mov	r7, r1
   214f2:	f102 0501 	add.w	r5, r2, #1
   214f6:	d01c      	beq.n	21532 <_dtoa_r+0xcba>
   214f8:	9b07      	ldr	r3, [sp, #28]
   214fa:	4499      	add	r9, r3
   214fc:	2200      	movs	r2, #0
   214fe:	4b54      	ldr	r3, [pc, #336]	; (21650 <_dtoa_r+0xdd8>)
   21500:	4630      	mov	r0, r6
   21502:	4639      	mov	r1, r7
   21504:	f7fa fbbe 	bl	1bc84 <__aeabi_dmul>
   21508:	460f      	mov	r7, r1
   2150a:	4606      	mov	r6, r0
   2150c:	f7fa fe54 	bl	1c1b8 <__aeabi_d2iz>
   21510:	4680      	mov	r8, r0
   21512:	f7fa fb51 	bl	1bbb8 <__aeabi_i2d>
   21516:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2151a:	4602      	mov	r2, r0
   2151c:	460b      	mov	r3, r1
   2151e:	4630      	mov	r0, r6
   21520:	4639      	mov	r1, r7
   21522:	f7fa f9fb 	bl	1b91c <__aeabi_dsub>
   21526:	f805 8b01 	strb.w	r8, [r5], #1
   2152a:	454d      	cmp	r5, r9
   2152c:	4606      	mov	r6, r0
   2152e:	460f      	mov	r7, r1
   21530:	d1e4      	bne.n	214fc <_dtoa_r+0xc84>
   21532:	2200      	movs	r2, #0
   21534:	4b47      	ldr	r3, [pc, #284]	; (21654 <_dtoa_r+0xddc>)
   21536:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2153a:	f7fa f9f1 	bl	1b920 <__adddf3>
   2153e:	4632      	mov	r2, r6
   21540:	463b      	mov	r3, r7
   21542:	f7fa fe11 	bl	1c168 <__aeabi_dcmplt>
   21546:	2800      	cmp	r0, #0
   21548:	d042      	beq.n	215d0 <_dtoa_r+0xd58>
   2154a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2154c:	9304      	str	r3, [sp, #16]
   2154e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21552:	f7ff bb4c 	b.w	20bee <_dtoa_r+0x376>
   21556:	9b06      	ldr	r3, [sp, #24]
   21558:	9a08      	ldr	r2, [sp, #32]
   2155a:	1a9d      	subs	r5, r3, r2
   2155c:	2300      	movs	r3, #0
   2155e:	f7ff bb7e 	b.w	20c5e <_dtoa_r+0x3e6>
   21562:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21564:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21566:	9d06      	ldr	r5, [sp, #24]
   21568:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2156c:	f7ff bb77 	b.w	20c5e <_dtoa_r+0x3e6>
   21570:	e9dd 7800 	ldrd	r7, r8, [sp]
   21574:	f04f 0902 	mov.w	r9, #2
   21578:	e581      	b.n	2107e <_dtoa_r+0x806>
   2157a:	9b08      	ldr	r3, [sp, #32]
   2157c:	2b00      	cmp	r3, #0
   2157e:	f43f aecd 	beq.w	2131c <_dtoa_r+0xaa4>
   21582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21584:	2b00      	cmp	r3, #0
   21586:	f77f aa82 	ble.w	20a8e <_dtoa_r+0x216>
   2158a:	2200      	movs	r2, #0
   2158c:	4b30      	ldr	r3, [pc, #192]	; (21650 <_dtoa_r+0xdd8>)
   2158e:	4638      	mov	r0, r7
   21590:	4641      	mov	r1, r8
   21592:	f7fa fb77 	bl	1bc84 <__aeabi_dmul>
   21596:	4607      	mov	r7, r0
   21598:	4688      	mov	r8, r1
   2159a:	f109 0001 	add.w	r0, r9, #1
   2159e:	f7fa fb0b 	bl	1bbb8 <__aeabi_i2d>
   215a2:	463a      	mov	r2, r7
   215a4:	4643      	mov	r3, r8
   215a6:	f7fa fb6d 	bl	1bc84 <__aeabi_dmul>
   215aa:	2200      	movs	r2, #0
   215ac:	4b24      	ldr	r3, [pc, #144]	; (21640 <_dtoa_r+0xdc8>)
   215ae:	f7fa f9b7 	bl	1b920 <__adddf3>
   215b2:	9a04      	ldr	r2, [sp, #16]
   215b4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   215b8:	3a01      	subs	r2, #1
   215ba:	4605      	mov	r5, r0
   215bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   215c0:	9211      	str	r2, [sp, #68]	; 0x44
   215c2:	e57d      	b.n	210c0 <_dtoa_r+0x848>
   215c4:	2239      	movs	r2, #57	; 0x39
   215c6:	46b3      	mov	fp, r6
   215c8:	703a      	strb	r2, [r7, #0]
   215ca:	4646      	mov	r6, r8
   215cc:	1c7d      	adds	r5, r7, #1
   215ce:	e4d4      	b.n	20f7a <_dtoa_r+0x702>
   215d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   215d4:	2000      	movs	r0, #0
   215d6:	491f      	ldr	r1, [pc, #124]	; (21654 <_dtoa_r+0xddc>)
   215d8:	f7fa f9a0 	bl	1b91c <__aeabi_dsub>
   215dc:	4632      	mov	r2, r6
   215de:	463b      	mov	r3, r7
   215e0:	f7fa fde0 	bl	1c1a4 <__aeabi_dcmpgt>
   215e4:	b910      	cbnz	r0, 215ec <_dtoa_r+0xd74>
   215e6:	f7ff ba52 	b.w	20a8e <_dtoa_r+0x216>
   215ea:	4615      	mov	r5, r2
   215ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   215f0:	2b30      	cmp	r3, #48	; 0x30
   215f2:	f105 32ff 	add.w	r2, r5, #4294967295
   215f6:	d0f8      	beq.n	215ea <_dtoa_r+0xd72>
   215f8:	e5ea      	b.n	211d0 <_dtoa_r+0x958>
   215fa:	4643      	mov	r3, r8
   215fc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21600:	46a0      	mov	r8, r4
   21602:	461c      	mov	r4, r3
   21604:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21606:	9304      	str	r3, [sp, #16]
   21608:	f7ff baf1 	b.w	20bee <_dtoa_r+0x376>
   2160c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21610:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   21614:	4644      	mov	r4, r8
   21616:	f7ff ba3a 	b.w	20a8e <_dtoa_r+0x216>
   2161a:	46b8      	mov	r8, r7
   2161c:	f7ff bbac 	b.w	20d78 <_dtoa_r+0x500>
   21620:	9b00      	ldr	r3, [sp, #0]
   21622:	2b39      	cmp	r3, #57	; 0x39
   21624:	d0ce      	beq.n	215c4 <_dtoa_r+0xd4c>
   21626:	f1bb 0f00 	cmp.w	fp, #0
   2162a:	f73f aed4 	bgt.w	213d6 <_dtoa_r+0xb5e>
   2162e:	e6d5      	b.n	213dc <_dtoa_r+0xb64>
   21630:	f47f aed4 	bne.w	213dc <_dtoa_r+0xb64>
   21634:	9b00      	ldr	r3, [sp, #0]
   21636:	07da      	lsls	r2, r3, #31
   21638:	f57f aed0 	bpl.w	213dc <_dtoa_r+0xb64>
   2163c:	e6c7      	b.n	213ce <_dtoa_r+0xb56>
   2163e:	bf00      	nop
   21640:	401c0000 	.word	0x401c0000
   21644:	40140000 	.word	0x40140000
   21648:	00025010 	.word	0x00025010
   2164c:	00024fe8 	.word	0x00024fe8
   21650:	40240000 	.word	0x40240000
   21654:	3fe00000 	.word	0x3fe00000
   21658:	4631      	mov	r1, r6
   2165a:	2300      	movs	r3, #0
   2165c:	220a      	movs	r2, #10
   2165e:	4620      	mov	r0, r4
   21660:	f000 fb90 	bl	21d84 <__multadd>
   21664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21666:	2b00      	cmp	r3, #0
   21668:	4606      	mov	r6, r0
   2166a:	dd0a      	ble.n	21682 <_dtoa_r+0xe0a>
   2166c:	9308      	str	r3, [sp, #32]
   2166e:	f7ff bbb9 	b.w	20de4 <_dtoa_r+0x56c>
   21672:	9b02      	ldr	r3, [sp, #8]
   21674:	2b02      	cmp	r3, #2
   21676:	dc22      	bgt.n	216be <_dtoa_r+0xe46>
   21678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2167a:	e44a      	b.n	20f12 <_dtoa_r+0x69a>
   2167c:	f04f 0902 	mov.w	r9, #2
   21680:	e4fd      	b.n	2107e <_dtoa_r+0x806>
   21682:	9b02      	ldr	r3, [sp, #8]
   21684:	2b02      	cmp	r3, #2
   21686:	dc1a      	bgt.n	216be <_dtoa_r+0xe46>
   21688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2168a:	e7ef      	b.n	2166c <_dtoa_r+0xdf4>
   2168c:	2500      	movs	r5, #0
   2168e:	6465      	str	r5, [r4, #68]	; 0x44
   21690:	4629      	mov	r1, r5
   21692:	4620      	mov	r0, r4
   21694:	f000 fb46 	bl	21d24 <_Balloc>
   21698:	f04f 33ff 	mov.w	r3, #4294967295
   2169c:	9308      	str	r3, [sp, #32]
   2169e:	930d      	str	r3, [sp, #52]	; 0x34
   216a0:	2301      	movs	r3, #1
   216a2:	9007      	str	r0, [sp, #28]
   216a4:	46ab      	mov	fp, r5
   216a6:	6420      	str	r0, [r4, #64]	; 0x40
   216a8:	9309      	str	r3, [sp, #36]	; 0x24
   216aa:	f7ff b9f0 	b.w	20a8e <_dtoa_r+0x216>
   216ae:	f43f ab7b 	beq.w	20da8 <_dtoa_r+0x530>
   216b2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   216b6:	e40b      	b.n	20ed0 <_dtoa_r+0x658>
   216b8:	2701      	movs	r7, #1
   216ba:	f7ff b9af 	b.w	20a1c <_dtoa_r+0x1a4>
   216be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   216c0:	9308      	str	r3, [sp, #32]
   216c2:	e5f8      	b.n	212b6 <_dtoa_r+0xa3e>

000216c4 <__sflush_r>:
   216c4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   216c8:	b29a      	uxth	r2, r3
   216ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216ce:	460d      	mov	r5, r1
   216d0:	0711      	lsls	r1, r2, #28
   216d2:	4680      	mov	r8, r0
   216d4:	d43a      	bmi.n	2174c <__sflush_r+0x88>
   216d6:	686a      	ldr	r2, [r5, #4]
   216d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   216dc:	2a00      	cmp	r2, #0
   216de:	81ab      	strh	r3, [r5, #12]
   216e0:	dd6f      	ble.n	217c2 <__sflush_r+0xfe>
   216e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   216e4:	2c00      	cmp	r4, #0
   216e6:	d049      	beq.n	2177c <__sflush_r+0xb8>
   216e8:	2200      	movs	r2, #0
   216ea:	b29b      	uxth	r3, r3
   216ec:	f8d8 6000 	ldr.w	r6, [r8]
   216f0:	f8c8 2000 	str.w	r2, [r8]
   216f4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   216f8:	d067      	beq.n	217ca <__sflush_r+0x106>
   216fa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   216fc:	075f      	lsls	r7, r3, #29
   216fe:	d505      	bpl.n	2170c <__sflush_r+0x48>
   21700:	6869      	ldr	r1, [r5, #4]
   21702:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   21704:	1a52      	subs	r2, r2, r1
   21706:	b10b      	cbz	r3, 2170c <__sflush_r+0x48>
   21708:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2170a:	1ad2      	subs	r2, r2, r3
   2170c:	2300      	movs	r3, #0
   2170e:	69e9      	ldr	r1, [r5, #28]
   21710:	4640      	mov	r0, r8
   21712:	47a0      	blx	r4
   21714:	1c44      	adds	r4, r0, #1
   21716:	d03c      	beq.n	21792 <__sflush_r+0xce>
   21718:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2171c:	692a      	ldr	r2, [r5, #16]
   2171e:	602a      	str	r2, [r5, #0]
   21720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   21724:	2200      	movs	r2, #0
   21726:	81ab      	strh	r3, [r5, #12]
   21728:	04db      	lsls	r3, r3, #19
   2172a:	606a      	str	r2, [r5, #4]
   2172c:	d447      	bmi.n	217be <__sflush_r+0xfa>
   2172e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   21730:	f8c8 6000 	str.w	r6, [r8]
   21734:	b311      	cbz	r1, 2177c <__sflush_r+0xb8>
   21736:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2173a:	4299      	cmp	r1, r3
   2173c:	d002      	beq.n	21744 <__sflush_r+0x80>
   2173e:	4640      	mov	r0, r8
   21740:	f000 f95a 	bl	219f8 <_free_r>
   21744:	2000      	movs	r0, #0
   21746:	6328      	str	r0, [r5, #48]	; 0x30
   21748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2174c:	692e      	ldr	r6, [r5, #16]
   2174e:	b1ae      	cbz	r6, 2177c <__sflush_r+0xb8>
   21750:	682c      	ldr	r4, [r5, #0]
   21752:	602e      	str	r6, [r5, #0]
   21754:	0791      	lsls	r1, r2, #30
   21756:	bf0c      	ite	eq
   21758:	696b      	ldreq	r3, [r5, #20]
   2175a:	2300      	movne	r3, #0
   2175c:	1ba4      	subs	r4, r4, r6
   2175e:	60ab      	str	r3, [r5, #8]
   21760:	e00a      	b.n	21778 <__sflush_r+0xb4>
   21762:	4623      	mov	r3, r4
   21764:	4632      	mov	r2, r6
   21766:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   21768:	69e9      	ldr	r1, [r5, #28]
   2176a:	4640      	mov	r0, r8
   2176c:	47b8      	blx	r7
   2176e:	2800      	cmp	r0, #0
   21770:	eba4 0400 	sub.w	r4, r4, r0
   21774:	4406      	add	r6, r0
   21776:	dd04      	ble.n	21782 <__sflush_r+0xbe>
   21778:	2c00      	cmp	r4, #0
   2177a:	dcf2      	bgt.n	21762 <__sflush_r+0x9e>
   2177c:	2000      	movs	r0, #0
   2177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21782:	89ab      	ldrh	r3, [r5, #12]
   21784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21788:	81ab      	strh	r3, [r5, #12]
   2178a:	f04f 30ff 	mov.w	r0, #4294967295
   2178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21792:	f8d8 4000 	ldr.w	r4, [r8]
   21796:	2c1d      	cmp	r4, #29
   21798:	d8f3      	bhi.n	21782 <__sflush_r+0xbe>
   2179a:	4b19      	ldr	r3, [pc, #100]	; (21800 <__sflush_r+0x13c>)
   2179c:	40e3      	lsrs	r3, r4
   2179e:	43db      	mvns	r3, r3
   217a0:	f013 0301 	ands.w	r3, r3, #1
   217a4:	d1ed      	bne.n	21782 <__sflush_r+0xbe>
   217a6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   217aa:	606b      	str	r3, [r5, #4]
   217ac:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   217b0:	6929      	ldr	r1, [r5, #16]
   217b2:	81ab      	strh	r3, [r5, #12]
   217b4:	04da      	lsls	r2, r3, #19
   217b6:	6029      	str	r1, [r5, #0]
   217b8:	d5b9      	bpl.n	2172e <__sflush_r+0x6a>
   217ba:	2c00      	cmp	r4, #0
   217bc:	d1b7      	bne.n	2172e <__sflush_r+0x6a>
   217be:	6528      	str	r0, [r5, #80]	; 0x50
   217c0:	e7b5      	b.n	2172e <__sflush_r+0x6a>
   217c2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   217c4:	2a00      	cmp	r2, #0
   217c6:	dc8c      	bgt.n	216e2 <__sflush_r+0x1e>
   217c8:	e7d8      	b.n	2177c <__sflush_r+0xb8>
   217ca:	2301      	movs	r3, #1
   217cc:	69e9      	ldr	r1, [r5, #28]
   217ce:	4640      	mov	r0, r8
   217d0:	47a0      	blx	r4
   217d2:	1c43      	adds	r3, r0, #1
   217d4:	4602      	mov	r2, r0
   217d6:	d002      	beq.n	217de <__sflush_r+0x11a>
   217d8:	89ab      	ldrh	r3, [r5, #12]
   217da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   217dc:	e78e      	b.n	216fc <__sflush_r+0x38>
   217de:	f8d8 3000 	ldr.w	r3, [r8]
   217e2:	2b00      	cmp	r3, #0
   217e4:	d0f8      	beq.n	217d8 <__sflush_r+0x114>
   217e6:	2b1d      	cmp	r3, #29
   217e8:	d001      	beq.n	217ee <__sflush_r+0x12a>
   217ea:	2b16      	cmp	r3, #22
   217ec:	d102      	bne.n	217f4 <__sflush_r+0x130>
   217ee:	f8c8 6000 	str.w	r6, [r8]
   217f2:	e7c3      	b.n	2177c <__sflush_r+0xb8>
   217f4:	89ab      	ldrh	r3, [r5, #12]
   217f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   217fa:	81ab      	strh	r3, [r5, #12]
   217fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21800:	20400001 	.word	0x20400001

00021804 <_fflush_r>:
   21804:	b538      	push	{r3, r4, r5, lr}
   21806:	460d      	mov	r5, r1
   21808:	4604      	mov	r4, r0
   2180a:	b108      	cbz	r0, 21810 <_fflush_r+0xc>
   2180c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2180e:	b1bb      	cbz	r3, 21840 <_fflush_r+0x3c>
   21810:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   21814:	b188      	cbz	r0, 2183a <_fflush_r+0x36>
   21816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21818:	07db      	lsls	r3, r3, #31
   2181a:	d401      	bmi.n	21820 <_fflush_r+0x1c>
   2181c:	0581      	lsls	r1, r0, #22
   2181e:	d517      	bpl.n	21850 <_fflush_r+0x4c>
   21820:	4620      	mov	r0, r4
   21822:	4629      	mov	r1, r5
   21824:	f7ff ff4e 	bl	216c4 <__sflush_r>
   21828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2182a:	07da      	lsls	r2, r3, #31
   2182c:	4604      	mov	r4, r0
   2182e:	d402      	bmi.n	21836 <_fflush_r+0x32>
   21830:	89ab      	ldrh	r3, [r5, #12]
   21832:	059b      	lsls	r3, r3, #22
   21834:	d507      	bpl.n	21846 <_fflush_r+0x42>
   21836:	4620      	mov	r0, r4
   21838:	bd38      	pop	{r3, r4, r5, pc}
   2183a:	4604      	mov	r4, r0
   2183c:	4620      	mov	r0, r4
   2183e:	bd38      	pop	{r3, r4, r5, pc}
   21840:	f000 f838 	bl	218b4 <__sinit>
   21844:	e7e4      	b.n	21810 <_fflush_r+0xc>
   21846:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21848:	f7fc fa94 	bl	1dd74 <__retarget_lock_release_recursive>
   2184c:	4620      	mov	r0, r4
   2184e:	bd38      	pop	{r3, r4, r5, pc}
   21850:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21852:	f7fc fa8d 	bl	1dd70 <__retarget_lock_acquire_recursive>
   21856:	e7e3      	b.n	21820 <_fflush_r+0x1c>

00021858 <_cleanup_r>:
   21858:	4901      	ldr	r1, [pc, #4]	; (21860 <_cleanup_r+0x8>)
   2185a:	f000 b9b3 	b.w	21bc4 <_fwalk_reent>
   2185e:	bf00      	nop
   21860:	000225e9 	.word	0x000225e9

00021864 <std.isra.0>:
   21864:	b510      	push	{r4, lr}
   21866:	2300      	movs	r3, #0
   21868:	4604      	mov	r4, r0
   2186a:	8181      	strh	r1, [r0, #12]
   2186c:	81c2      	strh	r2, [r0, #14]
   2186e:	6003      	str	r3, [r0, #0]
   21870:	6043      	str	r3, [r0, #4]
   21872:	6083      	str	r3, [r0, #8]
   21874:	6643      	str	r3, [r0, #100]	; 0x64
   21876:	6103      	str	r3, [r0, #16]
   21878:	6143      	str	r3, [r0, #20]
   2187a:	6183      	str	r3, [r0, #24]
   2187c:	4619      	mov	r1, r3
   2187e:	2208      	movs	r2, #8
   21880:	305c      	adds	r0, #92	; 0x5c
   21882:	f7fc fed3 	bl	1e62c <memset>
   21886:	4807      	ldr	r0, [pc, #28]	; (218a4 <std.isra.0+0x40>)
   21888:	4907      	ldr	r1, [pc, #28]	; (218a8 <std.isra.0+0x44>)
   2188a:	4a08      	ldr	r2, [pc, #32]	; (218ac <std.isra.0+0x48>)
   2188c:	4b08      	ldr	r3, [pc, #32]	; (218b0 <std.isra.0+0x4c>)
   2188e:	6220      	str	r0, [r4, #32]
   21890:	61e4      	str	r4, [r4, #28]
   21892:	6261      	str	r1, [r4, #36]	; 0x24
   21894:	62a2      	str	r2, [r4, #40]	; 0x28
   21896:	62e3      	str	r3, [r4, #44]	; 0x2c
   21898:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2189c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   218a0:	f7fc ba62 	b.w	1dd68 <__retarget_lock_init_recursive>
   218a4:	0002231d 	.word	0x0002231d
   218a8:	00022341 	.word	0x00022341
   218ac:	0002237d 	.word	0x0002237d
   218b0:	0002239d 	.word	0x0002239d

000218b4 <__sinit>:
   218b4:	b510      	push	{r4, lr}
   218b6:	4604      	mov	r4, r0
   218b8:	4812      	ldr	r0, [pc, #72]	; (21904 <__sinit+0x50>)
   218ba:	f7fc fa59 	bl	1dd70 <__retarget_lock_acquire_recursive>
   218be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   218c0:	b9d2      	cbnz	r2, 218f8 <__sinit+0x44>
   218c2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   218c6:	4810      	ldr	r0, [pc, #64]	; (21908 <__sinit+0x54>)
   218c8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   218cc:	2103      	movs	r1, #3
   218ce:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   218d2:	63e0      	str	r0, [r4, #60]	; 0x3c
   218d4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   218d8:	6860      	ldr	r0, [r4, #4]
   218da:	2104      	movs	r1, #4
   218dc:	f7ff ffc2 	bl	21864 <std.isra.0>
   218e0:	2201      	movs	r2, #1
   218e2:	2109      	movs	r1, #9
   218e4:	68a0      	ldr	r0, [r4, #8]
   218e6:	f7ff ffbd 	bl	21864 <std.isra.0>
   218ea:	2202      	movs	r2, #2
   218ec:	2112      	movs	r1, #18
   218ee:	68e0      	ldr	r0, [r4, #12]
   218f0:	f7ff ffb8 	bl	21864 <std.isra.0>
   218f4:	2301      	movs	r3, #1
   218f6:	63a3      	str	r3, [r4, #56]	; 0x38
   218f8:	4802      	ldr	r0, [pc, #8]	; (21904 <__sinit+0x50>)
   218fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   218fe:	f7fc ba39 	b.w	1dd74 <__retarget_lock_release_recursive>
   21902:	bf00      	nop
   21904:	20002394 	.word	0x20002394
   21908:	00021859 	.word	0x00021859

0002190c <__sfp_lock_acquire>:
   2190c:	4801      	ldr	r0, [pc, #4]	; (21914 <__sfp_lock_acquire+0x8>)
   2190e:	f7fc ba2f 	b.w	1dd70 <__retarget_lock_acquire_recursive>
   21912:	bf00      	nop
   21914:	200023a8 	.word	0x200023a8

00021918 <__sfp_lock_release>:
   21918:	4801      	ldr	r0, [pc, #4]	; (21920 <__sfp_lock_release+0x8>)
   2191a:	f7fc ba2b 	b.w	1dd74 <__retarget_lock_release_recursive>
   2191e:	bf00      	nop
   21920:	200023a8 	.word	0x200023a8

00021924 <__libc_fini_array>:
   21924:	b538      	push	{r3, r4, r5, lr}
   21926:	4c0a      	ldr	r4, [pc, #40]	; (21950 <__libc_fini_array+0x2c>)
   21928:	4d0a      	ldr	r5, [pc, #40]	; (21954 <__libc_fini_array+0x30>)
   2192a:	1b64      	subs	r4, r4, r5
   2192c:	10a4      	asrs	r4, r4, #2
   2192e:	d00a      	beq.n	21946 <__libc_fini_array+0x22>
   21930:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   21934:	3b01      	subs	r3, #1
   21936:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2193a:	3c01      	subs	r4, #1
   2193c:	f855 3904 	ldr.w	r3, [r5], #-4
   21940:	4798      	blx	r3
   21942:	2c00      	cmp	r4, #0
   21944:	d1f9      	bne.n	2193a <__libc_fini_array+0x16>
   21946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2194a:	f001 b8b3 	b.w	22ab4 <_fini>
   2194e:	bf00      	nop
   21950:	00022afc 	.word	0x00022afc
   21954:	00022af8 	.word	0x00022af8

00021958 <_malloc_trim_r>:
   21958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2195a:	4f24      	ldr	r7, [pc, #144]	; (219ec <_malloc_trim_r+0x94>)
   2195c:	460c      	mov	r4, r1
   2195e:	4606      	mov	r6, r0
   21960:	f7fc feb2 	bl	1e6c8 <__malloc_lock>
   21964:	68bb      	ldr	r3, [r7, #8]
   21966:	685d      	ldr	r5, [r3, #4]
   21968:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2196c:	310f      	adds	r1, #15
   2196e:	f025 0503 	bic.w	r5, r5, #3
   21972:	4429      	add	r1, r5
   21974:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   21978:	f021 010f 	bic.w	r1, r1, #15
   2197c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21980:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21984:	db07      	blt.n	21996 <_malloc_trim_r+0x3e>
   21986:	2100      	movs	r1, #0
   21988:	4630      	mov	r0, r6
   2198a:	f7fd f88f 	bl	1eaac <_sbrk_r>
   2198e:	68bb      	ldr	r3, [r7, #8]
   21990:	442b      	add	r3, r5
   21992:	4298      	cmp	r0, r3
   21994:	d004      	beq.n	219a0 <_malloc_trim_r+0x48>
   21996:	4630      	mov	r0, r6
   21998:	f7fc fe9c 	bl	1e6d4 <__malloc_unlock>
   2199c:	2000      	movs	r0, #0
   2199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219a0:	4261      	negs	r1, r4
   219a2:	4630      	mov	r0, r6
   219a4:	f7fd f882 	bl	1eaac <_sbrk_r>
   219a8:	3001      	adds	r0, #1
   219aa:	d00d      	beq.n	219c8 <_malloc_trim_r+0x70>
   219ac:	4b10      	ldr	r3, [pc, #64]	; (219f0 <_malloc_trim_r+0x98>)
   219ae:	68ba      	ldr	r2, [r7, #8]
   219b0:	6819      	ldr	r1, [r3, #0]
   219b2:	1b2d      	subs	r5, r5, r4
   219b4:	f045 0501 	orr.w	r5, r5, #1
   219b8:	4630      	mov	r0, r6
   219ba:	1b09      	subs	r1, r1, r4
   219bc:	6055      	str	r5, [r2, #4]
   219be:	6019      	str	r1, [r3, #0]
   219c0:	f7fc fe88 	bl	1e6d4 <__malloc_unlock>
   219c4:	2001      	movs	r0, #1
   219c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219c8:	2100      	movs	r1, #0
   219ca:	4630      	mov	r0, r6
   219cc:	f7fd f86e 	bl	1eaac <_sbrk_r>
   219d0:	68ba      	ldr	r2, [r7, #8]
   219d2:	1a83      	subs	r3, r0, r2
   219d4:	2b0f      	cmp	r3, #15
   219d6:	ddde      	ble.n	21996 <_malloc_trim_r+0x3e>
   219d8:	4c06      	ldr	r4, [pc, #24]	; (219f4 <_malloc_trim_r+0x9c>)
   219da:	4905      	ldr	r1, [pc, #20]	; (219f0 <_malloc_trim_r+0x98>)
   219dc:	6824      	ldr	r4, [r4, #0]
   219de:	f043 0301 	orr.w	r3, r3, #1
   219e2:	1b00      	subs	r0, r0, r4
   219e4:	6053      	str	r3, [r2, #4]
   219e6:	6008      	str	r0, [r1, #0]
   219e8:	e7d5      	b.n	21996 <_malloc_trim_r+0x3e>
   219ea:	bf00      	nop
   219ec:	2000069c 	.word	0x2000069c
   219f0:	200022b0 	.word	0x200022b0
   219f4:	20000aa4 	.word	0x20000aa4

000219f8 <_free_r>:
   219f8:	2900      	cmp	r1, #0
   219fa:	d044      	beq.n	21a86 <_free_r+0x8e>
   219fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a00:	460d      	mov	r5, r1
   21a02:	4680      	mov	r8, r0
   21a04:	f7fc fe60 	bl	1e6c8 <__malloc_lock>
   21a08:	f855 7c04 	ldr.w	r7, [r5, #-4]
   21a0c:	4969      	ldr	r1, [pc, #420]	; (21bb4 <_free_r+0x1bc>)
   21a0e:	f027 0301 	bic.w	r3, r7, #1
   21a12:	f1a5 0408 	sub.w	r4, r5, #8
   21a16:	18e2      	adds	r2, r4, r3
   21a18:	688e      	ldr	r6, [r1, #8]
   21a1a:	6850      	ldr	r0, [r2, #4]
   21a1c:	42b2      	cmp	r2, r6
   21a1e:	f020 0003 	bic.w	r0, r0, #3
   21a22:	d05e      	beq.n	21ae2 <_free_r+0xea>
   21a24:	07fe      	lsls	r6, r7, #31
   21a26:	6050      	str	r0, [r2, #4]
   21a28:	d40b      	bmi.n	21a42 <_free_r+0x4a>
   21a2a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   21a2e:	1be4      	subs	r4, r4, r7
   21a30:	f101 0e08 	add.w	lr, r1, #8
   21a34:	68a5      	ldr	r5, [r4, #8]
   21a36:	4575      	cmp	r5, lr
   21a38:	443b      	add	r3, r7
   21a3a:	d06d      	beq.n	21b18 <_free_r+0x120>
   21a3c:	68e7      	ldr	r7, [r4, #12]
   21a3e:	60ef      	str	r7, [r5, #12]
   21a40:	60bd      	str	r5, [r7, #8]
   21a42:	1815      	adds	r5, r2, r0
   21a44:	686d      	ldr	r5, [r5, #4]
   21a46:	07ed      	lsls	r5, r5, #31
   21a48:	d53e      	bpl.n	21ac8 <_free_r+0xd0>
   21a4a:	f043 0201 	orr.w	r2, r3, #1
   21a4e:	6062      	str	r2, [r4, #4]
   21a50:	50e3      	str	r3, [r4, r3]
   21a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21a56:	d217      	bcs.n	21a88 <_free_r+0x90>
   21a58:	08db      	lsrs	r3, r3, #3
   21a5a:	1c58      	adds	r0, r3, #1
   21a5c:	109a      	asrs	r2, r3, #2
   21a5e:	684d      	ldr	r5, [r1, #4]
   21a60:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   21a64:	60a7      	str	r7, [r4, #8]
   21a66:	2301      	movs	r3, #1
   21a68:	4093      	lsls	r3, r2
   21a6a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   21a6e:	432b      	orrs	r3, r5
   21a70:	3a08      	subs	r2, #8
   21a72:	60e2      	str	r2, [r4, #12]
   21a74:	604b      	str	r3, [r1, #4]
   21a76:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   21a7a:	60fc      	str	r4, [r7, #12]
   21a7c:	4640      	mov	r0, r8
   21a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21a82:	f7fc be27 	b.w	1e6d4 <__malloc_unlock>
   21a86:	4770      	bx	lr
   21a88:	0a5a      	lsrs	r2, r3, #9
   21a8a:	2a04      	cmp	r2, #4
   21a8c:	d852      	bhi.n	21b34 <_free_r+0x13c>
   21a8e:	099a      	lsrs	r2, r3, #6
   21a90:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21a94:	00ff      	lsls	r7, r7, #3
   21a96:	f102 0538 	add.w	r5, r2, #56	; 0x38
   21a9a:	19c8      	adds	r0, r1, r7
   21a9c:	59ca      	ldr	r2, [r1, r7]
   21a9e:	3808      	subs	r0, #8
   21aa0:	4290      	cmp	r0, r2
   21aa2:	d04f      	beq.n	21b44 <_free_r+0x14c>
   21aa4:	6851      	ldr	r1, [r2, #4]
   21aa6:	f021 0103 	bic.w	r1, r1, #3
   21aaa:	428b      	cmp	r3, r1
   21aac:	d232      	bcs.n	21b14 <_free_r+0x11c>
   21aae:	6892      	ldr	r2, [r2, #8]
   21ab0:	4290      	cmp	r0, r2
   21ab2:	d1f7      	bne.n	21aa4 <_free_r+0xac>
   21ab4:	68c3      	ldr	r3, [r0, #12]
   21ab6:	60a0      	str	r0, [r4, #8]
   21ab8:	60e3      	str	r3, [r4, #12]
   21aba:	609c      	str	r4, [r3, #8]
   21abc:	60c4      	str	r4, [r0, #12]
   21abe:	4640      	mov	r0, r8
   21ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21ac4:	f7fc be06 	b.w	1e6d4 <__malloc_unlock>
   21ac8:	6895      	ldr	r5, [r2, #8]
   21aca:	4f3b      	ldr	r7, [pc, #236]	; (21bb8 <_free_r+0x1c0>)
   21acc:	42bd      	cmp	r5, r7
   21ace:	4403      	add	r3, r0
   21ad0:	d040      	beq.n	21b54 <_free_r+0x15c>
   21ad2:	68d0      	ldr	r0, [r2, #12]
   21ad4:	60e8      	str	r0, [r5, #12]
   21ad6:	f043 0201 	orr.w	r2, r3, #1
   21ada:	6085      	str	r5, [r0, #8]
   21adc:	6062      	str	r2, [r4, #4]
   21ade:	50e3      	str	r3, [r4, r3]
   21ae0:	e7b7      	b.n	21a52 <_free_r+0x5a>
   21ae2:	07ff      	lsls	r7, r7, #31
   21ae4:	4403      	add	r3, r0
   21ae6:	d407      	bmi.n	21af8 <_free_r+0x100>
   21ae8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   21aec:	1aa4      	subs	r4, r4, r2
   21aee:	4413      	add	r3, r2
   21af0:	68a0      	ldr	r0, [r4, #8]
   21af2:	68e2      	ldr	r2, [r4, #12]
   21af4:	60c2      	str	r2, [r0, #12]
   21af6:	6090      	str	r0, [r2, #8]
   21af8:	4a30      	ldr	r2, [pc, #192]	; (21bbc <_free_r+0x1c4>)
   21afa:	6812      	ldr	r2, [r2, #0]
   21afc:	f043 0001 	orr.w	r0, r3, #1
   21b00:	4293      	cmp	r3, r2
   21b02:	6060      	str	r0, [r4, #4]
   21b04:	608c      	str	r4, [r1, #8]
   21b06:	d3b9      	bcc.n	21a7c <_free_r+0x84>
   21b08:	4b2d      	ldr	r3, [pc, #180]	; (21bc0 <_free_r+0x1c8>)
   21b0a:	4640      	mov	r0, r8
   21b0c:	6819      	ldr	r1, [r3, #0]
   21b0e:	f7ff ff23 	bl	21958 <_malloc_trim_r>
   21b12:	e7b3      	b.n	21a7c <_free_r+0x84>
   21b14:	4610      	mov	r0, r2
   21b16:	e7cd      	b.n	21ab4 <_free_r+0xbc>
   21b18:	1811      	adds	r1, r2, r0
   21b1a:	6849      	ldr	r1, [r1, #4]
   21b1c:	07c9      	lsls	r1, r1, #31
   21b1e:	d444      	bmi.n	21baa <_free_r+0x1b2>
   21b20:	6891      	ldr	r1, [r2, #8]
   21b22:	68d2      	ldr	r2, [r2, #12]
   21b24:	60ca      	str	r2, [r1, #12]
   21b26:	4403      	add	r3, r0
   21b28:	f043 0001 	orr.w	r0, r3, #1
   21b2c:	6091      	str	r1, [r2, #8]
   21b2e:	6060      	str	r0, [r4, #4]
   21b30:	50e3      	str	r3, [r4, r3]
   21b32:	e7a3      	b.n	21a7c <_free_r+0x84>
   21b34:	2a14      	cmp	r2, #20
   21b36:	d816      	bhi.n	21b66 <_free_r+0x16e>
   21b38:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   21b3c:	00ff      	lsls	r7, r7, #3
   21b3e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21b42:	e7aa      	b.n	21a9a <_free_r+0xa2>
   21b44:	10aa      	asrs	r2, r5, #2
   21b46:	2301      	movs	r3, #1
   21b48:	684d      	ldr	r5, [r1, #4]
   21b4a:	4093      	lsls	r3, r2
   21b4c:	432b      	orrs	r3, r5
   21b4e:	604b      	str	r3, [r1, #4]
   21b50:	4603      	mov	r3, r0
   21b52:	e7b0      	b.n	21ab6 <_free_r+0xbe>
   21b54:	f043 0201 	orr.w	r2, r3, #1
   21b58:	614c      	str	r4, [r1, #20]
   21b5a:	610c      	str	r4, [r1, #16]
   21b5c:	60e5      	str	r5, [r4, #12]
   21b5e:	60a5      	str	r5, [r4, #8]
   21b60:	6062      	str	r2, [r4, #4]
   21b62:	50e3      	str	r3, [r4, r3]
   21b64:	e78a      	b.n	21a7c <_free_r+0x84>
   21b66:	2a54      	cmp	r2, #84	; 0x54
   21b68:	d806      	bhi.n	21b78 <_free_r+0x180>
   21b6a:	0b1a      	lsrs	r2, r3, #12
   21b6c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21b70:	00ff      	lsls	r7, r7, #3
   21b72:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21b76:	e790      	b.n	21a9a <_free_r+0xa2>
   21b78:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21b7c:	d806      	bhi.n	21b8c <_free_r+0x194>
   21b7e:	0bda      	lsrs	r2, r3, #15
   21b80:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21b84:	00ff      	lsls	r7, r7, #3
   21b86:	f102 0577 	add.w	r5, r2, #119	; 0x77
   21b8a:	e786      	b.n	21a9a <_free_r+0xa2>
   21b8c:	f240 5054 	movw	r0, #1364	; 0x554
   21b90:	4282      	cmp	r2, r0
   21b92:	d806      	bhi.n	21ba2 <_free_r+0x1aa>
   21b94:	0c9a      	lsrs	r2, r3, #18
   21b96:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   21b9a:	00ff      	lsls	r7, r7, #3
   21b9c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21ba0:	e77b      	b.n	21a9a <_free_r+0xa2>
   21ba2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21ba6:	257e      	movs	r5, #126	; 0x7e
   21ba8:	e777      	b.n	21a9a <_free_r+0xa2>
   21baa:	f043 0101 	orr.w	r1, r3, #1
   21bae:	6061      	str	r1, [r4, #4]
   21bb0:	6013      	str	r3, [r2, #0]
   21bb2:	e763      	b.n	21a7c <_free_r+0x84>
   21bb4:	2000069c 	.word	0x2000069c
   21bb8:	200006a4 	.word	0x200006a4
   21bbc:	20000aa8 	.word	0x20000aa8
   21bc0:	200022e0 	.word	0x200022e0

00021bc4 <_fwalk_reent>:
   21bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21bc8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   21bcc:	d01f      	beq.n	21c0e <_fwalk_reent+0x4a>
   21bce:	4688      	mov	r8, r1
   21bd0:	4606      	mov	r6, r0
   21bd2:	f04f 0900 	mov.w	r9, #0
   21bd6:	687d      	ldr	r5, [r7, #4]
   21bd8:	68bc      	ldr	r4, [r7, #8]
   21bda:	3d01      	subs	r5, #1
   21bdc:	d411      	bmi.n	21c02 <_fwalk_reent+0x3e>
   21bde:	89a3      	ldrh	r3, [r4, #12]
   21be0:	2b01      	cmp	r3, #1
   21be2:	f105 35ff 	add.w	r5, r5, #4294967295
   21be6:	d908      	bls.n	21bfa <_fwalk_reent+0x36>
   21be8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21bec:	3301      	adds	r3, #1
   21bee:	4621      	mov	r1, r4
   21bf0:	4630      	mov	r0, r6
   21bf2:	d002      	beq.n	21bfa <_fwalk_reent+0x36>
   21bf4:	47c0      	blx	r8
   21bf6:	ea49 0900 	orr.w	r9, r9, r0
   21bfa:	1c6b      	adds	r3, r5, #1
   21bfc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21c00:	d1ed      	bne.n	21bde <_fwalk_reent+0x1a>
   21c02:	683f      	ldr	r7, [r7, #0]
   21c04:	2f00      	cmp	r7, #0
   21c06:	d1e6      	bne.n	21bd6 <_fwalk_reent+0x12>
   21c08:	4648      	mov	r0, r9
   21c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21c0e:	46b9      	mov	r9, r7
   21c10:	4648      	mov	r0, r9
   21c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21c16:	bf00      	nop

00021c18 <_localeconv_r>:
   21c18:	4a04      	ldr	r2, [pc, #16]	; (21c2c <_localeconv_r+0x14>)
   21c1a:	4b05      	ldr	r3, [pc, #20]	; (21c30 <_localeconv_r+0x18>)
   21c1c:	6812      	ldr	r2, [r2, #0]
   21c1e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   21c20:	2800      	cmp	r0, #0
   21c22:	bf08      	it	eq
   21c24:	4618      	moveq	r0, r3
   21c26:	30f0      	adds	r0, #240	; 0xf0
   21c28:	4770      	bx	lr
   21c2a:	bf00      	nop
   21c2c:	20000100 	.word	0x20000100
   21c30:	20000530 	.word	0x20000530

00021c34 <__swhatbuf_r>:
   21c34:	b570      	push	{r4, r5, r6, lr}
   21c36:	460c      	mov	r4, r1
   21c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21c3c:	2900      	cmp	r1, #0
   21c3e:	b090      	sub	sp, #64	; 0x40
   21c40:	4615      	mov	r5, r2
   21c42:	461e      	mov	r6, r3
   21c44:	db14      	blt.n	21c70 <__swhatbuf_r+0x3c>
   21c46:	aa01      	add	r2, sp, #4
   21c48:	f000 fd30 	bl	226ac <_fstat_r>
   21c4c:	2800      	cmp	r0, #0
   21c4e:	db0f      	blt.n	21c70 <__swhatbuf_r+0x3c>
   21c50:	9a02      	ldr	r2, [sp, #8]
   21c52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21c56:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21c5a:	fab2 f282 	clz	r2, r2
   21c5e:	0952      	lsrs	r2, r2, #5
   21c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21c64:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21c68:	6032      	str	r2, [r6, #0]
   21c6a:	602b      	str	r3, [r5, #0]
   21c6c:	b010      	add	sp, #64	; 0x40
   21c6e:	bd70      	pop	{r4, r5, r6, pc}
   21c70:	89a2      	ldrh	r2, [r4, #12]
   21c72:	2300      	movs	r3, #0
   21c74:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21c78:	6033      	str	r3, [r6, #0]
   21c7a:	d004      	beq.n	21c86 <__swhatbuf_r+0x52>
   21c7c:	2240      	movs	r2, #64	; 0x40
   21c7e:	4618      	mov	r0, r3
   21c80:	602a      	str	r2, [r5, #0]
   21c82:	b010      	add	sp, #64	; 0x40
   21c84:	bd70      	pop	{r4, r5, r6, pc}
   21c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21c8a:	602b      	str	r3, [r5, #0]
   21c8c:	b010      	add	sp, #64	; 0x40
   21c8e:	bd70      	pop	{r4, r5, r6, pc}

00021c90 <__smakebuf_r>:
   21c90:	898a      	ldrh	r2, [r1, #12]
   21c92:	0792      	lsls	r2, r2, #30
   21c94:	460b      	mov	r3, r1
   21c96:	d506      	bpl.n	21ca6 <__smakebuf_r+0x16>
   21c98:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21c9c:	2101      	movs	r1, #1
   21c9e:	601a      	str	r2, [r3, #0]
   21ca0:	611a      	str	r2, [r3, #16]
   21ca2:	6159      	str	r1, [r3, #20]
   21ca4:	4770      	bx	lr
   21ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ca8:	b083      	sub	sp, #12
   21caa:	ab01      	add	r3, sp, #4
   21cac:	466a      	mov	r2, sp
   21cae:	460c      	mov	r4, r1
   21cb0:	4606      	mov	r6, r0
   21cb2:	f7ff ffbf 	bl	21c34 <__swhatbuf_r>
   21cb6:	9900      	ldr	r1, [sp, #0]
   21cb8:	4605      	mov	r5, r0
   21cba:	4630      	mov	r0, r6
   21cbc:	f7fc f86c 	bl	1dd98 <_malloc_r>
   21cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21cc4:	b1d8      	cbz	r0, 21cfe <__smakebuf_r+0x6e>
   21cc6:	9a01      	ldr	r2, [sp, #4]
   21cc8:	4f15      	ldr	r7, [pc, #84]	; (21d20 <__smakebuf_r+0x90>)
   21cca:	9900      	ldr	r1, [sp, #0]
   21ccc:	63f7      	str	r7, [r6, #60]	; 0x3c
   21cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21cd2:	81a3      	strh	r3, [r4, #12]
   21cd4:	6020      	str	r0, [r4, #0]
   21cd6:	6120      	str	r0, [r4, #16]
   21cd8:	6161      	str	r1, [r4, #20]
   21cda:	b91a      	cbnz	r2, 21ce4 <__smakebuf_r+0x54>
   21cdc:	432b      	orrs	r3, r5
   21cde:	81a3      	strh	r3, [r4, #12]
   21ce0:	b003      	add	sp, #12
   21ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ce4:	4630      	mov	r0, r6
   21ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21cea:	f000 fcf3 	bl	226d4 <_isatty_r>
   21cee:	b1a0      	cbz	r0, 21d1a <__smakebuf_r+0x8a>
   21cf0:	89a3      	ldrh	r3, [r4, #12]
   21cf2:	f023 0303 	bic.w	r3, r3, #3
   21cf6:	f043 0301 	orr.w	r3, r3, #1
   21cfa:	b21b      	sxth	r3, r3
   21cfc:	e7ee      	b.n	21cdc <__smakebuf_r+0x4c>
   21cfe:	059a      	lsls	r2, r3, #22
   21d00:	d4ee      	bmi.n	21ce0 <__smakebuf_r+0x50>
   21d02:	f023 0303 	bic.w	r3, r3, #3
   21d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21d0a:	f043 0302 	orr.w	r3, r3, #2
   21d0e:	2101      	movs	r1, #1
   21d10:	81a3      	strh	r3, [r4, #12]
   21d12:	6022      	str	r2, [r4, #0]
   21d14:	6122      	str	r2, [r4, #16]
   21d16:	6161      	str	r1, [r4, #20]
   21d18:	e7e2      	b.n	21ce0 <__smakebuf_r+0x50>
   21d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21d1e:	e7dd      	b.n	21cdc <__smakebuf_r+0x4c>
   21d20:	00021859 	.word	0x00021859

00021d24 <_Balloc>:
   21d24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21d26:	b570      	push	{r4, r5, r6, lr}
   21d28:	4605      	mov	r5, r0
   21d2a:	460c      	mov	r4, r1
   21d2c:	b14b      	cbz	r3, 21d42 <_Balloc+0x1e>
   21d2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21d32:	b180      	cbz	r0, 21d56 <_Balloc+0x32>
   21d34:	6802      	ldr	r2, [r0, #0]
   21d36:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21d3a:	2300      	movs	r3, #0
   21d3c:	6103      	str	r3, [r0, #16]
   21d3e:	60c3      	str	r3, [r0, #12]
   21d40:	bd70      	pop	{r4, r5, r6, pc}
   21d42:	2221      	movs	r2, #33	; 0x21
   21d44:	2104      	movs	r1, #4
   21d46:	f000 fc0d 	bl	22564 <_calloc_r>
   21d4a:	64e8      	str	r0, [r5, #76]	; 0x4c
   21d4c:	4603      	mov	r3, r0
   21d4e:	2800      	cmp	r0, #0
   21d50:	d1ed      	bne.n	21d2e <_Balloc+0xa>
   21d52:	2000      	movs	r0, #0
   21d54:	bd70      	pop	{r4, r5, r6, pc}
   21d56:	2101      	movs	r1, #1
   21d58:	fa01 f604 	lsl.w	r6, r1, r4
   21d5c:	1d72      	adds	r2, r6, #5
   21d5e:	4628      	mov	r0, r5
   21d60:	0092      	lsls	r2, r2, #2
   21d62:	f000 fbff 	bl	22564 <_calloc_r>
   21d66:	2800      	cmp	r0, #0
   21d68:	d0f3      	beq.n	21d52 <_Balloc+0x2e>
   21d6a:	6044      	str	r4, [r0, #4]
   21d6c:	6086      	str	r6, [r0, #8]
   21d6e:	e7e4      	b.n	21d3a <_Balloc+0x16>

00021d70 <_Bfree>:
   21d70:	b131      	cbz	r1, 21d80 <_Bfree+0x10>
   21d72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21d74:	684a      	ldr	r2, [r1, #4]
   21d76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21d7a:	6008      	str	r0, [r1, #0]
   21d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21d80:	4770      	bx	lr
   21d82:	bf00      	nop

00021d84 <__multadd>:
   21d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d86:	690c      	ldr	r4, [r1, #16]
   21d88:	b083      	sub	sp, #12
   21d8a:	460d      	mov	r5, r1
   21d8c:	4606      	mov	r6, r0
   21d8e:	f101 0e14 	add.w	lr, r1, #20
   21d92:	2700      	movs	r7, #0
   21d94:	f8de 0000 	ldr.w	r0, [lr]
   21d98:	b281      	uxth	r1, r0
   21d9a:	fb02 3301 	mla	r3, r2, r1, r3
   21d9e:	0c01      	lsrs	r1, r0, #16
   21da0:	0c18      	lsrs	r0, r3, #16
   21da2:	fb02 0101 	mla	r1, r2, r1, r0
   21da6:	b29b      	uxth	r3, r3
   21da8:	3701      	adds	r7, #1
   21daa:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21dae:	42bc      	cmp	r4, r7
   21db0:	f84e 3b04 	str.w	r3, [lr], #4
   21db4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21db8:	dcec      	bgt.n	21d94 <__multadd+0x10>
   21dba:	b13b      	cbz	r3, 21dcc <__multadd+0x48>
   21dbc:	68aa      	ldr	r2, [r5, #8]
   21dbe:	4294      	cmp	r4, r2
   21dc0:	da07      	bge.n	21dd2 <__multadd+0x4e>
   21dc2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21dc6:	3401      	adds	r4, #1
   21dc8:	6153      	str	r3, [r2, #20]
   21dca:	612c      	str	r4, [r5, #16]
   21dcc:	4628      	mov	r0, r5
   21dce:	b003      	add	sp, #12
   21dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21dd2:	6869      	ldr	r1, [r5, #4]
   21dd4:	9301      	str	r3, [sp, #4]
   21dd6:	3101      	adds	r1, #1
   21dd8:	4630      	mov	r0, r6
   21dda:	f7ff ffa3 	bl	21d24 <_Balloc>
   21dde:	692a      	ldr	r2, [r5, #16]
   21de0:	3202      	adds	r2, #2
   21de2:	f105 010c 	add.w	r1, r5, #12
   21de6:	4607      	mov	r7, r0
   21de8:	0092      	lsls	r2, r2, #2
   21dea:	300c      	adds	r0, #12
   21dec:	f7fc fb20 	bl	1e430 <memcpy>
   21df0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21df2:	6869      	ldr	r1, [r5, #4]
   21df4:	9b01      	ldr	r3, [sp, #4]
   21df6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21dfa:	6028      	str	r0, [r5, #0]
   21dfc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21e00:	463d      	mov	r5, r7
   21e02:	e7de      	b.n	21dc2 <__multadd+0x3e>

00021e04 <__hi0bits>:
   21e04:	0c02      	lsrs	r2, r0, #16
   21e06:	0412      	lsls	r2, r2, #16
   21e08:	4603      	mov	r3, r0
   21e0a:	b9b2      	cbnz	r2, 21e3a <__hi0bits+0x36>
   21e0c:	0403      	lsls	r3, r0, #16
   21e0e:	2010      	movs	r0, #16
   21e10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21e14:	bf04      	itt	eq
   21e16:	021b      	lsleq	r3, r3, #8
   21e18:	3008      	addeq	r0, #8
   21e1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21e1e:	bf04      	itt	eq
   21e20:	011b      	lsleq	r3, r3, #4
   21e22:	3004      	addeq	r0, #4
   21e24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21e28:	bf04      	itt	eq
   21e2a:	009b      	lsleq	r3, r3, #2
   21e2c:	3002      	addeq	r0, #2
   21e2e:	2b00      	cmp	r3, #0
   21e30:	db02      	blt.n	21e38 <__hi0bits+0x34>
   21e32:	005b      	lsls	r3, r3, #1
   21e34:	d403      	bmi.n	21e3e <__hi0bits+0x3a>
   21e36:	2020      	movs	r0, #32
   21e38:	4770      	bx	lr
   21e3a:	2000      	movs	r0, #0
   21e3c:	e7e8      	b.n	21e10 <__hi0bits+0xc>
   21e3e:	3001      	adds	r0, #1
   21e40:	4770      	bx	lr
   21e42:	bf00      	nop

00021e44 <__lo0bits>:
   21e44:	6803      	ldr	r3, [r0, #0]
   21e46:	f013 0207 	ands.w	r2, r3, #7
   21e4a:	4601      	mov	r1, r0
   21e4c:	d007      	beq.n	21e5e <__lo0bits+0x1a>
   21e4e:	07da      	lsls	r2, r3, #31
   21e50:	d421      	bmi.n	21e96 <__lo0bits+0x52>
   21e52:	0798      	lsls	r0, r3, #30
   21e54:	d421      	bmi.n	21e9a <__lo0bits+0x56>
   21e56:	089b      	lsrs	r3, r3, #2
   21e58:	600b      	str	r3, [r1, #0]
   21e5a:	2002      	movs	r0, #2
   21e5c:	4770      	bx	lr
   21e5e:	b298      	uxth	r0, r3
   21e60:	b198      	cbz	r0, 21e8a <__lo0bits+0x46>
   21e62:	4610      	mov	r0, r2
   21e64:	f013 0fff 	tst.w	r3, #255	; 0xff
   21e68:	bf04      	itt	eq
   21e6a:	0a1b      	lsreq	r3, r3, #8
   21e6c:	3008      	addeq	r0, #8
   21e6e:	071a      	lsls	r2, r3, #28
   21e70:	bf04      	itt	eq
   21e72:	091b      	lsreq	r3, r3, #4
   21e74:	3004      	addeq	r0, #4
   21e76:	079a      	lsls	r2, r3, #30
   21e78:	bf04      	itt	eq
   21e7a:	089b      	lsreq	r3, r3, #2
   21e7c:	3002      	addeq	r0, #2
   21e7e:	07da      	lsls	r2, r3, #31
   21e80:	d407      	bmi.n	21e92 <__lo0bits+0x4e>
   21e82:	085b      	lsrs	r3, r3, #1
   21e84:	d104      	bne.n	21e90 <__lo0bits+0x4c>
   21e86:	2020      	movs	r0, #32
   21e88:	4770      	bx	lr
   21e8a:	0c1b      	lsrs	r3, r3, #16
   21e8c:	2010      	movs	r0, #16
   21e8e:	e7e9      	b.n	21e64 <__lo0bits+0x20>
   21e90:	3001      	adds	r0, #1
   21e92:	600b      	str	r3, [r1, #0]
   21e94:	4770      	bx	lr
   21e96:	2000      	movs	r0, #0
   21e98:	4770      	bx	lr
   21e9a:	085b      	lsrs	r3, r3, #1
   21e9c:	600b      	str	r3, [r1, #0]
   21e9e:	2001      	movs	r0, #1
   21ea0:	4770      	bx	lr
   21ea2:	bf00      	nop

00021ea4 <__i2b>:
   21ea4:	b510      	push	{r4, lr}
   21ea6:	460c      	mov	r4, r1
   21ea8:	2101      	movs	r1, #1
   21eaa:	f7ff ff3b 	bl	21d24 <_Balloc>
   21eae:	2201      	movs	r2, #1
   21eb0:	6144      	str	r4, [r0, #20]
   21eb2:	6102      	str	r2, [r0, #16]
   21eb4:	bd10      	pop	{r4, pc}
   21eb6:	bf00      	nop

00021eb8 <__multiply>:
   21eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ebc:	690c      	ldr	r4, [r1, #16]
   21ebe:	6915      	ldr	r5, [r2, #16]
   21ec0:	42ac      	cmp	r4, r5
   21ec2:	b083      	sub	sp, #12
   21ec4:	468b      	mov	fp, r1
   21ec6:	4616      	mov	r6, r2
   21ec8:	da04      	bge.n	21ed4 <__multiply+0x1c>
   21eca:	4622      	mov	r2, r4
   21ecc:	46b3      	mov	fp, r6
   21ece:	462c      	mov	r4, r5
   21ed0:	460e      	mov	r6, r1
   21ed2:	4615      	mov	r5, r2
   21ed4:	f8db 3008 	ldr.w	r3, [fp, #8]
   21ed8:	f8db 1004 	ldr.w	r1, [fp, #4]
   21edc:	eb04 0805 	add.w	r8, r4, r5
   21ee0:	4598      	cmp	r8, r3
   21ee2:	bfc8      	it	gt
   21ee4:	3101      	addgt	r1, #1
   21ee6:	f7ff ff1d 	bl	21d24 <_Balloc>
   21eea:	f100 0914 	add.w	r9, r0, #20
   21eee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21ef2:	45d1      	cmp	r9, sl
   21ef4:	9000      	str	r0, [sp, #0]
   21ef6:	d205      	bcs.n	21f04 <__multiply+0x4c>
   21ef8:	464b      	mov	r3, r9
   21efa:	2100      	movs	r1, #0
   21efc:	f843 1b04 	str.w	r1, [r3], #4
   21f00:	459a      	cmp	sl, r3
   21f02:	d8fb      	bhi.n	21efc <__multiply+0x44>
   21f04:	f106 0c14 	add.w	ip, r6, #20
   21f08:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21f0c:	f10b 0b14 	add.w	fp, fp, #20
   21f10:	459c      	cmp	ip, r3
   21f12:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21f16:	d24c      	bcs.n	21fb2 <__multiply+0xfa>
   21f18:	f8cd a004 	str.w	sl, [sp, #4]
   21f1c:	469a      	mov	sl, r3
   21f1e:	f8dc 5000 	ldr.w	r5, [ip]
   21f22:	b2af      	uxth	r7, r5
   21f24:	b1ef      	cbz	r7, 21f62 <__multiply+0xaa>
   21f26:	2100      	movs	r1, #0
   21f28:	464d      	mov	r5, r9
   21f2a:	465e      	mov	r6, fp
   21f2c:	460c      	mov	r4, r1
   21f2e:	f856 2b04 	ldr.w	r2, [r6], #4
   21f32:	6828      	ldr	r0, [r5, #0]
   21f34:	b293      	uxth	r3, r2
   21f36:	b281      	uxth	r1, r0
   21f38:	fb07 1303 	mla	r3, r7, r3, r1
   21f3c:	0c12      	lsrs	r2, r2, #16
   21f3e:	0c01      	lsrs	r1, r0, #16
   21f40:	4423      	add	r3, r4
   21f42:	fb07 1102 	mla	r1, r7, r2, r1
   21f46:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21f4a:	b29b      	uxth	r3, r3
   21f4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21f50:	45b6      	cmp	lr, r6
   21f52:	f845 3b04 	str.w	r3, [r5], #4
   21f56:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21f5a:	d8e8      	bhi.n	21f2e <__multiply+0x76>
   21f5c:	602c      	str	r4, [r5, #0]
   21f5e:	f8dc 5000 	ldr.w	r5, [ip]
   21f62:	0c2d      	lsrs	r5, r5, #16
   21f64:	d01d      	beq.n	21fa2 <__multiply+0xea>
   21f66:	f8d9 3000 	ldr.w	r3, [r9]
   21f6a:	4648      	mov	r0, r9
   21f6c:	461c      	mov	r4, r3
   21f6e:	4659      	mov	r1, fp
   21f70:	2200      	movs	r2, #0
   21f72:	880e      	ldrh	r6, [r1, #0]
   21f74:	0c24      	lsrs	r4, r4, #16
   21f76:	fb05 4406 	mla	r4, r5, r6, r4
   21f7a:	4422      	add	r2, r4
   21f7c:	b29b      	uxth	r3, r3
   21f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21f82:	f840 3b04 	str.w	r3, [r0], #4
   21f86:	f851 3b04 	ldr.w	r3, [r1], #4
   21f8a:	6804      	ldr	r4, [r0, #0]
   21f8c:	0c1b      	lsrs	r3, r3, #16
   21f8e:	b2a6      	uxth	r6, r4
   21f90:	fb05 6303 	mla	r3, r5, r3, r6
   21f94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21f98:	458e      	cmp	lr, r1
   21f9a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21f9e:	d8e8      	bhi.n	21f72 <__multiply+0xba>
   21fa0:	6003      	str	r3, [r0, #0]
   21fa2:	f10c 0c04 	add.w	ip, ip, #4
   21fa6:	45e2      	cmp	sl, ip
   21fa8:	f109 0904 	add.w	r9, r9, #4
   21fac:	d8b7      	bhi.n	21f1e <__multiply+0x66>
   21fae:	f8dd a004 	ldr.w	sl, [sp, #4]
   21fb2:	f1b8 0f00 	cmp.w	r8, #0
   21fb6:	dd0b      	ble.n	21fd0 <__multiply+0x118>
   21fb8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21fbc:	f1aa 0a04 	sub.w	sl, sl, #4
   21fc0:	b11b      	cbz	r3, 21fca <__multiply+0x112>
   21fc2:	e005      	b.n	21fd0 <__multiply+0x118>
   21fc4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21fc8:	b913      	cbnz	r3, 21fd0 <__multiply+0x118>
   21fca:	f1b8 0801 	subs.w	r8, r8, #1
   21fce:	d1f9      	bne.n	21fc4 <__multiply+0x10c>
   21fd0:	9800      	ldr	r0, [sp, #0]
   21fd2:	f8c0 8010 	str.w	r8, [r0, #16]
   21fd6:	b003      	add	sp, #12
   21fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021fdc <__pow5mult>:
   21fdc:	f012 0303 	ands.w	r3, r2, #3
   21fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21fe4:	4614      	mov	r4, r2
   21fe6:	4607      	mov	r7, r0
   21fe8:	d12e      	bne.n	22048 <__pow5mult+0x6c>
   21fea:	460d      	mov	r5, r1
   21fec:	10a4      	asrs	r4, r4, #2
   21fee:	d01c      	beq.n	2202a <__pow5mult+0x4e>
   21ff0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21ff2:	b396      	cbz	r6, 2205a <__pow5mult+0x7e>
   21ff4:	07e3      	lsls	r3, r4, #31
   21ff6:	f04f 0800 	mov.w	r8, #0
   21ffa:	d406      	bmi.n	2200a <__pow5mult+0x2e>
   21ffc:	1064      	asrs	r4, r4, #1
   21ffe:	d014      	beq.n	2202a <__pow5mult+0x4e>
   22000:	6830      	ldr	r0, [r6, #0]
   22002:	b1a8      	cbz	r0, 22030 <__pow5mult+0x54>
   22004:	4606      	mov	r6, r0
   22006:	07e3      	lsls	r3, r4, #31
   22008:	d5f8      	bpl.n	21ffc <__pow5mult+0x20>
   2200a:	4632      	mov	r2, r6
   2200c:	4629      	mov	r1, r5
   2200e:	4638      	mov	r0, r7
   22010:	f7ff ff52 	bl	21eb8 <__multiply>
   22014:	b1b5      	cbz	r5, 22044 <__pow5mult+0x68>
   22016:	686a      	ldr	r2, [r5, #4]
   22018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2201a:	1064      	asrs	r4, r4, #1
   2201c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22020:	6029      	str	r1, [r5, #0]
   22022:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   22026:	4605      	mov	r5, r0
   22028:	d1ea      	bne.n	22000 <__pow5mult+0x24>
   2202a:	4628      	mov	r0, r5
   2202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22030:	4632      	mov	r2, r6
   22032:	4631      	mov	r1, r6
   22034:	4638      	mov	r0, r7
   22036:	f7ff ff3f 	bl	21eb8 <__multiply>
   2203a:	6030      	str	r0, [r6, #0]
   2203c:	f8c0 8000 	str.w	r8, [r0]
   22040:	4606      	mov	r6, r0
   22042:	e7e0      	b.n	22006 <__pow5mult+0x2a>
   22044:	4605      	mov	r5, r0
   22046:	e7d9      	b.n	21ffc <__pow5mult+0x20>
   22048:	1e5a      	subs	r2, r3, #1
   2204a:	4d0b      	ldr	r5, [pc, #44]	; (22078 <__pow5mult+0x9c>)
   2204c:	2300      	movs	r3, #0
   2204e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   22052:	f7ff fe97 	bl	21d84 <__multadd>
   22056:	4605      	mov	r5, r0
   22058:	e7c8      	b.n	21fec <__pow5mult+0x10>
   2205a:	2101      	movs	r1, #1
   2205c:	4638      	mov	r0, r7
   2205e:	f7ff fe61 	bl	21d24 <_Balloc>
   22062:	f240 2171 	movw	r1, #625	; 0x271
   22066:	2201      	movs	r2, #1
   22068:	2300      	movs	r3, #0
   2206a:	6141      	str	r1, [r0, #20]
   2206c:	6102      	str	r2, [r0, #16]
   2206e:	4606      	mov	r6, r0
   22070:	64b8      	str	r0, [r7, #72]	; 0x48
   22072:	6003      	str	r3, [r0, #0]
   22074:	e7be      	b.n	21ff4 <__pow5mult+0x18>
   22076:	bf00      	nop
   22078:	000250d8 	.word	0x000250d8

0002207c <__lshift>:
   2207c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22080:	4691      	mov	r9, r2
   22082:	690a      	ldr	r2, [r1, #16]
   22084:	688b      	ldr	r3, [r1, #8]
   22086:	ea4f 1469 	mov.w	r4, r9, asr #5
   2208a:	eb04 0802 	add.w	r8, r4, r2
   2208e:	f108 0501 	add.w	r5, r8, #1
   22092:	429d      	cmp	r5, r3
   22094:	460e      	mov	r6, r1
   22096:	4607      	mov	r7, r0
   22098:	6849      	ldr	r1, [r1, #4]
   2209a:	dd04      	ble.n	220a6 <__lshift+0x2a>
   2209c:	005b      	lsls	r3, r3, #1
   2209e:	429d      	cmp	r5, r3
   220a0:	f101 0101 	add.w	r1, r1, #1
   220a4:	dcfa      	bgt.n	2209c <__lshift+0x20>
   220a6:	4638      	mov	r0, r7
   220a8:	f7ff fe3c 	bl	21d24 <_Balloc>
   220ac:	2c00      	cmp	r4, #0
   220ae:	f100 0314 	add.w	r3, r0, #20
   220b2:	dd06      	ble.n	220c2 <__lshift+0x46>
   220b4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   220b8:	2100      	movs	r1, #0
   220ba:	f843 1b04 	str.w	r1, [r3], #4
   220be:	429a      	cmp	r2, r3
   220c0:	d1fb      	bne.n	220ba <__lshift+0x3e>
   220c2:	6934      	ldr	r4, [r6, #16]
   220c4:	f106 0114 	add.w	r1, r6, #20
   220c8:	f019 091f 	ands.w	r9, r9, #31
   220cc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   220d0:	d01d      	beq.n	2210e <__lshift+0x92>
   220d2:	f1c9 0c20 	rsb	ip, r9, #32
   220d6:	2200      	movs	r2, #0
   220d8:	680c      	ldr	r4, [r1, #0]
   220da:	fa04 f409 	lsl.w	r4, r4, r9
   220de:	4314      	orrs	r4, r2
   220e0:	f843 4b04 	str.w	r4, [r3], #4
   220e4:	f851 2b04 	ldr.w	r2, [r1], #4
   220e8:	458e      	cmp	lr, r1
   220ea:	fa22 f20c 	lsr.w	r2, r2, ip
   220ee:	d8f3      	bhi.n	220d8 <__lshift+0x5c>
   220f0:	601a      	str	r2, [r3, #0]
   220f2:	b10a      	cbz	r2, 220f8 <__lshift+0x7c>
   220f4:	f108 0502 	add.w	r5, r8, #2
   220f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   220fa:	6872      	ldr	r2, [r6, #4]
   220fc:	3d01      	subs	r5, #1
   220fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22102:	6105      	str	r5, [r0, #16]
   22104:	6031      	str	r1, [r6, #0]
   22106:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2210a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2210e:	3b04      	subs	r3, #4
   22110:	f851 2b04 	ldr.w	r2, [r1], #4
   22114:	f843 2f04 	str.w	r2, [r3, #4]!
   22118:	458e      	cmp	lr, r1
   2211a:	d8f9      	bhi.n	22110 <__lshift+0x94>
   2211c:	e7ec      	b.n	220f8 <__lshift+0x7c>
   2211e:	bf00      	nop

00022120 <__mcmp>:
   22120:	b430      	push	{r4, r5}
   22122:	690b      	ldr	r3, [r1, #16]
   22124:	4605      	mov	r5, r0
   22126:	6900      	ldr	r0, [r0, #16]
   22128:	1ac0      	subs	r0, r0, r3
   2212a:	d10f      	bne.n	2214c <__mcmp+0x2c>
   2212c:	009b      	lsls	r3, r3, #2
   2212e:	3514      	adds	r5, #20
   22130:	3114      	adds	r1, #20
   22132:	4419      	add	r1, r3
   22134:	442b      	add	r3, r5
   22136:	e001      	b.n	2213c <__mcmp+0x1c>
   22138:	429d      	cmp	r5, r3
   2213a:	d207      	bcs.n	2214c <__mcmp+0x2c>
   2213c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   22140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22144:	4294      	cmp	r4, r2
   22146:	d0f7      	beq.n	22138 <__mcmp+0x18>
   22148:	d302      	bcc.n	22150 <__mcmp+0x30>
   2214a:	2001      	movs	r0, #1
   2214c:	bc30      	pop	{r4, r5}
   2214e:	4770      	bx	lr
   22150:	f04f 30ff 	mov.w	r0, #4294967295
   22154:	e7fa      	b.n	2214c <__mcmp+0x2c>
   22156:	bf00      	nop

00022158 <__mdiff>:
   22158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2215c:	690f      	ldr	r7, [r1, #16]
   2215e:	460e      	mov	r6, r1
   22160:	6911      	ldr	r1, [r2, #16]
   22162:	1a7f      	subs	r7, r7, r1
   22164:	2f00      	cmp	r7, #0
   22166:	4690      	mov	r8, r2
   22168:	d117      	bne.n	2219a <__mdiff+0x42>
   2216a:	0089      	lsls	r1, r1, #2
   2216c:	f106 0514 	add.w	r5, r6, #20
   22170:	f102 0e14 	add.w	lr, r2, #20
   22174:	186b      	adds	r3, r5, r1
   22176:	4471      	add	r1, lr
   22178:	e001      	b.n	2217e <__mdiff+0x26>
   2217a:	429d      	cmp	r5, r3
   2217c:	d25c      	bcs.n	22238 <__mdiff+0xe0>
   2217e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22182:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   22186:	42a2      	cmp	r2, r4
   22188:	d0f7      	beq.n	2217a <__mdiff+0x22>
   2218a:	d25e      	bcs.n	2224a <__mdiff+0xf2>
   2218c:	4633      	mov	r3, r6
   2218e:	462c      	mov	r4, r5
   22190:	4646      	mov	r6, r8
   22192:	4675      	mov	r5, lr
   22194:	4698      	mov	r8, r3
   22196:	2701      	movs	r7, #1
   22198:	e005      	b.n	221a6 <__mdiff+0x4e>
   2219a:	db58      	blt.n	2224e <__mdiff+0xf6>
   2219c:	f106 0514 	add.w	r5, r6, #20
   221a0:	f108 0414 	add.w	r4, r8, #20
   221a4:	2700      	movs	r7, #0
   221a6:	6871      	ldr	r1, [r6, #4]
   221a8:	f7ff fdbc 	bl	21d24 <_Balloc>
   221ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   221b0:	6936      	ldr	r6, [r6, #16]
   221b2:	60c7      	str	r7, [r0, #12]
   221b4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   221b8:	46a6      	mov	lr, r4
   221ba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   221be:	f100 0414 	add.w	r4, r0, #20
   221c2:	2300      	movs	r3, #0
   221c4:	f85e 1b04 	ldr.w	r1, [lr], #4
   221c8:	f855 8b04 	ldr.w	r8, [r5], #4
   221cc:	b28a      	uxth	r2, r1
   221ce:	fa13 f388 	uxtah	r3, r3, r8
   221d2:	0c09      	lsrs	r1, r1, #16
   221d4:	1a9a      	subs	r2, r3, r2
   221d6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   221da:	eb03 4322 	add.w	r3, r3, r2, asr #16
   221de:	b292      	uxth	r2, r2
   221e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   221e4:	45f4      	cmp	ip, lr
   221e6:	f844 2b04 	str.w	r2, [r4], #4
   221ea:	ea4f 4323 	mov.w	r3, r3, asr #16
   221ee:	d8e9      	bhi.n	221c4 <__mdiff+0x6c>
   221f0:	42af      	cmp	r7, r5
   221f2:	d917      	bls.n	22224 <__mdiff+0xcc>
   221f4:	46a4      	mov	ip, r4
   221f6:	46ae      	mov	lr, r5
   221f8:	f85e 2b04 	ldr.w	r2, [lr], #4
   221fc:	fa13 f382 	uxtah	r3, r3, r2
   22200:	1419      	asrs	r1, r3, #16
   22202:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   22206:	b29b      	uxth	r3, r3
   22208:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2220c:	4577      	cmp	r7, lr
   2220e:	f84c 2b04 	str.w	r2, [ip], #4
   22212:	ea4f 4321 	mov.w	r3, r1, asr #16
   22216:	d8ef      	bhi.n	221f8 <__mdiff+0xa0>
   22218:	43ed      	mvns	r5, r5
   2221a:	442f      	add	r7, r5
   2221c:	f027 0703 	bic.w	r7, r7, #3
   22220:	3704      	adds	r7, #4
   22222:	443c      	add	r4, r7
   22224:	3c04      	subs	r4, #4
   22226:	b922      	cbnz	r2, 22232 <__mdiff+0xda>
   22228:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2222c:	3e01      	subs	r6, #1
   2222e:	2b00      	cmp	r3, #0
   22230:	d0fa      	beq.n	22228 <__mdiff+0xd0>
   22232:	6106      	str	r6, [r0, #16]
   22234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22238:	2100      	movs	r1, #0
   2223a:	f7ff fd73 	bl	21d24 <_Balloc>
   2223e:	2201      	movs	r2, #1
   22240:	2300      	movs	r3, #0
   22242:	6102      	str	r2, [r0, #16]
   22244:	6143      	str	r3, [r0, #20]
   22246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2224a:	4674      	mov	r4, lr
   2224c:	e7ab      	b.n	221a6 <__mdiff+0x4e>
   2224e:	4633      	mov	r3, r6
   22250:	f106 0414 	add.w	r4, r6, #20
   22254:	f102 0514 	add.w	r5, r2, #20
   22258:	4616      	mov	r6, r2
   2225a:	2701      	movs	r7, #1
   2225c:	4698      	mov	r8, r3
   2225e:	e7a2      	b.n	221a6 <__mdiff+0x4e>

00022260 <__d2b>:
   22260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22264:	ec57 6b10 	vmov	r6, r7, d0
   22268:	b083      	sub	sp, #12
   2226a:	4688      	mov	r8, r1
   2226c:	2101      	movs	r1, #1
   2226e:	463c      	mov	r4, r7
   22270:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22274:	4617      	mov	r7, r2
   22276:	f7ff fd55 	bl	21d24 <_Balloc>
   2227a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2227e:	4681      	mov	r9, r0
   22280:	b10d      	cbz	r5, 22286 <__d2b+0x26>
   22282:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22286:	9401      	str	r4, [sp, #4]
   22288:	b31e      	cbz	r6, 222d2 <__d2b+0x72>
   2228a:	a802      	add	r0, sp, #8
   2228c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22290:	f7ff fdd8 	bl	21e44 <__lo0bits>
   22294:	2800      	cmp	r0, #0
   22296:	d134      	bne.n	22302 <__d2b+0xa2>
   22298:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2229c:	f8c9 2014 	str.w	r2, [r9, #20]
   222a0:	2b00      	cmp	r3, #0
   222a2:	bf0c      	ite	eq
   222a4:	2101      	moveq	r1, #1
   222a6:	2102      	movne	r1, #2
   222a8:	f8c9 3018 	str.w	r3, [r9, #24]
   222ac:	f8c9 1010 	str.w	r1, [r9, #16]
   222b0:	b9dd      	cbnz	r5, 222ea <__d2b+0x8a>
   222b2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   222b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   222ba:	f8c8 0000 	str.w	r0, [r8]
   222be:	6918      	ldr	r0, [r3, #16]
   222c0:	f7ff fda0 	bl	21e04 <__hi0bits>
   222c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   222c8:	6038      	str	r0, [r7, #0]
   222ca:	4648      	mov	r0, r9
   222cc:	b003      	add	sp, #12
   222ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   222d2:	a801      	add	r0, sp, #4
   222d4:	f7ff fdb6 	bl	21e44 <__lo0bits>
   222d8:	9b01      	ldr	r3, [sp, #4]
   222da:	f8c9 3014 	str.w	r3, [r9, #20]
   222de:	2101      	movs	r1, #1
   222e0:	3020      	adds	r0, #32
   222e2:	f8c9 1010 	str.w	r1, [r9, #16]
   222e6:	2d00      	cmp	r5, #0
   222e8:	d0e3      	beq.n	222b2 <__d2b+0x52>
   222ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   222ee:	4405      	add	r5, r0
   222f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   222f4:	f8c8 5000 	str.w	r5, [r8]
   222f8:	6038      	str	r0, [r7, #0]
   222fa:	4648      	mov	r0, r9
   222fc:	b003      	add	sp, #12
   222fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22302:	e89d 000a 	ldmia.w	sp, {r1, r3}
   22306:	f1c0 0220 	rsb	r2, r0, #32
   2230a:	fa03 f202 	lsl.w	r2, r3, r2
   2230e:	430a      	orrs	r2, r1
   22310:	40c3      	lsrs	r3, r0
   22312:	9301      	str	r3, [sp, #4]
   22314:	f8c9 2014 	str.w	r2, [r9, #20]
   22318:	e7c2      	b.n	222a0 <__d2b+0x40>
   2231a:	bf00      	nop

0002231c <__sread>:
   2231c:	b510      	push	{r4, lr}
   2231e:	460c      	mov	r4, r1
   22320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22324:	f000 f9fe 	bl	22724 <_read_r>
   22328:	2800      	cmp	r0, #0
   2232a:	db03      	blt.n	22334 <__sread+0x18>
   2232c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2232e:	4403      	add	r3, r0
   22330:	6523      	str	r3, [r4, #80]	; 0x50
   22332:	bd10      	pop	{r4, pc}
   22334:	89a3      	ldrh	r3, [r4, #12]
   22336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2233a:	81a3      	strh	r3, [r4, #12]
   2233c:	bd10      	pop	{r4, pc}
   2233e:	bf00      	nop

00022340 <__swrite>:
   22340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22344:	4616      	mov	r6, r2
   22346:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2234a:	461f      	mov	r7, r3
   2234c:	05d3      	lsls	r3, r2, #23
   2234e:	460c      	mov	r4, r1
   22350:	4605      	mov	r5, r0
   22352:	d507      	bpl.n	22364 <__swrite+0x24>
   22354:	2200      	movs	r2, #0
   22356:	2302      	movs	r3, #2
   22358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2235c:	f000 f9cc 	bl	226f8 <_lseek_r>
   22360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2236c:	81a2      	strh	r2, [r4, #12]
   2236e:	463b      	mov	r3, r7
   22370:	4632      	mov	r2, r6
   22372:	4628      	mov	r0, r5
   22374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22378:	f7fe b95e 	b.w	20638 <_write_r>

0002237c <__sseek>:
   2237c:	b510      	push	{r4, lr}
   2237e:	460c      	mov	r4, r1
   22380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22384:	f000 f9b8 	bl	226f8 <_lseek_r>
   22388:	89a3      	ldrh	r3, [r4, #12]
   2238a:	1c42      	adds	r2, r0, #1
   2238c:	bf0e      	itee	eq
   2238e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22396:	6520      	strne	r0, [r4, #80]	; 0x50
   22398:	81a3      	strh	r3, [r4, #12]
   2239a:	bd10      	pop	{r4, pc}

0002239c <__sclose>:
   2239c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   223a0:	f000 b910 	b.w	225c4 <_close_r>

000223a4 <__ssprint_r>:
   223a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223a8:	6893      	ldr	r3, [r2, #8]
   223aa:	b083      	sub	sp, #12
   223ac:	4690      	mov	r8, r2
   223ae:	2b00      	cmp	r3, #0
   223b0:	d070      	beq.n	22494 <__ssprint_r+0xf0>
   223b2:	4682      	mov	sl, r0
   223b4:	460c      	mov	r4, r1
   223b6:	6817      	ldr	r7, [r2, #0]
   223b8:	688d      	ldr	r5, [r1, #8]
   223ba:	6808      	ldr	r0, [r1, #0]
   223bc:	e042      	b.n	22444 <__ssprint_r+0xa0>
   223be:	89a3      	ldrh	r3, [r4, #12]
   223c0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   223c4:	d02e      	beq.n	22424 <__ssprint_r+0x80>
   223c6:	6965      	ldr	r5, [r4, #20]
   223c8:	6921      	ldr	r1, [r4, #16]
   223ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   223ce:	eba0 0b01 	sub.w	fp, r0, r1
   223d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   223d6:	f10b 0001 	add.w	r0, fp, #1
   223da:	106d      	asrs	r5, r5, #1
   223dc:	4430      	add	r0, r6
   223de:	42a8      	cmp	r0, r5
   223e0:	462a      	mov	r2, r5
   223e2:	bf84      	itt	hi
   223e4:	4605      	movhi	r5, r0
   223e6:	462a      	movhi	r2, r5
   223e8:	055b      	lsls	r3, r3, #21
   223ea:	d538      	bpl.n	2245e <__ssprint_r+0xba>
   223ec:	4611      	mov	r1, r2
   223ee:	4650      	mov	r0, sl
   223f0:	f7fb fcd2 	bl	1dd98 <_malloc_r>
   223f4:	2800      	cmp	r0, #0
   223f6:	d03c      	beq.n	22472 <__ssprint_r+0xce>
   223f8:	465a      	mov	r2, fp
   223fa:	6921      	ldr	r1, [r4, #16]
   223fc:	9001      	str	r0, [sp, #4]
   223fe:	f7fc f817 	bl	1e430 <memcpy>
   22402:	89a2      	ldrh	r2, [r4, #12]
   22404:	9b01      	ldr	r3, [sp, #4]
   22406:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2240a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2240e:	81a2      	strh	r2, [r4, #12]
   22410:	eba5 020b 	sub.w	r2, r5, fp
   22414:	eb03 000b 	add.w	r0, r3, fp
   22418:	6165      	str	r5, [r4, #20]
   2241a:	6123      	str	r3, [r4, #16]
   2241c:	6020      	str	r0, [r4, #0]
   2241e:	60a2      	str	r2, [r4, #8]
   22420:	4635      	mov	r5, r6
   22422:	46b3      	mov	fp, r6
   22424:	465a      	mov	r2, fp
   22426:	4649      	mov	r1, r9
   22428:	f7fc f89c 	bl	1e564 <memmove>
   2242c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22430:	68a2      	ldr	r2, [r4, #8]
   22432:	6820      	ldr	r0, [r4, #0]
   22434:	1b55      	subs	r5, r2, r5
   22436:	4458      	add	r0, fp
   22438:	1b9e      	subs	r6, r3, r6
   2243a:	60a5      	str	r5, [r4, #8]
   2243c:	6020      	str	r0, [r4, #0]
   2243e:	f8c8 6008 	str.w	r6, [r8, #8]
   22442:	b33e      	cbz	r6, 22494 <__ssprint_r+0xf0>
   22444:	687e      	ldr	r6, [r7, #4]
   22446:	463b      	mov	r3, r7
   22448:	3708      	adds	r7, #8
   2244a:	2e00      	cmp	r6, #0
   2244c:	d0fa      	beq.n	22444 <__ssprint_r+0xa0>
   2244e:	42ae      	cmp	r6, r5
   22450:	f8d3 9000 	ldr.w	r9, [r3]
   22454:	46ab      	mov	fp, r5
   22456:	d2b2      	bcs.n	223be <__ssprint_r+0x1a>
   22458:	4635      	mov	r5, r6
   2245a:	46b3      	mov	fp, r6
   2245c:	e7e2      	b.n	22424 <__ssprint_r+0x80>
   2245e:	4650      	mov	r0, sl
   22460:	f7fc f97e 	bl	1e760 <_realloc_r>
   22464:	4603      	mov	r3, r0
   22466:	2800      	cmp	r0, #0
   22468:	d1d2      	bne.n	22410 <__ssprint_r+0x6c>
   2246a:	6921      	ldr	r1, [r4, #16]
   2246c:	4650      	mov	r0, sl
   2246e:	f7ff fac3 	bl	219f8 <_free_r>
   22472:	230c      	movs	r3, #12
   22474:	f8ca 3000 	str.w	r3, [sl]
   22478:	89a3      	ldrh	r3, [r4, #12]
   2247a:	2200      	movs	r2, #0
   2247c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22480:	f04f 30ff 	mov.w	r0, #4294967295
   22484:	81a3      	strh	r3, [r4, #12]
   22486:	f8c8 2008 	str.w	r2, [r8, #8]
   2248a:	f8c8 2004 	str.w	r2, [r8, #4]
   2248e:	b003      	add	sp, #12
   22490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22494:	2000      	movs	r0, #0
   22496:	f8c8 0004 	str.w	r0, [r8, #4]
   2249a:	b003      	add	sp, #12
   2249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000224a0 <__register_exitproc>:
   224a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   224a4:	4d2c      	ldr	r5, [pc, #176]	; (22558 <__register_exitproc+0xb8>)
   224a6:	4606      	mov	r6, r0
   224a8:	6828      	ldr	r0, [r5, #0]
   224aa:	4698      	mov	r8, r3
   224ac:	460f      	mov	r7, r1
   224ae:	4691      	mov	r9, r2
   224b0:	f7fb fc5e 	bl	1dd70 <__retarget_lock_acquire_recursive>
   224b4:	4b29      	ldr	r3, [pc, #164]	; (2255c <__register_exitproc+0xbc>)
   224b6:	681c      	ldr	r4, [r3, #0]
   224b8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   224bc:	2b00      	cmp	r3, #0
   224be:	d03e      	beq.n	2253e <__register_exitproc+0x9e>
   224c0:	685a      	ldr	r2, [r3, #4]
   224c2:	2a1f      	cmp	r2, #31
   224c4:	dc1c      	bgt.n	22500 <__register_exitproc+0x60>
   224c6:	f102 0e01 	add.w	lr, r2, #1
   224ca:	b176      	cbz	r6, 224ea <__register_exitproc+0x4a>
   224cc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   224d0:	2401      	movs	r4, #1
   224d2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   224d6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   224da:	4094      	lsls	r4, r2
   224dc:	4320      	orrs	r0, r4
   224de:	2e02      	cmp	r6, #2
   224e0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   224e4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   224e8:	d023      	beq.n	22532 <__register_exitproc+0x92>
   224ea:	3202      	adds	r2, #2
   224ec:	f8c3 e004 	str.w	lr, [r3, #4]
   224f0:	6828      	ldr	r0, [r5, #0]
   224f2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   224f6:	f7fb fc3d 	bl	1dd74 <__retarget_lock_release_recursive>
   224fa:	2000      	movs	r0, #0
   224fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22500:	4b17      	ldr	r3, [pc, #92]	; (22560 <__register_exitproc+0xc0>)
   22502:	b30b      	cbz	r3, 22548 <__register_exitproc+0xa8>
   22504:	f44f 70c8 	mov.w	r0, #400	; 0x190
   22508:	f7fb fc36 	bl	1dd78 <malloc>
   2250c:	4603      	mov	r3, r0
   2250e:	b1d8      	cbz	r0, 22548 <__register_exitproc+0xa8>
   22510:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22514:	6002      	str	r2, [r0, #0]
   22516:	2100      	movs	r1, #0
   22518:	6041      	str	r1, [r0, #4]
   2251a:	460a      	mov	r2, r1
   2251c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   22520:	f04f 0e01 	mov.w	lr, #1
   22524:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   22528:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   2252c:	2e00      	cmp	r6, #0
   2252e:	d0dc      	beq.n	224ea <__register_exitproc+0x4a>
   22530:	e7cc      	b.n	224cc <__register_exitproc+0x2c>
   22532:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   22536:	430c      	orrs	r4, r1
   22538:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   2253c:	e7d5      	b.n	224ea <__register_exitproc+0x4a>
   2253e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22542:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22546:	e7bb      	b.n	224c0 <__register_exitproc+0x20>
   22548:	6828      	ldr	r0, [r5, #0]
   2254a:	f7fb fc13 	bl	1dd74 <__retarget_lock_release_recursive>
   2254e:	f04f 30ff 	mov.w	r0, #4294967295
   22552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22556:	bf00      	nop
   22558:	20000aac 	.word	0x20000aac
   2255c:	00024e38 	.word	0x00024e38
   22560:	0001dd79 	.word	0x0001dd79

00022564 <_calloc_r>:
   22564:	b510      	push	{r4, lr}
   22566:	fb02 f101 	mul.w	r1, r2, r1
   2256a:	f7fb fc15 	bl	1dd98 <_malloc_r>
   2256e:	4604      	mov	r4, r0
   22570:	b1d8      	cbz	r0, 225aa <_calloc_r+0x46>
   22572:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22576:	f022 0203 	bic.w	r2, r2, #3
   2257a:	3a04      	subs	r2, #4
   2257c:	2a24      	cmp	r2, #36	; 0x24
   2257e:	d818      	bhi.n	225b2 <_calloc_r+0x4e>
   22580:	2a13      	cmp	r2, #19
   22582:	d914      	bls.n	225ae <_calloc_r+0x4a>
   22584:	2300      	movs	r3, #0
   22586:	2a1b      	cmp	r2, #27
   22588:	6003      	str	r3, [r0, #0]
   2258a:	6043      	str	r3, [r0, #4]
   2258c:	d916      	bls.n	225bc <_calloc_r+0x58>
   2258e:	2a24      	cmp	r2, #36	; 0x24
   22590:	6083      	str	r3, [r0, #8]
   22592:	60c3      	str	r3, [r0, #12]
   22594:	bf11      	iteee	ne
   22596:	f100 0210 	addne.w	r2, r0, #16
   2259a:	6103      	streq	r3, [r0, #16]
   2259c:	6143      	streq	r3, [r0, #20]
   2259e:	f100 0218 	addeq.w	r2, r0, #24
   225a2:	2300      	movs	r3, #0
   225a4:	6013      	str	r3, [r2, #0]
   225a6:	6053      	str	r3, [r2, #4]
   225a8:	6093      	str	r3, [r2, #8]
   225aa:	4620      	mov	r0, r4
   225ac:	bd10      	pop	{r4, pc}
   225ae:	4602      	mov	r2, r0
   225b0:	e7f7      	b.n	225a2 <_calloc_r+0x3e>
   225b2:	2100      	movs	r1, #0
   225b4:	f7fc f83a 	bl	1e62c <memset>
   225b8:	4620      	mov	r0, r4
   225ba:	bd10      	pop	{r4, pc}
   225bc:	f100 0208 	add.w	r2, r0, #8
   225c0:	e7ef      	b.n	225a2 <_calloc_r+0x3e>
   225c2:	bf00      	nop

000225c4 <_close_r>:
   225c4:	b538      	push	{r3, r4, r5, lr}
   225c6:	4c07      	ldr	r4, [pc, #28]	; (225e4 <_close_r+0x20>)
   225c8:	2300      	movs	r3, #0
   225ca:	4605      	mov	r5, r0
   225cc:	4608      	mov	r0, r1
   225ce:	6023      	str	r3, [r4, #0]
   225d0:	f000 f9ac 	bl	2292c <_close>
   225d4:	1c43      	adds	r3, r0, #1
   225d6:	d000      	beq.n	225da <_close_r+0x16>
   225d8:	bd38      	pop	{r3, r4, r5, pc}
   225da:	6823      	ldr	r3, [r4, #0]
   225dc:	2b00      	cmp	r3, #0
   225de:	d0fb      	beq.n	225d8 <_close_r+0x14>
   225e0:	602b      	str	r3, [r5, #0]
   225e2:	bd38      	pop	{r3, r4, r5, pc}
   225e4:	200023ac 	.word	0x200023ac

000225e8 <_fclose_r>:
   225e8:	b570      	push	{r4, r5, r6, lr}
   225ea:	b159      	cbz	r1, 22604 <_fclose_r+0x1c>
   225ec:	4605      	mov	r5, r0
   225ee:	460c      	mov	r4, r1
   225f0:	b110      	cbz	r0, 225f8 <_fclose_r+0x10>
   225f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   225f4:	2b00      	cmp	r3, #0
   225f6:	d03c      	beq.n	22672 <_fclose_r+0x8a>
   225f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   225fa:	07d8      	lsls	r0, r3, #31
   225fc:	d505      	bpl.n	2260a <_fclose_r+0x22>
   225fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22602:	b92b      	cbnz	r3, 22610 <_fclose_r+0x28>
   22604:	2600      	movs	r6, #0
   22606:	4630      	mov	r0, r6
   22608:	bd70      	pop	{r4, r5, r6, pc}
   2260a:	89a3      	ldrh	r3, [r4, #12]
   2260c:	0599      	lsls	r1, r3, #22
   2260e:	d53c      	bpl.n	2268a <_fclose_r+0xa2>
   22610:	4621      	mov	r1, r4
   22612:	4628      	mov	r0, r5
   22614:	f7ff f856 	bl	216c4 <__sflush_r>
   22618:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2261a:	4606      	mov	r6, r0
   2261c:	b133      	cbz	r3, 2262c <_fclose_r+0x44>
   2261e:	69e1      	ldr	r1, [r4, #28]
   22620:	4628      	mov	r0, r5
   22622:	4798      	blx	r3
   22624:	2800      	cmp	r0, #0
   22626:	bfb8      	it	lt
   22628:	f04f 36ff 	movlt.w	r6, #4294967295
   2262c:	89a3      	ldrh	r3, [r4, #12]
   2262e:	061a      	lsls	r2, r3, #24
   22630:	d422      	bmi.n	22678 <_fclose_r+0x90>
   22632:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22634:	b141      	cbz	r1, 22648 <_fclose_r+0x60>
   22636:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2263a:	4299      	cmp	r1, r3
   2263c:	d002      	beq.n	22644 <_fclose_r+0x5c>
   2263e:	4628      	mov	r0, r5
   22640:	f7ff f9da 	bl	219f8 <_free_r>
   22644:	2300      	movs	r3, #0
   22646:	6323      	str	r3, [r4, #48]	; 0x30
   22648:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2264a:	b121      	cbz	r1, 22656 <_fclose_r+0x6e>
   2264c:	4628      	mov	r0, r5
   2264e:	f7ff f9d3 	bl	219f8 <_free_r>
   22652:	2300      	movs	r3, #0
   22654:	6463      	str	r3, [r4, #68]	; 0x44
   22656:	f7ff f959 	bl	2190c <__sfp_lock_acquire>
   2265a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2265c:	2200      	movs	r2, #0
   2265e:	07db      	lsls	r3, r3, #31
   22660:	81a2      	strh	r2, [r4, #12]
   22662:	d50e      	bpl.n	22682 <_fclose_r+0x9a>
   22664:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22666:	f7fb fb81 	bl	1dd6c <__retarget_lock_close_recursive>
   2266a:	f7ff f955 	bl	21918 <__sfp_lock_release>
   2266e:	4630      	mov	r0, r6
   22670:	bd70      	pop	{r4, r5, r6, pc}
   22672:	f7ff f91f 	bl	218b4 <__sinit>
   22676:	e7bf      	b.n	225f8 <_fclose_r+0x10>
   22678:	6921      	ldr	r1, [r4, #16]
   2267a:	4628      	mov	r0, r5
   2267c:	f7ff f9bc 	bl	219f8 <_free_r>
   22680:	e7d7      	b.n	22632 <_fclose_r+0x4a>
   22682:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22684:	f7fb fb76 	bl	1dd74 <__retarget_lock_release_recursive>
   22688:	e7ec      	b.n	22664 <_fclose_r+0x7c>
   2268a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2268c:	f7fb fb70 	bl	1dd70 <__retarget_lock_acquire_recursive>
   22690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22694:	2b00      	cmp	r3, #0
   22696:	d1bb      	bne.n	22610 <_fclose_r+0x28>
   22698:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2269a:	f016 0601 	ands.w	r6, r6, #1
   2269e:	d1b1      	bne.n	22604 <_fclose_r+0x1c>
   226a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   226a2:	f7fb fb67 	bl	1dd74 <__retarget_lock_release_recursive>
   226a6:	4630      	mov	r0, r6
   226a8:	bd70      	pop	{r4, r5, r6, pc}
   226aa:	bf00      	nop

000226ac <_fstat_r>:
   226ac:	b538      	push	{r3, r4, r5, lr}
   226ae:	460b      	mov	r3, r1
   226b0:	4c07      	ldr	r4, [pc, #28]	; (226d0 <_fstat_r+0x24>)
   226b2:	4605      	mov	r5, r0
   226b4:	4611      	mov	r1, r2
   226b6:	4618      	mov	r0, r3
   226b8:	2300      	movs	r3, #0
   226ba:	6023      	str	r3, [r4, #0]
   226bc:	f000 f9b4 	bl	22a28 <_fstat>
   226c0:	1c43      	adds	r3, r0, #1
   226c2:	d000      	beq.n	226c6 <_fstat_r+0x1a>
   226c4:	bd38      	pop	{r3, r4, r5, pc}
   226c6:	6823      	ldr	r3, [r4, #0]
   226c8:	2b00      	cmp	r3, #0
   226ca:	d0fb      	beq.n	226c4 <_fstat_r+0x18>
   226cc:	602b      	str	r3, [r5, #0]
   226ce:	bd38      	pop	{r3, r4, r5, pc}
   226d0:	200023ac 	.word	0x200023ac

000226d4 <_isatty_r>:
   226d4:	b538      	push	{r3, r4, r5, lr}
   226d6:	4c07      	ldr	r4, [pc, #28]	; (226f4 <_isatty_r+0x20>)
   226d8:	2300      	movs	r3, #0
   226da:	4605      	mov	r5, r0
   226dc:	4608      	mov	r0, r1
   226de:	6023      	str	r3, [r4, #0]
   226e0:	f000 f9b0 	bl	22a44 <_isatty>
   226e4:	1c43      	adds	r3, r0, #1
   226e6:	d000      	beq.n	226ea <_isatty_r+0x16>
   226e8:	bd38      	pop	{r3, r4, r5, pc}
   226ea:	6823      	ldr	r3, [r4, #0]
   226ec:	2b00      	cmp	r3, #0
   226ee:	d0fb      	beq.n	226e8 <_isatty_r+0x14>
   226f0:	602b      	str	r3, [r5, #0]
   226f2:	bd38      	pop	{r3, r4, r5, pc}
   226f4:	200023ac 	.word	0x200023ac

000226f8 <_lseek_r>:
   226f8:	b570      	push	{r4, r5, r6, lr}
   226fa:	460d      	mov	r5, r1
   226fc:	4c08      	ldr	r4, [pc, #32]	; (22720 <_lseek_r+0x28>)
   226fe:	4611      	mov	r1, r2
   22700:	4606      	mov	r6, r0
   22702:	461a      	mov	r2, r3
   22704:	4628      	mov	r0, r5
   22706:	2300      	movs	r3, #0
   22708:	6023      	str	r3, [r4, #0]
   2270a:	f000 f8d3 	bl	228b4 <_lseek>
   2270e:	1c43      	adds	r3, r0, #1
   22710:	d000      	beq.n	22714 <_lseek_r+0x1c>
   22712:	bd70      	pop	{r4, r5, r6, pc}
   22714:	6823      	ldr	r3, [r4, #0]
   22716:	2b00      	cmp	r3, #0
   22718:	d0fb      	beq.n	22712 <_lseek_r+0x1a>
   2271a:	6033      	str	r3, [r6, #0]
   2271c:	bd70      	pop	{r4, r5, r6, pc}
   2271e:	bf00      	nop
   22720:	200023ac 	.word	0x200023ac

00022724 <_read_r>:
   22724:	b570      	push	{r4, r5, r6, lr}
   22726:	460d      	mov	r5, r1
   22728:	4c08      	ldr	r4, [pc, #32]	; (2274c <_read_r+0x28>)
   2272a:	4611      	mov	r1, r2
   2272c:	4606      	mov	r6, r0
   2272e:	461a      	mov	r2, r3
   22730:	4628      	mov	r0, r5
   22732:	2300      	movs	r3, #0
   22734:	6023      	str	r3, [r4, #0]
   22736:	f000 f84b 	bl	227d0 <_read>
   2273a:	1c43      	adds	r3, r0, #1
   2273c:	d000      	beq.n	22740 <_read_r+0x1c>
   2273e:	bd70      	pop	{r4, r5, r6, pc}
   22740:	6823      	ldr	r3, [r4, #0]
   22742:	2b00      	cmp	r3, #0
   22744:	d0fb      	beq.n	2273e <_read_r+0x1a>
   22746:	6033      	str	r3, [r6, #0]
   22748:	bd70      	pop	{r4, r5, r6, pc}
   2274a:	bf00      	nop
   2274c:	200023ac 	.word	0x200023ac

00022750 <__aeabi_dcmpun>:
   22750:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22754:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22758:	d102      	bne.n	22760 <__aeabi_dcmpun+0x10>
   2275a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2275e:	d10a      	bne.n	22776 <__aeabi_dcmpun+0x26>
   22760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   22764:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22768:	d102      	bne.n	22770 <__aeabi_dcmpun+0x20>
   2276a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2276e:	d102      	bne.n	22776 <__aeabi_dcmpun+0x26>
   22770:	f04f 0000 	mov.w	r0, #0
   22774:	4770      	bx	lr
   22776:	f04f 0001 	mov.w	r0, #1
   2277a:	4770      	bx	lr

0002277c <findslot>:
   2277c:	4b0b      	ldr	r3, [pc, #44]	; (227ac <findslot+0x30>)
   2277e:	681b      	ldr	r3, [r3, #0]
   22780:	b510      	push	{r4, lr}
   22782:	4604      	mov	r4, r0
   22784:	b10b      	cbz	r3, 2278a <findslot+0xe>
   22786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22788:	b14a      	cbz	r2, 2279e <findslot+0x22>
   2278a:	2c13      	cmp	r4, #19
   2278c:	d80c      	bhi.n	227a8 <findslot+0x2c>
   2278e:	4808      	ldr	r0, [pc, #32]	; (227b0 <findslot+0x34>)
   22790:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22794:	3301      	adds	r3, #1
   22796:	d007      	beq.n	227a8 <findslot+0x2c>
   22798:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2279c:	bd10      	pop	{r4, pc}
   2279e:	4618      	mov	r0, r3
   227a0:	f7ff f888 	bl	218b4 <__sinit>
   227a4:	2c13      	cmp	r4, #19
   227a6:	d9f2      	bls.n	2278e <findslot+0x12>
   227a8:	2000      	movs	r0, #0
   227aa:	bd10      	pop	{r4, pc}
   227ac:	20000100 	.word	0x20000100
   227b0:	200022e8 	.word	0x200022e8

000227b4 <checkerror.part.0>:
   227b4:	b570      	push	{r4, r5, r6, lr}
   227b6:	f7fb f839 	bl	1d82c <__errno>
   227ba:	2413      	movs	r4, #19
   227bc:	4605      	mov	r5, r0
   227be:	2600      	movs	r6, #0
   227c0:	4620      	mov	r0, r4
   227c2:	4631      	mov	r1, r6
   227c4:	beab      	bkpt	0x00ab
   227c6:	4604      	mov	r4, r0
   227c8:	f04f 30ff 	mov.w	r0, #4294967295
   227cc:	602c      	str	r4, [r5, #0]
   227ce:	bd70      	pop	{r4, r5, r6, pc}

000227d0 <_read>:
   227d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   227d2:	b085      	sub	sp, #20
   227d4:	460c      	mov	r4, r1
   227d6:	4616      	mov	r6, r2
   227d8:	f7ff ffd0 	bl	2277c <findslot>
   227dc:	b1c8      	cbz	r0, 22812 <_read+0x42>
   227de:	6803      	ldr	r3, [r0, #0]
   227e0:	9301      	str	r3, [sp, #4]
   227e2:	9402      	str	r4, [sp, #8]
   227e4:	4605      	mov	r5, r0
   227e6:	9603      	str	r6, [sp, #12]
   227e8:	2406      	movs	r4, #6
   227ea:	af01      	add	r7, sp, #4
   227ec:	4620      	mov	r0, r4
   227ee:	4639      	mov	r1, r7
   227f0:	beab      	bkpt	0x00ab
   227f2:	4604      	mov	r4, r0
   227f4:	1c62      	adds	r2, r4, #1
   227f6:	4620      	mov	r0, r4
   227f8:	d005      	beq.n	22806 <_read+0x36>
   227fa:	686b      	ldr	r3, [r5, #4]
   227fc:	1a30      	subs	r0, r6, r0
   227fe:	4403      	add	r3, r0
   22800:	606b      	str	r3, [r5, #4]
   22802:	b005      	add	sp, #20
   22804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22806:	f7ff ffd5 	bl	227b4 <checkerror.part.0>
   2280a:	1c43      	adds	r3, r0, #1
   2280c:	d1f5      	bne.n	227fa <_read+0x2a>
   2280e:	b005      	add	sp, #20
   22810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22812:	f7fb f80b 	bl	1d82c <__errno>
   22816:	2309      	movs	r3, #9
   22818:	6003      	str	r3, [r0, #0]
   2281a:	f04f 30ff 	mov.w	r0, #4294967295
   2281e:	e7f0      	b.n	22802 <_read+0x32>

00022820 <_swilseek>:
   22820:	b5f0      	push	{r4, r5, r6, r7, lr}
   22822:	b083      	sub	sp, #12
   22824:	460d      	mov	r5, r1
   22826:	4614      	mov	r4, r2
   22828:	f7ff ffa8 	bl	2277c <findslot>
   2282c:	2800      	cmp	r0, #0
   2282e:	d03a      	beq.n	228a6 <_swilseek+0x86>
   22830:	2c02      	cmp	r4, #2
   22832:	d825      	bhi.n	22880 <_swilseek+0x60>
   22834:	2c01      	cmp	r4, #1
   22836:	4606      	mov	r6, r0
   22838:	d01f      	beq.n	2287a <_swilseek+0x5a>
   2283a:	2c02      	cmp	r4, #2
   2283c:	d010      	beq.n	22860 <_swilseek+0x40>
   2283e:	466f      	mov	r7, sp
   22840:	6833      	ldr	r3, [r6, #0]
   22842:	240a      	movs	r4, #10
   22844:	e88d 0028 	stmia.w	sp, {r3, r5}
   22848:	4620      	mov	r0, r4
   2284a:	4639      	mov	r1, r7
   2284c:	beab      	bkpt	0x00ab
   2284e:	4604      	mov	r4, r0
   22850:	1c63      	adds	r3, r4, #1
   22852:	d01c      	beq.n	2288e <_swilseek+0x6e>
   22854:	2c00      	cmp	r4, #0
   22856:	db23      	blt.n	228a0 <_swilseek+0x80>
   22858:	6075      	str	r5, [r6, #4]
   2285a:	4628      	mov	r0, r5
   2285c:	b003      	add	sp, #12
   2285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22860:	af02      	add	r7, sp, #8
   22862:	6803      	ldr	r3, [r0, #0]
   22864:	f847 3d08 	str.w	r3, [r7, #-8]!
   22868:	240c      	movs	r4, #12
   2286a:	4620      	mov	r0, r4
   2286c:	4639      	mov	r1, r7
   2286e:	beab      	bkpt	0x00ab
   22870:	4604      	mov	r4, r0
   22872:	1c61      	adds	r1, r4, #1
   22874:	d00f      	beq.n	22896 <_swilseek+0x76>
   22876:	4425      	add	r5, r4
   22878:	e7e2      	b.n	22840 <_swilseek+0x20>
   2287a:	6840      	ldr	r0, [r0, #4]
   2287c:	182d      	adds	r5, r5, r0
   2287e:	d5de      	bpl.n	2283e <_swilseek+0x1e>
   22880:	f7fa ffd4 	bl	1d82c <__errno>
   22884:	2316      	movs	r3, #22
   22886:	6003      	str	r3, [r0, #0]
   22888:	f04f 35ff 	mov.w	r5, #4294967295
   2288c:	e7e5      	b.n	2285a <_swilseek+0x3a>
   2288e:	f7ff ff91 	bl	227b4 <checkerror.part.0>
   22892:	4604      	mov	r4, r0
   22894:	e7de      	b.n	22854 <_swilseek+0x34>
   22896:	f7ff ff8d 	bl	227b4 <checkerror.part.0>
   2289a:	1c42      	adds	r2, r0, #1
   2289c:	4604      	mov	r4, r0
   2289e:	d1ea      	bne.n	22876 <_swilseek+0x56>
   228a0:	f04f 35ff 	mov.w	r5, #4294967295
   228a4:	e7d9      	b.n	2285a <_swilseek+0x3a>
   228a6:	f7fa ffc1 	bl	1d82c <__errno>
   228aa:	2309      	movs	r3, #9
   228ac:	6003      	str	r3, [r0, #0]
   228ae:	f04f 35ff 	mov.w	r5, #4294967295
   228b2:	e7d2      	b.n	2285a <_swilseek+0x3a>

000228b4 <_lseek>:
   228b4:	f7ff bfb4 	b.w	22820 <_swilseek>

000228b8 <_write>:
   228b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   228ba:	b085      	sub	sp, #20
   228bc:	460c      	mov	r4, r1
   228be:	4616      	mov	r6, r2
   228c0:	f7ff ff5c 	bl	2277c <findslot>
   228c4:	b350      	cbz	r0, 2291c <_write+0x64>
   228c6:	6803      	ldr	r3, [r0, #0]
   228c8:	9301      	str	r3, [sp, #4]
   228ca:	9402      	str	r4, [sp, #8]
   228cc:	4605      	mov	r5, r0
   228ce:	9603      	str	r6, [sp, #12]
   228d0:	2405      	movs	r4, #5
   228d2:	af01      	add	r7, sp, #4
   228d4:	4620      	mov	r0, r4
   228d6:	4639      	mov	r1, r7
   228d8:	beab      	bkpt	0x00ab
   228da:	4604      	mov	r4, r0
   228dc:	1c63      	adds	r3, r4, #1
   228de:	d016      	beq.n	2290e <_write+0x56>
   228e0:	2c00      	cmp	r4, #0
   228e2:	db18      	blt.n	22916 <_write+0x5e>
   228e4:	686a      	ldr	r2, [r5, #4]
   228e6:	1b30      	subs	r0, r6, r4
   228e8:	4402      	add	r2, r0
   228ea:	42a6      	cmp	r6, r4
   228ec:	606a      	str	r2, [r5, #4]
   228ee:	d001      	beq.n	228f4 <_write+0x3c>
   228f0:	b005      	add	sp, #20
   228f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   228f4:	f7fa ff9a 	bl	1d82c <__errno>
   228f8:	2513      	movs	r5, #19
   228fa:	4606      	mov	r6, r0
   228fc:	2400      	movs	r4, #0
   228fe:	4628      	mov	r0, r5
   22900:	4621      	mov	r1, r4
   22902:	beab      	bkpt	0x00ab
   22904:	4605      	mov	r5, r0
   22906:	4620      	mov	r0, r4
   22908:	6035      	str	r5, [r6, #0]
   2290a:	b005      	add	sp, #20
   2290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2290e:	f7ff ff51 	bl	227b4 <checkerror.part.0>
   22912:	4604      	mov	r4, r0
   22914:	e7e4      	b.n	228e0 <_write+0x28>
   22916:	f04f 30ff 	mov.w	r0, #4294967295
   2291a:	e7e9      	b.n	228f0 <_write+0x38>
   2291c:	f7fa ff86 	bl	1d82c <__errno>
   22920:	2309      	movs	r3, #9
   22922:	6003      	str	r3, [r0, #0]
   22924:	f04f 30ff 	mov.w	r0, #4294967295
   22928:	e7e2      	b.n	228f0 <_write+0x38>
   2292a:	bf00      	nop

0002292c <_close>:
   2292c:	b570      	push	{r4, r5, r6, lr}
   2292e:	b082      	sub	sp, #8
   22930:	4604      	mov	r4, r0
   22932:	f7ff ff23 	bl	2277c <findslot>
   22936:	b310      	cbz	r0, 2297e <_close+0x52>
   22938:	3c01      	subs	r4, #1
   2293a:	2c01      	cmp	r4, #1
   2293c:	4606      	mov	r6, r0
   2293e:	d911      	bls.n	22964 <_close+0x38>
   22940:	ad02      	add	r5, sp, #8
   22942:	6833      	ldr	r3, [r6, #0]
   22944:	f845 3d04 	str.w	r3, [r5, #-4]!
   22948:	2402      	movs	r4, #2
   2294a:	4620      	mov	r0, r4
   2294c:	4629      	mov	r1, r5
   2294e:	beab      	bkpt	0x00ab
   22950:	4604      	mov	r4, r0
   22952:	1c63      	adds	r3, r4, #1
   22954:	4620      	mov	r0, r4
   22956:	d00f      	beq.n	22978 <_close+0x4c>
   22958:	b910      	cbnz	r0, 22960 <_close+0x34>
   2295a:	f04f 33ff 	mov.w	r3, #4294967295
   2295e:	6033      	str	r3, [r6, #0]
   22960:	b002      	add	sp, #8
   22962:	bd70      	pop	{r4, r5, r6, pc}
   22964:	4b09      	ldr	r3, [pc, #36]	; (2298c <_close+0x60>)
   22966:	689a      	ldr	r2, [r3, #8]
   22968:	691b      	ldr	r3, [r3, #16]
   2296a:	429a      	cmp	r2, r3
   2296c:	d1e8      	bne.n	22940 <_close+0x14>
   2296e:	f04f 33ff 	mov.w	r3, #4294967295
   22972:	6003      	str	r3, [r0, #0]
   22974:	2000      	movs	r0, #0
   22976:	e7f3      	b.n	22960 <_close+0x34>
   22978:	f7ff ff1c 	bl	227b4 <checkerror.part.0>
   2297c:	e7ec      	b.n	22958 <_close+0x2c>
   2297e:	f7fa ff55 	bl	1d82c <__errno>
   22982:	2309      	movs	r3, #9
   22984:	6003      	str	r3, [r0, #0]
   22986:	f04f 30ff 	mov.w	r0, #4294967295
   2298a:	e7e9      	b.n	22960 <_close+0x34>
   2298c:	200022e8 	.word	0x200022e8

00022990 <_getpid>:
   22990:	2001      	movs	r0, #1
   22992:	4770      	bx	lr

00022994 <_sbrk>:
   22994:	4a0e      	ldr	r2, [pc, #56]	; (229d0 <_sbrk+0x3c>)
   22996:	6813      	ldr	r3, [r2, #0]
   22998:	b510      	push	{r4, lr}
   2299a:	b1ab      	cbz	r3, 229c8 <_sbrk+0x34>
   2299c:	4418      	add	r0, r3
   2299e:	4669      	mov	r1, sp
   229a0:	4288      	cmp	r0, r1
   229a2:	d809      	bhi.n	229b8 <_sbrk+0x24>
   229a4:	490b      	ldr	r1, [pc, #44]	; (229d4 <_sbrk+0x40>)
   229a6:	4c0c      	ldr	r4, [pc, #48]	; (229d8 <_sbrk+0x44>)
   229a8:	6809      	ldr	r1, [r1, #0]
   229aa:	42a1      	cmp	r1, r4
   229ac:	d001      	beq.n	229b2 <_sbrk+0x1e>
   229ae:	4288      	cmp	r0, r1
   229b0:	d802      	bhi.n	229b8 <_sbrk+0x24>
   229b2:	6010      	str	r0, [r2, #0]
   229b4:	4618      	mov	r0, r3
   229b6:	bd10      	pop	{r4, pc}
   229b8:	f7fa ff38 	bl	1d82c <__errno>
   229bc:	230c      	movs	r3, #12
   229be:	6003      	str	r3, [r0, #0]
   229c0:	f04f 33ff 	mov.w	r3, #4294967295
   229c4:	4618      	mov	r0, r3
   229c6:	bd10      	pop	{r4, pc}
   229c8:	4b04      	ldr	r3, [pc, #16]	; (229dc <_sbrk+0x48>)
   229ca:	6013      	str	r3, [r2, #0]
   229cc:	e7e6      	b.n	2299c <_sbrk+0x8>
   229ce:	bf00      	nop
   229d0:	200022e4 	.word	0x200022e4
   229d4:	20000ab0 	.word	0x20000ab0
   229d8:	cafedead 	.word	0xcafedead
   229dc:	200023b0 	.word	0x200023b0

000229e0 <_swistat>:
   229e0:	b570      	push	{r4, r5, r6, lr}
   229e2:	460d      	mov	r5, r1
   229e4:	f7ff feca 	bl	2277c <findslot>
   229e8:	b1b8      	cbz	r0, 22a1a <_swistat+0x3a>
   229ea:	686b      	ldr	r3, [r5, #4]
   229ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   229f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   229f4:	4606      	mov	r6, r0
   229f6:	606b      	str	r3, [r5, #4]
   229f8:	62ea      	str	r2, [r5, #44]	; 0x2c
   229fa:	240c      	movs	r4, #12
   229fc:	4620      	mov	r0, r4
   229fe:	4631      	mov	r1, r6
   22a00:	beab      	bkpt	0x00ab
   22a02:	4604      	mov	r4, r0
   22a04:	1c62      	adds	r2, r4, #1
   22a06:	4620      	mov	r0, r4
   22a08:	d002      	beq.n	22a10 <_swistat+0x30>
   22a0a:	6128      	str	r0, [r5, #16]
   22a0c:	2000      	movs	r0, #0
   22a0e:	bd70      	pop	{r4, r5, r6, pc}
   22a10:	f7ff fed0 	bl	227b4 <checkerror.part.0>
   22a14:	1c43      	adds	r3, r0, #1
   22a16:	d1f8      	bne.n	22a0a <_swistat+0x2a>
   22a18:	e7f9      	b.n	22a0e <_swistat+0x2e>
   22a1a:	f7fa ff07 	bl	1d82c <__errno>
   22a1e:	2309      	movs	r3, #9
   22a20:	6003      	str	r3, [r0, #0]
   22a22:	f04f 30ff 	mov.w	r0, #4294967295
   22a26:	bd70      	pop	{r4, r5, r6, pc}

00022a28 <_fstat>:
   22a28:	b538      	push	{r3, r4, r5, lr}
   22a2a:	223c      	movs	r2, #60	; 0x3c
   22a2c:	460c      	mov	r4, r1
   22a2e:	4605      	mov	r5, r0
   22a30:	4608      	mov	r0, r1
   22a32:	2100      	movs	r1, #0
   22a34:	f7fb fdfa 	bl	1e62c <memset>
   22a38:	4621      	mov	r1, r4
   22a3a:	4628      	mov	r0, r5
   22a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22a40:	f7ff bfce 	b.w	229e0 <_swistat>

00022a44 <_isatty>:
   22a44:	b570      	push	{r4, r5, r6, lr}
   22a46:	f7ff fe99 	bl	2277c <findslot>
   22a4a:	4605      	mov	r5, r0
   22a4c:	b190      	cbz	r0, 22a74 <_isatty+0x30>
   22a4e:	2409      	movs	r4, #9
   22a50:	4620      	mov	r0, r4
   22a52:	4629      	mov	r1, r5
   22a54:	beab      	bkpt	0x00ab
   22a56:	4604      	mov	r4, r0
   22a58:	2c01      	cmp	r4, #1
   22a5a:	d009      	beq.n	22a70 <_isatty+0x2c>
   22a5c:	f7fa fee6 	bl	1d82c <__errno>
   22a60:	2513      	movs	r5, #19
   22a62:	4606      	mov	r6, r0
   22a64:	2400      	movs	r4, #0
   22a66:	4628      	mov	r0, r5
   22a68:	4621      	mov	r1, r4
   22a6a:	beab      	bkpt	0x00ab
   22a6c:	4605      	mov	r5, r0
   22a6e:	6035      	str	r5, [r6, #0]
   22a70:	4620      	mov	r0, r4
   22a72:	bd70      	pop	{r4, r5, r6, pc}
   22a74:	f7fa feda 	bl	1d82c <__errno>
   22a78:	2209      	movs	r2, #9
   22a7a:	462c      	mov	r4, r5
   22a7c:	6002      	str	r2, [r0, #0]
   22a7e:	e7f7      	b.n	22a70 <_isatty+0x2c>

00022a80 <_exit>:
   22a80:	f04f 31ff 	mov.w	r1, #4294967295
   22a84:	f000 b800 	b.w	22a88 <_kill>

00022a88 <_kill>:
   22a88:	2906      	cmp	r1, #6
   22a8a:	b530      	push	{r4, r5, lr}
   22a8c:	bf0c      	ite	eq
   22a8e:	4d04      	ldreq	r5, [pc, #16]	; (22aa0 <_kill+0x18>)
   22a90:	4d04      	ldrne	r5, [pc, #16]	; (22aa4 <_kill+0x1c>)
   22a92:	2418      	movs	r4, #24
   22a94:	4620      	mov	r0, r4
   22a96:	4629      	mov	r1, r5
   22a98:	beab      	bkpt	0x00ab
   22a9a:	4604      	mov	r4, r0
   22a9c:	4620      	mov	r0, r4
   22a9e:	bd30      	pop	{r4, r5, pc}
   22aa0:	00020023 	.word	0x00020023
   22aa4:	00020026 	.word	0x00020026

00022aa8 <_init>:
   22aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22aaa:	bf00      	nop
   22aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22aae:	bc08      	pop	{r3}
   22ab0:	469e      	mov	lr, r3
   22ab2:	4770      	bx	lr

00022ab4 <_fini>:
   22ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ab6:	bf00      	nop
   22ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22aba:	bc08      	pop	{r3}
   22abc:	469e      	mov	lr, r3
   22abe:	4770      	bx	lr

00022ac0 <__init_array_start>:
   22ac0:	0002072d 	.word	0x0002072d

00022ac4 <__frame_dummy_init_array_entry>:
   22ac4:	00004289 00007579 0000967d 00009a2d     .B..yu..}...-...
   22ad4:	0000a559 0000b0e9 0000d619 0000ee21     Y...........!...
   22ae4:	0000fb49 0000fec1 00011c91 00011d75     I...........u...
   22af4:	000136a1                                .6..

00022af8 <__do_global_dtors_aux_fini_array_entry>:
   22af8:	00004265                                eB..

00022afc <__fini_array_end>:
   22afc:	6c756146 	.word	0x6c756146
   22b00:	70207374 	.word	0x70207374
   22b04:	65736572 	.word	0x65736572
   22b08:	6f20746e 	.word	0x6f20746e
   22b0c:	6f6d206e 	.word	0x6f6d206e
   22b10:	30726f74 	.word	0x30726f74
   22b14:	7943202e 	.word	0x7943202e
   22b18:	6e696c63 	.word	0x6e696c63
   22b1c:	6e652067 	.word	0x6e652067
   22b20:	656c6261 	.word	0x656c6261
   22b24:	67697320 	.word	0x67697320
   22b28:	206c616e 	.word	0x206c616e
   22b2c:	6d206f74 	.word	0x6d206f74
   22b30:	726f746f 	.word	0x726f746f
   22b34:	206f7420 	.word	0x206f7420
   22b38:	61656c63 	.word	0x61656c63
   22b3c:	61662072 	.word	0x61662072
   22b40:	73746c75 	.word	0x73746c75
   22b44:	0000002e 	.word	0x0000002e
   22b48:	6c756146 	.word	0x6c756146
   22b4c:	70207374 	.word	0x70207374
   22b50:	65736572 	.word	0x65736572
   22b54:	6f20746e 	.word	0x6f20746e
   22b58:	6f6d206e 	.word	0x6f6d206e
   22b5c:	31726f74 	.word	0x31726f74
   22b60:	7943202e 	.word	0x7943202e
   22b64:	6e696c63 	.word	0x6e696c63
   22b68:	6e652067 	.word	0x6e652067
   22b6c:	656c6261 	.word	0x656c6261
   22b70:	67697320 	.word	0x67697320
   22b74:	206c616e 	.word	0x206c616e
   22b78:	6d206f74 	.word	0x6d206f74
   22b7c:	726f746f 	.word	0x726f746f
   22b80:	206f7420 	.word	0x206f7420
   22b84:	61656c63 	.word	0x61656c63
   22b88:	61662072 	.word	0x61662072
   22b8c:	73746c75 	.word	0x73746c75
   22b90:	0000002e 	.word	0x0000002e
   22b94:	61656c43 	.word	0x61656c43
   22b98:	676e6972 	.word	0x676e6972
   22b9c:	656c6120 	.word	0x656c6120
   22ba0:	20737472 	.word	0x20737472
   22ba4:	62206e6f 	.word	0x62206e6f
   22ba8:	2068746f 	.word	0x2068746f
   22bac:	6f746f6d 	.word	0x6f746f6d
   22bb0:	002e7372 	.word	0x002e7372
   22bb4:	72656c41 	.word	0x72656c41
   22bb8:	70207374 	.word	0x70207374
   22bbc:	65736572 	.word	0x65736572
   22bc0:	6f20746e 	.word	0x6f20746e
   22bc4:	6f6d206e 	.word	0x6f6d206e
   22bc8:	30726f74 	.word	0x30726f74
   22bcc:	0000203a 	.word	0x0000203a
   22bd0:	20202020 	.word	0x20202020
   22bd4:	69746f4d 	.word	0x69746f4d
   22bd8:	61436e6f 	.word	0x61436e6f
   22bdc:	6c65636e 	.word	0x6c65636e
   22be0:	6e496465 	.word	0x6e496465
   22be4:	72656c41 	.word	0x72656c41
   22be8:	00002074 	.word	0x00002074
   22bec:	20202020 	.word	0x20202020
   22bf0:	69746f4d 	.word	0x69746f4d
   22bf4:	61436e6f 	.word	0x61436e6f
   22bf8:	6c65636e 	.word	0x6c65636e
   22bfc:	6f506465 	.word	0x6f506465
   22c00:	69746973 	.word	0x69746973
   22c04:	694c6576 	.word	0x694c6576
   22c08:	2074696d 	.word	0x2074696d
   22c0c:	00000000 	.word	0x00000000
   22c10:	20202020 	.word	0x20202020
   22c14:	69746f4d 	.word	0x69746f4d
   22c18:	61436e6f 	.word	0x61436e6f
   22c1c:	6c65636e 	.word	0x6c65636e
   22c20:	654e6465 	.word	0x654e6465
   22c24:	69746167 	.word	0x69746167
   22c28:	694c6576 	.word	0x694c6576
   22c2c:	2074696d 	.word	0x2074696d
   22c30:	00000000 	.word	0x00000000
   22c34:	20202020 	.word	0x20202020
   22c38:	69746f4d 	.word	0x69746f4d
   22c3c:	61436e6f 	.word	0x61436e6f
   22c40:	6c65636e 	.word	0x6c65636e
   22c44:	65536465 	.word	0x65536465
   22c48:	726f736e 	.word	0x726f736e
   22c4c:	6f745345 	.word	0x6f745345
   22c50:	00002070 	.word	0x00002070
   22c54:	20202020 	.word	0x20202020
   22c58:	69746f4d 	.word	0x69746f4d
   22c5c:	61436e6f 	.word	0x61436e6f
   22c60:	6c65636e 	.word	0x6c65636e
   22c64:	6f4d6465 	.word	0x6f4d6465
   22c68:	44726f74 	.word	0x44726f74
   22c6c:	62617369 	.word	0x62617369
   22c70:	2064656c 	.word	0x2064656c
   22c74:	00000000 	.word	0x00000000
   22c78:	20202020 	.word	0x20202020
   22c7c:	6f746f4d 	.word	0x6f746f4d
   22c80:	75614672 	.word	0x75614672
   22c84:	6465746c 	.word	0x6465746c
   22c88:	00000020 	.word	0x00000020
   22c8c:	72656c41 	.word	0x72656c41
   22c90:	70207374 	.word	0x70207374
   22c94:	65736572 	.word	0x65736572
   22c98:	6f20746e 	.word	0x6f20746e
   22c9c:	6f6d206e 	.word	0x6f6d206e
   22ca0:	31726f74 	.word	0x31726f74
   22ca4:	0000203a 	.word	0x0000203a
   22ca8:	6f746f4d 	.word	0x6f746f4d
   22cac:	6c612072 	.word	0x6c612072
   22cb0:	20747265 	.word	0x20747265
   22cb4:	65746564 	.word	0x65746564
   22cb8:	64657463 	.word	0x64657463
   22cbc:	0000002e 	.word	0x0000002e
   22cc0:	62616e45 	.word	0x62616e45
   22cc4:	6120656c 	.word	0x6120656c
   22cc8:	6d6f7475 	.word	0x6d6f7475
   22ccc:	63697461 	.word	0x63697461
   22cd0:	656c6120 	.word	0x656c6120
   22cd4:	68207472 	.word	0x68207472
   22cd8:	6c646e61 	.word	0x6c646e61
   22cdc:	20676e69 	.word	0x20676e69
   22ce0:	73207962 	.word	0x73207962
   22ce4:	69747465 	.word	0x69747465
   22ce8:	4820676e 	.word	0x4820676e
   22cec:	4c444e41 	.word	0x4c444e41
   22cf0:	4c415f45 	.word	0x4c415f45
   22cf4:	53545245 	.word	0x53545245
   22cf8:	206f7420 	.word	0x206f7420
   22cfc:	00002e31 	.word	0x00002e31
   22d00:	65766f4d 	.word	0x65766f4d
   22d04:	6e616320 	.word	0x6e616320
   22d08:	656c6563 	.word	0x656c6563
   22d0c:	00002e64 	.word	0x00002e64
   22d10:	69766f4d 	.word	0x69766f4d
   22d14:	6420676e 	.word	0x6420676e
   22d18:	61747369 	.word	0x61747369
   22d1c:	3a65636e 	.word	0x3a65636e
   22d20:	00000020 	.word	0x00000020
   22d24:	6f746f4d 	.word	0x6f746f4d
   22d28:	20302072 	.word	0x20302072
   22d2c:	62616e45 	.word	0x62616e45
   22d30:	0064656c 	.word	0x0064656c
   22d34:	6f746f4d 	.word	0x6f746f4d
   22d38:	20312072 	.word	0x20312072
   22d3c:	62616e45 	.word	0x62616e45
   22d40:	0064656c 	.word	0x0064656c
   22d44:	74696157 	.word	0x74696157
   22d48:	20676e69 	.word	0x20676e69
   22d4c:	20726f66 	.word	0x20726f66
   22d50:	42464c48 	.word	0x42464c48
   22d54:	002e2e2e 	.word	0x002e2e2e
   22d58:	74696157 	.word	0x74696157
   22d5c:	20676e69 	.word	0x20676e69
   22d60:	20726f66 	.word	0x20726f66
   22d64:	42464c48 	.word	0x42464c48
   22d68:	206f7420 	.word	0x206f7420
   22d6c:	65737361 	.word	0x65737361
   22d70:	6f207472 	.word	0x6f207472
   22d74:	6f62206e 	.word	0x6f62206e
   22d78:	6d206874 	.word	0x6d206874
   22d7c:	726f746f 	.word	0x726f746f
   22d80:	00000073 	.word	0x00000073
   22d84:	6f746f4d 	.word	0x6f746f4d
   22d88:	65522072 	.word	0x65522072
   22d8c:	00796461 	.word	0x00796461
   22d90:	62616e45 	.word	0x62616e45
   22d94:	676e696c 	.word	0x676e696c
   22d98:	79616d20 	.word	0x79616d20
   22d9c:	746f6e20 	.word	0x746f6e20
   22da0:	76616820 	.word	0x76616820
   22da4:	6f632065 	.word	0x6f632065
   22da8:	656c706d 	.word	0x656c706d
   22dac:	20646574 	.word	0x20646574
   22db0:	65207361 	.word	0x65207361
   22db4:	63657078 	.word	0x63657078
   22db8:	2e646574 	.word	0x2e646574
   22dbc:	6f725020 	.word	0x6f725020
   22dc0:	64656563 	.word	0x64656563
   22dc4:	74697720 	.word	0x74697720
   22dc8:	61632068 	.word	0x61632068
   22dcc:	6f697475 	.word	0x6f697475
   22dd0:	00002e6e 	.word	0x00002e6e

00022dd4 <CSWTCH.95>:
   22dd4:	02030406 00000002                       ........

00022ddc <_ZN9ClearCoreL11tcc_modulesE>:
   22ddc:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22dec:	43001000                                ...C

00022df0 <_ZTVN9ClearCore11MotorDriverE>:
	...
   22df8:	00004a9d 00004aa1 00004a8d 00004a91     .J...J...J...J..
   22e08:	0000e3dd 00004a81 00004a95 00004a85     .....J...J...J..
   22e18:	00005109 0000593d 00005765 0000585d     .Q..=Y..eW..]X..
   22e28:	00004c05 ffffffd0 00000000 00005855     .L..........UX..
   22e38:	00005935 00004c55                       5Y..UL..

00022e40 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22e40:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22e50:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022e60 <_ZTVN9ClearCore7ISerialE>:
	...
   22e68:	00013525 00013525 00013525 00013525     %5..%5..%5..%5..
   22e78:	00013525 00013525 00013525 00013525     %5..%5..%5..%5..
   22e88:	00013525 00013525 00013525 00013525     %5..%5..%5..%5..
   22e98:	00013525 00013525 00013525 00013525     %5..%5..%5..%5..
   22ea8:	00013525 00013525                       %5..%5..

00022eb0 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22eb8:	00005ce1 00005cd5 00005cf9 00005d05     .\...\...\...]..
   22ec8:	00005d11 00005d1d 00005d29 00005d35     .]...]..)]..5]..
   22ed8:	00005d41 00005d4d 00005d59 00005ce1     A]..M]..Y]...\..
   22ee8:	00005ced 00005ced 00005c59 00005c65     .\...\..Y\..e\..
   22ef8:	00005c69 00005c75 00005c81 00005c8d     i\..u\...\...\..
   22f08:	00005ca1 00005d65 00005d89 00005db9     .\..e]...]...]..
   22f18:	00005cad 00005cb9 00005cc9 fffffffc     .\...\...\......
   22f28:	00000000 00005c85 00005c99 00005ca5     .....\...\...\..
   22f38:	00005d81 00005db1 00005df9 00005cb1     .]...]...]...\..
   22f48:	00005c51 00005ccd 00005cc1 008061fc     Q\...\...\...a..
   22f58:	00806010 00806014 00806018              .`...`...`..

00022f64 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22f6c:	0000ff19 0000ff29 00010e45 000101a1     ....)...E.......
   22f7c:	0001004d 00007589 0000ff3d 0000ff75     M....u..=...u...
   22f8c:	0000ffb5 0000ff91 0000ffa1 0000fff5     ................
   22f9c:	0000ff11 00007591 000102b9 0000758d     .....u.......u..
   22fac:	0001048d 000103a9                       ........

00022fb4 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22fbc:	0000ff19 0000ff29 00010e45 000101a1     ....)...E.......
   22fcc:	0001004d 00007589 0000ff3d 0000ff75     M....u..=...u...
   22fdc:	0000ffb5 0000ff91 0000ffa1 0000fff5     ................
   22fec:	0000ff11 00007591 000102b9 0000758d     .....u.......u..
   22ffc:	0001048d 000103a9 40003c00 4101a000     .........<.@...A
   2300c:	43001400                                ...C

00023010 <_ZN9ClearCore10hBridgeConE>:
   23010:	2000137c 20001400                       |.. ... 

00023018 <_ZN9ClearCore15MotorConnectorsE>:
   23018:	20000b70 20000cb8 20000e00 20000f48     p.. ... ... H.. 

00023028 <_ZN9ClearCoreL10ConnectorsE>:
   23028:	200011f0 2000125c 200012bc 2000131c     ... \.. ... ... 
   23038:	2000137c 20001400 20001160 20001190     |.. ... `.. ... 
   23048:	200011c0 20000b28 20001094 200010d8     ... (.. ... ... 
   23058:	2000111c 20001484 20000b70 20000cb8     ... ... p.. ... 
   23068:	20000e00 20000f48 200015e4 2000173c     ... H.. ... <.. 
   23078:	20001494                                ... 

0002307c <_ZN9ClearCoreL10MicroSD_SSE>:
   2307c:	0504003d ffffff00 ffffffff 00ff0500     =...............

0002308c <_ZN9ClearCoreL10XBee_Rx_INE>:
   2308c:	08180150 ffffff00 ffff0102 00ffffff     P...............

0002309c <_ZN9ClearCoreL11Com0_RTS_SSE>:
   2309c:	02120142 ffffff00 ffff0207 00040001     B...............

000230ac <_ZN9ClearCoreL11Com0_RX_SCKE>:
   230ac:	04140144 ffffff00 ffff0107 00060201     D...............

000230bc <_ZN9ClearCoreL11Com1_RTS_SSE>:
   230bc:	0a0a001c ffffff00 00010200 00040200     ................

000230cc <_ZN9ClearCoreL11Com1_RX_SCKE>:
   230cc:	0909001b ff03ff00 01000100 00ff0100     ................

000230dc <_ZN9ClearCoreL11IN06n_QuadAE>:
   230dc:	00100238 ffffff01 ffff0006 00ff0000     8...............

000230ec <_ZN9ClearCoreL11IN07n_QuadBE>:
   230ec:	01110239 ffffff01 ffff0106 00ff0100     9...............

000230fc <_ZN9ClearCoreL11IN08n_QuadIE>:
   230fc:	0212023a ffffff01 ffff0206 00ff0200     :...............

0002310c <_ZN9ClearCoreL11IN09n_AIN09E>:
   2310c:	0707010e ff09ff01 ffffffff 00ffffff     ................

0002311c <_ZN9ClearCoreL11IN10n_AIN10E>:
   2311c:	0606010d ff08ff01 ffffffff 00ffffff     ................

0002312c <_ZN9ClearCoreL11IN11n_AIN11E>:
   2312c:	0505010a ff07ff01 ffffffff 00ffffff     ................

0002313c <_ZN9ClearCoreL11IN12n_AIN12E>:
   2313c:	03030206 ff05ff01 ffffffff 00ffffff     ................

0002314c <_ZN9ClearCoreL11MicroSD_SCKE>:
   2314c:	09090110 ff01ff00 01040104 00ffffff     ................

0002315c <_ZN9ClearCoreL11XBee_CTS_INE>:
   2315c:	09190253 ffffff00 ffff0302 00ffffff     S...............

0002316c <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   2316c:	09190151 ffffff00 ffff0002 00ffffff     Q...............

0002317c <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   2317c:	05150145 ffffff00 ffff0007 00070301     E...............

0002318c <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   2318c:	ff08001a ff02ff00 00000000 00ff0000     ................

0002319c <_ZN9ClearCoreL12MicroSD_MISOE>:
   2319c:	0a0a0120 ffffff00 00050204 00040400      ...............

000231ac <_ZN9ClearCoreL12MicroSD_MOSIE>:
   231ac:	0808010f ff00ff00 00040004 00ffffff     ................

000231bc <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   231bc:	07170049 ffffff00 01040005 00ff0701     I...............

000231cc <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   231cc:	08180252 ffffff00 ffff0202 00ffffff     R...............

000231dc <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   231dc:	03130143 ffffff00 ffff0307 00050101     C...............

000231ec <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   231ec:	0b0b001d ffffff00 01010300 00050300     ................

000231fc <_ZN9ClearCoreL13IN00n_Aout00nE>:
   231fc:	05050012 01ffff00 0100ffff 00ffffff     ................

0002320c <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   2320c:	04140046 ffffff01 00070205 00ff0401     F...............

0002321c <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   2321c:	00100140 ffffff00 00060005 00020003     @...............

0002322c <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   2322c:	03030164 ffffff00 0106ffff 00ffffff     d...............

0002323c <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   2323c:	0e0e0124 ffffff00 00050204 00000004     $...............

0002324c <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   2324c:	0c0c0122 ffffff00 00040004 00060003     "...............

0002325c <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   2325c:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

0002326c <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   2326c:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

0002327c <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   2327c:	0f0f0125 ffffff00 01050304 00010104     %...............

0002328c <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   2328c:	0d0d0123 ffffff00 01040104 00070103     #...............

0002329c <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   2329c:	06160048 ffffff00 00040003 00ff0601     H...............

000232ac <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   232ac:	00100034 ffffff00 00020001 00020001     4...............

000232bc <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   232bc:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

000232cc <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   232cc:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

000232dc <_ZN9ClearCoreL5IN01nE>:
   232dc:	02110107 00ffff00 ffffffff 00ffffff     ................

000232ec <_ZN9ClearCoreL5IN02nE>:
   232ec:	03030008 ffffff00 ffffffff 00ffffff     ................

000232fc <_ZN9ClearCoreL5IN03nE>:
   232fc:	04150211 ffffff00 0000ffff 00ffffff     ................

0002330c <_ZN9ClearCoreL5IN04nE>:
   2330c:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

0002331c <_ZN9ClearCoreL5IN05nE>:
   2331c:	0313023b ffffff00 ffff0306 00ff0300     ;...............

0002332c <_ZN9ClearCoreL5OUT00E>:
   2332c:	00000001 ffffff00 0002ffff 00ffffff     ................

0002333c <_ZN9ClearCoreL5OUT01E>:
   2333c:	01010002 ffffff00 0102ffff 00ffffff     ................

0002334c <_ZN9ClearCoreL5OUT02E>:
   2334c:	06060013 ffffff00 0001ffff 00ffffff     ................

0002335c <_ZN9ClearCoreL5OUT03E>:
   2335c:	07070014 ffffff00 0101ffff 00ffffff     ................

0002336c <_ZN9ClearCoreL6Aout00E>:
   2336c:	02020007 01ffff00 0100ffff 00ffffff     ................

0002337c <_ZN9ClearCoreL6Mtr0_BE>:
   2337c:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

0002338c <_ZN9ClearCoreL6Mtr1_BE>:
   2338c:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

0002339c <_ZN9ClearCoreL7Mtr1_AnE>:
   2339c:	05150047 ffffff00 01070305 00ff0501     G...............

000233ac <_ZN9ClearCoreL9Mtr1_HLFBE>:
   233ac:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   233bc:	00000080 00000040 00000020 00000010     ....@... .......
   233cc:	00000008 00000004 01000000 02000000     ................
   233dc:	04000000 08000000 00800000 00400000     ..............@.
   233ec:	00200000 00004000 00008000 00040000     .. ..@..........
   233fc:	00080000                                ....

00023400 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   23408:	0000b0f9 0000b16d 00013525              ....m...%5..

00023414 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23414:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023424 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23424:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023434 <_ZN9ClearCoreL11IN08n_QuadIE>:
   23434:	0212023a ffffff01 ffff0206 00ff0200     :...............
   23444:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   23454:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   23464:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   23474:	2e747369 00000063 000234bc 000234ac     ist.c....4...4..
   23484:	0002348c 0002349c                       .4...4..

0002348c <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   2348c:	01010204 ff0bff00 ffffffff 00ffffff     ................

0002349c <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   2349c:	00000203 ff0aff00 ffffffff 00ffffff     ................

000234ac <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   234ac:	02020205 ff04ff00 ffffffff 00ffffff     ................

000234bc <_ZN9ClearCoreL9_5VOB_MONE>:
   234bc:	04040109 ff06ff00 ffffffff 00ffffff     ................

000234cc <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   234d4:	0000d66d 0000d89d 0000d671 0000d675     m.......q...u...
   234e4:	0000d995 0000d9b1 0000d665 00004a85     ........e....J..
   234f4:	0000d885 0000da4d                       ....M...

000234fc <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   23504:	0000daf1 0000db01 0000daf5 0000daf9     ................
   23514:	0000dd55 0000dafd 0000daed 00004a85     U............J..
   23524:	0000dc29 0000dca1                       ).......

0002352c <_ZTVN9ClearCore12DigitalInOutE>:
	...
   23534:	0000dd9d 0000de71 0000dda1 0000dda5     ....q...........
   23544:	0000e30d 0000ddb9 0000d665 00004a85     ........e....J..
   23554:	0000e101 0000e34d                       ....M...

0002355c <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   2355c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   2356c:	42001400 42001800 43001400 43001800     ...B...B...C...C

0002357c <_ZTVN9ClearCore9ConnectorE>:
	...
   23584:	0000e3c1 00013525 00013525 00013525     ....%5..%5..%5..
   23594:	00013525 00013525 00013525 00005c51     %5..%5..%5..Q\..
   235a4:	00013525 00013525                       %5..%5..

000235ac <_ZTVN9ClearCore9DigitalInE>:
	...
   235b4:	0000e3c5 0000e3c9 0000e3d5 0000e3d9     ................
   235c4:	0000e3dd 00004a81 0000daed 00004a85     .....J.......J..
   235d4:	0000e4d1 0000e405                       ........

000235dc <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   235e4:	0000e731 0000ebc9 0000e735 0000e739     1.......5...9...
   235f4:	0000e7fd 0000e839 0000d665 00004a85     ....9...e....J..
   23604:	0000e9ed 0000eb01                       ........

0002360c <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   2360c:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   2361c:	43001000                                ...C

00023620 <_ZTVN9ClearCore7CcioPinE>:
	...
   23628:	0000fb59 0000fbb5 0000fb5d 0000fb61     Y.......]...a...
   23638:	0000fc25 0000fc81 0000fc61 00005c51     %.......a...Q\..
   23648:	0000fb71 0000fb75                       q...u...

00023650 <_ZTVN9ClearCore10SerialBaseE>:
	...
   23658:	0000ff19 0000ff29 00010e45 000101a1     ....)...E.......
   23668:	0001004d 00007589 0000ff3d 0000ff75     M....u..=...u...
   23678:	0000ffb5 0000ff91 0000ffa1 0000fff5     ................
   23688:	0000ff11 00007591 000102b9 0000758d     .....u.......u..
   23698:	0001048d 000103a9                       ........

000236a0 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   236a0:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   236b0:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000236c0 <_ZTVN9ClearCore12SerialDriverE>:
	...
   236c8:	0000ff19 0000ff29 00011515 00011569     ....).......i...
   236d8:	000113a5 00007589 0000ff3d 0000ff75     .....u..=...u...
   236e8:	0000ffb5 0000ff91 0000ffa1 0000fff5     ................
   236f8:	0000ff11 00007591 000102b9 0000758d     .....u.......u..
   23708:	0001048d 000103a9 000112f9 000113c1     ................
   23718:	00011309 00011315 00011325 000116ad     ........%.......
   23728:	00011339 000115b5 00011345 fffffebc     9.......E.......
   23738:	00000000 00011301 0001150d 0001130d     ................
   23748:	0001131d 00011331 00011761 0001133d     ....1...a...=...
   23758:	00005c51 00011349 000116a5              Q\..I.......

00023764 <_ZTVN9ClearCore9LedDriverE>:
	...
   2376c:	00011769 0001176d 00011779 0001177d     i...m...y...}...
   2377c:	00011791 000117a9 00011781 00005c51     ............Q\..
   2378c:	00011785 00011789                       ........

00023794 <_usb_ep_cfgs>:
   23794:	20001f3c 00000000 00000040 20001f7c     <.. ....@...|.. 
   237a4:	00000000 00000040 20001fbc 00000000     ....@...... ....
   237b4:	00000040                                @...

000237b8 <sinTable_q15>:
   237b8:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   237c8:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   237d8:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   237e8:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   237f8:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   23808:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   23818:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   23828:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   23838:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   23848:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   23858:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   23868:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   23878:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   23888:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   23898:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   238a8:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   238b8:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   238c8:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   238d8:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   238e8:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   238f8:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   23908:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   23918:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   23928:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   23938:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   23948:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   23958:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   23968:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   23978:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   23988:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   23998:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   239a8:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   239b8:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   239c8:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   239d8:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   239e8:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   239f8:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   23a08:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   23a18:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   23a28:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   23a38:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   23a48:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   23a58:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   23a68:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   23a78:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   23a88:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   23a98:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   23aa8:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   23ab8:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   23ac8:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   23ad8:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   23ae8:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   23af8:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   23b08:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   23b18:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   23b28:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   23b38:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   23b48:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   23b58:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   23b68:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   23b78:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   23b88:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   23b98:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   23ba8:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   23bb8:	00000000 65727570 72697620 6c617574     ....pure virtual
   23bc8:	74656d20 20646f68 6c6c6163 000a6465      method called..
   23bd8:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

00023be8 <_ZTISt9bad_alloc>:
   23be8:	00023d08 00023bf4 00023c48              .=...;..H<..

00023bf4 <_ZTSSt9bad_alloc>:
   23bf4:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023c04 <_ZTVSt9bad_alloc>:
   23c04:	00000000 00023be8 00013541 00013555     .....;..A5..U5..
   23c14:	00013539 3a647473 6461623a 6378655f     95..std::bad_exc
   23c24:	69747065 00006e6f                       eption..

00023c2c <_ZTIN10__cxxabiv115__forced_unwindE>:
   23c2c:	00023d7c 00023c50                       |=..P<..

00023c34 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23c34:	00023d7c 00023c70                       |=..p<..

00023c3c <_ZTISt13bad_exception>:
   23c3c:	00023d08 00023c94 00023c48              .=...<..H<..

00023c48 <_ZTISt9exception>:
   23c48:	00023d7c 00023ca8                       |=...<..

00023c50 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23c50:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23c60:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023c70 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23c70:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23c80:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23c90:	00456e6f                                onE.

00023c94 <_ZTSSt13bad_exception>:
   23c94:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23ca4:	0000006e                                n...

00023ca8 <_ZTSSt9exception>:
   23ca8:	65397453 70656378 6e6f6974 00000000     St9exception....

00023cb8 <_ZTVSt13bad_exception>:
   23cb8:	00000000 00023c3c 000136cd 000136d9     ....<<...6...6..
   23cc8:	000136d1                                .6..

00023ccc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23ccc:	00023d08 00023cd8 00023d44              .=...<..D=..

00023cd8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23cd8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23ce8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23cf8:	456f666e 00000000                       nfoE....

00023d00 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23d00:	00000000 00023ccc 000138a1 000138b5     .....<...8...8..
   23d10:	000139cd 000139cd 00013a89 000139fd     .9...9...:...9..
   23d20:	0001399d 0001390d 000138d1              .9...9...8..

00023d2c <_ZTISt9type_info>:
   23d2c:	00023d7c 00023d34                       |=..4=..

00023d34 <_ZTSSt9type_info>:
   23d34:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023d44 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23d44:	00023d08 00023d50 00023d2c              .=..P=..,=..

00023d50 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23d50:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23d60:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23d70:	00000045                                E...

00023d74 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23d74:	00000000 00023d44 00013a41 00013a55     ....D=..A:..U:..
   23d84:	000139cd 000139cd 00013a89 000139fd     .9...9...:...9..
   23d94:	00013a71 00013ab5 00013a35 6d726574     q:...:..5:..term
   23da4:	74616e69 61632065 64656c6c 63657220     inate called rec
   23db4:	69737275 796c6576 0000000a 6d726574     ursively....term
   23dc4:	74616e69 61632065 64656c6c 74666120     inate called aft
   23dd4:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23de4:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23df4:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23e04:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23e14:	69746361 65206576 70656378 6e6f6974     active exception
   23e24:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023e34 <standard_subs>:
   23e34:	00000074 00024618 00000003 00024618     t....F.......F..
   23e44:	00000003 00000000 00000000 00000061     ............a...
   23e54:	0002492c 0000000e 0002492c 0000000e     ,I......,I......
   23e64:	0002493c 00000009 00000062 00024948     <I......b...HI..
   23e74:	00000011 00024948 00000011 0002495c     ....HI......\I..
   23e84:	0000000c 00000073 0002496c 0000000b     ....s...lI......
   23e94:	00024978 00000046 0002495c 0000000c     xI..F...\I......
   23ea4:	00000069 000249c0 0000000c 000249d0     i....I.......I..
   23eb4:	00000031 00024a04 0000000d 0000006f     1....J......o...
   23ec4:	00024a14 0000000c 00024a24 00000031     .J......$J..1...
   23ed4:	00024a58 0000000d 00000064 00024a68     XJ......d...hJ..
   23ee4:	0000000d 00024a78 00000032 00024aac     ....xJ..2....J..
   23ef4:	0000000e                                ....

00023ef8 <cplus_demangle_builtin_types>:
   23ef8:	00024cbc 0000000b 00024cbc 0000000b     .L.......L......
   23f08:	00000000 00024cc8 00000004 00024cd0     .....L.......L..
   23f18:	00000007 00000007 00024cd8 00000004     .........L......
   23f28:	00024ce0 00000004 00000000 00024ce8     .L...........L..
   23f38:	00000006 00024ce8 00000006 00000008     .....L..........
   23f48:	00024cf0 0000000b 00024cf0 0000000b     .L.......L......
   23f58:	00000008 00024cfc 00000005 00024cfc     .....L.......L..
   23f68:	00000005 00000008 00024d04 0000000a     .........M......
   23f78:	00024d04 0000000a 00000008 00024d10     .M...........M..
   23f88:	0000000d 00024d10 0000000d 00000000     .....M..........
   23f98:	00024d20 00000003 00024d20 00000003      M...... M......
   23fa8:	00000001 00024d24 0000000c 00024d34     ....$M......4M..
   23fb8:	00000008 00000002 00000000 00000000     ................
	...
   23fd4:	00024d40 00000004 00024d40 00000004     @M......@M......
   23fe4:	00000003 00024d48 0000000d 00024d48     ....HM......HM..
   23ff4:	0000000d 00000004 00024d58 00000008     ........XM......
   24004:	00024d58 00000008 00000000 00024d64     XM..........dM..
   24014:	00000011 00024d64 00000011 00000000     ....dM..........
	...
   24060:	00024d78 00000005 00024d78 00000005     xM......xM......
   24070:	00000000 00024d80 0000000e 00024d80     .....M.......M..
   24080:	0000000e 00000000 00000000 00000000     ................
	...
   2409c:	00024d90 00000004 00024d90 00000004     .M.......M......
   240ac:	00000009 00024d98 00000007 00024cd8     .....M.......L..
   240bc:	00000004 00000000 00024da0 00000009     .........M......
   240cc:	00024d40 00000004 00000005 00024dac     @M...........M..
   240dc:	00000012 00024dac 00000012 00000006     .....M..........
   240ec:	00022d54 00000003 00022d54 00000003     T-......T-......
   240fc:	00000000 00024dc0 00000009 00024dc0     .....M.......M..
   2410c:	00000009 00000000 00024dcc 00000009     .........M......
   2411c:	00024dcc 00000009 00000000 00024dd8     .M...........M..
   2412c:	0000000a 00024dd8 0000000a 00000000     .....M..........
   2413c:	00024de4 00000004 00024de4 00000004     .M.......M......
   2414c:	00000008 00024dec 00000008 00024dec     .....M.......M..
   2415c:	00000008 00000000 00024df8 00000008     .........M......
   2416c:	00024df8 00000008 00000000 00024e04     .M...........N..
   2417c:	00000011 00024e04 00000011 00000000     .....N..........

0002418c <cplus_demangle_operators>:
   2418c:	00024abc 00024ac0 00000002 00000002     .J...J..........
   2419c:	00024ac4 00024ac8 00000001 00000002     .J...J..........
   241ac:	00024acc 000248f0 00000002 00000002     .J...H..........
   241bc:	000247e8 00024ad0 00000001 00000001     .G...J..........
   241cc:	00024ad4 00024ad0 00000001 00000002     .J...J..........
   241dc:	00024ad8 00024adc 00000008 00000001     .J...J..........
   241ec:	00024ae8 00024adc 00000008 00000001     .J...J..........
   241fc:	00024aec 00024af0 0000000a 00000002     .J...J..........
   2420c:	000245f8 00024afc 00000002 00000002     .E...J..........
   2421c:	00024b00 00024b04 00000001 00000002     .K...K..........
   2422c:	00024b08 00024b0c 00000001 00000001     .K...K..........
   2423c:	00024b10 00024b14 00000002 00000002     .K...K..........
   2424c:	00024b18 00024b1c 00000009 00000001     .K...K..........
   2425c:	00024b28 00024b2c 0000000c 00000002     (K..,K..........
   2426c:	00024b3c 00024b40 00000001 00000001     <K..@K..........
   2427c:	00024b44 00024b48 00000007 00000001     DK..HK..........
   2428c:	00024b50 00024b54 00000002 00000002     PK..TK..........
   2429c:	000245fc 00024c84 00000001 00000002     .E...L..........
   242ac:	00024b58 00024b5c 00000001 00000002     XK..\K..........
   242bc:	00024b60 00024b64 00000002 00000002     `K..dK..........
   242cc:	00024b68 00024b6c 00000001 00000002     hK..lK..........
   242dc:	00024b70 00024b74 00000002 00000002     pK..tK..........
   242ec:	00024b78 00022d54 00000003 00000003     xK..T-..........
   242fc:	00024b7c 00022d54 00000003 00000003     |K..T-..........
   2430c:	00024b80 00022d54 00000003 00000002     .K..T-..........
   2431c:	00024b84 00022d54 00000003 00000002     .K..T-..........
   2432c:	00024b88 00024b8c 00000002 00000002     .K...K..........
   2433c:	000247ec 00024640 00000002 00000001     .G..@F..........
   2434c:	00024b90 00024a00 00000001 00000002     .K...J..........
   2435c:	000247f4 00024660 00000002 00000002     .G..`F..........
   2436c:	00024b94 00024b98 00000003 00000002     .K...K..........
   2437c:	00024cec 00024b9c 00000002 00000002     .L...K..........
   2438c:	00024634 00024ba0 0000000b 00000001     4F...K..........
   2439c:	00024bac 00024bb0 00000002 00000002     .K...K..........
   243ac:	00024bb4 00024bb8 00000001 00000002     .K...K..........
   243bc:	00024bbc 00024bc0 00000002 00000002     .K...K..........
   243cc:	00024bc4 00024bc8 00000002 00000002     .K...K..........
   243dc:	00024bcc 00024bd0 00000001 00000002     .K...K..........
   243ec:	00024bd4 00024b40 00000001 00000002     .K..@K..........
   243fc:	00024bd8 00024bdc 00000002 00000001     .K...K..........
   2440c:	00024be0 00024be4 00000005 00000003     .K...K..........
   2441c:	00024bec 00024bf0 00000002 00000002     .K...K..........
   2442c:	00024dbc 00024bd0 00000001 00000001     .M...K..........
   2443c:	00024bf4 00024bf8 00000001 00000001     .K...K..........
   2444c:	00024bfc 00024c00 00000003 00000003     .K...L..........
   2445c:	00024c04 00024c08 00000002 00000002     .L...L..........
   2446c:	00024c0c 00024c10 00000002 00000002     .L...L..........
   2447c:	00024938 00024c14 00000001 00000002     8I...L..........
   2448c:	00024c18 00024c1c 00000002 00000002     .L...L..........
   2449c:	00024c20 00024c24 00000001 00000002      L..$L..........
   244ac:	00024c28 00024c2c 00000003 00000002     (L..,L..........
   244bc:	00024c30 00024c34 00000002 00000001     0L..4L..........
   244cc:	00024c38 00024c24 00000001 00000001     8L..$L..........
   244dc:	00024600 00024c3c 00000002 00000002     .F..<L..........
   244ec:	00024604 00024c40 00000001 00000003     .F..@L..........
   244fc:	00024c44 00024c48 00000002 00000002     DL..HL..........
   2450c:	00024c4c 00024c50 00000003 00000002     LL..PL..........
   2451c:	00024c54 00024c58 00000010 00000002     TL..XL..........
   2452c:	00024c6c 00024c70 00000001 00000002     lL..pL..........
   2453c:	00024c74 00024c78 00000002 00000002     tL..xL..........
   2454c:	000245f4 00024c7c 00000009 00000001     .E..|L..........
   2455c:	000248b8 00024c7c 00000009 00000001     .H..|L..........
   2456c:	00024c88 00024c8c 0000000b 00000002     .L...L..........
   2457c:	00024af8 00024c98 00000007 00000001     .J...L..........
   2458c:	00024ca0 00024c98 00000007 00000001     .L...L..........
   2459c:	00024ca4 00024ca8 00000005 00000000     .L...L..........
   245ac:	00024cb0 00024cb4 00000006 00000001     .L...L..........
	...
   245cc:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   245dc:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   245ec:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   245fc:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   2460c:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   2461c:	6f747561 00000000 6c636564 65707974     auto....decltype
   2462c:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   2463c:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   2464c:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   2465c:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   2466c:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   2467c:	20726f66 00000000 736e6f63 63757274     for ....construc
   2468c:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   2469c:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   246ac:	6f666e69 726f6620 00000020 65707974     info for ...type
   246bc:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   246cc:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   246dc:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   246ec:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   246fc:	6e616972 65722074 6e727574 75687420     riant return thu
   2470c:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   2471c:	66207373 0020726f 72617567 61762064     ss for .guard va
   2472c:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   2473c:	74696e69 6e756620 6f697463 6f66206e     init function fo
   2474c:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   2475c:	636e7566 6e6f6974 726f6620 00000020     function for ...
   2476c:	65666572 636e6572 65742065 726f706d     reference tempor
   2477c:	20797261 00000023 64646968 61206e65     ary #...hidden a
   2478c:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   2479c:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   247ac:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   247bc:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   247cc:	0000202c 7265706f 726f7461 00000000     , ..operator....
   247dc:	7265706f 726f7461 00000020 00006461     operator ...ad..
   247ec:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   247fc:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   2480c:	006c6c75 736c6166 00000065 65757274     ull.false...true
   2481c:	00000000 6176616a 73657220 6372756f     ....java resourc
   2482c:	00002065 6c636564 65707974 00002820     e ..decltype (..
   2483c:	73696874 00000000 7261707b 0000236d     this....{parm#..
   2484c:	626f6c67 63206c61 74736e6f 74637572     global construct
   2485c:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   2486c:	626f6c67 64206c61 72747365 6f746375     global destructo
   2487c:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   2488c:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   2489c:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   248ac:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   248bc:	73657220 63697274 00000074 6c6f7620      restrict... vol
   248cc:	6c697461 00000065 6e6f6320 00007473     atile... const..
   248dc:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   248ec:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   248fc:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   2490c:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   2491c:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   2492c:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   2493c:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   2494c:	7361623a 735f6369 6e697274 00000067     :basic_string...
   2495c:	69736162 74735f63 676e6972 00000000     basic_string....
   2496c:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   2497c:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   2498c:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   2499c:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   249ac:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   249bc:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   249cc:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   249dc:	65727473 633c6d61 2c726168 64747320     stream<char, std
   249ec:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   249fc:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24a0c:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24a1c:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24a2c:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   24a3c:	64747320 68633a3a 745f7261 74696172      std::char_trait
   24a4c:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   24a5c:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   24a6c:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   24a7c:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   24a8c:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   24a9c:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   24aac:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   24abc:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   24acc:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24adc:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24aec:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24afc:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24b0c:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24b1c:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24b2c:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   24b3c:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   24b4c:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   24b5c:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   24b6c:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   24b7c:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   24b8c:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   24b9c:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   24bac:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   24bbc:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   24bcc:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24bdc:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24bec:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24bfc:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24c0c:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24c1c:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24c2c:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24c3c:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24c4c:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24c5c:	70726574 5f746572 74736163 00000000     terpret_cast....
   24c6c:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   24c7c:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   24c8c:	74617473 635f6369 00747361 657a6973     static_cast.size
   24c9c:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   24cac:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   24cbc:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   24ccc:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24cdc:	00000000 65747962 00000000 62756f64     ....byte....doub
   24cec:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24cfc:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24d0c:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24d1c:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24d2c:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24d3c:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24d4c:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24d5c:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24d6c:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24d7c:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24d8c:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24d9c:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24dac:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24dbc:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24dcc:	69636564 366c616d 00000034 69636564     decimal64...deci
   24ddc:	316c616d 00003832 666c6168 00000000     mal128..half....
   24dec:	72616863 745f3631 00000000 72616863     char16_t....char
   24dfc:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24e0c:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24e1c:	00000000 74727173 00000066              ....sqrtf...

00024e28 <TWO52>:
   24e28:	00000000 43300000 00000000 c3300000     ......0C......0.

00024e38 <_global_impure_ptr>:
   24e38:	20000108 00000043 49534f50 00000058     ... C...POSIX...
   24e48:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24e58:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24e68:	00000000 33323130 37363534 62613938     ....0123456789ab
   24e78:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24e88:	00000030                                0...

00024e8c <blanks.8346>:
   24e8c:	20202020 20202020 20202020 20202020                     

00024e9c <zeroes.8347>:
   24e9c:	30303030 30303030 30303030 30303030     0000000000000000
   24eac:	33323130 37363534 62613938 66656463     0123456789abcdef
   24ebc:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24ecc:	7a797877 00000000                       wxyz....

00024ed4 <_ctype_>:
   24ed4:	20202000 20202020 28282020 20282828     .         ((((( 
   24ee4:	20202020 20202020 20202020 20202020                     
   24ef4:	10108820 10101010 10101010 10101010      ...............
   24f04:	04040410 04040404 10040404 10101010     ................
   24f14:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24f24:	01010101 01010101 01010101 10101010     ................
   24f34:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24f44:	02020202 02020202 02020202 10101010     ................
   24f54:	00000020 00000000 00000000 00000000      ...............
	...
   24fd8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024fe8 <__mprec_bigtens>:
   24fe8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24ff8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   25008:	7f73bf3c 75154fdd                       <.s..O.u

00025010 <__mprec_tens>:
   25010:	00000000 3ff00000 00000000 40240000     .......?......$@
   25020:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   25030:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   25040:	00000000 412e8480 00000000 416312d0     .......A......cA
   25050:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   25060:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   25070:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   25080:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   25090:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   250a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   250b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   250c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   250d0:	79d99db4 44ea7843                       ...yCx.D

000250d8 <p05.7178>:
   250d8:	00000005 00000019 0000007d              ........}...

000250e4 <__EH_FRAME_BEGIN__>:
   250e4:	00000000                                ....
